------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 10th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00ce ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00 00    Temp       ds	3
     61 U0086		       00	   Rand8      ds	1
     62 U0087		       00	   Rand16     ds	1
     63 U0088
     64 U0088		       00 00	   VBlankPtr  ds	2
     65 U008a		       00 00	   KernelPtr  ds	2
     66 U008c		       00 00	   OverScanPtr ds	2
     67 U008e
     68 U008e		       00	   Frame      ds	1
     69 U008f		       00 00	   FrameTimer ds	2
     70 U0091
     71 U0091		       00	   AudioStep  ds	1
     72 U0092
     73 U0092		       00	   SampleStep ds	1
     74 U0093
     75 U0093							; Score
     76 U0093
     77 U0093		       00 00	   ScoreValue ds	2
     78 U0095		       00 00	   ScoreDigitOnes ds	2
     79 U0097		       00 00	   ScoreDigitTens ds	2
     80 U0099		       00 00 00    ScoreDigitGfx ds	3
     81 U009c		       00 00	   ScoreBarGfx ds	2
     82 U009e
     83 U009e							; Level
     84 U009e		       00	   LevelCurrent ds	1
     85 U009f
     86 U009f							; Web
     87 U009f
     88 U009f		       00	   WebIndex   ds	1
     89 U00a0		       00 00	   WebColor   ds	2
     90 U00a2
     91 U00a2							; Spider
     92 U00a2
     93 U00a2		       00 00	   SpiderPtr  ds	2
     94 U00a4		       00 00	   SpiderPos  ds	2
     95 U00a6		       00	   SpiderCtrl ds	1
     96 U00a7		       00	   SpiderColor ds	1
     97 U00a8
     98 U00a8		       00	   SpiderIndex ds	1
     99 U00a9		       00	   SpiderDrawPos ds	1
    100 U00aa		       00	   SpiderLine ds	1
    101 U00ab
    102 U00ab		       00 00	   SpiderPtr2 ds	2
    103 U00ad
    104 U00ad							; Line
    105 U00ad
    106 U00ad		       00	   LineEnabled ds	1
    107 U00ae		       00 00	   LinePos    ds	2
    108 U00b0		       00 00	   LineVelocity ds	2
    109 U00b2		       00 00	   LineStartPos ds	2
    110 U00b4		       00 00	   LineDrawPos ds	2
    111 U00b6
    112 U00b6							; Bug
    113 U00b6
    114 U00b6		       00	   BugSpeed   ds	1
    115 U00b7
    116 U00b7		       00 00	   BugStunned ds	2
    117 U00b9		       00 00	   BugPosX    ds	2
    118 U00bb		       00 00	   BugPosY    ds	2
    119 U00bd		       00 00	   BugColor   ds	2
    120 U00bf
    121 U00bf		       00 00	   BugDrawPosBottom ds	2
    122 U00c1		       00 00	   BugDrawPosTop ds	2
    123 U00c3
    124 U00c3							; Swatter
    125 U00c3
    126 U00c3		       00 00	   SwatterPos ds	2
    127 U00c5		       00	   SwatterState ds	1
    128 U00c6		       00	   SwatterColor ds	1
    129 U00c7
    130 U00c7		       00	   SwatterWaitTime ds	1
    131 U00c8		       00	   SwatterHitDamage ds	1
    132 U00c9
    133 U00c9		       00	   SwatterIndex ds	1
    134 U00ca		       00	   SwatterDrawPos ds	1
    135 U00cb		       00	   SwatterLine ds	1
    136 U00cc
    137 U00cc		       00	   SwatterSampleCount ds	1
    138 U00cd		       00	   SwatterSampleF ds	1
    139 U00ce
    140  10000 ????				       SEG
    141  f000					      org	$F000	; Start of cart area
    142  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 86		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 87		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 86		      sta	Rand8
     49  f01e		       45 87		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 83		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 84		      sta	Temp+1
     70  f029		       85 85		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 83		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 84		      lda	Temp+1	; And add into result
     77  f031		       65 84		      adc	Temp+1
     78  f033		       85 84		      sta	Temp+1
     79  f035
     80  f035		       a5 85		      lda	Temp+2	; Propagating any carry
     81  f037		       65 85		      adc	Temp+2
     82  f039		       85 85		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 84		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 85		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    144  f044
    145  f044							; Assets
    146  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    150  f0bc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0bc					      include	"objects/score_digits.asm"
      1  f0bc				   ScoreDigits
      2  f0bc
      3  f0bc		       77		      .BYTE.b	%01110111
      4  f0bd		       55		      .BYTE.b	%01010101
      5  f0be		       55		      .BYTE.b	%01010101
      6  f0bf		       55		      .BYTE.b	%01010101
      7  f0c0		       77		      .BYTE.b	%01110111
      8  f0c1
      9  f0c1		       11		      .BYTE.b	%00010001
     10  f0c2		       11		      .BYTE.b	%00010001
     11  f0c3		       11		      .BYTE.b	%00010001
     12  f0c4		       11		      .BYTE.b	%00010001
     13  f0c5		       11		      .BYTE.b	%00010001
     14  f0c6
     15  f0c6		       77		      .BYTE.b	%01110111
     16  f0c7		       11		      .BYTE.b	%00010001
     17  f0c8		       77		      .BYTE.b	%01110111
     18  f0c9		       44		      .BYTE.b	%01000100
     19  f0ca		       77		      .BYTE.b	%01110111
     20  f0cb
     21  f0cb		       77		      .BYTE.b	%01110111
     22  f0cc		       11		      .BYTE.b	%00010001
     23  f0cd		       33		      .BYTE.b	%00110011
     24  f0ce		       11		      .BYTE.b	%00010001
     25  f0cf		       77		      .BYTE.b	%01110111
     26  f0d0
     27  f0d0		       55		      .BYTE.b	%01010101
     28  f0d1		       55		      .BYTE.b	%01010101
     29  f0d2		       77		      .BYTE.b	%01110111
     30  f0d3		       11		      .BYTE.b	%00010001
     31  f0d4		       11		      .BYTE.b	%00010001
     32  f0d5
     33  f0d5		       77		      .BYTE.b	%01110111
     34  f0d6		       44		      .BYTE.b	%01000100
     35  f0d7		       77		      .BYTE.b	%01110111
     36  f0d8		       11		      .BYTE.b	%00010001
     37  f0d9		       77		      .BYTE.b	%01110111
     38  f0da
     39  f0da		       77		      .BYTE.b	%01110111
     40  f0db		       44		      .BYTE.b	%01000100
     41  f0dc		       77		      .BYTE.b	%01110111
     42  f0dd		       55		      .BYTE.b	%01010101
     43  f0de		       77		      .BYTE.b	%01110111
     44  f0df
     45  f0df		       77		      .BYTE.b	%01110111
     46  f0e0		       11		      .BYTE.b	%00010001
     47  f0e1		       22		      .BYTE.b	%00100010
     48  f0e2		       22		      .BYTE.b	%00100010
     49  f0e3		       22		      .BYTE.b	%00100010
     50  f0e4
     51  f0e4		       77		      .BYTE.b	%01110111
     52  f0e5		       55		      .BYTE.b	%01010101
     53  f0e6		       77		      .BYTE.b	%01110111
     54  f0e7		       55		      .BYTE.b	%01010101
     55  f0e8		       77		      .BYTE.b	%01110111
     56  f0e9
     57  f0e9		       77		      .BYTE.b	%01110111
     58  f0ea		       55		      .BYTE.b	%01010101
     59  f0eb		       77		      .BYTE.b	%01110111
     60  f0ec		       11		      .BYTE.b	%00010001
     61  f0ed		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f0ee					      include	"objects/score_digits_flip.asm"
      1  f0ee				   ScoreDigitsFlip
      2  f0ee
      3  f0ee		       ee		      .BYTE.b	%11101110
      4  f0ef		       aa		      .BYTE.b	%10101010
      5  f0f0		       aa		      .BYTE.b	%10101010
      6  f0f1		       aa		      .BYTE.b	%10101010
      7  f0f2		       ee		      .BYTE.b	%11101110
      8  f0f3
      9  f0f3		       88		      .BYTE.b	%10001000
     10  f0f4		       88		      .BYTE.b	%10001000
     11  f0f5		       88		      .BYTE.b	%10001000
     12  f0f6		       88		      .BYTE.b	%10001000
     13  f0f7		       88		      .BYTE.b	%10001000
     14  f0f8
     15  f0f8		       ee		      .BYTE.b	%11101110
     16  f0f9		       88		      .BYTE.b	%10001000
     17  f0fa		       ee		      .BYTE.b	%11101110
     18  f0fb		       22		      .BYTE.b	%00100010
     19  f0fc		       ee		      .BYTE.b	%11101110
     20  f0fd
     21  f0fd		       ee		      .BYTE.b	%11101110
     22  f0fe		       88		      .BYTE.b	%10001000
     23  f0ff		       cc		      .BYTE.b	%11001100
     24  f100		       88		      .BYTE.b	%10001000
     25  f101		       ee		      .BYTE.b	%11101110
     26  f102
     27  f102		       aa		      .BYTE.b	%10101010
     28  f103		       aa		      .BYTE.b	%10101010
     29  f104		       ee		      .BYTE.b	%11101110
     30  f105		       88		      .BYTE.b	%10001000
     31  f106		       88		      .BYTE.b	%10001000
     32  f107
     33  f107		       ee		      .BYTE.b	%11101110
     34  f108		       22		      .BYTE.b	%00100010
     35  f109		       ee		      .BYTE.b	%11101110
     36  f10a		       88		      .BYTE.b	%10001000
     37  f10b		       ee		      .BYTE.b	%11101110
     38  f10c
     39  f10c		       ee		      .BYTE.b	%11101110
     40  f10d		       22		      .BYTE.b	%00100010
     41  f10e		       ee		      .BYTE.b	%11101110
     42  f10f		       aa		      .BYTE.b	%10101010
     43  f110		       ee		      .BYTE.b	%11101110
     44  f111
     45  f111		       ee		      .BYTE.b	%11101110
     46  f112		       88		      .BYTE.b	%10001000
     47  f113		       44		      .BYTE.b	%01000100
     48  f114		       44		      .BYTE.b	%01000100
     49  f115		       44		      .BYTE.b	%01000100
     50  f116
     51  f116		       ee		      .BYTE.b	%11101110
     52  f117		       aa		      .BYTE.b	%10101010
     53  f118		       ee		      .BYTE.b	%11101110
     54  f119		       aa		      .BYTE.b	%10101010
     55  f11a		       ee		      .BYTE.b	%11101110
     56  f11b
     57  f11b		       ee		      .BYTE.b	%11101110
     58  f11c		       aa		      .BYTE.b	%10101010
     59  f11d		       ee		      .BYTE.b	%11101110
     60  f11e		       88		      .BYTE.b	%10001000
     61  f11f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f120					      include	"objects/score_label.asm"
      1  f120				   ScoreLabel
      2  f120
      3  f120		       20		      .BYTE.b	%00100000
      4  f121		       50		      .BYTE.b	%01010000
      5  f122		       ee		      .BYTE.b	%11101110
      6  f123		       00		      .BYTE.b	%00000000
      7  f124		       57		      .BYTE.b	%01010111
      8  f125		       00		      .BYTE.b	%00000000
      9  f126
     10  f126		       20		      .BYTE.b	%00100000
     11  f127		       50		      .BYTE.b	%01010000
     12  f128		       4a		      .BYTE.b	%01001010
     13  f129		       00		      .BYTE.b	%00000000
     14  f12a		       55		      .BYTE.b	%01010101
     15  f12b		       00		      .BYTE.b	%00000000
     16  f12c
     17  f12c		       20		      .BYTE.b	%00100000
     18  f12d		       50		      .BYTE.b	%01010000
     19  f12e		       4e		      .BYTE.b	%01001110
     20  f12f		       00		      .BYTE.b	%00000000
     21  f130		       77		      .BYTE.b	%01110111
     22  f131		       00		      .BYTE.b	%00000000
     23  f132
     24  f132		       20		      .BYTE.b	%00100000
     25  f133		       50		      .BYTE.b	%01010000
     26  f134		       42		      .BYTE.b	%01000010
     27  f135		       00		      .BYTE.b	%00000000
     28  f136		       54		      .BYTE.b	%01010100
     29  f137		       00		      .BYTE.b	%00000000
     30  f138
     31  f138		       e0		      .BYTE.b	%11100000
     32  f139		       20		      .BYTE.b	%00100000
     33  f13a		       42		      .BYTE.b	%01000010
     34  f13b		       00		      .BYTE.b	%00000000
     35  f13c		       54		      .BYTE.b	%01010100
     36  f13d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    154  f13e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f13e					      include	"objects/web_image.asm"
      1  f13e				   WebImagePF0
      2  f13e		       00		      .BYTE.b	%00000000
      3  f13f		       00		      .BYTE.b	%00000000
      4  f140		       00		      .BYTE.b	%00000000
      5  f141		       00		      .BYTE.b	%00000000
      6  f142		       00		      .BYTE.b	%00000000
      7  f143		       00		      .BYTE.b	%00000000
      8  f144		       00		      .BYTE.b	%00000000
      9  f145		       00		      .BYTE.b	%00000000
     10  f146		       00		      .BYTE.b	%00000000
     11  f147		       30		      .BYTE.b	%00110000
     12  f148		       e0		      .BYTE.b	%11100000
     13  f149		       20		      .BYTE.b	%00100000
     14  f14a		       40		      .BYTE.b	%01000000
     15  f14b		       40		      .BYTE.b	%01000000
     16  f14c		       80		      .BYTE.b	%10000000
     17  f14d		       80		      .BYTE.b	%10000000
     18  f14e		       40		      .BYTE.b	%01000000
     19  f14f		       40		      .BYTE.b	%01000000
     20  f150		       20		      .BYTE.b	%00100000
     21  f151		       e0		      .BYTE.b	%11100000
     22  f152		       30		      .BYTE.b	%00110000
     23  f153		       00		      .BYTE.b	%00000000
     24  f154		       00		      .BYTE.b	%00000000
     25  f155		       00		      .BYTE.b	%00000000
     26  f156		       00		      .BYTE.b	%00000000
     27  f157		       00		      .BYTE.b	%00000000
     28  f158		       00		      .BYTE.b	%00000000
     29  f159		       00		      .BYTE.b	%00000000
     30  f15a		       00		      .BYTE.b	%00000000
     31  f15b		       00		      .BYTE.b	%00000000
     32  f15c
     33  f15c				   WebImagePF1
     34  f15c		       08		      .BYTE.b	%00001000
     35  f15d		       06		      .BYTE.b	%00000110
     36  f15e		       01		      .BYTE.b	%00000001
     37  f15f		       00		      .BYTE.b	%00000000
     38  f160		       00		      .BYTE.b	%00000000
     39  f161		       01		      .BYTE.b	%00000001
     40  f162		       01		      .BYTE.b	%00000001
     41  f163		       02		      .BYTE.b	%00000010
     42  f164		       0c		      .BYTE.b	%00001100
     43  f165		       30		      .BYTE.b	%00110000
     44  f166		       c0		      .BYTE.b	%11000000
     45  f167		       38		      .BYTE.b	%00111000
     46  f168		       07		      .BYTE.b	%00000111
     47  f169		       00		      .BYTE.b	%00000000
     48  f16a		       00		      .BYTE.b	%00000000
     49  f16b		       00		      .BYTE.b	%00000000
     50  f16c		       00		      .BYTE.b	%00000000
     51  f16d		       07		      .BYTE.b	%00000111
     52  f16e		       38		      .BYTE.b	%00111000
     53  f16f		       c0		      .BYTE.b	%11000000
     54  f170		       30		      .BYTE.b	%00110000
     55  f171		       0c		      .BYTE.b	%00001100
     56  f172		       02		      .BYTE.b	%00000010
     57  f173		       01		      .BYTE.b	%00000001
     58  f174		       01		      .BYTE.b	%00000001
     59  f175		       00		      .BYTE.b	%00000000
     60  f176		       00		      .BYTE.b	%00000000
     61  f177		       01		      .BYTE.b	%00000001
     62  f178		       06		      .BYTE.b	%00000110
     63  f179		       08		      .BYTE.b	%00001000
     64  f17a
     65  f17a				   WebImagePF2
     66  f17a		       20		      .BYTE.b	%00100000
     67  f17b		       18		      .BYTE.b	%00011000
     68  f17c		       04		      .BYTE.b	%00000100
     69  f17d		       03		      .BYTE.b	%00000011
     70  f17e		       3f		      .BYTE.b	%00111111
     71  f17f		       c2		      .BYTE.b	%11000010
     72  f180		       04		      .BYTE.b	%00000100
     73  f181		       08		      .BYTE.b	%00001000
     74  f182		       08		      .BYTE.b	%00001000
     75  f183		       10		      .BYTE.b	%00010000
     76  f184		       20		      .BYTE.b	%00100000
     77  f185		       20		      .BYTE.b	%00100000
     78  f186		       41		      .BYTE.b	%01000001
     79  f187		       8e		      .BYTE.b	%10001110
     80  f188		       f0		      .BYTE.b	%11110000
     81  f189		       f0		      .BYTE.b	%11110000
     82  f18a		       8e		      .BYTE.b	%10001110
     83  f18b		       41		      .BYTE.b	%01000001
     84  f18c		       20		      .BYTE.b	%00100000
     85  f18d		       20		      .BYTE.b	%00100000
     86  f18e		       10		      .BYTE.b	%00010000
     87  f18f		       08		      .BYTE.b	%00001000
     88  f190		       08		      .BYTE.b	%00001000
     89  f191		       04		      .BYTE.b	%00000100
     90  f192		       c2		      .BYTE.b	%11000010
     91  f193		       3f		      .BYTE.b	%00111111
     92  f194		       03		      .BYTE.b	%00000011
     93  f195		       04		      .BYTE.b	%00000100
     94  f196		       18		      .BYTE.b	%00011000
     95  f197		       20		      .BYTE.b	%00100000
------- FILE kernel.asm
    156  f198
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f198					      include	"objects/spider_sprite.asm"
      1  f198				   SpiderSprite
      2  f198
      3  f198		       99		      .BYTE.b	%10011001
      4  f199		       99		      .BYTE.b	%10011001
      5  f19a		       bd		      .BYTE.b	%10111101
      6  f19b		       bd		      .BYTE.b	%10111101
      7  f19c		       99		      .BYTE.b	%10011001
      8  f19d		       99		      .BYTE.b	%10011001
      9  f19e		       7e		      .BYTE.b	%01111110
     10  f19f		       3c		      .BYTE.b	%00111100
     11  f1a0		       3c		      .BYTE.b	%00111100
     12  f1a1		       18		      .BYTE.b	%00011000
     13  f1a2		       3c		      .BYTE.b	%00111100
     14  f1a3		       7e		      .BYTE.b	%01111110
     15  f1a4		       bd		      .BYTE.b	%10111101
     16  f1a5		       bd		      .BYTE.b	%10111101
     17  f1a6		       bd		      .BYTE.b	%10111101
     18  f1a7		       99		      .BYTE.b	%10011001
     19  f1a8
     20  f1a8		       0b		      .BYTE.b	%00001011
     21  f1a9		       0b		      .BYTE.b	%00001011
     22  f1aa		       13		      .BYTE.b	%00010011
     23  f1ab		       13		      .BYTE.b	%00010011
     24  f1ac		       1c		      .BYTE.b	%00011100
     25  f1ad		       1c		      .BYTE.b	%00011100
     26  f1ae		       3d		      .BYTE.b	%00111101
     27  f1af		       3d		      .BYTE.b	%00111101
     28  f1b0		       7e		      .BYTE.b	%01111110
     29  f1b1		       fe		      .BYTE.b	%11111110
     30  f1b2		       b8		      .BYTE.b	%10111000
     31  f1b3		       b8		      .BYTE.b	%10111000
     32  f1b4		       10		      .BYTE.b	%00010000
     33  f1b5		       10		      .BYTE.b	%00010000
     34  f1b6		       30		      .BYTE.b	%00110000
     35  f1b7		       20		      .BYTE.b	%00100000
     36  f1b8
     37  f1b8		       c7		      .BYTE.b	%11000111
     38  f1b9		       c7		      .BYTE.b	%11000111
     39  f1ba		       28		      .BYTE.b	%00101000
     40  f1bb		       28		      .BYTE.b	%00101000
     41  f1bc		       3a		      .BYTE.b	%00111010
     42  f1bd		       7a		      .BYTE.b	%01111010
     43  f1be		       fd		      .BYTE.b	%11111101
     44  f1bf		       ff		      .BYTE.b	%11111111
     45  f1c0		       ff		      .BYTE.b	%11111111
     46  f1c1		       fd		      .BYTE.b	%11111101
     47  f1c2		       7a		      .BYTE.b	%01111010
     48  f1c3		       3a		      .BYTE.b	%00111010
     49  f1c4		       28		      .BYTE.b	%00101000
     50  f1c5		       28		      .BYTE.b	%00101000
     51  f1c6		       c7		      .BYTE.b	%11000111
     52  f1c7		       c7		      .BYTE.b	%11000111
     53  f1c8
     54  f1c8		       20		      .BYTE.b	%00100000
     55  f1c9		       30		      .BYTE.b	%00110000
     56  f1ca		       10		      .BYTE.b	%00010000
     57  f1cb		       10		      .BYTE.b	%00010000
     58  f1cc		       b8		      .BYTE.b	%10111000
     59  f1cd		       bc		      .BYTE.b	%10111100
     60  f1ce		       fc		      .BYTE.b	%11111100
     61  f1cf		       7e		      .BYTE.b	%01111110
     62  f1d0		       3f		      .BYTE.b	%00111111
     63  f1d1		       1d		      .BYTE.b	%00011101
     64  f1d2		       0c		      .BYTE.b	%00001100
     65  f1d3		       1c		      .BYTE.b	%00011100
     66  f1d4		       13		      .BYTE.b	%00010011
     67  f1d5		       13		      .BYTE.b	%00010011
     68  f1d6		       0b		      .BYTE.b	%00001011
     69  f1d7		       0b		      .BYTE.b	%00001011
     70  f1d8
     71  f1d8		       99		      .BYTE.b	%10011001
     72  f1d9		       bd		      .BYTE.b	%10111101
     73  f1da		       bd		      .BYTE.b	%10111101
     74  f1db		       bd		      .BYTE.b	%10111101
     75  f1dc		       7e		      .BYTE.b	%01111110
     76  f1dd		       3c		      .BYTE.b	%00111100
     77  f1de		       18		      .BYTE.b	%00011000
     78  f1df		       3c		      .BYTE.b	%00111100
     79  f1e0		       3c		      .BYTE.b	%00111100
     80  f1e1		       7e		      .BYTE.b	%01111110
     81  f1e2		       99		      .BYTE.b	%10011001
     82  f1e3		       99		      .BYTE.b	%10011001
     83  f1e4		       bd		      .BYTE.b	%10111101
     84  f1e5		       bd		      .BYTE.b	%10111101
     85  f1e6		       99		      .BYTE.b	%10011001
     86  f1e7		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    158  f1e8
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1e8					      include	"objects/swatter_sprite.asm"
      1  f1e8				   SwatterSprite
      2  f1e8
      3  f1e8		       3c		      .BYTE.b	%00111100
      4  f1e9		       3c		      .BYTE.b	%00111100
      5  f1ea		       56		      .BYTE.b	%01010110
      6  f1eb		       6a		      .BYTE.b	%01101010
      7  f1ec		       d5		      .BYTE.b	%11010101
      8  f1ed		       ab		      .BYTE.b	%10101011
      9  f1ee		       d5		      .BYTE.b	%11010101
     10  f1ef		       ab		      .BYTE.b	%10101011
     11  f1f0		       d5		      .BYTE.b	%11010101
     12  f1f1		       ab		      .BYTE.b	%10101011
     13  f1f2		       d5		      .BYTE.b	%11010101
     14  f1f3		       ab		      .BYTE.b	%10101011
     15  f1f4		       56		      .BYTE.b	%01010110
     16  f1f5		       6a		      .BYTE.b	%01101010
     17  f1f6		       56		      .BYTE.b	%01010110
     18  f1f7		       6a		      .BYTE.b	%01101010
     19  f1f8		       34		      .BYTE.b	%00110100
     20  f1f9		       2c		      .BYTE.b	%00101100
     21  f1fa		       34		      .BYTE.b	%00110100
     22  f1fb		       18		      .BYTE.b	%00011000
------- FILE kernel.asm
    160  f1fc
    161  f1fc				   InitSystem
    162  f1fc
    163  f1fc				   .init_clean
    164  f1fc							; Resets RAM, TIA registers, and CPU registers
      0  f1fc					      CLEAN_START
      1  f1fc		       78		      sei
      2  f1fd		       d8		      cld
      3  f1fe
      4  f1fe		       a2 00		      ldx	#0
      5  f200		       8a		      txa
      6  f201		       a8		      tay
      7  f202		       ca	   .CLEAR_STACK dex
      8  f203		       9a		      txs
      9  f204		       48		      pha
     10  f205		       d0 fb		      bne	.CLEAR_STACK
     11  f207
    166  f207
    167  f207				   .init_tia
    168  f207							; Define default TIA register values
    169  f207
    170  f207							; Initialize copies
    171  f207		       a9 00		      lda	#0
    172  f209		       85 80		      sta	CtrlPf
    173  f20b		       85 81		      sta	NuSiz0
    174  f20d		       85 82		      sta	NuSiz1
    175  f20f
    176  f20f							; Set background color
    177  f20f		       a9 00		      lda	#$00	; Black
    178  f211		       85 09		      sta	COLUBK
    179  f213
    180  f213							; Set the playfield and player color
    181  f213		       a9 0e		      lda	#$0E	; White
    182  f215		       85 08		      sta	COLUPF
    183  f217		       85 06		      sta	COLUP0
    184  f219		       85 07		      sta	COLUP1
    185  f21b
    186  f21b							; Playfield Control
    187  f21b		       a9 01		      lda	#%00000001	; 1 for mirroring
    188  f21d		       85 80		      sta	CtrlPf
    189  f21f		       85 0a		      sta	CTRLPF
    190  f221
    191  f221							; Disable Game Elements
    192  f221		       a9 00		      lda	#$00
    193  f223		       85 1f		      sta	ENABL	; Turn off ball
    194  f225		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    195  f227		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    196  f229		       85 1b		      sta	GRP0	; Turn off player 1
    197  f22b		       85 1c		      sta	GRP1	; Turn off player 2
    198  f22d
    199  f22d							; Empty playfield
    200  f22d		       a9 00		      lda	#%00000000
    201  f22f		       85 0d		      sta	PF0
    202  f231		       85 0e		      sta	PF1
    203  f233		       85 0f		      sta	PF2
    204  f235
    205  f235				   .init_seed
    206  f235							; Seed the random number generator
    207  f235		       ad 84 02 	      lda	INTIM	; Unknown value
    208  f238		       85 86		      sta	Rand8	; Use as seed
    209  f23a		       49 ff		      eor	#$FF	; Flip bits
    210  f23c		       85 87		      sta	Rand16	; Just in case INTIM was 0
    211  f23e
    212  f23e				   .init_game
    213  f23e
    214  f23e							;   jsr LogoInit
    215  f23e		       20 a6 f2 	      jsr	TitleInit
    216  f241
    217  f241							;=======================================
    218  f241							; Game Kernel
    219  f241							;=======================================
    220  f241
    221  f241				   Main
    222  f241
    223  f241		       20 50 f2 	      jsr	VerticalSync
    224  f244		       20 69 f2 	      jsr	VerticalBlank
    225  f247		       20 7c f2 	      jsr	Kernel
    226  f24a		       20 83 f2 	      jsr	OverScan
    227  f24d		       4c 41 f2 	      jmp	Main
    228  f250
    229  f250				   VerticalSync
    230  f250
    231  f250		       a9 00		      lda	#0
    232  f252		       85 01		      sta	VBLANK
    233  f254
    234  f254							; Turn on Vertical Sync signal and setup timer
    235  f254		       a9 02		      lda	#2
    236  f256		       85 00		      sta	VSYNC
    237  f258
    238  f258							; Increment frame count and reduce frame counter
    239  f258		       e6 8e		      inc	Frame
    240  f25a		       c6 8f		      dec	FrameTimer
    241  f25c		       c6 90		      dec	FrameTimer+1
    242  f25e
    243  f25e							; VSYNCH signal scanlines
    244  f25e					      REPEAT	#KERNEL_VSYNC
    245  f25e		       85 02		      sta	WSYNC
    244  f25e					      REPEND
    245  f260		       85 02		      sta	WSYNC
    244  f260					      REPEND
    245  f262		       85 02		      sta	WSYNC
    246  f264					      REPEND
    247  f264
    248  f264							; Turn off Vertical Sync signal
    249  f264		       a9 00		      lda	#0
    250  f266		       85 00		      sta	VSYNC
    251  f268
    252  f268				   .vsync_return
    253  f268		       60		      rts
    254  f269
    255  f269				   VerticalBlank
    256  f269							; Setup Timer
    257  f269		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    258  f26b		       8d 96 02 	      sta	TIM64T
    259  f26e
    260  f26e				   .vblank_logic
    261  f26e							; Perform Game Logic
    262  f26e		       20 79 f2 	      jsr	.vblank_logic_call_ptr
    263  f271
    264  f271				   .vblank_loop
    265  f271							; WSYNC until Timer is complete
    266  f271		       85 02		      sta	WSYNC
    267  f273		       ad 84 02 	      lda	INTIM
    268  f276		       d0 f9		      bne	.vblank_loop
    269  f278
    270  f278				   .vblank_return
    271  f278		       60		      rts
    272  f279
    273  f279				   .vblank_logic_call_ptr
    274  f279		       6c 88 00 	      jmp	(VBlankPtr)
    275  f27c
    276  f27c				   Kernel
    277  f27c
    278  f27c							; Perform Selected Kernel
    279  f27c		       20 80 f2 	      jsr	.kernel_call_ptr
    280  f27f		       60		      rts
    281  f280
    282  f280				   .kernel_call_ptr
    283  f280		       6c 8a 00 	      jmp	(KernelPtr)
    284  f283
    285  f283				   OverScan
    286  f283
    287  f283							; End of screen, enter blanking
    288  f283		       a9 42		      lda	#%01000010
    289  f285		       85 01		      sta	VBLANK
    290  f287
    291  f287							; Setup Timer
    292  f287		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    293  f289		       8d 96 02 	      sta	TIM64T
    294  f28c
    295  f28c							;.overscan_reset:
    296  f28c							; Check for reset switch
    297  f28c		       ad 82 02 	      lda	SWCHB
    298  f28f		       4a		      lsr		; Push D0 to carry (C)
    299  f290		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    300  f292
    301  f292							; Perform reset
    302  f292							;    jsr LogoInit	      ; No need for logic
    303  f292		       20 a6 f2 	      jsr	TitleInit
    304  f295		       4c 9b f2 	      jmp	.overscan_loop
    305  f298
    306  f298				   .overscan_logic
    307  f298							; Perform OverScan Logic
    308  f298		       20 a3 f2 	      jsr	.overscan_logic_call_ptr
    309  f29b
    310  f29b				   .overscan_loop
    311  f29b							; WSYNC until Timer is complete
    312  f29b		       85 02		      sta	WSYNC
    313  f29d		       ad 84 02 	      lda	INTIM
    314  f2a0		       d0 f9		      bne	.overscan_loop
    315  f2a2
    316  f2a2				   .overscan_return
    317  f2a2		       60		      rts
    318  f2a3
    319  f2a3				   .overscan_logic_call_ptr
    320  f2a3		       6c 8c 00 	      jmp	(OverScanPtr)
    321  f2a6
    322  f2a6							;================
    323  f2a6							; State Code
    324  f2a6							;================
    325  f2a6
    326  f2a6							;    include "logo.asm"
------- FILE title.asm LEVEL 2 PASS 2
      0  f2a6					      include	"title.asm"
      1  f2a6							;================
      2  f2a6							; Constants
      3  f2a6							;================
      4  f2a6
      5  f2a6		       00 00	   TITLE_BG_COLOR =	#$00
      6  f2a6		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f2a6		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f2a6		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f2a6
     10  f2a6		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f2a6		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f2a6		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f2a6		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f2a6		       00 09	   TITLE_AUDIO_STEP =	9
     15  f2a6
     16  f2a6		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     17  f2a6		       00 05	   TITLE_FRAME_BOT_LINES =	5
     18  f2a6		       00 07	   TITLE_LABEL_LINE =	7
     19  f2a6
     20  f2a6		       00 10	   TITLE_GAP_SIZE =	#16
     21  f2a6
     22  f2a6		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     23  f2a6		       00 09	   TITLE_SPIDER_SIZE =	#9
     24  f2a6		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f2a6
     26  f2a6				   TitleInit
     27  f2a6
     28  f2a6							; Setup logic and kernel
      0  f2a6					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f2a6				   .POINTER   SET	VBlankPtr
      2  f2a6				   .ADDRESS   SET	TitleVerticalBlank
      3  f2a6
      4  f2a6		       a9 13		      LDA	#<.ADDRESS
      5  f2a8		       85 88		      STA	.POINTER
      6  f2aa		       a9 f3		      LDA	#>.ADDRESS
      7  f2ac		       85 89		      STA	.POINTER+1
      8  f2ae
      0  f2ae					      SET_POINTER	KernelPtr, TitleKernel
      1  f2ae				   .POINTER   SET	KernelPtr
      2  f2ae				   .ADDRESS   SET	TitleKernel
      3  f2ae
      4  f2ae		       a9 ab		      LDA	#<.ADDRESS
      5  f2b0		       85 8a		      STA	.POINTER
      6  f2b2		       a9 f3		      LDA	#>.ADDRESS
      7  f2b4		       85 8b		      STA	.POINTER+1
      8  f2b6
      0  f2b6					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f2b6				   .POINTER   SET	OverScanPtr
      2  f2b6				   .ADDRESS   SET	TitleOverScan
      3  f2b6
      4  f2b6		       a9 64		      LDA	#<.ADDRESS
      5  f2b8		       85 8c		      STA	.POINTER
      6  f2ba		       a9 f3		      LDA	#>.ADDRESS
      7  f2bc		       85 8d		      STA	.POINTER+1
      8  f2be
     32  f2be
     33  f2be							; Load Colors
     34  f2be		       a9 00		      lda	#TITLE_BG_COLOR
     35  f2c0		       85 09		      sta	COLUBK
     36  f2c2		       a9 06		      lda	#TITLE_WEB_COLOR
     37  f2c4		       85 08		      sta	COLUPF
     38  f2c6		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f2c8		       85 06		      sta	COLUP0
     40  f2ca		       85 07		      sta	COLUP1
     41  f2cc
     42  f2cc							; Load audio settings
     43  f2cc
     44  f2cc							; Melody Line
     45  f2cc		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f2ce		       85 15		      sta	AUDC0
     47  f2d0		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f2d2		       85 19		      sta	AUDV0
     49  f2d4
     50  f2d4							; Drums and Bass
     51  f2d4		       a9 00		      lda	#0
     52  f2d6		       85 16		      sta	AUDC1
     53  f2d8		       85 1a		      sta	AUDV1
     54  f2da
     55  f2da							; Make it so that we play the first note immediately
     56  f2da		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f2dc		       85 91		      sta	AudioStep
     58  f2de		       a9 01		      lda	#1
     59  f2e0		       85 8f		      sta	FrameTimer
     60  f2e2
     61  f2e2							; Setup Spider Sprite
      0  f2e2					      SET_POINTER	SpiderPtr, TitleSpider
      1  f2e2				   .POINTER   SET	SpiderPtr
      2  f2e2				   .ADDRESS   SET	TitleSpider
      3  f2e2
      4  f2e2		       a9 aa		      LDA	#<.ADDRESS
      5  f2e4		       85 a2		      STA	.POINTER
      6  f2e6		       a9 f0		      LDA	#>.ADDRESS
      7  f2e8		       85 a3		      STA	.POINTER+1
      8  f2ea
     63  f2ea
     64  f2ea		       a5 81		      lda	NuSiz0
     65  f2ec		       29 f8		      and	#%11111000
     66  f2ee		       09 06		      ora	#%00000110	; Triple Sprite
     67  f2f0		       85 81		      sta	NuSiz0
     68  f2f2		       85 04		      sta	NUSIZ0
     69  f2f4		       85 82		      sta	NuSiz1
     70  f2f6		       85 05		      sta	NUSIZ1
     71  f2f8
     72  f2f8		       a9 00		      lda	#0	; No reflect
     73  f2fa		       85 0b		      sta	REFP0
     74  f2fc		       a9 ff		      lda	#$FF	; Reflect P1
     75  f2fe		       85 0c		      sta	REFP1
     76  f300
     77  f300		       a9 00		      lda	#0
     78  f302		       85 a9		      sta	SpiderDrawPos	; Initialize animation state
     79  f304
     80  f304							; Setup Web Line
     81  f304							; Missle0 (2 clock size)
     82  f304		       a5 81		      lda	NuSiz0
     83  f306		       29 cf		      and	#%11001111
     84  f308		       09 10		      ora	#%00010000
     85  f30a		       85 81		      sta	NuSiz0
     86  f30c		       85 04		      sta	NUSIZ0
     87  f30e
     88  f30e							; Disable at start
     89  f30e		       a9 00		      lda	#0
     90  f310		       85 1d		      sta	ENAM0
     91  f312
     92  f312		       60		      rts
     93  f313
     94  f313				   TitleVerticalBlank
     95  f313
     96  f313							; Refresh random values
     97  f313		       20 13 f0 	      jsr	Random
     98  f316
     99  f316		       20 1d f3 	      jsr	TitlePosition
    100  f319		       20 37 f3 	      jsr	TitleAnimation
    101  f31c
    102  f31c		       60		      rts
    103  f31d
    104  f31d				   TitlePosition
    105  f31d
    106  f31d							; Position Spider
    107  f31d		       a2 00		      ldx	#0	; Object (player0)
    108  f31f		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    109  f321		       20 00 f0 	      jsr	PosObject
    110  f324
    111  f324		       a2 01		      ldx	#1	; Object (player1)
    112  f326		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    113  f328		       20 00 f0 	      jsr	PosObject
    114  f32b
    115  f32b							; Position Web Line
    116  f32b		       a2 02		      ldx	#2	; Object (missle0)
    117  f32d		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    118  f32f		       20 00 f0 	      jsr	PosObject
    119  f332
    120  f332		       85 02		      sta	WSYNC
    121  f334		       85 2a		      sta	HMOVE
    122  f336
    123  f336		       60		      rts
    124  f337
    125  f337				   TitleAnimation
    126  f337
    127  f337		       a5 91		      lda	AudioStep
    128  f339		       c9 00		      cmp	#0
    129  f33b		       f0 0d		      beq	.title_animation_1
    130  f33d		       c9 04		      cmp	#4
    131  f33f		       f0 16		      beq	.title_animation_2
    132  f341		       c9 09		      cmp	#9
    133  f343		       f0 05		      beq	.title_animation_1
    134  f345		       c9 0c		      cmp	#12
    135  f347		       f0 0e		      beq	.title_animation_2
    136  f349		       60		      rts
    137  f34a
    138  f34a				   .title_animation_1
      0  f34a					      SET_POINTER	SpiderPtr, TitleSpider
      1  f34a				   .POINTER   SET	SpiderPtr
      2  f34a				   .ADDRESS   SET	TitleSpider
      3  f34a
      4  f34a		       a9 aa		      LDA	#<.ADDRESS
      5  f34c		       85 a2		      STA	.POINTER
      6  f34e		       a9 f0		      LDA	#>.ADDRESS
      7  f350		       85 a3		      STA	.POINTER+1
      8  f352
    140  f352		       a9 00		      lda	#0
    141  f354		       85 a9		      sta	SpiderDrawPos
    142  f356		       60		      rts
    143  f357
    144  f357				   .title_animation_2
      0  f357					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f357				   .POINTER   SET	SpiderPtr
      2  f357				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f357
      4  f357		       a9 b3		      LDA	#<.ADDRESS
      5  f359		       85 a2		      STA	.POINTER
      6  f35b		       a9 f0		      LDA	#>.ADDRESS
      7  f35d		       85 a3		      STA	.POINTER+1
      8  f35f
    146  f35f		       a9 01		      lda	#1
    147  f361		       85 a9		      sta	SpiderDrawPos
    148  f363		       60		      rts
    149  f364
    150  f364				   TitleOverScan
    151  f364		       20 6b f3 	      jsr	TitleAudio
    152  f367		       20 a3 f3 	      jsr	TitleState
    153  f36a		       60		      rts
    154  f36b
    155  f36b				   TitleAudio
    156  f36b
    157  f36b		       a6 8f		      ldx	FrameTimer
    158  f36d		       e0 00		      cpx	#0
    159  f36f		       d0 31		      bne	.title_audio_return
    160  f371
    161  f371							; Reset Timer
    162  f371		       a2 09		      ldx	#TITLE_AUDIO_STEP
    163  f373		       86 8f		      stx	FrameTimer
    164  f375
    165  f375				   .title_audio_play
    166  f375
    167  f375							; Increment melody position
    168  f375		       a4 91		      ldy	AudioStep
    169  f377		       c8		      iny
    170  f378
    171  f378							; Check if we're at the end of the melody
    172  f378		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    173  f37a		       d0 02		      bne	.title_audio_play_note
    174  f37c
    175  f37c							; Loop our audio step
    176  f37c		       a0 00		      ldy	#0
    177  f37e
    178  f37e				   .title_audio_play_note
    179  f37e
    180  f37e							; Save current position
    181  f37e		       84 91		      sty	AudioStep
    182  f380
    183  f380							; Basic Melody Line
    184  f380		       b9 89 f4 	      lda	TitleAudio0,y
    185  f383		       85 17		      sta	AUDF0
    186  f385
    187  f385							; Drums and Bass
    188  f385		       b9 99 f4 	      lda	TitleTone1,y
    189  f388		       c9 ff		      cmp	#$FF
    190  f38a		       f0 0e		      beq	.title_audio_play_note_1_mute
    191  f38c
    192  f38c		       85 16		      sta	AUDC1
    193  f38e		       b9 a9 f4 	      lda	TitleAudio1,y
    194  f391		       85 18		      sta	AUDF1
    195  f393		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    196  f395		       85 1a		      sta	AUDV1
    197  f397
    198  f397		       4c a2 f3 	      jmp	.title_audio_return
    199  f39a
    200  f39a				   .title_audio_play_note_1_mute
    201  f39a
    202  f39a		       a9 00		      lda	#0
    203  f39c		       85 18		      sta	AUDF1
    204  f39e		       85 16		      sta	AUDC1
    205  f3a0		       85 1a		      sta	AUDV1
    206  f3a2
    207  f3a2				   .title_audio_return
    208  f3a2		       60		      rts
    209  f3a3
    210  f3a3				   TitleState
    211  f3a3							; Check if Fire Button on controller 1 is pressed
    212  f3a3		       a5 0c		      lda	INPT4
    213  f3a5		       30 03		      bmi	.title_state_return
    214  f3a7
    215  f3a7		       20 ef fb 	      jsr	GameInit
    216  f3aa
    217  f3aa				   .title_state_return
    218  f3aa		       60		      rts
    219  f3ab
    220  f3ab				   TitleKernel
    221  f3ab
    222  f3ab							; Playfield Control
    223  f3ab		       a5 80		      lda	CtrlPf
    224  f3ad		       29 fe		      and	#%11111110	; No mirroring
    225  f3af		       85 80		      sta	CtrlPf
    226  f3b1		       85 0a		      sta	CTRLPF
    227  f3b3
    228  f3b3							; Turn on display
    229  f3b3		       a9 00		      lda	#0
    230  f3b5		       85 01		      sta	VBLANK
    231  f3b7
    232  f3b7		       85 02		      sta	WSYNC
    233  f3b9
    234  f3b9				   TitleFrameTopDraw
    235  f3b9
    236  f3b9							; Start Counters
    237  f3b9		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    238  f3bb		       a0 00		      ldy	#0	; Image Counter
    239  f3bd
    240  f3bd				   .title_frame_top
    241  f3bd
    242  f3bd							; 76 machine cycles per scanline
    243  f3bd		       85 02		      sta	WSYNC
    244  f3bf
    245  f3bf				   .title_frame_top_load		; 66 cycles
    246  f3bf
    247  f3bf							; First half of image
    248  f3bf		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    249  f3c2		       85 0d		      sta	PF0	; 4
    250  f3c4		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    251  f3c7		       85 0e		      sta	PF1	; 4
    252  f3c9		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    253  f3cc		       85 0f		      sta	PF2	; 4
    254  f3ce
      0  f3ce					      sleep	6
      1  f3ce				   .CYCLES    SET	6
      2  f3ce
      3  f3ce				  -	      IF	.CYCLES < 2
      4  f3ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3ce				  -	      ERR
      6  f3ce					      ENDIF
      7  f3ce
      8  f3ce				  -	      IF	.CYCLES & 1
      9  f3ce				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3ce				  -	      nop	0
     11  f3ce				  -	      ELSE
     12  f3ce				  -	      bit	VSYNC
     13  f3ce				  -	      ENDIF
     14  f3ce				  -.CYCLES    SET	.CYCLES - 3
     15  f3ce					      ENDIF
     16  f3ce
     17  f3ce					      REPEAT	.CYCLES / 2
     18  f3ce		       ea		      nop
     17  f3ce					      REPEND
     18  f3cf		       ea		      nop
     17  f3cf					      REPEND
     18  f3d0		       ea		      nop
     19  f3d1					      REPEND
    256  f3d1
    257  f3d1							; Second half of image
    258  f3d1		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    259  f3d4		       85 0d		      sta	PF0	; 4
    260  f3d6		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    261  f3d9		       85 0e		      sta	PF1	; 4
    262  f3db		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    263  f3de		       85 0f		      sta	PF2	; 4
    264  f3e0
    265  f3e0				   .title_frame_top_index		; 4 cycles
    266  f3e0
    267  f3e0		       ca		      dex		; 2
    268  f3e1		       d0 da		      bne	.title_frame_top	; 2
    269  f3e3
    270  f3e3				   .title_frame_top_index_next		; 6 cycles
    271  f3e3
    272  f3e3							; Restore scanline counter
    273  f3e3		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    274  f3e5
    275  f3e5		       98		      tya		; 2
    276  f3e6		       18		      clc		; 2
    277  f3e7		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    278  f3e9		       a8		      tay		; 2
    279  f3ea
    280  f3ea		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    281  f3ec		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    282  f3ee		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    283  f3f0		       85 08		      sta	COLUPF	; 4
    284  f3f2		       ea		      nop		; 2
    285  f3f3		       4c bf f3 	      jmp	.title_frame_top_load	; 3
    286  f3f6
    287  f3f6				   .title_frame_top_label_color_skip
    288  f3f6
    289  f3f6		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    290  f3f8		       d0 c3		      bne	.title_frame_top	; 2
    291  f3fa
    292  f3fa				   .title_frame_top_clean
    293  f3fa
    294  f3fa							; Clear out playfield
    295  f3fa		       a9 00		      lda	#0
    296  f3fc		       85 0d		      sta	PF0
    297  f3fe		       85 0e		      sta	PF1
    298  f400		       85 0f		      sta	PF2
    299  f402
    300  f402				   TitleWebDraw
    301  f402		       a9 02		      lda	#%00000010
    302  f404		       85 1d		      sta	ENAM0
    303  f406
    304  f406		       a9 06		      lda	#TITLE_WEB_COLOR
    305  f408		       85 06		      sta	COLUP0
    306  f40a
    307  f40a		       a2 10		      ldx	#TITLE_GAP_SIZE
    308  f40c				   .title_web_gap
    309  f40c		       ca		      dex
    310  f40d		       85 02		      sta	WSYNC
    311  f40f		       d0 fb		      bne	.title_web_gap
    312  f411
    313  f411				   TitleSpiderDraw
    314  f411
    315  f411		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    316  f413
    317  f413		       a5 a9		      lda	SpiderDrawPos
    318  f415		       c9 01		      cmp	#1
    319  f417		       d0 0c		      bne	.title_spider_extra_web_disable
    320  f419
    321  f419				   .title_spider_extra_web_start
    322  f419		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    323  f41b				   .title_spider_extra_web_loop
    324  f41b		       85 02		      sta	WSYNC
    325  f41d		       ca		      dex
    326  f41e		       d0 fb		      bne	.title_spider_extra_web_loop
    327  f420
    328  f420		       88		      dey
    329  f421		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    330  f423		       d0 f4		      bne	.title_spider_extra_web_start
    331  f425
    332  f425				   .title_spider_extra_web_disable
    333  f425		       a9 00		      lda	#0
    334  f427		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    335  f429
    336  f429		       85 02		      sta	WSYNC
    337  f42b
    338  f42b		       85 1d		      sta	ENAM0
    339  f42d		       a9 56		      lda	#TITLE_SPIDER_COLOR
    340  f42f		       85 06		      sta	COLUP0
    341  f431
    342  f431				   .title_spider
    343  f431		       b1 a2		      lda	(SpiderPtr),y
    344  f433		       85 1b		      sta	GRP0
    345  f435		       85 1c		      sta	GRP1
    346  f437
    347  f437				   .title_spider_delay
    348  f437		       ca		      dex
    349  f438		       85 02		      sta	WSYNC
    350  f43a		       d0 fb		      bne	.title_spider_delay
    351  f43c
    352  f43c				   .title_spider_index
    353  f43c		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    354  f43e		       88		      dey
    355  f43f		       10 f0		      bpl	.title_spider
    356  f441
    357  f441				   .title_spider_clean
    358  f441
    359  f441							; Clear sprites
    360  f441		       a9 00		      lda	#0
    361  f443		       85 1b		      sta	GRP0
    362  f445		       85 1c		      sta	GRP1
    363  f447
    364  f447				   TitleFrameBottomDraw
    365  f447
    366  f447							; Load Frame Color
    367  f447		       a9 06		      lda	#TITLE_WEB_COLOR
    368  f449		       85 08		      sta	COLUPF
    369  f44b
    370  f44b							; Start Counters
    371  f44b		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    372  f44d		       a0 00		      ldy	#0	; Image Counter
    373  f44f
    374  f44f				   .title_frame_bottom
    375  f44f
    376  f44f							; 76 machine cycles per scanline
    377  f44f		       85 02		      sta	WSYNC
    378  f451
    379  f451				   .title_frame_bottom_load		; 66 cycles
    380  f451
    381  f451							; First half of image
    382  f451		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    383  f454		       85 0d		      sta	PF0	; 4
    384  f456		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    385  f459		       85 0e		      sta	PF1	; 4
    386  f45b		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    387  f45e		       85 0f		      sta	PF2	; 4
    388  f460
      0  f460					      sleep	6
      1  f460				   .CYCLES    SET	6
      2  f460
      3  f460				  -	      IF	.CYCLES < 2
      4  f460				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f460				  -	      ERR
      6  f460					      ENDIF
      7  f460
      8  f460				  -	      IF	.CYCLES & 1
      9  f460				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f460				  -	      nop	0
     11  f460				  -	      ELSE
     12  f460				  -	      bit	VSYNC
     13  f460				  -	      ENDIF
     14  f460				  -.CYCLES    SET	.CYCLES - 3
     15  f460					      ENDIF
     16  f460
     17  f460					      REPEAT	.CYCLES / 2
     18  f460		       ea		      nop
     17  f460					      REPEND
     18  f461		       ea		      nop
     17  f461					      REPEND
     18  f462		       ea		      nop
     19  f463					      REPEND
    390  f463
    391  f463							; Second half of image
    392  f463		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    393  f466		       85 0d		      sta	PF0	; 4
    394  f468		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    395  f46b		       85 0e		      sta	PF1	; 4
    396  f46d		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    397  f470		       85 0f		      sta	PF2	; 4
    398  f472
    399  f472				   .title_frame_bottom_index		; 4 cycles
    400  f472
    401  f472		       ca		      dex		; 2
    402  f473		       d0 da		      bne	.title_frame_bottom	; 2
    403  f475
    404  f475				   .title_frame_bottom_index_next		; 6 cycles
    405  f475
    406  f475							; Restore scanline counter
    407  f475		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    408  f477
    409  f477		       98		      tya		; 2
    410  f478		       18		      clc		; 2
    411  f479		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    412  f47b		       a8		      tay		; 2
    413  f47c		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    414  f47e		       d0 cf		      bne	.title_frame_bottom	; 2
    415  f480
    416  f480				   .title_frame_bottom_clean
    417  f480
    418  f480							; Clear out playfield
    419  f480		       a9 00		      lda	#0
    420  f482		       85 0d		      sta	PF0
    421  f484		       85 0e		      sta	PF1
    422  f486		       85 0f		      sta	PF2
    423  f488
    424  f488				   .title_kernel_return
    425  f488		       60		      rts
    426  f489
    427  f489				   TitleAudio0
    428  f489
    429  f489		       0f		      .BYTE.b	#15	; B
    430  f48a		       13		      .BYTE.b	#19	; G
    431  f48b		       17		      .BYTE.b	#23	; E
    432  f48c		       13		      .BYTE.b	#19	; G
    433  f48d		       0e		      .BYTE.b	#14	; C
    434  f48e		       13		      .BYTE.b	#19
    435  f48f		       17		      .BYTE.b	#23
    436  f490		       13		      .BYTE.b	#19
    437  f491		       0c		      .BYTE.b	#12	; D
    438  f492		       13		      .BYTE.b	#19
    439  f493		       17		      .BYTE.b	#23
    440  f494		       13		      .BYTE.b	#19
    441  f495		       0e		      .BYTE.b	#14	; C
    442  f496		       13		      .BYTE.b	#19
    443  f497		       17		      .BYTE.b	#23
    444  f498		       13		      .BYTE.b	#19
    445  f499
    446  f499				   TitleTone1
    447  f499
    448  f499		       0f		      .BYTE.b	#15	; Electronic Rumble
    449  f49a		       ff		      .BYTE.b	#$FF
    450  f49b		       01		      .BYTE.b	#1	; Low Pure Tone
    451  f49c		       01		      .BYTE.b	#1
    452  f49d		       08		      .BYTE.b	#8	; White Noise
    453  f49e		       01		      .BYTE.b	#1
    454  f49f		       01		      .BYTE.b	#1
    455  f4a0		       ff		      .BYTE.b	#$FF
    456  f4a1		       ff		      .BYTE.b	#$FF
    457  f4a2		       0f		      .BYTE.b	#15
    458  f4a3		       ff		      .BYTE.b	#$FF
    459  f4a4		       ff		      .BYTE.b	#$FF
    460  f4a5		       08		      .BYTE.b	#8
    461  f4a6		       ff		      .BYTE.b	#$FF
    462  f4a7		       01		      .BYTE.b	#1
    463  f4a8		       01		      .BYTE.b	#1
    464  f4a9
    465  f4a9				   TitleAudio1
    466  f4a9
    467  f4a9		       1d		      .BYTE.b	#29	; Kick
    468  f4aa		       ff		      .BYTE.b	#$FF
    469  f4ab		       1f		      .BYTE.b	#31	; C
    470  f4ac		       1f		      .BYTE.b	#31
    471  f4ad		       07		      .BYTE.b	#7	; Snare
    472  f4ae		       1f		      .BYTE.b	#31
    473  f4af		       1f		      .BYTE.b	#31
    474  f4b0		       ff		      .BYTE.b	#$FF
    475  f4b1		       ff		      .BYTE.b	#$FF
    476  f4b2		       1d		      .BYTE.b	#29
    477  f4b3		       ff		      .BYTE.b	#$FF
    478  f4b4		       ff		      .BYTE.b	#$FF
    479  f4b5		       07		      .BYTE.b	#7
    480  f4b6		       ff		      .BYTE.b	#$FF
    481  f4b7		       17		      .BYTE.b	#23	; F
    482  f4b8		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4b9					      include	"game.asm"
      1  f4b9							;================
      2  f4b9							; Game
      3  f4b9							;================
      4  f4b9
      5  f4b9							; Constants
      6  f4b9
      7  f4b9		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f4b9		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4b9		       00 09	   GAME_AUDIO_STEP =	9
     10  f4b9		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4b9		       00 06	   GAME_AUDIO_TONE =	6
     12  f4b9
     13  f4b9							; Object Code
     14  f4b9
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f4b9					      include	"objects/level.asm"
      1  f4b9							;======================
      2  f4b9							; Level Logic
      3  f4b9							;======================
      4  f4b9
      5  f4b9							; Constants
      6  f4b9
      7  f4b9		       00 04	   LEVELS     =	4
      8  f4b9
      9  f4b9				   LevelInit
     10  f4b9
     11  f4b9							; Set beginning level by difficulty switches treated as binary
     12  f4b9		       ad 82 02 	      lda	SWCHB
     13  f4bc					      REPEAT	6
     14  f4bc		       4a		      lsr
     13  f4bc					      REPEND
     14  f4bd		       4a		      lsr
     13  f4bd					      REPEND
     14  f4be		       4a		      lsr
     13  f4be					      REPEND
     14  f4bf		       4a		      lsr
     13  f4bf					      REPEND
     14  f4c0		       4a		      lsr
     13  f4c0					      REPEND
     14  f4c1		       4a		      lsr
     15  f4c2					      REPEND
     16  f4c2		       29 03		      and	#%00000011
     17  f4c4		       85 9e		      sta	LevelCurrent
     18  f4c6
     19  f4c6		       20 e3 f4 	      jsr	LevelLoad
     20  f4c9
     21  f4c9		       60		      rts
     22  f4ca
     23  f4ca				   LevelUpdate
     24  f4ca
     25  f4ca							; Check if score is high enough
     26  f4ca		       a4 9e		      ldy	LevelCurrent
     27  f4cc		       a5 94		      lda	ScoreValue+1
     28  f4ce		       d9 ff f4 	      cmp	LevelDataScore,y
     29  f4d1		       90 0f		      bcc	.level_update_return
     30  f4d3
     31  f4d3							; Reset score
     32  f4d3		       a9 00		      lda	#0
     33  f4d5		       85 94		      sta	ScoreValue+1
     34  f4d7
     35  f4d7							; Check if we haven't reached the final level
     36  f4d7		       a5 9e		      lda	LevelCurrent
     37  f4d9		       c9 03		      cmp	#LEVELS-1
     38  f4db		       b0 05		      bcs	.level_update_return
     39  f4dd
     40  f4dd		       e6 9e		      inc	LevelCurrent
     41  f4df		       20 e3 f4 	      jsr	LevelLoad
     42  f4e2
     43  f4e2				   .level_update_return
     44  f4e2		       60		      rts
     45  f4e3
     46  f4e3				   LevelLoad
     47  f4e3		       a4 9e		      ldy	LevelCurrent
     48  f4e5
     49  f4e5							; Background Color
     50  f4e5		       b9 03 f5 	      lda	LevelDataBk,y
     51  f4e8		       85 a0		      sta	WebColor+0
     52  f4ea
     53  f4ea							; Web Color
     54  f4ea		       b9 07 f5 	      lda	LevelDataPf,y
     55  f4ed		       85 a1		      sta	WebColor+1
     56  f4ef
     57  f4ef							; Bug Speed
     58  f4ef		       b9 0b f5 	      lda	LevelDataBug,y
     59  f4f2		       85 b6		      sta	BugSpeed
     60  f4f4
     61  f4f4							; Swatter Wait Time
     62  f4f4		       b9 0f f5 	      lda	LevelDataSwatterWait,y
     63  f4f7		       85 c7		      sta	SwatterWaitTime
     64  f4f9
     65  f4f9							; Swatter Hit Damage
     66  f4f9		       b9 13 f5 	      lda	LevelDataSwatterDamage,y
     67  f4fc		       85 c8		      sta	SwatterHitDamage
     68  f4fe
     69  f4fe		       60		      rts
     70  f4ff
     71  f4ff				   LevelDataScore		; Score needed
     72  f4ff		       0a		      .BYTE.b	#10
     73  f500		       14		      .BYTE.b	#20
     74  f501		       28		      .BYTE.b	#40
     75  f502		       63		      .BYTE.b	#99
     76  f503
     77  f503				   LevelDataBk		; Background Color
     78  f503		       00		      .BYTE.b	#$00
     79  f504		       60		      .BYTE.b	#$60
     80  f505		       50		      .BYTE.b	#$50
     81  f506		       30		      .BYTE.b	#$30
     82  f507
     83  f507				   LevelDataPf		; Web Color
     84  f507		       06		      .BYTE.b	#$06
     85  f508		       64		      .BYTE.b	#$64
     86  f509		       54		      .BYTE.b	#$54
     87  f50a		       34		      .BYTE.b	#$34
     88  f50b
     89  f50b				   LevelDataBug 		; Bug Speed
     90  f50b		       02		      .BYTE.b	#2
     91  f50c		       03		      .BYTE.b	#3
     92  f50d		       04		      .BYTE.b	#4
     93  f50e		       05		      .BYTE.b	#5
     94  f50f
     95  f50f				   LevelDataSwatterWait 		; Swatter Wait Time Min (adds random 0-128)
     96  f50f		       b4		      .BYTE.b	#180
     97  f510		       96		      .BYTE.b	#150
     98  f511		       78		      .BYTE.b	#120
     99  f512		       3c		      .BYTE.b	#60
    100  f513
    101  f513				   LevelDataSwatterDamage		; Swatter Damage
    102  f513		       10		      .BYTE.b	#$10
    103  f514		       18		      .BYTE.b	#$18
    104  f515		       20		      .BYTE.b	#$20
    105  f516		       40		      .BYTE.b	#$40
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f517					      include	"objects/score.asm"
      1  f517							;======================
      2  f517							; Score (playfield)
      3  f517							;======================
      4  f517
      5  f517							; Constants
      6  f517
      7  f517		       00 00	   SCORE_BG_COLOR =	#$00
      8  f517		       00 0f	   SCORE_LABEL_COLOR =	#$0f
      9  f517		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f517		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f517
     12  f517		       00 05	   SCORE_LABEL_SIZE =	5
     13  f517		       00 05	   SCORE_DIGIT_SIZE =	5
     14  f517		       00 02	   SCORE_LINE_SIZE =	2
     15  f517		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     16  f517
     17  f517							; Initialization
     18  f517
     19  f517				   ScoreInit
     20  f517
     21  f517							; Health Score
     22  f517		       a9 ff		      lda	#$ff
     23  f519		       85 93		      sta	ScoreValue+0
     24  f51b
     25  f51b							; Game Score
     26  f51b		       a9 00		      lda	#0
     27  f51d		       85 94		      sta	ScoreValue+1
     28  f51f
     29  f51f		       60		      rts
     30  f520
     31  f520							; Frame Update
     32  f520
     33  f520				   ScoreUpdate
     34  f520
     35  f520							; Current Level Digits
     36  f520		       a5 9e		      lda	LevelCurrent
     37  f522		       18		      clc
     38  f523		       69 01		      adc	#1
     39  f525
     40  f525		       20 21 f0 	      jsr	BinBcdConvert
     41  f528
     42  f528							; Only use first byte
     43  f528		       8a		      txa
     44  f529		       29 0f		      and	#$0f
     45  f52b		       a8		      tay
     46  f52c		       8a		      txa
     47  f52d		       29 f0		      and	#$f0
     48  f52f					      REPEAT	4
     49  f52f		       4a		      lsr
     48  f52f					      REPEND
     49  f530		       4a		      lsr
     48  f530					      REPEND
     49  f531		       4a		      lsr
     48  f531					      REPEND
     49  f532		       4a		      lsr
     50  f533					      REPEND
     51  f533		       aa		      tax
     52  f534
     53  f534							; Adjust index positions by multiplying by 5
     54  f534		       8a		      txa
     55  f535		       85 83		      sta	Temp
     56  f537		       0a		      asl
     57  f538		       0a		      asl
     58  f539		       65 83		      adc	Temp
     59  f53b		       85 97		      sta	ScoreDigitTens
     60  f53d
     61  f53d		       98		      tya
     62  f53e		       85 83		      sta	Temp
     63  f540		       0a		      asl
     64  f541		       0a		      asl
     65  f542		       65 83		      adc	Temp
     66  f544		       85 95		      sta	ScoreDigitOnes
     67  f546
     68  f546							; Score Digits
     69  f546		       a5 94		      lda	ScoreValue+1
     70  f548
     71  f548		       20 21 f0 	      jsr	BinBcdConvert
     72  f54b
     73  f54b							; Only use first byte
     74  f54b		       8a		      txa
     75  f54c		       29 0f		      and	#$0f
     76  f54e		       a8		      tay
     77  f54f		       8a		      txa
     78  f550		       29 f0		      and	#$f0
     79  f552					      REPEAT	4
     80  f552		       4a		      lsr
     79  f552					      REPEND
     80  f553		       4a		      lsr
     79  f553					      REPEND
     80  f554		       4a		      lsr
     79  f554					      REPEND
     80  f555		       4a		      lsr
     81  f556					      REPEND
     82  f556		       aa		      tax
     83  f557
     84  f557							; Adjust index positions by multiplying by 5
     85  f557		       8a		      txa
     86  f558		       85 83		      sta	Temp
     87  f55a		       0a		      asl
     88  f55b		       0a		      asl
     89  f55c		       65 83		      adc	Temp
     90  f55e		       85 98		      sta	ScoreDigitTens+1
     91  f560
     92  f560		       98		      tya
     93  f561		       85 83		      sta	Temp
     94  f563		       0a		      asl
     95  f564		       0a		      asl
     96  f565		       65 83		      adc	Temp
     97  f567		       85 96		      sta	ScoreDigitOnes+1
     98  f569
     99  f569							; Health Bar
    100  f569		       a5 93		      lda	ScoreValue+0
    101  f56b		       f0 1c		      beq	.score_update_bar_empty
    102  f56d
    103  f56d					      REPEAT	4
    104  f56d		       4a		      lsr
    103  f56d					      REPEND
    104  f56e		       4a		      lsr
    103  f56e					      REPEND
    104  f56f		       4a		      lsr
    103  f56f					      REPEND
    104  f570		       4a		      lsr
    105  f571					      REPEND
    106  f571		       c9 08		      cmp	#8
    107  f573		       b0 09		      bcs	.score_update_bar_top
    108  f575
    109  f575				   .score_update_bar_bottom
    110  f575		       aa		      tax
    111  f576		       bd 86 f6 	      lda	ScoreBar,x
    112  f579		       a0 00		      ldy	#$00
    113  f57b		       4c 8d f5 	      jmp	.score_update_bar_store
    114  f57e
    115  f57e				   .score_update_bar_top
    116  f57e		       29 07		      and	#%00000111
    117  f580		       aa		      tax
    118  f581		       a9 7f		      lda	#$7f
    119  f583		       bc 8e f6 	      ldy	ScoreBarFlip,x
    120  f586		       4c 8d f5 	      jmp	.score_update_bar_store
    121  f589
    122  f589				   .score_update_bar_empty
    123  f589		       a9 00		      lda	#0
    124  f58b		       a0 00		      ldy	#0
    125  f58d
    126  f58d				   .score_update_bar_store
    127  f58d		       85 9c		      sta	ScoreBarGfx+0
    128  f58f		       84 9d		      sty	ScoreBarGfx+1
    129  f591
    130  f591				   .score_update_end
    131  f591		       60		      rts
    132  f592
    133  f592							; Draw loop (uses SCORE_LINES scanlines)
    134  f592
    135  f592				   ScoreDraw
    136  f592
    137  f592							; Load Colors
    138  f592		       a9 00		      lda	#SCORE_BG_COLOR
    139  f594		       85 09		      sta	COLUBK
    140  f596		       a9 0f		      lda	#SCORE_LABEL_COLOR
    141  f598		       85 08		      sta	COLUPF
    142  f59a		       85 06		      sta	COLUP0
    143  f59c		       85 07		      sta	COLUP1
    144  f59e
    145  f59e							; Set Non-Mirror
    146  f59e		       a5 80		      lda	CtrlPf
    147  f5a0		       29 fc		      and	#%11111100
    148  f5a2		       09 02		      ora	#%00000010
    149  f5a4		       85 80		      sta	CtrlPf
    150  f5a6		       85 0a		      sta	CTRLPF
    151  f5a8
    152  f5a8		       a2 00		      ldx	#0
    153  f5aa				   .score_draw_label
    154  f5aa
    155  f5aa		       85 02		      sta	WSYNC
    156  f5ac
    157  f5ac							; First half of image
    158  f5ac		       bd 20 f1 	      lda	ScoreLabel+0,x	; 4
    159  f5af		       85 0d		      sta	PF0	; 3
    160  f5b1		       bd 21 f1 	      lda	ScoreLabel+1,x
    161  f5b4		       85 0e		      sta	PF1
    162  f5b6		       bd 22 f1 	      lda	ScoreLabel+2,x
    163  f5b9		       85 0f		      sta	PF2
    164  f5bb
      0  f5bb					      sleep	8
      1  f5bb				   .CYCLES    SET	8
      2  f5bb
      3  f5bb				  -	      IF	.CYCLES < 2
      4  f5bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5bb				  -	      ERR
      6  f5bb					      ENDIF
      7  f5bb
      8  f5bb				  -	      IF	.CYCLES & 1
      9  f5bb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5bb				  -	      nop	0
     11  f5bb				  -	      ELSE
     12  f5bb				  -	      bit	VSYNC
     13  f5bb				  -	      ENDIF
     14  f5bb				  -.CYCLES    SET	.CYCLES - 3
     15  f5bb					      ENDIF
     16  f5bb
     17  f5bb					      REPEAT	.CYCLES / 2
     18  f5bb		       ea		      nop
     17  f5bb					      REPEND
     18  f5bc		       ea		      nop
     17  f5bc					      REPEND
     18  f5bd		       ea		      nop
     17  f5bd					      REPEND
     18  f5be		       ea		      nop
     19  f5bf					      REPEND
    166  f5bf
    167  f5bf							; Second half of image
    168  f5bf							;lda ScoreLabel+3,x ; 4
    169  f5bf		       a9 00		      lda	#0	; 2
    170  f5c1		       85 0d		      sta	PF0	; 3
    171  f5c3		       bd 24 f1 	      lda	ScoreLabel+4,x
    172  f5c6		       85 0e		      sta	PF1
    173  f5c8		       bd 25 f1 	      lda	ScoreLabel+5,x
    174  f5cb		       85 0f		      sta	PF2
    175  f5cd
    176  f5cd		       8a		      txa
    177  f5ce		       18		      clc
    178  f5cf		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    179  f5d1		       aa		      tax
    180  f5d2		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    181  f5d4		       d0 d4		      bne	.score_draw_label
    182  f5d6
    183  f5d6							; Clear labels and setup color
    184  f5d6		       a9 00		      lda	#0
    185  f5d8		       85 0d		      sta	PF0
    186  f5da		       85 0e		      sta	PF1
    187  f5dc		       85 0f		      sta	PF2
    188  f5de
    189  f5de		       85 02		      sta	WSYNC
    190  f5e0
    191  f5e0		       a9 44		      lda	#SCORE_LEVEL_COLOR
    192  f5e2		       85 08		      sta	COLUPF
    193  f5e4		       85 06		      sta	COLUP0
    194  f5e6		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    195  f5e8		       85 07		      sta	COLUP1
    196  f5ea
    197  f5ea		       85 02		      sta	WSYNC
    198  f5ec
    199  f5ec							; Prepare initial line
    200  f5ec
    201  f5ec							; Level
    202  f5ec		       a4 97		      ldy	ScoreDigitTens
    203  f5ee		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    204  f5f1		       29 f0		      and	#$f0
    205  f5f3		       85 99		      sta	ScoreDigitGfx
    206  f5f5
    207  f5f5		       a4 95		      ldy	ScoreDigitOnes
    208  f5f7		       b9 bc f0 	      lda	ScoreDigits,y
    209  f5fa		       29 f0		      and	#$f0
    210  f5fc		       85 9a		      sta	ScoreDigitGfx+1
    211  f5fe
    212  f5fe							; Score
    213  f5fe		       a4 98		      ldy	ScoreDigitTens+1
    214  f600		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    215  f603		       29 0f		      and	#$0f
    216  f605		       85 9b		      sta	ScoreDigitGfx+2
    217  f607
    218  f607		       a4 96		      ldy	ScoreDigitOnes+1
    219  f609		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    220  f60c		       29 f0		      and	#$f0
    221  f60e		       05 9b		      ora	ScoreDigitGfx+2
    222  f610		       85 9b		      sta	ScoreDigitGfx+2
    223  f612
    224  f612		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    225  f614		       a5 99		      lda	ScoreDigitGfx
    226  f616		       85 02		      sta	WSYNC
    227  f618				   .score_draw_digit
    228  f618
    229  f618							;lda ScoreDigitGfx
    230  f618		       85 0d		      sta	PF0
    231  f61a		       a5 9a		      lda	ScoreDigitGfx+1
    232  f61c		       85 0e		      sta	PF1
    233  f61e		       a5 9b		      lda	ScoreDigitGfx+2
    234  f620		       85 0f		      sta	PF2
    235  f622
    236  f622							; Begin preparing next line
    237  f622		       e6 95		      inc	ScoreDigitOnes
    238  f624		       e6 97		      inc	ScoreDigitTens
    239  f626		       e6 96		      inc	ScoreDigitOnes+1
    240  f628		       e6 98		      inc	ScoreDigitTens+1
    241  f62a
    242  f62a		       a9 00		      lda	#0
    243  f62c		       85 0d		      sta	PF0
    244  f62e		       a5 9c		      lda	ScoreBarGfx+0
    245  f630		       85 0e		      sta	PF1
    246  f632		       a5 9d		      lda	ScoreBarGfx+1
    247  f634		       85 0f		      sta	PF2
    248  f636
    249  f636							; Level 1st Digit
    250  f636		       a4 97		      ldy	ScoreDigitTens
    251  f638		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    252  f63b		       29 f0		      and	#$f0
    253  f63d		       85 83		      sta	Temp
    254  f63f
    255  f63f							; Score 1st Digit
    256  f63f		       a4 98		      ldy	ScoreDigitTens+1
    257  f641		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    258  f644		       29 0f		      and	#$0f
    259  f646		       85 84		      sta	Temp+1
    260  f648
    261  f648		       a5 99		      lda	ScoreDigitGfx
    262  f64a		       85 0d		      sta	PF0
    263  f64c		       a5 9a		      lda	ScoreDigitGfx+1
    264  f64e		       85 0e		      sta	PF1
    265  f650		       a5 9b		      lda	ScoreDigitGfx+2
    266  f652		       85 0f		      sta	PF2
    267  f654
    268  f654							; Level 2nd Digit (and transfer)
    269  f654		       a4 95		      ldy	ScoreDigitOnes
    270  f656		       b9 bc f0 	      lda	ScoreDigits,y
    271  f659		       29 f0		      and	#$f0
    272  f65b		       85 9a		      sta	ScoreDigitGfx+1
    273  f65d
      0  f65d					      sleep	3
      1  f65d				   .CYCLES    SET	3
      2  f65d
      3  f65d				  -	      IF	.CYCLES < 2
      4  f65d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f65d				  -	      ERR
      6  f65d					      ENDIF
      7  f65d
      8  f65d					      IF	.CYCLES & 1
      9  f65d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f65d		       04 00		      nop	0
     11  f65f				  -	      ELSE
     12  f65f				  -	      bit	VSYNC
     13  f65f					      ENDIF
     14  f65f				   .CYCLES    SET	.CYCLES - 3
     15  f65f					      ENDIF
     16  f65f
     17  f65f				  -	      REPEAT	.CYCLES / 2
     18  f65f				  -	      nop
     19  f65f					      REPEND
    275  f65f
    276  f65f		       a9 00		      lda	#0
    277  f661		       85 0d		      sta	PF0
    278  f663		       a5 9c		      lda	ScoreBarGfx+0
    279  f665		       85 0e		      sta	PF1
    280  f667		       a4 9d		      ldy	ScoreBarGfx+1
    281  f669		       84 0f		      sty	PF2
    282  f66b
    283  f66b							; Score 2nd Digit (and transfer)
    284  f66b		       a4 96		      ldy	ScoreDigitOnes+1
    285  f66d		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    286  f670		       29 f0		      and	#$f0
    287  f672		       05 84		      ora	Temp+1
    288  f674		       85 9b		      sta	ScoreDigitGfx+2
    289  f676
    290  f676							; Transfer Level 1st Digit
    291  f676		       a5 83		      lda	Temp
    292  f678		       85 99		      sta	ScoreDigitGfx
    293  f67a
    294  f67a		       ca		      dex
    295  f67b		       d0 9b		      bne	.score_draw_digit
    296  f67d
    297  f67d		       a9 00		      lda	#0
    298  f67f		       85 0d		      sta	PF0
    299  f681		       85 0e		      sta	PF1
    300  f683		       85 0f		      sta	PF2
    301  f685
    302  f685		       60		      rts
    303  f686
    304  f686				   ScoreBar
    305  f686		       40		      .BYTE.b	#%01000000
    306  f687		       40		      .BYTE.b	#%01000000
    307  f688		       60		      .BYTE.b	#%01100000
    308  f689		       70		      .BYTE.b	#%01110000
    309  f68a		       78		      .BYTE.b	#%01111000
    310  f68b		       7c		      .BYTE.b	#%01111100
    311  f68c		       7e		      .BYTE.b	#%01111110
    312  f68d		       7f		      .BYTE.b	#%01111111
    313  f68e
    314  f68e				   ScoreBarFlip
    315  f68e		       01		      .BYTE.b	#%00000001
    316  f68f		       03		      .BYTE.b	#%00000011
    317  f690		       07		      .BYTE.b	#%00000111
    318  f691		       0f		      .BYTE.b	#%00001111
    319  f692		       1f		      .BYTE.b	#%00011111
    320  f693		       3f		      .BYTE.b	#%00111111
    321  f694		       7f		      .BYTE.b	#%01111111
    322  f695		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f696					      include	"objects/web.asm"
      1  f696							;================
      2  f696							; Web (Playfield)
      3  f696							;================
      4  f696
      5  f696							; Constants
      6  f696
      7  f696		       00 00	   WEB_BG_COLOR =	#$00
      8  f696		       00 06	   WEB_FG_COLOR =	#$06
      9  f696
     10  f696		       00 1e	   WEB_SIZE   =	30
     11  f696		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f696		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f696
     14  f696							; Scanline Draw
     15  f696
     16  f696				   WebDrawStart
     17  f696
     18  f696							; Load Colors
     19  f696							;    lda WebColor+0
     20  f696							;    sta COLUBK
     21  f696		       a5 a1		      lda	WebColor+1
     22  f698		       85 08		      sta	COLUPF
     23  f69a
     24  f69a							; Mirror playfield and use standard playfield color
     25  f69a		       a5 80		      lda	CtrlPf
     26  f69c		       29 fc		      and	#%11111100
     27  f69e		       09 01		      ora	#%00000001
     28  f6a0		       85 80		      sta	CtrlPf
     29  f6a2		       85 0a		      sta	CTRLPF
     30  f6a4
     31  f6a4							; Initialize image index
     32  f6a4		       a9 00		      lda	#0
     33  f6a6		       85 9f		      sta	WebIndex
     34  f6a8
     35  f6a8		       60		      rts
     36  f6a9
     37  f6a9				   WebClean
     38  f6a9
     39  f6a9							; Clear out playfield
     40  f6a9		       a9 00		      lda	#0
     41  f6ab		       85 0d		      sta	PF0
     42  f6ad		       85 0e		      sta	PF1
     43  f6af		       85 0f		      sta	PF2
     44  f6b1
     45  f6b1							; Clear colors
     46  f6b1		       85 09		      sta	COLUBK
     47  f6b3		       85 08		      sta	COLUPF
     48  f6b5
     49  f6b5		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f6b6					      include	"objects/spider.asm"
      1  f6b6							;=================
      2  f6b6							; Spider (player0)
      3  f6b6							;=================
      4  f6b6
      5  f6b6							; Constants
      6  f6b6
      7  f6b6		       00 56	   SPIDER_COLOR =	#$56
      8  f6b6		       00 10	   SPIDER_SPRITE_SIZE =	16
      9  f6b6		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     10  f6b6		       00 02	   SPIDER_VEL_X =	2
     11  f6b6		       00 02	   SPIDER_VEL_Y =	2
     12  f6b6
     13  f6b6		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f6b6
     15  f6b6							; Initialization
     16  f6b6
     17  f6b6				   SpiderInit
     18  f6b6
     19  f6b6							; Initialize Position in center of screen
     20  f6b6		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f6b8		       85 a4		      sta	SpiderPos
     22  f6ba		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f6bc		       85 a5		      sta	SpiderPos+1
     24  f6be
     25  f6be							; Setup Sprite
      0  f6be					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f6be				   .POINTER   SET	SpiderPtr
      2  f6be				   .ADDRESS   SET	SpiderSprite
      3  f6be
      4  f6be		       a9 98		      LDA	#<.ADDRESS
      5  f6c0		       85 a2		      STA	.POINTER
      6  f6c2		       a9 f1		      LDA	#>.ADDRESS
      7  f6c4		       85 a3		      STA	.POINTER+1
      8  f6c6
     27  f6c6
     28  f6c6							;    lda #SPIDER_COLOR
     29  f6c6							;    sta SpiderColor
     30  f6c6
     31  f6c6		       60		      rts
     32  f6c7
     33  f6c7							; Frame Update
     34  f6c7
     35  f6c7				   SpiderUpdate
     36  f6c7		       20 ce f6 	      jsr	SpiderControl
     37  f6ca		       20 b4 f7 	      jsr	SpiderCollision
     38  f6cd		       60		      rts
     39  f6ce
     40  f6ce				   SpiderControl
     41  f6ce
     42  f6ce							; Control Position
     43  f6ce		       a6 a4		      ldx	SpiderPos
     44  f6d0		       a4 a5		      ldy	SpiderPos+1
     45  f6d2		       ad 80 02 	      lda	SWCHA
     46  f6d5
     47  f6d5				   .spider_control_check_right
     48  f6d5		       30 02		      bmi	.spider_control_check_left
     49  f6d7
     50  f6d7					      REPEAT	#SPIDER_VEL_X
     51  f6d7		       e8		      inx
     50  f6d7					      REPEND
     51  f6d8		       e8		      inx
     52  f6d9					      REPEND
     53  f6d9
     54  f6d9				   .spider_control_check_left
     55  f6d9		       2a		      rol
     56  f6da		       30 02		      bmi	.spider_control_check_down
     57  f6dc
     58  f6dc					      REPEAT	#SPIDER_VEL_X
     59  f6dc		       ca		      dex
     58  f6dc					      REPEND
     59  f6dd		       ca		      dex
     60  f6de					      REPEND
     61  f6de
     62  f6de				   .spider_control_check_down
     63  f6de		       2a		      rol
     64  f6df		       30 02		      bmi	.spider_control_check_up
     65  f6e1
     66  f6e1					      REPEAT	#SPIDER_VEL_Y
     67  f6e1		       88		      dey
     66  f6e1					      REPEND
     67  f6e2		       88		      dey
     68  f6e3					      REPEND
     69  f6e3
     70  f6e3				   .spider_control_check_up
     71  f6e3		       2a		      rol
     72  f6e4		       30 02		      bmi	.spider_control_sprite
     73  f6e6
     74  f6e6					      REPEAT	#SPIDER_VEL_Y
     75  f6e6		       c8		      iny
     74  f6e6					      REPEND
     75  f6e7		       c8		      iny
     76  f6e8					      REPEND
     77  f6e8
     78  f6e8				   .spider_control_sprite
     79  f6e8							; Control Sprite
     80  f6e8		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f6ea
     82  f6ea				   .spider_control_sprite_x
     83  f6ea		       e4 a4		      cpx	SpiderPos
     84  f6ec		       90 04		      bcc	.spider_control_sprite_left
     85  f6ee		       f0 09		      beq	.spider_control_sprite_y
     86  f6f0		       b0 05		      bcs	.spider_control_sprite_right
     87  f6f2
     88  f6f2				   .spider_control_sprite_left
     89  f6f2		       09 80		      ora	#%10000000
     90  f6f4		       4c f9 f6 	      jmp	.spider_control_sprite_y
     91  f6f7
     92  f6f7				   .spider_control_sprite_right
     93  f6f7		       09 40		      ora	#%01000000
     94  f6f9
     95  f6f9				   .spider_control_sprite_y
     96  f6f9		       c4 a5		      cpy	SpiderPos+1
     97  f6fb		       90 04		      bcc	.spider_control_sprite_down
     98  f6fd		       f0 09		      beq	.spider_control_sprite_store
     99  f6ff		       b0 05		      bcs	.spider_control_sprite_up
    100  f701
    101  f701				   .spider_control_sprite_down
    102  f701		       09 10		      ora	#%00010000
    103  f703		       4c 08 f7 	      jmp	.spider_control_sprite_store
    104  f706
    105  f706				   .spider_control_sprite_up
    106  f706		       09 20		      ora	#%00100000
    107  f708
    108  f708				   .spider_control_sprite_store
    109  f708		       c9 00		      cmp	#%00000000
    110  f70a		       f0 02		      beq	.spider_control_boundary
    111  f70c		       85 a6		      sta	SpiderCtrl
    112  f70e
    113  f70e				   .spider_control_boundary
    114  f70e							; Check Playfield Boundaries
    115  f70e
    116  f70e				   .spider_control_boundary_left
    117  f70e		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f710		       b0 05		      bcs	.spider_control_boundary_right
    119  f712		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f714		       4c 1d f7 	      jmp	.spider_control_boundary_top
    121  f717
    122  f717				   .spider_control_boundary_right
    123  f717		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    124  f719		       90 02		      bcc	.spider_control_boundary_top
    125  f71b		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    126  f71d
    127  f71d				   .spider_control_boundary_top
    128  f71d		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    129  f71f		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f721		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    131  f723		       4c 2c f7 	      jmp	.spider_control_store
    132  f726
    133  f726				   .spider_control_boundary_bottom
    134  f726		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    135  f728		       90 02		      bcc	.spider_control_store
    136  f72a		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    137  f72c
    138  f72c				   .spider_control_store
    139  f72c							; Store new position
    140  f72c		       86 a4		      stx	SpiderPos
    141  f72e		       84 a5		      sty	SpiderPos+1
    142  f730
    143  f730							; TODO: Optimize this somehow?
    144  f730				   .spider_control_sprite_assign
    145  f730							; Skip if no change
    146  f730		       c9 00		      cmp	#%00000000
    147  f732		       f0 7f		      beq	.spider_control_return
    148  f734
    149  f734		       a2 00		      ldx	#%00000000	; For reflection
    150  f736
    151  f736				   .spider_control_sprite_assign_left
    152  f736		       c9 80		      cmp	#%10000000
    153  f738		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f73a					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f73a				   .POINTER   SET	SpiderPtr
      2  f73a				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f73a
      4  f73a		       a9 b8		      LDA	#<.ADDRESS
      5  f73c		       85 a2		      STA	.POINTER
      6  f73e		       a9 f1		      LDA	#>.ADDRESS
      7  f740		       85 a3		      STA	.POINTER+1
      8  f742
    155  f742		       a2 08		      ldx	#%00001000
    156  f744		       4c b1 f7 	      jmp	.spider_control_reflect
    157  f747
    158  f747				   .spider_control_sprite_assign_right
    159  f747		       c9 40		      cmp	#%01000000
    160  f749		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f74b					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f74b				   .POINTER   SET	SpiderPtr
      2  f74b				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f74b
      4  f74b		       a9 b8		      LDA	#<.ADDRESS
      5  f74d		       85 a2		      STA	.POINTER
      6  f74f		       a9 f1		      LDA	#>.ADDRESS
      7  f751		       85 a3		      STA	.POINTER+1
      8  f753
    162  f753		       4c b1 f7 	      jmp	.spider_control_reflect
    163  f756
    164  f756				   .spider_control_sprite_assign_top
    165  f756		       c9 20		      cmp	#%00100000
    166  f758		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f75a					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f75a				   .POINTER   SET	SpiderPtr
      2  f75a				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f75a
      4  f75a		       a9 98		      LDA	#<.ADDRESS
      5  f75c		       85 a2		      STA	.POINTER
      6  f75e		       a9 f1		      LDA	#>.ADDRESS
      7  f760		       85 a3		      STA	.POINTER+1
      8  f762
    168  f762		       4c b1 f7 	      jmp	.spider_control_reflect
    169  f765
    170  f765				   .spider_control_sprite_assign_bottom
    171  f765		       c9 10		      cmp	#%00010000
    172  f767		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f769					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f769				   .POINTER   SET	SpiderPtr
      2  f769				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f769
      4  f769		       a9 d8		      LDA	#<.ADDRESS
      5  f76b		       85 a2		      STA	.POINTER
      6  f76d		       a9 f1		      LDA	#>.ADDRESS
      7  f76f		       85 a3		      STA	.POINTER+1
      8  f771
    174  f771		       4c b1 f7 	      jmp	.spider_control_reflect
    175  f774
    176  f774				   .spider_control_sprite_assign_top_right
    177  f774		       c9 60		      cmp	#%01100000
    178  f776		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f778					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f778				   .POINTER   SET	SpiderPtr
      2  f778				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f778
      4  f778		       a9 a8		      LDA	#<.ADDRESS
      5  f77a		       85 a2		      STA	.POINTER
      6  f77c		       a9 f1		      LDA	#>.ADDRESS
      7  f77e		       85 a3		      STA	.POINTER+1
      8  f780
    180  f780		       4c b1 f7 	      jmp	.spider_control_reflect
    181  f783
    182  f783				   .spider_control_sprite_assign_bottom_right
    183  f783		       c9 50		      cmp	#%01010000
    184  f785		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f787					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f787				   .POINTER   SET	SpiderPtr
      2  f787				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f787
      4  f787		       a9 c8		      LDA	#<.ADDRESS
      5  f789		       85 a2		      STA	.POINTER
      6  f78b		       a9 f1		      LDA	#>.ADDRESS
      7  f78d		       85 a3		      STA	.POINTER+1
      8  f78f
    186  f78f		       4c b1 f7 	      jmp	.spider_control_reflect
    187  f792
    188  f792				   .spider_control_sprite_assign_bottom_left
    189  f792		       c9 90		      cmp	#%10010000
    190  f794		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f796					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f796				   .POINTER   SET	SpiderPtr
      2  f796				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f796
      4  f796		       a9 c8		      LDA	#<.ADDRESS
      5  f798		       85 a2		      STA	.POINTER
      6  f79a		       a9 f1		      LDA	#>.ADDRESS
      7  f79c		       85 a3		      STA	.POINTER+1
      8  f79e
    192  f79e		       a2 08		      ldx	#%00001000
    193  f7a0		       4c b1 f7 	      jmp	.spider_control_reflect
    194  f7a3
    195  f7a3				   .spider_control_sprite_assign_top_left
    196  f7a3		       c9 a0		      cmp	#%10100000
    197  f7a5		       d0 0a		      bne	.spider_control_reflect
      0  f7a7					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f7a7				   .POINTER   SET	SpiderPtr
      2  f7a7				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f7a7
      4  f7a7		       a9 a8		      LDA	#<.ADDRESS
      5  f7a9		       85 a2		      STA	.POINTER
      6  f7ab		       a9 f1		      LDA	#>.ADDRESS
      7  f7ad		       85 a3		      STA	.POINTER+1
      8  f7af
    199  f7af		       a2 08		      ldx	#%00001000
    200  f7b1
    201  f7b1				   .spider_control_reflect
    202  f7b1		       86 0b		      stx	REFP0
    203  f7b3
    204  f7b3				   .spider_control_return
    205  f7b3		       60		      rts
    206  f7b4
    207  f7b4				   SpiderCollision
    208  f7b4		       a9 56		      lda	#SPIDER_COLOR
    209  f7b6
    210  f7b6				   .spider_collision_m0
    211  f7b6							; Check stun status
    212  f7b6		       a6 b7		      ldx	BugStunned
    213  f7b8		       e0 00		      cpx	#0
    214  f7ba		       d0 04		      bne	.spider_collision_m1
    215  f7bc
    216  f7bc							; Collision for M0 (V set)
    217  f7bc		       24 00		      bit	CXM0P
    218  f7be		       70 0d		      bvs	.spider_collision_active
    219  f7c0
    220  f7c0				   .spider_collision_m1
    221  f7c0							; Check stun status
    222  f7c0		       a6 b8		      ldx	BugStunned+1
    223  f7c2		       e0 00		      cpx	#0
    224  f7c4		       d0 09		      bne	.spider_collision_return
    225  f7c6
    226  f7c6							; Collision for M1 (N set)
    227  f7c6		       24 01		      bit	CXM1P
    228  f7c8		       30 03		      bmi	.spider_collision_active
    229  f7ca
    230  f7ca		       4c cf f7 	      jmp	.spider_collision_return
    231  f7cd
    232  f7cd				   .spider_collision_active
    233  f7cd		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f7cf
    235  f7cf				   .spider_collision_return
    236  f7cf		       85 a7		      sta	SpiderColor
    237  f7d1		       60		      rts
    238  f7d2
    239  f7d2				   SpiderPosition
    240  f7d2
    241  f7d2							; Set Position
    242  f7d2		       a2 00		      ldx	#0	; Object (player0)
    243  f7d4		       a5 a4		      lda	SpiderPos	; X Position
    244  f7d6		       20 00 f0 	      jsr	PosObject
    245  f7d9
    246  f7d9		       60		      rts
    247  f7da
    248  f7da							; Scanline Draw
    249  f7da
    250  f7da				   SpiderDrawStart
    251  f7da
    252  f7da							; Set player 0 to be quad size
    253  f7da		       a5 81		      lda	NuSiz0
    254  f7dc		       29 f8		      and	#%11111000
    255  f7de		       09 05		      ora	#%00000101
    256  f7e0		       85 81		      sta	NuSiz0
    257  f7e2		       85 04		      sta	NUSIZ0
    258  f7e4
    259  f7e4							; Set sprite color
    260  f7e4		       a5 a7		      lda	SpiderColor
    261  f7e6		       85 06		      sta	COLUP0
    262  f7e8
    263  f7e8							; Determine if we need to use vertical delay (odd line)
    264  f7e8		       a5 a5		      lda	SpiderPos+1	; Y Position
    265  f7ea		       4a		      lsr
    266  f7eb		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f7ed
    268  f7ed		       a0 01		      ldy	#1
    269  f7ef		       4c f4 f7 	      jmp	.spider_draw_start_set_delay
    270  f7f2
    271  f7f2				   .spider_draw_start_nodelay
    272  f7f2		       a0 00		      ldy	#0
    273  f7f4
    274  f7f4				   .spider_draw_start_set_delay
    275  f7f4		       84 25		      sty	VDELP0
    276  f7f6
    277  f7f6				   .spider_draw_start_pos
    278  f7f6							; Calculate starting position
    279  f7f6		       18		      clc
    280  f7f7		       69 10		      adc	#SPIDER_SIZE
    281  f7f9		       85 a9		      sta	SpiderDrawPos
    282  f7fb
    283  f7fb							; Initialize sprite index and line buffer
    284  f7fb		       a9 00		      lda	#0
    285  f7fd		       85 a8		      sta	SpiderIndex
    286  f7ff		       85 aa		      sta	SpiderLine
    287  f801
    288  f801		       60		      rts
    289  f802
    290  f802				   SpiderClean
    291  f802
    292  f802							; Clear out Player0 sprite
    293  f802		       a9 00		      lda	#0
    294  f804		       85 1b		      sta	GRP0
    295  f806
    296  f806		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f807					      include	"objects/line.asm"
      1  f807							;================
      2  f807							; Line (ball)
      3  f807							;================
      4  f807
      5  f807							; Constants
      6  f807
      7  f807		       00 08	   LINE_SIZE  =	8
      8  f807		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f807		       00 04	   LINE_VEL_X =	4
     10  f807		       00 04	   LINE_VEL_Y =	4
     11  f807
     12  f807		       00 08	   LINE_AUDIO_C =	8
     13  f807		       00 01	   LINE_AUDIO_F =	1
     14  f807		       00 04	   LINE_AUDIO_V =	4
     15  f807
     16  f807		       00 08	   LINE_SAMPLE_LEN =	8
     17  f807		       00 03	   LINE_SAMPLE_C =	3
     18  f807		       00 01	   LINE_SAMPLE_F =	1
     19  f807		       00 04	   LINE_SAMPLE_V =	4
     20  f807
     21  f807							; Initialization
     22  f807
     23  f807				   LineInit
     24  f807
     25  f807							; Initial Line Control
     26  f807		       a9 00		      lda	#0
     27  f809		       85 ad		      sta	LineEnabled
     28  f80b		       85 ae		      sta	LinePos+0
     29  f80d		       85 af		      sta	LinePos+1
     30  f80f		       85 b0		      sta	LineVelocity+0
     31  f811		       85 b1		      sta	LineVelocity+1
     32  f813		       85 b2		      sta	LineStartPos+0
     33  f815		       85 b3		      sta	LineStartPos+1
     34  f817		       85 b4		      sta	LineDrawPos+0
     35  f819		       85 b5		      sta	LineDrawPos+1
     36  f81b
     37  f81b		       60		      rts
     38  f81c
     39  f81c							; Frame Update
     40  f81c
     41  f81c				   LineUpdate
     42  f81c		       20 26 f8 	      jsr	LineControl
     43  f81f		       20 de f8 	      jsr	LineObject
     44  f822		       20 25 f9 	      jsr	LineCollision
     45  f825		       60		      rts
     46  f826
     47  f826				   LineControl
     48  f826
     49  f826							; Check if Fire Button on controller 1 is pressed
     50  f826		       a5 0c		      lda	INPT4
     51  f828		       30 0a		      bmi	.line_control_skip
     52  f82a
     53  f82a		       24 ad		      bit	LineEnabled
     54  f82c		       30 06		      bmi	.line_control_skip
     55  f82e
     56  f82e		       a5 a6		      lda	SpiderCtrl
     57  f830		       c9 00		      cmp	#0
     58  f832		       d0 03		      bne	.line_control_fire
     59  f834
     60  f834				   .line_control_skip
     61  f834		       4c dd f8 	      jmp	.line_control_return
     62  f837
     63  f837				   .line_control_fire
     64  f837		       20 6d f9 	      jsr	LineEnable
     65  f83a
     66  f83a				   .line_control_x
     67  f83a		       a5 a6		      lda	SpiderCtrl
     68  f83c		       29 c0		      and	#%11000000
     69  f83e		       f0 0e		      beq	.line_control_x_none
     70  f840				   .line_control_x_left
     71  f840		       c9 80		      cmp	#%10000000
     72  f842		       d0 05		      bne	.line_control_x_right
     73  f844
     74  f844		       a9 fc		      lda	#-LINE_VEL_X
     75  f846		       4c 50 f8 	      jmp	.line_control_x_store
     76  f849				   .line_control_x_right
     77  f849		       a9 04		      lda	#LINE_VEL_X
     78  f84b		       4c 50 f8 	      jmp	.line_control_x_store
     79  f84e				   .line_control_x_none
     80  f84e		       a9 00		      lda	#0
     81  f850				   .line_control_x_store
     82  f850		       85 b0		      sta	LineVelocity
     83  f852
     84  f852				   .line_control_y
     85  f852		       a5 a6		      lda	SpiderCtrl
     86  f854		       29 30		      and	#%00110000
     87  f856		       f0 0e		      beq	.line_control_y_none
     88  f858				   .line_control_y_up
     89  f858		       c9 20		      cmp	#%00100000
     90  f85a		       d0 05		      bne	.line_control_y_down
     91  f85c
     92  f85c		       a9 04		      lda	#LINE_VEL_Y
     93  f85e		       4c 68 f8 	      jmp	.line_control_y_store
     94  f861				   .line_control_y_down
     95  f861		       a9 fc		      lda	#-LINE_VEL_Y
     96  f863		       4c 68 f8 	      jmp	.line_control_y_store
     97  f866				   .line_control_y_none
     98  f866		       a9 00		      lda	#0
     99  f868				   .line_control_y_store
    100  f868		       85 b1		      sta	LineVelocity+1
    101  f86a
    102  f86a				   .line_control_position
    103  f86a
    104  f86a		       a2 00		      ldx	#0	; offsetX
    105  f86c		       a0 00		      ldy	#0	; offsetY
    106  f86e
    107  f86e		       a5 a6		      lda	SpiderCtrl
    108  f870		       29 f0		      and	#%11110000
    109  f872
    110  f872				   .line_control_position_left
    111  f872		       c9 80		      cmp	#%10000000
    112  f874		       d0 07		      bne	.line_control_position_right
    113  f876
    114  f876		       a2 00		      ldx	#0
    115  f878		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    116  f87a		       4c c5 f8 	      jmp	.line_control_position_store
    117  f87d
    118  f87d				   .line_control_position_right
    119  f87d		       c9 40		      cmp	#%01000000
    120  f87f		       d0 07		      bne	.line_control_position_top
    121  f881
    122  f881		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    123  f883		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    124  f885		       4c c5 f8 	      jmp	.line_control_position_store
    125  f888
    126  f888				   .line_control_position_top
    127  f888		       c9 20		      cmp	#%00100000
    128  f88a		       d0 07		      bne	.line_control_position_bottom
    129  f88c
    130  f88c		       a2 08		      ldx	#SPIDER_SIZE/2
    131  f88e		       a0 10		      ldy	#SPIDER_SIZE
    132  f890		       4c c5 f8 	      jmp	.line_control_position_store
    133  f893
    134  f893				   .line_control_position_bottom
    135  f893		       c9 10		      cmp	#%00010000
    136  f895		       d0 05		      bne	.line_control_position_top_right
    137  f897
    138  f897		       a2 08		      ldx	#SPIDER_SIZE/2
    139  f899		       4c c5 f8 	      jmp	.line_control_position_store
    140  f89c
    141  f89c				   .line_control_position_top_right
    142  f89c		       c9 60		      cmp	#%01100000
    143  f89e		       d0 07		      bne	.line_control_position_bottom_right
    144  f8a0
    145  f8a0		       a2 10		      ldx	#SPIDER_SIZE
    146  f8a2		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    147  f8a4		       4c c5 f8 	      jmp	.line_control_position_store
    148  f8a7
    149  f8a7				   .line_control_position_bottom_right
    150  f8a7		       c9 50		      cmp	#%01010000
    151  f8a9		       d0 07		      bne	.line_control_position_bottom_left
    152  f8ab
    153  f8ab		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    154  f8ad		       a0 00		      ldy	#0
    155  f8af		       4c c5 f8 	      jmp	.line_control_position_store
    156  f8b2
    157  f8b2				   .line_control_position_bottom_left
    158  f8b2		       c9 90		      cmp	#%10010000
    159  f8b4		       d0 07		      bne	.line_control_position_top_left
    160  f8b6
    161  f8b6							; No Offset
    162  f8b6		       a2 04		      ldx	#LINE_SIZE/2
    163  f8b8		       a0 04		      ldy	#LINE_SIZE/2
    164  f8ba		       4c c5 f8 	      jmp	.line_control_position_store
    165  f8bd
    166  f8bd				   .line_control_position_top_left
    167  f8bd		       c9 a0		      cmp	#%10100000
    168  f8bf		       d0 04		      bne	.line_control_position_store
    169  f8c1
    170  f8c1		       a2 00		      ldx	#0
    171  f8c3		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    172  f8c5
    173  f8c5				   .line_control_position_store
    174  f8c5
    175  f8c5							; Apply offsetX to playerX
    176  f8c5		       a5 a4		      lda	SpiderPos
    177  f8c7		       86 83		      stx	Temp
    178  f8c9		       18		      clc
    179  f8ca		       65 83		      adc	Temp
    180  f8cc		       aa		      tax
    181  f8cd
    182  f8cd							; Apply offsetY to playerY
    183  f8cd		       a5 a5		      lda	SpiderPos+1
    184  f8cf		       84 83		      sty	Temp
    185  f8d1		       18		      clc
    186  f8d2		       65 83		      adc	Temp
    187  f8d4		       a8		      tay
    188  f8d5
    189  f8d5		       86 ae		      stx	LinePos
    190  f8d7		       84 af		      sty	LinePos+1
    191  f8d9		       86 b2		      stx	LineStartPos
    192  f8db		       84 b3		      sty	LineStartPos+1
    193  f8dd
    194  f8dd				   .line_control_return
    195  f8dd		       60		      rts
    196  f8de
    197  f8de				   LineObject
    198  f8de
    199  f8de							; Check if line is enabled
    200  f8de		       24 ad		      bit	LineEnabled
    201  f8e0		       10 42		      bpl	.line_object_return
    202  f8e2
    203  f8e2							; Load position
    204  f8e2		       a6 ae		      ldx	LinePos
    205  f8e4		       a4 af		      ldy	LinePos+1
    206  f8e6
    207  f8e6				   .line_object_distance
    208  f8e6
    209  f8e6							; Check distance from player with absolute value differences
    210  f8e6
    211  f8e6				   .line_object_distance_x
    212  f8e6		       8a		      txa
    213  f8e7		       18		      clc
    214  f8e8		       e5 b2		      sbc	LineStartPos
    215  f8ea		       b0 04		      bcs	.line_object_distance_x_check
    216  f8ec		       49 ff		      eor	#$FF	; C flag is clear here
    217  f8ee		       69 01		      adc	#$01	; form two's complement
    218  f8f0				   .line_object_distance_x_check		; Jumps to if positive
    219  f8f0		       c9 40		      cmp	#LINE_DISTANCE
    220  f8f2		       b0 2d		      bcs	.line_object_disable
    221  f8f4
    222  f8f4				   .line_object_distance_y
    223  f8f4		       98		      tya
    224  f8f5		       18		      clc
    225  f8f6		       e5 b3		      sbc	LineStartPos+1
    226  f8f8		       b0 04		      bcs	.line_object_distance_y_check
    227  f8fa		       49 ff		      eor	#$FF	; C flag is clear here
    228  f8fc		       69 01		      adc	#$01	; form two's complement
    229  f8fe				   .line_object_distance_y_check		; Jumps to if positive
    230  f8fe		       c9 40		      cmp	#LINE_DISTANCE
    231  f900		       b0 1f		      bcs	.line_object_disable
    232  f902
    233  f902				   .line_object_boundary
    234  f902				   .line_object_boundary_left
    235  f902		       e0 04		      cpx	#LINE_VEL_X
    236  f904		       90 1b		      bcc	.line_object_disable
    237  f906				   .line_object_boundary_right
    238  f906		       e0 9c		      cpx	#160-LINE_VEL_X
    239  f908		       b0 17		      bcs	.line_object_disable
    240  f90a				   .line_object_boundary_bottom
    241  f90a		       c0 04		      cpy	#LINE_VEL_Y
    242  f90c		       90 13		      bcc	.line_object_disable
    243  f90e				   .line_object_boundary_top
    244  f90e		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    245  f910		       b0 0f		      bcs	.line_object_disable
    246  f912
    247  f912				   .line_object_velocity
    248  f912
    249  f912							; Apply Velocity
    250  f912		       8a		      txa
    251  f913		       18		      clc
    252  f914		       65 b0		      adc	LineVelocity
    253  f916		       85 ae		      sta	LinePos
    254  f918
    255  f918		       98		      tya
    256  f919		       18		      clc
    257  f91a		       65 b1		      adc	LineVelocity+1
    258  f91c		       85 af		      sta	LinePos+1
    259  f91e
    260  f91e		       4c 24 f9 	      jmp	.line_object_return
    261  f921
    262  f921				   .line_object_disable
    263  f921		       20 7b f9 	      jsr	LineDisable
    264  f924
    265  f924				   .line_object_return
    266  f924		       60		      rts
    267  f925
    268  f925				   LineCollision
    269  f925
    270  f925		       a9 78		      lda	#BUG_STUN_LENGTH
    271  f927
    272  f927				   .line_collision_m0
    273  f927		       24 04		      bit	CXM0FB
    274  f929		       50 08		      bvc	.line_collision_m1
    275  f92b
    276  f92b							; Set stun timer
    277  f92b		       85 b7		      sta	BugStunned+0
    278  f92d
    279  f92d							; Disable line
    280  f92d		       20 7b f9 	      jsr	LineDisable
    281  f930		       4c 3c f9 	      jmp	.line_collision_sample
    282  f933
    283  f933				   .line_collision_m1
    284  f933		       24 05		      bit	CXM1FB
    285  f935		       50 08		      bvc	.line_collision_return
    286  f937
    287  f937							; Set stun timer
    288  f937		       85 b8		      sta	BugStunned+1
    289  f939
    290  f939							; Disable line
    291  f939		       20 7b f9 	      jsr	LineDisable
    292  f93c
    293  f93c				   .line_collision_sample
    294  f93c		       20 9f f9 	      jsr	LineSample
    295  f93f
    296  f93f				   .line_collision_return
    297  f93f		       60		      rts
    298  f940
    299  f940				   LinePosition
    300  f940
    301  f940							; Set Line Position
    302  f940		       a2 04		      ldx	#4	; Object (ball)
    303  f942		       a5 ae		      lda	LinePos	; X Position
    304  f944		       20 00 f0 	      jsr	PosObject
    305  f947
    306  f947		       60		      rts
    307  f948
    308  f948							; Scanline Draw
    309  f948
    310  f948				   LineDrawStart
    311  f948
    312  f948							; Set ball size to be 4 clocks (4/5 bits)
    313  f948		       a5 80		      lda	CtrlPf
    314  f94a		       29 cf		      and	#%11001111
    315  f94c		       09 20		      ora	#%00100000
    316  f94e		       85 80		      sta	CtrlPf
    317  f950		       85 0a		      sta	CTRLPF
    318  f952
    319  f952							; Determine if we need to use vertical delay (oven line)
    320  f952		       a5 af		      lda	LinePos+1
    321  f954		       4a		      lsr
    322  f955		       90 05		      bcc	.line_draw_start_nodelay
    323  f957
    324  f957		       a0 01		      ldy	#1
    325  f959		       4c 5e f9 	      jmp	.line_draw_start_set_delay
    326  f95c
    327  f95c				   .line_draw_start_nodelay
    328  f95c		       a0 00		      ldy	#0
    329  f95e
    330  f95e				   .line_draw_start_set_delay
    331  f95e		       84 27		      sty	VDELBL
    332  f960
    333  f960				   .line_draw_start_pos
    334  f960							; Calculate starting position
    335  f960		       18		      clc
    336  f961		       85 b4		      sta	LineDrawPos+0
    337  f963		       69 04		      adc	#LINE_SIZE/2
    338  f965		       85 b5		      sta	LineDrawPos+1
    339  f967
    340  f967		       60		      rts
    341  f968
    342  f968				   LineClean
    343  f968
    344  f968							; Clear out Line
    345  f968		       a9 00		      lda	#0
    346  f96a		       85 1f		      sta	ENABL
    347  f96c
    348  f96c		       60		      rts
    349  f96d
    350  f96d				   LineEnable
    351  f96d		       a9 80		      lda	#%10000000
    352  f96f		       85 ad		      sta	LineEnabled
    353  f971
    354  f971		       a5 92		      lda	SampleStep
    355  f973		       c9 00		      cmp	#0
    356  f975		       d0 03		      bne	.line_enable_return
    357  f977
    358  f977		       20 89 f9 	      jsr	LineAudioPlay
    359  f97a
    360  f97a				   .line_enable_return
    361  f97a		       60		      rts
    362  f97b
    363  f97b				   LineDisable
    364  f97b		       a9 00		      lda	#0
    365  f97d		       85 ad		      sta	LineEnabled
    366  f97f
    367  f97f		       a5 92		      lda	SampleStep
    368  f981		       c9 00		      cmp	#0
    369  f983		       d0 03		      bne	.line_disable_return
    370  f985
    371  f985		       20 96 f9 	      jsr	LineAudioMute
    372  f988
    373  f988				   .line_disable_return
    374  f988		       60		      rts
    375  f989
    376  f989				   LineAudioPlay
    377  f989		       a9 08		      lda	#LINE_AUDIO_C
    378  f98b		       85 16		      sta	AUDC1
    379  f98d		       a9 01		      lda	#LINE_AUDIO_F
    380  f98f		       85 18		      sta	AUDF1
    381  f991		       a9 04		      lda	#LINE_AUDIO_V
    382  f993		       85 1a		      sta	AUDV1
    383  f995		       60		      rts
    384  f996
    385  f996				   LineAudioMute
    386  f996		       a9 00		      lda	#0
    387  f998		       85 1a		      sta	AUDV1
    388  f99a		       85 18		      sta	AUDF1
    389  f99c		       85 16		      sta	AUDC1
    390  f99e		       60		      rts
    391  f99f
    392  f99f				   LineSample
    393  f99f		       a9 08		      lda	#LINE_SAMPLE_LEN
    394  f9a1		       85 92		      sta	SampleStep
    395  f9a3		       a9 03		      lda	#LINE_SAMPLE_C
    396  f9a5		       85 16		      sta	AUDC1
    397  f9a7		       a9 01		      lda	#LINE_SAMPLE_F
    398  f9a9		       85 18		      sta	AUDF1
    399  f9ab		       a9 04		      lda	#LINE_SAMPLE_V
    400  f9ad		       85 1a		      sta	AUDV1
    401  f9af		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f9b0					      include	"objects/bug.asm"
      1  f9b0							;======================
      2  f9b0							; Bugs (missiles 0 & 1)
      3  f9b0							;======================
      4  f9b0
      5  f9b0							; Constants
      6  f9b0
      7  f9b0		       00 08	   BUG_SIZE   =	8
      8  f9b0		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  f9b0		       00 78	   BUG_STUN_LENGTH =	120
     10  f9b0		       00 04	   BUG_POINTS =	4
     11  f9b0
     12  f9b0		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     13  f9b0		       00 38	   BUG_COLOR_STUN =	#$38
     14  f9b0
     15  f9b0		       00 1e	   BUG_SAMPLE_LEN =	30
     16  f9b0		       00 03	   BUG_SAMPLE_C =	3
     17  f9b0		       00 14	   BUG_SAMPLE_F =	20
     18  f9b0		       00 04	   BUG_SAMPLE_V =	4
     19  f9b0
     20  f9b0		       00 01	   BUG_COL_SAMPLE_LEN =	1
     21  f9b0		       00 08	   BUG_COL_SAMPLE_C =	8
     22  f9b0		       00 08	   BUG_COL_SAMPLE_F =	8
     23  f9b0		       00 03	   BUG_COL_SAMPLE_V =	3
     24  f9b0
     25  f9b0							; Initialization
     26  f9b0
     27  f9b0				   BugInit
     28  f9b0
     29  f9b0							; Initialize Bugs
     30  f9b0		       a2 01		      ldx	#1
     31  f9b2
     32  f9b2				   .bug_init_loop
     33  f9b2		       20 b9 f9 	      jsr	BugReset
     34  f9b5
     35  f9b5		       ca		      dex
     36  f9b6		       10 fa		      bpl	.bug_init_loop
     37  f9b8
     38  f9b8		       60		      rts
     39  f9b9
     40  f9b9				   BugReset		; x = bug (0 or 1)
     41  f9b9
     42  f9b9							; Set random position
     43  f9b9		       20 13 f0 	      jsr	Random
     44  f9bc
     45  f9bc		       a5 86		      lda	Rand8
     46  f9be		       29 7f		      and	#$7f
     47  f9c0		       95 b9		      sta	BugPosX,x
     48  f9c2
     49  f9c2		       a5 87		      lda	Rand16
     50  f9c4		       29 7f		      and	#$7f
     51  f9c6		       95 bb		      sta	BugPosY,x
     52  f9c8
     53  f9c8							; Set as active
     54  f9c8		       a9 00		      lda	#0
     55  f9ca		       95 b7		      sta	BugStunned,x
     56  f9cc
     57  f9cc							; Reset Color
     58  f9cc		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     59  f9ce		       95 bd		      sta	BugColor,x
     60  f9d0
     61  f9d0		       60		      rts
     62  f9d1
     63  f9d1							; Frame Update
     64  f9d1
     65  f9d1				   BugUpdate
     66  f9d1
     67  f9d1		       a2 01		      ldx	#1
     68  f9d3				   .bug_update_loop
     69  f9d3		       86 83		      stx	Temp+0
     70  f9d5
     71  f9d5		       b5 b7		      lda	BugStunned,x
     72  f9d7		       c9 00		      cmp	#0
     73  f9d9		       f0 08		      beq	.bug_update_active
     74  f9db
     75  f9db				   .bug_update_stunned
     76  f9db		       d6 b7		      dec	BugStunned,x
     77  f9dd		       20 68 fa 	      jsr	BugStunCollision
     78  f9e0		       4c e9 f9 	      jmp	.bug_update_next
     79  f9e3
     80  f9e3				   .bug_update_active
     81  f9e3		       20 ef f9 	      jsr	BugMovement
     82  f9e6		       20 4e fa 	      jsr	BugCollision
     83  f9e9
     84  f9e9				   .bug_update_next
     85  f9e9		       a6 83		      ldx	Temp+0
     86  f9eb		       ca		      dex
     87  f9ec		       10 e5		      bpl	.bug_update_loop
     88  f9ee
     89  f9ee		       60		      rts
     90  f9ef
     91  f9ef				   BugMovement
     92  f9ef
     93  f9ef				   .bug_movement_random
     94  f9ef		       20 13 f0 	      jsr	Random
     95  f9f2		       29 03		      and	#%00000011
     96  f9f4		       85 84		      sta	Temp+1
     97  f9f6
     98  f9f6				   .bug_movement_load
     99  f9f6		       a6 83		      ldx	Temp+0
    100  f9f8
    101  f9f8				   .bug_movement_x
    102  f9f8		       a4 b6		      ldy	BugSpeed
    103  f9fa
    104  f9fa							; Alter X Position
    105  f9fa		       a5 84		      lda	Temp+1
    106  f9fc		       29 01		      and	#%00000001
    107  f9fe
    108  f9fe				   .bug_movement_x_check
    109  f9fe		       c9 01		      cmp	#1
    110  fa00		       d0 08		      bne	.bug_movement_x_right
    111  fa02
    112  fa02				   .bug_movement_x_left
    113  fa02		       d6 b9		      dec	BugPosX,x
    114  fa04		       88		      dey
    115  fa05		       d0 fb		      bne	.bug_movement_x_left
    116  fa07
    117  fa07		       4c 0f fa 	      jmp	.bug_movement_y
    118  fa0a
    119  fa0a				   .bug_movement_x_right
    120  fa0a		       f6 b9		      inc	BugPosX,x
    121  fa0c		       88		      dey
    122  fa0d		       d0 fb		      bne	.bug_movement_x_right
    123  fa0f
    124  fa0f				   .bug_movement_y
    125  fa0f		       a4 b6		      ldy	BugSpeed
    126  fa11
    127  fa11							; Alter Y Position
    128  fa11		       a5 84		      lda	Temp+1
    129  fa13		       29 02		      and	#%00000010
    130  fa15		       4a		      lsr
    131  fa16
    132  fa16				   .bug_movement_y_check
    133  fa16		       c9 01		      cmp	#1
    134  fa18		       d0 08		      bne	.bug_movement_y_down
    135  fa1a
    136  fa1a				   .bug_movement_y_up
    137  fa1a		       f6 bb		      inc	BugPosY,x
    138  fa1c		       88		      dey
    139  fa1d		       d0 fb		      bne	.bug_movement_y_up
    140  fa1f
    141  fa1f		       4c 27 fa 	      jmp	.bug_movement_boundary
    142  fa22
    143  fa22				   .bug_movement_y_down
    144  fa22		       d6 bb		      dec	BugPosY,x
    145  fa24		       88		      dey
    146  fa25		       d0 fb		      bne	.bug_movement_y_down
    147  fa27
    148  fa27				   .bug_movement_boundary
    149  fa27		       b5 b9		      lda	BugPosX,x
    150  fa29		       b4 bb		      ldy	BugPosY,x
    151  fa2b
    152  fa2b				   .bug_movement_boundary_left
    153  fa2b		       c9 18		      cmp	#BUG_BOUNDARY
    154  fa2d		       b0 05		      bcs	.bug_movement_boundary_right
    155  fa2f		       a9 18		      lda	#BUG_BOUNDARY
    156  fa31		       4c 3a fa 	      jmp	.bug_movement_boundary_top
    157  fa34
    158  fa34				   .bug_movement_boundary_right
    159  fa34		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    160  fa36		       90 02		      bcc	.bug_movement_boundary_top
    161  fa38		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    162  fa3a
    163  fa3a				   .bug_movement_boundary_top
    164  fa3a		       c0 18		      cpy	#BUG_BOUNDARY
    165  fa3c		       b0 05		      bcs	.bug_movement_boundary_bottom
    166  fa3e		       a0 18		      ldy	#BUG_BOUNDARY
    167  fa40		       4c 49 fa 	      jmp	.bug_movement_store
    168  fa43
    169  fa43				   .bug_movement_boundary_bottom
    170  fa43		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    171  fa45		       90 02		      bcc	.bug_movement_store
    172  fa47		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    173  fa49
    174  fa49				   .bug_movement_store
    175  fa49		       95 b9		      sta	BugPosX,x
    176  fa4b		       94 bb		      sty	BugPosY,x
    177  fa4d
    178  fa4d				   .bug_movement_return
    179  fa4d		       60		      rts
    180  fa4e
    181  fa4e				   BugCollision
    182  fa4e
    183  fa4e		       e0 01		      cpx	#1
    184  fa50		       f0 05		      beq	.bug_collision_m1
    185  fa52
    186  fa52				   .bug_collision_m0
    187  fa52							; Collision for M0 (V set)
    188  fa52		       24 00		      bit	CXM0P
    189  fa54		       70 06		      bvs	.bug_collision_active
    190  fa56		       60		      rts
    191  fa57
    192  fa57				   .bug_collision_m1
    193  fa57							; Collision for M1 (N set)
    194  fa57		       24 01		      bit	CXM1P
    195  fa59		       30 01		      bmi	.bug_collision_active
    196  fa5b		       60		      rts
    197  fa5c
    198  fa5c				   .bug_collision_active
    199  fa5c
    200  fa5c							; Reduce players score
    201  fa5c		       a5 93		      lda	ScoreValue
    202  fa5e		       c9 00		      cmp	#0
    203  fa60		       f0 02		      beq	.bug_collision_score_skip
    204  fa62		       c6 93		      dec	ScoreValue
    205  fa64				   .bug_collision_score_skip
    206  fa64
    207  fa64							; Play sound
    208  fa64		       20 c8 fa 	      jsr	BugColSample
    209  fa67
    210  fa67		       60		      rts
    211  fa68
    212  fa68				   BugStunCollision
    213  fa68
    214  fa68		       e0 01		      cpx	#1
    215  fa6a		       f0 05		      beq	.bug_stun_collision_m1
    216  fa6c
    217  fa6c				   .bug_stun_collision_m0
    218  fa6c							; Collision for M0 (V set)
    219  fa6c		       24 00		      bit	CXM0P
    220  fa6e		       70 06		      bvs	.bug_stun_collision_active
    221  fa70		       60		      rts
    222  fa71
    223  fa71				   .bug_stun_collision_m1
    224  fa71							; Collision for M1 (N set)
    225  fa71		       24 01		      bit	CXM1P
    226  fa73		       30 01		      bmi	.bug_stun_collision_active
    227  fa75		       60		      rts
    228  fa76
    229  fa76				   .bug_stun_collision_active
    230  fa76							; Add points to score
    231  fa76		       18		      clc
    232  fa77		       a5 94		      lda	ScoreValue+1
    233  fa79		       69 04		      adc	#BUG_POINTS
    234  fa7b		       85 94		      sta	ScoreValue+1
    235  fa7d
    236  fa7d							; Reset bug
    237  fa7d		       20 b9 f9 	      jsr	BugReset
    238  fa80
    239  fa80							; Play sample
    240  fa80		       20 b7 fa 	      jsr	BugSample
    241  fa83
    242  fa83		       60		      rts
    243  fa84
    244  fa84							; Horizontal Positioning
    245  fa84
    246  fa84				   BugPosition
    247  fa84
    248  fa84		       a2 02		      ldx	#2
    249  fa86		       a5 b9		      lda	BugPosX+0
    250  fa88		       20 00 f0 	      jsr	PosObject
    251  fa8b
    252  fa8b		       a2 03		      ldx	#3
    253  fa8d		       a5 ba		      lda	BugPosX+1
    254  fa8f		       20 00 f0 	      jsr	PosObject
    255  fa92
    256  fa92		       60		      rts
    257  fa93
    258  fa93							; Scanline Draw
    259  fa93
    260  fa93				   BugDrawStart
    261  fa93
    262  fa93		       a0 01		      ldy	#1
    263  fa95				   .bug_draw_start_loop
    264  fa95
    265  fa95							; Set missile 0 & 1 to be 8 clock size
    266  fa95		       b9 81 00 	      lda	NuSiz0,y
    267  fa98		       09 30		      ora	#%00110000
    268  fa9a		       99 81 00 	      sta	NuSiz0,y
    269  fa9d		       99 04 00 	      sta	NUSIZ0,y
    270  faa0
    271  faa0							; Setup half scanline positions
    272  faa0		       b9 bb 00 	      lda	BugPosY,y
    273  faa3		       4a		      lsr
    274  faa4		       99 bf 00 	      sta	BugDrawPosBottom,y
    275  faa7
    276  faa7		       69 04		      adc	#BUG_SIZE/2
    277  faa9		       99 c1 00 	      sta	BugDrawPosTop,y
    278  faac
    279  faac		       88		      dey
    280  faad		       10 e6		      bpl	.bug_draw_start_loop
    281  faaf
    282  faaf		       60		      rts
    283  fab0
    284  fab0				   BugClean
    285  fab0		       a9 00		      lda	#0
    286  fab2		       85 1d		      sta	ENAM0
    287  fab4		       85 1e		      sta	ENAM1
    288  fab6		       60		      rts
    289  fab7
    290  fab7				   BugSample
    291  fab7		       a9 1e		      lda	#BUG_SAMPLE_LEN
    292  fab9		       85 92		      sta	SampleStep
    293  fabb		       a9 03		      lda	#BUG_SAMPLE_C
    294  fabd		       85 16		      sta	AUDC1
    295  fabf		       a9 14		      lda	#BUG_SAMPLE_F
    296  fac1		       85 18		      sta	AUDF1
    297  fac3		       a9 04		      lda	#BUG_SAMPLE_V
    298  fac5		       85 1a		      sta	AUDV1
    299  fac7		       60		      rts
    300  fac8
    301  fac8				   BugColSample
    302  fac8		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    303  faca		       85 92		      sta	SampleStep
    304  facc		       a9 08		      lda	#BUG_COL_SAMPLE_C
    305  face		       85 16		      sta	AUDC1
    306  fad0		       a9 08		      lda	#BUG_COL_SAMPLE_F
    307  fad2		       85 18		      sta	AUDF1
    308  fad4		       a9 03		      lda	#BUG_COL_SAMPLE_V
    309  fad6		       85 1a		      sta	AUDV1
    310  fad8		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fad9					      include	"objects/swatter.asm"
      1  fad9							;==================
      2  fad9							; Swatter (player1)
      3  fad9							;==================
      4  fad9
      5  fad9							; Constants
      6  fad9
      7  fad9		       00 30	   SWATTER_COLOR =	#$30
      8  fad9		       00 36	   SWATTER_HOLD_COLOR =	#$36
      9  fad9		       00 14	   SWATTER_SPRITE_SIZE =	#20
     10  fad9		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     11  fad9
     12  fad9		       00 3c	   SWATTER_HOLD_TIME =	60
     13  fad9		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     14  fad9
     15  fad9		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     16  fad9		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     17  fad9		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     18  fad9
     19  fad9		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     20  fad9		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     21  fad9		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     22  fad9		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     23  fad9		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     24  fad9
     25  fad9		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     26  fad9		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     27  fad9		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     28  fad9		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     29  fad9
     30  fad9		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     31  fad9		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     32  fad9		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     33  fad9		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     34  fad9
     35  fad9							; Initialization
     36  fad9
     37  fad9				   SwatterInit
     38  fad9
     39  fad9		       20 9e fb 	      jsr	SwatterReset
     40  fadc
     41  fadc		       60		      rts
     42  fadd
     43  fadd							; Frame Update
     44  fadd
     45  fadd				   SwatterUpdate
     46  fadd
     47  fadd				   .swatter_update_color
     48  fadd		       a5 c5		      lda	SwatterState
     49  fadf		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     50  fae1		       d0 05		      bne	.swatter_update_color_hold
     51  fae3				   .swatter_update_color_active
     52  fae3		       a9 30		      lda	#SWATTER_COLOR
     53  fae5		       4c ea fa 	      jmp	.swatter_update_color_set
     54  fae8				   .swatter_update_color_hold
     55  fae8		       a9 36		      lda	#SWATTER_HOLD_COLOR
     56  faea				   .swatter_update_color_set
     57  faea		       85 c6		      sta	SwatterColor
     58  faec
     59  faec				   .swatter_update_hold_sample
     60  faec		       a4 c5		      ldy	SwatterState
     61  faee		       c0 80		      cpy	#SWATTER_STATE_HOLD
     62  faf0		       d0 0f		      bne	.swatter_update_state
     63  faf2
     64  faf2		       c6 cc		      dec	SwatterSampleCount
     65  faf4		       d0 0b		      bne	.swatter_update_state
     66  faf6
     67  faf6		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     68  faf8		       85 cc		      sta	SwatterSampleCount
     69  fafa
     70  fafa		       c6 cd		      dec	SwatterSampleF
     71  fafc		       a4 cd		      ldy	SwatterSampleF
     72  fafe		       20 be fb 	      jsr	SwatterHoldSample
     73  fb01
     74  fb01				   .swatter_update_state
     75  fb01		       a6 90		      ldx	FrameTimer+1
     76  fb03		       e0 00		      cpx	#0
     77  fb05		       d0 2d		      bne	.swatter_update_collision
     78  fb07
     79  fb07		       a4 c5		      ldy	SwatterState
     80  fb09		       c0 00		      cpy	#SWATTER_STATE_WAIT
     81  fb0b		       f0 0a		      beq	.swatter_update_state_wait
     82  fb0d
     83  fb0d		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fb0f		       f0 18		      beq	.swatter_update_state_hold
     85  fb11
     86  fb11							; Else we're at the end of the active state
     87  fb11		       20 9e fb 	      jsr	SwatterReset
     88  fb14		       4c 43 fb 	      jmp	.swatter_update_return
     89  fb17
     90  fb17				   .swatter_update_state_wait
     91  fb17		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
     92  fb19		       84 cd		      sty	SwatterSampleF
     93  fb1b		       20 be fb 	      jsr	SwatterHoldSample
     94  fb1e
     95  fb1e		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     96  fb20		       85 cc		      sta	SwatterSampleCount
     97  fb22
     98  fb22		       a9 80		      lda	#SWATTER_STATE_HOLD
     99  fb24		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    100  fb26		       4c 30 fb 	      jmp	.swatter_update_state_set
    101  fb29
    102  fb29				   .swatter_update_state_hold
    103  fb29		       20 cd fb 	      jsr	SwatterActiveSample
    104  fb2c
    105  fb2c		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    106  fb2e		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    107  fb30
    108  fb30				   .swatter_update_state_set
    109  fb30		       85 c5		      sta	SwatterState
    110  fb32		       86 90		      stx	FrameTimer+1
    111  fb34
    112  fb34				   .swatter_update_collision
    113  fb34							; Check 1 frame after active
    114  fb34		       a5 c5		      lda	SwatterState
    115  fb36		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    116  fb38		       d0 09		      bne	.swatter_update_return
    117  fb3a		       a6 90		      ldx	FrameTimer+1
    118  fb3c		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    119  fb3e		       d0 03		      bne	.swatter_update_return
    120  fb40
    121  fb40		       20 44 fb 	      jsr	SwatterCollision
    122  fb43
    123  fb43				   .swatter_update_return
    124  fb43		       60		      rts
    125  fb44
    126  fb44				   SwatterCollision
    127  fb44		       24 00		      bit	CXM0P
    128  fb46		       30 09		      bmi	.swatter_collision_m0
    129  fb48
    130  fb48		       24 01		      bit	CXM1P
    131  fb4a		       70 0a		      bvs	.swatter_collision_m1
    132  fb4c
    133  fb4c		       24 07		      bit	CXPPMM
    134  fb4e		       30 0e		      bmi	.swatter_collision_p0
    135  fb50
    136  fb50		       60		      rts
    137  fb51
    138  fb51				   .swatter_collision_m0
    139  fb51		       a2 00		      ldx	#0
    140  fb53		       4c 58 fb 	      jmp	.swatter_collision_bug_reset
    141  fb56
    142  fb56				   .swatter_collision_m1
    143  fb56		       a2 01		      ldx	#1
    144  fb58
    145  fb58				   .swatter_collision_bug_reset
    146  fb58		       20 b9 f9 	      jsr	BugReset
    147  fb5b		       4c 70 fb 	      jmp	.swatter_collision_active
    148  fb5e
    149  fb5e				   .swatter_collision_p0
    150  fb5e
    151  fb5e		       a5 93		      lda	ScoreValue
    152  fb60		       c5 c8		      cmp	SwatterHitDamage
    153  fb62		       90 08		      bcc	.swatter_collision_p0_zero
    154  fb64		       f0 06		      beq	.swatter_collision_p0_zero
    155  fb66
    156  fb66		       18		      clc
    157  fb67		       e5 c8		      sbc	SwatterHitDamage
    158  fb69		       4c 6e fb 	      jmp	.swatter_collision_p0_set
    159  fb6c
    160  fb6c				   .swatter_collision_p0_zero
    161  fb6c		       a9 00		      lda	#0
    162  fb6e
    163  fb6e				   .swatter_collision_p0_set
    164  fb6e		       85 93		      sta	ScoreValue
    165  fb70
    166  fb70				   .swatter_collision_active
    167  fb70		       20 de fb 	      jsr	SwatterHitSample
    168  fb73
    169  fb73		       60		      rts
    170  fb74
    171  fb74				   SwatterPosition
    172  fb74
    173  fb74							; Set Position
    174  fb74		       a2 01		      ldx	#1	; Object (player1)
    175  fb76		       a5 c3		      lda	SwatterPos	; X Position
    176  fb78		       20 00 f0 	      jsr	PosObject
    177  fb7b
    178  fb7b		       60		      rts
    179  fb7c
    180  fb7c							; Scanline Draw
    181  fb7c
    182  fb7c				   SwatterDrawStart
    183  fb7c
    184  fb7c							; Set player 1 to be quad size
    185  fb7c		       a5 82		      lda	NuSiz1
    186  fb7e		       29 f8		      and	#%11111000
    187  fb80		       09 07		      ora	#%00000111
    188  fb82		       85 82		      sta	NuSiz1
    189  fb84		       85 05		      sta	NUSIZ1
    190  fb86
    191  fb86							; Set sprite color
    192  fb86		       a5 c6		      lda	SwatterColor
    193  fb88		       85 07		      sta	COLUP1
    194  fb8a
    195  fb8a							; Note: Doesn't need vertical delay
    196  fb8a
    197  fb8a							; Calculate starting position
    198  fb8a		       a5 c4		      lda	SwatterPos+1	; Y Position
    199  fb8c		       4a		      lsr
    200  fb8d		       18		      clc
    201  fb8e		       69 14		      adc	#SWATTER_SPRITE_SIZE
    202  fb90		       85 ca		      sta	SwatterDrawPos
    203  fb92
    204  fb92							; Initialize sprite index
    205  fb92		       a9 00		      lda	#0
    206  fb94		       85 c9		      sta	SwatterIndex
    207  fb96		       85 cb		      sta	SwatterLine
    208  fb98
    209  fb98		       60		      rts
    210  fb99
    211  fb99				   SwatterClean
    212  fb99
    213  fb99							; Clear out Player1 sprite
    214  fb99		       a9 00		      lda	#0
    215  fb9b		       85 1c		      sta	GRP1
    216  fb9d
    217  fb9d		       60		      rts
    218  fb9e
    219  fb9e				   SwatterReset
    220  fb9e							; Initialize Swatter State
    221  fb9e		       a9 00		      lda	#SWATTER_STATE_WAIT
    222  fba0		       85 c5		      sta	SwatterState
    223  fba2
    224  fba2							; Set Wait Timer
    225  fba2		       20 13 f0 	      jsr	Random
    226  fba5		       a5 86		      lda	Rand8
    227  fba7		       29 3f		      and	#$3f
    228  fba9		       18		      clc
    229  fbaa		       65 c7		      adc	SwatterWaitTime
    230  fbac		       85 90		      sta	FrameTimer+1
    231  fbae
    232  fbae							; Set Random Position
    233  fbae		       20 13 f0 	      jsr	Random
    234  fbb1		       a5 86		      lda	Rand8	; X Position
    235  fbb3		       29 7f		      and	#$7f
    236  fbb5		       85 c3		      sta	SwatterPos+0
    237  fbb7		       a5 87		      lda	Rand16	; Y Position
    238  fbb9		       29 7e		      and	#$7e	; Ensure that Y position is even
    239  fbbb		       85 c4		      sta	SwatterPos+1
    240  fbbd
    241  fbbd		       60		      rts
    242  fbbe
    243  fbbe				   SwatterHoldSample
    244  fbbe		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    245  fbc0		       85 92		      sta	SampleStep
    246  fbc2		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    247  fbc4		       85 16		      sta	AUDC1
    248  fbc6		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    249  fbc8		       85 1a		      sta	AUDV1
    250  fbca
    251  fbca		       84 18		      sty	AUDF1	; Store value of y as frequency
    252  fbcc
    253  fbcc		       60		      rts
    254  fbcd
    255  fbcd				   SwatterActiveSample
    256  fbcd		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    257  fbcf		       85 92		      sta	SampleStep
    258  fbd1		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    259  fbd3		       85 16		      sta	AUDC1
    260  fbd5		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    261  fbd7		       85 18		      sta	AUDF1
    262  fbd9		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    263  fbdb		       85 1a		      sta	AUDV1
    264  fbdd		       60		      rts
    265  fbde
    266  fbde				   SwatterHitSample
    267  fbde		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    268  fbe0		       85 92		      sta	SampleStep
    269  fbe2		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    270  fbe4		       85 16		      sta	AUDC1
    271  fbe6		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    272  fbe8		       85 18		      sta	AUDF1
    273  fbea		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    274  fbec		       85 1a		      sta	AUDV1
    275  fbee		       60		      rts
------- FILE game.asm
     22  fbef
     23  fbef							; Initialization
     24  fbef
     25  fbef				   GameInit
     26  fbef
     27  fbef							; Setup logic and kernel
      0  fbef					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fbef				   .POINTER   SET	VBlankPtr
      2  fbef				   .ADDRESS   SET	GameVerticalBlank
      3  fbef
      4  fbef		       a9 40		      LDA	#<.ADDRESS
      5  fbf1		       85 88		      STA	.POINTER
      6  fbf3		       a9 fc		      LDA	#>.ADDRESS
      7  fbf5		       85 89		      STA	.POINTER+1
      8  fbf7
      0  fbf7					      SET_POINTER	KernelPtr, GameKernel
      1  fbf7				   .POINTER   SET	KernelPtr
      2  fbf7				   .ADDRESS   SET	GameKernel
      3  fbf7
      4  fbf7		       a9 c6		      LDA	#<.ADDRESS
      5  fbf9		       85 8a		      STA	.POINTER
      6  fbfb		       a9 fc		      LDA	#>.ADDRESS
      7  fbfd		       85 8b		      STA	.POINTER+1
      8  fbff
      0  fbff					      SET_POINTER	OverScanPtr, GameOverScan
      1  fbff				   .POINTER   SET	OverScanPtr
      2  fbff				   .ADDRESS   SET	GameOverScan
      3  fbff
      4  fbff		       a9 6a		      LDA	#<.ADDRESS
      5  fc01		       85 8c		      STA	.POINTER
      6  fc03		       a9 fc		      LDA	#>.ADDRESS
      7  fc05		       85 8d		      STA	.POINTER+1
      8  fc07
     31  fc07
     32  fc07							; Mute Audio
     33  fc07		       a9 00		      lda	#0
     34  fc09		       85 15		      sta	AUDC0
     35  fc0b		       85 19		      sta	AUDV0
     36  fc0d		       85 17		      sta	AUDF0
     37  fc0f		       85 16		      sta	AUDC1
     38  fc11		       85 1a		      sta	AUDV1
     39  fc13		       85 18		      sta	AUDF1
     40  fc15		       85 92		      sta	SampleStep
     41  fc17
     42  fc17							; Load Audio Settings
     43  fc17		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fc19		       85 19		      sta	AUDV0
     45  fc1b
     46  fc1b							; Make it so that we play the first note immediately
     47  fc1b		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fc1d		       85 91		      sta	AudioStep
     49  fc1f		       a9 02		      lda	#2
     50  fc21		       85 8f		      sta	FrameTimer
     51  fc23
     52  fc23							; Reset NuSiz
     53  fc23		       a9 00		      lda	#0
     54  fc25		       85 81		      sta	NuSiz0
     55  fc27		       85 04		      sta	NUSIZ0
     56  fc29		       85 82		      sta	NuSiz1
     57  fc2b		       85 05		      sta	NUSIZ1
     58  fc2d
     59  fc2d							; Initialize Objects
     60  fc2d		       20 b9 f4 	      jsr	LevelInit
     61  fc30		       20 17 f5 	      jsr	ScoreInit
     62  fc33		       20 b6 f6 	      jsr	SpiderInit
     63  fc36		       20 07 f8 	      jsr	LineInit
     64  fc39		       20 b0 f9 	      jsr	BugInit
     65  fc3c		       20 d9 fa 	      jsr	SwatterInit
     66  fc3f
     67  fc3f		       60		      rts
     68  fc40
     69  fc40				   GameVerticalBlank
     70  fc40
     71  fc40							; Refresh random values
     72  fc40		       20 13 f0 	      jsr	Random
     73  fc43
     74  fc43							; Update Objects
     75  fc43		       20 ca f4 	      jsr	LevelUpdate
     76  fc46		       20 c7 f6 	      jsr	SpiderUpdate
     77  fc49		       20 1c f8 	      jsr	LineUpdate
     78  fc4c		       20 d1 f9 	      jsr	BugUpdate
     79  fc4f		       20 dd fa 	      jsr	SwatterUpdate
     80  fc52		       20 20 f5 	      jsr	ScoreUpdate
     81  fc55
     82  fc55							; Reset Collisions
     83  fc55		       85 2c		      sta	CXCLR
     84  fc57
     85  fc57							; Clear horizontal movement
     86  fc57		       85 2b		      sta	HMCLR
     87  fc59
     88  fc59							; Update Positions
     89  fc59		       20 d2 f7 	      jsr	SpiderPosition
     90  fc5c		       20 40 f9 	      jsr	LinePosition
     91  fc5f		       20 84 fa 	      jsr	BugPosition
     92  fc62		       20 74 fb 	      jsr	SwatterPosition
     93  fc65
     94  fc65							; Set final x positions
     95  fc65		       85 02		      sta	WSYNC
     96  fc67		       85 2a		      sta	HMOVE
     97  fc69
     98  fc69		       60		      rts
     99  fc6a
    100  fc6a				   GameOverScan
    101  fc6a
    102  fc6a							; Audio Routines
    103  fc6a		       20 88 fc 	      jsr	GameAudio
    104  fc6d		       20 74 fc 	      jsr	GameSample
    105  fc70
    106  fc70							; State Routines
    107  fc70		       20 bc fc 	      jsr	GameDeath
    108  fc73
    109  fc73		       60		      rts
    110  fc74
    111  fc74				   GameSample
    112  fc74
    113  fc74		       a6 92		      ldx	SampleStep
    114  fc76		       e0 00		      cpx	#0
    115  fc78		       f0 0b		      beq	.game_sample_return
    116  fc7a
    117  fc7a		       ca		      dex
    118  fc7b		       d0 08		      bne	.game_sample_return
    119  fc7d
    120  fc7d				   .game_sample_mute
    121  fc7d		       a9 00		      lda	#0
    122  fc7f		       85 1a		      sta	AUDV1
    123  fc81		       85 18		      sta	AUDF1
    124  fc83		       85 16		      sta	AUDC1
    125  fc85
    126  fc85				   .game_sample_return
    127  fc85		       86 92		      stx	SampleStep
    128  fc87		       60		      rts
    129  fc88
    130  fc88				   GameAudio
    131  fc88
    132  fc88		       a6 8f		      ldx	FrameTimer
    133  fc8a		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    134  fc8c		       f0 25		      beq	.game_audio_mute_note
    135  fc8e		       e0 00		      cpx	#0
    136  fc90		       d0 29		      bne	.game_audio_return
    137  fc92
    138  fc92							; Reset Timer
    139  fc92		       a2 09		      ldx	#GAME_AUDIO_STEP
    140  fc94		       86 8f		      stx	FrameTimer
    141  fc96
    142  fc96				   .game_audio_play
    143  fc96
    144  fc96							; Increment melody position
    145  fc96		       a4 91		      ldy	AudioStep
    146  fc98		       c8		      iny
    147  fc99
    148  fc99		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    149  fc9b		       d0 02		      bne	.game_audio_play_note
    150  fc9d
    151  fc9d							; Loop our audio step
    152  fc9d		       a0 00		      ldy	#0
    153  fc9f
    154  fc9f				   .game_audio_play_note
    155  fc9f
    156  fc9f							; Save current position
    157  fc9f		       84 91		      sty	AudioStep
    158  fca1
    159  fca1							; Melody Line
    160  fca1		       b9 6b fe 	      lda	GameAudio0,y
    161  fca4		       c9 ff		      cmp	#$FF
    162  fca6		       f0 0b		      beq	.game_audio_mute_note
    163  fca8		       85 17		      sta	AUDF0
    164  fcaa		       a9 06		      lda	#GAME_AUDIO_TONE
    165  fcac		       85 15		      sta	AUDC0
    166  fcae		       a9 02		      lda	#GAME_AUDIO_VOLUME
    167  fcb0		       85 19		      sta	AUDV0
    168  fcb2
    169  fcb2		       60		      rts
    170  fcb3
    171  fcb3				   .game_audio_mute_note
    172  fcb3
    173  fcb3		       a9 00		      lda	#0
    174  fcb5		       85 17		      sta	AUDF0
    175  fcb7		       85 15		      sta	AUDC0
    176  fcb9		       85 19		      sta	AUDV0
    177  fcbb
    178  fcbb				   .game_audio_return
    179  fcbb		       60		      rts
    180  fcbc
    181  fcbc				   GameDeath
    182  fcbc		       a5 93		      lda	ScoreValue+0
    183  fcbe		       c9 00		      cmp	#0
    184  fcc0		       d0 03		      bne	.game_death_return
    185  fcc2
    186  fcc2							; Show Game Over Screen
    187  fcc2		       20 8b fe 	      jsr	OverInit
    188  fcc5
    189  fcc5				   .game_death_return
    190  fcc5		       60		      rts
    191  fcc6
    192  fcc6				   GameKernel
    193  fcc6
    194  fcc6							; Turn on display
    195  fcc6		       a9 00		      lda	#0
    196  fcc8		       85 01		      sta	VBLANK
    197  fcca
    198  fcca				   .game_kernel_score
    199  fcca
    200  fcca							; Draw Score on top first
    201  fcca		       20 92 f5 	      jsr	ScoreDraw
    202  fccd
    203  fccd				   .game_kernel_objects_start
    204  fccd
    205  fccd							; Setup Drawing Objects
    206  fccd		       20 96 f6 	      jsr	WebDrawStart
    207  fcd0		       20 da f7 	      jsr	SpiderDrawStart
    208  fcd3		       20 7c fb 	      jsr	SwatterDrawStart
    209  fcd6		       20 48 f9 	      jsr	LineDrawStart
    210  fcd9		       20 93 fa 	      jsr	BugDrawStart
    211  fcdc
    212  fcdc							; Start Scanline Counter
    213  fcdc		       a2 a8		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    214  fcde							; The extra 5 is for processing overflow
    215  fcde
    216  fcde							; Half scanline counter in Temp+1
    217  fcde		       a9 56		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    218  fce0		       85 84		      sta	Temp+1
    219  fce2
    220  fce2							; Load background color
    221  fce2		       a5 a0		      lda	WebColor+0
    222  fce4		       85 09		      sta	COLUBK
    223  fce6
    224  fce6				   .game_kernel_objects
    225  fce6
    226  fce6		       85 02		      sta	WSYNC
    227  fce8
    228  fce8				   .game_kernel_web
    229  fce8
    230  fce8							; Web
    231  fce8		       a4 9f		      ldy	WebIndex
    232  fcea
    233  fcea							; Load Image
    234  fcea		       b9 3e f1 	      lda	WebImagePF0,y
    235  fced		       85 0d		      sta	PF0
    236  fcef		       b9 5c f1 	      lda	WebImagePF1,y
    237  fcf2		       85 0e		      sta	PF1
    238  fcf4		       b9 7a f1 	      lda	WebImagePF2,y
    239  fcf7		       85 0f		      sta	PF2
    240  fcf9
    241  fcf9		       e6 9f		      inc	WebIndex
    242  fcfb
    243  fcfb				   .game_kernel_line_1
    244  fcfb							; Line (1st time)
    245  fcfb
    246  fcfb		       24 ad		      bit	LineEnabled
    247  fcfd		       10 10		      bpl	.game_kernel_line_1_skip
    248  fcff
    249  fcff							; Load half-line
    250  fcff		       a5 84		      lda	Temp+1
    251  fd01
    252  fd01		       a0 00		      ldy	#%00000000
    253  fd03
    254  fd03							; Top
    255  fd03		       c5 b5		      cmp	LineDrawPos+1
    256  fd05		       b0 06		      bcs	.game_kernel_line_1_off
    257  fd07
    258  fd07							; Bottom
    259  fd07		       c5 b4		      cmp	LineDrawPos+0
    260  fd09		       90 02		      bcc	.game_kernel_line_1_off
    261  fd0b
    262  fd0b				   .game_kernel_line_1_on
    263  fd0b		       a0 02		      ldy	#%00000010
    264  fd0d
    265  fd0d				   .game_kernel_line_1_off
    266  fd0d		       84 1f		      sty	ENABL
    267  fd0f
    268  fd0f				   .game_kernel_line_1_skip
    269  fd0f
    270  fd0f		       ca		      dex
    271  fd10		       85 02		      sta	WSYNC
    272  fd12
    273  fd12				   .game_kernel_spider_1
    274  fd12							; Spider (1st time)
    275  fd12
    276  fd12		       a4 a8		      ldy	SpiderIndex
    277  fd14		       30 1a		      bmi	.game_kernel_spider_1_load	; At end of sprite
    278  fd16		       d0 06		      bne	.game_kernel_spider_1_draw	; Currently drawing (not zero)
    279  fd18
    280  fd18							; Check y position to see if we should start
    281  fd18		       a5 84		      lda	Temp+1	; Use half scanline
    282  fd1a		       e5 a9		      sbc	SpiderDrawPos
    283  fd1c		       10 12		      bpl	.game_kernel_spider_1_load
    284  fd1e
    285  fd1e				   .game_kernel_spider_1_draw
    286  fd1e		       b1 a2		      lda	(SpiderPtr),y
    287  fd20		       85 aa		      sta	SpiderLine
    288  fd22
    289  fd22							; Increment sprite index
    290  fd22		       e6 a8		      inc	SpiderIndex
    291  fd24
    292  fd24							; See if we're at the end
    293  fd24		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    294  fd26		       d0 0a		      bne	.game_kernel_spider_1_line
    295  fd28		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    296  fd2a		       84 a8		      sty	SpiderIndex
    297  fd2c		       a9 00		      lda	#0
    298  fd2e		       85 aa		      sta	SpiderLine
    299  fd30
    300  fd30				   .game_kernel_spider_1_load
    301  fd30		       a5 aa		      lda	SpiderLine
    302  fd32				   .game_kernel_spider_1_line
    303  fd32		       85 1b		      sta	GRP0
    304  fd34
    305  fd34				   .game_kernel_swatter_1
    306  fd34							; Swatter (1st time)
    307  fd34
    308  fd34							; Check if wait state
    309  fd34		       24 c5		      bit	SwatterState
    310  fd36		       10 1b		      bpl	.game_kernel_swatter_1_load
    311  fd38
    312  fd38		       a4 c9		      ldy	SwatterIndex
    313  fd3a		       30 17		      bmi	.game_kernel_swatter_1_load	; At end of sprite
    314  fd3c		       d0 06		      bne	.game_kernel_swatter_1_draw	; Currently drawing (not zero)
    315  fd3e
    316  fd3e							; Check y position to see if we should start
    317  fd3e		       a5 84		      lda	Temp+1	; Use half scanline
    318  fd40		       e5 ca		      sbc	SwatterDrawPos
    319  fd42		       10 0f		      bpl	.game_kernel_swatter_1_load
    320  fd44
    321  fd44				   .game_kernel_swatter_1_draw
    322  fd44		       b9 e8 f1 	      lda	SwatterSprite,y
    323  fd47		       85 cb		      sta	SwatterLine
    324  fd49
    325  fd49							; Increment index
    326  fd49		       e6 c9		      inc	SwatterIndex
    327  fd4b
    328  fd4b							; See if we're at the end
    329  fd4b		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    330  fd4d		       d0 06		      bne	.game_kernel_swatter_1_line
    331  fd4f		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    332  fd51		       84 c9		      sty	SwatterIndex
    333  fd53
    334  fd53				   .game_kernel_swatter_1_load
    335  fd53		       a5 cb		      lda	SwatterLine
    336  fd55				   .game_kernel_swatter_1_line
    337  fd55		       85 1c		      sta	GRP1
    338  fd57
    339  fd57							; New line and decrement half scanline
    340  fd57		       c6 84		      dec	Temp+1
    341  fd59		       ca		      dex
    342  fd5a		       85 02		      sta	WSYNC
    343  fd5c
    344  fd5c							; Preload half-line
    345  fd5c		       a5 84		      lda	Temp+1
    346  fd5e
    347  fd5e				   .game_kernel_line_2
    348  fd5e							; Line (2nd time)
    349  fd5e
    350  fd5e		       24 ad		      bit	LineEnabled
    351  fd60		       10 0e		      bpl	.game_kernel_line_2_skip
    352  fd62
    353  fd62		       a0 00		      ldy	#%00000000
    354  fd64
    355  fd64							; Top
    356  fd64		       c5 b5		      cmp	LineDrawPos+1
    357  fd66		       b0 06		      bcs	.game_kernel_line_2_off
    358  fd68
    359  fd68							; Bottom
    360  fd68		       c5 b4		      cmp	LineDrawPos+0
    361  fd6a		       90 02		      bcc	.game_kernel_line_2_off
    362  fd6c
    363  fd6c				   .game_kernel_line_2_on
    364  fd6c		       a0 02		      ldy	#%00000010
    365  fd6e
    366  fd6e				   .game_kernel_line_2_off
    367  fd6e		       84 1f		      sty	ENABL
    368  fd70
    369  fd70				   .game_kernel_line_2_skip
    370  fd70
    371  fd70				   .game_kernel_bug_1_0
    372  fd70							; First Bug (1st time)
    373  fd70
    374  fd70		       a0 00		      ldy	#%00000000
    375  fd72
    376  fd72							; Top
    377  fd72		       c5 c1		      cmp	BugDrawPosTop+0
    378  fd74		       b0 06		      bcs	.game_kernel_bug_1_0_off
    379  fd76
    380  fd76							; Bottom
    381  fd76		       c5 bf		      cmp	BugDrawPosBottom+0
    382  fd78		       90 02		      bcc	.game_kernel_bug_1_0_off
    383  fd7a
    384  fd7a				   .game_kernel_bug_1_0_on
    385  fd7a		       a0 02		      ldy	#%00000010
    386  fd7c
    387  fd7c				   .game_kernel_bug_1_0_off
    388  fd7c		       84 1d		      sty	ENAM0
    389  fd7e
    390  fd7e				   .game_kernel_bug_1_1
    391  fd7e							; Second Bug (1st time)
    392  fd7e
    393  fd7e		       a0 00		      ldy	#%00000000
    394  fd80
    395  fd80							; Top
    396  fd80		       c5 c2		      cmp	BugDrawPosTop+1
    397  fd82		       b0 06		      bcs	.game_kernel_bug_1_1_off
    398  fd84
    399  fd84							; Bottom
    400  fd84		       c5 c0		      cmp	BugDrawPosBottom+1
    401  fd86		       90 02		      bcc	.game_kernel_bug_1_1_off
    402  fd88
    403  fd88				   .game_kernel_bug_1_1_on
    404  fd88		       a0 02		      ldy	#%00000010
    405  fd8a
    406  fd8a				   .game_kernel_bug_1_1_off
    407  fd8a		       84 1e		      sty	ENAM1
    408  fd8c
    409  fd8c							; Next Line
    410  fd8c		       ca		      dex
    411  fd8d		       85 02		      sta	WSYNC
    412  fd8f
    413  fd8f				   .game_kernel_spider_2
    414  fd8f							; Spider (2nd time)
    415  fd8f
    416  fd8f		       a4 a8		      ldy	SpiderIndex
    417  fd91		       30 1a		      bmi	.game_kernel_spider_2_load	; At end of sprite
    418  fd93		       d0 06		      bne	.game_kernel_spider_2_draw	; Currently drawing (not zero)
    419  fd95
    420  fd95							; Check y position to see if we should start
    421  fd95		       a5 84		      lda	Temp+1	; Use half scanline
    422  fd97		       e5 a9		      sbc	SpiderDrawPos
    423  fd99		       10 12		      bpl	.game_kernel_spider_2_load
    424  fd9b
    425  fd9b				   .game_kernel_spider_2_draw
    426  fd9b		       b1 a2		      lda	(SpiderPtr),y
    427  fd9d		       85 aa		      sta	SpiderLine
    428  fd9f
    429  fd9f							; Increment sprite index
    430  fd9f		       e6 a8		      inc	SpiderIndex
    431  fda1
    432  fda1							; See if we're at the end
    433  fda1		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    434  fda3		       d0 0a		      bne	.game_kernel_spider_2_line
    435  fda5		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    436  fda7		       84 a8		      sty	SpiderIndex
    437  fda9		       a9 00		      lda	#0
    438  fdab		       85 aa		      sta	SpiderLine
    439  fdad
    440  fdad				   .game_kernel_spider_2_load
    441  fdad		       a5 aa		      lda	SpiderLine
    442  fdaf				   .game_kernel_spider_2_line
    443  fdaf		       85 1b		      sta	GRP0
    444  fdb1
    445  fdb1				   .game_kernel_swatter_2
    446  fdb1							; Swatter (2nd time)
    447  fdb1
    448  fdb1							; Check if wait state
    449  fdb1		       24 c5		      bit	SwatterState
    450  fdb3		       10 1b		      bpl	.game_kernel_swatter_2_load
    451  fdb5
    452  fdb5		       a4 c9		      ldy	SwatterIndex
    453  fdb7		       30 17		      bmi	.game_kernel_swatter_2_load	; At end of sprite
    454  fdb9		       d0 06		      bne	.game_kernel_swatter_2_draw	; Currently drawing (not zero)
    455  fdbb
    456  fdbb							; Check y position to see if we should start
    457  fdbb		       a5 84		      lda	Temp+1	; Use half scanline
    458  fdbd		       e5 ca		      sbc	SwatterDrawPos
    459  fdbf		       10 0f		      bpl	.game_kernel_swatter_2_load
    460  fdc1
    461  fdc1				   .game_kernel_swatter_2_draw
    462  fdc1		       b9 e8 f1 	      lda	SwatterSprite,y
    463  fdc4		       85 cb		      sta	SwatterLine
    464  fdc6
    465  fdc6							; Increment index
    466  fdc6		       e6 c9		      inc	SwatterIndex
    467  fdc8
    468  fdc8							; See if we're at the end
    469  fdc8		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    470  fdca		       d0 06		      bne	.game_kernel_swatter_2_line
    471  fdcc		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    472  fdce		       84 c9		      sty	SwatterIndex
    473  fdd0
    474  fdd0				   .game_kernel_swatter_2_load
    475  fdd0		       a5 cb		      lda	SwatterLine
    476  fdd2				   .game_kernel_swatter_2_line
    477  fdd2		       85 1c		      sta	GRP1
    478  fdd4
    479  fdd4							; Next Line and half-line
    480  fdd4		       c6 84		      dec	Temp+1
    481  fdd6		       ca		      dex
    482  fdd7		       85 02		      sta	WSYNC
    483  fdd9
    484  fdd9							; Preload half-line
    485  fdd9		       a5 84		      lda	Temp+1
    486  fddb
    487  fddb				   .game_kernel_line_3
    488  fddb							; Line (3rd time)
    489  fddb
    490  fddb		       24 ad		      bit	LineEnabled
    491  fddd		       10 0e		      bpl	.game_kernel_line_3_skip
    492  fddf
    493  fddf		       a0 00		      ldy	#%00000000
    494  fde1
    495  fde1							; Top
    496  fde1		       c5 b5		      cmp	LineDrawPos+1
    497  fde3		       b0 06		      bcs	.game_kernel_line_3_off
    498  fde5
    499  fde5							; Bottom
    500  fde5		       c5 b4		      cmp	LineDrawPos+0
    501  fde7		       90 02		      bcc	.game_kernel_line_3_off
    502  fde9
    503  fde9				   .game_kernel_line_3_on
    504  fde9		       a0 02		      ldy	#%00000010
    505  fdeb
    506  fdeb				   .game_kernel_line_3_off
    507  fdeb		       84 1f		      sty	ENABL
    508  fded
    509  fded				   .game_kernel_line_3_skip
    510  fded
    511  fded				   .game_kernel_bug_2_0
    512  fded							; First Bug (2nd time)
    513  fded
    514  fded		       a0 00		      ldy	#%00000000
    515  fdef
    516  fdef							; Top
    517  fdef		       c5 c1		      cmp	BugDrawPosTop+0
    518  fdf1		       b0 06		      bcs	.game_kernel_bug_2_0_off
    519  fdf3
    520  fdf3							; Bottom
    521  fdf3		       c5 bf		      cmp	BugDrawPosBottom+0
    522  fdf5		       90 02		      bcc	.game_kernel_bug_2_0_off
    523  fdf7
    524  fdf7				   .game_kernel_bug_2_0_on
    525  fdf7		       a0 02		      ldy	#%00000010
    526  fdf9
    527  fdf9				   .game_kernel_bug_2_0_off
    528  fdf9		       84 1d		      sty	ENAM0
    529  fdfb
    530  fdfb				   .game_kernel_bug_2_1
    531  fdfb							; Second Bug (2nd time)
    532  fdfb
    533  fdfb		       a0 00		      ldy	#%00000000
    534  fdfd
    535  fdfd							; Top
    536  fdfd		       c5 c2		      cmp	BugDrawPosTop+1
    537  fdff		       b0 06		      bcs	.game_kernel_bug_2_1_off
    538  fe01
    539  fe01							; Bottom
    540  fe01		       c5 c0		      cmp	BugDrawPosBottom+1
    541  fe03		       90 02		      bcc	.game_kernel_bug_2_1_off
    542  fe05
    543  fe05				   .game_kernel_bug_2_1_on
    544  fe05		       a0 02		      ldy	#%00000010
    545  fe07
    546  fe07				   .game_kernel_bug_2_1_off
    547  fe07		       84 1e		      sty	ENAM1
    548  fe09
    549  fe09							; Next Line
    550  fe09		       ca		      dex
    551  fe0a		       85 02		      sta	WSYNC
    552  fe0c
    553  fe0c				   .game_kernel_spider_3
    554  fe0c							; Spider (3rd time)
    555  fe0c
    556  fe0c		       a4 a8		      ldy	SpiderIndex
    557  fe0e		       30 1a		      bmi	.game_kernel_spider_3_load	; At end of sprite
    558  fe10		       d0 06		      bne	.game_kernel_spider_3_draw	; Currently drawing (not zero)
    559  fe12
    560  fe12							; Check y position to see if we should start
    561  fe12		       a5 84		      lda	Temp+1	; Use half scanline
    562  fe14		       e5 a9		      sbc	SpiderDrawPos
    563  fe16		       10 12		      bpl	.game_kernel_spider_3_load
    564  fe18
    565  fe18				   .game_kernel_spider_3_draw
    566  fe18		       b1 a2		      lda	(SpiderPtr),y
    567  fe1a		       85 aa		      sta	SpiderLine
    568  fe1c
    569  fe1c							; Increment sprite index
    570  fe1c		       e6 a8		      inc	SpiderIndex
    571  fe1e
    572  fe1e							; See if we're at the end
    573  fe1e		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    574  fe20		       d0 0a		      bne	.game_kernel_spider_3_line
    575  fe22		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    576  fe24		       84 a8		      sty	SpiderIndex
    577  fe26		       a9 00		      lda	#0
    578  fe28		       85 aa		      sta	SpiderLine
    579  fe2a
    580  fe2a				   .game_kernel_spider_3_load
    581  fe2a		       a5 aa		      lda	SpiderLine
    582  fe2c				   .game_kernel_spider_3_line
    583  fe2c		       85 1b		      sta	GRP0
    584  fe2e
    585  fe2e				   .game_kernel_spider_3_skip
    586  fe2e
    587  fe2e				   .game_kernel_swatter_3
    588  fe2e							; Swatter (3rd time)
    589  fe2e
    590  fe2e							; Check if wait state
    591  fe2e		       24 c5		      bit	SwatterState
    592  fe30		       10 1b		      bpl	.game_kernel_swatter_3_load
    593  fe32
    594  fe32		       a4 c9		      ldy	SwatterIndex
    595  fe34		       30 17		      bmi	.game_kernel_swatter_3_load	; At end of sprite
    596  fe36		       d0 06		      bne	.game_kernel_swatter_3_draw	; Currently drawing (not zero)
    597  fe38
    598  fe38							; Check y position to see if we should start
    599  fe38		       a5 84		      lda	Temp+1	; Use half scanline
    600  fe3a		       e5 ca		      sbc	SwatterDrawPos
    601  fe3c		       10 0f		      bpl	.game_kernel_swatter_3_load
    602  fe3e
    603  fe3e				   .game_kernel_swatter_3_draw
    604  fe3e		       b9 e8 f1 	      lda	SwatterSprite,y
    605  fe41		       85 cb		      sta	SwatterLine
    606  fe43
    607  fe43							; Increment index
    608  fe43		       e6 c9		      inc	SwatterIndex
    609  fe45
    610  fe45							; See if we're at the end
    611  fe45		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    612  fe47		       d0 06		      bne	.game_kernel_swatter_3_line
    613  fe49		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    614  fe4b		       84 c9		      sty	SwatterIndex
    615  fe4d
    616  fe4d				   .game_kernel_swatter_3_load
    617  fe4d		       a5 cb		      lda	SwatterLine
    618  fe4f				   .game_kernel_swatter_3_line
    619  fe4f		       85 1c		      sta	GRP1
    620  fe51
    621  fe51				   .game_kernel_swatter_3_skip
    622  fe51
    623  fe51							; New line and decrement half scanline
    624  fe51		       c6 84		      dec	Temp+1
    625  fe53		       ca		      dex
    626  fe54		       f0 03		      beq	.game_kernel_clean
    627  fe56		       4c e6 fc 	      jmp	.game_kernel_objects
    628  fe59
    629  fe59				   .game_kernel_clean
    630  fe59
    631  fe59		       20 a9 f6 	      jsr	WebClean
    632  fe5c		       20 02 f8 	      jsr	SpiderClean
    633  fe5f		       20 68 f9 	      jsr	LineClean
    634  fe62		       20 b0 fa 	      jsr	BugClean
    635  fe65		       20 99 fb 	      jsr	SwatterClean
    636  fe68
    637  fe68		       85 02		      sta	WSYNC
    638  fe6a
    639  fe6a				   .game_kernel_return
    640  fe6a		       60		      rts
    641  fe6b
    642  fe6b				   GameAudio0
    643  fe6b		       0d		      .byte.b	#13	; D
    644  fe6c		       ff		      .byte.b	#$FF
    645  fe6d		       0f		      .byte.b	#15	; B
    646  fe6e		       ff		      .byte.b	#$FF
    647  fe6f		       0d		      .byte.b	#13	; D
    648  fe70		       ff		      .byte.b	#$FF
    649  fe71		       0f		      .byte.b	#15	; B
    650  fe72		       ff		      .byte.b	#$FF
    651  fe73		       0d		      .byte.b	#13	; D
    652  fe74		       0d		      .byte.b	#13	; D
    653  fe75		       0f		      .byte.b	#15	; B
    654  fe76		       ff		      .byte.b	#$FF
    655  fe77		       0c		      .byte.b	#12	; D#
    656  fe78		       ff		      .byte.b	#$FF
    657  fe79		       0f		      .byte.b	#15	; B
    658  fe7a		       ff		      .byte.b	#$FF
    659  fe7b		       0b		      .byte.b	#11	; E
    660  fe7c		       ff		      .byte.b	#$FF
    661  fe7d		       0e		      .byte.b	#14	; C#
    662  fe7e		       ff		      .byte.b	#$FF
    663  fe7f		       0b		      .byte.b	#11
    664  fe80		       ff		      .byte.b	#$FF
    665  fe81		       0e		      .byte.b	#14
    666  fe82		       ff		      .byte.b	#$FF
    667  fe83		       0b		      .byte.b	#11
    668  fe84		       0b		      .byte.b	#11
    669  fe85		       0e		      .byte.b	#14
    670  fe86		       ff		      .byte.b	#$FF
    671  fe87		       0b		      .byte.b	#11
    672  fe88		       ff		      .byte.b	#$FF
    673  fe89		       0e		      .byte.b	#14
    674  fe8a		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fe8b					      include	"over.asm"
      1  fe8b							;================
      2  fe8b							; Constants
      3  fe8b							;================
      4  fe8b
      5  fe8b		       00 dc	   OVER_FRAMES =	220
      6  fe8b
      7  fe8b		       00 00	   OVER_BG_COLOR =	#$00
      8  fe8b		       00 44	   OVER_FG_COLOR =	#$44
      9  fe8b
     10  fe8b		       00 07	   OVER_AUDIO_TONE =	7
     11  fe8b		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fe8b		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fe8b		       00 10	   OVER_AUDIO_STEP =	16
     14  fe8b
     15  fe8b		       00 09	   OVER_IMAGE_SIZE =	9
     16  fe8b		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fe8b		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fe8b		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fe8b
     20  fe8b				   OverInit
     21  fe8b
     22  fe8b							; Setup logic and kernel
      0  fe8b					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fe8b				   .POINTER   SET	VBlankPtr
      2  fe8b				   .ADDRESS   SET	OverVerticalBlank
      3  fe8b
      4  fe8b		       a9 cd		      LDA	#<.ADDRESS
      5  fe8d		       85 88		      STA	.POINTER
      6  fe8f		       a9 fe		      LDA	#>.ADDRESS
      7  fe91		       85 89		      STA	.POINTER+1
      8  fe93
      0  fe93					      SET_POINTER	KernelPtr, OverKernel
      1  fe93				   .POINTER   SET	KernelPtr
      2  fe93				   .ADDRESS   SET	OverKernel
      3  fe93
      4  fe93		       a9 0b		      LDA	#<.ADDRESS
      5  fe95		       85 8a		      STA	.POINTER
      6  fe97		       a9 ff		      LDA	#>.ADDRESS
      7  fe99		       85 8b		      STA	.POINTER+1
      8  fe9b
      0  fe9b					      SET_POINTER	OverScanPtr, OverOverScan
      1  fe9b				   .POINTER   SET	OverScanPtr
      2  fe9b				   .ADDRESS   SET	OverOverScan
      3  fe9b
      4  fe9b		       a9 d1		      LDA	#<.ADDRESS
      5  fe9d		       85 8c		      STA	.POINTER
      6  fe9f		       a9 fe		      LDA	#>.ADDRESS
      7  fea1		       85 8d		      STA	.POINTER+1
      8  fea3
     26  fea3
     27  fea3							; Load Colors
     28  fea3		       a9 00		      lda	#OVER_BG_COLOR
     29  fea5		       85 09		      sta	COLUBK
     30  fea7		       a9 44		      lda	#OVER_FG_COLOR
     31  fea9		       85 08		      sta	COLUPF
     32  feab
     33  feab							; Load audio settings
     34  feab		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fead		       85 15		      sta	AUDC0
     36  feaf		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  feb1		       85 19		      sta	AUDV0
     38  feb3		       a9 00		      lda	#0
     39  feb5		       85 16		      sta	AUDC1
     40  feb7		       85 1a		      sta	AUDV1
     41  feb9		       a9 00		      lda	#0
     42  febb		       85 91		      sta	AudioStep
     43  febd
     44  febd							; Play first note
     45  febd		       ad 5d ff 	      lda	OverAudio0,AudioStep
     46  fec0		       85 17		      sta	AUDF0
     47  fec2
     48  fec2							; Setup frame counters
     49  fec2		       a9 00		      lda	#0
     50  fec4		       85 8e		      sta	Frame
     51  fec6		       a9 10		      lda	#OVER_AUDIO_STEP
     52  fec8		       85 8f		      sta	FrameTimer
     53  feca		       85 84		      sta	Temp+1
     54  fecc
     55  fecc		       60		      rts
     56  fecd
     57  fecd				   OverVerticalBlank
     58  fecd		       20 20 f5 	      jsr	ScoreUpdate
     59  fed0		       60		      rts
     60  fed1
     61  fed1				   OverOverScan
     62  fed1		       20 d8 fe 	      jsr	OverAudio
     63  fed4		       20 01 ff 	      jsr	OverState
     64  fed7		       60		      rts
     65  fed8
     66  fed8				   OverAudio
     67  fed8
     68  fed8		       a6 8f		      ldx	FrameTimer
     69  feda		       e0 00		      cpx	#0
     70  fedc		       d0 22		      bne	.over_audio_return
     71  fede
     72  fede							; Reset Timer
     73  fede		       a6 84		      ldx	Temp+1
     74  fee0					      REPEAT	3
     75  fee0		       e8		      inx
     74  fee0					      REPEND
     75  fee1		       e8		      inx
     74  fee1					      REPEND
     75  fee2		       e8		      inx
     76  fee3					      REPEND
     77  fee3		       86 8f		      stx	FrameTimer
     78  fee5		       86 84		      stx	Temp+1
     79  fee7
     80  fee7				   .over_audio_play
     81  fee7
     82  fee7							; Increment melody position
     83  fee7		       a4 91		      ldy	AudioStep
     84  fee9		       c8		      iny
     85  feea
     86  feea		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  feec		       f0 0c		      beq	.over_audio_mute_note
     88  feee
     89  feee				   .over_audio_play_note
     90  feee
     91  feee							; Save current position
     92  feee		       84 91		      sty	AudioStep
     93  fef0
     94  fef0							; Melody Line
     95  fef0		       b9 5d ff 	      lda	OverAudio0,y
     96  fef3		       85 17		      sta	AUDF0
     97  fef5		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  fef7		       85 19		      sta	AUDV0
     99  fef9
    100  fef9		       60		      rts
    101  fefa
    102  fefa				   .over_audio_mute_note
    103  fefa		       a9 00		      lda	#0
    104  fefc		       85 17		      sta	AUDF0
    105  fefe		       85 19		      sta	AUDV0
    106  ff00
    107  ff00				   .over_audio_return
    108  ff00		       60		      rts
    109  ff01
    110  ff01				   OverState
    111  ff01		       a5 8e		      lda	Frame
    112  ff03		       c9 dc		      cmp	#OVER_FRAMES
    113  ff05		       d0 03		      bne	.over_state_return
    114  ff07
    115  ff07		       20 a6 f2 	      jsr	TitleInit
    116  ff0a
    117  ff0a				   .over_state_return
    118  ff0a		       60		      rts
    119  ff0b
    120  ff0b				   OverKernel
    121  ff0b
    122  ff0b							; Turn on display
    123  ff0b		       a9 00		      lda	#0
    124  ff0d		       85 01		      sta	VBLANK
    125  ff0f
    126  ff0f				   .over_kernel_score
    127  ff0f
    128  ff0f							; Draw Score on top first (no update)
    129  ff0f		       20 92 f5 	      jsr	ScoreDraw
    130  ff12
    131  ff12				   .over_kernel_init
    132  ff12							; Playfield Control
    133  ff12		       a5 80		      lda	CtrlPf
    134  ff14		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  ff16		       09 01		      ora	#%00000001	; Set mirroring
    136  ff18		       85 80		      sta	CtrlPf
    137  ff1a		       85 0a		      sta	CTRLPF
    138  ff1c
    139  ff1c				   .over_kernel_top_padding
    140  ff1c							; Top Padding
    141  ff1c		       20 3b ff 	      jsr	OverPadding
    142  ff1f
    143  ff1f				   .over_kernel_image
    144  ff1f		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  ff21
    146  ff21				   .over_kernel_image_next
    147  ff21		       bd 54 ff 	      lda	OverImagePF2,x
    148  ff24		       85 0f		      sta	PF2
    149  ff26		       bd 4b ff 	      lda	OverImagePF1,x
    150  ff29		       85 0e		      sta	PF1
    151  ff2b							;    lda OverImagePF0,x
    152  ff2b							;    sta PF0
    153  ff2b
    154  ff2b		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  ff2d				   .over_kernel_image_loop
    156  ff2d		       85 02		      sta	WSYNC
    157  ff2f		       88		      dey
    158  ff30		       d0 fb		      bne	.over_kernel_image_loop
    159  ff32
    160  ff32		       ca		      dex
    161  ff33		       10 ec		      bpl	.over_kernel_image_next
    162  ff35
    163  ff35				   .over_kernel_bottom_padding
    164  ff35							; Bottom Padding
    165  ff35		       20 3b ff 	      jsr	OverPadding
    166  ff38
    167  ff38				   .over_kernel_return
    168  ff38		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  ff3a		       60		      rts
    170  ff3b
    171  ff3b				   OverPadding
    172  ff3b		       a9 00		      lda	#0
    173  ff3d		       85 0d		      sta	PF0
    174  ff3f		       85 0e		      sta	PF1
    175  ff41		       85 0f		      sta	PF2
    176  ff43
    177  ff43		       a2 32		      ldx	#OVER_IMAGE_PADDING
    178  ff45				   .over_padding_loop
    179  ff45		       85 02		      sta	WSYNC
    180  ff47		       ca		      dex
    181  ff48		       d0 fb		      bne	.over_padding_loop
    182  ff4a
    183  ff4a		       60		      rts
    184  ff4b
    185  ff4b				   OverAssets
    186  ff4b
    187  ff4b							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ff4b					      include	"over_image.asm"
      1  ff4b							;OverImagePF0:
      2  ff4b							;    .BYTE %00000000
      3  ff4b							;    .BYTE %00000000
      4  ff4b							;    .BYTE %00000000
      5  ff4b							;    .BYTE %00000000
      6  ff4b							;    .BYTE %00000000
      7  ff4b							;    .BYTE %00000000
      8  ff4b							;    .BYTE %00000000
      9  ff4b							;    .BYTE %00000000
     10  ff4b							;    .BYTE %00000000
     11  ff4b
     12  ff4b				   OverImagePF1
     13  ff4b		       0c		      .BYTE.b	%00001100
     14  ff4c		       13		      .BYTE.b	%00010011
     15  ff4d		       20		      .BYTE.b	%00100000
     16  ff4e		       23		      .BYTE.b	%00100011
     17  ff4f		       24		      .BYTE.b	%00100100
     18  ff50		       24		      .BYTE.b	%00100100
     19  ff51		       12		      .BYTE.b	%00010010
     20  ff52		       10		      .BYTE.b	%00010000
     21  ff53		       08		      .BYTE.b	%00001000
     22  ff54
     23  ff54				   OverImagePF2
     24  ff54		       e0		      .BYTE.b	%11100000
     25  ff55		       18		      .BYTE.b	%00011000
     26  ff56		       05		      .BYTE.b	%00000101
     27  ff57		       52		      .BYTE.b	%01010010
     28  ff58		       23		      .BYTE.b	%00100011
     29  ff59		       52		      .BYTE.b	%01010010
     30  ff5a		       04		      .BYTE.b	%00000100
     31  ff5b		       18		      .BYTE.b	%00011000
     32  ff5c		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  ff5d
    190  ff5d				   OverAudio0
    191  ff5d
    192  ff5d		       0c		      .BYTE.b	#12	; D#2
    193  ff5e		       0d		      .BYTE.b	#13	; D2
    194  ff5f		       11		      .BYTE.b	#17	; A1
    195  ff60		       16		      .BYTE.b	#22	; F1
    196  ff61		       1a		      .BYTE.b	#26	; D1
    197  ff62		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    330  ff63
    331  ff63							;================
    332  ff63							; End of cart
    333  ff63							;================
    334  ff63
    335  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    336  fffa
    337  fffa				   InterruptVectors
    338  fffa
    339  fffa		       fc f1		      .word.w	InitSystem	; NMI
    340  fffc		       fc f1		      .word.w	InitSystem	; RESET
    341  fffe		       fc f1		      .word.w	InitSystem	; IRQ
    342  10000
    343  10000					       END
