------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00ba ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00	   FrameTimer ds	1
     70 U008f
     71 U008f		       00	   AudioStep  ds	1
     72 U0090
     73 U0090		       00	   SampleStep ds	1
     74 U0091
     75 U0091							; Score
     76 U0091
     77 U0091		       00 00	   ScoreValue ds	2
     78 U0093		       00 00	   ScoreDigitOnes ds	2
     79 U0095		       00 00	   ScoreDigitTens ds	2
     80 U0097		       00 00	   ScoreGfx   ds	2
     81 U0099
     82 U0099							; Web
     83 U0099
     84 U0099		       00	   WebIndex   ds	1
     85 U009a		       00	   WebDir     ds	1
     86 U009b
     87 U009b							; Spider
     88 U009b
     89 U009b		       00 00	   SpiderPtr  ds	2
     90 U009d		       00 00	   SpiderPos  ds	2
     91 U009f		       00	   SpiderCtrl ds	1
     92 U00a0		       00	   SpiderColor ds	1
     93 U00a1
     94 U00a1		       00	   SpiderIndex ds	1
     95 U00a2		       00	   SpiderDrawPos ds	1
     96 U00a3
     97 U00a3		       00 00	   SpiderPtr2 ds	2
     98 U00a5
     99 U00a5							; Line
    100 U00a5
    101 U00a5		       00	   LineEnabled ds	1
    102 U00a6		       00 00	   LinePos    ds	2
    103 U00a8		       00 00	   LineVelocity ds	2
    104 U00aa		       00 00	   LineStartPos ds	2
    105 U00ac		       00 00	   LineDrawPos ds	2
    106 U00ae
    107 U00ae							; Bug
    108 U00ae
    109 U00ae		       00 00	   BugStunned ds	2
    110 U00b0		       00 00	   BugPosX    ds	2
    111 U00b2		       00 00	   BugPosY    ds	2
    112 U00b4		       00 00	   BugColor   ds	2
    113 U00b6
    114 U00b6		       00 00	   BugDrawPosBottom ds	2
    115 U00b8		       00 00	   BugDrawPosTop ds	2
    116 U00ba
    117  10000 ????				       SEG
    118  f000					      org	$F000	; Start of cart area
    119  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    121  f021
    122  f021				   InitSystem
    123  f021
    124  f021				   .init_clean
    125  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    127  f02c
    128  f02c				   .init_tia
    129  f02c							; Define default TIA register values
    130  f02c
    131  f02c							; Initialize copies
    132  f02c		       a9 00		      lda	#0
    133  f02e		       85 80		      sta	CtrlPf
    134  f030		       85 81		      sta	NuSiz0
    135  f032		       85 82		      sta	NuSiz1
    136  f034
    137  f034							; Set background color
    138  f034		       a9 00		      lda	#$00	; Black
    139  f036		       85 09		      sta	COLUBK
    140  f038
    141  f038							; Set the playfield and player color
    142  f038		       a9 0e		      lda	#$0E	; White
    143  f03a		       85 08		      sta	COLUPF
    144  f03c		       85 06		      sta	COLUP0
    145  f03e		       85 07		      sta	COLUP1
    146  f040
    147  f040							; Playfield Control
    148  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    149  f042		       85 80		      sta	CtrlPf
    150  f044		       85 0a		      sta	CTRLPF
    151  f046
    152  f046							; Disable Game Elements
    153  f046		       a9 00		      lda	#$00
    154  f048		       85 1f		      sta	ENABL	; Turn off ball
    155  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    156  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    157  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    158  f050		       85 1c		      sta	GRP1	; Turn off player 2
    159  f052
    160  f052							; Empty playfield
    161  f052		       a9 00		      lda	#%00000000
    162  f054		       85 0d		      sta	PF0
    163  f056		       85 0e		      sta	PF1
    164  f058		       85 0f		      sta	PF2
    165  f05a
    166  f05a				   .init_seed
    167  f05a							; Seed the random number generator
    168  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    169  f05d		       85 85		      sta	Rand8	; Use as seed
    170  f05f		       49 ff		      eor	#$FF	; Flip bits
    171  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    172  f063
    173  f063				   .init_game
    174  f063
    175  f063		       20 c9 f0 	      jsr	LogoInit
    176  f066
    177  f066							;=======================================
    178  f066							; Game Kernel
    179  f066							;=======================================
    180  f066
    181  f066				   Main
    182  f066
    183  f066		       20 75 f0 	      jsr	VerticalSync
    184  f069		       20 8c f0 	      jsr	VerticalBlank
    185  f06c		       20 9f f0 	      jsr	Kernel
    186  f06f		       20 a6 f0 	      jsr	OverScan
    187  f072		       4c 66 f0 	      jmp	Main
    188  f075
    189  f075				   VerticalSync
    190  f075
    191  f075		       a9 00		      lda	#0
    192  f077		       85 01		      sta	VBLANK
    193  f079
    194  f079							; Turn on Vertical Sync signal and setup timer
    195  f079		       a9 02		      lda	#2
    196  f07b		       85 00		      sta	VSYNC
    197  f07d
    198  f07d							; Increment frame count and reduce frame counter
    199  f07d		       e6 8d		      inc	Frame
    200  f07f		       c6 8e		      dec	FrameTimer
    201  f081
    202  f081							; VSYNCH signal scanlines
    203  f081					      REPEAT	#KERNEL_VSYNC
    204  f081		       85 02		      sta	WSYNC
    203  f081					      REPEND
    204  f083		       85 02		      sta	WSYNC
    203  f083					      REPEND
    204  f085		       85 02		      sta	WSYNC
    205  f087					      REPEND
    206  f087
    207  f087							; Turn off Vertical Sync signal
    208  f087		       a9 00		      lda	#0
    209  f089		       85 00		      sta	VSYNC
    210  f08b
    211  f08b				   .vsync_return
    212  f08b		       60		      rts
    213  f08c
    214  f08c				   VerticalBlank
    215  f08c							; Setup Timer
    216  f08c		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    217  f08e		       8d 96 02 	      sta	TIM64T
    218  f091
    219  f091				   .vblank_logic
    220  f091							; Perform Game Logic
    221  f091		       20 9c f0 	      jsr	.vblank_logic_call_ptr
    222  f094
    223  f094				   .vblank_loop
    224  f094							; WSYNC until Timer is complete
    225  f094		       85 02		      sta	WSYNC
    226  f096		       ad 84 02 	      lda	INTIM
    227  f099		       d0 f9		      bne	.vblank_loop
    228  f09b
    229  f09b				   .vblank_return
    230  f09b		       60		      rts
    231  f09c
    232  f09c				   .vblank_logic_call_ptr
    233  f09c		       6c 87 00 	      jmp	(VBlankPtr)
    234  f09f
    235  f09f				   Kernel
    236  f09f
    237  f09f							; Perform Selected Kernel
    238  f09f		       20 a3 f0 	      jsr	.kernel_call_ptr
    239  f0a2		       60		      rts
    240  f0a3
    241  f0a3				   .kernel_call_ptr
    242  f0a3		       6c 89 00 	      jmp	(KernelPtr)
    243  f0a6
    244  f0a6				   OverScan
    245  f0a6
    246  f0a6							; End of screen, enter blanking
    247  f0a6		       a9 42		      lda	#%01000010
    248  f0a8		       85 01		      sta	VBLANK
    249  f0aa
    250  f0aa							; Setup Timer
    251  f0aa		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    252  f0ac		       8d 96 02 	      sta	TIM64T
    253  f0af
    254  f0af							;.overscan_reset:
    255  f0af							; Check for reset switch
    256  f0af		       ad 82 02 	      lda	SWCHB
    257  f0b2		       4a		      lsr		; Push D0 to carry (C)
    258  f0b3		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    259  f0b5
    260  f0b5							; Perform reset
    261  f0b5		       20 c9 f0 	      jsr	LogoInit	; No need for logic
    262  f0b8		       4c be f0 	      jmp	.overscan_loop
    263  f0bb
    264  f0bb				   .overscan_logic
    265  f0bb							; Perform OverScan Logic
    266  f0bb		       20 c6 f0 	      jsr	.overscan_logic_call_ptr
    267  f0be
    268  f0be				   .overscan_loop
    269  f0be							; WSYNC until Timer is complete
    270  f0be		       85 02		      sta	WSYNC
    271  f0c0		       ad 84 02 	      lda	INTIM
    272  f0c3		       d0 f9		      bne	.overscan_loop
    273  f0c5
    274  f0c5				   .overscan_return
    275  f0c5		       60		      rts
    276  f0c6
    277  f0c6				   .overscan_logic_call_ptr
    278  f0c6		       6c 8b 00 	      jmp	(OverScanPtr)
    279  f0c9
    280  f0c9							;================
    281  f0c9							; State Code
    282  f0c9							;================
    283  f0c9
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0c9					      include	"logo.asm"
      1  f0c9							;================
      2  f0c9							; Constants
      3  f0c9							;================
      4  f0c9
      5  f0c9		       00 b4	   LOGO_FRAMES =	180
      6  f0c9
      7  f0c9		       00 a2	   LOGO_BG_COLOR =	#$A2
      8  f0c9		       00 5e	   LOGO_FG_COLOR =	#$5E
      9  f0c9
     10  f0c9		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0c9		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0c9		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0c9		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0c9		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0c9		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0c9
     17  f0c9		       00 09	   LOGO_IMAGE_SIZE =	9
     18  f0c9		       00 08	   LOGO_IMAGE_LINE_SIZE =	8
     19  f0c9		       00 48	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     20  f0c9		       00 3c	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     21  f0c9
     22  f0c9				   LogoInit
     23  f0c9
     24  f0c9							; Setup logic and kernel
      0  f0c9					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0c9				   .POINTER   SET	VBlankPtr
      2  f0c9				   .ADDRESS   SET	LogoVerticalBlank
      3  f0c9
      4  f0c9		       a9 10		      LDA	#<.ADDRESS
      5  f0cb		       85 87		      STA	.POINTER
      6  f0cd		       a9 f1		      LDA	#>.ADDRESS
      7  f0cf		       85 88		      STA	.POINTER+1
      8  f0d1
      0  f0d1					      SET_POINTER	KernelPtr, LogoKernel
      1  f0d1				   .POINTER   SET	KernelPtr
      2  f0d1				   .ADDRESS   SET	LogoKernel
      3  f0d1
      4  f0d1		       a9 54		      LDA	#<.ADDRESS
      5  f0d3		       85 89		      STA	.POINTER
      6  f0d5		       a9 f1		      LDA	#>.ADDRESS
      7  f0d7		       85 8a		      STA	.POINTER+1
      8  f0d9
      0  f0d9					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0d9				   .POINTER   SET	OverScanPtr
      2  f0d9				   .ADDRESS   SET	LogoOverScan
      3  f0d9
      4  f0d9		       a9 11		      LDA	#<.ADDRESS
      5  f0db		       85 8b		      STA	.POINTER
      6  f0dd		       a9 f1		      LDA	#>.ADDRESS
      7  f0df		       85 8c		      STA	.POINTER+1
      8  f0e1
     28  f0e1
     29  f0e1							; Load Colors
     30  f0e1		       a9 a2		      lda	#LOGO_BG_COLOR
     31  f0e3		       85 09		      sta	COLUBK
     32  f0e5		       a9 5e		      lda	#LOGO_FG_COLOR
     33  f0e7		       85 08		      sta	COLUPF
     34  f0e9
     35  f0e9							; Load audio settings
     36  f0e9		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     37  f0eb		       85 15		      sta	AUDC0
     38  f0ed		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     39  f0ef		       85 19		      sta	AUDV0
     40  f0f1		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     41  f0f3		       85 16		      sta	AUDC1
     42  f0f5		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     43  f0f7		       85 1a		      sta	AUDV1
     44  f0f9		       a9 00		      lda	#0
     45  f0fb		       85 8f		      sta	AudioStep
     46  f0fd
     47  f0fd							; Play first note
     48  f0fd		       ad dd f1 	      lda	LogoAudio0,AudioStep
     49  f100		       85 17		      sta	AUDF0
     50  f102		       ad e9 f1 	      lda	LogoAudio1,AudioStep
     51  f105		       85 18		      sta	AUDF1
     52  f107
     53  f107							; Setup frame counters
     54  f107		       a9 00		      lda	#0
     55  f109		       85 8d		      sta	Frame
     56  f10b		       a9 b4		      lda	#LOGO_FRAMES
     57  f10d		       85 8e		      sta	FrameTimer
     58  f10f
     59  f10f							; Setup Image Animation
     60  f10f							;lda #KERNEL_IMAGE_SIZE
     61  f10f							;sta ImageVisible
     62  f10f
     63  f10f		       60		      rts
     64  f110
     65  f110				   LogoVerticalBlank
     66  f110							;jsr LogoAnimation
     67  f110		       60		      rts
     68  f111
     69  f111				   LogoOverScan
     70  f111		       20 1f f1 	      jsr	LogoAudio
     71  f114		       20 4a f1 	      jsr	LogoState
     72  f117		       60		      rts
     73  f118
     74  f118				   LogoAnimation
     75  f118		       a5 8d		      lda	Frame
     76  f11a		       29 03		      and	#%00000011	; Every 4 when bits are 00
     77  f11c		       d0 00		      bne	.logo_animation_return
     78  f11e
     79  f11e							;ldx ImageVisible
     80  f11e							;cpx #0
     81  f11e							;beq .logo_animation_return
     82  f11e
     83  f11e							; Add another visible line
     84  f11e							;dex
     85  f11e							;stx ImageVisible
     86  f11e
     87  f11e				   .logo_animation_return
     88  f11e		       60		      rts
     89  f11f
     90  f11f				   LogoAudio
     91  f11f
     92  f11f		       a5 8d		      lda	Frame
     93  f121		       29 07		      and	#%00000111	; Every 8 when bits are 000
     94  f123		       d0 24		      bne	.logo_audio_return
     95  f125
     96  f125				   .logo_audio_play
     97  f125
     98  f125							; Check if we're at the end of the melody
     99  f125		       a4 8f		      ldy	AudioStep
    100  f127		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
    101  f129		       f0 10		      beq	.logo_audio_mute
    102  f12b
    103  f12b				   .logo_audio_play_note
    104  f12b							; Increment audio position
    105  f12b		       c8		      iny
    106  f12c		       84 8f		      sty	AudioStep
    107  f12e
    108  f12e							; Logo note and play
    109  f12e		       b9 dd f1 	      lda	LogoAudio0,y
    110  f131		       85 17		      sta	AUDF0
    111  f133		       b9 e9 f1 	      lda	LogoAudio1,y
    112  f136		       85 18		      sta	AUDF1
    113  f138		       4c 49 f1 	      jmp	.logo_audio_mute_skip
    114  f13b
    115  f13b				   .logo_audio_mute
    116  f13b
    117  f13b							; Mute audio
    118  f13b		       a9 00		      lda	#0
    119  f13d		       85 15		      sta	AUDC0
    120  f13f		       85 19		      sta	AUDV0
    121  f141		       85 17		      sta	AUDF0
    122  f143		       85 16		      sta	AUDC1
    123  f145		       85 1a		      sta	AUDV1
    124  f147		       85 18		      sta	AUDF1
    125  f149
    126  f149				   .logo_audio_mute_skip
    127  f149				   .logo_audio_return
    128  f149		       60		      rts
    129  f14a
    130  f14a				   LogoState
    131  f14a		       a5 8e		      lda	FrameTimer
    132  f14c		       c9 00		      cmp	#0
    133  f14e		       d0 03		      bne	.logo_state_return
    134  f150
    135  f150		       20 f5 f1 	      jsr	TitleInit
    136  f153
    137  f153				   .logo_state_return
    138  f153		       60		      rts
    139  f154
    140  f154				   LogoKernel
    141  f154
    142  f154							; Playfield Control
    143  f154		       a5 80		      lda	CtrlPf
    144  f156		       29 fe		      and	#%11111110	; No mirroring
    145  f158		       85 80		      sta	CtrlPf
    146  f15a		       85 0a		      sta	CTRLPF
    147  f15c
    148  f15c							; Turn on display
    149  f15c		       a9 00		      lda	#0
    150  f15e		       85 01		      sta	VBLANK
    151  f160
    152  f160				   .logo_kernel_top_padding
    153  f160							; Top Padding
    154  f160		       20 97 f1 	      jsr	LogoPadding
    155  f163
    156  f163				   .logo_kernel_image
    157  f163
    158  f163		       a2 11		      ldx	#(LOGO_IMAGE_SIZE*2)-1
    159  f165		       a0 07		      ldy	#LOGO_IMAGE_LINE_SIZE-1
    160  f167							; The extra 1 on line size is for processing overflow
    161  f167
    162  f167				   .logo_kernel_image_line
    163  f167		       85 02		      sta	WSYNC
    164  f169
    165  f169		       bd a6 f1 	      lda	LogoImagePF0-1,x
    166  f16c		       85 0d		      sta	PF0
    167  f16e		       bd b8 f1 	      lda	LogoImagePF1-1,x
    168  f171		       85 0e		      sta	PF1
    169  f173		       bd ca f1 	      lda	LogoImagePF2-1,x
    170  f176		       85 0f		      sta	PF2
    171  f178
      0  f178					      sleep	6
      1  f178				   .CYCLES    SET	6
      2  f178
      3  f178				  -	      IF	.CYCLES < 2
      4  f178				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f178				  -	      ERR
      6  f178					      ENDIF
      7  f178
      8  f178				  -	      IF	.CYCLES & 1
      9  f178				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f178				  -	      nop	0
     11  f178				  -	      ELSE
     12  f178				  -	      bit	VSYNC
     13  f178				  -	      ENDIF
     14  f178				  -.CYCLES    SET	.CYCLES - 3
     15  f178					      ENDIF
     16  f178
     17  f178					      REPEAT	.CYCLES / 2
     18  f178		       ea		      nop
     17  f178					      REPEND
     18  f179		       ea		      nop
     17  f179					      REPEND
     18  f17a		       ea		      nop
     19  f17b					      REPEND
    173  f17b
    174  f17b		       bd a7 f1 	      lda	LogoImagePF0,x
    175  f17e		       85 0d		      sta	PF0
    176  f180		       bd b9 f1 	      lda	LogoImagePF1,x
    177  f183		       85 0e		      sta	PF1
    178  f185		       bd cb f1 	      lda	LogoImagePF2,x
    179  f188		       85 0f		      sta	PF2
    180  f18a
    181  f18a		       88		      dey
    182  f18b		       d0 da		      bne	.logo_kernel_image_line
    183  f18d
    184  f18d		       a0 08		      ldy	#LOGO_IMAGE_LINE_SIZE
    185  f18f
    186  f18f		       ca		      dex
    187  f190		       ca		      dex
    188  f191		       10 d4		      bpl	.logo_kernel_image_line
    189  f193
    190  f193				   .logo_kernel_bottom_padding
    191  f193							; Bottom Padding
    192  f193		       20 97 f1 	      jsr	LogoPadding
    193  f196
    194  f196				   .logo_kernel_image_return
    195  f196		       60		      rts
    196  f197
    197  f197				   LogoPadding
    198  f197		       a9 00		      lda	#0
    199  f199		       85 0d		      sta	PF0
    200  f19b		       85 0e		      sta	PF1
    201  f19d		       85 0f		      sta	PF2
    202  f19f
    203  f19f		       a2 3c		      ldx	#LOGO_IMAGE_PADDING
    204  f1a1				   .logo_padding_loop
    205  f1a1		       85 02		      sta	WSYNC
    206  f1a3		       ca		      dex
    207  f1a4		       d0 fb		      bne	.logo_padding_loop
    208  f1a6
    209  f1a6		       60		      rts
    210  f1a7
    211  f1a7				   LogoAssets
    212  f1a7
    213  f1a7							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f1a7					      include	"logo_image.asm"
      1  f1a7				   LogoImagePF0
      2  f1a7		       00		      .BYTE.b	%00000000
      3  f1a8		       40		      .BYTE.b	%01000000
      4  f1a9		       00		      .BYTE.b	%00000000
      5  f1aa		       a0		      .BYTE.b	%10100000
      6  f1ab		       00		      .BYTE.b	%00000000
      7  f1ac		       10		      .BYTE.b	%00010000
      8  f1ad		       00		      .BYTE.b	%00000000
      9  f1ae		       00		      .BYTE.b	%00000000
     10  f1af		       00		      .BYTE.b	%00000000
     11  f1b0		       c0		      .BYTE.b	%11000000
     12  f1b1		       00		      .BYTE.b	%00000000
     13  f1b2		       50		      .BYTE.b	%01010000
     14  f1b3		       00		      .BYTE.b	%00000000
     15  f1b4		       40		      .BYTE.b	%01000000
     16  f1b5		       00		      .BYTE.b	%00000000
     17  f1b6		       50		      .BYTE.b	%01010000
     18  f1b7		       00		      .BYTE.b	%00000000
     19  f1b8		       c0		      .BYTE.b	%11000000
     20  f1b9
     21  f1b9				   LogoImagePF1
     22  f1b9		       00		      .BYTE.b	%00000000
     23  f1ba		       00		      .BYTE.b	%00000000
     24  f1bb		       00		      .BYTE.b	%00000000
     25  f1bc		       00		      .BYTE.b	%00000000
     26  f1bd		       00		      .BYTE.b	%00000000
     27  f1be		       80		      .BYTE.b	%10000000
     28  f1bf		       00		      .BYTE.b	%00000000
     29  f1c0		       00		      .BYTE.b	%00000000
     30  f1c1		       00		      .BYTE.b	%00000000
     31  f1c2		       00		      .BYTE.b	%00000000
     32  f1c3		       00		      .BYTE.b	%00000000
     33  f1c4		       80		      .BYTE.b	%10000000
     34  f1c5		       00		      .BYTE.b	%00000000
     35  f1c6		       80		      .BYTE.b	%10000000
     36  f1c7		       00		      .BYTE.b	%00000000
     37  f1c8		       80		      .BYTE.b	%10000000
     38  f1c9		       00		      .BYTE.b	%00000000
     39  f1ca		       00		      .BYTE.b	%00000000
     40  f1cb
     41  f1cb				   LogoImagePF2
     42  f1cb		       44		      .BYTE.b	%01000100
     43  f1cc		       00		      .BYTE.b	%00000000
     44  f1cd		       a8		      .BYTE.b	%10101000
     45  f1ce		       00		      .BYTE.b	%00000000
     46  f1cf		       10		      .BYTE.b	%00010000
     47  f1d0		       00		      .BYTE.b	%00000000
     48  f1d1		       00		      .BYTE.b	%00000000
     49  f1d2		       00		      .BYTE.b	%00000000
     50  f1d3		       8c		      .BYTE.b	%10001100
     51  f1d4		       00		      .BYTE.b	%00000000
     52  f1d5		       54		      .BYTE.b	%01010100
     53  f1d6		       00		      .BYTE.b	%00000000
     54  f1d7		       54		      .BYTE.b	%01010100
     55  f1d8		       00		      .BYTE.b	%00000000
     56  f1d9		       54		      .BYTE.b	%01010100
     57  f1da		       00		      .BYTE.b	%00000000
     58  f1db		       8c		      .BYTE.b	%10001100
     59  f1dc		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    215  f1dd
    216  f1dd				   LogoAudio0
    217  f1dd
    218  f1dd		       1d		      .BYTE.b	#29	; C
    219  f1de		       17		      .BYTE.b	#23	; E
    220  f1df		       13		      .BYTE.b	#19	; G
    221  f1e0		       0f		      .BYTE.b	#15	; A
    222  f1e1		       17		      .BYTE.b	#23	; E
    223  f1e2		       13		      .BYTE.b	#19	; G
    224  f1e3		       0f		      .BYTE.b	#15	; B
    225  f1e4		       0e		      .BYTE.b	#14	; C
    226  f1e5		       0b		      .BYTE.b	#11	; E
    227  f1e6		       0b		      .BYTE.b	#11
    228  f1e7		       0b		      .BYTE.b	#11
    229  f1e8		       0b		      .BYTE.b	#11
    230  f1e9
    231  f1e9				   LogoAudio1
    232  f1e9
    233  f1e9		       1f		      .BYTE.b	#31	; C
    234  f1ea		       1f		      .BYTE.b	#31
    235  f1eb		       1f		      .BYTE.b	#31
    236  f1ec		       1f		      .BYTE.b	#31
    237  f1ed		       19		      .BYTE.b	#25	; E
    238  f1ee		       19		      .BYTE.b	#25
    239  f1ef		       19		      .BYTE.b	#25
    240  f1f0		       19		      .BYTE.b	#25
    241  f1f1		       14		      .BYTE.b	#20	; G
    242  f1f2		       14		      .BYTE.b	#20
    243  f1f3		       14		      .BYTE.b	#20
    244  f1f4		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f1f5					      include	"title.asm"
      1  f1f5							;================
      2  f1f5							; Constants
      3  f1f5							;================
      4  f1f5
      5  f1f5		       00 00	   TITLE_BG_COLOR =	#$00
      6  f1f5		       00 06	   TITLE_FRAME_COLOR =	#$06
      7  f1f5		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f1f5		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f1f5
     10  f1f5		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f1f5		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f1f5		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f1f5		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f1f5		       00 09	   TITLE_AUDIO_STEP =	9
     15  f1f5
     16  f1f5		       00 07	   TITLE_FRAME_TOP_LINES =	7
     17  f1f5		       00 06	   TITLE_LABEL_LINES =	6
     18  f1f5		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f1f5
     20  f1f5		       00 01	   TITLE_GAP_SIZE =	#1
     21  f1f5
     22  f1f5		       00 28	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)
     23  f1f5		       00 0a	   TITLE_SPIDER_SIZE =	#10
     24  f1f5		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f1f5
     26  f1f5				   TitleInit
     27  f1f5
     28  f1f5							; Setup logic and kernel
      0  f1f5					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f1f5				   .POINTER   SET	VBlankPtr
      2  f1f5				   .ADDRESS   SET	TitleVerticalBlank
      3  f1f5
      4  f1f5		       a9 4c		      LDA	#<.ADDRESS
      5  f1f7		       85 87		      STA	.POINTER
      6  f1f9		       a9 f2		      LDA	#>.ADDRESS
      7  f1fb		       85 88		      STA	.POINTER+1
      8  f1fd
      0  f1fd					      SET_POINTER	KernelPtr, TitleKernel
      1  f1fd				   .POINTER   SET	KernelPtr
      2  f1fd				   .ADDRESS   SET	TitleKernel
      3  f1fd
      4  f1fd		       a9 d5		      LDA	#<.ADDRESS
      5  f1ff		       85 89		      STA	.POINTER
      6  f201		       a9 f2		      LDA	#>.ADDRESS
      7  f203		       85 8a		      STA	.POINTER+1
      8  f205
      0  f205					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f205				   .POINTER   SET	OverScanPtr
      2  f205				   .ADDRESS   SET	TitleOverScan
      3  f205
      4  f205		       a9 8e		      LDA	#<.ADDRESS
      5  f207		       85 8b		      STA	.POINTER
      6  f209		       a9 f2		      LDA	#>.ADDRESS
      7  f20b		       85 8c		      STA	.POINTER+1
      8  f20d
     32  f20d
     33  f20d							; Load Colors
     34  f20d		       a9 00		      lda	#TITLE_BG_COLOR
     35  f20f		       85 09		      sta	COLUBK
     36  f211		       a9 06		      lda	#TITLE_FRAME_COLOR
     37  f213		       85 08		      sta	COLUPF
     38  f215		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f217		       85 06		      sta	COLUP0
     40  f219		       85 07		      sta	COLUP1
     41  f21b
     42  f21b							; Load audio settings
     43  f21b
     44  f21b							; Melody Line
     45  f21b		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f21d		       85 15		      sta	AUDC0
     47  f21f		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f221		       85 19		      sta	AUDV0
     49  f223
     50  f223							; Drums and Bass
     51  f223		       a9 00		      lda	#0
     52  f225		       85 16		      sta	AUDC1
     53  f227		       85 1a		      sta	AUDV1
     54  f229
     55  f229							; Make it so that we play the first note immediately
     56  f229		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f22b		       85 8f		      sta	AudioStep
     58  f22d		       a9 01		      lda	#1
     59  f22f		       85 8e		      sta	FrameTimer
     60  f231
     61  f231							; Setup Spider Sprite
      0  f231					      SET_POINTER	SpiderPtr, TitleSpider
      1  f231				   .POINTER   SET	SpiderPtr
      2  f231				   .ADDRESS   SET	TitleSpider
      3  f231
      4  f231		       a9 3c		      LDA	#<.ADDRESS
      5  f233		       85 9b		      STA	.POINTER
      6  f235		       a9 f4		      LDA	#>.ADDRESS
      7  f237		       85 9c		      STA	.POINTER+1
      8  f239
     63  f239
     64  f239		       a9 06		      lda	#%00000110	; Triple Sprite
     65  f23b		       85 81		      sta	NuSiz0
     66  f23d		       85 04		      sta	NUSIZ0
     67  f23f		       85 82		      sta	NuSiz1
     68  f241		       85 05		      sta	NUSIZ1
     69  f243
     70  f243		       a9 00		      lda	#0	; No reflect
     71  f245		       85 0b		      sta	REFP0
     72  f247		       a9 ff		      lda	#$FF	; Reflect P1
     73  f249		       85 0c		      sta	REFP1
     74  f24b
     75  f24b		       60		      rts
     76  f24c
     77  f24c				   TitleVerticalBlank
     78  f24c
     79  f24c							; Refresh random values
     80  f24c		       20 13 f0 	      jsr	Random
     81  f24f
     82  f24f		       20 56 f2 	      jsr	TitlePosition
     83  f252		       20 69 f2 	      jsr	TitleAnimation
     84  f255
     85  f255		       60		      rts
     86  f256
     87  f256				   TitlePosition
     88  f256
     89  f256							; Position Spider
     90  f256		       a2 00		      ldx	#0	; Object (player0)
     91  f258		       a9 28		      lda	#TITLE_SPIDER_POS_X	; X Position
     92  f25a		       20 00 f0 	      jsr	PosObject
     93  f25d
     94  f25d		       a2 01		      ldx	#1	; Object (player1)
     95  f25f		       a9 30		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
     96  f261		       20 00 f0 	      jsr	PosObject
     97  f264
     98  f264		       85 02		      sta	WSYNC
     99  f266		       85 2a		      sta	HMOVE
    100  f268
    101  f268		       60		      rts
    102  f269
    103  f269				   TitleAnimation
    104  f269
    105  f269		       a5 8f		      lda	AudioStep
    106  f26b		       c9 0c		      cmp	#TITLE_AUDIO_LENGTH*3/4
    107  f26d		       f0 16		      beq	.title_animation_2
    108  f26f		       c9 08		      cmp	#TITLE_AUDIO_LENGTH/2
    109  f271		       f0 09		      beq	.title_animation_1
    110  f273		       c9 04		      cmp	#TITLE_AUDIO_LENGTH/4
    111  f275		       f0 0e		      beq	.title_animation_2
    112  f277		       c9 00		      cmp	#0
    113  f279		       f0 01		      beq	.title_animation_1
    114  f27b		       60		      rts
    115  f27c
    116  f27c				   .title_animation_1
      0  f27c					      SET_POINTER	SpiderPtr, TitleSpider
      1  f27c				   .POINTER   SET	SpiderPtr
      2  f27c				   .ADDRESS   SET	TitleSpider
      3  f27c
      4  f27c		       a9 3c		      LDA	#<.ADDRESS
      5  f27e		       85 9b		      STA	.POINTER
      6  f280		       a9 f4		      LDA	#>.ADDRESS
      7  f282		       85 9c		      STA	.POINTER+1
      8  f284
    118  f284		       60		      rts
    119  f285
    120  f285				   .title_animation_2
      0  f285					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f285				   .POINTER   SET	SpiderPtr
      2  f285				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f285
      4  f285		       a9 46		      LDA	#<.ADDRESS
      5  f287		       85 9b		      STA	.POINTER
      6  f289		       a9 f4		      LDA	#>.ADDRESS
      7  f28b		       85 9c		      STA	.POINTER+1
      8  f28d
    122  f28d		       60		      rts
    123  f28e
    124  f28e				   TitleOverScan
    125  f28e		       20 95 f2 	      jsr	TitleAudio
    126  f291		       20 cd f2 	      jsr	TitleState
    127  f294		       60		      rts
    128  f295
    129  f295				   TitleAudio
    130  f295
    131  f295		       a6 8e		      ldx	FrameTimer
    132  f297		       e0 00		      cpx	#0
    133  f299		       d0 31		      bne	.title_audio_return
    134  f29b
    135  f29b							; Reset Timer
    136  f29b		       a2 09		      ldx	#TITLE_AUDIO_STEP
    137  f29d		       86 8e		      stx	FrameTimer
    138  f29f
    139  f29f				   .title_audio_play
    140  f29f
    141  f29f							; Increment melody position
    142  f29f		       a4 8f		      ldy	AudioStep
    143  f2a1		       c8		      iny
    144  f2a2
    145  f2a2							; Check if we're at the end of the melody
    146  f2a2		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    147  f2a4		       d0 02		      bne	.title_audio_play_note
    148  f2a6
    149  f2a6							; Loop our audio step
    150  f2a6		       a0 00		      ldy	#0
    151  f2a8
    152  f2a8				   .title_audio_play_note
    153  f2a8
    154  f2a8							; Save current position
    155  f2a8		       84 8f		      sty	AudioStep
    156  f2aa
    157  f2aa							; Basic Melody Line
    158  f2aa		       b9 50 f4 	      lda	TitleAudio0,y
    159  f2ad		       85 17		      sta	AUDF0
    160  f2af
    161  f2af							; Drums and Bass
    162  f2af		       b9 60 f4 	      lda	TitleTone1,y
    163  f2b2		       c9 ff		      cmp	#$FF
    164  f2b4		       f0 0e		      beq	.title_audio_play_note_1_mute
    165  f2b6
    166  f2b6		       85 16		      sta	AUDC1
    167  f2b8		       b9 70 f4 	      lda	TitleAudio1,y
    168  f2bb		       85 18		      sta	AUDF1
    169  f2bd		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    170  f2bf		       85 1a		      sta	AUDV1
    171  f2c1
    172  f2c1		       4c cc f2 	      jmp	.title_audio_return
    173  f2c4
    174  f2c4				   .title_audio_play_note_1_mute
    175  f2c4
    176  f2c4		       a9 00		      lda	#0
    177  f2c6		       85 18		      sta	AUDF1
    178  f2c8		       85 16		      sta	AUDC1
    179  f2ca		       85 1a		      sta	AUDV1
    180  f2cc
    181  f2cc				   .title_audio_return
    182  f2cc		       60		      rts
    183  f2cd
    184  f2cd				   TitleState
    185  f2cd							; Check if Fire Button on controller 1 is pressed
    186  f2cd		       a5 0c		      lda	INPT4
    187  f2cf		       30 03		      bmi	.title_state_return
    188  f2d1
    189  f2d1		       20 58 fa 	      jsr	GameInit
    190  f2d4
    191  f2d4				   .title_state_return
    192  f2d4		       60		      rts
    193  f2d5
    194  f2d5				   TitleKernel
    195  f2d5
    196  f2d5							; Playfield Control
    197  f2d5		       a5 80		      lda	CtrlPf
    198  f2d7		       29 fe		      and	#%11111110	; No mirroring
    199  f2d9		       85 80		      sta	CtrlPf
    200  f2db		       85 0a		      sta	CTRLPF
    201  f2dd
    202  f2dd							; Turn on display
    203  f2dd		       a9 00		      lda	#0
    204  f2df		       85 01		      sta	VBLANK
    205  f2e1
    206  f2e1		       85 02		      sta	WSYNC
    207  f2e3
    208  f2e3				   TitleFrameTopDraw
    209  f2e3
    210  f2e3							; Start Counters
    211  f2e3		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    212  f2e5		       a0 00		      ldy	#0	; Image Counter
    213  f2e7
    214  f2e7				   .title_frame_top
    215  f2e7
    216  f2e7							; 76 machine cycles per scanline
    217  f2e7		       85 02		      sta	WSYNC
    218  f2e9
    219  f2e9				   .title_frame_top_load		; 66 cycles
    220  f2e9
    221  f2e9							; First half of image
    222  f2e9		       b9 d0 f3 	      lda	TitleFrameTop,y	; 5
    223  f2ec		       85 0d		      sta	PF0	; 4
    224  f2ee		       b9 d1 f3 	      lda	TitleFrameTop+1,y	; 5
    225  f2f1		       85 0e		      sta	PF1	; 4
    226  f2f3		       b9 d2 f3 	      lda	TitleFrameTop+2,y	; 5
    227  f2f6		       85 0f		      sta	PF2	; 4
    228  f2f8
      0  f2f8					      sleep	6
      1  f2f8				   .CYCLES    SET	6
      2  f2f8
      3  f2f8				  -	      IF	.CYCLES < 2
      4  f2f8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2f8				  -	      ERR
      6  f2f8					      ENDIF
      7  f2f8
      8  f2f8				  -	      IF	.CYCLES & 1
      9  f2f8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2f8				  -	      nop	0
     11  f2f8				  -	      ELSE
     12  f2f8				  -	      bit	VSYNC
     13  f2f8				  -	      ENDIF
     14  f2f8				  -.CYCLES    SET	.CYCLES - 3
     15  f2f8					      ENDIF
     16  f2f8
     17  f2f8					      REPEAT	.CYCLES / 2
     18  f2f8		       ea		      nop
     17  f2f8					      REPEND
     18  f2f9		       ea		      nop
     17  f2f9					      REPEND
     18  f2fa		       ea		      nop
     19  f2fb					      REPEND
    230  f2fb
    231  f2fb							; Second half of image
    232  f2fb		       b9 d3 f3 	      lda	TitleFrameTop+3,y	; 5
    233  f2fe		       85 0d		      sta	PF0	; 4
    234  f300		       b9 d4 f3 	      lda	TitleFrameTop+4,y	; 5
    235  f303		       85 0e		      sta	PF1	; 4
    236  f305		       b9 d5 f3 	      lda	TitleFrameTop+5,y	; 5
    237  f308		       85 0f		      sta	PF2	; 4
    238  f30a
    239  f30a				   .title_frame_top_index		; 4 cycles
    240  f30a
    241  f30a		       ca		      dex		; 2
    242  f30b		       d0 da		      bne	.title_frame_top	; 2
    243  f30d
    244  f30d				   .title_frame_top_index_next		; 6 cycles
    245  f30d
    246  f30d							; Restore scanline counter
    247  f30d		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    248  f30f
    249  f30f		       98		      tya		; 2
    250  f310		       18		      clc		; 2
    251  f311		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    252  f313		       a8		      tay		; 2
    253  f314		       c0 2a		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA
    254  f316		       d0 cf		      bne	.title_frame_top	; 2
    255  f318
    256  f318				   .title_frame_top_clean
    257  f318
    258  f318							; Clear out playfield
    259  f318		       a9 00		      lda	#0
    260  f31a		       85 0d		      sta	PF0
    261  f31c		       85 0e		      sta	PF1
    262  f31e		       85 0f		      sta	PF2
    263  f320
    264  f320		       20 c8 f3 	      jsr	TitleGap
    265  f323
    266  f323				   TitleLabelDraw
    267  f323
    268  f323							; Load Label Color
    269  f323		       a9 0e		      lda	#TITLE_LABEL_COLOR
    270  f325		       85 08		      sta	COLUPF
    271  f327
    272  f327							; Start Counters
    273  f327		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    274  f329		       a0 00		      ldy	#0	; Image Counter
    275  f32b
    276  f32b				   .title_label
    277  f32b
    278  f32b							; 76 machine cycles per scanline
    279  f32b		       85 02		      sta	WSYNC
    280  f32d
    281  f32d				   .title_label_load		; 66 cycles
    282  f32d
    283  f32d							; First half of image
    284  f32d		       b9 18 f4 	      lda	TitleLabel,y	; 5
    285  f330		       85 0d		      sta	PF0	; 4
    286  f332		       b9 19 f4 	      lda	TitleLabel+1,y	; 5
    287  f335		       85 0e		      sta	PF1	; 4
    288  f337		       b9 1a f4 	      lda	TitleLabel+2,y	; 5
    289  f33a		       85 0f		      sta	PF2	; 4
    290  f33c
      0  f33c					      sleep	6
      1  f33c				   .CYCLES    SET	6
      2  f33c
      3  f33c				  -	      IF	.CYCLES < 2
      4  f33c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f33c				  -	      ERR
      6  f33c					      ENDIF
      7  f33c
      8  f33c				  -	      IF	.CYCLES & 1
      9  f33c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f33c				  -	      nop	0
     11  f33c				  -	      ELSE
     12  f33c				  -	      bit	VSYNC
     13  f33c				  -	      ENDIF
     14  f33c				  -.CYCLES    SET	.CYCLES - 3
     15  f33c					      ENDIF
     16  f33c
     17  f33c					      REPEAT	.CYCLES / 2
     18  f33c		       ea		      nop
     17  f33c					      REPEND
     18  f33d		       ea		      nop
     17  f33d					      REPEND
     18  f33e		       ea		      nop
     19  f33f					      REPEND
    292  f33f
    293  f33f							; Second half of image
    294  f33f		       b9 1b f4 	      lda	TitleLabel+3,y	; 5
    295  f342		       85 0d		      sta	PF0	; 4
    296  f344		       b9 1c f4 	      lda	TitleLabel+4,y	; 5
    297  f347		       85 0e		      sta	PF1	; 4
    298  f349		       b9 1d f4 	      lda	TitleLabel+5,y	; 5
    299  f34c		       85 0f		      sta	PF2	; 4
    300  f34e
    301  f34e				   .title_label_index		; 4 cycles
    302  f34e
    303  f34e		       ca		      dex		; 2
    304  f34f		       d0 da		      bne	.title_label	; 2
    305  f351
    306  f351				   .title_label_index_next		; 6 cycles
    307  f351
    308  f351							; Restore scanline counter
    309  f351		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    310  f353
    311  f353		       98		      tya		; 2
    312  f354		       18		      clc		; 2
    313  f355		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    314  f357		       a8		      tay		; 2
    315  f358		       c0 24		      cpy	#TITLE_LABEL_LINES*KERNEL_IMAGE_FULL_DATA
    316  f35a		       d0 cf		      bne	.title_label	; 2
    317  f35c
    318  f35c				   .title_label_clean
    319  f35c
    320  f35c							; Clear out playfield
    321  f35c		       a9 00		      lda	#0
    322  f35e		       85 0d		      sta	PF0
    323  f360		       85 0e		      sta	PF1
    324  f362		       85 0f		      sta	PF2
    325  f364
    326  f364		       20 c8 f3 	      jsr	TitleGap
    327  f367
    328  f367				   TitleSpiderDraw
    329  f367		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    330  f369		       a0 09		      ldy	#TITLE_SPIDER_SIZE-1
    331  f36b
    332  f36b		       85 02		      sta	WSYNC
    333  f36d
    334  f36d				   .title_spider
    335  f36d		       b1 9b		      lda	(SpiderPtr),y
    336  f36f		       85 1b		      sta	GRP0
    337  f371		       85 1c		      sta	GRP1
    338  f373
    339  f373				   .title_spider_delay
    340  f373		       ca		      dex
    341  f374		       85 02		      sta	WSYNC
    342  f376		       d0 fb		      bne	.title_spider_delay
    343  f378
    344  f378				   .title_spider_index
    345  f378		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    346  f37a		       88		      dey
    347  f37b		       10 f0		      bpl	.title_spider
    348  f37d
    349  f37d				   .title_spider_clean
    350  f37d
    351  f37d							; Clear sprites
    352  f37d		       a9 00		      lda	#0
    353  f37f		       85 1b		      sta	GRP0
    354  f381		       85 1c		      sta	GRP1
    355  f383
    356  f383		       20 c8 f3 	      jsr	TitleGap
    357  f386
    358  f386				   TitleFrameBottomDraw
    359  f386
    360  f386							; Load Frame Color
    361  f386		       a9 06		      lda	#TITLE_FRAME_COLOR
    362  f388		       85 08		      sta	COLUPF
    363  f38a
    364  f38a							; Start Counters
    365  f38a		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    366  f38c		       a0 00		      ldy	#0	; Image Counter
    367  f38e
    368  f38e				   .title_frame_bottom
    369  f38e
    370  f38e							; 76 machine cycles per scanline
    371  f38e		       85 02		      sta	WSYNC
    372  f390
    373  f390				   .title_frame_bottom_load		; 66 cycles
    374  f390
    375  f390							; First half of image
    376  f390		       b9 fa f3 	      lda	TitleFrameBottom,y	; 5
    377  f393		       85 0d		      sta	PF0	; 4
    378  f395		       b9 fb f3 	      lda	TitleFrameBottom+1,y	; 5
    379  f398		       85 0e		      sta	PF1	; 4
    380  f39a		       b9 fc f3 	      lda	TitleFrameBottom+2,y	; 5
    381  f39d		       85 0f		      sta	PF2	; 4
    382  f39f
      0  f39f					      sleep	6
      1  f39f				   .CYCLES    SET	6
      2  f39f
      3  f39f				  -	      IF	.CYCLES < 2
      4  f39f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f39f				  -	      ERR
      6  f39f					      ENDIF
      7  f39f
      8  f39f				  -	      IF	.CYCLES & 1
      9  f39f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f39f				  -	      nop	0
     11  f39f				  -	      ELSE
     12  f39f				  -	      bit	VSYNC
     13  f39f				  -	      ENDIF
     14  f39f				  -.CYCLES    SET	.CYCLES - 3
     15  f39f					      ENDIF
     16  f39f
     17  f39f					      REPEAT	.CYCLES / 2
     18  f39f		       ea		      nop
     17  f39f					      REPEND
     18  f3a0		       ea		      nop
     17  f3a0					      REPEND
     18  f3a1		       ea		      nop
     19  f3a2					      REPEND
    384  f3a2
    385  f3a2							; Second half of image
    386  f3a2		       b9 fd f3 	      lda	TitleFrameBottom+3,y	; 5
    387  f3a5		       85 0d		      sta	PF0	; 4
    388  f3a7		       b9 fe f3 	      lda	TitleFrameBottom+4,y	; 5
    389  f3aa		       85 0e		      sta	PF1	; 4
    390  f3ac		       b9 ff f3 	      lda	TitleFrameBottom+5,y	; 5
    391  f3af		       85 0f		      sta	PF2	; 4
    392  f3b1
    393  f3b1				   .title_frame_bottom_index		; 4 cycles
    394  f3b1
    395  f3b1		       ca		      dex		; 2
    396  f3b2		       d0 da		      bne	.title_frame_bottom	; 2
    397  f3b4
    398  f3b4				   .title_frame_bottom_index_next		; 6 cycles
    399  f3b4
    400  f3b4							; Restore scanline counter
    401  f3b4		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    402  f3b6
    403  f3b6		       98		      tya		; 2
    404  f3b7		       18		      clc		; 2
    405  f3b8		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    406  f3ba		       a8		      tay		; 2
    407  f3bb		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    408  f3bd		       d0 cf		      bne	.title_frame_bottom	; 2
    409  f3bf
    410  f3bf				   .title_frame_bottom_clean
    411  f3bf
    412  f3bf							; Clear out playfield
    413  f3bf		       a9 00		      lda	#0
    414  f3c1		       85 0d		      sta	PF0
    415  f3c3		       85 0e		      sta	PF1
    416  f3c5		       85 0f		      sta	PF2
    417  f3c7
    418  f3c7				   .title_kernel_return
    419  f3c7		       60		      rts
    420  f3c8
    421  f3c8				   TitleGap
    422  f3c8		       a2 01		      ldx	#TITLE_GAP_SIZE
    423  f3ca
    424  f3ca				   .title_gap
    425  f3ca		       ca		      dex
    426  f3cb		       85 02		      sta	WSYNC
    427  f3cd		       d0 fb		      bne	.title_gap
    428  f3cf
    429  f3cf		       60		      rts
    430  f3d0
    431  f3d0				   TitleAssets
    432  f3d0
    433  f3d0							; Assets
------- FILE title_frame_top.asm LEVEL 3 PASS 2
      0  f3d0					      include	"title_frame_top.asm"
      1  f3d0				   TitleFrameTop
      2  f3d0
      3  f3d0		       a0		      .BYTE.b	%10100000
      4  f3d1		       54		      .BYTE.b	%01010100
      5  f3d2		       01		      .BYTE.b	%00000001
      6  f3d3		       00		      .BYTE.b	%00000000
      7  f3d4		       03		      .BYTE.b	%00000011
      8  f3d5		       2c		      .BYTE.b	%00101100
      9  f3d6
     10  f3d6		       d0		      .BYTE.b	%11010000
     11  f3d7		       23		      .BYTE.b	%00100011
     12  f3d8		       00		      .BYTE.b	%00000000
     13  f3d9		       00		      .BYTE.b	%00000000
     14  f3da		       00		      .BYTE.b	%00000000
     15  f3db		       51		      .BYTE.b	%01010001
     16  f3dc
     17  f3dc		       60		      .BYTE.b	%01100000
     18  f3dd		       dc		      .BYTE.b	%11011100
     19  f3de		       00		      .BYTE.b	%00000000
     20  f3df		       00		      .BYTE.b	%00000000
     21  f3e0		       00		      .BYTE.b	%00000000
     22  f3e1		       8e		      .BYTE.b	%10001110
     23  f3e2
     24  f3e2		       b0		      .BYTE.b	%10110000
     25  f3e3		       00		      .BYTE.b	%00000000
     26  f3e4		       00		      .BYTE.b	%00000000
     27  f3e5		       00		      .BYTE.b	%00000000
     28  f3e6		       00		      .BYTE.b	%00000000
     29  f3e7		       51		      .BYTE.b	%01010001
     30  f3e8
     31  f3e8		       40		      .BYTE.b	%01000000
     32  f3e9		       80		      .BYTE.b	%10000000
     33  f3ea		       00		      .BYTE.b	%00000000
     34  f3eb		       00		      .BYTE.b	%00000000
     35  f3ec		       00		      .BYTE.b	%00000000
     36  f3ed		       ad		      .BYTE.b	%10101101
     37  f3ee
     38  f3ee		       50		      .BYTE.b	%01010000
     39  f3ef		       00		      .BYTE.b	%00000000
     40  f3f0		       00		      .BYTE.b	%00000000
     41  f3f1		       00		      .BYTE.b	%00000000
     42  f3f2		       01		      .BYTE.b	%00000001
     43  f3f3		       82		      .BYTE.b	%10000010
     44  f3f4
     45  f3f4		       20		      .BYTE.b	%00100000
     46  f3f5		       00		      .BYTE.b	%00000000
     47  f3f6		       00		      .BYTE.b	%00000000
     48  f3f7		       00		      .BYTE.b	%00000000
     49  f3f8		       02		      .BYTE.b	%00000010
     50  f3f9		       00		      .BYTE.b	%00000000
------- FILE title.asm
------- FILE title_frame_bottom.asm LEVEL 3 PASS 2
      0  f3fa					      include	"title_frame_bottom.asm"
      1  f3fa				   TitleFrameBottom
      2  f3fa
      3  f3fa		       20		      .BYTE.b	%00100000
      4  f3fb		       00		      .BYTE.b	%00000000
      5  f3fc		       00		      .BYTE.b	%00000000
      6  f3fd		       00		      .BYTE.b	%00000000
      7  f3fe		       00		      .BYTE.b	%00000000
      8  f3ff		       64		      .BYTE.b	%01100100
      9  f400
     10  f400		       50		      .BYTE.b	%01010000
     11  f401		       00		      .BYTE.b	%00000000
     12  f402		       00		      .BYTE.b	%00000000
     13  f403		       00		      .BYTE.b	%00000000
     14  f404		       00		      .BYTE.b	%00000000
     15  f405		       98		      .BYTE.b	%10011000
     16  f406
     17  f406		       90		      .BYTE.b	%10010000
     18  f407		       80		      .BYTE.b	%10000000
     19  f408		       00		      .BYTE.b	%00000000
     20  f409		       00		      .BYTE.b	%00000000
     21  f40a		       00		      .BYTE.b	%00000000
     22  f40b		       28		      .BYTE.b	%00101000
     23  f40c
     24  f40c		       60		      .BYTE.b	%01100000
     25  f40d		       60		      .BYTE.b	%01100000
     26  f40e		       00		      .BYTE.b	%00000000
     27  f40f		       00		      .BYTE.b	%00000000
     28  f410		       00		      .BYTE.b	%00000000
     29  f411		       44		      .BYTE.b	%01000100
     30  f412
     31  f412		       d0		      .BYTE.b	%11010000
     32  f413		       1c		      .BYTE.b	%00011100
     33  f414		       00		      .BYTE.b	%00000000
     34  f415		       00		      .BYTE.b	%00000000
     35  f416		       00		      .BYTE.b	%00000000
     36  f417		       ab		      .BYTE.b	%10101011
------- FILE title.asm
------- FILE title_label.asm LEVEL 3 PASS 2
      0  f418					      include	"title_label.asm"
      1  f418				   TitleLabel
      2  f418
      3  f418		       c0		      .BYTE.b	%11000000
      4  f419		       77		      .BYTE.b	%01110111
      5  f41a		       66		      .BYTE.b	%01100110
      6  f41b		       30		      .BYTE.b	%00110000
      7  f41c		       22		      .BYTE.b	%00100010
      8  f41d		       1b		      .BYTE.b	%00011011
      9  f41e
     10  f41e		       40		      .BYTE.b	%01000000
     11  f41f		       52		      .BYTE.b	%01010010
     12  f420		       2a		      .BYTE.b	%00101010
     13  f421		       50		      .BYTE.b	%01010000
     14  f422		       22		      .BYTE.b	%00100010
     15  f423		       29		      .BYTE.b	%00101001
     16  f424
     17  f424		       40		      .BYTE.b	%01000000
     18  f425		       72		      .BYTE.b	%01110010
     19  f426		       6a		      .BYTE.b	%01101010
     20  f427		       50		      .BYTE.b	%01010000
     21  f428		       22		      .BYTE.b	%00100010
     22  f429		       1b		      .BYTE.b	%00011011
     23  f42a
     24  f42a		       c0		      .BYTE.b	%11000000
     25  f42b		       42		      .BYTE.b	%01000010
     26  f42c		       2a		      .BYTE.b	%00101010
     27  f42d		       30		      .BYTE.b	%00110000
     28  f42e		       22		      .BYTE.b	%00100010
     29  f42f		       29		      .BYTE.b	%00101001
     30  f430
     31  f430		       80		      .BYTE.b	%10000000
     32  f431		       42		      .BYTE.b	%01000010
     33  f432		       2a		      .BYTE.b	%00101010
     34  f433		       50		      .BYTE.b	%01010000
     35  f434		       2a		      .BYTE.b	%00101010
     36  f435		       29		      .BYTE.b	%00101001
     37  f436
     38  f436		       c0		      .BYTE.b	%11000000
     39  f437		       47		      .BYTE.b	%01000111
     40  f438		       66		      .BYTE.b	%01100110
     41  f439		       50		      .BYTE.b	%01010000
     42  f43a		       14		      .BYTE.b	%00010100
     43  f43b		       1b		      .BYTE.b	%00011011
------- FILE title.asm
------- FILE title_spider.asm LEVEL 3 PASS 2
      0  f43c					      include	"title_spider.asm"
      1  f43c				   TitleSpider
      2  f43c
      3  f43c		       30		      .BYTE.b	%00110000
      4  f43d		       67		      .BYTE.b	%01100111
      5  f43e		       48		      .BYTE.b	%01001000
      6  f43f		       d2		      .BYTE.b	%11010010
      7  f440		       d7		      .BYTE.b	%11010111
      8  f441		       d0		      .BYTE.b	%11010000
      9  f442		       4a		      .BYTE.b	%01001010
     10  f443		       6c		      .BYTE.b	%01101100
     11  f444		       3b		      .BYTE.b	%00111011
     12  f445		       10		      .BYTE.b	%00010000
     13  f446
     14  f446		       67		      .BYTE.b	%01100111
     15  f447		       4a		      .BYTE.b	%01001010
     16  f448		       d7		      .BYTE.b	%11010111
     17  f449		       d0		      .BYTE.b	%11010000
     18  f44a		       ca		      .BYTE.b	%11001010
     19  f44b		       6c		      .BYTE.b	%01101100
     20  f44c		       3b		      .BYTE.b	%00111011
     21  f44d		       10		      .BYTE.b	%00010000
     22  f44e		       00		      .BYTE.b	%00000000
     23  f44f		       00		      .BYTE.b	%00000000
------- FILE title.asm
    438  f450
    439  f450				   TitleAudio0
    440  f450
    441  f450		       0f		      .BYTE.b	#15	; B
    442  f451		       13		      .BYTE.b	#19	; G
    443  f452		       17		      .BYTE.b	#23	; E
    444  f453		       13		      .BYTE.b	#19	; G
    445  f454		       0e		      .BYTE.b	#14	; C
    446  f455		       13		      .BYTE.b	#19
    447  f456		       17		      .BYTE.b	#23
    448  f457		       13		      .BYTE.b	#19
    449  f458		       0c		      .BYTE.b	#12	; D
    450  f459		       13		      .BYTE.b	#19
    451  f45a		       17		      .BYTE.b	#23
    452  f45b		       13		      .BYTE.b	#19
    453  f45c		       0e		      .BYTE.b	#14	; C
    454  f45d		       13		      .BYTE.b	#19
    455  f45e		       17		      .BYTE.b	#23
    456  f45f		       13		      .BYTE.b	#19
    457  f460
    458  f460				   TitleTone1
    459  f460
    460  f460		       0f		      .BYTE.b	#15	; Electronic Rumble
    461  f461		       ff		      .BYTE.b	#$FF
    462  f462		       01		      .BYTE.b	#1	; Low Pure Tone
    463  f463		       01		      .BYTE.b	#1
    464  f464		       08		      .BYTE.b	#8	; White Noise
    465  f465		       01		      .BYTE.b	#1
    466  f466		       01		      .BYTE.b	#1
    467  f467		       ff		      .BYTE.b	#$FF
    468  f468		       ff		      .BYTE.b	#$FF
    469  f469		       0f		      .BYTE.b	#15
    470  f46a		       ff		      .BYTE.b	#$FF
    471  f46b		       ff		      .BYTE.b	#$FF
    472  f46c		       08		      .BYTE.b	#8
    473  f46d		       ff		      .BYTE.b	#$FF
    474  f46e		       01		      .BYTE.b	#1
    475  f46f		       01		      .BYTE.b	#1
    476  f470
    477  f470				   TitleAudio1
    478  f470
    479  f470		       1d		      .BYTE.b	#29	; Kick
    480  f471		       ff		      .BYTE.b	#$FF
    481  f472		       1f		      .BYTE.b	#31	; C
    482  f473		       1f		      .BYTE.b	#31
    483  f474		       07		      .BYTE.b	#7	; Snare
    484  f475		       1f		      .BYTE.b	#31
    485  f476		       1f		      .BYTE.b	#31
    486  f477		       ff		      .BYTE.b	#$FF
    487  f478		       ff		      .BYTE.b	#$FF
    488  f479		       1d		      .BYTE.b	#29
    489  f47a		       ff		      .BYTE.b	#$FF
    490  f47b		       ff		      .BYTE.b	#$FF
    491  f47c		       07		      .BYTE.b	#7
    492  f47d		       ff		      .BYTE.b	#$FF
    493  f47e		       17		      .BYTE.b	#23	; F
    494  f47f		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f480					      include	"game.asm"
      1  f480							;================
      2  f480							; Game
      3  f480							;================
      4  f480
      5  f480							; Constants
      6  f480
      7  f480		       00 04	   GAME_AUDIO_VOLUME =	4
      8  f480		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f480		       00 09	   GAME_AUDIO_STEP =	9
     10  f480		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f480		       00 06	   GAME_AUDIO_TONE =	6
     12  f480
     13  f480							; Object Code
     14  f480
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f480					      include	"objects/score.asm"
      1  f480							;======================
      2  f480							; Score (playfield)
      3  f480							;======================
      4  f480
      5  f480							; Constants
      6  f480
      7  f480		       00 00	   SCORE_BG_COLOR =	#$00
      8  f480		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f480		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f480
     11  f480		       00 05	   SCORE_CHAR_SIZE =	5
     12  f480		       00 02	   SCORE_LINE_SIZE =	2
     13  f480		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f480
     15  f480							; Initialization
     16  f480
     17  f480				   ScoreInit
     18  f480
     19  f480							; Health Score
     20  f480		       a9 ff		      lda	#$FF
     21  f482		       85 91		      sta	ScoreValue+0
     22  f484
     23  f484							; Game Score
     24  f484		       a9 00		      lda	#0
     25  f486		       85 92		      sta	ScoreValue+1
     26  f488
     27  f488		       60		      rts
     28  f489
     29  f489							; Frame Update
     30  f489
     31  f489				   ScoreUpdate
     32  f489
     33  f489		       a2 01		      ldx	#1
     34  f48b				   .score_update_loop
     35  f48b
     36  f48b							; Ones Digit
     37  f48b		       b5 91		      lda	ScoreValue,x
     38  f48d		       29 0f		      and	#$0f
     39  f48f		       85 83		      sta	Temp
     40  f491		       0a		      asl
     41  f492		       0a		      asl
     42  f493		       65 83		      adc	Temp
     43  f495		       95 93		      sta	ScoreDigitOnes,x
     44  f497
     45  f497							; Tens Digit
     46  f497		       b5 91		      lda	ScoreValue,x
     47  f499		       29 f0		      and	#$f0
     48  f49b		       4a		      lsr
     49  f49c		       4a		      lsr
     50  f49d		       85 83		      sta	Temp
     51  f49f		       4a		      lsr
     52  f4a0		       4a		      lsr
     53  f4a1		       65 83		      adc	Temp
     54  f4a3		       95 95		      sta	ScoreDigitTens,x
     55  f4a5
     56  f4a5		       ca		      dex
     57  f4a6		       10 e3		      bpl	.score_update_loop
     58  f4a8
     59  f4a8				   .score_update_end
     60  f4a8		       60		      rts
     61  f4a9
     62  f4a9							; Draw loop (uses SCORE_LINES scanlines)
     63  f4a9
     64  f4a9				   ScoreDraw
     65  f4a9
     66  f4a9							; Load Colors
     67  f4a9		       a9 00		      lda	#SCORE_BG_COLOR
     68  f4ab		       85 09		      sta	COLUBK
     69  f4ad		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f4af		       85 08		      sta	COLUPF
     71  f4b1		       85 06		      sta	COLUP0
     72  f4b3		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f4b5		       85 07		      sta	COLUP1
     74  f4b7
     75  f4b7							; Set Non-Mirror and p0/p1 color
     76  f4b7		       a5 80		      lda	CtrlPf
     77  f4b9		       29 fc		      and	#%11111100
     78  f4bb		       09 02		      ora	#%00000010
     79  f4bd		       85 80		      sta	CtrlPf
     80  f4bf		       85 0a		      sta	CTRLPF
     81  f4c1
     82  f4c1							;sta WSYNC
     83  f4c1
     84  f4c1		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f4c3
     86  f4c3				   .score_draw_line
     87  f4c3
     88  f4c3							; 1st Value
     89  f4c3		       a4 95		      ldy	ScoreDigitTens
     90  f4c5		       b9 19 f5 	      lda	ScoreDigits,y
     91  f4c8		       29 f0		      and	#$f0
     92  f4ca		       85 97		      sta	ScoreGfx
     93  f4cc		       a4 93		      ldy	ScoreDigitOnes
     94  f4ce		       b9 19 f5 	      lda	ScoreDigits,y
     95  f4d1		       29 0f		      and	#$0f
     96  f4d3		       05 97		      ora	ScoreGfx
     97  f4d5		       85 97		      sta	ScoreGfx
     98  f4d7
     99  f4d7		       85 02		      sta	WSYNC
    100  f4d9		       85 0e		      sta	PF1
    101  f4db
    102  f4db							; 2nd Value
    103  f4db		       a4 96		      ldy	ScoreDigitTens+1
    104  f4dd		       b9 19 f5 	      lda	ScoreDigits,y
    105  f4e0		       29 f0		      and	#$f0
    106  f4e2		       85 98		      sta	ScoreGfx+1
    107  f4e4		       a4 94		      ldy	ScoreDigitOnes+1
    108  f4e6		       b9 19 f5 	      lda	ScoreDigits,y
    109  f4e9		       29 0f		      and	#$0f
    110  f4eb		       05 98		      ora	ScoreGfx+1
    111  f4ed		       85 98		      sta	ScoreGfx+1
    112  f4ef
      0  f4ef					      sleep	12
      1  f4ef				   .CYCLES    SET	12
      2  f4ef
      3  f4ef				  -	      IF	.CYCLES < 2
      4  f4ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4ef				  -	      ERR
      6  f4ef					      ENDIF
      7  f4ef
      8  f4ef				  -	      IF	.CYCLES & 1
      9  f4ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4ef				  -	      nop	0
     11  f4ef				  -	      ELSE
     12  f4ef				  -	      bit	VSYNC
     13  f4ef				  -	      ENDIF
     14  f4ef				  -.CYCLES    SET	.CYCLES - 3
     15  f4ef					      ENDIF
     16  f4ef
     17  f4ef					      REPEAT	.CYCLES / 2
     18  f4ef		       ea		      nop
     17  f4ef					      REPEND
     18  f4f0		       ea		      nop
     17  f4f0					      REPEND
     18  f4f1		       ea		      nop
     17  f4f1					      REPEND
     18  f4f2		       ea		      nop
     17  f4f2					      REPEND
     18  f4f3		       ea		      nop
     17  f4f3					      REPEND
     18  f4f4		       ea		      nop
     19  f4f5					      REPEND
    114  f4f5		       85 0e		      sta	PF1
    115  f4f7
    116  f4f7		       a4 97		      ldy	ScoreGfx
    117  f4f9		       85 02		      sta	WSYNC
    118  f4fb
    119  f4fb		       84 0e		      sty	PF1
    120  f4fd
    121  f4fd		       e6 93		      inc	ScoreDigitOnes
    122  f4ff		       e6 94		      inc	ScoreDigitOnes+1
    123  f501		       e6 95		      inc	ScoreDigitTens
    124  f503		       e6 96		      inc	ScoreDigitTens+1
    125  f505
      0  f505					      sleep	12
      1  f505				   .CYCLES    SET	12
      2  f505
      3  f505				  -	      IF	.CYCLES < 2
      4  f505				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f505				  -	      ERR
      6  f505					      ENDIF
      7  f505
      8  f505				  -	      IF	.CYCLES & 1
      9  f505				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f505				  -	      nop	0
     11  f505				  -	      ELSE
     12  f505				  -	      bit	VSYNC
     13  f505				  -	      ENDIF
     14  f505				  -.CYCLES    SET	.CYCLES - 3
     15  f505					      ENDIF
     16  f505
     17  f505					      REPEAT	.CYCLES / 2
     18  f505		       ea		      nop
     17  f505					      REPEND
     18  f506		       ea		      nop
     17  f506					      REPEND
     18  f507		       ea		      nop
     17  f507					      REPEND
     18  f508		       ea		      nop
     17  f508					      REPEND
     18  f509		       ea		      nop
     17  f509					      REPEND
     18  f50a		       ea		      nop
     19  f50b					      REPEND
    127  f50b		       ca		      dex
    128  f50c		       85 0e		      sta	PF1
    129  f50e
    130  f50e		       d0 b3		      bne	.score_draw_line
    131  f510		       85 02		      sta	WSYNC
    132  f512
    133  f512							; Clear
    134  f512		       a9 00		      lda	#0
    135  f514		       85 0e		      sta	PF1
    136  f516
    137  f516		       85 02		      sta	WSYNC
    138  f518
    139  f518		       60		      rts
    140  f519
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f519					      include	"objects/score_digits.asm"
      1  f519				   ScoreDigits
      2  f519
      3  f519		       77		      .BYTE.b	%01110111
      4  f51a		       55		      .BYTE.b	%01010101
      5  f51b		       55		      .BYTE.b	%01010101
      6  f51c		       55		      .BYTE.b	%01010101
      7  f51d		       77		      .BYTE.b	%01110111
      8  f51e
      9  f51e		       11		      .BYTE.b	%00010001
     10  f51f		       11		      .BYTE.b	%00010001
     11  f520		       11		      .BYTE.b	%00010001
     12  f521		       11		      .BYTE.b	%00010001
     13  f522		       11		      .BYTE.b	%00010001
     14  f523
     15  f523		       77		      .BYTE.b	%01110111
     16  f524		       11		      .BYTE.b	%00010001
     17  f525		       77		      .BYTE.b	%01110111
     18  f526		       44		      .BYTE.b	%01000100
     19  f527		       77		      .BYTE.b	%01110111
     20  f528
     21  f528		       77		      .BYTE.b	%01110111
     22  f529		       11		      .BYTE.b	%00010001
     23  f52a		       33		      .BYTE.b	%00110011
     24  f52b		       11		      .BYTE.b	%00010001
     25  f52c		       77		      .BYTE.b	%01110111
     26  f52d
     27  f52d		       55		      .BYTE.b	%01010101
     28  f52e		       55		      .BYTE.b	%01010101
     29  f52f		       77		      .BYTE.b	%01110111
     30  f530		       11		      .BYTE.b	%00010001
     31  f531		       11		      .BYTE.b	%00010001
     32  f532
     33  f532		       77		      .BYTE.b	%01110111
     34  f533		       44		      .BYTE.b	%01000100
     35  f534		       77		      .BYTE.b	%01110111
     36  f535		       11		      .BYTE.b	%00010001
     37  f536		       77		      .BYTE.b	%01110111
     38  f537
     39  f537		       77		      .BYTE.b	%01110111
     40  f538		       44		      .BYTE.b	%01000100
     41  f539		       77		      .BYTE.b	%01110111
     42  f53a		       55		      .BYTE.b	%01010101
     43  f53b		       77		      .BYTE.b	%01110111
     44  f53c
     45  f53c		       77		      .BYTE.b	%01110111
     46  f53d		       11		      .BYTE.b	%00010001
     47  f53e		       22		      .BYTE.b	%00100010
     48  f53f		       22		      .BYTE.b	%00100010
     49  f540		       22		      .BYTE.b	%00100010
     50  f541
     51  f541		       77		      .BYTE.b	%01110111
     52  f542		       55		      .BYTE.b	%01010101
     53  f543		       77		      .BYTE.b	%01110111
     54  f544		       55		      .BYTE.b	%01010101
     55  f545		       77		      .BYTE.b	%01110111
     56  f546
     57  f546		       77		      .BYTE.b	%01110111
     58  f547		       55		      .BYTE.b	%01010101
     59  f548		       77		      .BYTE.b	%01110111
     60  f549		       11		      .BYTE.b	%00010001
     61  f54a		       11		      .BYTE.b	%00010001
     62  f54b
     63  f54b		       77		      .BYTE.b	%01110111
     64  f54c		       55		      .BYTE.b	%01010101
     65  f54d		       77		      .BYTE.b	%01110111
     66  f54e		       55		      .BYTE.b	%01010101
     67  f54f		       55		      .BYTE.b	%01010101
     68  f550
     69  f550		       66		      .BYTE.b	%01100110
     70  f551		       55		      .BYTE.b	%01010101
     71  f552		       66		      .BYTE.b	%01100110
     72  f553		       55		      .BYTE.b	%01010101
     73  f554		       66		      .BYTE.b	%01100110
     74  f555
     75  f555		       77		      .BYTE.b	%01110111
     76  f556		       44		      .BYTE.b	%01000100
     77  f557		       44		      .BYTE.b	%01000100
     78  f558		       44		      .BYTE.b	%01000100
     79  f559		       77		      .BYTE.b	%01110111
     80  f55a
     81  f55a		       66		      .BYTE.b	%01100110
     82  f55b		       55		      .BYTE.b	%01010101
     83  f55c		       55		      .BYTE.b	%01010101
     84  f55d		       55		      .BYTE.b	%01010101
     85  f55e		       66		      .BYTE.b	%01100110
     86  f55f
     87  f55f		       77		      .BYTE.b	%01110111
     88  f560		       44		      .BYTE.b	%01000100
     89  f561		       66		      .BYTE.b	%01100110
     90  f562		       44		      .BYTE.b	%01000100
     91  f563		       77		      .BYTE.b	%01110111
     92  f564
     93  f564		       77		      .BYTE.b	%01110111
     94  f565		       44		      .BYTE.b	%01000100
     95  f566		       66		      .BYTE.b	%01100110
     96  f567		       44		      .BYTE.b	%01000100
     97  f568		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f569					      include	"objects/web.asm"
      1  f569							;================
      2  f569							; Web (Playfield)
      3  f569							;================
      4  f569
      5  f569							; Constants
      6  f569
      7  f569		       00 00	   WEB_BG_COLOR =	#$00
      8  f569		       00 06	   WEB_FG_COLOR =	#$06
      9  f569
     10  f569		       00 1e	   WEB_SIZE   =	30
     11  f569		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f569		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f569
     14  f569							; Scanline Draw
     15  f569
     16  f569				   WebDrawStart
     17  f569
     18  f569							; Load Colors
     19  f569		       a9 00		      lda	#WEB_BG_COLOR
     20  f56b		       85 09		      sta	COLUBK
     21  f56d		       a9 06		      lda	#WEB_FG_COLOR
     22  f56f		       85 08		      sta	COLUPF
     23  f571
     24  f571							; Mirror playfield and use standard playfield color
     25  f571		       a5 80		      lda	CtrlPf
     26  f573		       29 fc		      and	#%11111100
     27  f575		       09 01		      ora	#%00000001
     28  f577		       85 80		      sta	CtrlPf
     29  f579		       85 0a		      sta	CTRLPF
     30  f57b
     31  f57b							; Initialize image index
     32  f57b		       a9 00		      lda	#0
     33  f57d		       85 99		      sta	WebIndex
     34  f57f		       a9 01		      lda	#1
     35  f581		       85 9a		      sta	WebDir
     36  f583
     37  f583		       60		      rts
     38  f584
     39  f584				   WebDraw
     40  f584
     41  f584		       a4 99		      ldy	WebIndex
     42  f586
     43  f586							; Draw Image
     44  f586		       b9 af f5 	      lda	WebImagePF0,y
     45  f589		       85 0d		      sta	PF0
     46  f58b		       b9 be f5 	      lda	WebImagePF1,y
     47  f58e		       85 0e		      sta	PF1
     48  f590		       b9 cd f5 	      lda	WebImagePF2,y
     49  f593		       85 0f		      sta	PF2
     50  f595
     51  f595							; Increment image index
     52  f595		       18		      clc
     53  f596		       98		      tya
     54  f597		       65 9a		      adc	WebDir
     55  f599		       85 99		      sta	WebIndex
     56  f59b
     57  f59b		       c9 0f		      cmp	#WEB_SIZE/2
     58  f59d		       d0 06		      bne	.web_draw_return
     59  f59f
     60  f59f		       a9 ff		      lda	#-1
     61  f5a1		       85 9a		      sta	WebDir
     62  f5a3
     63  f5a3		       c6 99		      dec	WebIndex
     64  f5a5
     65  f5a5				   .web_draw_return
     66  f5a5		       60		      rts
     67  f5a6
     68  f5a6				   WebClean
     69  f5a6
     70  f5a6							; Clear out playfield
     71  f5a6		       a9 00		      lda	#0
     72  f5a8		       85 0d		      sta	PF0
     73  f5aa		       85 0e		      sta	PF1
     74  f5ac		       85 0f		      sta	PF2
     75  f5ae
     76  f5ae		       60		      rts
     77  f5af
     78  f5af							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f5af					      include	"objects/web_image.asm"
      1  f5af				   WebImagePF0
      2  f5af		       00		      .BYTE.b	%00000000
      3  f5b0		       00		      .BYTE.b	%00000000
      4  f5b1		       00		      .BYTE.b	%00000000
      5  f5b2		       00		      .BYTE.b	%00000000
      6  f5b3		       00		      .BYTE.b	%00000000
      7  f5b4		       00		      .BYTE.b	%00000000
      8  f5b5		       00		      .BYTE.b	%00000000
      9  f5b6		       00		      .BYTE.b	%00000000
     10  f5b7		       00		      .BYTE.b	%00000000
     11  f5b8		       30		      .BYTE.b	%00110000
     12  f5b9		       e0		      .BYTE.b	%11100000
     13  f5ba		       20		      .BYTE.b	%00100000
     14  f5bb		       40		      .BYTE.b	%01000000
     15  f5bc		       40		      .BYTE.b	%01000000
     16  f5bd		       80		      .BYTE.b	%10000000
     17  f5be
     18  f5be				   WebImagePF1
     19  f5be		       08		      .BYTE.b	%00001000
     20  f5bf		       06		      .BYTE.b	%00000110
     21  f5c0		       01		      .BYTE.b	%00000001
     22  f5c1		       00		      .BYTE.b	%00000000
     23  f5c2		       00		      .BYTE.b	%00000000
     24  f5c3		       01		      .BYTE.b	%00000001
     25  f5c4		       01		      .BYTE.b	%00000001
     26  f5c5		       02		      .BYTE.b	%00000010
     27  f5c6		       0c		      .BYTE.b	%00001100
     28  f5c7		       30		      .BYTE.b	%00110000
     29  f5c8		       c0		      .BYTE.b	%11000000
     30  f5c9		       38		      .BYTE.b	%00111000
     31  f5ca		       07		      .BYTE.b	%00000111
     32  f5cb		       00		      .BYTE.b	%00000000
     33  f5cc		       00		      .BYTE.b	%00000000
     34  f5cd
     35  f5cd				   WebImagePF2
     36  f5cd		       20		      .BYTE.b	%00100000
     37  f5ce		       18		      .BYTE.b	%00011000
     38  f5cf		       04		      .BYTE.b	%00000100
     39  f5d0		       03		      .BYTE.b	%00000011
     40  f5d1		       3f		      .BYTE.b	%00111111
     41  f5d2		       c2		      .BYTE.b	%11000010
     42  f5d3		       04		      .BYTE.b	%00000100
     43  f5d4		       08		      .BYTE.b	%00001000
     44  f5d5		       08		      .BYTE.b	%00001000
     45  f5d6		       10		      .BYTE.b	%00010000
     46  f5d7		       20		      .BYTE.b	%00100000
     47  f5d8		       20		      .BYTE.b	%00100000
     48  f5d9		       41		      .BYTE.b	%01000001
     49  f5da		       8e		      .BYTE.b	%10001110
     50  f5db		       f0		      .BYTE.b	%11110000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f5dc					      include	"objects/spider.asm"
      1  f5dc							;=================
      2  f5dc							; Spider (player0)
      3  f5dc							;=================
      4  f5dc
      5  f5dc							; Constants
      6  f5dc
      7  f5dc		       00 56	   SPIDER_COLOR =	#$56
      8  f5dc		       00 10	   SPIDER_SIZE =	16
      9  f5dc		       00 08	   SPIDER_SPRITE_SIZE =	8
     10  f5dc		       00 02	   SPIDER_VEL_X =	2
     11  f5dc		       00 02	   SPIDER_VEL_Y =	2
     12  f5dc
     13  f5dc		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f5dc
     15  f5dc							; Initialization
     16  f5dc
     17  f5dc				   SpiderInit
     18  f5dc
     19  f5dc							; Initialize Position in center of screen
     20  f5dc		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f5de		       85 9d		      sta	SpiderPos
     22  f5e0		       a9 48		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f5e2		       85 9e		      sta	SpiderPos+1
     24  f5e4
     25  f5e4							; Setup Sprite
      0  f5e4					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f5e4				   .POINTER   SET	SpiderPtr
      2  f5e4				   .ADDRESS   SET	SpiderSprite
      3  f5e4
      4  f5e4		       a9 5a		      LDA	#<.ADDRESS
      5  f5e6		       85 9b		      STA	.POINTER
      6  f5e8		       a9 f7		      LDA	#>.ADDRESS
      7  f5ea		       85 9c		      STA	.POINTER+1
      8  f5ec
     27  f5ec
     28  f5ec							;    lda #SPIDER_COLOR
     29  f5ec							;    sta SpiderColor
     30  f5ec
     31  f5ec		       60		      rts
     32  f5ed
     33  f5ed							; Frame Update
     34  f5ed
     35  f5ed				   SpiderUpdate
     36  f5ed		       20 f4 f5 	      jsr	SpiderControl
     37  f5f0		       20 da f6 	      jsr	SpiderCollision
     38  f5f3		       60		      rts
     39  f5f4
     40  f5f4				   SpiderControl
     41  f5f4
     42  f5f4							; Control Position
     43  f5f4		       a6 9d		      ldx	SpiderPos
     44  f5f6		       a4 9e		      ldy	SpiderPos+1
     45  f5f8		       ad 80 02 	      lda	SWCHA
     46  f5fb
     47  f5fb				   .spider_control_check_right
     48  f5fb		       30 02		      bmi	.spider_control_check_left
     49  f5fd
     50  f5fd					      REPEAT	#SPIDER_VEL_X
     51  f5fd		       e8		      inx
     50  f5fd					      REPEND
     51  f5fe		       e8		      inx
     52  f5ff					      REPEND
     53  f5ff
     54  f5ff				   .spider_control_check_left
     55  f5ff		       2a		      rol
     56  f600		       30 02		      bmi	.spider_control_check_down
     57  f602
     58  f602					      REPEAT	#SPIDER_VEL_X
     59  f602		       ca		      dex
     58  f602					      REPEND
     59  f603		       ca		      dex
     60  f604					      REPEND
     61  f604
     62  f604				   .spider_control_check_down
     63  f604		       2a		      rol
     64  f605		       30 02		      bmi	.spider_control_check_up
     65  f607
     66  f607					      REPEAT	#SPIDER_VEL_Y
     67  f607		       88		      dey
     66  f607					      REPEND
     67  f608		       88		      dey
     68  f609					      REPEND
     69  f609
     70  f609				   .spider_control_check_up
     71  f609		       2a		      rol
     72  f60a		       30 02		      bmi	.spider_control_sprite
     73  f60c
     74  f60c					      REPEAT	#SPIDER_VEL_Y
     75  f60c		       c8		      iny
     74  f60c					      REPEND
     75  f60d		       c8		      iny
     76  f60e					      REPEND
     77  f60e
     78  f60e				   .spider_control_sprite
     79  f60e							; Control Sprite
     80  f60e		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f610
     82  f610				   .spider_control_sprite_x
     83  f610		       e4 9d		      cpx	SpiderPos
     84  f612		       90 04		      bcc	.spider_control_sprite_left
     85  f614		       f0 09		      beq	.spider_control_sprite_y
     86  f616		       b0 05		      bcs	.spider_control_sprite_right
     87  f618
     88  f618				   .spider_control_sprite_left
     89  f618		       09 80		      ora	#%10000000
     90  f61a		       4c 1f f6 	      jmp	.spider_control_sprite_y
     91  f61d
     92  f61d				   .spider_control_sprite_right
     93  f61d		       09 40		      ora	#%01000000
     94  f61f
     95  f61f				   .spider_control_sprite_y
     96  f61f		       c4 9e		      cpy	SpiderPos+1
     97  f621		       90 04		      bcc	.spider_control_sprite_down
     98  f623		       f0 09		      beq	.spider_control_sprite_store
     99  f625		       b0 05		      bcs	.spider_control_sprite_up
    100  f627
    101  f627				   .spider_control_sprite_down
    102  f627		       09 10		      ora	#%00010000
    103  f629		       4c 2e f6 	      jmp	.spider_control_sprite_store
    104  f62c
    105  f62c				   .spider_control_sprite_up
    106  f62c		       09 20		      ora	#%00100000
    107  f62e
    108  f62e				   .spider_control_sprite_store
    109  f62e		       c9 00		      cmp	#%00000000
    110  f630		       f0 02		      beq	.spider_control_boundary
    111  f632		       85 9f		      sta	SpiderCtrl
    112  f634
    113  f634				   .spider_control_boundary
    114  f634							; Check Playfield Boundaries
    115  f634
    116  f634				   .spider_control_boundary_left
    117  f634		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f636		       b0 05		      bcs	.spider_control_boundary_right
    119  f638		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f63a		       4c 43 f6 	      jmp	.spider_control_boundary_top
    121  f63d
    122  f63d				   .spider_control_boundary_right
    123  f63d		       e0 7e		      cpx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    124  f63f		       90 02		      bcc	.spider_control_boundary_top
    125  f641		       a2 7e		      ldx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    126  f643
    127  f643				   .spider_control_boundary_top
    128  f643		       c0 03		      cpy	#SPIDER_VEL_X+1
    129  f645		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f647		       a0 03		      ldy	#SPIDER_VEL_X+1
    131  f649		       4c 52 f6 	      jmp	.spider_control_store
    132  f64c
    133  f64c				   .spider_control_boundary_bottom
    134  f64c		       c0 b1		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    135  f64e		       90 02		      bcc	.spider_control_store
    136  f650		       a0 b1		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    137  f652
    138  f652				   .spider_control_store
    139  f652							; Store new position
    140  f652		       86 9d		      stx	SpiderPos
    141  f654		       84 9e		      sty	SpiderPos+1
    142  f656
    143  f656							; TODO: Optimize this somehow?
    144  f656				   .spider_control_sprite_assign
    145  f656							; Skip if no change
    146  f656		       c9 00		      cmp	#%00000000
    147  f658		       f0 7f		      beq	.spider_control_return
    148  f65a
    149  f65a		       a2 00		      ldx	#%00000000	; For reflection
    150  f65c
    151  f65c				   .spider_control_sprite_assign_left
    152  f65c		       c9 80		      cmp	#%10000000
    153  f65e		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f660					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f660				   .POINTER   SET	SpiderPtr
      2  f660				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f660
      4  f660		       a9 6a		      LDA	#<.ADDRESS
      5  f662		       85 9b		      STA	.POINTER
      6  f664		       a9 f7		      LDA	#>.ADDRESS
      7  f666		       85 9c		      STA	.POINTER+1
      8  f668
    155  f668		       a2 08		      ldx	#%00001000
    156  f66a		       4c d7 f6 	      jmp	.spider_control_reflect
    157  f66d
    158  f66d				   .spider_control_sprite_assign_right
    159  f66d		       c9 40		      cmp	#%01000000
    160  f66f		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f671					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f671				   .POINTER   SET	SpiderPtr
      2  f671				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f671
      4  f671		       a9 6a		      LDA	#<.ADDRESS
      5  f673		       85 9b		      STA	.POINTER
      6  f675		       a9 f7		      LDA	#>.ADDRESS
      7  f677		       85 9c		      STA	.POINTER+1
      8  f679
    162  f679		       4c d7 f6 	      jmp	.spider_control_reflect
    163  f67c
    164  f67c				   .spider_control_sprite_assign_top
    165  f67c		       c9 20		      cmp	#%00100000
    166  f67e		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f680					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f680				   .POINTER   SET	SpiderPtr
      2  f680				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f680
      4  f680		       a9 5a		      LDA	#<.ADDRESS
      5  f682		       85 9b		      STA	.POINTER
      6  f684		       a9 f7		      LDA	#>.ADDRESS
      7  f686		       85 9c		      STA	.POINTER+1
      8  f688
    168  f688		       4c d7 f6 	      jmp	.spider_control_reflect
    169  f68b
    170  f68b				   .spider_control_sprite_assign_bottom
    171  f68b		       c9 10		      cmp	#%00010000
    172  f68d		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f68f					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f68f				   .POINTER   SET	SpiderPtr
      2  f68f				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f68f
      4  f68f		       a9 7a		      LDA	#<.ADDRESS
      5  f691		       85 9b		      STA	.POINTER
      6  f693		       a9 f7		      LDA	#>.ADDRESS
      7  f695		       85 9c		      STA	.POINTER+1
      8  f697
    174  f697		       4c d7 f6 	      jmp	.spider_control_reflect
    175  f69a
    176  f69a				   .spider_control_sprite_assign_top_right
    177  f69a		       c9 60		      cmp	#%01100000
    178  f69c		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f69e					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f69e				   .POINTER   SET	SpiderPtr
      2  f69e				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f69e
      4  f69e		       a9 62		      LDA	#<.ADDRESS
      5  f6a0		       85 9b		      STA	.POINTER
      6  f6a2		       a9 f7		      LDA	#>.ADDRESS
      7  f6a4		       85 9c		      STA	.POINTER+1
      8  f6a6
    180  f6a6		       4c d7 f6 	      jmp	.spider_control_reflect
    181  f6a9
    182  f6a9				   .spider_control_sprite_assign_bottom_right
    183  f6a9		       c9 50		      cmp	#%01010000
    184  f6ab		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f6ad					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f6ad				   .POINTER   SET	SpiderPtr
      2  f6ad				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f6ad
      4  f6ad		       a9 72		      LDA	#<.ADDRESS
      5  f6af		       85 9b		      STA	.POINTER
      6  f6b1		       a9 f7		      LDA	#>.ADDRESS
      7  f6b3		       85 9c		      STA	.POINTER+1
      8  f6b5
    186  f6b5		       4c d7 f6 	      jmp	.spider_control_reflect
    187  f6b8
    188  f6b8				   .spider_control_sprite_assign_bottom_left
    189  f6b8		       c9 90		      cmp	#%10010000
    190  f6ba		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f6bc					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f6bc				   .POINTER   SET	SpiderPtr
      2  f6bc				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f6bc
      4  f6bc		       a9 72		      LDA	#<.ADDRESS
      5  f6be		       85 9b		      STA	.POINTER
      6  f6c0		       a9 f7		      LDA	#>.ADDRESS
      7  f6c2		       85 9c		      STA	.POINTER+1
      8  f6c4
    192  f6c4		       a2 08		      ldx	#%00001000
    193  f6c6		       4c d7 f6 	      jmp	.spider_control_reflect
    194  f6c9
    195  f6c9				   .spider_control_sprite_assign_top_left
    196  f6c9		       c9 a0		      cmp	#%10100000
    197  f6cb		       d0 0a		      bne	.spider_control_reflect
      0  f6cd					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f6cd				   .POINTER   SET	SpiderPtr
      2  f6cd				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f6cd
      4  f6cd		       a9 62		      LDA	#<.ADDRESS
      5  f6cf		       85 9b		      STA	.POINTER
      6  f6d1		       a9 f7		      LDA	#>.ADDRESS
      7  f6d3		       85 9c		      STA	.POINTER+1
      8  f6d5
    199  f6d5		       a2 08		      ldx	#%00001000
    200  f6d7
    201  f6d7				   .spider_control_reflect
    202  f6d7		       86 0b		      stx	REFP0
    203  f6d9
    204  f6d9				   .spider_control_return
    205  f6d9		       60		      rts
    206  f6da
    207  f6da				   SpiderCollision
    208  f6da		       a9 56		      lda	#SPIDER_COLOR
    209  f6dc
    210  f6dc				   .spider_collision_m0
    211  f6dc							; Check stun status
    212  f6dc		       a6 ae		      ldx	BugStunned
    213  f6de		       e0 00		      cpx	#0
    214  f6e0		       d0 04		      bne	.spider_collision_m1
    215  f6e2
    216  f6e2							; Collision for M0 (V set)
    217  f6e2		       24 00		      bit	CXM0P
    218  f6e4		       70 0d		      bvs	.spider_collision_active
    219  f6e6
    220  f6e6				   .spider_collision_m1
    221  f6e6							; Check stun status
    222  f6e6		       a6 af		      ldx	BugStunned+1
    223  f6e8		       e0 00		      cpx	#0
    224  f6ea		       d0 09		      bne	.spider_collision_return
    225  f6ec
    226  f6ec							; Collision for M1 (N set)
    227  f6ec		       24 01		      bit	CXM1P
    228  f6ee		       30 03		      bmi	.spider_collision_active
    229  f6f0
    230  f6f0		       4c f5 f6 	      jmp	.spider_collision_return
    231  f6f3
    232  f6f3				   .spider_collision_active
    233  f6f3		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f6f5
    235  f6f5				   .spider_collision_return
    236  f6f5		       85 a0		      sta	SpiderColor
    237  f6f7		       60		      rts
    238  f6f8
    239  f6f8				   SpiderPosition
    240  f6f8
    241  f6f8							; Set Position
    242  f6f8		       a2 00		      ldx	#0	; Object (player0)
    243  f6fa		       a5 9d		      lda	SpiderPos	; X Position
    244  f6fc		       20 00 f0 	      jsr	PosObject
    245  f6ff
    246  f6ff		       60		      rts
    247  f700
    248  f700							; Scanline Draw
    249  f700
    250  f700				   SpiderDrawStart
    251  f700
    252  f700							; Set player 0 to be double size
    253  f700							; and missile 0 to be 4 clock size
    254  f700		       a5 81		      lda	NuSiz0
    255  f702		       09 07		      ora	#%00000111
    256  f704		       85 81		      sta	NuSiz0
    257  f706		       85 04		      sta	NUSIZ0
    258  f708
    259  f708							; Set sprite color
    260  f708		       a5 a0		      lda	SpiderColor
    261  f70a		       85 06		      sta	COLUP0
    262  f70c
    263  f70c							; Determine if we need to use vertical delay (odd line)
    264  f70c		       a5 9e		      lda	SpiderPos+1	; Y Position
    265  f70e		       4a		      lsr
    266  f70f		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f711
    268  f711		       a0 01		      ldy	#1
    269  f713		       4c 18 f7 	      jmp	.spider_draw_start_set_delay
    270  f716
    271  f716				   .spider_draw_start_nodelay
    272  f716		       a0 00		      ldy	#0
    273  f718
    274  f718				   .spider_draw_start_set_delay
    275  f718		       84 25		      sty	VDELP0
    276  f71a
    277  f71a				   .spider_draw_start_pos
    278  f71a							; Calculate starting position
    279  f71a		       18		      clc
    280  f71b		       69 10		      adc	#SPIDER_SIZE
    281  f71d		       85 a2		      sta	SpiderDrawPos
    282  f71f
    283  f71f							; Initialize sprite index
    284  f71f		       a9 00		      lda	#0
    285  f721		       85 a1		      sta	SpiderIndex
    286  f723
    287  f723		       60		      rts
    288  f724
    289  f724				   SpiderDraw
    290  f724
    291  f724		       a4 a1		      ldy	SpiderIndex
    292  f726		       c0 10		      cpy	#(SPIDER_SPRITE_SIZE*2)
    293  f728		       f0 1f		      beq	.spider_draw_blank	; At end of sprite
    294  f72a		       b0 28		      bcs	.spider_draw_return	; Completed drawing sprite
    295  f72c		       c0 00		      cpy	#0
    296  f72e		       d0 06		      bne	.spider_draw_line
    297  f730
    298  f730							; Use half scanline
    299  f730		       a5 84		      lda	Temp+1
    300  f732
    301  f732		       e5 a2		      sbc	SpiderDrawPos
    302  f734		       10 1e		      bpl	.spider_draw_return	; Not yet to draw sprite
    303  f736
    304  f736				   .spider_draw_line
    305  f736		       98		      tya
    306  f737		       4a		      lsr
    307  f738		       b0 09		      bcs	.spider_draw_skip
    308  f73a		       a8		      tay
    309  f73b
    310  f73b		       b1 9b		      lda	(SpiderPtr),y
    311  f73d		       85 1b		      sta	GRP0
    312  f73f
    313  f73f							; Using this for now until we have another sprite
    314  f73f		       a9 00		      lda	#0
    315  f741		       85 1c		      sta	GRP1
    316  f743
    317  f743				   .spider_draw_skip
    318  f743		       a4 a1		      ldy	SpiderIndex
    319  f745		       c8		      iny
    320  f746		       84 a1		      sty	SpiderIndex
    321  f748		       60		      rts		; Early return
    322  f749
    323  f749				   .spider_draw_blank
    324  f749		       a9 00		      lda	#0
    325  f74b		       85 1b		      sta	GRP0
    326  f74d
    327  f74d							; Using this for now until we have another sprite
    328  f74d		       a9 00		      lda	#0
    329  f74f		       85 1c		      sta	GRP1
    330  f751
    331  f751							; Push index to be one above
    332  f751		       c8		      iny
    333  f752		       84 a1		      sty	SpiderIndex
    334  f754
    335  f754				   .spider_draw_return
    336  f754		       60		      rts
    337  f755
    338  f755				   SpiderClean
    339  f755
    340  f755							; Clear out Player0 sprite
    341  f755		       a9 00		      lda	#0
    342  f757		       85 1b		      sta	GRP0
    343  f759
    344  f759		       60		      rts
    345  f75a
    346  f75a							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f75a					      include	"objects/spider_sprite.asm"
      1  f75a				   SpiderSprite
      2  f75a
      3  f75a		       99		      .BYTE.b	%10011001
      4  f75b		       bd		      .BYTE.b	%10111101
      5  f75c		       99		      .BYTE.b	%10011001
      6  f75d		       7e		      .BYTE.b	%01111110
      7  f75e		       3c		      .BYTE.b	%00111100
      8  f75f		       7e		      .BYTE.b	%01111110
      9  f760		       bd		      .BYTE.b	%10111101
     10  f761		       99		      .BYTE.b	%10011001
     11  f762
     12  f762		       0b		      .BYTE.b	%00001011
     13  f763		       13		      .BYTE.b	%00010011
     14  f764		       1c		      .BYTE.b	%00011100
     15  f765		       2d		      .BYTE.b	%00101101
     16  f766		       f6		      .BYTE.b	%11110110
     17  f767		       b8		      .BYTE.b	%10111000
     18  f768		       10		      .BYTE.b	%00010000
     19  f769		       30		      .BYTE.b	%00110000
     20  f76a
     21  f76a		       c7		      .BYTE.b	%11000111
     22  f76b		       28		      .BYTE.b	%00101000
     23  f76c		       7a		      .BYTE.b	%01111010
     24  f76d		       ff		      .BYTE.b	%11111111
     25  f76e		       ff		      .BYTE.b	%11111111
     26  f76f		       7a		      .BYTE.b	%01111010
     27  f770		       28		      .BYTE.b	%00101000
     28  f771		       c7		      .BYTE.b	%11000111
     29  f772
     30  f772		       30		      .BYTE.b	%00110000
     31  f773		       10		      .BYTE.b	%00010000
     32  f774		       b8		      .BYTE.b	%10111000
     33  f775		       f6		      .BYTE.b	%11110110
     34  f776		       2d		      .BYTE.b	%00101101
     35  f777		       1c		      .BYTE.b	%00011100
     36  f778		       13		      .BYTE.b	%00010011
     37  f779		       0b		      .BYTE.b	%00001011
     38  f77a
     39  f77a		       99		      .BYTE.b	%10011001
     40  f77b		       bd		      .BYTE.b	%10111101
     41  f77c		       7e		      .BYTE.b	%01111110
     42  f77d		       3c		      .BYTE.b	%00111100
     43  f77e		       7e		      .BYTE.b	%01111110
     44  f77f		       99		      .BYTE.b	%10011001
     45  f780		       bd		      .BYTE.b	%10111101
     46  f781		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f782					      include	"objects/line.asm"
      1  f782							;================
      2  f782							; Line (ball)
      3  f782							;================
      4  f782
      5  f782							; Constants
      6  f782
      7  f782		       00 04	   LINE_SIZE  =	4
      8  f782		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f782		       00 04	   LINE_VEL_X =	4
     10  f782		       00 04	   LINE_VEL_Y =	4
     11  f782
     12  f782		       00 08	   LINE_AUDIO_C =	8
     13  f782		       00 01	   LINE_AUDIO_F =	1
     14  f782		       00 04	   LINE_AUDIO_V =	4
     15  f782
     16  f782		       00 08	   LINE_SAMPLE_LEN =	8
     17  f782		       00 03	   LINE_SAMPLE_C =	3
     18  f782		       00 01	   LINE_SAMPLE_F =	1
     19  f782		       00 04	   LINE_SAMPLE_V =	4
     20  f782
     21  f782							; Initialization
     22  f782
     23  f782				   LineInit
     24  f782
     25  f782							; Initial Line Control
     26  f782		       a9 00		      lda	#0
     27  f784		       85 a5		      sta	LineEnabled
     28  f786		       85 a6		      sta	LinePos+0
     29  f788		       85 a7		      sta	LinePos+1
     30  f78a		       85 a8		      sta	LineVelocity+0
     31  f78c		       85 a9		      sta	LineVelocity+1
     32  f78e		       85 aa		      sta	LineStartPos+0
     33  f790		       85 ab		      sta	LineStartPos+1
     34  f792		       85 ac		      sta	LineDrawPos+0
     35  f794		       85 ad		      sta	LineDrawPos+1
     36  f796
     37  f796		       60		      rts
     38  f797
     39  f797							; Frame Update
     40  f797
     41  f797				   LineUpdate
     42  f797		       20 a1 f7 	      jsr	LineControl
     43  f79a		       20 53 f8 	      jsr	LineObject
     44  f79d		       20 9a f8 	      jsr	LineCollision
     45  f7a0		       60		      rts
     46  f7a1
     47  f7a1				   LineControl
     48  f7a1
     49  f7a1							; Check if Fire Button on controller 1 is pressed
     50  f7a1		       a5 0c		      lda	INPT4
     51  f7a3		       30 0a		      bmi	.line_control_skip
     52  f7a5
     53  f7a5		       24 a5		      bit	LineEnabled
     54  f7a7		       30 06		      bmi	.line_control_skip
     55  f7a9
     56  f7a9		       a5 9f		      lda	SpiderCtrl
     57  f7ab		       c9 00		      cmp	#0
     58  f7ad		       d0 03		      bne	.line_control_fire
     59  f7af
     60  f7af				   .line_control_skip
     61  f7af		       4c 52 f8 	      jmp	.line_control_return
     62  f7b2
     63  f7b2				   .line_control_fire
     64  f7b2		       20 f5 f8 	      jsr	LineEnable
     65  f7b5
     66  f7b5				   .line_control_x
     67  f7b5		       a5 9f		      lda	SpiderCtrl
     68  f7b7		       29 c0		      and	#%11000000
     69  f7b9		       f0 0e		      beq	.line_control_x_none
     70  f7bb				   .line_control_x_left
     71  f7bb		       c9 80		      cmp	#%10000000
     72  f7bd		       d0 05		      bne	.line_control_x_right
     73  f7bf
     74  f7bf		       a9 fc		      lda	#-LINE_VEL_X
     75  f7c1		       4c cb f7 	      jmp	.line_control_x_store
     76  f7c4				   .line_control_x_right
     77  f7c4		       a9 04		      lda	#LINE_VEL_X
     78  f7c6		       4c cb f7 	      jmp	.line_control_x_store
     79  f7c9				   .line_control_x_none
     80  f7c9		       a9 00		      lda	#0
     81  f7cb				   .line_control_x_store
     82  f7cb		       85 a8		      sta	LineVelocity
     83  f7cd
     84  f7cd				   .line_control_y
     85  f7cd		       a5 9f		      lda	SpiderCtrl
     86  f7cf		       29 30		      and	#%00110000
     87  f7d1		       f0 0e		      beq	.line_control_y_none
     88  f7d3				   .line_control_y_up
     89  f7d3		       c9 20		      cmp	#%00100000
     90  f7d5		       d0 05		      bne	.line_control_y_down
     91  f7d7
     92  f7d7		       a9 04		      lda	#LINE_VEL_Y
     93  f7d9		       4c e3 f7 	      jmp	.line_control_y_store
     94  f7dc				   .line_control_y_down
     95  f7dc		       a9 fc		      lda	#-LINE_VEL_Y
     96  f7de		       4c e3 f7 	      jmp	.line_control_y_store
     97  f7e1				   .line_control_y_none
     98  f7e1		       a9 00		      lda	#0
     99  f7e3				   .line_control_y_store
    100  f7e3		       85 a9		      sta	LineVelocity+1
    101  f7e5
    102  f7e5				   .line_control_position
    103  f7e5
    104  f7e5		       a2 00		      ldx	#0	; offsetX
    105  f7e7		       a0 00		      ldy	#0	; offsetY
    106  f7e9
    107  f7e9		       a5 9f		      lda	SpiderCtrl
    108  f7eb		       29 f0		      and	#%11110000
    109  f7ed
    110  f7ed				   .line_control_position_left
    111  f7ed		       c9 80		      cmp	#%10000000
    112  f7ef		       d0 07		      bne	.line_control_position_right
    113  f7f1
    114  f7f1		       a2 04		      ldx	#LINE_SIZE
    115  f7f3		       a0 10		      ldy	#SPIDER_SIZE
    116  f7f5		       4c 3a f8 	      jmp	.line_control_position_store
    117  f7f8
    118  f7f8				   .line_control_position_right
    119  f7f8		       c9 40		      cmp	#%01000000
    120  f7fa		       d0 07		      bne	.line_control_position_top
    121  f7fc
    122  f7fc		       a2 20		      ldx	#SPIDER_SIZE*2
    123  f7fe		       a0 10		      ldy	#SPIDER_SIZE
    124  f800		       4c 3a f8 	      jmp	.line_control_position_store
    125  f803
    126  f803				   .line_control_position_top
    127  f803		       c9 20		      cmp	#%00100000
    128  f805		       d0 07		      bne	.line_control_position_bottom
    129  f807
    130  f807		       a2 10		      ldx	#SPIDER_SIZE
    131  f809		       a0 20		      ldy	#SPIDER_SIZE*2
    132  f80b		       4c 3a f8 	      jmp	.line_control_position_store
    133  f80e
    134  f80e				   .line_control_position_bottom
    135  f80e		       c9 10		      cmp	#%00010000
    136  f810		       d0 05		      bne	.line_control_position_top_right
    137  f812
    138  f812		       a2 10		      ldx	#SPIDER_SIZE
    139  f814		       4c 3a f8 	      jmp	.line_control_position_store
    140  f817
    141  f817				   .line_control_position_top_right
    142  f817		       c9 60		      cmp	#%01100000
    143  f819		       d0 07		      bne	.line_control_position_bottom_right
    144  f81b
    145  f81b		       a2 20		      ldx	#SPIDER_SIZE*2
    146  f81d		       a0 20		      ldy	#SPIDER_SIZE*2
    147  f81f		       4c 3a f8 	      jmp	.line_control_position_store
    148  f822
    149  f822				   .line_control_position_bottom_right
    150  f822		       c9 50		      cmp	#%01010000
    151  f824		       d0 05		      bne	.line_control_position_bottom_left
    152  f826
    153  f826		       a2 20		      ldx	#SPIDER_SIZE*2
    154  f828		       4c 3a f8 	      jmp	.line_control_position_store
    155  f82b
    156  f82b				   .line_control_position_bottom_left
    157  f82b		       c9 90		      cmp	#%10010000
    158  f82d		       d0 03		      bne	.line_control_position_top_left
    159  f82f
    160  f82f							; No Offset
    161  f82f		       4c 3a f8 	      jmp	.line_control_position_store
    162  f832
    163  f832				   .line_control_position_top_left
    164  f832		       c9 a0		      cmp	#%10100000
    165  f834		       d0 04		      bne	.line_control_position_store
    166  f836
    167  f836		       a2 04		      ldx	#LINE_SIZE
    168  f838		       a0 20		      ldy	#SPIDER_SIZE*2
    169  f83a
    170  f83a				   .line_control_position_store
    171  f83a
    172  f83a							; Apply offsetX to playerX
    173  f83a		       a5 9d		      lda	SpiderPos
    174  f83c		       86 83		      stx	Temp
    175  f83e		       18		      clc
    176  f83f		       65 83		      adc	Temp
    177  f841		       aa		      tax
    178  f842
    179  f842							; Apply offsetY to playerY
    180  f842		       a5 9e		      lda	SpiderPos+1
    181  f844		       84 83		      sty	Temp
    182  f846		       18		      clc
    183  f847		       65 83		      adc	Temp
    184  f849		       a8		      tay
    185  f84a
    186  f84a		       86 a6		      stx	LinePos
    187  f84c		       84 a7		      sty	LinePos+1
    188  f84e		       86 aa		      stx	LineStartPos
    189  f850		       84 ab		      sty	LineStartPos+1
    190  f852
    191  f852				   .line_control_return
    192  f852		       60		      rts
    193  f853
    194  f853				   LineObject
    195  f853
    196  f853							; Check if line is enabled
    197  f853		       24 a5		      bit	LineEnabled
    198  f855		       10 42		      bpl	.line_object_return
    199  f857
    200  f857							; Load position
    201  f857		       a6 a6		      ldx	LinePos
    202  f859		       a4 a7		      ldy	LinePos+1
    203  f85b
    204  f85b				   .line_object_distance
    205  f85b
    206  f85b							; Check distance from player with absolute value differences
    207  f85b
    208  f85b				   .line_object_distance_x
    209  f85b		       8a		      txa
    210  f85c		       18		      clc
    211  f85d		       e5 aa		      sbc	LineStartPos
    212  f85f		       b0 04		      bcs	.line_object_distance_x_check
    213  f861		       49 ff		      eor	#$FF	; C flag is clear here
    214  f863		       69 01		      adc	#$01	; form two's complement
    215  f865				   .line_object_distance_x_check		; Jumps to if positive
    216  f865		       c9 40		      cmp	#LINE_DISTANCE
    217  f867		       b0 2d		      bcs	.line_object_disable
    218  f869
    219  f869				   .line_object_distance_y
    220  f869		       98		      tya
    221  f86a		       18		      clc
    222  f86b		       e5 ab		      sbc	LineStartPos+1
    223  f86d		       b0 04		      bcs	.line_object_distance_y_check
    224  f86f		       49 ff		      eor	#$FF	; C flag is clear here
    225  f871		       69 01		      adc	#$01	; form two's complement
    226  f873				   .line_object_distance_y_check		; Jumps to if positive
    227  f873		       c9 40		      cmp	#LINE_DISTANCE
    228  f875		       b0 1f		      bcs	.line_object_disable
    229  f877
    230  f877				   .line_object_boundary
    231  f877				   .line_object_boundary_left
    232  f877		       e0 04		      cpx	#LINE_VEL_X
    233  f879		       90 1b		      bcc	.line_object_disable
    234  f87b				   .line_object_boundary_right
    235  f87b		       e0 9c		      cpx	#160-LINE_VEL_X
    236  f87d		       b0 17		      bcs	.line_object_disable
    237  f87f				   .line_object_boundary_bottom
    238  f87f		       c0 04		      cpy	#LINE_VEL_Y
    239  f881		       90 13		      bcc	.line_object_disable
    240  f883				   .line_object_boundary_top
    241  f883		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    242  f885		       b0 0f		      bcs	.line_object_disable
    243  f887
    244  f887				   .line_object_velocity
    245  f887
    246  f887							; Apply Velocity
    247  f887		       8a		      txa
    248  f888		       18		      clc
    249  f889		       65 a8		      adc	LineVelocity
    250  f88b		       85 a6		      sta	LinePos
    251  f88d
    252  f88d		       98		      tya
    253  f88e		       18		      clc
    254  f88f		       65 a9		      adc	LineVelocity+1
    255  f891		       85 a7		      sta	LinePos+1
    256  f893
    257  f893		       4c 99 f8 	      jmp	.line_object_return
    258  f896
    259  f896				   .line_object_disable
    260  f896		       20 03 f9 	      jsr	LineDisable
    261  f899
    262  f899				   .line_object_return
    263  f899		       60		      rts
    264  f89a
    265  f89a				   LineCollision
    266  f89a
    267  f89a		       a9 78		      lda	#BUG_STUN_LENGTH
    268  f89c
    269  f89c				   .line_collision_m0
    270  f89c		       24 04		      bit	CXM0FB
    271  f89e		       50 08		      bvc	.line_collision_m1
    272  f8a0
    273  f8a0							; Set stun timer
    274  f8a0		       85 ae		      sta	BugStunned+0
    275  f8a2
    276  f8a2							; Disable line
    277  f8a2		       20 03 f9 	      jsr	LineDisable
    278  f8a5		       4c b1 f8 	      jmp	.line_collision_sample
    279  f8a8
    280  f8a8				   .line_collision_m1
    281  f8a8		       24 05		      bit	CXM1FB
    282  f8aa		       50 08		      bvc	.line_collision_return
    283  f8ac
    284  f8ac							; Set stun timer
    285  f8ac		       85 af		      sta	BugStunned+1
    286  f8ae
    287  f8ae							; Disable line
    288  f8ae		       20 03 f9 	      jsr	LineDisable
    289  f8b1
    290  f8b1				   .line_collision_sample
    291  f8b1		       20 27 f9 	      jsr	LineSample
    292  f8b4
    293  f8b4				   .line_collision_return
    294  f8b4		       60		      rts
    295  f8b5
    296  f8b5				   LinePosition
    297  f8b5
    298  f8b5							; Set Line Position
    299  f8b5		       a2 04		      ldx	#4	; Object (ball)
    300  f8b7		       a5 a6		      lda	LinePos	; X Position
    301  f8b9		       20 00 f0 	      jsr	PosObject
    302  f8bc
    303  f8bc		       60		      rts
    304  f8bd
    305  f8bd							; Scanline Draw
    306  f8bd
    307  f8bd				   LineDrawStart
    308  f8bd
    309  f8bd							; Set ball size to be 4 clocks (4/5 bits)
    310  f8bd		       a5 80		      lda	CtrlPf
    311  f8bf		       29 cf		      and	#%11001111
    312  f8c1		       09 20		      ora	#%00100000
    313  f8c3		       85 80		      sta	CtrlPf
    314  f8c5		       85 0a		      sta	CTRLPF
    315  f8c7
    316  f8c7							; Determine if we need to use vertical delay (oven line)
    317  f8c7		       a5 a7		      lda	LinePos+1
    318  f8c9		       4a		      lsr
    319  f8ca		       90 05		      bcc	.line_draw_start_nodelay
    320  f8cc
    321  f8cc		       a0 01		      ldy	#1
    322  f8ce		       4c d3 f8 	      jmp	.line_draw_start_set_delay
    323  f8d1
    324  f8d1				   .line_draw_start_nodelay
    325  f8d1		       a0 00		      ldy	#0
    326  f8d3
    327  f8d3				   .line_draw_start_set_delay
    328  f8d3		       84 27		      sty	VDELBL
    329  f8d5
    330  f8d5				   .line_draw_start_pos
    331  f8d5							; Calculate starting position
    332  f8d5		       18		      clc
    333  f8d6		       85 ac		      sta	LineDrawPos+0
    334  f8d8		       69 02		      adc	#LINE_SIZE/2
    335  f8da		       85 ad		      sta	LineDrawPos+1
    336  f8dc
    337  f8dc		       60		      rts
    338  f8dd
    339  f8dd				   LineDraw
    340  f8dd
    341  f8dd		       a0 00		      ldy	#%00000000
    342  f8df
    343  f8df							; Check if visible
    344  f8df		       24 a5		      bit	LineEnabled
    345  f8e1		       10 0a		      bpl	.line_draw_off
    346  f8e3
    347  f8e3							; Load half scanline
    348  f8e3							;    lda Temp+1
    349  f8e3
    350  f8e3							; Top
    351  f8e3		       c5 ad		      cmp	LineDrawPos+1
    352  f8e5		       b0 06		      bcs	.line_draw_off
    353  f8e7
    354  f8e7							; Bottom
    355  f8e7		       c5 ac		      cmp	LineDrawPos+0
    356  f8e9		       90 02		      bcc	.line_draw_off
    357  f8eb
    358  f8eb				   .line_draw_on
    359  f8eb		       a0 02		      ldy	#%00000010
    360  f8ed
    361  f8ed				   .line_draw_off
    362  f8ed		       84 1f		      sty	ENABL
    363  f8ef
    364  f8ef		       60		      rts
    365  f8f0
    366  f8f0				   LineClean
    367  f8f0
    368  f8f0							; Clear out Line
    369  f8f0		       a9 00		      lda	#0
    370  f8f2		       85 1f		      sta	ENABL
    371  f8f4
    372  f8f4		       60		      rts
    373  f8f5
    374  f8f5				   LineEnable
    375  f8f5		       a9 80		      lda	#%10000000
    376  f8f7		       85 a5		      sta	LineEnabled
    377  f8f9
    378  f8f9		       a5 90		      lda	SampleStep
    379  f8fb		       c9 00		      cmp	#0
    380  f8fd		       d0 03		      bne	.line_enable_return
    381  f8ff
    382  f8ff		       20 11 f9 	      jsr	LineAudioPlay
    383  f902
    384  f902				   .line_enable_return
    385  f902		       60		      rts
    386  f903
    387  f903				   LineDisable
    388  f903		       a9 00		      lda	#0
    389  f905		       85 a5		      sta	LineEnabled
    390  f907
    391  f907		       a5 90		      lda	SampleStep
    392  f909		       c9 00		      cmp	#0
    393  f90b		       d0 03		      bne	.line_disable_return
    394  f90d
    395  f90d		       20 1e f9 	      jsr	LineAudioMute
    396  f910
    397  f910				   .line_disable_return
    398  f910		       60		      rts
    399  f911
    400  f911				   LineAudioPlay
    401  f911		       a9 08		      lda	#LINE_AUDIO_C
    402  f913		       85 16		      sta	AUDC1
    403  f915		       a9 01		      lda	#LINE_AUDIO_F
    404  f917		       85 18		      sta	AUDF1
    405  f919		       a9 04		      lda	#LINE_AUDIO_V
    406  f91b		       85 1a		      sta	AUDV1
    407  f91d		       60		      rts
    408  f91e
    409  f91e				   LineAudioMute
    410  f91e		       a9 00		      lda	#0
    411  f920		       85 1a		      sta	AUDV1
    412  f922		       85 18		      sta	AUDF1
    413  f924		       85 16		      sta	AUDC1
    414  f926		       60		      rts
    415  f927
    416  f927				   LineSample
    417  f927		       a9 08		      lda	#LINE_SAMPLE_LEN
    418  f929		       85 90		      sta	SampleStep
    419  f92b		       a9 03		      lda	#LINE_SAMPLE_C
    420  f92d		       85 16		      sta	AUDC1
    421  f92f		       a9 01		      lda	#LINE_SAMPLE_F
    422  f931		       85 18		      sta	AUDF1
    423  f933		       a9 04		      lda	#LINE_SAMPLE_V
    424  f935		       85 1a		      sta	AUDV1
    425  f937		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f938					      include	"objects/bug.asm"
      1  f938							;======================
      2  f938							; Bugs (missiles 0 & 1)
      3  f938							;======================
      4  f938
      5  f938							; Constants
      6  f938
      7  f938		       00 08	   BUG_SIZE   =	8
      8  f938		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f938		       00 02	   BUG_SPEED  =	2
     10  f938		       00 78	   BUG_STUN_LENGTH =	120
     11  f938		       00 04	   BUG_POINTS =	4
     12  f938
     13  f938		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f938		       00 38	   BUG_COLOR_STUN =	#$38
     15  f938
     16  f938		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f938		       00 03	   BUG_SAMPLE_C =	3
     18  f938		       00 14	   BUG_SAMPLE_F =	20
     19  f938		       00 04	   BUG_SAMPLE_V =	4
     20  f938
     21  f938							; Initialization
     22  f938
     23  f938				   BugInit
     24  f938
     25  f938							; Initialize Bugs
     26  f938		       a2 01		      ldx	#1
     27  f93a
     28  f93a				   .bug_init_loop
     29  f93a		       20 41 f9 	      jsr	BugReset
     30  f93d
     31  f93d		       ca		      dex
     32  f93e		       10 fa		      bpl	.bug_init_loop
     33  f940
     34  f940		       60		      rts
     35  f941
     36  f941				   BugReset		; x = bug (0 or 1)
     37  f941
     38  f941							; Set random position
     39  f941		       20 13 f0 	      jsr	Random
     40  f944
     41  f944		       a5 85		      lda	Rand8
     42  f946		       29 7f		      and	#$7f
     43  f948		       95 b0		      sta	BugPosX,x
     44  f94a
     45  f94a		       a5 86		      lda	Rand16
     46  f94c		       29 7f		      and	#$7f
     47  f94e		       95 b2		      sta	BugPosY,x
     48  f950
     49  f950							; Set as active
     50  f950		       a9 00		      lda	#0
     51  f952		       95 ae		      sta	BugStunned,x
     52  f954
     53  f954							; Reset Color
     54  f954		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     55  f956		       95 b4		      sta	BugColor,x
     56  f958
     57  f958		       60		      rts
     58  f959
     59  f959							; Frame Update
     60  f959
     61  f959				   BugUpdate
     62  f959
     63  f959		       a2 01		      ldx	#1
     64  f95b				   .bug_update_loop
     65  f95b		       86 83		      stx	Temp+0
     66  f95d
     67  f95d		       b5 ae		      lda	BugStunned,x
     68  f95f		       c9 00		      cmp	#0
     69  f961		       f0 08		      beq	.bug_update_active
     70  f963
     71  f963				   .bug_update_stunned
     72  f963		       d6 ae		      dec	BugStunned,x
     73  f965		       20 db f9 	      jsr	BugStunCollision
     74  f968		       4c 71 f9 	      jmp	.bug_update_next
     75  f96b
     76  f96b				   .bug_update_active
     77  f96b		       20 77 f9 	      jsr	BugMovement
     78  f96e		       20 ca f9 	      jsr	BugCollision
     79  f971
     80  f971				   .bug_update_next
     81  f971		       a6 83		      ldx	Temp+0
     82  f973		       ca		      dex
     83  f974		       10 e5		      bpl	.bug_update_loop
     84  f976
     85  f976		       60		      rts
     86  f977
     87  f977				   BugMovement
     88  f977
     89  f977				   .bug_movement_random
     90  f977		       20 13 f0 	      jsr	Random
     91  f97a		       29 03		      and	#%00000011
     92  f97c		       85 84		      sta	Temp+1
     93  f97e
     94  f97e				   .bug_movement_load
     95  f97e							; Load x and y values
     96  f97e		       a6 83		      ldx	Temp+0
     97  f980		       b5 b0		      lda	BugPosX,x
     98  f982		       b4 b2		      ldy	BugPosY,x
     99  f984		       aa		      tax
    100  f985
    101  f985				   .bug_movement_x
    102  f985							; Alter X Position
    103  f985		       a5 84		      lda	Temp+1
    104  f987		       29 01		      and	#%00000001
    105  f989
    106  f989				   .bug_movement_x_left
    107  f989		       c9 01		      cmp	#1
    108  f98b		       d0 05		      bne	.bug_movement_x_right
    109  f98d					      REPEAT	#BUG_SPEED
    110  f98d		       ca		      dex
    109  f98d					      REPEND
    110  f98e		       ca		      dex
    111  f98f					      REPEND
    112  f98f		       4c 94 f9 	      jmp	.bug_movement_y
    113  f992
    114  f992				   .bug_movement_x_right
    115  f992					      REPEAT	#BUG_SPEED
    116  f992		       e8		      inx
    115  f992					      REPEND
    116  f993		       e8		      inx
    117  f994					      REPEND
    118  f994
    119  f994				   .bug_movement_y
    120  f994							; Alter Y Position
    121  f994		       a5 84		      lda	Temp+1
    122  f996		       29 02		      and	#%00000010
    123  f998		       4a		      lsr
    124  f999
    125  f999				   .bug_movement_y_up
    126  f999		       c9 01		      cmp	#1
    127  f99b		       d0 05		      bne	.bug_movement_y_down
    128  f99d					      REPEAT	#BUG_SPEED
    129  f99d		       c8		      iny
    128  f99d					      REPEND
    129  f99e		       c8		      iny
    130  f99f					      REPEND
    131  f99f		       4c a4 f9 	      jmp	.bug_movement_boundary
    132  f9a2
    133  f9a2				   .bug_movement_y_down
    134  f9a2					      REPEAT	#BUG_SPEED
    135  f9a2		       88		      dey
    134  f9a2					      REPEND
    135  f9a3		       88		      dey
    136  f9a4					      REPEND
    137  f9a4
    138  f9a4				   .bug_movement_boundary
    139  f9a4
    140  f9a4				   .bug_movement_boundary_left
    141  f9a4		       e0 08		      cpx	#BUG_BOUNDARY
    142  f9a6		       b0 05		      bcs	.bug_movement_boundary_right
    143  f9a8		       a2 08		      ldx	#BUG_BOUNDARY
    144  f9aa		       4c b3 f9 	      jmp	.bug_movement_boundary_top
    145  f9ad
    146  f9ad				   .bug_movement_boundary_right
    147  f9ad		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    148  f9af		       90 02		      bcc	.bug_movement_boundary_top
    149  f9b1		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    150  f9b3
    151  f9b3				   .bug_movement_boundary_top
    152  f9b3		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    153  f9b5		       b0 05		      bcs	.bug_movement_boundary_bottom
    154  f9b7		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    155  f9b9		       4c c2 f9 	      jmp	.bug_movement_store
    156  f9bc
    157  f9bc				   .bug_movement_boundary_bottom
    158  f9bc		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    159  f9be		       90 02		      bcc	.bug_movement_store
    160  f9c0		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    161  f9c2
    162  f9c2				   .bug_movement_store
    163  f9c2		       8a		      txa
    164  f9c3		       a6 83		      ldx	Temp+0
    165  f9c5		       95 b0		      sta	BugPosX,x
    166  f9c7		       94 b2		      sty	BugPosY,x
    167  f9c9
    168  f9c9				   .bug_movement_return
    169  f9c9		       60		      rts
    170  f9ca
    171  f9ca				   BugCollision
    172  f9ca
    173  f9ca		       e0 01		      cpx	#1
    174  f9cc		       f0 05		      beq	.bug_collision_m1
    175  f9ce
    176  f9ce				   .bug_collision_m0
    177  f9ce							; Collision for M0 (V set)
    178  f9ce		       24 00		      bit	CXM0P
    179  f9d0		       70 06		      bvs	.bug_collision_active
    180  f9d2		       60		      rts
    181  f9d3
    182  f9d3				   .bug_collision_m1
    183  f9d3							; Collision for M1 (N set)
    184  f9d3		       24 01		      bit	CXM1P
    185  f9d5		       30 01		      bmi	.bug_collision_active
    186  f9d7		       60		      rts
    187  f9d8
    188  f9d8				   .bug_collision_active
    189  f9d8		       c6 91		      dec	ScoreValue
    190  f9da		       60		      rts
    191  f9db
    192  f9db				   BugStunCollision
    193  f9db
    194  f9db		       e0 01		      cpx	#1
    195  f9dd		       f0 05		      beq	.bug_stun_collision_m1
    196  f9df
    197  f9df				   .bug_stun_collision_m0
    198  f9df							; Collision for M0 (V set)
    199  f9df		       24 00		      bit	CXM0P
    200  f9e1		       70 06		      bvs	.bug_stun_collision_active
    201  f9e3		       60		      rts
    202  f9e4
    203  f9e4				   .bug_stun_collision_m1
    204  f9e4							; Collision for M1 (N set)
    205  f9e4		       24 01		      bit	CXM1P
    206  f9e6		       30 01		      bmi	.bug_stun_collision_active
    207  f9e8		       60		      rts
    208  f9e9
    209  f9e9				   .bug_stun_collision_active
    210  f9e9							; Add points to score
    211  f9e9		       18		      clc
    212  f9ea		       a5 92		      lda	ScoreValue+1
    213  f9ec		       69 04		      adc	#BUG_POINTS
    214  f9ee		       85 92		      sta	ScoreValue+1
    215  f9f0
    216  f9f0							; Reset bug
    217  f9f0		       20 41 f9 	      jsr	BugReset
    218  f9f3
    219  f9f3							; Play sample
    220  f9f3		       20 47 fa 	      jsr	BugSample
    221  f9f6
    222  f9f6		       60		      rts
    223  f9f7
    224  f9f7							; Horizontal Positioning
    225  f9f7
    226  f9f7				   BugPosition
    227  f9f7
    228  f9f7		       a2 02		      ldx	#2
    229  f9f9		       a5 b0		      lda	BugPosX+0
    230  f9fb		       20 00 f0 	      jsr	PosObject
    231  f9fe
    232  f9fe		       a2 03		      ldx	#3
    233  fa00		       a5 b1		      lda	BugPosX+1
    234  fa02		       20 00 f0 	      jsr	PosObject
    235  fa05
    236  fa05		       60		      rts
    237  fa06
    238  fa06							; Scanline Draw
    239  fa06
    240  fa06				   BugDrawStart
    241  fa06
    242  fa06		       a0 01		      ldy	#1
    243  fa08				   .bug_draw_start_loop
    244  fa08
    245  fa08							; Set missile 0 & 1 to be 4 clock size
    246  fa08		       b9 81 00 	      lda	NuSiz0,y
    247  fa0b		       09 30		      ora	#%00110000
    248  fa0d		       99 81 00 	      sta	NuSiz0,y
    249  fa10		       99 04 00 	      sta	NUSIZ0,y
    250  fa13
    251  fa13							; Setup half scanline positions
    252  fa13		       b9 b2 00 	      lda	BugPosY,y
    253  fa16		       4a		      lsr
    254  fa17		       99 b6 00 	      sta	BugDrawPosBottom,y
    255  fa1a
    256  fa1a		       69 04		      adc	#BUG_SIZE/2
    257  fa1c		       99 b8 00 	      sta	BugDrawPosTop,y
    258  fa1f
    259  fa1f		       88		      dey
    260  fa20		       10 e6		      bpl	.bug_draw_start_loop
    261  fa22
    262  fa22		       60		      rts
    263  fa23
    264  fa23				   BugDraw
    265  fa23
    266  fa23							; Load half scanline
    267  fa23							;    lda Temp+1
    268  fa23
    269  fa23				   .bug_draw_0
    270  fa23		       a0 00		      ldy	#%00000000
    271  fa25
    272  fa25							; Check top and bottom y pos
    273  fa25		       c5 b8		      cmp	BugDrawPosTop+0
    274  fa27		       b0 06		      bcs	.bug_draw_0_off
    275  fa29
    276  fa29		       c5 b6		      cmp	BugDrawPosBottom+0
    277  fa2b		       90 02		      bcc	.bug_draw_0_off
    278  fa2d
    279  fa2d				   .bug_draw_0_on
    280  fa2d		       a0 02		      ldy	#%00000010
    281  fa2f
    282  fa2f				   .bug_draw_0_off
    283  fa2f		       84 1d		      sty	ENAM0
    284  fa31
    285  fa31				   .bug_draw_1
    286  fa31		       a0 00		      ldy	#%00000000
    287  fa33
    288  fa33							; Check top and bottom y pos
    289  fa33		       c5 b9		      cmp	BugDrawPosTop+1
    290  fa35		       b0 06		      bcs	.bug_draw_1_off
    291  fa37
    292  fa37		       c5 b7		      cmp	BugDrawPosBottom+1
    293  fa39		       90 02		      bcc	.bug_draw_1_off
    294  fa3b
    295  fa3b				   .bug_draw_1_on
    296  fa3b		       a0 02		      ldy	#%00000010
    297  fa3d
    298  fa3d				   .bug_draw_1_off
    299  fa3d		       84 1e		      sty	ENAM1
    300  fa3f
    301  fa3f				   .bug_draw_return
    302  fa3f		       60		      rts
    303  fa40
    304  fa40				   BugClean
    305  fa40		       a9 00		      lda	#0
    306  fa42		       85 1d		      sta	ENAM0
    307  fa44		       85 1e		      sta	ENAM1
    308  fa46		       60		      rts
    309  fa47
    310  fa47				   BugSample
    311  fa47		       a9 1e		      lda	#BUG_SAMPLE_LEN
    312  fa49		       85 90		      sta	SampleStep
    313  fa4b		       a9 03		      lda	#BUG_SAMPLE_C
    314  fa4d		       85 16		      sta	AUDC1
    315  fa4f		       a9 14		      lda	#BUG_SAMPLE_F
    316  fa51		       85 18		      sta	AUDF1
    317  fa53		       a9 04		      lda	#BUG_SAMPLE_V
    318  fa55		       85 1a		      sta	AUDV1
    319  fa57		       60		      rts
------- FILE game.asm
     20  fa58							;    include "objects/swatter.asm"
     21  fa58
     22  fa58							; Initialization
     23  fa58
     24  fa58				   GameInit
     25  fa58
     26  fa58							; Setup logic and kernel
      0  fa58					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fa58				   .POINTER   SET	VBlankPtr
      2  fa58				   .ADDRESS   SET	GameVerticalBlank
      3  fa58
      4  fa58		       a9 a3		      LDA	#<.ADDRESS
      5  fa5a		       85 87		      STA	.POINTER
      6  fa5c		       a9 fa		      LDA	#>.ADDRESS
      7  fa5e		       85 88		      STA	.POINTER+1
      8  fa60
      0  fa60					      SET_POINTER	KernelPtr, GameKernel
      1  fa60				   .POINTER   SET	KernelPtr
      2  fa60				   .ADDRESS   SET	GameKernel
      3  fa60
      4  fa60		       a9 20		      LDA	#<.ADDRESS
      5  fa62		       85 89		      STA	.POINTER
      6  fa64		       a9 fb		      LDA	#>.ADDRESS
      7  fa66		       85 8a		      STA	.POINTER+1
      8  fa68
      0  fa68					      SET_POINTER	OverScanPtr, GameOverScan
      1  fa68				   .POINTER   SET	OverScanPtr
      2  fa68				   .ADDRESS   SET	GameOverScan
      3  fa68
      4  fa68		       a9 c4		      LDA	#<.ADDRESS
      5  fa6a		       85 8b		      STA	.POINTER
      6  fa6c		       a9 fa		      LDA	#>.ADDRESS
      7  fa6e		       85 8c		      STA	.POINTER+1
      8  fa70
     30  fa70
     31  fa70							; Mute Audio
     32  fa70		       a9 00		      lda	#0
     33  fa72		       85 15		      sta	AUDC0
     34  fa74		       85 19		      sta	AUDV0
     35  fa76		       85 17		      sta	AUDF0
     36  fa78		       85 16		      sta	AUDC1
     37  fa7a		       85 1a		      sta	AUDV1
     38  fa7c		       85 18		      sta	AUDF1
     39  fa7e		       85 90		      sta	SampleStep
     40  fa80
     41  fa80							; Load Audio Settings
     42  fa80		       a9 04		      lda	#GAME_AUDIO_VOLUME
     43  fa82		       85 19		      sta	AUDV0
     44  fa84
     45  fa84							; Make it so that we play the first note immediately
     46  fa84		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     47  fa86		       85 8f		      sta	AudioStep
     48  fa88		       a9 02		      lda	#2
     49  fa8a		       85 8e		      sta	FrameTimer
     50  fa8c
     51  fa8c							; Reset NuSiz
     52  fa8c		       a9 00		      lda	#0
     53  fa8e		       85 81		      sta	NuSiz0
     54  fa90		       85 04		      sta	NUSIZ0
     55  fa92		       85 82		      sta	NuSiz1
     56  fa94		       85 05		      sta	NUSIZ1
     57  fa96
     58  fa96							; Initialize Objects
     59  fa96		       20 80 f4 	      jsr	ScoreInit
     60  fa99		       20 dc f5 	      jsr	SpiderInit
     61  fa9c		       20 82 f7 	      jsr	LineInit
     62  fa9f		       20 38 f9 	      jsr	BugInit
     63  faa2							;    jsr SwatterInit
     64  faa2
     65  faa2		       60		      rts
     66  faa3
     67  faa3				   GameVerticalBlank
     68  faa3
     69  faa3							; Refresh random values
     70  faa3		       20 13 f0 	      jsr	Random
     71  faa6
     72  faa6							; Update Objects
     73  faa6		       20 ed f5 	      jsr	SpiderUpdate
     74  faa9		       20 97 f7 	      jsr	LineUpdate
     75  faac		       20 59 f9 	      jsr	BugUpdate
     76  faaf							;    jsr SwatterUpdate
     77  faaf		       20 89 f4 	      jsr	ScoreUpdate
     78  fab2
     79  fab2							; Reset Collisions
     80  fab2		       85 2c		      sta	CXCLR
     81  fab4
     82  fab4							; Clear horizontal movement
     83  fab4		       85 2b		      sta	HMCLR
     84  fab6
     85  fab6							; Update Positions
     86  fab6		       20 f8 f6 	      jsr	SpiderPosition
     87  fab9		       20 b5 f8 	      jsr	LinePosition
     88  fabc		       20 f7 f9 	      jsr	BugPosition
     89  fabf							;    jsr SwatterPosition
     90  fabf
     91  fabf							; Set final x positions
     92  fabf		       85 02		      sta	WSYNC
     93  fac1		       85 2a		      sta	HMOVE
     94  fac3
     95  fac3		       60		      rts
     96  fac4
     97  fac4				   GameOverScan
     98  fac4
     99  fac4							; Audio Routines
    100  fac4		       20 e2 fa 	      jsr	GameAudio
    101  fac7		       20 ce fa 	      jsr	GameSample
    102  faca
    103  faca							; State Routines
    104  faca		       20 16 fb 	      jsr	GameDeath
    105  facd
    106  facd		       60		      rts
    107  face
    108  face				   GameSample
    109  face
    110  face		       a6 90		      ldx	SampleStep
    111  fad0		       e0 00		      cpx	#0
    112  fad2		       f0 0b		      beq	.game_sample_return
    113  fad4
    114  fad4		       ca		      dex
    115  fad5		       d0 08		      bne	.game_sample_return
    116  fad7
    117  fad7				   .game_sample_mute
    118  fad7		       a9 00		      lda	#0
    119  fad9		       85 1a		      sta	AUDV1
    120  fadb		       85 18		      sta	AUDF1
    121  fadd		       85 16		      sta	AUDC1
    122  fadf
    123  fadf				   .game_sample_return
    124  fadf		       86 90		      stx	SampleStep
    125  fae1		       60		      rts
    126  fae2
    127  fae2				   GameAudio
    128  fae2
    129  fae2		       a6 8e		      ldx	FrameTimer
    130  fae4		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    131  fae6		       f0 25		      beq	.game_audio_mute_note
    132  fae8		       e0 00		      cpx	#0
    133  faea		       d0 29		      bne	.game_audio_return
    134  faec
    135  faec							; Reset Timer
    136  faec		       a2 09		      ldx	#GAME_AUDIO_STEP
    137  faee		       86 8e		      stx	FrameTimer
    138  faf0
    139  faf0				   .game_audio_play
    140  faf0
    141  faf0							; Increment melody position
    142  faf0		       a4 8f		      ldy	AudioStep
    143  faf2		       c8		      iny
    144  faf3
    145  faf3		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    146  faf5		       d0 02		      bne	.game_audio_play_note
    147  faf7
    148  faf7							; Loop our audio step
    149  faf7		       a0 00		      ldy	#0
    150  faf9
    151  faf9				   .game_audio_play_note
    152  faf9
    153  faf9							; Save current position
    154  faf9		       84 8f		      sty	AudioStep
    155  fafb
    156  fafb							; Melody Line
    157  fafb		       b9 84 fb 	      lda	GameAudio0,y
    158  fafe		       c9 ff		      cmp	#$FF
    159  fb00		       f0 0b		      beq	.game_audio_mute_note
    160  fb02		       85 17		      sta	AUDF0
    161  fb04		       a9 06		      lda	#GAME_AUDIO_TONE
    162  fb06		       85 15		      sta	AUDC0
    163  fb08		       a9 04		      lda	#GAME_AUDIO_VOLUME
    164  fb0a		       85 19		      sta	AUDV0
    165  fb0c
    166  fb0c		       60		      rts
    167  fb0d
    168  fb0d				   .game_audio_mute_note
    169  fb0d
    170  fb0d		       a9 00		      lda	#0
    171  fb0f		       85 17		      sta	AUDF0
    172  fb11		       85 15		      sta	AUDC0
    173  fb13		       85 19		      sta	AUDV0
    174  fb15
    175  fb15				   .game_audio_return
    176  fb15		       60		      rts
    177  fb16
    178  fb16				   GameDeath
    179  fb16		       a5 91		      lda	ScoreValue+0
    180  fb18		       c9 00		      cmp	#0
    181  fb1a		       d0 03		      bne	.game_death_return
    182  fb1c
    183  fb1c							; Show Game Over Screen
    184  fb1c		       20 a4 fb 	      jsr	OverInit
    185  fb1f
    186  fb1f				   .game_death_return
    187  fb1f		       60		      rts
    188  fb20
    189  fb20				   GameKernel
    190  fb20
    191  fb20							; Turn on display
    192  fb20		       a9 00		      lda	#0
    193  fb22		       85 01		      sta	VBLANK
    194  fb24
    195  fb24				   .game_kernel_score
    196  fb24
    197  fb24							; Draw Score on top first
    198  fb24		       20 a9 f4 	      jsr	ScoreDraw
    199  fb27
    200  fb27				   .game_kernel_objects_start
    201  fb27
    202  fb27							; Setup Drawing Objects
    203  fb27		       20 69 f5 	      jsr	WebDrawStart
    204  fb2a		       20 00 f7 	      jsr	SpiderDrawStart
    205  fb2d		       20 bd f8 	      jsr	LineDrawStart
    206  fb30		       20 06 fa 	      jsr	BugDrawStart
    207  fb33							;    jsr SwatterDrawStart
    208  fb33
    209  fb33							; Start Scanline Counter
    210  fb33		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    211  fb35							; The extra 5 is for processing overflow
    212  fb35
    213  fb35							; Half scanline counter in Temp+1
    214  fb35		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    215  fb37		       85 84		      sta	Temp+1
    216  fb39
    217  fb39				   .game_kernel_objects
    218  fb39
    219  fb39							; Draw Objects in order
    220  fb39
    221  fb39							;    jsr LineDraw
    222  fb39							;    jsr BugDraw
    223  fb39		       20 84 f5 	      jsr	WebDraw	; Every 6 lines
    224  fb3c
    225  fb3c		       85 02		      sta	WSYNC
    226  fb3e		       ca		      dex
    227  fb3f		       f0 34		      beq	.game_kernel_clean
    228  fb41
    229  fb41		       20 24 f7 	      jsr	SpiderDraw	; Every odd scanline
    230  fb44							;    jsr SwatterDraw
    231  fb44
    232  fb44		       85 02		      sta	WSYNC
    233  fb46		       c6 84		      dec	Temp+1
    234  fb48		       ca		      dex
    235  fb49		       f0 2a		      beq	.game_kernel_clean
    236  fb4b
    237  fb4b		       a5 84		      lda	Temp+1
    238  fb4d		       20 dd f8 	      jsr	LineDraw
    239  fb50		       20 23 fa 	      jsr	BugDraw
    240  fb53
    241  fb53							;    sta WSYNC
    242  fb53		       ca		      dex
    243  fb54		       f0 1f		      beq	.game_kernel_clean
    244  fb56
    245  fb56		       20 24 f7 	      jsr	SpiderDraw
    246  fb59							;    jsr SwatterDraw
    247  fb59
    248  fb59		       85 02		      sta	WSYNC
    249  fb5b		       c6 84		      dec	Temp+1
    250  fb5d		       ca		      dex
    251  fb5e		       f0 15		      beq	.game_kernel_clean
    252  fb60
    253  fb60		       a5 84		      lda	Temp+1
    254  fb62		       20 dd f8 	      jsr	LineDraw
    255  fb65		       20 23 fa 	      jsr	BugDraw
    256  fb68
    257  fb68							;    sta WSYNC
    258  fb68		       ca		      dex
    259  fb69		       f0 0a		      beq	.game_kernel_clean
    260  fb6b
    261  fb6b		       20 24 f7 	      jsr	SpiderDraw
    262  fb6e							;    jsr SwatterDraw
    263  fb6e
    264  fb6e		       85 02		      sta	WSYNC
    265  fb70		       c6 84		      dec	Temp+1
    266  fb72		       ca		      dex
    267  fb73		       d0 c4		      bne	.game_kernel_objects
    268  fb75
    269  fb75				   .game_kernel_clean
    270  fb75
    271  fb75		       20 a6 f5 	      jsr	WebClean
    272  fb78		       20 55 f7 	      jsr	SpiderClean
    273  fb7b		       20 f0 f8 	      jsr	LineClean
    274  fb7e		       20 40 fa 	      jsr	BugClean
    275  fb81							;    jsr SwatterClean
    276  fb81
    277  fb81		       85 02		      sta	WSYNC
    278  fb83
    279  fb83				   .game_kernel_return
    280  fb83		       60		      rts
    281  fb84
    282  fb84				   GameAudio0
    283  fb84		       0d		      .byte.b	#13	; D
    284  fb85		       ff		      .byte.b	#$FF
    285  fb86		       0f		      .byte.b	#15	; B
    286  fb87		       ff		      .byte.b	#$FF
    287  fb88		       0d		      .byte.b	#13	; D
    288  fb89		       ff		      .byte.b	#$FF
    289  fb8a		       0f		      .byte.b	#15	; B
    290  fb8b		       ff		      .byte.b	#$FF
    291  fb8c		       0d		      .byte.b	#13	; D
    292  fb8d		       0d		      .byte.b	#13	; D
    293  fb8e		       0f		      .byte.b	#15	; B
    294  fb8f		       ff		      .byte.b	#$FF
    295  fb90		       0c		      .byte.b	#12	; D#
    296  fb91		       ff		      .byte.b	#$FF
    297  fb92		       0f		      .byte.b	#15	; B
    298  fb93		       ff		      .byte.b	#$FF
    299  fb94		       0b		      .byte.b	#11	; E
    300  fb95		       ff		      .byte.b	#$FF
    301  fb96		       0e		      .byte.b	#14	; C#
    302  fb97		       ff		      .byte.b	#$FF
    303  fb98		       0b		      .byte.b	#11
    304  fb99		       ff		      .byte.b	#$FF
    305  fb9a		       0e		      .byte.b	#14
    306  fb9b		       ff		      .byte.b	#$FF
    307  fb9c		       0b		      .byte.b	#11
    308  fb9d		       0b		      .byte.b	#11
    309  fb9e		       0e		      .byte.b	#14
    310  fb9f		       ff		      .byte.b	#$FF
    311  fba0		       0b		      .byte.b	#11
    312  fba1		       ff		      .byte.b	#$FF
    313  fba2		       0e		      .byte.b	#14
    314  fba3		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fba4					      include	"over.asm"
      1  fba4							;================
      2  fba4							; Constants
      3  fba4							;================
      4  fba4
      5  fba4		       00 dc	   OVER_FRAMES =	220
      6  fba4
      7  fba4		       00 00	   OVER_BG_COLOR =	#$00
      8  fba4		       00 44	   OVER_FG_COLOR =	#$44
      9  fba4
     10  fba4		       00 07	   OVER_AUDIO_TONE =	7
     11  fba4		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fba4		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fba4		       00 10	   OVER_AUDIO_STEP =	16
     14  fba4
     15  fba4		       00 09	   OVER_IMAGE_SIZE =	9
     16  fba4		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fba4		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fba4		       00 35	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fba4
     20  fba4				   OverInit
     21  fba4
     22  fba4							; Setup logic and kernel
      0  fba4					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fba4				   .POINTER   SET	VBlankPtr
      2  fba4				   .ADDRESS   SET	OverVerticalBlank
      3  fba4
      4  fba4		       a9 e6		      LDA	#<.ADDRESS
      5  fba6		       85 87		      STA	.POINTER
      6  fba8		       a9 fb		      LDA	#>.ADDRESS
      7  fbaa		       85 88		      STA	.POINTER+1
      8  fbac
      0  fbac					      SET_POINTER	KernelPtr, OverKernel
      1  fbac				   .POINTER   SET	KernelPtr
      2  fbac				   .ADDRESS   SET	OverKernel
      3  fbac
      4  fbac		       a9 24		      LDA	#<.ADDRESS
      5  fbae		       85 89		      STA	.POINTER
      6  fbb0		       a9 fc		      LDA	#>.ADDRESS
      7  fbb2		       85 8a		      STA	.POINTER+1
      8  fbb4
      0  fbb4					      SET_POINTER	OverScanPtr, OverOverScan
      1  fbb4				   .POINTER   SET	OverScanPtr
      2  fbb4				   .ADDRESS   SET	OverOverScan
      3  fbb4
      4  fbb4		       a9 ea		      LDA	#<.ADDRESS
      5  fbb6		       85 8b		      STA	.POINTER
      6  fbb8		       a9 fb		      LDA	#>.ADDRESS
      7  fbba		       85 8c		      STA	.POINTER+1
      8  fbbc
     26  fbbc
     27  fbbc							; Load Colors
     28  fbbc		       a9 00		      lda	#OVER_BG_COLOR
     29  fbbe		       85 09		      sta	COLUBK
     30  fbc0		       a9 44		      lda	#OVER_FG_COLOR
     31  fbc2		       85 08		      sta	COLUPF
     32  fbc4
     33  fbc4							; Load audio settings
     34  fbc4		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fbc6		       85 15		      sta	AUDC0
     36  fbc8		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fbca		       85 19		      sta	AUDV0
     38  fbcc		       a9 00		      lda	#0
     39  fbce		       85 16		      sta	AUDC1
     40  fbd0		       85 1a		      sta	AUDV1
     41  fbd2		       a9 00		      lda	#0
     42  fbd4		       85 8f		      sta	AudioStep
     43  fbd6
     44  fbd6							; Play first note
     45  fbd6		       ad 76 fc 	      lda	OverAudio0,AudioStep
     46  fbd9		       85 17		      sta	AUDF0
     47  fbdb
     48  fbdb							; Setup frame counters
     49  fbdb		       a9 00		      lda	#0
     50  fbdd		       85 8d		      sta	Frame
     51  fbdf		       a9 10		      lda	#OVER_AUDIO_STEP
     52  fbe1		       85 8e		      sta	FrameTimer
     53  fbe3		       85 84		      sta	Temp+1
     54  fbe5
     55  fbe5		       60		      rts
     56  fbe6
     57  fbe6				   OverVerticalBlank
     58  fbe6		       20 89 f4 	      jsr	ScoreUpdate
     59  fbe9		       60		      rts
     60  fbea
     61  fbea				   OverOverScan
     62  fbea		       20 f1 fb 	      jsr	OverAudio
     63  fbed		       20 1a fc 	      jsr	OverState
     64  fbf0		       60		      rts
     65  fbf1
     66  fbf1				   OverAudio
     67  fbf1
     68  fbf1		       a6 8e		      ldx	FrameTimer
     69  fbf3		       e0 00		      cpx	#0
     70  fbf5		       d0 22		      bne	.over_audio_return
     71  fbf7
     72  fbf7							; Reset Timer
     73  fbf7		       a6 84		      ldx	Temp+1
     74  fbf9					      REPEAT	3
     75  fbf9		       e8		      inx
     74  fbf9					      REPEND
     75  fbfa		       e8		      inx
     74  fbfa					      REPEND
     75  fbfb		       e8		      inx
     76  fbfc					      REPEND
     77  fbfc		       86 8e		      stx	FrameTimer
     78  fbfe		       86 84		      stx	Temp+1
     79  fc00
     80  fc00				   .over_audio_play
     81  fc00
     82  fc00							; Increment melody position
     83  fc00		       a4 8f		      ldy	AudioStep
     84  fc02		       c8		      iny
     85  fc03
     86  fc03		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  fc05		       f0 0c		      beq	.over_audio_mute_note
     88  fc07
     89  fc07				   .over_audio_play_note
     90  fc07
     91  fc07							; Save current position
     92  fc07		       84 8f		      sty	AudioStep
     93  fc09
     94  fc09							; Melody Line
     95  fc09		       b9 76 fc 	      lda	OverAudio0,y
     96  fc0c		       85 17		      sta	AUDF0
     97  fc0e		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  fc10		       85 19		      sta	AUDV0
     99  fc12
    100  fc12		       60		      rts
    101  fc13
    102  fc13				   .over_audio_mute_note
    103  fc13		       a9 00		      lda	#0
    104  fc15		       85 17		      sta	AUDF0
    105  fc17		       85 19		      sta	AUDV0
    106  fc19
    107  fc19				   .over_audio_return
    108  fc19		       60		      rts
    109  fc1a
    110  fc1a				   OverState
    111  fc1a		       a5 8d		      lda	Frame
    112  fc1c		       c9 dc		      cmp	#OVER_FRAMES
    113  fc1e		       d0 03		      bne	.over_state_return
    114  fc20
    115  fc20		       20 f5 f1 	      jsr	TitleInit
    116  fc23
    117  fc23				   .over_state_return
    118  fc23		       60		      rts
    119  fc24
    120  fc24				   OverKernel
    121  fc24
    122  fc24							; Turn on display
    123  fc24		       a9 00		      lda	#0
    124  fc26		       85 01		      sta	VBLANK
    125  fc28
    126  fc28				   .over_kernel_score
    127  fc28
    128  fc28							; Draw Score on top first (no update)
    129  fc28		       20 a9 f4 	      jsr	ScoreDraw
    130  fc2b
    131  fc2b				   .over_kernel_init
    132  fc2b							; Playfield Control
    133  fc2b		       a5 80		      lda	CtrlPf
    134  fc2d		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  fc2f		       09 01		      ora	#%00000001	; Set mirroring
    136  fc31		       85 80		      sta	CtrlPf
    137  fc33		       85 0a		      sta	CTRLPF
    138  fc35
    139  fc35				   .over_kernel_top_padding
    140  fc35							; Top Padding
    141  fc35		       20 54 fc 	      jsr	OverPadding
    142  fc38
    143  fc38				   .over_kernel_image
    144  fc38		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  fc3a
    146  fc3a				   .over_kernel_image_next
    147  fc3a		       bd 6d fc 	      lda	OverImagePF2,x
    148  fc3d		       85 0f		      sta	PF2
    149  fc3f		       bd 64 fc 	      lda	OverImagePF1,x
    150  fc42		       85 0e		      sta	PF1
    151  fc44							;    lda OverImagePF0,x
    152  fc44							;    sta PF0
    153  fc44
    154  fc44		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  fc46				   .over_kernel_image_loop
    156  fc46		       85 02		      sta	WSYNC
    157  fc48		       88		      dey
    158  fc49		       d0 fb		      bne	.over_kernel_image_loop
    159  fc4b
    160  fc4b		       ca		      dex
    161  fc4c		       10 ec		      bpl	.over_kernel_image_next
    162  fc4e
    163  fc4e				   .over_kernel_bottom_padding
    164  fc4e							; Bottom Padding
    165  fc4e		       20 54 fc 	      jsr	OverPadding
    166  fc51
    167  fc51				   .over_kernel_return
    168  fc51		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  fc53		       60		      rts
    170  fc54
    171  fc54				   OverPadding
    172  fc54		       a9 00		      lda	#0
    173  fc56		       85 0d		      sta	PF0
    174  fc58		       85 0e		      sta	PF1
    175  fc5a		       85 0f		      sta	PF2
    176  fc5c
    177  fc5c		       a2 35		      ldx	#OVER_IMAGE_PADDING
    178  fc5e				   .over_padding_loop
    179  fc5e		       85 02		      sta	WSYNC
    180  fc60		       ca		      dex
    181  fc61		       d0 fb		      bne	.over_padding_loop
    182  fc63
    183  fc63		       60		      rts
    184  fc64
    185  fc64				   OverAssets
    186  fc64
    187  fc64							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  fc64					      include	"over_image.asm"
      1  fc64							;OverImagePF0:
      2  fc64							;    .BYTE %00000000
      3  fc64							;    .BYTE %00000000
      4  fc64							;    .BYTE %00000000
      5  fc64							;    .BYTE %00000000
      6  fc64							;    .BYTE %00000000
      7  fc64							;    .BYTE %00000000
      8  fc64							;    .BYTE %00000000
      9  fc64							;    .BYTE %00000000
     10  fc64							;    .BYTE %00000000
     11  fc64
     12  fc64				   OverImagePF1
     13  fc64		       0c		      .BYTE.b	%00001100
     14  fc65		       13		      .BYTE.b	%00010011
     15  fc66		       20		      .BYTE.b	%00100000
     16  fc67		       23		      .BYTE.b	%00100011
     17  fc68		       24		      .BYTE.b	%00100100
     18  fc69		       24		      .BYTE.b	%00100100
     19  fc6a		       12		      .BYTE.b	%00010010
     20  fc6b		       10		      .BYTE.b	%00010000
     21  fc6c		       08		      .BYTE.b	%00001000
     22  fc6d
     23  fc6d				   OverImagePF2
     24  fc6d		       e0		      .BYTE.b	%11100000
     25  fc6e		       18		      .BYTE.b	%00011000
     26  fc6f		       05		      .BYTE.b	%00000101
     27  fc70		       52		      .BYTE.b	%01010010
     28  fc71		       23		      .BYTE.b	%00100011
     29  fc72		       52		      .BYTE.b	%01010010
     30  fc73		       04		      .BYTE.b	%00000100
     31  fc74		       18		      .BYTE.b	%00011000
     32  fc75		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  fc76
    190  fc76				   OverAudio0
    191  fc76
    192  fc76		       0c		      .BYTE.b	#12	; D#2
    193  fc77		       0d		      .BYTE.b	#13	; D2
    194  fc78		       11		      .BYTE.b	#17	; A1
    195  fc79		       16		      .BYTE.b	#22	; F1
    196  fc7a		       1a		      .BYTE.b	#26	; D1
    197  fc7b		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    288  fc7c
    289  fc7c							;================
    290  fc7c							; End of cart
    291  fc7c							;================
    292  fc7c
    293  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    294  fffa
    295  fffa				   InterruptVectors
    296  fffa
    297  fffa		       21 f0		      .word.w	InitSystem	; NMI
    298  fffc		       21 f0		      .word.w	InitSystem	; RESET
    299  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    300  10000
    301  10000					       END
