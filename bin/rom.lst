------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 11th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00ca ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; Global
     53 U0080
     54 U0080		       00 00 00 00 Temp       ds	4
     55 U0084		       00	   Rand8      ds	1
     56 U0085		       00	   Rand16     ds	1
     57 U0086
     58 U0086		       00 00	   VBlankPtr  ds	2
     59 U0088		       00 00	   KernelPtr  ds	2
     60 U008a		       00 00	   OverScanPtr ds	2
     61 U008c
     62 U008c		       00	   Frame      ds	1
     63 U008d		       00 00	   FrameTimer ds	2
     64 U008f		       00	   InputState ds	1
     65 U0090
     66 U0090		       00	   AudioStep  ds	1
     67 U0091
     68 U0091		       00	   SampleStep ds	1
     69 U0092
     70 U0092							; Score
     71 U0092
     72 U0092		       00 00	   ScoreValue ds	2
     73 U0094		       00 00	   ScoreDigitOnes ds	2
     74 U0096		       00 00	   ScoreDigitTens ds	2
     75 U0098		       00 00 00    ScoreDigitGfx ds	3
     76 U009b		       00 00	   ScoreBarGfx ds	2
     77 U009d
     78 U009d							; Level
     79 U009d		       00	   LevelCurrent ds	1
     80 U009e
     81 U009e							; Web
     82 U009e
     83 U009e		       00	   WebIndex   ds	1
     84 U009f		       00 00	   WebColor   ds	2
     85 U00a1
     86 U00a1							; Spider
     87 U00a1
     88 U00a1		       00 00	   SpiderPtr  ds	2
     89 U00a3		       00 00	   SpiderPos  ds	2
     90 U00a5		       00	   SpiderCtrl ds	1
     91 U00a6		       00	   SpiderColor ds	1
     92 U00a7
     93 U00a7		       00	   SpiderIndex ds	1
     94 U00a8		       00	   SpiderDrawPos ds	1
     95 U00a9		       00	   SpiderLine ds	1
     96 U00aa
     97 U00aa		       00 00	   SpiderPtr2 ds	2
     98 U00ac
     99 U00ac							; Line
    100 U00ac
    101 U00ac		       00	   LineEnabled ds	1
    102 U00ad		       00 00	   LinePos    ds	2
    103 U00af		       00 00	   LineVelocity ds	2
    104 U00b1		       00 00	   LineDrawPos ds	2
    105 U00b3
    106 U00b3							; Bug
    107 U00b3
    108 U00b3		       00	   BugSpeed   ds	1
    109 U00b4
    110 U00b4		       00 00	   BugStunned ds	2
    111 U00b6		       00 00	   BugPosX    ds	2
    112 U00b8		       00 00	   BugPosY    ds	2
    113 U00ba
    114 U00ba		       00 00	   BugDrawPosBottom ds	2
    115 U00bc		       00 00	   BugDrawPosTop ds	2
    116 U00be
    117 U00be							; Swatter
    118 U00be
    119 U00be		       00 00	   SwatterPos ds	2
    120 U00c0		       00	   SwatterState ds	1
    121 U00c1		       00	   SwatterColor ds	1
    122 U00c2
    123 U00c2		       00	   SwatterWaitTime ds	1
    124 U00c3		       00	   SwatterHoldTime ds	1
    125 U00c4		       00	   SwatterHitDamage ds	1
    126 U00c5
    127 U00c5		       00	   SwatterIndex ds	1
    128 U00c6		       00	   SwatterDrawPos ds	1
    129 U00c7		       00	   SwatterLine ds	1
    130 U00c8
    131 U00c8		       00	   SwatterSampleCount ds	1
    132 U00c9		       00	   SwatterSampleF ds	1
    133 U00ca
    134  10000 ????				       SEG
    135  f000					      org	$F000	; Start of cart area
    136  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 84		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 85		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 84		      sta	Rand8
     49  f01e		       45 85		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 80		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 81		      sta	Temp+1
     70  f029		       85 82		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 80		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 81		      lda	Temp+1	; And add into result
     77  f031		       65 81		      adc	Temp+1
     78  f033		       85 81		      sta	Temp+1
     79  f035
     80  f035		       a5 82		      lda	Temp+2	; Propagating any carry
     81  f037		       65 82		      adc	Temp+2
     82  f039		       85 82		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 81		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 82		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    138  f044
    139  f044							; Assets
    140  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
------- FILE title_bug.asm LEVEL 2 PASS 2
      0  f0bc					      include	"title_bug.asm"
      1  f0bc				   TitleBug
      2  f0bc
      3  f0bc		       10		      .BYTE.b	%00010000
      4  f0bd		       57		      .BYTE.b	%01010111
      5  f0be		       4f		      .BYTE.b	%01001111
      6  f0bf		       3f		      .BYTE.b	%00111111
      7  f0c0		       19		      .BYTE.b	%00011001
      8  f0c1		       79		      .BYTE.b	%01111001
      9  f0c2		       8f		      .BYTE.b	%10001111
     10  f0c3		       97		      .BYTE.b	%10010111
     11  f0c4		       e0		      .BYTE.b	%11100000
     12  f0c5
     13  f0c5		       57		      .BYTE.b	%01010111
     14  f0c6		       4f		      .BYTE.b	%01001111
     15  f0c7		       3f		      .BYTE.b	%00111111
     16  f0c8		       19		      .BYTE.b	%00011001
     17  f0c9		       7d		      .BYTE.b	%01111101
     18  f0ca		       8f		      .BYTE.b	%10001111
     19  f0cb		       f7		      .BYTE.b	%11110111
     20  f0cc		       00		      .BYTE.b	%00000000
     21  f0cd		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    145  f0ce
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0ce					      include	"objects/score_digits.asm"
      1  f0ce				   ScoreDigits
      2  f0ce
      3  f0ce		       77		      .BYTE.b	%01110111
      4  f0cf		       55		      .BYTE.b	%01010101
      5  f0d0		       55		      .BYTE.b	%01010101
      6  f0d1		       55		      .BYTE.b	%01010101
      7  f0d2		       77		      .BYTE.b	%01110111
      8  f0d3
      9  f0d3		       11		      .BYTE.b	%00010001
     10  f0d4		       11		      .BYTE.b	%00010001
     11  f0d5		       11		      .BYTE.b	%00010001
     12  f0d6		       11		      .BYTE.b	%00010001
     13  f0d7		       11		      .BYTE.b	%00010001
     14  f0d8
     15  f0d8		       77		      .BYTE.b	%01110111
     16  f0d9		       11		      .BYTE.b	%00010001
     17  f0da		       77		      .BYTE.b	%01110111
     18  f0db		       44		      .BYTE.b	%01000100
     19  f0dc		       77		      .BYTE.b	%01110111
     20  f0dd
     21  f0dd		       77		      .BYTE.b	%01110111
     22  f0de		       11		      .BYTE.b	%00010001
     23  f0df		       33		      .BYTE.b	%00110011
     24  f0e0		       11		      .BYTE.b	%00010001
     25  f0e1		       77		      .BYTE.b	%01110111
     26  f0e2
     27  f0e2		       55		      .BYTE.b	%01010101
     28  f0e3		       55		      .BYTE.b	%01010101
     29  f0e4		       77		      .BYTE.b	%01110111
     30  f0e5		       11		      .BYTE.b	%00010001
     31  f0e6		       11		      .BYTE.b	%00010001
     32  f0e7
     33  f0e7		       77		      .BYTE.b	%01110111
     34  f0e8		       44		      .BYTE.b	%01000100
     35  f0e9		       77		      .BYTE.b	%01110111
     36  f0ea		       11		      .BYTE.b	%00010001
     37  f0eb		       77		      .BYTE.b	%01110111
     38  f0ec
     39  f0ec		       77		      .BYTE.b	%01110111
     40  f0ed		       44		      .BYTE.b	%01000100
     41  f0ee		       77		      .BYTE.b	%01110111
     42  f0ef		       55		      .BYTE.b	%01010101
     43  f0f0		       77		      .BYTE.b	%01110111
     44  f0f1
     45  f0f1		       77		      .BYTE.b	%01110111
     46  f0f2		       11		      .BYTE.b	%00010001
     47  f0f3		       22		      .BYTE.b	%00100010
     48  f0f4		       22		      .BYTE.b	%00100010
     49  f0f5		       22		      .BYTE.b	%00100010
     50  f0f6
     51  f0f6		       77		      .BYTE.b	%01110111
     52  f0f7		       55		      .BYTE.b	%01010101
     53  f0f8		       77		      .BYTE.b	%01110111
     54  f0f9		       55		      .BYTE.b	%01010101
     55  f0fa		       77		      .BYTE.b	%01110111
     56  f0fb
     57  f0fb		       77		      .BYTE.b	%01110111
     58  f0fc		       55		      .BYTE.b	%01010101
     59  f0fd		       77		      .BYTE.b	%01110111
     60  f0fe		       11		      .BYTE.b	%00010001
     61  f0ff		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f100					      include	"objects/score_digits_flip.asm"
      1  f100				   ScoreDigitsFlip
      2  f100
      3  f100		       ee		      .BYTE.b	%11101110
      4  f101		       aa		      .BYTE.b	%10101010
      5  f102		       aa		      .BYTE.b	%10101010
      6  f103		       aa		      .BYTE.b	%10101010
      7  f104		       ee		      .BYTE.b	%11101110
      8  f105
      9  f105		       88		      .BYTE.b	%10001000
     10  f106		       88		      .BYTE.b	%10001000
     11  f107		       88		      .BYTE.b	%10001000
     12  f108		       88		      .BYTE.b	%10001000
     13  f109		       88		      .BYTE.b	%10001000
     14  f10a
     15  f10a		       ee		      .BYTE.b	%11101110
     16  f10b		       88		      .BYTE.b	%10001000
     17  f10c		       ee		      .BYTE.b	%11101110
     18  f10d		       22		      .BYTE.b	%00100010
     19  f10e		       ee		      .BYTE.b	%11101110
     20  f10f
     21  f10f		       ee		      .BYTE.b	%11101110
     22  f110		       88		      .BYTE.b	%10001000
     23  f111		       cc		      .BYTE.b	%11001100
     24  f112		       88		      .BYTE.b	%10001000
     25  f113		       ee		      .BYTE.b	%11101110
     26  f114
     27  f114		       aa		      .BYTE.b	%10101010
     28  f115		       aa		      .BYTE.b	%10101010
     29  f116		       ee		      .BYTE.b	%11101110
     30  f117		       88		      .BYTE.b	%10001000
     31  f118		       88		      .BYTE.b	%10001000
     32  f119
     33  f119		       ee		      .BYTE.b	%11101110
     34  f11a		       22		      .BYTE.b	%00100010
     35  f11b		       ee		      .BYTE.b	%11101110
     36  f11c		       88		      .BYTE.b	%10001000
     37  f11d		       ee		      .BYTE.b	%11101110
     38  f11e
     39  f11e		       ee		      .BYTE.b	%11101110
     40  f11f		       22		      .BYTE.b	%00100010
     41  f120		       ee		      .BYTE.b	%11101110
     42  f121		       aa		      .BYTE.b	%10101010
     43  f122		       ee		      .BYTE.b	%11101110
     44  f123
     45  f123		       ee		      .BYTE.b	%11101110
     46  f124		       88		      .BYTE.b	%10001000
     47  f125		       44		      .BYTE.b	%01000100
     48  f126		       44		      .BYTE.b	%01000100
     49  f127		       44		      .BYTE.b	%01000100
     50  f128
     51  f128		       ee		      .BYTE.b	%11101110
     52  f129		       aa		      .BYTE.b	%10101010
     53  f12a		       ee		      .BYTE.b	%11101110
     54  f12b		       aa		      .BYTE.b	%10101010
     55  f12c		       ee		      .BYTE.b	%11101110
     56  f12d
     57  f12d		       ee		      .BYTE.b	%11101110
     58  f12e		       aa		      .BYTE.b	%10101010
     59  f12f		       ee		      .BYTE.b	%11101110
     60  f130		       88		      .BYTE.b	%10001000
     61  f131		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f132					      include	"objects/score_label.asm"
      1  f132				   ScoreLabel
      2  f132
      3  f132		       20		      .BYTE.b	%00100000
      4  f133		       50		      .BYTE.b	%01010000
      5  f134		       ee		      .BYTE.b	%11101110
      6  f135		       00		      .BYTE.b	%00000000
      7  f136		       57		      .BYTE.b	%01010111
      8  f137		       00		      .BYTE.b	%00000000
      9  f138
     10  f138		       20		      .BYTE.b	%00100000
     11  f139		       50		      .BYTE.b	%01010000
     12  f13a		       4a		      .BYTE.b	%01001010
     13  f13b		       00		      .BYTE.b	%00000000
     14  f13c		       55		      .BYTE.b	%01010101
     15  f13d		       00		      .BYTE.b	%00000000
     16  f13e
     17  f13e		       20		      .BYTE.b	%00100000
     18  f13f		       50		      .BYTE.b	%01010000
     19  f140		       4e		      .BYTE.b	%01001110
     20  f141		       00		      .BYTE.b	%00000000
     21  f142		       77		      .BYTE.b	%01110111
     22  f143		       00		      .BYTE.b	%00000000
     23  f144
     24  f144		       20		      .BYTE.b	%00100000
     25  f145		       50		      .BYTE.b	%01010000
     26  f146		       42		      .BYTE.b	%01000010
     27  f147		       00		      .BYTE.b	%00000000
     28  f148		       54		      .BYTE.b	%01010100
     29  f149		       00		      .BYTE.b	%00000000
     30  f14a
     31  f14a		       e0		      .BYTE.b	%11100000
     32  f14b		       20		      .BYTE.b	%00100000
     33  f14c		       42		      .BYTE.b	%01000010
     34  f14d		       00		      .BYTE.b	%00000000
     35  f14e		       54		      .BYTE.b	%01010100
     36  f14f		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    149  f150
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f150					      include	"objects/web_image.asm"
      1  f150				   WebImagePF0
      2  f150		       00		      .BYTE.b	%00000000
      3  f151		       00		      .BYTE.b	%00000000
      4  f152		       00		      .BYTE.b	%00000000
      5  f153		       00		      .BYTE.b	%00000000
      6  f154		       00		      .BYTE.b	%00000000
      7  f155		       00		      .BYTE.b	%00000000
      8  f156		       00		      .BYTE.b	%00000000
      9  f157		       00		      .BYTE.b	%00000000
     10  f158		       30		      .BYTE.b	%00110000
     11  f159		       e0		      .BYTE.b	%11100000
     12  f15a		       20		      .BYTE.b	%00100000
     13  f15b		       40		      .BYTE.b	%01000000
     14  f15c		       40		      .BYTE.b	%01000000
     15  f15d		       80		      .BYTE.b	%10000000
     16  f15e		       80		      .BYTE.b	%10000000
     17  f15f		       40		      .BYTE.b	%01000000
     18  f160		       40		      .BYTE.b	%01000000
     19  f161		       20		      .BYTE.b	%00100000
     20  f162		       e0		      .BYTE.b	%11100000
     21  f163		       30		      .BYTE.b	%00110000
     22  f164		       00		      .BYTE.b	%00000000
     23  f165		       00		      .BYTE.b	%00000000
     24  f166		       00		      .BYTE.b	%00000000
     25  f167		       00		      .BYTE.b	%00000000
     26  f168		       00		      .BYTE.b	%00000000
     27  f169		       00		      .BYTE.b	%00000000
     28  f16a		       00		      .BYTE.b	%00000000
     29  f16b		       00		      .BYTE.b	%00000000
     30  f16c
     31  f16c				   WebImagePF1
     32  f16c		       02		      .BYTE.b	%00000010
     33  f16d		       01		      .BYTE.b	%00000001
     34  f16e		       00		      .BYTE.b	%00000000
     35  f16f		       00		      .BYTE.b	%00000000
     36  f170		       01		      .BYTE.b	%00000001
     37  f171		       01		      .BYTE.b	%00000001
     38  f172		       02		      .BYTE.b	%00000010
     39  f173		       0c		      .BYTE.b	%00001100
     40  f174		       30		      .BYTE.b	%00110000
     41  f175		       c0		      .BYTE.b	%11000000
     42  f176		       38		      .BYTE.b	%00111000
     43  f177		       07		      .BYTE.b	%00000111
     44  f178		       00		      .BYTE.b	%00000000
     45  f179		       00		      .BYTE.b	%00000000
     46  f17a		       00		      .BYTE.b	%00000000
     47  f17b		       00		      .BYTE.b	%00000000
     48  f17c		       07		      .BYTE.b	%00000111
     49  f17d		       38		      .BYTE.b	%00111000
     50  f17e		       c0		      .BYTE.b	%11000000
     51  f17f		       30		      .BYTE.b	%00110000
     52  f180		       0c		      .BYTE.b	%00001100
     53  f181		       02		      .BYTE.b	%00000010
     54  f182		       01		      .BYTE.b	%00000001
     55  f183		       01		      .BYTE.b	%00000001
     56  f184		       00		      .BYTE.b	%00000000
     57  f185		       00		      .BYTE.b	%00000000
     58  f186		       01		      .BYTE.b	%00000001
     59  f187		       02		      .BYTE.b	%00000010
     60  f188
     61  f188				   WebImagePF2
     62  f188		       08		      .BYTE.b	%00001000
     63  f189		       04		      .BYTE.b	%00000100
     64  f18a		       03		      .BYTE.b	%00000011
     65  f18b		       3f		      .BYTE.b	%00111111
     66  f18c		       c2		      .BYTE.b	%11000010
     67  f18d		       04		      .BYTE.b	%00000100
     68  f18e		       08		      .BYTE.b	%00001000
     69  f18f		       08		      .BYTE.b	%00001000
     70  f190		       10		      .BYTE.b	%00010000
     71  f191		       20		      .BYTE.b	%00100000
     72  f192		       20		      .BYTE.b	%00100000
     73  f193		       41		      .BYTE.b	%01000001
     74  f194		       8e		      .BYTE.b	%10001110
     75  f195		       f0		      .BYTE.b	%11110000
     76  f196		       f0		      .BYTE.b	%11110000
     77  f197		       8e		      .BYTE.b	%10001110
     78  f198		       41		      .BYTE.b	%01000001
     79  f199		       20		      .BYTE.b	%00100000
     80  f19a		       20		      .BYTE.b	%00100000
     81  f19b		       10		      .BYTE.b	%00010000
     82  f19c		       08		      .BYTE.b	%00001000
     83  f19d		       08		      .BYTE.b	%00001000
     84  f19e		       04		      .BYTE.b	%00000100
     85  f19f		       c2		      .BYTE.b	%11000010
     86  f1a0		       3f		      .BYTE.b	%00111111
     87  f1a1		       03		      .BYTE.b	%00000011
     88  f1a2		       04		      .BYTE.b	%00000100
     89  f1a3		       08		      .BYTE.b	%00001000
------- FILE kernel.asm
    151  f1a4
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f1a4					      include	"objects/spider_sprite.asm"
      1  f1a4				   SpiderSprite
      2  f1a4
      3  f1a4		       99		      .BYTE.b	%10011001
      4  f1a5		       bd		      .BYTE.b	%10111101
      5  f1a6		       bd		      .BYTE.b	%10111101
      6  f1a7		       bd		      .BYTE.b	%10111101
      7  f1a8		       7e		      .BYTE.b	%01111110
      8  f1a9		       3c		      .BYTE.b	%00111100
      9  f1aa		       18		      .BYTE.b	%00011000
     10  f1ab		       3c		      .BYTE.b	%00111100
     11  f1ac		       3c		      .BYTE.b	%00111100
     12  f1ad		       7e		      .BYTE.b	%01111110
     13  f1ae		       99		      .BYTE.b	%10011001
     14  f1af		       99		      .BYTE.b	%10011001
     15  f1b0		       bd		      .BYTE.b	%10111101
     16  f1b1		       db		      .BYTE.b	%11011011
     17  f1b2		       bd		      .BYTE.b	%10111101
     18  f1b3		       99		      .BYTE.b	%10011001
     19  f1b4
     20  f1b4		       c7		      .BYTE.b	%11000111
     21  f1b5		       c7		      .BYTE.b	%11000111
     22  f1b6		       28		      .BYTE.b	%00101000
     23  f1b7		       28		      .BYTE.b	%00101000
     24  f1b8		       3a		      .BYTE.b	%00111010
     25  f1b9		       7a		      .BYTE.b	%01111010
     26  f1ba		       fd		      .BYTE.b	%11111101
     27  f1bb		       ff		      .BYTE.b	%11111111
     28  f1bc		       ff		      .BYTE.b	%11111111
     29  f1bd		       fd		      .BYTE.b	%11111101
     30  f1be		       7a		      .BYTE.b	%01111010
     31  f1bf		       3a		      .BYTE.b	%00111010
     32  f1c0		       28		      .BYTE.b	%00101000
     33  f1c1		       28		      .BYTE.b	%00101000
     34  f1c2		       c7		      .BYTE.b	%11000111
     35  f1c3		       c7		      .BYTE.b	%11000111
     36  f1c4
     37  f1c4		       99		      .BYTE.b	%10011001
     38  f1c5		       bd		      .BYTE.b	%10111101
     39  f1c6		       db		      .BYTE.b	%11011011
     40  f1c7		       bd		      .BYTE.b	%10111101
     41  f1c8		       99		      .BYTE.b	%10011001
     42  f1c9		       99		      .BYTE.b	%10011001
     43  f1ca		       7e		      .BYTE.b	%01111110
     44  f1cb		       3c		      .BYTE.b	%00111100
     45  f1cc		       3c		      .BYTE.b	%00111100
     46  f1cd		       18		      .BYTE.b	%00011000
     47  f1ce		       3c		      .BYTE.b	%00111100
     48  f1cf		       7e		      .BYTE.b	%01111110
     49  f1d0		       bd		      .BYTE.b	%10111101
     50  f1d1		       bd		      .BYTE.b	%10111101
     51  f1d2		       bd		      .BYTE.b	%10111101
     52  f1d3		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    153  f1d4
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1d4					      include	"objects/swatter_sprite.asm"
      1  f1d4				   SwatterSprite
      2  f1d4
      3  f1d4		       18		      .BYTE.b	%00011000
      4  f1d5		       34		      .BYTE.b	%00110100
      5  f1d6		       2c		      .BYTE.b	%00101100
      6  f1d7		       34		      .BYTE.b	%00110100
      7  f1d8		       6a		      .BYTE.b	%01101010
      8  f1d9		       56		      .BYTE.b	%01010110
      9  f1da		       6a		      .BYTE.b	%01101010
     10  f1db		       56		      .BYTE.b	%01010110
     11  f1dc		       ab		      .BYTE.b	%10101011
     12  f1dd		       d5		      .BYTE.b	%11010101
     13  f1de		       ab		      .BYTE.b	%10101011
     14  f1df		       d5		      .BYTE.b	%11010101
     15  f1e0		       ab		      .BYTE.b	%10101011
     16  f1e1		       d5		      .BYTE.b	%11010101
     17  f1e2		       ab		      .BYTE.b	%10101011
     18  f1e3		       d5		      .BYTE.b	%11010101
     19  f1e4		       6a		      .BYTE.b	%01101010
     20  f1e5		       56		      .BYTE.b	%01010110
     21  f1e6		       3c		      .BYTE.b	%00111100
     22  f1e7		       3c		      .BYTE.b	%00111100
------- FILE kernel.asm
    155  f1e8
------- FILE logo_image.asm LEVEL 2 PASS 2
      0  f1e8					      include	"logo_image.asm"
      1  f1e8				   LogoImage1
      2  f1e8		       03		      .BYTE.b	%00000011
      3  f1e9		       03		      .BYTE.b	%00000011
      4  f1ea		       13		      .BYTE.b	%00010011
      5  f1eb		       33		      .BYTE.b	%00110011
      6  f1ec		       63		      .BYTE.b	%01100011
      7  f1ed		       c3		      .BYTE.b	%11000011
      8  f1ee		       c3		      .BYTE.b	%11000011
      9  f1ef		       63		      .BYTE.b	%01100011
     10  f1f0		       33		      .BYTE.b	%00110011
     11  f1f1		       13		      .BYTE.b	%00010011
     12  f1f2		       03		      .BYTE.b	%00000011
     13  f1f3		       03		      .BYTE.b	%00000011
     14  f1f4
     15  f1f4				   LogoImage2
     16  f1f4		       83		      .BYTE.b	%10000011
     17  f1f5		       c7		      .BYTE.b	%11000111
     18  f1f6		       ef		      .BYTE.b	%11101111
     19  f1f7		       6e		      .BYTE.b	%01101110
     20  f1f8		       6c		      .BYTE.b	%01101100
     21  f1f9		       6c		      .BYTE.b	%01101100
     22  f1fa		       6c		      .BYTE.b	%01101100
     23  f1fb		       6c		      .BYTE.b	%01101100
     24  f1fc		       6e		      .BYTE.b	%01101110
     25  f1fd		       ef		      .BYTE.b	%11101111
     26  f1fe		       c7		      .BYTE.b	%11000111
     27  f1ff		       83		      .BYTE.b	%10000011
     28  f200
     29  f200				   LogoImage3
     30  f200		       8f		      .BYTE.b	%10001111
     31  f201		       cf		      .BYTE.b	%11001111
     32  f202		       ef		      .BYTE.b	%11101111
     33  f203		       6d		      .BYTE.b	%01101101
     34  f204		       2c		      .BYTE.b	%00101100
     35  f205		       0c		      .BYTE.b	%00001100
     36  f206		       0c		      .BYTE.b	%00001100
     37  f207		       4c		      .BYTE.b	%01001100
     38  f208		       6d		      .BYTE.b	%01101101
     39  f209		       ef		      .BYTE.b	%11101111
     40  f20a		       cf		      .BYTE.b	%11001111
     41  f20b		       8f		      .BYTE.b	%10001111
     42  f20c
     43  f20c				   LogoImage4
     44  f20c		       00		      .BYTE.b	%00000000
     45  f20d		       01		      .BYTE.b	%00000001
     46  f20e		       13		      .BYTE.b	%00010011
     47  f20f		       33		      .BYTE.b	%00110011
     48  f210		       63		      .BYTE.b	%01100011
     49  f211		       c3		      .BYTE.b	%11000011
     50  f212		       c3		      .BYTE.b	%11000011
     51  f213		       63		      .BYTE.b	%01100011
     52  f214		       33		      .BYTE.b	%00110011
     53  f215		       13		      .BYTE.b	%00010011
     54  f216		       01		      .BYTE.b	%00000001
     55  f217		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    157  f218
    158  f218				   InitSystem
    159  f218
    160  f218				   .init_clean
    161  f218							; Resets RAM, TIA registers, and CPU registers
      0  f218					      CLEAN_START
      1  f218		       78		      sei
      2  f219		       d8		      cld
      3  f21a
      4  f21a		       a2 00		      ldx	#0
      5  f21c		       8a		      txa
      6  f21d		       a8		      tay
      7  f21e		       ca	   .CLEAR_STACK dex
      8  f21f		       9a		      txs
      9  f220		       48		      pha
     10  f221		       d0 fb		      bne	.CLEAR_STACK
     11  f223
    163  f223
    164  f223				   .init_tia
    165  f223							; Define default TIA register values
    166  f223
    167  f223							; Initialize copies
    168  f223							;    lda #0
    169  f223							;    sta CtrlPf
    170  f223							;    sta NuSiz0
    171  f223							;    sta NuSiz1
    172  f223
    173  f223							; Set background color
    174  f223							;    lda #$00	      ; Black
    175  f223							;    sta COLUBK
    176  f223
    177  f223							; Set the playfield and player color
    178  f223							;    lda #$0E	      ; White
    179  f223							;    sta COLUPF
    180  f223							;    sta COLUP0
    181  f223							;    sta COLUP1
    182  f223
    183  f223							; Playfield Control
    184  f223							;    lda #%00000001  ; 1 for mirroring
    185  f223							;    sta CtrlPf
    186  f223							;    sta CTRLPF
    187  f223
    188  f223							; Disable Game Elements
    189  f223							;    lda #$00
    190  f223							;    sta ENABL       ; Turn off ball
    191  f223							;    sta ENAM0       ; Turn off player 1 missile
    192  f223							;    sta ENAM1       ; Turn off player 2 missile
    193  f223							;    sta GRP0	      ; Turn off player 1
    194  f223							;    sta GRP1	      ; Turn off player 2
    195  f223
    196  f223							; Empty playfield
    197  f223							;    lda #%00000000
    198  f223							;    sta PF0
    199  f223							;    sta PF1
    200  f223							;    sta PF2
    201  f223
    202  f223				   .init_seed
    203  f223							; Seed the random number generator
    204  f223		       ad 84 02 	      lda	INTIM	; Unknown value
    205  f226		       85 84		      sta	Rand8	; Use as seed
    206  f228		       49 ff		      eor	#$FF	; Flip bits
    207  f22a		       85 85		      sta	Rand16	; Just in case INTIM was 0
    208  f22c
    209  f22c				   .init_game
    210  f22c
    211  f22c		       20 94 f2 	      jsr	LogoInit
    212  f22f
    213  f22f							;=======================================
    214  f22f							; Game Kernel
    215  f22f							;=======================================
    216  f22f
    217  f22f				   Main
    218  f22f
    219  f22f		       20 3e f2 	      jsr	VerticalSync
    220  f232		       20 57 f2 	      jsr	VerticalBlank
    221  f235		       20 6a f2 	      jsr	Kernel
    222  f238		       20 71 f2 	      jsr	OverScan
    223  f23b		       4c 2f f2 	      jmp	Main
    224  f23e
    225  f23e				   VerticalSync
    226  f23e
    227  f23e		       a9 00		      lda	#0
    228  f240		       85 01		      sta	VBLANK
    229  f242
    230  f242							; Turn on Vertical Sync signal and setup timer
    231  f242		       a9 02		      lda	#2
    232  f244		       85 00		      sta	VSYNC
    233  f246
    234  f246							; Increment frame count and reduce frame counter
    235  f246		       e6 8c		      inc	Frame
    236  f248		       c6 8d		      dec	FrameTimer
    237  f24a		       c6 8e		      dec	FrameTimer+1
    238  f24c
    239  f24c							; VSYNCH signal scanlines
    240  f24c					      REPEAT	#KERNEL_VSYNC
    241  f24c		       85 02		      sta	WSYNC
    240  f24c					      REPEND
    241  f24e		       85 02		      sta	WSYNC
    240  f24e					      REPEND
    241  f250		       85 02		      sta	WSYNC
    242  f252					      REPEND
    243  f252
    244  f252							; Turn off Vertical Sync signal
    245  f252		       a9 00		      lda	#0
    246  f254		       85 00		      sta	VSYNC
    247  f256
    248  f256				   .vsync_return
    249  f256		       60		      rts
    250  f257
    251  f257				   VerticalBlank
    252  f257							; Setup Timer
    253  f257		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    254  f259		       8d 96 02 	      sta	TIM64T
    255  f25c
    256  f25c				   .vblank_logic
    257  f25c							; Perform Game Logic
    258  f25c		       20 67 f2 	      jsr	.vblank_logic_call_ptr
    259  f25f
    260  f25f				   .vblank_loop
    261  f25f							; WSYNC until Timer is complete
    262  f25f		       85 02		      sta	WSYNC
    263  f261		       ad 84 02 	      lda	INTIM
    264  f264		       d0 f9		      bne	.vblank_loop
    265  f266
    266  f266				   .vblank_return
    267  f266		       60		      rts
    268  f267
    269  f267				   .vblank_logic_call_ptr
    270  f267		       6c 86 00 	      jmp	(VBlankPtr)
    271  f26a
    272  f26a				   Kernel
    273  f26a
    274  f26a							; Perform Selected Kernel
    275  f26a		       20 6e f2 	      jsr	.kernel_call_ptr
    276  f26d		       60		      rts
    277  f26e
    278  f26e				   .kernel_call_ptr
    279  f26e		       6c 88 00 	      jmp	(KernelPtr)
    280  f271
    281  f271				   OverScan
    282  f271
    283  f271							; End of screen, enter blanking
    284  f271		       a9 42		      lda	#%01000010
    285  f273		       85 01		      sta	VBLANK
    286  f275
    287  f275							; Setup Timer
    288  f275		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    289  f277		       8d 96 02 	      sta	TIM64T
    290  f27a
    291  f27a							;.overscan_reset:
    292  f27a							; Check for reset switch
    293  f27a		       ad 82 02 	      lda	SWCHB
    294  f27d		       4a		      lsr		; Push D0 to carry (C)
    295  f27e		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    296  f280
    297  f280							; Perform reset
    298  f280		       20 94 f2 	      jsr	LogoInit	; No need for logic
    299  f283		       4c 89 f2 	      jmp	.overscan_loop
    300  f286
    301  f286				   .overscan_logic
    302  f286							; Perform OverScan Logic
    303  f286		       20 91 f2 	      jsr	.overscan_logic_call_ptr
    304  f289
    305  f289				   .overscan_loop
    306  f289							; WSYNC until Timer is complete
    307  f289		       85 02		      sta	WSYNC
    308  f28b		       ad 84 02 	      lda	INTIM
    309  f28e		       d0 f9		      bne	.overscan_loop
    310  f290
    311  f290				   .overscan_return
    312  f290		       60		      rts
    313  f291
    314  f291				   .overscan_logic_call_ptr
    315  f291		       6c 8a 00 	      jmp	(OverScanPtr)
    316  f294
    317  f294							;================
    318  f294							; State Code
    319  f294							;================
    320  f294
------- FILE logo.asm LEVEL 2 PASS 2
      0  f294					      include	"logo.asm"
      1  f294							;================
      2  f294							; Constants
      3  f294							;================
      4  f294
      5  f294		       00 8c	   LOGO_FRAMES =	140
      6  f294
      7  f294		       00 00	   LOGO_BG_COLOR =	#$00
      8  f294		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f294		       00 00	   LOGO_BG_BW_COLOR =	#$00
     10  f294		       00 0e	   LOGO_FG_BW_COLOR =	#$0E
     11  f294
     12  f294		       00 0c	   LOGO_IMAGE_SIZE =	12
     13  f294		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     14  f294		       00 3c	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     15  f294		       00 42	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     16  f294		       00 38	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-10	; The extra 10 is for processing overflow
     17  f294		       00 06	   LOGO_IMAGE_ANIM_SPEED =	#6
     18  f294
     19  f294				   LogoInit
     20  f294
     21  f294							; Setup logic and kernel
      0  f294					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f294				   .POINTER   SET	VBlankPtr
      2  f294				   .ADDRESS   SET	LogoVerticalBlank
      3  f294
      4  f294		       a9 bf		      LDA	#<.ADDRESS
      5  f296		       85 86		      STA	.POINTER
      6  f298		       a9 f2		      LDA	#>.ADDRESS
      7  f29a		       85 87		      STA	.POINTER+1
      8  f29c
      0  f29c					      SET_POINTER	KernelPtr, LogoKernel
      1  f29c				   .POINTER   SET	KernelPtr
      2  f29c				   .ADDRESS   SET	LogoKernel
      3  f29c
      4  f29c		       a9 ed		      LDA	#<.ADDRESS
      5  f29e		       85 88		      STA	.POINTER
      6  f2a0		       a9 f2		      LDA	#>.ADDRESS
      7  f2a2		       85 89		      STA	.POINTER+1
      8  f2a4
      0  f2a4					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f2a4				   .POINTER   SET	OverScanPtr
      2  f2a4				   .ADDRESS   SET	LogoOverScan
      3  f2a4
      4  f2a4		       a9 c3		      LDA	#<.ADDRESS
      5  f2a6		       85 8a		      STA	.POINTER
      6  f2a8		       a9 f2		      LDA	#>.ADDRESS
      7  f2aa		       85 8b		      STA	.POINTER+1
      8  f2ac
     25  f2ac
     26  f2ac							; Clean audio
     27  f2ac		       a9 00		      lda	#0
     28  f2ae		       85 19		      sta	AUDV0
     29  f2b0		       85 1a		      sta	AUDV1
     30  f2b2
     31  f2b2							; Set initial button state
     32  f2b2							;    lda #0
     33  f2b2		       85 8f		      sta	InputState
     34  f2b4
     35  f2b4							; Setup frame counters
     36  f2b4							;    lda #0
     37  f2b4		       85 8c		      sta	Frame
     38  f2b6		       a9 8c		      lda	#LOGO_FRAMES
     39  f2b8		       85 8d		      sta	FrameTimer
     40  f2ba
     41  f2ba							; Setup Image Animation
     42  f2ba		       a9 0b		      lda	#LOGO_IMAGE_SIZE-1
     43  f2bc		       85 9e		      sta	WebIndex
     44  f2be
     45  f2be		       60		      rts
     46  f2bf
     47  f2bf				   LogoVerticalBlank
     48  f2bf		       20 c7 f2 	      jsr	LogoAnimation
     49  f2c2		       60		      rts
     50  f2c3
     51  f2c3				   LogoOverScan
     52  f2c3		       20 d8 f2 	      jsr	LogoState
     53  f2c6		       60		      rts
     54  f2c7
     55  f2c7				   LogoAnimation
     56  f2c7		       a5 8c		      lda	Frame
     57  f2c9		       c9 06		      cmp	#LOGO_IMAGE_ANIM_SPEED
     58  f2cb		       d0 0a		      bne	.logo_animation_return
     59  f2cd
     60  f2cd		       a9 00		      lda	#0
     61  f2cf		       85 8c		      sta	Frame
     62  f2d1
     63  f2d1		       a6 9e		      ldx	WebIndex
     64  f2d3		       f0 02		      beq	.logo_animation_return
     65  f2d5
     66  f2d5							; Add another visible line
     67  f2d5		       c6 9e		      dec	WebIndex
     68  f2d7
     69  f2d7				   .logo_animation_return
     70  f2d7		       60		      rts
     71  f2d8
     72  f2d8				   LogoState
     73  f2d8		       a5 8d		      lda	FrameTimer
     74  f2da		       f0 0d		      beq	.logo_state_next
     75  f2dc
     76  f2dc							; Check if Fire Button on controller 1 is released
     77  f2dc		       a5 0c		      lda	INPT4
     78  f2de		       30 05		      bmi	.logo_state_check
     79  f2e0
     80  f2e0				   .logo_state_on
     81  f2e0		       a9 01		      lda	#1
     82  f2e2		       85 8f		      sta	InputState
     83  f2e4		       60		      rts
     84  f2e5
     85  f2e5				   .logo_state_check
     86  f2e5		       a6 8f		      ldx	InputState
     87  f2e7		       f0 03		      beq	.logo_state_return
     88  f2e9
     89  f2e9				   .logo_state_next
     90  f2e9							; Button is released or timer runs out, load title screen
     91  f2e9		       20 7c f3 	      jsr	TitleInit
     92  f2ec
     93  f2ec				   .logo_state_return
     94  f2ec		       60		      rts
     95  f2ed
     96  f2ed				   LogoKernel
     97  f2ed
     98  f2ed							; Playfield Control
     99  f2ed		       a9 01		      lda	#%00000001	; Mirror
    100  f2ef							;sta CtrlPf
    101  f2ef		       85 0a		      sta	CTRLPF
    102  f2f1
    103  f2f1							; Load Colors
    104  f2f1		       ad 82 02 	      lda	SWCHB
    105  f2f4					      REPEAT	4
    106  f2f4		       4a		      lsr
    105  f2f4					      REPEND
    106  f2f5		       4a		      lsr
    105  f2f5					      REPEND
    106  f2f6		       4a		      lsr
    105  f2f6					      REPEND
    106  f2f7		       4a		      lsr
    107  f2f8					      REPEND
    108  f2f8		       90 07		      bcc	.logo_kernel_bw
    109  f2fa
    110  f2fa				   .logo_kernel_color
    111  f2fa		       a2 00		      ldx	#LOGO_BG_COLOR
    112  f2fc		       a0 c6		      ldy	#LOGO_FG_COLOR
    113  f2fe		       4c 05 f3 	      jmp	.logo_kernel_set
    114  f301
    115  f301				   .logo_kernel_bw
    116  f301		       a9 00		      lda	#LOGO_BG_BW_COLOR
    117  f303		       a9 0e		      lda	#LOGO_FG_BW_COLOR
    118  f305
    119  f305				   .logo_kernel_set
    120  f305		       86 09		      stx	COLUBK
    121  f307		       84 08		      sty	COLUPF
    122  f309
    123  f309				   .logo_kernel_start
    124  f309
    125  f309							; Turn on display
    126  f309		       a9 00		      lda	#0
    127  f30b		       85 01		      sta	VBLANK
    128  f30d
    129  f30d		       a4 9e		      ldy	WebIndex
    130  f30f		       d0 06		      bne	.logo_kernel_top_anim_padding
    131  f311
    132  f311				   .logo_kernel_top_padding
    133  f311							; Top Padding
    134  f311		       20 5f f3 	      jsr	LogoPadding
    135  f314		       4c 24 f3 	      jmp	.logo_kernel_image
    136  f317
    137  f317				   .logo_kernel_top_anim_padding
    138  f317		       20 6f f3 	      jsr	LogoAnimPadding
    139  f31a
    140  f31a				   .logo_kernel_image_animation_start
    141  f31a		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    142  f31c
    143  f31c				   .logo_kernel_image_animation_loop
    144  f31c		       85 02		      sta	WSYNC
    145  f31e		       ca		      dex
    146  f31f		       d0 fb		      bne	.logo_kernel_image_animation_loop
    147  f321
    148  f321		       88		      dey
    149  f322		       10 f6		      bpl	.logo_kernel_image_animation_start
    150  f324
    151  f324				   .logo_kernel_image
    152  f324
    153  f324		       a2 0b		      ldx	#LOGO_IMAGE_SIZE-1
    154  f326		       a0 03		      ldy	#LOGO_IMAGE_LINE_SIZE-2
    155  f328							; The extra 2 on line size is for processing overflow
    156  f328
    157  f328							;dex
    158  f328		       e4 9e		      cpx	WebIndex
    159  f32a		       90 2f		      bcc	.logo_kernel_bottom_padding
    160  f32c
    161  f32c				   .logo_kernel_image_line
    162  f32c		       85 02		      sta	WSYNC
    163  f32e
    164  f32e		       bd e8 f1 	      lda	LogoImage1,x
    165  f331		       85 0e		      sta	PF1
    166  f333		       bd f4 f1 	      lda	LogoImage2,x
    167  f336		       85 0f		      sta	PF2
    168  f338
      0  f338					      sleep	26
      1  f338				   .CYCLES    SET	26
      2  f338
      3  f338				  -	      IF	.CYCLES < 2
      4  f338				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f338				  -	      ERR
      6  f338					      ENDIF
      7  f338
      8  f338				  -	      IF	.CYCLES & 1
      9  f338				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f338				  -	      nop	0
     11  f338				  -	      ELSE
     12  f338				  -	      bit	VSYNC
     13  f338				  -	      ENDIF
     14  f338				  -.CYCLES    SET	.CYCLES - 3
     15  f338					      ENDIF
     16  f338
     17  f338					      REPEAT	.CYCLES / 2
     18  f338		       ea		      nop
     17  f338					      REPEND
     18  f339		       ea		      nop
     17  f339					      REPEND
     18  f33a		       ea		      nop
     17  f33a					      REPEND
     18  f33b		       ea		      nop
     17  f33b					      REPEND
     18  f33c		       ea		      nop
     17  f33c					      REPEND
     18  f33d		       ea		      nop
     17  f33d					      REPEND
     18  f33e		       ea		      nop
     17  f33e					      REPEND
     18  f33f		       ea		      nop
     17  f33f					      REPEND
     18  f340		       ea		      nop
     17  f340					      REPEND
     18  f341		       ea		      nop
     17  f341					      REPEND
     18  f342		       ea		      nop
     17  f342					      REPEND
     18  f343		       ea		      nop
     17  f343					      REPEND
     18  f344		       ea		      nop
     19  f345					      REPEND
    170  f345
    171  f345		       bd 00 f2 	      lda	LogoImage3,x
    172  f348		       85 0f		      sta	PF2
    173  f34a		       bd 0c f2 	      lda	LogoImage4,x
    174  f34d		       85 0e		      sta	PF1
    175  f34f
    176  f34f		       88		      dey
    177  f350		       d0 da		      bne	.logo_kernel_image_line
    178  f352
    179  f352		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    180  f354
    181  f354		       e4 9e		      cpx	WebIndex
    182  f356		       90 03		      bcc	.logo_kernel_bottom_padding
    183  f358
    184  f358		       ca		      dex
    185  f359		       10 d1		      bpl	.logo_kernel_image_line
    186  f35b
    187  f35b				   .logo_kernel_bottom_padding
    188  f35b							; Bottom Padding
    189  f35b		       20 5f f3 	      jsr	LogoPadding
    190  f35e
    191  f35e				   .logo_kernel_image_return
    192  f35e		       60		      rts
    193  f35f
    194  f35f				   LogoPadding
    195  f35f		       a9 00		      lda	#0
    196  f361		       85 0d		      sta	PF0
    197  f363		       85 0e		      sta	PF1
    198  f365		       85 0f		      sta	PF2
    199  f367
    200  f367		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    201  f369				   .logo_padding_loop
    202  f369		       85 02		      sta	WSYNC
    203  f36b		       ca		      dex
    204  f36c		       d0 fb		      bne	.logo_padding_loop
    205  f36e
    206  f36e		       60		      rts
    207  f36f
    208  f36f				   LogoAnimPadding
    209  f36f		       a9 00		      lda	#0
    210  f371		       85 0d		      sta	PF0
    211  f373		       85 0e		      sta	PF1
    212  f375		       85 0f		      sta	PF2
    213  f377
    214  f377		       a2 38		      ldx	#LOGO_IMAGE_ANIM_PADDING
    215  f379		       4c 69 f3 	      jmp	.logo_padding_loop
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f37c					      include	"title.asm"
      1  f37c							;================
      2  f37c							; Constants
      3  f37c							;================
      4  f37c
      5  f37c		       00 00	   TITLE_BG_COLOR =	#$00
      6  f37c		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f37c		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f37c		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f37c		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f37c
     11  f37c		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f37c		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f37c		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f37c		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f37c		       00 09	   TITLE_AUDIO_STEP =	9
     16  f37c
     17  f37c		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f37c		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f37c		       00 07	   TITLE_LABEL_LINE =	7
     20  f37c
     21  f37c		       00 10	   TITLE_GAP_SIZE =	#16
     22  f37c
     23  f37c		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f37c		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f37c		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f37c
     27  f37c				   TitleInit
     28  f37c
     29  f37c							; Setup logic and kernel
      0  f37c					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f37c				   .POINTER   SET	VBlankPtr
      2  f37c				   .ADDRESS   SET	TitleVerticalBlank
      3  f37c
      4  f37c		       a9 cd		      LDA	#<.ADDRESS
      5  f37e		       85 86		      STA	.POINTER
      6  f380		       a9 f3		      LDA	#>.ADDRESS
      7  f382		       85 87		      STA	.POINTER+1
      8  f384
      0  f384					      SET_POINTER	KernelPtr, TitleKernel
      1  f384				   .POINTER   SET	KernelPtr
      2  f384				   .ADDRESS   SET	TitleKernel
      3  f384
      4  f384		       a9 da		      LDA	#<.ADDRESS
      5  f386		       85 88		      STA	.POINTER
      6  f388		       a9 f4		      LDA	#>.ADDRESS
      7  f38a		       85 89		      STA	.POINTER+1
      8  f38c
      0  f38c					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f38c				   .POINTER   SET	OverScanPtr
      2  f38c				   .ADDRESS   SET	TitleOverScan
      3  f38c
      4  f38c		       a9 90		      LDA	#<.ADDRESS
      5  f38e		       85 8a		      STA	.POINTER
      6  f390		       a9 f4		      LDA	#>.ADDRESS
      7  f392		       85 8b		      STA	.POINTER+1
      8  f394
     33  f394
     34  f394							; Load audio settings
     35  f394
     36  f394							; Melody Line
     37  f394		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f396		       85 15		      sta	AUDC0
     39  f398		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f39a		       85 19		      sta	AUDV0
     41  f39c
     42  f39c							; Drums and Bass
     43  f39c		       a9 00		      lda	#0
     44  f39e							;sta AUDC1
     45  f39e		       85 1a		      sta	AUDV1
     46  f3a0
     47  f3a0							; Make it so that we play the first note immediately
     48  f3a0		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f3a2		       85 90		      sta	AudioStep
     50  f3a4		       a9 01		      lda	#1
     51  f3a6		       85 8d		      sta	FrameTimer
     52  f3a8
     53  f3a8							; Setup Spider Sprite
      0  f3a8					      SET_POINTER	SpiderPtr, TitleSpider
      1  f3a8				   .POINTER   SET	SpiderPtr
      2  f3a8				   .ADDRESS   SET	TitleSpider
      3  f3a8
      4  f3a8		       a9 aa		      LDA	#<.ADDRESS
      5  f3aa		       85 a1		      STA	.POINTER
      6  f3ac		       a9 f0		      LDA	#>.ADDRESS
      7  f3ae		       85 a2		      STA	.POINTER+1
      8  f3b0
     55  f3b0
     56  f3b0		       a9 16		      lda	#%00010110	; Triple Sprite and 2 clock size missle0
     57  f3b2		       85 04		      sta	NUSIZ0
     58  f3b4		       a9 06		      lda	#%00000110	; Triple Sprite
     59  f3b6		       85 05		      sta	NUSIZ1
     60  f3b8
     61  f3b8		       a9 00		      lda	#0	; No reflect
     62  f3ba		       85 0b		      sta	REFP0
     63  f3bc		       a9 ff		      lda	#$FF	; Reflect P1
     64  f3be		       85 0c		      sta	REFP1
     65  f3c0
     66  f3c0		       a9 00		      lda	#0
     67  f3c2		       85 a8		      sta	SpiderDrawPos	; Initialize animation state
     68  f3c4
     69  f3c4							; Disable at start
     70  f3c4		       a9 00		      lda	#0
     71  f3c6		       85 1d		      sta	ENAM0
     72  f3c8
     73  f3c8							; Set initial button state
     74  f3c8							;lda #0
     75  f3c8		       85 8f		      sta	InputState
     76  f3ca
     77  f3ca							; Set initial select state
     78  f3ca		       85 82		      sta	Temp+2
     79  f3cc
     80  f3cc		       60		      rts
     81  f3cd
     82  f3cd				   TitleVerticalBlank
     83  f3cd
     84  f3cd							; Refresh random values
     85  f3cd		       20 13 f0 	      jsr	Random
     86  f3d0
     87  f3d0		       20 da f3 	      jsr	TitlePosition
     88  f3d3		       20 f4 f3 	      jsr	TitleAnimation
     89  f3d6		       20 71 f4 	      jsr	TitleColor
     90  f3d9
     91  f3d9		       60		      rts
     92  f3da
     93  f3da				   TitlePosition
     94  f3da
     95  f3da							; Position Spider
     96  f3da		       a2 00		      ldx	#0	; Object (player0)
     97  f3dc		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
     98  f3de		       20 00 f0 	      jsr	PosObject
     99  f3e1
    100  f3e1		       a2 01		      ldx	#1	; Object (player1)
    101  f3e3		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    102  f3e5		       20 00 f0 	      jsr	PosObject
    103  f3e8
    104  f3e8							; Position Web Line
    105  f3e8		       a2 02		      ldx	#2	; Object (missle0)
    106  f3ea		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    107  f3ec		       20 00 f0 	      jsr	PosObject
    108  f3ef
    109  f3ef		       85 02		      sta	WSYNC
    110  f3f1		       85 2a		      sta	HMOVE
    111  f3f3
    112  f3f3		       60		      rts
    113  f3f4
    114  f3f4				   TitleAnimation
    115  f3f4
    116  f3f4		       ad 82 02 	      lda	SWCHB
    117  f3f7		       29 02		      and	#%00000010
    118  f3f9		       d0 09		      bne	.title_animation_state_check
    119  f3fb
    120  f3fb		       a5 82		      lda	Temp+2
    121  f3fd
    122  f3fd				   .title_animation_state_on
    123  f3fd		       09 40		      ora	#%01000000
    124  f3ff		       85 82		      sta	Temp+2
    125  f401		       4c 17 f4 	      jmp	.title_animation_load
    126  f404
    127  f404				   .title_animation_state_check
    128  f404		       24 82		      bit	Temp+2
    129  f406		       50 0f		      bvc	.title_animation_load
    130  f408
    131  f408		       a5 82		      lda	Temp+2
    132  f40a		       29 bf		      and	#%10111111
    133  f40c
    134  f40c				   .title_animation_state_swap
    135  f40c		       10 05		      bpl	.title_animation_state_bug
    136  f40e
    137  f40e				   .title_animation_state_spider
    138  f40e		       29 7f		      and	#%01111111
    139  f410		       4c 15 f4 	      jmp	.title_animation_state_set
    140  f413
    141  f413				   .title_animation_state_bug
    142  f413		       09 80		      ora	#%10000000
    143  f415
    144  f415				   .title_animation_state_set
    145  f415		       85 82		      sta	Temp+2
    146  f417
    147  f417				   .title_animation_load
    148  f417
    149  f417		       24 82		      bit	Temp+2
    150  f419		       30 2b		      bmi	.title_animation_bug
    151  f41b
    152  f41b				   .title_animation_spider
    153  f41b
    154  f41b		       a5 90		      lda	AudioStep
    155  f41d		       f0 0d		      beq	.title_animation_spider_1
    156  f41f		       c9 04		      cmp	#4
    157  f421		       f0 16		      beq	.title_animation_spider_2
    158  f423		       c9 09		      cmp	#9
    159  f425		       f0 05		      beq	.title_animation_spider_1
    160  f427		       c9 0c		      cmp	#12
    161  f429		       f0 0e		      beq	.title_animation_spider_2
    162  f42b		       60		      rts
    163  f42c
    164  f42c				   .title_animation_spider_1
      0  f42c					      SET_POINTER	SpiderPtr, TitleSpider
      1  f42c				   .POINTER   SET	SpiderPtr
      2  f42c				   .ADDRESS   SET	TitleSpider
      3  f42c
      4  f42c		       a9 aa		      LDA	#<.ADDRESS
      5  f42e		       85 a1		      STA	.POINTER
      6  f430		       a9 f0		      LDA	#>.ADDRESS
      7  f432		       85 a2		      STA	.POINTER+1
      8  f434
    166  f434		       a9 00		      lda	#0
    167  f436		       4c 6e f4 	      jmp	.title_animation_return
    168  f439
    169  f439				   .title_animation_spider_2
      0  f439					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f439				   .POINTER   SET	SpiderPtr
      2  f439				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f439
      4  f439		       a9 b3		      LDA	#<.ADDRESS
      5  f43b		       85 a1		      STA	.POINTER
      6  f43d		       a9 f0		      LDA	#>.ADDRESS
      7  f43f		       85 a2		      STA	.POINTER+1
      8  f441
    171  f441		       a9 01		      lda	#1
    172  f443		       4c 6e f4 	      jmp	.title_animation_return
    173  f446
    174  f446				   .title_animation_bug
    175  f446
    176  f446		       a5 90		      lda	AudioStep
    177  f448		       f0 0d		      beq	.title_animation_bug_1
    178  f44a		       c9 04		      cmp	#4
    179  f44c		       f0 16		      beq	.title_animation_bug_2
    180  f44e		       c9 09		      cmp	#9
    181  f450		       f0 05		      beq	.title_animation_bug_1
    182  f452		       c9 0c		      cmp	#12
    183  f454		       f0 0e		      beq	.title_animation_bug_2
    184  f456		       60		      rts
    185  f457
    186  f457				   .title_animation_bug_1
      0  f457					      SET_POINTER	SpiderPtr, TitleBug
      1  f457				   .POINTER   SET	SpiderPtr
      2  f457				   .ADDRESS   SET	TitleBug
      3  f457
      4  f457		       a9 bc		      LDA	#<.ADDRESS
      5  f459		       85 a1		      STA	.POINTER
      6  f45b		       a9 f0		      LDA	#>.ADDRESS
      7  f45d		       85 a2		      STA	.POINTER+1
      8  f45f
    188  f45f		       a9 00		      lda	#0
    189  f461		       4c 6e f4 	      jmp	.title_animation_return
    190  f464
    191  f464				   .title_animation_bug_2
      0  f464					      SET_POINTER	SpiderPtr, TitleBug+#TITLE_SPIDER_SIZE
      1  f464				   .POINTER   SET	SpiderPtr
      2  f464				   .ADDRESS   SET	TitleBug+#TITLE_SPIDER_SIZE
      3  f464
      4  f464		       a9 c5		      LDA	#<.ADDRESS
      5  f466		       85 a1		      STA	.POINTER
      6  f468		       a9 f0		      LDA	#>.ADDRESS
      7  f46a		       85 a2		      STA	.POINTER+1
      8  f46c
    193  f46c		       a9 01		      lda	#1
    194  f46e
    195  f46e				   .title_animation_return
    196  f46e		       85 a8		      sta	SpiderDrawPos
    197  f470		       60		      rts
    198  f471
    199  f471				   TitleColor
    200  f471
    201  f471							; Load Colors
    202  f471		       a9 00		      lda	#TITLE_BG_COLOR
    203  f473		       85 09		      sta	COLUBK
    204  f475		       a9 06		      lda	#TITLE_WEB_COLOR
    205  f477		       85 08		      sta	COLUPF
    206  f479
    207  f479							; Check b/w
    208  f479		       ad 82 02 	      lda	SWCHB
    209  f47c					      REPEAT	4
    210  f47c		       4a		      lsr
    209  f47c					      REPEND
    210  f47d		       4a		      lsr
    209  f47d					      REPEND
    210  f47e		       4a		      lsr
    209  f47e					      REPEND
    210  f47f		       4a		      lsr
    211  f480					      REPEND
    212  f480		       90 07		      bcc	.title_bw
    213  f482
    214  f482				   .title_color
    215  f482		       a9 56		      lda	#TITLE_SPIDER_COLOR
    216  f484		       85 06		      sta	COLUP0
    217  f486		       85 07		      sta	COLUP1
    218  f488
    219  f488		       60		      rts
    220  f489
    221  f489				   .title_bw
    222  f489							; Load B/W Colors
    223  f489		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    224  f48b		       85 06		      sta	COLUP0
    225  f48d		       85 07		      sta	COLUP1
    226  f48f
    227  f48f		       60		      rts
    228  f490
    229  f490				   TitleOverScan
    230  f490		       20 97 f4 	      jsr	TitleAudio
    231  f493		       20 c9 f4 	      jsr	TitleState
    232  f496		       60		      rts
    233  f497
    234  f497				   TitleAudio
    235  f497
    236  f497		       a6 8d		      ldx	FrameTimer
    237  f499		       d0 2d		      bne	.title_audio_return
    238  f49b
    239  f49b							; Reset Timer
    240  f49b		       a2 09		      ldx	#TITLE_AUDIO_STEP
    241  f49d		       86 8d		      stx	FrameTimer
    242  f49f
    243  f49f				   .title_audio_play
    244  f49f
    245  f49f							; Increment melody position
    246  f49f		       a4 90		      ldy	AudioStep
    247  f4a1		       c8		      iny
    248  f4a2
    249  f4a2							; Check if we're at the end of the melody
    250  f4a2		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    251  f4a4		       d0 02		      bne	.title_audio_play_note
    252  f4a6
    253  f4a6							; Loop our audio step
    254  f4a6		       a0 00		      ldy	#0
    255  f4a8
    256  f4a8				   .title_audio_play_note
    257  f4a8
    258  f4a8							; Save current position
    259  f4a8		       84 90		      sty	AudioStep
    260  f4aa
    261  f4aa							; Basic Melody Line
    262  f4aa		       b9 cb f5 	      lda	TitleAudio0,y
    263  f4ad		       85 17		      sta	AUDF0
    264  f4af
    265  f4af							; Drums and Bass
    266  f4af		       b9 db f5 	      lda	TitleTone1,y
    267  f4b2		       c9 ff		      cmp	#$FF
    268  f4b4		       f0 0e		      beq	.title_audio_play_note_1_mute
    269  f4b6
    270  f4b6		       85 16		      sta	AUDC1
    271  f4b8		       b9 eb f5 	      lda	TitleAudio1,y
    272  f4bb		       85 18		      sta	AUDF1
    273  f4bd		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    274  f4bf		       85 1a		      sta	AUDV1
    275  f4c1
    276  f4c1		       4c c8 f4 	      jmp	.title_audio_return
    277  f4c4
    278  f4c4				   .title_audio_play_note_1_mute
    279  f4c4
    280  f4c4		       a9 00		      lda	#0
    281  f4c6							;sta AUDF1
    282  f4c6							;sta AUDC1
    283  f4c6		       85 1a		      sta	AUDV1
    284  f4c8
    285  f4c8				   .title_audio_return
    286  f4c8		       60		      rts
    287  f4c9
    288  f4c9				   TitleState
    289  f4c9
    290  f4c9							; Check if Fire Button on controller 1 is released
    291  f4c9		       a5 0c		      lda	INPT4
    292  f4cb		       30 05		      bmi	.title_state_check
    293  f4cd
    294  f4cd				   .title_state_on
    295  f4cd		       a9 01		      lda	#1
    296  f4cf		       85 8f		      sta	InputState
    297  f4d1		       60		      rts
    298  f4d2
    299  f4d2				   .title_state_check
    300  f4d2		       a5 8f		      lda	InputState
    301  f4d4		       f0 03		      beq	.title_state_return
    302  f4d6
    303  f4d6				   .title_state_next
    304  f4d6							; Button is released, load up game
    305  f4d6		       20 3b fd 	      jsr	GameInit
    306  f4d9
    307  f4d9				   .title_state_return
    308  f4d9		       60		      rts
    309  f4da
    310  f4da				   TitleKernel
    311  f4da
    312  f4da							; Playfield Control
    313  f4da							;lda CtrlPf
    314  f4da							;and #%11111110  ; No mirroring
    315  f4da							;sta CtrlPf
    316  f4da		       a9 00		      lda	#%00000000
    317  f4dc		       85 0a		      sta	CTRLPF
    318  f4de
    319  f4de							; Turn on display
    320  f4de		       a9 00		      lda	#0
    321  f4e0		       85 01		      sta	VBLANK
    322  f4e2
    323  f4e2		       85 02		      sta	WSYNC
    324  f4e4
    325  f4e4				   TitleFrameTopDraw
    326  f4e4
    327  f4e4							; Start Counters
    328  f4e4		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    329  f4e6		       a0 00		      ldy	#0	; Image Counter
    330  f4e8
    331  f4e8				   .title_frame_top
    332  f4e8
    333  f4e8							; 76 machine cycles per scanline
    334  f4e8		       85 02		      sta	WSYNC
    335  f4ea
    336  f4ea				   .title_frame_top_load		; 66 cycles
    337  f4ea
    338  f4ea							; First half of image
    339  f4ea		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    340  f4ed		       85 0d		      sta	PF0	; 4
    341  f4ef		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    342  f4f2		       85 0e		      sta	PF1	; 4
    343  f4f4		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    344  f4f7		       85 0f		      sta	PF2	; 4
    345  f4f9
      0  f4f9					      sleep	6
      1  f4f9				   .CYCLES    SET	6
      2  f4f9
      3  f4f9				  -	      IF	.CYCLES < 2
      4  f4f9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4f9				  -	      ERR
      6  f4f9					      ENDIF
      7  f4f9
      8  f4f9				  -	      IF	.CYCLES & 1
      9  f4f9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4f9				  -	      nop	0
     11  f4f9				  -	      ELSE
     12  f4f9				  -	      bit	VSYNC
     13  f4f9				  -	      ENDIF
     14  f4f9				  -.CYCLES    SET	.CYCLES - 3
     15  f4f9					      ENDIF
     16  f4f9
     17  f4f9					      REPEAT	.CYCLES / 2
     18  f4f9		       ea		      nop
     17  f4f9					      REPEND
     18  f4fa		       ea		      nop
     17  f4fa					      REPEND
     18  f4fb		       ea		      nop
     19  f4fc					      REPEND
    347  f4fc
    348  f4fc							; Second half of image
    349  f4fc		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    350  f4ff		       85 0d		      sta	PF0	; 4
    351  f501		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    352  f504		       85 0e		      sta	PF1	; 4
    353  f506		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    354  f509		       85 0f		      sta	PF2	; 4
    355  f50b
    356  f50b				   .title_frame_top_index		; 4 cycles
    357  f50b
    358  f50b		       ca		      dex		; 2
    359  f50c		       d0 da		      bne	.title_frame_top	; 2
    360  f50e
    361  f50e				   .title_frame_top_index_next		; 6 cycles
    362  f50e
    363  f50e							; Restore scanline counter
    364  f50e		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    365  f510
    366  f510		       98		      tya		; 2
    367  f511		       18		      clc		; 2
    368  f512		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    369  f514		       a8		      tay		; 2
    370  f515
    371  f515		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    372  f517		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    373  f519		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    374  f51b		       85 08		      sta	COLUPF	; 4
    375  f51d		       ea		      nop		; 2
    376  f51e		       4c ea f4 	      jmp	.title_frame_top_load	; 3
    377  f521
    378  f521				   .title_frame_top_label_color_skip
    379  f521
    380  f521		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    381  f523		       d0 c3		      bne	.title_frame_top	; 2
    382  f525
    383  f525				   .title_frame_top_clean
    384  f525
    385  f525							; Clear out playfield
    386  f525		       a9 00		      lda	#0
    387  f527		       85 0d		      sta	PF0
    388  f529		       85 0e		      sta	PF1
    389  f52b		       85 0f		      sta	PF2
    390  f52d
    391  f52d				   TitleWebDraw
    392  f52d
    393  f52d		       24 82		      bit	Temp+2
    394  f52f		       30 05		      bmi	.title_web_bug
    395  f531
    396  f531				   .title_web_spider
    397  f531		       a9 02		      lda	#%00000010
    398  f533		       4c 38 f5 	      jmp	.title_web_set
    399  f536				   .title_web_bug
    400  f536		       a9 00		      lda	#%00000000
    401  f538				   .title_web_set
    402  f538		       85 1d		      sta	ENAM0
    403  f53a
    404  f53a		       a9 06		      lda	#TITLE_WEB_COLOR
    405  f53c		       85 06		      sta	COLUP0
    406  f53e
    407  f53e		       a2 10		      ldx	#TITLE_GAP_SIZE
    408  f540				   .title_web_gap
    409  f540		       ca		      dex
    410  f541		       85 02		      sta	WSYNC
    411  f543		       d0 fb		      bne	.title_web_gap
    412  f545
    413  f545				   TitleSpiderDraw
    414  f545
    415  f545		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    416  f547
    417  f547		       a5 a8		      lda	SpiderDrawPos
    418  f549		       c9 01		      cmp	#1
    419  f54b		       d0 0c		      bne	.title_spider_extra_web_disable
    420  f54d
    421  f54d				   .title_spider_extra_web_start
    422  f54d		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    423  f54f				   .title_spider_extra_web_loop
    424  f54f		       85 02		      sta	WSYNC
    425  f551		       ca		      dex
    426  f552		       d0 fb		      bne	.title_spider_extra_web_loop
    427  f554
    428  f554		       88		      dey
    429  f555		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    430  f557		       d0 f4		      bne	.title_spider_extra_web_start
    431  f559
    432  f559				   .title_spider_extra_web_disable
    433  f559		       a9 00		      lda	#0
    434  f55b		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    435  f55d
    436  f55d		       85 02		      sta	WSYNC
    437  f55f
    438  f55f		       85 1d		      sta	ENAM0
    439  f561
    440  f561							; Check b/w
    441  f561		       ad 82 02 	      lda	SWCHB
    442  f564					      REPEAT	4
    443  f564		       4a		      lsr
    442  f564					      REPEND
    443  f565		       4a		      lsr
    442  f565					      REPEND
    443  f566		       4a		      lsr
    442  f566					      REPEND
    443  f567		       4a		      lsr
    444  f568					      REPEND
    445  f568		       90 05		      bcc	.title_spider_bw
    446  f56a
    447  f56a				   .title_spider_color
    448  f56a		       a9 56		      lda	#TITLE_SPIDER_COLOR
    449  f56c		       4c 71 f5 	      jmp	.title_spider_color_set
    450  f56f				   .title_spider_bw
    451  f56f		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    452  f571				   .title_spider_color_set
    453  f571		       85 06		      sta	COLUP0
    454  f573
    455  f573				   .title_spider
    456  f573		       b1 a1		      lda	(SpiderPtr),y
    457  f575		       85 1b		      sta	GRP0
    458  f577		       85 1c		      sta	GRP1
    459  f579
    460  f579				   .title_spider_delay
    461  f579		       ca		      dex
    462  f57a		       85 02		      sta	WSYNC
    463  f57c		       d0 fb		      bne	.title_spider_delay
    464  f57e
    465  f57e				   .title_spider_index
    466  f57e		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    467  f580		       88		      dey
    468  f581		       10 f0		      bpl	.title_spider
    469  f583
    470  f583				   .title_spider_clean
    471  f583
    472  f583							; Clear sprites
    473  f583		       a9 00		      lda	#0
    474  f585		       85 1b		      sta	GRP0
    475  f587		       85 1c		      sta	GRP1
    476  f589
    477  f589				   TitleFrameBottomDraw
    478  f589
    479  f589							; Load Frame Color
    480  f589		       a9 06		      lda	#TITLE_WEB_COLOR
    481  f58b		       85 08		      sta	COLUPF
    482  f58d
    483  f58d							; Start Counters
    484  f58d		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    485  f58f		       a0 00		      ldy	#0	; Image Counter
    486  f591
    487  f591				   .title_frame_bottom
    488  f591
    489  f591							; 76 machine cycles per scanline
    490  f591		       85 02		      sta	WSYNC
    491  f593
    492  f593				   .title_frame_bottom_load		; 66 cycles
    493  f593
    494  f593							; First half of image
    495  f593		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    496  f596		       85 0d		      sta	PF0	; 4
    497  f598		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    498  f59b		       85 0e		      sta	PF1	; 4
    499  f59d		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    500  f5a0		       85 0f		      sta	PF2	; 4
    501  f5a2
      0  f5a2					      sleep	6
      1  f5a2				   .CYCLES    SET	6
      2  f5a2
      3  f5a2				  -	      IF	.CYCLES < 2
      4  f5a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5a2				  -	      ERR
      6  f5a2					      ENDIF
      7  f5a2
      8  f5a2				  -	      IF	.CYCLES & 1
      9  f5a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5a2				  -	      nop	0
     11  f5a2				  -	      ELSE
     12  f5a2				  -	      bit	VSYNC
     13  f5a2				  -	      ENDIF
     14  f5a2				  -.CYCLES    SET	.CYCLES - 3
     15  f5a2					      ENDIF
     16  f5a2
     17  f5a2					      REPEAT	.CYCLES / 2
     18  f5a2		       ea		      nop
     17  f5a2					      REPEND
     18  f5a3		       ea		      nop
     17  f5a3					      REPEND
     18  f5a4		       ea		      nop
     19  f5a5					      REPEND
    503  f5a5
    504  f5a5							; Second half of image
    505  f5a5		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    506  f5a8		       85 0d		      sta	PF0	; 4
    507  f5aa		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    508  f5ad		       85 0e		      sta	PF1	; 4
    509  f5af		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    510  f5b2		       85 0f		      sta	PF2	; 4
    511  f5b4
    512  f5b4				   .title_frame_bottom_index		; 4 cycles
    513  f5b4
    514  f5b4		       ca		      dex		; 2
    515  f5b5		       d0 da		      bne	.title_frame_bottom	; 2
    516  f5b7
    517  f5b7				   .title_frame_bottom_index_next		; 6 cycles
    518  f5b7
    519  f5b7							; Restore scanline counter
    520  f5b7		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    521  f5b9
    522  f5b9		       98		      tya		; 2
    523  f5ba		       18		      clc		; 2
    524  f5bb		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    525  f5bd		       a8		      tay		; 2
    526  f5be		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    527  f5c0		       d0 cf		      bne	.title_frame_bottom	; 2
    528  f5c2
    529  f5c2				   .title_frame_bottom_clean
    530  f5c2
    531  f5c2							; Clear out playfield
    532  f5c2		       a9 00		      lda	#0
    533  f5c4		       85 0d		      sta	PF0
    534  f5c6		       85 0e		      sta	PF1
    535  f5c8		       85 0f		      sta	PF2
    536  f5ca
    537  f5ca				   .title_kernel_return
    538  f5ca		       60		      rts
    539  f5cb
    540  f5cb				   TitleAudio0
    541  f5cb
    542  f5cb		       0f		      .BYTE.b	#15	; B
    543  f5cc		       13		      .BYTE.b	#19	; G
    544  f5cd		       17		      .BYTE.b	#23	; E
    545  f5ce		       13		      .BYTE.b	#19	; G
    546  f5cf		       0e		      .BYTE.b	#14	; C
    547  f5d0		       13		      .BYTE.b	#19
    548  f5d1		       17		      .BYTE.b	#23
    549  f5d2		       13		      .BYTE.b	#19
    550  f5d3		       0c		      .BYTE.b	#12	; D
    551  f5d4		       13		      .BYTE.b	#19
    552  f5d5		       17		      .BYTE.b	#23
    553  f5d6		       13		      .BYTE.b	#19
    554  f5d7		       0e		      .BYTE.b	#14	; C
    555  f5d8		       13		      .BYTE.b	#19
    556  f5d9		       17		      .BYTE.b	#23
    557  f5da		       13		      .BYTE.b	#19
    558  f5db
    559  f5db				   TitleTone1
    560  f5db
    561  f5db		       0f		      .BYTE.b	#15	; Electronic Rumble
    562  f5dc		       ff		      .BYTE.b	#$FF
    563  f5dd		       01		      .BYTE.b	#1	; Low Pure Tone
    564  f5de		       01		      .BYTE.b	#1
    565  f5df		       08		      .BYTE.b	#8	; White Noise
    566  f5e0		       01		      .BYTE.b	#1
    567  f5e1		       01		      .BYTE.b	#1
    568  f5e2		       ff		      .BYTE.b	#$FF
    569  f5e3		       ff		      .BYTE.b	#$FF
    570  f5e4		       0f		      .BYTE.b	#15
    571  f5e5		       ff		      .BYTE.b	#$FF
    572  f5e6		       ff		      .BYTE.b	#$FF
    573  f5e7		       08		      .BYTE.b	#8
    574  f5e8		       ff		      .BYTE.b	#$FF
    575  f5e9		       01		      .BYTE.b	#1
    576  f5ea		       01		      .BYTE.b	#1
    577  f5eb
    578  f5eb				   TitleAudio1
    579  f5eb
    580  f5eb		       1d		      .BYTE.b	#29	; Kick
    581  f5ec		       ff		      .BYTE.b	#$FF
    582  f5ed		       1f		      .BYTE.b	#31	; C
    583  f5ee		       1f		      .BYTE.b	#31
    584  f5ef		       07		      .BYTE.b	#7	; Snare
    585  f5f0		       1f		      .BYTE.b	#31
    586  f5f1		       1f		      .BYTE.b	#31
    587  f5f2		       ff		      .BYTE.b	#$FF
    588  f5f3		       ff		      .BYTE.b	#$FF
    589  f5f4		       1d		      .BYTE.b	#29
    590  f5f5		       ff		      .BYTE.b	#$FF
    591  f5f6		       ff		      .BYTE.b	#$FF
    592  f5f7		       07		      .BYTE.b	#7
    593  f5f8		       ff		      .BYTE.b	#$FF
    594  f5f9		       17		      .BYTE.b	#23	; F
    595  f5fa		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f5fb					      include	"game.asm"
      1  f5fb							;================
      2  f5fb							; Game
      3  f5fb							;================
      4  f5fb
      5  f5fb							; Constants
      6  f5fb
      7  f5fb		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f5fb		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f5fb		       00 09	   GAME_AUDIO_STEP =	9
     10  f5fb		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f5fb		       00 06	   GAME_AUDIO_TONE =	6
     12  f5fb
     13  f5fb							; Object Code
     14  f5fb
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f5fb					      include	"objects/level.asm"
      1  f5fb							;======================
      2  f5fb							; Level Logic
      3  f5fb							;======================
      4  f5fb
      5  f5fb							; Constants
      6  f5fb
      7  f5fb		       00 14	   LEVELS     =	20
      8  f5fb
      9  f5fb				   LevelInit
     10  f5fb
     11  f5fb							; Set beginning level by difficulty switches treated as binary
     12  f5fb		       ad 82 02 	      lda	SWCHB
     13  f5fe					      REPEAT	6	; shift to 0-3
     14  f5fe		       4a		      lsr
     13  f5fe					      REPEND
     14  f5ff		       4a		      lsr
     13  f5ff					      REPEND
     14  f600		       4a		      lsr
     13  f600					      REPEND
     14  f601		       4a		      lsr
     13  f601					      REPEND
     14  f602		       4a		      lsr
     13  f602					      REPEND
     14  f603		       4a		      lsr
     15  f604					      REPEND
     16  f604		       18		      clc		; multiply by 5
     17  f605		       85 80		      sta	Temp
     18  f607		       0a		      asl
     19  f608		       0a		      asl
     20  f609		       65 80		      adc	Temp
     21  f60b		       85 9d		      sta	LevelCurrent
     22  f60d
     23  f60d		       20 33 f6 	      jsr	LevelLoad
     24  f610
     25  f610		       60		      rts
     26  f611
     27  f611				   LevelUpdate
     28  f611
     29  f611							; Calculate Desired score: (level+2)*5
     30  f611		       a5 9d		      lda	LevelCurrent
     31  f613		       18		      clc
     32  f614		       69 02		      adc	#2	; +2
     33  f616		       85 80		      sta	Temp
     34  f618		       0a		      asl		; x2
     35  f619		       0a		      asl		; x2
     36  f61a		       65 80		      adc	Temp	; x1
     37  f61c
     38  f61c							; Check if score is high enough
     39  f61c		       c5 93		      cmp	ScoreValue+1
     40  f61e		       b0 0f		      bcs	.level_update_return
     41  f620
     42  f620							; Reset score
     43  f620		       a9 00		      lda	#0
     44  f622		       85 93		      sta	ScoreValue+1
     45  f624
     46  f624							; Check if we haven't reached the final level
     47  f624		       a5 9d		      lda	LevelCurrent
     48  f626		       c9 13		      cmp	#LEVELS-1
     49  f628		       b0 05		      bcs	.level_update_return
     50  f62a
     51  f62a		       e6 9d		      inc	LevelCurrent
     52  f62c		       20 33 f6 	      jsr	LevelLoad
     53  f62f
     54  f62f				   .level_update_return
     55  f62f
     56  f62f		       20 62 f6 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     57  f632
     58  f632		       60		      rts
     59  f633
     60  f633				   LevelLoad
     61  f633
     62  f633							; Bug Speed: level/4+2
     63  f633		       a5 9d		      lda	LevelCurrent
     64  f635		       4a		      lsr		; /2
     65  f636		       4a		      lsr		; /2
     66  f637		       69 02		      adc	#2
     67  f639		       85 b3		      sta	BugSpeed
     68  f63b
     69  f63b							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     70  f63b		       a9 14		      lda	#20
     71  f63d		       18		      clc
     72  f63e		       e5 9d		      sbc	LevelCurrent
     73  f640		       0a		      asl		; x2
     74  f641		       85 80		      sta	Temp
     75  f643		       0a		      asl		; x2
     76  f644		       0a		      asl		; x2
     77  f645		       65 80		      adc	Temp
     78  f647		       85 c2		      sta	SwatterWaitTime
     79  f649
     80  f649							; Swatter Hold Time: 60-(level*2)
     81  f649
     82  f649		       a5 9d		      lda	LevelCurrent
     83  f64b		       0a		      asl		; x2
     84  f64c		       85 80		      sta	Temp
     85  f64e		       a9 3c		      lda	#60
     86  f650		       18		      clc
     87  f651		       e5 80		      sbc	Temp
     88  f653		       85 c3		      sta	SwatterHoldTime
     89  f655
     90  f655							; Swatter Hit Damage: level*3+$10
     91  f655		       a5 9d		      lda	LevelCurrent
     92  f657		       18		      clc
     93  f658		       85 80		      sta	Temp
     94  f65a		       0a		      asl		; x2
     95  f65b		       65 80		      adc	Temp
     96  f65d		       69 10		      adc	#$10
     97  f65f		       85 c4		      sta	SwatterHitDamage
     98  f661
     99  f661		       60		      rts
    100  f662
    101  f662				   LevelLoadColor
    102  f662		       a4 9d		      ldy	LevelCurrent
    103  f664
    104  f664							; check b/w
    105  f664		       ad 82 02 	      lda	SWCHB
    106  f667					      REPEAT	4
    107  f667		       4a		      lsr
    106  f667					      REPEND
    107  f668		       4a		      lsr
    106  f668					      REPEND
    107  f669		       4a		      lsr
    106  f669					      REPEND
    107  f66a		       4a		      lsr
    108  f66b					      REPEND
    109  f66b		       90 0b		      bcc	.level_load_bw
    110  f66d
    111  f66d				   .level_load_color
    112  f66d
    113  f66d							; Background Color
    114  f66d		       b9 81 f6 	      lda	LevelDataBk,y
    115  f670		       85 9f		      sta	WebColor+0
    116  f672
    117  f672							; Web Color
    118  f672		       b9 95 f6 	      lda	LevelDataPf,y
    119  f675		       85 a0		      sta	WebColor+1
    120  f677
    121  f677		       60		      rts
    122  f678
    123  f678				   .level_load_bw
    124  f678
    125  f678							; Background Color
    126  f678		       a9 00		      lda	#WEB_BG_COLOR
    127  f67a		       85 9f		      sta	WebColor+0
    128  f67c
    129  f67c							; Web Color
    130  f67c		       a9 02		      lda	#WEB_FG_COLOR
    131  f67e		       85 a0		      sta	WebColor+1
    132  f680
    133  f680		       60		      rts
    134  f681
    135  f681							; Easy: 1-5
    136  f681							; Medium: 6-9
    137  f681							; Hard: 10-15
    138  f681							; Extreme: 16-19
    139  f681
    140  f681				   LevelDataBk		; Background Color
    141  f681		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    142  f682		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    143  f683		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    144  f684		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    145  f685		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    146  f686		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    147  f687		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    148  f688		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    149  f689		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    150  f68a		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    151  f68b		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    152  f68c		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    153  f68d		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    154  f68e		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    155  f68f		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    156  f690		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    157  f691		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    158  f692		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    159  f693		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    160  f694		       0c		      .BYTE.b	#$0C	; rgb(199, 199, 199)
    161  f695
    162  f695				   LevelDataPf		; Web Color
    163  f695		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    164  f696		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    165  f697		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    166  f698		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    167  f699		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    168  f69a		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    169  f69b		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    170  f69c		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    171  f69d		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    172  f69e		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    173  f69f		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    174  f6a0		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    175  f6a1		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    176  f6a2		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    177  f6a3		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    178  f6a4		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    179  f6a5		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    180  f6a6		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    181  f6a7		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    182  f6a8		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f6a9					      include	"objects/score.asm"
      1  f6a9							;======================
      2  f6a9							; Score (playfield)
      3  f6a9							;======================
      4  f6a9
      5  f6a9							; Constants
      6  f6a9
      7  f6a9		       00 00	   SCORE_BG_COLOR =	#$00
      8  f6a9		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f6a9		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f6a9		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f6a9		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f6a9		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f6a9
     14  f6a9		       00 05	   SCORE_LABEL_SIZE =	5
     15  f6a9		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f6a9		       00 02	   SCORE_LINE_SIZE =	2
     17  f6a9		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f6a9
     19  f6a9							; Initialization
     20  f6a9
     21  f6a9				   ScoreInit
     22  f6a9
     23  f6a9							; Health Score
     24  f6a9		       a9 ff		      lda	#$ff
     25  f6ab		       85 92		      sta	ScoreValue+0
     26  f6ad
     27  f6ad							; Game Score
     28  f6ad		       a9 00		      lda	#0
     29  f6af		       85 93		      sta	ScoreValue+1
     30  f6b1
     31  f6b1		       60		      rts
     32  f6b2
     33  f6b2							; Frame Update
     34  f6b2
     35  f6b2				   ScoreUpdate
     36  f6b2
     37  f6b2							; Current Level Digits
     38  f6b2		       a5 9d		      lda	LevelCurrent
     39  f6b4		       18		      clc
     40  f6b5		       69 01		      adc	#1
     41  f6b7		       a0 00		      ldy	#0
     42  f6b9		       20 ec f6 	      jsr	ScoreUpdateDigits
     43  f6bc
     44  f6bc							; Score Digits
     45  f6bc		       a5 93		      lda	ScoreValue+1
     46  f6be		       a0 01		      ldy	#1
     47  f6c0		       20 ec f6 	      jsr	ScoreUpdateDigits
     48  f6c3
     49  f6c3							; Health Bar
     50  f6c3		       a5 92		      lda	ScoreValue+0
     51  f6c5		       f0 1c		      beq	.score_update_bar_empty
     52  f6c7
     53  f6c7					      REPEAT	4
     54  f6c7		       4a		      lsr
     53  f6c7					      REPEND
     54  f6c8		       4a		      lsr
     53  f6c8					      REPEND
     54  f6c9		       4a		      lsr
     53  f6c9					      REPEND
     54  f6ca		       4a		      lsr
     55  f6cb					      REPEND
     56  f6cb		       c9 08		      cmp	#8
     57  f6cd		       b0 09		      bcs	.score_update_bar_top
     58  f6cf
     59  f6cf				   .score_update_bar_bottom
     60  f6cf		       aa		      tax
     61  f6d0		       bd 19 f8 	      lda	ScoreBar,x
     62  f6d3		       a0 00		      ldy	#$00
     63  f6d5		       4c e7 f6 	      jmp	.score_update_bar_store
     64  f6d8
     65  f6d8				   .score_update_bar_top
     66  f6d8		       29 07		      and	#%00000111
     67  f6da		       aa		      tax
     68  f6db		       a9 7f		      lda	#$7f
     69  f6dd		       bc 21 f8 	      ldy	ScoreBarFlip,x
     70  f6e0		       4c e7 f6 	      jmp	.score_update_bar_store
     71  f6e3
     72  f6e3				   .score_update_bar_empty
     73  f6e3		       a9 00		      lda	#0
     74  f6e5		       a0 00		      ldy	#0
     75  f6e7
     76  f6e7				   .score_update_bar_store
     77  f6e7		       85 9b		      sta	ScoreBarGfx+0
     78  f6e9		       84 9c		      sty	ScoreBarGfx+1
     79  f6eb
     80  f6eb				   .score_update_end
     81  f6eb		       60		      rts
     82  f6ec
     83  f6ec				   ScoreUpdateDigits		; Value in A, ScoreDigit index in Y
     84  f6ec
     85  f6ec		       84 83		      sty	Temp+3
     86  f6ee
     87  f6ee		       20 21 f0 	      jsr	BinBcdConvert
     88  f6f1
     89  f6f1							; Only use first byte
     90  f6f1		       8a		      txa
     91  f6f2		       29 0f		      and	#$0f
     92  f6f4		       a8		      tay
     93  f6f5		       8a		      txa
     94  f6f6		       29 f0		      and	#$f0
     95  f6f8					      REPEAT	4
     96  f6f8		       4a		      lsr
     95  f6f8					      REPEND
     96  f6f9		       4a		      lsr
     95  f6f9					      REPEND
     96  f6fa		       4a		      lsr
     95  f6fa					      REPEND
     96  f6fb		       4a		      lsr
     97  f6fc					      REPEND
     98  f6fc		       aa		      tax
     99  f6fd
    100  f6fd							; Adjust index positions by multiplying by 5
    101  f6fd		       8a		      txa
    102  f6fe		       85 80		      sta	Temp
    103  f700		       0a		      asl
    104  f701		       0a		      asl
    105  f702		       65 80		      adc	Temp
    106  f704		       a6 83		      ldx	Temp+3
    107  f706		       95 96		      sta	ScoreDigitTens,x
    108  f708
    109  f708		       98		      tya
    110  f709		       85 80		      sta	Temp
    111  f70b		       0a		      asl
    112  f70c		       0a		      asl
    113  f70d		       65 80		      adc	Temp
    114  f70f		       a4 83		      ldy	Temp+3
    115  f711		       99 94 00 	      sta	ScoreDigitOnes,y
    116  f714
    117  f714		       60		      rts
    118  f715
    119  f715							; Draw loop (uses SCORE_LINES scanlines)
    120  f715
    121  f715				   ScoreDraw
    122  f715
    123  f715							; Load Colors
    124  f715		       a9 00		      lda	#SCORE_BG_COLOR
    125  f717		       85 09		      sta	COLUBK
    126  f719		       a9 06		      lda	#SCORE_LABEL_COLOR
    127  f71b		       85 08		      sta	COLUPF
    128  f71d		       85 06		      sta	COLUP0
    129  f71f		       85 07		      sta	COLUP1
    130  f721
    131  f721							; Set Non-Mirror
    132  f721		       a9 02		      lda	#%00000010
    133  f723		       85 0a		      sta	CTRLPF
    134  f725
    135  f725		       a2 00		      ldx	#0
    136  f727				   .score_draw_label
    137  f727
    138  f727		       85 02		      sta	WSYNC
    139  f729
    140  f729							; First half of image
    141  f729		       bd 32 f1 	      lda	ScoreLabel+0,x	; 4
    142  f72c		       85 0d		      sta	PF0	; 3
    143  f72e		       bd 33 f1 	      lda	ScoreLabel+1,x
    144  f731		       85 0e		      sta	PF1
    145  f733		       bd 34 f1 	      lda	ScoreLabel+2,x
    146  f736		       85 0f		      sta	PF2
    147  f738
      0  f738					      sleep	8
      1  f738				   .CYCLES    SET	8
      2  f738
      3  f738				  -	      IF	.CYCLES < 2
      4  f738				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f738				  -	      ERR
      6  f738					      ENDIF
      7  f738
      8  f738				  -	      IF	.CYCLES & 1
      9  f738				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f738				  -	      nop	0
     11  f738				  -	      ELSE
     12  f738				  -	      bit	VSYNC
     13  f738				  -	      ENDIF
     14  f738				  -.CYCLES    SET	.CYCLES - 3
     15  f738					      ENDIF
     16  f738
     17  f738					      REPEAT	.CYCLES / 2
     18  f738		       ea		      nop
     17  f738					      REPEND
     18  f739		       ea		      nop
     17  f739					      REPEND
     18  f73a		       ea		      nop
     17  f73a					      REPEND
     18  f73b		       ea		      nop
     19  f73c					      REPEND
    149  f73c
    150  f73c							; Second half of image
    151  f73c							;lda ScoreLabel+3,x ; 4
    152  f73c		       a9 00		      lda	#0	; 2
    153  f73e		       85 0d		      sta	PF0	; 3
    154  f740		       bd 36 f1 	      lda	ScoreLabel+4,x
    155  f743		       85 0e		      sta	PF1
    156  f745		       bd 37 f1 	      lda	ScoreLabel+5,x
    157  f748		       85 0f		      sta	PF2
    158  f74a
    159  f74a		       8a		      txa
    160  f74b		       18		      clc
    161  f74c		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    162  f74e		       aa		      tax
    163  f74f		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    164  f751		       d0 d4		      bne	.score_draw_label
    165  f753
    166  f753							; Clear labels and setup color
    167  f753		       a9 00		      lda	#0
    168  f755		       85 0d		      sta	PF0
    169  f757		       85 0e		      sta	PF1
    170  f759		       85 0f		      sta	PF2
    171  f75b
    172  f75b		       85 02		      sta	WSYNC
    173  f75d
    174  f75d							; Load Colors
    175  f75d		       ad 82 02 	      lda	SWCHB
    176  f760					      REPEAT	4
    177  f760		       4a		      lsr
    176  f760					      REPEND
    177  f761		       4a		      lsr
    176  f761					      REPEND
    177  f762		       4a		      lsr
    176  f762					      REPEND
    177  f763		       4a		      lsr
    178  f764					      REPEND
    179  f764		       90 0d		      bcc	.score_draw_bw
    180  f766
    181  f766				   .score_draw_color
    182  f766		       a9 44		      lda	#SCORE_LEVEL_COLOR
    183  f768		       85 08		      sta	COLUPF
    184  f76a		       85 06		      sta	COLUP0
    185  f76c		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    186  f76e		       85 07		      sta	COLUP1
    187  f770
    188  f770		       4c 7d f7 	      jmp	.score_draw_digit_start
    189  f773
    190  f773				   .score_draw_bw
    191  f773		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    192  f775		       85 08		      sta	COLUPF
    193  f777		       85 06		      sta	COLUP0
    194  f779		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    195  f77b		       85 07		      sta	COLUP1
    196  f77d
    197  f77d				   .score_draw_digit_start
    198  f77d
    199  f77d		       85 02		      sta	WSYNC
    200  f77f
    201  f77f							; Prepare initial line
    202  f77f
    203  f77f							; Level
    204  f77f		       a4 96		      ldy	ScoreDigitTens
    205  f781		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    206  f784		       29 f0		      and	#$f0
    207  f786		       85 98		      sta	ScoreDigitGfx
    208  f788
    209  f788		       a4 94		      ldy	ScoreDigitOnes
    210  f78a		       b9 ce f0 	      lda	ScoreDigits,y
    211  f78d		       29 f0		      and	#$f0
    212  f78f		       85 99		      sta	ScoreDigitGfx+1
    213  f791
    214  f791							; Score
    215  f791		       a4 97		      ldy	ScoreDigitTens+1
    216  f793		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    217  f796		       29 0f		      and	#$0f
    218  f798		       85 9a		      sta	ScoreDigitGfx+2
    219  f79a
    220  f79a		       a4 95		      ldy	ScoreDigitOnes+1
    221  f79c		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    222  f79f		       29 f0		      and	#$f0
    223  f7a1		       05 9a		      ora	ScoreDigitGfx+2
    224  f7a3		       85 9a		      sta	ScoreDigitGfx+2
    225  f7a5
    226  f7a5		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    227  f7a7		       a5 98		      lda	ScoreDigitGfx
    228  f7a9		       85 02		      sta	WSYNC
    229  f7ab				   .score_draw_digit
    230  f7ab
    231  f7ab							;lda ScoreDigitGfx
    232  f7ab		       85 0d		      sta	PF0
    233  f7ad		       a5 99		      lda	ScoreDigitGfx+1
    234  f7af		       85 0e		      sta	PF1
    235  f7b1		       a5 9a		      lda	ScoreDigitGfx+2
    236  f7b3		       85 0f		      sta	PF2
    237  f7b5
    238  f7b5							; Begin preparing next line
    239  f7b5		       e6 94		      inc	ScoreDigitOnes
    240  f7b7		       e6 96		      inc	ScoreDigitTens
    241  f7b9		       e6 95		      inc	ScoreDigitOnes+1
    242  f7bb		       e6 97		      inc	ScoreDigitTens+1
    243  f7bd
    244  f7bd		       a9 00		      lda	#0
    245  f7bf		       85 0d		      sta	PF0
    246  f7c1		       a5 9b		      lda	ScoreBarGfx+0
    247  f7c3		       85 0e		      sta	PF1
    248  f7c5		       a5 9c		      lda	ScoreBarGfx+1
    249  f7c7		       85 0f		      sta	PF2
    250  f7c9
    251  f7c9							; Level 1st Digit
    252  f7c9		       a4 96		      ldy	ScoreDigitTens
    253  f7cb		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    254  f7ce		       29 f0		      and	#$f0
    255  f7d0		       85 80		      sta	Temp
    256  f7d2
    257  f7d2							; Score 1st Digit
    258  f7d2		       a4 97		      ldy	ScoreDigitTens+1
    259  f7d4		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    260  f7d7		       29 0f		      and	#$0f
    261  f7d9		       85 81		      sta	Temp+1
    262  f7db
    263  f7db		       a5 98		      lda	ScoreDigitGfx
    264  f7dd		       85 0d		      sta	PF0
    265  f7df		       a5 99		      lda	ScoreDigitGfx+1
    266  f7e1		       85 0e		      sta	PF1
    267  f7e3		       a5 9a		      lda	ScoreDigitGfx+2
    268  f7e5		       85 0f		      sta	PF2
    269  f7e7
    270  f7e7							; Level 2nd Digit (and transfer)
    271  f7e7		       a4 94		      ldy	ScoreDigitOnes
    272  f7e9		       b9 ce f0 	      lda	ScoreDigits,y
    273  f7ec		       29 f0		      and	#$f0
    274  f7ee		       85 99		      sta	ScoreDigitGfx+1
    275  f7f0
      0  f7f0					      sleep	3
      1  f7f0				   .CYCLES    SET	3
      2  f7f0
      3  f7f0				  -	      IF	.CYCLES < 2
      4  f7f0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7f0				  -	      ERR
      6  f7f0					      ENDIF
      7  f7f0
      8  f7f0					      IF	.CYCLES & 1
      9  f7f0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7f0		       04 00		      nop	0
     11  f7f2				  -	      ELSE
     12  f7f2				  -	      bit	VSYNC
     13  f7f2					      ENDIF
     14  f7f2				   .CYCLES    SET	.CYCLES - 3
     15  f7f2					      ENDIF
     16  f7f2
     17  f7f2				  -	      REPEAT	.CYCLES / 2
     18  f7f2				  -	      nop
     19  f7f2					      REPEND
    277  f7f2
    278  f7f2		       a9 00		      lda	#0
    279  f7f4		       85 0d		      sta	PF0
    280  f7f6		       a5 9b		      lda	ScoreBarGfx+0
    281  f7f8		       85 0e		      sta	PF1
    282  f7fa		       a4 9c		      ldy	ScoreBarGfx+1
    283  f7fc		       84 0f		      sty	PF2
    284  f7fe
    285  f7fe							; Score 2nd Digit (and transfer)
    286  f7fe		       a4 95		      ldy	ScoreDigitOnes+1
    287  f800		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    288  f803		       29 f0		      and	#$f0
    289  f805		       05 81		      ora	Temp+1
    290  f807		       85 9a		      sta	ScoreDigitGfx+2
    291  f809
    292  f809							; Transfer Level 1st Digit
    293  f809		       a5 80		      lda	Temp
    294  f80b		       85 98		      sta	ScoreDigitGfx
    295  f80d
    296  f80d		       ca		      dex
    297  f80e		       d0 9b		      bne	.score_draw_digit
    298  f810
    299  f810		       a9 00		      lda	#0
    300  f812		       85 0d		      sta	PF0
    301  f814		       85 0e		      sta	PF1
    302  f816		       85 0f		      sta	PF2
    303  f818
    304  f818		       60		      rts
    305  f819
    306  f819				   ScoreBar
    307  f819		       40		      .BYTE.b	#%01000000
    308  f81a		       40		      .BYTE.b	#%01000000
    309  f81b		       60		      .BYTE.b	#%01100000
    310  f81c		       70		      .BYTE.b	#%01110000
    311  f81d		       78		      .BYTE.b	#%01111000
    312  f81e		       7c		      .BYTE.b	#%01111100
    313  f81f		       7e		      .BYTE.b	#%01111110
    314  f820		       7f		      .BYTE.b	#%01111111
    315  f821
    316  f821				   ScoreBarFlip
    317  f821		       01		      .BYTE.b	#%00000001
    318  f822		       03		      .BYTE.b	#%00000011
    319  f823		       07		      .BYTE.b	#%00000111
    320  f824		       0f		      .BYTE.b	#%00001111
    321  f825		       1f		      .BYTE.b	#%00011111
    322  f826		       3f		      .BYTE.b	#%00111111
    323  f827		       7f		      .BYTE.b	#%01111111
    324  f828		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f829					      include	"objects/web.asm"
      1  f829							;================
      2  f829							; Web (Playfield)
      3  f829							;================
      4  f829
      5  f829							; Constants
      6  f829
      7  f829		       00 00	   WEB_BG_COLOR =	#$00
      8  f829		       00 02	   WEB_FG_COLOR =	#$02
      9  f829
     10  f829		       00 1c	   WEB_SIZE   =	28
     11  f829		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f829		       00 06	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f829
     14  f829							; Scanline Draw
     15  f829
     16  f829				   WebDrawStart
     17  f829
     18  f829							; Load Colors
     19  f829		       a5 a0		      lda	WebColor+1
     20  f82b		       85 08		      sta	COLUPF
     21  f82d
     22  f82d							; Mirror playfield and use standard playfield color
     23  f82d							;lda CtrlPf
     24  f82d							;and #%11111100
     25  f82d							;ora #%00000001
     26  f82d							;sta CtrlPf
     27  f82d							;sta CTRLPF
     28  f82d
     29  f82d							; Initialize image index
     30  f82d		       a9 00		      lda	#0
     31  f82f		       85 9e		      sta	WebIndex
     32  f831
     33  f831		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f832					      include	"objects/spider.asm"
      1  f832							;=================
      2  f832							; Spider (player0)
      3  f832							;=================
      4  f832
      5  f832							; Constants
      6  f832
      7  f832		       00 56	   SPIDER_COLOR =	#$56
      8  f832		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f832		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f832		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f832
     12  f832		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f832		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f832		       00 02	   SPIDER_VEL_X =	2
     15  f832		       00 02	   SPIDER_VEL_Y =	2
     16  f832
     17  f832							; Initialization
     18  f832
     19  f832				   SpiderInit
     20  f832
     21  f832							; Initialize Position in center of screen
     22  f832		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f834		       85 a3		      sta	SpiderPos
     24  f836		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f838		       85 a4		      sta	SpiderPos+1
     26  f83a
     27  f83a							; Initial direction
     28  f83a		       a9 20		      lda	#%00100000
     29  f83c		       85 a5		      sta	SpiderCtrl
     30  f83e
     31  f83e							; Setup Sprite
      0  f83e					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f83e				   .POINTER   SET	SpiderPtr
      2  f83e				   .ADDRESS   SET	SpiderSprite
      3  f83e
      4  f83e		       a9 a4		      LDA	#<.ADDRESS
      5  f840		       85 a1		      STA	.POINTER
      6  f842		       a9 f1		      LDA	#>.ADDRESS
      7  f844		       85 a2		      STA	.POINTER+1
      8  f846
     33  f846
     34  f846		       60		      rts
     35  f847
     36  f847							; Frame Update
     37  f847
     38  f847				   SpiderUpdate
     39  f847		       20 4e f8 	      jsr	SpiderControl
     40  f84a		       20 34 f9 	      jsr	SpiderCollision
     41  f84d		       60		      rts
     42  f84e
     43  f84e				   SpiderControl
     44  f84e
     45  f84e							; Control Position
     46  f84e		       a6 a3		      ldx	SpiderPos
     47  f850		       a4 a4		      ldy	SpiderPos+1
     48  f852		       ad 80 02 	      lda	SWCHA
     49  f855
     50  f855				   .spider_control_check_right
     51  f855		       30 02		      bmi	.spider_control_check_left
     52  f857
     53  f857					      REPEAT	#SPIDER_VEL_X
     54  f857		       e8		      inx
     53  f857					      REPEND
     54  f858		       e8		      inx
     55  f859					      REPEND
     56  f859
     57  f859				   .spider_control_check_left
     58  f859		       2a		      rol
     59  f85a		       30 02		      bmi	.spider_control_check_down
     60  f85c
     61  f85c					      REPEAT	#SPIDER_VEL_X
     62  f85c		       ca		      dex
     61  f85c					      REPEND
     62  f85d		       ca		      dex
     63  f85e					      REPEND
     64  f85e
     65  f85e				   .spider_control_check_down
     66  f85e		       2a		      rol
     67  f85f		       30 02		      bmi	.spider_control_check_up
     68  f861
     69  f861					      REPEAT	#SPIDER_VEL_Y
     70  f861		       88		      dey
     69  f861					      REPEND
     70  f862		       88		      dey
     71  f863					      REPEND
     72  f863
     73  f863				   .spider_control_check_up
     74  f863		       2a		      rol
     75  f864		       30 02		      bmi	.spider_control_sprite
     76  f866
     77  f866					      REPEAT	#SPIDER_VEL_Y
     78  f866		       c8		      iny
     77  f866					      REPEND
     78  f867		       c8		      iny
     79  f868					      REPEND
     80  f868
     81  f868				   .spider_control_sprite
     82  f868							; Control Sprite
     83  f868		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     84  f86a
     85  f86a				   .spider_control_sprite_x
     86  f86a		       e4 a3		      cpx	SpiderPos
     87  f86c		       90 04		      bcc	.spider_control_sprite_left
     88  f86e		       f0 09		      beq	.spider_control_sprite_y
     89  f870		       b0 05		      bcs	.spider_control_sprite_right
     90  f872
     91  f872				   .spider_control_sprite_left
     92  f872		       09 80		      ora	#%10000000
     93  f874		       4c 79 f8 	      jmp	.spider_control_sprite_y
     94  f877
     95  f877				   .spider_control_sprite_right
     96  f877		       09 40		      ora	#%01000000
     97  f879
     98  f879				   .spider_control_sprite_y
     99  f879		       c4 a4		      cpy	SpiderPos+1
    100  f87b		       90 04		      bcc	.spider_control_sprite_down
    101  f87d		       f0 09		      beq	.spider_control_sprite_store
    102  f87f		       b0 05		      bcs	.spider_control_sprite_up
    103  f881
    104  f881				   .spider_control_sprite_down
    105  f881		       09 10		      ora	#%00010000
    106  f883		       4c 88 f8 	      jmp	.spider_control_sprite_store
    107  f886
    108  f886				   .spider_control_sprite_up
    109  f886		       09 20		      ora	#%00100000
    110  f888
    111  f888				   .spider_control_sprite_store
    112  f888		       c9 00		      cmp	#%00000000
    113  f88a		       f0 02		      beq	.spider_control_boundary
    114  f88c		       85 a5		      sta	SpiderCtrl
    115  f88e
    116  f88e				   .spider_control_boundary
    117  f88e							; Check Playfield Boundaries
    118  f88e
    119  f88e				   .spider_control_boundary_left
    120  f88e		       e0 03		      cpx	#SPIDER_VEL_X+1
    121  f890		       b0 05		      bcs	.spider_control_boundary_right
    122  f892		       a2 03		      ldx	#SPIDER_VEL_X+1
    123  f894		       4c 9d f8 	      jmp	.spider_control_boundary_top
    124  f897
    125  f897				   .spider_control_boundary_right
    126  f897		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    127  f899		       90 02		      bcc	.spider_control_boundary_top
    128  f89b		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    129  f89d
    130  f89d				   .spider_control_boundary_top
    131  f89d		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    132  f89f		       b0 05		      bcs	.spider_control_boundary_bottom
    133  f8a1		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    134  f8a3		       4c ac f8 	      jmp	.spider_control_store
    135  f8a6
    136  f8a6				   .spider_control_boundary_bottom
    137  f8a6		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    138  f8a8		       90 02		      bcc	.spider_control_store
    139  f8aa		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    140  f8ac
    141  f8ac				   .spider_control_store
    142  f8ac							; Store new position
    143  f8ac		       86 a3		      stx	SpiderPos
    144  f8ae		       84 a4		      sty	SpiderPos+1
    145  f8b0
    146  f8b0							; TODO: Optimize this somehow?
    147  f8b0				   .spider_control_sprite_assign
    148  f8b0							; Skip if no change
    149  f8b0		       c9 00		      cmp	#%00000000
    150  f8b2		       f0 7f		      beq	.spider_control_return
    151  f8b4
    152  f8b4		       a2 00		      ldx	#%00000000	; For reflection
    153  f8b6
    154  f8b6				   .spider_control_sprite_assign_left
    155  f8b6		       c9 80		      cmp	#%10000000
    156  f8b8		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f8ba					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8ba				   .POINTER   SET	SpiderPtr
      2  f8ba				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8ba
      4  f8ba		       a9 b4		      LDA	#<.ADDRESS
      5  f8bc		       85 a1		      STA	.POINTER
      6  f8be		       a9 f1		      LDA	#>.ADDRESS
      7  f8c0		       85 a2		      STA	.POINTER+1
      8  f8c2
    158  f8c2		       a2 08		      ldx	#%00001000
    159  f8c4		       4c 31 f9 	      jmp	.spider_control_reflect
    160  f8c7
    161  f8c7				   .spider_control_sprite_assign_right
    162  f8c7		       c9 40		      cmp	#%01000000
    163  f8c9		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f8cb					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8cb				   .POINTER   SET	SpiderPtr
      2  f8cb				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8cb
      4  f8cb		       a9 b4		      LDA	#<.ADDRESS
      5  f8cd		       85 a1		      STA	.POINTER
      6  f8cf		       a9 f1		      LDA	#>.ADDRESS
      7  f8d1		       85 a2		      STA	.POINTER+1
      8  f8d3
    165  f8d3		       4c 31 f9 	      jmp	.spider_control_reflect
    166  f8d6
    167  f8d6				   .spider_control_sprite_assign_top
    168  f8d6		       c9 20		      cmp	#%00100000
    169  f8d8		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f8da					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f8da				   .POINTER   SET	SpiderPtr
      2  f8da				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f8da
      4  f8da		       a9 a4		      LDA	#<.ADDRESS
      5  f8dc		       85 a1		      STA	.POINTER
      6  f8de		       a9 f1		      LDA	#>.ADDRESS
      7  f8e0		       85 a2		      STA	.POINTER+1
      8  f8e2
    171  f8e2		       4c 31 f9 	      jmp	.spider_control_reflect
    172  f8e5
    173  f8e5				   .spider_control_sprite_assign_bottom
    174  f8e5		       c9 10		      cmp	#%00010000
    175  f8e7		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f8e9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f8e9				   .POINTER   SET	SpiderPtr
      2  f8e9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f8e9
      4  f8e9		       a9 c4		      LDA	#<.ADDRESS
      5  f8eb		       85 a1		      STA	.POINTER
      6  f8ed		       a9 f1		      LDA	#>.ADDRESS
      7  f8ef		       85 a2		      STA	.POINTER+1
      8  f8f1
    177  f8f1		       4c 31 f9 	      jmp	.spider_control_reflect
    178  f8f4
    179  f8f4				   .spider_control_sprite_assign_top_right
    180  f8f4		       c9 60		      cmp	#%01100000
    181  f8f6		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f8f8					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8f8				   .POINTER   SET	SpiderPtr
      2  f8f8				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8f8
      4  f8f8		       a9 b4		      LDA	#<.ADDRESS
      5  f8fa		       85 a1		      STA	.POINTER
      6  f8fc		       a9 f1		      LDA	#>.ADDRESS
      7  f8fe		       85 a2		      STA	.POINTER+1
      8  f900
    183  f900		       4c 31 f9 	      jmp	.spider_control_reflect
    184  f903
    185  f903				   .spider_control_sprite_assign_bottom_right
    186  f903		       c9 50		      cmp	#%01010000
    187  f905		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f907					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f907				   .POINTER   SET	SpiderPtr
      2  f907				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f907
      4  f907		       a9 b4		      LDA	#<.ADDRESS
      5  f909		       85 a1		      STA	.POINTER
      6  f90b		       a9 f1		      LDA	#>.ADDRESS
      7  f90d		       85 a2		      STA	.POINTER+1
      8  f90f
    189  f90f		       4c 31 f9 	      jmp	.spider_control_reflect
    190  f912
    191  f912				   .spider_control_sprite_assign_bottom_left
    192  f912		       c9 90		      cmp	#%10010000
    193  f914		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f916					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f916				   .POINTER   SET	SpiderPtr
      2  f916				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f916
      4  f916		       a9 b4		      LDA	#<.ADDRESS
      5  f918		       85 a1		      STA	.POINTER
      6  f91a		       a9 f1		      LDA	#>.ADDRESS
      7  f91c		       85 a2		      STA	.POINTER+1
      8  f91e
    195  f91e		       a2 08		      ldx	#%00001000
    196  f920		       4c 31 f9 	      jmp	.spider_control_reflect
    197  f923
    198  f923				   .spider_control_sprite_assign_top_left
    199  f923		       c9 a0		      cmp	#%10100000
    200  f925		       d0 0a		      bne	.spider_control_reflect
      0  f927					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f927				   .POINTER   SET	SpiderPtr
      2  f927				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f927
      4  f927		       a9 b4		      LDA	#<.ADDRESS
      5  f929		       85 a1		      STA	.POINTER
      6  f92b		       a9 f1		      LDA	#>.ADDRESS
      7  f92d		       85 a2		      STA	.POINTER+1
      8  f92f
    202  f92f		       a2 08		      ldx	#%00001000
    203  f931
    204  f931				   .spider_control_reflect
    205  f931		       86 0b		      stx	REFP0
    206  f933
    207  f933				   .spider_control_return
    208  f933		       60		      rts
    209  f934
    210  f934				   SpiderCollision
    211  f934		       a0 56		      ldy	#SPIDER_COLOR
    212  f936
    213  f936							; Check b/w
    214  f936		       ad 82 02 	      lda	SWCHB
    215  f939					      REPEAT	4
    216  f939		       4a		      lsr
    215  f939					      REPEND
    216  f93a		       4a		      lsr
    215  f93a					      REPEND
    216  f93b		       4a		      lsr
    215  f93b					      REPEND
    216  f93c		       4a		      lsr
    217  f93d					      REPEND
    218  f93d		       b0 02		      bcs	.spider_collision_m0
    219  f93f
    220  f93f		       a0 0e		      ldy	#SPIDER_BW_COLOR
    221  f941
    222  f941				   .spider_collision_m0
    223  f941							; Check stun status
    224  f941		       a6 b4		      ldx	BugStunned
    225  f943		       d0 04		      bne	.spider_collision_m1
    226  f945
    227  f945							; Collision for M0 (V set)
    228  f945		       24 00		      bit	CXM0P
    229  f947		       70 0b		      bvs	.spider_collision_active
    230  f949
    231  f949				   .spider_collision_m1
    232  f949							; Check stun status
    233  f949		       a6 b5		      ldx	BugStunned+1
    234  f94b		       d0 14		      bne	.spider_collision_return
    235  f94d
    236  f94d							; Collision for M1 (N set)
    237  f94d		       24 01		      bit	CXM1P
    238  f94f		       30 03		      bmi	.spider_collision_active
    239  f951
    240  f951		       4c 61 f9 	      jmp	.spider_collision_return
    241  f954
    242  f954				   .spider_collision_active
    243  f954		       a0 44		      ldy	#SPIDER_COL_COLOR
    244  f956
    245  f956							; Check b/w
    246  f956		       ad 82 02 	      lda	SWCHB
    247  f959					      REPEAT	4
    248  f959		       4a		      lsr
    247  f959					      REPEND
    248  f95a		       4a		      lsr
    247  f95a					      REPEND
    248  f95b		       4a		      lsr
    247  f95b					      REPEND
    248  f95c		       4a		      lsr
    249  f95d					      REPEND
    250  f95d		       b0 02		      bcs	.spider_collision_return
    251  f95f
    252  f95f		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    253  f961
    254  f961				   .spider_collision_return
    255  f961		       84 a6		      sty	SpiderColor
    256  f963		       60		      rts
    257  f964
    258  f964				   SpiderPosition
    259  f964
    260  f964							; Set Position
    261  f964		       a2 00		      ldx	#0	; Object (player0)
    262  f966		       a5 a3		      lda	SpiderPos	; X Position
    263  f968		       20 00 f0 	      jsr	PosObject
    264  f96b
    265  f96b		       60		      rts
    266  f96c
    267  f96c							; Scanline Draw
    268  f96c
    269  f96c				   SpiderDrawStart
    270  f96c
    271  f96c							; Set player 0 to be quad size
    272  f96c							;lda NuSiz0
    273  f96c							;and #%11111000
    274  f96c							;ora #%00000101
    275  f96c							;sta NuSiz0
    276  f96c							;sta NUSIZ0
    277  f96c
    278  f96c							; Set sprite color
    279  f96c		       a5 a6		      lda	SpiderColor
    280  f96e		       85 06		      sta	COLUP0
    281  f970
    282  f970							; Determine if we need to use vertical delay (odd line)
    283  f970		       a5 a4		      lda	SpiderPos+1	; Y Position
    284  f972		       4a		      lsr
    285  f973		       b0 05		      bcs	.spider_draw_start_nodelay
    286  f975
    287  f975		       a0 01		      ldy	#1
    288  f977		       4c 7c f9 	      jmp	.spider_draw_start_set_delay
    289  f97a
    290  f97a				   .spider_draw_start_nodelay
    291  f97a		       a0 00		      ldy	#0
    292  f97c
    293  f97c				   .spider_draw_start_set_delay
    294  f97c		       84 25		      sty	VDELP0
    295  f97e
    296  f97e				   .spider_draw_start_pos
    297  f97e							; Calculate starting position
    298  f97e		       18		      clc
    299  f97f		       69 10		      adc	#SPIDER_SIZE
    300  f981		       85 a8		      sta	SpiderDrawPos
    301  f983
    302  f983							; Initialize sprite index and line buffer
    303  f983		       a9 10		      lda	#SPIDER_SPRITE_SIZE
    304  f985		       85 a7		      sta	SpiderIndex
    305  f987		       a9 00		      lda	#0
    306  f989		       85 a9		      sta	SpiderLine
    307  f98b
    308  f98b		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f98c					      include	"objects/line.asm"
      1  f98c							;================
      2  f98c							; Line (ball)
      3  f98c							;================
      4  f98c
      5  f98c							; Constants
      6  f98c
      7  f98c		       00 08	   LINE_SIZE  =	8
      8  f98c		       00 04	   LINE_VEL_X =	4
      9  f98c		       00 04	   LINE_VEL_Y =	4
     10  f98c
     11  f98c		       00 08	   LINE_AUDIO_C =	8
     12  f98c		       00 01	   LINE_AUDIO_F =	1
     13  f98c		       00 04	   LINE_AUDIO_V =	4
     14  f98c
     15  f98c		       00 08	   LINE_SAMPLE_LEN =	8
     16  f98c		       00 03	   LINE_SAMPLE_C =	3
     17  f98c		       00 01	   LINE_SAMPLE_F =	1
     18  f98c		       00 04	   LINE_SAMPLE_V =	4
     19  f98c
     20  f98c							; Initialization
     21  f98c
     22  f98c				   LineInit
     23  f98c
     24  f98c							; Initial Line Control
     25  f98c		       a9 00		      lda	#0
     26  f98e		       85 ac		      sta	LineEnabled
     27  f990		       85 ad		      sta	LinePos+0
     28  f992		       85 ae		      sta	LinePos+1
     29  f994
     30  f994							; Initial direction
     31  f994							;lda #0
     32  f994		       85 af		      sta	LineVelocity+0
     33  f996		       a9 04		      lda	#LINE_VEL_Y
     34  f998		       85 b0		      sta	LineVelocity+1
     35  f99a
     36  f99a							; Disable line at start
     37  f99a							;lda #-1
     38  f99a							;sta LineDrawPos+0
     39  f99a							;sta LineDrawPos+1
     40  f99a
     41  f99a		       60		      rts
     42  f99b
     43  f99b							; Frame Update
     44  f99b
     45  f99b				   LineUpdate
     46  f99b		       20 a5 f9 	      jsr	LineControl
     47  f99e		       20 57 fa 	      jsr	LineObject
     48  f9a1		       20 82 fa 	      jsr	LineCollision
     49  f9a4		       60		      rts
     50  f9a5
     51  f9a5				   LineControl
     52  f9a5
     53  f9a5							; Check if Fire Button on controller 1 is pressed
     54  f9a5		       a5 0c		      lda	INPT4
     55  f9a7		       30 08		      bmi	.line_control_skip
     56  f9a9
     57  f9a9		       24 ac		      bit	LineEnabled
     58  f9ab		       30 04		      bmi	.line_control_skip
     59  f9ad
     60  f9ad		       a5 a5		      lda	SpiderCtrl
     61  f9af		       d0 03		      bne	.line_control_fire
     62  f9b1
     63  f9b1				   .line_control_skip
     64  f9b1		       4c 56 fa 	      jmp	.line_control_return
     65  f9b4
     66  f9b4				   .line_control_fire
     67  f9b4		       20 c6 fa 	      jsr	LineEnable
     68  f9b7
     69  f9b7				   .line_control_x
     70  f9b7		       a5 a5		      lda	SpiderCtrl
     71  f9b9		       29 c0		      and	#%11000000
     72  f9bb		       f0 0e		      beq	.line_control_x_none
     73  f9bd				   .line_control_x_left
     74  f9bd		       c9 80		      cmp	#%10000000
     75  f9bf		       d0 05		      bne	.line_control_x_right
     76  f9c1
     77  f9c1		       a9 fc		      lda	#-LINE_VEL_X
     78  f9c3		       4c cd f9 	      jmp	.line_control_x_store
     79  f9c6				   .line_control_x_right
     80  f9c6		       a9 04		      lda	#LINE_VEL_X
     81  f9c8		       4c cd f9 	      jmp	.line_control_x_store
     82  f9cb				   .line_control_x_none
     83  f9cb		       a9 00		      lda	#0
     84  f9cd				   .line_control_x_store
     85  f9cd		       85 af		      sta	LineVelocity
     86  f9cf
     87  f9cf				   .line_control_y
     88  f9cf		       a5 a5		      lda	SpiderCtrl
     89  f9d1		       29 30		      and	#%00110000
     90  f9d3		       f0 0e		      beq	.line_control_y_none
     91  f9d5				   .line_control_y_up
     92  f9d5		       c9 20		      cmp	#%00100000
     93  f9d7		       d0 05		      bne	.line_control_y_down
     94  f9d9
     95  f9d9		       a9 04		      lda	#LINE_VEL_Y
     96  f9db		       4c e5 f9 	      jmp	.line_control_y_store
     97  f9de				   .line_control_y_down
     98  f9de		       a9 fc		      lda	#-LINE_VEL_Y
     99  f9e0		       4c e5 f9 	      jmp	.line_control_y_store
    100  f9e3				   .line_control_y_none
    101  f9e3		       a9 00		      lda	#0
    102  f9e5				   .line_control_y_store
    103  f9e5		       85 b0		      sta	LineVelocity+1
    104  f9e7
    105  f9e7				   .line_control_position
    106  f9e7
    107  f9e7		       a2 00		      ldx	#0	; offsetX
    108  f9e9		       a0 00		      ldy	#0	; offsetY
    109  f9eb
    110  f9eb		       a5 a5		      lda	SpiderCtrl
    111  f9ed		       29 f0		      and	#%11110000
    112  f9ef
    113  f9ef				   .line_control_position_left
    114  f9ef		       c9 80		      cmp	#%10000000
    115  f9f1		       d0 07		      bne	.line_control_position_right
    116  f9f3
    117  f9f3		       a2 00		      ldx	#0
    118  f9f5		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    119  f9f7		       4c 42 fa 	      jmp	.line_control_position_store
    120  f9fa
    121  f9fa				   .line_control_position_right
    122  f9fa		       c9 40		      cmp	#%01000000
    123  f9fc		       d0 07		      bne	.line_control_position_top
    124  f9fe
    125  f9fe		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    126  fa00		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    127  fa02		       4c 42 fa 	      jmp	.line_control_position_store
    128  fa05
    129  fa05				   .line_control_position_top
    130  fa05		       c9 20		      cmp	#%00100000
    131  fa07		       d0 07		      bne	.line_control_position_bottom
    132  fa09
    133  fa09		       a2 08		      ldx	#SPIDER_SIZE/2
    134  fa0b		       a0 10		      ldy	#SPIDER_SIZE
    135  fa0d		       4c 42 fa 	      jmp	.line_control_position_store
    136  fa10
    137  fa10				   .line_control_position_bottom
    138  fa10		       c9 10		      cmp	#%00010000
    139  fa12		       d0 05		      bne	.line_control_position_top_right
    140  fa14
    141  fa14		       a2 08		      ldx	#SPIDER_SIZE/2
    142  fa16		       4c 42 fa 	      jmp	.line_control_position_store
    143  fa19
    144  fa19				   .line_control_position_top_right
    145  fa19		       c9 60		      cmp	#%01100000
    146  fa1b		       d0 07		      bne	.line_control_position_bottom_right
    147  fa1d
    148  fa1d		       a2 10		      ldx	#SPIDER_SIZE
    149  fa1f		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    150  fa21		       4c 42 fa 	      jmp	.line_control_position_store
    151  fa24
    152  fa24				   .line_control_position_bottom_right
    153  fa24		       c9 50		      cmp	#%01010000
    154  fa26		       d0 07		      bne	.line_control_position_bottom_left
    155  fa28
    156  fa28		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    157  fa2a		       a0 00		      ldy	#0
    158  fa2c		       4c 42 fa 	      jmp	.line_control_position_store
    159  fa2f
    160  fa2f				   .line_control_position_bottom_left
    161  fa2f		       c9 90		      cmp	#%10010000
    162  fa31		       d0 07		      bne	.line_control_position_top_left
    163  fa33
    164  fa33							; No Offset
    165  fa33		       a2 04		      ldx	#LINE_SIZE/2
    166  fa35		       a0 04		      ldy	#LINE_SIZE/2
    167  fa37		       4c 42 fa 	      jmp	.line_control_position_store
    168  fa3a
    169  fa3a				   .line_control_position_top_left
    170  fa3a		       c9 a0		      cmp	#%10100000
    171  fa3c		       d0 04		      bne	.line_control_position_store
    172  fa3e
    173  fa3e		       a2 00		      ldx	#0
    174  fa40		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    175  fa42
    176  fa42				   .line_control_position_store
    177  fa42
    178  fa42							; Apply offsetX to playerX
    179  fa42		       a5 a3		      lda	SpiderPos
    180  fa44		       86 80		      stx	Temp
    181  fa46		       18		      clc
    182  fa47		       65 80		      adc	Temp
    183  fa49		       aa		      tax
    184  fa4a
    185  fa4a							; Apply offsetY to playerY
    186  fa4a		       a5 a4		      lda	SpiderPos+1
    187  fa4c		       84 80		      sty	Temp
    188  fa4e		       18		      clc
    189  fa4f		       65 80		      adc	Temp
    190  fa51		       a8		      tay
    191  fa52
    192  fa52		       86 ad		      stx	LinePos
    193  fa54		       84 ae		      sty	LinePos+1
    194  fa56
    195  fa56				   .line_control_return
    196  fa56		       60		      rts
    197  fa57
    198  fa57				   LineObject
    199  fa57
    200  fa57							; Check if line is enabled
    201  fa57		       24 ac		      bit	LineEnabled
    202  fa59		       10 26		      bpl	.line_object_return
    203  fa5b
    204  fa5b							; Load position
    205  fa5b		       a6 ad		      ldx	LinePos
    206  fa5d		       a4 ae		      ldy	LinePos+1
    207  fa5f
    208  fa5f				   .line_object_boundary
    209  fa5f				   .line_object_boundary_left
    210  fa5f		       e0 04		      cpx	#LINE_VEL_X
    211  fa61		       90 1b		      bcc	.line_object_disable
    212  fa63				   .line_object_boundary_right
    213  fa63		       e0 9b		      cpx	#160-LINE_VEL_X-1
    214  fa65		       b0 17		      bcs	.line_object_disable
    215  fa67				   .line_object_boundary_bottom
    216  fa67		       c0 04		      cpy	#LINE_VEL_Y
    217  fa69		       90 13		      bcc	.line_object_disable
    218  fa6b				   .line_object_boundary_top
    219  fa6b		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    220  fa6d		       b0 0f		      bcs	.line_object_disable
    221  fa6f
    222  fa6f				   .line_object_velocity
    223  fa6f
    224  fa6f							; Apply Velocity
    225  fa6f		       8a		      txa
    226  fa70		       18		      clc
    227  fa71		       65 af		      adc	LineVelocity
    228  fa73		       85 ad		      sta	LinePos
    229  fa75
    230  fa75		       98		      tya
    231  fa76		       18		      clc
    232  fa77		       65 b0		      adc	LineVelocity+1
    233  fa79		       85 ae		      sta	LinePos+1
    234  fa7b
    235  fa7b		       4c 81 fa 	      jmp	.line_object_return
    236  fa7e
    237  fa7e				   .line_object_disable
    238  fa7e		       20 d2 fa 	      jsr	LineDisable
    239  fa81
    240  fa81				   .line_object_return
    241  fa81		       60		      rts
    242  fa82
    243  fa82				   LineCollision
    244  fa82
    245  fa82		       a9 78		      lda	#BUG_STUN_LENGTH
    246  fa84
    247  fa84				   .line_collision_m0
    248  fa84		       24 04		      bit	CXM0FB
    249  fa86		       50 08		      bvc	.line_collision_m1
    250  fa88
    251  fa88							; Set stun timer
    252  fa88		       85 b4		      sta	BugStunned+0
    253  fa8a
    254  fa8a							; Disable line
    255  fa8a		       20 d2 fa 	      jsr	LineDisable
    256  fa8d		       4c 99 fa 	      jmp	.line_collision_sample
    257  fa90
    258  fa90				   .line_collision_m1
    259  fa90		       24 05		      bit	CXM1FB
    260  fa92		       50 08		      bvc	.line_collision_return
    261  fa94
    262  fa94							; Set stun timer
    263  fa94		       85 b5		      sta	BugStunned+1
    264  fa96
    265  fa96							; Disable line
    266  fa96		       20 d2 fa 	      jsr	LineDisable
    267  fa99
    268  fa99				   .line_collision_sample
    269  fa99		       20 f0 fa 	      jsr	LineSample
    270  fa9c
    271  fa9c				   .line_collision_return
    272  fa9c		       60		      rts
    273  fa9d
    274  fa9d				   LinePosition
    275  fa9d
    276  fa9d							; Set Line Position
    277  fa9d		       a2 04		      ldx	#4	; Object (ball)
    278  fa9f		       a5 ad		      lda	LinePos	; X Position
    279  faa1		       20 00 f0 	      jsr	PosObject
    280  faa4
    281  faa4		       60		      rts
    282  faa5
    283  faa5							; Scanline Draw
    284  faa5
    285  faa5				   LineDrawStart
    286  faa5
    287  faa5		       24 ac		      bit	LineEnabled
    288  faa7		       30 07		      bmi	.line_draw_start
    289  faa9
    290  faa9		       a9 ff		      lda	#-1
    291  faab		       85 b1		      sta	LineDrawPos+0
    292  faad		       85 b2		      sta	LineDrawPos+1
    293  faaf		       60		      rts
    294  fab0
    295  fab0				   .line_draw_start
    296  fab0							; Determine if we need to use vertical delay (oven line)
    297  fab0		       a5 ae		      lda	LinePos+1
    298  fab2		       4a		      lsr
    299  fab3		       90 05		      bcc	.line_draw_start_nodelay
    300  fab5
    301  fab5		       a0 01		      ldy	#1
    302  fab7		       4c bc fa 	      jmp	.line_draw_start_set_delay
    303  faba
    304  faba				   .line_draw_start_nodelay
    305  faba		       a0 00		      ldy	#0
    306  fabc
    307  fabc				   .line_draw_start_set_delay
    308  fabc		       84 27		      sty	VDELBL
    309  fabe
    310  fabe				   .line_draw_start_pos
    311  fabe							; Calculate starting position
    312  fabe		       18		      clc
    313  fabf		       85 b1		      sta	LineDrawPos+0
    314  fac1		       69 04		      adc	#LINE_SIZE/2
    315  fac3		       85 b2		      sta	LineDrawPos+1
    316  fac5
    317  fac5		       60		      rts
    318  fac6
    319  fac6				   LineEnable
    320  fac6		       a9 80		      lda	#%10000000
    321  fac8		       85 ac		      sta	LineEnabled
    322  faca
    323  faca		       a5 91		      lda	SampleStep
    324  facc		       d0 03		      bne	.line_enable_return
    325  face
    326  face		       20 de fa 	      jsr	LineAudioPlay
    327  fad1
    328  fad1				   .line_enable_return
    329  fad1		       60		      rts
    330  fad2
    331  fad2				   LineDisable
    332  fad2		       a9 00		      lda	#0
    333  fad4		       85 ac		      sta	LineEnabled
    334  fad6
    335  fad6		       a5 91		      lda	SampleStep
    336  fad8		       d0 03		      bne	.line_disable_return
    337  fada
    338  fada		       20 eb fa 	      jsr	LineAudioMute
    339  fadd
    340  fadd				   .line_disable_return
    341  fadd		       60		      rts
    342  fade
    343  fade				   LineAudioPlay
    344  fade		       a9 08		      lda	#LINE_AUDIO_C
    345  fae0		       85 16		      sta	AUDC1
    346  fae2		       a9 01		      lda	#LINE_AUDIO_F
    347  fae4		       85 18		      sta	AUDF1
    348  fae6		       a9 04		      lda	#LINE_AUDIO_V
    349  fae8		       85 1a		      sta	AUDV1
    350  faea		       60		      rts
    351  faeb
    352  faeb				   LineAudioMute
    353  faeb		       a9 00		      lda	#0
    354  faed		       85 1a		      sta	AUDV1
    355  faef							;sta AUDF1
    356  faef							;sta AUDC1
    357  faef		       60		      rts
    358  faf0
    359  faf0				   LineSample
    360  faf0		       a9 08		      lda	#LINE_SAMPLE_LEN
    361  faf2		       85 91		      sta	SampleStep
    362  faf4		       a9 03		      lda	#LINE_SAMPLE_C
    363  faf6		       85 16		      sta	AUDC1
    364  faf8		       a9 01		      lda	#LINE_SAMPLE_F
    365  fafa		       85 18		      sta	AUDF1
    366  fafc		       a9 04		      lda	#LINE_SAMPLE_V
    367  fafe		       85 1a		      sta	AUDV1
    368  fb00		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  fb01					      include	"objects/bug.asm"
      1  fb01							;======================
      2  fb01							; Bugs (missiles 0 & 1)
      3  fb01							;======================
      4  fb01
      5  fb01							; Constants
      6  fb01
      7  fb01		       00 08	   BUG_SIZE   =	8
      8  fb01		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  fb01		       00 78	   BUG_STUN_LENGTH =	120
     10  fb01		       00 04	   BUG_POINTS =	4
     11  fb01
     12  fb01		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  fb01		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  fb01		       00 38	   BUG_STUN_COLOR =	#$38
     15  fb01		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  fb01
     17  fb01		       00 1e	   BUG_SAMPLE_LEN =	30
     18  fb01		       00 03	   BUG_SAMPLE_C =	3
     19  fb01		       00 14	   BUG_SAMPLE_F =	20
     20  fb01		       00 04	   BUG_SAMPLE_V =	4
     21  fb01
     22  fb01		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  fb01		       00 08	   BUG_COL_SAMPLE_C =	8
     24  fb01		       00 08	   BUG_COL_SAMPLE_F =	8
     25  fb01		       00 03	   BUG_COL_SAMPLE_V =	3
     26  fb01
     27  fb01							; Initialization
     28  fb01
     29  fb01				   BugInit
     30  fb01
     31  fb01							; Initialize Bugs
     32  fb01		       a2 01		      ldx	#1
     33  fb03
     34  fb03				   .bug_init_loop
     35  fb03		       20 0a fb 	      jsr	BugReset
     36  fb06
     37  fb06		       ca		      dex
     38  fb07		       10 fa		      bpl	.bug_init_loop
     39  fb09
     40  fb09		       60		      rts
     41  fb0a
     42  fb0a				   BugReset		; x = bug (0 or 1)
     43  fb0a
     44  fb0a							; Set random position
     45  fb0a		       20 13 f0 	      jsr	Random
     46  fb0d
     47  fb0d		       a5 84		      lda	Rand8
     48  fb0f		       29 7f		      and	#$7f
     49  fb11		       95 b6		      sta	BugPosX,x
     50  fb13
     51  fb13		       a5 85		      lda	Rand16
     52  fb15		       29 7f		      and	#$7f
     53  fb17		       95 b8		      sta	BugPosY,x
     54  fb19
     55  fb19							; Set as active
     56  fb19		       a9 00		      lda	#0
     57  fb1b		       95 b4		      sta	BugStunned,x
     58  fb1d
     59  fb1d		       60		      rts
     60  fb1e
     61  fb1e							; Frame Update
     62  fb1e
     63  fb1e				   BugUpdate
     64  fb1e
     65  fb1e		       a2 01		      ldx	#1
     66  fb20				   .bug_update_loop
     67  fb20		       86 80		      stx	Temp+0
     68  fb22
     69  fb22		       b5 b4		      lda	BugStunned,x
     70  fb24		       f0 08		      beq	.bug_update_active
     71  fb26
     72  fb26				   .bug_update_stunned
     73  fb26		       d6 b4		      dec	BugStunned,x
     74  fb28		       20 b1 fb 	      jsr	BugStunCollision
     75  fb2b		       4c 34 fb 	      jmp	.bug_update_next
     76  fb2e
     77  fb2e				   .bug_update_active
     78  fb2e		       20 3a fb 	      jsr	BugMovement
     79  fb31		       20 99 fb 	      jsr	BugCollision
     80  fb34
     81  fb34				   .bug_update_next
     82  fb34		       a6 80		      ldx	Temp+0
     83  fb36		       ca		      dex
     84  fb37		       10 e7		      bpl	.bug_update_loop
     85  fb39
     86  fb39		       60		      rts
     87  fb3a
     88  fb3a				   BugMovement
     89  fb3a
     90  fb3a				   .bug_movement_random
     91  fb3a		       20 13 f0 	      jsr	Random
     92  fb3d		       29 03		      and	#%00000011
     93  fb3f		       85 81		      sta	Temp+1
     94  fb41
     95  fb41				   .bug_movement_load
     96  fb41		       a6 80		      ldx	Temp+0
     97  fb43
     98  fb43				   .bug_movement_x
     99  fb43		       a4 b3		      ldy	BugSpeed
    100  fb45
    101  fb45							; Alter X Position
    102  fb45		       a5 81		      lda	Temp+1
    103  fb47		       29 01		      and	#%00000001
    104  fb49
    105  fb49				   .bug_movement_x_check
    106  fb49		       c9 01		      cmp	#1
    107  fb4b		       d0 08		      bne	.bug_movement_x_right
    108  fb4d
    109  fb4d				   .bug_movement_x_left
    110  fb4d		       d6 b6		      dec	BugPosX,x
    111  fb4f		       88		      dey
    112  fb50		       d0 fb		      bne	.bug_movement_x_left
    113  fb52
    114  fb52		       4c 5a fb 	      jmp	.bug_movement_y
    115  fb55
    116  fb55				   .bug_movement_x_right
    117  fb55		       f6 b6		      inc	BugPosX,x
    118  fb57		       88		      dey
    119  fb58		       d0 fb		      bne	.bug_movement_x_right
    120  fb5a
    121  fb5a				   .bug_movement_y
    122  fb5a		       a4 b3		      ldy	BugSpeed
    123  fb5c
    124  fb5c							; Alter Y Position
    125  fb5c		       a5 81		      lda	Temp+1
    126  fb5e		       29 02		      and	#%00000010
    127  fb60		       4a		      lsr
    128  fb61
    129  fb61				   .bug_movement_y_check
    130  fb61		       c9 01		      cmp	#1
    131  fb63		       d0 08		      bne	.bug_movement_y_down
    132  fb65
    133  fb65				   .bug_movement_y_up
    134  fb65		       f6 b8		      inc	BugPosY,x
    135  fb67		       88		      dey
    136  fb68		       d0 fb		      bne	.bug_movement_y_up
    137  fb6a
    138  fb6a		       4c 72 fb 	      jmp	.bug_movement_boundary
    139  fb6d
    140  fb6d				   .bug_movement_y_down
    141  fb6d		       d6 b8		      dec	BugPosY,x
    142  fb6f		       88		      dey
    143  fb70		       d0 fb		      bne	.bug_movement_y_down
    144  fb72
    145  fb72				   .bug_movement_boundary
    146  fb72		       b5 b6		      lda	BugPosX,x
    147  fb74		       b4 b8		      ldy	BugPosY,x
    148  fb76
    149  fb76				   .bug_movement_boundary_left
    150  fb76		       c9 18		      cmp	#BUG_BOUNDARY
    151  fb78		       b0 05		      bcs	.bug_movement_boundary_right
    152  fb7a		       a9 18		      lda	#BUG_BOUNDARY
    153  fb7c		       4c 85 fb 	      jmp	.bug_movement_boundary_top
    154  fb7f
    155  fb7f				   .bug_movement_boundary_right
    156  fb7f		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    157  fb81		       90 02		      bcc	.bug_movement_boundary_top
    158  fb83		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    159  fb85
    160  fb85				   .bug_movement_boundary_top
    161  fb85		       c0 18		      cpy	#BUG_BOUNDARY
    162  fb87		       b0 05		      bcs	.bug_movement_boundary_bottom
    163  fb89		       a0 18		      ldy	#BUG_BOUNDARY
    164  fb8b		       4c 94 fb 	      jmp	.bug_movement_store
    165  fb8e
    166  fb8e				   .bug_movement_boundary_bottom
    167  fb8e		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    168  fb90		       90 02		      bcc	.bug_movement_store
    169  fb92		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    170  fb94
    171  fb94				   .bug_movement_store
    172  fb94		       95 b6		      sta	BugPosX,x
    173  fb96		       94 b8		      sty	BugPosY,x
    174  fb98
    175  fb98				   .bug_movement_return
    176  fb98		       60		      rts
    177  fb99
    178  fb99				   BugCollision
    179  fb99
    180  fb99		       e0 01		      cpx	#1
    181  fb9b		       f0 05		      beq	.bug_collision_m1
    182  fb9d
    183  fb9d				   .bug_collision_m0
    184  fb9d							; Collision for M0 (V set)
    185  fb9d		       24 00		      bit	CXM0P
    186  fb9f		       70 06		      bvs	.bug_collision_active
    187  fba1		       60		      rts
    188  fba2
    189  fba2				   .bug_collision_m1
    190  fba2							; Collision for M1 (N set)
    191  fba2		       24 01		      bit	CXM1P
    192  fba4		       30 01		      bmi	.bug_collision_active
    193  fba6		       60		      rts
    194  fba7
    195  fba7				   .bug_collision_active
    196  fba7
    197  fba7							; Reduce players score
    198  fba7		       a5 92		      lda	ScoreValue
    199  fba9		       f0 02		      beq	.bug_collision_score_skip
    200  fbab		       c6 92		      dec	ScoreValue
    201  fbad				   .bug_collision_score_skip
    202  fbad
    203  fbad							; Play sound
    204  fbad		       20 ff fb 	      jsr	BugColSample
    205  fbb0
    206  fbb0		       60		      rts
    207  fbb1
    208  fbb1				   BugStunCollision
    209  fbb1
    210  fbb1		       e0 01		      cpx	#1
    211  fbb3		       f0 05		      beq	.bug_stun_collision_m1
    212  fbb5
    213  fbb5				   .bug_stun_collision_m0
    214  fbb5							; Collision for M0 (V set)
    215  fbb5		       24 00		      bit	CXM0P
    216  fbb7		       70 06		      bvs	.bug_stun_collision_active
    217  fbb9		       60		      rts
    218  fbba
    219  fbba				   .bug_stun_collision_m1
    220  fbba							; Collision for M1 (N set)
    221  fbba		       24 01		      bit	CXM1P
    222  fbbc		       30 01		      bmi	.bug_stun_collision_active
    223  fbbe		       60		      rts
    224  fbbf
    225  fbbf				   .bug_stun_collision_active
    226  fbbf							; Add points to score
    227  fbbf		       18		      clc
    228  fbc0		       a5 93		      lda	ScoreValue+1
    229  fbc2		       69 04		      adc	#BUG_POINTS
    230  fbc4		       85 93		      sta	ScoreValue+1
    231  fbc6
    232  fbc6							; Reset bug
    233  fbc6		       20 0a fb 	      jsr	BugReset
    234  fbc9
    235  fbc9							; Play sample
    236  fbc9		       20 ee fb 	      jsr	BugSample
    237  fbcc
    238  fbcc		       60		      rts
    239  fbcd
    240  fbcd							; Horizontal Positioning
    241  fbcd
    242  fbcd				   BugPosition
    243  fbcd
    244  fbcd		       a2 02		      ldx	#2
    245  fbcf		       a5 b6		      lda	BugPosX+0
    246  fbd1		       20 00 f0 	      jsr	PosObject
    247  fbd4
    248  fbd4		       a2 03		      ldx	#3
    249  fbd6		       a5 b7		      lda	BugPosX+1
    250  fbd8		       20 00 f0 	      jsr	PosObject
    251  fbdb
    252  fbdb		       60		      rts
    253  fbdc
    254  fbdc							; Scanline Draw
    255  fbdc
    256  fbdc				   BugDrawStart
    257  fbdc
    258  fbdc		       a0 01		      ldy	#1
    259  fbde				   .bug_draw_start_loop
    260  fbde
    261  fbde							; Set missile 0 & 1 to be 8 clock size
    262  fbde							;lda NuSiz0,y
    263  fbde							;ora #%00110000
    264  fbde							;sta NuSiz0,y
    265  fbde							;sta NUSIZ0,y
    266  fbde
    267  fbde							; Setup half scanline positions
    268  fbde		       b9 b8 00 	      lda	BugPosY,y
    269  fbe1		       4a		      lsr
    270  fbe2		       99 ba 00 	      sta	BugDrawPosBottom,y
    271  fbe5
    272  fbe5		       69 04		      adc	#BUG_SIZE/2
    273  fbe7		       99 bc 00 	      sta	BugDrawPosTop,y
    274  fbea
    275  fbea		       88		      dey
    276  fbeb		       10 f1		      bpl	.bug_draw_start_loop
    277  fbed
    278  fbed		       60		      rts
    279  fbee
    280  fbee				   BugSample
    281  fbee		       a9 1e		      lda	#BUG_SAMPLE_LEN
    282  fbf0		       85 91		      sta	SampleStep
    283  fbf2		       a9 03		      lda	#BUG_SAMPLE_C
    284  fbf4		       85 16		      sta	AUDC1
    285  fbf6		       a9 14		      lda	#BUG_SAMPLE_F
    286  fbf8		       85 18		      sta	AUDF1
    287  fbfa		       a9 04		      lda	#BUG_SAMPLE_V
    288  fbfc		       85 1a		      sta	AUDV1
    289  fbfe		       60		      rts
    290  fbff
    291  fbff				   BugColSample
    292  fbff		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    293  fc01		       85 91		      sta	SampleStep
    294  fc03		       a9 08		      lda	#BUG_COL_SAMPLE_C
    295  fc05		       85 16		      sta	AUDC1
    296  fc07		       a9 08		      lda	#BUG_COL_SAMPLE_F
    297  fc09		       85 18		      sta	AUDF1
    298  fc0b		       a9 03		      lda	#BUG_COL_SAMPLE_V
    299  fc0d		       85 1a		      sta	AUDV1
    300  fc0f		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fc10					      include	"objects/swatter.asm"
      1  fc10							;==================
      2  fc10							; Swatter (player1)
      3  fc10							;==================
      4  fc10
      5  fc10							; Constants
      6  fc10
      7  fc10		       00 30	   SWATTER_COLOR =	#$30
      8  fc10		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fc10		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fc10		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fc10
     12  fc10		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fc10		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fc10
     15  fc10		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fc10		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fc10
     18  fc10		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fc10		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fc10		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fc10
     22  fc10		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fc10		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fc10		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fc10		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fc10		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fc10
     28  fc10		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fc10		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fc10		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fc10		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fc10
     33  fc10		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fc10		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fc10		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fc10		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fc10
     38  fc10							; Initialization
     39  fc10
     40  fc10				   SwatterInit
     41  fc10
     42  fc10		       20 ea fc 	      jsr	SwatterReset
     43  fc13
     44  fc13		       60		      rts
     45  fc14
     46  fc14							; Frame Update
     47  fc14
     48  fc14				   SwatterUpdate
     49  fc14
     50  fc14							; Check b/w
     51  fc14		       ad 82 02 	      lda	SWCHB
     52  fc17					      REPEAT	4
     53  fc17		       4a		      lsr
     52  fc17					      REPEND
     53  fc18		       4a		      lsr
     52  fc18					      REPEND
     53  fc19		       4a		      lsr
     52  fc19					      REPEND
     53  fc1a		       4a		      lsr
     54  fc1b					      REPEND
     55  fc1b		       90 10		      bcc	.swatter_update_bw
     56  fc1d
     57  fc1d				   .swatter_update_color
     58  fc1d		       a5 c0		      lda	SwatterState
     59  fc1f		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     60  fc21		       d0 05		      bne	.swatter_update_color_hold
     61  fc23				   .swatter_update_color_active
     62  fc23		       a9 30		      lda	#SWATTER_COLOR
     63  fc25		       4c 3a fc 	      jmp	.swatter_update_color_set
     64  fc28				   .swatter_update_color_hold
     65  fc28		       a9 36		      lda	#SWATTER_HOLD_COLOR
     66  fc2a		       4c 3a fc 	      jmp	.swatter_update_color_set
     67  fc2d
     68  fc2d				   .swatter_update_bw
     69  fc2d		       a5 c0		      lda	SwatterState
     70  fc2f		       c9 80		      cmp	#SWATTER_STATE_HOLD
     71  fc31		       d0 05		      bne	.swatter_update_bw_active
     72  fc33				   .swatter_update_bw_hold
     73  fc33		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     74  fc35		       4c 3a fc 	      jmp	.swatter_update_color_set
     75  fc38				   .swatter_update_bw_active
     76  fc38		       a9 0e		      lda	#SWATTER_BW_COLOR
     77  fc3a
     78  fc3a				   .swatter_update_color_set
     79  fc3a		       85 c1		      sta	SwatterColor
     80  fc3c
     81  fc3c				   .swatter_update_hold_sample
     82  fc3c		       a4 c0		      ldy	SwatterState
     83  fc3e		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fc40		       d0 0f		      bne	.swatter_update_state
     85  fc42
     86  fc42		       c6 c8		      dec	SwatterSampleCount
     87  fc44		       d0 0b		      bne	.swatter_update_state
     88  fc46
     89  fc46		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     90  fc48		       85 c8		      sta	SwatterSampleCount
     91  fc4a
     92  fc4a		       c6 c9		      dec	SwatterSampleF
     93  fc4c		       a4 c9		      ldy	SwatterSampleF
     94  fc4e		       20 0a fd 	      jsr	SwatterHoldSample
     95  fc51
     96  fc51				   .swatter_update_state
     97  fc51		       a6 8e		      ldx	FrameTimer+1
     98  fc53		       d0 2d		      bne	.swatter_update_collision
     99  fc55
    100  fc55		       a4 c0		      ldy	SwatterState
    101  fc57		       c0 00		      cpy	#SWATTER_STATE_WAIT
    102  fc59		       f0 0a		      beq	.swatter_update_state_wait
    103  fc5b
    104  fc5b		       c0 80		      cpy	#SWATTER_STATE_HOLD
    105  fc5d		       f0 18		      beq	.swatter_update_state_hold
    106  fc5f
    107  fc5f							; Else we're at the end of the active state
    108  fc5f		       20 ea fc 	      jsr	SwatterReset
    109  fc62		       4c 91 fc 	      jmp	.swatter_update_return
    110  fc65
    111  fc65				   .swatter_update_state_wait
    112  fc65		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    113  fc67		       84 c9		      sty	SwatterSampleF
    114  fc69		       20 0a fd 	      jsr	SwatterHoldSample
    115  fc6c
    116  fc6c		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    117  fc6e		       85 c8		      sta	SwatterSampleCount
    118  fc70
    119  fc70		       a9 80		      lda	#SWATTER_STATE_HOLD
    120  fc72		       a6 c3		      ldx	SwatterHoldTime
    121  fc74		       4c 7e fc 	      jmp	.swatter_update_state_set
    122  fc77
    123  fc77				   .swatter_update_state_hold
    124  fc77		       20 19 fd 	      jsr	SwatterActiveSample
    125  fc7a
    126  fc7a		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    127  fc7c		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    128  fc7e
    129  fc7e				   .swatter_update_state_set
    130  fc7e		       85 c0		      sta	SwatterState
    131  fc80		       86 8e		      stx	FrameTimer+1
    132  fc82
    133  fc82				   .swatter_update_collision
    134  fc82							; Check 1 frame after active
    135  fc82		       a5 c0		      lda	SwatterState
    136  fc84		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    137  fc86		       d0 09		      bne	.swatter_update_return
    138  fc88		       a6 8e		      ldx	FrameTimer+1
    139  fc8a		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    140  fc8c		       d0 03		      bne	.swatter_update_return
    141  fc8e
    142  fc8e		       20 92 fc 	      jsr	SwatterCollision
    143  fc91
    144  fc91				   .swatter_update_return
    145  fc91		       60		      rts
    146  fc92
    147  fc92				   SwatterCollision
    148  fc92		       24 00		      bit	CXM0P
    149  fc94		       30 09		      bmi	.swatter_collision_m0
    150  fc96
    151  fc96		       24 01		      bit	CXM1P
    152  fc98		       70 0a		      bvs	.swatter_collision_m1
    153  fc9a
    154  fc9a		       24 07		      bit	CXPPMM
    155  fc9c		       30 0e		      bmi	.swatter_collision_p0
    156  fc9e
    157  fc9e		       60		      rts
    158  fc9f
    159  fc9f				   .swatter_collision_m0
    160  fc9f		       a2 00		      ldx	#0
    161  fca1		       4c a6 fc 	      jmp	.swatter_collision_bug_reset
    162  fca4
    163  fca4				   .swatter_collision_m1
    164  fca4		       a2 01		      ldx	#1
    165  fca6
    166  fca6				   .swatter_collision_bug_reset
    167  fca6		       20 0a fb 	      jsr	BugReset
    168  fca9		       4c bc fc 	      jmp	.swatter_collision_active
    169  fcac
    170  fcac				   .swatter_collision_p0
    171  fcac
    172  fcac		       a5 92		      lda	ScoreValue
    173  fcae		       c5 c4		      cmp	SwatterHitDamage
    174  fcb0		       90 06		      bcc	.swatter_collision_p0_zero
    175  fcb2							;beq .swatter_collision_p0_zero
    176  fcb2
    177  fcb2		       18		      clc
    178  fcb3		       e5 c4		      sbc	SwatterHitDamage
    179  fcb5		       4c ba fc 	      jmp	.swatter_collision_p0_set
    180  fcb8
    181  fcb8				   .swatter_collision_p0_zero
    182  fcb8		       a9 00		      lda	#0
    183  fcba
    184  fcba				   .swatter_collision_p0_set
    185  fcba		       85 92		      sta	ScoreValue
    186  fcbc
    187  fcbc				   .swatter_collision_active
    188  fcbc		       20 2a fd 	      jsr	SwatterHitSample
    189  fcbf
    190  fcbf		       60		      rts
    191  fcc0
    192  fcc0				   SwatterPosition
    193  fcc0
    194  fcc0							; Set Position
    195  fcc0		       a2 01		      ldx	#1	; Object (player1)
    196  fcc2		       a5 be		      lda	SwatterPos	; X Position
    197  fcc4		       20 00 f0 	      jsr	PosObject
    198  fcc7
    199  fcc7		       60		      rts
    200  fcc8
    201  fcc8							; Scanline Draw
    202  fcc8
    203  fcc8				   SwatterDrawStart
    204  fcc8
    205  fcc8							; Hide swatter if wait state
    206  fcc8		       24 c0		      bit	SwatterState
    207  fcca		       30 09		      bmi	.swatter_draw_start
    208  fccc
    209  fccc		       a9 ff		      lda	#-1
    210  fcce		       85 c5		      sta	SwatterIndex
    211  fcd0							;sta SwatterDrawPos
    212  fcd0		       a9 00		      lda	#0
    213  fcd2		       85 c7		      sta	SwatterLine
    214  fcd4
    215  fcd4		       60		      rts
    216  fcd5
    217  fcd5				   .swatter_draw_start
    218  fcd5
    219  fcd5							; Set sprite color
    220  fcd5		       a5 c1		      lda	SwatterColor
    221  fcd7		       85 07		      sta	COLUP1
    222  fcd9
    223  fcd9							; Note: Doesn't need vertical delay
    224  fcd9
    225  fcd9							; Calculate starting position
    226  fcd9		       a5 bf		      lda	SwatterPos+1	; Y Position
    227  fcdb		       4a		      lsr
    228  fcdc		       18		      clc
    229  fcdd		       69 14		      adc	#SWATTER_SPRITE_SIZE
    230  fcdf		       85 c6		      sta	SwatterDrawPos
    231  fce1
    232  fce1							; Initialize sprite index
    233  fce1		       a9 13		      lda	#SWATTER_SPRITE_SIZE-1
    234  fce3		       85 c5		      sta	SwatterIndex
    235  fce5		       a9 00		      lda	#0
    236  fce7		       85 c7		      sta	SwatterLine
    237  fce9
    238  fce9		       60		      rts
    239  fcea
    240  fcea				   SwatterReset
    241  fcea							; Initialize Swatter State
    242  fcea		       a9 00		      lda	#SWATTER_STATE_WAIT
    243  fcec		       85 c0		      sta	SwatterState
    244  fcee
    245  fcee							; Set Wait Timer
    246  fcee		       20 13 f0 	      jsr	Random
    247  fcf1		       a5 84		      lda	Rand8
    248  fcf3		       29 3f		      and	#$3f
    249  fcf5		       18		      clc
    250  fcf6		       65 c2		      adc	SwatterWaitTime
    251  fcf8		       85 8e		      sta	FrameTimer+1
    252  fcfa
    253  fcfa							; Set Random Position
    254  fcfa		       20 13 f0 	      jsr	Random
    255  fcfd		       a5 84		      lda	Rand8	; X Position
    256  fcff		       29 7f		      and	#$7f
    257  fd01		       85 be		      sta	SwatterPos+0
    258  fd03		       a5 85		      lda	Rand16	; Y Position
    259  fd05		       29 7e		      and	#$7e	; Ensure that Y position is even
    260  fd07		       85 bf		      sta	SwatterPos+1
    261  fd09
    262  fd09		       60		      rts
    263  fd0a
    264  fd0a				   SwatterHoldSample
    265  fd0a		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    266  fd0c		       85 91		      sta	SampleStep
    267  fd0e		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    268  fd10		       85 16		      sta	AUDC1
    269  fd12		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    270  fd14		       85 1a		      sta	AUDV1
    271  fd16
    272  fd16		       84 18		      sty	AUDF1	; Store value of y as frequency
    273  fd18
    274  fd18		       60		      rts
    275  fd19
    276  fd19				   SwatterActiveSample
    277  fd19		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    278  fd1b		       85 91		      sta	SampleStep
    279  fd1d		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    280  fd1f		       85 16		      sta	AUDC1
    281  fd21		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    282  fd23		       85 18		      sta	AUDF1
    283  fd25		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    284  fd27		       85 1a		      sta	AUDV1
    285  fd29		       60		      rts
    286  fd2a
    287  fd2a				   SwatterHitSample
    288  fd2a		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    289  fd2c		       85 91		      sta	SampleStep
    290  fd2e		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    291  fd30		       85 16		      sta	AUDC1
    292  fd32		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    293  fd34		       85 18		      sta	AUDF1
    294  fd36		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    295  fd38		       85 1a		      sta	AUDV1
    296  fd3a		       60		      rts
------- FILE game.asm
     22  fd3b
     23  fd3b							; Initialization
     24  fd3b
     25  fd3b				   GameInit
     26  fd3b
     27  fd3b							; Setup logic and kernel
      0  fd3b					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fd3b				   .POINTER   SET	VBlankPtr
      2  fd3b				   .ADDRESS   SET	GameVerticalBlank
      3  fd3b
      4  fd3b		       a9 78		      LDA	#<.ADDRESS
      5  fd3d		       85 86		      STA	.POINTER
      6  fd3f		       a9 fd		      LDA	#>.ADDRESS
      7  fd41		       85 87		      STA	.POINTER+1
      8  fd43
      0  fd43					      SET_POINTER	KernelPtr, GameKernel
      1  fd43				   .POINTER   SET	KernelPtr
      2  fd43				   .ADDRESS   SET	GameKernel
      3  fd43
      4  fd43		       a9 f2		      LDA	#<.ADDRESS
      5  fd45		       85 88		      STA	.POINTER
      6  fd47		       a9 fd		      LDA	#>.ADDRESS
      7  fd49		       85 89		      STA	.POINTER+1
      8  fd4b
      0  fd4b					      SET_POINTER	OverScanPtr, GameOverScan
      1  fd4b				   .POINTER   SET	OverScanPtr
      2  fd4b				   .ADDRESS   SET	GameOverScan
      3  fd4b
      4  fd4b		       a9 a2		      LDA	#<.ADDRESS
      5  fd4d		       85 8a		      STA	.POINTER
      6  fd4f		       a9 fd		      LDA	#>.ADDRESS
      7  fd51		       85 8b		      STA	.POINTER+1
      8  fd53
     31  fd53
     32  fd53							; Mute Audio
     33  fd53		       a9 00		      lda	#0
     34  fd55							;    sta AUDC0
     35  fd55							;    sta AUDV0
     36  fd55							;    sta AUDF0
     37  fd55							;sta AUDC1
     38  fd55		       85 1a		      sta	AUDV1
     39  fd57							;sta AUDF1
     40  fd57		       85 91		      sta	SampleStep
     41  fd59
     42  fd59							; Load Audio Settings
     43  fd59		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fd5b		       85 19		      sta	AUDV0
     45  fd5d
     46  fd5d							; Make it so that we play the first note immediately
     47  fd5d		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fd5f		       85 90		      sta	AudioStep
     49  fd61		       a9 02		      lda	#2
     50  fd63		       85 8d		      sta	FrameTimer
     51  fd65
     52  fd65							; Reset NuSiz
     53  fd65							;    lda #0
     54  fd65							;    sta NuSiz0
     55  fd65							;    sta NUSIZ0
     56  fd65							;    sta NuSiz1
     57  fd65							;    sta NUSIZ1
     58  fd65
     59  fd65							; Initialize Objects
     60  fd65		       20 fb f5 	      jsr	LevelInit
     61  fd68		       20 a9 f6 	      jsr	ScoreInit
     62  fd6b		       20 32 f8 	      jsr	SpiderInit
     63  fd6e		       20 8c f9 	      jsr	LineInit
     64  fd71		       20 01 fb 	      jsr	BugInit
     65  fd74		       20 10 fc 	      jsr	SwatterInit
     66  fd77
     67  fd77		       60		      rts
     68  fd78
     69  fd78				   GameVerticalBlank
     70  fd78
     71  fd78							; Refresh random values
     72  fd78		       20 13 f0 	      jsr	Random
     73  fd7b
     74  fd7b							; Update Objects
     75  fd7b		       20 11 f6 	      jsr	LevelUpdate
     76  fd7e		       20 47 f8 	      jsr	SpiderUpdate
     77  fd81		       20 9b f9 	      jsr	LineUpdate
     78  fd84		       20 1e fb 	      jsr	BugUpdate
     79  fd87		       20 14 fc 	      jsr	SwatterUpdate
     80  fd8a		       20 b2 f6 	      jsr	ScoreUpdate
     81  fd8d
     82  fd8d							; Reset Collisions
     83  fd8d		       85 2c		      sta	CXCLR
     84  fd8f
     85  fd8f							; Clear horizontal movement
     86  fd8f		       85 2b		      sta	HMCLR
     87  fd91
     88  fd91							; Update Positions
     89  fd91		       20 64 f9 	      jsr	SpiderPosition
     90  fd94		       20 9d fa 	      jsr	LinePosition
     91  fd97		       20 cd fb 	      jsr	BugPosition
     92  fd9a		       20 c0 fc 	      jsr	SwatterPosition
     93  fd9d
     94  fd9d							; Set final x positions
     95  fd9d		       85 02		      sta	WSYNC
     96  fd9f		       85 2a		      sta	HMOVE
     97  fda1
     98  fda1		       60		      rts
     99  fda2
    100  fda2				   GameOverScan
    101  fda2
    102  fda2							; Audio Routines
    103  fda2		       20 ba fd 	      jsr	GameAudio
    104  fda5		       20 ac fd 	      jsr	GameSample
    105  fda8
    106  fda8							; State Routines
    107  fda8		       20 ea fd 	      jsr	GameDeath
    108  fdab
    109  fdab		       60		      rts
    110  fdac
    111  fdac				   GameSample
    112  fdac
    113  fdac		       a6 91		      ldx	SampleStep
    114  fdae		       f0 07		      beq	.game_sample_return
    115  fdb0
    116  fdb0		       ca		      dex
    117  fdb1		       d0 04		      bne	.game_sample_return
    118  fdb3
    119  fdb3				   .game_sample_mute
    120  fdb3		       a9 00		      lda	#0
    121  fdb5		       85 1a		      sta	AUDV1
    122  fdb7							;sta AUDF1
    123  fdb7							;sta AUDC1
    124  fdb7
    125  fdb7				   .game_sample_return
    126  fdb7		       86 91		      stx	SampleStep
    127  fdb9		       60		      rts
    128  fdba
    129  fdba				   GameAudio
    130  fdba
    131  fdba		       a6 8d		      ldx	FrameTimer
    132  fdbc		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    133  fdbe		       f0 25		      beq	.game_audio_mute_note
    134  fdc0		       e0 00		      cpx	#0
    135  fdc2		       d0 25		      bne	.game_audio_return
    136  fdc4
    137  fdc4							; Reset Timer
    138  fdc4		       a2 09		      ldx	#GAME_AUDIO_STEP
    139  fdc6		       86 8d		      stx	FrameTimer
    140  fdc8
    141  fdc8				   .game_audio_play
    142  fdc8
    143  fdc8							; Increment melody position
    144  fdc8		       a4 90		      ldy	AudioStep
    145  fdca		       c8		      iny
    146  fdcb
    147  fdcb		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    148  fdcd		       d0 02		      bne	.game_audio_play_note
    149  fdcf
    150  fdcf							; Loop our audio step
    151  fdcf		       a0 00		      ldy	#0
    152  fdd1
    153  fdd1				   .game_audio_play_note
    154  fdd1
    155  fdd1							; Save current position
    156  fdd1		       84 90		      sty	AudioStep
    157  fdd3
    158  fdd3							; Melody Line
    159  fdd3		       b9 f1 fe 	      lda	GameAudio0,y
    160  fdd6		       c9 ff		      cmp	#$FF
    161  fdd8		       f0 0b		      beq	.game_audio_mute_note
    162  fdda		       85 17		      sta	AUDF0
    163  fddc		       a9 06		      lda	#GAME_AUDIO_TONE
    164  fdde		       85 15		      sta	AUDC0
    165  fde0		       a9 02		      lda	#GAME_AUDIO_VOLUME
    166  fde2		       85 19		      sta	AUDV0
    167  fde4
    168  fde4		       60		      rts
    169  fde5
    170  fde5				   .game_audio_mute_note
    171  fde5
    172  fde5		       a9 00		      lda	#0
    173  fde7							;sta AUDF0
    174  fde7							;sta AUDC0
    175  fde7		       85 19		      sta	AUDV0
    176  fde9
    177  fde9				   .game_audio_return
    178  fde9		       60		      rts
    179  fdea
    180  fdea				   GameDeath
    181  fdea		       a5 92		      lda	ScoreValue+0
    182  fdec		       d0 03		      bne	.game_death_return
    183  fdee
    184  fdee							; Show Game Over Screen
    185  fdee		       20 11 ff 	      jsr	OverInit
    186  fdf1
    187  fdf1				   .game_death_return
    188  fdf1		       60		      rts
    189  fdf2
    190  fdf2				   GameKernel
    191  fdf2
    192  fdf2							; Turn on display
    193  fdf2		       a9 00		      lda	#0
    194  fdf4		       85 01		      sta	VBLANK
    195  fdf6
    196  fdf6				   .game_kernel_score
    197  fdf6
    198  fdf6							; Draw Score on top first
    199  fdf6		       20 15 f7 	      jsr	ScoreDraw
    200  fdf9
    201  fdf9				   .game_kernel_objects_start
    202  fdf9
    203  fdf9							; Setup Drawing Objects
    204  fdf9		       20 29 f8 	      jsr	WebDrawStart
    205  fdfc		       20 6c f9 	      jsr	SpiderDrawStart
    206  fdff		       20 c8 fc 	      jsr	SwatterDrawStart
    207  fe02		       20 a5 fa 	      jsr	LineDrawStart
    208  fe05		       20 dc fb 	      jsr	BugDrawStart
    209  fe08
    210  fe08							; Set missle and sprite sizes
    211  fe08		       a9 35		      lda	#%00110101
    212  fe0a		       85 04		      sta	NUSIZ0
    213  fe0c		       a9 37		      lda	#%00110111
    214  fe0e		       85 05		      sta	NUSIZ1
    215  fe10
    216  fe10							; Set playfield settings and ball size
    217  fe10		       a9 21		      lda	#%00100001
    218  fe12		       85 0a		      sta	CTRLPF
    219  fe14
    220  fe14							; Half scanline counter
    221  fe14		       a2 54		      ldx	#(KERNEL_SCANLINES-SCORE_LINES)/2-2
    222  fe16
    223  fe16							; 6 line counter
    224  fe16		       a9 00		      lda	#0
    225  fe18		       85 82		      sta	Temp+2
    226  fe1a
    227  fe1a							; Load background color and start first line
    228  fe1a		       a5 9f		      lda	WebColor+0
    229  fe1c		       85 02		      sta	WSYNC
    230  fe1e		       85 09		      sta	COLUBK
    231  fe20
    232  fe20				   .game_kernel_objects 		; 5 or 10 cycles
    233  fe20
    234  fe20		       a5 82		      lda	Temp+2	; 3
    235  fe22		       d0 1a		      bne	.game_kernel_missle	; 2*
    236  fe24
    237  fe24		       a9 03		      lda	#3	; 2
    238  fe26		       85 82		      sta	Temp+2	; 3
    239  fe28
    240  fe28				   .game_kernel_web		; 32 cycles
    241  fe28							; Web
    242  fe28
    243  fe28		       a4 9e		      ldy	WebIndex	; 3
    244  fe2a
    245  fe2a							; Load Image
    246  fe2a		       b9 50 f1 	      lda	WebImagePF0,y	; 4
    247  fe2d		       85 0d		      sta	PF0	; 3
    248  fe2f		       b9 6c f1 	      lda	WebImagePF1,y	; 4
    249  fe32		       85 0e		      sta	PF1	; 3
    250  fe34		       b9 88 f1 	      lda	WebImagePF2,y	; 4
    251  fe37		       85 0f		      sta	PF2	; 3
    252  fe39
    253  fe39		       e6 9e		      inc	WebIndex	; 5
    254  fe3b
    255  fe3b		       4c 68 fe 	      jmp	.game_kernel_line	; 3
    256  fe3e
    257  fe3e				   .game_kernel_missle
    258  fe3e
    259  fe3e				   .game_kernel_missle_bug_0		; 18 cycles
    260  fe3e							; First Bug
    261  fe3e
    262  fe3e							; Top
    263  fe3e		       e4 bc		      cpx	BugDrawPosTop+0	; 3
    264  fe40		       b0 09		      bcs	.game_kernel_missle_bug_0_off_1	; 2 or 3 if branching
    265  fe42
    266  fe42							; Bottom
    267  fe42		       e4 ba		      cpx	BugDrawPosBottom+0	; 3
    268  fe44		       90 08		      bcc	.game_kernel_missle_bug_0_off_2	; 2 or 3 if branching
    269  fe46
    270  fe46				   .game_kernel_missle_bug_0_on
    271  fe46		       a0 02		      ldy	#%00000010	; 2
    272  fe48		       4c 51 fe 	      jmp	.game_kernel_missle_bug_0_set	; 3
    273  fe4b
    274  fe4b				   .game_kernel_missle_bug_0_off_1
      0  fe4b					      sleep	5
      1  fe4b				   .CYCLES    SET	5
      2  fe4b
      3  fe4b				  -	      IF	.CYCLES < 2
      4  fe4b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe4b				  -	      ERR
      6  fe4b					      ENDIF
      7  fe4b
      8  fe4b					      IF	.CYCLES & 1
      9  fe4b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe4b		       04 00		      nop	0
     11  fe4d				  -	      ELSE
     12  fe4d				  -	      bit	VSYNC
     13  fe4d					      ENDIF
     14  fe4d				   .CYCLES    SET	.CYCLES - 3
     15  fe4d					      ENDIF
     16  fe4d
     17  fe4d					      REPEAT	.CYCLES / 2
     18  fe4d		       ea		      nop
     19  fe4e					      REPEND
    276  fe4e				   .game_kernel_missle_bug_0_off_2
      0  fe4e					      sleep	2
      1  fe4e				   .CYCLES    SET	2
      2  fe4e
      3  fe4e				  -	      IF	.CYCLES < 2
      4  fe4e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe4e				  -	      ERR
      6  fe4e					      ENDIF
      7  fe4e
      8  fe4e				  -	      IF	.CYCLES & 1
      9  fe4e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe4e				  -	      nop	0
     11  fe4e				  -	      ELSE
     12  fe4e				  -	      bit	VSYNC
     13  fe4e				  -	      ENDIF
     14  fe4e				  -.CYCLES    SET	.CYCLES - 3
     15  fe4e					      ENDIF
     16  fe4e
     17  fe4e					      REPEAT	.CYCLES / 2
     18  fe4e		       ea		      nop
     19  fe4f					      REPEND
    278  fe4f		       a0 00		      ldy	#%00000000	; 2
    279  fe51				   .game_kernel_missle_bug_0_set
    280  fe51		       84 1d		      sty	ENAM0	; 3
    281  fe53
    282  fe53				   .game_kernel_missle_bug_1		; 18 cycles
    283  fe53							; Second Bug
    284  fe53
    285  fe53							; Top
    286  fe53		       e4 bd		      cpx	BugDrawPosTop+1	; 3
    287  fe55		       b0 09		      bcs	.game_kernel_missle_bug_1_off_1	; 2 or 3 if branching
    288  fe57
    289  fe57							; Bottom
    290  fe57		       e4 bb		      cpx	BugDrawPosBottom+1	; 3
    291  fe59		       90 08		      bcc	.game_kernel_missle_bug_1_off_2	; 2 or 3 if branching
    292  fe5b
    293  fe5b				   .game_kernel_missle_bug_1_on
    294  fe5b		       a0 02		      ldy	#%00000010	; 2
    295  fe5d		       4c 66 fe 	      jmp	.game_kernel_missle_bug_1_set	; 3
    296  fe60
    297  fe60				   .game_kernel_missle_bug_1_off_1
      0  fe60					      sleep	5
      1  fe60				   .CYCLES    SET	5
      2  fe60
      3  fe60				  -	      IF	.CYCLES < 2
      4  fe60				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe60				  -	      ERR
      6  fe60					      ENDIF
      7  fe60
      8  fe60					      IF	.CYCLES & 1
      9  fe60					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe60		       04 00		      nop	0
     11  fe62				  -	      ELSE
     12  fe62				  -	      bit	VSYNC
     13  fe62					      ENDIF
     14  fe62				   .CYCLES    SET	.CYCLES - 3
     15  fe62					      ENDIF
     16  fe62
     17  fe62					      REPEAT	.CYCLES / 2
     18  fe62		       ea		      nop
     19  fe63					      REPEND
    299  fe63				   .game_kernel_missle_bug_1_off_2
      0  fe63					      sleep	2
      1  fe63				   .CYCLES    SET	2
      2  fe63
      3  fe63				  -	      IF	.CYCLES < 2
      4  fe63				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe63				  -	      ERR
      6  fe63					      ENDIF
      7  fe63
      8  fe63				  -	      IF	.CYCLES & 1
      9  fe63				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe63				  -	      nop	0
     11  fe63				  -	      ELSE
     12  fe63				  -	      bit	VSYNC
     13  fe63				  -	      ENDIF
     14  fe63				  -.CYCLES    SET	.CYCLES - 3
     15  fe63					      ENDIF
     16  fe63
     17  fe63					      REPEAT	.CYCLES / 2
     18  fe63		       ea		      nop
     19  fe64					      REPEND
    301  fe64		       a0 00		      ldy	#%00000000	; 2
    302  fe66				   .game_kernel_missle_bug_1_set
    303  fe66		       84 1e		      sty	ENAM1	; 3
    304  fe68
    305  fe68				   .game_kernel_line		; 18 cycles
    306  fe68							; Line
    307  fe68
    308  fe68							; Top
    309  fe68		       e4 b2		      cpx	LineDrawPos+1	; 3
    310  fe6a		       b0 09		      bcs	.game_kernel_line_set_off_1	; 2 or 3 if branching
    311  fe6c
    312  fe6c							; Bottom
    313  fe6c		       e4 b1		      cpx	LineDrawPos+0	; 3
    314  fe6e		       90 08		      bcc	.game_kernel_line_set_off_2	; 2 or 3 if branching
    315  fe70
    316  fe70				   .game_kernel_line_set_on
    317  fe70		       a0 02		      ldy	#%00000010	; 2
    318  fe72		       4c 7b fe 	      jmp	.game_kernel_line_set	; 3
    319  fe75
    320  fe75				   .game_kernel_line_set_off_1
      0  fe75					      sleep	5
      1  fe75				   .CYCLES    SET	5
      2  fe75
      3  fe75				  -	      IF	.CYCLES < 2
      4  fe75				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe75				  -	      ERR
      6  fe75					      ENDIF
      7  fe75
      8  fe75					      IF	.CYCLES & 1
      9  fe75					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe75		       04 00		      nop	0
     11  fe77				  -	      ELSE
     12  fe77				  -	      bit	VSYNC
     13  fe77					      ENDIF
     14  fe77				   .CYCLES    SET	.CYCLES - 3
     15  fe77					      ENDIF
     16  fe77
     17  fe77					      REPEAT	.CYCLES / 2
     18  fe77		       ea		      nop
     19  fe78					      REPEND
    322  fe78				   .game_kernel_line_set_off_2
      0  fe78					      sleep	2
      1  fe78				   .CYCLES    SET	2
      2  fe78
      3  fe78				  -	      IF	.CYCLES < 2
      4  fe78				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe78				  -	      ERR
      6  fe78					      ENDIF
      7  fe78
      8  fe78				  -	      IF	.CYCLES & 1
      9  fe78				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe78				  -	      nop	0
     11  fe78				  -	      ELSE
     12  fe78				  -	      bit	VSYNC
     13  fe78				  -	      ENDIF
     14  fe78				  -.CYCLES    SET	.CYCLES - 3
     15  fe78					      ENDIF
     16  fe78
     17  fe78					      REPEAT	.CYCLES / 2
     18  fe78		       ea		      nop
     19  fe79					      REPEND
    324  fe79		       a0 00		      ldy	#%00000000	; 2
    325  fe7b				   .game_kernel_line_set
    326  fe7b		       84 1f		      sty	ENABL	; 3
    327  fe7d
    328  fe7d							; Next Line
    329  fe7d							;sleep 17 or 16
    330  fe7d		       85 02		      sta	WSYNC
    331  fe7f
    332  fe7f				   .game_kernel_sprite
    333  fe7f
    334  fe7f				   .game_kernel_sprite_spider		; 34 cycles
    335  fe7f							; Spider
    336  fe7f
    337  fe7f		       a4 a7		      ldy	SpiderIndex	; 3
    338  fe81		       30 16		      bmi	.game_kernel_sprite_spider_load_1	; At end of sprite / 2 or 3 if branching
    339  fe83
    340  fe83							; Check y position to see if we should be drawing
    341  fe83		       8a		      txa		; 2
    342  fe84		       e5 a8		      sbc	SpiderDrawPos	; 3
    343  fe86		       10 15		      bpl	.game_kernel_sprite_spider_load_2	; 2 or 3 if branching
    344  fe88
    345  fe88				   .game_kernel_sprite_spider_draw
    346  fe88
    347  fe88							; Decrement sprite index
    348  fe88		       88		      dey		; 2
    349  fe89		       10 05		      bpl	.game_kernel_sprite_spider_grab	; 2 or 3 if branching
    350  fe8b
    351  fe8b		       a9 00		      lda	#0	; 2
    352  fe8d							;sleep 1
    353  fe8d		       4c 92 fe 	      jmp	.game_kernel_sprite_spider_store	; 3
    354  fe90
    355  fe90				   .game_kernel_sprite_spider_grab
    356  fe90		       b1 a1		      lda	(SpiderPtr),y	; 5
    357  fe92				   .game_kernel_sprite_spider_store
    358  fe92		       84 a7		      sty	SpiderIndex	; 3
    359  fe94		       85 a9		      sta	SpiderLine	; 3
    360  fe96
    361  fe96		       4c a7 fe 	      jmp	.game_kernel_sprite_spider_load_3	; 3
    362  fe99
    363  fe99				   .game_kernel_sprite_spider_load_1
      0  fe99					      sleep	7
      1  fe99				   .CYCLES    SET	7
      2  fe99
      3  fe99				  -	      IF	.CYCLES < 2
      4  fe99				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe99				  -	      ERR
      6  fe99					      ENDIF
      7  fe99
      8  fe99					      IF	.CYCLES & 1
      9  fe99					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe99		       04 00		      nop	0
     11  fe9b				  -	      ELSE
     12  fe9b				  -	      bit	VSYNC
     13  fe9b					      ENDIF
     14  fe9b				   .CYCLES    SET	.CYCLES - 3
     15  fe9b					      ENDIF
     16  fe9b
     17  fe9b					      REPEAT	.CYCLES / 2
     18  fe9b		       ea		      nop
     17  fe9b					      REPEND
     18  fe9c		       ea		      nop
     19  fe9d					      REPEND
    365  fe9d				   .game_kernel_sprite_spider_load_2
      0  fe9d					      sleep	15
      1  fe9d				   .CYCLES    SET	15
      2  fe9d
      3  fe9d				  -	      IF	.CYCLES < 2
      4  fe9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe9d				  -	      ERR
      6  fe9d					      ENDIF
      7  fe9d
      8  fe9d					      IF	.CYCLES & 1
      9  fe9d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe9d		       04 00		      nop	0
     11  fe9f				  -	      ELSE
     12  fe9f				  -	      bit	VSYNC
     13  fe9f					      ENDIF
     14  fe9f				   .CYCLES    SET	.CYCLES - 3
     15  fe9f					      ENDIF
     16  fe9f
     17  fe9f					      REPEAT	.CYCLES / 2
     18  fe9f		       ea		      nop
     17  fe9f					      REPEND
     18  fea0		       ea		      nop
     17  fea0					      REPEND
     18  fea1		       ea		      nop
     17  fea1					      REPEND
     18  fea2		       ea		      nop
     17  fea2					      REPEND
     18  fea3		       ea		      nop
     17  fea3					      REPEND
     18  fea4		       ea		      nop
     19  fea5					      REPEND
    367  fea5		       a5 a9		      lda	SpiderLine	; 3
    368  fea7				   .game_kernel_sprite_spider_load_3
    369  fea7		       85 1b		      sta	GRP0	; 3
    370  fea9
    371  fea9				   .game_kernel_sprite_swatter		; 30 cycles
    372  fea9							; Swatter
    373  fea9
    374  fea9							; Check if wait state
    375  fea9							;bit SwatterState
    376  fea9							;bpl .game_kernel_sprite_swatter_load
    377  fea9
    378  fea9		       a4 c5		      ldy	SwatterIndex	; 3
    379  feab		       30 0f		      bmi	.game_kernel_sprite_swatter_load_1	; At end of sprite / 2 or 3 if branching
    380  fead
    381  fead							; Check y position to see if we should be drawing
    382  fead		       8a		      txa		; 2
    383  feae		       e5 c6		      sbc	SwatterDrawPos	; 3
    384  feb0		       10 0e		      bpl	.game_kernel_sprite_swatter_load_2	; 2 or 3 if branching
    385  feb2
    386  feb2				   .game_kernel_sprite_swatter_draw
    387  feb2		       b9 d4 f1 	      lda	SwatterSprite,y	; 4
    388  feb5		       85 c7		      sta	SwatterLine	; 3
    389  feb7
    390  feb7							; Decrement sprite index
    391  feb7		       c6 c5		      dec	SwatterIndex	; 5
    392  feb9
    393  feb9		       4c c8 fe 	      jmp	.game_kernel_sprite_swatter_line	; 3
    394  febc
    395  febc				   .game_kernel_sprite_swatter_load_1
      0  febc					      sleep	7
      1  febc				   .CYCLES    SET	7
      2  febc
      3  febc				  -	      IF	.CYCLES < 2
      4  febc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  febc				  -	      ERR
      6  febc					      ENDIF
      7  febc
      8  febc					      IF	.CYCLES & 1
      9  febc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  febc		       04 00		      nop	0
     11  febe				  -	      ELSE
     12  febe				  -	      bit	VSYNC
     13  febe					      ENDIF
     14  febe				   .CYCLES    SET	.CYCLES - 3
     15  febe					      ENDIF
     16  febe
     17  febe					      REPEAT	.CYCLES / 2
     18  febe		       ea		      nop
     17  febe					      REPEND
     18  febf		       ea		      nop
     19  fec0					      REPEND
    397  fec0				   .game_kernel_sprite_swatter_load_2
      0  fec0					      sleep	11
      1  fec0				   .CYCLES    SET	11
      2  fec0
      3  fec0				  -	      IF	.CYCLES < 2
      4  fec0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fec0				  -	      ERR
      6  fec0					      ENDIF
      7  fec0
      8  fec0					      IF	.CYCLES & 1
      9  fec0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fec0		       04 00		      nop	0
     11  fec2				  -	      ELSE
     12  fec2				  -	      bit	VSYNC
     13  fec2					      ENDIF
     14  fec2				   .CYCLES    SET	.CYCLES - 3
     15  fec2					      ENDIF
     16  fec2
     17  fec2					      REPEAT	.CYCLES / 2
     18  fec2		       ea		      nop
     17  fec2					      REPEND
     18  fec3		       ea		      nop
     17  fec3					      REPEND
     18  fec4		       ea		      nop
     17  fec4					      REPEND
     18  fec5		       ea		      nop
     19  fec6					      REPEND
    399  fec6		       a5 c7		      lda	SwatterLine	; 3
    400  fec8				   .game_kernel_sprite_swatter_line
    401  fec8		       85 1c		      sta	GRP1	; 3
    402  feca
    403  feca				   .game_kernel_sprite_end		; 12 or 11 cycles
    404  feca
    405  feca							;sta WSYNC
    406  feca
    407  feca							; New line, decrement half scanline, and increment 3 line counter
    408  feca		       c6 82		      dec	Temp+2	; 5
    409  fecc		       ca		      dex		; 2
    410  fecd		       f0 03		      beq	.game_kernel_clean	; 2 or 3 if branching
    411  fecf		       4c 20 fe 	      jmp	.game_kernel_objects	; 3
    412  fed2
    413  fed2				   .game_kernel_clean
    414  fed2
    415  fed2		       85 02		      sta	WSYNC
    416  fed4
    417  fed4		       a9 00		      lda	#0
    418  fed6		       85 09		      sta	COLUBK
    419  fed8		       85 08		      sta	COLUPF
    420  feda		       85 06		      sta	COLUP0
    421  fedc		       85 07		      sta	COLUP1
    422  fede		       85 0d		      sta	PF0
    423  fee0		       85 0e		      sta	PF1
    424  fee2		       85 0f		      sta	PF2
    425  fee4		       85 1b		      sta	GRP0
    426  fee6		       85 1c		      sta	GRP1
    427  fee8		       85 1d		      sta	ENAM0
    428  feea		       85 1e		      sta	ENAM1
    429  feec		       85 1f		      sta	ENABL
    430  feee
    431  feee		       85 02		      sta	WSYNC
    432  fef0
    433  fef0				   .game_kernel_return
    434  fef0		       60		      rts
    435  fef1
    436  fef1				   GameAudio0
    437  fef1		       0d		      .byte.b	#13	; D
    438  fef2		       ff		      .byte.b	#$FF
    439  fef3		       0f		      .byte.b	#15	; B
    440  fef4		       ff		      .byte.b	#$FF
    441  fef5		       0d		      .byte.b	#13	; D
    442  fef6		       ff		      .byte.b	#$FF
    443  fef7		       0f		      .byte.b	#15	; B
    444  fef8		       ff		      .byte.b	#$FF
    445  fef9		       0d		      .byte.b	#13	; D
    446  fefa		       0d		      .byte.b	#13	; D
    447  fefb		       0f		      .byte.b	#15	; B
    448  fefc		       ff		      .byte.b	#$FF
    449  fefd		       0c		      .byte.b	#12	; D#
    450  fefe		       ff		      .byte.b	#$FF
    451  feff		       0f		      .byte.b	#15	; B
    452  ff00		       ff		      .byte.b	#$FF
    453  ff01		       0b		      .byte.b	#11	; E
    454  ff02		       ff		      .byte.b	#$FF
    455  ff03		       0e		      .byte.b	#14	; C#
    456  ff04		       ff		      .byte.b	#$FF
    457  ff05		       0b		      .byte.b	#11
    458  ff06		       ff		      .byte.b	#$FF
    459  ff07		       0e		      .byte.b	#14
    460  ff08		       ff		      .byte.b	#$FF
    461  ff09		       0b		      .byte.b	#11
    462  ff0a		       0b		      .byte.b	#11
    463  ff0b		       0e		      .byte.b	#14
    464  ff0c		       ff		      .byte.b	#$FF
    465  ff0d		       0b		      .byte.b	#11
    466  ff0e		       ff		      .byte.b	#$FF
    467  ff0f		       0e		      .byte.b	#14
    468  ff10		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  ff11					      include	"over.asm"
      1  ff11							;================
      2  ff11							; Constants
      3  ff11							;================
      4  ff11
      5  ff11		       00 00	   OVER_BG_COLOR =	#$00
      6  ff11		       00 44	   OVER_FG_COLOR =	#$44
      7  ff11		       00 06	   OVER_FG_BW_COLOR =	#$06
      8  ff11
      9  ff11		       00 07	   OVER_AUDIO_TONE =	7
     10  ff11		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     11  ff11		       00 06	   OVER_AUDIO_LENGTH =	6
     12  ff11		       00 10	   OVER_AUDIO_STEP =	16
     13  ff11
     14  ff11		       00 09	   OVER_IMAGE_SIZE =	9
     15  ff11		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     16  ff11		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     17  ff11		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     18  ff11
     19  ff11				   OverInit
     20  ff11
     21  ff11							; Setup logic and kernel
      0  ff11					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  ff11				   .POINTER   SET	VBlankPtr
      2  ff11				   .ADDRESS   SET	OverVerticalBlank
      3  ff11
      4  ff11		       a9 40		      LDA	#<.ADDRESS
      5  ff13		       85 86		      STA	.POINTER
      6  ff15		       a9 ff		      LDA	#>.ADDRESS
      7  ff17		       85 87		      STA	.POINTER+1
      8  ff19
      0  ff19					      SET_POINTER	KernelPtr, OverKernel
      1  ff19				   .POINTER   SET	KernelPtr
      2  ff19				   .ADDRESS   SET	OverKernel
      3  ff19
      4  ff19		       a9 9a		      LDA	#<.ADDRESS
      5  ff1b		       85 88		      STA	.POINTER
      6  ff1d		       a9 ff		      LDA	#>.ADDRESS
      7  ff1f		       85 89		      STA	.POINTER+1
      8  ff21
      0  ff21					      SET_POINTER	OverScanPtr, OverOverScan
      1  ff21				   .POINTER   SET	OverScanPtr
      2  ff21				   .ADDRESS   SET	OverOverScan
      3  ff21
      4  ff21		       a9 5a		      LDA	#<.ADDRESS
      5  ff23		       85 8a		      STA	.POINTER
      6  ff25		       a9 ff		      LDA	#>.ADDRESS
      7  ff27		       85 8b		      STA	.POINTER+1
      8  ff29
     25  ff29
     26  ff29							; Load audio settings
     27  ff29		       a9 07		      lda	#OVER_AUDIO_TONE
     28  ff2b		       85 15		      sta	AUDC0
     29  ff2d							;lda #OVER_AUDIO_VOLUME
     30  ff2d							;sta AUDV0
     31  ff2d		       a9 00		      lda	#0
     32  ff2f							;sta AUDC1
     33  ff2f		       85 1a		      sta	AUDV1
     34  ff31
     35  ff31							; Set initial button state
     36  ff31							;lda #0
     37  ff31		       85 8f		      sta	InputState
     38  ff33
     39  ff33							; Setup frame counters
     40  ff33		       a9 01		      lda	#1
     41  ff35		       85 8d		      sta	FrameTimer
     42  ff37		       a9 10		      lda	#OVER_AUDIO_STEP
     43  ff39		       85 91		      sta	SampleStep
     44  ff3b		       a9 06		      lda	#OVER_AUDIO_LENGTH
     45  ff3d		       85 90		      sta	AudioStep
     46  ff3f
     47  ff3f		       60		      rts
     48  ff40
     49  ff40				   OverVerticalBlank
     50  ff40		       20 b2 f6 	      jsr	ScoreUpdate
     51  ff43
     52  ff43							; Load Colors
     53  ff43		       a9 00		      lda	#OVER_BG_COLOR
     54  ff45		       85 09		      sta	COLUBK
     55  ff47
     56  ff47							; Check b/w
     57  ff47		       ad 82 02 	      lda	SWCHB
     58  ff4a					      REPEAT	4
     59  ff4a		       4a		      lsr
     58  ff4a					      REPEND
     59  ff4b		       4a		      lsr
     58  ff4b					      REPEND
     59  ff4c		       4a		      lsr
     58  ff4c					      REPEND
     59  ff4d		       4a		      lsr
     60  ff4e					      REPEND
     61  ff4e		       90 05		      bcc	.over_bw
     62  ff50
     63  ff50				   .over_color
     64  ff50		       a9 44		      lda	#OVER_FG_COLOR
     65  ff52		       85 08		      sta	COLUPF
     66  ff54
     67  ff54		       60		      rts
     68  ff55
     69  ff55				   .over_bw
     70  ff55							; Load b/w Colors
     71  ff55		       a9 06		      lda	#OVER_FG_BW_COLOR
     72  ff57		       85 08		      sta	COLUPF
     73  ff59
     74  ff59		       60		      rts
     75  ff5a
     76  ff5a				   OverOverScan
     77  ff5a		       20 61 ff 	      jsr	OverAudio
     78  ff5d		       20 85 ff 	      jsr	OverState
     79  ff60		       60		      rts
     80  ff61
     81  ff61				   OverAudio
     82  ff61
     83  ff61		       a5 8d		      lda	FrameTimer
     84  ff63		       d0 1f		      bne	.over_audio_return
     85  ff65
     86  ff65							; Reset Timer
     87  ff65					      REPEAT	3
     88  ff65		       e6 91		      inc	SampleStep
     87  ff65					      REPEND
     88  ff67		       e6 91		      inc	SampleStep
     87  ff67					      REPEND
     88  ff69		       e6 91		      inc	SampleStep
     89  ff6b					      REPEND
     90  ff6b		       a5 91		      lda	SampleStep
     91  ff6d		       85 8d		      sta	FrameTimer
     92  ff6f
     93  ff6f				   .over_audio_play
     94  ff6f
     95  ff6f							; Increment melody position
     96  ff6f		       a4 90		      ldy	AudioStep
     97  ff71		       f0 0d		      beq	.over_audio_mute_note
     98  ff73		       c6 90		      dec	AudioStep
     99  ff75		       88		      dey
    100  ff76
    101  ff76				   .over_audio_play_note
    102  ff76
    103  ff76							; Melody Line
    104  ff76		       b9 e6 ff 	      lda	OverAudio0,y
    105  ff79		       85 17		      sta	AUDF0
    106  ff7b		       a9 06		      lda	#OVER_AUDIO_VOLUME
    107  ff7d		       85 19		      sta	AUDV0
    108  ff7f
    109  ff7f		       60		      rts
    110  ff80
    111  ff80				   .over_audio_mute_note
    112  ff80		       a9 00		      lda	#0
    113  ff82							;sta AUDF0
    114  ff82		       85 19		      sta	AUDV0
    115  ff84
    116  ff84				   .over_audio_return
    117  ff84		       60		      rts
    118  ff85
    119  ff85				   OverState
    120  ff85
    121  ff85							; Check to see if audio has finished
    122  ff85		       a5 90		      lda	AudioStep
    123  ff87		       d0 10		      bne	.over_state_return
    124  ff89
    125  ff89							; Check if Fire Button on controller 1 is released
    126  ff89		       a5 0c		      lda	INPT4
    127  ff8b		       30 05		      bmi	.over_state_check
    128  ff8d
    129  ff8d				   .over_state_on
    130  ff8d		       a9 01		      lda	#1
    131  ff8f		       85 8f		      sta	InputState
    132  ff91		       60		      rts
    133  ff92
    134  ff92				   .over_state_check
    135  ff92		       a5 8f		      lda	InputState
    136  ff94		       f0 03		      beq	.over_state_return
    137  ff96
    138  ff96				   .over_state_next
    139  ff96							; Button is released, load title screen
    140  ff96		       20 7c f3 	      jsr	TitleInit
    141  ff99
    142  ff99				   .over_state_return
    143  ff99		       60		      rts
    144  ff9a
    145  ff9a				   OverKernel
    146  ff9a
    147  ff9a							; Turn on display
    148  ff9a		       a9 00		      lda	#0
    149  ff9c		       85 01		      sta	VBLANK
    150  ff9e
    151  ff9e				   .over_kernel_score
    152  ff9e
    153  ff9e							; Draw Score on top first (no update)
    154  ff9e		       20 15 f7 	      jsr	ScoreDraw
    155  ffa1
    156  ffa1				   .over_kernel_init
    157  ffa1							; Playfield Control
    158  ffa1							;lda CtrlPf
    159  ffa1							;and #%11111101 ; Use playfield foreground color
    160  ffa1							;ora #%00000001 ; Set mirroring
    161  ffa1							;sta CtrlPf
    162  ffa1		       a9 01		      lda	#%00000001
    163  ffa3		       85 0a		      sta	CTRLPF
    164  ffa5
    165  ffa5				   .over_kernel_top_padding
    166  ffa5							; Top Padding
    167  ffa5		       20 c6 ff 	      jsr	OverPadding
    168  ffa8
    169  ffa8				   .over_kernel_image
    170  ffa8		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    171  ffaa
    172  ffaa				   .over_kernel_image_next
    173  ffaa		       bd dd ff 	      lda	OverImagePF2,x
    174  ffad		       85 0f		      sta	PF2
    175  ffaf		       bd d4 ff 	      lda	OverImagePF1,x
    176  ffb2		       85 0e		      sta	PF1
    177  ffb4							;    lda OverImagePF0,x
    178  ffb4							;    sta PF0
    179  ffb4
    180  ffb4		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    181  ffb6				   .over_kernel_image_loop
    182  ffb6		       85 02		      sta	WSYNC
    183  ffb8		       88		      dey
    184  ffb9		       d0 fb		      bne	.over_kernel_image_loop
    185  ffbb
    186  ffbb		       ca		      dex
    187  ffbc		       10 ec		      bpl	.over_kernel_image_next
    188  ffbe
    189  ffbe				   .over_kernel_bottom_padding
    190  ffbe							; Bottom Padding
    191  ffbe		       85 02		      sta	WSYNC	; Add extra line to get to 262
    192  ffc0		       20 c6 ff 	      jsr	OverPadding
    193  ffc3
    194  ffc3				   .over_kernel_return
    195  ffc3		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    196  ffc5		       60		      rts
    197  ffc6
    198  ffc6				   OverPadding
    199  ffc6		       a9 00		      lda	#0
    200  ffc8							;sta PF0
    201  ffc8		       85 0e		      sta	PF1
    202  ffca		       85 0f		      sta	PF2
    203  ffcc
    204  ffcc		       a2 32		      ldx	#OVER_IMAGE_PADDING
    205  ffce				   .over_padding_loop
    206  ffce		       85 02		      sta	WSYNC
    207  ffd0		       ca		      dex
    208  ffd1		       d0 fb		      bne	.over_padding_loop
    209  ffd3
    210  ffd3		       60		      rts
    211  ffd4
    212  ffd4				   OverAssets
    213  ffd4
    214  ffd4							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ffd4					      include	"over_image.asm"
      1  ffd4							;OverImagePF0:
      2  ffd4							;    .BYTE %00000000
      3  ffd4							;    .BYTE %00000000
      4  ffd4							;    .BYTE %00000000
      5  ffd4							;    .BYTE %00000000
      6  ffd4							;    .BYTE %00000000
      7  ffd4							;    .BYTE %00000000
      8  ffd4							;    .BYTE %00000000
      9  ffd4							;    .BYTE %00000000
     10  ffd4							;    .BYTE %00000000
     11  ffd4
     12  ffd4				   OverImagePF1
     13  ffd4		       0c		      .BYTE.b	%00001100
     14  ffd5		       13		      .BYTE.b	%00010011
     15  ffd6		       20		      .BYTE.b	%00100000
     16  ffd7		       23		      .BYTE.b	%00100011
     17  ffd8		       24		      .BYTE.b	%00100100
     18  ffd9		       24		      .BYTE.b	%00100100
     19  ffda		       12		      .BYTE.b	%00010010
     20  ffdb		       10		      .BYTE.b	%00010000
     21  ffdc		       08		      .BYTE.b	%00001000
     22  ffdd
     23  ffdd				   OverImagePF2
     24  ffdd		       e0		      .BYTE.b	%11100000
     25  ffde		       f8		      .BYTE.b	%11111000
     26  ffdf		       fd		      .BYTE.b	%11111101
     27  ffe0		       ae		      .BYTE.b	%10101110
     28  ffe1		       df		      .BYTE.b	%11011111
     29  ffe2		       ae		      .BYTE.b	%10101110
     30  ffe3		       fc		      .BYTE.b	%11111100
     31  ffe4		       f8		      .BYTE.b	%11111000
     32  ffe5		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    216  ffe6
    217  ffe6				   OverAudio0
    218  ffe6
    219  ffe6		       1a		      .BYTE.b	#26	; D1
    220  ffe7		       1a		      .BYTE.b	#26
    221  ffe8		       16		      .BYTE.b	#22	; F1
    222  ffe9		       11		      .BYTE.b	#17	; A1
    223  ffea		       0d		      .BYTE.b	#13	; D2
    224  ffeb		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    325  ffec
    326  ffec							;================
    327  ffec							; End of cart
    328  ffec							;================
    329  ffec
    330  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    331  fffa
    332  fffa				   InterruptVectors
    333  fffa
    334  fffa		       18 f2		      .word.w	InitSystem	; NMI
    335  fffc		       18 f2		      .word.w	InitSystem	; RESET
    336  fffe		       18 f2		      .word.w	InitSystem	; IRQ
    337  10000
    338  10000					       END
