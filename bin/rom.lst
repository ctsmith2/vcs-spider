------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00ba ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00	   FrameTimer ds	1
     70 U008f
     71 U008f		       00	   AudioStep  ds	1
     72 U0090
     73 U0090		       00	   SampleStep ds	1
     74 U0091
     75 U0091							; Score
     76 U0091
     77 U0091		       00 00	   ScoreValue ds	2
     78 U0093		       00 00	   ScoreDigitOnes ds	2
     79 U0095		       00 00	   ScoreDigitTens ds	2
     80 U0097		       00 00	   ScoreGfx   ds	2
     81 U0099
     82 U0099							; Web
     83 U0099
     84 U0099		       00	   WebIndex   ds	1
     85 U009a		       00	   WebDir     ds	1
     86 U009b
     87 U009b							; Spider
     88 U009b
     89 U009b		       00 00	   SpiderPtr  ds	2
     90 U009d		       00 00	   SpiderPos  ds	2
     91 U009f		       00	   SpiderCtrl ds	1
     92 U00a0		       00	   SpiderColor ds	1
     93 U00a1
     94 U00a1		       00	   SpiderIndex ds	1
     95 U00a2		       00	   SpiderDrawPos ds	1
     96 U00a3
     97 U00a3		       00 00	   SpiderPtr2 ds	2
     98 U00a5
     99 U00a5							; Line
    100 U00a5
    101 U00a5		       00	   LineEnabled ds	1
    102 U00a6		       00 00	   LinePos    ds	2
    103 U00a8		       00 00	   LineVelocity ds	2
    104 U00aa		       00 00	   LineStartPos ds	2
    105 U00ac		       00 00	   LineDrawPos ds	2
    106 U00ae
    107 U00ae							; Bug
    108 U00ae
    109 U00ae		       00 00	   BugStunned ds	2
    110 U00b0		       00 00	   BugPosX    ds	2
    111 U00b2		       00 00	   BugPosY    ds	2
    112 U00b4		       00 00	   BugColor   ds	2
    113 U00b6
    114 U00b6		       00 00	   BugDrawPosBottom ds	2
    115 U00b8		       00 00	   BugDrawPosTop ds	2
    116 U00ba
    117  10000 ????				       SEG
    118  f000					      org	$F000	; Start of cart area
    119  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    121  f021
    122  f021				   InitSystem
    123  f021
    124  f021				   .init_clean
    125  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    127  f02c
    128  f02c				   .init_tia
    129  f02c							; Define default TIA register values
    130  f02c
    131  f02c							; Initialize copies
    132  f02c		       a9 00		      lda	#0
    133  f02e		       85 80		      sta	CtrlPf
    134  f030		       85 81		      sta	NuSiz0
    135  f032		       85 82		      sta	NuSiz1
    136  f034
    137  f034							; Set background color
    138  f034		       a9 00		      lda	#$00	; Black
    139  f036		       85 09		      sta	COLUBK
    140  f038
    141  f038							; Set the playfield and player color
    142  f038		       a9 0e		      lda	#$0E	; White
    143  f03a		       85 08		      sta	COLUPF
    144  f03c		       85 06		      sta	COLUP0
    145  f03e		       85 07		      sta	COLUP1
    146  f040
    147  f040							; Playfield Control
    148  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    149  f042		       85 80		      sta	CtrlPf
    150  f044		       85 0a		      sta	CTRLPF
    151  f046
    152  f046							; Disable Game Elements
    153  f046		       a9 00		      lda	#$00
    154  f048		       85 1f		      sta	ENABL	; Turn off ball
    155  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    156  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    157  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    158  f050		       85 1c		      sta	GRP1	; Turn off player 2
    159  f052
    160  f052							; Empty playfield
    161  f052		       a9 00		      lda	#%00000000
    162  f054		       85 0d		      sta	PF0
    163  f056		       85 0e		      sta	PF1
    164  f058		       85 0f		      sta	PF2
    165  f05a
    166  f05a				   .init_seed
    167  f05a							; Seed the random number generator
    168  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    169  f05d		       85 85		      sta	Rand8	; Use as seed
    170  f05f		       49 ff		      eor	#$FF	; Flip bits
    171  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    172  f063
    173  f063				   .init_game
    174  f063
    175  f063		       20 c9 f0 	      jsr	LogoInit
    176  f066
    177  f066							;=======================================
    178  f066							; Game Kernel
    179  f066							;=======================================
    180  f066
    181  f066				   Main
    182  f066
    183  f066		       20 75 f0 	      jsr	VerticalSync
    184  f069		       20 8c f0 	      jsr	VerticalBlank
    185  f06c		       20 9f f0 	      jsr	Kernel
    186  f06f		       20 a6 f0 	      jsr	OverScan
    187  f072		       4c 66 f0 	      jmp	Main
    188  f075
    189  f075				   VerticalSync
    190  f075
    191  f075		       a9 00		      lda	#0
    192  f077		       85 01		      sta	VBLANK
    193  f079
    194  f079							; Turn on Vertical Sync signal and setup timer
    195  f079		       a9 02		      lda	#2
    196  f07b		       85 00		      sta	VSYNC
    197  f07d
    198  f07d							; Increment frame count and reduce frame counter
    199  f07d		       e6 8d		      inc	Frame
    200  f07f		       c6 8e		      dec	FrameTimer
    201  f081
    202  f081							; VSYNCH signal scanlines
    203  f081					      REPEAT	#KERNEL_VSYNC
    204  f081		       85 02		      sta	WSYNC
    203  f081					      REPEND
    204  f083		       85 02		      sta	WSYNC
    203  f083					      REPEND
    204  f085		       85 02		      sta	WSYNC
    205  f087					      REPEND
    206  f087
    207  f087							; Turn off Vertical Sync signal
    208  f087		       a9 00		      lda	#0
    209  f089		       85 00		      sta	VSYNC
    210  f08b
    211  f08b				   .vsync_return
    212  f08b		       60		      rts
    213  f08c
    214  f08c				   VerticalBlank
    215  f08c							; Setup Timer
    216  f08c		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    217  f08e		       8d 96 02 	      sta	TIM64T
    218  f091
    219  f091				   .vblank_logic
    220  f091							; Perform Game Logic
    221  f091		       20 9c f0 	      jsr	.vblank_logic_call_ptr
    222  f094
    223  f094				   .vblank_loop
    224  f094							; WSYNC until Timer is complete
    225  f094		       85 02		      sta	WSYNC
    226  f096		       ad 84 02 	      lda	INTIM
    227  f099		       d0 f9		      bne	.vblank_loop
    228  f09b
    229  f09b				   .vblank_return
    230  f09b		       60		      rts
    231  f09c
    232  f09c				   .vblank_logic_call_ptr
    233  f09c		       6c 87 00 	      jmp	(VBlankPtr)
    234  f09f
    235  f09f				   Kernel
    236  f09f
    237  f09f							; Perform Selected Kernel
    238  f09f		       20 a3 f0 	      jsr	.kernel_call_ptr
    239  f0a2		       60		      rts
    240  f0a3
    241  f0a3				   .kernel_call_ptr
    242  f0a3		       6c 89 00 	      jmp	(KernelPtr)
    243  f0a6
    244  f0a6				   OverScan
    245  f0a6
    246  f0a6							; End of screen, enter blanking
    247  f0a6		       a9 42		      lda	#%01000010
    248  f0a8		       85 01		      sta	VBLANK
    249  f0aa
    250  f0aa							; Setup Timer
    251  f0aa		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    252  f0ac		       8d 96 02 	      sta	TIM64T
    253  f0af
    254  f0af							;.overscan_reset:
    255  f0af							; Check for reset switch
    256  f0af		       ad 82 02 	      lda	SWCHB
    257  f0b2		       4a		      lsr		; Push D0 to carry (C)
    258  f0b3		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    259  f0b5
    260  f0b5							; Perform reset
    261  f0b5		       20 c9 f0 	      jsr	LogoInit	; No need for logic
    262  f0b8		       4c be f0 	      jmp	.overscan_loop
    263  f0bb
    264  f0bb				   .overscan_logic
    265  f0bb							; Perform OverScan Logic
    266  f0bb		       20 c6 f0 	      jsr	.overscan_logic_call_ptr
    267  f0be
    268  f0be				   .overscan_loop
    269  f0be							; WSYNC until Timer is complete
    270  f0be		       85 02		      sta	WSYNC
    271  f0c0		       ad 84 02 	      lda	INTIM
    272  f0c3		       d0 f9		      bne	.overscan_loop
    273  f0c5
    274  f0c5				   .overscan_return
    275  f0c5		       60		      rts
    276  f0c6
    277  f0c6				   .overscan_logic_call_ptr
    278  f0c6		       6c 8b 00 	      jmp	(OverScanPtr)
    279  f0c9
    280  f0c9							;================
    281  f0c9							; State Code
    282  f0c9							;================
    283  f0c9
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0c9					      include	"logo.asm"
      1  f0c9							;================
      2  f0c9							; Constants
      3  f0c9							;================
      4  f0c9
      5  f0c9		       00 b4	   LOGO_FRAMES =	180
      6  f0c9
      7  f0c9		       00 a2	   LOGO_BG_COLOR =	#$A2
      8  f0c9		       00 5e	   LOGO_FG_COLOR =	#$5E
      9  f0c9
     10  f0c9		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0c9		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0c9		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0c9		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0c9		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0c9		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0c9
     17  f0c9		       00 09	   LOGO_IMAGE_SIZE =	9
     18  f0c9		       00 08	   LOGO_IMAGE_LINE_SIZE =	8
     19  f0c9		       00 48	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     20  f0c9		       00 3c	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     21  f0c9
     22  f0c9				   LogoInit
     23  f0c9
     24  f0c9							; Setup logic and kernel
      0  f0c9					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0c9				   .POINTER   SET	VBlankPtr
      2  f0c9				   .ADDRESS   SET	LogoVerticalBlank
      3  f0c9
      4  f0c9		       a9 10		      LDA	#<.ADDRESS
      5  f0cb		       85 87		      STA	.POINTER
      6  f0cd		       a9 f1		      LDA	#>.ADDRESS
      7  f0cf		       85 88		      STA	.POINTER+1
      8  f0d1
      0  f0d1					      SET_POINTER	KernelPtr, LogoKernel
      1  f0d1				   .POINTER   SET	KernelPtr
      2  f0d1				   .ADDRESS   SET	LogoKernel
      3  f0d1
      4  f0d1		       a9 54		      LDA	#<.ADDRESS
      5  f0d3		       85 89		      STA	.POINTER
      6  f0d5		       a9 f1		      LDA	#>.ADDRESS
      7  f0d7		       85 8a		      STA	.POINTER+1
      8  f0d9
      0  f0d9					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0d9				   .POINTER   SET	OverScanPtr
      2  f0d9				   .ADDRESS   SET	LogoOverScan
      3  f0d9
      4  f0d9		       a9 11		      LDA	#<.ADDRESS
      5  f0db		       85 8b		      STA	.POINTER
      6  f0dd		       a9 f1		      LDA	#>.ADDRESS
      7  f0df		       85 8c		      STA	.POINTER+1
      8  f0e1
     28  f0e1
     29  f0e1							; Load Colors
     30  f0e1		       a9 a2		      lda	#LOGO_BG_COLOR
     31  f0e3		       85 09		      sta	COLUBK
     32  f0e5		       a9 5e		      lda	#LOGO_FG_COLOR
     33  f0e7		       85 08		      sta	COLUPF
     34  f0e9
     35  f0e9							; Load audio settings
     36  f0e9		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     37  f0eb		       85 15		      sta	AUDC0
     38  f0ed		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     39  f0ef		       85 19		      sta	AUDV0
     40  f0f1		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     41  f0f3		       85 16		      sta	AUDC1
     42  f0f5		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     43  f0f7		       85 1a		      sta	AUDV1
     44  f0f9		       a9 00		      lda	#0
     45  f0fb		       85 8f		      sta	AudioStep
     46  f0fd
     47  f0fd							; Play first note
     48  f0fd		       ad dd f1 	      lda	LogoAudio0,AudioStep
     49  f100		       85 17		      sta	AUDF0
     50  f102		       ad e9 f1 	      lda	LogoAudio1,AudioStep
     51  f105		       85 18		      sta	AUDF1
     52  f107
     53  f107							; Setup frame counters
     54  f107		       a9 00		      lda	#0
     55  f109		       85 8d		      sta	Frame
     56  f10b		       a9 b4		      lda	#LOGO_FRAMES
     57  f10d		       85 8e		      sta	FrameTimer
     58  f10f
     59  f10f							; Setup Image Animation
     60  f10f							;lda #KERNEL_IMAGE_SIZE
     61  f10f							;sta ImageVisible
     62  f10f
     63  f10f		       60		      rts
     64  f110
     65  f110				   LogoVerticalBlank
     66  f110							;jsr LogoAnimation
     67  f110		       60		      rts
     68  f111
     69  f111				   LogoOverScan
     70  f111		       20 1f f1 	      jsr	LogoAudio
     71  f114		       20 4a f1 	      jsr	LogoState
     72  f117		       60		      rts
     73  f118
     74  f118				   LogoAnimation
     75  f118		       a5 8d		      lda	Frame
     76  f11a		       29 03		      and	#%00000011	; Every 4 when bits are 00
     77  f11c		       d0 00		      bne	.logo_animation_return
     78  f11e
     79  f11e							;ldx ImageVisible
     80  f11e							;cpx #0
     81  f11e							;beq .logo_animation_return
     82  f11e
     83  f11e							; Add another visible line
     84  f11e							;dex
     85  f11e							;stx ImageVisible
     86  f11e
     87  f11e				   .logo_animation_return
     88  f11e		       60		      rts
     89  f11f
     90  f11f				   LogoAudio
     91  f11f
     92  f11f		       a5 8d		      lda	Frame
     93  f121		       29 07		      and	#%00000111	; Every 8 when bits are 000
     94  f123		       d0 24		      bne	.logo_audio_return
     95  f125
     96  f125				   .logo_audio_play
     97  f125
     98  f125							; Check if we're at the end of the melody
     99  f125		       a4 8f		      ldy	AudioStep
    100  f127		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
    101  f129		       f0 10		      beq	.logo_audio_mute
    102  f12b
    103  f12b				   .logo_audio_play_note
    104  f12b							; Increment audio position
    105  f12b		       c8		      iny
    106  f12c		       84 8f		      sty	AudioStep
    107  f12e
    108  f12e							; Logo note and play
    109  f12e		       b9 dd f1 	      lda	LogoAudio0,y
    110  f131		       85 17		      sta	AUDF0
    111  f133		       b9 e9 f1 	      lda	LogoAudio1,y
    112  f136		       85 18		      sta	AUDF1
    113  f138		       4c 49 f1 	      jmp	.logo_audio_mute_skip
    114  f13b
    115  f13b				   .logo_audio_mute
    116  f13b
    117  f13b							; Mute audio
    118  f13b		       a9 00		      lda	#0
    119  f13d		       85 15		      sta	AUDC0
    120  f13f		       85 19		      sta	AUDV0
    121  f141		       85 17		      sta	AUDF0
    122  f143		       85 16		      sta	AUDC1
    123  f145		       85 1a		      sta	AUDV1
    124  f147		       85 18		      sta	AUDF1
    125  f149
    126  f149				   .logo_audio_mute_skip
    127  f149				   .logo_audio_return
    128  f149		       60		      rts
    129  f14a
    130  f14a				   LogoState
    131  f14a		       a5 8e		      lda	FrameTimer
    132  f14c		       c9 00		      cmp	#0
    133  f14e		       d0 03		      bne	.logo_state_return
    134  f150
    135  f150		       20 f5 f1 	      jsr	TitleInit
    136  f153
    137  f153				   .logo_state_return
    138  f153		       60		      rts
    139  f154
    140  f154				   LogoKernel
    141  f154
    142  f154							; Playfield Control
    143  f154		       a5 80		      lda	CtrlPf
    144  f156		       29 fe		      and	#%11111110	; No mirroring
    145  f158		       85 80		      sta	CtrlPf
    146  f15a		       85 0a		      sta	CTRLPF
    147  f15c
    148  f15c							; Turn on display
    149  f15c		       a9 00		      lda	#0
    150  f15e		       85 01		      sta	VBLANK
    151  f160
    152  f160				   .logo_kernel_top_padding
    153  f160							; Top Padding
    154  f160		       20 97 f1 	      jsr	LogoPadding
    155  f163
    156  f163				   .logo_kernel_image
    157  f163
    158  f163		       a2 11		      ldx	#(LOGO_IMAGE_SIZE*2)-1
    159  f165		       a0 07		      ldy	#LOGO_IMAGE_LINE_SIZE-1
    160  f167							; The extra 1 on line size is for processing overflow
    161  f167
    162  f167				   .logo_kernel_image_line
    163  f167		       85 02		      sta	WSYNC
    164  f169
    165  f169		       bd a6 f1 	      lda	LogoImagePF0-1,x
    166  f16c		       85 0d		      sta	PF0
    167  f16e		       bd b8 f1 	      lda	LogoImagePF1-1,x
    168  f171		       85 0e		      sta	PF1
    169  f173		       bd ca f1 	      lda	LogoImagePF2-1,x
    170  f176		       85 0f		      sta	PF2
    171  f178
      0  f178					      sleep	6
      1  f178				   .CYCLES    SET	6
      2  f178
      3  f178				  -	      IF	.CYCLES < 2
      4  f178				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f178				  -	      ERR
      6  f178					      ENDIF
      7  f178
      8  f178				  -	      IF	.CYCLES & 1
      9  f178				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f178				  -	      nop	0
     11  f178				  -	      ELSE
     12  f178				  -	      bit	VSYNC
     13  f178				  -	      ENDIF
     14  f178				  -.CYCLES    SET	.CYCLES - 3
     15  f178					      ENDIF
     16  f178
     17  f178					      REPEAT	.CYCLES / 2
     18  f178		       ea		      nop
     17  f178					      REPEND
     18  f179		       ea		      nop
     17  f179					      REPEND
     18  f17a		       ea		      nop
     19  f17b					      REPEND
    173  f17b
    174  f17b		       bd a7 f1 	      lda	LogoImagePF0,x
    175  f17e		       85 0d		      sta	PF0
    176  f180		       bd b9 f1 	      lda	LogoImagePF1,x
    177  f183		       85 0e		      sta	PF1
    178  f185		       bd cb f1 	      lda	LogoImagePF2,x
    179  f188		       85 0f		      sta	PF2
    180  f18a
    181  f18a		       88		      dey
    182  f18b		       d0 da		      bne	.logo_kernel_image_line
    183  f18d
    184  f18d		       a0 08		      ldy	#LOGO_IMAGE_LINE_SIZE
    185  f18f
    186  f18f		       ca		      dex
    187  f190		       ca		      dex
    188  f191		       10 d4		      bpl	.logo_kernel_image_line
    189  f193
    190  f193				   .logo_kernel_bottom_padding
    191  f193							; Bottom Padding
    192  f193		       20 97 f1 	      jsr	LogoPadding
    193  f196
    194  f196				   .logo_kernel_image_return
    195  f196		       60		      rts
    196  f197
    197  f197				   LogoPadding
    198  f197		       a9 00		      lda	#0
    199  f199		       85 0d		      sta	PF0
    200  f19b		       85 0e		      sta	PF1
    201  f19d		       85 0f		      sta	PF2
    202  f19f
    203  f19f		       a2 3c		      ldx	#LOGO_IMAGE_PADDING
    204  f1a1				   .logo_padding_loop
    205  f1a1		       85 02		      sta	WSYNC
    206  f1a3		       ca		      dex
    207  f1a4		       d0 fb		      bne	.logo_padding_loop
    208  f1a6
    209  f1a6		       60		      rts
    210  f1a7
    211  f1a7				   LogoAssets
    212  f1a7
    213  f1a7							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f1a7					      include	"logo_image.asm"
      1  f1a7				   LogoImagePF0
      2  f1a7		       00		      .BYTE.b	%00000000
      3  f1a8		       40		      .BYTE.b	%01000000
      4  f1a9		       00		      .BYTE.b	%00000000
      5  f1aa		       a0		      .BYTE.b	%10100000
      6  f1ab		       00		      .BYTE.b	%00000000
      7  f1ac		       10		      .BYTE.b	%00010000
      8  f1ad		       00		      .BYTE.b	%00000000
      9  f1ae		       00		      .BYTE.b	%00000000
     10  f1af		       00		      .BYTE.b	%00000000
     11  f1b0		       c0		      .BYTE.b	%11000000
     12  f1b1		       00		      .BYTE.b	%00000000
     13  f1b2		       50		      .BYTE.b	%01010000
     14  f1b3		       00		      .BYTE.b	%00000000
     15  f1b4		       40		      .BYTE.b	%01000000
     16  f1b5		       00		      .BYTE.b	%00000000
     17  f1b6		       50		      .BYTE.b	%01010000
     18  f1b7		       00		      .BYTE.b	%00000000
     19  f1b8		       c0		      .BYTE.b	%11000000
     20  f1b9
     21  f1b9				   LogoImagePF1
     22  f1b9		       00		      .BYTE.b	%00000000
     23  f1ba		       00		      .BYTE.b	%00000000
     24  f1bb		       00		      .BYTE.b	%00000000
     25  f1bc		       00		      .BYTE.b	%00000000
     26  f1bd		       00		      .BYTE.b	%00000000
     27  f1be		       80		      .BYTE.b	%10000000
     28  f1bf		       00		      .BYTE.b	%00000000
     29  f1c0		       00		      .BYTE.b	%00000000
     30  f1c1		       00		      .BYTE.b	%00000000
     31  f1c2		       00		      .BYTE.b	%00000000
     32  f1c3		       00		      .BYTE.b	%00000000
     33  f1c4		       80		      .BYTE.b	%10000000
     34  f1c5		       00		      .BYTE.b	%00000000
     35  f1c6		       80		      .BYTE.b	%10000000
     36  f1c7		       00		      .BYTE.b	%00000000
     37  f1c8		       80		      .BYTE.b	%10000000
     38  f1c9		       00		      .BYTE.b	%00000000
     39  f1ca		       00		      .BYTE.b	%00000000
     40  f1cb
     41  f1cb				   LogoImagePF2
     42  f1cb		       44		      .BYTE.b	%01000100
     43  f1cc		       00		      .BYTE.b	%00000000
     44  f1cd		       a8		      .BYTE.b	%10101000
     45  f1ce		       00		      .BYTE.b	%00000000
     46  f1cf		       10		      .BYTE.b	%00010000
     47  f1d0		       00		      .BYTE.b	%00000000
     48  f1d1		       00		      .BYTE.b	%00000000
     49  f1d2		       00		      .BYTE.b	%00000000
     50  f1d3		       8c		      .BYTE.b	%10001100
     51  f1d4		       00		      .BYTE.b	%00000000
     52  f1d5		       54		      .BYTE.b	%01010100
     53  f1d6		       00		      .BYTE.b	%00000000
     54  f1d7		       54		      .BYTE.b	%01010100
     55  f1d8		       00		      .BYTE.b	%00000000
     56  f1d9		       54		      .BYTE.b	%01010100
     57  f1da		       00		      .BYTE.b	%00000000
     58  f1db		       8c		      .BYTE.b	%10001100
     59  f1dc		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    215  f1dd
    216  f1dd				   LogoAudio0
    217  f1dd
    218  f1dd		       1d		      .BYTE.b	#29	; C
    219  f1de		       17		      .BYTE.b	#23	; E
    220  f1df		       13		      .BYTE.b	#19	; G
    221  f1e0		       0f		      .BYTE.b	#15	; A
    222  f1e1		       17		      .BYTE.b	#23	; E
    223  f1e2		       13		      .BYTE.b	#19	; G
    224  f1e3		       0f		      .BYTE.b	#15	; B
    225  f1e4		       0e		      .BYTE.b	#14	; C
    226  f1e5		       0b		      .BYTE.b	#11	; E
    227  f1e6		       0b		      .BYTE.b	#11
    228  f1e7		       0b		      .BYTE.b	#11
    229  f1e8		       0b		      .BYTE.b	#11
    230  f1e9
    231  f1e9				   LogoAudio1
    232  f1e9
    233  f1e9		       1f		      .BYTE.b	#31	; C
    234  f1ea		       1f		      .BYTE.b	#31
    235  f1eb		       1f		      .BYTE.b	#31
    236  f1ec		       1f		      .BYTE.b	#31
    237  f1ed		       19		      .BYTE.b	#25	; E
    238  f1ee		       19		      .BYTE.b	#25
    239  f1ef		       19		      .BYTE.b	#25
    240  f1f0		       19		      .BYTE.b	#25
    241  f1f1		       14		      .BYTE.b	#20	; G
    242  f1f2		       14		      .BYTE.b	#20
    243  f1f3		       14		      .BYTE.b	#20
    244  f1f4		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f1f5					      include	"title.asm"
      1  f1f5							;================
      2  f1f5							; Constants
      3  f1f5							;================
      4  f1f5
      5  f1f5		       00 00	   TITLE_BG_COLOR =	#$00
      6  f1f5		       00 06	   TITLE_FRAME_COLOR =	#$06
      7  f1f5		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f1f5		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f1f5
     10  f1f5		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f1f5		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f1f5		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f1f5		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f1f5		       00 09	   TITLE_AUDIO_STEP =	9
     15  f1f5
     16  f1f5		       00 07	   TITLE_FRAME_TOP_LINES =	7
     17  f1f5		       00 06	   TITLE_LABEL_LINES =	6
     18  f1f5		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f1f5
     20  f1f5		       00 07	   TITLE_GAP_SIZE =	#7
     21  f1f5
     22  f1f5		       00 28	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)
     23  f1f5		       00 09	   TITLE_SPIDER_SIZE =	#9
     24  f1f5		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f1f5
     26  f1f5				   TitleInit
     27  f1f5
     28  f1f5							; Setup logic and kernel
      0  f1f5					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f1f5				   .POINTER   SET	VBlankPtr
      2  f1f5				   .ADDRESS   SET	TitleVerticalBlank
      3  f1f5
      4  f1f5		       a9 4c		      LDA	#<.ADDRESS
      5  f1f7		       85 87		      STA	.POINTER
      6  f1f9		       a9 f2		      LDA	#>.ADDRESS
      7  f1fb		       85 88		      STA	.POINTER+1
      8  f1fd
      0  f1fd					      SET_POINTER	KernelPtr, TitleKernel
      1  f1fd				   .POINTER   SET	KernelPtr
      2  f1fd				   .ADDRESS   SET	TitleKernel
      3  f1fd
      4  f1fd		       a9 d5		      LDA	#<.ADDRESS
      5  f1ff		       85 89		      STA	.POINTER
      6  f201		       a9 f2		      LDA	#>.ADDRESS
      7  f203		       85 8a		      STA	.POINTER+1
      8  f205
      0  f205					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f205				   .POINTER   SET	OverScanPtr
      2  f205				   .ADDRESS   SET	TitleOverScan
      3  f205
      4  f205		       a9 8e		      LDA	#<.ADDRESS
      5  f207		       85 8b		      STA	.POINTER
      6  f209		       a9 f2		      LDA	#>.ADDRESS
      7  f20b		       85 8c		      STA	.POINTER+1
      8  f20d
     32  f20d
     33  f20d							; Load Colors
     34  f20d		       a9 00		      lda	#TITLE_BG_COLOR
     35  f20f		       85 09		      sta	COLUBK
     36  f211		       a9 06		      lda	#TITLE_FRAME_COLOR
     37  f213		       85 08		      sta	COLUPF
     38  f215		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f217		       85 06		      sta	COLUP0
     40  f219		       85 07		      sta	COLUP1
     41  f21b
     42  f21b							; Load audio settings
     43  f21b
     44  f21b							; Melody Line
     45  f21b		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f21d		       85 15		      sta	AUDC0
     47  f21f		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f221		       85 19		      sta	AUDV0
     49  f223
     50  f223							; Drums and Bass
     51  f223		       a9 00		      lda	#0
     52  f225		       85 16		      sta	AUDC1
     53  f227		       85 1a		      sta	AUDV1
     54  f229
     55  f229							; Make it so that we play the first note immediately
     56  f229		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f22b		       85 8f		      sta	AudioStep
     58  f22d		       a9 01		      lda	#1
     59  f22f		       85 8e		      sta	FrameTimer
     60  f231
     61  f231							; Setup Spider Sprite
      0  f231					      SET_POINTER	SpiderPtr, TitleSpider
      1  f231				   .POINTER   SET	SpiderPtr
      2  f231				   .ADDRESS   SET	TitleSpider
      3  f231
      4  f231		       a9 32		      LDA	#<.ADDRESS
      5  f233		       85 9b		      STA	.POINTER
      6  f235		       a9 f4		      LDA	#>.ADDRESS
      7  f237		       85 9c		      STA	.POINTER+1
      8  f239
     63  f239
     64  f239		       a9 06		      lda	#%00000110	; Triple Sprite
     65  f23b		       85 81		      sta	NuSiz0
     66  f23d		       85 04		      sta	NUSIZ0
     67  f23f		       85 82		      sta	NuSiz1
     68  f241		       85 05		      sta	NUSIZ1
     69  f243
     70  f243		       a9 00		      lda	#0	; No reflect
     71  f245		       85 0b		      sta	REFP0
     72  f247		       a9 ff		      lda	#$FF	; Reflect P1
     73  f249		       85 0c		      sta	REFP1
     74  f24b
     75  f24b		       60		      rts
     76  f24c
     77  f24c				   TitleVerticalBlank
     78  f24c
     79  f24c							; Refresh random values
     80  f24c		       20 13 f0 	      jsr	Random
     81  f24f
     82  f24f		       20 56 f2 	      jsr	TitlePosition
     83  f252		       20 69 f2 	      jsr	TitleAnimation
     84  f255
     85  f255		       60		      rts
     86  f256
     87  f256				   TitlePosition
     88  f256
     89  f256							; Position Spider
     90  f256		       a2 00		      ldx	#0	; Object (player0)
     91  f258		       a9 28		      lda	#TITLE_SPIDER_POS_X	; X Position
     92  f25a		       20 00 f0 	      jsr	PosObject
     93  f25d
     94  f25d		       a2 01		      ldx	#1	; Object (player1)
     95  f25f		       a9 30		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
     96  f261		       20 00 f0 	      jsr	PosObject
     97  f264
     98  f264		       85 02		      sta	WSYNC
     99  f266		       85 2a		      sta	HMOVE
    100  f268
    101  f268		       60		      rts
    102  f269
    103  f269				   TitleAnimation
    104  f269
    105  f269		       a5 8f		      lda	AudioStep
    106  f26b		       c9 00		      cmp	#0
    107  f26d		       f0 0d		      beq	.title_animation_1
    108  f26f		       c9 04		      cmp	#4
    109  f271		       f0 12		      beq	.title_animation_2
    110  f273		       c9 09		      cmp	#9
    111  f275		       f0 05		      beq	.title_animation_1
    112  f277		       c9 0c		      cmp	#12
    113  f279		       f0 0a		      beq	.title_animation_2
    114  f27b		       60		      rts
    115  f27c
    116  f27c				   .title_animation_1
      0  f27c					      SET_POINTER	SpiderPtr, TitleSpider
      1  f27c				   .POINTER   SET	SpiderPtr
      2  f27c				   .ADDRESS   SET	TitleSpider
      3  f27c
      4  f27c		       a9 32		      LDA	#<.ADDRESS
      5  f27e		       85 9b		      STA	.POINTER
      6  f280		       a9 f4		      LDA	#>.ADDRESS
      7  f282		       85 9c		      STA	.POINTER+1
      8  f284
    118  f284		       60		      rts
    119  f285
    120  f285				   .title_animation_2
      0  f285					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f285				   .POINTER   SET	SpiderPtr
      2  f285				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f285
      4  f285		       a9 3b		      LDA	#<.ADDRESS
      5  f287		       85 9b		      STA	.POINTER
      6  f289		       a9 f4		      LDA	#>.ADDRESS
      7  f28b		       85 9c		      STA	.POINTER+1
      8  f28d
    122  f28d		       60		      rts
    123  f28e
    124  f28e				   TitleOverScan
    125  f28e		       20 95 f2 	      jsr	TitleAudio
    126  f291		       20 cd f2 	      jsr	TitleState
    127  f294		       60		      rts
    128  f295
    129  f295				   TitleAudio
    130  f295
    131  f295		       a6 8e		      ldx	FrameTimer
    132  f297		       e0 00		      cpx	#0
    133  f299		       d0 31		      bne	.title_audio_return
    134  f29b
    135  f29b							; Reset Timer
    136  f29b		       a2 09		      ldx	#TITLE_AUDIO_STEP
    137  f29d		       86 8e		      stx	FrameTimer
    138  f29f
    139  f29f				   .title_audio_play
    140  f29f
    141  f29f							; Increment melody position
    142  f29f		       a4 8f		      ldy	AudioStep
    143  f2a1		       c8		      iny
    144  f2a2
    145  f2a2							; Check if we're at the end of the melody
    146  f2a2		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    147  f2a4		       d0 02		      bne	.title_audio_play_note
    148  f2a6
    149  f2a6							; Loop our audio step
    150  f2a6		       a0 00		      ldy	#0
    151  f2a8
    152  f2a8				   .title_audio_play_note
    153  f2a8
    154  f2a8							; Save current position
    155  f2a8		       84 8f		      sty	AudioStep
    156  f2aa
    157  f2aa							; Basic Melody Line
    158  f2aa		       b9 44 f4 	      lda	TitleAudio0,y
    159  f2ad		       85 17		      sta	AUDF0
    160  f2af
    161  f2af							; Drums and Bass
    162  f2af		       b9 54 f4 	      lda	TitleTone1,y
    163  f2b2		       c9 ff		      cmp	#$FF
    164  f2b4		       f0 0e		      beq	.title_audio_play_note_1_mute
    165  f2b6
    166  f2b6		       85 16		      sta	AUDC1
    167  f2b8		       b9 64 f4 	      lda	TitleAudio1,y
    168  f2bb		       85 18		      sta	AUDF1
    169  f2bd		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    170  f2bf		       85 1a		      sta	AUDV1
    171  f2c1
    172  f2c1		       4c cc f2 	      jmp	.title_audio_return
    173  f2c4
    174  f2c4				   .title_audio_play_note_1_mute
    175  f2c4
    176  f2c4		       a9 00		      lda	#0
    177  f2c6		       85 18		      sta	AUDF1
    178  f2c8		       85 16		      sta	AUDC1
    179  f2ca		       85 1a		      sta	AUDV1
    180  f2cc
    181  f2cc				   .title_audio_return
    182  f2cc		       60		      rts
    183  f2cd
    184  f2cd				   TitleState
    185  f2cd							; Check if Fire Button on controller 1 is pressed
    186  f2cd		       a5 0c		      lda	INPT4
    187  f2cf		       30 03		      bmi	.title_state_return
    188  f2d1
    189  f2d1		       20 4c fa 	      jsr	GameInit
    190  f2d4
    191  f2d4				   .title_state_return
    192  f2d4		       60		      rts
    193  f2d5
    194  f2d5				   TitleKernel
    195  f2d5
    196  f2d5							; Playfield Control
    197  f2d5		       a5 80		      lda	CtrlPf
    198  f2d7		       29 fe		      and	#%11111110	; No mirroring
    199  f2d9		       85 80		      sta	CtrlPf
    200  f2db		       85 0a		      sta	CTRLPF
    201  f2dd
    202  f2dd							; Turn on display
    203  f2dd		       a9 00		      lda	#0
    204  f2df		       85 01		      sta	VBLANK
    205  f2e1
    206  f2e1		       85 02		      sta	WSYNC
    207  f2e3
    208  f2e3				   TitleFrameTopDraw
    209  f2e3
    210  f2e3							; Start Counters
    211  f2e3		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    212  f2e5		       a0 00		      ldy	#0	; Image Counter
    213  f2e7
    214  f2e7				   .title_frame_top
    215  f2e7
    216  f2e7							; 76 machine cycles per scanline
    217  f2e7		       85 02		      sta	WSYNC
    218  f2e9
    219  f2e9				   .title_frame_top_load		; 66 cycles
    220  f2e9
    221  f2e9							; First half of image
    222  f2e9		       b9 c6 f3 	      lda	TitleFrameTop,y	; 5
    223  f2ec		       85 0d		      sta	PF0	; 4
    224  f2ee		       b9 c7 f3 	      lda	TitleFrameTop+1,y	; 5
    225  f2f1		       85 0e		      sta	PF1	; 4
    226  f2f3		       b9 c8 f3 	      lda	TitleFrameTop+2,y	; 5
    227  f2f6		       85 0f		      sta	PF2	; 4
    228  f2f8
      0  f2f8					      sleep	6
      1  f2f8				   .CYCLES    SET	6
      2  f2f8
      3  f2f8				  -	      IF	.CYCLES < 2
      4  f2f8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2f8				  -	      ERR
      6  f2f8					      ENDIF
      7  f2f8
      8  f2f8				  -	      IF	.CYCLES & 1
      9  f2f8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2f8				  -	      nop	0
     11  f2f8				  -	      ELSE
     12  f2f8				  -	      bit	VSYNC
     13  f2f8				  -	      ENDIF
     14  f2f8				  -.CYCLES    SET	.CYCLES - 3
     15  f2f8					      ENDIF
     16  f2f8
     17  f2f8					      REPEAT	.CYCLES / 2
     18  f2f8		       ea		      nop
     17  f2f8					      REPEND
     18  f2f9		       ea		      nop
     17  f2f9					      REPEND
     18  f2fa		       ea		      nop
     19  f2fb					      REPEND
    230  f2fb
    231  f2fb							; Second half of image
    232  f2fb		       b9 c9 f3 	      lda	TitleFrameTop+3,y	; 5
    233  f2fe		       85 0d		      sta	PF0	; 4
    234  f300		       b9 ca f3 	      lda	TitleFrameTop+4,y	; 5
    235  f303		       85 0e		      sta	PF1	; 4
    236  f305		       b9 cb f3 	      lda	TitleFrameTop+5,y	; 5
    237  f308		       85 0f		      sta	PF2	; 4
    238  f30a
    239  f30a				   .title_frame_top_index		; 4 cycles
    240  f30a
    241  f30a		       ca		      dex		; 2
    242  f30b		       d0 da		      bne	.title_frame_top	; 2
    243  f30d
    244  f30d				   .title_frame_top_index_next		; 6 cycles
    245  f30d
    246  f30d							; Restore scanline counter
    247  f30d		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    248  f30f
    249  f30f		       98		      tya		; 2
    250  f310		       18		      clc		; 2
    251  f311		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    252  f313		       a8		      tay		; 2
    253  f314		       c0 2a		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA
    254  f316		       d0 cf		      bne	.title_frame_top	; 2
    255  f318
    256  f318				   .title_frame_top_clean
    257  f318
    258  f318							; Clear out playfield
    259  f318		       a9 00		      lda	#0
    260  f31a		       85 0d		      sta	PF0
    261  f31c		       85 0e		      sta	PF1
    262  f31e		       85 0f		      sta	PF2
    263  f320
    264  f320				   TitleLabelDraw
    265  f320
    266  f320							; Load Label Color
    267  f320		       a9 0e		      lda	#TITLE_LABEL_COLOR
    268  f322		       85 08		      sta	COLUPF
    269  f324
    270  f324							; Start Counters
    271  f324		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    272  f326		       a0 00		      ldy	#0	; Image Counter
    273  f328
    274  f328				   .title_label
    275  f328
    276  f328							; 76 machine cycles per scanline
    277  f328		       85 02		      sta	WSYNC
    278  f32a
    279  f32a				   .title_label_load		; 66 cycles
    280  f32a
    281  f32a							; First half of image
    282  f32a		       b9 0e f4 	      lda	TitleLabel,y	; 5
    283  f32d		       85 0d		      sta	PF0	; 4
    284  f32f		       b9 0f f4 	      lda	TitleLabel+1,y	; 5
    285  f332		       85 0e		      sta	PF1	; 4
    286  f334		       b9 10 f4 	      lda	TitleLabel+2,y	; 5
    287  f337		       85 0f		      sta	PF2	; 4
    288  f339
      0  f339					      sleep	6
      1  f339				   .CYCLES    SET	6
      2  f339
      3  f339				  -	      IF	.CYCLES < 2
      4  f339				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f339				  -	      ERR
      6  f339					      ENDIF
      7  f339
      8  f339				  -	      IF	.CYCLES & 1
      9  f339				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f339				  -	      nop	0
     11  f339				  -	      ELSE
     12  f339				  -	      bit	VSYNC
     13  f339				  -	      ENDIF
     14  f339				  -.CYCLES    SET	.CYCLES - 3
     15  f339					      ENDIF
     16  f339
     17  f339					      REPEAT	.CYCLES / 2
     18  f339		       ea		      nop
     17  f339					      REPEND
     18  f33a		       ea		      nop
     17  f33a					      REPEND
     18  f33b		       ea		      nop
     19  f33c					      REPEND
    290  f33c
    291  f33c							; Second half of image
    292  f33c		       b9 11 f4 	      lda	TitleLabel+3,y	; 5
    293  f33f		       85 0d		      sta	PF0	; 4
    294  f341		       b9 12 f4 	      lda	TitleLabel+4,y	; 5
    295  f344		       85 0e		      sta	PF1	; 4
    296  f346		       b9 13 f4 	      lda	TitleLabel+5,y	; 5
    297  f349		       85 0f		      sta	PF2	; 4
    298  f34b
    299  f34b				   .title_label_index		; 4 cycles
    300  f34b
    301  f34b		       ca		      dex		; 2
    302  f34c		       d0 da		      bne	.title_label	; 2
    303  f34e
    304  f34e				   .title_label_index_next		; 6 cycles
    305  f34e
    306  f34e							; Restore scanline counter
    307  f34e		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    308  f350
    309  f350		       98		      tya		; 2
    310  f351		       18		      clc		; 2
    311  f352		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    312  f354		       a8		      tay		; 2
    313  f355		       c0 24		      cpy	#TITLE_LABEL_LINES*KERNEL_IMAGE_FULL_DATA
    314  f357		       d0 cf		      bne	.title_label	; 2
    315  f359
    316  f359				   .title_label_clean
    317  f359
    318  f359							; Clear out playfield
    319  f359		       a9 00		      lda	#0
    320  f35b		       85 0d		      sta	PF0
    321  f35d		       85 0e		      sta	PF1
    322  f35f		       85 0f		      sta	PF2
    323  f361
    324  f361				   TitleGap
    325  f361		       a2 07		      ldx	#TITLE_GAP_SIZE
    326  f363
    327  f363				   .title_gap
    328  f363		       ca		      dex
    329  f364		       85 02		      sta	WSYNC
    330  f366		       d0 fb		      bne	.title_gap
    331  f368
    332  f368				   TitleSpiderDraw
    333  f368		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    334  f36a		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    335  f36c
    336  f36c		       85 02		      sta	WSYNC
    337  f36e
    338  f36e				   .title_spider
    339  f36e		       b1 9b		      lda	(SpiderPtr),y
    340  f370		       85 1b		      sta	GRP0
    341  f372		       85 1c		      sta	GRP1
    342  f374
    343  f374				   .title_spider_delay
    344  f374		       ca		      dex
    345  f375		       85 02		      sta	WSYNC
    346  f377		       d0 fb		      bne	.title_spider_delay
    347  f379
    348  f379				   .title_spider_index
    349  f379		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    350  f37b		       88		      dey
    351  f37c		       10 f0		      bpl	.title_spider
    352  f37e
    353  f37e				   .title_spider_clean
    354  f37e
    355  f37e							; Clear sprites
    356  f37e		       a9 00		      lda	#0
    357  f380		       85 1b		      sta	GRP0
    358  f382		       85 1c		      sta	GRP1
    359  f384
    360  f384				   TitleFrameBottomDraw
    361  f384
    362  f384							; Load Frame Color
    363  f384		       a9 06		      lda	#TITLE_FRAME_COLOR
    364  f386		       85 08		      sta	COLUPF
    365  f388
    366  f388							; Start Counters
    367  f388		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    368  f38a		       a0 00		      ldy	#0	; Image Counter
    369  f38c
    370  f38c				   .title_frame_bottom
    371  f38c
    372  f38c							; 76 machine cycles per scanline
    373  f38c		       85 02		      sta	WSYNC
    374  f38e
    375  f38e				   .title_frame_bottom_load		; 66 cycles
    376  f38e
    377  f38e							; First half of image
    378  f38e		       b9 f0 f3 	      lda	TitleFrameBottom,y	; 5
    379  f391		       85 0d		      sta	PF0	; 4
    380  f393		       b9 f1 f3 	      lda	TitleFrameBottom+1,y	; 5
    381  f396		       85 0e		      sta	PF1	; 4
    382  f398		       b9 f2 f3 	      lda	TitleFrameBottom+2,y	; 5
    383  f39b		       85 0f		      sta	PF2	; 4
    384  f39d
      0  f39d					      sleep	6
      1  f39d				   .CYCLES    SET	6
      2  f39d
      3  f39d				  -	      IF	.CYCLES < 2
      4  f39d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f39d				  -	      ERR
      6  f39d					      ENDIF
      7  f39d
      8  f39d				  -	      IF	.CYCLES & 1
      9  f39d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f39d				  -	      nop	0
     11  f39d				  -	      ELSE
     12  f39d				  -	      bit	VSYNC
     13  f39d				  -	      ENDIF
     14  f39d				  -.CYCLES    SET	.CYCLES - 3
     15  f39d					      ENDIF
     16  f39d
     17  f39d					      REPEAT	.CYCLES / 2
     18  f39d		       ea		      nop
     17  f39d					      REPEND
     18  f39e		       ea		      nop
     17  f39e					      REPEND
     18  f39f		       ea		      nop
     19  f3a0					      REPEND
    386  f3a0
    387  f3a0							; Second half of image
    388  f3a0		       b9 f3 f3 	      lda	TitleFrameBottom+3,y	; 5
    389  f3a3		       85 0d		      sta	PF0	; 4
    390  f3a5		       b9 f4 f3 	      lda	TitleFrameBottom+4,y	; 5
    391  f3a8		       85 0e		      sta	PF1	; 4
    392  f3aa		       b9 f5 f3 	      lda	TitleFrameBottom+5,y	; 5
    393  f3ad		       85 0f		      sta	PF2	; 4
    394  f3af
    395  f3af				   .title_frame_bottom_index		; 4 cycles
    396  f3af
    397  f3af		       ca		      dex		; 2
    398  f3b0		       d0 da		      bne	.title_frame_bottom	; 2
    399  f3b2
    400  f3b2				   .title_frame_bottom_index_next		; 6 cycles
    401  f3b2
    402  f3b2							; Restore scanline counter
    403  f3b2		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    404  f3b4
    405  f3b4		       98		      tya		; 2
    406  f3b5		       18		      clc		; 2
    407  f3b6		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    408  f3b8		       a8		      tay		; 2
    409  f3b9		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    410  f3bb		       d0 cf		      bne	.title_frame_bottom	; 2
    411  f3bd
    412  f3bd				   .title_frame_bottom_clean
    413  f3bd
    414  f3bd							; Clear out playfield
    415  f3bd		       a9 00		      lda	#0
    416  f3bf		       85 0d		      sta	PF0
    417  f3c1		       85 0e		      sta	PF1
    418  f3c3		       85 0f		      sta	PF2
    419  f3c5
    420  f3c5				   .title_kernel_return
    421  f3c5		       60		      rts
    422  f3c6
    423  f3c6				   TitleAssets
    424  f3c6
    425  f3c6							; Assets
------- FILE title_frame_top.asm LEVEL 3 PASS 2
      0  f3c6					      include	"title_frame_top.asm"
      1  f3c6				   TitleFrameTop
      2  f3c6
      3  f3c6		       a0		      .BYTE.b	%10100000
      4  f3c7		       54		      .BYTE.b	%01010100
      5  f3c8		       01		      .BYTE.b	%00000001
      6  f3c9		       00		      .BYTE.b	%00000000
      7  f3ca		       03		      .BYTE.b	%00000011
      8  f3cb		       2c		      .BYTE.b	%00101100
      9  f3cc
     10  f3cc		       d0		      .BYTE.b	%11010000
     11  f3cd		       23		      .BYTE.b	%00100011
     12  f3ce		       00		      .BYTE.b	%00000000
     13  f3cf		       00		      .BYTE.b	%00000000
     14  f3d0		       00		      .BYTE.b	%00000000
     15  f3d1		       51		      .BYTE.b	%01010001
     16  f3d2
     17  f3d2		       60		      .BYTE.b	%01100000
     18  f3d3		       dc		      .BYTE.b	%11011100
     19  f3d4		       00		      .BYTE.b	%00000000
     20  f3d5		       00		      .BYTE.b	%00000000
     21  f3d6		       00		      .BYTE.b	%00000000
     22  f3d7		       8e		      .BYTE.b	%10001110
     23  f3d8
     24  f3d8		       b0		      .BYTE.b	%10110000
     25  f3d9		       00		      .BYTE.b	%00000000
     26  f3da		       00		      .BYTE.b	%00000000
     27  f3db		       00		      .BYTE.b	%00000000
     28  f3dc		       00		      .BYTE.b	%00000000
     29  f3dd		       51		      .BYTE.b	%01010001
     30  f3de
     31  f3de		       40		      .BYTE.b	%01000000
     32  f3df		       80		      .BYTE.b	%10000000
     33  f3e0		       00		      .BYTE.b	%00000000
     34  f3e1		       00		      .BYTE.b	%00000000
     35  f3e2		       00		      .BYTE.b	%00000000
     36  f3e3		       ad		      .BYTE.b	%10101101
     37  f3e4
     38  f3e4		       50		      .BYTE.b	%01010000
     39  f3e5		       00		      .BYTE.b	%00000000
     40  f3e6		       00		      .BYTE.b	%00000000
     41  f3e7		       00		      .BYTE.b	%00000000
     42  f3e8		       01		      .BYTE.b	%00000001
     43  f3e9		       82		      .BYTE.b	%10000010
     44  f3ea
     45  f3ea		       20		      .BYTE.b	%00100000
     46  f3eb		       00		      .BYTE.b	%00000000
     47  f3ec		       00		      .BYTE.b	%00000000
     48  f3ed		       00		      .BYTE.b	%00000000
     49  f3ee		       02		      .BYTE.b	%00000010
     50  f3ef		       00		      .BYTE.b	%00000000
------- FILE title.asm
------- FILE title_frame_bottom.asm LEVEL 3 PASS 2
      0  f3f0					      include	"title_frame_bottom.asm"
      1  f3f0				   TitleFrameBottom
      2  f3f0
      3  f3f0		       20		      .BYTE.b	%00100000
      4  f3f1		       00		      .BYTE.b	%00000000
      5  f3f2		       00		      .BYTE.b	%00000000
      6  f3f3		       00		      .BYTE.b	%00000000
      7  f3f4		       00		      .BYTE.b	%00000000
      8  f3f5		       64		      .BYTE.b	%01100100
      9  f3f6
     10  f3f6		       50		      .BYTE.b	%01010000
     11  f3f7		       00		      .BYTE.b	%00000000
     12  f3f8		       00		      .BYTE.b	%00000000
     13  f3f9		       00		      .BYTE.b	%00000000
     14  f3fa		       00		      .BYTE.b	%00000000
     15  f3fb		       98		      .BYTE.b	%10011000
     16  f3fc
     17  f3fc		       90		      .BYTE.b	%10010000
     18  f3fd		       80		      .BYTE.b	%10000000
     19  f3fe		       00		      .BYTE.b	%00000000
     20  f3ff		       00		      .BYTE.b	%00000000
     21  f400		       00		      .BYTE.b	%00000000
     22  f401		       28		      .BYTE.b	%00101000
     23  f402
     24  f402		       60		      .BYTE.b	%01100000
     25  f403		       60		      .BYTE.b	%01100000
     26  f404		       00		      .BYTE.b	%00000000
     27  f405		       00		      .BYTE.b	%00000000
     28  f406		       00		      .BYTE.b	%00000000
     29  f407		       44		      .BYTE.b	%01000100
     30  f408
     31  f408		       d0		      .BYTE.b	%11010000
     32  f409		       1c		      .BYTE.b	%00011100
     33  f40a		       00		      .BYTE.b	%00000000
     34  f40b		       00		      .BYTE.b	%00000000
     35  f40c		       00		      .BYTE.b	%00000000
     36  f40d		       ab		      .BYTE.b	%10101011
------- FILE title.asm
------- FILE title_label.asm LEVEL 3 PASS 2
      0  f40e					      include	"title_label.asm"
      1  f40e				   TitleLabel
      2  f40e
      3  f40e		       c0		      .BYTE.b	%11000000
      4  f40f		       77		      .BYTE.b	%01110111
      5  f410		       66		      .BYTE.b	%01100110
      6  f411		       30		      .BYTE.b	%00110000
      7  f412		       22		      .BYTE.b	%00100010
      8  f413		       1b		      .BYTE.b	%00011011
      9  f414
     10  f414		       40		      .BYTE.b	%01000000
     11  f415		       52		      .BYTE.b	%01010010
     12  f416		       2a		      .BYTE.b	%00101010
     13  f417		       50		      .BYTE.b	%01010000
     14  f418		       22		      .BYTE.b	%00100010
     15  f419		       29		      .BYTE.b	%00101001
     16  f41a
     17  f41a		       40		      .BYTE.b	%01000000
     18  f41b		       72		      .BYTE.b	%01110010
     19  f41c		       6a		      .BYTE.b	%01101010
     20  f41d		       50		      .BYTE.b	%01010000
     21  f41e		       22		      .BYTE.b	%00100010
     22  f41f		       1b		      .BYTE.b	%00011011
     23  f420
     24  f420		       c0		      .BYTE.b	%11000000
     25  f421		       42		      .BYTE.b	%01000010
     26  f422		       2a		      .BYTE.b	%00101010
     27  f423		       30		      .BYTE.b	%00110000
     28  f424		       22		      .BYTE.b	%00100010
     29  f425		       29		      .BYTE.b	%00101001
     30  f426
     31  f426		       80		      .BYTE.b	%10000000
     32  f427		       42		      .BYTE.b	%01000010
     33  f428		       2a		      .BYTE.b	%00101010
     34  f429		       50		      .BYTE.b	%01010000
     35  f42a		       2a		      .BYTE.b	%00101010
     36  f42b		       29		      .BYTE.b	%00101001
     37  f42c
     38  f42c		       c0		      .BYTE.b	%11000000
     39  f42d		       47		      .BYTE.b	%01000111
     40  f42e		       66		      .BYTE.b	%01100110
     41  f42f		       50		      .BYTE.b	%01010000
     42  f430		       14		      .BYTE.b	%00010100
     43  f431		       1b		      .BYTE.b	%00011011
------- FILE title.asm
------- FILE title_spider.asm LEVEL 3 PASS 2
      0  f432					      include	"title_spider.asm"
      1  f432				   TitleSpider
      2  f432
      3  f432		       30		      .BYTE.b	%00110000
      4  f433		       67		      .BYTE.b	%01100111
      5  f434		       48		      .BYTE.b	%01001000
      6  f435		       d2		      .BYTE.b	%11010010
      7  f436		       d7		      .BYTE.b	%11010111
      8  f437		       d0		      .BYTE.b	%11010000
      9  f438		       4a		      .BYTE.b	%01001010
     10  f439		       6c		      .BYTE.b	%01101100
     11  f43a		       3b		      .BYTE.b	%00111011
     12  f43b
     13  f43b		       37		      .BYTE.b	%00110111
     14  f43c		       6a		      .BYTE.b	%01101010
     15  f43d		       d7		      .BYTE.b	%11010111
     16  f43e		       d0		      .BYTE.b	%11010000
     17  f43f		       ca		      .BYTE.b	%11001010
     18  f440		       6c		      .BYTE.b	%01101100
     19  f441		       3b		      .BYTE.b	%00111011
     20  f442		       00		      .BYTE.b	%00000000
     21  f443		       00		      .BYTE.b	%00000000
------- FILE title.asm
    430  f444
    431  f444				   TitleAudio0
    432  f444
    433  f444		       0f		      .BYTE.b	#15	; B
    434  f445		       13		      .BYTE.b	#19	; G
    435  f446		       17		      .BYTE.b	#23	; E
    436  f447		       13		      .BYTE.b	#19	; G
    437  f448		       0e		      .BYTE.b	#14	; C
    438  f449		       13		      .BYTE.b	#19
    439  f44a		       17		      .BYTE.b	#23
    440  f44b		       13		      .BYTE.b	#19
    441  f44c		       0c		      .BYTE.b	#12	; D
    442  f44d		       13		      .BYTE.b	#19
    443  f44e		       17		      .BYTE.b	#23
    444  f44f		       13		      .BYTE.b	#19
    445  f450		       0e		      .BYTE.b	#14	; C
    446  f451		       13		      .BYTE.b	#19
    447  f452		       17		      .BYTE.b	#23
    448  f453		       13		      .BYTE.b	#19
    449  f454
    450  f454				   TitleTone1
    451  f454
    452  f454		       0f		      .BYTE.b	#15	; Electronic Rumble
    453  f455		       ff		      .BYTE.b	#$FF
    454  f456		       01		      .BYTE.b	#1	; Low Pure Tone
    455  f457		       01		      .BYTE.b	#1
    456  f458		       08		      .BYTE.b	#8	; White Noise
    457  f459		       01		      .BYTE.b	#1
    458  f45a		       01		      .BYTE.b	#1
    459  f45b		       ff		      .BYTE.b	#$FF
    460  f45c		       ff		      .BYTE.b	#$FF
    461  f45d		       0f		      .BYTE.b	#15
    462  f45e		       ff		      .BYTE.b	#$FF
    463  f45f		       ff		      .BYTE.b	#$FF
    464  f460		       08		      .BYTE.b	#8
    465  f461		       ff		      .BYTE.b	#$FF
    466  f462		       01		      .BYTE.b	#1
    467  f463		       01		      .BYTE.b	#1
    468  f464
    469  f464				   TitleAudio1
    470  f464
    471  f464		       1d		      .BYTE.b	#29	; Kick
    472  f465		       ff		      .BYTE.b	#$FF
    473  f466		       1f		      .BYTE.b	#31	; C
    474  f467		       1f		      .BYTE.b	#31
    475  f468		       07		      .BYTE.b	#7	; Snare
    476  f469		       1f		      .BYTE.b	#31
    477  f46a		       1f		      .BYTE.b	#31
    478  f46b		       ff		      .BYTE.b	#$FF
    479  f46c		       ff		      .BYTE.b	#$FF
    480  f46d		       1d		      .BYTE.b	#29
    481  f46e		       ff		      .BYTE.b	#$FF
    482  f46f		       ff		      .BYTE.b	#$FF
    483  f470		       07		      .BYTE.b	#7
    484  f471		       ff		      .BYTE.b	#$FF
    485  f472		       17		      .BYTE.b	#23	; F
    486  f473		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f474					      include	"game.asm"
      1  f474							;================
      2  f474							; Game
      3  f474							;================
      4  f474
      5  f474							; Constants
      6  f474
      7  f474		       00 04	   GAME_AUDIO_VOLUME =	4
      8  f474		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f474		       00 09	   GAME_AUDIO_STEP =	9
     10  f474		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f474		       00 06	   GAME_AUDIO_TONE =	6
     12  f474
     13  f474							; Object Code
     14  f474
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f474					      include	"objects/score.asm"
      1  f474							;======================
      2  f474							; Score (playfield)
      3  f474							;======================
      4  f474
      5  f474							; Constants
      6  f474
      7  f474		       00 00	   SCORE_BG_COLOR =	#$00
      8  f474		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f474		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f474
     11  f474		       00 05	   SCORE_CHAR_SIZE =	5
     12  f474		       00 02	   SCORE_LINE_SIZE =	2
     13  f474		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f474
     15  f474							; Initialization
     16  f474
     17  f474				   ScoreInit
     18  f474
     19  f474							; Health Score
     20  f474		       a9 ff		      lda	#$FF
     21  f476		       85 91		      sta	ScoreValue+0
     22  f478
     23  f478							; Game Score
     24  f478		       a9 00		      lda	#0
     25  f47a		       85 92		      sta	ScoreValue+1
     26  f47c
     27  f47c		       60		      rts
     28  f47d
     29  f47d							; Frame Update
     30  f47d
     31  f47d				   ScoreUpdate
     32  f47d
     33  f47d		       a2 01		      ldx	#1
     34  f47f				   .score_update_loop
     35  f47f
     36  f47f							; Ones Digit
     37  f47f		       b5 91		      lda	ScoreValue,x
     38  f481		       29 0f		      and	#$0f
     39  f483		       85 83		      sta	Temp
     40  f485		       0a		      asl
     41  f486		       0a		      asl
     42  f487		       65 83		      adc	Temp
     43  f489		       95 93		      sta	ScoreDigitOnes,x
     44  f48b
     45  f48b							; Tens Digit
     46  f48b		       b5 91		      lda	ScoreValue,x
     47  f48d		       29 f0		      and	#$f0
     48  f48f		       4a		      lsr
     49  f490		       4a		      lsr
     50  f491		       85 83		      sta	Temp
     51  f493		       4a		      lsr
     52  f494		       4a		      lsr
     53  f495		       65 83		      adc	Temp
     54  f497		       95 95		      sta	ScoreDigitTens,x
     55  f499
     56  f499		       ca		      dex
     57  f49a		       10 e3		      bpl	.score_update_loop
     58  f49c
     59  f49c				   .score_update_end
     60  f49c		       60		      rts
     61  f49d
     62  f49d							; Draw loop (uses SCORE_LINES scanlines)
     63  f49d
     64  f49d				   ScoreDraw
     65  f49d
     66  f49d							; Load Colors
     67  f49d		       a9 00		      lda	#SCORE_BG_COLOR
     68  f49f		       85 09		      sta	COLUBK
     69  f4a1		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f4a3		       85 08		      sta	COLUPF
     71  f4a5		       85 06		      sta	COLUP0
     72  f4a7		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f4a9		       85 07		      sta	COLUP1
     74  f4ab
     75  f4ab							; Set Non-Mirror and p0/p1 color
     76  f4ab		       a5 80		      lda	CtrlPf
     77  f4ad		       29 fc		      and	#%11111100
     78  f4af		       09 02		      ora	#%00000010
     79  f4b1		       85 80		      sta	CtrlPf
     80  f4b3		       85 0a		      sta	CTRLPF
     81  f4b5
     82  f4b5							;sta WSYNC
     83  f4b5
     84  f4b5		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f4b7
     86  f4b7				   .score_draw_line
     87  f4b7
     88  f4b7							; 1st Value
     89  f4b7		       a4 95		      ldy	ScoreDigitTens
     90  f4b9		       b9 0d f5 	      lda	ScoreDigits,y
     91  f4bc		       29 f0		      and	#$f0
     92  f4be		       85 97		      sta	ScoreGfx
     93  f4c0		       a4 93		      ldy	ScoreDigitOnes
     94  f4c2		       b9 0d f5 	      lda	ScoreDigits,y
     95  f4c5		       29 0f		      and	#$0f
     96  f4c7		       05 97		      ora	ScoreGfx
     97  f4c9		       85 97		      sta	ScoreGfx
     98  f4cb
     99  f4cb		       85 02		      sta	WSYNC
    100  f4cd		       85 0e		      sta	PF1
    101  f4cf
    102  f4cf							; 2nd Value
    103  f4cf		       a4 96		      ldy	ScoreDigitTens+1
    104  f4d1		       b9 0d f5 	      lda	ScoreDigits,y
    105  f4d4		       29 f0		      and	#$f0
    106  f4d6		       85 98		      sta	ScoreGfx+1
    107  f4d8		       a4 94		      ldy	ScoreDigitOnes+1
    108  f4da		       b9 0d f5 	      lda	ScoreDigits,y
    109  f4dd		       29 0f		      and	#$0f
    110  f4df		       05 98		      ora	ScoreGfx+1
    111  f4e1		       85 98		      sta	ScoreGfx+1
    112  f4e3
      0  f4e3					      sleep	12
      1  f4e3				   .CYCLES    SET	12
      2  f4e3
      3  f4e3				  -	      IF	.CYCLES < 2
      4  f4e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4e3				  -	      ERR
      6  f4e3					      ENDIF
      7  f4e3
      8  f4e3				  -	      IF	.CYCLES & 1
      9  f4e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4e3				  -	      nop	0
     11  f4e3				  -	      ELSE
     12  f4e3				  -	      bit	VSYNC
     13  f4e3				  -	      ENDIF
     14  f4e3				  -.CYCLES    SET	.CYCLES - 3
     15  f4e3					      ENDIF
     16  f4e3
     17  f4e3					      REPEAT	.CYCLES / 2
     18  f4e3		       ea		      nop
     17  f4e3					      REPEND
     18  f4e4		       ea		      nop
     17  f4e4					      REPEND
     18  f4e5		       ea		      nop
     17  f4e5					      REPEND
     18  f4e6		       ea		      nop
     17  f4e6					      REPEND
     18  f4e7		       ea		      nop
     17  f4e7					      REPEND
     18  f4e8		       ea		      nop
     19  f4e9					      REPEND
    114  f4e9		       85 0e		      sta	PF1
    115  f4eb
    116  f4eb		       a4 97		      ldy	ScoreGfx
    117  f4ed		       85 02		      sta	WSYNC
    118  f4ef
    119  f4ef		       84 0e		      sty	PF1
    120  f4f1
    121  f4f1		       e6 93		      inc	ScoreDigitOnes
    122  f4f3		       e6 94		      inc	ScoreDigitOnes+1
    123  f4f5		       e6 95		      inc	ScoreDigitTens
    124  f4f7		       e6 96		      inc	ScoreDigitTens+1
    125  f4f9
      0  f4f9					      sleep	12
      1  f4f9				   .CYCLES    SET	12
      2  f4f9
      3  f4f9				  -	      IF	.CYCLES < 2
      4  f4f9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4f9				  -	      ERR
      6  f4f9					      ENDIF
      7  f4f9
      8  f4f9				  -	      IF	.CYCLES & 1
      9  f4f9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4f9				  -	      nop	0
     11  f4f9				  -	      ELSE
     12  f4f9				  -	      bit	VSYNC
     13  f4f9				  -	      ENDIF
     14  f4f9				  -.CYCLES    SET	.CYCLES - 3
     15  f4f9					      ENDIF
     16  f4f9
     17  f4f9					      REPEAT	.CYCLES / 2
     18  f4f9		       ea		      nop
     17  f4f9					      REPEND
     18  f4fa		       ea		      nop
     17  f4fa					      REPEND
     18  f4fb		       ea		      nop
     17  f4fb					      REPEND
     18  f4fc		       ea		      nop
     17  f4fc					      REPEND
     18  f4fd		       ea		      nop
     17  f4fd					      REPEND
     18  f4fe		       ea		      nop
     19  f4ff					      REPEND
    127  f4ff		       ca		      dex
    128  f500		       85 0e		      sta	PF1
    129  f502
    130  f502		       d0 b3		      bne	.score_draw_line
    131  f504		       85 02		      sta	WSYNC
    132  f506
    133  f506							; Clear
    134  f506		       a9 00		      lda	#0
    135  f508		       85 0e		      sta	PF1
    136  f50a
    137  f50a		       85 02		      sta	WSYNC
    138  f50c
    139  f50c		       60		      rts
    140  f50d
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f50d					      include	"objects/score_digits.asm"
      1  f50d				   ScoreDigits
      2  f50d
      3  f50d		       77		      .BYTE.b	%01110111
      4  f50e		       55		      .BYTE.b	%01010101
      5  f50f		       55		      .BYTE.b	%01010101
      6  f510		       55		      .BYTE.b	%01010101
      7  f511		       77		      .BYTE.b	%01110111
      8  f512
      9  f512		       11		      .BYTE.b	%00010001
     10  f513		       11		      .BYTE.b	%00010001
     11  f514		       11		      .BYTE.b	%00010001
     12  f515		       11		      .BYTE.b	%00010001
     13  f516		       11		      .BYTE.b	%00010001
     14  f517
     15  f517		       77		      .BYTE.b	%01110111
     16  f518		       11		      .BYTE.b	%00010001
     17  f519		       77		      .BYTE.b	%01110111
     18  f51a		       44		      .BYTE.b	%01000100
     19  f51b		       77		      .BYTE.b	%01110111
     20  f51c
     21  f51c		       77		      .BYTE.b	%01110111
     22  f51d		       11		      .BYTE.b	%00010001
     23  f51e		       33		      .BYTE.b	%00110011
     24  f51f		       11		      .BYTE.b	%00010001
     25  f520		       77		      .BYTE.b	%01110111
     26  f521
     27  f521		       55		      .BYTE.b	%01010101
     28  f522		       55		      .BYTE.b	%01010101
     29  f523		       77		      .BYTE.b	%01110111
     30  f524		       11		      .BYTE.b	%00010001
     31  f525		       11		      .BYTE.b	%00010001
     32  f526
     33  f526		       77		      .BYTE.b	%01110111
     34  f527		       44		      .BYTE.b	%01000100
     35  f528		       77		      .BYTE.b	%01110111
     36  f529		       11		      .BYTE.b	%00010001
     37  f52a		       77		      .BYTE.b	%01110111
     38  f52b
     39  f52b		       77		      .BYTE.b	%01110111
     40  f52c		       44		      .BYTE.b	%01000100
     41  f52d		       77		      .BYTE.b	%01110111
     42  f52e		       55		      .BYTE.b	%01010101
     43  f52f		       77		      .BYTE.b	%01110111
     44  f530
     45  f530		       77		      .BYTE.b	%01110111
     46  f531		       11		      .BYTE.b	%00010001
     47  f532		       22		      .BYTE.b	%00100010
     48  f533		       22		      .BYTE.b	%00100010
     49  f534		       22		      .BYTE.b	%00100010
     50  f535
     51  f535		       77		      .BYTE.b	%01110111
     52  f536		       55		      .BYTE.b	%01010101
     53  f537		       77		      .BYTE.b	%01110111
     54  f538		       55		      .BYTE.b	%01010101
     55  f539		       77		      .BYTE.b	%01110111
     56  f53a
     57  f53a		       77		      .BYTE.b	%01110111
     58  f53b		       55		      .BYTE.b	%01010101
     59  f53c		       77		      .BYTE.b	%01110111
     60  f53d		       11		      .BYTE.b	%00010001
     61  f53e		       11		      .BYTE.b	%00010001
     62  f53f
     63  f53f		       77		      .BYTE.b	%01110111
     64  f540		       55		      .BYTE.b	%01010101
     65  f541		       77		      .BYTE.b	%01110111
     66  f542		       55		      .BYTE.b	%01010101
     67  f543		       55		      .BYTE.b	%01010101
     68  f544
     69  f544		       66		      .BYTE.b	%01100110
     70  f545		       55		      .BYTE.b	%01010101
     71  f546		       66		      .BYTE.b	%01100110
     72  f547		       55		      .BYTE.b	%01010101
     73  f548		       66		      .BYTE.b	%01100110
     74  f549
     75  f549		       77		      .BYTE.b	%01110111
     76  f54a		       44		      .BYTE.b	%01000100
     77  f54b		       44		      .BYTE.b	%01000100
     78  f54c		       44		      .BYTE.b	%01000100
     79  f54d		       77		      .BYTE.b	%01110111
     80  f54e
     81  f54e		       66		      .BYTE.b	%01100110
     82  f54f		       55		      .BYTE.b	%01010101
     83  f550		       55		      .BYTE.b	%01010101
     84  f551		       55		      .BYTE.b	%01010101
     85  f552		       66		      .BYTE.b	%01100110
     86  f553
     87  f553		       77		      .BYTE.b	%01110111
     88  f554		       44		      .BYTE.b	%01000100
     89  f555		       66		      .BYTE.b	%01100110
     90  f556		       44		      .BYTE.b	%01000100
     91  f557		       77		      .BYTE.b	%01110111
     92  f558
     93  f558		       77		      .BYTE.b	%01110111
     94  f559		       44		      .BYTE.b	%01000100
     95  f55a		       66		      .BYTE.b	%01100110
     96  f55b		       44		      .BYTE.b	%01000100
     97  f55c		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f55d					      include	"objects/web.asm"
      1  f55d							;================
      2  f55d							; Web (Playfield)
      3  f55d							;================
      4  f55d
      5  f55d							; Constants
      6  f55d
      7  f55d		       00 00	   WEB_BG_COLOR =	#$00
      8  f55d		       00 06	   WEB_FG_COLOR =	#$06
      9  f55d
     10  f55d		       00 1e	   WEB_SIZE   =	30
     11  f55d		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f55d		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f55d
     14  f55d							; Scanline Draw
     15  f55d
     16  f55d				   WebDrawStart
     17  f55d
     18  f55d							; Load Colors
     19  f55d		       a9 00		      lda	#WEB_BG_COLOR
     20  f55f		       85 09		      sta	COLUBK
     21  f561		       a9 06		      lda	#WEB_FG_COLOR
     22  f563		       85 08		      sta	COLUPF
     23  f565
     24  f565							; Mirror playfield and use standard playfield color
     25  f565		       a5 80		      lda	CtrlPf
     26  f567		       29 fc		      and	#%11111100
     27  f569		       09 01		      ora	#%00000001
     28  f56b		       85 80		      sta	CtrlPf
     29  f56d		       85 0a		      sta	CTRLPF
     30  f56f
     31  f56f							; Initialize image index
     32  f56f		       a9 00		      lda	#0
     33  f571		       85 99		      sta	WebIndex
     34  f573		       a9 01		      lda	#1
     35  f575		       85 9a		      sta	WebDir
     36  f577
     37  f577		       60		      rts
     38  f578
     39  f578				   WebDraw
     40  f578
     41  f578		       a4 99		      ldy	WebIndex
     42  f57a
     43  f57a							; Draw Image
     44  f57a		       b9 a3 f5 	      lda	WebImagePF0,y
     45  f57d		       85 0d		      sta	PF0
     46  f57f		       b9 b2 f5 	      lda	WebImagePF1,y
     47  f582		       85 0e		      sta	PF1
     48  f584		       b9 c1 f5 	      lda	WebImagePF2,y
     49  f587		       85 0f		      sta	PF2
     50  f589
     51  f589							; Increment image index
     52  f589		       18		      clc
     53  f58a		       98		      tya
     54  f58b		       65 9a		      adc	WebDir
     55  f58d		       85 99		      sta	WebIndex
     56  f58f
     57  f58f		       c9 0f		      cmp	#WEB_SIZE/2
     58  f591		       d0 06		      bne	.web_draw_return
     59  f593
     60  f593		       a9 ff		      lda	#-1
     61  f595		       85 9a		      sta	WebDir
     62  f597
     63  f597		       c6 99		      dec	WebIndex
     64  f599
     65  f599				   .web_draw_return
     66  f599		       60		      rts
     67  f59a
     68  f59a				   WebClean
     69  f59a
     70  f59a							; Clear out playfield
     71  f59a		       a9 00		      lda	#0
     72  f59c		       85 0d		      sta	PF0
     73  f59e		       85 0e		      sta	PF1
     74  f5a0		       85 0f		      sta	PF2
     75  f5a2
     76  f5a2		       60		      rts
     77  f5a3
     78  f5a3							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f5a3					      include	"objects/web_image.asm"
      1  f5a3				   WebImagePF0
      2  f5a3		       00		      .BYTE.b	%00000000
      3  f5a4		       00		      .BYTE.b	%00000000
      4  f5a5		       00		      .BYTE.b	%00000000
      5  f5a6		       00		      .BYTE.b	%00000000
      6  f5a7		       00		      .BYTE.b	%00000000
      7  f5a8		       00		      .BYTE.b	%00000000
      8  f5a9		       00		      .BYTE.b	%00000000
      9  f5aa		       00		      .BYTE.b	%00000000
     10  f5ab		       00		      .BYTE.b	%00000000
     11  f5ac		       30		      .BYTE.b	%00110000
     12  f5ad		       e0		      .BYTE.b	%11100000
     13  f5ae		       20		      .BYTE.b	%00100000
     14  f5af		       40		      .BYTE.b	%01000000
     15  f5b0		       40		      .BYTE.b	%01000000
     16  f5b1		       80		      .BYTE.b	%10000000
     17  f5b2
     18  f5b2				   WebImagePF1
     19  f5b2		       08		      .BYTE.b	%00001000
     20  f5b3		       06		      .BYTE.b	%00000110
     21  f5b4		       01		      .BYTE.b	%00000001
     22  f5b5		       00		      .BYTE.b	%00000000
     23  f5b6		       00		      .BYTE.b	%00000000
     24  f5b7		       01		      .BYTE.b	%00000001
     25  f5b8		       01		      .BYTE.b	%00000001
     26  f5b9		       02		      .BYTE.b	%00000010
     27  f5ba		       0c		      .BYTE.b	%00001100
     28  f5bb		       30		      .BYTE.b	%00110000
     29  f5bc		       c0		      .BYTE.b	%11000000
     30  f5bd		       38		      .BYTE.b	%00111000
     31  f5be		       07		      .BYTE.b	%00000111
     32  f5bf		       00		      .BYTE.b	%00000000
     33  f5c0		       00		      .BYTE.b	%00000000
     34  f5c1
     35  f5c1				   WebImagePF2
     36  f5c1		       20		      .BYTE.b	%00100000
     37  f5c2		       18		      .BYTE.b	%00011000
     38  f5c3		       04		      .BYTE.b	%00000100
     39  f5c4		       03		      .BYTE.b	%00000011
     40  f5c5		       3f		      .BYTE.b	%00111111
     41  f5c6		       c2		      .BYTE.b	%11000010
     42  f5c7		       04		      .BYTE.b	%00000100
     43  f5c8		       08		      .BYTE.b	%00001000
     44  f5c9		       08		      .BYTE.b	%00001000
     45  f5ca		       10		      .BYTE.b	%00010000
     46  f5cb		       20		      .BYTE.b	%00100000
     47  f5cc		       20		      .BYTE.b	%00100000
     48  f5cd		       41		      .BYTE.b	%01000001
     49  f5ce		       8e		      .BYTE.b	%10001110
     50  f5cf		       f0		      .BYTE.b	%11110000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f5d0					      include	"objects/spider.asm"
      1  f5d0							;=================
      2  f5d0							; Spider (player0)
      3  f5d0							;=================
      4  f5d0
      5  f5d0							; Constants
      6  f5d0
      7  f5d0		       00 56	   SPIDER_COLOR =	#$56
      8  f5d0		       00 10	   SPIDER_SIZE =	16
      9  f5d0		       00 08	   SPIDER_SPRITE_SIZE =	8
     10  f5d0		       00 02	   SPIDER_VEL_X =	2
     11  f5d0		       00 02	   SPIDER_VEL_Y =	2
     12  f5d0
     13  f5d0		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f5d0
     15  f5d0							; Initialization
     16  f5d0
     17  f5d0				   SpiderInit
     18  f5d0
     19  f5d0							; Initialize Position in center of screen
     20  f5d0		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f5d2		       85 9d		      sta	SpiderPos
     22  f5d4		       a9 48		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f5d6		       85 9e		      sta	SpiderPos+1
     24  f5d8
     25  f5d8							; Setup Sprite
      0  f5d8					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f5d8				   .POINTER   SET	SpiderPtr
      2  f5d8				   .ADDRESS   SET	SpiderSprite
      3  f5d8
      4  f5d8		       a9 4e		      LDA	#<.ADDRESS
      5  f5da		       85 9b		      STA	.POINTER
      6  f5dc		       a9 f7		      LDA	#>.ADDRESS
      7  f5de		       85 9c		      STA	.POINTER+1
      8  f5e0
     27  f5e0
     28  f5e0							;    lda #SPIDER_COLOR
     29  f5e0							;    sta SpiderColor
     30  f5e0
     31  f5e0		       60		      rts
     32  f5e1
     33  f5e1							; Frame Update
     34  f5e1
     35  f5e1				   SpiderUpdate
     36  f5e1		       20 e8 f5 	      jsr	SpiderControl
     37  f5e4		       20 ce f6 	      jsr	SpiderCollision
     38  f5e7		       60		      rts
     39  f5e8
     40  f5e8				   SpiderControl
     41  f5e8
     42  f5e8							; Control Position
     43  f5e8		       a6 9d		      ldx	SpiderPos
     44  f5ea		       a4 9e		      ldy	SpiderPos+1
     45  f5ec		       ad 80 02 	      lda	SWCHA
     46  f5ef
     47  f5ef				   .spider_control_check_right
     48  f5ef		       30 02		      bmi	.spider_control_check_left
     49  f5f1
     50  f5f1					      REPEAT	#SPIDER_VEL_X
     51  f5f1		       e8		      inx
     50  f5f1					      REPEND
     51  f5f2		       e8		      inx
     52  f5f3					      REPEND
     53  f5f3
     54  f5f3				   .spider_control_check_left
     55  f5f3		       2a		      rol
     56  f5f4		       30 02		      bmi	.spider_control_check_down
     57  f5f6
     58  f5f6					      REPEAT	#SPIDER_VEL_X
     59  f5f6		       ca		      dex
     58  f5f6					      REPEND
     59  f5f7		       ca		      dex
     60  f5f8					      REPEND
     61  f5f8
     62  f5f8				   .spider_control_check_down
     63  f5f8		       2a		      rol
     64  f5f9		       30 02		      bmi	.spider_control_check_up
     65  f5fb
     66  f5fb					      REPEAT	#SPIDER_VEL_Y
     67  f5fb		       88		      dey
     66  f5fb					      REPEND
     67  f5fc		       88		      dey
     68  f5fd					      REPEND
     69  f5fd
     70  f5fd				   .spider_control_check_up
     71  f5fd		       2a		      rol
     72  f5fe		       30 02		      bmi	.spider_control_sprite
     73  f600
     74  f600					      REPEAT	#SPIDER_VEL_Y
     75  f600		       c8		      iny
     74  f600					      REPEND
     75  f601		       c8		      iny
     76  f602					      REPEND
     77  f602
     78  f602				   .spider_control_sprite
     79  f602							; Control Sprite
     80  f602		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f604
     82  f604				   .spider_control_sprite_x
     83  f604		       e4 9d		      cpx	SpiderPos
     84  f606		       90 04		      bcc	.spider_control_sprite_left
     85  f608		       f0 09		      beq	.spider_control_sprite_y
     86  f60a		       b0 05		      bcs	.spider_control_sprite_right
     87  f60c
     88  f60c				   .spider_control_sprite_left
     89  f60c		       09 80		      ora	#%10000000
     90  f60e		       4c 13 f6 	      jmp	.spider_control_sprite_y
     91  f611
     92  f611				   .spider_control_sprite_right
     93  f611		       09 40		      ora	#%01000000
     94  f613
     95  f613				   .spider_control_sprite_y
     96  f613		       c4 9e		      cpy	SpiderPos+1
     97  f615		       90 04		      bcc	.spider_control_sprite_down
     98  f617		       f0 09		      beq	.spider_control_sprite_store
     99  f619		       b0 05		      bcs	.spider_control_sprite_up
    100  f61b
    101  f61b				   .spider_control_sprite_down
    102  f61b		       09 10		      ora	#%00010000
    103  f61d		       4c 22 f6 	      jmp	.spider_control_sprite_store
    104  f620
    105  f620				   .spider_control_sprite_up
    106  f620		       09 20		      ora	#%00100000
    107  f622
    108  f622				   .spider_control_sprite_store
    109  f622		       c9 00		      cmp	#%00000000
    110  f624		       f0 02		      beq	.spider_control_boundary
    111  f626		       85 9f		      sta	SpiderCtrl
    112  f628
    113  f628				   .spider_control_boundary
    114  f628							; Check Playfield Boundaries
    115  f628
    116  f628				   .spider_control_boundary_left
    117  f628		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f62a		       b0 05		      bcs	.spider_control_boundary_right
    119  f62c		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f62e		       4c 37 f6 	      jmp	.spider_control_boundary_top
    121  f631
    122  f631				   .spider_control_boundary_right
    123  f631		       e0 7e		      cpx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    124  f633		       90 02		      bcc	.spider_control_boundary_top
    125  f635		       a2 7e		      ldx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    126  f637
    127  f637				   .spider_control_boundary_top
    128  f637		       c0 03		      cpy	#SPIDER_VEL_X+1
    129  f639		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f63b		       a0 03		      ldy	#SPIDER_VEL_X+1
    131  f63d		       4c 46 f6 	      jmp	.spider_control_store
    132  f640
    133  f640				   .spider_control_boundary_bottom
    134  f640		       c0 b1		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    135  f642		       90 02		      bcc	.spider_control_store
    136  f644		       a0 b1		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    137  f646
    138  f646				   .spider_control_store
    139  f646							; Store new position
    140  f646		       86 9d		      stx	SpiderPos
    141  f648		       84 9e		      sty	SpiderPos+1
    142  f64a
    143  f64a							; TODO: Optimize this somehow?
    144  f64a				   .spider_control_sprite_assign
    145  f64a							; Skip if no change
    146  f64a		       c9 00		      cmp	#%00000000
    147  f64c		       f0 7f		      beq	.spider_control_return
    148  f64e
    149  f64e		       a2 00		      ldx	#%00000000	; For reflection
    150  f650
    151  f650				   .spider_control_sprite_assign_left
    152  f650		       c9 80		      cmp	#%10000000
    153  f652		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f654					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f654				   .POINTER   SET	SpiderPtr
      2  f654				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f654
      4  f654		       a9 5e		      LDA	#<.ADDRESS
      5  f656		       85 9b		      STA	.POINTER
      6  f658		       a9 f7		      LDA	#>.ADDRESS
      7  f65a		       85 9c		      STA	.POINTER+1
      8  f65c
    155  f65c		       a2 08		      ldx	#%00001000
    156  f65e		       4c cb f6 	      jmp	.spider_control_reflect
    157  f661
    158  f661				   .spider_control_sprite_assign_right
    159  f661		       c9 40		      cmp	#%01000000
    160  f663		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f665					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f665				   .POINTER   SET	SpiderPtr
      2  f665				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f665
      4  f665		       a9 5e		      LDA	#<.ADDRESS
      5  f667		       85 9b		      STA	.POINTER
      6  f669		       a9 f7		      LDA	#>.ADDRESS
      7  f66b		       85 9c		      STA	.POINTER+1
      8  f66d
    162  f66d		       4c cb f6 	      jmp	.spider_control_reflect
    163  f670
    164  f670				   .spider_control_sprite_assign_top
    165  f670		       c9 20		      cmp	#%00100000
    166  f672		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f674					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f674				   .POINTER   SET	SpiderPtr
      2  f674				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f674
      4  f674		       a9 4e		      LDA	#<.ADDRESS
      5  f676		       85 9b		      STA	.POINTER
      6  f678		       a9 f7		      LDA	#>.ADDRESS
      7  f67a		       85 9c		      STA	.POINTER+1
      8  f67c
    168  f67c		       4c cb f6 	      jmp	.spider_control_reflect
    169  f67f
    170  f67f				   .spider_control_sprite_assign_bottom
    171  f67f		       c9 10		      cmp	#%00010000
    172  f681		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f683					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f683				   .POINTER   SET	SpiderPtr
      2  f683				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f683
      4  f683		       a9 6e		      LDA	#<.ADDRESS
      5  f685		       85 9b		      STA	.POINTER
      6  f687		       a9 f7		      LDA	#>.ADDRESS
      7  f689		       85 9c		      STA	.POINTER+1
      8  f68b
    174  f68b		       4c cb f6 	      jmp	.spider_control_reflect
    175  f68e
    176  f68e				   .spider_control_sprite_assign_top_right
    177  f68e		       c9 60		      cmp	#%01100000
    178  f690		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f692					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f692				   .POINTER   SET	SpiderPtr
      2  f692				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f692
      4  f692		       a9 56		      LDA	#<.ADDRESS
      5  f694		       85 9b		      STA	.POINTER
      6  f696		       a9 f7		      LDA	#>.ADDRESS
      7  f698		       85 9c		      STA	.POINTER+1
      8  f69a
    180  f69a		       4c cb f6 	      jmp	.spider_control_reflect
    181  f69d
    182  f69d				   .spider_control_sprite_assign_bottom_right
    183  f69d		       c9 50		      cmp	#%01010000
    184  f69f		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f6a1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f6a1				   .POINTER   SET	SpiderPtr
      2  f6a1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f6a1
      4  f6a1		       a9 66		      LDA	#<.ADDRESS
      5  f6a3		       85 9b		      STA	.POINTER
      6  f6a5		       a9 f7		      LDA	#>.ADDRESS
      7  f6a7		       85 9c		      STA	.POINTER+1
      8  f6a9
    186  f6a9		       4c cb f6 	      jmp	.spider_control_reflect
    187  f6ac
    188  f6ac				   .spider_control_sprite_assign_bottom_left
    189  f6ac		       c9 90		      cmp	#%10010000
    190  f6ae		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f6b0					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f6b0				   .POINTER   SET	SpiderPtr
      2  f6b0				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f6b0
      4  f6b0		       a9 66		      LDA	#<.ADDRESS
      5  f6b2		       85 9b		      STA	.POINTER
      6  f6b4		       a9 f7		      LDA	#>.ADDRESS
      7  f6b6		       85 9c		      STA	.POINTER+1
      8  f6b8
    192  f6b8		       a2 08		      ldx	#%00001000
    193  f6ba		       4c cb f6 	      jmp	.spider_control_reflect
    194  f6bd
    195  f6bd				   .spider_control_sprite_assign_top_left
    196  f6bd		       c9 a0		      cmp	#%10100000
    197  f6bf		       d0 0a		      bne	.spider_control_reflect
      0  f6c1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f6c1				   .POINTER   SET	SpiderPtr
      2  f6c1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f6c1
      4  f6c1		       a9 56		      LDA	#<.ADDRESS
      5  f6c3		       85 9b		      STA	.POINTER
      6  f6c5		       a9 f7		      LDA	#>.ADDRESS
      7  f6c7		       85 9c		      STA	.POINTER+1
      8  f6c9
    199  f6c9		       a2 08		      ldx	#%00001000
    200  f6cb
    201  f6cb				   .spider_control_reflect
    202  f6cb		       86 0b		      stx	REFP0
    203  f6cd
    204  f6cd				   .spider_control_return
    205  f6cd		       60		      rts
    206  f6ce
    207  f6ce				   SpiderCollision
    208  f6ce		       a9 56		      lda	#SPIDER_COLOR
    209  f6d0
    210  f6d0				   .spider_collision_m0
    211  f6d0							; Check stun status
    212  f6d0		       a6 ae		      ldx	BugStunned
    213  f6d2		       e0 00		      cpx	#0
    214  f6d4		       d0 04		      bne	.spider_collision_m1
    215  f6d6
    216  f6d6							; Collision for M0 (V set)
    217  f6d6		       24 00		      bit	CXM0P
    218  f6d8		       70 0d		      bvs	.spider_collision_active
    219  f6da
    220  f6da				   .spider_collision_m1
    221  f6da							; Check stun status
    222  f6da		       a6 af		      ldx	BugStunned+1
    223  f6dc		       e0 00		      cpx	#0
    224  f6de		       d0 09		      bne	.spider_collision_return
    225  f6e0
    226  f6e0							; Collision for M1 (N set)
    227  f6e0		       24 01		      bit	CXM1P
    228  f6e2		       30 03		      bmi	.spider_collision_active
    229  f6e4
    230  f6e4		       4c e9 f6 	      jmp	.spider_collision_return
    231  f6e7
    232  f6e7				   .spider_collision_active
    233  f6e7		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f6e9
    235  f6e9				   .spider_collision_return
    236  f6e9		       85 a0		      sta	SpiderColor
    237  f6eb		       60		      rts
    238  f6ec
    239  f6ec				   SpiderPosition
    240  f6ec
    241  f6ec							; Set Position
    242  f6ec		       a2 00		      ldx	#0	; Object (player0)
    243  f6ee		       a5 9d		      lda	SpiderPos	; X Position
    244  f6f0		       20 00 f0 	      jsr	PosObject
    245  f6f3
    246  f6f3		       60		      rts
    247  f6f4
    248  f6f4							; Scanline Draw
    249  f6f4
    250  f6f4				   SpiderDrawStart
    251  f6f4
    252  f6f4							; Set player 0 to be double size
    253  f6f4							; and missile 0 to be 4 clock size
    254  f6f4		       a5 81		      lda	NuSiz0
    255  f6f6		       09 07		      ora	#%00000111
    256  f6f8		       85 81		      sta	NuSiz0
    257  f6fa		       85 04		      sta	NUSIZ0
    258  f6fc
    259  f6fc							; Set sprite color
    260  f6fc		       a5 a0		      lda	SpiderColor
    261  f6fe		       85 06		      sta	COLUP0
    262  f700
    263  f700							; Determine if we need to use vertical delay (odd line)
    264  f700		       a5 9e		      lda	SpiderPos+1	; Y Position
    265  f702		       4a		      lsr
    266  f703		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f705
    268  f705		       a0 01		      ldy	#1
    269  f707		       4c 0c f7 	      jmp	.spider_draw_start_set_delay
    270  f70a
    271  f70a				   .spider_draw_start_nodelay
    272  f70a		       a0 00		      ldy	#0
    273  f70c
    274  f70c				   .spider_draw_start_set_delay
    275  f70c		       84 25		      sty	VDELP0
    276  f70e
    277  f70e				   .spider_draw_start_pos
    278  f70e							; Calculate starting position
    279  f70e		       18		      clc
    280  f70f		       69 10		      adc	#SPIDER_SIZE
    281  f711		       85 a2		      sta	SpiderDrawPos
    282  f713
    283  f713							; Initialize sprite index
    284  f713		       a9 00		      lda	#0
    285  f715		       85 a1		      sta	SpiderIndex
    286  f717
    287  f717		       60		      rts
    288  f718
    289  f718				   SpiderDraw
    290  f718
    291  f718		       a4 a1		      ldy	SpiderIndex
    292  f71a		       c0 10		      cpy	#(SPIDER_SPRITE_SIZE*2)
    293  f71c		       f0 1f		      beq	.spider_draw_blank	; At end of sprite
    294  f71e		       b0 28		      bcs	.spider_draw_return	; Completed drawing sprite
    295  f720		       c0 00		      cpy	#0
    296  f722		       d0 06		      bne	.spider_draw_line
    297  f724
    298  f724							; Use half scanline
    299  f724		       a5 84		      lda	Temp+1
    300  f726
    301  f726		       e5 a2		      sbc	SpiderDrawPos
    302  f728		       10 1e		      bpl	.spider_draw_return	; Not yet to draw sprite
    303  f72a
    304  f72a				   .spider_draw_line
    305  f72a		       98		      tya
    306  f72b		       4a		      lsr
    307  f72c		       b0 09		      bcs	.spider_draw_skip
    308  f72e		       a8		      tay
    309  f72f
    310  f72f		       b1 9b		      lda	(SpiderPtr),y
    311  f731		       85 1b		      sta	GRP0
    312  f733
    313  f733							; Using this for now until we have another sprite
    314  f733		       a9 00		      lda	#0
    315  f735		       85 1c		      sta	GRP1
    316  f737
    317  f737				   .spider_draw_skip
    318  f737		       a4 a1		      ldy	SpiderIndex
    319  f739		       c8		      iny
    320  f73a		       84 a1		      sty	SpiderIndex
    321  f73c		       60		      rts		; Early return
    322  f73d
    323  f73d				   .spider_draw_blank
    324  f73d		       a9 00		      lda	#0
    325  f73f		       85 1b		      sta	GRP0
    326  f741
    327  f741							; Using this for now until we have another sprite
    328  f741		       a9 00		      lda	#0
    329  f743		       85 1c		      sta	GRP1
    330  f745
    331  f745							; Push index to be one above
    332  f745		       c8		      iny
    333  f746		       84 a1		      sty	SpiderIndex
    334  f748
    335  f748				   .spider_draw_return
    336  f748		       60		      rts
    337  f749
    338  f749				   SpiderClean
    339  f749
    340  f749							; Clear out Player0 sprite
    341  f749		       a9 00		      lda	#0
    342  f74b		       85 1b		      sta	GRP0
    343  f74d
    344  f74d		       60		      rts
    345  f74e
    346  f74e							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f74e					      include	"objects/spider_sprite.asm"
      1  f74e				   SpiderSprite
      2  f74e
      3  f74e		       99		      .BYTE.b	%10011001
      4  f74f		       bd		      .BYTE.b	%10111101
      5  f750		       99		      .BYTE.b	%10011001
      6  f751		       7e		      .BYTE.b	%01111110
      7  f752		       3c		      .BYTE.b	%00111100
      8  f753		       7e		      .BYTE.b	%01111110
      9  f754		       bd		      .BYTE.b	%10111101
     10  f755		       99		      .BYTE.b	%10011001
     11  f756
     12  f756		       0b		      .BYTE.b	%00001011
     13  f757		       13		      .BYTE.b	%00010011
     14  f758		       1c		      .BYTE.b	%00011100
     15  f759		       2d		      .BYTE.b	%00101101
     16  f75a		       f6		      .BYTE.b	%11110110
     17  f75b		       b8		      .BYTE.b	%10111000
     18  f75c		       10		      .BYTE.b	%00010000
     19  f75d		       30		      .BYTE.b	%00110000
     20  f75e
     21  f75e		       c7		      .BYTE.b	%11000111
     22  f75f		       28		      .BYTE.b	%00101000
     23  f760		       7a		      .BYTE.b	%01111010
     24  f761		       ff		      .BYTE.b	%11111111
     25  f762		       ff		      .BYTE.b	%11111111
     26  f763		       7a		      .BYTE.b	%01111010
     27  f764		       28		      .BYTE.b	%00101000
     28  f765		       c7		      .BYTE.b	%11000111
     29  f766
     30  f766		       30		      .BYTE.b	%00110000
     31  f767		       10		      .BYTE.b	%00010000
     32  f768		       b8		      .BYTE.b	%10111000
     33  f769		       f6		      .BYTE.b	%11110110
     34  f76a		       2d		      .BYTE.b	%00101101
     35  f76b		       1c		      .BYTE.b	%00011100
     36  f76c		       13		      .BYTE.b	%00010011
     37  f76d		       0b		      .BYTE.b	%00001011
     38  f76e
     39  f76e		       99		      .BYTE.b	%10011001
     40  f76f		       bd		      .BYTE.b	%10111101
     41  f770		       7e		      .BYTE.b	%01111110
     42  f771		       3c		      .BYTE.b	%00111100
     43  f772		       7e		      .BYTE.b	%01111110
     44  f773		       99		      .BYTE.b	%10011001
     45  f774		       bd		      .BYTE.b	%10111101
     46  f775		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f776					      include	"objects/line.asm"
      1  f776							;================
      2  f776							; Line (ball)
      3  f776							;================
      4  f776
      5  f776							; Constants
      6  f776
      7  f776		       00 04	   LINE_SIZE  =	4
      8  f776		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f776		       00 04	   LINE_VEL_X =	4
     10  f776		       00 04	   LINE_VEL_Y =	4
     11  f776
     12  f776		       00 08	   LINE_AUDIO_C =	8
     13  f776		       00 01	   LINE_AUDIO_F =	1
     14  f776		       00 04	   LINE_AUDIO_V =	4
     15  f776
     16  f776		       00 08	   LINE_SAMPLE_LEN =	8
     17  f776		       00 03	   LINE_SAMPLE_C =	3
     18  f776		       00 01	   LINE_SAMPLE_F =	1
     19  f776		       00 04	   LINE_SAMPLE_V =	4
     20  f776
     21  f776							; Initialization
     22  f776
     23  f776				   LineInit
     24  f776
     25  f776							; Initial Line Control
     26  f776		       a9 00		      lda	#0
     27  f778		       85 a5		      sta	LineEnabled
     28  f77a		       85 a6		      sta	LinePos+0
     29  f77c		       85 a7		      sta	LinePos+1
     30  f77e		       85 a8		      sta	LineVelocity+0
     31  f780		       85 a9		      sta	LineVelocity+1
     32  f782		       85 aa		      sta	LineStartPos+0
     33  f784		       85 ab		      sta	LineStartPos+1
     34  f786		       85 ac		      sta	LineDrawPos+0
     35  f788		       85 ad		      sta	LineDrawPos+1
     36  f78a
     37  f78a		       60		      rts
     38  f78b
     39  f78b							; Frame Update
     40  f78b
     41  f78b				   LineUpdate
     42  f78b		       20 95 f7 	      jsr	LineControl
     43  f78e		       20 47 f8 	      jsr	LineObject
     44  f791		       20 8e f8 	      jsr	LineCollision
     45  f794		       60		      rts
     46  f795
     47  f795				   LineControl
     48  f795
     49  f795							; Check if Fire Button on controller 1 is pressed
     50  f795		       a5 0c		      lda	INPT4
     51  f797		       30 0a		      bmi	.line_control_skip
     52  f799
     53  f799		       24 a5		      bit	LineEnabled
     54  f79b		       30 06		      bmi	.line_control_skip
     55  f79d
     56  f79d		       a5 9f		      lda	SpiderCtrl
     57  f79f		       c9 00		      cmp	#0
     58  f7a1		       d0 03		      bne	.line_control_fire
     59  f7a3
     60  f7a3				   .line_control_skip
     61  f7a3		       4c 46 f8 	      jmp	.line_control_return
     62  f7a6
     63  f7a6				   .line_control_fire
     64  f7a6		       20 e9 f8 	      jsr	LineEnable
     65  f7a9
     66  f7a9				   .line_control_x
     67  f7a9		       a5 9f		      lda	SpiderCtrl
     68  f7ab		       29 c0		      and	#%11000000
     69  f7ad		       f0 0e		      beq	.line_control_x_none
     70  f7af				   .line_control_x_left
     71  f7af		       c9 80		      cmp	#%10000000
     72  f7b1		       d0 05		      bne	.line_control_x_right
     73  f7b3
     74  f7b3		       a9 fc		      lda	#-LINE_VEL_X
     75  f7b5		       4c bf f7 	      jmp	.line_control_x_store
     76  f7b8				   .line_control_x_right
     77  f7b8		       a9 04		      lda	#LINE_VEL_X
     78  f7ba		       4c bf f7 	      jmp	.line_control_x_store
     79  f7bd				   .line_control_x_none
     80  f7bd		       a9 00		      lda	#0
     81  f7bf				   .line_control_x_store
     82  f7bf		       85 a8		      sta	LineVelocity
     83  f7c1
     84  f7c1				   .line_control_y
     85  f7c1		       a5 9f		      lda	SpiderCtrl
     86  f7c3		       29 30		      and	#%00110000
     87  f7c5		       f0 0e		      beq	.line_control_y_none
     88  f7c7				   .line_control_y_up
     89  f7c7		       c9 20		      cmp	#%00100000
     90  f7c9		       d0 05		      bne	.line_control_y_down
     91  f7cb
     92  f7cb		       a9 04		      lda	#LINE_VEL_Y
     93  f7cd		       4c d7 f7 	      jmp	.line_control_y_store
     94  f7d0				   .line_control_y_down
     95  f7d0		       a9 fc		      lda	#-LINE_VEL_Y
     96  f7d2		       4c d7 f7 	      jmp	.line_control_y_store
     97  f7d5				   .line_control_y_none
     98  f7d5		       a9 00		      lda	#0
     99  f7d7				   .line_control_y_store
    100  f7d7		       85 a9		      sta	LineVelocity+1
    101  f7d9
    102  f7d9				   .line_control_position
    103  f7d9
    104  f7d9		       a2 00		      ldx	#0	; offsetX
    105  f7db		       a0 00		      ldy	#0	; offsetY
    106  f7dd
    107  f7dd		       a5 9f		      lda	SpiderCtrl
    108  f7df		       29 f0		      and	#%11110000
    109  f7e1
    110  f7e1				   .line_control_position_left
    111  f7e1		       c9 80		      cmp	#%10000000
    112  f7e3		       d0 07		      bne	.line_control_position_right
    113  f7e5
    114  f7e5		       a2 04		      ldx	#LINE_SIZE
    115  f7e7		       a0 10		      ldy	#SPIDER_SIZE
    116  f7e9		       4c 2e f8 	      jmp	.line_control_position_store
    117  f7ec
    118  f7ec				   .line_control_position_right
    119  f7ec		       c9 40		      cmp	#%01000000
    120  f7ee		       d0 07		      bne	.line_control_position_top
    121  f7f0
    122  f7f0		       a2 20		      ldx	#SPIDER_SIZE*2
    123  f7f2		       a0 10		      ldy	#SPIDER_SIZE
    124  f7f4		       4c 2e f8 	      jmp	.line_control_position_store
    125  f7f7
    126  f7f7				   .line_control_position_top
    127  f7f7		       c9 20		      cmp	#%00100000
    128  f7f9		       d0 07		      bne	.line_control_position_bottom
    129  f7fb
    130  f7fb		       a2 10		      ldx	#SPIDER_SIZE
    131  f7fd		       a0 20		      ldy	#SPIDER_SIZE*2
    132  f7ff		       4c 2e f8 	      jmp	.line_control_position_store
    133  f802
    134  f802				   .line_control_position_bottom
    135  f802		       c9 10		      cmp	#%00010000
    136  f804		       d0 05		      bne	.line_control_position_top_right
    137  f806
    138  f806		       a2 10		      ldx	#SPIDER_SIZE
    139  f808		       4c 2e f8 	      jmp	.line_control_position_store
    140  f80b
    141  f80b				   .line_control_position_top_right
    142  f80b		       c9 60		      cmp	#%01100000
    143  f80d		       d0 07		      bne	.line_control_position_bottom_right
    144  f80f
    145  f80f		       a2 20		      ldx	#SPIDER_SIZE*2
    146  f811		       a0 20		      ldy	#SPIDER_SIZE*2
    147  f813		       4c 2e f8 	      jmp	.line_control_position_store
    148  f816
    149  f816				   .line_control_position_bottom_right
    150  f816		       c9 50		      cmp	#%01010000
    151  f818		       d0 05		      bne	.line_control_position_bottom_left
    152  f81a
    153  f81a		       a2 20		      ldx	#SPIDER_SIZE*2
    154  f81c		       4c 2e f8 	      jmp	.line_control_position_store
    155  f81f
    156  f81f				   .line_control_position_bottom_left
    157  f81f		       c9 90		      cmp	#%10010000
    158  f821		       d0 03		      bne	.line_control_position_top_left
    159  f823
    160  f823							; No Offset
    161  f823		       4c 2e f8 	      jmp	.line_control_position_store
    162  f826
    163  f826				   .line_control_position_top_left
    164  f826		       c9 a0		      cmp	#%10100000
    165  f828		       d0 04		      bne	.line_control_position_store
    166  f82a
    167  f82a		       a2 04		      ldx	#LINE_SIZE
    168  f82c		       a0 20		      ldy	#SPIDER_SIZE*2
    169  f82e
    170  f82e				   .line_control_position_store
    171  f82e
    172  f82e							; Apply offsetX to playerX
    173  f82e		       a5 9d		      lda	SpiderPos
    174  f830		       86 83		      stx	Temp
    175  f832		       18		      clc
    176  f833		       65 83		      adc	Temp
    177  f835		       aa		      tax
    178  f836
    179  f836							; Apply offsetY to playerY
    180  f836		       a5 9e		      lda	SpiderPos+1
    181  f838		       84 83		      sty	Temp
    182  f83a		       18		      clc
    183  f83b		       65 83		      adc	Temp
    184  f83d		       a8		      tay
    185  f83e
    186  f83e		       86 a6		      stx	LinePos
    187  f840		       84 a7		      sty	LinePos+1
    188  f842		       86 aa		      stx	LineStartPos
    189  f844		       84 ab		      sty	LineStartPos+1
    190  f846
    191  f846				   .line_control_return
    192  f846		       60		      rts
    193  f847
    194  f847				   LineObject
    195  f847
    196  f847							; Check if line is enabled
    197  f847		       24 a5		      bit	LineEnabled
    198  f849		       10 42		      bpl	.line_object_return
    199  f84b
    200  f84b							; Load position
    201  f84b		       a6 a6		      ldx	LinePos
    202  f84d		       a4 a7		      ldy	LinePos+1
    203  f84f
    204  f84f				   .line_object_distance
    205  f84f
    206  f84f							; Check distance from player with absolute value differences
    207  f84f
    208  f84f				   .line_object_distance_x
    209  f84f		       8a		      txa
    210  f850		       18		      clc
    211  f851		       e5 aa		      sbc	LineStartPos
    212  f853		       b0 04		      bcs	.line_object_distance_x_check
    213  f855		       49 ff		      eor	#$FF	; C flag is clear here
    214  f857		       69 01		      adc	#$01	; form two's complement
    215  f859				   .line_object_distance_x_check		; Jumps to if positive
    216  f859		       c9 40		      cmp	#LINE_DISTANCE
    217  f85b		       b0 2d		      bcs	.line_object_disable
    218  f85d
    219  f85d				   .line_object_distance_y
    220  f85d		       98		      tya
    221  f85e		       18		      clc
    222  f85f		       e5 ab		      sbc	LineStartPos+1
    223  f861		       b0 04		      bcs	.line_object_distance_y_check
    224  f863		       49 ff		      eor	#$FF	; C flag is clear here
    225  f865		       69 01		      adc	#$01	; form two's complement
    226  f867				   .line_object_distance_y_check		; Jumps to if positive
    227  f867		       c9 40		      cmp	#LINE_DISTANCE
    228  f869		       b0 1f		      bcs	.line_object_disable
    229  f86b
    230  f86b				   .line_object_boundary
    231  f86b				   .line_object_boundary_left
    232  f86b		       e0 04		      cpx	#LINE_VEL_X
    233  f86d		       90 1b		      bcc	.line_object_disable
    234  f86f				   .line_object_boundary_right
    235  f86f		       e0 9c		      cpx	#160-LINE_VEL_X
    236  f871		       b0 17		      bcs	.line_object_disable
    237  f873				   .line_object_boundary_bottom
    238  f873		       c0 04		      cpy	#LINE_VEL_Y
    239  f875		       90 13		      bcc	.line_object_disable
    240  f877				   .line_object_boundary_top
    241  f877		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    242  f879		       b0 0f		      bcs	.line_object_disable
    243  f87b
    244  f87b				   .line_object_velocity
    245  f87b
    246  f87b							; Apply Velocity
    247  f87b		       8a		      txa
    248  f87c		       18		      clc
    249  f87d		       65 a8		      adc	LineVelocity
    250  f87f		       85 a6		      sta	LinePos
    251  f881
    252  f881		       98		      tya
    253  f882		       18		      clc
    254  f883		       65 a9		      adc	LineVelocity+1
    255  f885		       85 a7		      sta	LinePos+1
    256  f887
    257  f887		       4c 8d f8 	      jmp	.line_object_return
    258  f88a
    259  f88a				   .line_object_disable
    260  f88a		       20 f7 f8 	      jsr	LineDisable
    261  f88d
    262  f88d				   .line_object_return
    263  f88d		       60		      rts
    264  f88e
    265  f88e				   LineCollision
    266  f88e
    267  f88e		       a9 78		      lda	#BUG_STUN_LENGTH
    268  f890
    269  f890				   .line_collision_m0
    270  f890		       24 04		      bit	CXM0FB
    271  f892		       50 08		      bvc	.line_collision_m1
    272  f894
    273  f894							; Set stun timer
    274  f894		       85 ae		      sta	BugStunned+0
    275  f896
    276  f896							; Disable line
    277  f896		       20 f7 f8 	      jsr	LineDisable
    278  f899		       4c a5 f8 	      jmp	.line_collision_sample
    279  f89c
    280  f89c				   .line_collision_m1
    281  f89c		       24 05		      bit	CXM1FB
    282  f89e		       50 08		      bvc	.line_collision_return
    283  f8a0
    284  f8a0							; Set stun timer
    285  f8a0		       85 af		      sta	BugStunned+1
    286  f8a2
    287  f8a2							; Disable line
    288  f8a2		       20 f7 f8 	      jsr	LineDisable
    289  f8a5
    290  f8a5				   .line_collision_sample
    291  f8a5		       20 1b f9 	      jsr	LineSample
    292  f8a8
    293  f8a8				   .line_collision_return
    294  f8a8		       60		      rts
    295  f8a9
    296  f8a9				   LinePosition
    297  f8a9
    298  f8a9							; Set Line Position
    299  f8a9		       a2 04		      ldx	#4	; Object (ball)
    300  f8ab		       a5 a6		      lda	LinePos	; X Position
    301  f8ad		       20 00 f0 	      jsr	PosObject
    302  f8b0
    303  f8b0		       60		      rts
    304  f8b1
    305  f8b1							; Scanline Draw
    306  f8b1
    307  f8b1				   LineDrawStart
    308  f8b1
    309  f8b1							; Set ball size to be 4 clocks (4/5 bits)
    310  f8b1		       a5 80		      lda	CtrlPf
    311  f8b3		       29 cf		      and	#%11001111
    312  f8b5		       09 20		      ora	#%00100000
    313  f8b7		       85 80		      sta	CtrlPf
    314  f8b9		       85 0a		      sta	CTRLPF
    315  f8bb
    316  f8bb							; Determine if we need to use vertical delay (oven line)
    317  f8bb		       a5 a7		      lda	LinePos+1
    318  f8bd		       4a		      lsr
    319  f8be		       90 05		      bcc	.line_draw_start_nodelay
    320  f8c0
    321  f8c0		       a0 01		      ldy	#1
    322  f8c2		       4c c7 f8 	      jmp	.line_draw_start_set_delay
    323  f8c5
    324  f8c5				   .line_draw_start_nodelay
    325  f8c5		       a0 00		      ldy	#0
    326  f8c7
    327  f8c7				   .line_draw_start_set_delay
    328  f8c7		       84 27		      sty	VDELBL
    329  f8c9
    330  f8c9				   .line_draw_start_pos
    331  f8c9							; Calculate starting position
    332  f8c9		       18		      clc
    333  f8ca		       85 ac		      sta	LineDrawPos+0
    334  f8cc		       69 02		      adc	#LINE_SIZE/2
    335  f8ce		       85 ad		      sta	LineDrawPos+1
    336  f8d0
    337  f8d0		       60		      rts
    338  f8d1
    339  f8d1				   LineDraw
    340  f8d1
    341  f8d1		       a0 00		      ldy	#%00000000
    342  f8d3
    343  f8d3							; Check if visible
    344  f8d3		       24 a5		      bit	LineEnabled
    345  f8d5		       10 0a		      bpl	.line_draw_off
    346  f8d7
    347  f8d7							; Load half scanline
    348  f8d7							;    lda Temp+1
    349  f8d7
    350  f8d7							; Top
    351  f8d7		       c5 ad		      cmp	LineDrawPos+1
    352  f8d9		       b0 06		      bcs	.line_draw_off
    353  f8db
    354  f8db							; Bottom
    355  f8db		       c5 ac		      cmp	LineDrawPos+0
    356  f8dd		       90 02		      bcc	.line_draw_off
    357  f8df
    358  f8df				   .line_draw_on
    359  f8df		       a0 02		      ldy	#%00000010
    360  f8e1
    361  f8e1				   .line_draw_off
    362  f8e1		       84 1f		      sty	ENABL
    363  f8e3
    364  f8e3		       60		      rts
    365  f8e4
    366  f8e4				   LineClean
    367  f8e4
    368  f8e4							; Clear out Line
    369  f8e4		       a9 00		      lda	#0
    370  f8e6		       85 1f		      sta	ENABL
    371  f8e8
    372  f8e8		       60		      rts
    373  f8e9
    374  f8e9				   LineEnable
    375  f8e9		       a9 80		      lda	#%10000000
    376  f8eb		       85 a5		      sta	LineEnabled
    377  f8ed
    378  f8ed		       a5 90		      lda	SampleStep
    379  f8ef		       c9 00		      cmp	#0
    380  f8f1		       d0 03		      bne	.line_enable_return
    381  f8f3
    382  f8f3		       20 05 f9 	      jsr	LineAudioPlay
    383  f8f6
    384  f8f6				   .line_enable_return
    385  f8f6		       60		      rts
    386  f8f7
    387  f8f7				   LineDisable
    388  f8f7		       a9 00		      lda	#0
    389  f8f9		       85 a5		      sta	LineEnabled
    390  f8fb
    391  f8fb		       a5 90		      lda	SampleStep
    392  f8fd		       c9 00		      cmp	#0
    393  f8ff		       d0 03		      bne	.line_disable_return
    394  f901
    395  f901		       20 12 f9 	      jsr	LineAudioMute
    396  f904
    397  f904				   .line_disable_return
    398  f904		       60		      rts
    399  f905
    400  f905				   LineAudioPlay
    401  f905		       a9 08		      lda	#LINE_AUDIO_C
    402  f907		       85 16		      sta	AUDC1
    403  f909		       a9 01		      lda	#LINE_AUDIO_F
    404  f90b		       85 18		      sta	AUDF1
    405  f90d		       a9 04		      lda	#LINE_AUDIO_V
    406  f90f		       85 1a		      sta	AUDV1
    407  f911		       60		      rts
    408  f912
    409  f912				   LineAudioMute
    410  f912		       a9 00		      lda	#0
    411  f914		       85 1a		      sta	AUDV1
    412  f916		       85 18		      sta	AUDF1
    413  f918		       85 16		      sta	AUDC1
    414  f91a		       60		      rts
    415  f91b
    416  f91b				   LineSample
    417  f91b		       a9 08		      lda	#LINE_SAMPLE_LEN
    418  f91d		       85 90		      sta	SampleStep
    419  f91f		       a9 03		      lda	#LINE_SAMPLE_C
    420  f921		       85 16		      sta	AUDC1
    421  f923		       a9 01		      lda	#LINE_SAMPLE_F
    422  f925		       85 18		      sta	AUDF1
    423  f927		       a9 04		      lda	#LINE_SAMPLE_V
    424  f929		       85 1a		      sta	AUDV1
    425  f92b		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f92c					      include	"objects/bug.asm"
      1  f92c							;======================
      2  f92c							; Bugs (missiles 0 & 1)
      3  f92c							;======================
      4  f92c
      5  f92c							; Constants
      6  f92c
      7  f92c		       00 08	   BUG_SIZE   =	8
      8  f92c		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f92c		       00 02	   BUG_SPEED  =	2
     10  f92c		       00 78	   BUG_STUN_LENGTH =	120
     11  f92c		       00 04	   BUG_POINTS =	4
     12  f92c
     13  f92c		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f92c		       00 38	   BUG_COLOR_STUN =	#$38
     15  f92c
     16  f92c		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f92c		       00 03	   BUG_SAMPLE_C =	3
     18  f92c		       00 14	   BUG_SAMPLE_F =	20
     19  f92c		       00 04	   BUG_SAMPLE_V =	4
     20  f92c
     21  f92c							; Initialization
     22  f92c
     23  f92c				   BugInit
     24  f92c
     25  f92c							; Initialize Bugs
     26  f92c		       a2 01		      ldx	#1
     27  f92e
     28  f92e				   .bug_init_loop
     29  f92e		       20 35 f9 	      jsr	BugReset
     30  f931
     31  f931		       ca		      dex
     32  f932		       10 fa		      bpl	.bug_init_loop
     33  f934
     34  f934		       60		      rts
     35  f935
     36  f935				   BugReset		; x = bug (0 or 1)
     37  f935
     38  f935							; Set random position
     39  f935		       20 13 f0 	      jsr	Random
     40  f938
     41  f938		       a5 85		      lda	Rand8
     42  f93a		       29 7f		      and	#$7f
     43  f93c		       95 b0		      sta	BugPosX,x
     44  f93e
     45  f93e		       a5 86		      lda	Rand16
     46  f940		       29 7f		      and	#$7f
     47  f942		       95 b2		      sta	BugPosY,x
     48  f944
     49  f944							; Set as active
     50  f944		       a9 00		      lda	#0
     51  f946		       95 ae		      sta	BugStunned,x
     52  f948
     53  f948							; Reset Color
     54  f948		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     55  f94a		       95 b4		      sta	BugColor,x
     56  f94c
     57  f94c		       60		      rts
     58  f94d
     59  f94d							; Frame Update
     60  f94d
     61  f94d				   BugUpdate
     62  f94d
     63  f94d		       a2 01		      ldx	#1
     64  f94f				   .bug_update_loop
     65  f94f		       86 83		      stx	Temp+0
     66  f951
     67  f951		       b5 ae		      lda	BugStunned,x
     68  f953		       c9 00		      cmp	#0
     69  f955		       f0 08		      beq	.bug_update_active
     70  f957
     71  f957				   .bug_update_stunned
     72  f957		       d6 ae		      dec	BugStunned,x
     73  f959		       20 cf f9 	      jsr	BugStunCollision
     74  f95c		       4c 65 f9 	      jmp	.bug_update_next
     75  f95f
     76  f95f				   .bug_update_active
     77  f95f		       20 6b f9 	      jsr	BugMovement
     78  f962		       20 be f9 	      jsr	BugCollision
     79  f965
     80  f965				   .bug_update_next
     81  f965		       a6 83		      ldx	Temp+0
     82  f967		       ca		      dex
     83  f968		       10 e5		      bpl	.bug_update_loop
     84  f96a
     85  f96a		       60		      rts
     86  f96b
     87  f96b				   BugMovement
     88  f96b
     89  f96b				   .bug_movement_random
     90  f96b		       20 13 f0 	      jsr	Random
     91  f96e		       29 03		      and	#%00000011
     92  f970		       85 84		      sta	Temp+1
     93  f972
     94  f972				   .bug_movement_load
     95  f972							; Load x and y values
     96  f972		       a6 83		      ldx	Temp+0
     97  f974		       b5 b0		      lda	BugPosX,x
     98  f976		       b4 b2		      ldy	BugPosY,x
     99  f978		       aa		      tax
    100  f979
    101  f979				   .bug_movement_x
    102  f979							; Alter X Position
    103  f979		       a5 84		      lda	Temp+1
    104  f97b		       29 01		      and	#%00000001
    105  f97d
    106  f97d				   .bug_movement_x_left
    107  f97d		       c9 01		      cmp	#1
    108  f97f		       d0 05		      bne	.bug_movement_x_right
    109  f981					      REPEAT	#BUG_SPEED
    110  f981		       ca		      dex
    109  f981					      REPEND
    110  f982		       ca		      dex
    111  f983					      REPEND
    112  f983		       4c 88 f9 	      jmp	.bug_movement_y
    113  f986
    114  f986				   .bug_movement_x_right
    115  f986					      REPEAT	#BUG_SPEED
    116  f986		       e8		      inx
    115  f986					      REPEND
    116  f987		       e8		      inx
    117  f988					      REPEND
    118  f988
    119  f988				   .bug_movement_y
    120  f988							; Alter Y Position
    121  f988		       a5 84		      lda	Temp+1
    122  f98a		       29 02		      and	#%00000010
    123  f98c		       4a		      lsr
    124  f98d
    125  f98d				   .bug_movement_y_up
    126  f98d		       c9 01		      cmp	#1
    127  f98f		       d0 05		      bne	.bug_movement_y_down
    128  f991					      REPEAT	#BUG_SPEED
    129  f991		       c8		      iny
    128  f991					      REPEND
    129  f992		       c8		      iny
    130  f993					      REPEND
    131  f993		       4c 98 f9 	      jmp	.bug_movement_boundary
    132  f996
    133  f996				   .bug_movement_y_down
    134  f996					      REPEAT	#BUG_SPEED
    135  f996		       88		      dey
    134  f996					      REPEND
    135  f997		       88		      dey
    136  f998					      REPEND
    137  f998
    138  f998				   .bug_movement_boundary
    139  f998
    140  f998				   .bug_movement_boundary_left
    141  f998		       e0 08		      cpx	#BUG_BOUNDARY
    142  f99a		       b0 05		      bcs	.bug_movement_boundary_right
    143  f99c		       a2 08		      ldx	#BUG_BOUNDARY
    144  f99e		       4c a7 f9 	      jmp	.bug_movement_boundary_top
    145  f9a1
    146  f9a1				   .bug_movement_boundary_right
    147  f9a1		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    148  f9a3		       90 02		      bcc	.bug_movement_boundary_top
    149  f9a5		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    150  f9a7
    151  f9a7				   .bug_movement_boundary_top
    152  f9a7		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    153  f9a9		       b0 05		      bcs	.bug_movement_boundary_bottom
    154  f9ab		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    155  f9ad		       4c b6 f9 	      jmp	.bug_movement_store
    156  f9b0
    157  f9b0				   .bug_movement_boundary_bottom
    158  f9b0		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    159  f9b2		       90 02		      bcc	.bug_movement_store
    160  f9b4		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    161  f9b6
    162  f9b6				   .bug_movement_store
    163  f9b6		       8a		      txa
    164  f9b7		       a6 83		      ldx	Temp+0
    165  f9b9		       95 b0		      sta	BugPosX,x
    166  f9bb		       94 b2		      sty	BugPosY,x
    167  f9bd
    168  f9bd				   .bug_movement_return
    169  f9bd		       60		      rts
    170  f9be
    171  f9be				   BugCollision
    172  f9be
    173  f9be		       e0 01		      cpx	#1
    174  f9c0		       f0 05		      beq	.bug_collision_m1
    175  f9c2
    176  f9c2				   .bug_collision_m0
    177  f9c2							; Collision for M0 (V set)
    178  f9c2		       24 00		      bit	CXM0P
    179  f9c4		       70 06		      bvs	.bug_collision_active
    180  f9c6		       60		      rts
    181  f9c7
    182  f9c7				   .bug_collision_m1
    183  f9c7							; Collision for M1 (N set)
    184  f9c7		       24 01		      bit	CXM1P
    185  f9c9		       30 01		      bmi	.bug_collision_active
    186  f9cb		       60		      rts
    187  f9cc
    188  f9cc				   .bug_collision_active
    189  f9cc		       c6 91		      dec	ScoreValue
    190  f9ce		       60		      rts
    191  f9cf
    192  f9cf				   BugStunCollision
    193  f9cf
    194  f9cf		       e0 01		      cpx	#1
    195  f9d1		       f0 05		      beq	.bug_stun_collision_m1
    196  f9d3
    197  f9d3				   .bug_stun_collision_m0
    198  f9d3							; Collision for M0 (V set)
    199  f9d3		       24 00		      bit	CXM0P
    200  f9d5		       70 06		      bvs	.bug_stun_collision_active
    201  f9d7		       60		      rts
    202  f9d8
    203  f9d8				   .bug_stun_collision_m1
    204  f9d8							; Collision for M1 (N set)
    205  f9d8		       24 01		      bit	CXM1P
    206  f9da		       30 01		      bmi	.bug_stun_collision_active
    207  f9dc		       60		      rts
    208  f9dd
    209  f9dd				   .bug_stun_collision_active
    210  f9dd							; Add points to score
    211  f9dd		       18		      clc
    212  f9de		       a5 92		      lda	ScoreValue+1
    213  f9e0		       69 04		      adc	#BUG_POINTS
    214  f9e2		       85 92		      sta	ScoreValue+1
    215  f9e4
    216  f9e4							; Reset bug
    217  f9e4		       20 35 f9 	      jsr	BugReset
    218  f9e7
    219  f9e7							; Play sample
    220  f9e7		       20 3b fa 	      jsr	BugSample
    221  f9ea
    222  f9ea		       60		      rts
    223  f9eb
    224  f9eb							; Horizontal Positioning
    225  f9eb
    226  f9eb				   BugPosition
    227  f9eb
    228  f9eb		       a2 02		      ldx	#2
    229  f9ed		       a5 b0		      lda	BugPosX+0
    230  f9ef		       20 00 f0 	      jsr	PosObject
    231  f9f2
    232  f9f2		       a2 03		      ldx	#3
    233  f9f4		       a5 b1		      lda	BugPosX+1
    234  f9f6		       20 00 f0 	      jsr	PosObject
    235  f9f9
    236  f9f9		       60		      rts
    237  f9fa
    238  f9fa							; Scanline Draw
    239  f9fa
    240  f9fa				   BugDrawStart
    241  f9fa
    242  f9fa		       a0 01		      ldy	#1
    243  f9fc				   .bug_draw_start_loop
    244  f9fc
    245  f9fc							; Set missile 0 & 1 to be 4 clock size
    246  f9fc		       b9 81 00 	      lda	NuSiz0,y
    247  f9ff		       09 30		      ora	#%00110000
    248  fa01		       99 81 00 	      sta	NuSiz0,y
    249  fa04		       99 04 00 	      sta	NUSIZ0,y
    250  fa07
    251  fa07							; Setup half scanline positions
    252  fa07		       b9 b2 00 	      lda	BugPosY,y
    253  fa0a		       4a		      lsr
    254  fa0b		       99 b6 00 	      sta	BugDrawPosBottom,y
    255  fa0e
    256  fa0e		       69 04		      adc	#BUG_SIZE/2
    257  fa10		       99 b8 00 	      sta	BugDrawPosTop,y
    258  fa13
    259  fa13		       88		      dey
    260  fa14		       10 e6		      bpl	.bug_draw_start_loop
    261  fa16
    262  fa16		       60		      rts
    263  fa17
    264  fa17				   BugDraw
    265  fa17
    266  fa17							; Load half scanline
    267  fa17							;    lda Temp+1
    268  fa17
    269  fa17				   .bug_draw_0
    270  fa17		       a0 00		      ldy	#%00000000
    271  fa19
    272  fa19							; Check top and bottom y pos
    273  fa19		       c5 b8		      cmp	BugDrawPosTop+0
    274  fa1b		       b0 06		      bcs	.bug_draw_0_off
    275  fa1d
    276  fa1d		       c5 b6		      cmp	BugDrawPosBottom+0
    277  fa1f		       90 02		      bcc	.bug_draw_0_off
    278  fa21
    279  fa21				   .bug_draw_0_on
    280  fa21		       a0 02		      ldy	#%00000010
    281  fa23
    282  fa23				   .bug_draw_0_off
    283  fa23		       84 1d		      sty	ENAM0
    284  fa25
    285  fa25				   .bug_draw_1
    286  fa25		       a0 00		      ldy	#%00000000
    287  fa27
    288  fa27							; Check top and bottom y pos
    289  fa27		       c5 b9		      cmp	BugDrawPosTop+1
    290  fa29		       b0 06		      bcs	.bug_draw_1_off
    291  fa2b
    292  fa2b		       c5 b7		      cmp	BugDrawPosBottom+1
    293  fa2d		       90 02		      bcc	.bug_draw_1_off
    294  fa2f
    295  fa2f				   .bug_draw_1_on
    296  fa2f		       a0 02		      ldy	#%00000010
    297  fa31
    298  fa31				   .bug_draw_1_off
    299  fa31		       84 1e		      sty	ENAM1
    300  fa33
    301  fa33				   .bug_draw_return
    302  fa33		       60		      rts
    303  fa34
    304  fa34				   BugClean
    305  fa34		       a9 00		      lda	#0
    306  fa36		       85 1d		      sta	ENAM0
    307  fa38		       85 1e		      sta	ENAM1
    308  fa3a		       60		      rts
    309  fa3b
    310  fa3b				   BugSample
    311  fa3b		       a9 1e		      lda	#BUG_SAMPLE_LEN
    312  fa3d		       85 90		      sta	SampleStep
    313  fa3f		       a9 03		      lda	#BUG_SAMPLE_C
    314  fa41		       85 16		      sta	AUDC1
    315  fa43		       a9 14		      lda	#BUG_SAMPLE_F
    316  fa45		       85 18		      sta	AUDF1
    317  fa47		       a9 04		      lda	#BUG_SAMPLE_V
    318  fa49		       85 1a		      sta	AUDV1
    319  fa4b		       60		      rts
------- FILE game.asm
     20  fa4c							;    include "objects/swatter.asm"
     21  fa4c
     22  fa4c							; Initialization
     23  fa4c
     24  fa4c				   GameInit
     25  fa4c
     26  fa4c							; Setup logic and kernel
      0  fa4c					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fa4c				   .POINTER   SET	VBlankPtr
      2  fa4c				   .ADDRESS   SET	GameVerticalBlank
      3  fa4c
      4  fa4c		       a9 97		      LDA	#<.ADDRESS
      5  fa4e		       85 87		      STA	.POINTER
      6  fa50		       a9 fa		      LDA	#>.ADDRESS
      7  fa52		       85 88		      STA	.POINTER+1
      8  fa54
      0  fa54					      SET_POINTER	KernelPtr, GameKernel
      1  fa54				   .POINTER   SET	KernelPtr
      2  fa54				   .ADDRESS   SET	GameKernel
      3  fa54
      4  fa54		       a9 14		      LDA	#<.ADDRESS
      5  fa56		       85 89		      STA	.POINTER
      6  fa58		       a9 fb		      LDA	#>.ADDRESS
      7  fa5a		       85 8a		      STA	.POINTER+1
      8  fa5c
      0  fa5c					      SET_POINTER	OverScanPtr, GameOverScan
      1  fa5c				   .POINTER   SET	OverScanPtr
      2  fa5c				   .ADDRESS   SET	GameOverScan
      3  fa5c
      4  fa5c		       a9 b8		      LDA	#<.ADDRESS
      5  fa5e		       85 8b		      STA	.POINTER
      6  fa60		       a9 fa		      LDA	#>.ADDRESS
      7  fa62		       85 8c		      STA	.POINTER+1
      8  fa64
     30  fa64
     31  fa64							; Mute Audio
     32  fa64		       a9 00		      lda	#0
     33  fa66		       85 15		      sta	AUDC0
     34  fa68		       85 19		      sta	AUDV0
     35  fa6a		       85 17		      sta	AUDF0
     36  fa6c		       85 16		      sta	AUDC1
     37  fa6e		       85 1a		      sta	AUDV1
     38  fa70		       85 18		      sta	AUDF1
     39  fa72		       85 90		      sta	SampleStep
     40  fa74
     41  fa74							; Load Audio Settings
     42  fa74		       a9 04		      lda	#GAME_AUDIO_VOLUME
     43  fa76		       85 19		      sta	AUDV0
     44  fa78
     45  fa78							; Make it so that we play the first note immediately
     46  fa78		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     47  fa7a		       85 8f		      sta	AudioStep
     48  fa7c		       a9 02		      lda	#2
     49  fa7e		       85 8e		      sta	FrameTimer
     50  fa80
     51  fa80							; Reset NuSiz
     52  fa80		       a9 00		      lda	#0
     53  fa82		       85 81		      sta	NuSiz0
     54  fa84		       85 04		      sta	NUSIZ0
     55  fa86		       85 82		      sta	NuSiz1
     56  fa88		       85 05		      sta	NUSIZ1
     57  fa8a
     58  fa8a							; Initialize Objects
     59  fa8a		       20 74 f4 	      jsr	ScoreInit
     60  fa8d		       20 d0 f5 	      jsr	SpiderInit
     61  fa90		       20 76 f7 	      jsr	LineInit
     62  fa93		       20 2c f9 	      jsr	BugInit
     63  fa96							;    jsr SwatterInit
     64  fa96
     65  fa96		       60		      rts
     66  fa97
     67  fa97				   GameVerticalBlank
     68  fa97
     69  fa97							; Refresh random values
     70  fa97		       20 13 f0 	      jsr	Random
     71  fa9a
     72  fa9a							; Update Objects
     73  fa9a		       20 e1 f5 	      jsr	SpiderUpdate
     74  fa9d		       20 8b f7 	      jsr	LineUpdate
     75  faa0		       20 4d f9 	      jsr	BugUpdate
     76  faa3							;    jsr SwatterUpdate
     77  faa3		       20 7d f4 	      jsr	ScoreUpdate
     78  faa6
     79  faa6							; Reset Collisions
     80  faa6		       85 2c		      sta	CXCLR
     81  faa8
     82  faa8							; Clear horizontal movement
     83  faa8		       85 2b		      sta	HMCLR
     84  faaa
     85  faaa							; Update Positions
     86  faaa		       20 ec f6 	      jsr	SpiderPosition
     87  faad		       20 a9 f8 	      jsr	LinePosition
     88  fab0		       20 eb f9 	      jsr	BugPosition
     89  fab3							;    jsr SwatterPosition
     90  fab3
     91  fab3							; Set final x positions
     92  fab3		       85 02		      sta	WSYNC
     93  fab5		       85 2a		      sta	HMOVE
     94  fab7
     95  fab7		       60		      rts
     96  fab8
     97  fab8				   GameOverScan
     98  fab8
     99  fab8							; Audio Routines
    100  fab8		       20 d6 fa 	      jsr	GameAudio
    101  fabb		       20 c2 fa 	      jsr	GameSample
    102  fabe
    103  fabe							; State Routines
    104  fabe		       20 0a fb 	      jsr	GameDeath
    105  fac1
    106  fac1		       60		      rts
    107  fac2
    108  fac2				   GameSample
    109  fac2
    110  fac2		       a6 90		      ldx	SampleStep
    111  fac4		       e0 00		      cpx	#0
    112  fac6		       f0 0b		      beq	.game_sample_return
    113  fac8
    114  fac8		       ca		      dex
    115  fac9		       d0 08		      bne	.game_sample_return
    116  facb
    117  facb				   .game_sample_mute
    118  facb		       a9 00		      lda	#0
    119  facd		       85 1a		      sta	AUDV1
    120  facf		       85 18		      sta	AUDF1
    121  fad1		       85 16		      sta	AUDC1
    122  fad3
    123  fad3				   .game_sample_return
    124  fad3		       86 90		      stx	SampleStep
    125  fad5		       60		      rts
    126  fad6
    127  fad6				   GameAudio
    128  fad6
    129  fad6		       a6 8e		      ldx	FrameTimer
    130  fad8		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    131  fada		       f0 25		      beq	.game_audio_mute_note
    132  fadc		       e0 00		      cpx	#0
    133  fade		       d0 29		      bne	.game_audio_return
    134  fae0
    135  fae0							; Reset Timer
    136  fae0		       a2 09		      ldx	#GAME_AUDIO_STEP
    137  fae2		       86 8e		      stx	FrameTimer
    138  fae4
    139  fae4				   .game_audio_play
    140  fae4
    141  fae4							; Increment melody position
    142  fae4		       a4 8f		      ldy	AudioStep
    143  fae6		       c8		      iny
    144  fae7
    145  fae7		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    146  fae9		       d0 02		      bne	.game_audio_play_note
    147  faeb
    148  faeb							; Loop our audio step
    149  faeb		       a0 00		      ldy	#0
    150  faed
    151  faed				   .game_audio_play_note
    152  faed
    153  faed							; Save current position
    154  faed		       84 8f		      sty	AudioStep
    155  faef
    156  faef							; Melody Line
    157  faef		       b9 78 fb 	      lda	GameAudio0,y
    158  faf2		       c9 ff		      cmp	#$FF
    159  faf4		       f0 0b		      beq	.game_audio_mute_note
    160  faf6		       85 17		      sta	AUDF0
    161  faf8		       a9 06		      lda	#GAME_AUDIO_TONE
    162  fafa		       85 15		      sta	AUDC0
    163  fafc		       a9 04		      lda	#GAME_AUDIO_VOLUME
    164  fafe		       85 19		      sta	AUDV0
    165  fb00
    166  fb00		       60		      rts
    167  fb01
    168  fb01				   .game_audio_mute_note
    169  fb01
    170  fb01		       a9 00		      lda	#0
    171  fb03		       85 17		      sta	AUDF0
    172  fb05		       85 15		      sta	AUDC0
    173  fb07		       85 19		      sta	AUDV0
    174  fb09
    175  fb09				   .game_audio_return
    176  fb09		       60		      rts
    177  fb0a
    178  fb0a				   GameDeath
    179  fb0a		       a5 91		      lda	ScoreValue+0
    180  fb0c		       c9 00		      cmp	#0
    181  fb0e		       d0 03		      bne	.game_death_return
    182  fb10
    183  fb10							; Show Game Over Screen
    184  fb10		       20 98 fb 	      jsr	OverInit
    185  fb13
    186  fb13				   .game_death_return
    187  fb13		       60		      rts
    188  fb14
    189  fb14				   GameKernel
    190  fb14
    191  fb14							; Turn on display
    192  fb14		       a9 00		      lda	#0
    193  fb16		       85 01		      sta	VBLANK
    194  fb18
    195  fb18				   .game_kernel_score
    196  fb18
    197  fb18							; Draw Score on top first
    198  fb18		       20 9d f4 	      jsr	ScoreDraw
    199  fb1b
    200  fb1b				   .game_kernel_objects_start
    201  fb1b
    202  fb1b							; Setup Drawing Objects
    203  fb1b		       20 5d f5 	      jsr	WebDrawStart
    204  fb1e		       20 f4 f6 	      jsr	SpiderDrawStart
    205  fb21		       20 b1 f8 	      jsr	LineDrawStart
    206  fb24		       20 fa f9 	      jsr	BugDrawStart
    207  fb27							;    jsr SwatterDrawStart
    208  fb27
    209  fb27							; Start Scanline Counter
    210  fb27		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    211  fb29							; The extra 5 is for processing overflow
    212  fb29
    213  fb29							; Half scanline counter in Temp+1
    214  fb29		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    215  fb2b		       85 84		      sta	Temp+1
    216  fb2d
    217  fb2d				   .game_kernel_objects
    218  fb2d
    219  fb2d							; Draw Objects in order
    220  fb2d
    221  fb2d							;    jsr LineDraw
    222  fb2d							;    jsr BugDraw
    223  fb2d		       20 78 f5 	      jsr	WebDraw	; Every 6 lines
    224  fb30
    225  fb30		       85 02		      sta	WSYNC
    226  fb32		       ca		      dex
    227  fb33		       f0 34		      beq	.game_kernel_clean
    228  fb35
    229  fb35		       20 18 f7 	      jsr	SpiderDraw	; Every odd scanline
    230  fb38							;    jsr SwatterDraw
    231  fb38
    232  fb38		       85 02		      sta	WSYNC
    233  fb3a		       c6 84		      dec	Temp+1
    234  fb3c		       ca		      dex
    235  fb3d		       f0 2a		      beq	.game_kernel_clean
    236  fb3f
    237  fb3f		       a5 84		      lda	Temp+1
    238  fb41		       20 d1 f8 	      jsr	LineDraw
    239  fb44		       20 17 fa 	      jsr	BugDraw
    240  fb47
    241  fb47							;    sta WSYNC
    242  fb47		       ca		      dex
    243  fb48		       f0 1f		      beq	.game_kernel_clean
    244  fb4a
    245  fb4a		       20 18 f7 	      jsr	SpiderDraw
    246  fb4d							;    jsr SwatterDraw
    247  fb4d
    248  fb4d		       85 02		      sta	WSYNC
    249  fb4f		       c6 84		      dec	Temp+1
    250  fb51		       ca		      dex
    251  fb52		       f0 15		      beq	.game_kernel_clean
    252  fb54
    253  fb54		       a5 84		      lda	Temp+1
    254  fb56		       20 d1 f8 	      jsr	LineDraw
    255  fb59		       20 17 fa 	      jsr	BugDraw
    256  fb5c
    257  fb5c							;    sta WSYNC
    258  fb5c		       ca		      dex
    259  fb5d		       f0 0a		      beq	.game_kernel_clean
    260  fb5f
    261  fb5f		       20 18 f7 	      jsr	SpiderDraw
    262  fb62							;    jsr SwatterDraw
    263  fb62
    264  fb62		       85 02		      sta	WSYNC
    265  fb64		       c6 84		      dec	Temp+1
    266  fb66		       ca		      dex
    267  fb67		       d0 c4		      bne	.game_kernel_objects
    268  fb69
    269  fb69				   .game_kernel_clean
    270  fb69
    271  fb69		       20 9a f5 	      jsr	WebClean
    272  fb6c		       20 49 f7 	      jsr	SpiderClean
    273  fb6f		       20 e4 f8 	      jsr	LineClean
    274  fb72		       20 34 fa 	      jsr	BugClean
    275  fb75							;    jsr SwatterClean
    276  fb75
    277  fb75		       85 02		      sta	WSYNC
    278  fb77
    279  fb77				   .game_kernel_return
    280  fb77		       60		      rts
    281  fb78
    282  fb78				   GameAudio0
    283  fb78		       0d		      .byte.b	#13	; D
    284  fb79		       ff		      .byte.b	#$FF
    285  fb7a		       0f		      .byte.b	#15	; B
    286  fb7b		       ff		      .byte.b	#$FF
    287  fb7c		       0d		      .byte.b	#13	; D
    288  fb7d		       ff		      .byte.b	#$FF
    289  fb7e		       0f		      .byte.b	#15	; B
    290  fb7f		       ff		      .byte.b	#$FF
    291  fb80		       0d		      .byte.b	#13	; D
    292  fb81		       0d		      .byte.b	#13	; D
    293  fb82		       0f		      .byte.b	#15	; B
    294  fb83		       ff		      .byte.b	#$FF
    295  fb84		       0c		      .byte.b	#12	; D#
    296  fb85		       ff		      .byte.b	#$FF
    297  fb86		       0f		      .byte.b	#15	; B
    298  fb87		       ff		      .byte.b	#$FF
    299  fb88		       0b		      .byte.b	#11	; E
    300  fb89		       ff		      .byte.b	#$FF
    301  fb8a		       0e		      .byte.b	#14	; C#
    302  fb8b		       ff		      .byte.b	#$FF
    303  fb8c		       0b		      .byte.b	#11
    304  fb8d		       ff		      .byte.b	#$FF
    305  fb8e		       0e		      .byte.b	#14
    306  fb8f		       ff		      .byte.b	#$FF
    307  fb90		       0b		      .byte.b	#11
    308  fb91		       0b		      .byte.b	#11
    309  fb92		       0e		      .byte.b	#14
    310  fb93		       ff		      .byte.b	#$FF
    311  fb94		       0b		      .byte.b	#11
    312  fb95		       ff		      .byte.b	#$FF
    313  fb96		       0e		      .byte.b	#14
    314  fb97		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fb98					      include	"over.asm"
      1  fb98							;================
      2  fb98							; Constants
      3  fb98							;================
      4  fb98
      5  fb98		       00 dc	   OVER_FRAMES =	220
      6  fb98
      7  fb98		       00 00	   OVER_BG_COLOR =	#$00
      8  fb98		       00 44	   OVER_FG_COLOR =	#$44
      9  fb98
     10  fb98		       00 07	   OVER_AUDIO_TONE =	7
     11  fb98		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fb98		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fb98		       00 10	   OVER_AUDIO_STEP =	16
     14  fb98
     15  fb98		       00 09	   OVER_IMAGE_SIZE =	9
     16  fb98		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fb98		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fb98		       00 35	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fb98
     20  fb98				   OverInit
     21  fb98
     22  fb98							; Setup logic and kernel
      0  fb98					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fb98				   .POINTER   SET	VBlankPtr
      2  fb98				   .ADDRESS   SET	OverVerticalBlank
      3  fb98
      4  fb98		       a9 da		      LDA	#<.ADDRESS
      5  fb9a		       85 87		      STA	.POINTER
      6  fb9c		       a9 fb		      LDA	#>.ADDRESS
      7  fb9e		       85 88		      STA	.POINTER+1
      8  fba0
      0  fba0					      SET_POINTER	KernelPtr, OverKernel
      1  fba0				   .POINTER   SET	KernelPtr
      2  fba0				   .ADDRESS   SET	OverKernel
      3  fba0
      4  fba0		       a9 18		      LDA	#<.ADDRESS
      5  fba2		       85 89		      STA	.POINTER
      6  fba4		       a9 fc		      LDA	#>.ADDRESS
      7  fba6		       85 8a		      STA	.POINTER+1
      8  fba8
      0  fba8					      SET_POINTER	OverScanPtr, OverOverScan
      1  fba8				   .POINTER   SET	OverScanPtr
      2  fba8				   .ADDRESS   SET	OverOverScan
      3  fba8
      4  fba8		       a9 de		      LDA	#<.ADDRESS
      5  fbaa		       85 8b		      STA	.POINTER
      6  fbac		       a9 fb		      LDA	#>.ADDRESS
      7  fbae		       85 8c		      STA	.POINTER+1
      8  fbb0
     26  fbb0
     27  fbb0							; Load Colors
     28  fbb0		       a9 00		      lda	#OVER_BG_COLOR
     29  fbb2		       85 09		      sta	COLUBK
     30  fbb4		       a9 44		      lda	#OVER_FG_COLOR
     31  fbb6		       85 08		      sta	COLUPF
     32  fbb8
     33  fbb8							; Load audio settings
     34  fbb8		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fbba		       85 15		      sta	AUDC0
     36  fbbc		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fbbe		       85 19		      sta	AUDV0
     38  fbc0		       a9 00		      lda	#0
     39  fbc2		       85 16		      sta	AUDC1
     40  fbc4		       85 1a		      sta	AUDV1
     41  fbc6		       a9 00		      lda	#0
     42  fbc8		       85 8f		      sta	AudioStep
     43  fbca
     44  fbca							; Play first note
     45  fbca		       ad 6a fc 	      lda	OverAudio0,AudioStep
     46  fbcd		       85 17		      sta	AUDF0
     47  fbcf
     48  fbcf							; Setup frame counters
     49  fbcf		       a9 00		      lda	#0
     50  fbd1		       85 8d		      sta	Frame
     51  fbd3		       a9 10		      lda	#OVER_AUDIO_STEP
     52  fbd5		       85 8e		      sta	FrameTimer
     53  fbd7		       85 84		      sta	Temp+1
     54  fbd9
     55  fbd9		       60		      rts
     56  fbda
     57  fbda				   OverVerticalBlank
     58  fbda		       20 7d f4 	      jsr	ScoreUpdate
     59  fbdd		       60		      rts
     60  fbde
     61  fbde				   OverOverScan
     62  fbde		       20 e5 fb 	      jsr	OverAudio
     63  fbe1		       20 0e fc 	      jsr	OverState
     64  fbe4		       60		      rts
     65  fbe5
     66  fbe5				   OverAudio
     67  fbe5
     68  fbe5		       a6 8e		      ldx	FrameTimer
     69  fbe7		       e0 00		      cpx	#0
     70  fbe9		       d0 22		      bne	.over_audio_return
     71  fbeb
     72  fbeb							; Reset Timer
     73  fbeb		       a6 84		      ldx	Temp+1
     74  fbed					      REPEAT	3
     75  fbed		       e8		      inx
     74  fbed					      REPEND
     75  fbee		       e8		      inx
     74  fbee					      REPEND
     75  fbef		       e8		      inx
     76  fbf0					      REPEND
     77  fbf0		       86 8e		      stx	FrameTimer
     78  fbf2		       86 84		      stx	Temp+1
     79  fbf4
     80  fbf4				   .over_audio_play
     81  fbf4
     82  fbf4							; Increment melody position
     83  fbf4		       a4 8f		      ldy	AudioStep
     84  fbf6		       c8		      iny
     85  fbf7
     86  fbf7		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  fbf9		       f0 0c		      beq	.over_audio_mute_note
     88  fbfb
     89  fbfb				   .over_audio_play_note
     90  fbfb
     91  fbfb							; Save current position
     92  fbfb		       84 8f		      sty	AudioStep
     93  fbfd
     94  fbfd							; Melody Line
     95  fbfd		       b9 6a fc 	      lda	OverAudio0,y
     96  fc00		       85 17		      sta	AUDF0
     97  fc02		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  fc04		       85 19		      sta	AUDV0
     99  fc06
    100  fc06		       60		      rts
    101  fc07
    102  fc07				   .over_audio_mute_note
    103  fc07		       a9 00		      lda	#0
    104  fc09		       85 17		      sta	AUDF0
    105  fc0b		       85 19		      sta	AUDV0
    106  fc0d
    107  fc0d				   .over_audio_return
    108  fc0d		       60		      rts
    109  fc0e
    110  fc0e				   OverState
    111  fc0e		       a5 8d		      lda	Frame
    112  fc10		       c9 dc		      cmp	#OVER_FRAMES
    113  fc12		       d0 03		      bne	.over_state_return
    114  fc14
    115  fc14		       20 f5 f1 	      jsr	TitleInit
    116  fc17
    117  fc17				   .over_state_return
    118  fc17		       60		      rts
    119  fc18
    120  fc18				   OverKernel
    121  fc18
    122  fc18							; Turn on display
    123  fc18		       a9 00		      lda	#0
    124  fc1a		       85 01		      sta	VBLANK
    125  fc1c
    126  fc1c				   .over_kernel_score
    127  fc1c
    128  fc1c							; Draw Score on top first (no update)
    129  fc1c		       20 9d f4 	      jsr	ScoreDraw
    130  fc1f
    131  fc1f				   .over_kernel_init
    132  fc1f							; Playfield Control
    133  fc1f		       a5 80		      lda	CtrlPf
    134  fc21		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  fc23		       09 01		      ora	#%00000001	; Set mirroring
    136  fc25		       85 80		      sta	CtrlPf
    137  fc27		       85 0a		      sta	CTRLPF
    138  fc29
    139  fc29				   .over_kernel_top_padding
    140  fc29							; Top Padding
    141  fc29		       20 48 fc 	      jsr	OverPadding
    142  fc2c
    143  fc2c				   .over_kernel_image
    144  fc2c		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  fc2e
    146  fc2e				   .over_kernel_image_next
    147  fc2e		       bd 61 fc 	      lda	OverImagePF2,x
    148  fc31		       85 0f		      sta	PF2
    149  fc33		       bd 58 fc 	      lda	OverImagePF1,x
    150  fc36		       85 0e		      sta	PF1
    151  fc38							;    lda OverImagePF0,x
    152  fc38							;    sta PF0
    153  fc38
    154  fc38		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  fc3a				   .over_kernel_image_loop
    156  fc3a		       85 02		      sta	WSYNC
    157  fc3c		       88		      dey
    158  fc3d		       d0 fb		      bne	.over_kernel_image_loop
    159  fc3f
    160  fc3f		       ca		      dex
    161  fc40		       10 ec		      bpl	.over_kernel_image_next
    162  fc42
    163  fc42				   .over_kernel_bottom_padding
    164  fc42							; Bottom Padding
    165  fc42		       20 48 fc 	      jsr	OverPadding
    166  fc45
    167  fc45				   .over_kernel_return
    168  fc45		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  fc47		       60		      rts
    170  fc48
    171  fc48				   OverPadding
    172  fc48		       a9 00		      lda	#0
    173  fc4a		       85 0d		      sta	PF0
    174  fc4c		       85 0e		      sta	PF1
    175  fc4e		       85 0f		      sta	PF2
    176  fc50
    177  fc50		       a2 35		      ldx	#OVER_IMAGE_PADDING
    178  fc52				   .over_padding_loop
    179  fc52		       85 02		      sta	WSYNC
    180  fc54		       ca		      dex
    181  fc55		       d0 fb		      bne	.over_padding_loop
    182  fc57
    183  fc57		       60		      rts
    184  fc58
    185  fc58				   OverAssets
    186  fc58
    187  fc58							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  fc58					      include	"over_image.asm"
      1  fc58							;OverImagePF0:
      2  fc58							;    .BYTE %00000000
      3  fc58							;    .BYTE %00000000
      4  fc58							;    .BYTE %00000000
      5  fc58							;    .BYTE %00000000
      6  fc58							;    .BYTE %00000000
      7  fc58							;    .BYTE %00000000
      8  fc58							;    .BYTE %00000000
      9  fc58							;    .BYTE %00000000
     10  fc58							;    .BYTE %00000000
     11  fc58
     12  fc58				   OverImagePF1
     13  fc58		       0c		      .BYTE.b	%00001100
     14  fc59		       13		      .BYTE.b	%00010011
     15  fc5a		       20		      .BYTE.b	%00100000
     16  fc5b		       23		      .BYTE.b	%00100011
     17  fc5c		       24		      .BYTE.b	%00100100
     18  fc5d		       24		      .BYTE.b	%00100100
     19  fc5e		       12		      .BYTE.b	%00010010
     20  fc5f		       10		      .BYTE.b	%00010000
     21  fc60		       08		      .BYTE.b	%00001000
     22  fc61
     23  fc61				   OverImagePF2
     24  fc61		       e0		      .BYTE.b	%11100000
     25  fc62		       18		      .BYTE.b	%00011000
     26  fc63		       05		      .BYTE.b	%00000101
     27  fc64		       52		      .BYTE.b	%01010010
     28  fc65		       23		      .BYTE.b	%00100011
     29  fc66		       52		      .BYTE.b	%01010010
     30  fc67		       04		      .BYTE.b	%00000100
     31  fc68		       18		      .BYTE.b	%00011000
     32  fc69		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  fc6a
    190  fc6a				   OverAudio0
    191  fc6a
    192  fc6a		       0c		      .BYTE.b	#12	; D#2
    193  fc6b		       0d		      .BYTE.b	#13	; D2
    194  fc6c		       11		      .BYTE.b	#17	; A1
    195  fc6d		       16		      .BYTE.b	#22	; F1
    196  fc6e		       1a		      .BYTE.b	#26	; D1
    197  fc6f		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    288  fc70
    289  fc70							;================
    290  fc70							; End of cart
    291  fc70							;================
    292  fc70
    293  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    294  fffa
    295  fffa				   InterruptVectors
    296  fffa
    297  fffa		       21 f0		      .word.w	InitSystem	; NMI
    298  fffc		       21 f0		      .word.w	InitSystem	; RESET
    299  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    300  10000
    301  10000					       END
