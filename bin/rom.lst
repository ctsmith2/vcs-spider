------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00b8 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00	   FrameTimer ds	1
     70 U008f
     71 U008f		       00	   AudioStep  ds	1
     72 U0090
     73 U0090		       00	   SampleStep ds	1
     74 U0091
     75 U0091							; Score
     76 U0091
     77 U0091		       00 00	   ScoreValue ds	2
     78 U0093		       00 00	   ScoreDigitOnes ds	2
     79 U0095		       00 00	   ScoreDigitTens ds	2
     80 U0097		       00 00	   ScoreGfx   ds	2
     81 U0099
     82 U0099							; Web
     83 U0099
     84 U0099		       00	   WebIndex   ds	1
     85 U009a		       00	   WebDir     ds	1
     86 U009b
     87 U009b							; Spider
     88 U009b
     89 U009b		       00 00	   SpiderPtr  ds	2
     90 U009d		       00 00	   SpiderPos  ds	2
     91 U009f		       00	   SpiderCtrl ds	1
     92 U00a0		       00	   SpiderColor ds	1
     93 U00a1
     94 U00a1		       00	   SpiderIndex ds	1
     95 U00a2		       00	   SpiderDrawPos ds	1
     96 U00a3
     97 U00a3							; Line
     98 U00a3
     99 U00a3		       00	   LineEnabled ds	1
    100 U00a4		       00 00	   LinePos    ds	2
    101 U00a6		       00 00	   LineVelocity ds	2
    102 U00a8		       00 00	   LineStartPos ds	2
    103 U00aa		       00 00	   LineDrawPos ds	2
    104 U00ac
    105 U00ac							; Bug
    106 U00ac
    107 U00ac		       00 00	   BugStunned ds	2
    108 U00ae		       00 00	   BugPosX    ds	2
    109 U00b0		       00 00	   BugPosY    ds	2
    110 U00b2		       00 00	   BugColor   ds	2
    111 U00b4
    112 U00b4		       00 00	   BugDrawPosBottom ds	2
    113 U00b6		       00 00	   BugDrawPosTop ds	2
    114 U00b8
    115  10000 ????				       SEG
    116  f000					      org	$F000	; Start of cart area
    117  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    119  f021
    120  f021				   InitSystem
    121  f021
    122  f021				   .init_clean
    123  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    125  f02c
    126  f02c				   .init_tia
    127  f02c							; Define default TIA register values
    128  f02c
    129  f02c							; Initialize copies
    130  f02c		       a9 00		      lda	#0
    131  f02e		       85 80		      sta	CtrlPf
    132  f030		       85 81		      sta	NuSiz0
    133  f032		       85 82		      sta	NuSiz1
    134  f034
    135  f034							; Set background color
    136  f034		       a9 00		      lda	#$00	; Black
    137  f036		       85 09		      sta	COLUBK
    138  f038
    139  f038							; Set the playfield and player color
    140  f038		       a9 0e		      lda	#$0E	; White
    141  f03a		       85 08		      sta	COLUPF
    142  f03c		       85 06		      sta	COLUP0
    143  f03e		       85 07		      sta	COLUP1
    144  f040
    145  f040							; Playfield Control
    146  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    147  f042		       85 80		      sta	CtrlPf
    148  f044		       85 0a		      sta	CTRLPF
    149  f046
    150  f046							; Disable Game Elements
    151  f046		       a9 00		      lda	#$00
    152  f048		       85 1f		      sta	ENABL	; Turn off ball
    153  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    154  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    155  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    156  f050		       85 1c		      sta	GRP1	; Turn off player 2
    157  f052
    158  f052							; Empty playfield
    159  f052		       a9 00		      lda	#%00000000
    160  f054		       85 0d		      sta	PF0
    161  f056		       85 0e		      sta	PF1
    162  f058		       85 0f		      sta	PF2
    163  f05a
    164  f05a				   .init_seed
    165  f05a							; Seed the random number generator
    166  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    167  f05d		       85 85		      sta	Rand8	; Use as seed
    168  f05f		       49 ff		      eor	#$FF	; Flip bits
    169  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    170  f063
    171  f063				   .init_game
    172  f063
    173  f063							;   jsr LogoInit
    174  f063		       20 af f6 	      jsr	GameInit	; Used for testing
    175  f066
    176  f066							;=======================================
    177  f066							; Game Kernel
    178  f066							;=======================================
    179  f066
    180  f066				   Main
    181  f066
    182  f066		       20 75 f0 	      jsr	VerticalSync
    183  f069		       20 8c f0 	      jsr	VerticalBlank
    184  f06c		       20 9f f0 	      jsr	Kernel
    185  f06f		       20 a6 f0 	      jsr	OverScan
    186  f072		       4c 66 f0 	      jmp	Main
    187  f075
    188  f075				   VerticalSync
    189  f075
    190  f075		       a9 00		      lda	#0
    191  f077		       85 01		      sta	VBLANK
    192  f079
    193  f079							; Turn on Vertical Sync signal and setup timer
    194  f079		       a9 02		      lda	#2
    195  f07b		       85 00		      sta	VSYNC
    196  f07d
    197  f07d							; Increment frame count and reduce frame counter
    198  f07d		       e6 8d		      inc	Frame
    199  f07f		       c6 8e		      dec	FrameTimer
    200  f081
    201  f081							; VSYNCH signal scanlines
    202  f081					      REPEAT	#KERNEL_VSYNC
    203  f081		       85 02		      sta	WSYNC
    202  f081					      REPEND
    203  f083		       85 02		      sta	WSYNC
    202  f083					      REPEND
    203  f085		       85 02		      sta	WSYNC
    204  f087					      REPEND
    205  f087
    206  f087							; Turn off Vertical Sync signal
    207  f087		       a9 00		      lda	#0
    208  f089		       85 00		      sta	VSYNC
    209  f08b
    210  f08b				   .vsync_return
    211  f08b		       60		      rts
    212  f08c
    213  f08c				   VerticalBlank
    214  f08c							; Setup Timer
    215  f08c		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    216  f08e		       8d 96 02 	      sta	TIM64T
    217  f091
    218  f091				   .vblank_logic
    219  f091							; Perform Game Logic
    220  f091							;jsr (VBlankPtr)
    221  f091		       20 9c f0 	      jsr	.vblank_logic_call_ptr
    222  f094
    223  f094				   .vblank_loop
    224  f094							; WSYNC until Timer is complete
    225  f094		       85 02		      sta	WSYNC
    226  f096		       ad 84 02 	      lda	INTIM
    227  f099		       d0 f9		      bne	.vblank_loop
    228  f09b
    229  f09b				   .vblank_return
    230  f09b		       60		      rts
    231  f09c
    232  f09c				   .vblank_logic_call_ptr
    233  f09c		       6c 87 00 	      jmp	(VBlankPtr)
    234  f09f
    235  f09f				   Kernel
    236  f09f
    237  f09f							; Perform Selected Kernel
    238  f09f							;jsr (KernelPtr)
    239  f09f		       20 a3 f0 	      jsr	.kernel_call_ptr
    240  f0a2		       60		      rts
    241  f0a3
    242  f0a3				   .kernel_call_ptr
    243  f0a3		       6c 89 00 	      jmp	(KernelPtr)
    244  f0a6
    245  f0a6				   OverScan
    246  f0a6
    247  f0a6							; End of screen, enter blanking
    248  f0a6		       a9 42		      lda	#%01000010
    249  f0a8		       85 01		      sta	VBLANK
    250  f0aa
    251  f0aa							; Setup Timer
    252  f0aa		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    253  f0ac		       8d 96 02 	      sta	TIM64T
    254  f0af
    255  f0af				   .overscan_reset
    256  f0af							; Check for reset switch
    257  f0af		       ad 82 02 	      lda	SWCHB
    258  f0b2		       4a		      lsr		; Push D0 to carry (C)
    259  f0b3		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    260  f0b5
    261  f0b5							; Perform reset
    262  f0b5							;    jsr LogoInit	      ; No need for logic
    263  f0b5		       20 af f6 	      jsr	GameInit
    264  f0b8		       4c be f0 	      jmp	.overscan_loop
    265  f0bb
    266  f0bb				   .overscan_logic
    267  f0bb							; Perform OverScan Logic
    268  f0bb							;jsr (OverScanPtr)
    269  f0bb		       20 c6 f0 	      jsr	.overscan_logic_call_ptr
    270  f0be
    271  f0be				   .overscan_loop
    272  f0be							; WSYNC until Timer is complete
    273  f0be		       85 02		      sta	WSYNC
    274  f0c0		       ad 84 02 	      lda	INTIM
    275  f0c3		       d0 f9		      bne	.overscan_loop
    276  f0c5
    277  f0c5				   .overscan_return
    278  f0c5		       60		      rts
    279  f0c6
    280  f0c6				   .overscan_logic_call_ptr
    281  f0c6		       6c 8b 00 	      jmp	(OverScanPtr)
    282  f0c9
    283  f0c9							;================
    284  f0c9							; State Code
    285  f0c9							;================
    286  f0c9
    287  f0c9							;    include "logo.asm"
    288  f0c9							;    include "title.asm"
------- FILE game.asm LEVEL 2 PASS 2
      0  f0c9					      include	"game.asm"
      1  f0c9							;================
      2  f0c9							; Game
      3  f0c9							;================
      4  f0c9
      5  f0c9							; Constants
      6  f0c9
      7  f0c9		       00 04	   GAME_AUDIO_VOLUME =	4
      8  f0c9		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f0c9		       00 09	   GAME_AUDIO_STEP =	9
     10  f0c9		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f0c9		       00 06	   GAME_AUDIO_TONE =	6
     12  f0c9
     13  f0c9							; Object Code
     14  f0c9
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f0c9					      include	"objects/score.asm"
      1  f0c9							;======================
      2  f0c9							; Score (playfield)
      3  f0c9							;======================
      4  f0c9
      5  f0c9							; Constants
      6  f0c9
      7  f0c9		       00 00	   SCORE_BG_COLOR =	#$00
      8  f0c9		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f0c9		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f0c9
     11  f0c9		       00 05	   SCORE_CHAR_SIZE =	5
     12  f0c9		       00 02	   SCORE_LINE_SIZE =	2
     13  f0c9		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f0c9
     15  f0c9							; Initialization
     16  f0c9
     17  f0c9				   ScoreInit
     18  f0c9
     19  f0c9							; Health Score
     20  f0c9		       a9 ff		      lda	#$FF
     21  f0cb		       85 91		      sta	ScoreValue+0
     22  f0cd
     23  f0cd							; Game Score
     24  f0cd		       a9 00		      lda	#0
     25  f0cf		       85 92		      sta	ScoreValue+1
     26  f0d1
     27  f0d1		       60		      rts
     28  f0d2
     29  f0d2							; Frame Update
     30  f0d2
     31  f0d2				   ScoreUpdate
     32  f0d2
     33  f0d2		       a2 01		      ldx	#1
     34  f0d4				   .score_update_loop
     35  f0d4
     36  f0d4							; Ones Digit
     37  f0d4		       b5 91		      lda	ScoreValue,x
     38  f0d6		       29 0f		      and	#$0f
     39  f0d8		       85 83		      sta	Temp
     40  f0da		       0a		      asl
     41  f0db		       0a		      asl
     42  f0dc		       65 83		      adc	Temp
     43  f0de		       95 93		      sta	ScoreDigitOnes,x
     44  f0e0
     45  f0e0							; Tens Digit
     46  f0e0		       b5 91		      lda	ScoreValue,x
     47  f0e2		       29 f0		      and	#$f0
     48  f0e4		       4a		      lsr
     49  f0e5		       4a		      lsr
     50  f0e6		       85 83		      sta	Temp
     51  f0e8		       4a		      lsr
     52  f0e9		       4a		      lsr
     53  f0ea		       65 83		      adc	Temp
     54  f0ec		       95 95		      sta	ScoreDigitTens,x
     55  f0ee
     56  f0ee		       ca		      dex
     57  f0ef		       10 e3		      bpl	.score_update_loop
     58  f0f1
     59  f0f1				   .score_update_end
     60  f0f1		       60		      rts
     61  f0f2
     62  f0f2							; Draw loop (uses SCORE_LINES scanlines)
     63  f0f2
     64  f0f2				   ScoreDraw
     65  f0f2
     66  f0f2							; Load Colors
     67  f0f2		       a9 00		      lda	#SCORE_BG_COLOR
     68  f0f4		       85 09		      sta	COLUBK
     69  f0f6		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f0f8		       85 08		      sta	COLUPF
     71  f0fa		       85 06		      sta	COLUP0
     72  f0fc		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f0fe		       85 07		      sta	COLUP1
     74  f100
     75  f100							; Set Non-Mirror and p0/p1 color
     76  f100		       a5 80		      lda	CtrlPf
     77  f102		       29 fc		      and	#%11111100
     78  f104		       09 02		      ora	#%00000010
     79  f106		       85 80		      sta	CtrlPf
     80  f108		       85 0a		      sta	CTRLPF
     81  f10a
     82  f10a							;sta WSYNC
     83  f10a
     84  f10a		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f10c
     86  f10c				   .score_draw_line
     87  f10c
     88  f10c							; 1st Value
     89  f10c		       a4 95		      ldy	ScoreDigitTens
     90  f10e		       b9 62 f1 	      lda	ScoreDigits,y
     91  f111		       29 f0		      and	#$f0
     92  f113		       85 97		      sta	ScoreGfx
     93  f115		       a4 93		      ldy	ScoreDigitOnes
     94  f117		       b9 62 f1 	      lda	ScoreDigits,y
     95  f11a		       29 0f		      and	#$0f
     96  f11c		       05 97		      ora	ScoreGfx
     97  f11e		       85 97		      sta	ScoreGfx
     98  f120
     99  f120		       85 02		      sta	WSYNC
    100  f122		       85 0e		      sta	PF1
    101  f124
    102  f124							; 2nd Value
    103  f124		       a4 96		      ldy	ScoreDigitTens+1
    104  f126		       b9 62 f1 	      lda	ScoreDigits,y
    105  f129		       29 f0		      and	#$f0
    106  f12b		       85 98		      sta	ScoreGfx+1
    107  f12d		       a4 94		      ldy	ScoreDigitOnes+1
    108  f12f		       b9 62 f1 	      lda	ScoreDigits,y
    109  f132		       29 0f		      and	#$0f
    110  f134		       05 98		      ora	ScoreGfx+1
    111  f136		       85 98		      sta	ScoreGfx+1
    112  f138
      0  f138					      sleep	12
      1  f138				   .CYCLES    SET	12
      2  f138
      3  f138				  -	      IF	.CYCLES < 2
      4  f138				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f138				  -	      ERR
      6  f138					      ENDIF
      7  f138
      8  f138				  -	      IF	.CYCLES & 1
      9  f138				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f138				  -	      nop	0
     11  f138				  -	      ELSE
     12  f138				  -	      bit	VSYNC
     13  f138				  -	      ENDIF
     14  f138				  -.CYCLES    SET	.CYCLES - 3
     15  f138					      ENDIF
     16  f138
     17  f138					      REPEAT	.CYCLES / 2
     18  f138		       ea		      nop
     17  f138					      REPEND
     18  f139		       ea		      nop
     17  f139					      REPEND
     18  f13a		       ea		      nop
     17  f13a					      REPEND
     18  f13b		       ea		      nop
     17  f13b					      REPEND
     18  f13c		       ea		      nop
     17  f13c					      REPEND
     18  f13d		       ea		      nop
     19  f13e					      REPEND
    114  f13e		       85 0e		      sta	PF1
    115  f140
    116  f140		       a4 97		      ldy	ScoreGfx
    117  f142		       85 02		      sta	WSYNC
    118  f144
    119  f144		       84 0e		      sty	PF1
    120  f146
    121  f146		       e6 93		      inc	ScoreDigitOnes
    122  f148		       e6 94		      inc	ScoreDigitOnes+1
    123  f14a		       e6 95		      inc	ScoreDigitTens
    124  f14c		       e6 96		      inc	ScoreDigitTens+1
    125  f14e
      0  f14e					      sleep	12
      1  f14e				   .CYCLES    SET	12
      2  f14e
      3  f14e				  -	      IF	.CYCLES < 2
      4  f14e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f14e				  -	      ERR
      6  f14e					      ENDIF
      7  f14e
      8  f14e				  -	      IF	.CYCLES & 1
      9  f14e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f14e				  -	      nop	0
     11  f14e				  -	      ELSE
     12  f14e				  -	      bit	VSYNC
     13  f14e				  -	      ENDIF
     14  f14e				  -.CYCLES    SET	.CYCLES - 3
     15  f14e					      ENDIF
     16  f14e
     17  f14e					      REPEAT	.CYCLES / 2
     18  f14e		       ea		      nop
     17  f14e					      REPEND
     18  f14f		       ea		      nop
     17  f14f					      REPEND
     18  f150		       ea		      nop
     17  f150					      REPEND
     18  f151		       ea		      nop
     17  f151					      REPEND
     18  f152		       ea		      nop
     17  f152					      REPEND
     18  f153		       ea		      nop
     19  f154					      REPEND
    127  f154		       ca		      dex
    128  f155		       85 0e		      sta	PF1
    129  f157
    130  f157		       d0 b3		      bne	.score_draw_line
    131  f159		       85 02		      sta	WSYNC
    132  f15b
    133  f15b							; Clear
    134  f15b		       a9 00		      lda	#0
    135  f15d		       85 0e		      sta	PF1
    136  f15f
    137  f15f		       85 02		      sta	WSYNC
    138  f161
    139  f161		       60		      rts
    140  f162
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f162					      include	"objects/score_digits.asm"
      1  f162				   ScoreDigits
      2  f162
      3  f162		       77		      .BYTE.b	%01110111
      4  f163		       55		      .BYTE.b	%01010101
      5  f164		       55		      .BYTE.b	%01010101
      6  f165		       55		      .BYTE.b	%01010101
      7  f166		       77		      .BYTE.b	%01110111
      8  f167
      9  f167		       11		      .BYTE.b	%00010001
     10  f168		       11		      .BYTE.b	%00010001
     11  f169		       11		      .BYTE.b	%00010001
     12  f16a		       11		      .BYTE.b	%00010001
     13  f16b		       11		      .BYTE.b	%00010001
     14  f16c
     15  f16c		       77		      .BYTE.b	%01110111
     16  f16d		       11		      .BYTE.b	%00010001
     17  f16e		       77		      .BYTE.b	%01110111
     18  f16f		       44		      .BYTE.b	%01000100
     19  f170		       77		      .BYTE.b	%01110111
     20  f171
     21  f171		       77		      .BYTE.b	%01110111
     22  f172		       11		      .BYTE.b	%00010001
     23  f173		       33		      .BYTE.b	%00110011
     24  f174		       11		      .BYTE.b	%00010001
     25  f175		       77		      .BYTE.b	%01110111
     26  f176
     27  f176		       55		      .BYTE.b	%01010101
     28  f177		       55		      .BYTE.b	%01010101
     29  f178		       77		      .BYTE.b	%01110111
     30  f179		       11		      .BYTE.b	%00010001
     31  f17a		       11		      .BYTE.b	%00010001
     32  f17b
     33  f17b		       77		      .BYTE.b	%01110111
     34  f17c		       44		      .BYTE.b	%01000100
     35  f17d		       77		      .BYTE.b	%01110111
     36  f17e		       11		      .BYTE.b	%00010001
     37  f17f		       77		      .BYTE.b	%01110111
     38  f180
     39  f180		       77		      .BYTE.b	%01110111
     40  f181		       44		      .BYTE.b	%01000100
     41  f182		       77		      .BYTE.b	%01110111
     42  f183		       55		      .BYTE.b	%01010101
     43  f184		       77		      .BYTE.b	%01110111
     44  f185
     45  f185		       77		      .BYTE.b	%01110111
     46  f186		       11		      .BYTE.b	%00010001
     47  f187		       22		      .BYTE.b	%00100010
     48  f188		       22		      .BYTE.b	%00100010
     49  f189		       22		      .BYTE.b	%00100010
     50  f18a
     51  f18a		       77		      .BYTE.b	%01110111
     52  f18b		       55		      .BYTE.b	%01010101
     53  f18c		       77		      .BYTE.b	%01110111
     54  f18d		       55		      .BYTE.b	%01010101
     55  f18e		       77		      .BYTE.b	%01110111
     56  f18f
     57  f18f		       77		      .BYTE.b	%01110111
     58  f190		       55		      .BYTE.b	%01010101
     59  f191		       77		      .BYTE.b	%01110111
     60  f192		       11		      .BYTE.b	%00010001
     61  f193		       11		      .BYTE.b	%00010001
     62  f194
     63  f194		       77		      .BYTE.b	%01110111
     64  f195		       55		      .BYTE.b	%01010101
     65  f196		       77		      .BYTE.b	%01110111
     66  f197		       55		      .BYTE.b	%01010101
     67  f198		       55		      .BYTE.b	%01010101
     68  f199
     69  f199		       66		      .BYTE.b	%01100110
     70  f19a		       55		      .BYTE.b	%01010101
     71  f19b		       66		      .BYTE.b	%01100110
     72  f19c		       55		      .BYTE.b	%01010101
     73  f19d		       66		      .BYTE.b	%01100110
     74  f19e
     75  f19e		       77		      .BYTE.b	%01110111
     76  f19f		       44		      .BYTE.b	%01000100
     77  f1a0		       44		      .BYTE.b	%01000100
     78  f1a1		       44		      .BYTE.b	%01000100
     79  f1a2		       77		      .BYTE.b	%01110111
     80  f1a3
     81  f1a3		       66		      .BYTE.b	%01100110
     82  f1a4		       55		      .BYTE.b	%01010101
     83  f1a5		       55		      .BYTE.b	%01010101
     84  f1a6		       55		      .BYTE.b	%01010101
     85  f1a7		       66		      .BYTE.b	%01100110
     86  f1a8
     87  f1a8		       77		      .BYTE.b	%01110111
     88  f1a9		       44		      .BYTE.b	%01000100
     89  f1aa		       66		      .BYTE.b	%01100110
     90  f1ab		       44		      .BYTE.b	%01000100
     91  f1ac		       77		      .BYTE.b	%01110111
     92  f1ad
     93  f1ad		       77		      .BYTE.b	%01110111
     94  f1ae		       44		      .BYTE.b	%01000100
     95  f1af		       66		      .BYTE.b	%01100110
     96  f1b0		       44		      .BYTE.b	%01000100
     97  f1b1		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f1b2					      include	"objects/web.asm"
      1  f1b2							;================
      2  f1b2							; Web (Playfield)
      3  f1b2							;================
      4  f1b2
      5  f1b2							; Constants
      6  f1b2
      7  f1b2		       00 00	   WEB_BG_COLOR =	#$00
      8  f1b2		       00 06	   WEB_FG_COLOR =	#$06
      9  f1b2
     10  f1b2		       00 1e	   WEB_SIZE   =	30
     11  f1b2		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f1b2		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f1b2
     14  f1b2							; Scanline Draw
     15  f1b2
     16  f1b2				   WebDrawStart
     17  f1b2
     18  f1b2							; Load Colors
     19  f1b2		       a9 00		      lda	#WEB_BG_COLOR
     20  f1b4		       85 09		      sta	COLUBK
     21  f1b6		       a9 06		      lda	#WEB_FG_COLOR
     22  f1b8		       85 08		      sta	COLUPF
     23  f1ba
     24  f1ba							; Mirror playfield and use standard playfield color
     25  f1ba		       a5 80		      lda	CtrlPf
     26  f1bc		       29 fc		      and	#%11111100
     27  f1be		       09 01		      ora	#%00000001
     28  f1c0		       85 80		      sta	CtrlPf
     29  f1c2		       85 0a		      sta	CTRLPF
     30  f1c4
     31  f1c4							; Initialize image index
     32  f1c4		       a9 00		      lda	#0
     33  f1c6		       85 99		      sta	WebIndex
     34  f1c8		       a9 01		      lda	#1
     35  f1ca		       85 9a		      sta	WebDir
     36  f1cc
     37  f1cc		       60		      rts
     38  f1cd
     39  f1cd				   WebDraw
     40  f1cd
     41  f1cd		       a4 99		      ldy	WebIndex
     42  f1cf
     43  f1cf							; Draw Image
     44  f1cf		       b9 f8 f1 	      lda	WebImagePF0,y
     45  f1d2		       85 0d		      sta	PF0
     46  f1d4		       b9 07 f2 	      lda	WebImagePF1,y
     47  f1d7		       85 0e		      sta	PF1
     48  f1d9		       b9 16 f2 	      lda	WebImagePF2,y
     49  f1dc		       85 0f		      sta	PF2
     50  f1de
     51  f1de							; Increment image index
     52  f1de		       18		      clc
     53  f1df		       98		      tya
     54  f1e0		       65 9a		      adc	WebDir
     55  f1e2		       85 99		      sta	WebIndex
     56  f1e4
     57  f1e4		       c9 0f		      cmp	#WEB_SIZE/2
     58  f1e6		       d0 06		      bne	.web_draw_return
     59  f1e8
     60  f1e8		       a9 ff		      lda	#-1
     61  f1ea		       85 9a		      sta	WebDir
     62  f1ec
     63  f1ec		       c6 99		      dec	WebIndex
     64  f1ee
     65  f1ee				   .web_draw_return
     66  f1ee		       60		      rts
     67  f1ef
     68  f1ef				   WebClean
     69  f1ef
     70  f1ef							; Clear out playfield
     71  f1ef		       a9 00		      lda	#0
     72  f1f1		       85 0d		      sta	PF0
     73  f1f3		       85 0e		      sta	PF1
     74  f1f5		       85 0f		      sta	PF2
     75  f1f7
     76  f1f7		       60		      rts
     77  f1f8
     78  f1f8							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f1f8					      include	"objects/web_image.asm"
      1  f1f8				   WebImagePF0
      2  f1f8		       00		      .BYTE.b	%00000000
      3  f1f9		       00		      .BYTE.b	%00000000
      4  f1fa		       00		      .BYTE.b	%00000000
      5  f1fb		       00		      .BYTE.b	%00000000
      6  f1fc		       00		      .BYTE.b	%00000000
      7  f1fd		       00		      .BYTE.b	%00000000
      8  f1fe		       00		      .BYTE.b	%00000000
      9  f1ff		       00		      .BYTE.b	%00000000
     10  f200		       00		      .BYTE.b	%00000000
     11  f201		       30		      .BYTE.b	%00110000
     12  f202		       e0		      .BYTE.b	%11100000
     13  f203		       20		      .BYTE.b	%00100000
     14  f204		       40		      .BYTE.b	%01000000
     15  f205		       40		      .BYTE.b	%01000000
     16  f206		       80		      .BYTE.b	%10000000
     17  f207
     18  f207				   WebImagePF1
     19  f207		       08		      .BYTE.b	%00001000
     20  f208		       06		      .BYTE.b	%00000110
     21  f209		       01		      .BYTE.b	%00000001
     22  f20a		       00		      .BYTE.b	%00000000
     23  f20b		       00		      .BYTE.b	%00000000
     24  f20c		       01		      .BYTE.b	%00000001
     25  f20d		       01		      .BYTE.b	%00000001
     26  f20e		       02		      .BYTE.b	%00000010
     27  f20f		       0c		      .BYTE.b	%00001100
     28  f210		       30		      .BYTE.b	%00110000
     29  f211		       c0		      .BYTE.b	%11000000
     30  f212		       38		      .BYTE.b	%00111000
     31  f213		       07		      .BYTE.b	%00000111
     32  f214		       00		      .BYTE.b	%00000000
     33  f215		       00		      .BYTE.b	%00000000
     34  f216
     35  f216				   WebImagePF2
     36  f216		       20		      .BYTE.b	%00100000
     37  f217		       18		      .BYTE.b	%00011000
     38  f218		       04		      .BYTE.b	%00000100
     39  f219		       03		      .BYTE.b	%00000011
     40  f21a		       3f		      .BYTE.b	%00111111
     41  f21b		       c2		      .BYTE.b	%11000010
     42  f21c		       04		      .BYTE.b	%00000100
     43  f21d		       08		      .BYTE.b	%00001000
     44  f21e		       08		      .BYTE.b	%00001000
     45  f21f		       10		      .BYTE.b	%00010000
     46  f220		       20		      .BYTE.b	%00100000
     47  f221		       20		      .BYTE.b	%00100000
     48  f222		       41		      .BYTE.b	%01000001
     49  f223		       8e		      .BYTE.b	%10001110
     50  f224		       f0		      .BYTE.b	%11110000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f225					      include	"objects/spider.asm"
      1  f225							;=================
      2  f225							; Spider (player0)
      3  f225							;=================
      4  f225
      5  f225							; Constants
      6  f225
      7  f225		       00 56	   SPIDER_COLOR =	#$56
      8  f225		       00 10	   SPIDER_SIZE =	16
      9  f225		       00 08	   SPIDER_SPRITE_SIZE =	8
     10  f225		       00 02	   SPIDER_VEL_X =	2
     11  f225		       00 02	   SPIDER_VEL_Y =	2
     12  f225
     13  f225		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f225
     15  f225							; Initialization
     16  f225
     17  f225				   SpiderInit
     18  f225
     19  f225							; Initial Control
     20  f225		       a9 32		      lda	#50
     21  f227		       85 9d		      sta	SpiderPos
     22  f229		       85 9e		      sta	SpiderPos+1
     23  f22b
     24  f22b							; Setup Sprite
      0  f22b					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f22b				   .POINTER   SET	SpiderPtr
      2  f22b				   .ADDRESS   SET	SpiderSprite
      3  f22b
      4  f22b		       a9 a5		      LDA	#<.ADDRESS
      5  f22d		       85 9b		      STA	.POINTER
      6  f22f		       a9 f3		      LDA	#>.ADDRESS
      7  f231		       85 9c		      STA	.POINTER+1
      8  f233
     26  f233
     27  f233		       a9 56		      lda	#SPIDER_COLOR
     28  f235		       85 a0		      sta	SpiderColor
     29  f237
     30  f237		       60		      rts
     31  f238
     32  f238							; Frame Update
     33  f238
     34  f238				   SpiderUpdate
     35  f238		       20 3f f2 	      jsr	SpiderControl
     36  f23b		       20 25 f3 	      jsr	SpiderCollision
     37  f23e		       60		      rts
     38  f23f
     39  f23f				   SpiderControl
     40  f23f
     41  f23f							; Control Position
     42  f23f		       a6 9d		      ldx	SpiderPos
     43  f241		       a4 9e		      ldy	SpiderPos+1
     44  f243		       ad 80 02 	      lda	SWCHA
     45  f246
     46  f246				   .spider_control_check_right
     47  f246		       30 02		      bmi	.spider_control_check_left
     48  f248
     49  f248					      REPEAT	#SPIDER_VEL_X
     50  f248		       e8		      inx
     49  f248					      REPEND
     50  f249		       e8		      inx
     51  f24a					      REPEND
     52  f24a
     53  f24a				   .spider_control_check_left
     54  f24a		       2a		      rol
     55  f24b		       30 02		      bmi	.spider_control_check_down
     56  f24d
     57  f24d					      REPEAT	#SPIDER_VEL_X
     58  f24d		       ca		      dex
     57  f24d					      REPEND
     58  f24e		       ca		      dex
     59  f24f					      REPEND
     60  f24f
     61  f24f				   .spider_control_check_down
     62  f24f		       2a		      rol
     63  f250		       30 02		      bmi	.spider_control_check_up
     64  f252
     65  f252					      REPEAT	#SPIDER_VEL_Y
     66  f252		       88		      dey
     65  f252					      REPEND
     66  f253		       88		      dey
     67  f254					      REPEND
     68  f254
     69  f254				   .spider_control_check_up
     70  f254		       2a		      rol
     71  f255		       30 02		      bmi	.spider_control_sprite
     72  f257
     73  f257					      REPEAT	#SPIDER_VEL_Y
     74  f257		       c8		      iny
     73  f257					      REPEND
     74  f258		       c8		      iny
     75  f259					      REPEND
     76  f259
     77  f259				   .spider_control_sprite
     78  f259							; Control Sprite
     79  f259		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     80  f25b
     81  f25b				   .spider_control_sprite_x
     82  f25b		       e4 9d		      cpx	SpiderPos
     83  f25d		       90 04		      bcc	.spider_control_sprite_left
     84  f25f		       f0 09		      beq	.spider_control_sprite_y
     85  f261		       b0 05		      bcs	.spider_control_sprite_right
     86  f263
     87  f263				   .spider_control_sprite_left
     88  f263		       09 80		      ora	#%10000000
     89  f265		       4c 6a f2 	      jmp	.spider_control_sprite_y
     90  f268
     91  f268				   .spider_control_sprite_right
     92  f268		       09 40		      ora	#%01000000
     93  f26a
     94  f26a				   .spider_control_sprite_y
     95  f26a		       c4 9e		      cpy	SpiderPos+1
     96  f26c		       90 04		      bcc	.spider_control_sprite_down
     97  f26e		       f0 09		      beq	.spider_control_sprite_store
     98  f270		       b0 05		      bcs	.spider_control_sprite_up
     99  f272
    100  f272				   .spider_control_sprite_down
    101  f272		       09 10		      ora	#%00010000
    102  f274		       4c 79 f2 	      jmp	.spider_control_sprite_store
    103  f277
    104  f277				   .spider_control_sprite_up
    105  f277		       09 20		      ora	#%00100000
    106  f279
    107  f279				   .spider_control_sprite_store
    108  f279		       c9 00		      cmp	#%00000000
    109  f27b		       f0 02		      beq	.spider_control_boundary
    110  f27d		       85 9f		      sta	SpiderCtrl
    111  f27f
    112  f27f				   .spider_control_boundary
    113  f27f							; Check Playfield Boundaries
    114  f27f
    115  f27f				   .spider_control_boundary_left
    116  f27f		       e0 03		      cpx	#SPIDER_VEL_X+1
    117  f281		       b0 05		      bcs	.spider_control_boundary_right
    118  f283		       a2 03		      ldx	#SPIDER_VEL_X+1
    119  f285		       4c 8e f2 	      jmp	.spider_control_boundary_top
    120  f288
    121  f288				   .spider_control_boundary_right
    122  f288		       e0 7e		      cpx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    123  f28a		       90 02		      bcc	.spider_control_boundary_top
    124  f28c		       a2 7e		      ldx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    125  f28e
    126  f28e				   .spider_control_boundary_top
    127  f28e		       c0 03		      cpy	#SPIDER_VEL_X+1
    128  f290		       b0 05		      bcs	.spider_control_boundary_bottom
    129  f292		       a0 03		      ldy	#SPIDER_VEL_X+1
    130  f294		       4c 9d f2 	      jmp	.spider_control_store
    131  f297
    132  f297				   .spider_control_boundary_bottom
    133  f297		       c0 b1		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    134  f299		       90 02		      bcc	.spider_control_store
    135  f29b		       a0 b1		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    136  f29d
    137  f29d				   .spider_control_store
    138  f29d							; Store new position
    139  f29d		       86 9d		      stx	SpiderPos
    140  f29f		       84 9e		      sty	SpiderPos+1
    141  f2a1
    142  f2a1				   .spider_control_sprite_assign
    143  f2a1							; Skip if no change
    144  f2a1		       c9 00		      cmp	#%00000000
    145  f2a3		       f0 7f		      beq	.spider_control_return
    146  f2a5
    147  f2a5		       a2 00		      ldx	#%00000000	; For reflection
    148  f2a7
    149  f2a7				   .spider_control_sprite_assign_left
    150  f2a7		       c9 80		      cmp	#%10000000
    151  f2a9		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f2ab					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f2ab				   .POINTER   SET	SpiderPtr
      2  f2ab				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f2ab
      4  f2ab		       a9 b5		      LDA	#<.ADDRESS
      5  f2ad		       85 9b		      STA	.POINTER
      6  f2af		       a9 f3		      LDA	#>.ADDRESS
      7  f2b1		       85 9c		      STA	.POINTER+1
      8  f2b3
    153  f2b3		       a2 08		      ldx	#%00001000
    154  f2b5		       4c 22 f3 	      jmp	.spider_control_reflect
    155  f2b8
    156  f2b8				   .spider_control_sprite_assign_right
    157  f2b8		       c9 40		      cmp	#%01000000
    158  f2ba		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f2bc					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f2bc				   .POINTER   SET	SpiderPtr
      2  f2bc				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f2bc
      4  f2bc		       a9 b5		      LDA	#<.ADDRESS
      5  f2be		       85 9b		      STA	.POINTER
      6  f2c0		       a9 f3		      LDA	#>.ADDRESS
      7  f2c2		       85 9c		      STA	.POINTER+1
      8  f2c4
    160  f2c4		       4c 22 f3 	      jmp	.spider_control_reflect
    161  f2c7
    162  f2c7				   .spider_control_sprite_assign_top
    163  f2c7		       c9 20		      cmp	#%00100000
    164  f2c9		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f2cb					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f2cb				   .POINTER   SET	SpiderPtr
      2  f2cb				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f2cb
      4  f2cb		       a9 a5		      LDA	#<.ADDRESS
      5  f2cd		       85 9b		      STA	.POINTER
      6  f2cf		       a9 f3		      LDA	#>.ADDRESS
      7  f2d1		       85 9c		      STA	.POINTER+1
      8  f2d3
    166  f2d3		       4c 22 f3 	      jmp	.spider_control_reflect
    167  f2d6
    168  f2d6				   .spider_control_sprite_assign_bottom
    169  f2d6		       c9 10		      cmp	#%00010000
    170  f2d8		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f2da					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f2da				   .POINTER   SET	SpiderPtr
      2  f2da				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f2da
      4  f2da		       a9 c5		      LDA	#<.ADDRESS
      5  f2dc		       85 9b		      STA	.POINTER
      6  f2de		       a9 f3		      LDA	#>.ADDRESS
      7  f2e0		       85 9c		      STA	.POINTER+1
      8  f2e2
    172  f2e2		       4c 22 f3 	      jmp	.spider_control_reflect
    173  f2e5
    174  f2e5				   .spider_control_sprite_assign_top_right
    175  f2e5		       c9 60		      cmp	#%01100000
    176  f2e7		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f2e9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f2e9				   .POINTER   SET	SpiderPtr
      2  f2e9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f2e9
      4  f2e9		       a9 ad		      LDA	#<.ADDRESS
      5  f2eb		       85 9b		      STA	.POINTER
      6  f2ed		       a9 f3		      LDA	#>.ADDRESS
      7  f2ef		       85 9c		      STA	.POINTER+1
      8  f2f1
    178  f2f1		       4c 22 f3 	      jmp	.spider_control_reflect
    179  f2f4
    180  f2f4				   .spider_control_sprite_assign_bottom_right
    181  f2f4		       c9 50		      cmp	#%01010000
    182  f2f6		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f2f8					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f2f8				   .POINTER   SET	SpiderPtr
      2  f2f8				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f2f8
      4  f2f8		       a9 bd		      LDA	#<.ADDRESS
      5  f2fa		       85 9b		      STA	.POINTER
      6  f2fc		       a9 f3		      LDA	#>.ADDRESS
      7  f2fe		       85 9c		      STA	.POINTER+1
      8  f300
    184  f300		       4c 22 f3 	      jmp	.spider_control_reflect
    185  f303
    186  f303				   .spider_control_sprite_assign_bottom_left
    187  f303		       c9 90		      cmp	#%10010000
    188  f305		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f307					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f307				   .POINTER   SET	SpiderPtr
      2  f307				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f307
      4  f307		       a9 bd		      LDA	#<.ADDRESS
      5  f309		       85 9b		      STA	.POINTER
      6  f30b		       a9 f3		      LDA	#>.ADDRESS
      7  f30d		       85 9c		      STA	.POINTER+1
      8  f30f
    190  f30f		       a2 08		      ldx	#%00001000
    191  f311		       4c 22 f3 	      jmp	.spider_control_reflect
    192  f314
    193  f314				   .spider_control_sprite_assign_top_left
    194  f314		       c9 a0		      cmp	#%10100000
    195  f316		       d0 0a		      bne	.spider_control_reflect
      0  f318					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f318				   .POINTER   SET	SpiderPtr
      2  f318				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f318
      4  f318		       a9 ad		      LDA	#<.ADDRESS
      5  f31a		       85 9b		      STA	.POINTER
      6  f31c		       a9 f3		      LDA	#>.ADDRESS
      7  f31e		       85 9c		      STA	.POINTER+1
      8  f320
    197  f320		       a2 08		      ldx	#%00001000
    198  f322
    199  f322				   .spider_control_reflect
    200  f322		       86 0b		      stx	REFP0
    201  f324
    202  f324				   .spider_control_return
    203  f324		       60		      rts
    204  f325
    205  f325				   SpiderCollision
    206  f325		       a9 56		      lda	#SPIDER_COLOR
    207  f327
    208  f327				   .spider_collision_m0
    209  f327							; Check stun status
    210  f327		       a6 ac		      ldx	BugStunned
    211  f329		       e0 00		      cpx	#0
    212  f32b		       d0 04		      bne	.spider_collision_m1
    213  f32d
    214  f32d							; Collision for M0 (V set)
    215  f32d		       24 00		      bit	CXM0P
    216  f32f		       70 0d		      bvs	.spider_collision_active
    217  f331
    218  f331				   .spider_collision_m1
    219  f331							; Check stun status
    220  f331		       a6 ad		      ldx	BugStunned+1
    221  f333		       e0 00		      cpx	#0
    222  f335		       d0 09		      bne	.spider_collision_return
    223  f337
    224  f337							; Collision for M1 (N set)
    225  f337		       24 01		      bit	CXM1P
    226  f339		       30 03		      bmi	.spider_collision_active
    227  f33b
    228  f33b		       4c 40 f3 	      jmp	.spider_collision_return
    229  f33e
    230  f33e				   .spider_collision_active
    231  f33e		       a9 44		      lda	#SPIDER_COL_COLOR
    232  f340
    233  f340				   .spider_collision_return
    234  f340		       85 a0		      sta	SpiderColor
    235  f342		       60		      rts
    236  f343
    237  f343				   SpiderPosition
    238  f343
    239  f343							; Set Position
    240  f343		       a2 00		      ldx	#0	; Object (player0)
    241  f345		       a5 9d		      lda	SpiderPos	; X Position
    242  f347		       20 00 f0 	      jsr	PosObject
    243  f34a
    244  f34a		       60		      rts
    245  f34b
    246  f34b							; Scanline Draw
    247  f34b
    248  f34b				   SpiderDrawStart
    249  f34b
    250  f34b							; Set player 0 to be double size
    251  f34b							; and missile 0 to be 4 clock size
    252  f34b		       a5 81		      lda	NuSiz0
    253  f34d		       09 07		      ora	#%00000111
    254  f34f		       85 81		      sta	NuSiz0
    255  f351		       85 04		      sta	NUSIZ0
    256  f353
    257  f353							; Set sprite color
    258  f353		       a5 a0		      lda	SpiderColor
    259  f355		       85 06		      sta	COLUP0
    260  f357
    261  f357							; Determine if we need to use vertical delay (odd line)
    262  f357		       a5 9e		      lda	SpiderPos+1	; Y Position
    263  f359		       4a		      lsr
    264  f35a		       b0 05		      bcs	.spider_draw_start_nodelay
    265  f35c
    266  f35c		       a0 01		      ldy	#1
    267  f35e		       4c 63 f3 	      jmp	.spider_draw_start_set_delay
    268  f361
    269  f361				   .spider_draw_start_nodelay
    270  f361		       a0 00		      ldy	#0
    271  f363
    272  f363				   .spider_draw_start_set_delay
    273  f363		       84 25		      sty	VDELP0
    274  f365
    275  f365				   .spider_draw_start_pos
    276  f365							; Calculate starting position
    277  f365		       18		      clc
    278  f366		       69 10		      adc	#SPIDER_SIZE
    279  f368		       85 a2		      sta	SpiderDrawPos
    280  f36a
    281  f36a							; Initialize sprite index
    282  f36a		       a9 00		      lda	#0
    283  f36c		       85 a1		      sta	SpiderIndex
    284  f36e
    285  f36e		       60		      rts
    286  f36f
    287  f36f				   SpiderDraw
    288  f36f
    289  f36f		       a4 a1		      ldy	SpiderIndex
    290  f371		       c0 10		      cpy	#(SPIDER_SPRITE_SIZE*2)
    291  f373		       f0 1f		      beq	.spider_draw_blank	; At end of sprite
    292  f375		       b0 28		      bcs	.spider_draw_return	; Completed drawing sprite
    293  f377		       c0 00		      cpy	#0
    294  f379		       d0 06		      bne	.spider_draw_line
    295  f37b
    296  f37b							; Divide y in half
    297  f37b		       8a		      txa
    298  f37c		       4a		      lsr
    299  f37d
    300  f37d		       e5 a2		      sbc	SpiderDrawPos
    301  f37f		       10 1e		      bpl	.spider_draw_return	; Not yet to draw sprite
    302  f381
    303  f381				   .spider_draw_line
    304  f381		       98		      tya
    305  f382		       4a		      lsr
    306  f383		       b0 09		      bcs	.spider_draw_skip
    307  f385		       a8		      tay
    308  f386
    309  f386		       b1 9b		      lda	(SpiderPtr),y
    310  f388		       85 1b		      sta	GRP0
    311  f38a
    312  f38a							; Using this for now until we have another sprite
    313  f38a		       a9 00		      lda	#0
    314  f38c		       85 1c		      sta	GRP1
    315  f38e
    316  f38e				   .spider_draw_skip
    317  f38e		       a4 a1		      ldy	SpiderIndex
    318  f390		       c8		      iny
    319  f391		       84 a1		      sty	SpiderIndex
    320  f393		       60		      rts		; Early return
    321  f394
    322  f394				   .spider_draw_blank
    323  f394		       a9 00		      lda	#0
    324  f396		       85 1b		      sta	GRP0
    325  f398
    326  f398							; Using this for now until we have another sprite
    327  f398		       a9 00		      lda	#0
    328  f39a		       85 1c		      sta	GRP1
    329  f39c
    330  f39c							; Push index to be one above
    331  f39c		       c8		      iny
    332  f39d		       84 a1		      sty	SpiderIndex
    333  f39f
    334  f39f				   .spider_draw_return
    335  f39f		       60		      rts
    336  f3a0
    337  f3a0				   SpiderClean
    338  f3a0
    339  f3a0							; Clear out Player0 sprite
    340  f3a0		       a9 00		      lda	#0
    341  f3a2		       85 1b		      sta	GRP0
    342  f3a4
    343  f3a4		       60		      rts
    344  f3a5
    345  f3a5							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f3a5					      include	"objects/spider_sprite.asm"
      1  f3a5				   SpiderSprite
      2  f3a5
      3  f3a5		       99		      .BYTE.b	%10011001
      4  f3a6		       bd		      .BYTE.b	%10111101
      5  f3a7		       99		      .BYTE.b	%10011001
      6  f3a8		       7e		      .BYTE.b	%01111110
      7  f3a9		       3c		      .BYTE.b	%00111100
      8  f3aa		       7e		      .BYTE.b	%01111110
      9  f3ab		       bd		      .BYTE.b	%10111101
     10  f3ac		       99		      .BYTE.b	%10011001
     11  f3ad
     12  f3ad		       0b		      .BYTE.b	%00001011
     13  f3ae		       13		      .BYTE.b	%00010011
     14  f3af		       1c		      .BYTE.b	%00011100
     15  f3b0		       2d		      .BYTE.b	%00101101
     16  f3b1		       f6		      .BYTE.b	%11110110
     17  f3b2		       b8		      .BYTE.b	%10111000
     18  f3b3		       10		      .BYTE.b	%00010000
     19  f3b4		       30		      .BYTE.b	%00110000
     20  f3b5
     21  f3b5		       c7		      .BYTE.b	%11000111
     22  f3b6		       28		      .BYTE.b	%00101000
     23  f3b7		       7a		      .BYTE.b	%01111010
     24  f3b8		       ff		      .BYTE.b	%11111111
     25  f3b9		       ff		      .BYTE.b	%11111111
     26  f3ba		       7a		      .BYTE.b	%01111010
     27  f3bb		       28		      .BYTE.b	%00101000
     28  f3bc		       c7		      .BYTE.b	%11000111
     29  f3bd
     30  f3bd		       30		      .BYTE.b	%00110000
     31  f3be		       10		      .BYTE.b	%00010000
     32  f3bf		       b8		      .BYTE.b	%10111000
     33  f3c0		       f6		      .BYTE.b	%11110110
     34  f3c1		       2d		      .BYTE.b	%00101101
     35  f3c2		       1c		      .BYTE.b	%00011100
     36  f3c3		       13		      .BYTE.b	%00010011
     37  f3c4		       0b		      .BYTE.b	%00001011
     38  f3c5
     39  f3c5		       99		      .BYTE.b	%10011001
     40  f3c6		       bd		      .BYTE.b	%10111101
     41  f3c7		       7e		      .BYTE.b	%01111110
     42  f3c8		       3c		      .BYTE.b	%00111100
     43  f3c9		       7e		      .BYTE.b	%01111110
     44  f3ca		       99		      .BYTE.b	%10011001
     45  f3cb		       bd		      .BYTE.b	%10111101
     46  f3cc		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f3cd					      include	"objects/line.asm"
      1  f3cd							;================
      2  f3cd							; Line (ball)
      3  f3cd							;================
      4  f3cd
      5  f3cd							; Constants
      6  f3cd
      7  f3cd		       00 04	   LINE_SIZE  =	4
      8  f3cd		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f3cd		       00 04	   LINE_VEL_X =	4
     10  f3cd		       00 04	   LINE_VEL_Y =	4
     11  f3cd
     12  f3cd		       00 08	   LINE_AUDIO_C =	8
     13  f3cd		       00 01	   LINE_AUDIO_F =	1
     14  f3cd		       00 04	   LINE_AUDIO_V =	4
     15  f3cd
     16  f3cd		       00 08	   LINE_SAMPLE_LEN =	8
     17  f3cd		       00 03	   LINE_SAMPLE_C =	3
     18  f3cd		       00 01	   LINE_SAMPLE_F =	1
     19  f3cd		       00 04	   LINE_SAMPLE_V =	4
     20  f3cd
     21  f3cd							; Initialization
     22  f3cd
     23  f3cd				   LineInit
     24  f3cd
     25  f3cd							; Initial Line Control
     26  f3cd		       a9 00		      lda	#0
     27  f3cf		       85 a3		      sta	LineEnabled
     28  f3d1		       85 a4		      sta	LinePos+0
     29  f3d3		       85 a5		      sta	LinePos+1
     30  f3d5		       85 a6		      sta	LineVelocity+0
     31  f3d7		       85 a7		      sta	LineVelocity+1
     32  f3d9		       85 a8		      sta	LineStartPos+0
     33  f3db		       85 a9		      sta	LineStartPos+1
     34  f3dd		       85 aa		      sta	LineDrawPos+0
     35  f3df		       85 ab		      sta	LineDrawPos+1
     36  f3e1
     37  f3e1		       60		      rts
     38  f3e2
     39  f3e2							; Frame Update
     40  f3e2
     41  f3e2				   LineUpdate
     42  f3e2		       20 ec f3 	      jsr	LineControl
     43  f3e5		       20 9e f4 	      jsr	LineObject
     44  f3e8		       20 e5 f4 	      jsr	LineCollision
     45  f3eb		       60		      rts
     46  f3ec
     47  f3ec				   LineControl
     48  f3ec
     49  f3ec							; Check if Fire Button on controller 1 is pressed
     50  f3ec		       a5 0c		      lda	INPT4
     51  f3ee		       30 0a		      bmi	.line_control_skip
     52  f3f0
     53  f3f0		       24 a3		      bit	LineEnabled
     54  f3f2		       30 06		      bmi	.line_control_skip
     55  f3f4
     56  f3f4		       a5 9f		      lda	SpiderCtrl
     57  f3f6		       c9 00		      cmp	#0
     58  f3f8		       d0 03		      bne	.line_control_fire
     59  f3fa
     60  f3fa				   .line_control_skip
     61  f3fa		       4c 9d f4 	      jmp	.line_control_return
     62  f3fd
     63  f3fd				   .line_control_fire
     64  f3fd		       20 40 f5 	      jsr	LineEnable
     65  f400
     66  f400				   .line_control_x
     67  f400		       a5 9f		      lda	SpiderCtrl
     68  f402		       29 c0		      and	#%11000000
     69  f404		       f0 0e		      beq	.line_control_x_none
     70  f406				   .line_control_x_left
     71  f406		       c9 80		      cmp	#%10000000
     72  f408		       d0 05		      bne	.line_control_x_right
     73  f40a
     74  f40a		       a9 fc		      lda	#-LINE_VEL_X
     75  f40c		       4c 16 f4 	      jmp	.line_control_x_store
     76  f40f				   .line_control_x_right
     77  f40f		       a9 04		      lda	#LINE_VEL_X
     78  f411		       4c 16 f4 	      jmp	.line_control_x_store
     79  f414				   .line_control_x_none
     80  f414		       a9 00		      lda	#0
     81  f416				   .line_control_x_store
     82  f416		       85 a6		      sta	LineVelocity
     83  f418
     84  f418				   .line_control_y
     85  f418		       a5 9f		      lda	SpiderCtrl
     86  f41a		       29 30		      and	#%00110000
     87  f41c		       f0 0e		      beq	.line_control_y_none
     88  f41e				   .line_control_y_up
     89  f41e		       c9 20		      cmp	#%00100000
     90  f420		       d0 05		      bne	.line_control_y_down
     91  f422
     92  f422		       a9 04		      lda	#LINE_VEL_Y
     93  f424		       4c 2e f4 	      jmp	.line_control_y_store
     94  f427				   .line_control_y_down
     95  f427		       a9 fc		      lda	#-LINE_VEL_Y
     96  f429		       4c 2e f4 	      jmp	.line_control_y_store
     97  f42c				   .line_control_y_none
     98  f42c		       a9 00		      lda	#0
     99  f42e				   .line_control_y_store
    100  f42e		       85 a7		      sta	LineVelocity+1
    101  f430
    102  f430				   .line_control_position
    103  f430
    104  f430		       a2 00		      ldx	#0	; offsetX
    105  f432		       a0 00		      ldy	#0	; offsetY
    106  f434
    107  f434		       a5 9f		      lda	SpiderCtrl
    108  f436		       29 f0		      and	#%11110000
    109  f438
    110  f438				   .line_control_position_left
    111  f438		       c9 80		      cmp	#%10000000
    112  f43a		       d0 07		      bne	.line_control_position_right
    113  f43c
    114  f43c		       a2 04		      ldx	#LINE_SIZE
    115  f43e		       a0 10		      ldy	#SPIDER_SIZE
    116  f440		       4c 85 f4 	      jmp	.line_control_position_store
    117  f443
    118  f443				   .line_control_position_right
    119  f443		       c9 40		      cmp	#%01000000
    120  f445		       d0 07		      bne	.line_control_position_top
    121  f447
    122  f447		       a2 20		      ldx	#SPIDER_SIZE*2
    123  f449		       a0 10		      ldy	#SPIDER_SIZE
    124  f44b		       4c 85 f4 	      jmp	.line_control_position_store
    125  f44e
    126  f44e				   .line_control_position_top
    127  f44e		       c9 20		      cmp	#%00100000
    128  f450		       d0 07		      bne	.line_control_position_bottom
    129  f452
    130  f452		       a2 10		      ldx	#SPIDER_SIZE
    131  f454		       a0 20		      ldy	#SPIDER_SIZE*2
    132  f456		       4c 85 f4 	      jmp	.line_control_position_store
    133  f459
    134  f459				   .line_control_position_bottom
    135  f459		       c9 10		      cmp	#%00010000
    136  f45b		       d0 05		      bne	.line_control_position_top_right
    137  f45d
    138  f45d		       a2 10		      ldx	#SPIDER_SIZE
    139  f45f		       4c 85 f4 	      jmp	.line_control_position_store
    140  f462
    141  f462				   .line_control_position_top_right
    142  f462		       c9 60		      cmp	#%01100000
    143  f464		       d0 07		      bne	.line_control_position_bottom_right
    144  f466
    145  f466		       a2 20		      ldx	#SPIDER_SIZE*2
    146  f468		       a0 20		      ldy	#SPIDER_SIZE*2
    147  f46a		       4c 85 f4 	      jmp	.line_control_position_store
    148  f46d
    149  f46d				   .line_control_position_bottom_right
    150  f46d		       c9 50		      cmp	#%01010000
    151  f46f		       d0 05		      bne	.line_control_position_bottom_left
    152  f471
    153  f471		       a2 20		      ldx	#SPIDER_SIZE*2
    154  f473		       4c 85 f4 	      jmp	.line_control_position_store
    155  f476
    156  f476				   .line_control_position_bottom_left
    157  f476		       c9 90		      cmp	#%10010000
    158  f478		       d0 03		      bne	.line_control_position_top_left
    159  f47a
    160  f47a							; No Offset
    161  f47a		       4c 85 f4 	      jmp	.line_control_position_store
    162  f47d
    163  f47d				   .line_control_position_top_left
    164  f47d		       c9 a0		      cmp	#%10100000
    165  f47f		       d0 04		      bne	.line_control_position_store
    166  f481
    167  f481		       a2 04		      ldx	#LINE_SIZE
    168  f483		       a0 20		      ldy	#SPIDER_SIZE*2
    169  f485
    170  f485				   .line_control_position_store
    171  f485
    172  f485							; Apply offsetX to playerX
    173  f485		       a5 9d		      lda	SpiderPos
    174  f487		       86 83		      stx	Temp
    175  f489		       18		      clc
    176  f48a		       65 83		      adc	Temp
    177  f48c		       aa		      tax
    178  f48d
    179  f48d							; Apply offsetY to playerY
    180  f48d		       a5 9e		      lda	SpiderPos+1
    181  f48f		       84 83		      sty	Temp
    182  f491		       18		      clc
    183  f492		       65 83		      adc	Temp
    184  f494		       a8		      tay
    185  f495
    186  f495		       86 a4		      stx	LinePos
    187  f497		       84 a5		      sty	LinePos+1
    188  f499		       86 a8		      stx	LineStartPos
    189  f49b		       84 a9		      sty	LineStartPos+1
    190  f49d
    191  f49d				   .line_control_return
    192  f49d		       60		      rts
    193  f49e
    194  f49e				   LineObject
    195  f49e
    196  f49e							; Check if line is enabled
    197  f49e		       24 a3		      bit	LineEnabled
    198  f4a0		       10 42		      bpl	.line_object_return
    199  f4a2
    200  f4a2							; Load position
    201  f4a2		       a6 a4		      ldx	LinePos
    202  f4a4		       a4 a5		      ldy	LinePos+1
    203  f4a6
    204  f4a6				   .line_object_distance
    205  f4a6
    206  f4a6							; Check distance from player with absolute value differences
    207  f4a6
    208  f4a6				   .line_object_distance_x
    209  f4a6		       8a		      txa
    210  f4a7		       18		      clc
    211  f4a8		       e5 a8		      sbc	LineStartPos
    212  f4aa		       b0 04		      bcs	.line_object_distance_x_check
    213  f4ac		       49 ff		      eor	#$FF	; C flag is clear here
    214  f4ae		       69 01		      adc	#$01	; form two's complement
    215  f4b0				   .line_object_distance_x_check		; Jumps to if positive
    216  f4b0		       c9 40		      cmp	#LINE_DISTANCE
    217  f4b2		       b0 2d		      bcs	.line_object_disable
    218  f4b4
    219  f4b4				   .line_object_distance_y
    220  f4b4		       98		      tya
    221  f4b5		       18		      clc
    222  f4b6		       e5 a9		      sbc	LineStartPos+1
    223  f4b8		       b0 04		      bcs	.line_object_distance_y_check
    224  f4ba		       49 ff		      eor	#$FF	; C flag is clear here
    225  f4bc		       69 01		      adc	#$01	; form two's complement
    226  f4be				   .line_object_distance_y_check		; Jumps to if positive
    227  f4be		       c9 40		      cmp	#LINE_DISTANCE
    228  f4c0		       b0 1f		      bcs	.line_object_disable
    229  f4c2
    230  f4c2				   .line_object_boundary
    231  f4c2				   .line_object_boundary_left
    232  f4c2		       e0 04		      cpx	#LINE_VEL_X
    233  f4c4		       90 1b		      bcc	.line_object_disable
    234  f4c6				   .line_object_boundary_right
    235  f4c6		       e0 9c		      cpx	#160-LINE_VEL_X
    236  f4c8		       b0 17		      bcs	.line_object_disable
    237  f4ca				   .line_object_boundary_bottom
    238  f4ca		       c0 04		      cpy	#LINE_VEL_Y
    239  f4cc		       90 13		      bcc	.line_object_disable
    240  f4ce				   .line_object_boundary_top
    241  f4ce		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    242  f4d0		       b0 0f		      bcs	.line_object_disable
    243  f4d2
    244  f4d2				   .line_object_velocity
    245  f4d2
    246  f4d2							; Apply Velocity
    247  f4d2		       8a		      txa
    248  f4d3		       18		      clc
    249  f4d4		       65 a6		      adc	LineVelocity
    250  f4d6		       85 a4		      sta	LinePos
    251  f4d8
    252  f4d8		       98		      tya
    253  f4d9		       18		      clc
    254  f4da		       65 a7		      adc	LineVelocity+1
    255  f4dc		       85 a5		      sta	LinePos+1
    256  f4de
    257  f4de		       4c e4 f4 	      jmp	.line_object_return
    258  f4e1
    259  f4e1				   .line_object_disable
    260  f4e1		       20 4e f5 	      jsr	LineDisable
    261  f4e4
    262  f4e4				   .line_object_return
    263  f4e4		       60		      rts
    264  f4e5
    265  f4e5				   LineCollision
    266  f4e5
    267  f4e5		       a9 78		      lda	#BUG_STUN_LENGTH
    268  f4e7
    269  f4e7				   .line_collision_m0
    270  f4e7		       24 04		      bit	CXM0FB
    271  f4e9		       50 08		      bvc	.line_collision_m1
    272  f4eb
    273  f4eb							; Set stun timer
    274  f4eb		       85 ac		      sta	BugStunned+0
    275  f4ed
    276  f4ed							; Disable line
    277  f4ed		       20 4e f5 	      jsr	LineDisable
    278  f4f0		       4c fc f4 	      jmp	.line_collision_sample
    279  f4f3
    280  f4f3				   .line_collision_m1
    281  f4f3		       24 05		      bit	CXM1FB
    282  f4f5		       50 08		      bvc	.line_collision_return
    283  f4f7
    284  f4f7							; Set stun timer
    285  f4f7		       85 ad		      sta	BugStunned+1
    286  f4f9
    287  f4f9							; Disable line
    288  f4f9		       20 4e f5 	      jsr	LineDisable
    289  f4fc
    290  f4fc				   .line_collision_sample
    291  f4fc		       20 72 f5 	      jsr	LineSample
    292  f4ff
    293  f4ff				   .line_collision_return
    294  f4ff		       60		      rts
    295  f500
    296  f500				   LinePosition
    297  f500
    298  f500							; Set Line Position
    299  f500		       a2 04		      ldx	#4	; Object (ball)
    300  f502		       a5 a4		      lda	LinePos	; X Position
    301  f504		       20 00 f0 	      jsr	PosObject
    302  f507
    303  f507		       60		      rts
    304  f508
    305  f508							; Scanline Draw
    306  f508
    307  f508				   LineDrawStart
    308  f508
    309  f508							; Set ball size to be 4 clocks (4/5 bits)
    310  f508		       a5 80		      lda	CtrlPf
    311  f50a		       29 cf		      and	#%11001111
    312  f50c		       09 20		      ora	#%00100000
    313  f50e		       85 80		      sta	CtrlPf
    314  f510		       85 0a		      sta	CTRLPF
    315  f512
    316  f512							; Determine if we need to use vertical delay (oven line)
    317  f512		       a5 a5		      lda	LinePos+1
    318  f514		       4a		      lsr
    319  f515		       90 05		      bcc	.line_draw_start_nodelay
    320  f517
    321  f517		       a0 01		      ldy	#1
    322  f519		       4c 1e f5 	      jmp	.line_draw_start_set_delay
    323  f51c
    324  f51c				   .line_draw_start_nodelay
    325  f51c		       a0 00		      ldy	#0
    326  f51e
    327  f51e				   .line_draw_start_set_delay
    328  f51e		       84 27		      sty	VDELBL
    329  f520
    330  f520				   .line_draw_start_pos
    331  f520							; Calculate starting position
    332  f520		       18		      clc
    333  f521		       85 aa		      sta	LineDrawPos+0
    334  f523		       69 02		      adc	#LINE_SIZE/2
    335  f525		       85 ab		      sta	LineDrawPos+1
    336  f527
    337  f527		       60		      rts
    338  f528
    339  f528				   LineDraw
    340  f528
    341  f528		       a0 00		      ldy	#%00000000
    342  f52a
    343  f52a							; Check if visible
    344  f52a		       24 a3		      bit	LineEnabled
    345  f52c		       10 0a		      bpl	.line_draw_off
    346  f52e
    347  f52e							; Load half scanline
    348  f52e							;    lda Temp+1
    349  f52e
    350  f52e							; Top
    351  f52e		       c5 ab		      cmp	LineDrawPos+1
    352  f530		       b0 06		      bcs	.line_draw_off
    353  f532
    354  f532							; Bottom
    355  f532		       c5 aa		      cmp	LineDrawPos+0
    356  f534		       90 02		      bcc	.line_draw_off
    357  f536
    358  f536				   .line_draw_on
    359  f536		       a0 02		      ldy	#%00000010
    360  f538
    361  f538				   .line_draw_off
    362  f538		       84 1f		      sty	ENABL
    363  f53a
    364  f53a		       60		      rts
    365  f53b
    366  f53b				   LineClean
    367  f53b
    368  f53b							; Clear out Line
    369  f53b		       a9 00		      lda	#0
    370  f53d		       85 1f		      sta	ENABL
    371  f53f
    372  f53f		       60		      rts
    373  f540
    374  f540				   LineEnable
    375  f540		       a9 80		      lda	#%10000000
    376  f542		       85 a3		      sta	LineEnabled
    377  f544
    378  f544		       a5 90		      lda	SampleStep
    379  f546		       c9 00		      cmp	#0
    380  f548		       d0 03		      bne	.line_enable_return
    381  f54a
    382  f54a		       20 5c f5 	      jsr	LineAudioPlay
    383  f54d
    384  f54d				   .line_enable_return
    385  f54d		       60		      rts
    386  f54e
    387  f54e				   LineDisable
    388  f54e		       a9 00		      lda	#0
    389  f550		       85 a3		      sta	LineEnabled
    390  f552
    391  f552		       a5 90		      lda	SampleStep
    392  f554		       c9 00		      cmp	#0
    393  f556		       d0 03		      bne	.line_disable_return
    394  f558
    395  f558		       20 69 f5 	      jsr	LineAudioMute
    396  f55b
    397  f55b				   .line_disable_return
    398  f55b		       60		      rts
    399  f55c
    400  f55c				   LineAudioPlay
    401  f55c		       a9 08		      lda	#LINE_AUDIO_C
    402  f55e		       85 16		      sta	AUDC1
    403  f560		       a9 01		      lda	#LINE_AUDIO_F
    404  f562		       85 18		      sta	AUDF1
    405  f564		       a9 04		      lda	#LINE_AUDIO_V
    406  f566		       85 1a		      sta	AUDV1
    407  f568		       60		      rts
    408  f569
    409  f569				   LineAudioMute
    410  f569		       a9 00		      lda	#0
    411  f56b		       85 1a		      sta	AUDV1
    412  f56d		       85 18		      sta	AUDF1
    413  f56f		       85 16		      sta	AUDC1
    414  f571		       60		      rts
    415  f572
    416  f572				   LineSample
    417  f572		       a9 08		      lda	#LINE_SAMPLE_LEN
    418  f574		       85 90		      sta	SampleStep
    419  f576		       a9 03		      lda	#LINE_SAMPLE_C
    420  f578		       85 16		      sta	AUDC1
    421  f57a		       a9 01		      lda	#LINE_SAMPLE_F
    422  f57c		       85 18		      sta	AUDF1
    423  f57e		       a9 04		      lda	#LINE_SAMPLE_V
    424  f580		       85 1a		      sta	AUDV1
    425  f582		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f583					      include	"objects/bug.asm"
      1  f583							;======================
      2  f583							; Bugs (missiles 0 & 1)
      3  f583							;======================
      4  f583
      5  f583							; Constants
      6  f583
      7  f583		       00 08	   BUG_SIZE   =	8
      8  f583		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f583		       00 02	   BUG_SPEED  =	2
     10  f583		       00 78	   BUG_STUN_LENGTH =	120
     11  f583		       00 04	   BUG_POINTS =	4
     12  f583
     13  f583		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f583		       00 38	   BUG_COLOR_STUN =	#$38
     15  f583
     16  f583		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f583		       00 03	   BUG_SAMPLE_C =	3
     18  f583		       00 14	   BUG_SAMPLE_F =	20
     19  f583		       00 04	   BUG_SAMPLE_V =	4
     20  f583
     21  f583							; Initialization
     22  f583
     23  f583				   BugInit
     24  f583
     25  f583							; Initialize Bugs
     26  f583		       a2 01		      ldx	#1
     27  f585
     28  f585				   .bug_init_loop
     29  f585		       20 8c f5 	      jsr	BugReset
     30  f588
     31  f588		       ca		      dex
     32  f589		       10 fa		      bpl	.bug_init_loop
     33  f58b
     34  f58b		       60		      rts
     35  f58c
     36  f58c				   BugReset		; x = bug (0 or 1)
     37  f58c
     38  f58c							; Set random position
     39  f58c		       20 13 f0 	      jsr	Random
     40  f58f
     41  f58f		       a5 85		      lda	Rand8
     42  f591		       29 7f		      and	#$7f
     43  f593		       95 ae		      sta	BugPosX,x
     44  f595
     45  f595		       a5 86		      lda	Rand16
     46  f597		       29 7f		      and	#$7f
     47  f599		       95 b0		      sta	BugPosY,x
     48  f59b
     49  f59b							; Set as active
     50  f59b		       a9 00		      lda	#0
     51  f59d		       95 ac		      sta	BugStunned,x
     52  f59f
     53  f59f							; Reset Color
     54  f59f		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     55  f5a1		       95 b2		      sta	BugColor,x
     56  f5a3
     57  f5a3		       60		      rts
     58  f5a4
     59  f5a4							; Frame Update
     60  f5a4
     61  f5a4				   BugUpdate
     62  f5a4
     63  f5a4		       a2 01		      ldx	#1
     64  f5a6				   .bug_update_loop
     65  f5a6		       86 83		      stx	Temp+0
     66  f5a8
     67  f5a8		       b5 ac		      lda	BugStunned,x
     68  f5aa		       c9 00		      cmp	#0
     69  f5ac		       f0 08		      beq	.bug_update_active
     70  f5ae
     71  f5ae				   .bug_update_stunned
     72  f5ae		       d6 ac		      dec	BugStunned,x
     73  f5b0		       20 26 f6 	      jsr	BugStunCollision
     74  f5b3		       4c bc f5 	      jmp	.bug_update_next
     75  f5b6
     76  f5b6				   .bug_update_active
     77  f5b6		       20 c2 f5 	      jsr	BugMovement
     78  f5b9		       20 15 f6 	      jsr	BugCollision
     79  f5bc
     80  f5bc				   .bug_update_next
     81  f5bc		       a6 83		      ldx	Temp+0
     82  f5be		       ca		      dex
     83  f5bf		       10 e5		      bpl	.bug_update_loop
     84  f5c1
     85  f5c1		       60		      rts
     86  f5c2
     87  f5c2				   BugMovement
     88  f5c2
     89  f5c2				   .bug_movement_random
     90  f5c2		       20 13 f0 	      jsr	Random
     91  f5c5		       29 03		      and	#%00000011
     92  f5c7		       85 84		      sta	Temp+1
     93  f5c9
     94  f5c9				   .bug_movement_load
     95  f5c9							; Load x and y values
     96  f5c9		       a6 83		      ldx	Temp+0
     97  f5cb		       b5 ae		      lda	BugPosX,x
     98  f5cd		       b4 b0		      ldy	BugPosY,x
     99  f5cf		       aa		      tax
    100  f5d0
    101  f5d0				   .bug_movement_x
    102  f5d0							; Alter X Position
    103  f5d0		       a5 84		      lda	Temp+1
    104  f5d2		       29 01		      and	#%00000001
    105  f5d4
    106  f5d4				   .bug_movement_x_left
    107  f5d4		       c9 01		      cmp	#1
    108  f5d6		       d0 05		      bne	.bug_movement_x_right
    109  f5d8		       ca		      dex
    110  f5d9		       ca		      dex
    111  f5da		       4c df f5 	      jmp	.bug_movement_y
    112  f5dd
    113  f5dd				   .bug_movement_x_right
    114  f5dd		       e8		      inx
    115  f5de		       e8		      inx
    116  f5df
    117  f5df				   .bug_movement_y
    118  f5df							; Alter Y Position
    119  f5df		       a5 84		      lda	Temp+1
    120  f5e1		       29 02		      and	#%00000010
    121  f5e3		       4a		      lsr
    122  f5e4
    123  f5e4				   .bug_movement_y_up
    124  f5e4		       c9 01		      cmp	#1
    125  f5e6		       d0 05		      bne	.bug_movement_y_down
    126  f5e8		       c8		      iny
    127  f5e9		       c8		      iny
    128  f5ea		       4c ef f5 	      jmp	.bug_movement_boundary
    129  f5ed
    130  f5ed				   .bug_movement_y_down
    131  f5ed		       88		      dey
    132  f5ee		       88		      dey
    133  f5ef
    134  f5ef				   .bug_movement_boundary
    135  f5ef
    136  f5ef				   .bug_movement_boundary_left
    137  f5ef		       e0 08		      cpx	#BUG_BOUNDARY
    138  f5f1		       b0 05		      bcs	.bug_movement_boundary_right
    139  f5f3		       a2 08		      ldx	#BUG_BOUNDARY
    140  f5f5		       4c fe f5 	      jmp	.bug_movement_boundary_top
    141  f5f8
    142  f5f8				   .bug_movement_boundary_right
    143  f5f8		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    144  f5fa		       90 02		      bcc	.bug_movement_boundary_top
    145  f5fc		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    146  f5fe
    147  f5fe				   .bug_movement_boundary_top
    148  f5fe		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    149  f600		       b0 05		      bcs	.bug_movement_boundary_bottom
    150  f602		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    151  f604		       4c 0d f6 	      jmp	.bug_movement_store
    152  f607
    153  f607				   .bug_movement_boundary_bottom
    154  f607		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    155  f609		       90 02		      bcc	.bug_movement_store
    156  f60b		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    157  f60d
    158  f60d				   .bug_movement_store
    159  f60d		       8a		      txa
    160  f60e		       a6 83		      ldx	Temp+0
    161  f610		       95 ae		      sta	BugPosX,x
    162  f612		       94 b0		      sty	BugPosY,x
    163  f614
    164  f614				   .bug_movement_return
    165  f614		       60		      rts
    166  f615
    167  f615				   BugCollision
    168  f615
    169  f615		       e0 01		      cpx	#1
    170  f617		       f0 05		      beq	.bug_collision_m1
    171  f619
    172  f619				   .bug_collision_m0
    173  f619							; Collision for M0 (V set)
    174  f619		       24 00		      bit	CXM0P
    175  f61b		       70 06		      bvs	.bug_collision_active
    176  f61d		       60		      rts
    177  f61e
    178  f61e				   .bug_collision_m1
    179  f61e							; Collision for M1 (N set)
    180  f61e		       24 01		      bit	CXM1P
    181  f620		       30 01		      bmi	.bug_collision_active
    182  f622		       60		      rts
    183  f623
    184  f623				   .bug_collision_active
    185  f623		       c6 91		      dec	ScoreValue
    186  f625		       60		      rts
    187  f626
    188  f626				   BugStunCollision
    189  f626
    190  f626		       e0 01		      cpx	#1
    191  f628		       f0 05		      beq	.bug_stun_collision_m1
    192  f62a
    193  f62a				   .bug_stun_collision_m0
    194  f62a							; Collision for M0 (V set)
    195  f62a		       24 00		      bit	CXM0P
    196  f62c		       70 06		      bvs	.bug_stun_collision_active
    197  f62e		       60		      rts
    198  f62f
    199  f62f				   .bug_stun_collision_m1
    200  f62f							; Collision for M1 (N set)
    201  f62f		       24 01		      bit	CXM1P
    202  f631		       30 01		      bmi	.bug_stun_collision_active
    203  f633		       60		      rts
    204  f634
    205  f634				   .bug_stun_collision_active
    206  f634							; Add points to score
    207  f634		       18		      clc
    208  f635		       a5 92		      lda	ScoreValue+1
    209  f637		       69 04		      adc	#BUG_POINTS
    210  f639		       85 92		      sta	ScoreValue+1
    211  f63b
    212  f63b							; Reset bug
    213  f63b		       20 8c f5 	      jsr	BugReset
    214  f63e
    215  f63e							; Play sample
    216  f63e		       20 9e f6 	      jsr	BugSample
    217  f641
    218  f641		       60		      rts
    219  f642
    220  f642							; Horizontal Positioning
    221  f642
    222  f642				   BugPosition
    223  f642
    224  f642							; Set Position of each missile
    225  f642		       a0 01		      ldy	#1
    226  f644				   .bug_position
    227  f644
    228  f644							; Determine missile index
    229  f644		       18		      clc
    230  f645		       a2 02		      ldx	#2	; Missile 0/1
    231  f647		       98		      tya
    232  f648		       85 83		      sta	Temp
    233  f64a		       8a		      txa
    234  f64b		       65 83		      adc	Temp
    235  f64d		       aa		      tax
    236  f64e
    237  f64e		       b9 ae 00 	      lda	BugPosX,y
    238  f651		       20 00 f0 	      jsr	PosObject
    239  f654
    240  f654		       88		      dey
    241  f655		       10 ed		      bpl	.bug_position
    242  f657
    243  f657		       60		      rts
    244  f658
    245  f658							; Scanline Draw
    246  f658
    247  f658				   BugDrawStart
    248  f658
    249  f658							; Set missile 0 to be 4 clock size
    250  f658		       a5 81		      lda	NuSiz0
    251  f65a		       09 30		      ora	#%00110000
    252  f65c		       85 81		      sta	NuSiz0
    253  f65e		       85 04		      sta	NUSIZ0
    254  f660
    255  f660							; Set missile 1 to be 4 clock size
    256  f660		       a5 82		      lda	NuSiz1
    257  f662		       09 30		      ora	#%00110000
    258  f664		       85 82		      sta	NuSiz1
    259  f666		       85 05		      sta	NUSIZ1
    260  f668
    261  f668							; Setup half scanline positions
    262  f668		       a0 01		      ldy	#1
    263  f66a				   .bug_draw_start_pos
    264  f66a		       b9 b0 00 	      lda	BugPosY,y
    265  f66d		       4a		      lsr
    266  f66e		       99 b4 00 	      sta	BugDrawPosBottom,y
    267  f671
    268  f671		       69 04		      adc	#BUG_SIZE/2
    269  f673		       99 b6 00 	      sta	BugDrawPosTop,y
    270  f676
    271  f676		       88		      dey
    272  f677		       10 f1		      bpl	.bug_draw_start_pos
    273  f679
    274  f679		       60		      rts
    275  f67a
    276  f67a				   BugDraw
    277  f67a
    278  f67a							; Load half scanline
    279  f67a							;    lda Temp+1
    280  f67a
    281  f67a				   .bug_draw_0
    282  f67a		       a0 00		      ldy	#%00000000
    283  f67c
    284  f67c							; Check top and bottom y pos
    285  f67c		       c5 b6		      cmp	BugDrawPosTop+0
    286  f67e		       b0 06		      bcs	.bug_draw_0_off
    287  f680
    288  f680		       c5 b4		      cmp	BugDrawPosBottom+0
    289  f682		       90 02		      bcc	.bug_draw_0_off
    290  f684
    291  f684				   .bug_draw_0_on
    292  f684		       a0 02		      ldy	#%00000010
    293  f686
    294  f686				   .bug_draw_0_off
    295  f686		       84 1d		      sty	ENAM0
    296  f688
    297  f688				   .bug_draw_1
    298  f688		       a0 00		      ldy	#%00000000
    299  f68a
    300  f68a							; Check top and bottom y pos
    301  f68a		       c5 b7		      cmp	BugDrawPosTop+1
    302  f68c		       b0 06		      bcs	.bug_draw_1_off
    303  f68e
    304  f68e		       c5 b5		      cmp	BugDrawPosBottom+1
    305  f690		       90 02		      bcc	.bug_draw_1_off
    306  f692
    307  f692				   .bug_draw_1_on
    308  f692		       a0 02		      ldy	#%00000010
    309  f694
    310  f694				   .bug_draw_1_off
    311  f694		       84 1e		      sty	ENAM1
    312  f696
    313  f696				   .bug_draw_return
    314  f696		       60		      rts
    315  f697
    316  f697				   BugClean
    317  f697		       a9 00		      lda	#0
    318  f699		       85 1d		      sta	ENAM0
    319  f69b		       85 1e		      sta	ENAM1
    320  f69d		       60		      rts
    321  f69e
    322  f69e				   BugSample
    323  f69e		       a9 1e		      lda	#BUG_SAMPLE_LEN
    324  f6a0		       85 90		      sta	SampleStep
    325  f6a2		       a9 03		      lda	#BUG_SAMPLE_C
    326  f6a4		       85 16		      sta	AUDC1
    327  f6a6		       a9 14		      lda	#BUG_SAMPLE_F
    328  f6a8		       85 18		      sta	AUDF1
    329  f6aa		       a9 04		      lda	#BUG_SAMPLE_V
    330  f6ac		       85 1a		      sta	AUDV1
    331  f6ae		       60		      rts
------- FILE game.asm
     20  f6af							;    include "objects/swatter.asm"
     21  f6af
     22  f6af							; Initialization
     23  f6af
     24  f6af				   GameInit
     25  f6af
     26  f6af							; Setup logic and kernel
      0  f6af					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  f6af				   .POINTER   SET	VBlankPtr
      2  f6af				   .ADDRESS   SET	GameVerticalBlank
      3  f6af
      4  f6af		       a9 f0		      LDA	#<.ADDRESS
      5  f6b1		       85 87		      STA	.POINTER
      6  f6b3		       a9 f6		      LDA	#>.ADDRESS
      7  f6b5		       85 88		      STA	.POINTER+1
      8  f6b7
      0  f6b7					      SET_POINTER	KernelPtr, GameKernel
      1  f6b7				   .POINTER   SET	KernelPtr
      2  f6b7				   .ADDRESS   SET	GameKernel
      3  f6b7
      4  f6b7		       a9 6d		      LDA	#<.ADDRESS
      5  f6b9		       85 89		      STA	.POINTER
      6  f6bb		       a9 f7		      LDA	#>.ADDRESS
      7  f6bd		       85 8a		      STA	.POINTER+1
      8  f6bf
      0  f6bf					      SET_POINTER	OverScanPtr, GameOverScan
      1  f6bf				   .POINTER   SET	OverScanPtr
      2  f6bf				   .ADDRESS   SET	GameOverScan
      3  f6bf
      4  f6bf		       a9 11		      LDA	#<.ADDRESS
      5  f6c1		       85 8b		      STA	.POINTER
      6  f6c3		       a9 f7		      LDA	#>.ADDRESS
      7  f6c5		       85 8c		      STA	.POINTER+1
      8  f6c7
     30  f6c7
     31  f6c7							; Mute Audio
     32  f6c7		       a9 00		      lda	#0
     33  f6c9		       85 15		      sta	AUDC0
     34  f6cb		       85 19		      sta	AUDV0
     35  f6cd		       85 17		      sta	AUDF0
     36  f6cf		       85 16		      sta	AUDC1
     37  f6d1		       85 1a		      sta	AUDV1
     38  f6d3		       85 18		      sta	AUDF1
     39  f6d5		       85 90		      sta	SampleStep
     40  f6d7
     41  f6d7							; Load Audio Settings
     42  f6d7		       a9 04		      lda	#GAME_AUDIO_VOLUME
     43  f6d9		       85 19		      sta	AUDV0
     44  f6db
     45  f6db							; Make it so that we play the first note immediately
     46  f6db		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     47  f6dd		       85 8f		      sta	AudioStep
     48  f6df		       a9 02		      lda	#2
     49  f6e1		       85 8e		      sta	FrameTimer
     50  f6e3
     51  f6e3							; Initialize Objects
     52  f6e3		       20 c9 f0 	      jsr	ScoreInit
     53  f6e6		       20 25 f2 	      jsr	SpiderInit
     54  f6e9		       20 cd f3 	      jsr	LineInit
     55  f6ec		       20 83 f5 	      jsr	BugInit
     56  f6ef							;    jsr SwatterInit
     57  f6ef
     58  f6ef		       60		      rts
     59  f6f0
     60  f6f0				   GameVerticalBlank
     61  f6f0
     62  f6f0							; Refresh random values
     63  f6f0		       20 13 f0 	      jsr	Random
     64  f6f3
     65  f6f3							; Update Objects
     66  f6f3		       20 38 f2 	      jsr	SpiderUpdate
     67  f6f6		       20 e2 f3 	      jsr	LineUpdate
     68  f6f9		       20 a4 f5 	      jsr	BugUpdate
     69  f6fc							;    jsr SwatterUpdate
     70  f6fc		       20 d2 f0 	      jsr	ScoreUpdate
     71  f6ff
     72  f6ff							; Reset Collisions
     73  f6ff		       85 2c		      sta	CXCLR
     74  f701
     75  f701							; Clear horizontal movement
     76  f701		       85 2b		      sta	HMCLR
     77  f703
     78  f703							; Update Positions
     79  f703		       20 43 f3 	      jsr	SpiderPosition
     80  f706		       20 00 f5 	      jsr	LinePosition
     81  f709		       20 42 f6 	      jsr	BugPosition
     82  f70c							;    jsr SwatterPosition
     83  f70c
     84  f70c							; Set final x positions
     85  f70c		       85 02		      sta	WSYNC
     86  f70e		       85 2a		      sta	HMOVE
     87  f710
     88  f710		       60		      rts
     89  f711
     90  f711				   GameOverScan
     91  f711
     92  f711							; Audio Routines
     93  f711		       20 2f f7 	      jsr	GameAudio
     94  f714		       20 1b f7 	      jsr	GameSample
     95  f717
     96  f717							; State Routines
     97  f717		       20 63 f7 	      jsr	GameDeath
     98  f71a
     99  f71a		       60		      rts
    100  f71b
    101  f71b				   GameSample
    102  f71b
    103  f71b		       a6 90		      ldx	SampleStep
    104  f71d		       e0 00		      cpx	#0
    105  f71f		       f0 0b		      beq	.game_sample_return
    106  f721
    107  f721		       ca		      dex
    108  f722		       d0 08		      bne	.game_sample_return
    109  f724
    110  f724				   .game_sample_mute
    111  f724		       a9 00		      lda	#0
    112  f726		       85 1a		      sta	AUDV1
    113  f728		       85 18		      sta	AUDF1
    114  f72a		       85 16		      sta	AUDC1
    115  f72c
    116  f72c				   .game_sample_return
    117  f72c		       86 90		      stx	SampleStep
    118  f72e		       60		      rts
    119  f72f
    120  f72f				   GameAudio
    121  f72f
    122  f72f		       a6 8e		      ldx	FrameTimer
    123  f731		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    124  f733		       f0 25		      beq	.game_audio_mute_note
    125  f735		       e0 00		      cpx	#0
    126  f737		       d0 29		      bne	.game_audio_return
    127  f739
    128  f739							; Reset Timer
    129  f739		       a2 09		      ldx	#GAME_AUDIO_STEP
    130  f73b		       86 8e		      stx	FrameTimer
    131  f73d
    132  f73d				   .game_audio_play
    133  f73d
    134  f73d							; Increment melody position
    135  f73d		       a4 8f		      ldy	AudioStep
    136  f73f		       c8		      iny
    137  f740
    138  f740		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    139  f742		       d0 02		      bne	.game_audio_play_note
    140  f744
    141  f744							; Loop our audio step
    142  f744		       a0 00		      ldy	#0
    143  f746
    144  f746				   .game_audio_play_note
    145  f746
    146  f746							; Save current position
    147  f746		       84 8f		      sty	AudioStep
    148  f748
    149  f748							; Melody Line
    150  f748		       b9 d1 f7 	      lda	GameAudio0,y
    151  f74b		       c9 ff		      cmp	#$FF
    152  f74d		       f0 0b		      beq	.game_audio_mute_note
    153  f74f		       85 17		      sta	AUDF0
    154  f751		       a9 06		      lda	#GAME_AUDIO_TONE
    155  f753		       85 15		      sta	AUDC0
    156  f755		       a9 04		      lda	#GAME_AUDIO_VOLUME
    157  f757		       85 19		      sta	AUDV0
    158  f759
    159  f759		       60		      rts
    160  f75a
    161  f75a				   .game_audio_mute_note
    162  f75a
    163  f75a		       a9 00		      lda	#0
    164  f75c		       85 17		      sta	AUDF0
    165  f75e		       85 15		      sta	AUDC0
    166  f760		       85 19		      sta	AUDV0
    167  f762
    168  f762				   .game_audio_return
    169  f762		       60		      rts
    170  f763
    171  f763				   GameDeath
    172  f763		       a5 91		      lda	ScoreValue+0
    173  f765		       c9 00		      cmp	#0
    174  f767		       d0 03		      bne	.game_death_return
    175  f769
    176  f769							; Show Game Over Screen
    177  f769		       20 f1 f7 	      jsr	OverInit
    178  f76c
    179  f76c				   .game_death_return
    180  f76c		       60		      rts
    181  f76d
    182  f76d				   GameKernel
    183  f76d
    184  f76d							; Turn on display
    185  f76d		       a9 00		      lda	#0
    186  f76f		       85 01		      sta	VBLANK
    187  f771
    188  f771				   .game_kernel_score
    189  f771
    190  f771							; Draw Score on top first
    191  f771		       20 f2 f0 	      jsr	ScoreDraw
    192  f774
    193  f774				   .game_kernel_objects_start
    194  f774
    195  f774							; Setup Drawing Objects
    196  f774		       20 b2 f1 	      jsr	WebDrawStart
    197  f777		       20 4b f3 	      jsr	SpiderDrawStart
    198  f77a		       20 08 f5 	      jsr	LineDrawStart
    199  f77d		       20 58 f6 	      jsr	BugDrawStart
    200  f780							;    jsr SwatterDrawStart
    201  f780
    202  f780							; Start Scanline Counter
    203  f780		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    204  f782							; The extra 5 is for processing overflow
    205  f782
    206  f782							; Half scanline counter in Temp+1
    207  f782		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    208  f784		       85 84		      sta	Temp+1
    209  f786
    210  f786				   .game_kernel_objects
    211  f786
    212  f786							; Draw Objects in order
    213  f786
    214  f786							;    jsr LineDraw
    215  f786							;    jsr BugDraw
    216  f786		       20 cd f1 	      jsr	WebDraw	; Every 6 lines
    217  f789
    218  f789		       85 02		      sta	WSYNC
    219  f78b		       ca		      dex
    220  f78c		       f0 34		      beq	.game_kernel_clean
    221  f78e
    222  f78e		       20 6f f3 	      jsr	SpiderDraw	; Every odd scanline
    223  f791							;    jsr SwatterDraw
    224  f791
    225  f791		       85 02		      sta	WSYNC
    226  f793		       c6 84		      dec	Temp+1
    227  f795		       ca		      dex
    228  f796		       f0 2a		      beq	.game_kernel_clean
    229  f798
    230  f798		       a5 84		      lda	Temp+1
    231  f79a		       20 28 f5 	      jsr	LineDraw
    232  f79d		       20 7a f6 	      jsr	BugDraw
    233  f7a0
    234  f7a0							;    sta WSYNC
    235  f7a0		       ca		      dex
    236  f7a1		       f0 1f		      beq	.game_kernel_clean
    237  f7a3
    238  f7a3		       20 6f f3 	      jsr	SpiderDraw
    239  f7a6							;    jsr SwatterDraw
    240  f7a6
    241  f7a6		       85 02		      sta	WSYNC
    242  f7a8		       c6 84		      dec	Temp+1
    243  f7aa		       ca		      dex
    244  f7ab		       f0 15		      beq	.game_kernel_clean
    245  f7ad
    246  f7ad		       a5 84		      lda	Temp+1
    247  f7af		       20 28 f5 	      jsr	LineDraw
    248  f7b2		       20 7a f6 	      jsr	BugDraw
    249  f7b5
    250  f7b5							;    sta WSYNC
    251  f7b5		       ca		      dex
    252  f7b6		       f0 0a		      beq	.game_kernel_clean
    253  f7b8
    254  f7b8		       20 6f f3 	      jsr	SpiderDraw
    255  f7bb							;    jsr SwatterDraw
    256  f7bb
    257  f7bb		       85 02		      sta	WSYNC
    258  f7bd		       c6 84		      dec	Temp+1
    259  f7bf		       ca		      dex
    260  f7c0		       d0 c4		      bne	.game_kernel_objects
    261  f7c2
    262  f7c2				   .game_kernel_clean
    263  f7c2
    264  f7c2		       20 ef f1 	      jsr	WebClean
    265  f7c5		       20 a0 f3 	      jsr	SpiderClean
    266  f7c8		       20 3b f5 	      jsr	LineClean
    267  f7cb		       20 97 f6 	      jsr	BugClean
    268  f7ce							;    jsr SwatterDraw
    269  f7ce
    270  f7ce		       85 02		      sta	WSYNC
    271  f7d0
    272  f7d0				   .game_kernel_return
    273  f7d0		       60		      rts
    274  f7d1
    275  f7d1				   GameAudio0
    276  f7d1		       0d		      .byte.b	#13	; D
    277  f7d2		       ff		      .byte.b	#$FF
    278  f7d3		       0f		      .byte.b	#15	; B
    279  f7d4		       ff		      .byte.b	#$FF
    280  f7d5		       0d		      .byte.b	#13	; D
    281  f7d6		       ff		      .byte.b	#$FF
    282  f7d7		       0f		      .byte.b	#15	; B
    283  f7d8		       ff		      .byte.b	#$FF
    284  f7d9		       0d		      .byte.b	#13	; D
    285  f7da		       0d		      .byte.b	#13	; D
    286  f7db		       0f		      .byte.b	#15	; B
    287  f7dc		       ff		      .byte.b	#$FF
    288  f7dd		       0c		      .byte.b	#12	; D#
    289  f7de		       ff		      .byte.b	#$FF
    290  f7df		       0f		      .byte.b	#15	; B
    291  f7e0		       ff		      .byte.b	#$FF
    292  f7e1		       0b		      .byte.b	#11	; E
    293  f7e2		       ff		      .byte.b	#$FF
    294  f7e3		       0e		      .byte.b	#14	; C#
    295  f7e4		       ff		      .byte.b	#$FF
    296  f7e5		       0b		      .byte.b	#11
    297  f7e6		       ff		      .byte.b	#$FF
    298  f7e7		       0e		      .byte.b	#14
    299  f7e8		       ff		      .byte.b	#$FF
    300  f7e9		       0b		      .byte.b	#11
    301  f7ea		       0b		      .byte.b	#11
    302  f7eb		       0e		      .byte.b	#14
    303  f7ec		       ff		      .byte.b	#$FF
    304  f7ed		       0b		      .byte.b	#11
    305  f7ee		       ff		      .byte.b	#$FF
    306  f7ef		       0e		      .byte.b	#14
    307  f7f0		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  f7f1					      include	"over.asm"
      1  f7f1							;================
      2  f7f1							; Constants
      3  f7f1							;================
      4  f7f1
      5  f7f1		       00 dc	   OVER_FRAMES =	220
      6  f7f1
      7  f7f1		       00 00	   OVER_BG_COLOR =	#$00
      8  f7f1		       00 44	   OVER_FG_COLOR =	#$44
      9  f7f1
     10  f7f1		       00 07	   OVER_AUDIO_TONE =	7
     11  f7f1		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  f7f1		       00 06	   OVER_AUDIO_LENGTH =	6
     13  f7f1		       00 10	   OVER_AUDIO_STEP =	16
     14  f7f1
     15  f7f1		       00 0b	   OVER_IMAGE_SIZE =	11
     16  f7f1		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  f7f1		       00 58	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  f7f1		       00 2d	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  f7f1
     20  f7f1				   OverInit
     21  f7f1
     22  f7f1							; Setup logic and kernel
      0  f7f1					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  f7f1				   .POINTER   SET	VBlankPtr
      2  f7f1				   .ADDRESS   SET	OverVerticalBlank
      3  f7f1
      4  f7f1		       a9 33		      LDA	#<.ADDRESS
      5  f7f3		       85 87		      STA	.POINTER
      6  f7f5		       a9 f8		      LDA	#>.ADDRESS
      7  f7f7		       85 88		      STA	.POINTER+1
      8  f7f9
      0  f7f9					      SET_POINTER	KernelPtr, OverKernel
      1  f7f9				   .POINTER   SET	KernelPtr
      2  f7f9				   .ADDRESS   SET	OverKernel
      3  f7f9
      4  f7f9		       a9 71		      LDA	#<.ADDRESS
      5  f7fb		       85 89		      STA	.POINTER
      6  f7fd		       a9 f8		      LDA	#>.ADDRESS
      7  f7ff		       85 8a		      STA	.POINTER+1
      8  f801
      0  f801					      SET_POINTER	OverScanPtr, OverOverScan
      1  f801				   .POINTER   SET	OverScanPtr
      2  f801				   .ADDRESS   SET	OverOverScan
      3  f801
      4  f801		       a9 37		      LDA	#<.ADDRESS
      5  f803		       85 8b		      STA	.POINTER
      6  f805		       a9 f8		      LDA	#>.ADDRESS
      7  f807		       85 8c		      STA	.POINTER+1
      8  f809
     26  f809
     27  f809							; Load Colors
     28  f809		       a9 00		      lda	#OVER_BG_COLOR
     29  f80b		       85 09		      sta	COLUBK
     30  f80d		       a9 44		      lda	#OVER_FG_COLOR
     31  f80f		       85 08		      sta	COLUPF
     32  f811
     33  f811							; Load audio settings
     34  f811		       a9 07		      lda	#OVER_AUDIO_TONE
     35  f813		       85 15		      sta	AUDC0
     36  f815		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  f817		       85 19		      sta	AUDV0
     38  f819		       a9 00		      lda	#0
     39  f81b		       85 16		      sta	AUDC1
     40  f81d		       85 1a		      sta	AUDV1
     41  f81f		       a9 00		      lda	#0
     42  f821		       85 8f		      sta	AudioStep
     43  f823
     44  f823							; Play first note
     45  f823		       ad d7 f8 	      lda	OverAudio0,AudioStep
     46  f826		       85 17		      sta	AUDF0
     47  f828
     48  f828							; Setup frame counters
     49  f828		       a9 00		      lda	#0
     50  f82a		       85 8d		      sta	Frame
     51  f82c		       a9 10		      lda	#OVER_AUDIO_STEP
     52  f82e		       85 8e		      sta	FrameTimer
     53  f830		       85 84		      sta	Temp+1
     54  f832
     55  f832		       60		      rts
     56  f833
     57  f833				   OverVerticalBlank
     58  f833		       20 d2 f0 	      jsr	ScoreUpdate
     59  f836		       60		      rts
     60  f837
     61  f837				   OverOverScan
     62  f837		       20 3e f8 	      jsr	OverAudio
     63  f83a		       20 67 f8 	      jsr	OverState
     64  f83d		       60		      rts
     65  f83e
     66  f83e				   OverAudio
     67  f83e
     68  f83e		       a6 8e		      ldx	FrameTimer
     69  f840		       e0 00		      cpx	#0
     70  f842		       d0 22		      bne	.over_audio_return
     71  f844
     72  f844							; Reset Timer
     73  f844		       a6 84		      ldx	Temp+1
     74  f846					      REPEAT	3
     75  f846		       e8		      inx
     74  f846					      REPEND
     75  f847		       e8		      inx
     74  f847					      REPEND
     75  f848		       e8		      inx
     76  f849					      REPEND
     77  f849		       86 8e		      stx	FrameTimer
     78  f84b		       86 84		      stx	Temp+1
     79  f84d
     80  f84d				   .over_audio_play
     81  f84d
     82  f84d							; Increment melody position
     83  f84d		       a4 8f		      ldy	AudioStep
     84  f84f		       c8		      iny
     85  f850
     86  f850		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  f852		       f0 0c		      beq	.over_audio_mute_note
     88  f854
     89  f854				   .over_audio_play_note
     90  f854
     91  f854							; Save current position
     92  f854		       84 8f		      sty	AudioStep
     93  f856
     94  f856							; Melody Line
     95  f856		       b9 d7 f8 	      lda	OverAudio0,y
     96  f859		       85 17		      sta	AUDF0
     97  f85b		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  f85d		       85 19		      sta	AUDV0
     99  f85f
    100  f85f		       60		      rts
    101  f860
    102  f860				   .over_audio_mute_note
    103  f860		       a9 00		      lda	#0
    104  f862		       85 17		      sta	AUDF0
    105  f864		       85 19		      sta	AUDV0
    106  f866
    107  f866				   .over_audio_return
    108  f866		       60		      rts
    109  f867
    110  f867				   OverState
    111  f867		       a5 8d		      lda	Frame
    112  f869		       c9 dc		      cmp	#OVER_FRAMES
    113  f86b		       d0 03		      bne	.over_state_return
    114  f86d
    115  f86d							;    jsr TitleInit
    116  f86d		       20 af f6 	      jsr	GameInit
    117  f870
    118  f870				   .over_state_return
    119  f870		       60		      rts
    120  f871
    121  f871				   OverKernel
    122  f871
    123  f871							; Turn on display
    124  f871		       a9 00		      lda	#0
    125  f873		       85 01		      sta	VBLANK
    126  f875
    127  f875				   .over_kernel_score
    128  f875
    129  f875							; Draw Score on top first (no update)
    130  f875		       20 f2 f0 	      jsr	ScoreDraw
    131  f878
    132  f878				   .over_kernel_init
    133  f878							; Playfield Control
    134  f878		       a5 80		      lda	CtrlPf
    135  f87a		       29 fd		      and	#%11111101	; Use playfield foreground color
    136  f87c		       09 01		      ora	#%00000001	; Set mirroring
    137  f87e		       85 80		      sta	CtrlPf
    138  f880		       85 0a		      sta	CTRLPF
    139  f882
    140  f882				   .over_kernel_top_padding
    141  f882							; Top Padding
    142  f882		       20 a6 f8 	      jsr	OverPadding
    143  f885
    144  f885				   .over_kernel_image
    145  f885		       a2 0a		      ldx	#OVER_IMAGE_SIZE-1
    146  f887
    147  f887				   .over_kernel_image_next
    148  f887		       bd cc f8 	      lda	OverImagePF2,x
    149  f88a		       85 0f		      sta	PF2
    150  f88c		       bd c1 f8 	      lda	OverImagePF1,x
    151  f88f		       85 0e		      sta	PF1
    152  f891		       bd b6 f8 	      lda	OverImagePF0,x
    153  f894		       85 0d		      sta	PF0
    154  f896
    155  f896		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    156  f898				   .over_kernel_image_loop
    157  f898		       85 02		      sta	WSYNC
    158  f89a		       88		      dey
    159  f89b		       d0 fb		      bne	.over_kernel_image_loop
    160  f89d
    161  f89d		       ca		      dex
    162  f89e		       10 e7		      bpl	.over_kernel_image_next
    163  f8a0
    164  f8a0				   .over_kernel_bottom_padding
    165  f8a0							; Bottom Padding
    166  f8a0		       20 a6 f8 	      jsr	OverPadding
    167  f8a3
    168  f8a3				   .over_kernel_return
    169  f8a3		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    170  f8a5		       60		      rts
    171  f8a6
    172  f8a6				   OverPadding
    173  f8a6		       a9 00		      lda	#0
    174  f8a8		       85 0d		      sta	PF0
    175  f8aa		       85 0e		      sta	PF1
    176  f8ac		       85 0f		      sta	PF2
    177  f8ae
    178  f8ae		       a2 2d		      ldx	#OVER_IMAGE_PADDING
    179  f8b0				   .over_padding_loop
    180  f8b0		       85 02		      sta	WSYNC
    181  f8b2		       ca		      dex
    182  f8b3		       d0 fb		      bne	.over_padding_loop
    183  f8b5
    184  f8b5		       60		      rts
    185  f8b6
    186  f8b6				   OverAssets
    187  f8b6
    188  f8b6							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  f8b6					      include	"over_image.asm"
      1  f8b6				   OverImagePF0
      2  f8b6		       00		      .BYTE.b	%00000000
      3  f8b7		       00		      .BYTE.b	%00000000
      4  f8b8		       00		      .BYTE.b	%00000000
      5  f8b9		       00		      .BYTE.b	%00000000
      6  f8ba		       00		      .BYTE.b	%00000000
      7  f8bb		       00		      .BYTE.b	%00000000
      8  f8bc		       00		      .BYTE.b	%00000000
      9  f8bd		       00		      .BYTE.b	%00000000
     10  f8be		       00		      .BYTE.b	%00000000
     11  f8bf		       00		      .BYTE.b	%00000000
     12  f8c0		       00		      .BYTE.b	%00000000
     13  f8c1
     14  f8c1				   OverImagePF1
     15  f8c1		       0c		      .BYTE.b	%00001100
     16  f8c2		       13		      .BYTE.b	%00010011
     17  f8c3		       20		      .BYTE.b	%00100000
     18  f8c4		       23		      .BYTE.b	%00100011
     19  f8c5		       24		      .BYTE.b	%00100100
     20  f8c6		       24		      .BYTE.b	%00100100
     21  f8c7		       14		      .BYTE.b	%00010100
     22  f8c8		       12		      .BYTE.b	%00010010
     23  f8c9		       10		      .BYTE.b	%00010000
     24  f8ca		       08		      .BYTE.b	%00001000
     25  f8cb		       08		      .BYTE.b	%00001000
     26  f8cc
     27  f8cc				   OverImagePF2
     28  f8cc		       e0		      .BYTE.b	%11100000
     29  f8cd		       18		      .BYTE.b	%00011000
     30  f8ce		       05		      .BYTE.b	%00000101
     31  f8cf		       52		      .BYTE.b	%01010010
     32  f8d0		       23		      .BYTE.b	%00100011
     33  f8d1		       52		      .BYTE.b	%01010010
     34  f8d2		       02		      .BYTE.b	%00000010
     35  f8d3		       04		      .BYTE.b	%00000100
     36  f8d4		       18		      .BYTE.b	%00011000
     37  f8d5		       e0		      .BYTE.b	%11100000
     38  f8d6		       00		      .BYTE.b	%00000000
------- FILE over.asm
    190  f8d7
    191  f8d7				   OverAudio0
    192  f8d7
    193  f8d7		       0c		      .BYTE.b	#12	; D#2
    194  f8d8		       0d		      .BYTE.b	#13	; D2
    195  f8d9		       11		      .BYTE.b	#17	; A1
    196  f8da		       16		      .BYTE.b	#22	; F1
    197  f8db		       1a		      .BYTE.b	#26	; D1
    198  f8dc		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    291  f8dd
    292  f8dd							;================
    293  f8dd							; End of cart
    294  f8dd							;================
    295  f8dd
    296  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    297  fffa
    298  fffa				   InterruptVectors
    299  fffa
    300  fffa		       21 f0		      .word.w	InitSystem	; NMI
    301  fffc		       21 f0		      .word.w	InitSystem	; RESET
    302  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    303  10000
    304  10000					       END
