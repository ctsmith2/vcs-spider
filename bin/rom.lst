------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 11th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00cb ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00 00    Temp       ds	3
     61 U0086		       00	   Rand8      ds	1
     62 U0087		       00	   Rand16     ds	1
     63 U0088
     64 U0088		       00 00	   VBlankPtr  ds	2
     65 U008a		       00 00	   KernelPtr  ds	2
     66 U008c		       00 00	   OverScanPtr ds	2
     67 U008e
     68 U008e		       00	   Frame      ds	1
     69 U008f		       00 00	   FrameTimer ds	2
     70 U0091		       00	   InputState ds	1
     71 U0092
     72 U0092		       00	   AudioStep  ds	1
     73 U0093
     74 U0093		       00	   SampleStep ds	1
     75 U0094
     76 U0094							; Score
     77 U0094
     78 U0094		       00 00	   ScoreValue ds	2
     79 U0096		       00 00	   ScoreDigitOnes ds	2
     80 U0098		       00 00	   ScoreDigitTens ds	2
     81 U009a		       00 00 00    ScoreDigitGfx ds	3
     82 U009d		       00 00	   ScoreBarGfx ds	2
     83 U009f
     84 U009f							; Level
     85 U009f		       00	   LevelCurrent ds	1
     86 U00a0
     87 U00a0							; Web
     88 U00a0
     89 U00a0		       00	   WebIndex   ds	1
     90 U00a1		       00 00	   WebColor   ds	2
     91 U00a3
     92 U00a3							; Spider
     93 U00a3
     94 U00a3		       00 00	   SpiderPtr  ds	2
     95 U00a5		       00 00	   SpiderPos  ds	2
     96 U00a7		       00	   SpiderCtrl ds	1
     97 U00a8		       00	   SpiderColor ds	1
     98 U00a9
     99 U00a9		       00	   SpiderIndex ds	1
    100 U00aa		       00	   SpiderDrawPos ds	1
    101 U00ab		       00	   SpiderLine ds	1
    102 U00ac
    103 U00ac		       00 00	   SpiderPtr2 ds	2
    104 U00ae
    105 U00ae							; Line
    106 U00ae
    107 U00ae		       00	   LineEnabled ds	1
    108 U00af		       00 00	   LinePos    ds	2
    109 U00b1		       00 00	   LineVelocity ds	2
    110 U00b3		       00 00	   LineDrawPos ds	2
    111 U00b5
    112 U00b5							; Bug
    113 U00b5
    114 U00b5		       00	   BugSpeed   ds	1
    115 U00b6
    116 U00b6		       00 00	   BugStunned ds	2
    117 U00b8		       00 00	   BugPosX    ds	2
    118 U00ba		       00 00	   BugPosY    ds	2
    119 U00bc
    120 U00bc		       00 00	   BugDrawPosBottom ds	2
    121 U00be		       00 00	   BugDrawPosTop ds	2
    122 U00c0
    123 U00c0							; Swatter
    124 U00c0
    125 U00c0		       00 00	   SwatterPos ds	2
    126 U00c2		       00	   SwatterState ds	1
    127 U00c3		       00	   SwatterColor ds	1
    128 U00c4
    129 U00c4		       00	   SwatterWaitTime ds	1
    130 U00c5		       00	   SwatterHitDamage ds	1
    131 U00c6
    132 U00c6		       00	   SwatterIndex ds	1
    133 U00c7		       00	   SwatterDrawPos ds	1
    134 U00c8		       00	   SwatterLine ds	1
    135 U00c9
    136 U00c9		       00	   SwatterSampleCount ds	1
    137 U00ca		       00	   SwatterSampleF ds	1
    138 U00cb
    139  10000 ????				       SEG
    140  f000					      org	$F000	; Start of cart area
    141  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 86		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 87		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 86		      sta	Rand8
     49  f01e		       45 87		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 83		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 84		      sta	Temp+1
     70  f029		       85 85		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 83		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 84		      lda	Temp+1	; And add into result
     77  f031		       65 84		      adc	Temp+1
     78  f033		       85 84		      sta	Temp+1
     79  f035
     80  f035		       a5 85		      lda	Temp+2	; Propagating any carry
     81  f037		       65 85		      adc	Temp+2
     82  f039		       85 85		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 84		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 85		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    143  f044
    144  f044							; Assets
    145  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    149  f0bc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0bc					      include	"objects/score_digits.asm"
      1  f0bc				   ScoreDigits
      2  f0bc
      3  f0bc		       77		      .BYTE.b	%01110111
      4  f0bd		       55		      .BYTE.b	%01010101
      5  f0be		       55		      .BYTE.b	%01010101
      6  f0bf		       55		      .BYTE.b	%01010101
      7  f0c0		       77		      .BYTE.b	%01110111
      8  f0c1
      9  f0c1		       11		      .BYTE.b	%00010001
     10  f0c2		       11		      .BYTE.b	%00010001
     11  f0c3		       11		      .BYTE.b	%00010001
     12  f0c4		       11		      .BYTE.b	%00010001
     13  f0c5		       11		      .BYTE.b	%00010001
     14  f0c6
     15  f0c6		       77		      .BYTE.b	%01110111
     16  f0c7		       11		      .BYTE.b	%00010001
     17  f0c8		       77		      .BYTE.b	%01110111
     18  f0c9		       44		      .BYTE.b	%01000100
     19  f0ca		       77		      .BYTE.b	%01110111
     20  f0cb
     21  f0cb		       77		      .BYTE.b	%01110111
     22  f0cc		       11		      .BYTE.b	%00010001
     23  f0cd		       33		      .BYTE.b	%00110011
     24  f0ce		       11		      .BYTE.b	%00010001
     25  f0cf		       77		      .BYTE.b	%01110111
     26  f0d0
     27  f0d0		       55		      .BYTE.b	%01010101
     28  f0d1		       55		      .BYTE.b	%01010101
     29  f0d2		       77		      .BYTE.b	%01110111
     30  f0d3		       11		      .BYTE.b	%00010001
     31  f0d4		       11		      .BYTE.b	%00010001
     32  f0d5
     33  f0d5		       77		      .BYTE.b	%01110111
     34  f0d6		       44		      .BYTE.b	%01000100
     35  f0d7		       77		      .BYTE.b	%01110111
     36  f0d8		       11		      .BYTE.b	%00010001
     37  f0d9		       77		      .BYTE.b	%01110111
     38  f0da
     39  f0da		       77		      .BYTE.b	%01110111
     40  f0db		       44		      .BYTE.b	%01000100
     41  f0dc		       77		      .BYTE.b	%01110111
     42  f0dd		       55		      .BYTE.b	%01010101
     43  f0de		       77		      .BYTE.b	%01110111
     44  f0df
     45  f0df		       77		      .BYTE.b	%01110111
     46  f0e0		       11		      .BYTE.b	%00010001
     47  f0e1		       22		      .BYTE.b	%00100010
     48  f0e2		       22		      .BYTE.b	%00100010
     49  f0e3		       22		      .BYTE.b	%00100010
     50  f0e4
     51  f0e4		       77		      .BYTE.b	%01110111
     52  f0e5		       55		      .BYTE.b	%01010101
     53  f0e6		       77		      .BYTE.b	%01110111
     54  f0e7		       55		      .BYTE.b	%01010101
     55  f0e8		       77		      .BYTE.b	%01110111
     56  f0e9
     57  f0e9		       77		      .BYTE.b	%01110111
     58  f0ea		       55		      .BYTE.b	%01010101
     59  f0eb		       77		      .BYTE.b	%01110111
     60  f0ec		       11		      .BYTE.b	%00010001
     61  f0ed		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f0ee					      include	"objects/score_digits_flip.asm"
      1  f0ee				   ScoreDigitsFlip
      2  f0ee
      3  f0ee		       ee		      .BYTE.b	%11101110
      4  f0ef		       aa		      .BYTE.b	%10101010
      5  f0f0		       aa		      .BYTE.b	%10101010
      6  f0f1		       aa		      .BYTE.b	%10101010
      7  f0f2		       ee		      .BYTE.b	%11101110
      8  f0f3
      9  f0f3		       88		      .BYTE.b	%10001000
     10  f0f4		       88		      .BYTE.b	%10001000
     11  f0f5		       88		      .BYTE.b	%10001000
     12  f0f6		       88		      .BYTE.b	%10001000
     13  f0f7		       88		      .BYTE.b	%10001000
     14  f0f8
     15  f0f8		       ee		      .BYTE.b	%11101110
     16  f0f9		       88		      .BYTE.b	%10001000
     17  f0fa		       ee		      .BYTE.b	%11101110
     18  f0fb		       22		      .BYTE.b	%00100010
     19  f0fc		       ee		      .BYTE.b	%11101110
     20  f0fd
     21  f0fd		       ee		      .BYTE.b	%11101110
     22  f0fe		       88		      .BYTE.b	%10001000
     23  f0ff		       cc		      .BYTE.b	%11001100
     24  f100		       88		      .BYTE.b	%10001000
     25  f101		       ee		      .BYTE.b	%11101110
     26  f102
     27  f102		       aa		      .BYTE.b	%10101010
     28  f103		       aa		      .BYTE.b	%10101010
     29  f104		       ee		      .BYTE.b	%11101110
     30  f105		       88		      .BYTE.b	%10001000
     31  f106		       88		      .BYTE.b	%10001000
     32  f107
     33  f107		       ee		      .BYTE.b	%11101110
     34  f108		       22		      .BYTE.b	%00100010
     35  f109		       ee		      .BYTE.b	%11101110
     36  f10a		       88		      .BYTE.b	%10001000
     37  f10b		       ee		      .BYTE.b	%11101110
     38  f10c
     39  f10c		       ee		      .BYTE.b	%11101110
     40  f10d		       22		      .BYTE.b	%00100010
     41  f10e		       ee		      .BYTE.b	%11101110
     42  f10f		       aa		      .BYTE.b	%10101010
     43  f110		       ee		      .BYTE.b	%11101110
     44  f111
     45  f111		       ee		      .BYTE.b	%11101110
     46  f112		       88		      .BYTE.b	%10001000
     47  f113		       44		      .BYTE.b	%01000100
     48  f114		       44		      .BYTE.b	%01000100
     49  f115		       44		      .BYTE.b	%01000100
     50  f116
     51  f116		       ee		      .BYTE.b	%11101110
     52  f117		       aa		      .BYTE.b	%10101010
     53  f118		       ee		      .BYTE.b	%11101110
     54  f119		       aa		      .BYTE.b	%10101010
     55  f11a		       ee		      .BYTE.b	%11101110
     56  f11b
     57  f11b		       ee		      .BYTE.b	%11101110
     58  f11c		       aa		      .BYTE.b	%10101010
     59  f11d		       ee		      .BYTE.b	%11101110
     60  f11e		       88		      .BYTE.b	%10001000
     61  f11f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f120					      include	"objects/score_label.asm"
      1  f120				   ScoreLabel
      2  f120
      3  f120		       20		      .BYTE.b	%00100000
      4  f121		       50		      .BYTE.b	%01010000
      5  f122		       ee		      .BYTE.b	%11101110
      6  f123		       00		      .BYTE.b	%00000000
      7  f124		       57		      .BYTE.b	%01010111
      8  f125		       00		      .BYTE.b	%00000000
      9  f126
     10  f126		       20		      .BYTE.b	%00100000
     11  f127		       50		      .BYTE.b	%01010000
     12  f128		       4a		      .BYTE.b	%01001010
     13  f129		       00		      .BYTE.b	%00000000
     14  f12a		       55		      .BYTE.b	%01010101
     15  f12b		       00		      .BYTE.b	%00000000
     16  f12c
     17  f12c		       20		      .BYTE.b	%00100000
     18  f12d		       50		      .BYTE.b	%01010000
     19  f12e		       4e		      .BYTE.b	%01001110
     20  f12f		       00		      .BYTE.b	%00000000
     21  f130		       77		      .BYTE.b	%01110111
     22  f131		       00		      .BYTE.b	%00000000
     23  f132
     24  f132		       20		      .BYTE.b	%00100000
     25  f133		       50		      .BYTE.b	%01010000
     26  f134		       42		      .BYTE.b	%01000010
     27  f135		       00		      .BYTE.b	%00000000
     28  f136		       54		      .BYTE.b	%01010100
     29  f137		       00		      .BYTE.b	%00000000
     30  f138
     31  f138		       e0		      .BYTE.b	%11100000
     32  f139		       20		      .BYTE.b	%00100000
     33  f13a		       42		      .BYTE.b	%01000010
     34  f13b		       00		      .BYTE.b	%00000000
     35  f13c		       54		      .BYTE.b	%01010100
     36  f13d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    153  f13e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f13e					      include	"objects/web_image.asm"
      1  f13e				   WebImagePF0
      2  f13e		       00		      .BYTE.b	%00000000
      3  f13f		       00		      .BYTE.b	%00000000
      4  f140		       00		      .BYTE.b	%00000000
      5  f141		       00		      .BYTE.b	%00000000
      6  f142		       00		      .BYTE.b	%00000000
      7  f143		       00		      .BYTE.b	%00000000
      8  f144		       00		      .BYTE.b	%00000000
      9  f145		       00		      .BYTE.b	%00000000
     10  f146		       30		      .BYTE.b	%00110000
     11  f147		       e0		      .BYTE.b	%11100000
     12  f148		       20		      .BYTE.b	%00100000
     13  f149		       40		      .BYTE.b	%01000000
     14  f14a		       40		      .BYTE.b	%01000000
     15  f14b		       80		      .BYTE.b	%10000000
     16  f14c		       80		      .BYTE.b	%10000000
     17  f14d		       40		      .BYTE.b	%01000000
     18  f14e		       40		      .BYTE.b	%01000000
     19  f14f		       20		      .BYTE.b	%00100000
     20  f150		       e0		      .BYTE.b	%11100000
     21  f151		       30		      .BYTE.b	%00110000
     22  f152		       00		      .BYTE.b	%00000000
     23  f153		       00		      .BYTE.b	%00000000
     24  f154		       00		      .BYTE.b	%00000000
     25  f155		       00		      .BYTE.b	%00000000
     26  f156		       00		      .BYTE.b	%00000000
     27  f157		       00		      .BYTE.b	%00000000
     28  f158		       00		      .BYTE.b	%00000000
     29  f159		       00		      .BYTE.b	%00000000
     30  f15a
     31  f15a				   WebImagePF1
     32  f15a		       02		      .BYTE.b	%00000010
     33  f15b		       01		      .BYTE.b	%00000001
     34  f15c		       00		      .BYTE.b	%00000000
     35  f15d		       00		      .BYTE.b	%00000000
     36  f15e		       01		      .BYTE.b	%00000001
     37  f15f		       01		      .BYTE.b	%00000001
     38  f160		       02		      .BYTE.b	%00000010
     39  f161		       0c		      .BYTE.b	%00001100
     40  f162		       30		      .BYTE.b	%00110000
     41  f163		       c0		      .BYTE.b	%11000000
     42  f164		       38		      .BYTE.b	%00111000
     43  f165		       07		      .BYTE.b	%00000111
     44  f166		       00		      .BYTE.b	%00000000
     45  f167		       00		      .BYTE.b	%00000000
     46  f168		       00		      .BYTE.b	%00000000
     47  f169		       00		      .BYTE.b	%00000000
     48  f16a		       07		      .BYTE.b	%00000111
     49  f16b		       38		      .BYTE.b	%00111000
     50  f16c		       c0		      .BYTE.b	%11000000
     51  f16d		       30		      .BYTE.b	%00110000
     52  f16e		       0c		      .BYTE.b	%00001100
     53  f16f		       02		      .BYTE.b	%00000010
     54  f170		       01		      .BYTE.b	%00000001
     55  f171		       01		      .BYTE.b	%00000001
     56  f172		       00		      .BYTE.b	%00000000
     57  f173		       00		      .BYTE.b	%00000000
     58  f174		       01		      .BYTE.b	%00000001
     59  f175		       02		      .BYTE.b	%00000010
     60  f176
     61  f176				   WebImagePF2
     62  f176		       08		      .BYTE.b	%00001000
     63  f177		       04		      .BYTE.b	%00000100
     64  f178		       03		      .BYTE.b	%00000011
     65  f179		       3f		      .BYTE.b	%00111111
     66  f17a		       c2		      .BYTE.b	%11000010
     67  f17b		       04		      .BYTE.b	%00000100
     68  f17c		       08		      .BYTE.b	%00001000
     69  f17d		       08		      .BYTE.b	%00001000
     70  f17e		       10		      .BYTE.b	%00010000
     71  f17f		       20		      .BYTE.b	%00100000
     72  f180		       20		      .BYTE.b	%00100000
     73  f181		       41		      .BYTE.b	%01000001
     74  f182		       8e		      .BYTE.b	%10001110
     75  f183		       f0		      .BYTE.b	%11110000
     76  f184		       f0		      .BYTE.b	%11110000
     77  f185		       8e		      .BYTE.b	%10001110
     78  f186		       41		      .BYTE.b	%01000001
     79  f187		       20		      .BYTE.b	%00100000
     80  f188		       20		      .BYTE.b	%00100000
     81  f189		       10		      .BYTE.b	%00010000
     82  f18a		       08		      .BYTE.b	%00001000
     83  f18b		       08		      .BYTE.b	%00001000
     84  f18c		       04		      .BYTE.b	%00000100
     85  f18d		       c2		      .BYTE.b	%11000010
     86  f18e		       3f		      .BYTE.b	%00111111
     87  f18f		       03		      .BYTE.b	%00000011
     88  f190		       04		      .BYTE.b	%00000100
     89  f191		       08		      .BYTE.b	%00001000
------- FILE kernel.asm
    155  f192
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f192					      include	"objects/spider_sprite.asm"
      1  f192				   SpiderSprite
      2  f192
      3  f192		       99		      .BYTE.b	%10011001
      4  f193		       bd		      .BYTE.b	%10111101
      5  f194		       db		      .BYTE.b	%11011011
      6  f195		       bd		      .BYTE.b	%10111101
      7  f196		       99		      .BYTE.b	%10011001
      8  f197		       99		      .BYTE.b	%10011001
      9  f198		       7e		      .BYTE.b	%01111110
     10  f199		       3c		      .BYTE.b	%00111100
     11  f19a		       3c		      .BYTE.b	%00111100
     12  f19b		       18		      .BYTE.b	%00011000
     13  f19c		       3c		      .BYTE.b	%00111100
     14  f19d		       7e		      .BYTE.b	%01111110
     15  f19e		       bd		      .BYTE.b	%10111101
     16  f19f		       bd		      .BYTE.b	%10111101
     17  f1a0		       bd		      .BYTE.b	%10111101
     18  f1a1		       99		      .BYTE.b	%10011001
     19  f1a2
     20  f1a2		       c7		      .BYTE.b	%11000111
     21  f1a3		       c7		      .BYTE.b	%11000111
     22  f1a4		       28		      .BYTE.b	%00101000
     23  f1a5		       28		      .BYTE.b	%00101000
     24  f1a6		       3a		      .BYTE.b	%00111010
     25  f1a7		       7a		      .BYTE.b	%01111010
     26  f1a8		       fd		      .BYTE.b	%11111101
     27  f1a9		       ff		      .BYTE.b	%11111111
     28  f1aa		       ff		      .BYTE.b	%11111111
     29  f1ab		       fd		      .BYTE.b	%11111101
     30  f1ac		       7a		      .BYTE.b	%01111010
     31  f1ad		       3a		      .BYTE.b	%00111010
     32  f1ae		       28		      .BYTE.b	%00101000
     33  f1af		       28		      .BYTE.b	%00101000
     34  f1b0		       c7		      .BYTE.b	%11000111
     35  f1b1		       c7		      .BYTE.b	%11000111
     36  f1b2
     37  f1b2		       99		      .BYTE.b	%10011001
     38  f1b3		       bd		      .BYTE.b	%10111101
     39  f1b4		       bd		      .BYTE.b	%10111101
     40  f1b5		       bd		      .BYTE.b	%10111101
     41  f1b6		       7e		      .BYTE.b	%01111110
     42  f1b7		       3c		      .BYTE.b	%00111100
     43  f1b8		       18		      .BYTE.b	%00011000
     44  f1b9		       3c		      .BYTE.b	%00111100
     45  f1ba		       3c		      .BYTE.b	%00111100
     46  f1bb		       7e		      .BYTE.b	%01111110
     47  f1bc		       99		      .BYTE.b	%10011001
     48  f1bd		       99		      .BYTE.b	%10011001
     49  f1be		       bd		      .BYTE.b	%10111101
     50  f1bf		       db		      .BYTE.b	%11011011
     51  f1c0		       bd		      .BYTE.b	%10111101
     52  f1c1		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    157  f1c2
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1c2					      include	"objects/swatter_sprite.asm"
      1  f1c2				   SwatterSprite
      2  f1c2
      3  f1c2		       3c		      .BYTE.b	%00111100
      4  f1c3		       3c		      .BYTE.b	%00111100
      5  f1c4		       56		      .BYTE.b	%01010110
      6  f1c5		       6a		      .BYTE.b	%01101010
      7  f1c6		       d5		      .BYTE.b	%11010101
      8  f1c7		       ab		      .BYTE.b	%10101011
      9  f1c8		       d5		      .BYTE.b	%11010101
     10  f1c9		       ab		      .BYTE.b	%10101011
     11  f1ca		       d5		      .BYTE.b	%11010101
     12  f1cb		       ab		      .BYTE.b	%10101011
     13  f1cc		       d5		      .BYTE.b	%11010101
     14  f1cd		       ab		      .BYTE.b	%10101011
     15  f1ce		       56		      .BYTE.b	%01010110
     16  f1cf		       6a		      .BYTE.b	%01101010
     17  f1d0		       56		      .BYTE.b	%01010110
     18  f1d1		       6a		      .BYTE.b	%01101010
     19  f1d2		       34		      .BYTE.b	%00110100
     20  f1d3		       2c		      .BYTE.b	%00101100
     21  f1d4		       34		      .BYTE.b	%00110100
     22  f1d5		       18		      .BYTE.b	%00011000
------- FILE kernel.asm
    159  f1d6
------- FILE logo_image.asm LEVEL 2 PASS 2
      0  f1d6					      include	"logo_image.asm"
      1  f1d6				   LogoImage1
      2  f1d6		       03		      .BYTE.b	%00000011
      3  f1d7		       03		      .BYTE.b	%00000011
      4  f1d8		       13		      .BYTE.b	%00010011
      5  f1d9		       33		      .BYTE.b	%00110011
      6  f1da		       63		      .BYTE.b	%01100011
      7  f1db		       c3		      .BYTE.b	%11000011
      8  f1dc		       c3		      .BYTE.b	%11000011
      9  f1dd		       63		      .BYTE.b	%01100011
     10  f1de		       33		      .BYTE.b	%00110011
     11  f1df		       13		      .BYTE.b	%00010011
     12  f1e0		       03		      .BYTE.b	%00000011
     13  f1e1		       03		      .BYTE.b	%00000011
     14  f1e2
     15  f1e2				   LogoImage2
     16  f1e2		       83		      .BYTE.b	%10000011
     17  f1e3		       c7		      .BYTE.b	%11000111
     18  f1e4		       ef		      .BYTE.b	%11101111
     19  f1e5		       6e		      .BYTE.b	%01101110
     20  f1e6		       6c		      .BYTE.b	%01101100
     21  f1e7		       6c		      .BYTE.b	%01101100
     22  f1e8		       6c		      .BYTE.b	%01101100
     23  f1e9		       6c		      .BYTE.b	%01101100
     24  f1ea		       6e		      .BYTE.b	%01101110
     25  f1eb		       ef		      .BYTE.b	%11101111
     26  f1ec		       c7		      .BYTE.b	%11000111
     27  f1ed		       83		      .BYTE.b	%10000011
     28  f1ee
     29  f1ee				   LogoImage3
     30  f1ee		       8f		      .BYTE.b	%10001111
     31  f1ef		       cf		      .BYTE.b	%11001111
     32  f1f0		       ef		      .BYTE.b	%11101111
     33  f1f1		       6d		      .BYTE.b	%01101101
     34  f1f2		       2c		      .BYTE.b	%00101100
     35  f1f3		       0c		      .BYTE.b	%00001100
     36  f1f4		       0c		      .BYTE.b	%00001100
     37  f1f5		       4c		      .BYTE.b	%01001100
     38  f1f6		       6d		      .BYTE.b	%01101101
     39  f1f7		       ef		      .BYTE.b	%11101111
     40  f1f8		       cf		      .BYTE.b	%11001111
     41  f1f9		       8f		      .BYTE.b	%10001111
     42  f1fa
     43  f1fa				   LogoImage4
     44  f1fa		       00		      .BYTE.b	%00000000
     45  f1fb		       01		      .BYTE.b	%00000001
     46  f1fc		       13		      .BYTE.b	%00010011
     47  f1fd		       33		      .BYTE.b	%00110011
     48  f1fe		       63		      .BYTE.b	%01100011
     49  f1ff		       c3		      .BYTE.b	%11000011
     50  f200		       c3		      .BYTE.b	%11000011
     51  f201		       63		      .BYTE.b	%01100011
     52  f202		       33		      .BYTE.b	%00110011
     53  f203		       13		      .BYTE.b	%00010011
     54  f204		       01		      .BYTE.b	%00000001
     55  f205		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    161  f206
    162  f206				   InitSystem
    163  f206
    164  f206				   .init_clean
    165  f206							; Resets RAM, TIA registers, and CPU registers
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
    167  f211
    168  f211				   .init_tia
    169  f211							; Define default TIA register values
    170  f211
    171  f211							; Initialize copies
    172  f211							;    lda #0
    173  f211							;    sta CtrlPf
    174  f211							;    sta NuSiz0
    175  f211							;    sta NuSiz1
    176  f211
    177  f211							; Set background color
    178  f211							;    lda #$00	      ; Black
    179  f211							;    sta COLUBK
    180  f211
    181  f211							; Set the playfield and player color
    182  f211							;    lda #$0E	      ; White
    183  f211							;    sta COLUPF
    184  f211							;    sta COLUP0
    185  f211							;    sta COLUP1
    186  f211
    187  f211							; Playfield Control
    188  f211							;    lda #%00000001  ; 1 for mirroring
    189  f211							;    sta CtrlPf
    190  f211							;    sta CTRLPF
    191  f211
    192  f211							; Disable Game Elements
    193  f211							;    lda #$00
    194  f211							;    sta ENABL       ; Turn off ball
    195  f211							;    sta ENAM0       ; Turn off player 1 missile
    196  f211							;    sta ENAM1       ; Turn off player 2 missile
    197  f211							;    sta GRP0	      ; Turn off player 1
    198  f211							;    sta GRP1	      ; Turn off player 2
    199  f211
    200  f211							; Empty playfield
    201  f211							;    lda #%00000000
    202  f211							;    sta PF0
    203  f211							;    sta PF1
    204  f211							;    sta PF2
    205  f211
    206  f211				   .init_seed
    207  f211							; Seed the random number generator
    208  f211		       ad 84 02 	      lda	INTIM	; Unknown value
    209  f214		       85 86		      sta	Rand8	; Use as seed
    210  f216		       49 ff		      eor	#$FF	; Flip bits
    211  f218		       85 87		      sta	Rand16	; Just in case INTIM was 0
    212  f21a
    213  f21a				   .init_game
    214  f21a
    215  f21a		       20 82 f2 	      jsr	LogoInit
    216  f21d
    217  f21d							;=======================================
    218  f21d							; Game Kernel
    219  f21d							;=======================================
    220  f21d
    221  f21d				   Main
    222  f21d
    223  f21d		       20 2c f2 	      jsr	VerticalSync
    224  f220		       20 45 f2 	      jsr	VerticalBlank
    225  f223		       20 58 f2 	      jsr	Kernel
    226  f226		       20 5f f2 	      jsr	OverScan
    227  f229		       4c 1d f2 	      jmp	Main
    228  f22c
    229  f22c				   VerticalSync
    230  f22c
    231  f22c		       a9 00		      lda	#0
    232  f22e		       85 01		      sta	VBLANK
    233  f230
    234  f230							; Turn on Vertical Sync signal and setup timer
    235  f230		       a9 02		      lda	#2
    236  f232		       85 00		      sta	VSYNC
    237  f234
    238  f234							; Increment frame count and reduce frame counter
    239  f234		       e6 8e		      inc	Frame
    240  f236		       c6 8f		      dec	FrameTimer
    241  f238		       c6 90		      dec	FrameTimer+1
    242  f23a
    243  f23a							; VSYNCH signal scanlines
    244  f23a					      REPEAT	#KERNEL_VSYNC
    245  f23a		       85 02		      sta	WSYNC
    244  f23a					      REPEND
    245  f23c		       85 02		      sta	WSYNC
    244  f23c					      REPEND
    245  f23e		       85 02		      sta	WSYNC
    246  f240					      REPEND
    247  f240
    248  f240							; Turn off Vertical Sync signal
    249  f240		       a9 00		      lda	#0
    250  f242		       85 00		      sta	VSYNC
    251  f244
    252  f244				   .vsync_return
    253  f244		       60		      rts
    254  f245
    255  f245				   VerticalBlank
    256  f245							; Setup Timer
    257  f245		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    258  f247		       8d 96 02 	      sta	TIM64T
    259  f24a
    260  f24a				   .vblank_logic
    261  f24a							; Perform Game Logic
    262  f24a		       20 55 f2 	      jsr	.vblank_logic_call_ptr
    263  f24d
    264  f24d				   .vblank_loop
    265  f24d							; WSYNC until Timer is complete
    266  f24d		       85 02		      sta	WSYNC
    267  f24f		       ad 84 02 	      lda	INTIM
    268  f252		       d0 f9		      bne	.vblank_loop
    269  f254
    270  f254				   .vblank_return
    271  f254		       60		      rts
    272  f255
    273  f255				   .vblank_logic_call_ptr
    274  f255		       6c 88 00 	      jmp	(VBlankPtr)
    275  f258
    276  f258				   Kernel
    277  f258
    278  f258							; Perform Selected Kernel
    279  f258		       20 5c f2 	      jsr	.kernel_call_ptr
    280  f25b		       60		      rts
    281  f25c
    282  f25c				   .kernel_call_ptr
    283  f25c		       6c 8a 00 	      jmp	(KernelPtr)
    284  f25f
    285  f25f				   OverScan
    286  f25f
    287  f25f							; End of screen, enter blanking
    288  f25f		       a9 42		      lda	#%01000010
    289  f261		       85 01		      sta	VBLANK
    290  f263
    291  f263							; Setup Timer
    292  f263		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    293  f265		       8d 96 02 	      sta	TIM64T
    294  f268
    295  f268							;.overscan_reset:
    296  f268							; Check for reset switch
    297  f268		       ad 82 02 	      lda	SWCHB
    298  f26b		       4a		      lsr		; Push D0 to carry (C)
    299  f26c		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    300  f26e
    301  f26e							; Perform reset
    302  f26e		       20 82 f2 	      jsr	LogoInit	; No need for logic
    303  f271		       4c 77 f2 	      jmp	.overscan_loop
    304  f274
    305  f274				   .overscan_logic
    306  f274							; Perform OverScan Logic
    307  f274		       20 7f f2 	      jsr	.overscan_logic_call_ptr
    308  f277
    309  f277				   .overscan_loop
    310  f277							; WSYNC until Timer is complete
    311  f277		       85 02		      sta	WSYNC
    312  f279		       ad 84 02 	      lda	INTIM
    313  f27c		       d0 f9		      bne	.overscan_loop
    314  f27e
    315  f27e				   .overscan_return
    316  f27e		       60		      rts
    317  f27f
    318  f27f				   .overscan_logic_call_ptr
    319  f27f		       6c 8c 00 	      jmp	(OverScanPtr)
    320  f282
    321  f282							;================
    322  f282							; State Code
    323  f282							;================
    324  f282
------- FILE logo.asm LEVEL 2 PASS 2
      0  f282					      include	"logo.asm"
      1  f282							;================
      2  f282							; Constants
      3  f282							;================
      4  f282
      5  f282		       00 8c	   LOGO_FRAMES =	140
      6  f282
      7  f282		       00 00	   LOGO_BG_COLOR =	#$00
      8  f282		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f282		       00 00	   LOGO_BG_BW_COLOR =	#$00
     10  f282		       00 0e	   LOGO_FG_BW_COLOR =	#$0E
     11  f282
     12  f282		       00 0c	   LOGO_IMAGE_SIZE =	12
     13  f282		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     14  f282		       00 3c	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     15  f282		       00 42	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     16  f282		       00 38	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-10	; The extra 10 is for processing overflow
     17  f282		       00 06	   LOGO_IMAGE_ANIM_SPEED =	#6
     18  f282
     19  f282				   LogoInit
     20  f282
     21  f282							; Setup logic and kernel
      0  f282					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f282				   .POINTER   SET	VBlankPtr
      2  f282				   .ADDRESS   SET	LogoVerticalBlank
      3  f282
      4  f282		       a9 ad		      LDA	#<.ADDRESS
      5  f284		       85 88		      STA	.POINTER
      6  f286		       a9 f2		      LDA	#>.ADDRESS
      7  f288		       85 89		      STA	.POINTER+1
      8  f28a
      0  f28a					      SET_POINTER	KernelPtr, LogoKernel
      1  f28a				   .POINTER   SET	KernelPtr
      2  f28a				   .ADDRESS   SET	LogoKernel
      3  f28a
      4  f28a		       a9 db		      LDA	#<.ADDRESS
      5  f28c		       85 8a		      STA	.POINTER
      6  f28e		       a9 f2		      LDA	#>.ADDRESS
      7  f290		       85 8b		      STA	.POINTER+1
      8  f292
      0  f292					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f292				   .POINTER   SET	OverScanPtr
      2  f292				   .ADDRESS   SET	LogoOverScan
      3  f292
      4  f292		       a9 b1		      LDA	#<.ADDRESS
      5  f294		       85 8c		      STA	.POINTER
      6  f296		       a9 f2		      LDA	#>.ADDRESS
      7  f298		       85 8d		      STA	.POINTER+1
      8  f29a
     25  f29a
     26  f29a							; Clean audio
     27  f29a		       a9 00		      lda	#0
     28  f29c		       85 19		      sta	AUDV0
     29  f29e		       85 1a		      sta	AUDV1
     30  f2a0
     31  f2a0							; Set initial button state
     32  f2a0							;    lda #0
     33  f2a0		       85 91		      sta	InputState
     34  f2a2
     35  f2a2							; Setup frame counters
     36  f2a2							;    lda #0
     37  f2a2		       85 8e		      sta	Frame
     38  f2a4		       a9 8c		      lda	#LOGO_FRAMES
     39  f2a6		       85 8f		      sta	FrameTimer
     40  f2a8
     41  f2a8							; Setup Image Animation
     42  f2a8		       a9 0b		      lda	#LOGO_IMAGE_SIZE-1
     43  f2aa		       85 a0		      sta	WebIndex
     44  f2ac
     45  f2ac		       60		      rts
     46  f2ad
     47  f2ad				   LogoVerticalBlank
     48  f2ad		       20 b5 f2 	      jsr	LogoAnimation
     49  f2b0		       60		      rts
     50  f2b1
     51  f2b1				   LogoOverScan
     52  f2b1		       20 c6 f2 	      jsr	LogoState
     53  f2b4		       60		      rts
     54  f2b5
     55  f2b5				   LogoAnimation
     56  f2b5		       a5 8e		      lda	Frame
     57  f2b7		       c9 06		      cmp	#LOGO_IMAGE_ANIM_SPEED
     58  f2b9		       d0 0a		      bne	.logo_animation_return
     59  f2bb
     60  f2bb		       a9 00		      lda	#0
     61  f2bd		       85 8e		      sta	Frame
     62  f2bf
     63  f2bf		       a6 a0		      ldx	WebIndex
     64  f2c1		       f0 02		      beq	.logo_animation_return
     65  f2c3
     66  f2c3							; Add another visible line
     67  f2c3		       c6 a0		      dec	WebIndex
     68  f2c5
     69  f2c5				   .logo_animation_return
     70  f2c5		       60		      rts
     71  f2c6
     72  f2c6				   LogoState
     73  f2c6		       a5 8f		      lda	FrameTimer
     74  f2c8		       f0 0d		      beq	.logo_state_next
     75  f2ca
     76  f2ca							; Check if Fire Button on controller 1 is released
     77  f2ca		       a5 0c		      lda	INPT4
     78  f2cc		       30 05		      bmi	.logo_state_check
     79  f2ce
     80  f2ce				   .logo_state_on
     81  f2ce		       a9 01		      lda	#1
     82  f2d0		       85 91		      sta	InputState
     83  f2d2		       60		      rts
     84  f2d3
     85  f2d3				   .logo_state_check
     86  f2d3		       a6 91		      ldx	InputState
     87  f2d5		       f0 03		      beq	.logo_state_return
     88  f2d7
     89  f2d7				   .logo_state_next
     90  f2d7							; Button is released or timer runs out, load title screen
     91  f2d7		       20 6a f3 	      jsr	TitleInit
     92  f2da
     93  f2da				   .logo_state_return
     94  f2da		       60		      rts
     95  f2db
     96  f2db				   LogoKernel
     97  f2db
     98  f2db							; Playfield Control
     99  f2db		       a9 01		      lda	#%00000001	; Mirror
    100  f2dd							;sta CtrlPf
    101  f2dd		       85 0a		      sta	CTRLPF
    102  f2df
    103  f2df							; Load Colors
    104  f2df		       ad 82 02 	      lda	SWCHB
    105  f2e2					      REPEAT	4
    106  f2e2		       4a		      lsr
    105  f2e2					      REPEND
    106  f2e3		       4a		      lsr
    105  f2e3					      REPEND
    106  f2e4		       4a		      lsr
    105  f2e4					      REPEND
    106  f2e5		       4a		      lsr
    107  f2e6					      REPEND
    108  f2e6		       90 07		      bcc	.logo_kernel_bw
    109  f2e8
    110  f2e8				   .logo_kernel_color
    111  f2e8		       a2 00		      ldx	#LOGO_BG_COLOR
    112  f2ea		       a0 c6		      ldy	#LOGO_FG_COLOR
    113  f2ec		       4c f3 f2 	      jmp	.logo_kernel_set
    114  f2ef
    115  f2ef				   .logo_kernel_bw
    116  f2ef		       a9 00		      lda	#LOGO_BG_BW_COLOR
    117  f2f1		       a9 0e		      lda	#LOGO_FG_BW_COLOR
    118  f2f3
    119  f2f3				   .logo_kernel_set
    120  f2f3		       86 09		      stx	COLUBK
    121  f2f5		       84 08		      sty	COLUPF
    122  f2f7
    123  f2f7				   .logo_kernel_start
    124  f2f7
    125  f2f7							; Turn on display
    126  f2f7		       a9 00		      lda	#0
    127  f2f9		       85 01		      sta	VBLANK
    128  f2fb
    129  f2fb		       a4 a0		      ldy	WebIndex
    130  f2fd		       d0 06		      bne	.logo_kernel_top_anim_padding
    131  f2ff
    132  f2ff				   .logo_kernel_top_padding
    133  f2ff							; Top Padding
    134  f2ff		       20 4d f3 	      jsr	LogoPadding
    135  f302		       4c 12 f3 	      jmp	.logo_kernel_image
    136  f305
    137  f305				   .logo_kernel_top_anim_padding
    138  f305		       20 5d f3 	      jsr	LogoAnimPadding
    139  f308
    140  f308				   .logo_kernel_image_animation_start
    141  f308		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    142  f30a
    143  f30a				   .logo_kernel_image_animation_loop
    144  f30a		       85 02		      sta	WSYNC
    145  f30c		       ca		      dex
    146  f30d		       d0 fb		      bne	.logo_kernel_image_animation_loop
    147  f30f
    148  f30f		       88		      dey
    149  f310		       10 f6		      bpl	.logo_kernel_image_animation_start
    150  f312
    151  f312				   .logo_kernel_image
    152  f312
    153  f312		       a2 0b		      ldx	#LOGO_IMAGE_SIZE-1
    154  f314		       a0 03		      ldy	#LOGO_IMAGE_LINE_SIZE-2
    155  f316							; The extra 2 on line size is for processing overflow
    156  f316
    157  f316							;dex
    158  f316		       e4 a0		      cpx	WebIndex
    159  f318		       90 2f		      bcc	.logo_kernel_bottom_padding
    160  f31a
    161  f31a				   .logo_kernel_image_line
    162  f31a		       85 02		      sta	WSYNC
    163  f31c
    164  f31c		       bd d6 f1 	      lda	LogoImage1,x
    165  f31f		       85 0e		      sta	PF1
    166  f321		       bd e2 f1 	      lda	LogoImage2,x
    167  f324		       85 0f		      sta	PF2
    168  f326
      0  f326					      sleep	26
      1  f326				   .CYCLES    SET	26
      2  f326
      3  f326				  -	      IF	.CYCLES < 2
      4  f326				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f326				  -	      ERR
      6  f326					      ENDIF
      7  f326
      8  f326				  -	      IF	.CYCLES & 1
      9  f326				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f326				  -	      nop	0
     11  f326				  -	      ELSE
     12  f326				  -	      bit	VSYNC
     13  f326				  -	      ENDIF
     14  f326				  -.CYCLES    SET	.CYCLES - 3
     15  f326					      ENDIF
     16  f326
     17  f326					      REPEAT	.CYCLES / 2
     18  f326		       ea		      nop
     17  f326					      REPEND
     18  f327		       ea		      nop
     17  f327					      REPEND
     18  f328		       ea		      nop
     17  f328					      REPEND
     18  f329		       ea		      nop
     17  f329					      REPEND
     18  f32a		       ea		      nop
     17  f32a					      REPEND
     18  f32b		       ea		      nop
     17  f32b					      REPEND
     18  f32c		       ea		      nop
     17  f32c					      REPEND
     18  f32d		       ea		      nop
     17  f32d					      REPEND
     18  f32e		       ea		      nop
     17  f32e					      REPEND
     18  f32f		       ea		      nop
     17  f32f					      REPEND
     18  f330		       ea		      nop
     17  f330					      REPEND
     18  f331		       ea		      nop
     17  f331					      REPEND
     18  f332		       ea		      nop
     19  f333					      REPEND
    170  f333
    171  f333		       bd ee f1 	      lda	LogoImage3,x
    172  f336		       85 0f		      sta	PF2
    173  f338		       bd fa f1 	      lda	LogoImage4,x
    174  f33b		       85 0e		      sta	PF1
    175  f33d
    176  f33d		       88		      dey
    177  f33e		       d0 da		      bne	.logo_kernel_image_line
    178  f340
    179  f340		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    180  f342
    181  f342		       e4 a0		      cpx	WebIndex
    182  f344		       90 03		      bcc	.logo_kernel_bottom_padding
    183  f346
    184  f346		       ca		      dex
    185  f347		       10 d1		      bpl	.logo_kernel_image_line
    186  f349
    187  f349				   .logo_kernel_bottom_padding
    188  f349							; Bottom Padding
    189  f349		       20 4d f3 	      jsr	LogoPadding
    190  f34c
    191  f34c				   .logo_kernel_image_return
    192  f34c		       60		      rts
    193  f34d
    194  f34d				   LogoPadding
    195  f34d		       a9 00		      lda	#0
    196  f34f		       85 0d		      sta	PF0
    197  f351		       85 0e		      sta	PF1
    198  f353		       85 0f		      sta	PF2
    199  f355
    200  f355		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    201  f357				   .logo_padding_loop
    202  f357		       85 02		      sta	WSYNC
    203  f359		       ca		      dex
    204  f35a		       d0 fb		      bne	.logo_padding_loop
    205  f35c
    206  f35c		       60		      rts
    207  f35d
    208  f35d				   LogoAnimPadding
    209  f35d		       a9 00		      lda	#0
    210  f35f		       85 0d		      sta	PF0
    211  f361		       85 0e		      sta	PF1
    212  f363		       85 0f		      sta	PF2
    213  f365
    214  f365		       a2 38		      ldx	#LOGO_IMAGE_ANIM_PADDING
    215  f367		       4c 57 f3 	      jmp	.logo_padding_loop
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f36a					      include	"title.asm"
      1  f36a							;================
      2  f36a							; Constants
      3  f36a							;================
      4  f36a
      5  f36a		       00 00	   TITLE_BG_COLOR =	#$00
      6  f36a		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f36a		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f36a		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f36a		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f36a
     11  f36a		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f36a		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f36a		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f36a		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f36a		       00 09	   TITLE_AUDIO_STEP =	9
     16  f36a
     17  f36a		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f36a		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f36a		       00 07	   TITLE_LABEL_LINE =	7
     20  f36a
     21  f36a		       00 10	   TITLE_GAP_SIZE =	#16
     22  f36a
     23  f36a		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f36a		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f36a		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f36a
     27  f36a				   TitleInit
     28  f36a
     29  f36a							; Setup logic and kernel
      0  f36a					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f36a				   .POINTER   SET	VBlankPtr
      2  f36a				   .ADDRESS   SET	TitleVerticalBlank
      3  f36a
      4  f36a		       a9 cb		      LDA	#<.ADDRESS
      5  f36c		       85 88		      STA	.POINTER
      6  f36e		       a9 f3		      LDA	#>.ADDRESS
      7  f370		       85 89		      STA	.POINTER+1
      8  f372
      0  f372					      SET_POINTER	KernelPtr, TitleKernel
      1  f372				   .POINTER   SET	KernelPtr
      2  f372				   .ADDRESS   SET	TitleKernel
      3  f372
      4  f372		       a9 8a		      LDA	#<.ADDRESS
      5  f374		       85 8a		      STA	.POINTER
      6  f376		       a9 f4		      LDA	#>.ADDRESS
      7  f378		       85 8b		      STA	.POINTER+1
      8  f37a
      0  f37a					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f37a				   .POINTER   SET	OverScanPtr
      2  f37a				   .ADDRESS   SET	TitleOverScan
      3  f37a
      4  f37a		       a9 3c		      LDA	#<.ADDRESS
      5  f37c		       85 8c		      STA	.POINTER
      6  f37e		       a9 f4		      LDA	#>.ADDRESS
      7  f380		       85 8d		      STA	.POINTER+1
      8  f382
     33  f382
     34  f382							; Load audio settings
     35  f382
     36  f382							; Melody Line
     37  f382		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f384		       85 15		      sta	AUDC0
     39  f386		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f388		       85 19		      sta	AUDV0
     41  f38a
     42  f38a							; Drums and Bass
     43  f38a		       a9 00		      lda	#0
     44  f38c		       85 16		      sta	AUDC1
     45  f38e		       85 1a		      sta	AUDV1
     46  f390
     47  f390							; Make it so that we play the first note immediately
     48  f390		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f392		       85 92		      sta	AudioStep
     50  f394		       a9 01		      lda	#1
     51  f396		       85 8f		      sta	FrameTimer
     52  f398
     53  f398							; Setup Spider Sprite
      0  f398					      SET_POINTER	SpiderPtr, TitleSpider
      1  f398				   .POINTER   SET	SpiderPtr
      2  f398				   .ADDRESS   SET	TitleSpider
      3  f398
      4  f398		       a9 aa		      LDA	#<.ADDRESS
      5  f39a		       85 a3		      STA	.POINTER
      6  f39c		       a9 f0		      LDA	#>.ADDRESS
      7  f39e		       85 a4		      STA	.POINTER+1
      8  f3a0
     55  f3a0
     56  f3a0		       a5 81		      lda	NuSiz0
     57  f3a2		       29 f8		      and	#%11111000
     58  f3a4		       09 06		      ora	#%00000110	; Triple Sprite
     59  f3a6		       85 81		      sta	NuSiz0
     60  f3a8		       85 04		      sta	NUSIZ0
     61  f3aa		       85 82		      sta	NuSiz1
     62  f3ac		       85 05		      sta	NUSIZ1
     63  f3ae
     64  f3ae		       a9 00		      lda	#0	; No reflect
     65  f3b0		       85 0b		      sta	REFP0
     66  f3b2		       a9 ff		      lda	#$FF	; Reflect P1
     67  f3b4		       85 0c		      sta	REFP1
     68  f3b6
     69  f3b6		       a9 00		      lda	#0
     70  f3b8		       85 aa		      sta	SpiderDrawPos	; Initialize animation state
     71  f3ba
     72  f3ba							; Setup Web Line
     73  f3ba							; Missle0 (2 clock size)
     74  f3ba		       a5 81		      lda	NuSiz0
     75  f3bc		       29 cf		      and	#%11001111
     76  f3be		       09 10		      ora	#%00010000
     77  f3c0		       85 81		      sta	NuSiz0
     78  f3c2		       85 04		      sta	NUSIZ0
     79  f3c4
     80  f3c4							; Disable at start
     81  f3c4		       a9 00		      lda	#0
     82  f3c6		       85 1d		      sta	ENAM0
     83  f3c8
     84  f3c8							; Set initial button state
     85  f3c8							;lda #0
     86  f3c8		       85 91		      sta	InputState
     87  f3ca
     88  f3ca		       60		      rts
     89  f3cb
     90  f3cb				   TitleVerticalBlank
     91  f3cb
     92  f3cb							; Refresh random values
     93  f3cb		       20 13 f0 	      jsr	Random
     94  f3ce
     95  f3ce		       20 d8 f3 	      jsr	TitlePosition
     96  f3d1		       20 f2 f3 	      jsr	TitleAnimation
     97  f3d4		       20 1d f4 	      jsr	TitleColor
     98  f3d7
     99  f3d7		       60		      rts
    100  f3d8
    101  f3d8				   TitlePosition
    102  f3d8
    103  f3d8							; Position Spider
    104  f3d8		       a2 00		      ldx	#0	; Object (player0)
    105  f3da		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    106  f3dc		       20 00 f0 	      jsr	PosObject
    107  f3df
    108  f3df		       a2 01		      ldx	#1	; Object (player1)
    109  f3e1		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    110  f3e3		       20 00 f0 	      jsr	PosObject
    111  f3e6
    112  f3e6							; Position Web Line
    113  f3e6		       a2 02		      ldx	#2	; Object (missle0)
    114  f3e8		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    115  f3ea		       20 00 f0 	      jsr	PosObject
    116  f3ed
    117  f3ed		       85 02		      sta	WSYNC
    118  f3ef		       85 2a		      sta	HMOVE
    119  f3f1
    120  f3f1		       60		      rts
    121  f3f2
    122  f3f2				   TitleAnimation
    123  f3f2
    124  f3f2		       a5 92		      lda	AudioStep
    125  f3f4							;cmp #0
    126  f3f4		       f0 0d		      beq	.title_animation_1
    127  f3f6		       c9 04		      cmp	#4
    128  f3f8		       f0 16		      beq	.title_animation_2
    129  f3fa		       c9 09		      cmp	#9
    130  f3fc		       f0 05		      beq	.title_animation_1
    131  f3fe		       c9 0c		      cmp	#12
    132  f400		       f0 0e		      beq	.title_animation_2
    133  f402		       60		      rts
    134  f403
    135  f403				   .title_animation_1
      0  f403					      SET_POINTER	SpiderPtr, TitleSpider
      1  f403				   .POINTER   SET	SpiderPtr
      2  f403				   .ADDRESS   SET	TitleSpider
      3  f403
      4  f403		       a9 aa		      LDA	#<.ADDRESS
      5  f405		       85 a3		      STA	.POINTER
      6  f407		       a9 f0		      LDA	#>.ADDRESS
      7  f409		       85 a4		      STA	.POINTER+1
      8  f40b
    137  f40b		       a9 00		      lda	#0
    138  f40d		       85 aa		      sta	SpiderDrawPos
    139  f40f		       60		      rts
    140  f410
    141  f410				   .title_animation_2
      0  f410					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f410				   .POINTER   SET	SpiderPtr
      2  f410				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f410
      4  f410		       a9 b3		      LDA	#<.ADDRESS
      5  f412		       85 a3		      STA	.POINTER
      6  f414		       a9 f0		      LDA	#>.ADDRESS
      7  f416		       85 a4		      STA	.POINTER+1
      8  f418
    143  f418		       a9 01		      lda	#1
    144  f41a		       85 aa		      sta	SpiderDrawPos
    145  f41c		       60		      rts
    146  f41d
    147  f41d				   TitleColor
    148  f41d
    149  f41d							; Load Colors
    150  f41d		       a9 00		      lda	#TITLE_BG_COLOR
    151  f41f		       85 09		      sta	COLUBK
    152  f421		       a9 06		      lda	#TITLE_WEB_COLOR
    153  f423		       85 08		      sta	COLUPF
    154  f425
    155  f425							; Check b/w
    156  f425		       ad 82 02 	      lda	SWCHB
    157  f428					      REPEAT	4
    158  f428		       4a		      lsr
    157  f428					      REPEND
    158  f429		       4a		      lsr
    157  f429					      REPEND
    158  f42a		       4a		      lsr
    157  f42a					      REPEND
    158  f42b		       4a		      lsr
    159  f42c					      REPEND
    160  f42c		       90 07		      bcc	.title_bw
    161  f42e
    162  f42e				   .title_color
    163  f42e		       a9 56		      lda	#TITLE_SPIDER_COLOR
    164  f430		       85 06		      sta	COLUP0
    165  f432		       85 07		      sta	COLUP1
    166  f434
    167  f434		       60		      rts
    168  f435
    169  f435				   .title_bw
    170  f435							; Load B/W Colors
    171  f435		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    172  f437		       85 06		      sta	COLUP0
    173  f439		       85 07		      sta	COLUP1
    174  f43b
    175  f43b		       60		      rts
    176  f43c
    177  f43c				   TitleOverScan
    178  f43c		       20 43 f4 	      jsr	TitleAudio
    179  f43f		       20 79 f4 	      jsr	TitleState
    180  f442		       60		      rts
    181  f443
    182  f443				   TitleAudio
    183  f443
    184  f443		       a6 8f		      ldx	FrameTimer
    185  f445		       d0 31		      bne	.title_audio_return
    186  f447
    187  f447							; Reset Timer
    188  f447		       a2 09		      ldx	#TITLE_AUDIO_STEP
    189  f449		       86 8f		      stx	FrameTimer
    190  f44b
    191  f44b				   .title_audio_play
    192  f44b
    193  f44b							; Increment melody position
    194  f44b		       a4 92		      ldy	AudioStep
    195  f44d		       c8		      iny
    196  f44e
    197  f44e							; Check if we're at the end of the melody
    198  f44e		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    199  f450		       d0 02		      bne	.title_audio_play_note
    200  f452
    201  f452							; Loop our audio step
    202  f452		       a0 00		      ldy	#0
    203  f454
    204  f454				   .title_audio_play_note
    205  f454
    206  f454							; Save current position
    207  f454		       84 92		      sty	AudioStep
    208  f456
    209  f456							; Basic Melody Line
    210  f456		       b9 76 f5 	      lda	TitleAudio0,y
    211  f459		       85 17		      sta	AUDF0
    212  f45b
    213  f45b							; Drums and Bass
    214  f45b		       b9 86 f5 	      lda	TitleTone1,y
    215  f45e		       c9 ff		      cmp	#$FF
    216  f460		       f0 0e		      beq	.title_audio_play_note_1_mute
    217  f462
    218  f462		       85 16		      sta	AUDC1
    219  f464		       b9 96 f5 	      lda	TitleAudio1,y
    220  f467		       85 18		      sta	AUDF1
    221  f469		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    222  f46b		       85 1a		      sta	AUDV1
    223  f46d
    224  f46d		       4c 78 f4 	      jmp	.title_audio_return
    225  f470
    226  f470				   .title_audio_play_note_1_mute
    227  f470
    228  f470		       a9 00		      lda	#0
    229  f472		       85 18		      sta	AUDF1
    230  f474		       85 16		      sta	AUDC1
    231  f476		       85 1a		      sta	AUDV1
    232  f478
    233  f478				   .title_audio_return
    234  f478		       60		      rts
    235  f479
    236  f479				   TitleState
    237  f479
    238  f479							; Check if Fire Button on controller 1 is released
    239  f479		       a5 0c		      lda	INPT4
    240  f47b		       30 05		      bmi	.title_state_check
    241  f47d
    242  f47d				   .title_state_on
    243  f47d		       a9 01		      lda	#1
    244  f47f		       85 91		      sta	InputState
    245  f481		       60		      rts
    246  f482
    247  f482				   .title_state_check
    248  f482		       a5 91		      lda	InputState
    249  f484		       f0 03		      beq	.title_state_return
    250  f486
    251  f486				   .title_state_next
    252  f486							; Button is released, load up game
    253  f486		       20 10 fd 	      jsr	GameInit
    254  f489
    255  f489				   .title_state_return
    256  f489		       60		      rts
    257  f48a
    258  f48a				   TitleKernel
    259  f48a
    260  f48a							; Playfield Control
    261  f48a		       a5 80		      lda	CtrlPf
    262  f48c		       29 fe		      and	#%11111110	; No mirroring
    263  f48e		       85 80		      sta	CtrlPf
    264  f490		       85 0a		      sta	CTRLPF
    265  f492
    266  f492							; Turn on display
    267  f492		       a9 00		      lda	#0
    268  f494		       85 01		      sta	VBLANK
    269  f496
    270  f496		       85 02		      sta	WSYNC
    271  f498
    272  f498				   TitleFrameTopDraw
    273  f498
    274  f498							; Start Counters
    275  f498		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    276  f49a		       a0 00		      ldy	#0	; Image Counter
    277  f49c
    278  f49c				   .title_frame_top
    279  f49c
    280  f49c							; 76 machine cycles per scanline
    281  f49c		       85 02		      sta	WSYNC
    282  f49e
    283  f49e				   .title_frame_top_load		; 66 cycles
    284  f49e
    285  f49e							; First half of image
    286  f49e		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    287  f4a1		       85 0d		      sta	PF0	; 4
    288  f4a3		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    289  f4a6		       85 0e		      sta	PF1	; 4
    290  f4a8		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    291  f4ab		       85 0f		      sta	PF2	; 4
    292  f4ad
      0  f4ad					      sleep	6
      1  f4ad				   .CYCLES    SET	6
      2  f4ad
      3  f4ad				  -	      IF	.CYCLES < 2
      4  f4ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4ad				  -	      ERR
      6  f4ad					      ENDIF
      7  f4ad
      8  f4ad				  -	      IF	.CYCLES & 1
      9  f4ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4ad				  -	      nop	0
     11  f4ad				  -	      ELSE
     12  f4ad				  -	      bit	VSYNC
     13  f4ad				  -	      ENDIF
     14  f4ad				  -.CYCLES    SET	.CYCLES - 3
     15  f4ad					      ENDIF
     16  f4ad
     17  f4ad					      REPEAT	.CYCLES / 2
     18  f4ad		       ea		      nop
     17  f4ad					      REPEND
     18  f4ae		       ea		      nop
     17  f4ae					      REPEND
     18  f4af		       ea		      nop
     19  f4b0					      REPEND
    294  f4b0
    295  f4b0							; Second half of image
    296  f4b0		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    297  f4b3		       85 0d		      sta	PF0	; 4
    298  f4b5		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    299  f4b8		       85 0e		      sta	PF1	; 4
    300  f4ba		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    301  f4bd		       85 0f		      sta	PF2	; 4
    302  f4bf
    303  f4bf				   .title_frame_top_index		; 4 cycles
    304  f4bf
    305  f4bf		       ca		      dex		; 2
    306  f4c0		       d0 da		      bne	.title_frame_top	; 2
    307  f4c2
    308  f4c2				   .title_frame_top_index_next		; 6 cycles
    309  f4c2
    310  f4c2							; Restore scanline counter
    311  f4c2		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    312  f4c4
    313  f4c4		       98		      tya		; 2
    314  f4c5		       18		      clc		; 2
    315  f4c6		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    316  f4c8		       a8		      tay		; 2
    317  f4c9
    318  f4c9		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    319  f4cb		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    320  f4cd		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    321  f4cf		       85 08		      sta	COLUPF	; 4
    322  f4d1		       ea		      nop		; 2
    323  f4d2		       4c 9e f4 	      jmp	.title_frame_top_load	; 3
    324  f4d5
    325  f4d5				   .title_frame_top_label_color_skip
    326  f4d5
    327  f4d5		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    328  f4d7		       d0 c3		      bne	.title_frame_top	; 2
    329  f4d9
    330  f4d9				   .title_frame_top_clean
    331  f4d9
    332  f4d9							; Clear out playfield
    333  f4d9		       a9 00		      lda	#0
    334  f4db		       85 0d		      sta	PF0
    335  f4dd		       85 0e		      sta	PF1
    336  f4df		       85 0f		      sta	PF2
    337  f4e1
    338  f4e1				   TitleWebDraw
    339  f4e1		       a9 02		      lda	#%00000010
    340  f4e3		       85 1d		      sta	ENAM0
    341  f4e5
    342  f4e5		       a9 06		      lda	#TITLE_WEB_COLOR
    343  f4e7		       85 06		      sta	COLUP0
    344  f4e9
    345  f4e9		       a2 10		      ldx	#TITLE_GAP_SIZE
    346  f4eb				   .title_web_gap
    347  f4eb		       ca		      dex
    348  f4ec		       85 02		      sta	WSYNC
    349  f4ee		       d0 fb		      bne	.title_web_gap
    350  f4f0
    351  f4f0				   TitleSpiderDraw
    352  f4f0
    353  f4f0		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    354  f4f2
    355  f4f2		       a5 aa		      lda	SpiderDrawPos
    356  f4f4		       c9 01		      cmp	#1
    357  f4f6		       d0 0c		      bne	.title_spider_extra_web_disable
    358  f4f8
    359  f4f8				   .title_spider_extra_web_start
    360  f4f8		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    361  f4fa				   .title_spider_extra_web_loop
    362  f4fa		       85 02		      sta	WSYNC
    363  f4fc		       ca		      dex
    364  f4fd		       d0 fb		      bne	.title_spider_extra_web_loop
    365  f4ff
    366  f4ff		       88		      dey
    367  f500		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    368  f502		       d0 f4		      bne	.title_spider_extra_web_start
    369  f504
    370  f504				   .title_spider_extra_web_disable
    371  f504		       a9 00		      lda	#0
    372  f506		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    373  f508
    374  f508		       85 02		      sta	WSYNC
    375  f50a
    376  f50a		       85 1d		      sta	ENAM0
    377  f50c
    378  f50c							; Check b/w
    379  f50c		       ad 82 02 	      lda	SWCHB
    380  f50f					      REPEAT	4
    381  f50f		       4a		      lsr
    380  f50f					      REPEND
    381  f510		       4a		      lsr
    380  f510					      REPEND
    381  f511		       4a		      lsr
    380  f511					      REPEND
    381  f512		       4a		      lsr
    382  f513					      REPEND
    383  f513		       90 05		      bcc	.title_spider_bw
    384  f515
    385  f515				   .title_spider_color
    386  f515		       a9 56		      lda	#TITLE_SPIDER_COLOR
    387  f517		       4c 1c f5 	      jmp	.title_spider_color_set
    388  f51a				   .title_spider_bw
    389  f51a		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    390  f51c				   .title_spider_color_set
    391  f51c		       85 06		      sta	COLUP0
    392  f51e
    393  f51e				   .title_spider
    394  f51e		       b1 a3		      lda	(SpiderPtr),y
    395  f520		       85 1b		      sta	GRP0
    396  f522		       85 1c		      sta	GRP1
    397  f524
    398  f524				   .title_spider_delay
    399  f524		       ca		      dex
    400  f525		       85 02		      sta	WSYNC
    401  f527		       d0 fb		      bne	.title_spider_delay
    402  f529
    403  f529				   .title_spider_index
    404  f529		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    405  f52b		       88		      dey
    406  f52c		       10 f0		      bpl	.title_spider
    407  f52e
    408  f52e				   .title_spider_clean
    409  f52e
    410  f52e							; Clear sprites
    411  f52e		       a9 00		      lda	#0
    412  f530		       85 1b		      sta	GRP0
    413  f532		       85 1c		      sta	GRP1
    414  f534
    415  f534				   TitleFrameBottomDraw
    416  f534
    417  f534							; Load Frame Color
    418  f534		       a9 06		      lda	#TITLE_WEB_COLOR
    419  f536		       85 08		      sta	COLUPF
    420  f538
    421  f538							; Start Counters
    422  f538		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    423  f53a		       a0 00		      ldy	#0	; Image Counter
    424  f53c
    425  f53c				   .title_frame_bottom
    426  f53c
    427  f53c							; 76 machine cycles per scanline
    428  f53c		       85 02		      sta	WSYNC
    429  f53e
    430  f53e				   .title_frame_bottom_load		; 66 cycles
    431  f53e
    432  f53e							; First half of image
    433  f53e		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    434  f541		       85 0d		      sta	PF0	; 4
    435  f543		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    436  f546		       85 0e		      sta	PF1	; 4
    437  f548		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    438  f54b		       85 0f		      sta	PF2	; 4
    439  f54d
      0  f54d					      sleep	6
      1  f54d				   .CYCLES    SET	6
      2  f54d
      3  f54d				  -	      IF	.CYCLES < 2
      4  f54d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f54d				  -	      ERR
      6  f54d					      ENDIF
      7  f54d
      8  f54d				  -	      IF	.CYCLES & 1
      9  f54d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f54d				  -	      nop	0
     11  f54d				  -	      ELSE
     12  f54d				  -	      bit	VSYNC
     13  f54d				  -	      ENDIF
     14  f54d				  -.CYCLES    SET	.CYCLES - 3
     15  f54d					      ENDIF
     16  f54d
     17  f54d					      REPEAT	.CYCLES / 2
     18  f54d		       ea		      nop
     17  f54d					      REPEND
     18  f54e		       ea		      nop
     17  f54e					      REPEND
     18  f54f		       ea		      nop
     19  f550					      REPEND
    441  f550
    442  f550							; Second half of image
    443  f550		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    444  f553		       85 0d		      sta	PF0	; 4
    445  f555		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    446  f558		       85 0e		      sta	PF1	; 4
    447  f55a		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    448  f55d		       85 0f		      sta	PF2	; 4
    449  f55f
    450  f55f				   .title_frame_bottom_index		; 4 cycles
    451  f55f
    452  f55f		       ca		      dex		; 2
    453  f560		       d0 da		      bne	.title_frame_bottom	; 2
    454  f562
    455  f562				   .title_frame_bottom_index_next		; 6 cycles
    456  f562
    457  f562							; Restore scanline counter
    458  f562		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    459  f564
    460  f564		       98		      tya		; 2
    461  f565		       18		      clc		; 2
    462  f566		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    463  f568		       a8		      tay		; 2
    464  f569		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    465  f56b		       d0 cf		      bne	.title_frame_bottom	; 2
    466  f56d
    467  f56d				   .title_frame_bottom_clean
    468  f56d
    469  f56d							; Clear out playfield
    470  f56d		       a9 00		      lda	#0
    471  f56f		       85 0d		      sta	PF0
    472  f571		       85 0e		      sta	PF1
    473  f573		       85 0f		      sta	PF2
    474  f575
    475  f575				   .title_kernel_return
    476  f575		       60		      rts
    477  f576
    478  f576				   TitleAudio0
    479  f576
    480  f576		       0f		      .BYTE.b	#15	; B
    481  f577		       13		      .BYTE.b	#19	; G
    482  f578		       17		      .BYTE.b	#23	; E
    483  f579		       13		      .BYTE.b	#19	; G
    484  f57a		       0e		      .BYTE.b	#14	; C
    485  f57b		       13		      .BYTE.b	#19
    486  f57c		       17		      .BYTE.b	#23
    487  f57d		       13		      .BYTE.b	#19
    488  f57e		       0c		      .BYTE.b	#12	; D
    489  f57f		       13		      .BYTE.b	#19
    490  f580		       17		      .BYTE.b	#23
    491  f581		       13		      .BYTE.b	#19
    492  f582		       0e		      .BYTE.b	#14	; C
    493  f583		       13		      .BYTE.b	#19
    494  f584		       17		      .BYTE.b	#23
    495  f585		       13		      .BYTE.b	#19
    496  f586
    497  f586				   TitleTone1
    498  f586
    499  f586		       0f		      .BYTE.b	#15	; Electronic Rumble
    500  f587		       ff		      .BYTE.b	#$FF
    501  f588		       01		      .BYTE.b	#1	; Low Pure Tone
    502  f589		       01		      .BYTE.b	#1
    503  f58a		       08		      .BYTE.b	#8	; White Noise
    504  f58b		       01		      .BYTE.b	#1
    505  f58c		       01		      .BYTE.b	#1
    506  f58d		       ff		      .BYTE.b	#$FF
    507  f58e		       ff		      .BYTE.b	#$FF
    508  f58f		       0f		      .BYTE.b	#15
    509  f590		       ff		      .BYTE.b	#$FF
    510  f591		       ff		      .BYTE.b	#$FF
    511  f592		       08		      .BYTE.b	#8
    512  f593		       ff		      .BYTE.b	#$FF
    513  f594		       01		      .BYTE.b	#1
    514  f595		       01		      .BYTE.b	#1
    515  f596
    516  f596				   TitleAudio1
    517  f596
    518  f596		       1d		      .BYTE.b	#29	; Kick
    519  f597		       ff		      .BYTE.b	#$FF
    520  f598		       1f		      .BYTE.b	#31	; C
    521  f599		       1f		      .BYTE.b	#31
    522  f59a		       07		      .BYTE.b	#7	; Snare
    523  f59b		       1f		      .BYTE.b	#31
    524  f59c		       1f		      .BYTE.b	#31
    525  f59d		       ff		      .BYTE.b	#$FF
    526  f59e		       ff		      .BYTE.b	#$FF
    527  f59f		       1d		      .BYTE.b	#29
    528  f5a0		       ff		      .BYTE.b	#$FF
    529  f5a1		       ff		      .BYTE.b	#$FF
    530  f5a2		       07		      .BYTE.b	#7
    531  f5a3		       ff		      .BYTE.b	#$FF
    532  f5a4		       17		      .BYTE.b	#23	; F
    533  f5a5		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f5a6					      include	"game.asm"
      1  f5a6							;================
      2  f5a6							; Game
      3  f5a6							;================
      4  f5a6
      5  f5a6							; Constants
      6  f5a6
      7  f5a6		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f5a6		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f5a6		       00 09	   GAME_AUDIO_STEP =	9
     10  f5a6		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f5a6		       00 06	   GAME_AUDIO_TONE =	6
     12  f5a6
     13  f5a6							; Object Code
     14  f5a6
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f5a6					      include	"objects/level.asm"
      1  f5a6							;======================
      2  f5a6							; Level Logic
      3  f5a6							;======================
      4  f5a6
      5  f5a6							; Constants
      6  f5a6
      7  f5a6		       00 14	   LEVELS     =	20
      8  f5a6
      9  f5a6				   LevelInit
     10  f5a6
     11  f5a6							; Set beginning level by difficulty switches treated as binary
     12  f5a6		       ad 82 02 	      lda	SWCHB
     13  f5a9					      REPEAT	6	; shift to 0-3
     14  f5a9		       4a		      lsr
     13  f5a9					      REPEND
     14  f5aa		       4a		      lsr
     13  f5aa					      REPEND
     14  f5ab		       4a		      lsr
     13  f5ab					      REPEND
     14  f5ac		       4a		      lsr
     13  f5ac					      REPEND
     14  f5ad		       4a		      lsr
     13  f5ad					      REPEND
     14  f5ae		       4a		      lsr
     15  f5af					      REPEND
     16  f5af		       18		      clc		; multiply by 5
     17  f5b0		       85 83		      sta	Temp
     18  f5b2		       0a		      asl
     19  f5b3		       0a		      asl
     20  f5b4		       65 83		      adc	Temp
     21  f5b6		       85 9f		      sta	LevelCurrent
     22  f5b8
     23  f5b8		       20 de f5 	      jsr	LevelLoad
     24  f5bb
     25  f5bb		       60		      rts
     26  f5bc
     27  f5bc				   LevelUpdate
     28  f5bc
     29  f5bc							; Calculate Desired score: (level+2)*5
     30  f5bc		       a5 9f		      lda	LevelCurrent
     31  f5be		       18		      clc
     32  f5bf		       69 02		      adc	#2	; +2
     33  f5c1		       85 83		      sta	Temp
     34  f5c3		       0a		      asl		; x2
     35  f5c4		       0a		      asl		; x2
     36  f5c5		       65 83		      adc	Temp	; x1
     37  f5c7
     38  f5c7							; Check if score is high enough
     39  f5c7		       c5 95		      cmp	ScoreValue+1
     40  f5c9		       b0 0f		      bcs	.level_update_return
     41  f5cb
     42  f5cb							; Reset score
     43  f5cb		       a9 00		      lda	#0
     44  f5cd		       85 95		      sta	ScoreValue+1
     45  f5cf
     46  f5cf							; Check if we haven't reached the final level
     47  f5cf		       a5 9f		      lda	LevelCurrent
     48  f5d1		       c9 13		      cmp	#LEVELS-1
     49  f5d3		       b0 05		      bcs	.level_update_return
     50  f5d5
     51  f5d5		       e6 9f		      inc	LevelCurrent
     52  f5d7		       20 de f5 	      jsr	LevelLoad
     53  f5da
     54  f5da				   .level_update_return
     55  f5da
     56  f5da		       20 01 f6 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     57  f5dd
     58  f5dd		       60		      rts
     59  f5de
     60  f5de				   LevelLoad
     61  f5de
     62  f5de							; Bug Speed: level/4+2
     63  f5de		       a5 9f		      lda	LevelCurrent
     64  f5e0		       4a		      lsr		; /2
     65  f5e1		       4a		      lsr		; /2
     66  f5e2		       69 02		      adc	#2
     67  f5e4		       85 b5		      sta	BugSpeed
     68  f5e6
     69  f5e6							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     70  f5e6		       a9 14		      lda	#20
     71  f5e8		       18		      clc
     72  f5e9		       e5 9f		      sbc	LevelCurrent
     73  f5eb		       0a		      asl		; x2
     74  f5ec		       85 83		      sta	Temp
     75  f5ee		       0a		      asl		; x2
     76  f5ef		       0a		      asl		; x2
     77  f5f0		       65 83		      adc	Temp
     78  f5f2		       85 c4		      sta	SwatterWaitTime
     79  f5f4
     80  f5f4							; Swatter Hit Damage: level*3+$10
     81  f5f4		       a5 9f		      lda	LevelCurrent
     82  f5f6		       18		      clc
     83  f5f7		       85 83		      sta	Temp
     84  f5f9		       0a		      asl		; x2
     85  f5fa		       65 83		      adc	Temp
     86  f5fc		       69 10		      adc	#$10
     87  f5fe		       85 c5		      sta	SwatterHitDamage
     88  f600
     89  f600		       60		      rts
     90  f601
     91  f601				   LevelLoadColor
     92  f601		       a4 9f		      ldy	LevelCurrent
     93  f603
     94  f603							; check b/w
     95  f603		       ad 82 02 	      lda	SWCHB
     96  f606					      REPEAT	4
     97  f606		       4a		      lsr
     96  f606					      REPEND
     97  f607		       4a		      lsr
     96  f607					      REPEND
     97  f608		       4a		      lsr
     96  f608					      REPEND
     97  f609		       4a		      lsr
     98  f60a					      REPEND
     99  f60a		       90 0b		      bcc	.level_load_bw
    100  f60c
    101  f60c				   .level_load_color
    102  f60c
    103  f60c							; Background Color
    104  f60c		       b9 20 f6 	      lda	LevelDataBk,y
    105  f60f		       85 a1		      sta	WebColor+0
    106  f611
    107  f611							; Web Color
    108  f611		       b9 34 f6 	      lda	LevelDataPf,y
    109  f614		       85 a2		      sta	WebColor+1
    110  f616
    111  f616		       60		      rts
    112  f617
    113  f617				   .level_load_bw
    114  f617
    115  f617							; Background Color
    116  f617		       a9 00		      lda	#WEB_BG_COLOR
    117  f619		       85 a1		      sta	WebColor+0
    118  f61b
    119  f61b							; Web Color
    120  f61b		       a9 02		      lda	#WEB_FG_COLOR
    121  f61d		       85 a2		      sta	WebColor+1
    122  f61f
    123  f61f		       60		      rts
    124  f620
    125  f620							; Easy: 1-5
    126  f620							; Medium: 6-9
    127  f620							; Hard: 10-15
    128  f620							; Extreme: 16-19
    129  f620
    130  f620				   LevelDataBk		; Background Color
    131  f620		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    132  f621		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    133  f622		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    134  f623		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    135  f624		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    136  f625		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    137  f626		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    138  f627		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    139  f628		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    140  f629		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    141  f62a		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    142  f62b		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    143  f62c		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    144  f62d		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    145  f62e		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    146  f62f		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    147  f630		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    148  f631		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    149  f632		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    150  f633		       0c		      .BYTE.b	#$0C	; rgb(199, 199, 199)
    151  f634
    152  f634				   LevelDataPf		; Web Color
    153  f634		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    154  f635		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    155  f636		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    156  f637		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    157  f638		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    158  f639		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    159  f63a		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    160  f63b		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    161  f63c		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    162  f63d		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    163  f63e		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    164  f63f		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    165  f640		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    166  f641		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    167  f642		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    168  f643		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    169  f644		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    170  f645		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    171  f646		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    172  f647		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f648					      include	"objects/score.asm"
      1  f648							;======================
      2  f648							; Score (playfield)
      3  f648							;======================
      4  f648
      5  f648							; Constants
      6  f648
      7  f648		       00 00	   SCORE_BG_COLOR =	#$00
      8  f648		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f648		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f648		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f648		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f648		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f648
     14  f648		       00 05	   SCORE_LABEL_SIZE =	5
     15  f648		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f648		       00 02	   SCORE_LINE_SIZE =	2
     17  f648		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f648
     19  f648							; Initialization
     20  f648
     21  f648				   ScoreInit
     22  f648
     23  f648							; Health Score
     24  f648		       a9 ff		      lda	#$ff
     25  f64a		       85 94		      sta	ScoreValue+0
     26  f64c
     27  f64c							; Game Score
     28  f64c		       a9 00		      lda	#0
     29  f64e		       85 95		      sta	ScoreValue+1
     30  f650
     31  f650		       60		      rts
     32  f651
     33  f651							; Frame Update
     34  f651
     35  f651				   ScoreUpdate
     36  f651
     37  f651							; Current Level Digits
     38  f651		       a5 9f		      lda	LevelCurrent
     39  f653		       18		      clc
     40  f654		       69 01		      adc	#1
     41  f656
     42  f656		       20 21 f0 	      jsr	BinBcdConvert
     43  f659
     44  f659							; Only use first byte
     45  f659		       8a		      txa
     46  f65a		       29 0f		      and	#$0f
     47  f65c		       a8		      tay
     48  f65d		       8a		      txa
     49  f65e		       29 f0		      and	#$f0
     50  f660					      REPEAT	4
     51  f660		       4a		      lsr
     50  f660					      REPEND
     51  f661		       4a		      lsr
     50  f661					      REPEND
     51  f662		       4a		      lsr
     50  f662					      REPEND
     51  f663		       4a		      lsr
     52  f664					      REPEND
     53  f664		       aa		      tax
     54  f665
     55  f665							; Adjust index positions by multiplying by 5
     56  f665		       8a		      txa
     57  f666		       85 83		      sta	Temp
     58  f668		       0a		      asl
     59  f669		       0a		      asl
     60  f66a		       65 83		      adc	Temp
     61  f66c		       85 98		      sta	ScoreDigitTens
     62  f66e
     63  f66e		       98		      tya
     64  f66f		       85 83		      sta	Temp
     65  f671		       0a		      asl
     66  f672		       0a		      asl
     67  f673		       65 83		      adc	Temp
     68  f675		       85 96		      sta	ScoreDigitOnes
     69  f677
     70  f677							; Score Digits
     71  f677		       a5 95		      lda	ScoreValue+1
     72  f679
     73  f679		       20 21 f0 	      jsr	BinBcdConvert
     74  f67c
     75  f67c							; Only use first byte
     76  f67c		       8a		      txa
     77  f67d		       29 0f		      and	#$0f
     78  f67f		       a8		      tay
     79  f680		       8a		      txa
     80  f681		       29 f0		      and	#$f0
     81  f683					      REPEAT	4
     82  f683		       4a		      lsr
     81  f683					      REPEND
     82  f684		       4a		      lsr
     81  f684					      REPEND
     82  f685		       4a		      lsr
     81  f685					      REPEND
     82  f686		       4a		      lsr
     83  f687					      REPEND
     84  f687		       aa		      tax
     85  f688
     86  f688							; Adjust index positions by multiplying by 5
     87  f688		       8a		      txa
     88  f689		       85 83		      sta	Temp
     89  f68b		       0a		      asl
     90  f68c		       0a		      asl
     91  f68d		       65 83		      adc	Temp
     92  f68f		       85 99		      sta	ScoreDigitTens+1
     93  f691
     94  f691		       98		      tya
     95  f692		       85 83		      sta	Temp
     96  f694		       0a		      asl
     97  f695		       0a		      asl
     98  f696		       65 83		      adc	Temp
     99  f698		       85 97		      sta	ScoreDigitOnes+1
    100  f69a
    101  f69a							; Health Bar
    102  f69a		       a5 94		      lda	ScoreValue+0
    103  f69c		       f0 1c		      beq	.score_update_bar_empty
    104  f69e
    105  f69e					      REPEAT	4
    106  f69e		       4a		      lsr
    105  f69e					      REPEND
    106  f69f		       4a		      lsr
    105  f69f					      REPEND
    106  f6a0		       4a		      lsr
    105  f6a0					      REPEND
    106  f6a1		       4a		      lsr
    107  f6a2					      REPEND
    108  f6a2		       c9 08		      cmp	#8
    109  f6a4		       b0 09		      bcs	.score_update_bar_top
    110  f6a6
    111  f6a6				   .score_update_bar_bottom
    112  f6a6		       aa		      tax
    113  f6a7		       bd cd f7 	      lda	ScoreBar,x
    114  f6aa		       a0 00		      ldy	#$00
    115  f6ac		       4c be f6 	      jmp	.score_update_bar_store
    116  f6af
    117  f6af				   .score_update_bar_top
    118  f6af		       29 07		      and	#%00000111
    119  f6b1		       aa		      tax
    120  f6b2		       a9 7f		      lda	#$7f
    121  f6b4		       bc d5 f7 	      ldy	ScoreBarFlip,x
    122  f6b7		       4c be f6 	      jmp	.score_update_bar_store
    123  f6ba
    124  f6ba				   .score_update_bar_empty
    125  f6ba		       a9 00		      lda	#0
    126  f6bc		       a0 00		      ldy	#0
    127  f6be
    128  f6be				   .score_update_bar_store
    129  f6be		       85 9d		      sta	ScoreBarGfx+0
    130  f6c0		       84 9e		      sty	ScoreBarGfx+1
    131  f6c2
    132  f6c2				   .score_update_end
    133  f6c2		       60		      rts
    134  f6c3
    135  f6c3							; Draw loop (uses SCORE_LINES scanlines)
    136  f6c3
    137  f6c3				   ScoreDraw
    138  f6c3
    139  f6c3							; Load Colors
    140  f6c3		       a9 00		      lda	#SCORE_BG_COLOR
    141  f6c5		       85 09		      sta	COLUBK
    142  f6c7		       a9 06		      lda	#SCORE_LABEL_COLOR
    143  f6c9		       85 08		      sta	COLUPF
    144  f6cb		       85 06		      sta	COLUP0
    145  f6cd		       85 07		      sta	COLUP1
    146  f6cf
    147  f6cf							; Set Non-Mirror
    148  f6cf		       a5 80		      lda	CtrlPf
    149  f6d1		       29 fc		      and	#%11111100
    150  f6d3		       09 02		      ora	#%00000010
    151  f6d5		       85 80		      sta	CtrlPf
    152  f6d7		       85 0a		      sta	CTRLPF
    153  f6d9
    154  f6d9		       a2 00		      ldx	#0
    155  f6db				   .score_draw_label
    156  f6db
    157  f6db		       85 02		      sta	WSYNC
    158  f6dd
    159  f6dd							; First half of image
    160  f6dd		       bd 20 f1 	      lda	ScoreLabel+0,x	; 4
    161  f6e0		       85 0d		      sta	PF0	; 3
    162  f6e2		       bd 21 f1 	      lda	ScoreLabel+1,x
    163  f6e5		       85 0e		      sta	PF1
    164  f6e7		       bd 22 f1 	      lda	ScoreLabel+2,x
    165  f6ea		       85 0f		      sta	PF2
    166  f6ec
      0  f6ec					      sleep	8
      1  f6ec				   .CYCLES    SET	8
      2  f6ec
      3  f6ec				  -	      IF	.CYCLES < 2
      4  f6ec				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6ec				  -	      ERR
      6  f6ec					      ENDIF
      7  f6ec
      8  f6ec				  -	      IF	.CYCLES & 1
      9  f6ec				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6ec				  -	      nop	0
     11  f6ec				  -	      ELSE
     12  f6ec				  -	      bit	VSYNC
     13  f6ec				  -	      ENDIF
     14  f6ec				  -.CYCLES    SET	.CYCLES - 3
     15  f6ec					      ENDIF
     16  f6ec
     17  f6ec					      REPEAT	.CYCLES / 2
     18  f6ec		       ea		      nop
     17  f6ec					      REPEND
     18  f6ed		       ea		      nop
     17  f6ed					      REPEND
     18  f6ee		       ea		      nop
     17  f6ee					      REPEND
     18  f6ef		       ea		      nop
     19  f6f0					      REPEND
    168  f6f0
    169  f6f0							; Second half of image
    170  f6f0							;lda ScoreLabel+3,x ; 4
    171  f6f0		       a9 00		      lda	#0	; 2
    172  f6f2		       85 0d		      sta	PF0	; 3
    173  f6f4		       bd 24 f1 	      lda	ScoreLabel+4,x
    174  f6f7		       85 0e		      sta	PF1
    175  f6f9		       bd 25 f1 	      lda	ScoreLabel+5,x
    176  f6fc		       85 0f		      sta	PF2
    177  f6fe
    178  f6fe		       8a		      txa
    179  f6ff		       18		      clc
    180  f700		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    181  f702		       aa		      tax
    182  f703		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    183  f705		       d0 d4		      bne	.score_draw_label
    184  f707
    185  f707							; Clear labels and setup color
    186  f707		       a9 00		      lda	#0
    187  f709		       85 0d		      sta	PF0
    188  f70b		       85 0e		      sta	PF1
    189  f70d		       85 0f		      sta	PF2
    190  f70f
    191  f70f		       85 02		      sta	WSYNC
    192  f711
    193  f711							; Load Colors
    194  f711		       ad 82 02 	      lda	SWCHB
    195  f714					      REPEAT	4
    196  f714		       4a		      lsr
    195  f714					      REPEND
    196  f715		       4a		      lsr
    195  f715					      REPEND
    196  f716		       4a		      lsr
    195  f716					      REPEND
    196  f717		       4a		      lsr
    197  f718					      REPEND
    198  f718		       90 0d		      bcc	.score_draw_bw
    199  f71a
    200  f71a				   .score_draw_color
    201  f71a		       a9 44		      lda	#SCORE_LEVEL_COLOR
    202  f71c		       85 08		      sta	COLUPF
    203  f71e		       85 06		      sta	COLUP0
    204  f720		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    205  f722		       85 07		      sta	COLUP1
    206  f724
    207  f724		       4c 31 f7 	      jmp	.score_draw_digit_start
    208  f727
    209  f727				   .score_draw_bw
    210  f727		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    211  f729		       85 08		      sta	COLUPF
    212  f72b		       85 06		      sta	COLUP0
    213  f72d		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    214  f72f		       85 07		      sta	COLUP1
    215  f731
    216  f731				   .score_draw_digit_start
    217  f731
    218  f731		       85 02		      sta	WSYNC
    219  f733
    220  f733							; Prepare initial line
    221  f733
    222  f733							; Level
    223  f733		       a4 98		      ldy	ScoreDigitTens
    224  f735		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    225  f738		       29 f0		      and	#$f0
    226  f73a		       85 9a		      sta	ScoreDigitGfx
    227  f73c
    228  f73c		       a4 96		      ldy	ScoreDigitOnes
    229  f73e		       b9 bc f0 	      lda	ScoreDigits,y
    230  f741		       29 f0		      and	#$f0
    231  f743		       85 9b		      sta	ScoreDigitGfx+1
    232  f745
    233  f745							; Score
    234  f745		       a4 99		      ldy	ScoreDigitTens+1
    235  f747		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    236  f74a		       29 0f		      and	#$0f
    237  f74c		       85 9c		      sta	ScoreDigitGfx+2
    238  f74e
    239  f74e		       a4 97		      ldy	ScoreDigitOnes+1
    240  f750		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    241  f753		       29 f0		      and	#$f0
    242  f755		       05 9c		      ora	ScoreDigitGfx+2
    243  f757		       85 9c		      sta	ScoreDigitGfx+2
    244  f759
    245  f759		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    246  f75b		       a5 9a		      lda	ScoreDigitGfx
    247  f75d		       85 02		      sta	WSYNC
    248  f75f				   .score_draw_digit
    249  f75f
    250  f75f							;lda ScoreDigitGfx
    251  f75f		       85 0d		      sta	PF0
    252  f761		       a5 9b		      lda	ScoreDigitGfx+1
    253  f763		       85 0e		      sta	PF1
    254  f765		       a5 9c		      lda	ScoreDigitGfx+2
    255  f767		       85 0f		      sta	PF2
    256  f769
    257  f769							; Begin preparing next line
    258  f769		       e6 96		      inc	ScoreDigitOnes
    259  f76b		       e6 98		      inc	ScoreDigitTens
    260  f76d		       e6 97		      inc	ScoreDigitOnes+1
    261  f76f		       e6 99		      inc	ScoreDigitTens+1
    262  f771
    263  f771		       a9 00		      lda	#0
    264  f773		       85 0d		      sta	PF0
    265  f775		       a5 9d		      lda	ScoreBarGfx+0
    266  f777		       85 0e		      sta	PF1
    267  f779		       a5 9e		      lda	ScoreBarGfx+1
    268  f77b		       85 0f		      sta	PF2
    269  f77d
    270  f77d							; Level 1st Digit
    271  f77d		       a4 98		      ldy	ScoreDigitTens
    272  f77f		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    273  f782		       29 f0		      and	#$f0
    274  f784		       85 83		      sta	Temp
    275  f786
    276  f786							; Score 1st Digit
    277  f786		       a4 99		      ldy	ScoreDigitTens+1
    278  f788		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    279  f78b		       29 0f		      and	#$0f
    280  f78d		       85 84		      sta	Temp+1
    281  f78f
    282  f78f		       a5 9a		      lda	ScoreDigitGfx
    283  f791		       85 0d		      sta	PF0
    284  f793		       a5 9b		      lda	ScoreDigitGfx+1
    285  f795		       85 0e		      sta	PF1
    286  f797		       a5 9c		      lda	ScoreDigitGfx+2
    287  f799		       85 0f		      sta	PF2
    288  f79b
    289  f79b							; Level 2nd Digit (and transfer)
    290  f79b		       a4 96		      ldy	ScoreDigitOnes
    291  f79d		       b9 bc f0 	      lda	ScoreDigits,y
    292  f7a0		       29 f0		      and	#$f0
    293  f7a2		       85 9b		      sta	ScoreDigitGfx+1
    294  f7a4
      0  f7a4					      sleep	3
      1  f7a4				   .CYCLES    SET	3
      2  f7a4
      3  f7a4				  -	      IF	.CYCLES < 2
      4  f7a4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7a4				  -	      ERR
      6  f7a4					      ENDIF
      7  f7a4
      8  f7a4					      IF	.CYCLES & 1
      9  f7a4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7a4		       04 00		      nop	0
     11  f7a6				  -	      ELSE
     12  f7a6				  -	      bit	VSYNC
     13  f7a6					      ENDIF
     14  f7a6				   .CYCLES    SET	.CYCLES - 3
     15  f7a6					      ENDIF
     16  f7a6
     17  f7a6				  -	      REPEAT	.CYCLES / 2
     18  f7a6				  -	      nop
     19  f7a6					      REPEND
    296  f7a6
    297  f7a6		       a9 00		      lda	#0
    298  f7a8		       85 0d		      sta	PF0
    299  f7aa		       a5 9d		      lda	ScoreBarGfx+0
    300  f7ac		       85 0e		      sta	PF1
    301  f7ae		       a4 9e		      ldy	ScoreBarGfx+1
    302  f7b0		       84 0f		      sty	PF2
    303  f7b2
    304  f7b2							; Score 2nd Digit (and transfer)
    305  f7b2		       a4 97		      ldy	ScoreDigitOnes+1
    306  f7b4		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    307  f7b7		       29 f0		      and	#$f0
    308  f7b9		       05 84		      ora	Temp+1
    309  f7bb		       85 9c		      sta	ScoreDigitGfx+2
    310  f7bd
    311  f7bd							; Transfer Level 1st Digit
    312  f7bd		       a5 83		      lda	Temp
    313  f7bf		       85 9a		      sta	ScoreDigitGfx
    314  f7c1
    315  f7c1		       ca		      dex
    316  f7c2		       d0 9b		      bne	.score_draw_digit
    317  f7c4
    318  f7c4		       a9 00		      lda	#0
    319  f7c6		       85 0d		      sta	PF0
    320  f7c8		       85 0e		      sta	PF1
    321  f7ca		       85 0f		      sta	PF2
    322  f7cc
    323  f7cc		       60		      rts
    324  f7cd
    325  f7cd				   ScoreBar
    326  f7cd		       40		      .BYTE.b	#%01000000
    327  f7ce		       40		      .BYTE.b	#%01000000
    328  f7cf		       60		      .BYTE.b	#%01100000
    329  f7d0		       70		      .BYTE.b	#%01110000
    330  f7d1		       78		      .BYTE.b	#%01111000
    331  f7d2		       7c		      .BYTE.b	#%01111100
    332  f7d3		       7e		      .BYTE.b	#%01111110
    333  f7d4		       7f		      .BYTE.b	#%01111111
    334  f7d5
    335  f7d5				   ScoreBarFlip
    336  f7d5		       01		      .BYTE.b	#%00000001
    337  f7d6		       03		      .BYTE.b	#%00000011
    338  f7d7		       07		      .BYTE.b	#%00000111
    339  f7d8		       0f		      .BYTE.b	#%00001111
    340  f7d9		       1f		      .BYTE.b	#%00011111
    341  f7da		       3f		      .BYTE.b	#%00111111
    342  f7db		       7f		      .BYTE.b	#%01111111
    343  f7dc		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f7dd					      include	"objects/web.asm"
      1  f7dd							;================
      2  f7dd							; Web (Playfield)
      3  f7dd							;================
      4  f7dd
      5  f7dd							; Constants
      6  f7dd
      7  f7dd		       00 00	   WEB_BG_COLOR =	#$00
      8  f7dd		       00 02	   WEB_FG_COLOR =	#$02
      9  f7dd
     10  f7dd		       00 1c	   WEB_SIZE   =	28
     11  f7dd		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f7dd		       00 06	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f7dd
     14  f7dd							; Scanline Draw
     15  f7dd
     16  f7dd				   WebDrawStart
     17  f7dd
     18  f7dd							; Load Colors
     19  f7dd		       a5 a2		      lda	WebColor+1
     20  f7df		       85 08		      sta	COLUPF
     21  f7e1
     22  f7e1							; Mirror playfield and use standard playfield color
     23  f7e1		       a5 80		      lda	CtrlPf
     24  f7e3		       29 fc		      and	#%11111100
     25  f7e5		       09 01		      ora	#%00000001
     26  f7e7		       85 80		      sta	CtrlPf
     27  f7e9		       85 0a		      sta	CTRLPF
     28  f7eb
     29  f7eb							; Initialize image index
     30  f7eb		       a9 00		      lda	#0
     31  f7ed		       85 a0		      sta	WebIndex
     32  f7ef
     33  f7ef		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f7f0					      include	"objects/spider.asm"
      1  f7f0							;=================
      2  f7f0							; Spider (player0)
      3  f7f0							;=================
      4  f7f0
      5  f7f0							; Constants
      6  f7f0
      7  f7f0		       00 56	   SPIDER_COLOR =	#$56
      8  f7f0		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f7f0		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f7f0		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f7f0
     12  f7f0		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f7f0		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f7f0		       00 02	   SPIDER_VEL_X =	2
     15  f7f0		       00 02	   SPIDER_VEL_Y =	2
     16  f7f0
     17  f7f0							; Initialization
     18  f7f0
     19  f7f0				   SpiderInit
     20  f7f0
     21  f7f0							; Initialize Position in center of screen
     22  f7f0		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f7f2		       85 a5		      sta	SpiderPos
     24  f7f4		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f7f6		       85 a6		      sta	SpiderPos+1
     26  f7f8
     27  f7f8							; Initial direction
     28  f7f8		       a9 20		      lda	#%00100000
     29  f7fa		       85 a7		      sta	SpiderCtrl
     30  f7fc
     31  f7fc							; Setup Sprite
      0  f7fc					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f7fc				   .POINTER   SET	SpiderPtr
      2  f7fc				   .ADDRESS   SET	SpiderSprite
      3  f7fc
      4  f7fc		       a9 92		      LDA	#<.ADDRESS
      5  f7fe		       85 a3		      STA	.POINTER
      6  f800		       a9 f1		      LDA	#>.ADDRESS
      7  f802		       85 a4		      STA	.POINTER+1
      8  f804
     33  f804
     34  f804		       60		      rts
     35  f805
     36  f805							; Frame Update
     37  f805
     38  f805				   SpiderUpdate
     39  f805		       20 0c f8 	      jsr	SpiderControl
     40  f808		       20 f2 f8 	      jsr	SpiderCollision
     41  f80b		       60		      rts
     42  f80c
     43  f80c				   SpiderControl
     44  f80c
     45  f80c							; Control Position
     46  f80c		       a6 a5		      ldx	SpiderPos
     47  f80e		       a4 a6		      ldy	SpiderPos+1
     48  f810		       ad 80 02 	      lda	SWCHA
     49  f813
     50  f813				   .spider_control_check_right
     51  f813		       30 02		      bmi	.spider_control_check_left
     52  f815
     53  f815					      REPEAT	#SPIDER_VEL_X
     54  f815		       e8		      inx
     53  f815					      REPEND
     54  f816		       e8		      inx
     55  f817					      REPEND
     56  f817
     57  f817				   .spider_control_check_left
     58  f817		       2a		      rol
     59  f818		       30 02		      bmi	.spider_control_check_down
     60  f81a
     61  f81a					      REPEAT	#SPIDER_VEL_X
     62  f81a		       ca		      dex
     61  f81a					      REPEND
     62  f81b		       ca		      dex
     63  f81c					      REPEND
     64  f81c
     65  f81c				   .spider_control_check_down
     66  f81c		       2a		      rol
     67  f81d		       30 02		      bmi	.spider_control_check_up
     68  f81f
     69  f81f					      REPEAT	#SPIDER_VEL_Y
     70  f81f		       88		      dey
     69  f81f					      REPEND
     70  f820		       88		      dey
     71  f821					      REPEND
     72  f821
     73  f821				   .spider_control_check_up
     74  f821		       2a		      rol
     75  f822		       30 02		      bmi	.spider_control_sprite
     76  f824
     77  f824					      REPEAT	#SPIDER_VEL_Y
     78  f824		       c8		      iny
     77  f824					      REPEND
     78  f825		       c8		      iny
     79  f826					      REPEND
     80  f826
     81  f826				   .spider_control_sprite
     82  f826							; Control Sprite
     83  f826		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     84  f828
     85  f828				   .spider_control_sprite_x
     86  f828		       e4 a5		      cpx	SpiderPos
     87  f82a		       90 04		      bcc	.spider_control_sprite_left
     88  f82c		       f0 09		      beq	.spider_control_sprite_y
     89  f82e		       b0 05		      bcs	.spider_control_sprite_right
     90  f830
     91  f830				   .spider_control_sprite_left
     92  f830		       09 80		      ora	#%10000000
     93  f832		       4c 37 f8 	      jmp	.spider_control_sprite_y
     94  f835
     95  f835				   .spider_control_sprite_right
     96  f835		       09 40		      ora	#%01000000
     97  f837
     98  f837				   .spider_control_sprite_y
     99  f837		       c4 a6		      cpy	SpiderPos+1
    100  f839		       90 04		      bcc	.spider_control_sprite_down
    101  f83b		       f0 09		      beq	.spider_control_sprite_store
    102  f83d		       b0 05		      bcs	.spider_control_sprite_up
    103  f83f
    104  f83f				   .spider_control_sprite_down
    105  f83f		       09 10		      ora	#%00010000
    106  f841		       4c 46 f8 	      jmp	.spider_control_sprite_store
    107  f844
    108  f844				   .spider_control_sprite_up
    109  f844		       09 20		      ora	#%00100000
    110  f846
    111  f846				   .spider_control_sprite_store
    112  f846		       c9 00		      cmp	#%00000000
    113  f848		       f0 02		      beq	.spider_control_boundary
    114  f84a		       85 a7		      sta	SpiderCtrl
    115  f84c
    116  f84c				   .spider_control_boundary
    117  f84c							; Check Playfield Boundaries
    118  f84c
    119  f84c				   .spider_control_boundary_left
    120  f84c		       e0 03		      cpx	#SPIDER_VEL_X+1
    121  f84e		       b0 05		      bcs	.spider_control_boundary_right
    122  f850		       a2 03		      ldx	#SPIDER_VEL_X+1
    123  f852		       4c 5b f8 	      jmp	.spider_control_boundary_top
    124  f855
    125  f855				   .spider_control_boundary_right
    126  f855		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    127  f857		       90 02		      bcc	.spider_control_boundary_top
    128  f859		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    129  f85b
    130  f85b				   .spider_control_boundary_top
    131  f85b		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    132  f85d		       b0 05		      bcs	.spider_control_boundary_bottom
    133  f85f		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    134  f861		       4c 6a f8 	      jmp	.spider_control_store
    135  f864
    136  f864				   .spider_control_boundary_bottom
    137  f864		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    138  f866		       90 02		      bcc	.spider_control_store
    139  f868		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    140  f86a
    141  f86a				   .spider_control_store
    142  f86a							; Store new position
    143  f86a		       86 a5		      stx	SpiderPos
    144  f86c		       84 a6		      sty	SpiderPos+1
    145  f86e
    146  f86e							; TODO: Optimize this somehow?
    147  f86e				   .spider_control_sprite_assign
    148  f86e							; Skip if no change
    149  f86e		       c9 00		      cmp	#%00000000
    150  f870		       f0 7f		      beq	.spider_control_return
    151  f872
    152  f872		       a2 00		      ldx	#%00000000	; For reflection
    153  f874
    154  f874				   .spider_control_sprite_assign_left
    155  f874		       c9 80		      cmp	#%10000000
    156  f876		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f878					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f878				   .POINTER   SET	SpiderPtr
      2  f878				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f878
      4  f878		       a9 a2		      LDA	#<.ADDRESS
      5  f87a		       85 a3		      STA	.POINTER
      6  f87c		       a9 f1		      LDA	#>.ADDRESS
      7  f87e		       85 a4		      STA	.POINTER+1
      8  f880
    158  f880		       a2 08		      ldx	#%00001000
    159  f882		       4c ef f8 	      jmp	.spider_control_reflect
    160  f885
    161  f885				   .spider_control_sprite_assign_right
    162  f885		       c9 40		      cmp	#%01000000
    163  f887		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f889					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f889				   .POINTER   SET	SpiderPtr
      2  f889				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f889
      4  f889		       a9 a2		      LDA	#<.ADDRESS
      5  f88b		       85 a3		      STA	.POINTER
      6  f88d		       a9 f1		      LDA	#>.ADDRESS
      7  f88f		       85 a4		      STA	.POINTER+1
      8  f891
    165  f891		       4c ef f8 	      jmp	.spider_control_reflect
    166  f894
    167  f894				   .spider_control_sprite_assign_top
    168  f894		       c9 20		      cmp	#%00100000
    169  f896		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f898					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f898				   .POINTER   SET	SpiderPtr
      2  f898				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f898
      4  f898		       a9 92		      LDA	#<.ADDRESS
      5  f89a		       85 a3		      STA	.POINTER
      6  f89c		       a9 f1		      LDA	#>.ADDRESS
      7  f89e		       85 a4		      STA	.POINTER+1
      8  f8a0
    171  f8a0		       4c ef f8 	      jmp	.spider_control_reflect
    172  f8a3
    173  f8a3				   .spider_control_sprite_assign_bottom
    174  f8a3		       c9 10		      cmp	#%00010000
    175  f8a5		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f8a7					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f8a7				   .POINTER   SET	SpiderPtr
      2  f8a7				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f8a7
      4  f8a7		       a9 b2		      LDA	#<.ADDRESS
      5  f8a9		       85 a3		      STA	.POINTER
      6  f8ab		       a9 f1		      LDA	#>.ADDRESS
      7  f8ad		       85 a4		      STA	.POINTER+1
      8  f8af
    177  f8af		       4c ef f8 	      jmp	.spider_control_reflect
    178  f8b2
    179  f8b2				   .spider_control_sprite_assign_top_right
    180  f8b2		       c9 60		      cmp	#%01100000
    181  f8b4		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f8b6					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8b6				   .POINTER   SET	SpiderPtr
      2  f8b6				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8b6
      4  f8b6		       a9 a2		      LDA	#<.ADDRESS
      5  f8b8		       85 a3		      STA	.POINTER
      6  f8ba		       a9 f1		      LDA	#>.ADDRESS
      7  f8bc		       85 a4		      STA	.POINTER+1
      8  f8be
    183  f8be		       4c ef f8 	      jmp	.spider_control_reflect
    184  f8c1
    185  f8c1				   .spider_control_sprite_assign_bottom_right
    186  f8c1		       c9 50		      cmp	#%01010000
    187  f8c3		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f8c5					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8c5				   .POINTER   SET	SpiderPtr
      2  f8c5				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8c5
      4  f8c5		       a9 a2		      LDA	#<.ADDRESS
      5  f8c7		       85 a3		      STA	.POINTER
      6  f8c9		       a9 f1		      LDA	#>.ADDRESS
      7  f8cb		       85 a4		      STA	.POINTER+1
      8  f8cd
    189  f8cd		       4c ef f8 	      jmp	.spider_control_reflect
    190  f8d0
    191  f8d0				   .spider_control_sprite_assign_bottom_left
    192  f8d0		       c9 90		      cmp	#%10010000
    193  f8d2		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f8d4					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8d4				   .POINTER   SET	SpiderPtr
      2  f8d4				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8d4
      4  f8d4		       a9 a2		      LDA	#<.ADDRESS
      5  f8d6		       85 a3		      STA	.POINTER
      6  f8d8		       a9 f1		      LDA	#>.ADDRESS
      7  f8da		       85 a4		      STA	.POINTER+1
      8  f8dc
    195  f8dc		       a2 08		      ldx	#%00001000
    196  f8de		       4c ef f8 	      jmp	.spider_control_reflect
    197  f8e1
    198  f8e1				   .spider_control_sprite_assign_top_left
    199  f8e1		       c9 a0		      cmp	#%10100000
    200  f8e3		       d0 0a		      bne	.spider_control_reflect
      0  f8e5					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8e5				   .POINTER   SET	SpiderPtr
      2  f8e5				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8e5
      4  f8e5		       a9 a2		      LDA	#<.ADDRESS
      5  f8e7		       85 a3		      STA	.POINTER
      6  f8e9		       a9 f1		      LDA	#>.ADDRESS
      7  f8eb		       85 a4		      STA	.POINTER+1
      8  f8ed
    202  f8ed		       a2 08		      ldx	#%00001000
    203  f8ef
    204  f8ef				   .spider_control_reflect
    205  f8ef		       86 0b		      stx	REFP0
    206  f8f1
    207  f8f1				   .spider_control_return
    208  f8f1		       60		      rts
    209  f8f2
    210  f8f2				   SpiderCollision
    211  f8f2		       a0 56		      ldy	#SPIDER_COLOR
    212  f8f4
    213  f8f4							; Check b/w
    214  f8f4		       ad 82 02 	      lda	SWCHB
    215  f8f7					      REPEAT	4
    216  f8f7		       4a		      lsr
    215  f8f7					      REPEND
    216  f8f8		       4a		      lsr
    215  f8f8					      REPEND
    216  f8f9		       4a		      lsr
    215  f8f9					      REPEND
    216  f8fa		       4a		      lsr
    217  f8fb					      REPEND
    218  f8fb		       b0 02		      bcs	.spider_collision_m0
    219  f8fd
    220  f8fd		       a0 0e		      ldy	#SPIDER_BW_COLOR
    221  f8ff
    222  f8ff				   .spider_collision_m0
    223  f8ff							; Check stun status
    224  f8ff		       a6 b6		      ldx	BugStunned
    225  f901		       d0 04		      bne	.spider_collision_m1
    226  f903
    227  f903							; Collision for M0 (V set)
    228  f903		       24 00		      bit	CXM0P
    229  f905		       70 0b		      bvs	.spider_collision_active
    230  f907
    231  f907				   .spider_collision_m1
    232  f907							; Check stun status
    233  f907		       a6 b7		      ldx	BugStunned+1
    234  f909		       d0 14		      bne	.spider_collision_return
    235  f90b
    236  f90b							; Collision for M1 (N set)
    237  f90b		       24 01		      bit	CXM1P
    238  f90d		       30 03		      bmi	.spider_collision_active
    239  f90f
    240  f90f		       4c 1f f9 	      jmp	.spider_collision_return
    241  f912
    242  f912				   .spider_collision_active
    243  f912		       a0 44		      ldy	#SPIDER_COL_COLOR
    244  f914
    245  f914							; Check b/w
    246  f914		       ad 82 02 	      lda	SWCHB
    247  f917					      REPEAT	4
    248  f917		       4a		      lsr
    247  f917					      REPEND
    248  f918		       4a		      lsr
    247  f918					      REPEND
    248  f919		       4a		      lsr
    247  f919					      REPEND
    248  f91a		       4a		      lsr
    249  f91b					      REPEND
    250  f91b		       b0 02		      bcs	.spider_collision_return
    251  f91d
    252  f91d		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    253  f91f
    254  f91f				   .spider_collision_return
    255  f91f		       84 a8		      sty	SpiderColor
    256  f921		       60		      rts
    257  f922
    258  f922				   SpiderPosition
    259  f922
    260  f922							; Set Position
    261  f922		       a2 00		      ldx	#0	; Object (player0)
    262  f924		       a5 a5		      lda	SpiderPos	; X Position
    263  f926		       20 00 f0 	      jsr	PosObject
    264  f929
    265  f929		       60		      rts
    266  f92a
    267  f92a							; Scanline Draw
    268  f92a
    269  f92a				   SpiderDrawStart
    270  f92a
    271  f92a							; Set player 0 to be quad size
    272  f92a		       a5 81		      lda	NuSiz0
    273  f92c		       29 f8		      and	#%11111000
    274  f92e		       09 05		      ora	#%00000101
    275  f930		       85 81		      sta	NuSiz0
    276  f932		       85 04		      sta	NUSIZ0
    277  f934
    278  f934							; Set sprite color
    279  f934		       a5 a8		      lda	SpiderColor
    280  f936		       85 06		      sta	COLUP0
    281  f938
    282  f938							; Determine if we need to use vertical delay (odd line)
    283  f938		       a5 a6		      lda	SpiderPos+1	; Y Position
    284  f93a		       4a		      lsr
    285  f93b		       b0 05		      bcs	.spider_draw_start_nodelay
    286  f93d
    287  f93d		       a0 01		      ldy	#1
    288  f93f		       4c 44 f9 	      jmp	.spider_draw_start_set_delay
    289  f942
    290  f942				   .spider_draw_start_nodelay
    291  f942		       a0 00		      ldy	#0
    292  f944
    293  f944				   .spider_draw_start_set_delay
    294  f944		       84 25		      sty	VDELP0
    295  f946
    296  f946				   .spider_draw_start_pos
    297  f946							; Calculate starting position
    298  f946		       18		      clc
    299  f947		       69 10		      adc	#SPIDER_SIZE
    300  f949		       85 aa		      sta	SpiderDrawPos
    301  f94b
    302  f94b							; Initialize sprite index and line buffer
    303  f94b		       a9 00		      lda	#0
    304  f94d		       85 a9		      sta	SpiderIndex
    305  f94f		       85 ab		      sta	SpiderLine
    306  f951
    307  f951		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f952					      include	"objects/line.asm"
      1  f952							;================
      2  f952							; Line (ball)
      3  f952							;================
      4  f952
      5  f952							; Constants
      6  f952
      7  f952		       00 08	   LINE_SIZE  =	8
      8  f952		       00 04	   LINE_VEL_X =	4
      9  f952		       00 04	   LINE_VEL_Y =	4
     10  f952
     11  f952		       00 08	   LINE_AUDIO_C =	8
     12  f952		       00 01	   LINE_AUDIO_F =	1
     13  f952		       00 04	   LINE_AUDIO_V =	4
     14  f952
     15  f952		       00 08	   LINE_SAMPLE_LEN =	8
     16  f952		       00 03	   LINE_SAMPLE_C =	3
     17  f952		       00 01	   LINE_SAMPLE_F =	1
     18  f952		       00 04	   LINE_SAMPLE_V =	4
     19  f952
     20  f952							; Initialization
     21  f952
     22  f952				   LineInit
     23  f952
     24  f952							; Initial Line Control
     25  f952		       a9 00		      lda	#0
     26  f954		       85 ae		      sta	LineEnabled
     27  f956		       85 af		      sta	LinePos+0
     28  f958		       85 b0		      sta	LinePos+1
     29  f95a		       85 b3		      sta	LineDrawPos+0
     30  f95c		       85 b4		      sta	LineDrawPos+1
     31  f95e
     32  f95e							; Initial direction
     33  f95e							;lda #0
     34  f95e		       85 b1		      sta	LineVelocity+0
     35  f960		       a9 04		      lda	#LINE_VEL_Y
     36  f962		       85 b2		      sta	LineVelocity+1
     37  f964
     38  f964		       60		      rts
     39  f965
     40  f965							; Frame Update
     41  f965
     42  f965				   LineUpdate
     43  f965		       20 6f f9 	      jsr	LineControl
     44  f968		       20 21 fa 	      jsr	LineObject
     45  f96b		       20 4c fa 	      jsr	LineCollision
     46  f96e		       60		      rts
     47  f96f
     48  f96f				   LineControl
     49  f96f
     50  f96f							; Check if Fire Button on controller 1 is pressed
     51  f96f		       a5 0c		      lda	INPT4
     52  f971		       30 08		      bmi	.line_control_skip
     53  f973
     54  f973		       24 ae		      bit	LineEnabled
     55  f975		       30 04		      bmi	.line_control_skip
     56  f977
     57  f977		       a5 a7		      lda	SpiderCtrl
     58  f979		       d0 03		      bne	.line_control_fire
     59  f97b
     60  f97b				   .line_control_skip
     61  f97b		       4c 20 fa 	      jmp	.line_control_return
     62  f97e
     63  f97e				   .line_control_fire
     64  f97e		       20 8f fa 	      jsr	LineEnable
     65  f981
     66  f981				   .line_control_x
     67  f981		       a5 a7		      lda	SpiderCtrl
     68  f983		       29 c0		      and	#%11000000
     69  f985		       f0 0e		      beq	.line_control_x_none
     70  f987				   .line_control_x_left
     71  f987		       c9 80		      cmp	#%10000000
     72  f989		       d0 05		      bne	.line_control_x_right
     73  f98b
     74  f98b		       a9 fc		      lda	#-LINE_VEL_X
     75  f98d		       4c 97 f9 	      jmp	.line_control_x_store
     76  f990				   .line_control_x_right
     77  f990		       a9 04		      lda	#LINE_VEL_X
     78  f992		       4c 97 f9 	      jmp	.line_control_x_store
     79  f995				   .line_control_x_none
     80  f995		       a9 00		      lda	#0
     81  f997				   .line_control_x_store
     82  f997		       85 b1		      sta	LineVelocity
     83  f999
     84  f999				   .line_control_y
     85  f999		       a5 a7		      lda	SpiderCtrl
     86  f99b		       29 30		      and	#%00110000
     87  f99d		       f0 0e		      beq	.line_control_y_none
     88  f99f				   .line_control_y_up
     89  f99f		       c9 20		      cmp	#%00100000
     90  f9a1		       d0 05		      bne	.line_control_y_down
     91  f9a3
     92  f9a3		       a9 04		      lda	#LINE_VEL_Y
     93  f9a5		       4c af f9 	      jmp	.line_control_y_store
     94  f9a8				   .line_control_y_down
     95  f9a8		       a9 fc		      lda	#-LINE_VEL_Y
     96  f9aa		       4c af f9 	      jmp	.line_control_y_store
     97  f9ad				   .line_control_y_none
     98  f9ad		       a9 00		      lda	#0
     99  f9af				   .line_control_y_store
    100  f9af		       85 b2		      sta	LineVelocity+1
    101  f9b1
    102  f9b1				   .line_control_position
    103  f9b1
    104  f9b1		       a2 00		      ldx	#0	; offsetX
    105  f9b3		       a0 00		      ldy	#0	; offsetY
    106  f9b5
    107  f9b5		       a5 a7		      lda	SpiderCtrl
    108  f9b7		       29 f0		      and	#%11110000
    109  f9b9
    110  f9b9				   .line_control_position_left
    111  f9b9		       c9 80		      cmp	#%10000000
    112  f9bb		       d0 07		      bne	.line_control_position_right
    113  f9bd
    114  f9bd		       a2 00		      ldx	#0
    115  f9bf		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    116  f9c1		       4c 0c fa 	      jmp	.line_control_position_store
    117  f9c4
    118  f9c4				   .line_control_position_right
    119  f9c4		       c9 40		      cmp	#%01000000
    120  f9c6		       d0 07		      bne	.line_control_position_top
    121  f9c8
    122  f9c8		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    123  f9ca		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    124  f9cc		       4c 0c fa 	      jmp	.line_control_position_store
    125  f9cf
    126  f9cf				   .line_control_position_top
    127  f9cf		       c9 20		      cmp	#%00100000
    128  f9d1		       d0 07		      bne	.line_control_position_bottom
    129  f9d3
    130  f9d3		       a2 08		      ldx	#SPIDER_SIZE/2
    131  f9d5		       a0 10		      ldy	#SPIDER_SIZE
    132  f9d7		       4c 0c fa 	      jmp	.line_control_position_store
    133  f9da
    134  f9da				   .line_control_position_bottom
    135  f9da		       c9 10		      cmp	#%00010000
    136  f9dc		       d0 05		      bne	.line_control_position_top_right
    137  f9de
    138  f9de		       a2 08		      ldx	#SPIDER_SIZE/2
    139  f9e0		       4c 0c fa 	      jmp	.line_control_position_store
    140  f9e3
    141  f9e3				   .line_control_position_top_right
    142  f9e3		       c9 60		      cmp	#%01100000
    143  f9e5		       d0 07		      bne	.line_control_position_bottom_right
    144  f9e7
    145  f9e7		       a2 10		      ldx	#SPIDER_SIZE
    146  f9e9		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    147  f9eb		       4c 0c fa 	      jmp	.line_control_position_store
    148  f9ee
    149  f9ee				   .line_control_position_bottom_right
    150  f9ee		       c9 50		      cmp	#%01010000
    151  f9f0		       d0 07		      bne	.line_control_position_bottom_left
    152  f9f2
    153  f9f2		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    154  f9f4		       a0 00		      ldy	#0
    155  f9f6		       4c 0c fa 	      jmp	.line_control_position_store
    156  f9f9
    157  f9f9				   .line_control_position_bottom_left
    158  f9f9		       c9 90		      cmp	#%10010000
    159  f9fb		       d0 07		      bne	.line_control_position_top_left
    160  f9fd
    161  f9fd							; No Offset
    162  f9fd		       a2 04		      ldx	#LINE_SIZE/2
    163  f9ff		       a0 04		      ldy	#LINE_SIZE/2
    164  fa01		       4c 0c fa 	      jmp	.line_control_position_store
    165  fa04
    166  fa04				   .line_control_position_top_left
    167  fa04		       c9 a0		      cmp	#%10100000
    168  fa06		       d0 04		      bne	.line_control_position_store
    169  fa08
    170  fa08		       a2 00		      ldx	#0
    171  fa0a		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    172  fa0c
    173  fa0c				   .line_control_position_store
    174  fa0c
    175  fa0c							; Apply offsetX to playerX
    176  fa0c		       a5 a5		      lda	SpiderPos
    177  fa0e		       86 83		      stx	Temp
    178  fa10		       18		      clc
    179  fa11		       65 83		      adc	Temp
    180  fa13		       aa		      tax
    181  fa14
    182  fa14							; Apply offsetY to playerY
    183  fa14		       a5 a6		      lda	SpiderPos+1
    184  fa16		       84 83		      sty	Temp
    185  fa18		       18		      clc
    186  fa19		       65 83		      adc	Temp
    187  fa1b		       a8		      tay
    188  fa1c
    189  fa1c		       86 af		      stx	LinePos
    190  fa1e		       84 b0		      sty	LinePos+1
    191  fa20
    192  fa20				   .line_control_return
    193  fa20		       60		      rts
    194  fa21
    195  fa21				   LineObject
    196  fa21
    197  fa21							; Check if line is enabled
    198  fa21		       24 ae		      bit	LineEnabled
    199  fa23		       10 26		      bpl	.line_object_return
    200  fa25
    201  fa25							; Load position
    202  fa25		       a6 af		      ldx	LinePos
    203  fa27		       a4 b0		      ldy	LinePos+1
    204  fa29
    205  fa29				   .line_object_boundary
    206  fa29				   .line_object_boundary_left
    207  fa29		       e0 04		      cpx	#LINE_VEL_X
    208  fa2b		       90 1b		      bcc	.line_object_disable
    209  fa2d				   .line_object_boundary_right
    210  fa2d		       e0 9b		      cpx	#160-LINE_VEL_X-1
    211  fa2f		       b0 17		      bcs	.line_object_disable
    212  fa31				   .line_object_boundary_bottom
    213  fa31		       c0 04		      cpy	#LINE_VEL_Y
    214  fa33		       90 13		      bcc	.line_object_disable
    215  fa35				   .line_object_boundary_top
    216  fa35		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    217  fa37		       b0 0f		      bcs	.line_object_disable
    218  fa39
    219  fa39				   .line_object_velocity
    220  fa39
    221  fa39							; Apply Velocity
    222  fa39		       8a		      txa
    223  fa3a		       18		      clc
    224  fa3b		       65 b1		      adc	LineVelocity
    225  fa3d		       85 af		      sta	LinePos
    226  fa3f
    227  fa3f		       98		      tya
    228  fa40		       18		      clc
    229  fa41		       65 b2		      adc	LineVelocity+1
    230  fa43		       85 b0		      sta	LinePos+1
    231  fa45
    232  fa45		       4c 4b fa 	      jmp	.line_object_return
    233  fa48
    234  fa48				   .line_object_disable
    235  fa48		       20 9b fa 	      jsr	LineDisable
    236  fa4b
    237  fa4b				   .line_object_return
    238  fa4b		       60		      rts
    239  fa4c
    240  fa4c				   LineCollision
    241  fa4c
    242  fa4c		       a9 78		      lda	#BUG_STUN_LENGTH
    243  fa4e
    244  fa4e				   .line_collision_m0
    245  fa4e		       24 04		      bit	CXM0FB
    246  fa50		       50 08		      bvc	.line_collision_m1
    247  fa52
    248  fa52							; Set stun timer
    249  fa52		       85 b6		      sta	BugStunned+0
    250  fa54
    251  fa54							; Disable line
    252  fa54		       20 9b fa 	      jsr	LineDisable
    253  fa57		       4c 63 fa 	      jmp	.line_collision_sample
    254  fa5a
    255  fa5a				   .line_collision_m1
    256  fa5a		       24 05		      bit	CXM1FB
    257  fa5c		       50 08		      bvc	.line_collision_return
    258  fa5e
    259  fa5e							; Set stun timer
    260  fa5e		       85 b7		      sta	BugStunned+1
    261  fa60
    262  fa60							; Disable line
    263  fa60		       20 9b fa 	      jsr	LineDisable
    264  fa63
    265  fa63				   .line_collision_sample
    266  fa63		       20 bd fa 	      jsr	LineSample
    267  fa66
    268  fa66				   .line_collision_return
    269  fa66		       60		      rts
    270  fa67
    271  fa67				   LinePosition
    272  fa67
    273  fa67							; Set Line Position
    274  fa67		       a2 04		      ldx	#4	; Object (ball)
    275  fa69		       a5 af		      lda	LinePos	; X Position
    276  fa6b		       20 00 f0 	      jsr	PosObject
    277  fa6e
    278  fa6e		       60		      rts
    279  fa6f
    280  fa6f							; Scanline Draw
    281  fa6f
    282  fa6f				   LineDrawStart
    283  fa6f
    284  fa6f							; Set ball size to be 4 clocks (4/5 bits)
    285  fa6f		       a5 80		      lda	CtrlPf
    286  fa71		       29 cf		      and	#%11001111
    287  fa73		       09 20		      ora	#%00100000
    288  fa75		       85 80		      sta	CtrlPf
    289  fa77		       85 0a		      sta	CTRLPF
    290  fa79
    291  fa79							; Determine if we need to use vertical delay (oven line)
    292  fa79		       a5 b0		      lda	LinePos+1
    293  fa7b		       4a		      lsr
    294  fa7c		       90 05		      bcc	.line_draw_start_nodelay
    295  fa7e
    296  fa7e		       a0 01		      ldy	#1
    297  fa80		       4c 85 fa 	      jmp	.line_draw_start_set_delay
    298  fa83
    299  fa83				   .line_draw_start_nodelay
    300  fa83		       a0 00		      ldy	#0
    301  fa85
    302  fa85				   .line_draw_start_set_delay
    303  fa85		       84 27		      sty	VDELBL
    304  fa87
    305  fa87				   .line_draw_start_pos
    306  fa87							; Calculate starting position
    307  fa87		       18		      clc
    308  fa88		       85 b3		      sta	LineDrawPos+0
    309  fa8a		       69 04		      adc	#LINE_SIZE/2
    310  fa8c		       85 b4		      sta	LineDrawPos+1
    311  fa8e
    312  fa8e		       60		      rts
    313  fa8f
    314  fa8f				   LineEnable
    315  fa8f		       a9 80		      lda	#%10000000
    316  fa91		       85 ae		      sta	LineEnabled
    317  fa93
    318  fa93		       a5 93		      lda	SampleStep
    319  fa95		       d0 03		      bne	.line_enable_return
    320  fa97
    321  fa97		       20 a7 fa 	      jsr	LineAudioPlay
    322  fa9a
    323  fa9a				   .line_enable_return
    324  fa9a		       60		      rts
    325  fa9b
    326  fa9b				   LineDisable
    327  fa9b		       a9 00		      lda	#0
    328  fa9d		       85 ae		      sta	LineEnabled
    329  fa9f
    330  fa9f		       a5 93		      lda	SampleStep
    331  faa1		       d0 03		      bne	.line_disable_return
    332  faa3
    333  faa3		       20 b4 fa 	      jsr	LineAudioMute
    334  faa6
    335  faa6				   .line_disable_return
    336  faa6		       60		      rts
    337  faa7
    338  faa7				   LineAudioPlay
    339  faa7		       a9 08		      lda	#LINE_AUDIO_C
    340  faa9		       85 16		      sta	AUDC1
    341  faab		       a9 01		      lda	#LINE_AUDIO_F
    342  faad		       85 18		      sta	AUDF1
    343  faaf		       a9 04		      lda	#LINE_AUDIO_V
    344  fab1		       85 1a		      sta	AUDV1
    345  fab3		       60		      rts
    346  fab4
    347  fab4				   LineAudioMute
    348  fab4		       a9 00		      lda	#0
    349  fab6		       85 1a		      sta	AUDV1
    350  fab8		       85 18		      sta	AUDF1
    351  faba		       85 16		      sta	AUDC1
    352  fabc		       60		      rts
    353  fabd
    354  fabd				   LineSample
    355  fabd		       a9 08		      lda	#LINE_SAMPLE_LEN
    356  fabf		       85 93		      sta	SampleStep
    357  fac1		       a9 03		      lda	#LINE_SAMPLE_C
    358  fac3		       85 16		      sta	AUDC1
    359  fac5		       a9 01		      lda	#LINE_SAMPLE_F
    360  fac7		       85 18		      sta	AUDF1
    361  fac9		       a9 04		      lda	#LINE_SAMPLE_V
    362  facb		       85 1a		      sta	AUDV1
    363  facd		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  face					      include	"objects/bug.asm"
      1  face							;======================
      2  face							; Bugs (missiles 0 & 1)
      3  face							;======================
      4  face
      5  face							; Constants
      6  face
      7  face		       00 08	   BUG_SIZE   =	8
      8  face		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  face		       00 78	   BUG_STUN_LENGTH =	120
     10  face		       00 04	   BUG_POINTS =	4
     11  face
     12  face		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  face		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  face		       00 38	   BUG_STUN_COLOR =	#$38
     15  face		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  face
     17  face		       00 1e	   BUG_SAMPLE_LEN =	30
     18  face		       00 03	   BUG_SAMPLE_C =	3
     19  face		       00 14	   BUG_SAMPLE_F =	20
     20  face		       00 04	   BUG_SAMPLE_V =	4
     21  face
     22  face		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  face		       00 08	   BUG_COL_SAMPLE_C =	8
     24  face		       00 08	   BUG_COL_SAMPLE_F =	8
     25  face		       00 03	   BUG_COL_SAMPLE_V =	3
     26  face
     27  face							; Initialization
     28  face
     29  face				   BugInit
     30  face
     31  face							; Initialize Bugs
     32  face		       a2 01		      ldx	#1
     33  fad0
     34  fad0				   .bug_init_loop
     35  fad0		       20 d7 fa 	      jsr	BugReset
     36  fad3
     37  fad3		       ca		      dex
     38  fad4		       10 fa		      bpl	.bug_init_loop
     39  fad6
     40  fad6		       60		      rts
     41  fad7
     42  fad7				   BugReset		; x = bug (0 or 1)
     43  fad7
     44  fad7							; Set random position
     45  fad7		       20 13 f0 	      jsr	Random
     46  fada
     47  fada		       a5 86		      lda	Rand8
     48  fadc		       29 7f		      and	#$7f
     49  fade		       95 b8		      sta	BugPosX,x
     50  fae0
     51  fae0		       a5 87		      lda	Rand16
     52  fae2		       29 7f		      and	#$7f
     53  fae4		       95 ba		      sta	BugPosY,x
     54  fae6
     55  fae6							; Set as active
     56  fae6		       a9 00		      lda	#0
     57  fae8		       95 b6		      sta	BugStunned,x
     58  faea
     59  faea		       60		      rts
     60  faeb
     61  faeb							; Frame Update
     62  faeb
     63  faeb				   BugUpdate
     64  faeb
     65  faeb		       a2 01		      ldx	#1
     66  faed				   .bug_update_loop
     67  faed		       86 83		      stx	Temp+0
     68  faef
     69  faef		       b5 b6		      lda	BugStunned,x
     70  faf1		       f0 08		      beq	.bug_update_active
     71  faf3
     72  faf3				   .bug_update_stunned
     73  faf3		       d6 b6		      dec	BugStunned,x
     74  faf5		       20 7e fb 	      jsr	BugStunCollision
     75  faf8		       4c 01 fb 	      jmp	.bug_update_next
     76  fafb
     77  fafb				   .bug_update_active
     78  fafb		       20 07 fb 	      jsr	BugMovement
     79  fafe		       20 66 fb 	      jsr	BugCollision
     80  fb01
     81  fb01				   .bug_update_next
     82  fb01		       a6 83		      ldx	Temp+0
     83  fb03		       ca		      dex
     84  fb04		       10 e7		      bpl	.bug_update_loop
     85  fb06
     86  fb06		       60		      rts
     87  fb07
     88  fb07				   BugMovement
     89  fb07
     90  fb07				   .bug_movement_random
     91  fb07		       20 13 f0 	      jsr	Random
     92  fb0a		       29 03		      and	#%00000011
     93  fb0c		       85 84		      sta	Temp+1
     94  fb0e
     95  fb0e				   .bug_movement_load
     96  fb0e		       a6 83		      ldx	Temp+0
     97  fb10
     98  fb10				   .bug_movement_x
     99  fb10		       a4 b5		      ldy	BugSpeed
    100  fb12
    101  fb12							; Alter X Position
    102  fb12		       a5 84		      lda	Temp+1
    103  fb14		       29 01		      and	#%00000001
    104  fb16
    105  fb16				   .bug_movement_x_check
    106  fb16		       c9 01		      cmp	#1
    107  fb18		       d0 08		      bne	.bug_movement_x_right
    108  fb1a
    109  fb1a				   .bug_movement_x_left
    110  fb1a		       d6 b8		      dec	BugPosX,x
    111  fb1c		       88		      dey
    112  fb1d		       d0 fb		      bne	.bug_movement_x_left
    113  fb1f
    114  fb1f		       4c 27 fb 	      jmp	.bug_movement_y
    115  fb22
    116  fb22				   .bug_movement_x_right
    117  fb22		       f6 b8		      inc	BugPosX,x
    118  fb24		       88		      dey
    119  fb25		       d0 fb		      bne	.bug_movement_x_right
    120  fb27
    121  fb27				   .bug_movement_y
    122  fb27		       a4 b5		      ldy	BugSpeed
    123  fb29
    124  fb29							; Alter Y Position
    125  fb29		       a5 84		      lda	Temp+1
    126  fb2b		       29 02		      and	#%00000010
    127  fb2d		       4a		      lsr
    128  fb2e
    129  fb2e				   .bug_movement_y_check
    130  fb2e		       c9 01		      cmp	#1
    131  fb30		       d0 08		      bne	.bug_movement_y_down
    132  fb32
    133  fb32				   .bug_movement_y_up
    134  fb32		       f6 ba		      inc	BugPosY,x
    135  fb34		       88		      dey
    136  fb35		       d0 fb		      bne	.bug_movement_y_up
    137  fb37
    138  fb37		       4c 3f fb 	      jmp	.bug_movement_boundary
    139  fb3a
    140  fb3a				   .bug_movement_y_down
    141  fb3a		       d6 ba		      dec	BugPosY,x
    142  fb3c		       88		      dey
    143  fb3d		       d0 fb		      bne	.bug_movement_y_down
    144  fb3f
    145  fb3f				   .bug_movement_boundary
    146  fb3f		       b5 b8		      lda	BugPosX,x
    147  fb41		       b4 ba		      ldy	BugPosY,x
    148  fb43
    149  fb43				   .bug_movement_boundary_left
    150  fb43		       c9 18		      cmp	#BUG_BOUNDARY
    151  fb45		       b0 05		      bcs	.bug_movement_boundary_right
    152  fb47		       a9 18		      lda	#BUG_BOUNDARY
    153  fb49		       4c 52 fb 	      jmp	.bug_movement_boundary_top
    154  fb4c
    155  fb4c				   .bug_movement_boundary_right
    156  fb4c		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    157  fb4e		       90 02		      bcc	.bug_movement_boundary_top
    158  fb50		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    159  fb52
    160  fb52				   .bug_movement_boundary_top
    161  fb52		       c0 18		      cpy	#BUG_BOUNDARY
    162  fb54		       b0 05		      bcs	.bug_movement_boundary_bottom
    163  fb56		       a0 18		      ldy	#BUG_BOUNDARY
    164  fb58		       4c 61 fb 	      jmp	.bug_movement_store
    165  fb5b
    166  fb5b				   .bug_movement_boundary_bottom
    167  fb5b		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    168  fb5d		       90 02		      bcc	.bug_movement_store
    169  fb5f		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    170  fb61
    171  fb61				   .bug_movement_store
    172  fb61		       95 b8		      sta	BugPosX,x
    173  fb63		       94 ba		      sty	BugPosY,x
    174  fb65
    175  fb65				   .bug_movement_return
    176  fb65		       60		      rts
    177  fb66
    178  fb66				   BugCollision
    179  fb66
    180  fb66		       e0 01		      cpx	#1
    181  fb68		       f0 05		      beq	.bug_collision_m1
    182  fb6a
    183  fb6a				   .bug_collision_m0
    184  fb6a							; Collision for M0 (V set)
    185  fb6a		       24 00		      bit	CXM0P
    186  fb6c		       70 06		      bvs	.bug_collision_active
    187  fb6e		       60		      rts
    188  fb6f
    189  fb6f				   .bug_collision_m1
    190  fb6f							; Collision for M1 (N set)
    191  fb6f		       24 01		      bit	CXM1P
    192  fb71		       30 01		      bmi	.bug_collision_active
    193  fb73		       60		      rts
    194  fb74
    195  fb74				   .bug_collision_active
    196  fb74
    197  fb74							; Reduce players score
    198  fb74		       a5 94		      lda	ScoreValue
    199  fb76		       f0 02		      beq	.bug_collision_score_skip
    200  fb78		       c6 94		      dec	ScoreValue
    201  fb7a				   .bug_collision_score_skip
    202  fb7a
    203  fb7a							; Play sound
    204  fb7a		       20 d7 fb 	      jsr	BugColSample
    205  fb7d
    206  fb7d		       60		      rts
    207  fb7e
    208  fb7e				   BugStunCollision
    209  fb7e
    210  fb7e		       e0 01		      cpx	#1
    211  fb80		       f0 05		      beq	.bug_stun_collision_m1
    212  fb82
    213  fb82				   .bug_stun_collision_m0
    214  fb82							; Collision for M0 (V set)
    215  fb82		       24 00		      bit	CXM0P
    216  fb84		       70 06		      bvs	.bug_stun_collision_active
    217  fb86		       60		      rts
    218  fb87
    219  fb87				   .bug_stun_collision_m1
    220  fb87							; Collision for M1 (N set)
    221  fb87		       24 01		      bit	CXM1P
    222  fb89		       30 01		      bmi	.bug_stun_collision_active
    223  fb8b		       60		      rts
    224  fb8c
    225  fb8c				   .bug_stun_collision_active
    226  fb8c							; Add points to score
    227  fb8c		       18		      clc
    228  fb8d		       a5 95		      lda	ScoreValue+1
    229  fb8f		       69 04		      adc	#BUG_POINTS
    230  fb91		       85 95		      sta	ScoreValue+1
    231  fb93
    232  fb93							; Reset bug
    233  fb93		       20 d7 fa 	      jsr	BugReset
    234  fb96
    235  fb96							; Play sample
    236  fb96		       20 c6 fb 	      jsr	BugSample
    237  fb99
    238  fb99		       60		      rts
    239  fb9a
    240  fb9a							; Horizontal Positioning
    241  fb9a
    242  fb9a				   BugPosition
    243  fb9a
    244  fb9a		       a2 02		      ldx	#2
    245  fb9c		       a5 b8		      lda	BugPosX+0
    246  fb9e		       20 00 f0 	      jsr	PosObject
    247  fba1
    248  fba1		       a2 03		      ldx	#3
    249  fba3		       a5 b9		      lda	BugPosX+1
    250  fba5		       20 00 f0 	      jsr	PosObject
    251  fba8
    252  fba8		       60		      rts
    253  fba9
    254  fba9							; Scanline Draw
    255  fba9
    256  fba9				   BugDrawStart
    257  fba9
    258  fba9		       a0 01		      ldy	#1
    259  fbab				   .bug_draw_start_loop
    260  fbab
    261  fbab							; Set missile 0 & 1 to be 8 clock size
    262  fbab		       b9 81 00 	      lda	NuSiz0,y
    263  fbae		       09 30		      ora	#%00110000
    264  fbb0		       99 81 00 	      sta	NuSiz0,y
    265  fbb3		       99 04 00 	      sta	NUSIZ0,y
    266  fbb6
    267  fbb6							; Setup half scanline positions
    268  fbb6		       b9 ba 00 	      lda	BugPosY,y
    269  fbb9		       4a		      lsr
    270  fbba		       99 bc 00 	      sta	BugDrawPosBottom,y
    271  fbbd
    272  fbbd		       69 04		      adc	#BUG_SIZE/2
    273  fbbf		       99 be 00 	      sta	BugDrawPosTop,y
    274  fbc2
    275  fbc2		       88		      dey
    276  fbc3		       10 e6		      bpl	.bug_draw_start_loop
    277  fbc5
    278  fbc5		       60		      rts
    279  fbc6
    280  fbc6				   BugSample
    281  fbc6		       a9 1e		      lda	#BUG_SAMPLE_LEN
    282  fbc8		       85 93		      sta	SampleStep
    283  fbca		       a9 03		      lda	#BUG_SAMPLE_C
    284  fbcc		       85 16		      sta	AUDC1
    285  fbce		       a9 14		      lda	#BUG_SAMPLE_F
    286  fbd0		       85 18		      sta	AUDF1
    287  fbd2		       a9 04		      lda	#BUG_SAMPLE_V
    288  fbd4		       85 1a		      sta	AUDV1
    289  fbd6		       60		      rts
    290  fbd7
    291  fbd7				   BugColSample
    292  fbd7		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    293  fbd9		       85 93		      sta	SampleStep
    294  fbdb		       a9 08		      lda	#BUG_COL_SAMPLE_C
    295  fbdd		       85 16		      sta	AUDC1
    296  fbdf		       a9 08		      lda	#BUG_COL_SAMPLE_F
    297  fbe1		       85 18		      sta	AUDF1
    298  fbe3		       a9 03		      lda	#BUG_COL_SAMPLE_V
    299  fbe5		       85 1a		      sta	AUDV1
    300  fbe7		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fbe8					      include	"objects/swatter.asm"
      1  fbe8							;==================
      2  fbe8							; Swatter (player1)
      3  fbe8							;==================
      4  fbe8
      5  fbe8							; Constants
      6  fbe8
      7  fbe8		       00 30	   SWATTER_COLOR =	#$30
      8  fbe8		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fbe8		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fbe8		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fbe8
     12  fbe8		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fbe8		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fbe8
     15  fbe8		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fbe8		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fbe8
     18  fbe8		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fbe8		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fbe8		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fbe8
     22  fbe8		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fbe8		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fbe8		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fbe8		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fbe8		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fbe8
     28  fbe8		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fbe8		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fbe8		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fbe8		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fbe8
     33  fbe8		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fbe8		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fbe8		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fbe8		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fbe8
     38  fbe8							; Initialization
     39  fbe8
     40  fbe8				   SwatterInit
     41  fbe8
     42  fbe8		       20 bf fc 	      jsr	SwatterReset
     43  fbeb
     44  fbeb		       60		      rts
     45  fbec
     46  fbec							; Frame Update
     47  fbec
     48  fbec				   SwatterUpdate
     49  fbec
     50  fbec							; Check b/w
     51  fbec		       ad 82 02 	      lda	SWCHB
     52  fbef					      REPEAT	4
     53  fbef		       4a		      lsr
     52  fbef					      REPEND
     53  fbf0		       4a		      lsr
     52  fbf0					      REPEND
     53  fbf1		       4a		      lsr
     52  fbf1					      REPEND
     53  fbf2		       4a		      lsr
     54  fbf3					      REPEND
     55  fbf3		       90 10		      bcc	.swatter_update_bw
     56  fbf5
     57  fbf5				   .swatter_update_color
     58  fbf5		       a5 c2		      lda	SwatterState
     59  fbf7		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     60  fbf9		       d0 05		      bne	.swatter_update_color_hold
     61  fbfb				   .swatter_update_color_active
     62  fbfb		       a9 30		      lda	#SWATTER_COLOR
     63  fbfd		       4c 12 fc 	      jmp	.swatter_update_color_set
     64  fc00				   .swatter_update_color_hold
     65  fc00		       a9 36		      lda	#SWATTER_HOLD_COLOR
     66  fc02		       4c 12 fc 	      jmp	.swatter_update_color_set
     67  fc05
     68  fc05				   .swatter_update_bw
     69  fc05		       a5 c2		      lda	SwatterState
     70  fc07		       c9 80		      cmp	#SWATTER_STATE_HOLD
     71  fc09		       d0 05		      bne	.swatter_update_bw_active
     72  fc0b				   .swatter_update_bw_hold
     73  fc0b		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     74  fc0d		       4c 12 fc 	      jmp	.swatter_update_color_set
     75  fc10				   .swatter_update_bw_active
     76  fc10		       a9 0e		      lda	#SWATTER_BW_COLOR
     77  fc12
     78  fc12				   .swatter_update_color_set
     79  fc12		       85 c3		      sta	SwatterColor
     80  fc14
     81  fc14				   .swatter_update_hold_sample
     82  fc14		       a4 c2		      ldy	SwatterState
     83  fc16		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fc18		       d0 0f		      bne	.swatter_update_state
     85  fc1a
     86  fc1a		       c6 c9		      dec	SwatterSampleCount
     87  fc1c		       d0 0b		      bne	.swatter_update_state
     88  fc1e
     89  fc1e		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     90  fc20		       85 c9		      sta	SwatterSampleCount
     91  fc22
     92  fc22		       c6 ca		      dec	SwatterSampleF
     93  fc24		       a4 ca		      ldy	SwatterSampleF
     94  fc26		       20 df fc 	      jsr	SwatterHoldSample
     95  fc29
     96  fc29				   .swatter_update_state
     97  fc29		       a6 90		      ldx	FrameTimer+1
     98  fc2b		       d0 2d		      bne	.swatter_update_collision
     99  fc2d
    100  fc2d		       a4 c2		      ldy	SwatterState
    101  fc2f		       c0 00		      cpy	#SWATTER_STATE_WAIT
    102  fc31		       f0 0a		      beq	.swatter_update_state_wait
    103  fc33
    104  fc33		       c0 80		      cpy	#SWATTER_STATE_HOLD
    105  fc35		       f0 18		      beq	.swatter_update_state_hold
    106  fc37
    107  fc37							; Else we're at the end of the active state
    108  fc37		       20 bf fc 	      jsr	SwatterReset
    109  fc3a		       4c 69 fc 	      jmp	.swatter_update_return
    110  fc3d
    111  fc3d				   .swatter_update_state_wait
    112  fc3d		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    113  fc3f		       84 ca		      sty	SwatterSampleF
    114  fc41		       20 df fc 	      jsr	SwatterHoldSample
    115  fc44
    116  fc44		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    117  fc46		       85 c9		      sta	SwatterSampleCount
    118  fc48
    119  fc48		       a9 80		      lda	#SWATTER_STATE_HOLD
    120  fc4a		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    121  fc4c		       4c 56 fc 	      jmp	.swatter_update_state_set
    122  fc4f
    123  fc4f				   .swatter_update_state_hold
    124  fc4f		       20 ee fc 	      jsr	SwatterActiveSample
    125  fc52
    126  fc52		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    127  fc54		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    128  fc56
    129  fc56				   .swatter_update_state_set
    130  fc56		       85 c2		      sta	SwatterState
    131  fc58		       86 90		      stx	FrameTimer+1
    132  fc5a
    133  fc5a				   .swatter_update_collision
    134  fc5a							; Check 1 frame after active
    135  fc5a		       a5 c2		      lda	SwatterState
    136  fc5c		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    137  fc5e		       d0 09		      bne	.swatter_update_return
    138  fc60		       a6 90		      ldx	FrameTimer+1
    139  fc62		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    140  fc64		       d0 03		      bne	.swatter_update_return
    141  fc66
    142  fc66		       20 6a fc 	      jsr	SwatterCollision
    143  fc69
    144  fc69				   .swatter_update_return
    145  fc69		       60		      rts
    146  fc6a
    147  fc6a				   SwatterCollision
    148  fc6a		       24 00		      bit	CXM0P
    149  fc6c		       30 09		      bmi	.swatter_collision_m0
    150  fc6e
    151  fc6e		       24 01		      bit	CXM1P
    152  fc70		       70 0a		      bvs	.swatter_collision_m1
    153  fc72
    154  fc72		       24 07		      bit	CXPPMM
    155  fc74		       30 0e		      bmi	.swatter_collision_p0
    156  fc76
    157  fc76		       60		      rts
    158  fc77
    159  fc77				   .swatter_collision_m0
    160  fc77		       a2 00		      ldx	#0
    161  fc79		       4c 7e fc 	      jmp	.swatter_collision_bug_reset
    162  fc7c
    163  fc7c				   .swatter_collision_m1
    164  fc7c		       a2 01		      ldx	#1
    165  fc7e
    166  fc7e				   .swatter_collision_bug_reset
    167  fc7e		       20 d7 fa 	      jsr	BugReset
    168  fc81		       4c 96 fc 	      jmp	.swatter_collision_active
    169  fc84
    170  fc84				   .swatter_collision_p0
    171  fc84
    172  fc84		       a5 94		      lda	ScoreValue
    173  fc86		       c5 c5		      cmp	SwatterHitDamage
    174  fc88		       90 08		      bcc	.swatter_collision_p0_zero
    175  fc8a		       f0 06		      beq	.swatter_collision_p0_zero
    176  fc8c
    177  fc8c		       18		      clc
    178  fc8d		       e5 c5		      sbc	SwatterHitDamage
    179  fc8f		       4c 94 fc 	      jmp	.swatter_collision_p0_set
    180  fc92
    181  fc92				   .swatter_collision_p0_zero
    182  fc92		       a9 00		      lda	#0
    183  fc94
    184  fc94				   .swatter_collision_p0_set
    185  fc94		       85 94		      sta	ScoreValue
    186  fc96
    187  fc96				   .swatter_collision_active
    188  fc96		       20 ff fc 	      jsr	SwatterHitSample
    189  fc99
    190  fc99		       60		      rts
    191  fc9a
    192  fc9a				   SwatterPosition
    193  fc9a
    194  fc9a							; Set Position
    195  fc9a		       a2 01		      ldx	#1	; Object (player1)
    196  fc9c		       a5 c0		      lda	SwatterPos	; X Position
    197  fc9e		       20 00 f0 	      jsr	PosObject
    198  fca1
    199  fca1		       60		      rts
    200  fca2
    201  fca2							; Scanline Draw
    202  fca2
    203  fca2				   SwatterDrawStart
    204  fca2
    205  fca2							; Set player 1 to be quad size
    206  fca2		       a5 82		      lda	NuSiz1
    207  fca4		       29 f8		      and	#%11111000
    208  fca6		       09 07		      ora	#%00000111
    209  fca8		       85 82		      sta	NuSiz1
    210  fcaa		       85 05		      sta	NUSIZ1
    211  fcac
    212  fcac							; Set sprite color
    213  fcac		       a5 c3		      lda	SwatterColor
    214  fcae		       85 07		      sta	COLUP1
    215  fcb0
    216  fcb0							; Note: Doesn't need vertical delay
    217  fcb0
    218  fcb0							; Calculate starting position
    219  fcb0		       a5 c1		      lda	SwatterPos+1	; Y Position
    220  fcb2		       4a		      lsr
    221  fcb3		       18		      clc
    222  fcb4		       69 14		      adc	#SWATTER_SPRITE_SIZE
    223  fcb6		       85 c7		      sta	SwatterDrawPos
    224  fcb8
    225  fcb8							; Initialize sprite index
    226  fcb8		       a9 00		      lda	#0
    227  fcba		       85 c6		      sta	SwatterIndex
    228  fcbc		       85 c8		      sta	SwatterLine
    229  fcbe
    230  fcbe		       60		      rts
    231  fcbf
    232  fcbf				   SwatterReset
    233  fcbf							; Initialize Swatter State
    234  fcbf		       a9 00		      lda	#SWATTER_STATE_WAIT
    235  fcc1		       85 c2		      sta	SwatterState
    236  fcc3
    237  fcc3							; Set Wait Timer
    238  fcc3		       20 13 f0 	      jsr	Random
    239  fcc6		       a5 86		      lda	Rand8
    240  fcc8		       29 3f		      and	#$3f
    241  fcca		       18		      clc
    242  fccb		       65 c4		      adc	SwatterWaitTime
    243  fccd		       85 90		      sta	FrameTimer+1
    244  fccf
    245  fccf							; Set Random Position
    246  fccf		       20 13 f0 	      jsr	Random
    247  fcd2		       a5 86		      lda	Rand8	; X Position
    248  fcd4		       29 7f		      and	#$7f
    249  fcd6		       85 c0		      sta	SwatterPos+0
    250  fcd8		       a5 87		      lda	Rand16	; Y Position
    251  fcda		       29 7e		      and	#$7e	; Ensure that Y position is even
    252  fcdc		       85 c1		      sta	SwatterPos+1
    253  fcde
    254  fcde		       60		      rts
    255  fcdf
    256  fcdf				   SwatterHoldSample
    257  fcdf		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    258  fce1		       85 93		      sta	SampleStep
    259  fce3		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    260  fce5		       85 16		      sta	AUDC1
    261  fce7		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    262  fce9		       85 1a		      sta	AUDV1
    263  fceb
    264  fceb		       84 18		      sty	AUDF1	; Store value of y as frequency
    265  fced
    266  fced		       60		      rts
    267  fcee
    268  fcee				   SwatterActiveSample
    269  fcee		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    270  fcf0		       85 93		      sta	SampleStep
    271  fcf2		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    272  fcf4		       85 16		      sta	AUDC1
    273  fcf6		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    274  fcf8		       85 18		      sta	AUDF1
    275  fcfa		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    276  fcfc		       85 1a		      sta	AUDV1
    277  fcfe		       60		      rts
    278  fcff
    279  fcff				   SwatterHitSample
    280  fcff		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    281  fd01		       85 93		      sta	SampleStep
    282  fd03		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    283  fd05		       85 16		      sta	AUDC1
    284  fd07		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    285  fd09		       85 18		      sta	AUDF1
    286  fd0b		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    287  fd0d		       85 1a		      sta	AUDV1
    288  fd0f		       60		      rts
------- FILE game.asm
     22  fd10
     23  fd10							; Initialization
     24  fd10
     25  fd10				   GameInit
     26  fd10
     27  fd10							; Setup logic and kernel
      0  fd10					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fd10				   .POINTER   SET	VBlankPtr
      2  fd10				   .ADDRESS   SET	GameVerticalBlank
      3  fd10
      4  fd10		       a9 51		      LDA	#<.ADDRESS
      5  fd12		       85 88		      STA	.POINTER
      6  fd14		       a9 fd		      LDA	#>.ADDRESS
      7  fd16		       85 89		      STA	.POINTER+1
      8  fd18
      0  fd18					      SET_POINTER	KernelPtr, GameKernel
      1  fd18				   .POINTER   SET	KernelPtr
      2  fd18				   .ADDRESS   SET	GameKernel
      3  fd18
      4  fd18		       a9 d3		      LDA	#<.ADDRESS
      5  fd1a		       85 8a		      STA	.POINTER
      6  fd1c		       a9 fd		      LDA	#>.ADDRESS
      7  fd1e		       85 8b		      STA	.POINTER+1
      8  fd20
      0  fd20					      SET_POINTER	OverScanPtr, GameOverScan
      1  fd20				   .POINTER   SET	OverScanPtr
      2  fd20				   .ADDRESS   SET	GameOverScan
      3  fd20
      4  fd20		       a9 7b		      LDA	#<.ADDRESS
      5  fd22		       85 8c		      STA	.POINTER
      6  fd24		       a9 fd		      LDA	#>.ADDRESS
      7  fd26		       85 8d		      STA	.POINTER+1
      8  fd28
     31  fd28
     32  fd28							; Mute Audio
     33  fd28		       a9 00		      lda	#0
     34  fd2a							;    sta AUDC0
     35  fd2a							;    sta AUDV0
     36  fd2a							;    sta AUDF0
     37  fd2a		       85 16		      sta	AUDC1
     38  fd2c		       85 1a		      sta	AUDV1
     39  fd2e		       85 18		      sta	AUDF1
     40  fd30		       85 93		      sta	SampleStep
     41  fd32
     42  fd32							; Load Audio Settings
     43  fd32		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fd34		       85 19		      sta	AUDV0
     45  fd36
     46  fd36							; Make it so that we play the first note immediately
     47  fd36		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fd38		       85 92		      sta	AudioStep
     49  fd3a		       a9 02		      lda	#2
     50  fd3c		       85 8f		      sta	FrameTimer
     51  fd3e
     52  fd3e							; Reset NuSiz
     53  fd3e							;    lda #0
     54  fd3e							;    sta NuSiz0
     55  fd3e							;    sta NUSIZ0
     56  fd3e							;    sta NuSiz1
     57  fd3e							;    sta NUSIZ1
     58  fd3e
     59  fd3e							; Initialize Objects
     60  fd3e		       20 a6 f5 	      jsr	LevelInit
     61  fd41		       20 48 f6 	      jsr	ScoreInit
     62  fd44		       20 f0 f7 	      jsr	SpiderInit
     63  fd47		       20 52 f9 	      jsr	LineInit
     64  fd4a		       20 ce fa 	      jsr	BugInit
     65  fd4d		       20 e8 fb 	      jsr	SwatterInit
     66  fd50
     67  fd50		       60		      rts
     68  fd51
     69  fd51				   GameVerticalBlank
     70  fd51
     71  fd51							; Refresh random values
     72  fd51		       20 13 f0 	      jsr	Random
     73  fd54
     74  fd54							; Update Objects
     75  fd54		       20 bc f5 	      jsr	LevelUpdate
     76  fd57		       20 05 f8 	      jsr	SpiderUpdate
     77  fd5a		       20 65 f9 	      jsr	LineUpdate
     78  fd5d		       20 eb fa 	      jsr	BugUpdate
     79  fd60		       20 ec fb 	      jsr	SwatterUpdate
     80  fd63		       20 51 f6 	      jsr	ScoreUpdate
     81  fd66
     82  fd66							; Reset Collisions
     83  fd66		       85 2c		      sta	CXCLR
     84  fd68
     85  fd68							; Clear horizontal movement
     86  fd68		       85 2b		      sta	HMCLR
     87  fd6a
     88  fd6a							; Update Positions
     89  fd6a		       20 22 f9 	      jsr	SpiderPosition
     90  fd6d		       20 67 fa 	      jsr	LinePosition
     91  fd70		       20 9a fb 	      jsr	BugPosition
     92  fd73		       20 9a fc 	      jsr	SwatterPosition
     93  fd76
     94  fd76							; Set final x positions
     95  fd76		       85 02		      sta	WSYNC
     96  fd78		       85 2a		      sta	HMOVE
     97  fd7a
     98  fd7a		       60		      rts
     99  fd7b
    100  fd7b				   GameOverScan
    101  fd7b
    102  fd7b							; Audio Routines
    103  fd7b		       20 97 fd 	      jsr	GameAudio
    104  fd7e		       20 85 fd 	      jsr	GameSample
    105  fd81
    106  fd81							; State Routines
    107  fd81		       20 cb fd 	      jsr	GameDeath
    108  fd84
    109  fd84		       60		      rts
    110  fd85
    111  fd85				   GameSample
    112  fd85
    113  fd85		       a6 93		      ldx	SampleStep
    114  fd87		       f0 0b		      beq	.game_sample_return
    115  fd89
    116  fd89		       ca		      dex
    117  fd8a		       d0 08		      bne	.game_sample_return
    118  fd8c
    119  fd8c				   .game_sample_mute
    120  fd8c		       a9 00		      lda	#0
    121  fd8e		       85 1a		      sta	AUDV1
    122  fd90		       85 18		      sta	AUDF1
    123  fd92		       85 16		      sta	AUDC1
    124  fd94
    125  fd94				   .game_sample_return
    126  fd94		       86 93		      stx	SampleStep
    127  fd96		       60		      rts
    128  fd97
    129  fd97				   GameAudio
    130  fd97
    131  fd97		       a6 8f		      ldx	FrameTimer
    132  fd99		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    133  fd9b		       f0 25		      beq	.game_audio_mute_note
    134  fd9d		       e0 00		      cpx	#0
    135  fd9f		       d0 29		      bne	.game_audio_return
    136  fda1
    137  fda1							; Reset Timer
    138  fda1		       a2 09		      ldx	#GAME_AUDIO_STEP
    139  fda3		       86 8f		      stx	FrameTimer
    140  fda5
    141  fda5				   .game_audio_play
    142  fda5
    143  fda5							; Increment melody position
    144  fda5		       a4 92		      ldy	AudioStep
    145  fda7		       c8		      iny
    146  fda8
    147  fda8		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    148  fdaa		       d0 02		      bne	.game_audio_play_note
    149  fdac
    150  fdac							; Loop our audio step
    151  fdac		       a0 00		      ldy	#0
    152  fdae
    153  fdae				   .game_audio_play_note
    154  fdae
    155  fdae							; Save current position
    156  fdae		       84 92		      sty	AudioStep
    157  fdb0
    158  fdb0							; Melody Line
    159  fdb0		       b9 b8 fe 	      lda	GameAudio0,y
    160  fdb3		       c9 ff		      cmp	#$FF
    161  fdb5		       f0 0b		      beq	.game_audio_mute_note
    162  fdb7		       85 17		      sta	AUDF0
    163  fdb9		       a9 06		      lda	#GAME_AUDIO_TONE
    164  fdbb		       85 15		      sta	AUDC0
    165  fdbd		       a9 02		      lda	#GAME_AUDIO_VOLUME
    166  fdbf		       85 19		      sta	AUDV0
    167  fdc1
    168  fdc1		       60		      rts
    169  fdc2
    170  fdc2				   .game_audio_mute_note
    171  fdc2
    172  fdc2		       a9 00		      lda	#0
    173  fdc4		       85 17		      sta	AUDF0
    174  fdc6		       85 15		      sta	AUDC0
    175  fdc8		       85 19		      sta	AUDV0
    176  fdca
    177  fdca				   .game_audio_return
    178  fdca		       60		      rts
    179  fdcb
    180  fdcb				   GameDeath
    181  fdcb		       a5 94		      lda	ScoreValue+0
    182  fdcd		       d0 03		      bne	.game_death_return
    183  fdcf
    184  fdcf							; Show Game Over Screen
    185  fdcf		       20 d8 fe 	      jsr	OverInit
    186  fdd2
    187  fdd2				   .game_death_return
    188  fdd2		       60		      rts
    189  fdd3
    190  fdd3				   GameKernel
    191  fdd3
    192  fdd3							; Turn on display
    193  fdd3		       a9 00		      lda	#0
    194  fdd5		       85 01		      sta	VBLANK
    195  fdd7
    196  fdd7				   .game_kernel_score
    197  fdd7
    198  fdd7							; Draw Score on top first
    199  fdd7		       20 c3 f6 	      jsr	ScoreDraw
    200  fdda
    201  fdda				   .game_kernel_objects_start
    202  fdda
    203  fdda							; Setup Drawing Objects
    204  fdda		       20 dd f7 	      jsr	WebDrawStart
    205  fddd		       20 2a f9 	      jsr	SpiderDrawStart
    206  fde0		       20 a2 fc 	      jsr	SwatterDrawStart
    207  fde3		       20 6f fa 	      jsr	LineDrawStart
    208  fde6		       20 a9 fb 	      jsr	BugDrawStart
    209  fde9
    210  fde9							; Start Scanline Counter
    211  fde9		       a2 a8		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    212  fdeb							; The extra 5 is for processing overflow
    213  fdeb
    214  fdeb							; Half scanline counter in Temp+1
    215  fdeb		       a9 56		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    216  fded		       85 84		      sta	Temp+1
    217  fdef
    218  fdef							; 6 line counter
    219  fdef		       a9 00		      lda	#0
    220  fdf1		       85 85		      sta	Temp+2
    221  fdf3
    222  fdf3							; Load background color
    223  fdf3		       a5 a1		      lda	WebColor+0
    224  fdf5		       85 09		      sta	COLUBK
    225  fdf7
    226  fdf7							;sta WSYNC
    227  fdf7
    228  fdf7				   .game_kernel_objects
    229  fdf7
    230  fdf7		       a5 85		      lda	Temp+2
    231  fdf9		       d0 1a		      bne	.game_kernel_missle
    232  fdfb
    233  fdfb		       a9 03		      lda	#3
    234  fdfd		       85 85		      sta	Temp+2
    235  fdff
    236  fdff				   .game_kernel_web
    237  fdff
    238  fdff				   .game_kernel_web_pf
    239  fdff							; Web
    240  fdff
    241  fdff		       a4 a0		      ldy	WebIndex
    242  fe01
    243  fe01							; Load Image
    244  fe01		       b9 3e f1 	      lda	WebImagePF0,y
    245  fe04		       85 0d		      sta	PF0
    246  fe06		       b9 5a f1 	      lda	WebImagePF1,y
    247  fe09		       85 0e		      sta	PF1
    248  fe0b		       b9 76 f1 	      lda	WebImagePF2,y
    249  fe0e		       85 0f		      sta	PF2
    250  fe10
    251  fe10		       e6 a0		      inc	WebIndex
    252  fe12
    253  fe12		       4c 33 fe 	      jmp	.game_kernel_line
    254  fe15
    255  fe15				   .game_kernel_missle
    256  fe15
    257  fe15							; Preload half-line
    258  fe15		       a5 84		      lda	Temp+1
    259  fe17
    260  fe17				   .game_kernel_missle_bug_0
    261  fe17							; First Bug
    262  fe17
    263  fe17		       a0 00		      ldy	#%00000000
    264  fe19
    265  fe19							; Top
    266  fe19		       c5 be		      cmp	BugDrawPosTop+0
    267  fe1b		       b0 06		      bcs	.game_kernel_missle_bug_0_off
    268  fe1d
    269  fe1d							; Bottom
    270  fe1d		       c5 bc		      cmp	BugDrawPosBottom+0
    271  fe1f		       90 02		      bcc	.game_kernel_missle_bug_0_off
    272  fe21
    273  fe21				   .game_kernel_missle_bug_0_on
    274  fe21		       a0 02		      ldy	#%00000010
    275  fe23
    276  fe23				   .game_kernel_missle_bug_0_off
    277  fe23		       84 1d		      sty	ENAM0
    278  fe25
    279  fe25				   .game_kernel_missle_bug_1
    280  fe25							; Second Bug
    281  fe25
    282  fe25		       a0 00		      ldy	#%00000000
    283  fe27
    284  fe27							; Top
    285  fe27		       c5 bf		      cmp	BugDrawPosTop+1
    286  fe29		       b0 06		      bcs	.game_kernel_missle_bug_1_off
    287  fe2b
    288  fe2b							; Bottom
    289  fe2b		       c5 bd		      cmp	BugDrawPosBottom+1
    290  fe2d		       90 02		      bcc	.game_kernel_missle_bug_1_off
    291  fe2f
    292  fe2f				   .game_kernel_missle_bug_1_on
    293  fe2f		       a0 02		      ldy	#%00000010
    294  fe31
    295  fe31				   .game_kernel_missle_bug_1_off
    296  fe31		       84 1e		      sty	ENAM1
    297  fe33
    298  fe33							;jmp .game_kernel_line_skip
    299  fe33
    300  fe33				   .game_kernel_line
    301  fe33							; Line
    302  fe33
    303  fe33		       24 ae		      bit	LineEnabled
    304  fe35		       10 10		      bpl	.game_kernel_line_skip
    305  fe37
    306  fe37							; Load half-line
    307  fe37		       a5 84		      lda	Temp+1
    308  fe39
    309  fe39		       a0 00		      ldy	#%00000000
    310  fe3b
    311  fe3b							; Top
    312  fe3b		       c5 b4		      cmp	LineDrawPos+1
    313  fe3d		       b0 06		      bcs	.game_kernel_line_set
    314  fe3f
    315  fe3f							; Bottom
    316  fe3f		       c5 b3		      cmp	LineDrawPos+0
    317  fe41		       90 02		      bcc	.game_kernel_line_set
    318  fe43
    319  fe43		       a0 02		      ldy	#%00000010
    320  fe45				   .game_kernel_line_set
    321  fe45		       84 1f		      sty	ENABL
    322  fe47
    323  fe47				   .game_kernel_line_skip
    324  fe47
    325  fe47							; Next Line
    326  fe47		       ca		      dex
    327  fe48							;sta WSYNC
    328  fe48
    329  fe48				   .game_kernel_sprite
    330  fe48
    331  fe48				   .game_kernel_sprite_spider
    332  fe48							; Spider
    333  fe48
    334  fe48		       a4 a9		      ldy	SpiderIndex
    335  fe4a		       30 1a		      bmi	.game_kernel_sprite_spider_load	; At end of sprite
    336  fe4c		       d0 06		      bne	.game_kernel_sprite_spider_draw	; Currently drawing (not zero)
    337  fe4e
    338  fe4e							; Check y position to see if we should start
    339  fe4e		       a5 84		      lda	Temp+1	; Use half scanline
    340  fe50		       e5 aa		      sbc	SpiderDrawPos
    341  fe52		       10 12		      bpl	.game_kernel_sprite_spider_load
    342  fe54
    343  fe54				   .game_kernel_sprite_spider_draw
    344  fe54		       b1 a3		      lda	(SpiderPtr),y
    345  fe56		       85 ab		      sta	SpiderLine
    346  fe58
    347  fe58							; Increment sprite index
    348  fe58		       e6 a9		      inc	SpiderIndex
    349  fe5a
    350  fe5a							; See if we're at the end
    351  fe5a		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    352  fe5c		       d0 0a		      bne	.game_kernel_sprite_spider_line
    353  fe5e		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    354  fe60		       84 a9		      sty	SpiderIndex
    355  fe62		       a9 00		      lda	#0
    356  fe64		       85 ab		      sta	SpiderLine
    357  fe66
    358  fe66				   .game_kernel_sprite_spider_load
    359  fe66		       a5 ab		      lda	SpiderLine
    360  fe68				   .game_kernel_sprite_spider_line
    361  fe68		       85 1b		      sta	GRP0
    362  fe6a
    363  fe6a				   .game_kernel_sprite_swatter
    364  fe6a							; Swatter
    365  fe6a
    366  fe6a							; Check if wait state
    367  fe6a		       24 c2		      bit	SwatterState
    368  fe6c		       10 1b		      bpl	.game_kernel_sprite_swatter_load
    369  fe6e
    370  fe6e		       a4 c6		      ldy	SwatterIndex
    371  fe70		       30 17		      bmi	.game_kernel_sprite_swatter_load	; At end of sprite
    372  fe72		       d0 06		      bne	.game_kernel_sprite_swatter_draw	; Currently drawing (not zero)
    373  fe74
    374  fe74							; Check y position to see if we should start
    375  fe74		       a5 84		      lda	Temp+1	; Use half scanline
    376  fe76		       e5 c7		      sbc	SwatterDrawPos
    377  fe78		       10 0f		      bpl	.game_kernel_sprite_swatter_load
    378  fe7a
    379  fe7a				   .game_kernel_sprite_swatter_draw
    380  fe7a		       b9 c2 f1 	      lda	SwatterSprite,y
    381  fe7d		       85 c8		      sta	SwatterLine
    382  fe7f
    383  fe7f							; Increment index
    384  fe7f		       e6 c6		      inc	SwatterIndex
    385  fe81
    386  fe81							; See if we're at the end
    387  fe81		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    388  fe83		       d0 06		      bne	.game_kernel_sprite_swatter_line
    389  fe85		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    390  fe87		       84 c6		      sty	SwatterIndex
    391  fe89
    392  fe89				   .game_kernel_sprite_swatter_load
    393  fe89		       a5 c8		      lda	SwatterLine
    394  fe8b				   .game_kernel_sprite_swatter_line
    395  fe8b		       85 1c		      sta	GRP1
    396  fe8d
    397  fe8d		       85 02		      sta	WSYNC
    398  fe8f
    399  fe8f				   .game_kernel_sprite_end
    400  fe8f
    401  fe8f							; New line, decrement half scanline, and increment 3 line counter
    402  fe8f		       c6 84		      dec	Temp+1
    403  fe91		       c6 85		      dec	Temp+2
    404  fe93		       ca		      dex
    405  fe94		       f0 03		      beq	.game_kernel_clean
    406  fe96		       4c f7 fd 	      jmp	.game_kernel_objects
    407  fe99
    408  fe99				   .game_kernel_clean
    409  fe99
    410  fe99		       85 02		      sta	WSYNC
    411  fe9b
    412  fe9b		       a9 00		      lda	#0
    413  fe9d		       85 09		      sta	COLUBK
    414  fe9f		       85 08		      sta	COLUPF
    415  fea1		       85 06		      sta	COLUP0
    416  fea3		       85 07		      sta	COLUP1
    417  fea5		       85 0d		      sta	PF0
    418  fea7		       85 0e		      sta	PF1
    419  fea9		       85 0f		      sta	PF2
    420  feab		       85 1b		      sta	GRP0
    421  fead		       85 1c		      sta	GRP1
    422  feaf		       85 1d		      sta	ENAM0
    423  feb1		       85 1e		      sta	ENAM1
    424  feb3		       85 1f		      sta	ENABL
    425  feb5
    426  feb5		       85 02		      sta	WSYNC
    427  feb7
    428  feb7				   .game_kernel_return
    429  feb7		       60		      rts
    430  feb8
    431  feb8				   GameAudio0
    432  feb8		       0d		      .byte.b	#13	; D
    433  feb9		       ff		      .byte.b	#$FF
    434  feba		       0f		      .byte.b	#15	; B
    435  febb		       ff		      .byte.b	#$FF
    436  febc		       0d		      .byte.b	#13	; D
    437  febd		       ff		      .byte.b	#$FF
    438  febe		       0f		      .byte.b	#15	; B
    439  febf		       ff		      .byte.b	#$FF
    440  fec0		       0d		      .byte.b	#13	; D
    441  fec1		       0d		      .byte.b	#13	; D
    442  fec2		       0f		      .byte.b	#15	; B
    443  fec3		       ff		      .byte.b	#$FF
    444  fec4		       0c		      .byte.b	#12	; D#
    445  fec5		       ff		      .byte.b	#$FF
    446  fec6		       0f		      .byte.b	#15	; B
    447  fec7		       ff		      .byte.b	#$FF
    448  fec8		       0b		      .byte.b	#11	; E
    449  fec9		       ff		      .byte.b	#$FF
    450  feca		       0e		      .byte.b	#14	; C#
    451  fecb		       ff		      .byte.b	#$FF
    452  fecc		       0b		      .byte.b	#11
    453  fecd		       ff		      .byte.b	#$FF
    454  fece		       0e		      .byte.b	#14
    455  fecf		       ff		      .byte.b	#$FF
    456  fed0		       0b		      .byte.b	#11
    457  fed1		       0b		      .byte.b	#11
    458  fed2		       0e		      .byte.b	#14
    459  fed3		       ff		      .byte.b	#$FF
    460  fed4		       0b		      .byte.b	#11
    461  fed5		       ff		      .byte.b	#$FF
    462  fed6		       0e		      .byte.b	#14
    463  fed7		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fed8					      include	"over.asm"
      1  fed8							;================
      2  fed8							; Constants
      3  fed8							;================
      4  fed8
      5  fed8		       00 00	   OVER_BG_COLOR =	#$00
      6  fed8		       00 44	   OVER_FG_COLOR =	#$44
      7  fed8		       00 06	   OVER_FG_BW_COLOR =	#$06
      8  fed8
      9  fed8		       00 07	   OVER_AUDIO_TONE =	7
     10  fed8		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     11  fed8		       00 06	   OVER_AUDIO_LENGTH =	6
     12  fed8		       00 10	   OVER_AUDIO_STEP =	16
     13  fed8
     14  fed8		       00 09	   OVER_IMAGE_SIZE =	9
     15  fed8		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     16  fed8		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     17  fed8		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     18  fed8
     19  fed8				   OverInit
     20  fed8
     21  fed8							; Setup logic and kernel
      0  fed8					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fed8				   .POINTER   SET	VBlankPtr
      2  fed8				   .ADDRESS   SET	OverVerticalBlank
      3  fed8
      4  fed8		       a9 09		      LDA	#<.ADDRESS
      5  feda		       85 88		      STA	.POINTER
      6  fedc		       a9 ff		      LDA	#>.ADDRESS
      7  fede		       85 89		      STA	.POINTER+1
      8  fee0
      0  fee0					      SET_POINTER	KernelPtr, OverKernel
      1  fee0				   .POINTER   SET	KernelPtr
      2  fee0				   .ADDRESS   SET	OverKernel
      3  fee0
      4  fee0		       a9 65		      LDA	#<.ADDRESS
      5  fee2		       85 8a		      STA	.POINTER
      6  fee4		       a9 ff		      LDA	#>.ADDRESS
      7  fee6		       85 8b		      STA	.POINTER+1
      8  fee8
      0  fee8					      SET_POINTER	OverScanPtr, OverOverScan
      1  fee8				   .POINTER   SET	OverScanPtr
      2  fee8				   .ADDRESS   SET	OverOverScan
      3  fee8
      4  fee8		       a9 23		      LDA	#<.ADDRESS
      5  feea		       85 8c		      STA	.POINTER
      6  feec		       a9 ff		      LDA	#>.ADDRESS
      7  feee		       85 8d		      STA	.POINTER+1
      8  fef0
     25  fef0
     26  fef0							; Load audio settings
     27  fef0		       a9 07		      lda	#OVER_AUDIO_TONE
     28  fef2		       85 15		      sta	AUDC0
     29  fef4							;lda #OVER_AUDIO_VOLUME
     30  fef4							;sta AUDV0
     31  fef4		       a9 00		      lda	#0
     32  fef6		       85 16		      sta	AUDC1
     33  fef8		       85 1a		      sta	AUDV1
     34  fefa
     35  fefa							; Set initial button state
     36  fefa							;lda #0
     37  fefa		       85 91		      sta	InputState
     38  fefc
     39  fefc							; Setup frame counters
     40  fefc		       a9 01		      lda	#1
     41  fefe		       85 8f		      sta	FrameTimer
     42  ff00		       a9 10		      lda	#OVER_AUDIO_STEP
     43  ff02		       85 93		      sta	SampleStep
     44  ff04		       a9 06		      lda	#OVER_AUDIO_LENGTH
     45  ff06		       85 92		      sta	AudioStep
     46  ff08
     47  ff08		       60		      rts
     48  ff09
     49  ff09				   OverVerticalBlank
     50  ff09		       20 51 f6 	      jsr	ScoreUpdate
     51  ff0c
     52  ff0c							; Load Colors
     53  ff0c		       a9 00		      lda	#OVER_BG_COLOR
     54  ff0e		       85 09		      sta	COLUBK
     55  ff10
     56  ff10							; Check b/w
     57  ff10		       ad 82 02 	      lda	SWCHB
     58  ff13					      REPEAT	4
     59  ff13		       4a		      lsr
     58  ff13					      REPEND
     59  ff14		       4a		      lsr
     58  ff14					      REPEND
     59  ff15		       4a		      lsr
     58  ff15					      REPEND
     59  ff16		       4a		      lsr
     60  ff17					      REPEND
     61  ff17		       90 05		      bcc	.over_bw
     62  ff19
     63  ff19				   .over_color
     64  ff19		       a9 44		      lda	#OVER_FG_COLOR
     65  ff1b		       85 08		      sta	COLUPF
     66  ff1d
     67  ff1d		       60		      rts
     68  ff1e
     69  ff1e				   .over_bw
     70  ff1e							; Load b/w Colors
     71  ff1e		       a9 06		      lda	#OVER_FG_BW_COLOR
     72  ff20		       85 08		      sta	COLUPF
     73  ff22
     74  ff22		       60		      rts
     75  ff23
     76  ff23				   OverOverScan
     77  ff23		       20 2a ff 	      jsr	OverAudio
     78  ff26		       20 50 ff 	      jsr	OverState
     79  ff29		       60		      rts
     80  ff2a
     81  ff2a				   OverAudio
     82  ff2a
     83  ff2a		       a5 8f		      lda	FrameTimer
     84  ff2c		       d0 21		      bne	.over_audio_return
     85  ff2e
     86  ff2e							; Reset Timer
     87  ff2e					      REPEAT	3
     88  ff2e		       e6 93		      inc	SampleStep
     87  ff2e					      REPEND
     88  ff30		       e6 93		      inc	SampleStep
     87  ff30					      REPEND
     88  ff32		       e6 93		      inc	SampleStep
     89  ff34					      REPEND
     90  ff34		       a5 93		      lda	SampleStep
     91  ff36		       85 8f		      sta	FrameTimer
     92  ff38
     93  ff38				   .over_audio_play
     94  ff38
     95  ff38							; Increment melody position
     96  ff38		       a4 92		      ldy	AudioStep
     97  ff3a		       f0 0d		      beq	.over_audio_mute_note
     98  ff3c		       c6 92		      dec	AudioStep
     99  ff3e		       88		      dey
    100  ff3f
    101  ff3f				   .over_audio_play_note
    102  ff3f
    103  ff3f							; Melody Line
    104  ff3f		       b9 b7 ff 	      lda	OverAudio0,y
    105  ff42		       85 17		      sta	AUDF0
    106  ff44		       a9 06		      lda	#OVER_AUDIO_VOLUME
    107  ff46		       85 19		      sta	AUDV0
    108  ff48
    109  ff48		       60		      rts
    110  ff49
    111  ff49				   .over_audio_mute_note
    112  ff49		       a9 00		      lda	#0
    113  ff4b		       85 17		      sta	AUDF0
    114  ff4d		       85 19		      sta	AUDV0
    115  ff4f
    116  ff4f				   .over_audio_return
    117  ff4f		       60		      rts
    118  ff50
    119  ff50				   OverState
    120  ff50
    121  ff50							; Check to see if audio has finished
    122  ff50		       a5 92		      lda	AudioStep
    123  ff52		       d0 10		      bne	.over_state_return
    124  ff54
    125  ff54							; Check if Fire Button on controller 1 is released
    126  ff54		       a5 0c		      lda	INPT4
    127  ff56		       30 05		      bmi	.over_state_check
    128  ff58
    129  ff58				   .over_state_on
    130  ff58		       a9 01		      lda	#1
    131  ff5a		       85 91		      sta	InputState
    132  ff5c		       60		      rts
    133  ff5d
    134  ff5d				   .over_state_check
    135  ff5d		       a5 91		      lda	InputState
    136  ff5f		       f0 03		      beq	.over_state_return
    137  ff61
    138  ff61				   .over_state_next
    139  ff61							; Button is released, load title screen
    140  ff61		       20 6a f3 	      jsr	TitleInit
    141  ff64
    142  ff64				   .over_state_return
    143  ff64		       60		      rts
    144  ff65
    145  ff65				   OverKernel
    146  ff65
    147  ff65							; Turn on display
    148  ff65		       a9 00		      lda	#0
    149  ff67		       85 01		      sta	VBLANK
    150  ff69
    151  ff69				   .over_kernel_score
    152  ff69
    153  ff69							; Draw Score on top first (no update)
    154  ff69		       20 c3 f6 	      jsr	ScoreDraw
    155  ff6c
    156  ff6c				   .over_kernel_init
    157  ff6c							; Playfield Control
    158  ff6c		       a5 80		      lda	CtrlPf
    159  ff6e		       29 fd		      and	#%11111101	; Use playfield foreground color
    160  ff70		       09 01		      ora	#%00000001	; Set mirroring
    161  ff72		       85 80		      sta	CtrlPf
    162  ff74		       85 0a		      sta	CTRLPF
    163  ff76
    164  ff76				   .over_kernel_top_padding
    165  ff76							; Top Padding
    166  ff76		       20 95 ff 	      jsr	OverPadding
    167  ff79
    168  ff79				   .over_kernel_image
    169  ff79		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    170  ff7b
    171  ff7b				   .over_kernel_image_next
    172  ff7b		       bd ae ff 	      lda	OverImagePF2,x
    173  ff7e		       85 0f		      sta	PF2
    174  ff80		       bd a5 ff 	      lda	OverImagePF1,x
    175  ff83		       85 0e		      sta	PF1
    176  ff85							;    lda OverImagePF0,x
    177  ff85							;    sta PF0
    178  ff85
    179  ff85		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    180  ff87				   .over_kernel_image_loop
    181  ff87		       85 02		      sta	WSYNC
    182  ff89		       88		      dey
    183  ff8a		       d0 fb		      bne	.over_kernel_image_loop
    184  ff8c
    185  ff8c		       ca		      dex
    186  ff8d		       10 ec		      bpl	.over_kernel_image_next
    187  ff8f
    188  ff8f				   .over_kernel_bottom_padding
    189  ff8f							; Bottom Padding
    190  ff8f		       20 95 ff 	      jsr	OverPadding
    191  ff92
    192  ff92				   .over_kernel_return
    193  ff92		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    194  ff94		       60		      rts
    195  ff95
    196  ff95				   OverPadding
    197  ff95		       a9 00		      lda	#0
    198  ff97		       85 0d		      sta	PF0
    199  ff99		       85 0e		      sta	PF1
    200  ff9b		       85 0f		      sta	PF2
    201  ff9d
    202  ff9d		       a2 32		      ldx	#OVER_IMAGE_PADDING
    203  ff9f				   .over_padding_loop
    204  ff9f		       85 02		      sta	WSYNC
    205  ffa1		       ca		      dex
    206  ffa2		       d0 fb		      bne	.over_padding_loop
    207  ffa4
    208  ffa4		       60		      rts
    209  ffa5
    210  ffa5				   OverAssets
    211  ffa5
    212  ffa5							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ffa5					      include	"over_image.asm"
      1  ffa5							;OverImagePF0:
      2  ffa5							;    .BYTE %00000000
      3  ffa5							;    .BYTE %00000000
      4  ffa5							;    .BYTE %00000000
      5  ffa5							;    .BYTE %00000000
      6  ffa5							;    .BYTE %00000000
      7  ffa5							;    .BYTE %00000000
      8  ffa5							;    .BYTE %00000000
      9  ffa5							;    .BYTE %00000000
     10  ffa5							;    .BYTE %00000000
     11  ffa5
     12  ffa5				   OverImagePF1
     13  ffa5		       0c		      .BYTE.b	%00001100
     14  ffa6		       13		      .BYTE.b	%00010011
     15  ffa7		       20		      .BYTE.b	%00100000
     16  ffa8		       23		      .BYTE.b	%00100011
     17  ffa9		       24		      .BYTE.b	%00100100
     18  ffaa		       24		      .BYTE.b	%00100100
     19  ffab		       12		      .BYTE.b	%00010010
     20  ffac		       10		      .BYTE.b	%00010000
     21  ffad		       08		      .BYTE.b	%00001000
     22  ffae
     23  ffae				   OverImagePF2
     24  ffae		       e0		      .BYTE.b	%11100000
     25  ffaf		       18		      .BYTE.b	%00011000
     26  ffb0		       05		      .BYTE.b	%00000101
     27  ffb1		       52		      .BYTE.b	%01010010
     28  ffb2		       23		      .BYTE.b	%00100011
     29  ffb3		       52		      .BYTE.b	%01010010
     30  ffb4		       04		      .BYTE.b	%00000100
     31  ffb5		       18		      .BYTE.b	%00011000
     32  ffb6		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    214  ffb7
    215  ffb7				   OverAudio0
    216  ffb7
    217  ffb7		       1a		      .BYTE.b	#26	; D1
    218  ffb8		       1a		      .BYTE.b	#26
    219  ffb9		       16		      .BYTE.b	#22	; F1
    220  ffba		       11		      .BYTE.b	#17	; A1
    221  ffbb		       0d		      .BYTE.b	#13	; D2
    222  ffbc		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    329  ffbd
    330  ffbd							;================
    331  ffbd							; End of cart
    332  ffbd							;================
    333  ffbd
    334  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    335  fffa
    336  fffa				   InterruptVectors
    337  fffa
    338  fffa		       06 f2		      .word.w	InitSystem	; NMI
    339  fffc		       06 f2		      .word.w	InitSystem	; RESET
    340  fffe		       06 f2		      .word.w	InitSystem	; IRQ
    341  10000
    342  10000					       END
