------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00ca ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00 00	   FrameTimer ds	2
     70 U0090
     71 U0090		       00	   AudioStep  ds	1
     72 U0091
     73 U0091		       00	   SampleStep ds	1
     74 U0092
     75 U0092							; Score
     76 U0092
     77 U0092		       00 00	   ScoreValue ds	2
     78 U0094		       00 00	   ScoreDigitOnes ds	2
     79 U0096		       00 00	   ScoreDigitTens ds	2
     80 U0098		       00 00	   ScoreGfx   ds	2
     81 U009a
     82 U009a							; Level
     83 U009a		       00	   LevelCurrent ds	1
     84 U009b
     85 U009b							; Web
     86 U009b
     87 U009b		       00	   WebIndex   ds	1
     88 U009c		       00 00	   WebColor   ds	2
     89 U009e
     90 U009e							; Spider
     91 U009e
     92 U009e		       00 00	   SpiderPtr  ds	2
     93 U00a0		       00 00	   SpiderPos  ds	2
     94 U00a2		       00	   SpiderCtrl ds	1
     95 U00a3		       00	   SpiderColor ds	1
     96 U00a4
     97 U00a4		       00	   SpiderIndex ds	1
     98 U00a5		       00	   SpiderDrawPos ds	1
     99 U00a6		       00	   SpiderLine ds	1
    100 U00a7
    101 U00a7		       00 00	   SpiderPtr2 ds	2
    102 U00a9
    103 U00a9							; Line
    104 U00a9
    105 U00a9		       00	   LineEnabled ds	1
    106 U00aa		       00 00	   LinePos    ds	2
    107 U00ac		       00 00	   LineVelocity ds	2
    108 U00ae		       00 00	   LineStartPos ds	2
    109 U00b0		       00 00	   LineDrawPos ds	2
    110 U00b2
    111 U00b2							; Bug
    112 U00b2
    113 U00b2		       00	   BugSpeed   ds	1
    114 U00b3
    115 U00b3		       00 00	   BugStunned ds	2
    116 U00b5		       00 00	   BugPosX    ds	2
    117 U00b7		       00 00	   BugPosY    ds	2
    118 U00b9		       00 00	   BugColor   ds	2
    119 U00bb
    120 U00bb		       00 00	   BugDrawPosBottom ds	2
    121 U00bd		       00 00	   BugDrawPosTop ds	2
    122 U00bf
    123 U00bf							; Swatter
    124 U00bf
    125 U00bf		       00 00	   SwatterPos ds	2
    126 U00c1		       00	   SwatterState ds	1
    127 U00c2		       00	   SwatterColor ds	1
    128 U00c3
    129 U00c3		       00	   SwatterWaitTime ds	1
    130 U00c4		       00	   SwatterHitDamage ds	1
    131 U00c5
    132 U00c5		       00	   SwatterIndex ds	1
    133 U00c6		       00	   SwatterDrawPos ds	1
    134 U00c7		       00	   SwatterLine ds	1
    135 U00c8
    136 U00c8		       00	   SwatterSampleCount ds	1
    137 U00c9		       00	   SwatterSampleF ds	1
    138 U00ca
    139  10000 ????				       SEG
    140  f000					      org	$F000	; Start of cart area
    141  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    143  f021
    144  f021				   InitSystem
    145  f021
    146  f021				   .init_clean
    147  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    149  f02c
    150  f02c				   .init_tia
    151  f02c							; Define default TIA register values
    152  f02c
    153  f02c							; Initialize copies
    154  f02c		       a9 00		      lda	#0
    155  f02e		       85 80		      sta	CtrlPf
    156  f030		       85 81		      sta	NuSiz0
    157  f032		       85 82		      sta	NuSiz1
    158  f034
    159  f034							; Set background color
    160  f034		       a9 00		      lda	#$00	; Black
    161  f036		       85 09		      sta	COLUBK
    162  f038
    163  f038							; Set the playfield and player color
    164  f038		       a9 0e		      lda	#$0E	; White
    165  f03a		       85 08		      sta	COLUPF
    166  f03c		       85 06		      sta	COLUP0
    167  f03e		       85 07		      sta	COLUP1
    168  f040
    169  f040							; Playfield Control
    170  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    171  f042		       85 80		      sta	CtrlPf
    172  f044		       85 0a		      sta	CTRLPF
    173  f046
    174  f046							; Disable Game Elements
    175  f046		       a9 00		      lda	#$00
    176  f048		       85 1f		      sta	ENABL	; Turn off ball
    177  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    178  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    179  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    180  f050		       85 1c		      sta	GRP1	; Turn off player 2
    181  f052
    182  f052							; Empty playfield
    183  f052		       a9 00		      lda	#%00000000
    184  f054		       85 0d		      sta	PF0
    185  f056		       85 0e		      sta	PF1
    186  f058		       85 0f		      sta	PF2
    187  f05a
    188  f05a				   .init_seed
    189  f05a							; Seed the random number generator
    190  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    191  f05d		       85 85		      sta	Rand8	; Use as seed
    192  f05f		       49 ff		      eor	#$FF	; Flip bits
    193  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    194  f063
    195  f063				   .init_game
    196  f063
    197  f063		       20 cb f0 	      jsr	LogoInit
    198  f066
    199  f066							;=======================================
    200  f066							; Game Kernel
    201  f066							;=======================================
    202  f066
    203  f066				   Main
    204  f066
    205  f066		       20 75 f0 	      jsr	VerticalSync
    206  f069		       20 8e f0 	      jsr	VerticalBlank
    207  f06c		       20 a1 f0 	      jsr	Kernel
    208  f06f		       20 a8 f0 	      jsr	OverScan
    209  f072		       4c 66 f0 	      jmp	Main
    210  f075
    211  f075				   VerticalSync
    212  f075
    213  f075		       a9 00		      lda	#0
    214  f077		       85 01		      sta	VBLANK
    215  f079
    216  f079							; Turn on Vertical Sync signal and setup timer
    217  f079		       a9 02		      lda	#2
    218  f07b		       85 00		      sta	VSYNC
    219  f07d
    220  f07d							; Increment frame count and reduce frame counter
    221  f07d		       e6 8d		      inc	Frame
    222  f07f		       c6 8e		      dec	FrameTimer
    223  f081		       c6 8f		      dec	FrameTimer+1
    224  f083
    225  f083							; VSYNCH signal scanlines
    226  f083					      REPEAT	#KERNEL_VSYNC
    227  f083		       85 02		      sta	WSYNC
    226  f083					      REPEND
    227  f085		       85 02		      sta	WSYNC
    226  f085					      REPEND
    227  f087		       85 02		      sta	WSYNC
    228  f089					      REPEND
    229  f089
    230  f089							; Turn off Vertical Sync signal
    231  f089		       a9 00		      lda	#0
    232  f08b		       85 00		      sta	VSYNC
    233  f08d
    234  f08d				   .vsync_return
    235  f08d		       60		      rts
    236  f08e
    237  f08e				   VerticalBlank
    238  f08e							; Setup Timer
    239  f08e		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    240  f090		       8d 96 02 	      sta	TIM64T
    241  f093
    242  f093				   .vblank_logic
    243  f093							; Perform Game Logic
    244  f093		       20 9e f0 	      jsr	.vblank_logic_call_ptr
    245  f096
    246  f096				   .vblank_loop
    247  f096							; WSYNC until Timer is complete
    248  f096		       85 02		      sta	WSYNC
    249  f098		       ad 84 02 	      lda	INTIM
    250  f09b		       d0 f9		      bne	.vblank_loop
    251  f09d
    252  f09d				   .vblank_return
    253  f09d		       60		      rts
    254  f09e
    255  f09e				   .vblank_logic_call_ptr
    256  f09e		       6c 87 00 	      jmp	(VBlankPtr)
    257  f0a1
    258  f0a1				   Kernel
    259  f0a1
    260  f0a1							; Perform Selected Kernel
    261  f0a1		       20 a5 f0 	      jsr	.kernel_call_ptr
    262  f0a4		       60		      rts
    263  f0a5
    264  f0a5				   .kernel_call_ptr
    265  f0a5		       6c 89 00 	      jmp	(KernelPtr)
    266  f0a8
    267  f0a8				   OverScan
    268  f0a8
    269  f0a8							; End of screen, enter blanking
    270  f0a8		       a9 42		      lda	#%01000010
    271  f0aa		       85 01		      sta	VBLANK
    272  f0ac
    273  f0ac							; Setup Timer
    274  f0ac		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    275  f0ae		       8d 96 02 	      sta	TIM64T
    276  f0b1
    277  f0b1							;.overscan_reset:
    278  f0b1							; Check for reset switch
    279  f0b1		       ad 82 02 	      lda	SWCHB
    280  f0b4		       4a		      lsr		; Push D0 to carry (C)
    281  f0b5		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    282  f0b7
    283  f0b7							; Perform reset
    284  f0b7		       20 cb f0 	      jsr	LogoInit	; No need for logic
    285  f0ba		       4c c0 f0 	      jmp	.overscan_loop
    286  f0bd
    287  f0bd				   .overscan_logic
    288  f0bd							; Perform OverScan Logic
    289  f0bd		       20 c8 f0 	      jsr	.overscan_logic_call_ptr
    290  f0c0
    291  f0c0				   .overscan_loop
    292  f0c0							; WSYNC until Timer is complete
    293  f0c0		       85 02		      sta	WSYNC
    294  f0c2		       ad 84 02 	      lda	INTIM
    295  f0c5		       d0 f9		      bne	.overscan_loop
    296  f0c7
    297  f0c7				   .overscan_return
    298  f0c7		       60		      rts
    299  f0c8
    300  f0c8				   .overscan_logic_call_ptr
    301  f0c8		       6c 8b 00 	      jmp	(OverScanPtr)
    302  f0cb
    303  f0cb							;================
    304  f0cb							; State Code
    305  f0cb							;================
    306  f0cb
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0cb					      include	"logo.asm"
      1  f0cb							;================
      2  f0cb							; Constants
      3  f0cb							;================
      4  f0cb
      5  f0cb		       00 b4	   LOGO_FRAMES =	180
      6  f0cb
      7  f0cb		       00 00	   LOGO_BG_COLOR =	#$00
      8  f0cb		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f0cb
     10  f0cb		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0cb		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0cb		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0cb		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0cb		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0cb		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0cb
     17  f0cb		       00 10	   LOGO_IMAGE_SIZE =	16
     18  f0cb		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     19  f0cb		       00 50	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     20  f0cb		       00 38	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     21  f0cb		       00 32	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-6	; The extra 6 is for processing overflow
     22  f0cb
     23  f0cb				   LogoInit
     24  f0cb
     25  f0cb							; Setup logic and kernel
      0  f0cb					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0cb				   .POINTER   SET	VBlankPtr
      2  f0cb				   .ADDRESS   SET	LogoVerticalBlank
      3  f0cb
      4  f0cb		       a9 16		      LDA	#<.ADDRESS
      5  f0cd		       85 87		      STA	.POINTER
      6  f0cf		       a9 f1		      LDA	#>.ADDRESS
      7  f0d1		       85 88		      STA	.POINTER+1
      8  f0d3
      0  f0d3					      SET_POINTER	KernelPtr, LogoKernel
      1  f0d3				   .POINTER   SET	KernelPtr
      2  f0d3				   .ADDRESS   SET	LogoKernel
      3  f0d3
      4  f0d3		       a9 67		      LDA	#<.ADDRESS
      5  f0d5		       85 89		      STA	.POINTER
      6  f0d7		       a9 f1		      LDA	#>.ADDRESS
      7  f0d9		       85 8a		      STA	.POINTER+1
      8  f0db
      0  f0db					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0db				   .POINTER   SET	OverScanPtr
      2  f0db				   .ADDRESS   SET	LogoOverScan
      3  f0db
      4  f0db		       a9 1a		      LDA	#<.ADDRESS
      5  f0dd		       85 8b		      STA	.POINTER
      6  f0df		       a9 f1		      LDA	#>.ADDRESS
      7  f0e1		       85 8c		      STA	.POINTER+1
      8  f0e3
     29  f0e3
     30  f0e3							; Load Colors
     31  f0e3		       a9 00		      lda	#LOGO_BG_COLOR
     32  f0e5		       85 09		      sta	COLUBK
     33  f0e7		       a9 c6		      lda	#LOGO_FG_COLOR
     34  f0e9		       85 08		      sta	COLUPF
     35  f0eb
     36  f0eb							; Load audio settings
     37  f0eb		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     38  f0ed		       85 15		      sta	AUDC0
     39  f0ef		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     40  f0f1		       85 19		      sta	AUDV0
     41  f0f3		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     42  f0f5		       85 16		      sta	AUDC1
     43  f0f7		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     44  f0f9		       85 1a		      sta	AUDV1
     45  f0fb		       a9 00		      lda	#0
     46  f0fd		       85 90		      sta	AudioStep
     47  f0ff
     48  f0ff							; Play first note
     49  f0ff		       ad 47 f2 	      lda	LogoAudio0,AudioStep
     50  f102		       85 17		      sta	AUDF0
     51  f104		       ad 53 f2 	      lda	LogoAudio1,AudioStep
     52  f107		       85 18		      sta	AUDF1
     53  f109
     54  f109							; Setup frame counters
     55  f109		       a9 00		      lda	#0
     56  f10b		       85 8d		      sta	Frame
     57  f10d		       a9 b4		      lda	#LOGO_FRAMES
     58  f10f		       85 8e		      sta	FrameTimer
     59  f111
     60  f111							; Setup Image Animation
     61  f111		       a9 22		      lda	#(LOGO_IMAGE_SIZE+1)*2
     62  f113		       85 9b		      sta	WebIndex
     63  f115
     64  f115		       60		      rts
     65  f116
     66  f116				   LogoVerticalBlank
     67  f116		       20 21 f1 	      jsr	LogoAnimation
     68  f119		       60		      rts
     69  f11a
     70  f11a				   LogoOverScan
     71  f11a		       20 32 f1 	      jsr	LogoAudio
     72  f11d		       20 5d f1 	      jsr	LogoState
     73  f120		       60		      rts
     74  f121
     75  f121				   LogoAnimation
     76  f121		       a5 8d		      lda	Frame
     77  f123		       29 03		      and	#%00000011	; Every 4 when bits are 00
     78  f125		       d0 0a		      bne	.logo_animation_return
     79  f127
     80  f127		       a6 9b		      ldx	WebIndex
     81  f129		       e0 00		      cpx	#0
     82  f12b		       f0 04		      beq	.logo_animation_return
     83  f12d
     84  f12d							; Add another visible line
     85  f12d		       ca		      dex
     86  f12e		       ca		      dex
     87  f12f		       86 9b		      stx	WebIndex
     88  f131
     89  f131				   .logo_animation_return
     90  f131		       60		      rts
     91  f132
     92  f132				   LogoAudio
     93  f132
     94  f132		       a5 8d		      lda	Frame
     95  f134		       29 07		      and	#%00000111	; Every 8 when bits are 000
     96  f136		       d0 24		      bne	.logo_audio_return
     97  f138
     98  f138				   .logo_audio_play
     99  f138
    100  f138							; Check if we're at the end of the melody
    101  f138		       a4 90		      ldy	AudioStep
    102  f13a		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
    103  f13c		       f0 10		      beq	.logo_audio_mute
    104  f13e
    105  f13e				   .logo_audio_play_note
    106  f13e							; Increment audio position
    107  f13e		       c8		      iny
    108  f13f		       84 90		      sty	AudioStep
    109  f141
    110  f141							; Logo note and play
    111  f141		       b9 47 f2 	      lda	LogoAudio0,y
    112  f144		       85 17		      sta	AUDF0
    113  f146		       b9 53 f2 	      lda	LogoAudio1,y
    114  f149		       85 18		      sta	AUDF1
    115  f14b		       4c 5c f1 	      jmp	.logo_audio_mute_skip
    116  f14e
    117  f14e				   .logo_audio_mute
    118  f14e
    119  f14e							; Mute audio
    120  f14e		       a9 00		      lda	#0
    121  f150		       85 15		      sta	AUDC0
    122  f152		       85 19		      sta	AUDV0
    123  f154		       85 17		      sta	AUDF0
    124  f156		       85 16		      sta	AUDC1
    125  f158		       85 1a		      sta	AUDV1
    126  f15a		       85 18		      sta	AUDF1
    127  f15c
    128  f15c				   .logo_audio_mute_skip
    129  f15c				   .logo_audio_return
    130  f15c		       60		      rts
    131  f15d
    132  f15d				   LogoState
    133  f15d		       a5 8e		      lda	FrameTimer
    134  f15f		       c9 00		      cmp	#0
    135  f161		       d0 03		      bne	.logo_state_return
    136  f163
    137  f163		       20 5f f2 	      jsr	TitleInit
    138  f166
    139  f166				   .logo_state_return
    140  f166		       60		      rts
    141  f167
    142  f167				   LogoKernel
    143  f167
    144  f167							; Playfield Control
    145  f167		       a5 80		      lda	CtrlPf
    146  f169		       29 fe		      and	#%11111110	; No mirroring
    147  f16b		       85 80		      sta	CtrlPf
    148  f16d		       85 0a		      sta	CTRLPF
    149  f16f
    150  f16f							; Turn on display
    151  f16f		       a9 00		      lda	#0
    152  f171		       85 01		      sta	VBLANK
    153  f173
    154  f173		       a4 9b		      ldy	WebIndex
    155  f175		       c0 00		      cpy	#0
    156  f177		       d0 06		      bne	.logo_kernel_top_anim_padding
    157  f179
    158  f179				   .logo_kernel_top_padding
    159  f179							; Top Padding
    160  f179		       20 ca f1 	      jsr	LogoPadding
    161  f17c		       4c 8d f1 	      jmp	.logo_kernel_image
    162  f17f
    163  f17f				   .logo_kernel_top_anim_padding
    164  f17f		       20 da f1 	      jsr	LogoAnimPadding
    165  f182
    166  f182				   .logo_kernel_image_animation_start
    167  f182		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    168  f184
    169  f184				   .logo_kernel_image_animation_loop
    170  f184		       85 02		      sta	WSYNC
    171  f186		       ca		      dex
    172  f187		       d0 fb		      bne	.logo_kernel_image_animation_loop
    173  f189
    174  f189		       88		      dey
    175  f18a		       88		      dey
    176  f18b		       d0 f5		      bne	.logo_kernel_image_animation_start
    177  f18d
    178  f18d				   .logo_kernel_image
    179  f18d
    180  f18d		       a2 20		      ldx	#(LOGO_IMAGE_SIZE*2)
    181  f18f		       a0 04		      ldy	#LOGO_IMAGE_LINE_SIZE-1
    182  f191							; The extra 1 on line size is for processing overflow
    183  f191
    184  f191		       ca		      dex
    185  f192		       e4 9b		      cpx	WebIndex
    186  f194		       90 30		      bcc	.logo_kernel_bottom_padding
    187  f196
    188  f196				   .logo_kernel_image_line
    189  f196		       85 02		      sta	WSYNC
    190  f198
    191  f198		       bd e6 f1 	      lda	LogoImagePF0-1,x
    192  f19b		       85 0d		      sta	PF0
    193  f19d		       bd 06 f2 	      lda	LogoImagePF1-1,x
    194  f1a0		       85 0e		      sta	PF1
    195  f1a2		       bd 26 f2 	      lda	LogoImagePF2-1,x
    196  f1a5		       85 0f		      sta	PF2
    197  f1a7
      0  f1a7					      sleep	6
      1  f1a7				   .CYCLES    SET	6
      2  f1a7
      3  f1a7				  -	      IF	.CYCLES < 2
      4  f1a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1a7				  -	      ERR
      6  f1a7					      ENDIF
      7  f1a7
      8  f1a7				  -	      IF	.CYCLES & 1
      9  f1a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1a7				  -	      nop	0
     11  f1a7				  -	      ELSE
     12  f1a7				  -	      bit	VSYNC
     13  f1a7				  -	      ENDIF
     14  f1a7				  -.CYCLES    SET	.CYCLES - 3
     15  f1a7					      ENDIF
     16  f1a7
     17  f1a7					      REPEAT	.CYCLES / 2
     18  f1a7		       ea		      nop
     17  f1a7					      REPEND
     18  f1a8		       ea		      nop
     17  f1a8					      REPEND
     18  f1a9		       ea		      nop
     19  f1aa					      REPEND
    199  f1aa
    200  f1aa		       bd e7 f1 	      lda	LogoImagePF0,x
    201  f1ad		       85 0d		      sta	PF0
    202  f1af		       bd 07 f2 	      lda	LogoImagePF1,x
    203  f1b2		       85 0e		      sta	PF1
    204  f1b4		       bd 27 f2 	      lda	LogoImagePF2,x
    205  f1b7		       85 0f		      sta	PF2
    206  f1b9
    207  f1b9		       88		      dey
    208  f1ba		       d0 da		      bne	.logo_kernel_image_line
    209  f1bc
    210  f1bc		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    211  f1be
    212  f1be		       ca		      dex
    213  f1bf		       e4 9b		      cpx	WebIndex
    214  f1c1		       90 03		      bcc	.logo_kernel_bottom_padding
    215  f1c3
    216  f1c3		       ca		      dex
    217  f1c4		       10 d0		      bpl	.logo_kernel_image_line
    218  f1c6
    219  f1c6				   .logo_kernel_bottom_padding
    220  f1c6							; Bottom Padding
    221  f1c6		       20 ca f1 	      jsr	LogoPadding
    222  f1c9
    223  f1c9				   .logo_kernel_image_return
    224  f1c9		       60		      rts
    225  f1ca
    226  f1ca				   LogoPadding
    227  f1ca		       a9 00		      lda	#0
    228  f1cc		       85 0d		      sta	PF0
    229  f1ce		       85 0e		      sta	PF1
    230  f1d0		       85 0f		      sta	PF2
    231  f1d2
    232  f1d2		       a2 38		      ldx	#LOGO_IMAGE_PADDING
    233  f1d4				   .logo_padding_loop
    234  f1d4		       85 02		      sta	WSYNC
    235  f1d6		       ca		      dex
    236  f1d7		       d0 fb		      bne	.logo_padding_loop
    237  f1d9
    238  f1d9		       60		      rts
    239  f1da
    240  f1da				   LogoAnimPadding
    241  f1da		       a9 00		      lda	#0
    242  f1dc		       85 0d		      sta	PF0
    243  f1de		       85 0e		      sta	PF1
    244  f1e0		       85 0f		      sta	PF2
    245  f1e2
    246  f1e2		       a2 32		      ldx	#LOGO_IMAGE_ANIM_PADDING
    247  f1e4		       4c d4 f1 	      jmp	.logo_padding_loop
    248  f1e7
    249  f1e7				   LogoAssets
    250  f1e7
    251  f1e7							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f1e7					      include	"logo_image.asm"
      1  f1e7				   LogoImagePF0
      2  f1e7		       00		      .BYTE.b	%00000000
      3  f1e8		       10		      .BYTE.b	%00010000
      4  f1e9		       00		      .BYTE.b	%00000000
      5  f1ea		       30		      .BYTE.b	%00110000
      6  f1eb		       00		      .BYTE.b	%00000000
      7  f1ec		       70		      .BYTE.b	%01110000
      8  f1ed		       00		      .BYTE.b	%00000000
      9  f1ee		       60		      .BYTE.b	%01100000
     10  f1ef		       00		      .BYTE.b	%00000000
     11  f1f0		       60		      .BYTE.b	%01100000
     12  f1f1		       00		      .BYTE.b	%00000000
     13  f1f2		       20		      .BYTE.b	%00100000
     14  f1f3		       80		      .BYTE.b	%10000000
     15  f1f4		       00		      .BYTE.b	%00000000
     16  f1f5		       c0		      .BYTE.b	%11000000
     17  f1f6		       00		      .BYTE.b	%00000000
     18  f1f7		       c0		      .BYTE.b	%11000000
     19  f1f8		       00		      .BYTE.b	%00000000
     20  f1f9		       80		      .BYTE.b	%10000000
     21  f1fa		       00		      .BYTE.b	%00000000
     22  f1fb		       00		      .BYTE.b	%00000000
     23  f1fc		       40		      .BYTE.b	%01000000
     24  f1fd		       00		      .BYTE.b	%00000000
     25  f1fe		       60		      .BYTE.b	%01100000
     26  f1ff		       00		      .BYTE.b	%00000000
     27  f200		       60		      .BYTE.b	%01100000
     28  f201		       00		      .BYTE.b	%00000000
     29  f202		       70		      .BYTE.b	%01110000
     30  f203		       00		      .BYTE.b	%00000000
     31  f204		       30		      .BYTE.b	%00110000
     32  f205		       00		      .BYTE.b	%00000000
     33  f206		       10		      .BYTE.b	%00010000
     34  f207
     35  f207				   LogoImagePF1
     36  f207		       03		      .BYTE.b	%00000011
     37  f208		       f0		      .BYTE.b	%11110000
     38  f209		       03		      .BYTE.b	%00000011
     39  f20a		       f8		      .BYTE.b	%11111000
     40  f20b		       13		      .BYTE.b	%00010011
     41  f20c		       fc		      .BYTE.b	%11111100
     42  f20d		       33		      .BYTE.b	%00110011
     43  f20e		       dc		      .BYTE.b	%11011100
     44  f20f		       63		      .BYTE.b	%01100011
     45  f210		       cc		      .BYTE.b	%11001100
     46  f211		       c3		      .BYTE.b	%11000011
     47  f212		       cc		      .BYTE.b	%11001100
     48  f213		       83		      .BYTE.b	%10000011
     49  f214		       cc		      .BYTE.b	%11001100
     50  f215		       03		      .BYTE.b	%00000011
     51  f216		       cc		      .BYTE.b	%11001100
     52  f217		       03		      .BYTE.b	%00000011
     53  f218		       cc		      .BYTE.b	%11001100
     54  f219		       83		      .BYTE.b	%10000011
     55  f21a		       cc		      .BYTE.b	%11001100
     56  f21b		       c3		      .BYTE.b	%11000011
     57  f21c		       cc		      .BYTE.b	%11001100
     58  f21d		       63		      .BYTE.b	%01100011
     59  f21e		       cc		      .BYTE.b	%11001100
     60  f21f		       33		      .BYTE.b	%00110011
     61  f220		       dc		      .BYTE.b	%11011100
     62  f221		       13		      .BYTE.b	%00010011
     63  f222		       fc		      .BYTE.b	%11111100
     64  f223		       03		      .BYTE.b	%00000011
     65  f224		       f8		      .BYTE.b	%11111000
     66  f225		       03		      .BYTE.b	%00000011
     67  f226		       f0		      .BYTE.b	%11110000
     68  f227
     69  f227				   LogoImagePF2
     70  f227		       83		      .BYTE.b	%10000011
     71  f228		       00		      .BYTE.b	%00000000
     72  f229		       c7		      .BYTE.b	%11000111
     73  f22a		       00		      .BYTE.b	%00000000
     74  f22b		       ef		      .BYTE.b	%11101111
     75  f22c		       01		      .BYTE.b	%00000001
     76  f22d		       6e		      .BYTE.b	%01101110
     77  f22e		       03		      .BYTE.b	%00000011
     78  f22f		       6c		      .BYTE.b	%01101100
     79  f230		       06		      .BYTE.b	%00000110
     80  f231		       6c		      .BYTE.b	%01101100
     81  f232		       0c		      .BYTE.b	%00001100
     82  f233		       6c		      .BYTE.b	%01101100
     83  f234		       18		      .BYTE.b	%00011000
     84  f235		       6c		      .BYTE.b	%01101100
     85  f236		       30		      .BYTE.b	%00110000
     86  f237		       6c		      .BYTE.b	%01101100
     87  f238		       30		      .BYTE.b	%00110000
     88  f239		       6c		      .BYTE.b	%01101100
     89  f23a		       18		      .BYTE.b	%00011000
     90  f23b		       6c		      .BYTE.b	%01101100
     91  f23c		       0c		      .BYTE.b	%00001100
     92  f23d		       6c		      .BYTE.b	%01101100
     93  f23e		       06		      .BYTE.b	%00000110
     94  f23f		       6e		      .BYTE.b	%01101110
     95  f240		       03		      .BYTE.b	%00000011
     96  f241		       ef		      .BYTE.b	%11101111
     97  f242		       01		      .BYTE.b	%00000001
     98  f243		       c7		      .BYTE.b	%11000111
     99  f244		       00		      .BYTE.b	%00000000
    100  f245		       83		      .BYTE.b	%10000011
    101  f246		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    253  f247
    254  f247				   LogoAudio0
    255  f247
    256  f247		       1d		      .BYTE.b	#29	; C
    257  f248		       17		      .BYTE.b	#23	; E
    258  f249		       13		      .BYTE.b	#19	; G
    259  f24a		       0f		      .BYTE.b	#15	; A
    260  f24b		       17		      .BYTE.b	#23	; E
    261  f24c		       13		      .BYTE.b	#19	; G
    262  f24d		       0f		      .BYTE.b	#15	; B
    263  f24e		       0e		      .BYTE.b	#14	; C
    264  f24f		       0b		      .BYTE.b	#11	; E
    265  f250		       0b		      .BYTE.b	#11
    266  f251		       0b		      .BYTE.b	#11
    267  f252		       0b		      .BYTE.b	#11
    268  f253
    269  f253				   LogoAudio1
    270  f253
    271  f253		       1f		      .BYTE.b	#31	; C
    272  f254		       1f		      .BYTE.b	#31
    273  f255		       1f		      .BYTE.b	#31
    274  f256		       1f		      .BYTE.b	#31
    275  f257		       19		      .BYTE.b	#25	; E
    276  f258		       19		      .BYTE.b	#25
    277  f259		       19		      .BYTE.b	#25
    278  f25a		       19		      .BYTE.b	#25
    279  f25b		       14		      .BYTE.b	#20	; G
    280  f25c		       14		      .BYTE.b	#20
    281  f25d		       14		      .BYTE.b	#20
    282  f25e		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f25f					      include	"title.asm"
      1  f25f							;================
      2  f25f							; Constants
      3  f25f							;================
      4  f25f
      5  f25f		       00 00	   TITLE_BG_COLOR =	#$00
      6  f25f		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f25f		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f25f		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f25f
     10  f25f		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f25f		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f25f		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f25f		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f25f		       00 09	   TITLE_AUDIO_STEP =	9
     15  f25f
     16  f25f		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     17  f25f		       00 05	   TITLE_FRAME_BOT_LINES =	5
     18  f25f		       00 07	   TITLE_LABEL_LINE =	7
     19  f25f
     20  f25f		       00 0f	   TITLE_GAP_SIZE =	#15
     21  f25f
     22  f25f		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     23  f25f		       00 09	   TITLE_SPIDER_SIZE =	#9
     24  f25f		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f25f
     26  f25f				   TitleInit
     27  f25f
     28  f25f							; Setup logic and kernel
      0  f25f					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f25f				   .POINTER   SET	VBlankPtr
      2  f25f				   .ADDRESS   SET	TitleVerticalBlank
      3  f25f
      4  f25f		       a9 cc		      LDA	#<.ADDRESS
      5  f261		       85 87		      STA	.POINTER
      6  f263		       a9 f2		      LDA	#>.ADDRESS
      7  f265		       85 88		      STA	.POINTER+1
      8  f267
      0  f267					      SET_POINTER	KernelPtr, TitleKernel
      1  f267				   .POINTER   SET	KernelPtr
      2  f267				   .ADDRESS   SET	TitleKernel
      3  f267
      4  f267		       a9 64		      LDA	#<.ADDRESS
      5  f269		       85 89		      STA	.POINTER
      6  f26b		       a9 f3		      LDA	#>.ADDRESS
      7  f26d		       85 8a		      STA	.POINTER+1
      8  f26f
      0  f26f					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f26f				   .POINTER   SET	OverScanPtr
      2  f26f				   .ADDRESS   SET	TitleOverScan
      3  f26f
      4  f26f		       a9 1d		      LDA	#<.ADDRESS
      5  f271		       85 8b		      STA	.POINTER
      6  f273		       a9 f3		      LDA	#>.ADDRESS
      7  f275		       85 8c		      STA	.POINTER+1
      8  f277
     32  f277
     33  f277							; Load Colors
     34  f277		       a9 00		      lda	#TITLE_BG_COLOR
     35  f279		       85 09		      sta	COLUBK
     36  f27b		       a9 06		      lda	#TITLE_WEB_COLOR
     37  f27d		       85 08		      sta	COLUPF
     38  f27f		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f281		       85 06		      sta	COLUP0
     40  f283		       85 07		      sta	COLUP1
     41  f285
     42  f285							; Load audio settings
     43  f285
     44  f285							; Melody Line
     45  f285		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f287		       85 15		      sta	AUDC0
     47  f289		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f28b		       85 19		      sta	AUDV0
     49  f28d
     50  f28d							; Drums and Bass
     51  f28d		       a9 00		      lda	#0
     52  f28f		       85 16		      sta	AUDC1
     53  f291		       85 1a		      sta	AUDV1
     54  f293
     55  f293							; Make it so that we play the first note immediately
     56  f293		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f295		       85 90		      sta	AudioStep
     58  f297		       a9 01		      lda	#1
     59  f299		       85 8e		      sta	FrameTimer
     60  f29b
     61  f29b							; Setup Spider Sprite
      0  f29b					      SET_POINTER	SpiderPtr, TitleSpider
      1  f29b				   .POINTER   SET	SpiderPtr
      2  f29b				   .ADDRESS   SET	TitleSpider
      3  f29b
      4  f29b		       a9 a4		      LDA	#<.ADDRESS
      5  f29d		       85 9e		      STA	.POINTER
      6  f29f		       a9 f4		      LDA	#>.ADDRESS
      7  f2a1		       85 9f		      STA	.POINTER+1
      8  f2a3
     63  f2a3
     64  f2a3		       a5 81		      lda	NuSiz0
     65  f2a5		       29 f8		      and	#%11111000
     66  f2a7		       09 06		      ora	#%00000110	; Triple Sprite
     67  f2a9		       85 81		      sta	NuSiz0
     68  f2ab		       85 04		      sta	NUSIZ0
     69  f2ad		       85 82		      sta	NuSiz1
     70  f2af		       85 05		      sta	NUSIZ1
     71  f2b1
     72  f2b1		       a9 00		      lda	#0	; No reflect
     73  f2b3		       85 0b		      sta	REFP0
     74  f2b5		       a9 ff		      lda	#$FF	; Reflect P1
     75  f2b7		       85 0c		      sta	REFP1
     76  f2b9
     77  f2b9		       a9 00		      lda	#0
     78  f2bb		       85 a5		      sta	SpiderDrawPos	; Initialize animation state
     79  f2bd
     80  f2bd							; Setup Web Line
     81  f2bd							; Missle0 (2 clock size)
     82  f2bd		       a5 81		      lda	NuSiz0
     83  f2bf		       29 cf		      and	#%11001111
     84  f2c1		       09 10		      ora	#%00010000
     85  f2c3		       85 81		      sta	NuSiz0
     86  f2c5		       85 04		      sta	NUSIZ0
     87  f2c7
     88  f2c7							; Disable at start
     89  f2c7		       a9 00		      lda	#0
     90  f2c9		       85 1d		      sta	ENAM0
     91  f2cb
     92  f2cb		       60		      rts
     93  f2cc
     94  f2cc				   TitleVerticalBlank
     95  f2cc
     96  f2cc							; Refresh random values
     97  f2cc		       20 13 f0 	      jsr	Random
     98  f2cf
     99  f2cf		       20 d6 f2 	      jsr	TitlePosition
    100  f2d2		       20 f0 f2 	      jsr	TitleAnimation
    101  f2d5
    102  f2d5		       60		      rts
    103  f2d6
    104  f2d6				   TitlePosition
    105  f2d6
    106  f2d6							; Position Spider
    107  f2d6		       a2 00		      ldx	#0	; Object (player0)
    108  f2d8		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    109  f2da		       20 00 f0 	      jsr	PosObject
    110  f2dd
    111  f2dd		       a2 01		      ldx	#1	; Object (player1)
    112  f2df		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    113  f2e1		       20 00 f0 	      jsr	PosObject
    114  f2e4
    115  f2e4							; Position Web Line
    116  f2e4		       a2 02		      ldx	#2	; Object (missle0)
    117  f2e6		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    118  f2e8		       20 00 f0 	      jsr	PosObject
    119  f2eb
    120  f2eb		       85 02		      sta	WSYNC
    121  f2ed		       85 2a		      sta	HMOVE
    122  f2ef
    123  f2ef		       60		      rts
    124  f2f0
    125  f2f0				   TitleAnimation
    126  f2f0
    127  f2f0		       a5 90		      lda	AudioStep
    128  f2f2		       c9 00		      cmp	#0
    129  f2f4		       f0 0d		      beq	.title_animation_1
    130  f2f6		       c9 04		      cmp	#4
    131  f2f8		       f0 16		      beq	.title_animation_2
    132  f2fa		       c9 09		      cmp	#9
    133  f2fc		       f0 05		      beq	.title_animation_1
    134  f2fe		       c9 0c		      cmp	#12
    135  f300		       f0 0e		      beq	.title_animation_2
    136  f302		       60		      rts
    137  f303
    138  f303				   .title_animation_1
      0  f303					      SET_POINTER	SpiderPtr, TitleSpider
      1  f303				   .POINTER   SET	SpiderPtr
      2  f303				   .ADDRESS   SET	TitleSpider
      3  f303
      4  f303		       a9 a4		      LDA	#<.ADDRESS
      5  f305		       85 9e		      STA	.POINTER
      6  f307		       a9 f4		      LDA	#>.ADDRESS
      7  f309		       85 9f		      STA	.POINTER+1
      8  f30b
    140  f30b		       a9 00		      lda	#0
    141  f30d		       85 a5		      sta	SpiderDrawPos
    142  f30f		       60		      rts
    143  f310
    144  f310				   .title_animation_2
      0  f310					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f310				   .POINTER   SET	SpiderPtr
      2  f310				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f310
      4  f310		       a9 ad		      LDA	#<.ADDRESS
      5  f312		       85 9e		      STA	.POINTER
      6  f314		       a9 f4		      LDA	#>.ADDRESS
      7  f316		       85 9f		      STA	.POINTER+1
      8  f318
    146  f318		       a9 01		      lda	#1
    147  f31a		       85 a5		      sta	SpiderDrawPos
    148  f31c		       60		      rts
    149  f31d
    150  f31d				   TitleOverScan
    151  f31d		       20 24 f3 	      jsr	TitleAudio
    152  f320		       20 5c f3 	      jsr	TitleState
    153  f323		       60		      rts
    154  f324
    155  f324				   TitleAudio
    156  f324
    157  f324		       a6 8e		      ldx	FrameTimer
    158  f326		       e0 00		      cpx	#0
    159  f328		       d0 31		      bne	.title_audio_return
    160  f32a
    161  f32a							; Reset Timer
    162  f32a		       a2 09		      ldx	#TITLE_AUDIO_STEP
    163  f32c		       86 8e		      stx	FrameTimer
    164  f32e
    165  f32e				   .title_audio_play
    166  f32e
    167  f32e							; Increment melody position
    168  f32e		       a4 90		      ldy	AudioStep
    169  f330		       c8		      iny
    170  f331
    171  f331							; Check if we're at the end of the melody
    172  f331		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    173  f333		       d0 02		      bne	.title_audio_play_note
    174  f335
    175  f335							; Loop our audio step
    176  f335		       a0 00		      ldy	#0
    177  f337
    178  f337				   .title_audio_play_note
    179  f337
    180  f337							; Save current position
    181  f337		       84 90		      sty	AudioStep
    182  f339
    183  f339							; Basic Melody Line
    184  f339		       b9 b6 f4 	      lda	TitleAudio0,y
    185  f33c		       85 17		      sta	AUDF0
    186  f33e
    187  f33e							; Drums and Bass
    188  f33e		       b9 c6 f4 	      lda	TitleTone1,y
    189  f341		       c9 ff		      cmp	#$FF
    190  f343		       f0 0e		      beq	.title_audio_play_note_1_mute
    191  f345
    192  f345		       85 16		      sta	AUDC1
    193  f347		       b9 d6 f4 	      lda	TitleAudio1,y
    194  f34a		       85 18		      sta	AUDF1
    195  f34c		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    196  f34e		       85 1a		      sta	AUDV1
    197  f350
    198  f350		       4c 5b f3 	      jmp	.title_audio_return
    199  f353
    200  f353				   .title_audio_play_note_1_mute
    201  f353
    202  f353		       a9 00		      lda	#0
    203  f355		       85 18		      sta	AUDF1
    204  f357		       85 16		      sta	AUDC1
    205  f359		       85 1a		      sta	AUDV1
    206  f35b
    207  f35b				   .title_audio_return
    208  f35b		       60		      rts
    209  f35c
    210  f35c				   TitleState
    211  f35c							; Check if Fire Button on controller 1 is pressed
    212  f35c		       a5 0c		      lda	INPT4
    213  f35e		       30 03		      bmi	.title_state_return
    214  f360
    215  f360		       20 44 fc 	      jsr	GameInit
    216  f363
    217  f363				   .title_state_return
    218  f363		       60		      rts
    219  f364
    220  f364				   TitleKernel
    221  f364
    222  f364							; Playfield Control
    223  f364		       a5 80		      lda	CtrlPf
    224  f366		       29 fe		      and	#%11111110	; No mirroring
    225  f368		       85 80		      sta	CtrlPf
    226  f36a		       85 0a		      sta	CTRLPF
    227  f36c
    228  f36c							; Turn on display
    229  f36c		       a9 00		      lda	#0
    230  f36e		       85 01		      sta	VBLANK
    231  f370
    232  f370		       85 02		      sta	WSYNC
    233  f372
    234  f372				   TitleFrameTopDraw
    235  f372
    236  f372							; Start Counters
    237  f372		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    238  f374		       a0 00		      ldy	#0	; Image Counter
    239  f376
    240  f376				   .title_frame_top
    241  f376
    242  f376							; 76 machine cycles per scanline
    243  f376		       85 02		      sta	WSYNC
    244  f378
    245  f378				   .title_frame_top_load		; 66 cycles
    246  f378
    247  f378							; First half of image
    248  f378		       b9 3e f4 	      lda	TitleFrameTop,y	; 5
    249  f37b		       85 0d		      sta	PF0	; 4
    250  f37d		       b9 3f f4 	      lda	TitleFrameTop+1,y	; 5
    251  f380		       85 0e		      sta	PF1	; 4
    252  f382		       b9 40 f4 	      lda	TitleFrameTop+2,y	; 5
    253  f385		       85 0f		      sta	PF2	; 4
    254  f387
      0  f387					      sleep	6
      1  f387				   .CYCLES    SET	6
      2  f387
      3  f387				  -	      IF	.CYCLES < 2
      4  f387				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f387				  -	      ERR
      6  f387					      ENDIF
      7  f387
      8  f387				  -	      IF	.CYCLES & 1
      9  f387				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f387				  -	      nop	0
     11  f387				  -	      ELSE
     12  f387				  -	      bit	VSYNC
     13  f387				  -	      ENDIF
     14  f387				  -.CYCLES    SET	.CYCLES - 3
     15  f387					      ENDIF
     16  f387
     17  f387					      REPEAT	.CYCLES / 2
     18  f387		       ea		      nop
     17  f387					      REPEND
     18  f388		       ea		      nop
     17  f388					      REPEND
     18  f389		       ea		      nop
     19  f38a					      REPEND
    256  f38a
    257  f38a							; Second half of image
    258  f38a		       b9 41 f4 	      lda	TitleFrameTop+3,y	; 5
    259  f38d		       85 0d		      sta	PF0	; 4
    260  f38f		       b9 42 f4 	      lda	TitleFrameTop+4,y	; 5
    261  f392		       85 0e		      sta	PF1	; 4
    262  f394		       b9 43 f4 	      lda	TitleFrameTop+5,y	; 5
    263  f397		       85 0f		      sta	PF2	; 4
    264  f399
    265  f399				   .title_frame_top_index		; 4 cycles
    266  f399
    267  f399		       ca		      dex		; 2
    268  f39a		       d0 da		      bne	.title_frame_top	; 2
    269  f39c
    270  f39c				   .title_frame_top_index_next		; 6 cycles
    271  f39c
    272  f39c							; Restore scanline counter
    273  f39c		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    274  f39e
    275  f39e		       98		      tya		; 2
    276  f39f		       18		      clc		; 2
    277  f3a0		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    278  f3a2		       a8		      tay		; 2
    279  f3a3
    280  f3a3		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA
    281  f3a5		       d0 04		      bne	.title_frame_top_label_color_skip
    282  f3a7		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    283  f3a9		       85 08		      sta	COLUPF	; 4
    284  f3ab				   .title_frame_top_label_color_skip
    285  f3ab
    286  f3ab		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA
    287  f3ad		       d0 c7		      bne	.title_frame_top	; 2
    288  f3af
    289  f3af				   .title_frame_top_clean
    290  f3af
    291  f3af							; Clear out playfield
    292  f3af		       a9 00		      lda	#0
    293  f3b1		       85 0d		      sta	PF0
    294  f3b3		       85 0e		      sta	PF1
    295  f3b5		       85 0f		      sta	PF2
    296  f3b7
    297  f3b7				   TitleWebDraw
    298  f3b7		       a9 02		      lda	#%00000010
    299  f3b9		       85 1d		      sta	ENAM0
    300  f3bb
    301  f3bb		       a9 06		      lda	#TITLE_WEB_COLOR
    302  f3bd		       85 06		      sta	COLUP0
    303  f3bf
    304  f3bf		       a2 0f		      ldx	#TITLE_GAP_SIZE
    305  f3c1				   .title_web_gap
    306  f3c1		       ca		      dex
    307  f3c2		       85 02		      sta	WSYNC
    308  f3c4		       d0 fb		      bne	.title_web_gap
    309  f3c6
    310  f3c6				   TitleSpiderDraw
    311  f3c6
    312  f3c6		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    313  f3c8
    314  f3c8		       a5 a5		      lda	SpiderDrawPos
    315  f3ca		       c9 01		      cmp	#1
    316  f3cc		       d0 0c		      bne	.title_spider_extra_web_disable
    317  f3ce
    318  f3ce				   .title_spider_extra_web_start
    319  f3ce		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    320  f3d0				   .title_spider_extra_web_loop
    321  f3d0		       85 02		      sta	WSYNC
    322  f3d2		       ca		      dex
    323  f3d3		       d0 fb		      bne	.title_spider_extra_web_loop
    324  f3d5
    325  f3d5		       88		      dey
    326  f3d6		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    327  f3d8		       d0 f4		      bne	.title_spider_extra_web_start
    328  f3da
    329  f3da				   .title_spider_extra_web_disable
    330  f3da		       a9 00		      lda	#0
    331  f3dc		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    332  f3de
    333  f3de		       85 02		      sta	WSYNC
    334  f3e0
    335  f3e0		       85 1d		      sta	ENAM0
    336  f3e2		       a9 56		      lda	#TITLE_SPIDER_COLOR
    337  f3e4		       85 06		      sta	COLUP0
    338  f3e6
    339  f3e6				   .title_spider
    340  f3e6		       b1 9e		      lda	(SpiderPtr),y
    341  f3e8		       85 1b		      sta	GRP0
    342  f3ea		       85 1c		      sta	GRP1
    343  f3ec
    344  f3ec				   .title_spider_delay
    345  f3ec		       ca		      dex
    346  f3ed		       85 02		      sta	WSYNC
    347  f3ef		       d0 fb		      bne	.title_spider_delay
    348  f3f1
    349  f3f1				   .title_spider_index
    350  f3f1		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    351  f3f3		       88		      dey
    352  f3f4		       10 f0		      bpl	.title_spider
    353  f3f6
    354  f3f6				   .title_spider_clean
    355  f3f6
    356  f3f6							; Clear sprites
    357  f3f6		       a9 00		      lda	#0
    358  f3f8		       85 1b		      sta	GRP0
    359  f3fa		       85 1c		      sta	GRP1
    360  f3fc
    361  f3fc				   TitleFrameBottomDraw
    362  f3fc
    363  f3fc							; Load Frame Color
    364  f3fc		       a9 06		      lda	#TITLE_WEB_COLOR
    365  f3fe		       85 08		      sta	COLUPF
    366  f400
    367  f400							; Start Counters
    368  f400		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    369  f402		       a0 00		      ldy	#0	; Image Counter
    370  f404
    371  f404				   .title_frame_bottom
    372  f404
    373  f404							; 76 machine cycles per scanline
    374  f404		       85 02		      sta	WSYNC
    375  f406
    376  f406				   .title_frame_bottom_load		; 66 cycles
    377  f406
    378  f406							; First half of image
    379  f406		       b9 86 f4 	      lda	TitleFrameBottom,y	; 5
    380  f409		       85 0d		      sta	PF0	; 4
    381  f40b		       b9 87 f4 	      lda	TitleFrameBottom+1,y	; 5
    382  f40e		       85 0e		      sta	PF1	; 4
    383  f410		       b9 88 f4 	      lda	TitleFrameBottom+2,y	; 5
    384  f413		       85 0f		      sta	PF2	; 4
    385  f415
      0  f415					      sleep	6
      1  f415				   .CYCLES    SET	6
      2  f415
      3  f415				  -	      IF	.CYCLES < 2
      4  f415				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f415				  -	      ERR
      6  f415					      ENDIF
      7  f415
      8  f415				  -	      IF	.CYCLES & 1
      9  f415				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f415				  -	      nop	0
     11  f415				  -	      ELSE
     12  f415				  -	      bit	VSYNC
     13  f415				  -	      ENDIF
     14  f415				  -.CYCLES    SET	.CYCLES - 3
     15  f415					      ENDIF
     16  f415
     17  f415					      REPEAT	.CYCLES / 2
     18  f415		       ea		      nop
     17  f415					      REPEND
     18  f416		       ea		      nop
     17  f416					      REPEND
     18  f417		       ea		      nop
     19  f418					      REPEND
    387  f418
    388  f418							; Second half of image
    389  f418		       b9 89 f4 	      lda	TitleFrameBottom+3,y	; 5
    390  f41b		       85 0d		      sta	PF0	; 4
    391  f41d		       b9 8a f4 	      lda	TitleFrameBottom+4,y	; 5
    392  f420		       85 0e		      sta	PF1	; 4
    393  f422		       b9 8b f4 	      lda	TitleFrameBottom+5,y	; 5
    394  f425		       85 0f		      sta	PF2	; 4
    395  f427
    396  f427				   .title_frame_bottom_index		; 4 cycles
    397  f427
    398  f427		       ca		      dex		; 2
    399  f428		       d0 da		      bne	.title_frame_bottom	; 2
    400  f42a
    401  f42a				   .title_frame_bottom_index_next		; 6 cycles
    402  f42a
    403  f42a							; Restore scanline counter
    404  f42a		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    405  f42c
    406  f42c		       98		      tya		; 2
    407  f42d		       18		      clc		; 2
    408  f42e		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    409  f430		       a8		      tay		; 2
    410  f431		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    411  f433		       d0 cf		      bne	.title_frame_bottom	; 2
    412  f435
    413  f435				   .title_frame_bottom_clean
    414  f435
    415  f435							; Clear out playfield
    416  f435		       a9 00		      lda	#0
    417  f437		       85 0d		      sta	PF0
    418  f439		       85 0e		      sta	PF1
    419  f43b		       85 0f		      sta	PF2
    420  f43d
    421  f43d				   .title_kernel_return
    422  f43d		       60		      rts
    423  f43e
    424  f43e				   TitleAssets
    425  f43e
    426  f43e							; Assets
------- FILE title_frame_top.asm LEVEL 3 PASS 2
      0  f43e					      include	"title_frame_top.asm"
      1  f43e				   TitleFrameTop
      2  f43e
      3  f43e		       a0		      .BYTE.b	%10100000
      4  f43f		       54		      .BYTE.b	%01010100
      5  f440		       01		      .BYTE.b	%00000001
      6  f441		       00		      .BYTE.b	%00000000
      7  f442		       03		      .BYTE.b	%00000011
      8  f443		       2c		      .BYTE.b	%00101100
      9  f444
     10  f444		       d0		      .BYTE.b	%11010000
     11  f445		       23		      .BYTE.b	%00100011
     12  f446		       00		      .BYTE.b	%00000000
     13  f447		       00		      .BYTE.b	%00000000
     14  f448		       00		      .BYTE.b	%00000000
     15  f449		       51		      .BYTE.b	%01010001
     16  f44a
     17  f44a		       60		      .BYTE.b	%01100000
     18  f44b		       dc		      .BYTE.b	%11011100
     19  f44c		       00		      .BYTE.b	%00000000
     20  f44d		       00		      .BYTE.b	%00000000
     21  f44e		       00		      .BYTE.b	%00000000
     22  f44f		       8e		      .BYTE.b	%10001110
     23  f450
     24  f450		       b0		      .BYTE.b	%10110000
     25  f451		       00		      .BYTE.b	%00000000
     26  f452		       00		      .BYTE.b	%00000000
     27  f453		       00		      .BYTE.b	%00000000
     28  f454		       00		      .BYTE.b	%00000000
     29  f455		       51		      .BYTE.b	%01010001
     30  f456
     31  f456		       40		      .BYTE.b	%01000000
     32  f457		       80		      .BYTE.b	%10000000
     33  f458		       00		      .BYTE.b	%00000000
     34  f459		       00		      .BYTE.b	%00000000
     35  f45a		       00		      .BYTE.b	%00000000
     36  f45b		       ad		      .BYTE.b	%10101101
     37  f45c
     38  f45c		       50		      .BYTE.b	%01010000
     39  f45d		       00		      .BYTE.b	%00000000
     40  f45e		       00		      .BYTE.b	%00000000
     41  f45f		       00		      .BYTE.b	%00000000
     42  f460		       01		      .BYTE.b	%00000001
     43  f461		       82		      .BYTE.b	%10000010
     44  f462
     45  f462		       20		      .BYTE.b	%00100000
     46  f463		       00		      .BYTE.b	%00000000
     47  f464		       00		      .BYTE.b	%00000000
     48  f465		       00		      .BYTE.b	%00000000
     49  f466		       02		      .BYTE.b	%00000010
     50  f467		       00		      .BYTE.b	%00000000
     51  f468
     52  f468		       c0		      .BYTE.b	%11000000
     53  f469		       77		      .BYTE.b	%01110111
     54  f46a		       66		      .BYTE.b	%01100110
     55  f46b		       30		      .BYTE.b	%00110000
     56  f46c		       22		      .BYTE.b	%00100010
     57  f46d		       1b		      .BYTE.b	%00011011
     58  f46e
     59  f46e		       40		      .BYTE.b	%01000000
     60  f46f		       52		      .BYTE.b	%01010010
     61  f470		       2a		      .BYTE.b	%00101010
     62  f471		       50		      .BYTE.b	%01010000
     63  f472		       22		      .BYTE.b	%00100010
     64  f473		       29		      .BYTE.b	%00101001
     65  f474
     66  f474		       c0		      .BYTE.b	%11000000
     67  f475		       72		      .BYTE.b	%01110010
     68  f476		       6a		      .BYTE.b	%01101010
     69  f477		       50		      .BYTE.b	%01010000
     70  f478		       22		      .BYTE.b	%00100010
     71  f479		       1b		      .BYTE.b	%00011011
     72  f47a
     73  f47a		       80		      .BYTE.b	%10000000
     74  f47b		       42		      .BYTE.b	%01000010
     75  f47c		       2a		      .BYTE.b	%00101010
     76  f47d		       30		      .BYTE.b	%00110000
     77  f47e		       2a		      .BYTE.b	%00101010
     78  f47f		       29		      .BYTE.b	%00101001
     79  f480
     80  f480		       c0		      .BYTE.b	%11000000
     81  f481		       47		      .BYTE.b	%01000111
     82  f482		       e6		      .BYTE.b	%11100110
     83  f483		       50		      .BYTE.b	%01010000
     84  f484		       14		      .BYTE.b	%00010100
     85  f485		       1b		      .BYTE.b	%00011011
------- FILE title.asm
------- FILE title_frame_bottom.asm LEVEL 3 PASS 2
      0  f486					      include	"title_frame_bottom.asm"
      1  f486				   TitleFrameBottom
      2  f486
      3  f486		       20		      .BYTE.b	%00100000
      4  f487		       00		      .BYTE.b	%00000000
      5  f488		       00		      .BYTE.b	%00000000
      6  f489		       00		      .BYTE.b	%00000000
      7  f48a		       00		      .BYTE.b	%00000000
      8  f48b		       64		      .BYTE.b	%01100100
      9  f48c
     10  f48c		       50		      .BYTE.b	%01010000
     11  f48d		       00		      .BYTE.b	%00000000
     12  f48e		       00		      .BYTE.b	%00000000
     13  f48f		       00		      .BYTE.b	%00000000
     14  f490		       00		      .BYTE.b	%00000000
     15  f491		       98		      .BYTE.b	%10011000
     16  f492
     17  f492		       90		      .BYTE.b	%10010000
     18  f493		       80		      .BYTE.b	%10000000
     19  f494		       00		      .BYTE.b	%00000000
     20  f495		       00		      .BYTE.b	%00000000
     21  f496		       00		      .BYTE.b	%00000000
     22  f497		       28		      .BYTE.b	%00101000
     23  f498
     24  f498		       60		      .BYTE.b	%01100000
     25  f499		       60		      .BYTE.b	%01100000
     26  f49a		       00		      .BYTE.b	%00000000
     27  f49b		       00		      .BYTE.b	%00000000
     28  f49c		       00		      .BYTE.b	%00000000
     29  f49d		       44		      .BYTE.b	%01000100
     30  f49e
     31  f49e		       d0		      .BYTE.b	%11010000
     32  f49f		       1c		      .BYTE.b	%00011100
     33  f4a0		       00		      .BYTE.b	%00000000
     34  f4a1		       00		      .BYTE.b	%00000000
     35  f4a2		       00		      .BYTE.b	%00000000
     36  f4a3		       ab		      .BYTE.b	%10101011
------- FILE title.asm
------- FILE title_spider.asm LEVEL 3 PASS 2
      0  f4a4					      include	"title_spider.asm"
      1  f4a4				   TitleSpider
      2  f4a4
      3  f4a4		       30		      .BYTE.b	%00110000
      4  f4a5		       67		      .BYTE.b	%01100111
      5  f4a6		       4f		      .BYTE.b	%01001111
      6  f4a7		       dd		      .BYTE.b	%11011101
      7  f4a8		       d8		      .BYTE.b	%11011000
      8  f4a9		       df		      .BYTE.b	%11011111
      9  f4aa		       4d		      .BYTE.b	%01001101
     10  f4ab		       6f		      .BYTE.b	%01101111
     11  f4ac		       3b		      .BYTE.b	%00111011
     12  f4ad
     13  f4ad		       37		      .BYTE.b	%00110111
     14  f4ae		       6d		      .BYTE.b	%01101101
     15  f4af		       d8		      .BYTE.b	%11011000
     16  f4b0		       df		      .BYTE.b	%11011111
     17  f4b1		       cd		      .BYTE.b	%11001101
     18  f4b2		       6f		      .BYTE.b	%01101111
     19  f4b3		       3b		      .BYTE.b	%00111011
     20  f4b4		       00		      .BYTE.b	%00000000
     21  f4b5		       00		      .BYTE.b	%00000000
------- FILE title.asm
    430  f4b6
    431  f4b6				   TitleAudio0
    432  f4b6
    433  f4b6		       0f		      .BYTE.b	#15	; B
    434  f4b7		       13		      .BYTE.b	#19	; G
    435  f4b8		       17		      .BYTE.b	#23	; E
    436  f4b9		       13		      .BYTE.b	#19	; G
    437  f4ba		       0e		      .BYTE.b	#14	; C
    438  f4bb		       13		      .BYTE.b	#19
    439  f4bc		       17		      .BYTE.b	#23
    440  f4bd		       13		      .BYTE.b	#19
    441  f4be		       0c		      .BYTE.b	#12	; D
    442  f4bf		       13		      .BYTE.b	#19
    443  f4c0		       17		      .BYTE.b	#23
    444  f4c1		       13		      .BYTE.b	#19
    445  f4c2		       0e		      .BYTE.b	#14	; C
    446  f4c3		       13		      .BYTE.b	#19
    447  f4c4		       17		      .BYTE.b	#23
    448  f4c5		       13		      .BYTE.b	#19
    449  f4c6
    450  f4c6				   TitleTone1
    451  f4c6
    452  f4c6		       0f		      .BYTE.b	#15	; Electronic Rumble
    453  f4c7		       ff		      .BYTE.b	#$FF
    454  f4c8		       01		      .BYTE.b	#1	; Low Pure Tone
    455  f4c9		       01		      .BYTE.b	#1
    456  f4ca		       08		      .BYTE.b	#8	; White Noise
    457  f4cb		       01		      .BYTE.b	#1
    458  f4cc		       01		      .BYTE.b	#1
    459  f4cd		       ff		      .BYTE.b	#$FF
    460  f4ce		       ff		      .BYTE.b	#$FF
    461  f4cf		       0f		      .BYTE.b	#15
    462  f4d0		       ff		      .BYTE.b	#$FF
    463  f4d1		       ff		      .BYTE.b	#$FF
    464  f4d2		       08		      .BYTE.b	#8
    465  f4d3		       ff		      .BYTE.b	#$FF
    466  f4d4		       01		      .BYTE.b	#1
    467  f4d5		       01		      .BYTE.b	#1
    468  f4d6
    469  f4d6				   TitleAudio1
    470  f4d6
    471  f4d6		       1d		      .BYTE.b	#29	; Kick
    472  f4d7		       ff		      .BYTE.b	#$FF
    473  f4d8		       1f		      .BYTE.b	#31	; C
    474  f4d9		       1f		      .BYTE.b	#31
    475  f4da		       07		      .BYTE.b	#7	; Snare
    476  f4db		       1f		      .BYTE.b	#31
    477  f4dc		       1f		      .BYTE.b	#31
    478  f4dd		       ff		      .BYTE.b	#$FF
    479  f4de		       ff		      .BYTE.b	#$FF
    480  f4df		       1d		      .BYTE.b	#29
    481  f4e0		       ff		      .BYTE.b	#$FF
    482  f4e1		       ff		      .BYTE.b	#$FF
    483  f4e2		       07		      .BYTE.b	#7
    484  f4e3		       ff		      .BYTE.b	#$FF
    485  f4e4		       17		      .BYTE.b	#23	; F
    486  f4e5		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4e6					      include	"game.asm"
      1  f4e6							;================
      2  f4e6							; Game
      3  f4e6							;================
      4  f4e6
      5  f4e6							; Constants
      6  f4e6
      7  f4e6		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f4e6		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4e6		       00 09	   GAME_AUDIO_STEP =	9
     10  f4e6		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4e6		       00 06	   GAME_AUDIO_TONE =	6
     12  f4e6
     13  f4e6							; Object Code
     14  f4e6
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f4e6					      include	"objects/level.asm"
      1  f4e6							;======================
      2  f4e6							; Level Logic
      3  f4e6							;======================
      4  f4e6
      5  f4e6							; Constants
      6  f4e6
      7  f4e6		       00 03	   LEVELS     =	3
      8  f4e6
      9  f4e6				   LevelInit
     10  f4e6
     11  f4e6							; Set beginning level by difficulty switches treated as binary
     12  f4e6		       ad 82 02 	      lda	SWCHB
     13  f4e9					      REPEAT	6
     14  f4e9		       4a		      lsr
     13  f4e9					      REPEND
     14  f4ea		       4a		      lsr
     13  f4ea					      REPEND
     14  f4eb		       4a		      lsr
     13  f4eb					      REPEND
     14  f4ec		       4a		      lsr
     13  f4ec					      REPEND
     14  f4ed		       4a		      lsr
     13  f4ed					      REPEND
     14  f4ee		       4a		      lsr
     15  f4ef					      REPEND
     16  f4ef		       29 03		      and	#%00000011
     17  f4f1		       85 9a		      sta	LevelCurrent
     18  f4f3
     19  f4f3		       20 0c f5 	      jsr	LevelLoad
     20  f4f6
     21  f4f6		       60		      rts
     22  f4f7
     23  f4f7				   LevelUpdate
     24  f4f7
     25  f4f7							; Check if score is high enough
     26  f4f7		       a4 9a		      ldy	LevelCurrent
     27  f4f9		       a5 93		      lda	ScoreValue+1
     28  f4fb		       d9 28 f5 	      cmp	LevelDataScore,y
     29  f4fe		       90 0b		      bcc	.level_update_return
     30  f500
     31  f500							; Check if we haven't reached the final level
     32  f500		       a5 9a		      lda	LevelCurrent
     33  f502		       c9 03		      cmp	#LEVELS
     34  f504		       b0 05		      bcs	.level_update_return
     35  f506
     36  f506		       e6 9a		      inc	LevelCurrent
     37  f508		       20 0c f5 	      jsr	LevelLoad
     38  f50b
     39  f50b				   .level_update_return
     40  f50b		       60		      rts
     41  f50c
     42  f50c				   LevelLoad
     43  f50c		       a4 9a		      ldy	LevelCurrent
     44  f50e
     45  f50e							; Background Color
     46  f50e		       b9 2c f5 	      lda	LevelDataBk,y
     47  f511		       85 9c		      sta	WebColor+0
     48  f513
     49  f513							; Web Color
     50  f513		       b9 30 f5 	      lda	LevelDataPf,y
     51  f516		       85 9d		      sta	WebColor+1
     52  f518
     53  f518							; Bug Speed
     54  f518		       b9 34 f5 	      lda	LevelDataBug,y
     55  f51b		       85 b2		      sta	BugSpeed
     56  f51d
     57  f51d							; Swatter Wait Time
     58  f51d		       b9 38 f5 	      lda	LevelDataSwatterWait,y
     59  f520		       85 c3		      sta	SwatterWaitTime
     60  f522
     61  f522							; Swatter Hit Damage
     62  f522		       b9 3c f5 	      lda	LevelDataSwatterDamage,y
     63  f525		       85 c4		      sta	SwatterHitDamage
     64  f527
     65  f527		       60		      rts
     66  f528
     67  f528				   LevelDataScore		; Score needed
     68  f528		       10		      .BYTE.b	#$10
     69  f529		       20		      .BYTE.b	#$20
     70  f52a		       40		      .BYTE.b	#$40
     71  f52b		       ff		      .BYTE.b	#$FF
     72  f52c
     73  f52c				   LevelDataBk		; Background Color
     74  f52c		       00		      .BYTE.b	#$00
     75  f52d		       60		      .BYTE.b	#$60
     76  f52e		       50		      .BYTE.b	#$50
     77  f52f		       30		      .BYTE.b	#$30
     78  f530
     79  f530				   LevelDataPf		; Web Color
     80  f530		       06		      .BYTE.b	#$06
     81  f531		       64		      .BYTE.b	#$64
     82  f532		       54		      .BYTE.b	#$54
     83  f533		       34		      .BYTE.b	#$34
     84  f534
     85  f534				   LevelDataBug 		; Bug Speed
     86  f534		       02		      .BYTE.b	#2
     87  f535		       03		      .BYTE.b	#3
     88  f536		       04		      .BYTE.b	#4
     89  f537		       05		      .BYTE.b	#5
     90  f538
     91  f538				   LevelDataSwatterWait 		; Swatter Wait Time Min (adds random 0-128)
     92  f538		       b4		      .BYTE.b	#180
     93  f539		       96		      .BYTE.b	#150
     94  f53a		       78		      .BYTE.b	#120
     95  f53b		       3c		      .BYTE.b	#60
     96  f53c
     97  f53c				   LevelDataSwatterDamage		; Swatter Damage
     98  f53c		       10		      .BYTE.b	#$10
     99  f53d		       18		      .BYTE.b	#$18
    100  f53e		       20		      .BYTE.b	#$20
    101  f53f		       40		      .BYTE.b	#$40
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f540					      include	"objects/score.asm"
      1  f540							;======================
      2  f540							; Score (playfield)
      3  f540							;======================
      4  f540
      5  f540							; Constants
      6  f540
      7  f540		       00 00	   SCORE_BG_COLOR =	#$00
      8  f540		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f540		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f540
     11  f540		       00 05	   SCORE_CHAR_SIZE =	5
     12  f540		       00 02	   SCORE_LINE_SIZE =	2
     13  f540		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f540
     15  f540							; Initialization
     16  f540
     17  f540				   ScoreInit
     18  f540
     19  f540							; Health Score
     20  f540		       a9 ff		      lda	#$FF
     21  f542		       85 92		      sta	ScoreValue+0
     22  f544
     23  f544							; Game Score
     24  f544		       a9 00		      lda	#0
     25  f546		       85 93		      sta	ScoreValue+1
     26  f548
     27  f548		       60		      rts
     28  f549
     29  f549							; Frame Update
     30  f549
     31  f549				   ScoreUpdate
     32  f549
     33  f549		       a2 01		      ldx	#1
     34  f54b				   .score_update_loop
     35  f54b
     36  f54b							; Ones Digit
     37  f54b		       b5 92		      lda	ScoreValue,x
     38  f54d		       29 0f		      and	#$0f
     39  f54f		       85 83		      sta	Temp
     40  f551		       0a		      asl
     41  f552		       0a		      asl
     42  f553		       65 83		      adc	Temp
     43  f555		       95 94		      sta	ScoreDigitOnes,x
     44  f557
     45  f557							; Tens Digit
     46  f557		       b5 92		      lda	ScoreValue,x
     47  f559		       29 f0		      and	#$f0
     48  f55b		       4a		      lsr
     49  f55c		       4a		      lsr
     50  f55d		       85 83		      sta	Temp
     51  f55f		       4a		      lsr
     52  f560		       4a		      lsr
     53  f561		       65 83		      adc	Temp
     54  f563		       95 96		      sta	ScoreDigitTens,x
     55  f565
     56  f565		       ca		      dex
     57  f566		       10 e3		      bpl	.score_update_loop
     58  f568
     59  f568				   .score_update_end
     60  f568		       60		      rts
     61  f569
     62  f569							; Draw loop (uses SCORE_LINES scanlines)
     63  f569
     64  f569				   ScoreDraw
     65  f569
     66  f569							; Load Colors
     67  f569		       a9 00		      lda	#SCORE_BG_COLOR
     68  f56b		       85 09		      sta	COLUBK
     69  f56d		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f56f		       85 08		      sta	COLUPF
     71  f571		       85 06		      sta	COLUP0
     72  f573		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f575		       85 07		      sta	COLUP1
     74  f577
     75  f577							; Set Non-Mirror and p0/p1 color
     76  f577		       a5 80		      lda	CtrlPf
     77  f579		       29 fc		      and	#%11111100
     78  f57b		       09 02		      ora	#%00000010
     79  f57d		       85 80		      sta	CtrlPf
     80  f57f		       85 0a		      sta	CTRLPF
     81  f581
     82  f581							;sta WSYNC
     83  f581
     84  f581		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f583
     86  f583				   .score_draw_line
     87  f583
     88  f583							; 1st Value
     89  f583		       a4 96		      ldy	ScoreDigitTens
     90  f585		       b9 d9 f5 	      lda	ScoreDigits,y
     91  f588		       29 f0		      and	#$f0
     92  f58a		       85 98		      sta	ScoreGfx
     93  f58c		       a4 94		      ldy	ScoreDigitOnes
     94  f58e		       b9 d9 f5 	      lda	ScoreDigits,y
     95  f591		       29 0f		      and	#$0f
     96  f593		       05 98		      ora	ScoreGfx
     97  f595		       85 98		      sta	ScoreGfx
     98  f597
     99  f597		       85 02		      sta	WSYNC
    100  f599		       85 0e		      sta	PF1
    101  f59b
    102  f59b							; 2nd Value
    103  f59b		       a4 97		      ldy	ScoreDigitTens+1
    104  f59d		       b9 d9 f5 	      lda	ScoreDigits,y
    105  f5a0		       29 f0		      and	#$f0
    106  f5a2		       85 99		      sta	ScoreGfx+1
    107  f5a4		       a4 95		      ldy	ScoreDigitOnes+1
    108  f5a6		       b9 d9 f5 	      lda	ScoreDigits,y
    109  f5a9		       29 0f		      and	#$0f
    110  f5ab		       05 99		      ora	ScoreGfx+1
    111  f5ad		       85 99		      sta	ScoreGfx+1
    112  f5af
      0  f5af					      sleep	12
      1  f5af				   .CYCLES    SET	12
      2  f5af
      3  f5af				  -	      IF	.CYCLES < 2
      4  f5af				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5af				  -	      ERR
      6  f5af					      ENDIF
      7  f5af
      8  f5af				  -	      IF	.CYCLES & 1
      9  f5af				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5af				  -	      nop	0
     11  f5af				  -	      ELSE
     12  f5af				  -	      bit	VSYNC
     13  f5af				  -	      ENDIF
     14  f5af				  -.CYCLES    SET	.CYCLES - 3
     15  f5af					      ENDIF
     16  f5af
     17  f5af					      REPEAT	.CYCLES / 2
     18  f5af		       ea		      nop
     17  f5af					      REPEND
     18  f5b0		       ea		      nop
     17  f5b0					      REPEND
     18  f5b1		       ea		      nop
     17  f5b1					      REPEND
     18  f5b2		       ea		      nop
     17  f5b2					      REPEND
     18  f5b3		       ea		      nop
     17  f5b3					      REPEND
     18  f5b4		       ea		      nop
     19  f5b5					      REPEND
    114  f5b5		       85 0e		      sta	PF1
    115  f5b7
    116  f5b7		       a4 98		      ldy	ScoreGfx
    117  f5b9		       85 02		      sta	WSYNC
    118  f5bb
    119  f5bb		       84 0e		      sty	PF1
    120  f5bd
    121  f5bd		       e6 94		      inc	ScoreDigitOnes
    122  f5bf		       e6 95		      inc	ScoreDigitOnes+1
    123  f5c1		       e6 96		      inc	ScoreDigitTens
    124  f5c3		       e6 97		      inc	ScoreDigitTens+1
    125  f5c5
      0  f5c5					      sleep	12
      1  f5c5				   .CYCLES    SET	12
      2  f5c5
      3  f5c5				  -	      IF	.CYCLES < 2
      4  f5c5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5c5				  -	      ERR
      6  f5c5					      ENDIF
      7  f5c5
      8  f5c5				  -	      IF	.CYCLES & 1
      9  f5c5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5c5				  -	      nop	0
     11  f5c5				  -	      ELSE
     12  f5c5				  -	      bit	VSYNC
     13  f5c5				  -	      ENDIF
     14  f5c5				  -.CYCLES    SET	.CYCLES - 3
     15  f5c5					      ENDIF
     16  f5c5
     17  f5c5					      REPEAT	.CYCLES / 2
     18  f5c5		       ea		      nop
     17  f5c5					      REPEND
     18  f5c6		       ea		      nop
     17  f5c6					      REPEND
     18  f5c7		       ea		      nop
     17  f5c7					      REPEND
     18  f5c8		       ea		      nop
     17  f5c8					      REPEND
     18  f5c9		       ea		      nop
     17  f5c9					      REPEND
     18  f5ca		       ea		      nop
     19  f5cb					      REPEND
    127  f5cb		       ca		      dex
    128  f5cc		       85 0e		      sta	PF1
    129  f5ce
    130  f5ce		       d0 b3		      bne	.score_draw_line
    131  f5d0		       85 02		      sta	WSYNC
    132  f5d2
    133  f5d2							; Clear
    134  f5d2		       a9 00		      lda	#0
    135  f5d4		       85 0e		      sta	PF1
    136  f5d6
    137  f5d6		       85 02		      sta	WSYNC
    138  f5d8
    139  f5d8		       60		      rts
    140  f5d9
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f5d9					      include	"objects/score_digits.asm"
      1  f5d9				   ScoreDigits
      2  f5d9
      3  f5d9		       77		      .BYTE.b	%01110111
      4  f5da		       55		      .BYTE.b	%01010101
      5  f5db		       55		      .BYTE.b	%01010101
      6  f5dc		       55		      .BYTE.b	%01010101
      7  f5dd		       77		      .BYTE.b	%01110111
      8  f5de
      9  f5de		       11		      .BYTE.b	%00010001
     10  f5df		       11		      .BYTE.b	%00010001
     11  f5e0		       11		      .BYTE.b	%00010001
     12  f5e1		       11		      .BYTE.b	%00010001
     13  f5e2		       11		      .BYTE.b	%00010001
     14  f5e3
     15  f5e3		       77		      .BYTE.b	%01110111
     16  f5e4		       11		      .BYTE.b	%00010001
     17  f5e5		       77		      .BYTE.b	%01110111
     18  f5e6		       44		      .BYTE.b	%01000100
     19  f5e7		       77		      .BYTE.b	%01110111
     20  f5e8
     21  f5e8		       77		      .BYTE.b	%01110111
     22  f5e9		       11		      .BYTE.b	%00010001
     23  f5ea		       33		      .BYTE.b	%00110011
     24  f5eb		       11		      .BYTE.b	%00010001
     25  f5ec		       77		      .BYTE.b	%01110111
     26  f5ed
     27  f5ed		       55		      .BYTE.b	%01010101
     28  f5ee		       55		      .BYTE.b	%01010101
     29  f5ef		       77		      .BYTE.b	%01110111
     30  f5f0		       11		      .BYTE.b	%00010001
     31  f5f1		       11		      .BYTE.b	%00010001
     32  f5f2
     33  f5f2		       77		      .BYTE.b	%01110111
     34  f5f3		       44		      .BYTE.b	%01000100
     35  f5f4		       77		      .BYTE.b	%01110111
     36  f5f5		       11		      .BYTE.b	%00010001
     37  f5f6		       77		      .BYTE.b	%01110111
     38  f5f7
     39  f5f7		       77		      .BYTE.b	%01110111
     40  f5f8		       44		      .BYTE.b	%01000100
     41  f5f9		       77		      .BYTE.b	%01110111
     42  f5fa		       55		      .BYTE.b	%01010101
     43  f5fb		       77		      .BYTE.b	%01110111
     44  f5fc
     45  f5fc		       77		      .BYTE.b	%01110111
     46  f5fd		       11		      .BYTE.b	%00010001
     47  f5fe		       22		      .BYTE.b	%00100010
     48  f5ff		       22		      .BYTE.b	%00100010
     49  f600		       22		      .BYTE.b	%00100010
     50  f601
     51  f601		       77		      .BYTE.b	%01110111
     52  f602		       55		      .BYTE.b	%01010101
     53  f603		       77		      .BYTE.b	%01110111
     54  f604		       55		      .BYTE.b	%01010101
     55  f605		       77		      .BYTE.b	%01110111
     56  f606
     57  f606		       77		      .BYTE.b	%01110111
     58  f607		       55		      .BYTE.b	%01010101
     59  f608		       77		      .BYTE.b	%01110111
     60  f609		       11		      .BYTE.b	%00010001
     61  f60a		       11		      .BYTE.b	%00010001
     62  f60b
     63  f60b		       77		      .BYTE.b	%01110111
     64  f60c		       55		      .BYTE.b	%01010101
     65  f60d		       77		      .BYTE.b	%01110111
     66  f60e		       55		      .BYTE.b	%01010101
     67  f60f		       55		      .BYTE.b	%01010101
     68  f610
     69  f610		       66		      .BYTE.b	%01100110
     70  f611		       55		      .BYTE.b	%01010101
     71  f612		       66		      .BYTE.b	%01100110
     72  f613		       55		      .BYTE.b	%01010101
     73  f614		       66		      .BYTE.b	%01100110
     74  f615
     75  f615		       77		      .BYTE.b	%01110111
     76  f616		       44		      .BYTE.b	%01000100
     77  f617		       44		      .BYTE.b	%01000100
     78  f618		       44		      .BYTE.b	%01000100
     79  f619		       77		      .BYTE.b	%01110111
     80  f61a
     81  f61a		       66		      .BYTE.b	%01100110
     82  f61b		       55		      .BYTE.b	%01010101
     83  f61c		       55		      .BYTE.b	%01010101
     84  f61d		       55		      .BYTE.b	%01010101
     85  f61e		       66		      .BYTE.b	%01100110
     86  f61f
     87  f61f		       77		      .BYTE.b	%01110111
     88  f620		       44		      .BYTE.b	%01000100
     89  f621		       66		      .BYTE.b	%01100110
     90  f622		       44		      .BYTE.b	%01000100
     91  f623		       77		      .BYTE.b	%01110111
     92  f624
     93  f624		       77		      .BYTE.b	%01110111
     94  f625		       44		      .BYTE.b	%01000100
     95  f626		       66		      .BYTE.b	%01100110
     96  f627		       44		      .BYTE.b	%01000100
     97  f628		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f629					      include	"objects/web.asm"
      1  f629							;================
      2  f629							; Web (Playfield)
      3  f629							;================
      4  f629
      5  f629							; Constants
      6  f629
      7  f629		       00 00	   WEB_BG_COLOR =	#$00
      8  f629		       00 06	   WEB_FG_COLOR =	#$06
      9  f629
     10  f629		       00 1e	   WEB_SIZE   =	30
     11  f629		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f629		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f629
     14  f629							; Scanline Draw
     15  f629
     16  f629				   WebDrawStart
     17  f629
     18  f629							; Load Colors
     19  f629		       a5 9c		      lda	WebColor+0
     20  f62b		       85 09		      sta	COLUBK
     21  f62d		       a5 9d		      lda	WebColor+1
     22  f62f		       85 08		      sta	COLUPF
     23  f631
     24  f631							; Mirror playfield and use standard playfield color
     25  f631		       a5 80		      lda	CtrlPf
     26  f633		       29 fc		      and	#%11111100
     27  f635		       09 01		      ora	#%00000001
     28  f637		       85 80		      sta	CtrlPf
     29  f639		       85 0a		      sta	CTRLPF
     30  f63b
     31  f63b							; Initialize image index
     32  f63b		       a9 00		      lda	#0
     33  f63d		       85 9b		      sta	WebIndex
     34  f63f
     35  f63f		       60		      rts
     36  f640
     37  f640				   WebClean
     38  f640
     39  f640							; Clear out playfield
     40  f640		       a9 00		      lda	#0
     41  f642		       85 0d		      sta	PF0
     42  f644		       85 0e		      sta	PF1
     43  f646		       85 0f		      sta	PF2
     44  f648
     45  f648							; Clear colors
     46  f648		       85 09		      sta	COLUBK
     47  f64a		       85 08		      sta	COLUPF
     48  f64c
     49  f64c		       60		      rts
     50  f64d
     51  f64d							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f64d					      include	"objects/web_image.asm"
      1  f64d				   WebImagePF0
      2  f64d		       00		      .BYTE.b	%00000000
      3  f64e		       00		      .BYTE.b	%00000000
      4  f64f		       00		      .BYTE.b	%00000000
      5  f650		       00		      .BYTE.b	%00000000
      6  f651		       00		      .BYTE.b	%00000000
      7  f652		       00		      .BYTE.b	%00000000
      8  f653		       00		      .BYTE.b	%00000000
      9  f654		       00		      .BYTE.b	%00000000
     10  f655		       00		      .BYTE.b	%00000000
     11  f656		       30		      .BYTE.b	%00110000
     12  f657		       e0		      .BYTE.b	%11100000
     13  f658		       20		      .BYTE.b	%00100000
     14  f659		       40		      .BYTE.b	%01000000
     15  f65a		       40		      .BYTE.b	%01000000
     16  f65b		       80		      .BYTE.b	%10000000
     17  f65c		       80		      .BYTE.b	%10000000
     18  f65d		       40		      .BYTE.b	%01000000
     19  f65e		       40		      .BYTE.b	%01000000
     20  f65f		       20		      .BYTE.b	%00100000
     21  f660		       e0		      .BYTE.b	%11100000
     22  f661		       30		      .BYTE.b	%00110000
     23  f662		       00		      .BYTE.b	%00000000
     24  f663		       00		      .BYTE.b	%00000000
     25  f664		       00		      .BYTE.b	%00000000
     26  f665		       00		      .BYTE.b	%00000000
     27  f666		       00		      .BYTE.b	%00000000
     28  f667		       00		      .BYTE.b	%00000000
     29  f668		       00		      .BYTE.b	%00000000
     30  f669		       00		      .BYTE.b	%00000000
     31  f66a		       00		      .BYTE.b	%00000000
     32  f66b
     33  f66b				   WebImagePF1
     34  f66b		       08		      .BYTE.b	%00001000
     35  f66c		       06		      .BYTE.b	%00000110
     36  f66d		       01		      .BYTE.b	%00000001
     37  f66e		       00		      .BYTE.b	%00000000
     38  f66f		       00		      .BYTE.b	%00000000
     39  f670		       01		      .BYTE.b	%00000001
     40  f671		       01		      .BYTE.b	%00000001
     41  f672		       02		      .BYTE.b	%00000010
     42  f673		       0c		      .BYTE.b	%00001100
     43  f674		       30		      .BYTE.b	%00110000
     44  f675		       c0		      .BYTE.b	%11000000
     45  f676		       38		      .BYTE.b	%00111000
     46  f677		       07		      .BYTE.b	%00000111
     47  f678		       00		      .BYTE.b	%00000000
     48  f679		       00		      .BYTE.b	%00000000
     49  f67a		       00		      .BYTE.b	%00000000
     50  f67b		       00		      .BYTE.b	%00000000
     51  f67c		       07		      .BYTE.b	%00000111
     52  f67d		       38		      .BYTE.b	%00111000
     53  f67e		       c0		      .BYTE.b	%11000000
     54  f67f		       30		      .BYTE.b	%00110000
     55  f680		       0c		      .BYTE.b	%00001100
     56  f681		       02		      .BYTE.b	%00000010
     57  f682		       01		      .BYTE.b	%00000001
     58  f683		       01		      .BYTE.b	%00000001
     59  f684		       00		      .BYTE.b	%00000000
     60  f685		       00		      .BYTE.b	%00000000
     61  f686		       01		      .BYTE.b	%00000001
     62  f687		       06		      .BYTE.b	%00000110
     63  f688		       08		      .BYTE.b	%00001000
     64  f689
     65  f689				   WebImagePF2
     66  f689		       20		      .BYTE.b	%00100000
     67  f68a		       18		      .BYTE.b	%00011000
     68  f68b		       04		      .BYTE.b	%00000100
     69  f68c		       03		      .BYTE.b	%00000011
     70  f68d		       3f		      .BYTE.b	%00111111
     71  f68e		       c2		      .BYTE.b	%11000010
     72  f68f		       04		      .BYTE.b	%00000100
     73  f690		       08		      .BYTE.b	%00001000
     74  f691		       08		      .BYTE.b	%00001000
     75  f692		       10		      .BYTE.b	%00010000
     76  f693		       20		      .BYTE.b	%00100000
     77  f694		       20		      .BYTE.b	%00100000
     78  f695		       41		      .BYTE.b	%01000001
     79  f696		       8e		      .BYTE.b	%10001110
     80  f697		       f0		      .BYTE.b	%11110000
     81  f698		       f0		      .BYTE.b	%11110000
     82  f699		       8e		      .BYTE.b	%10001110
     83  f69a		       41		      .BYTE.b	%01000001
     84  f69b		       20		      .BYTE.b	%00100000
     85  f69c		       20		      .BYTE.b	%00100000
     86  f69d		       10		      .BYTE.b	%00010000
     87  f69e		       08		      .BYTE.b	%00001000
     88  f69f		       08		      .BYTE.b	%00001000
     89  f6a0		       04		      .BYTE.b	%00000100
     90  f6a1		       c2		      .BYTE.b	%11000010
     91  f6a2		       3f		      .BYTE.b	%00111111
     92  f6a3		       03		      .BYTE.b	%00000011
     93  f6a4		       04		      .BYTE.b	%00000100
     94  f6a5		       18		      .BYTE.b	%00011000
     95  f6a6		       20		      .BYTE.b	%00100000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f6a7					      include	"objects/spider.asm"
      1  f6a7							;=================
      2  f6a7							; Spider (player0)
      3  f6a7							;=================
      4  f6a7
      5  f6a7							; Constants
      6  f6a7
      7  f6a7		       00 56	   SPIDER_COLOR =	#$56
      8  f6a7		       00 10	   SPIDER_SPRITE_SIZE =	16
      9  f6a7		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     10  f6a7		       00 02	   SPIDER_VEL_X =	2
     11  f6a7		       00 02	   SPIDER_VEL_Y =	2
     12  f6a7
     13  f6a7		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f6a7
     15  f6a7							; Initialization
     16  f6a7
     17  f6a7				   SpiderInit
     18  f6a7
     19  f6a7							; Initialize Position in center of screen
     20  f6a7		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f6a9		       85 a0		      sta	SpiderPos
     22  f6ab		       a9 48		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f6ad		       85 a1		      sta	SpiderPos+1
     24  f6af
     25  f6af							; Setup Sprite
      0  f6af					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f6af				   .POINTER   SET	SpiderPtr
      2  f6af				   .ADDRESS   SET	SpiderSprite
      3  f6af
      4  f6af		       a9 f8		      LDA	#<.ADDRESS
      5  f6b1		       85 9e		      STA	.POINTER
      6  f6b3		       a9 f7		      LDA	#>.ADDRESS
      7  f6b5		       85 9f		      STA	.POINTER+1
      8  f6b7
     27  f6b7
     28  f6b7							;    lda #SPIDER_COLOR
     29  f6b7							;    sta SpiderColor
     30  f6b7
     31  f6b7		       60		      rts
     32  f6b8
     33  f6b8							; Frame Update
     34  f6b8
     35  f6b8				   SpiderUpdate
     36  f6b8		       20 bf f6 	      jsr	SpiderControl
     37  f6bb		       20 a5 f7 	      jsr	SpiderCollision
     38  f6be		       60		      rts
     39  f6bf
     40  f6bf				   SpiderControl
     41  f6bf
     42  f6bf							; Control Position
     43  f6bf		       a6 a0		      ldx	SpiderPos
     44  f6c1		       a4 a1		      ldy	SpiderPos+1
     45  f6c3		       ad 80 02 	      lda	SWCHA
     46  f6c6
     47  f6c6				   .spider_control_check_right
     48  f6c6		       30 02		      bmi	.spider_control_check_left
     49  f6c8
     50  f6c8					      REPEAT	#SPIDER_VEL_X
     51  f6c8		       e8		      inx
     50  f6c8					      REPEND
     51  f6c9		       e8		      inx
     52  f6ca					      REPEND
     53  f6ca
     54  f6ca				   .spider_control_check_left
     55  f6ca		       2a		      rol
     56  f6cb		       30 02		      bmi	.spider_control_check_down
     57  f6cd
     58  f6cd					      REPEAT	#SPIDER_VEL_X
     59  f6cd		       ca		      dex
     58  f6cd					      REPEND
     59  f6ce		       ca		      dex
     60  f6cf					      REPEND
     61  f6cf
     62  f6cf				   .spider_control_check_down
     63  f6cf		       2a		      rol
     64  f6d0		       30 02		      bmi	.spider_control_check_up
     65  f6d2
     66  f6d2					      REPEAT	#SPIDER_VEL_Y
     67  f6d2		       88		      dey
     66  f6d2					      REPEND
     67  f6d3		       88		      dey
     68  f6d4					      REPEND
     69  f6d4
     70  f6d4				   .spider_control_check_up
     71  f6d4		       2a		      rol
     72  f6d5		       30 02		      bmi	.spider_control_sprite
     73  f6d7
     74  f6d7					      REPEAT	#SPIDER_VEL_Y
     75  f6d7		       c8		      iny
     74  f6d7					      REPEND
     75  f6d8		       c8		      iny
     76  f6d9					      REPEND
     77  f6d9
     78  f6d9				   .spider_control_sprite
     79  f6d9							; Control Sprite
     80  f6d9		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f6db
     82  f6db				   .spider_control_sprite_x
     83  f6db		       e4 a0		      cpx	SpiderPos
     84  f6dd		       90 04		      bcc	.spider_control_sprite_left
     85  f6df		       f0 09		      beq	.spider_control_sprite_y
     86  f6e1		       b0 05		      bcs	.spider_control_sprite_right
     87  f6e3
     88  f6e3				   .spider_control_sprite_left
     89  f6e3		       09 80		      ora	#%10000000
     90  f6e5		       4c ea f6 	      jmp	.spider_control_sprite_y
     91  f6e8
     92  f6e8				   .spider_control_sprite_right
     93  f6e8		       09 40		      ora	#%01000000
     94  f6ea
     95  f6ea				   .spider_control_sprite_y
     96  f6ea		       c4 a1		      cpy	SpiderPos+1
     97  f6ec		       90 04		      bcc	.spider_control_sprite_down
     98  f6ee		       f0 09		      beq	.spider_control_sprite_store
     99  f6f0		       b0 05		      bcs	.spider_control_sprite_up
    100  f6f2
    101  f6f2				   .spider_control_sprite_down
    102  f6f2		       09 10		      ora	#%00010000
    103  f6f4		       4c f9 f6 	      jmp	.spider_control_sprite_store
    104  f6f7
    105  f6f7				   .spider_control_sprite_up
    106  f6f7		       09 20		      ora	#%00100000
    107  f6f9
    108  f6f9				   .spider_control_sprite_store
    109  f6f9		       c9 00		      cmp	#%00000000
    110  f6fb		       f0 02		      beq	.spider_control_boundary
    111  f6fd		       85 a2		      sta	SpiderCtrl
    112  f6ff
    113  f6ff				   .spider_control_boundary
    114  f6ff							; Check Playfield Boundaries
    115  f6ff
    116  f6ff				   .spider_control_boundary_left
    117  f6ff		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f701		       b0 05		      bcs	.spider_control_boundary_right
    119  f703		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f705		       4c 0e f7 	      jmp	.spider_control_boundary_top
    121  f708
    122  f708				   .spider_control_boundary_right
    123  f708		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    124  f70a		       90 02		      bcc	.spider_control_boundary_top
    125  f70c		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    126  f70e
    127  f70e				   .spider_control_boundary_top
    128  f70e		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    129  f710		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f712		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    131  f714		       4c 1d f7 	      jmp	.spider_control_store
    132  f717
    133  f717				   .spider_control_boundary_bottom
    134  f717		       c0 90		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    135  f719		       90 02		      bcc	.spider_control_store
    136  f71b		       a0 90		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    137  f71d
    138  f71d				   .spider_control_store
    139  f71d							; Store new position
    140  f71d		       86 a0		      stx	SpiderPos
    141  f71f		       84 a1		      sty	SpiderPos+1
    142  f721
    143  f721							; TODO: Optimize this somehow?
    144  f721				   .spider_control_sprite_assign
    145  f721							; Skip if no change
    146  f721		       c9 00		      cmp	#%00000000
    147  f723		       f0 7f		      beq	.spider_control_return
    148  f725
    149  f725		       a2 00		      ldx	#%00000000	; For reflection
    150  f727
    151  f727				   .spider_control_sprite_assign_left
    152  f727		       c9 80		      cmp	#%10000000
    153  f729		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f72b					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f72b				   .POINTER   SET	SpiderPtr
      2  f72b				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f72b
      4  f72b		       a9 18		      LDA	#<.ADDRESS
      5  f72d		       85 9e		      STA	.POINTER
      6  f72f		       a9 f8		      LDA	#>.ADDRESS
      7  f731		       85 9f		      STA	.POINTER+1
      8  f733
    155  f733		       a2 08		      ldx	#%00001000
    156  f735		       4c a2 f7 	      jmp	.spider_control_reflect
    157  f738
    158  f738				   .spider_control_sprite_assign_right
    159  f738		       c9 40		      cmp	#%01000000
    160  f73a		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f73c					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f73c				   .POINTER   SET	SpiderPtr
      2  f73c				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f73c
      4  f73c		       a9 18		      LDA	#<.ADDRESS
      5  f73e		       85 9e		      STA	.POINTER
      6  f740		       a9 f8		      LDA	#>.ADDRESS
      7  f742		       85 9f		      STA	.POINTER+1
      8  f744
    162  f744		       4c a2 f7 	      jmp	.spider_control_reflect
    163  f747
    164  f747				   .spider_control_sprite_assign_top
    165  f747		       c9 20		      cmp	#%00100000
    166  f749		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f74b					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f74b				   .POINTER   SET	SpiderPtr
      2  f74b				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f74b
      4  f74b		       a9 f8		      LDA	#<.ADDRESS
      5  f74d		       85 9e		      STA	.POINTER
      6  f74f		       a9 f7		      LDA	#>.ADDRESS
      7  f751		       85 9f		      STA	.POINTER+1
      8  f753
    168  f753		       4c a2 f7 	      jmp	.spider_control_reflect
    169  f756
    170  f756				   .spider_control_sprite_assign_bottom
    171  f756		       c9 10		      cmp	#%00010000
    172  f758		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f75a					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f75a				   .POINTER   SET	SpiderPtr
      2  f75a				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f75a
      4  f75a		       a9 38		      LDA	#<.ADDRESS
      5  f75c		       85 9e		      STA	.POINTER
      6  f75e		       a9 f8		      LDA	#>.ADDRESS
      7  f760		       85 9f		      STA	.POINTER+1
      8  f762
    174  f762		       4c a2 f7 	      jmp	.spider_control_reflect
    175  f765
    176  f765				   .spider_control_sprite_assign_top_right
    177  f765		       c9 60		      cmp	#%01100000
    178  f767		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f769					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f769				   .POINTER   SET	SpiderPtr
      2  f769				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f769
      4  f769		       a9 08		      LDA	#<.ADDRESS
      5  f76b		       85 9e		      STA	.POINTER
      6  f76d		       a9 f8		      LDA	#>.ADDRESS
      7  f76f		       85 9f		      STA	.POINTER+1
      8  f771
    180  f771		       4c a2 f7 	      jmp	.spider_control_reflect
    181  f774
    182  f774				   .spider_control_sprite_assign_bottom_right
    183  f774		       c9 50		      cmp	#%01010000
    184  f776		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f778					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f778				   .POINTER   SET	SpiderPtr
      2  f778				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f778
      4  f778		       a9 28		      LDA	#<.ADDRESS
      5  f77a		       85 9e		      STA	.POINTER
      6  f77c		       a9 f8		      LDA	#>.ADDRESS
      7  f77e		       85 9f		      STA	.POINTER+1
      8  f780
    186  f780		       4c a2 f7 	      jmp	.spider_control_reflect
    187  f783
    188  f783				   .spider_control_sprite_assign_bottom_left
    189  f783		       c9 90		      cmp	#%10010000
    190  f785		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f787					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f787				   .POINTER   SET	SpiderPtr
      2  f787				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f787
      4  f787		       a9 28		      LDA	#<.ADDRESS
      5  f789		       85 9e		      STA	.POINTER
      6  f78b		       a9 f8		      LDA	#>.ADDRESS
      7  f78d		       85 9f		      STA	.POINTER+1
      8  f78f
    192  f78f		       a2 08		      ldx	#%00001000
    193  f791		       4c a2 f7 	      jmp	.spider_control_reflect
    194  f794
    195  f794				   .spider_control_sprite_assign_top_left
    196  f794		       c9 a0		      cmp	#%10100000
    197  f796		       d0 0a		      bne	.spider_control_reflect
      0  f798					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f798				   .POINTER   SET	SpiderPtr
      2  f798				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f798
      4  f798		       a9 08		      LDA	#<.ADDRESS
      5  f79a		       85 9e		      STA	.POINTER
      6  f79c		       a9 f8		      LDA	#>.ADDRESS
      7  f79e		       85 9f		      STA	.POINTER+1
      8  f7a0
    199  f7a0		       a2 08		      ldx	#%00001000
    200  f7a2
    201  f7a2				   .spider_control_reflect
    202  f7a2		       86 0b		      stx	REFP0
    203  f7a4
    204  f7a4				   .spider_control_return
    205  f7a4		       60		      rts
    206  f7a5
    207  f7a5				   SpiderCollision
    208  f7a5		       a9 56		      lda	#SPIDER_COLOR
    209  f7a7
    210  f7a7				   .spider_collision_m0
    211  f7a7							; Check stun status
    212  f7a7		       a6 b3		      ldx	BugStunned
    213  f7a9		       e0 00		      cpx	#0
    214  f7ab		       d0 04		      bne	.spider_collision_m1
    215  f7ad
    216  f7ad							; Collision for M0 (V set)
    217  f7ad		       24 00		      bit	CXM0P
    218  f7af		       70 0d		      bvs	.spider_collision_active
    219  f7b1
    220  f7b1				   .spider_collision_m1
    221  f7b1							; Check stun status
    222  f7b1		       a6 b4		      ldx	BugStunned+1
    223  f7b3		       e0 00		      cpx	#0
    224  f7b5		       d0 09		      bne	.spider_collision_return
    225  f7b7
    226  f7b7							; Collision for M1 (N set)
    227  f7b7		       24 01		      bit	CXM1P
    228  f7b9		       30 03		      bmi	.spider_collision_active
    229  f7bb
    230  f7bb		       4c c0 f7 	      jmp	.spider_collision_return
    231  f7be
    232  f7be				   .spider_collision_active
    233  f7be		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f7c0
    235  f7c0				   .spider_collision_return
    236  f7c0		       85 a3		      sta	SpiderColor
    237  f7c2		       60		      rts
    238  f7c3
    239  f7c3				   SpiderPosition
    240  f7c3
    241  f7c3							; Set Position
    242  f7c3		       a2 00		      ldx	#0	; Object (player0)
    243  f7c5		       a5 a0		      lda	SpiderPos	; X Position
    244  f7c7		       20 00 f0 	      jsr	PosObject
    245  f7ca
    246  f7ca		       60		      rts
    247  f7cb
    248  f7cb							; Scanline Draw
    249  f7cb
    250  f7cb				   SpiderDrawStart
    251  f7cb
    252  f7cb							; Set player 0 to be quad size
    253  f7cb		       a5 81		      lda	NuSiz0
    254  f7cd		       29 f8		      and	#%11111000
    255  f7cf		       09 05		      ora	#%00000101
    256  f7d1		       85 81		      sta	NuSiz0
    257  f7d3		       85 04		      sta	NUSIZ0
    258  f7d5
    259  f7d5							; Set sprite color
    260  f7d5		       a5 a3		      lda	SpiderColor
    261  f7d7		       85 06		      sta	COLUP0
    262  f7d9
    263  f7d9							; Determine if we need to use vertical delay (odd line)
    264  f7d9		       a5 a1		      lda	SpiderPos+1	; Y Position
    265  f7db		       4a		      lsr
    266  f7dc		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f7de
    268  f7de		       a0 01		      ldy	#1
    269  f7e0		       4c e5 f7 	      jmp	.spider_draw_start_set_delay
    270  f7e3
    271  f7e3				   .spider_draw_start_nodelay
    272  f7e3		       a0 00		      ldy	#0
    273  f7e5
    274  f7e5				   .spider_draw_start_set_delay
    275  f7e5		       84 25		      sty	VDELP0
    276  f7e7
    277  f7e7				   .spider_draw_start_pos
    278  f7e7							; Calculate starting position
    279  f7e7		       18		      clc
    280  f7e8		       69 10		      adc	#SPIDER_SIZE
    281  f7ea		       85 a5		      sta	SpiderDrawPos
    282  f7ec
    283  f7ec							; Initialize sprite index and line buffer
    284  f7ec		       a9 00		      lda	#0
    285  f7ee		       85 a4		      sta	SpiderIndex
    286  f7f0		       85 a6		      sta	SpiderLine
    287  f7f2
    288  f7f2		       60		      rts
    289  f7f3
    290  f7f3				   SpiderClean
    291  f7f3
    292  f7f3							; Clear out Player0 sprite
    293  f7f3		       a9 00		      lda	#0
    294  f7f5		       85 1b		      sta	GRP0
    295  f7f7
    296  f7f7		       60		      rts
    297  f7f8
    298  f7f8							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f7f8					      include	"objects/spider_sprite.asm"
      1  f7f8				   SpiderSprite
      2  f7f8
      3  f7f8		       99		      .BYTE.b	%10011001
      4  f7f9		       99		      .BYTE.b	%10011001
      5  f7fa		       bd		      .BYTE.b	%10111101
      6  f7fb		       bd		      .BYTE.b	%10111101
      7  f7fc		       99		      .BYTE.b	%10011001
      8  f7fd		       99		      .BYTE.b	%10011001
      9  f7fe		       7e		      .BYTE.b	%01111110
     10  f7ff		       3c		      .BYTE.b	%00111100
     11  f800		       3c		      .BYTE.b	%00111100
     12  f801		       18		      .BYTE.b	%00011000
     13  f802		       3c		      .BYTE.b	%00111100
     14  f803		       7e		      .BYTE.b	%01111110
     15  f804		       bd		      .BYTE.b	%10111101
     16  f805		       bd		      .BYTE.b	%10111101
     17  f806		       bd		      .BYTE.b	%10111101
     18  f807		       99		      .BYTE.b	%10011001
     19  f808
     20  f808		       0b		      .BYTE.b	%00001011
     21  f809		       0b		      .BYTE.b	%00001011
     22  f80a		       13		      .BYTE.b	%00010011
     23  f80b		       13		      .BYTE.b	%00010011
     24  f80c		       1c		      .BYTE.b	%00011100
     25  f80d		       1c		      .BYTE.b	%00011100
     26  f80e		       3d		      .BYTE.b	%00111101
     27  f80f		       3d		      .BYTE.b	%00111101
     28  f810		       7e		      .BYTE.b	%01111110
     29  f811		       fe		      .BYTE.b	%11111110
     30  f812		       b8		      .BYTE.b	%10111000
     31  f813		       b8		      .BYTE.b	%10111000
     32  f814		       10		      .BYTE.b	%00010000
     33  f815		       10		      .BYTE.b	%00010000
     34  f816		       30		      .BYTE.b	%00110000
     35  f817		       20		      .BYTE.b	%00100000
     36  f818
     37  f818		       c7		      .BYTE.b	%11000111
     38  f819		       c7		      .BYTE.b	%11000111
     39  f81a		       28		      .BYTE.b	%00101000
     40  f81b		       28		      .BYTE.b	%00101000
     41  f81c		       3a		      .BYTE.b	%00111010
     42  f81d		       7a		      .BYTE.b	%01111010
     43  f81e		       fd		      .BYTE.b	%11111101
     44  f81f		       ff		      .BYTE.b	%11111111
     45  f820		       ff		      .BYTE.b	%11111111
     46  f821		       fd		      .BYTE.b	%11111101
     47  f822		       7a		      .BYTE.b	%01111010
     48  f823		       3a		      .BYTE.b	%00111010
     49  f824		       28		      .BYTE.b	%00101000
     50  f825		       28		      .BYTE.b	%00101000
     51  f826		       c7		      .BYTE.b	%11000111
     52  f827		       c7		      .BYTE.b	%11000111
     53  f828
     54  f828		       20		      .BYTE.b	%00100000
     55  f829		       30		      .BYTE.b	%00110000
     56  f82a		       10		      .BYTE.b	%00010000
     57  f82b		       10		      .BYTE.b	%00010000
     58  f82c		       b8		      .BYTE.b	%10111000
     59  f82d		       bc		      .BYTE.b	%10111100
     60  f82e		       fc		      .BYTE.b	%11111100
     61  f82f		       7e		      .BYTE.b	%01111110
     62  f830		       3f		      .BYTE.b	%00111111
     63  f831		       1d		      .BYTE.b	%00011101
     64  f832		       0c		      .BYTE.b	%00001100
     65  f833		       1c		      .BYTE.b	%00011100
     66  f834		       13		      .BYTE.b	%00010011
     67  f835		       13		      .BYTE.b	%00010011
     68  f836		       0b		      .BYTE.b	%00001011
     69  f837		       0b		      .BYTE.b	%00001011
     70  f838
     71  f838		       99		      .BYTE.b	%10011001
     72  f839		       bd		      .BYTE.b	%10111101
     73  f83a		       bd		      .BYTE.b	%10111101
     74  f83b		       bd		      .BYTE.b	%10111101
     75  f83c		       7e		      .BYTE.b	%01111110
     76  f83d		       3c		      .BYTE.b	%00111100
     77  f83e		       18		      .BYTE.b	%00011000
     78  f83f		       3c		      .BYTE.b	%00111100
     79  f840		       3c		      .BYTE.b	%00111100
     80  f841		       7e		      .BYTE.b	%01111110
     81  f842		       99		      .BYTE.b	%10011001
     82  f843		       99		      .BYTE.b	%10011001
     83  f844		       bd		      .BYTE.b	%10111101
     84  f845		       bd		      .BYTE.b	%10111101
     85  f846		       99		      .BYTE.b	%10011001
     86  f847		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f848					      include	"objects/line.asm"
      1  f848							;================
      2  f848							; Line (ball)
      3  f848							;================
      4  f848
      5  f848							; Constants
      6  f848
      7  f848		       00 08	   LINE_SIZE  =	8
      8  f848		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f848		       00 04	   LINE_VEL_X =	4
     10  f848		       00 04	   LINE_VEL_Y =	4
     11  f848
     12  f848		       00 08	   LINE_AUDIO_C =	8
     13  f848		       00 01	   LINE_AUDIO_F =	1
     14  f848		       00 04	   LINE_AUDIO_V =	4
     15  f848
     16  f848		       00 08	   LINE_SAMPLE_LEN =	8
     17  f848		       00 03	   LINE_SAMPLE_C =	3
     18  f848		       00 01	   LINE_SAMPLE_F =	1
     19  f848		       00 04	   LINE_SAMPLE_V =	4
     20  f848
     21  f848							; Initialization
     22  f848
     23  f848				   LineInit
     24  f848
     25  f848							; Initial Line Control
     26  f848		       a9 00		      lda	#0
     27  f84a		       85 a9		      sta	LineEnabled
     28  f84c		       85 aa		      sta	LinePos+0
     29  f84e		       85 ab		      sta	LinePos+1
     30  f850		       85 ac		      sta	LineVelocity+0
     31  f852		       85 ad		      sta	LineVelocity+1
     32  f854		       85 ae		      sta	LineStartPos+0
     33  f856		       85 af		      sta	LineStartPos+1
     34  f858		       85 b0		      sta	LineDrawPos+0
     35  f85a		       85 b1		      sta	LineDrawPos+1
     36  f85c
     37  f85c		       60		      rts
     38  f85d
     39  f85d							; Frame Update
     40  f85d
     41  f85d				   LineUpdate
     42  f85d		       20 67 f8 	      jsr	LineControl
     43  f860		       20 1f f9 	      jsr	LineObject
     44  f863		       20 66 f9 	      jsr	LineCollision
     45  f866		       60		      rts
     46  f867
     47  f867				   LineControl
     48  f867
     49  f867							; Check if Fire Button on controller 1 is pressed
     50  f867		       a5 0c		      lda	INPT4
     51  f869		       30 0a		      bmi	.line_control_skip
     52  f86b
     53  f86b		       24 a9		      bit	LineEnabled
     54  f86d		       30 06		      bmi	.line_control_skip
     55  f86f
     56  f86f		       a5 a2		      lda	SpiderCtrl
     57  f871		       c9 00		      cmp	#0
     58  f873		       d0 03		      bne	.line_control_fire
     59  f875
     60  f875				   .line_control_skip
     61  f875		       4c 1e f9 	      jmp	.line_control_return
     62  f878
     63  f878				   .line_control_fire
     64  f878		       20 ae f9 	      jsr	LineEnable
     65  f87b
     66  f87b				   .line_control_x
     67  f87b		       a5 a2		      lda	SpiderCtrl
     68  f87d		       29 c0		      and	#%11000000
     69  f87f		       f0 0e		      beq	.line_control_x_none
     70  f881				   .line_control_x_left
     71  f881		       c9 80		      cmp	#%10000000
     72  f883		       d0 05		      bne	.line_control_x_right
     73  f885
     74  f885		       a9 fc		      lda	#-LINE_VEL_X
     75  f887		       4c 91 f8 	      jmp	.line_control_x_store
     76  f88a				   .line_control_x_right
     77  f88a		       a9 04		      lda	#LINE_VEL_X
     78  f88c		       4c 91 f8 	      jmp	.line_control_x_store
     79  f88f				   .line_control_x_none
     80  f88f		       a9 00		      lda	#0
     81  f891				   .line_control_x_store
     82  f891		       85 ac		      sta	LineVelocity
     83  f893
     84  f893				   .line_control_y
     85  f893		       a5 a2		      lda	SpiderCtrl
     86  f895		       29 30		      and	#%00110000
     87  f897		       f0 0e		      beq	.line_control_y_none
     88  f899				   .line_control_y_up
     89  f899		       c9 20		      cmp	#%00100000
     90  f89b		       d0 05		      bne	.line_control_y_down
     91  f89d
     92  f89d		       a9 04		      lda	#LINE_VEL_Y
     93  f89f		       4c a9 f8 	      jmp	.line_control_y_store
     94  f8a2				   .line_control_y_down
     95  f8a2		       a9 fc		      lda	#-LINE_VEL_Y
     96  f8a4		       4c a9 f8 	      jmp	.line_control_y_store
     97  f8a7				   .line_control_y_none
     98  f8a7		       a9 00		      lda	#0
     99  f8a9				   .line_control_y_store
    100  f8a9		       85 ad		      sta	LineVelocity+1
    101  f8ab
    102  f8ab				   .line_control_position
    103  f8ab
    104  f8ab		       a2 00		      ldx	#0	; offsetX
    105  f8ad		       a0 00		      ldy	#0	; offsetY
    106  f8af
    107  f8af		       a5 a2		      lda	SpiderCtrl
    108  f8b1		       29 f0		      and	#%11110000
    109  f8b3
    110  f8b3				   .line_control_position_left
    111  f8b3		       c9 80		      cmp	#%10000000
    112  f8b5		       d0 07		      bne	.line_control_position_right
    113  f8b7
    114  f8b7		       a2 00		      ldx	#0
    115  f8b9		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    116  f8bb		       4c 06 f9 	      jmp	.line_control_position_store
    117  f8be
    118  f8be				   .line_control_position_right
    119  f8be		       c9 40		      cmp	#%01000000
    120  f8c0		       d0 07		      bne	.line_control_position_top
    121  f8c2
    122  f8c2		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    123  f8c4		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    124  f8c6		       4c 06 f9 	      jmp	.line_control_position_store
    125  f8c9
    126  f8c9				   .line_control_position_top
    127  f8c9		       c9 20		      cmp	#%00100000
    128  f8cb		       d0 07		      bne	.line_control_position_bottom
    129  f8cd
    130  f8cd		       a2 08		      ldx	#SPIDER_SIZE/2
    131  f8cf		       a0 10		      ldy	#SPIDER_SIZE
    132  f8d1		       4c 06 f9 	      jmp	.line_control_position_store
    133  f8d4
    134  f8d4				   .line_control_position_bottom
    135  f8d4		       c9 10		      cmp	#%00010000
    136  f8d6		       d0 05		      bne	.line_control_position_top_right
    137  f8d8
    138  f8d8		       a2 08		      ldx	#SPIDER_SIZE/2
    139  f8da		       4c 06 f9 	      jmp	.line_control_position_store
    140  f8dd
    141  f8dd				   .line_control_position_top_right
    142  f8dd		       c9 60		      cmp	#%01100000
    143  f8df		       d0 07		      bne	.line_control_position_bottom_right
    144  f8e1
    145  f8e1		       a2 10		      ldx	#SPIDER_SIZE
    146  f8e3		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    147  f8e5		       4c 06 f9 	      jmp	.line_control_position_store
    148  f8e8
    149  f8e8				   .line_control_position_bottom_right
    150  f8e8		       c9 50		      cmp	#%01010000
    151  f8ea		       d0 07		      bne	.line_control_position_bottom_left
    152  f8ec
    153  f8ec		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    154  f8ee		       a0 00		      ldy	#0
    155  f8f0		       4c 06 f9 	      jmp	.line_control_position_store
    156  f8f3
    157  f8f3				   .line_control_position_bottom_left
    158  f8f3		       c9 90		      cmp	#%10010000
    159  f8f5		       d0 07		      bne	.line_control_position_top_left
    160  f8f7
    161  f8f7							; No Offset
    162  f8f7		       a2 04		      ldx	#LINE_SIZE/2
    163  f8f9		       a0 04		      ldy	#LINE_SIZE/2
    164  f8fb		       4c 06 f9 	      jmp	.line_control_position_store
    165  f8fe
    166  f8fe				   .line_control_position_top_left
    167  f8fe		       c9 a0		      cmp	#%10100000
    168  f900		       d0 04		      bne	.line_control_position_store
    169  f902
    170  f902		       a2 00		      ldx	#0
    171  f904		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    172  f906
    173  f906				   .line_control_position_store
    174  f906
    175  f906							; Apply offsetX to playerX
    176  f906		       a5 a0		      lda	SpiderPos
    177  f908		       86 83		      stx	Temp
    178  f90a		       18		      clc
    179  f90b		       65 83		      adc	Temp
    180  f90d		       aa		      tax
    181  f90e
    182  f90e							; Apply offsetY to playerY
    183  f90e		       a5 a1		      lda	SpiderPos+1
    184  f910		       84 83		      sty	Temp
    185  f912		       18		      clc
    186  f913		       65 83		      adc	Temp
    187  f915		       a8		      tay
    188  f916
    189  f916		       86 aa		      stx	LinePos
    190  f918		       84 ab		      sty	LinePos+1
    191  f91a		       86 ae		      stx	LineStartPos
    192  f91c		       84 af		      sty	LineStartPos+1
    193  f91e
    194  f91e				   .line_control_return
    195  f91e		       60		      rts
    196  f91f
    197  f91f				   LineObject
    198  f91f
    199  f91f							; Check if line is enabled
    200  f91f		       24 a9		      bit	LineEnabled
    201  f921		       10 42		      bpl	.line_object_return
    202  f923
    203  f923							; Load position
    204  f923		       a6 aa		      ldx	LinePos
    205  f925		       a4 ab		      ldy	LinePos+1
    206  f927
    207  f927				   .line_object_distance
    208  f927
    209  f927							; Check distance from player with absolute value differences
    210  f927
    211  f927				   .line_object_distance_x
    212  f927		       8a		      txa
    213  f928		       18		      clc
    214  f929		       e5 ae		      sbc	LineStartPos
    215  f92b		       b0 04		      bcs	.line_object_distance_x_check
    216  f92d		       49 ff		      eor	#$FF	; C flag is clear here
    217  f92f		       69 01		      adc	#$01	; form two's complement
    218  f931				   .line_object_distance_x_check		; Jumps to if positive
    219  f931		       c9 40		      cmp	#LINE_DISTANCE
    220  f933		       b0 2d		      bcs	.line_object_disable
    221  f935
    222  f935				   .line_object_distance_y
    223  f935		       98		      tya
    224  f936		       18		      clc
    225  f937		       e5 af		      sbc	LineStartPos+1
    226  f939		       b0 04		      bcs	.line_object_distance_y_check
    227  f93b		       49 ff		      eor	#$FF	; C flag is clear here
    228  f93d		       69 01		      adc	#$01	; form two's complement
    229  f93f				   .line_object_distance_y_check		; Jumps to if positive
    230  f93f		       c9 40		      cmp	#LINE_DISTANCE
    231  f941		       b0 1f		      bcs	.line_object_disable
    232  f943
    233  f943				   .line_object_boundary
    234  f943				   .line_object_boundary_left
    235  f943		       e0 04		      cpx	#LINE_VEL_X
    236  f945		       90 1b		      bcc	.line_object_disable
    237  f947				   .line_object_boundary_right
    238  f947		       e0 9c		      cpx	#160-LINE_VEL_X
    239  f949		       b0 17		      bcs	.line_object_disable
    240  f94b				   .line_object_boundary_bottom
    241  f94b		       c0 04		      cpy	#LINE_VEL_Y
    242  f94d		       90 13		      bcc	.line_object_disable
    243  f94f				   .line_object_boundary_top
    244  f94f		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    245  f951		       b0 0f		      bcs	.line_object_disable
    246  f953
    247  f953				   .line_object_velocity
    248  f953
    249  f953							; Apply Velocity
    250  f953		       8a		      txa
    251  f954		       18		      clc
    252  f955		       65 ac		      adc	LineVelocity
    253  f957		       85 aa		      sta	LinePos
    254  f959
    255  f959		       98		      tya
    256  f95a		       18		      clc
    257  f95b		       65 ad		      adc	LineVelocity+1
    258  f95d		       85 ab		      sta	LinePos+1
    259  f95f
    260  f95f		       4c 65 f9 	      jmp	.line_object_return
    261  f962
    262  f962				   .line_object_disable
    263  f962		       20 bc f9 	      jsr	LineDisable
    264  f965
    265  f965				   .line_object_return
    266  f965		       60		      rts
    267  f966
    268  f966				   LineCollision
    269  f966
    270  f966		       a9 78		      lda	#BUG_STUN_LENGTH
    271  f968
    272  f968				   .line_collision_m0
    273  f968		       24 04		      bit	CXM0FB
    274  f96a		       50 08		      bvc	.line_collision_m1
    275  f96c
    276  f96c							; Set stun timer
    277  f96c		       85 b3		      sta	BugStunned+0
    278  f96e
    279  f96e							; Disable line
    280  f96e		       20 bc f9 	      jsr	LineDisable
    281  f971		       4c 7d f9 	      jmp	.line_collision_sample
    282  f974
    283  f974				   .line_collision_m1
    284  f974		       24 05		      bit	CXM1FB
    285  f976		       50 08		      bvc	.line_collision_return
    286  f978
    287  f978							; Set stun timer
    288  f978		       85 b4		      sta	BugStunned+1
    289  f97a
    290  f97a							; Disable line
    291  f97a		       20 bc f9 	      jsr	LineDisable
    292  f97d
    293  f97d				   .line_collision_sample
    294  f97d		       20 e0 f9 	      jsr	LineSample
    295  f980
    296  f980				   .line_collision_return
    297  f980		       60		      rts
    298  f981
    299  f981				   LinePosition
    300  f981
    301  f981							; Set Line Position
    302  f981		       a2 04		      ldx	#4	; Object (ball)
    303  f983		       a5 aa		      lda	LinePos	; X Position
    304  f985		       20 00 f0 	      jsr	PosObject
    305  f988
    306  f988		       60		      rts
    307  f989
    308  f989							; Scanline Draw
    309  f989
    310  f989				   LineDrawStart
    311  f989
    312  f989							; Set ball size to be 4 clocks (4/5 bits)
    313  f989		       a5 80		      lda	CtrlPf
    314  f98b		       29 cf		      and	#%11001111
    315  f98d		       09 20		      ora	#%00100000
    316  f98f		       85 80		      sta	CtrlPf
    317  f991		       85 0a		      sta	CTRLPF
    318  f993
    319  f993							; Determine if we need to use vertical delay (oven line)
    320  f993		       a5 ab		      lda	LinePos+1
    321  f995		       4a		      lsr
    322  f996		       90 05		      bcc	.line_draw_start_nodelay
    323  f998
    324  f998		       a0 01		      ldy	#1
    325  f99a		       4c 9f f9 	      jmp	.line_draw_start_set_delay
    326  f99d
    327  f99d				   .line_draw_start_nodelay
    328  f99d		       a0 00		      ldy	#0
    329  f99f
    330  f99f				   .line_draw_start_set_delay
    331  f99f		       84 27		      sty	VDELBL
    332  f9a1
    333  f9a1				   .line_draw_start_pos
    334  f9a1							; Calculate starting position
    335  f9a1		       18		      clc
    336  f9a2		       85 b0		      sta	LineDrawPos+0
    337  f9a4		       69 04		      adc	#LINE_SIZE/2
    338  f9a6		       85 b1		      sta	LineDrawPos+1
    339  f9a8
    340  f9a8		       60		      rts
    341  f9a9
    342  f9a9				   LineClean
    343  f9a9
    344  f9a9							; Clear out Line
    345  f9a9		       a9 00		      lda	#0
    346  f9ab		       85 1f		      sta	ENABL
    347  f9ad
    348  f9ad		       60		      rts
    349  f9ae
    350  f9ae				   LineEnable
    351  f9ae		       a9 80		      lda	#%10000000
    352  f9b0		       85 a9		      sta	LineEnabled
    353  f9b2
    354  f9b2		       a5 91		      lda	SampleStep
    355  f9b4		       c9 00		      cmp	#0
    356  f9b6		       d0 03		      bne	.line_enable_return
    357  f9b8
    358  f9b8		       20 ca f9 	      jsr	LineAudioPlay
    359  f9bb
    360  f9bb				   .line_enable_return
    361  f9bb		       60		      rts
    362  f9bc
    363  f9bc				   LineDisable
    364  f9bc		       a9 00		      lda	#0
    365  f9be		       85 a9		      sta	LineEnabled
    366  f9c0
    367  f9c0		       a5 91		      lda	SampleStep
    368  f9c2		       c9 00		      cmp	#0
    369  f9c4		       d0 03		      bne	.line_disable_return
    370  f9c6
    371  f9c6		       20 d7 f9 	      jsr	LineAudioMute
    372  f9c9
    373  f9c9				   .line_disable_return
    374  f9c9		       60		      rts
    375  f9ca
    376  f9ca				   LineAudioPlay
    377  f9ca		       a9 08		      lda	#LINE_AUDIO_C
    378  f9cc		       85 16		      sta	AUDC1
    379  f9ce		       a9 01		      lda	#LINE_AUDIO_F
    380  f9d0		       85 18		      sta	AUDF1
    381  f9d2		       a9 04		      lda	#LINE_AUDIO_V
    382  f9d4		       85 1a		      sta	AUDV1
    383  f9d6		       60		      rts
    384  f9d7
    385  f9d7				   LineAudioMute
    386  f9d7		       a9 00		      lda	#0
    387  f9d9		       85 1a		      sta	AUDV1
    388  f9db		       85 18		      sta	AUDF1
    389  f9dd		       85 16		      sta	AUDC1
    390  f9df		       60		      rts
    391  f9e0
    392  f9e0				   LineSample
    393  f9e0		       a9 08		      lda	#LINE_SAMPLE_LEN
    394  f9e2		       85 91		      sta	SampleStep
    395  f9e4		       a9 03		      lda	#LINE_SAMPLE_C
    396  f9e6		       85 16		      sta	AUDC1
    397  f9e8		       a9 01		      lda	#LINE_SAMPLE_F
    398  f9ea		       85 18		      sta	AUDF1
    399  f9ec		       a9 04		      lda	#LINE_SAMPLE_V
    400  f9ee		       85 1a		      sta	AUDV1
    401  f9f0		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f9f1					      include	"objects/bug.asm"
      1  f9f1							;======================
      2  f9f1							; Bugs (missiles 0 & 1)
      3  f9f1							;======================
      4  f9f1
      5  f9f1							; Constants
      6  f9f1
      7  f9f1		       00 08	   BUG_SIZE   =	8
      8  f9f1		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f9f1		       00 78	   BUG_STUN_LENGTH =	120
     10  f9f1		       00 04	   BUG_POINTS =	4
     11  f9f1
     12  f9f1		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     13  f9f1		       00 38	   BUG_COLOR_STUN =	#$38
     14  f9f1
     15  f9f1		       00 1e	   BUG_SAMPLE_LEN =	30
     16  f9f1		       00 03	   BUG_SAMPLE_C =	3
     17  f9f1		       00 14	   BUG_SAMPLE_F =	20
     18  f9f1		       00 04	   BUG_SAMPLE_V =	4
     19  f9f1
     20  f9f1		       00 01	   BUG_COL_SAMPLE_LEN =	1
     21  f9f1		       00 08	   BUG_COL_SAMPLE_C =	8
     22  f9f1		       00 08	   BUG_COL_SAMPLE_F =	8
     23  f9f1		       00 03	   BUG_COL_SAMPLE_V =	3
     24  f9f1
     25  f9f1							; Initialization
     26  f9f1
     27  f9f1				   BugInit
     28  f9f1
     29  f9f1							; Initialize Bugs
     30  f9f1		       a2 01		      ldx	#1
     31  f9f3
     32  f9f3				   .bug_init_loop
     33  f9f3		       20 fa f9 	      jsr	BugReset
     34  f9f6
     35  f9f6		       ca		      dex
     36  f9f7		       10 fa		      bpl	.bug_init_loop
     37  f9f9
     38  f9f9		       60		      rts
     39  f9fa
     40  f9fa				   BugReset		; x = bug (0 or 1)
     41  f9fa
     42  f9fa							; Set random position
     43  f9fa		       20 13 f0 	      jsr	Random
     44  f9fd
     45  f9fd		       a5 85		      lda	Rand8
     46  f9ff		       29 7f		      and	#$7f
     47  fa01		       95 b5		      sta	BugPosX,x
     48  fa03
     49  fa03		       a5 86		      lda	Rand16
     50  fa05		       29 7f		      and	#$7f
     51  fa07		       95 b7		      sta	BugPosY,x
     52  fa09
     53  fa09							; Set as active
     54  fa09		       a9 00		      lda	#0
     55  fa0b		       95 b3		      sta	BugStunned,x
     56  fa0d
     57  fa0d							; Reset Color
     58  fa0d		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     59  fa0f		       95 b9		      sta	BugColor,x
     60  fa11
     61  fa11		       60		      rts
     62  fa12
     63  fa12							; Frame Update
     64  fa12
     65  fa12				   BugUpdate
     66  fa12
     67  fa12		       a2 01		      ldx	#1
     68  fa14				   .bug_update_loop
     69  fa14		       86 83		      stx	Temp+0
     70  fa16
     71  fa16		       b5 b3		      lda	BugStunned,x
     72  fa18		       c9 00		      cmp	#0
     73  fa1a		       f0 08		      beq	.bug_update_active
     74  fa1c
     75  fa1c				   .bug_update_stunned
     76  fa1c		       d6 b3		      dec	BugStunned,x
     77  fa1e		       20 a9 fa 	      jsr	BugStunCollision
     78  fa21		       4c 2a fa 	      jmp	.bug_update_next
     79  fa24
     80  fa24				   .bug_update_active
     81  fa24		       20 30 fa 	      jsr	BugMovement
     82  fa27		       20 8f fa 	      jsr	BugCollision
     83  fa2a
     84  fa2a				   .bug_update_next
     85  fa2a		       a6 83		      ldx	Temp+0
     86  fa2c		       ca		      dex
     87  fa2d		       10 e5		      bpl	.bug_update_loop
     88  fa2f
     89  fa2f		       60		      rts
     90  fa30
     91  fa30				   BugMovement
     92  fa30
     93  fa30				   .bug_movement_random
     94  fa30		       20 13 f0 	      jsr	Random
     95  fa33		       29 03		      and	#%00000011
     96  fa35		       85 84		      sta	Temp+1
     97  fa37
     98  fa37				   .bug_movement_load
     99  fa37		       a6 83		      ldx	Temp+0
    100  fa39
    101  fa39				   .bug_movement_x
    102  fa39		       a4 b2		      ldy	BugSpeed
    103  fa3b
    104  fa3b							; Alter X Position
    105  fa3b		       a5 84		      lda	Temp+1
    106  fa3d		       29 01		      and	#%00000001
    107  fa3f
    108  fa3f				   .bug_movement_x_check
    109  fa3f		       c9 01		      cmp	#1
    110  fa41		       d0 08		      bne	.bug_movement_x_right
    111  fa43
    112  fa43				   .bug_movement_x_left
    113  fa43		       d6 b5		      dec	BugPosX,x
    114  fa45		       88		      dey
    115  fa46		       d0 fb		      bne	.bug_movement_x_left
    116  fa48
    117  fa48		       4c 50 fa 	      jmp	.bug_movement_y
    118  fa4b
    119  fa4b				   .bug_movement_x_right
    120  fa4b		       f6 b5		      inc	BugPosX,x
    121  fa4d		       88		      dey
    122  fa4e		       d0 fb		      bne	.bug_movement_x_right
    123  fa50
    124  fa50				   .bug_movement_y
    125  fa50		       a4 b2		      ldy	BugSpeed
    126  fa52
    127  fa52							; Alter Y Position
    128  fa52		       a5 84		      lda	Temp+1
    129  fa54		       29 02		      and	#%00000010
    130  fa56		       4a		      lsr
    131  fa57
    132  fa57				   .bug_movement_y_check
    133  fa57		       c9 01		      cmp	#1
    134  fa59		       d0 08		      bne	.bug_movement_y_down
    135  fa5b
    136  fa5b				   .bug_movement_y_up
    137  fa5b		       f6 b7		      inc	BugPosY,x
    138  fa5d		       88		      dey
    139  fa5e		       d0 fb		      bne	.bug_movement_y_up
    140  fa60
    141  fa60		       4c 68 fa 	      jmp	.bug_movement_boundary
    142  fa63
    143  fa63				   .bug_movement_y_down
    144  fa63		       d6 b7		      dec	BugPosY,x
    145  fa65		       88		      dey
    146  fa66		       d0 fb		      bne	.bug_movement_y_down
    147  fa68
    148  fa68				   .bug_movement_boundary
    149  fa68		       b5 b5		      lda	BugPosX,x
    150  fa6a		       b4 b7		      ldy	BugPosY,x
    151  fa6c
    152  fa6c				   .bug_movement_boundary_left
    153  fa6c		       c9 08		      cmp	#BUG_BOUNDARY
    154  fa6e		       b0 05		      bcs	.bug_movement_boundary_right
    155  fa70		       a9 08		      lda	#BUG_BOUNDARY
    156  fa72		       4c 7b fa 	      jmp	.bug_movement_boundary_top
    157  fa75
    158  fa75				   .bug_movement_boundary_right
    159  fa75		       c9 90		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    160  fa77		       90 02		      bcc	.bug_movement_boundary_top
    161  fa79		       a9 90		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    162  fa7b
    163  fa7b				   .bug_movement_boundary_top
    164  fa7b		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    165  fa7d		       b0 05		      bcs	.bug_movement_boundary_bottom
    166  fa7f		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    167  fa81		       4c 8a fa 	      jmp	.bug_movement_store
    168  fa84
    169  fa84				   .bug_movement_boundary_bottom
    170  fa84		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    171  fa86		       90 02		      bcc	.bug_movement_store
    172  fa88		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    173  fa8a
    174  fa8a				   .bug_movement_store
    175  fa8a		       95 b5		      sta	BugPosX,x
    176  fa8c		       94 b7		      sty	BugPosY,x
    177  fa8e
    178  fa8e				   .bug_movement_return
    179  fa8e		       60		      rts
    180  fa8f
    181  fa8f				   BugCollision
    182  fa8f
    183  fa8f		       e0 01		      cpx	#1
    184  fa91		       f0 05		      beq	.bug_collision_m1
    185  fa93
    186  fa93				   .bug_collision_m0
    187  fa93							; Collision for M0 (V set)
    188  fa93		       24 00		      bit	CXM0P
    189  fa95		       70 06		      bvs	.bug_collision_active
    190  fa97		       60		      rts
    191  fa98
    192  fa98				   .bug_collision_m1
    193  fa98							; Collision for M1 (N set)
    194  fa98		       24 01		      bit	CXM1P
    195  fa9a		       30 01		      bmi	.bug_collision_active
    196  fa9c		       60		      rts
    197  fa9d
    198  fa9d				   .bug_collision_active
    199  fa9d
    200  fa9d							; Reduce players score
    201  fa9d		       a5 92		      lda	ScoreValue
    202  fa9f		       c9 00		      cmp	#0
    203  faa1		       f0 02		      beq	.bug_collision_score_skip
    204  faa3		       c6 92		      dec	ScoreValue
    205  faa5				   .bug_collision_score_skip
    206  faa5
    207  faa5							; Play sound
    208  faa5		       20 09 fb 	      jsr	BugColSample
    209  faa8
    210  faa8		       60		      rts
    211  faa9
    212  faa9				   BugStunCollision
    213  faa9
    214  faa9		       e0 01		      cpx	#1
    215  faab		       f0 05		      beq	.bug_stun_collision_m1
    216  faad
    217  faad				   .bug_stun_collision_m0
    218  faad							; Collision for M0 (V set)
    219  faad		       24 00		      bit	CXM0P
    220  faaf		       70 06		      bvs	.bug_stun_collision_active
    221  fab1		       60		      rts
    222  fab2
    223  fab2				   .bug_stun_collision_m1
    224  fab2							; Collision for M1 (N set)
    225  fab2		       24 01		      bit	CXM1P
    226  fab4		       30 01		      bmi	.bug_stun_collision_active
    227  fab6		       60		      rts
    228  fab7
    229  fab7				   .bug_stun_collision_active
    230  fab7							; Add points to score
    231  fab7		       18		      clc
    232  fab8		       a5 93		      lda	ScoreValue+1
    233  faba		       69 04		      adc	#BUG_POINTS
    234  fabc		       85 93		      sta	ScoreValue+1
    235  fabe
    236  fabe							; Reset bug
    237  fabe		       20 fa f9 	      jsr	BugReset
    238  fac1
    239  fac1							; Play sample
    240  fac1		       20 f8 fa 	      jsr	BugSample
    241  fac4
    242  fac4		       60		      rts
    243  fac5
    244  fac5							; Horizontal Positioning
    245  fac5
    246  fac5				   BugPosition
    247  fac5
    248  fac5		       a2 02		      ldx	#2
    249  fac7		       a5 b5		      lda	BugPosX+0
    250  fac9		       20 00 f0 	      jsr	PosObject
    251  facc
    252  facc		       a2 03		      ldx	#3
    253  face		       a5 b6		      lda	BugPosX+1
    254  fad0		       20 00 f0 	      jsr	PosObject
    255  fad3
    256  fad3		       60		      rts
    257  fad4
    258  fad4							; Scanline Draw
    259  fad4
    260  fad4				   BugDrawStart
    261  fad4
    262  fad4		       a0 01		      ldy	#1
    263  fad6				   .bug_draw_start_loop
    264  fad6
    265  fad6							; Set missile 0 & 1 to be 8 clock size
    266  fad6		       b9 81 00 	      lda	NuSiz0,y
    267  fad9		       09 30		      ora	#%00110000
    268  fadb		       99 81 00 	      sta	NuSiz0,y
    269  fade		       99 04 00 	      sta	NUSIZ0,y
    270  fae1
    271  fae1							; Setup half scanline positions
    272  fae1		       b9 b7 00 	      lda	BugPosY,y
    273  fae4		       4a		      lsr
    274  fae5		       99 bb 00 	      sta	BugDrawPosBottom,y
    275  fae8
    276  fae8		       69 04		      adc	#BUG_SIZE/2
    277  faea		       99 bd 00 	      sta	BugDrawPosTop,y
    278  faed
    279  faed		       88		      dey
    280  faee		       10 e6		      bpl	.bug_draw_start_loop
    281  faf0
    282  faf0		       60		      rts
    283  faf1
    284  faf1				   BugClean
    285  faf1		       a9 00		      lda	#0
    286  faf3		       85 1d		      sta	ENAM0
    287  faf5		       85 1e		      sta	ENAM1
    288  faf7		       60		      rts
    289  faf8
    290  faf8				   BugSample
    291  faf8		       a9 1e		      lda	#BUG_SAMPLE_LEN
    292  fafa		       85 91		      sta	SampleStep
    293  fafc		       a9 03		      lda	#BUG_SAMPLE_C
    294  fafe		       85 16		      sta	AUDC1
    295  fb00		       a9 14		      lda	#BUG_SAMPLE_F
    296  fb02		       85 18		      sta	AUDF1
    297  fb04		       a9 04		      lda	#BUG_SAMPLE_V
    298  fb06		       85 1a		      sta	AUDV1
    299  fb08		       60		      rts
    300  fb09
    301  fb09				   BugColSample
    302  fb09		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    303  fb0b		       85 91		      sta	SampleStep
    304  fb0d		       a9 08		      lda	#BUG_COL_SAMPLE_C
    305  fb0f		       85 16		      sta	AUDC1
    306  fb11		       a9 08		      lda	#BUG_COL_SAMPLE_F
    307  fb13		       85 18		      sta	AUDF1
    308  fb15		       a9 03		      lda	#BUG_COL_SAMPLE_V
    309  fb17		       85 1a		      sta	AUDV1
    310  fb19		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fb1a					      include	"objects/swatter.asm"
      1  fb1a							;==================
      2  fb1a							; Swatter (player1)
      3  fb1a							;==================
      4  fb1a
      5  fb1a							; Constants
      6  fb1a
      7  fb1a		       00 36	   SWATTER_COLOR =	#$36
      8  fb1a		       00 30	   SWATTER_HOLD_COLOR =	#$30
      9  fb1a		       00 14	   SWATTER_SPRITE_SIZE =	#20
     10  fb1a		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     11  fb1a
     12  fb1a		       00 3c	   SWATTER_HOLD_TIME =	60
     13  fb1a		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     14  fb1a
     15  fb1a		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     16  fb1a		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     17  fb1a		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     18  fb1a
     19  fb1a		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     20  fb1a		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     21  fb1a		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     22  fb1a		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     23  fb1a		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     24  fb1a
     25  fb1a		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     26  fb1a		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     27  fb1a		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     28  fb1a		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     29  fb1a
     30  fb1a		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     31  fb1a		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     32  fb1a		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     33  fb1a		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     34  fb1a
     35  fb1a							; Initialization
     36  fb1a
     37  fb1a				   SwatterInit
     38  fb1a
     39  fb1a		       20 df fb 	      jsr	SwatterReset
     40  fb1d
     41  fb1d		       60		      rts
     42  fb1e
     43  fb1e							; Frame Update
     44  fb1e
     45  fb1e				   SwatterUpdate
     46  fb1e
     47  fb1e				   .swatter_update_color
     48  fb1e		       a5 c1		      lda	SwatterState
     49  fb20		       c9 80		      cmp	#SWATTER_STATE_HOLD
     50  fb22		       d0 05		      bne	.swatter_update_color_active
     51  fb24				   .swatter_update_color_hold
     52  fb24		       a9 30		      lda	#SWATTER_HOLD_COLOR
     53  fb26		       4c 2b fb 	      jmp	.swatter_update_color_set
     54  fb29				   .swatter_update_color_active
     55  fb29		       a9 36		      lda	#SWATTER_COLOR
     56  fb2b				   .swatter_update_color_set
     57  fb2b		       85 c2		      sta	SwatterColor
     58  fb2d
     59  fb2d				   .swatter_update_hold_sample
     60  fb2d		       a4 c1		      ldy	SwatterState
     61  fb2f		       c0 80		      cpy	#SWATTER_STATE_HOLD
     62  fb31		       d0 0f		      bne	.swatter_update_state
     63  fb33
     64  fb33		       c6 c8		      dec	SwatterSampleCount
     65  fb35		       d0 0b		      bne	.swatter_update_state
     66  fb37
     67  fb37		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     68  fb39		       85 c8		      sta	SwatterSampleCount
     69  fb3b
     70  fb3b		       c6 c9		      dec	SwatterSampleF
     71  fb3d		       a4 c9		      ldy	SwatterSampleF
     72  fb3f		       20 ff fb 	      jsr	SwatterHoldSample
     73  fb42
     74  fb42				   .swatter_update_state
     75  fb42		       a6 8f		      ldx	FrameTimer+1
     76  fb44		       e0 00		      cpx	#0
     77  fb46		       d0 2d		      bne	.swatter_update_collision
     78  fb48
     79  fb48		       a4 c1		      ldy	SwatterState
     80  fb4a		       c0 00		      cpy	#SWATTER_STATE_WAIT
     81  fb4c		       f0 0a		      beq	.swatter_update_state_wait
     82  fb4e
     83  fb4e		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fb50		       f0 18		      beq	.swatter_update_state_hold
     85  fb52
     86  fb52							; Else we're at the end of the active state
     87  fb52		       20 df fb 	      jsr	SwatterReset
     88  fb55		       4c 84 fb 	      jmp	.swatter_update_return
     89  fb58
     90  fb58				   .swatter_update_state_wait
     91  fb58		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
     92  fb5a		       84 c9		      sty	SwatterSampleF
     93  fb5c		       20 ff fb 	      jsr	SwatterHoldSample
     94  fb5f
     95  fb5f		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     96  fb61		       85 c8		      sta	SwatterSampleCount
     97  fb63
     98  fb63		       a9 80		      lda	#SWATTER_STATE_HOLD
     99  fb65		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    100  fb67		       4c 71 fb 	      jmp	.swatter_update_state_set
    101  fb6a
    102  fb6a				   .swatter_update_state_hold
    103  fb6a		       20 0e fc 	      jsr	SwatterActiveSample
    104  fb6d
    105  fb6d		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    106  fb6f		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    107  fb71
    108  fb71				   .swatter_update_state_set
    109  fb71		       85 c1		      sta	SwatterState
    110  fb73		       86 8f		      stx	FrameTimer+1
    111  fb75
    112  fb75				   .swatter_update_collision
    113  fb75							; Check 1 frame after active
    114  fb75		       a5 c1		      lda	SwatterState
    115  fb77		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    116  fb79		       d0 09		      bne	.swatter_update_return
    117  fb7b		       a6 8f		      ldx	FrameTimer+1
    118  fb7d		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    119  fb7f		       d0 03		      bne	.swatter_update_return
    120  fb81
    121  fb81		       20 85 fb 	      jsr	SwatterCollision
    122  fb84
    123  fb84				   .swatter_update_return
    124  fb84		       60		      rts
    125  fb85
    126  fb85				   SwatterCollision
    127  fb85		       24 00		      bit	CXM0P
    128  fb87		       30 09		      bmi	.swatter_collision_m0
    129  fb89
    130  fb89		       24 01		      bit	CXM1P
    131  fb8b		       70 0a		      bvs	.swatter_collision_m1
    132  fb8d
    133  fb8d		       24 07		      bit	CXPPMM
    134  fb8f		       30 0e		      bmi	.swatter_collision_p0
    135  fb91
    136  fb91		       60		      rts
    137  fb92
    138  fb92				   .swatter_collision_m0
    139  fb92		       a2 00		      ldx	#0
    140  fb94		       4c 99 fb 	      jmp	.swatter_collision_bug_reset
    141  fb97
    142  fb97				   .swatter_collision_m1
    143  fb97		       a2 01		      ldx	#1
    144  fb99
    145  fb99				   .swatter_collision_bug_reset
    146  fb99		       20 fa f9 	      jsr	BugReset
    147  fb9c		       4c b1 fb 	      jmp	.swatter_collision_active
    148  fb9f
    149  fb9f				   .swatter_collision_p0
    150  fb9f
    151  fb9f		       a5 92		      lda	ScoreValue
    152  fba1		       c5 c4		      cmp	SwatterHitDamage
    153  fba3		       90 08		      bcc	.swatter_collision_p0_zero
    154  fba5		       f0 06		      beq	.swatter_collision_p0_zero
    155  fba7
    156  fba7		       18		      clc
    157  fba8		       e5 c4		      sbc	SwatterHitDamage
    158  fbaa		       4c af fb 	      jmp	.swatter_collision_p0_set
    159  fbad
    160  fbad				   .swatter_collision_p0_zero
    161  fbad		       a9 00		      lda	#0
    162  fbaf
    163  fbaf				   .swatter_collision_p0_set
    164  fbaf		       85 92		      sta	ScoreValue
    165  fbb1
    166  fbb1				   .swatter_collision_active
    167  fbb1		       20 1f fc 	      jsr	SwatterHitSample
    168  fbb4
    169  fbb4		       60		      rts
    170  fbb5
    171  fbb5				   SwatterPosition
    172  fbb5
    173  fbb5							; Set Position
    174  fbb5		       a2 01		      ldx	#1	; Object (player1)
    175  fbb7		       a5 bf		      lda	SwatterPos	; X Position
    176  fbb9		       20 00 f0 	      jsr	PosObject
    177  fbbc
    178  fbbc		       60		      rts
    179  fbbd
    180  fbbd							; Scanline Draw
    181  fbbd
    182  fbbd				   SwatterDrawStart
    183  fbbd
    184  fbbd							; Set player 1 to be quad size
    185  fbbd		       a5 82		      lda	NuSiz1
    186  fbbf		       29 f8		      and	#%11111000
    187  fbc1		       09 07		      ora	#%00000111
    188  fbc3		       85 82		      sta	NuSiz1
    189  fbc5		       85 05		      sta	NUSIZ1
    190  fbc7
    191  fbc7							; Set sprite color
    192  fbc7		       a5 c2		      lda	SwatterColor
    193  fbc9		       85 07		      sta	COLUP1
    194  fbcb
    195  fbcb							; Note: Doesn't need vertical delay
    196  fbcb
    197  fbcb							; Calculate starting position
    198  fbcb		       a5 c0		      lda	SwatterPos+1	; Y Position
    199  fbcd		       4a		      lsr
    200  fbce		       18		      clc
    201  fbcf		       69 14		      adc	#SWATTER_SPRITE_SIZE
    202  fbd1		       85 c6		      sta	SwatterDrawPos
    203  fbd3
    204  fbd3							; Initialize sprite index
    205  fbd3		       a9 00		      lda	#0
    206  fbd5		       85 c5		      sta	SwatterIndex
    207  fbd7		       85 c7		      sta	SwatterLine
    208  fbd9
    209  fbd9		       60		      rts
    210  fbda
    211  fbda				   SwatterClean
    212  fbda
    213  fbda							; Clear out Player1 sprite
    214  fbda		       a9 00		      lda	#0
    215  fbdc		       85 1c		      sta	GRP1
    216  fbde
    217  fbde		       60		      rts
    218  fbdf
    219  fbdf				   SwatterReset
    220  fbdf							; Initialize Swatter State
    221  fbdf		       a9 00		      lda	#SWATTER_STATE_WAIT
    222  fbe1		       85 c1		      sta	SwatterState
    223  fbe3
    224  fbe3							; Set Wait Timer
    225  fbe3		       20 13 f0 	      jsr	Random
    226  fbe6		       a5 85		      lda	Rand8
    227  fbe8		       29 3f		      and	#$3f
    228  fbea		       18		      clc
    229  fbeb		       65 c3		      adc	SwatterWaitTime
    230  fbed		       85 8f		      sta	FrameTimer+1
    231  fbef
    232  fbef							; Set Random Position
    233  fbef		       20 13 f0 	      jsr	Random
    234  fbf2		       a5 85		      lda	Rand8	; X Position
    235  fbf4		       29 7f		      and	#$7f
    236  fbf6		       85 bf		      sta	SwatterPos+0
    237  fbf8		       a5 86		      lda	Rand16	; Y Position
    238  fbfa		       29 7e		      and	#$7e	; Ensure that Y position is even
    239  fbfc		       85 c0		      sta	SwatterPos+1
    240  fbfe
    241  fbfe		       60		      rts
    242  fbff
    243  fbff				   SwatterHoldSample
    244  fbff		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    245  fc01		       85 91		      sta	SampleStep
    246  fc03		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    247  fc05		       85 16		      sta	AUDC1
    248  fc07		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    249  fc09		       85 1a		      sta	AUDV1
    250  fc0b
    251  fc0b		       84 18		      sty	AUDF1	; Store value of y as frequency
    252  fc0d
    253  fc0d		       60		      rts
    254  fc0e
    255  fc0e				   SwatterActiveSample
    256  fc0e		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    257  fc10		       85 91		      sta	SampleStep
    258  fc12		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    259  fc14		       85 16		      sta	AUDC1
    260  fc16		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    261  fc18		       85 18		      sta	AUDF1
    262  fc1a		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    263  fc1c		       85 1a		      sta	AUDV1
    264  fc1e		       60		      rts
    265  fc1f
    266  fc1f				   SwatterHitSample
    267  fc1f		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    268  fc21		       85 91		      sta	SampleStep
    269  fc23		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    270  fc25		       85 16		      sta	AUDC1
    271  fc27		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    272  fc29		       85 18		      sta	AUDF1
    273  fc2b		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    274  fc2d		       85 1a		      sta	AUDV1
    275  fc2f		       60		      rts
    276  fc30
    277  fc30							; Swatter Sprites
------- FILE objects/swatter_sprite.asm LEVEL 4 PASS 2
      0  fc30					      include	"objects/swatter_sprite.asm"
      1  fc30				   SwatterSprite
      2  fc30
      3  fc30		       3c		      .BYTE.b	%00111100
      4  fc31		       3c		      .BYTE.b	%00111100
      5  fc32		       56		      .BYTE.b	%01010110
      6  fc33		       6a		      .BYTE.b	%01101010
      7  fc34		       d5		      .BYTE.b	%11010101
      8  fc35		       ab		      .BYTE.b	%10101011
      9  fc36		       d5		      .BYTE.b	%11010101
     10  fc37		       ab		      .BYTE.b	%10101011
     11  fc38		       d5		      .BYTE.b	%11010101
     12  fc39		       ab		      .BYTE.b	%10101011
     13  fc3a		       d5		      .BYTE.b	%11010101
     14  fc3b		       ab		      .BYTE.b	%10101011
     15  fc3c		       56		      .BYTE.b	%01010110
     16  fc3d		       6a		      .BYTE.b	%01101010
     17  fc3e		       56		      .BYTE.b	%01010110
     18  fc3f		       6a		      .BYTE.b	%01101010
     19  fc40		       34		      .BYTE.b	%00110100
     20  fc41		       2c		      .BYTE.b	%00101100
     21  fc42		       34		      .BYTE.b	%00110100
     22  fc43		       18		      .BYTE.b	%00011000
------- FILE objects/swatter.asm
------- FILE game.asm
     22  fc44
     23  fc44							; Initialization
     24  fc44
     25  fc44				   GameInit
     26  fc44
     27  fc44							; Setup logic and kernel
      0  fc44					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fc44				   .POINTER   SET	VBlankPtr
      2  fc44				   .ADDRESS   SET	GameVerticalBlank
      3  fc44
      4  fc44		       a9 95		      LDA	#<.ADDRESS
      5  fc46		       85 87		      STA	.POINTER
      6  fc48		       a9 fc		      LDA	#>.ADDRESS
      7  fc4a		       85 88		      STA	.POINTER+1
      8  fc4c
      0  fc4c					      SET_POINTER	KernelPtr, GameKernel
      1  fc4c				   .POINTER   SET	KernelPtr
      2  fc4c				   .ADDRESS   SET	GameKernel
      3  fc4c
      4  fc4c		       a9 1b		      LDA	#<.ADDRESS
      5  fc4e		       85 89		      STA	.POINTER
      6  fc50		       a9 fd		      LDA	#>.ADDRESS
      7  fc52		       85 8a		      STA	.POINTER+1
      8  fc54
      0  fc54					      SET_POINTER	OverScanPtr, GameOverScan
      1  fc54				   .POINTER   SET	OverScanPtr
      2  fc54				   .ADDRESS   SET	GameOverScan
      3  fc54
      4  fc54		       a9 bf		      LDA	#<.ADDRESS
      5  fc56		       85 8b		      STA	.POINTER
      6  fc58		       a9 fc		      LDA	#>.ADDRESS
      7  fc5a		       85 8c		      STA	.POINTER+1
      8  fc5c
     31  fc5c
     32  fc5c							; Mute Audio
     33  fc5c		       a9 00		      lda	#0
     34  fc5e		       85 15		      sta	AUDC0
     35  fc60		       85 19		      sta	AUDV0
     36  fc62		       85 17		      sta	AUDF0
     37  fc64		       85 16		      sta	AUDC1
     38  fc66		       85 1a		      sta	AUDV1
     39  fc68		       85 18		      sta	AUDF1
     40  fc6a		       85 91		      sta	SampleStep
     41  fc6c
     42  fc6c							; Load Audio Settings
     43  fc6c		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fc6e		       85 19		      sta	AUDV0
     45  fc70
     46  fc70							; Make it so that we play the first note immediately
     47  fc70		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fc72		       85 90		      sta	AudioStep
     49  fc74		       a9 02		      lda	#2
     50  fc76		       85 8e		      sta	FrameTimer
     51  fc78
     52  fc78							; Reset NuSiz
     53  fc78		       a9 00		      lda	#0
     54  fc7a		       85 81		      sta	NuSiz0
     55  fc7c		       85 04		      sta	NUSIZ0
     56  fc7e		       85 82		      sta	NuSiz1
     57  fc80		       85 05		      sta	NUSIZ1
     58  fc82
     59  fc82							; Initialize Objects
     60  fc82		       20 e6 f4 	      jsr	LevelInit
     61  fc85		       20 40 f5 	      jsr	ScoreInit
     62  fc88		       20 a7 f6 	      jsr	SpiderInit
     63  fc8b		       20 48 f8 	      jsr	LineInit
     64  fc8e		       20 f1 f9 	      jsr	BugInit
     65  fc91		       20 1a fb 	      jsr	SwatterInit
     66  fc94
     67  fc94		       60		      rts
     68  fc95
     69  fc95				   GameVerticalBlank
     70  fc95
     71  fc95							; Refresh random values
     72  fc95		       20 13 f0 	      jsr	Random
     73  fc98
     74  fc98							; Update Objects
     75  fc98		       20 f7 f4 	      jsr	LevelUpdate
     76  fc9b		       20 b8 f6 	      jsr	SpiderUpdate
     77  fc9e		       20 5d f8 	      jsr	LineUpdate
     78  fca1		       20 12 fa 	      jsr	BugUpdate
     79  fca4		       20 1e fb 	      jsr	SwatterUpdate
     80  fca7		       20 49 f5 	      jsr	ScoreUpdate
     81  fcaa
     82  fcaa							; Reset Collisions
     83  fcaa		       85 2c		      sta	CXCLR
     84  fcac
     85  fcac							; Clear horizontal movement
     86  fcac		       85 2b		      sta	HMCLR
     87  fcae
     88  fcae							; Update Positions
     89  fcae		       20 c3 f7 	      jsr	SpiderPosition
     90  fcb1		       20 81 f9 	      jsr	LinePosition
     91  fcb4		       20 c5 fa 	      jsr	BugPosition
     92  fcb7		       20 b5 fb 	      jsr	SwatterPosition
     93  fcba
     94  fcba							; Set final x positions
     95  fcba		       85 02		      sta	WSYNC
     96  fcbc		       85 2a		      sta	HMOVE
     97  fcbe
     98  fcbe		       60		      rts
     99  fcbf
    100  fcbf				   GameOverScan
    101  fcbf
    102  fcbf							; Audio Routines
    103  fcbf		       20 dd fc 	      jsr	GameAudio
    104  fcc2		       20 c9 fc 	      jsr	GameSample
    105  fcc5
    106  fcc5							; State Routines
    107  fcc5		       20 11 fd 	      jsr	GameDeath
    108  fcc8
    109  fcc8		       60		      rts
    110  fcc9
    111  fcc9				   GameSample
    112  fcc9
    113  fcc9		       a6 91		      ldx	SampleStep
    114  fccb		       e0 00		      cpx	#0
    115  fccd		       f0 0b		      beq	.game_sample_return
    116  fccf
    117  fccf		       ca		      dex
    118  fcd0		       d0 08		      bne	.game_sample_return
    119  fcd2
    120  fcd2				   .game_sample_mute
    121  fcd2		       a9 00		      lda	#0
    122  fcd4		       85 1a		      sta	AUDV1
    123  fcd6		       85 18		      sta	AUDF1
    124  fcd8		       85 16		      sta	AUDC1
    125  fcda
    126  fcda				   .game_sample_return
    127  fcda		       86 91		      stx	SampleStep
    128  fcdc		       60		      rts
    129  fcdd
    130  fcdd				   GameAudio
    131  fcdd
    132  fcdd		       a6 8e		      ldx	FrameTimer
    133  fcdf		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    134  fce1		       f0 25		      beq	.game_audio_mute_note
    135  fce3		       e0 00		      cpx	#0
    136  fce5		       d0 29		      bne	.game_audio_return
    137  fce7
    138  fce7							; Reset Timer
    139  fce7		       a2 09		      ldx	#GAME_AUDIO_STEP
    140  fce9		       86 8e		      stx	FrameTimer
    141  fceb
    142  fceb				   .game_audio_play
    143  fceb
    144  fceb							; Increment melody position
    145  fceb		       a4 90		      ldy	AudioStep
    146  fced		       c8		      iny
    147  fcee
    148  fcee		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    149  fcf0		       d0 02		      bne	.game_audio_play_note
    150  fcf2
    151  fcf2							; Loop our audio step
    152  fcf2		       a0 00		      ldy	#0
    153  fcf4
    154  fcf4				   .game_audio_play_note
    155  fcf4
    156  fcf4							; Save current position
    157  fcf4		       84 90		      sty	AudioStep
    158  fcf6
    159  fcf6							; Melody Line
    160  fcf6		       b9 bc fe 	      lda	GameAudio0,y
    161  fcf9		       c9 ff		      cmp	#$FF
    162  fcfb		       f0 0b		      beq	.game_audio_mute_note
    163  fcfd		       85 17		      sta	AUDF0
    164  fcff		       a9 06		      lda	#GAME_AUDIO_TONE
    165  fd01		       85 15		      sta	AUDC0
    166  fd03		       a9 02		      lda	#GAME_AUDIO_VOLUME
    167  fd05		       85 19		      sta	AUDV0
    168  fd07
    169  fd07		       60		      rts
    170  fd08
    171  fd08				   .game_audio_mute_note
    172  fd08
    173  fd08		       a9 00		      lda	#0
    174  fd0a		       85 17		      sta	AUDF0
    175  fd0c		       85 15		      sta	AUDC0
    176  fd0e		       85 19		      sta	AUDV0
    177  fd10
    178  fd10				   .game_audio_return
    179  fd10		       60		      rts
    180  fd11
    181  fd11				   GameDeath
    182  fd11		       a5 92		      lda	ScoreValue+0
    183  fd13		       c9 00		      cmp	#0
    184  fd15		       d0 03		      bne	.game_death_return
    185  fd17
    186  fd17							; Show Game Over Screen
    187  fd17		       20 dc fe 	      jsr	OverInit
    188  fd1a
    189  fd1a				   .game_death_return
    190  fd1a		       60		      rts
    191  fd1b
    192  fd1b				   GameKernel
    193  fd1b
    194  fd1b							; Turn on display
    195  fd1b		       a9 00		      lda	#0
    196  fd1d		       85 01		      sta	VBLANK
    197  fd1f
    198  fd1f				   .game_kernel_score
    199  fd1f
    200  fd1f							; Draw Score on top first
    201  fd1f		       20 69 f5 	      jsr	ScoreDraw
    202  fd22
    203  fd22				   .game_kernel_objects_start
    204  fd22
    205  fd22							; Setup Drawing Objects
    206  fd22		       20 29 f6 	      jsr	WebDrawStart
    207  fd25		       20 cb f7 	      jsr	SpiderDrawStart
    208  fd28		       20 bd fb 	      jsr	SwatterDrawStart
    209  fd2b		       20 89 f9 	      jsr	LineDrawStart
    210  fd2e		       20 d4 fa 	      jsr	BugDrawStart
    211  fd31
    212  fd31							; Start Scanline Counter
    213  fd31		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    214  fd33							; The extra 5 is for processing overflow
    215  fd33
    216  fd33							; Half scanline counter in Temp+1
    217  fd33		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    218  fd35		       85 84		      sta	Temp+1
    219  fd37
    220  fd37				   .game_kernel_objects
    221  fd37
    222  fd37		       85 02		      sta	WSYNC
    223  fd39
    224  fd39				   .game_kernel_web
    225  fd39
    226  fd39							; Web
    227  fd39		       a4 9b		      ldy	WebIndex
    228  fd3b
    229  fd3b							; Load Image
    230  fd3b		       b9 4d f6 	      lda	WebImagePF0,y
    231  fd3e		       85 0d		      sta	PF0
    232  fd40		       b9 6b f6 	      lda	WebImagePF1,y
    233  fd43		       85 0e		      sta	PF1
    234  fd45		       b9 89 f6 	      lda	WebImagePF2,y
    235  fd48		       85 0f		      sta	PF2
    236  fd4a
    237  fd4a		       e6 9b		      inc	WebIndex
    238  fd4c
    239  fd4c				   .game_kernel_line_1
    240  fd4c							; Line (1st time)
    241  fd4c
    242  fd4c		       24 a9		      bit	LineEnabled
    243  fd4e		       10 10		      bpl	.game_kernel_line_1_skip
    244  fd50
    245  fd50							; Load half-line
    246  fd50		       a5 84		      lda	Temp+1
    247  fd52
    248  fd52		       a0 00		      ldy	#%00000000
    249  fd54
    250  fd54							; Top
    251  fd54		       c5 b1		      cmp	LineDrawPos+1
    252  fd56		       b0 06		      bcs	.game_kernel_line_1_off
    253  fd58
    254  fd58							; Bottom
    255  fd58		       c5 b0		      cmp	LineDrawPos+0
    256  fd5a		       90 02		      bcc	.game_kernel_line_1_off
    257  fd5c
    258  fd5c				   .game_kernel_line_1_on
    259  fd5c		       a0 02		      ldy	#%00000010
    260  fd5e
    261  fd5e				   .game_kernel_line_1_off
    262  fd5e		       84 1f		      sty	ENABL
    263  fd60
    264  fd60				   .game_kernel_line_1_skip
    265  fd60
    266  fd60		       ca		      dex
    267  fd61		       85 02		      sta	WSYNC
    268  fd63
    269  fd63				   .game_kernel_spider_1
    270  fd63							; Spider (1st time)
    271  fd63
    272  fd63		       a4 a4		      ldy	SpiderIndex
    273  fd65		       30 1a		      bmi	.game_kernel_spider_1_load	; At end of sprite
    274  fd67		       d0 06		      bne	.game_kernel_spider_1_draw	; Currently drawing (not zero)
    275  fd69
    276  fd69							; Check y position to see if we should start
    277  fd69		       a5 84		      lda	Temp+1	; Use half scanline
    278  fd6b		       e5 a5		      sbc	SpiderDrawPos
    279  fd6d		       10 12		      bpl	.game_kernel_spider_1_load
    280  fd6f
    281  fd6f				   .game_kernel_spider_1_draw
    282  fd6f		       b1 9e		      lda	(SpiderPtr),y
    283  fd71		       85 a6		      sta	SpiderLine
    284  fd73
    285  fd73							; Increment sprite index
    286  fd73		       e6 a4		      inc	SpiderIndex
    287  fd75
    288  fd75							; See if we're at the end
    289  fd75		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    290  fd77		       d0 0a		      bne	.game_kernel_spider_1_line
    291  fd79		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    292  fd7b		       84 a4		      sty	SpiderIndex
    293  fd7d		       a9 00		      lda	#0
    294  fd7f		       85 a6		      sta	SpiderLine
    295  fd81
    296  fd81				   .game_kernel_spider_1_load
    297  fd81		       a5 a6		      lda	SpiderLine
    298  fd83				   .game_kernel_spider_1_line
    299  fd83		       85 1b		      sta	GRP0
    300  fd85
    301  fd85				   .game_kernel_swatter_1
    302  fd85							; Swatter (1st time)
    303  fd85
    304  fd85							; Check if wait state
    305  fd85		       24 c1		      bit	SwatterState
    306  fd87		       10 1b		      bpl	.game_kernel_swatter_1_load
    307  fd89
    308  fd89		       a4 c5		      ldy	SwatterIndex
    309  fd8b		       30 17		      bmi	.game_kernel_swatter_1_load	; At end of sprite
    310  fd8d		       d0 06		      bne	.game_kernel_swatter_1_draw	; Currently drawing (not zero)
    311  fd8f
    312  fd8f							; Check y position to see if we should start
    313  fd8f		       a5 84		      lda	Temp+1	; Use half scanline
    314  fd91		       e5 c6		      sbc	SwatterDrawPos
    315  fd93		       10 0f		      bpl	.game_kernel_swatter_1_load
    316  fd95
    317  fd95				   .game_kernel_swatter_1_draw
    318  fd95		       b9 30 fc 	      lda	SwatterSprite,y
    319  fd98		       85 c7		      sta	SwatterLine
    320  fd9a
    321  fd9a							; Increment index
    322  fd9a		       e6 c5		      inc	SwatterIndex
    323  fd9c
    324  fd9c							; See if we're at the end
    325  fd9c		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    326  fd9e		       d0 06		      bne	.game_kernel_swatter_1_line
    327  fda0		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    328  fda2		       84 c5		      sty	SwatterIndex
    329  fda4
    330  fda4				   .game_kernel_swatter_1_load
    331  fda4		       a5 c7		      lda	SwatterLine
    332  fda6				   .game_kernel_swatter_1_line
    333  fda6		       85 1c		      sta	GRP1
    334  fda8
    335  fda8							; New line and decrement half scanline
    336  fda8		       c6 84		      dec	Temp+1
    337  fdaa		       ca		      dex
    338  fdab		       85 02		      sta	WSYNC
    339  fdad
    340  fdad							; Preload half-line
    341  fdad		       a5 84		      lda	Temp+1
    342  fdaf
    343  fdaf				   .game_kernel_line_2
    344  fdaf							; Line (2nd time)
    345  fdaf
    346  fdaf		       24 a9		      bit	LineEnabled
    347  fdb1		       10 0e		      bpl	.game_kernel_line_2_skip
    348  fdb3
    349  fdb3		       a0 00		      ldy	#%00000000
    350  fdb5
    351  fdb5							; Top
    352  fdb5		       c5 b1		      cmp	LineDrawPos+1
    353  fdb7		       b0 06		      bcs	.game_kernel_line_2_off
    354  fdb9
    355  fdb9							; Bottom
    356  fdb9		       c5 b0		      cmp	LineDrawPos+0
    357  fdbb		       90 02		      bcc	.game_kernel_line_2_off
    358  fdbd
    359  fdbd				   .game_kernel_line_2_on
    360  fdbd		       a0 02		      ldy	#%00000010
    361  fdbf
    362  fdbf				   .game_kernel_line_2_off
    363  fdbf		       84 1f		      sty	ENABL
    364  fdc1
    365  fdc1				   .game_kernel_line_2_skip
    366  fdc1
    367  fdc1				   .game_kernel_bug_1_0
    368  fdc1							; First Bug (1st time)
    369  fdc1
    370  fdc1		       a0 00		      ldy	#%00000000
    371  fdc3
    372  fdc3							; Top
    373  fdc3		       c5 bd		      cmp	BugDrawPosTop+0
    374  fdc5		       b0 06		      bcs	.game_kernel_bug_1_0_off
    375  fdc7
    376  fdc7							; Bottom
    377  fdc7		       c5 bb		      cmp	BugDrawPosBottom+0
    378  fdc9		       90 02		      bcc	.game_kernel_bug_1_0_off
    379  fdcb
    380  fdcb				   .game_kernel_bug_1_0_on
    381  fdcb		       a0 02		      ldy	#%00000010
    382  fdcd
    383  fdcd				   .game_kernel_bug_1_0_off
    384  fdcd		       84 1d		      sty	ENAM0
    385  fdcf
    386  fdcf				   .game_kernel_bug_1_1
    387  fdcf							; Second Bug (1st time)
    388  fdcf
    389  fdcf		       a0 00		      ldy	#%00000000
    390  fdd1
    391  fdd1							; Top
    392  fdd1		       c5 be		      cmp	BugDrawPosTop+1
    393  fdd3		       b0 06		      bcs	.game_kernel_bug_1_1_off
    394  fdd5
    395  fdd5							; Bottom
    396  fdd5		       c5 bc		      cmp	BugDrawPosBottom+1
    397  fdd7		       90 02		      bcc	.game_kernel_bug_1_1_off
    398  fdd9
    399  fdd9				   .game_kernel_bug_1_1_on
    400  fdd9		       a0 02		      ldy	#%00000010
    401  fddb
    402  fddb				   .game_kernel_bug_1_1_off
    403  fddb		       84 1e		      sty	ENAM1
    404  fddd
    405  fddd							; Next Line
    406  fddd		       ca		      dex
    407  fdde		       85 02		      sta	WSYNC
    408  fde0
    409  fde0				   .game_kernel_spider_2
    410  fde0							; Spider (2nd time)
    411  fde0
    412  fde0		       a4 a4		      ldy	SpiderIndex
    413  fde2		       30 1a		      bmi	.game_kernel_spider_2_load	; At end of sprite
    414  fde4		       d0 06		      bne	.game_kernel_spider_2_draw	; Currently drawing (not zero)
    415  fde6
    416  fde6							; Check y position to see if we should start
    417  fde6		       a5 84		      lda	Temp+1	; Use half scanline
    418  fde8		       e5 a5		      sbc	SpiderDrawPos
    419  fdea		       10 12		      bpl	.game_kernel_spider_2_load
    420  fdec
    421  fdec				   .game_kernel_spider_2_draw
    422  fdec		       b1 9e		      lda	(SpiderPtr),y
    423  fdee		       85 a6		      sta	SpiderLine
    424  fdf0
    425  fdf0							; Increment sprite index
    426  fdf0		       e6 a4		      inc	SpiderIndex
    427  fdf2
    428  fdf2							; See if we're at the end
    429  fdf2		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    430  fdf4		       d0 0a		      bne	.game_kernel_spider_2_line
    431  fdf6		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    432  fdf8		       84 a4		      sty	SpiderIndex
    433  fdfa		       a9 00		      lda	#0
    434  fdfc		       85 a6		      sta	SpiderLine
    435  fdfe
    436  fdfe				   .game_kernel_spider_2_load
    437  fdfe		       a5 a6		      lda	SpiderLine
    438  fe00				   .game_kernel_spider_2_line
    439  fe00		       85 1b		      sta	GRP0
    440  fe02
    441  fe02				   .game_kernel_swatter_2
    442  fe02							; Swatter (2nd time)
    443  fe02
    444  fe02							; Check if wait state
    445  fe02		       24 c1		      bit	SwatterState
    446  fe04		       10 1b		      bpl	.game_kernel_swatter_2_load
    447  fe06
    448  fe06		       a4 c5		      ldy	SwatterIndex
    449  fe08		       30 17		      bmi	.game_kernel_swatter_2_load	; At end of sprite
    450  fe0a		       d0 06		      bne	.game_kernel_swatter_2_draw	; Currently drawing (not zero)
    451  fe0c
    452  fe0c							; Check y position to see if we should start
    453  fe0c		       a5 84		      lda	Temp+1	; Use half scanline
    454  fe0e		       e5 c6		      sbc	SwatterDrawPos
    455  fe10		       10 0f		      bpl	.game_kernel_swatter_2_load
    456  fe12
    457  fe12				   .game_kernel_swatter_2_draw
    458  fe12		       b9 30 fc 	      lda	SwatterSprite,y
    459  fe15		       85 c7		      sta	SwatterLine
    460  fe17
    461  fe17							; Increment index
    462  fe17		       e6 c5		      inc	SwatterIndex
    463  fe19
    464  fe19							; See if we're at the end
    465  fe19		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    466  fe1b		       d0 06		      bne	.game_kernel_swatter_2_line
    467  fe1d		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    468  fe1f		       84 c5		      sty	SwatterIndex
    469  fe21
    470  fe21				   .game_kernel_swatter_2_load
    471  fe21		       a5 c7		      lda	SwatterLine
    472  fe23				   .game_kernel_swatter_2_line
    473  fe23		       85 1c		      sta	GRP1
    474  fe25
    475  fe25							; Next Line and half-line
    476  fe25		       c6 84		      dec	Temp+1
    477  fe27		       ca		      dex
    478  fe28		       85 02		      sta	WSYNC
    479  fe2a
    480  fe2a							; Preload half-line
    481  fe2a		       a5 84		      lda	Temp+1
    482  fe2c
    483  fe2c				   .game_kernel_line_3
    484  fe2c							; Line (3rd time)
    485  fe2c
    486  fe2c		       24 a9		      bit	LineEnabled
    487  fe2e		       10 0e		      bpl	.game_kernel_line_3_skip
    488  fe30
    489  fe30		       a0 00		      ldy	#%00000000
    490  fe32
    491  fe32							; Top
    492  fe32		       c5 b1		      cmp	LineDrawPos+1
    493  fe34		       b0 06		      bcs	.game_kernel_line_3_off
    494  fe36
    495  fe36							; Bottom
    496  fe36		       c5 b0		      cmp	LineDrawPos+0
    497  fe38		       90 02		      bcc	.game_kernel_line_3_off
    498  fe3a
    499  fe3a				   .game_kernel_line_3_on
    500  fe3a		       a0 02		      ldy	#%00000010
    501  fe3c
    502  fe3c				   .game_kernel_line_3_off
    503  fe3c		       84 1f		      sty	ENABL
    504  fe3e
    505  fe3e				   .game_kernel_line_3_skip
    506  fe3e
    507  fe3e				   .game_kernel_bug_2_0
    508  fe3e							; First Bug (2nd time)
    509  fe3e
    510  fe3e		       a0 00		      ldy	#%00000000
    511  fe40
    512  fe40							; Top
    513  fe40		       c5 bd		      cmp	BugDrawPosTop+0
    514  fe42		       b0 06		      bcs	.game_kernel_bug_2_0_off
    515  fe44
    516  fe44							; Bottom
    517  fe44		       c5 bb		      cmp	BugDrawPosBottom+0
    518  fe46		       90 02		      bcc	.game_kernel_bug_2_0_off
    519  fe48
    520  fe48				   .game_kernel_bug_2_0_on
    521  fe48		       a0 02		      ldy	#%00000010
    522  fe4a
    523  fe4a				   .game_kernel_bug_2_0_off
    524  fe4a		       84 1d		      sty	ENAM0
    525  fe4c
    526  fe4c				   .game_kernel_bug_2_1
    527  fe4c							; Second Bug (2nd time)
    528  fe4c
    529  fe4c		       a0 00		      ldy	#%00000000
    530  fe4e
    531  fe4e							; Top
    532  fe4e		       c5 be		      cmp	BugDrawPosTop+1
    533  fe50		       b0 06		      bcs	.game_kernel_bug_2_1_off
    534  fe52
    535  fe52							; Bottom
    536  fe52		       c5 bc		      cmp	BugDrawPosBottom+1
    537  fe54		       90 02		      bcc	.game_kernel_bug_2_1_off
    538  fe56
    539  fe56				   .game_kernel_bug_2_1_on
    540  fe56		       a0 02		      ldy	#%00000010
    541  fe58
    542  fe58				   .game_kernel_bug_2_1_off
    543  fe58		       84 1e		      sty	ENAM1
    544  fe5a
    545  fe5a							; Next Line
    546  fe5a		       ca		      dex
    547  fe5b		       85 02		      sta	WSYNC
    548  fe5d
    549  fe5d				   .game_kernel_spider_3
    550  fe5d							; Spider (3rd time)
    551  fe5d
    552  fe5d		       a4 a4		      ldy	SpiderIndex
    553  fe5f		       30 1a		      bmi	.game_kernel_spider_3_load	; At end of sprite
    554  fe61		       d0 06		      bne	.game_kernel_spider_3_draw	; Currently drawing (not zero)
    555  fe63
    556  fe63							; Check y position to see if we should start
    557  fe63		       a5 84		      lda	Temp+1	; Use half scanline
    558  fe65		       e5 a5		      sbc	SpiderDrawPos
    559  fe67		       10 12		      bpl	.game_kernel_spider_3_load
    560  fe69
    561  fe69				   .game_kernel_spider_3_draw
    562  fe69		       b1 9e		      lda	(SpiderPtr),y
    563  fe6b		       85 a6		      sta	SpiderLine
    564  fe6d
    565  fe6d							; Increment sprite index
    566  fe6d		       e6 a4		      inc	SpiderIndex
    567  fe6f
    568  fe6f							; See if we're at the end
    569  fe6f		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    570  fe71		       d0 0a		      bne	.game_kernel_spider_3_line
    571  fe73		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    572  fe75		       84 a4		      sty	SpiderIndex
    573  fe77		       a9 00		      lda	#0
    574  fe79		       85 a6		      sta	SpiderLine
    575  fe7b
    576  fe7b				   .game_kernel_spider_3_load
    577  fe7b		       a5 a6		      lda	SpiderLine
    578  fe7d				   .game_kernel_spider_3_line
    579  fe7d		       85 1b		      sta	GRP0
    580  fe7f
    581  fe7f				   .game_kernel_spider_3_skip
    582  fe7f
    583  fe7f				   .game_kernel_swatter_3
    584  fe7f							; Swatter (3rd time)
    585  fe7f
    586  fe7f							; Check if wait state
    587  fe7f		       24 c1		      bit	SwatterState
    588  fe81		       10 1b		      bpl	.game_kernel_swatter_3_load
    589  fe83
    590  fe83		       a4 c5		      ldy	SwatterIndex
    591  fe85		       30 17		      bmi	.game_kernel_swatter_3_load	; At end of sprite
    592  fe87		       d0 06		      bne	.game_kernel_swatter_3_draw	; Currently drawing (not zero)
    593  fe89
    594  fe89							; Check y position to see if we should start
    595  fe89		       a5 84		      lda	Temp+1	; Use half scanline
    596  fe8b		       e5 c6		      sbc	SwatterDrawPos
    597  fe8d		       10 0f		      bpl	.game_kernel_swatter_3_load
    598  fe8f
    599  fe8f				   .game_kernel_swatter_3_draw
    600  fe8f		       b9 30 fc 	      lda	SwatterSprite,y
    601  fe92		       85 c7		      sta	SwatterLine
    602  fe94
    603  fe94							; Increment index
    604  fe94		       e6 c5		      inc	SwatterIndex
    605  fe96
    606  fe96							; See if we're at the end
    607  fe96		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    608  fe98		       d0 06		      bne	.game_kernel_swatter_3_line
    609  fe9a		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    610  fe9c		       84 c5		      sty	SwatterIndex
    611  fe9e
    612  fe9e				   .game_kernel_swatter_3_load
    613  fe9e		       a5 c7		      lda	SwatterLine
    614  fea0				   .game_kernel_swatter_3_line
    615  fea0		       85 1c		      sta	GRP1
    616  fea2
    617  fea2				   .game_kernel_swatter_3_skip
    618  fea2
    619  fea2							; New line and decrement half scanline
    620  fea2		       c6 84		      dec	Temp+1
    621  fea4		       ca		      dex
    622  fea5		       f0 03		      beq	.game_kernel_clean
    623  fea7		       4c 37 fd 	      jmp	.game_kernel_objects
    624  feaa
    625  feaa				   .game_kernel_clean
    626  feaa
    627  feaa		       20 40 f6 	      jsr	WebClean
    628  fead		       20 f3 f7 	      jsr	SpiderClean
    629  feb0		       20 a9 f9 	      jsr	LineClean
    630  feb3		       20 f1 fa 	      jsr	BugClean
    631  feb6		       20 da fb 	      jsr	SwatterClean
    632  feb9
    633  feb9		       85 02		      sta	WSYNC
    634  febb
    635  febb				   .game_kernel_return
    636  febb		       60		      rts
    637  febc
    638  febc				   GameAudio0
    639  febc		       0d		      .byte.b	#13	; D
    640  febd		       ff		      .byte.b	#$FF
    641  febe		       0f		      .byte.b	#15	; B
    642  febf		       ff		      .byte.b	#$FF
    643  fec0		       0d		      .byte.b	#13	; D
    644  fec1		       ff		      .byte.b	#$FF
    645  fec2		       0f		      .byte.b	#15	; B
    646  fec3		       ff		      .byte.b	#$FF
    647  fec4		       0d		      .byte.b	#13	; D
    648  fec5		       0d		      .byte.b	#13	; D
    649  fec6		       0f		      .byte.b	#15	; B
    650  fec7		       ff		      .byte.b	#$FF
    651  fec8		       0c		      .byte.b	#12	; D#
    652  fec9		       ff		      .byte.b	#$FF
    653  feca		       0f		      .byte.b	#15	; B
    654  fecb		       ff		      .byte.b	#$FF
    655  fecc		       0b		      .byte.b	#11	; E
    656  fecd		       ff		      .byte.b	#$FF
    657  fece		       0e		      .byte.b	#14	; C#
    658  fecf		       ff		      .byte.b	#$FF
    659  fed0		       0b		      .byte.b	#11
    660  fed1		       ff		      .byte.b	#$FF
    661  fed2		       0e		      .byte.b	#14
    662  fed3		       ff		      .byte.b	#$FF
    663  fed4		       0b		      .byte.b	#11
    664  fed5		       0b		      .byte.b	#11
    665  fed6		       0e		      .byte.b	#14
    666  fed7		       ff		      .byte.b	#$FF
    667  fed8		       0b		      .byte.b	#11
    668  fed9		       ff		      .byte.b	#$FF
    669  feda		       0e		      .byte.b	#14
    670  fedb		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fedc					      include	"over.asm"
      1  fedc							;================
      2  fedc							; Constants
      3  fedc							;================
      4  fedc
      5  fedc		       00 dc	   OVER_FRAMES =	220
      6  fedc
      7  fedc		       00 00	   OVER_BG_COLOR =	#$00
      8  fedc		       00 44	   OVER_FG_COLOR =	#$44
      9  fedc
     10  fedc		       00 07	   OVER_AUDIO_TONE =	7
     11  fedc		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fedc		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fedc		       00 10	   OVER_AUDIO_STEP =	16
     14  fedc
     15  fedc		       00 09	   OVER_IMAGE_SIZE =	9
     16  fedc		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fedc		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fedc		       00 35	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fedc
     20  fedc				   OverInit
     21  fedc
     22  fedc							; Setup logic and kernel
      0  fedc					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fedc				   .POINTER   SET	VBlankPtr
      2  fedc				   .ADDRESS   SET	OverVerticalBlank
      3  fedc
      4  fedc		       a9 1e		      LDA	#<.ADDRESS
      5  fede		       85 87		      STA	.POINTER
      6  fee0		       a9 ff		      LDA	#>.ADDRESS
      7  fee2		       85 88		      STA	.POINTER+1
      8  fee4
      0  fee4					      SET_POINTER	KernelPtr, OverKernel
      1  fee4				   .POINTER   SET	KernelPtr
      2  fee4				   .ADDRESS   SET	OverKernel
      3  fee4
      4  fee4		       a9 5c		      LDA	#<.ADDRESS
      5  fee6		       85 89		      STA	.POINTER
      6  fee8		       a9 ff		      LDA	#>.ADDRESS
      7  feea		       85 8a		      STA	.POINTER+1
      8  feec
      0  feec					      SET_POINTER	OverScanPtr, OverOverScan
      1  feec				   .POINTER   SET	OverScanPtr
      2  feec				   .ADDRESS   SET	OverOverScan
      3  feec
      4  feec		       a9 22		      LDA	#<.ADDRESS
      5  feee		       85 8b		      STA	.POINTER
      6  fef0		       a9 ff		      LDA	#>.ADDRESS
      7  fef2		       85 8c		      STA	.POINTER+1
      8  fef4
     26  fef4
     27  fef4							; Load Colors
     28  fef4		       a9 00		      lda	#OVER_BG_COLOR
     29  fef6		       85 09		      sta	COLUBK
     30  fef8		       a9 44		      lda	#OVER_FG_COLOR
     31  fefa		       85 08		      sta	COLUPF
     32  fefc
     33  fefc							; Load audio settings
     34  fefc		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fefe		       85 15		      sta	AUDC0
     36  ff00		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  ff02		       85 19		      sta	AUDV0
     38  ff04		       a9 00		      lda	#0
     39  ff06		       85 16		      sta	AUDC1
     40  ff08		       85 1a		      sta	AUDV1
     41  ff0a		       a9 00		      lda	#0
     42  ff0c		       85 90		      sta	AudioStep
     43  ff0e
     44  ff0e							; Play first note
     45  ff0e		       ad ae ff 	      lda	OverAudio0,AudioStep
     46  ff11		       85 17		      sta	AUDF0
     47  ff13
     48  ff13							; Setup frame counters
     49  ff13		       a9 00		      lda	#0
     50  ff15		       85 8d		      sta	Frame
     51  ff17		       a9 10		      lda	#OVER_AUDIO_STEP
     52  ff19		       85 8e		      sta	FrameTimer
     53  ff1b		       85 84		      sta	Temp+1
     54  ff1d
     55  ff1d		       60		      rts
     56  ff1e
     57  ff1e				   OverVerticalBlank
     58  ff1e		       20 49 f5 	      jsr	ScoreUpdate
     59  ff21		       60		      rts
     60  ff22
     61  ff22				   OverOverScan
     62  ff22		       20 29 ff 	      jsr	OverAudio
     63  ff25		       20 52 ff 	      jsr	OverState
     64  ff28		       60		      rts
     65  ff29
     66  ff29				   OverAudio
     67  ff29
     68  ff29		       a6 8e		      ldx	FrameTimer
     69  ff2b		       e0 00		      cpx	#0
     70  ff2d		       d0 22		      bne	.over_audio_return
     71  ff2f
     72  ff2f							; Reset Timer
     73  ff2f		       a6 84		      ldx	Temp+1
     74  ff31					      REPEAT	3
     75  ff31		       e8		      inx
     74  ff31					      REPEND
     75  ff32		       e8		      inx
     74  ff32					      REPEND
     75  ff33		       e8		      inx
     76  ff34					      REPEND
     77  ff34		       86 8e		      stx	FrameTimer
     78  ff36		       86 84		      stx	Temp+1
     79  ff38
     80  ff38				   .over_audio_play
     81  ff38
     82  ff38							; Increment melody position
     83  ff38		       a4 90		      ldy	AudioStep
     84  ff3a		       c8		      iny
     85  ff3b
     86  ff3b		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  ff3d		       f0 0c		      beq	.over_audio_mute_note
     88  ff3f
     89  ff3f				   .over_audio_play_note
     90  ff3f
     91  ff3f							; Save current position
     92  ff3f		       84 90		      sty	AudioStep
     93  ff41
     94  ff41							; Melody Line
     95  ff41		       b9 ae ff 	      lda	OverAudio0,y
     96  ff44		       85 17		      sta	AUDF0
     97  ff46		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  ff48		       85 19		      sta	AUDV0
     99  ff4a
    100  ff4a		       60		      rts
    101  ff4b
    102  ff4b				   .over_audio_mute_note
    103  ff4b		       a9 00		      lda	#0
    104  ff4d		       85 17		      sta	AUDF0
    105  ff4f		       85 19		      sta	AUDV0
    106  ff51
    107  ff51				   .over_audio_return
    108  ff51		       60		      rts
    109  ff52
    110  ff52				   OverState
    111  ff52		       a5 8d		      lda	Frame
    112  ff54		       c9 dc		      cmp	#OVER_FRAMES
    113  ff56		       d0 03		      bne	.over_state_return
    114  ff58
    115  ff58		       20 5f f2 	      jsr	TitleInit
    116  ff5b
    117  ff5b				   .over_state_return
    118  ff5b		       60		      rts
    119  ff5c
    120  ff5c				   OverKernel
    121  ff5c
    122  ff5c							; Turn on display
    123  ff5c		       a9 00		      lda	#0
    124  ff5e		       85 01		      sta	VBLANK
    125  ff60
    126  ff60				   .over_kernel_score
    127  ff60
    128  ff60							; Draw Score on top first (no update)
    129  ff60		       20 69 f5 	      jsr	ScoreDraw
    130  ff63
    131  ff63				   .over_kernel_init
    132  ff63							; Playfield Control
    133  ff63		       a5 80		      lda	CtrlPf
    134  ff65		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  ff67		       09 01		      ora	#%00000001	; Set mirroring
    136  ff69		       85 80		      sta	CtrlPf
    137  ff6b		       85 0a		      sta	CTRLPF
    138  ff6d
    139  ff6d				   .over_kernel_top_padding
    140  ff6d							; Top Padding
    141  ff6d		       20 8c ff 	      jsr	OverPadding
    142  ff70
    143  ff70				   .over_kernel_image
    144  ff70		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  ff72
    146  ff72				   .over_kernel_image_next
    147  ff72		       bd a5 ff 	      lda	OverImagePF2,x
    148  ff75		       85 0f		      sta	PF2
    149  ff77		       bd 9c ff 	      lda	OverImagePF1,x
    150  ff7a		       85 0e		      sta	PF1
    151  ff7c							;    lda OverImagePF0,x
    152  ff7c							;    sta PF0
    153  ff7c
    154  ff7c		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  ff7e				   .over_kernel_image_loop
    156  ff7e		       85 02		      sta	WSYNC
    157  ff80		       88		      dey
    158  ff81		       d0 fb		      bne	.over_kernel_image_loop
    159  ff83
    160  ff83		       ca		      dex
    161  ff84		       10 ec		      bpl	.over_kernel_image_next
    162  ff86
    163  ff86				   .over_kernel_bottom_padding
    164  ff86							; Bottom Padding
    165  ff86		       20 8c ff 	      jsr	OverPadding
    166  ff89
    167  ff89				   .over_kernel_return
    168  ff89		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  ff8b		       60		      rts
    170  ff8c
    171  ff8c				   OverPadding
    172  ff8c		       a9 00		      lda	#0
    173  ff8e		       85 0d		      sta	PF0
    174  ff90		       85 0e		      sta	PF1
    175  ff92		       85 0f		      sta	PF2
    176  ff94
    177  ff94		       a2 35		      ldx	#OVER_IMAGE_PADDING
    178  ff96				   .over_padding_loop
    179  ff96		       85 02		      sta	WSYNC
    180  ff98		       ca		      dex
    181  ff99		       d0 fb		      bne	.over_padding_loop
    182  ff9b
    183  ff9b		       60		      rts
    184  ff9c
    185  ff9c				   OverAssets
    186  ff9c
    187  ff9c							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ff9c					      include	"over_image.asm"
      1  ff9c							;OverImagePF0:
      2  ff9c							;    .BYTE %00000000
      3  ff9c							;    .BYTE %00000000
      4  ff9c							;    .BYTE %00000000
      5  ff9c							;    .BYTE %00000000
      6  ff9c							;    .BYTE %00000000
      7  ff9c							;    .BYTE %00000000
      8  ff9c							;    .BYTE %00000000
      9  ff9c							;    .BYTE %00000000
     10  ff9c							;    .BYTE %00000000
     11  ff9c
     12  ff9c				   OverImagePF1
     13  ff9c		       0c		      .BYTE.b	%00001100
     14  ff9d		       13		      .BYTE.b	%00010011
     15  ff9e		       20		      .BYTE.b	%00100000
     16  ff9f		       23		      .BYTE.b	%00100011
     17  ffa0		       24		      .BYTE.b	%00100100
     18  ffa1		       24		      .BYTE.b	%00100100
     19  ffa2		       12		      .BYTE.b	%00010010
     20  ffa3		       10		      .BYTE.b	%00010000
     21  ffa4		       08		      .BYTE.b	%00001000
     22  ffa5
     23  ffa5				   OverImagePF2
     24  ffa5		       e0		      .BYTE.b	%11100000
     25  ffa6		       18		      .BYTE.b	%00011000
     26  ffa7		       05		      .BYTE.b	%00000101
     27  ffa8		       52		      .BYTE.b	%01010010
     28  ffa9		       23		      .BYTE.b	%00100011
     29  ffaa		       52		      .BYTE.b	%01010010
     30  ffab		       04		      .BYTE.b	%00000100
     31  ffac		       18		      .BYTE.b	%00011000
     32  ffad		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  ffae
    190  ffae				   OverAudio0
    191  ffae
    192  ffae		       0c		      .BYTE.b	#12	; D#2
    193  ffaf		       0d		      .BYTE.b	#13	; D2
    194  ffb0		       11		      .BYTE.b	#17	; A1
    195  ffb1		       16		      .BYTE.b	#22	; F1
    196  ffb2		       1a		      .BYTE.b	#26	; D1
    197  ffb3		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    311  ffb4
    312  ffb4							;================
    313  ffb4							; End of cart
    314  ffb4							;================
    315  ffb4
    316  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    317  fffa
    318  fffa				   InterruptVectors
    319  fffa
    320  fffa		       21 f0		      .word.w	InitSystem	; NMI
    321  fffc		       21 f0		      .word.w	InitSystem	; RESET
    322  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    323  10000
    324  10000					       END
