------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00ba ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00	   FrameTimer ds	1
     70 U008f
     71 U008f		       00	   AudioStep  ds	1
     72 U0090
     73 U0090		       00	   SampleStep ds	1
     74 U0091
     75 U0091							; Score
     76 U0091
     77 U0091		       00 00	   ScoreValue ds	2
     78 U0093		       00 00	   ScoreDigitOnes ds	2
     79 U0095		       00 00	   ScoreDigitTens ds	2
     80 U0097		       00 00	   ScoreGfx   ds	2
     81 U0099
     82 U0099							; Web
     83 U0099
     84 U0099		       00	   WebIndex   ds	1
     85 U009a		       00	   WebDir     ds	1
     86 U009b
     87 U009b							; Spider
     88 U009b
     89 U009b		       00 00	   SpiderPtr  ds	2
     90 U009d		       00 00	   SpiderPos  ds	2
     91 U009f		       00	   SpiderCtrl ds	1
     92 U00a0		       00	   SpiderColor ds	1
     93 U00a1
     94 U00a1		       00	   SpiderIndex ds	1
     95 U00a2		       00	   SpiderDrawPos ds	1
     96 U00a3
     97 U00a3		       00 00	   SpiderPtr2 ds	2
     98 U00a5
     99 U00a5							; Line
    100 U00a5
    101 U00a5		       00	   LineEnabled ds	1
    102 U00a6		       00 00	   LinePos    ds	2
    103 U00a8		       00 00	   LineVelocity ds	2
    104 U00aa		       00 00	   LineStartPos ds	2
    105 U00ac		       00 00	   LineDrawPos ds	2
    106 U00ae
    107 U00ae							; Bug
    108 U00ae
    109 U00ae		       00 00	   BugStunned ds	2
    110 U00b0		       00 00	   BugPosX    ds	2
    111 U00b2		       00 00	   BugPosY    ds	2
    112 U00b4		       00 00	   BugColor   ds	2
    113 U00b6
    114 U00b6		       00 00	   BugDrawPosBottom ds	2
    115 U00b8		       00 00	   BugDrawPosTop ds	2
    116 U00ba
    117  10000 ????				       SEG
    118  f000					      org	$F000	; Start of cart area
    119  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    121  f021
    122  f021				   InitSystem
    123  f021
    124  f021				   .init_clean
    125  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    127  f02c
    128  f02c				   .init_tia
    129  f02c							; Define default TIA register values
    130  f02c
    131  f02c							; Initialize copies
    132  f02c		       a9 00		      lda	#0
    133  f02e		       85 80		      sta	CtrlPf
    134  f030		       85 81		      sta	NuSiz0
    135  f032		       85 82		      sta	NuSiz1
    136  f034
    137  f034							; Set background color
    138  f034		       a9 00		      lda	#$00	; Black
    139  f036		       85 09		      sta	COLUBK
    140  f038
    141  f038							; Set the playfield and player color
    142  f038		       a9 0e		      lda	#$0E	; White
    143  f03a		       85 08		      sta	COLUPF
    144  f03c		       85 06		      sta	COLUP0
    145  f03e		       85 07		      sta	COLUP1
    146  f040
    147  f040							; Playfield Control
    148  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    149  f042		       85 80		      sta	CtrlPf
    150  f044		       85 0a		      sta	CTRLPF
    151  f046
    152  f046							; Disable Game Elements
    153  f046		       a9 00		      lda	#$00
    154  f048		       85 1f		      sta	ENABL	; Turn off ball
    155  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    156  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    157  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    158  f050		       85 1c		      sta	GRP1	; Turn off player 2
    159  f052
    160  f052							; Empty playfield
    161  f052		       a9 00		      lda	#%00000000
    162  f054		       85 0d		      sta	PF0
    163  f056		       85 0e		      sta	PF1
    164  f058		       85 0f		      sta	PF2
    165  f05a
    166  f05a				   .init_seed
    167  f05a							; Seed the random number generator
    168  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    169  f05d		       85 85		      sta	Rand8	; Use as seed
    170  f05f		       49 ff		      eor	#$FF	; Flip bits
    171  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    172  f063
    173  f063				   .init_game
    174  f063
    175  f063		       20 c9 f0 	      jsr	LogoInit
    176  f066
    177  f066							;=======================================
    178  f066							; Game Kernel
    179  f066							;=======================================
    180  f066
    181  f066				   Main
    182  f066
    183  f066		       20 75 f0 	      jsr	VerticalSync
    184  f069		       20 8c f0 	      jsr	VerticalBlank
    185  f06c		       20 9f f0 	      jsr	Kernel
    186  f06f		       20 a6 f0 	      jsr	OverScan
    187  f072		       4c 66 f0 	      jmp	Main
    188  f075
    189  f075				   VerticalSync
    190  f075
    191  f075		       a9 00		      lda	#0
    192  f077		       85 01		      sta	VBLANK
    193  f079
    194  f079							; Turn on Vertical Sync signal and setup timer
    195  f079		       a9 02		      lda	#2
    196  f07b		       85 00		      sta	VSYNC
    197  f07d
    198  f07d							; Increment frame count and reduce frame counter
    199  f07d		       e6 8d		      inc	Frame
    200  f07f		       c6 8e		      dec	FrameTimer
    201  f081
    202  f081							; VSYNCH signal scanlines
    203  f081					      REPEAT	#KERNEL_VSYNC
    204  f081		       85 02		      sta	WSYNC
    203  f081					      REPEND
    204  f083		       85 02		      sta	WSYNC
    203  f083					      REPEND
    204  f085		       85 02		      sta	WSYNC
    205  f087					      REPEND
    206  f087
    207  f087							; Turn off Vertical Sync signal
    208  f087		       a9 00		      lda	#0
    209  f089		       85 00		      sta	VSYNC
    210  f08b
    211  f08b				   .vsync_return
    212  f08b		       60		      rts
    213  f08c
    214  f08c				   VerticalBlank
    215  f08c							; Setup Timer
    216  f08c		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    217  f08e		       8d 96 02 	      sta	TIM64T
    218  f091
    219  f091				   .vblank_logic
    220  f091							; Perform Game Logic
    221  f091		       20 9c f0 	      jsr	.vblank_logic_call_ptr
    222  f094
    223  f094				   .vblank_loop
    224  f094							; WSYNC until Timer is complete
    225  f094		       85 02		      sta	WSYNC
    226  f096		       ad 84 02 	      lda	INTIM
    227  f099		       d0 f9		      bne	.vblank_loop
    228  f09b
    229  f09b				   .vblank_return
    230  f09b		       60		      rts
    231  f09c
    232  f09c				   .vblank_logic_call_ptr
    233  f09c		       6c 87 00 	      jmp	(VBlankPtr)
    234  f09f
    235  f09f				   Kernel
    236  f09f
    237  f09f							; Perform Selected Kernel
    238  f09f		       20 a3 f0 	      jsr	.kernel_call_ptr
    239  f0a2		       60		      rts
    240  f0a3
    241  f0a3				   .kernel_call_ptr
    242  f0a3		       6c 89 00 	      jmp	(KernelPtr)
    243  f0a6
    244  f0a6				   OverScan
    245  f0a6
    246  f0a6							; End of screen, enter blanking
    247  f0a6		       a9 42		      lda	#%01000010
    248  f0a8		       85 01		      sta	VBLANK
    249  f0aa
    250  f0aa							; Setup Timer
    251  f0aa		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    252  f0ac		       8d 96 02 	      sta	TIM64T
    253  f0af
    254  f0af							;.overscan_reset:
    255  f0af							; Check for reset switch
    256  f0af		       ad 82 02 	      lda	SWCHB
    257  f0b2		       4a		      lsr		; Push D0 to carry (C)
    258  f0b3		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    259  f0b5
    260  f0b5							; Perform reset
    261  f0b5		       20 c9 f0 	      jsr	LogoInit	; No need for logic
    262  f0b8		       4c be f0 	      jmp	.overscan_loop
    263  f0bb
    264  f0bb				   .overscan_logic
    265  f0bb							; Perform OverScan Logic
    266  f0bb		       20 c6 f0 	      jsr	.overscan_logic_call_ptr
    267  f0be
    268  f0be				   .overscan_loop
    269  f0be							; WSYNC until Timer is complete
    270  f0be		       85 02		      sta	WSYNC
    271  f0c0		       ad 84 02 	      lda	INTIM
    272  f0c3		       d0 f9		      bne	.overscan_loop
    273  f0c5
    274  f0c5				   .overscan_return
    275  f0c5		       60		      rts
    276  f0c6
    277  f0c6				   .overscan_logic_call_ptr
    278  f0c6		       6c 8b 00 	      jmp	(OverScanPtr)
    279  f0c9
    280  f0c9							;================
    281  f0c9							; State Code
    282  f0c9							;================
    283  f0c9
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0c9					      include	"logo.asm"
      1  f0c9							;================
      2  f0c9							; Constants
      3  f0c9							;================
      4  f0c9
      5  f0c9		       00 b4	   LOGO_FRAMES =	180
      6  f0c9
      7  f0c9		       00 00	   LOGO_BG_COLOR =	#$00
      8  f0c9		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f0c9
     10  f0c9		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0c9		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0c9		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0c9		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0c9		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0c9		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0c9
     17  f0c9		       00 10	   LOGO_IMAGE_SIZE =	16
     18  f0c9		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     19  f0c9		       00 50	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     20  f0c9		       00 38	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     21  f0c9
     22  f0c9				   LogoInit
     23  f0c9
     24  f0c9							; Setup logic and kernel
      0  f0c9					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0c9				   .POINTER   SET	VBlankPtr
      2  f0c9				   .ADDRESS   SET	LogoVerticalBlank
      3  f0c9
      4  f0c9		       a9 14		      LDA	#<.ADDRESS
      5  f0cb		       85 87		      STA	.POINTER
      6  f0cd		       a9 f1		      LDA	#>.ADDRESS
      7  f0cf		       85 88		      STA	.POINTER+1
      8  f0d1
      0  f0d1					      SET_POINTER	KernelPtr, LogoKernel
      1  f0d1				   .POINTER   SET	KernelPtr
      2  f0d1				   .ADDRESS   SET	LogoKernel
      3  f0d1
      4  f0d1		       a9 65		      LDA	#<.ADDRESS
      5  f0d3		       85 89		      STA	.POINTER
      6  f0d5		       a9 f1		      LDA	#>.ADDRESS
      7  f0d7		       85 8a		      STA	.POINTER+1
      8  f0d9
      0  f0d9					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0d9				   .POINTER   SET	OverScanPtr
      2  f0d9				   .ADDRESS   SET	LogoOverScan
      3  f0d9
      4  f0d9		       a9 18		      LDA	#<.ADDRESS
      5  f0db		       85 8b		      STA	.POINTER
      6  f0dd		       a9 f1		      LDA	#>.ADDRESS
      7  f0df		       85 8c		      STA	.POINTER+1
      8  f0e1
     28  f0e1
     29  f0e1							; Load Colors
     30  f0e1		       a9 00		      lda	#LOGO_BG_COLOR
     31  f0e3		       85 09		      sta	COLUBK
     32  f0e5		       a9 c6		      lda	#LOGO_FG_COLOR
     33  f0e7		       85 08		      sta	COLUPF
     34  f0e9
     35  f0e9							; Load audio settings
     36  f0e9		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     37  f0eb		       85 15		      sta	AUDC0
     38  f0ed		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     39  f0ef		       85 19		      sta	AUDV0
     40  f0f1		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     41  f0f3		       85 16		      sta	AUDC1
     42  f0f5		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     43  f0f7		       85 1a		      sta	AUDV1
     44  f0f9		       a9 00		      lda	#0
     45  f0fb		       85 8f		      sta	AudioStep
     46  f0fd
     47  f0fd							; Play first note
     48  f0fd		       ad 32 f2 	      lda	LogoAudio0,AudioStep
     49  f100		       85 17		      sta	AUDF0
     50  f102		       ad 3e f2 	      lda	LogoAudio1,AudioStep
     51  f105		       85 18		      sta	AUDF1
     52  f107
     53  f107							; Setup frame counters
     54  f107		       a9 00		      lda	#0
     55  f109		       85 8d		      sta	Frame
     56  f10b		       a9 b4		      lda	#LOGO_FRAMES
     57  f10d		       85 8e		      sta	FrameTimer
     58  f10f
     59  f10f							; Setup Image Animation
     60  f10f		       a9 22		      lda	#(LOGO_IMAGE_SIZE+1)*2
     61  f111		       85 99		      sta	WebIndex
     62  f113
     63  f113		       60		      rts
     64  f114
     65  f114				   LogoVerticalBlank
     66  f114		       20 1f f1 	      jsr	LogoAnimation
     67  f117		       60		      rts
     68  f118
     69  f118				   LogoOverScan
     70  f118		       20 30 f1 	      jsr	LogoAudio
     71  f11b		       20 5b f1 	      jsr	LogoState
     72  f11e		       60		      rts
     73  f11f
     74  f11f				   LogoAnimation
     75  f11f		       a5 8d		      lda	Frame
     76  f121		       29 03		      and	#%00000011	; Every 4 when bits are 00
     77  f123		       d0 0a		      bne	.logo_animation_return
     78  f125
     79  f125		       a6 99		      ldx	WebIndex
     80  f127		       e0 00		      cpx	#0
     81  f129		       f0 04		      beq	.logo_animation_return
     82  f12b
     83  f12b							; Add another visible line
     84  f12b		       ca		      dex
     85  f12c		       ca		      dex
     86  f12d		       86 99		      stx	WebIndex
     87  f12f
     88  f12f				   .logo_animation_return
     89  f12f		       60		      rts
     90  f130
     91  f130				   LogoAudio
     92  f130
     93  f130		       a5 8d		      lda	Frame
     94  f132		       29 07		      and	#%00000111	; Every 8 when bits are 000
     95  f134		       d0 24		      bne	.logo_audio_return
     96  f136
     97  f136				   .logo_audio_play
     98  f136
     99  f136							; Check if we're at the end of the melody
    100  f136		       a4 8f		      ldy	AudioStep
    101  f138		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
    102  f13a		       f0 10		      beq	.logo_audio_mute
    103  f13c
    104  f13c				   .logo_audio_play_note
    105  f13c							; Increment audio position
    106  f13c		       c8		      iny
    107  f13d		       84 8f		      sty	AudioStep
    108  f13f
    109  f13f							; Logo note and play
    110  f13f		       b9 32 f2 	      lda	LogoAudio0,y
    111  f142		       85 17		      sta	AUDF0
    112  f144		       b9 3e f2 	      lda	LogoAudio1,y
    113  f147		       85 18		      sta	AUDF1
    114  f149		       4c 5a f1 	      jmp	.logo_audio_mute_skip
    115  f14c
    116  f14c				   .logo_audio_mute
    117  f14c
    118  f14c							; Mute audio
    119  f14c		       a9 00		      lda	#0
    120  f14e		       85 15		      sta	AUDC0
    121  f150		       85 19		      sta	AUDV0
    122  f152		       85 17		      sta	AUDF0
    123  f154		       85 16		      sta	AUDC1
    124  f156		       85 1a		      sta	AUDV1
    125  f158		       85 18		      sta	AUDF1
    126  f15a
    127  f15a				   .logo_audio_mute_skip
    128  f15a				   .logo_audio_return
    129  f15a		       60		      rts
    130  f15b
    131  f15b				   LogoState
    132  f15b		       a5 8e		      lda	FrameTimer
    133  f15d		       c9 00		      cmp	#0
    134  f15f		       d0 03		      bne	.logo_state_return
    135  f161
    136  f161		       20 4a f2 	      jsr	TitleInit
    137  f164
    138  f164				   .logo_state_return
    139  f164		       60		      rts
    140  f165
    141  f165				   LogoKernel
    142  f165
    143  f165							; Playfield Control
    144  f165		       a5 80		      lda	CtrlPf
    145  f167		       29 fe		      and	#%11111110	; No mirroring
    146  f169		       85 80		      sta	CtrlPf
    147  f16b		       85 0a		      sta	CTRLPF
    148  f16d
    149  f16d							; Turn on display
    150  f16d		       a9 00		      lda	#0
    151  f16f		       85 01		      sta	VBLANK
    152  f171
    153  f171				   .logo_kernel_top_padding
    154  f171							; Top Padding
    155  f171		       20 c2 f1 	      jsr	LogoPadding
    156  f174
    157  f174				   .logo_kernel_image_animation
    158  f174		       a4 99		      ldy	WebIndex
    159  f176		       c0 00		      cpy	#0
    160  f178		       f0 0b		      beq	.logo_kernel_image
    161  f17a
    162  f17a				   .logo_kernel_image_animation_start
    163  f17a		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    164  f17c
    165  f17c				   .logo_kernel_image_animation_loop
    166  f17c		       85 02		      sta	WSYNC
    167  f17e		       ca		      dex
    168  f17f		       d0 fb		      bne	.logo_kernel_image_animation_loop
    169  f181
    170  f181		       88		      dey
    171  f182		       88		      dey
    172  f183		       d0 f5		      bne	.logo_kernel_image_animation_start
    173  f185
    174  f185				   .logo_kernel_image
    175  f185
    176  f185		       a2 20		      ldx	#(LOGO_IMAGE_SIZE*2)
    177  f187		       a0 04		      ldy	#LOGO_IMAGE_LINE_SIZE-1
    178  f189							; The extra 1 on line size is for processing overflow
    179  f189
    180  f189		       ca		      dex
    181  f18a		       e4 99		      cpx	WebIndex
    182  f18c		       90 30		      bcc	.logo_kernel_bottom_padding
    183  f18e
    184  f18e				   .logo_kernel_image_line
    185  f18e		       85 02		      sta	WSYNC
    186  f190
    187  f190		       bd d1 f1 	      lda	LogoImagePF0-1,x
    188  f193		       85 0d		      sta	PF0
    189  f195		       bd f1 f1 	      lda	LogoImagePF1-1,x
    190  f198		       85 0e		      sta	PF1
    191  f19a		       bd 11 f2 	      lda	LogoImagePF2-1,x
    192  f19d		       85 0f		      sta	PF2
    193  f19f
      0  f19f					      sleep	6
      1  f19f				   .CYCLES    SET	6
      2  f19f
      3  f19f				  -	      IF	.CYCLES < 2
      4  f19f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f19f				  -	      ERR
      6  f19f					      ENDIF
      7  f19f
      8  f19f				  -	      IF	.CYCLES & 1
      9  f19f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f19f				  -	      nop	0
     11  f19f				  -	      ELSE
     12  f19f				  -	      bit	VSYNC
     13  f19f				  -	      ENDIF
     14  f19f				  -.CYCLES    SET	.CYCLES - 3
     15  f19f					      ENDIF
     16  f19f
     17  f19f					      REPEAT	.CYCLES / 2
     18  f19f		       ea		      nop
     17  f19f					      REPEND
     18  f1a0		       ea		      nop
     17  f1a0					      REPEND
     18  f1a1		       ea		      nop
     19  f1a2					      REPEND
    195  f1a2
    196  f1a2		       bd d2 f1 	      lda	LogoImagePF0,x
    197  f1a5		       85 0d		      sta	PF0
    198  f1a7		       bd f2 f1 	      lda	LogoImagePF1,x
    199  f1aa		       85 0e		      sta	PF1
    200  f1ac		       bd 12 f2 	      lda	LogoImagePF2,x
    201  f1af		       85 0f		      sta	PF2
    202  f1b1
    203  f1b1		       88		      dey
    204  f1b2		       d0 da		      bne	.logo_kernel_image_line
    205  f1b4
    206  f1b4		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    207  f1b6
    208  f1b6		       ca		      dex
    209  f1b7		       e4 99		      cpx	WebIndex
    210  f1b9		       90 03		      bcc	.logo_kernel_bottom_padding
    211  f1bb
    212  f1bb		       ca		      dex
    213  f1bc		       10 d0		      bpl	.logo_kernel_image_line
    214  f1be
    215  f1be				   .logo_kernel_bottom_padding
    216  f1be							; Bottom Padding
    217  f1be		       20 c2 f1 	      jsr	LogoPadding
    218  f1c1
    219  f1c1				   .logo_kernel_image_return
    220  f1c1		       60		      rts
    221  f1c2
    222  f1c2				   LogoPadding
    223  f1c2		       a9 00		      lda	#0
    224  f1c4		       85 0d		      sta	PF0
    225  f1c6		       85 0e		      sta	PF1
    226  f1c8		       85 0f		      sta	PF2
    227  f1ca
    228  f1ca		       a2 38		      ldx	#LOGO_IMAGE_PADDING
    229  f1cc				   .logo_padding_loop
    230  f1cc		       85 02		      sta	WSYNC
    231  f1ce		       ca		      dex
    232  f1cf		       d0 fb		      bne	.logo_padding_loop
    233  f1d1
    234  f1d1		       60		      rts
    235  f1d2
    236  f1d2				   LogoAssets
    237  f1d2
    238  f1d2							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f1d2					      include	"logo_image.asm"
      1  f1d2				   LogoImagePF0
      2  f1d2		       00		      .BYTE.b	%00000000
      3  f1d3		       10		      .BYTE.b	%00010000
      4  f1d4		       00		      .BYTE.b	%00000000
      5  f1d5		       30		      .BYTE.b	%00110000
      6  f1d6		       00		      .BYTE.b	%00000000
      7  f1d7		       70		      .BYTE.b	%01110000
      8  f1d8		       00		      .BYTE.b	%00000000
      9  f1d9		       60		      .BYTE.b	%01100000
     10  f1da		       00		      .BYTE.b	%00000000
     11  f1db		       60		      .BYTE.b	%01100000
     12  f1dc		       00		      .BYTE.b	%00000000
     13  f1dd		       20		      .BYTE.b	%00100000
     14  f1de		       80		      .BYTE.b	%10000000
     15  f1df		       00		      .BYTE.b	%00000000
     16  f1e0		       c0		      .BYTE.b	%11000000
     17  f1e1		       00		      .BYTE.b	%00000000
     18  f1e2		       c0		      .BYTE.b	%11000000
     19  f1e3		       00		      .BYTE.b	%00000000
     20  f1e4		       80		      .BYTE.b	%10000000
     21  f1e5		       00		      .BYTE.b	%00000000
     22  f1e6		       00		      .BYTE.b	%00000000
     23  f1e7		       40		      .BYTE.b	%01000000
     24  f1e8		       00		      .BYTE.b	%00000000
     25  f1e9		       60		      .BYTE.b	%01100000
     26  f1ea		       00		      .BYTE.b	%00000000
     27  f1eb		       60		      .BYTE.b	%01100000
     28  f1ec		       00		      .BYTE.b	%00000000
     29  f1ed		       70		      .BYTE.b	%01110000
     30  f1ee		       00		      .BYTE.b	%00000000
     31  f1ef		       30		      .BYTE.b	%00110000
     32  f1f0		       00		      .BYTE.b	%00000000
     33  f1f1		       10		      .BYTE.b	%00010000
     34  f1f2
     35  f1f2				   LogoImagePF1
     36  f1f2		       03		      .BYTE.b	%00000011
     37  f1f3		       f0		      .BYTE.b	%11110000
     38  f1f4		       03		      .BYTE.b	%00000011
     39  f1f5		       f8		      .BYTE.b	%11111000
     40  f1f6		       13		      .BYTE.b	%00010011
     41  f1f7		       fc		      .BYTE.b	%11111100
     42  f1f8		       33		      .BYTE.b	%00110011
     43  f1f9		       dc		      .BYTE.b	%11011100
     44  f1fa		       63		      .BYTE.b	%01100011
     45  f1fb		       cc		      .BYTE.b	%11001100
     46  f1fc		       c3		      .BYTE.b	%11000011
     47  f1fd		       cc		      .BYTE.b	%11001100
     48  f1fe		       83		      .BYTE.b	%10000011
     49  f1ff		       cc		      .BYTE.b	%11001100
     50  f200		       03		      .BYTE.b	%00000011
     51  f201		       cc		      .BYTE.b	%11001100
     52  f202		       03		      .BYTE.b	%00000011
     53  f203		       cc		      .BYTE.b	%11001100
     54  f204		       83		      .BYTE.b	%10000011
     55  f205		       cc		      .BYTE.b	%11001100
     56  f206		       c3		      .BYTE.b	%11000011
     57  f207		       cc		      .BYTE.b	%11001100
     58  f208		       63		      .BYTE.b	%01100011
     59  f209		       cc		      .BYTE.b	%11001100
     60  f20a		       33		      .BYTE.b	%00110011
     61  f20b		       dc		      .BYTE.b	%11011100
     62  f20c		       13		      .BYTE.b	%00010011
     63  f20d		       fc		      .BYTE.b	%11111100
     64  f20e		       03		      .BYTE.b	%00000011
     65  f20f		       f8		      .BYTE.b	%11111000
     66  f210		       03		      .BYTE.b	%00000011
     67  f211		       f0		      .BYTE.b	%11110000
     68  f212
     69  f212				   LogoImagePF2
     70  f212		       83		      .BYTE.b	%10000011
     71  f213		       00		      .BYTE.b	%00000000
     72  f214		       c7		      .BYTE.b	%11000111
     73  f215		       00		      .BYTE.b	%00000000
     74  f216		       ef		      .BYTE.b	%11101111
     75  f217		       01		      .BYTE.b	%00000001
     76  f218		       6e		      .BYTE.b	%01101110
     77  f219		       03		      .BYTE.b	%00000011
     78  f21a		       6c		      .BYTE.b	%01101100
     79  f21b		       06		      .BYTE.b	%00000110
     80  f21c		       6c		      .BYTE.b	%01101100
     81  f21d		       0c		      .BYTE.b	%00001100
     82  f21e		       6c		      .BYTE.b	%01101100
     83  f21f		       18		      .BYTE.b	%00011000
     84  f220		       6c		      .BYTE.b	%01101100
     85  f221		       30		      .BYTE.b	%00110000
     86  f222		       6c		      .BYTE.b	%01101100
     87  f223		       30		      .BYTE.b	%00110000
     88  f224		       6c		      .BYTE.b	%01101100
     89  f225		       18		      .BYTE.b	%00011000
     90  f226		       6c		      .BYTE.b	%01101100
     91  f227		       0c		      .BYTE.b	%00001100
     92  f228		       6c		      .BYTE.b	%01101100
     93  f229		       06		      .BYTE.b	%00000110
     94  f22a		       6e		      .BYTE.b	%01101110
     95  f22b		       03		      .BYTE.b	%00000011
     96  f22c		       ef		      .BYTE.b	%11101111
     97  f22d		       01		      .BYTE.b	%00000001
     98  f22e		       c7		      .BYTE.b	%11000111
     99  f22f		       00		      .BYTE.b	%00000000
    100  f230		       83		      .BYTE.b	%10000011
    101  f231		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    240  f232
    241  f232				   LogoAudio0
    242  f232
    243  f232		       1d		      .BYTE.b	#29	; C
    244  f233		       17		      .BYTE.b	#23	; E
    245  f234		       13		      .BYTE.b	#19	; G
    246  f235		       0f		      .BYTE.b	#15	; A
    247  f236		       17		      .BYTE.b	#23	; E
    248  f237		       13		      .BYTE.b	#19	; G
    249  f238		       0f		      .BYTE.b	#15	; B
    250  f239		       0e		      .BYTE.b	#14	; C
    251  f23a		       0b		      .BYTE.b	#11	; E
    252  f23b		       0b		      .BYTE.b	#11
    253  f23c		       0b		      .BYTE.b	#11
    254  f23d		       0b		      .BYTE.b	#11
    255  f23e
    256  f23e				   LogoAudio1
    257  f23e
    258  f23e		       1f		      .BYTE.b	#31	; C
    259  f23f		       1f		      .BYTE.b	#31
    260  f240		       1f		      .BYTE.b	#31
    261  f241		       1f		      .BYTE.b	#31
    262  f242		       19		      .BYTE.b	#25	; E
    263  f243		       19		      .BYTE.b	#25
    264  f244		       19		      .BYTE.b	#25
    265  f245		       19		      .BYTE.b	#25
    266  f246		       14		      .BYTE.b	#20	; G
    267  f247		       14		      .BYTE.b	#20
    268  f248		       14		      .BYTE.b	#20
    269  f249		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f24a					      include	"title.asm"
      1  f24a							;================
      2  f24a							; Constants
      3  f24a							;================
      4  f24a
      5  f24a		       00 00	   TITLE_BG_COLOR =	#$00
      6  f24a		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f24a		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f24a		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f24a
     10  f24a		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f24a		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f24a		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f24a		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f24a		       00 09	   TITLE_AUDIO_STEP =	9
     15  f24a
     16  f24a		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     17  f24a		       00 05	   TITLE_FRAME_BOT_LINES =	5
     18  f24a		       00 07	   TITLE_LABEL_LINE =	7
     19  f24a
     20  f24a		       00 0f	   TITLE_GAP_SIZE =	#15
     21  f24a
     22  f24a		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     23  f24a		       00 09	   TITLE_SPIDER_SIZE =	#9
     24  f24a		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f24a
     26  f24a				   TitleInit
     27  f24a
     28  f24a							; Setup logic and kernel
      0  f24a					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f24a				   .POINTER   SET	VBlankPtr
      2  f24a				   .ADDRESS   SET	TitleVerticalBlank
      3  f24a
      4  f24a		       a9 b7		      LDA	#<.ADDRESS
      5  f24c		       85 87		      STA	.POINTER
      6  f24e		       a9 f2		      LDA	#>.ADDRESS
      7  f250		       85 88		      STA	.POINTER+1
      8  f252
      0  f252					      SET_POINTER	KernelPtr, TitleKernel
      1  f252				   .POINTER   SET	KernelPtr
      2  f252				   .ADDRESS   SET	TitleKernel
      3  f252
      4  f252		       a9 4f		      LDA	#<.ADDRESS
      5  f254		       85 89		      STA	.POINTER
      6  f256		       a9 f3		      LDA	#>.ADDRESS
      7  f258		       85 8a		      STA	.POINTER+1
      8  f25a
      0  f25a					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f25a				   .POINTER   SET	OverScanPtr
      2  f25a				   .ADDRESS   SET	TitleOverScan
      3  f25a
      4  f25a		       a9 08		      LDA	#<.ADDRESS
      5  f25c		       85 8b		      STA	.POINTER
      6  f25e		       a9 f3		      LDA	#>.ADDRESS
      7  f260		       85 8c		      STA	.POINTER+1
      8  f262
     32  f262
     33  f262							; Load Colors
     34  f262		       a9 00		      lda	#TITLE_BG_COLOR
     35  f264		       85 09		      sta	COLUBK
     36  f266		       a9 06		      lda	#TITLE_WEB_COLOR
     37  f268		       85 08		      sta	COLUPF
     38  f26a		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f26c		       85 06		      sta	COLUP0
     40  f26e		       85 07		      sta	COLUP1
     41  f270
     42  f270							; Load audio settings
     43  f270
     44  f270							; Melody Line
     45  f270		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f272		       85 15		      sta	AUDC0
     47  f274		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f276		       85 19		      sta	AUDV0
     49  f278
     50  f278							; Drums and Bass
     51  f278		       a9 00		      lda	#0
     52  f27a		       85 16		      sta	AUDC1
     53  f27c		       85 1a		      sta	AUDV1
     54  f27e
     55  f27e							; Make it so that we play the first note immediately
     56  f27e		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f280		       85 8f		      sta	AudioStep
     58  f282		       a9 01		      lda	#1
     59  f284		       85 8e		      sta	FrameTimer
     60  f286
     61  f286							; Setup Spider Sprite
      0  f286					      SET_POINTER	SpiderPtr, TitleSpider
      1  f286				   .POINTER   SET	SpiderPtr
      2  f286				   .ADDRESS   SET	TitleSpider
      3  f286
      4  f286		       a9 8f		      LDA	#<.ADDRESS
      5  f288		       85 9b		      STA	.POINTER
      6  f28a		       a9 f4		      LDA	#>.ADDRESS
      7  f28c		       85 9c		      STA	.POINTER+1
      8  f28e
     63  f28e
     64  f28e		       a5 81		      lda	NuSiz0
     65  f290		       29 f8		      and	#%11111000
     66  f292		       09 06		      ora	#%00000110	; Triple Sprite
     67  f294		       85 81		      sta	NuSiz0
     68  f296		       85 04		      sta	NUSIZ0
     69  f298		       85 82		      sta	NuSiz1
     70  f29a		       85 05		      sta	NUSIZ1
     71  f29c
     72  f29c		       a9 00		      lda	#0	; No reflect
     73  f29e		       85 0b		      sta	REFP0
     74  f2a0		       a9 ff		      lda	#$FF	; Reflect P1
     75  f2a2		       85 0c		      sta	REFP1
     76  f2a4
     77  f2a4		       a9 00		      lda	#0
     78  f2a6		       85 a2		      sta	SpiderDrawPos	; Initialize animation state
     79  f2a8
     80  f2a8							; Setup Web Line
     81  f2a8							; Missle0 (2 clock size)
     82  f2a8		       a5 81		      lda	NuSiz0
     83  f2aa		       29 cf		      and	#%11001111
     84  f2ac		       09 10		      ora	#%00010000
     85  f2ae		       85 81		      sta	NuSiz0
     86  f2b0		       85 04		      sta	NUSIZ0
     87  f2b2
     88  f2b2							; Disable at start
     89  f2b2		       a9 00		      lda	#0
     90  f2b4		       85 1d		      sta	ENAM0
     91  f2b6
     92  f2b6		       60		      rts
     93  f2b7
     94  f2b7				   TitleVerticalBlank
     95  f2b7
     96  f2b7							; Refresh random values
     97  f2b7		       20 13 f0 	      jsr	Random
     98  f2ba
     99  f2ba		       20 c1 f2 	      jsr	TitlePosition
    100  f2bd		       20 db f2 	      jsr	TitleAnimation
    101  f2c0
    102  f2c0		       60		      rts
    103  f2c1
    104  f2c1				   TitlePosition
    105  f2c1
    106  f2c1							; Position Spider
    107  f2c1		       a2 00		      ldx	#0	; Object (player0)
    108  f2c3		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    109  f2c5		       20 00 f0 	      jsr	PosObject
    110  f2c8
    111  f2c8		       a2 01		      ldx	#1	; Object (player1)
    112  f2ca		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    113  f2cc		       20 00 f0 	      jsr	PosObject
    114  f2cf
    115  f2cf							; Position Web Line
    116  f2cf		       a2 02		      ldx	#2	; Object (missle0)
    117  f2d1		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    118  f2d3		       20 00 f0 	      jsr	PosObject
    119  f2d6
    120  f2d6		       85 02		      sta	WSYNC
    121  f2d8		       85 2a		      sta	HMOVE
    122  f2da
    123  f2da		       60		      rts
    124  f2db
    125  f2db				   TitleAnimation
    126  f2db
    127  f2db		       a5 8f		      lda	AudioStep
    128  f2dd		       c9 00		      cmp	#0
    129  f2df		       f0 0d		      beq	.title_animation_1
    130  f2e1		       c9 04		      cmp	#4
    131  f2e3		       f0 16		      beq	.title_animation_2
    132  f2e5		       c9 09		      cmp	#9
    133  f2e7		       f0 05		      beq	.title_animation_1
    134  f2e9		       c9 0c		      cmp	#12
    135  f2eb		       f0 0e		      beq	.title_animation_2
    136  f2ed		       60		      rts
    137  f2ee
    138  f2ee				   .title_animation_1
      0  f2ee					      SET_POINTER	SpiderPtr, TitleSpider
      1  f2ee				   .POINTER   SET	SpiderPtr
      2  f2ee				   .ADDRESS   SET	TitleSpider
      3  f2ee
      4  f2ee		       a9 8f		      LDA	#<.ADDRESS
      5  f2f0		       85 9b		      STA	.POINTER
      6  f2f2		       a9 f4		      LDA	#>.ADDRESS
      7  f2f4		       85 9c		      STA	.POINTER+1
      8  f2f6
    140  f2f6		       a9 00		      lda	#0
    141  f2f8		       85 a2		      sta	SpiderDrawPos
    142  f2fa		       60		      rts
    143  f2fb
    144  f2fb				   .title_animation_2
      0  f2fb					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f2fb				   .POINTER   SET	SpiderPtr
      2  f2fb				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f2fb
      4  f2fb		       a9 98		      LDA	#<.ADDRESS
      5  f2fd		       85 9b		      STA	.POINTER
      6  f2ff		       a9 f4		      LDA	#>.ADDRESS
      7  f301		       85 9c		      STA	.POINTER+1
      8  f303
    146  f303		       a9 01		      lda	#1
    147  f305		       85 a2		      sta	SpiderDrawPos
    148  f307		       60		      rts
    149  f308
    150  f308				   TitleOverScan
    151  f308		       20 0f f3 	      jsr	TitleAudio
    152  f30b		       20 47 f3 	      jsr	TitleState
    153  f30e		       60		      rts
    154  f30f
    155  f30f				   TitleAudio
    156  f30f
    157  f30f		       a6 8e		      ldx	FrameTimer
    158  f311		       e0 00		      cpx	#0
    159  f313		       d0 31		      bne	.title_audio_return
    160  f315
    161  f315							; Reset Timer
    162  f315		       a2 09		      ldx	#TITLE_AUDIO_STEP
    163  f317		       86 8e		      stx	FrameTimer
    164  f319
    165  f319				   .title_audio_play
    166  f319
    167  f319							; Increment melody position
    168  f319		       a4 8f		      ldy	AudioStep
    169  f31b		       c8		      iny
    170  f31c
    171  f31c							; Check if we're at the end of the melody
    172  f31c		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    173  f31e		       d0 02		      bne	.title_audio_play_note
    174  f320
    175  f320							; Loop our audio step
    176  f320		       a0 00		      ldy	#0
    177  f322
    178  f322				   .title_audio_play_note
    179  f322
    180  f322							; Save current position
    181  f322		       84 8f		      sty	AudioStep
    182  f324
    183  f324							; Basic Melody Line
    184  f324		       b9 a1 f4 	      lda	TitleAudio0,y
    185  f327		       85 17		      sta	AUDF0
    186  f329
    187  f329							; Drums and Bass
    188  f329		       b9 b1 f4 	      lda	TitleTone1,y
    189  f32c		       c9 ff		      cmp	#$FF
    190  f32e		       f0 0e		      beq	.title_audio_play_note_1_mute
    191  f330
    192  f330		       85 16		      sta	AUDC1
    193  f332		       b9 c1 f4 	      lda	TitleAudio1,y
    194  f335		       85 18		      sta	AUDF1
    195  f337		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    196  f339		       85 1a		      sta	AUDV1
    197  f33b
    198  f33b		       4c 46 f3 	      jmp	.title_audio_return
    199  f33e
    200  f33e				   .title_audio_play_note_1_mute
    201  f33e
    202  f33e		       a9 00		      lda	#0
    203  f340		       85 18		      sta	AUDF1
    204  f342		       85 16		      sta	AUDC1
    205  f344		       85 1a		      sta	AUDV1
    206  f346
    207  f346				   .title_audio_return
    208  f346		       60		      rts
    209  f347
    210  f347				   TitleState
    211  f347							; Check if Fire Button on controller 1 is pressed
    212  f347		       a5 0c		      lda	INPT4
    213  f349		       30 03		      bmi	.title_state_return
    214  f34b
    215  f34b		       20 bd fa 	      jsr	GameInit
    216  f34e
    217  f34e				   .title_state_return
    218  f34e		       60		      rts
    219  f34f
    220  f34f				   TitleKernel
    221  f34f
    222  f34f							; Playfield Control
    223  f34f		       a5 80		      lda	CtrlPf
    224  f351		       29 fe		      and	#%11111110	; No mirroring
    225  f353		       85 80		      sta	CtrlPf
    226  f355		       85 0a		      sta	CTRLPF
    227  f357
    228  f357							; Turn on display
    229  f357		       a9 00		      lda	#0
    230  f359		       85 01		      sta	VBLANK
    231  f35b
    232  f35b		       85 02		      sta	WSYNC
    233  f35d
    234  f35d				   TitleFrameTopDraw
    235  f35d
    236  f35d							; Start Counters
    237  f35d		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    238  f35f		       a0 00		      ldy	#0	; Image Counter
    239  f361
    240  f361				   .title_frame_top
    241  f361
    242  f361							; 76 machine cycles per scanline
    243  f361		       85 02		      sta	WSYNC
    244  f363
    245  f363				   .title_frame_top_load		; 66 cycles
    246  f363
    247  f363							; First half of image
    248  f363		       b9 29 f4 	      lda	TitleFrameTop,y	; 5
    249  f366		       85 0d		      sta	PF0	; 4
    250  f368		       b9 2a f4 	      lda	TitleFrameTop+1,y	; 5
    251  f36b		       85 0e		      sta	PF1	; 4
    252  f36d		       b9 2b f4 	      lda	TitleFrameTop+2,y	; 5
    253  f370		       85 0f		      sta	PF2	; 4
    254  f372
      0  f372					      sleep	6
      1  f372				   .CYCLES    SET	6
      2  f372
      3  f372				  -	      IF	.CYCLES < 2
      4  f372				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f372				  -	      ERR
      6  f372					      ENDIF
      7  f372
      8  f372				  -	      IF	.CYCLES & 1
      9  f372				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f372				  -	      nop	0
     11  f372				  -	      ELSE
     12  f372				  -	      bit	VSYNC
     13  f372				  -	      ENDIF
     14  f372				  -.CYCLES    SET	.CYCLES - 3
     15  f372					      ENDIF
     16  f372
     17  f372					      REPEAT	.CYCLES / 2
     18  f372		       ea		      nop
     17  f372					      REPEND
     18  f373		       ea		      nop
     17  f373					      REPEND
     18  f374		       ea		      nop
     19  f375					      REPEND
    256  f375
    257  f375							; Second half of image
    258  f375		       b9 2c f4 	      lda	TitleFrameTop+3,y	; 5
    259  f378		       85 0d		      sta	PF0	; 4
    260  f37a		       b9 2d f4 	      lda	TitleFrameTop+4,y	; 5
    261  f37d		       85 0e		      sta	PF1	; 4
    262  f37f		       b9 2e f4 	      lda	TitleFrameTop+5,y	; 5
    263  f382		       85 0f		      sta	PF2	; 4
    264  f384
    265  f384				   .title_frame_top_index		; 4 cycles
    266  f384
    267  f384		       ca		      dex		; 2
    268  f385		       d0 da		      bne	.title_frame_top	; 2
    269  f387
    270  f387				   .title_frame_top_index_next		; 6 cycles
    271  f387
    272  f387							; Restore scanline counter
    273  f387		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    274  f389
    275  f389		       98		      tya		; 2
    276  f38a		       18		      clc		; 2
    277  f38b		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    278  f38d		       a8		      tay		; 2
    279  f38e
    280  f38e		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA
    281  f390		       d0 04		      bne	.title_frame_top_label_color_skip
    282  f392		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    283  f394		       85 08		      sta	COLUPF	; 4
    284  f396				   .title_frame_top_label_color_skip
    285  f396
    286  f396		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA
    287  f398		       d0 c7		      bne	.title_frame_top	; 2
    288  f39a
    289  f39a				   .title_frame_top_clean
    290  f39a
    291  f39a							; Clear out playfield
    292  f39a		       a9 00		      lda	#0
    293  f39c		       85 0d		      sta	PF0
    294  f39e		       85 0e		      sta	PF1
    295  f3a0		       85 0f		      sta	PF2
    296  f3a2
    297  f3a2				   TitleWebDraw
    298  f3a2		       a9 02		      lda	#%00000010
    299  f3a4		       85 1d		      sta	ENAM0
    300  f3a6
    301  f3a6		       a9 06		      lda	#TITLE_WEB_COLOR
    302  f3a8		       85 06		      sta	COLUP0
    303  f3aa
    304  f3aa		       a2 0f		      ldx	#TITLE_GAP_SIZE
    305  f3ac				   .title_web_gap
    306  f3ac		       ca		      dex
    307  f3ad		       85 02		      sta	WSYNC
    308  f3af		       d0 fb		      bne	.title_web_gap
    309  f3b1
    310  f3b1				   TitleSpiderDraw
    311  f3b1
    312  f3b1		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    313  f3b3
    314  f3b3		       a5 a2		      lda	SpiderDrawPos
    315  f3b5		       c9 01		      cmp	#1
    316  f3b7		       d0 0c		      bne	.title_spider_extra_web_disable
    317  f3b9
    318  f3b9				   .title_spider_extra_web_start
    319  f3b9		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    320  f3bb				   .title_spider_extra_web_loop
    321  f3bb		       85 02		      sta	WSYNC
    322  f3bd		       ca		      dex
    323  f3be		       d0 fb		      bne	.title_spider_extra_web_loop
    324  f3c0
    325  f3c0		       88		      dey
    326  f3c1		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    327  f3c3		       d0 f4		      bne	.title_spider_extra_web_start
    328  f3c5
    329  f3c5				   .title_spider_extra_web_disable
    330  f3c5		       a9 00		      lda	#0
    331  f3c7		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    332  f3c9
    333  f3c9		       85 02		      sta	WSYNC
    334  f3cb
    335  f3cb		       85 1d		      sta	ENAM0
    336  f3cd		       a9 56		      lda	#TITLE_SPIDER_COLOR
    337  f3cf		       85 06		      sta	COLUP0
    338  f3d1
    339  f3d1				   .title_spider
    340  f3d1		       b1 9b		      lda	(SpiderPtr),y
    341  f3d3		       85 1b		      sta	GRP0
    342  f3d5		       85 1c		      sta	GRP1
    343  f3d7
    344  f3d7				   .title_spider_delay
    345  f3d7		       ca		      dex
    346  f3d8		       85 02		      sta	WSYNC
    347  f3da		       d0 fb		      bne	.title_spider_delay
    348  f3dc
    349  f3dc				   .title_spider_index
    350  f3dc		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    351  f3de		       88		      dey
    352  f3df		       10 f0		      bpl	.title_spider
    353  f3e1
    354  f3e1				   .title_spider_clean
    355  f3e1
    356  f3e1							; Clear sprites
    357  f3e1		       a9 00		      lda	#0
    358  f3e3		       85 1b		      sta	GRP0
    359  f3e5		       85 1c		      sta	GRP1
    360  f3e7
    361  f3e7				   TitleFrameBottomDraw
    362  f3e7
    363  f3e7							; Load Frame Color
    364  f3e7		       a9 06		      lda	#TITLE_WEB_COLOR
    365  f3e9		       85 08		      sta	COLUPF
    366  f3eb
    367  f3eb							; Start Counters
    368  f3eb		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    369  f3ed		       a0 00		      ldy	#0	; Image Counter
    370  f3ef
    371  f3ef				   .title_frame_bottom
    372  f3ef
    373  f3ef							; 76 machine cycles per scanline
    374  f3ef		       85 02		      sta	WSYNC
    375  f3f1
    376  f3f1				   .title_frame_bottom_load		; 66 cycles
    377  f3f1
    378  f3f1							; First half of image
    379  f3f1		       b9 71 f4 	      lda	TitleFrameBottom,y	; 5
    380  f3f4		       85 0d		      sta	PF0	; 4
    381  f3f6		       b9 72 f4 	      lda	TitleFrameBottom+1,y	; 5
    382  f3f9		       85 0e		      sta	PF1	; 4
    383  f3fb		       b9 73 f4 	      lda	TitleFrameBottom+2,y	; 5
    384  f3fe		       85 0f		      sta	PF2	; 4
    385  f400
      0  f400					      sleep	6
      1  f400				   .CYCLES    SET	6
      2  f400
      3  f400				  -	      IF	.CYCLES < 2
      4  f400				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f400				  -	      ERR
      6  f400					      ENDIF
      7  f400
      8  f400				  -	      IF	.CYCLES & 1
      9  f400				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f400				  -	      nop	0
     11  f400				  -	      ELSE
     12  f400				  -	      bit	VSYNC
     13  f400				  -	      ENDIF
     14  f400				  -.CYCLES    SET	.CYCLES - 3
     15  f400					      ENDIF
     16  f400
     17  f400					      REPEAT	.CYCLES / 2
     18  f400		       ea		      nop
     17  f400					      REPEND
     18  f401		       ea		      nop
     17  f401					      REPEND
     18  f402		       ea		      nop
     19  f403					      REPEND
    387  f403
    388  f403							; Second half of image
    389  f403		       b9 74 f4 	      lda	TitleFrameBottom+3,y	; 5
    390  f406		       85 0d		      sta	PF0	; 4
    391  f408		       b9 75 f4 	      lda	TitleFrameBottom+4,y	; 5
    392  f40b		       85 0e		      sta	PF1	; 4
    393  f40d		       b9 76 f4 	      lda	TitleFrameBottom+5,y	; 5
    394  f410		       85 0f		      sta	PF2	; 4
    395  f412
    396  f412				   .title_frame_bottom_index		; 4 cycles
    397  f412
    398  f412		       ca		      dex		; 2
    399  f413		       d0 da		      bne	.title_frame_bottom	; 2
    400  f415
    401  f415				   .title_frame_bottom_index_next		; 6 cycles
    402  f415
    403  f415							; Restore scanline counter
    404  f415		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    405  f417
    406  f417		       98		      tya		; 2
    407  f418		       18		      clc		; 2
    408  f419		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    409  f41b		       a8		      tay		; 2
    410  f41c		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    411  f41e		       d0 cf		      bne	.title_frame_bottom	; 2
    412  f420
    413  f420				   .title_frame_bottom_clean
    414  f420
    415  f420							; Clear out playfield
    416  f420		       a9 00		      lda	#0
    417  f422		       85 0d		      sta	PF0
    418  f424		       85 0e		      sta	PF1
    419  f426		       85 0f		      sta	PF2
    420  f428
    421  f428				   .title_kernel_return
    422  f428		       60		      rts
    423  f429
    424  f429				   TitleAssets
    425  f429
    426  f429							; Assets
------- FILE title_frame_top.asm LEVEL 3 PASS 2
      0  f429					      include	"title_frame_top.asm"
      1  f429				   TitleFrameTop
      2  f429
      3  f429		       a0		      .BYTE.b	%10100000
      4  f42a		       54		      .BYTE.b	%01010100
      5  f42b		       01		      .BYTE.b	%00000001
      6  f42c		       00		      .BYTE.b	%00000000
      7  f42d		       03		      .BYTE.b	%00000011
      8  f42e		       2c		      .BYTE.b	%00101100
      9  f42f
     10  f42f		       d0		      .BYTE.b	%11010000
     11  f430		       23		      .BYTE.b	%00100011
     12  f431		       00		      .BYTE.b	%00000000
     13  f432		       00		      .BYTE.b	%00000000
     14  f433		       00		      .BYTE.b	%00000000
     15  f434		       51		      .BYTE.b	%01010001
     16  f435
     17  f435		       60		      .BYTE.b	%01100000
     18  f436		       dc		      .BYTE.b	%11011100
     19  f437		       00		      .BYTE.b	%00000000
     20  f438		       00		      .BYTE.b	%00000000
     21  f439		       00		      .BYTE.b	%00000000
     22  f43a		       8e		      .BYTE.b	%10001110
     23  f43b
     24  f43b		       b0		      .BYTE.b	%10110000
     25  f43c		       00		      .BYTE.b	%00000000
     26  f43d		       00		      .BYTE.b	%00000000
     27  f43e		       00		      .BYTE.b	%00000000
     28  f43f		       00		      .BYTE.b	%00000000
     29  f440		       51		      .BYTE.b	%01010001
     30  f441
     31  f441		       40		      .BYTE.b	%01000000
     32  f442		       80		      .BYTE.b	%10000000
     33  f443		       00		      .BYTE.b	%00000000
     34  f444		       00		      .BYTE.b	%00000000
     35  f445		       00		      .BYTE.b	%00000000
     36  f446		       ad		      .BYTE.b	%10101101
     37  f447
     38  f447		       50		      .BYTE.b	%01010000
     39  f448		       00		      .BYTE.b	%00000000
     40  f449		       00		      .BYTE.b	%00000000
     41  f44a		       00		      .BYTE.b	%00000000
     42  f44b		       01		      .BYTE.b	%00000001
     43  f44c		       82		      .BYTE.b	%10000010
     44  f44d
     45  f44d		       20		      .BYTE.b	%00100000
     46  f44e		       00		      .BYTE.b	%00000000
     47  f44f		       00		      .BYTE.b	%00000000
     48  f450		       00		      .BYTE.b	%00000000
     49  f451		       02		      .BYTE.b	%00000010
     50  f452		       00		      .BYTE.b	%00000000
     51  f453
     52  f453		       c0		      .BYTE.b	%11000000
     53  f454		       77		      .BYTE.b	%01110111
     54  f455		       66		      .BYTE.b	%01100110
     55  f456		       30		      .BYTE.b	%00110000
     56  f457		       22		      .BYTE.b	%00100010
     57  f458		       1b		      .BYTE.b	%00011011
     58  f459
     59  f459		       40		      .BYTE.b	%01000000
     60  f45a		       52		      .BYTE.b	%01010010
     61  f45b		       2a		      .BYTE.b	%00101010
     62  f45c		       50		      .BYTE.b	%01010000
     63  f45d		       22		      .BYTE.b	%00100010
     64  f45e		       29		      .BYTE.b	%00101001
     65  f45f
     66  f45f		       c0		      .BYTE.b	%11000000
     67  f460		       72		      .BYTE.b	%01110010
     68  f461		       6a		      .BYTE.b	%01101010
     69  f462		       50		      .BYTE.b	%01010000
     70  f463		       22		      .BYTE.b	%00100010
     71  f464		       1b		      .BYTE.b	%00011011
     72  f465
     73  f465		       80		      .BYTE.b	%10000000
     74  f466		       42		      .BYTE.b	%01000010
     75  f467		       2a		      .BYTE.b	%00101010
     76  f468		       30		      .BYTE.b	%00110000
     77  f469		       2a		      .BYTE.b	%00101010
     78  f46a		       29		      .BYTE.b	%00101001
     79  f46b
     80  f46b		       c0		      .BYTE.b	%11000000
     81  f46c		       47		      .BYTE.b	%01000111
     82  f46d		       e6		      .BYTE.b	%11100110
     83  f46e		       50		      .BYTE.b	%01010000
     84  f46f		       14		      .BYTE.b	%00010100
     85  f470		       1b		      .BYTE.b	%00011011
------- FILE title.asm
------- FILE title_frame_bottom.asm LEVEL 3 PASS 2
      0  f471					      include	"title_frame_bottom.asm"
      1  f471				   TitleFrameBottom
      2  f471
      3  f471		       20		      .BYTE.b	%00100000
      4  f472		       00		      .BYTE.b	%00000000
      5  f473		       00		      .BYTE.b	%00000000
      6  f474		       00		      .BYTE.b	%00000000
      7  f475		       00		      .BYTE.b	%00000000
      8  f476		       64		      .BYTE.b	%01100100
      9  f477
     10  f477		       50		      .BYTE.b	%01010000
     11  f478		       00		      .BYTE.b	%00000000
     12  f479		       00		      .BYTE.b	%00000000
     13  f47a		       00		      .BYTE.b	%00000000
     14  f47b		       00		      .BYTE.b	%00000000
     15  f47c		       98		      .BYTE.b	%10011000
     16  f47d
     17  f47d		       90		      .BYTE.b	%10010000
     18  f47e		       80		      .BYTE.b	%10000000
     19  f47f		       00		      .BYTE.b	%00000000
     20  f480		       00		      .BYTE.b	%00000000
     21  f481		       00		      .BYTE.b	%00000000
     22  f482		       28		      .BYTE.b	%00101000
     23  f483
     24  f483		       60		      .BYTE.b	%01100000
     25  f484		       60		      .BYTE.b	%01100000
     26  f485		       00		      .BYTE.b	%00000000
     27  f486		       00		      .BYTE.b	%00000000
     28  f487		       00		      .BYTE.b	%00000000
     29  f488		       44		      .BYTE.b	%01000100
     30  f489
     31  f489		       d0		      .BYTE.b	%11010000
     32  f48a		       1c		      .BYTE.b	%00011100
     33  f48b		       00		      .BYTE.b	%00000000
     34  f48c		       00		      .BYTE.b	%00000000
     35  f48d		       00		      .BYTE.b	%00000000
     36  f48e		       ab		      .BYTE.b	%10101011
------- FILE title.asm
    429  f48f					      include	"title_label.asm"
------- FILE title_spider.asm LEVEL 3 PASS 2
      0  f48f					      include	"title_spider.asm"
      1  f48f				   TitleSpider
      2  f48f
      3  f48f		       30		      .BYTE.b	%00110000
      4  f490		       67		      .BYTE.b	%01100111
      5  f491		       4f		      .BYTE.b	%01001111
      6  f492		       dd		      .BYTE.b	%11011101
      7  f493		       d8		      .BYTE.b	%11011000
      8  f494		       df		      .BYTE.b	%11011111
      9  f495		       4d		      .BYTE.b	%01001101
     10  f496		       6f		      .BYTE.b	%01101111
     11  f497		       3b		      .BYTE.b	%00111011
     12  f498
     13  f498		       37		      .BYTE.b	%00110111
     14  f499		       6d		      .BYTE.b	%01101101
     15  f49a		       d8		      .BYTE.b	%11011000
     16  f49b		       df		      .BYTE.b	%11011111
     17  f49c		       cd		      .BYTE.b	%11001101
     18  f49d		       6f		      .BYTE.b	%01101111
     19  f49e		       3b		      .BYTE.b	%00111011
     20  f49f		       00		      .BYTE.b	%00000000
     21  f4a0		       00		      .BYTE.b	%00000000
------- FILE title.asm
    431  f4a1
    432  f4a1				   TitleAudio0
    433  f4a1
    434  f4a1		       0f		      .BYTE.b	#15	; B
    435  f4a2		       13		      .BYTE.b	#19	; G
    436  f4a3		       17		      .BYTE.b	#23	; E
    437  f4a4		       13		      .BYTE.b	#19	; G
    438  f4a5		       0e		      .BYTE.b	#14	; C
    439  f4a6		       13		      .BYTE.b	#19
    440  f4a7		       17		      .BYTE.b	#23
    441  f4a8		       13		      .BYTE.b	#19
    442  f4a9		       0c		      .BYTE.b	#12	; D
    443  f4aa		       13		      .BYTE.b	#19
    444  f4ab		       17		      .BYTE.b	#23
    445  f4ac		       13		      .BYTE.b	#19
    446  f4ad		       0e		      .BYTE.b	#14	; C
    447  f4ae		       13		      .BYTE.b	#19
    448  f4af		       17		      .BYTE.b	#23
    449  f4b0		       13		      .BYTE.b	#19
    450  f4b1
    451  f4b1				   TitleTone1
    452  f4b1
    453  f4b1		       0f		      .BYTE.b	#15	; Electronic Rumble
    454  f4b2		       ff		      .BYTE.b	#$FF
    455  f4b3		       01		      .BYTE.b	#1	; Low Pure Tone
    456  f4b4		       01		      .BYTE.b	#1
    457  f4b5		       08		      .BYTE.b	#8	; White Noise
    458  f4b6		       01		      .BYTE.b	#1
    459  f4b7		       01		      .BYTE.b	#1
    460  f4b8		       ff		      .BYTE.b	#$FF
    461  f4b9		       ff		      .BYTE.b	#$FF
    462  f4ba		       0f		      .BYTE.b	#15
    463  f4bb		       ff		      .BYTE.b	#$FF
    464  f4bc		       ff		      .BYTE.b	#$FF
    465  f4bd		       08		      .BYTE.b	#8
    466  f4be		       ff		      .BYTE.b	#$FF
    467  f4bf		       01		      .BYTE.b	#1
    468  f4c0		       01		      .BYTE.b	#1
    469  f4c1
    470  f4c1				   TitleAudio1
    471  f4c1
    472  f4c1		       1d		      .BYTE.b	#29	; Kick
    473  f4c2		       ff		      .BYTE.b	#$FF
    474  f4c3		       1f		      .BYTE.b	#31	; C
    475  f4c4		       1f		      .BYTE.b	#31
    476  f4c5		       07		      .BYTE.b	#7	; Snare
    477  f4c6		       1f		      .BYTE.b	#31
    478  f4c7		       1f		      .BYTE.b	#31
    479  f4c8		       ff		      .BYTE.b	#$FF
    480  f4c9		       ff		      .BYTE.b	#$FF
    481  f4ca		       1d		      .BYTE.b	#29
    482  f4cb		       ff		      .BYTE.b	#$FF
    483  f4cc		       ff		      .BYTE.b	#$FF
    484  f4cd		       07		      .BYTE.b	#7
    485  f4ce		       ff		      .BYTE.b	#$FF
    486  f4cf		       17		      .BYTE.b	#23	; F
    487  f4d0		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4d1					      include	"game.asm"
      1  f4d1							;================
      2  f4d1							; Game
      3  f4d1							;================
      4  f4d1
      5  f4d1							; Constants
      6  f4d1
      7  f4d1		       00 04	   GAME_AUDIO_VOLUME =	4
      8  f4d1		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4d1		       00 09	   GAME_AUDIO_STEP =	9
     10  f4d1		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4d1		       00 06	   GAME_AUDIO_TONE =	6
     12  f4d1
     13  f4d1							; Object Code
     14  f4d1
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f4d1					      include	"objects/score.asm"
      1  f4d1							;======================
      2  f4d1							; Score (playfield)
      3  f4d1							;======================
      4  f4d1
      5  f4d1							; Constants
      6  f4d1
      7  f4d1		       00 00	   SCORE_BG_COLOR =	#$00
      8  f4d1		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f4d1		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f4d1
     11  f4d1		       00 05	   SCORE_CHAR_SIZE =	5
     12  f4d1		       00 02	   SCORE_LINE_SIZE =	2
     13  f4d1		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f4d1
     15  f4d1							; Initialization
     16  f4d1
     17  f4d1				   ScoreInit
     18  f4d1
     19  f4d1							; Health Score
     20  f4d1		       a9 ff		      lda	#$FF
     21  f4d3		       85 91		      sta	ScoreValue+0
     22  f4d5
     23  f4d5							; Game Score
     24  f4d5		       a9 00		      lda	#0
     25  f4d7		       85 92		      sta	ScoreValue+1
     26  f4d9
     27  f4d9		       60		      rts
     28  f4da
     29  f4da							; Frame Update
     30  f4da
     31  f4da				   ScoreUpdate
     32  f4da
     33  f4da		       a2 01		      ldx	#1
     34  f4dc				   .score_update_loop
     35  f4dc
     36  f4dc							; Ones Digit
     37  f4dc		       b5 91		      lda	ScoreValue,x
     38  f4de		       29 0f		      and	#$0f
     39  f4e0		       85 83		      sta	Temp
     40  f4e2		       0a		      asl
     41  f4e3		       0a		      asl
     42  f4e4		       65 83		      adc	Temp
     43  f4e6		       95 93		      sta	ScoreDigitOnes,x
     44  f4e8
     45  f4e8							; Tens Digit
     46  f4e8		       b5 91		      lda	ScoreValue,x
     47  f4ea		       29 f0		      and	#$f0
     48  f4ec		       4a		      lsr
     49  f4ed		       4a		      lsr
     50  f4ee		       85 83		      sta	Temp
     51  f4f0		       4a		      lsr
     52  f4f1		       4a		      lsr
     53  f4f2		       65 83		      adc	Temp
     54  f4f4		       95 95		      sta	ScoreDigitTens,x
     55  f4f6
     56  f4f6		       ca		      dex
     57  f4f7		       10 e3		      bpl	.score_update_loop
     58  f4f9
     59  f4f9				   .score_update_end
     60  f4f9		       60		      rts
     61  f4fa
     62  f4fa							; Draw loop (uses SCORE_LINES scanlines)
     63  f4fa
     64  f4fa				   ScoreDraw
     65  f4fa
     66  f4fa							; Load Colors
     67  f4fa		       a9 00		      lda	#SCORE_BG_COLOR
     68  f4fc		       85 09		      sta	COLUBK
     69  f4fe		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f500		       85 08		      sta	COLUPF
     71  f502		       85 06		      sta	COLUP0
     72  f504		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f506		       85 07		      sta	COLUP1
     74  f508
     75  f508							; Set Non-Mirror and p0/p1 color
     76  f508		       a5 80		      lda	CtrlPf
     77  f50a		       29 fc		      and	#%11111100
     78  f50c		       09 02		      ora	#%00000010
     79  f50e		       85 80		      sta	CtrlPf
     80  f510		       85 0a		      sta	CTRLPF
     81  f512
     82  f512							;sta WSYNC
     83  f512
     84  f512		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f514
     86  f514				   .score_draw_line
     87  f514
     88  f514							; 1st Value
     89  f514		       a4 95		      ldy	ScoreDigitTens
     90  f516		       b9 6a f5 	      lda	ScoreDigits,y
     91  f519		       29 f0		      and	#$f0
     92  f51b		       85 97		      sta	ScoreGfx
     93  f51d		       a4 93		      ldy	ScoreDigitOnes
     94  f51f		       b9 6a f5 	      lda	ScoreDigits,y
     95  f522		       29 0f		      and	#$0f
     96  f524		       05 97		      ora	ScoreGfx
     97  f526		       85 97		      sta	ScoreGfx
     98  f528
     99  f528		       85 02		      sta	WSYNC
    100  f52a		       85 0e		      sta	PF1
    101  f52c
    102  f52c							; 2nd Value
    103  f52c		       a4 96		      ldy	ScoreDigitTens+1
    104  f52e		       b9 6a f5 	      lda	ScoreDigits,y
    105  f531		       29 f0		      and	#$f0
    106  f533		       85 98		      sta	ScoreGfx+1
    107  f535		       a4 94		      ldy	ScoreDigitOnes+1
    108  f537		       b9 6a f5 	      lda	ScoreDigits,y
    109  f53a		       29 0f		      and	#$0f
    110  f53c		       05 98		      ora	ScoreGfx+1
    111  f53e		       85 98		      sta	ScoreGfx+1
    112  f540
      0  f540					      sleep	12
      1  f540				   .CYCLES    SET	12
      2  f540
      3  f540				  -	      IF	.CYCLES < 2
      4  f540				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f540				  -	      ERR
      6  f540					      ENDIF
      7  f540
      8  f540				  -	      IF	.CYCLES & 1
      9  f540				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f540				  -	      nop	0
     11  f540				  -	      ELSE
     12  f540				  -	      bit	VSYNC
     13  f540				  -	      ENDIF
     14  f540				  -.CYCLES    SET	.CYCLES - 3
     15  f540					      ENDIF
     16  f540
     17  f540					      REPEAT	.CYCLES / 2
     18  f540		       ea		      nop
     17  f540					      REPEND
     18  f541		       ea		      nop
     17  f541					      REPEND
     18  f542		       ea		      nop
     17  f542					      REPEND
     18  f543		       ea		      nop
     17  f543					      REPEND
     18  f544		       ea		      nop
     17  f544					      REPEND
     18  f545		       ea		      nop
     19  f546					      REPEND
    114  f546		       85 0e		      sta	PF1
    115  f548
    116  f548		       a4 97		      ldy	ScoreGfx
    117  f54a		       85 02		      sta	WSYNC
    118  f54c
    119  f54c		       84 0e		      sty	PF1
    120  f54e
    121  f54e		       e6 93		      inc	ScoreDigitOnes
    122  f550		       e6 94		      inc	ScoreDigitOnes+1
    123  f552		       e6 95		      inc	ScoreDigitTens
    124  f554		       e6 96		      inc	ScoreDigitTens+1
    125  f556
      0  f556					      sleep	12
      1  f556				   .CYCLES    SET	12
      2  f556
      3  f556				  -	      IF	.CYCLES < 2
      4  f556				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f556				  -	      ERR
      6  f556					      ENDIF
      7  f556
      8  f556				  -	      IF	.CYCLES & 1
      9  f556				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f556				  -	      nop	0
     11  f556				  -	      ELSE
     12  f556				  -	      bit	VSYNC
     13  f556				  -	      ENDIF
     14  f556				  -.CYCLES    SET	.CYCLES - 3
     15  f556					      ENDIF
     16  f556
     17  f556					      REPEAT	.CYCLES / 2
     18  f556		       ea		      nop
     17  f556					      REPEND
     18  f557		       ea		      nop
     17  f557					      REPEND
     18  f558		       ea		      nop
     17  f558					      REPEND
     18  f559		       ea		      nop
     17  f559					      REPEND
     18  f55a		       ea		      nop
     17  f55a					      REPEND
     18  f55b		       ea		      nop
     19  f55c					      REPEND
    127  f55c		       ca		      dex
    128  f55d		       85 0e		      sta	PF1
    129  f55f
    130  f55f		       d0 b3		      bne	.score_draw_line
    131  f561		       85 02		      sta	WSYNC
    132  f563
    133  f563							; Clear
    134  f563		       a9 00		      lda	#0
    135  f565		       85 0e		      sta	PF1
    136  f567
    137  f567		       85 02		      sta	WSYNC
    138  f569
    139  f569		       60		      rts
    140  f56a
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f56a					      include	"objects/score_digits.asm"
      1  f56a				   ScoreDigits
      2  f56a
      3  f56a		       77		      .BYTE.b	%01110111
      4  f56b		       55		      .BYTE.b	%01010101
      5  f56c		       55		      .BYTE.b	%01010101
      6  f56d		       55		      .BYTE.b	%01010101
      7  f56e		       77		      .BYTE.b	%01110111
      8  f56f
      9  f56f		       11		      .BYTE.b	%00010001
     10  f570		       11		      .BYTE.b	%00010001
     11  f571		       11		      .BYTE.b	%00010001
     12  f572		       11		      .BYTE.b	%00010001
     13  f573		       11		      .BYTE.b	%00010001
     14  f574
     15  f574		       77		      .BYTE.b	%01110111
     16  f575		       11		      .BYTE.b	%00010001
     17  f576		       77		      .BYTE.b	%01110111
     18  f577		       44		      .BYTE.b	%01000100
     19  f578		       77		      .BYTE.b	%01110111
     20  f579
     21  f579		       77		      .BYTE.b	%01110111
     22  f57a		       11		      .BYTE.b	%00010001
     23  f57b		       33		      .BYTE.b	%00110011
     24  f57c		       11		      .BYTE.b	%00010001
     25  f57d		       77		      .BYTE.b	%01110111
     26  f57e
     27  f57e		       55		      .BYTE.b	%01010101
     28  f57f		       55		      .BYTE.b	%01010101
     29  f580		       77		      .BYTE.b	%01110111
     30  f581		       11		      .BYTE.b	%00010001
     31  f582		       11		      .BYTE.b	%00010001
     32  f583
     33  f583		       77		      .BYTE.b	%01110111
     34  f584		       44		      .BYTE.b	%01000100
     35  f585		       77		      .BYTE.b	%01110111
     36  f586		       11		      .BYTE.b	%00010001
     37  f587		       77		      .BYTE.b	%01110111
     38  f588
     39  f588		       77		      .BYTE.b	%01110111
     40  f589		       44		      .BYTE.b	%01000100
     41  f58a		       77		      .BYTE.b	%01110111
     42  f58b		       55		      .BYTE.b	%01010101
     43  f58c		       77		      .BYTE.b	%01110111
     44  f58d
     45  f58d		       77		      .BYTE.b	%01110111
     46  f58e		       11		      .BYTE.b	%00010001
     47  f58f		       22		      .BYTE.b	%00100010
     48  f590		       22		      .BYTE.b	%00100010
     49  f591		       22		      .BYTE.b	%00100010
     50  f592
     51  f592		       77		      .BYTE.b	%01110111
     52  f593		       55		      .BYTE.b	%01010101
     53  f594		       77		      .BYTE.b	%01110111
     54  f595		       55		      .BYTE.b	%01010101
     55  f596		       77		      .BYTE.b	%01110111
     56  f597
     57  f597		       77		      .BYTE.b	%01110111
     58  f598		       55		      .BYTE.b	%01010101
     59  f599		       77		      .BYTE.b	%01110111
     60  f59a		       11		      .BYTE.b	%00010001
     61  f59b		       11		      .BYTE.b	%00010001
     62  f59c
     63  f59c		       77		      .BYTE.b	%01110111
     64  f59d		       55		      .BYTE.b	%01010101
     65  f59e		       77		      .BYTE.b	%01110111
     66  f59f		       55		      .BYTE.b	%01010101
     67  f5a0		       55		      .BYTE.b	%01010101
     68  f5a1
     69  f5a1		       66		      .BYTE.b	%01100110
     70  f5a2		       55		      .BYTE.b	%01010101
     71  f5a3		       66		      .BYTE.b	%01100110
     72  f5a4		       55		      .BYTE.b	%01010101
     73  f5a5		       66		      .BYTE.b	%01100110
     74  f5a6
     75  f5a6		       77		      .BYTE.b	%01110111
     76  f5a7		       44		      .BYTE.b	%01000100
     77  f5a8		       44		      .BYTE.b	%01000100
     78  f5a9		       44		      .BYTE.b	%01000100
     79  f5aa		       77		      .BYTE.b	%01110111
     80  f5ab
     81  f5ab		       66		      .BYTE.b	%01100110
     82  f5ac		       55		      .BYTE.b	%01010101
     83  f5ad		       55		      .BYTE.b	%01010101
     84  f5ae		       55		      .BYTE.b	%01010101
     85  f5af		       66		      .BYTE.b	%01100110
     86  f5b0
     87  f5b0		       77		      .BYTE.b	%01110111
     88  f5b1		       44		      .BYTE.b	%01000100
     89  f5b2		       66		      .BYTE.b	%01100110
     90  f5b3		       44		      .BYTE.b	%01000100
     91  f5b4		       77		      .BYTE.b	%01110111
     92  f5b5
     93  f5b5		       77		      .BYTE.b	%01110111
     94  f5b6		       44		      .BYTE.b	%01000100
     95  f5b7		       66		      .BYTE.b	%01100110
     96  f5b8		       44		      .BYTE.b	%01000100
     97  f5b9		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f5ba					      include	"objects/web.asm"
      1  f5ba							;================
      2  f5ba							; Web (Playfield)
      3  f5ba							;================
      4  f5ba
      5  f5ba							; Constants
      6  f5ba
      7  f5ba		       00 00	   WEB_BG_COLOR =	#$00
      8  f5ba		       00 06	   WEB_FG_COLOR =	#$06
      9  f5ba
     10  f5ba		       00 1e	   WEB_SIZE   =	30
     11  f5ba		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f5ba		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f5ba
     14  f5ba							; Scanline Draw
     15  f5ba
     16  f5ba				   WebDrawStart
     17  f5ba
     18  f5ba							; Load Colors
     19  f5ba		       a9 00		      lda	#WEB_BG_COLOR
     20  f5bc		       85 09		      sta	COLUBK
     21  f5be		       a9 06		      lda	#WEB_FG_COLOR
     22  f5c0		       85 08		      sta	COLUPF
     23  f5c2
     24  f5c2							; Mirror playfield and use standard playfield color
     25  f5c2		       a5 80		      lda	CtrlPf
     26  f5c4		       29 fc		      and	#%11111100
     27  f5c6		       09 01		      ora	#%00000001
     28  f5c8		       85 80		      sta	CtrlPf
     29  f5ca		       85 0a		      sta	CTRLPF
     30  f5cc
     31  f5cc							; Initialize image index
     32  f5cc		       a9 00		      lda	#0
     33  f5ce		       85 99		      sta	WebIndex
     34  f5d0		       a9 01		      lda	#1
     35  f5d2		       85 9a		      sta	WebDir
     36  f5d4
     37  f5d4		       60		      rts
     38  f5d5
     39  f5d5				   WebDraw
     40  f5d5
     41  f5d5		       a4 99		      ldy	WebIndex
     42  f5d7
     43  f5d7							; Draw Image
     44  f5d7		       b9 00 f6 	      lda	WebImagePF0,y
     45  f5da		       85 0d		      sta	PF0
     46  f5dc		       b9 0f f6 	      lda	WebImagePF1,y
     47  f5df		       85 0e		      sta	PF1
     48  f5e1		       b9 1e f6 	      lda	WebImagePF2,y
     49  f5e4		       85 0f		      sta	PF2
     50  f5e6
     51  f5e6							; Increment image index
     52  f5e6		       18		      clc
     53  f5e7		       98		      tya
     54  f5e8		       65 9a		      adc	WebDir
     55  f5ea		       85 99		      sta	WebIndex
     56  f5ec
     57  f5ec		       c9 0f		      cmp	#WEB_SIZE/2
     58  f5ee		       d0 06		      bne	.web_draw_return
     59  f5f0
     60  f5f0		       a9 ff		      lda	#-1
     61  f5f2		       85 9a		      sta	WebDir
     62  f5f4
     63  f5f4		       c6 99		      dec	WebIndex
     64  f5f6
     65  f5f6				   .web_draw_return
     66  f5f6		       60		      rts
     67  f5f7
     68  f5f7				   WebClean
     69  f5f7
     70  f5f7							; Clear out playfield
     71  f5f7		       a9 00		      lda	#0
     72  f5f9		       85 0d		      sta	PF0
     73  f5fb		       85 0e		      sta	PF1
     74  f5fd		       85 0f		      sta	PF2
     75  f5ff
     76  f5ff		       60		      rts
     77  f600
     78  f600							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f600					      include	"objects/web_image.asm"
      1  f600				   WebImagePF0
      2  f600		       00		      .BYTE.b	%00000000
      3  f601		       00		      .BYTE.b	%00000000
      4  f602		       00		      .BYTE.b	%00000000
      5  f603		       00		      .BYTE.b	%00000000
      6  f604		       00		      .BYTE.b	%00000000
      7  f605		       00		      .BYTE.b	%00000000
      8  f606		       00		      .BYTE.b	%00000000
      9  f607		       00		      .BYTE.b	%00000000
     10  f608		       00		      .BYTE.b	%00000000
     11  f609		       30		      .BYTE.b	%00110000
     12  f60a		       e0		      .BYTE.b	%11100000
     13  f60b		       20		      .BYTE.b	%00100000
     14  f60c		       40		      .BYTE.b	%01000000
     15  f60d		       40		      .BYTE.b	%01000000
     16  f60e		       80		      .BYTE.b	%10000000
     17  f60f
     18  f60f				   WebImagePF1
     19  f60f		       08		      .BYTE.b	%00001000
     20  f610		       06		      .BYTE.b	%00000110
     21  f611		       01		      .BYTE.b	%00000001
     22  f612		       00		      .BYTE.b	%00000000
     23  f613		       00		      .BYTE.b	%00000000
     24  f614		       01		      .BYTE.b	%00000001
     25  f615		       01		      .BYTE.b	%00000001
     26  f616		       02		      .BYTE.b	%00000010
     27  f617		       0c		      .BYTE.b	%00001100
     28  f618		       30		      .BYTE.b	%00110000
     29  f619		       c0		      .BYTE.b	%11000000
     30  f61a		       38		      .BYTE.b	%00111000
     31  f61b		       07		      .BYTE.b	%00000111
     32  f61c		       00		      .BYTE.b	%00000000
     33  f61d		       00		      .BYTE.b	%00000000
     34  f61e
     35  f61e				   WebImagePF2
     36  f61e		       20		      .BYTE.b	%00100000
     37  f61f		       18		      .BYTE.b	%00011000
     38  f620		       04		      .BYTE.b	%00000100
     39  f621		       03		      .BYTE.b	%00000011
     40  f622		       3f		      .BYTE.b	%00111111
     41  f623		       c2		      .BYTE.b	%11000010
     42  f624		       04		      .BYTE.b	%00000100
     43  f625		       08		      .BYTE.b	%00001000
     44  f626		       08		      .BYTE.b	%00001000
     45  f627		       10		      .BYTE.b	%00010000
     46  f628		       20		      .BYTE.b	%00100000
     47  f629		       20		      .BYTE.b	%00100000
     48  f62a		       41		      .BYTE.b	%01000001
     49  f62b		       8e		      .BYTE.b	%10001110
     50  f62c		       f0		      .BYTE.b	%11110000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f62d					      include	"objects/spider.asm"
      1  f62d							;=================
      2  f62d							; Spider (player0)
      3  f62d							;=================
      4  f62d
      5  f62d							; Constants
      6  f62d
      7  f62d		       00 56	   SPIDER_COLOR =	#$56
      8  f62d		       00 10	   SPIDER_SIZE =	16
      9  f62d		       00 08	   SPIDER_SPRITE_SIZE =	8
     10  f62d		       00 02	   SPIDER_VEL_X =	2
     11  f62d		       00 02	   SPIDER_VEL_Y =	2
     12  f62d
     13  f62d		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f62d
     15  f62d							; Initialization
     16  f62d
     17  f62d				   SpiderInit
     18  f62d
     19  f62d							; Initialize Position in center of screen
     20  f62d		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f62f		       85 9d		      sta	SpiderPos
     22  f631		       a9 48		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f633		       85 9e		      sta	SpiderPos+1
     24  f635
     25  f635							; Setup Sprite
      0  f635					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f635				   .POINTER   SET	SpiderPtr
      2  f635				   .ADDRESS   SET	SpiderSprite
      3  f635
      4  f635		       a9 ab		      LDA	#<.ADDRESS
      5  f637		       85 9b		      STA	.POINTER
      6  f639		       a9 f7		      LDA	#>.ADDRESS
      7  f63b		       85 9c		      STA	.POINTER+1
      8  f63d
     27  f63d
     28  f63d							;    lda #SPIDER_COLOR
     29  f63d							;    sta SpiderColor
     30  f63d
     31  f63d		       60		      rts
     32  f63e
     33  f63e							; Frame Update
     34  f63e
     35  f63e				   SpiderUpdate
     36  f63e		       20 45 f6 	      jsr	SpiderControl
     37  f641		       20 2b f7 	      jsr	SpiderCollision
     38  f644		       60		      rts
     39  f645
     40  f645				   SpiderControl
     41  f645
     42  f645							; Control Position
     43  f645		       a6 9d		      ldx	SpiderPos
     44  f647		       a4 9e		      ldy	SpiderPos+1
     45  f649		       ad 80 02 	      lda	SWCHA
     46  f64c
     47  f64c				   .spider_control_check_right
     48  f64c		       30 02		      bmi	.spider_control_check_left
     49  f64e
     50  f64e					      REPEAT	#SPIDER_VEL_X
     51  f64e		       e8		      inx
     50  f64e					      REPEND
     51  f64f		       e8		      inx
     52  f650					      REPEND
     53  f650
     54  f650				   .spider_control_check_left
     55  f650		       2a		      rol
     56  f651		       30 02		      bmi	.spider_control_check_down
     57  f653
     58  f653					      REPEAT	#SPIDER_VEL_X
     59  f653		       ca		      dex
     58  f653					      REPEND
     59  f654		       ca		      dex
     60  f655					      REPEND
     61  f655
     62  f655				   .spider_control_check_down
     63  f655		       2a		      rol
     64  f656		       30 02		      bmi	.spider_control_check_up
     65  f658
     66  f658					      REPEAT	#SPIDER_VEL_Y
     67  f658		       88		      dey
     66  f658					      REPEND
     67  f659		       88		      dey
     68  f65a					      REPEND
     69  f65a
     70  f65a				   .spider_control_check_up
     71  f65a		       2a		      rol
     72  f65b		       30 02		      bmi	.spider_control_sprite
     73  f65d
     74  f65d					      REPEAT	#SPIDER_VEL_Y
     75  f65d		       c8		      iny
     74  f65d					      REPEND
     75  f65e		       c8		      iny
     76  f65f					      REPEND
     77  f65f
     78  f65f				   .spider_control_sprite
     79  f65f							; Control Sprite
     80  f65f		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f661
     82  f661				   .spider_control_sprite_x
     83  f661		       e4 9d		      cpx	SpiderPos
     84  f663		       90 04		      bcc	.spider_control_sprite_left
     85  f665		       f0 09		      beq	.spider_control_sprite_y
     86  f667		       b0 05		      bcs	.spider_control_sprite_right
     87  f669
     88  f669				   .spider_control_sprite_left
     89  f669		       09 80		      ora	#%10000000
     90  f66b		       4c 70 f6 	      jmp	.spider_control_sprite_y
     91  f66e
     92  f66e				   .spider_control_sprite_right
     93  f66e		       09 40		      ora	#%01000000
     94  f670
     95  f670				   .spider_control_sprite_y
     96  f670		       c4 9e		      cpy	SpiderPos+1
     97  f672		       90 04		      bcc	.spider_control_sprite_down
     98  f674		       f0 09		      beq	.spider_control_sprite_store
     99  f676		       b0 05		      bcs	.spider_control_sprite_up
    100  f678
    101  f678				   .spider_control_sprite_down
    102  f678		       09 10		      ora	#%00010000
    103  f67a		       4c 7f f6 	      jmp	.spider_control_sprite_store
    104  f67d
    105  f67d				   .spider_control_sprite_up
    106  f67d		       09 20		      ora	#%00100000
    107  f67f
    108  f67f				   .spider_control_sprite_store
    109  f67f		       c9 00		      cmp	#%00000000
    110  f681		       f0 02		      beq	.spider_control_boundary
    111  f683		       85 9f		      sta	SpiderCtrl
    112  f685
    113  f685				   .spider_control_boundary
    114  f685							; Check Playfield Boundaries
    115  f685
    116  f685				   .spider_control_boundary_left
    117  f685		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f687		       b0 05		      bcs	.spider_control_boundary_right
    119  f689		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f68b		       4c 94 f6 	      jmp	.spider_control_boundary_top
    121  f68e
    122  f68e				   .spider_control_boundary_right
    123  f68e		       e0 7e		      cpx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    124  f690		       90 02		      bcc	.spider_control_boundary_top
    125  f692		       a2 7e		      ldx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    126  f694
    127  f694				   .spider_control_boundary_top
    128  f694		       c0 03		      cpy	#SPIDER_VEL_X+1
    129  f696		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f698		       a0 03		      ldy	#SPIDER_VEL_X+1
    131  f69a		       4c a3 f6 	      jmp	.spider_control_store
    132  f69d
    133  f69d				   .spider_control_boundary_bottom
    134  f69d		       c0 b1		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    135  f69f		       90 02		      bcc	.spider_control_store
    136  f6a1		       a0 b1		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    137  f6a3
    138  f6a3				   .spider_control_store
    139  f6a3							; Store new position
    140  f6a3		       86 9d		      stx	SpiderPos
    141  f6a5		       84 9e		      sty	SpiderPos+1
    142  f6a7
    143  f6a7							; TODO: Optimize this somehow?
    144  f6a7				   .spider_control_sprite_assign
    145  f6a7							; Skip if no change
    146  f6a7		       c9 00		      cmp	#%00000000
    147  f6a9		       f0 7f		      beq	.spider_control_return
    148  f6ab
    149  f6ab		       a2 00		      ldx	#%00000000	; For reflection
    150  f6ad
    151  f6ad				   .spider_control_sprite_assign_left
    152  f6ad		       c9 80		      cmp	#%10000000
    153  f6af		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f6b1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f6b1				   .POINTER   SET	SpiderPtr
      2  f6b1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f6b1
      4  f6b1		       a9 bb		      LDA	#<.ADDRESS
      5  f6b3		       85 9b		      STA	.POINTER
      6  f6b5		       a9 f7		      LDA	#>.ADDRESS
      7  f6b7		       85 9c		      STA	.POINTER+1
      8  f6b9
    155  f6b9		       a2 08		      ldx	#%00001000
    156  f6bb		       4c 28 f7 	      jmp	.spider_control_reflect
    157  f6be
    158  f6be				   .spider_control_sprite_assign_right
    159  f6be		       c9 40		      cmp	#%01000000
    160  f6c0		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f6c2					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f6c2				   .POINTER   SET	SpiderPtr
      2  f6c2				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f6c2
      4  f6c2		       a9 bb		      LDA	#<.ADDRESS
      5  f6c4		       85 9b		      STA	.POINTER
      6  f6c6		       a9 f7		      LDA	#>.ADDRESS
      7  f6c8		       85 9c		      STA	.POINTER+1
      8  f6ca
    162  f6ca		       4c 28 f7 	      jmp	.spider_control_reflect
    163  f6cd
    164  f6cd				   .spider_control_sprite_assign_top
    165  f6cd		       c9 20		      cmp	#%00100000
    166  f6cf		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f6d1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f6d1				   .POINTER   SET	SpiderPtr
      2  f6d1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f6d1
      4  f6d1		       a9 ab		      LDA	#<.ADDRESS
      5  f6d3		       85 9b		      STA	.POINTER
      6  f6d5		       a9 f7		      LDA	#>.ADDRESS
      7  f6d7		       85 9c		      STA	.POINTER+1
      8  f6d9
    168  f6d9		       4c 28 f7 	      jmp	.spider_control_reflect
    169  f6dc
    170  f6dc				   .spider_control_sprite_assign_bottom
    171  f6dc		       c9 10		      cmp	#%00010000
    172  f6de		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f6e0					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f6e0				   .POINTER   SET	SpiderPtr
      2  f6e0				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f6e0
      4  f6e0		       a9 cb		      LDA	#<.ADDRESS
      5  f6e2		       85 9b		      STA	.POINTER
      6  f6e4		       a9 f7		      LDA	#>.ADDRESS
      7  f6e6		       85 9c		      STA	.POINTER+1
      8  f6e8
    174  f6e8		       4c 28 f7 	      jmp	.spider_control_reflect
    175  f6eb
    176  f6eb				   .spider_control_sprite_assign_top_right
    177  f6eb		       c9 60		      cmp	#%01100000
    178  f6ed		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f6ef					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f6ef				   .POINTER   SET	SpiderPtr
      2  f6ef				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f6ef
      4  f6ef		       a9 b3		      LDA	#<.ADDRESS
      5  f6f1		       85 9b		      STA	.POINTER
      6  f6f3		       a9 f7		      LDA	#>.ADDRESS
      7  f6f5		       85 9c		      STA	.POINTER+1
      8  f6f7
    180  f6f7		       4c 28 f7 	      jmp	.spider_control_reflect
    181  f6fa
    182  f6fa				   .spider_control_sprite_assign_bottom_right
    183  f6fa		       c9 50		      cmp	#%01010000
    184  f6fc		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f6fe					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f6fe				   .POINTER   SET	SpiderPtr
      2  f6fe				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f6fe
      4  f6fe		       a9 c3		      LDA	#<.ADDRESS
      5  f700		       85 9b		      STA	.POINTER
      6  f702		       a9 f7		      LDA	#>.ADDRESS
      7  f704		       85 9c		      STA	.POINTER+1
      8  f706
    186  f706		       4c 28 f7 	      jmp	.spider_control_reflect
    187  f709
    188  f709				   .spider_control_sprite_assign_bottom_left
    189  f709		       c9 90		      cmp	#%10010000
    190  f70b		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f70d					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f70d				   .POINTER   SET	SpiderPtr
      2  f70d				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f70d
      4  f70d		       a9 c3		      LDA	#<.ADDRESS
      5  f70f		       85 9b		      STA	.POINTER
      6  f711		       a9 f7		      LDA	#>.ADDRESS
      7  f713		       85 9c		      STA	.POINTER+1
      8  f715
    192  f715		       a2 08		      ldx	#%00001000
    193  f717		       4c 28 f7 	      jmp	.spider_control_reflect
    194  f71a
    195  f71a				   .spider_control_sprite_assign_top_left
    196  f71a		       c9 a0		      cmp	#%10100000
    197  f71c		       d0 0a		      bne	.spider_control_reflect
      0  f71e					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f71e				   .POINTER   SET	SpiderPtr
      2  f71e				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f71e
      4  f71e		       a9 b3		      LDA	#<.ADDRESS
      5  f720		       85 9b		      STA	.POINTER
      6  f722		       a9 f7		      LDA	#>.ADDRESS
      7  f724		       85 9c		      STA	.POINTER+1
      8  f726
    199  f726		       a2 08		      ldx	#%00001000
    200  f728
    201  f728				   .spider_control_reflect
    202  f728		       86 0b		      stx	REFP0
    203  f72a
    204  f72a				   .spider_control_return
    205  f72a		       60		      rts
    206  f72b
    207  f72b				   SpiderCollision
    208  f72b		       a9 56		      lda	#SPIDER_COLOR
    209  f72d
    210  f72d				   .spider_collision_m0
    211  f72d							; Check stun status
    212  f72d		       a6 ae		      ldx	BugStunned
    213  f72f		       e0 00		      cpx	#0
    214  f731		       d0 04		      bne	.spider_collision_m1
    215  f733
    216  f733							; Collision for M0 (V set)
    217  f733		       24 00		      bit	CXM0P
    218  f735		       70 0d		      bvs	.spider_collision_active
    219  f737
    220  f737				   .spider_collision_m1
    221  f737							; Check stun status
    222  f737		       a6 af		      ldx	BugStunned+1
    223  f739		       e0 00		      cpx	#0
    224  f73b		       d0 09		      bne	.spider_collision_return
    225  f73d
    226  f73d							; Collision for M1 (N set)
    227  f73d		       24 01		      bit	CXM1P
    228  f73f		       30 03		      bmi	.spider_collision_active
    229  f741
    230  f741		       4c 46 f7 	      jmp	.spider_collision_return
    231  f744
    232  f744				   .spider_collision_active
    233  f744		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f746
    235  f746				   .spider_collision_return
    236  f746		       85 a0		      sta	SpiderColor
    237  f748		       60		      rts
    238  f749
    239  f749				   SpiderPosition
    240  f749
    241  f749							; Set Position
    242  f749		       a2 00		      ldx	#0	; Object (player0)
    243  f74b		       a5 9d		      lda	SpiderPos	; X Position
    244  f74d		       20 00 f0 	      jsr	PosObject
    245  f750
    246  f750		       60		      rts
    247  f751
    248  f751							; Scanline Draw
    249  f751
    250  f751				   SpiderDrawStart
    251  f751
    252  f751							; Set player 0 to be double size
    253  f751							; and missile 0 to be 4 clock size
    254  f751		       a5 81		      lda	NuSiz0
    255  f753		       09 07		      ora	#%00000111
    256  f755		       85 81		      sta	NuSiz0
    257  f757		       85 04		      sta	NUSIZ0
    258  f759
    259  f759							; Set sprite color
    260  f759		       a5 a0		      lda	SpiderColor
    261  f75b		       85 06		      sta	COLUP0
    262  f75d
    263  f75d							; Determine if we need to use vertical delay (odd line)
    264  f75d		       a5 9e		      lda	SpiderPos+1	; Y Position
    265  f75f		       4a		      lsr
    266  f760		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f762
    268  f762		       a0 01		      ldy	#1
    269  f764		       4c 69 f7 	      jmp	.spider_draw_start_set_delay
    270  f767
    271  f767				   .spider_draw_start_nodelay
    272  f767		       a0 00		      ldy	#0
    273  f769
    274  f769				   .spider_draw_start_set_delay
    275  f769		       84 25		      sty	VDELP0
    276  f76b
    277  f76b				   .spider_draw_start_pos
    278  f76b							; Calculate starting position
    279  f76b		       18		      clc
    280  f76c		       69 10		      adc	#SPIDER_SIZE
    281  f76e		       85 a2		      sta	SpiderDrawPos
    282  f770
    283  f770							; Initialize sprite index
    284  f770		       a9 00		      lda	#0
    285  f772		       85 a1		      sta	SpiderIndex
    286  f774
    287  f774		       60		      rts
    288  f775
    289  f775				   SpiderDraw
    290  f775
    291  f775		       a4 a1		      ldy	SpiderIndex
    292  f777		       c0 10		      cpy	#(SPIDER_SPRITE_SIZE*2)
    293  f779		       f0 1f		      beq	.spider_draw_blank	; At end of sprite
    294  f77b		       b0 28		      bcs	.spider_draw_return	; Completed drawing sprite
    295  f77d		       c0 00		      cpy	#0
    296  f77f		       d0 06		      bne	.spider_draw_line
    297  f781
    298  f781							; Use half scanline
    299  f781		       a5 84		      lda	Temp+1
    300  f783
    301  f783		       e5 a2		      sbc	SpiderDrawPos
    302  f785		       10 1e		      bpl	.spider_draw_return	; Not yet to draw sprite
    303  f787
    304  f787				   .spider_draw_line
    305  f787		       98		      tya
    306  f788		       4a		      lsr
    307  f789		       b0 09		      bcs	.spider_draw_skip
    308  f78b		       a8		      tay
    309  f78c
    310  f78c		       b1 9b		      lda	(SpiderPtr),y
    311  f78e		       85 1b		      sta	GRP0
    312  f790
    313  f790							; Using this for now until we have another sprite
    314  f790		       a9 00		      lda	#0
    315  f792		       85 1c		      sta	GRP1
    316  f794
    317  f794				   .spider_draw_skip
    318  f794		       a4 a1		      ldy	SpiderIndex
    319  f796		       c8		      iny
    320  f797		       84 a1		      sty	SpiderIndex
    321  f799		       60		      rts		; Early return
    322  f79a
    323  f79a				   .spider_draw_blank
    324  f79a		       a9 00		      lda	#0
    325  f79c		       85 1b		      sta	GRP0
    326  f79e
    327  f79e							; Using this for now until we have another sprite
    328  f79e		       a9 00		      lda	#0
    329  f7a0		       85 1c		      sta	GRP1
    330  f7a2
    331  f7a2							; Push index to be one above
    332  f7a2		       c8		      iny
    333  f7a3		       84 a1		      sty	SpiderIndex
    334  f7a5
    335  f7a5				   .spider_draw_return
    336  f7a5		       60		      rts
    337  f7a6
    338  f7a6				   SpiderClean
    339  f7a6
    340  f7a6							; Clear out Player0 sprite
    341  f7a6		       a9 00		      lda	#0
    342  f7a8		       85 1b		      sta	GRP0
    343  f7aa
    344  f7aa		       60		      rts
    345  f7ab
    346  f7ab							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f7ab					      include	"objects/spider_sprite.asm"
      1  f7ab				   SpiderSprite
      2  f7ab
      3  f7ab		       99		      .BYTE.b	%10011001
      4  f7ac		       bd		      .BYTE.b	%10111101
      5  f7ad		       99		      .BYTE.b	%10011001
      6  f7ae		       7e		      .BYTE.b	%01111110
      7  f7af		       3c		      .BYTE.b	%00111100
      8  f7b0		       7e		      .BYTE.b	%01111110
      9  f7b1		       bd		      .BYTE.b	%10111101
     10  f7b2		       99		      .BYTE.b	%10011001
     11  f7b3
     12  f7b3		       0b		      .BYTE.b	%00001011
     13  f7b4		       13		      .BYTE.b	%00010011
     14  f7b5		       1c		      .BYTE.b	%00011100
     15  f7b6		       2d		      .BYTE.b	%00101101
     16  f7b7		       f6		      .BYTE.b	%11110110
     17  f7b8		       b8		      .BYTE.b	%10111000
     18  f7b9		       10		      .BYTE.b	%00010000
     19  f7ba		       30		      .BYTE.b	%00110000
     20  f7bb
     21  f7bb		       c7		      .BYTE.b	%11000111
     22  f7bc		       28		      .BYTE.b	%00101000
     23  f7bd		       7a		      .BYTE.b	%01111010
     24  f7be		       ff		      .BYTE.b	%11111111
     25  f7bf		       ff		      .BYTE.b	%11111111
     26  f7c0		       7a		      .BYTE.b	%01111010
     27  f7c1		       28		      .BYTE.b	%00101000
     28  f7c2		       c7		      .BYTE.b	%11000111
     29  f7c3
     30  f7c3		       30		      .BYTE.b	%00110000
     31  f7c4		       10		      .BYTE.b	%00010000
     32  f7c5		       b8		      .BYTE.b	%10111000
     33  f7c6		       f6		      .BYTE.b	%11110110
     34  f7c7		       2d		      .BYTE.b	%00101101
     35  f7c8		       1c		      .BYTE.b	%00011100
     36  f7c9		       13		      .BYTE.b	%00010011
     37  f7ca		       0b		      .BYTE.b	%00001011
     38  f7cb
     39  f7cb		       99		      .BYTE.b	%10011001
     40  f7cc		       bd		      .BYTE.b	%10111101
     41  f7cd		       7e		      .BYTE.b	%01111110
     42  f7ce		       3c		      .BYTE.b	%00111100
     43  f7cf		       7e		      .BYTE.b	%01111110
     44  f7d0		       99		      .BYTE.b	%10011001
     45  f7d1		       bd		      .BYTE.b	%10111101
     46  f7d2		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f7d3					      include	"objects/line.asm"
      1  f7d3							;================
      2  f7d3							; Line (ball)
      3  f7d3							;================
      4  f7d3
      5  f7d3							; Constants
      6  f7d3
      7  f7d3		       00 04	   LINE_SIZE  =	4
      8  f7d3		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f7d3		       00 04	   LINE_VEL_X =	4
     10  f7d3		       00 04	   LINE_VEL_Y =	4
     11  f7d3
     12  f7d3		       00 08	   LINE_AUDIO_C =	8
     13  f7d3		       00 01	   LINE_AUDIO_F =	1
     14  f7d3		       00 04	   LINE_AUDIO_V =	4
     15  f7d3
     16  f7d3		       00 08	   LINE_SAMPLE_LEN =	8
     17  f7d3		       00 03	   LINE_SAMPLE_C =	3
     18  f7d3		       00 01	   LINE_SAMPLE_F =	1
     19  f7d3		       00 04	   LINE_SAMPLE_V =	4
     20  f7d3
     21  f7d3							; Initialization
     22  f7d3
     23  f7d3				   LineInit
     24  f7d3
     25  f7d3							; Initial Line Control
     26  f7d3		       a9 00		      lda	#0
     27  f7d5		       85 a5		      sta	LineEnabled
     28  f7d7		       85 a6		      sta	LinePos+0
     29  f7d9		       85 a7		      sta	LinePos+1
     30  f7db		       85 a8		      sta	LineVelocity+0
     31  f7dd		       85 a9		      sta	LineVelocity+1
     32  f7df		       85 aa		      sta	LineStartPos+0
     33  f7e1		       85 ab		      sta	LineStartPos+1
     34  f7e3		       85 ac		      sta	LineDrawPos+0
     35  f7e5		       85 ad		      sta	LineDrawPos+1
     36  f7e7
     37  f7e7		       60		      rts
     38  f7e8
     39  f7e8							; Frame Update
     40  f7e8
     41  f7e8				   LineUpdate
     42  f7e8		       20 f2 f7 	      jsr	LineControl
     43  f7eb		       20 a4 f8 	      jsr	LineObject
     44  f7ee		       20 eb f8 	      jsr	LineCollision
     45  f7f1		       60		      rts
     46  f7f2
     47  f7f2				   LineControl
     48  f7f2
     49  f7f2							; Check if Fire Button on controller 1 is pressed
     50  f7f2		       a5 0c		      lda	INPT4
     51  f7f4		       30 0a		      bmi	.line_control_skip
     52  f7f6
     53  f7f6		       24 a5		      bit	LineEnabled
     54  f7f8		       30 06		      bmi	.line_control_skip
     55  f7fa
     56  f7fa		       a5 9f		      lda	SpiderCtrl
     57  f7fc		       c9 00		      cmp	#0
     58  f7fe		       d0 03		      bne	.line_control_fire
     59  f800
     60  f800				   .line_control_skip
     61  f800		       4c a3 f8 	      jmp	.line_control_return
     62  f803
     63  f803				   .line_control_fire
     64  f803		       20 46 f9 	      jsr	LineEnable
     65  f806
     66  f806				   .line_control_x
     67  f806		       a5 9f		      lda	SpiderCtrl
     68  f808		       29 c0		      and	#%11000000
     69  f80a		       f0 0e		      beq	.line_control_x_none
     70  f80c				   .line_control_x_left
     71  f80c		       c9 80		      cmp	#%10000000
     72  f80e		       d0 05		      bne	.line_control_x_right
     73  f810
     74  f810		       a9 fc		      lda	#-LINE_VEL_X
     75  f812		       4c 1c f8 	      jmp	.line_control_x_store
     76  f815				   .line_control_x_right
     77  f815		       a9 04		      lda	#LINE_VEL_X
     78  f817		       4c 1c f8 	      jmp	.line_control_x_store
     79  f81a				   .line_control_x_none
     80  f81a		       a9 00		      lda	#0
     81  f81c				   .line_control_x_store
     82  f81c		       85 a8		      sta	LineVelocity
     83  f81e
     84  f81e				   .line_control_y
     85  f81e		       a5 9f		      lda	SpiderCtrl
     86  f820		       29 30		      and	#%00110000
     87  f822		       f0 0e		      beq	.line_control_y_none
     88  f824				   .line_control_y_up
     89  f824		       c9 20		      cmp	#%00100000
     90  f826		       d0 05		      bne	.line_control_y_down
     91  f828
     92  f828		       a9 04		      lda	#LINE_VEL_Y
     93  f82a		       4c 34 f8 	      jmp	.line_control_y_store
     94  f82d				   .line_control_y_down
     95  f82d		       a9 fc		      lda	#-LINE_VEL_Y
     96  f82f		       4c 34 f8 	      jmp	.line_control_y_store
     97  f832				   .line_control_y_none
     98  f832		       a9 00		      lda	#0
     99  f834				   .line_control_y_store
    100  f834		       85 a9		      sta	LineVelocity+1
    101  f836
    102  f836				   .line_control_position
    103  f836
    104  f836		       a2 00		      ldx	#0	; offsetX
    105  f838		       a0 00		      ldy	#0	; offsetY
    106  f83a
    107  f83a		       a5 9f		      lda	SpiderCtrl
    108  f83c		       29 f0		      and	#%11110000
    109  f83e
    110  f83e				   .line_control_position_left
    111  f83e		       c9 80		      cmp	#%10000000
    112  f840		       d0 07		      bne	.line_control_position_right
    113  f842
    114  f842		       a2 04		      ldx	#LINE_SIZE
    115  f844		       a0 10		      ldy	#SPIDER_SIZE
    116  f846		       4c 8b f8 	      jmp	.line_control_position_store
    117  f849
    118  f849				   .line_control_position_right
    119  f849		       c9 40		      cmp	#%01000000
    120  f84b		       d0 07		      bne	.line_control_position_top
    121  f84d
    122  f84d		       a2 20		      ldx	#SPIDER_SIZE*2
    123  f84f		       a0 10		      ldy	#SPIDER_SIZE
    124  f851		       4c 8b f8 	      jmp	.line_control_position_store
    125  f854
    126  f854				   .line_control_position_top
    127  f854		       c9 20		      cmp	#%00100000
    128  f856		       d0 07		      bne	.line_control_position_bottom
    129  f858
    130  f858		       a2 10		      ldx	#SPIDER_SIZE
    131  f85a		       a0 20		      ldy	#SPIDER_SIZE*2
    132  f85c		       4c 8b f8 	      jmp	.line_control_position_store
    133  f85f
    134  f85f				   .line_control_position_bottom
    135  f85f		       c9 10		      cmp	#%00010000
    136  f861		       d0 05		      bne	.line_control_position_top_right
    137  f863
    138  f863		       a2 10		      ldx	#SPIDER_SIZE
    139  f865		       4c 8b f8 	      jmp	.line_control_position_store
    140  f868
    141  f868				   .line_control_position_top_right
    142  f868		       c9 60		      cmp	#%01100000
    143  f86a		       d0 07		      bne	.line_control_position_bottom_right
    144  f86c
    145  f86c		       a2 20		      ldx	#SPIDER_SIZE*2
    146  f86e		       a0 20		      ldy	#SPIDER_SIZE*2
    147  f870		       4c 8b f8 	      jmp	.line_control_position_store
    148  f873
    149  f873				   .line_control_position_bottom_right
    150  f873		       c9 50		      cmp	#%01010000
    151  f875		       d0 05		      bne	.line_control_position_bottom_left
    152  f877
    153  f877		       a2 20		      ldx	#SPIDER_SIZE*2
    154  f879		       4c 8b f8 	      jmp	.line_control_position_store
    155  f87c
    156  f87c				   .line_control_position_bottom_left
    157  f87c		       c9 90		      cmp	#%10010000
    158  f87e		       d0 03		      bne	.line_control_position_top_left
    159  f880
    160  f880							; No Offset
    161  f880		       4c 8b f8 	      jmp	.line_control_position_store
    162  f883
    163  f883				   .line_control_position_top_left
    164  f883		       c9 a0		      cmp	#%10100000
    165  f885		       d0 04		      bne	.line_control_position_store
    166  f887
    167  f887		       a2 04		      ldx	#LINE_SIZE
    168  f889		       a0 20		      ldy	#SPIDER_SIZE*2
    169  f88b
    170  f88b				   .line_control_position_store
    171  f88b
    172  f88b							; Apply offsetX to playerX
    173  f88b		       a5 9d		      lda	SpiderPos
    174  f88d		       86 83		      stx	Temp
    175  f88f		       18		      clc
    176  f890		       65 83		      adc	Temp
    177  f892		       aa		      tax
    178  f893
    179  f893							; Apply offsetY to playerY
    180  f893		       a5 9e		      lda	SpiderPos+1
    181  f895		       84 83		      sty	Temp
    182  f897		       18		      clc
    183  f898		       65 83		      adc	Temp
    184  f89a		       a8		      tay
    185  f89b
    186  f89b		       86 a6		      stx	LinePos
    187  f89d		       84 a7		      sty	LinePos+1
    188  f89f		       86 aa		      stx	LineStartPos
    189  f8a1		       84 ab		      sty	LineStartPos+1
    190  f8a3
    191  f8a3				   .line_control_return
    192  f8a3		       60		      rts
    193  f8a4
    194  f8a4				   LineObject
    195  f8a4
    196  f8a4							; Check if line is enabled
    197  f8a4		       24 a5		      bit	LineEnabled
    198  f8a6		       10 42		      bpl	.line_object_return
    199  f8a8
    200  f8a8							; Load position
    201  f8a8		       a6 a6		      ldx	LinePos
    202  f8aa		       a4 a7		      ldy	LinePos+1
    203  f8ac
    204  f8ac				   .line_object_distance
    205  f8ac
    206  f8ac							; Check distance from player with absolute value differences
    207  f8ac
    208  f8ac				   .line_object_distance_x
    209  f8ac		       8a		      txa
    210  f8ad		       18		      clc
    211  f8ae		       e5 aa		      sbc	LineStartPos
    212  f8b0		       b0 04		      bcs	.line_object_distance_x_check
    213  f8b2		       49 ff		      eor	#$FF	; C flag is clear here
    214  f8b4		       69 01		      adc	#$01	; form two's complement
    215  f8b6				   .line_object_distance_x_check		; Jumps to if positive
    216  f8b6		       c9 40		      cmp	#LINE_DISTANCE
    217  f8b8		       b0 2d		      bcs	.line_object_disable
    218  f8ba
    219  f8ba				   .line_object_distance_y
    220  f8ba		       98		      tya
    221  f8bb		       18		      clc
    222  f8bc		       e5 ab		      sbc	LineStartPos+1
    223  f8be		       b0 04		      bcs	.line_object_distance_y_check
    224  f8c0		       49 ff		      eor	#$FF	; C flag is clear here
    225  f8c2		       69 01		      adc	#$01	; form two's complement
    226  f8c4				   .line_object_distance_y_check		; Jumps to if positive
    227  f8c4		       c9 40		      cmp	#LINE_DISTANCE
    228  f8c6		       b0 1f		      bcs	.line_object_disable
    229  f8c8
    230  f8c8				   .line_object_boundary
    231  f8c8				   .line_object_boundary_left
    232  f8c8		       e0 04		      cpx	#LINE_VEL_X
    233  f8ca		       90 1b		      bcc	.line_object_disable
    234  f8cc				   .line_object_boundary_right
    235  f8cc		       e0 9c		      cpx	#160-LINE_VEL_X
    236  f8ce		       b0 17		      bcs	.line_object_disable
    237  f8d0				   .line_object_boundary_bottom
    238  f8d0		       c0 04		      cpy	#LINE_VEL_Y
    239  f8d2		       90 13		      bcc	.line_object_disable
    240  f8d4				   .line_object_boundary_top
    241  f8d4		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    242  f8d6		       b0 0f		      bcs	.line_object_disable
    243  f8d8
    244  f8d8				   .line_object_velocity
    245  f8d8
    246  f8d8							; Apply Velocity
    247  f8d8		       8a		      txa
    248  f8d9		       18		      clc
    249  f8da		       65 a8		      adc	LineVelocity
    250  f8dc		       85 a6		      sta	LinePos
    251  f8de
    252  f8de		       98		      tya
    253  f8df		       18		      clc
    254  f8e0		       65 a9		      adc	LineVelocity+1
    255  f8e2		       85 a7		      sta	LinePos+1
    256  f8e4
    257  f8e4		       4c ea f8 	      jmp	.line_object_return
    258  f8e7
    259  f8e7				   .line_object_disable
    260  f8e7		       20 54 f9 	      jsr	LineDisable
    261  f8ea
    262  f8ea				   .line_object_return
    263  f8ea		       60		      rts
    264  f8eb
    265  f8eb				   LineCollision
    266  f8eb
    267  f8eb		       a9 78		      lda	#BUG_STUN_LENGTH
    268  f8ed
    269  f8ed				   .line_collision_m0
    270  f8ed		       24 04		      bit	CXM0FB
    271  f8ef		       50 08		      bvc	.line_collision_m1
    272  f8f1
    273  f8f1							; Set stun timer
    274  f8f1		       85 ae		      sta	BugStunned+0
    275  f8f3
    276  f8f3							; Disable line
    277  f8f3		       20 54 f9 	      jsr	LineDisable
    278  f8f6		       4c 02 f9 	      jmp	.line_collision_sample
    279  f8f9
    280  f8f9				   .line_collision_m1
    281  f8f9		       24 05		      bit	CXM1FB
    282  f8fb		       50 08		      bvc	.line_collision_return
    283  f8fd
    284  f8fd							; Set stun timer
    285  f8fd		       85 af		      sta	BugStunned+1
    286  f8ff
    287  f8ff							; Disable line
    288  f8ff		       20 54 f9 	      jsr	LineDisable
    289  f902
    290  f902				   .line_collision_sample
    291  f902		       20 78 f9 	      jsr	LineSample
    292  f905
    293  f905				   .line_collision_return
    294  f905		       60		      rts
    295  f906
    296  f906				   LinePosition
    297  f906
    298  f906							; Set Line Position
    299  f906		       a2 04		      ldx	#4	; Object (ball)
    300  f908		       a5 a6		      lda	LinePos	; X Position
    301  f90a		       20 00 f0 	      jsr	PosObject
    302  f90d
    303  f90d		       60		      rts
    304  f90e
    305  f90e							; Scanline Draw
    306  f90e
    307  f90e				   LineDrawStart
    308  f90e
    309  f90e							; Set ball size to be 4 clocks (4/5 bits)
    310  f90e		       a5 80		      lda	CtrlPf
    311  f910		       29 cf		      and	#%11001111
    312  f912		       09 20		      ora	#%00100000
    313  f914		       85 80		      sta	CtrlPf
    314  f916		       85 0a		      sta	CTRLPF
    315  f918
    316  f918							; Determine if we need to use vertical delay (oven line)
    317  f918		       a5 a7		      lda	LinePos+1
    318  f91a		       4a		      lsr
    319  f91b		       90 05		      bcc	.line_draw_start_nodelay
    320  f91d
    321  f91d		       a0 01		      ldy	#1
    322  f91f		       4c 24 f9 	      jmp	.line_draw_start_set_delay
    323  f922
    324  f922				   .line_draw_start_nodelay
    325  f922		       a0 00		      ldy	#0
    326  f924
    327  f924				   .line_draw_start_set_delay
    328  f924		       84 27		      sty	VDELBL
    329  f926
    330  f926				   .line_draw_start_pos
    331  f926							; Calculate starting position
    332  f926		       18		      clc
    333  f927		       85 ac		      sta	LineDrawPos+0
    334  f929		       69 02		      adc	#LINE_SIZE/2
    335  f92b		       85 ad		      sta	LineDrawPos+1
    336  f92d
    337  f92d		       60		      rts
    338  f92e
    339  f92e				   LineDraw
    340  f92e
    341  f92e		       a0 00		      ldy	#%00000000
    342  f930
    343  f930							; Check if visible
    344  f930		       24 a5		      bit	LineEnabled
    345  f932		       10 0a		      bpl	.line_draw_off
    346  f934
    347  f934							; Load half scanline
    348  f934							;    lda Temp+1
    349  f934
    350  f934							; Top
    351  f934		       c5 ad		      cmp	LineDrawPos+1
    352  f936		       b0 06		      bcs	.line_draw_off
    353  f938
    354  f938							; Bottom
    355  f938		       c5 ac		      cmp	LineDrawPos+0
    356  f93a		       90 02		      bcc	.line_draw_off
    357  f93c
    358  f93c				   .line_draw_on
    359  f93c		       a0 02		      ldy	#%00000010
    360  f93e
    361  f93e				   .line_draw_off
    362  f93e		       84 1f		      sty	ENABL
    363  f940
    364  f940		       60		      rts
    365  f941
    366  f941				   LineClean
    367  f941
    368  f941							; Clear out Line
    369  f941		       a9 00		      lda	#0
    370  f943		       85 1f		      sta	ENABL
    371  f945
    372  f945		       60		      rts
    373  f946
    374  f946				   LineEnable
    375  f946		       a9 80		      lda	#%10000000
    376  f948		       85 a5		      sta	LineEnabled
    377  f94a
    378  f94a		       a5 90		      lda	SampleStep
    379  f94c		       c9 00		      cmp	#0
    380  f94e		       d0 03		      bne	.line_enable_return
    381  f950
    382  f950		       20 62 f9 	      jsr	LineAudioPlay
    383  f953
    384  f953				   .line_enable_return
    385  f953		       60		      rts
    386  f954
    387  f954				   LineDisable
    388  f954		       a9 00		      lda	#0
    389  f956		       85 a5		      sta	LineEnabled
    390  f958
    391  f958		       a5 90		      lda	SampleStep
    392  f95a		       c9 00		      cmp	#0
    393  f95c		       d0 03		      bne	.line_disable_return
    394  f95e
    395  f95e		       20 6f f9 	      jsr	LineAudioMute
    396  f961
    397  f961				   .line_disable_return
    398  f961		       60		      rts
    399  f962
    400  f962				   LineAudioPlay
    401  f962		       a9 08		      lda	#LINE_AUDIO_C
    402  f964		       85 16		      sta	AUDC1
    403  f966		       a9 01		      lda	#LINE_AUDIO_F
    404  f968		       85 18		      sta	AUDF1
    405  f96a		       a9 04		      lda	#LINE_AUDIO_V
    406  f96c		       85 1a		      sta	AUDV1
    407  f96e		       60		      rts
    408  f96f
    409  f96f				   LineAudioMute
    410  f96f		       a9 00		      lda	#0
    411  f971		       85 1a		      sta	AUDV1
    412  f973		       85 18		      sta	AUDF1
    413  f975		       85 16		      sta	AUDC1
    414  f977		       60		      rts
    415  f978
    416  f978				   LineSample
    417  f978		       a9 08		      lda	#LINE_SAMPLE_LEN
    418  f97a		       85 90		      sta	SampleStep
    419  f97c		       a9 03		      lda	#LINE_SAMPLE_C
    420  f97e		       85 16		      sta	AUDC1
    421  f980		       a9 01		      lda	#LINE_SAMPLE_F
    422  f982		       85 18		      sta	AUDF1
    423  f984		       a9 04		      lda	#LINE_SAMPLE_V
    424  f986		       85 1a		      sta	AUDV1
    425  f988		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f989					      include	"objects/bug.asm"
      1  f989							;======================
      2  f989							; Bugs (missiles 0 & 1)
      3  f989							;======================
      4  f989
      5  f989							; Constants
      6  f989
      7  f989		       00 08	   BUG_SIZE   =	8
      8  f989		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f989		       00 02	   BUG_SPEED  =	2
     10  f989		       00 78	   BUG_STUN_LENGTH =	120
     11  f989		       00 04	   BUG_POINTS =	4
     12  f989
     13  f989		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f989		       00 38	   BUG_COLOR_STUN =	#$38
     15  f989
     16  f989		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f989		       00 03	   BUG_SAMPLE_C =	3
     18  f989		       00 14	   BUG_SAMPLE_F =	20
     19  f989		       00 04	   BUG_SAMPLE_V =	4
     20  f989
     21  f989		       00 01	   BUG_COL_SAMPLE_LEN =	1
     22  f989		       00 08	   BUG_COL_SAMPLE_C =	8
     23  f989		       00 08	   BUG_COL_SAMPLE_F =	8
     24  f989		       00 03	   BUG_COL_SAMPLE_V =	3
     25  f989
     26  f989							; Initialization
     27  f989
     28  f989				   BugInit
     29  f989
     30  f989							; Initialize Bugs
     31  f989		       a2 01		      ldx	#1
     32  f98b
     33  f98b				   .bug_init_loop
     34  f98b		       20 92 f9 	      jsr	BugReset
     35  f98e
     36  f98e		       ca		      dex
     37  f98f		       10 fa		      bpl	.bug_init_loop
     38  f991
     39  f991		       60		      rts
     40  f992
     41  f992				   BugReset		; x = bug (0 or 1)
     42  f992
     43  f992							; Set random position
     44  f992		       20 13 f0 	      jsr	Random
     45  f995
     46  f995		       a5 85		      lda	Rand8
     47  f997		       29 7f		      and	#$7f
     48  f999		       95 b0		      sta	BugPosX,x
     49  f99b
     50  f99b		       a5 86		      lda	Rand16
     51  f99d		       29 7f		      and	#$7f
     52  f99f		       95 b2		      sta	BugPosY,x
     53  f9a1
     54  f9a1							; Set as active
     55  f9a1		       a9 00		      lda	#0
     56  f9a3		       95 ae		      sta	BugStunned,x
     57  f9a5
     58  f9a5							; Reset Color
     59  f9a5		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     60  f9a7		       95 b4		      sta	BugColor,x
     61  f9a9
     62  f9a9		       60		      rts
     63  f9aa
     64  f9aa							; Frame Update
     65  f9aa
     66  f9aa				   BugUpdate
     67  f9aa
     68  f9aa		       a2 01		      ldx	#1
     69  f9ac				   .bug_update_loop
     70  f9ac		       86 83		      stx	Temp+0
     71  f9ae
     72  f9ae		       b5 ae		      lda	BugStunned,x
     73  f9b0		       c9 00		      cmp	#0
     74  f9b2		       f0 08		      beq	.bug_update_active
     75  f9b4
     76  f9b4				   .bug_update_stunned
     77  f9b4		       d6 ae		      dec	BugStunned,x
     78  f9b6		       20 2f fa 	      jsr	BugStunCollision
     79  f9b9		       4c c2 f9 	      jmp	.bug_update_next
     80  f9bc
     81  f9bc				   .bug_update_active
     82  f9bc		       20 c8 f9 	      jsr	BugMovement
     83  f9bf		       20 1b fa 	      jsr	BugCollision
     84  f9c2
     85  f9c2				   .bug_update_next
     86  f9c2		       a6 83		      ldx	Temp+0
     87  f9c4		       ca		      dex
     88  f9c5		       10 e5		      bpl	.bug_update_loop
     89  f9c7
     90  f9c7		       60		      rts
     91  f9c8
     92  f9c8				   BugMovement
     93  f9c8
     94  f9c8				   .bug_movement_random
     95  f9c8		       20 13 f0 	      jsr	Random
     96  f9cb		       29 03		      and	#%00000011
     97  f9cd		       85 84		      sta	Temp+1
     98  f9cf
     99  f9cf				   .bug_movement_load
    100  f9cf							; Load x and y values
    101  f9cf		       a6 83		      ldx	Temp+0
    102  f9d1		       b5 b0		      lda	BugPosX,x
    103  f9d3		       b4 b2		      ldy	BugPosY,x
    104  f9d5		       aa		      tax
    105  f9d6
    106  f9d6				   .bug_movement_x
    107  f9d6							; Alter X Position
    108  f9d6		       a5 84		      lda	Temp+1
    109  f9d8		       29 01		      and	#%00000001
    110  f9da
    111  f9da				   .bug_movement_x_left
    112  f9da		       c9 01		      cmp	#1
    113  f9dc		       d0 05		      bne	.bug_movement_x_right
    114  f9de					      REPEAT	#BUG_SPEED
    115  f9de		       ca		      dex
    114  f9de					      REPEND
    115  f9df		       ca		      dex
    116  f9e0					      REPEND
    117  f9e0		       4c e5 f9 	      jmp	.bug_movement_y
    118  f9e3
    119  f9e3				   .bug_movement_x_right
    120  f9e3					      REPEAT	#BUG_SPEED
    121  f9e3		       e8		      inx
    120  f9e3					      REPEND
    121  f9e4		       e8		      inx
    122  f9e5					      REPEND
    123  f9e5
    124  f9e5				   .bug_movement_y
    125  f9e5							; Alter Y Position
    126  f9e5		       a5 84		      lda	Temp+1
    127  f9e7		       29 02		      and	#%00000010
    128  f9e9		       4a		      lsr
    129  f9ea
    130  f9ea				   .bug_movement_y_up
    131  f9ea		       c9 01		      cmp	#1
    132  f9ec		       d0 05		      bne	.bug_movement_y_down
    133  f9ee					      REPEAT	#BUG_SPEED
    134  f9ee		       c8		      iny
    133  f9ee					      REPEND
    134  f9ef		       c8		      iny
    135  f9f0					      REPEND
    136  f9f0		       4c f5 f9 	      jmp	.bug_movement_boundary
    137  f9f3
    138  f9f3				   .bug_movement_y_down
    139  f9f3					      REPEAT	#BUG_SPEED
    140  f9f3		       88		      dey
    139  f9f3					      REPEND
    140  f9f4		       88		      dey
    141  f9f5					      REPEND
    142  f9f5
    143  f9f5				   .bug_movement_boundary
    144  f9f5
    145  f9f5				   .bug_movement_boundary_left
    146  f9f5		       e0 08		      cpx	#BUG_BOUNDARY
    147  f9f7		       b0 05		      bcs	.bug_movement_boundary_right
    148  f9f9		       a2 08		      ldx	#BUG_BOUNDARY
    149  f9fb		       4c 04 fa 	      jmp	.bug_movement_boundary_top
    150  f9fe
    151  f9fe				   .bug_movement_boundary_right
    152  f9fe		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    153  fa00		       90 02		      bcc	.bug_movement_boundary_top
    154  fa02		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    155  fa04
    156  fa04				   .bug_movement_boundary_top
    157  fa04		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    158  fa06		       b0 05		      bcs	.bug_movement_boundary_bottom
    159  fa08		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    160  fa0a		       4c 13 fa 	      jmp	.bug_movement_store
    161  fa0d
    162  fa0d				   .bug_movement_boundary_bottom
    163  fa0d		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    164  fa0f		       90 02		      bcc	.bug_movement_store
    165  fa11		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    166  fa13
    167  fa13				   .bug_movement_store
    168  fa13		       8a		      txa
    169  fa14		       a6 83		      ldx	Temp+0
    170  fa16		       95 b0		      sta	BugPosX,x
    171  fa18		       94 b2		      sty	BugPosY,x
    172  fa1a
    173  fa1a				   .bug_movement_return
    174  fa1a		       60		      rts
    175  fa1b
    176  fa1b				   BugCollision
    177  fa1b
    178  fa1b		       e0 01		      cpx	#1
    179  fa1d		       f0 05		      beq	.bug_collision_m1
    180  fa1f
    181  fa1f				   .bug_collision_m0
    182  fa1f							; Collision for M0 (V set)
    183  fa1f		       24 00		      bit	CXM0P
    184  fa21		       70 06		      bvs	.bug_collision_active
    185  fa23		       60		      rts
    186  fa24
    187  fa24				   .bug_collision_m1
    188  fa24							; Collision for M1 (N set)
    189  fa24		       24 01		      bit	CXM1P
    190  fa26		       30 01		      bmi	.bug_collision_active
    191  fa28		       60		      rts
    192  fa29
    193  fa29				   .bug_collision_active
    194  fa29
    195  fa29							; Reduce players score
    196  fa29		       c6 91		      dec	ScoreValue
    197  fa2b
    198  fa2b							; Play sound
    199  fa2b		       20 ac fa 	      jsr	BugColSample
    200  fa2e
    201  fa2e		       60		      rts
    202  fa2f
    203  fa2f				   BugStunCollision
    204  fa2f
    205  fa2f		       e0 01		      cpx	#1
    206  fa31		       f0 05		      beq	.bug_stun_collision_m1
    207  fa33
    208  fa33				   .bug_stun_collision_m0
    209  fa33							; Collision for M0 (V set)
    210  fa33		       24 00		      bit	CXM0P
    211  fa35		       70 06		      bvs	.bug_stun_collision_active
    212  fa37		       60		      rts
    213  fa38
    214  fa38				   .bug_stun_collision_m1
    215  fa38							; Collision for M1 (N set)
    216  fa38		       24 01		      bit	CXM1P
    217  fa3a		       30 01		      bmi	.bug_stun_collision_active
    218  fa3c		       60		      rts
    219  fa3d
    220  fa3d				   .bug_stun_collision_active
    221  fa3d							; Add points to score
    222  fa3d		       18		      clc
    223  fa3e		       a5 92		      lda	ScoreValue+1
    224  fa40		       69 04		      adc	#BUG_POINTS
    225  fa42		       85 92		      sta	ScoreValue+1
    226  fa44
    227  fa44							; Reset bug
    228  fa44		       20 92 f9 	      jsr	BugReset
    229  fa47
    230  fa47							; Play sample
    231  fa47		       20 9b fa 	      jsr	BugSample
    232  fa4a
    233  fa4a		       60		      rts
    234  fa4b
    235  fa4b							; Horizontal Positioning
    236  fa4b
    237  fa4b				   BugPosition
    238  fa4b
    239  fa4b		       a2 02		      ldx	#2
    240  fa4d		       a5 b0		      lda	BugPosX+0
    241  fa4f		       20 00 f0 	      jsr	PosObject
    242  fa52
    243  fa52		       a2 03		      ldx	#3
    244  fa54		       a5 b1		      lda	BugPosX+1
    245  fa56		       20 00 f0 	      jsr	PosObject
    246  fa59
    247  fa59		       60		      rts
    248  fa5a
    249  fa5a							; Scanline Draw
    250  fa5a
    251  fa5a				   BugDrawStart
    252  fa5a
    253  fa5a		       a0 01		      ldy	#1
    254  fa5c				   .bug_draw_start_loop
    255  fa5c
    256  fa5c							; Set missile 0 & 1 to be 4 clock size
    257  fa5c		       b9 81 00 	      lda	NuSiz0,y
    258  fa5f		       09 30		      ora	#%00110000
    259  fa61		       99 81 00 	      sta	NuSiz0,y
    260  fa64		       99 04 00 	      sta	NUSIZ0,y
    261  fa67
    262  fa67							; Setup half scanline positions
    263  fa67		       b9 b2 00 	      lda	BugPosY,y
    264  fa6a		       4a		      lsr
    265  fa6b		       99 b6 00 	      sta	BugDrawPosBottom,y
    266  fa6e
    267  fa6e		       69 04		      adc	#BUG_SIZE/2
    268  fa70		       99 b8 00 	      sta	BugDrawPosTop,y
    269  fa73
    270  fa73		       88		      dey
    271  fa74		       10 e6		      bpl	.bug_draw_start_loop
    272  fa76
    273  fa76		       60		      rts
    274  fa77
    275  fa77				   BugDraw
    276  fa77
    277  fa77							; Load half scanline
    278  fa77							;    lda Temp+1
    279  fa77
    280  fa77				   .bug_draw_0
    281  fa77		       a0 00		      ldy	#%00000000
    282  fa79
    283  fa79							; Check top and bottom y pos
    284  fa79		       c5 b8		      cmp	BugDrawPosTop+0
    285  fa7b		       b0 06		      bcs	.bug_draw_0_off
    286  fa7d
    287  fa7d		       c5 b6		      cmp	BugDrawPosBottom+0
    288  fa7f		       90 02		      bcc	.bug_draw_0_off
    289  fa81
    290  fa81				   .bug_draw_0_on
    291  fa81		       a0 02		      ldy	#%00000010
    292  fa83
    293  fa83				   .bug_draw_0_off
    294  fa83		       84 1d		      sty	ENAM0
    295  fa85
    296  fa85				   .bug_draw_1
    297  fa85		       a0 00		      ldy	#%00000000
    298  fa87
    299  fa87							; Check top and bottom y pos
    300  fa87		       c5 b9		      cmp	BugDrawPosTop+1
    301  fa89		       b0 06		      bcs	.bug_draw_1_off
    302  fa8b
    303  fa8b		       c5 b7		      cmp	BugDrawPosBottom+1
    304  fa8d		       90 02		      bcc	.bug_draw_1_off
    305  fa8f
    306  fa8f				   .bug_draw_1_on
    307  fa8f		       a0 02		      ldy	#%00000010
    308  fa91
    309  fa91				   .bug_draw_1_off
    310  fa91		       84 1e		      sty	ENAM1
    311  fa93
    312  fa93				   .bug_draw_return
    313  fa93		       60		      rts
    314  fa94
    315  fa94				   BugClean
    316  fa94		       a9 00		      lda	#0
    317  fa96		       85 1d		      sta	ENAM0
    318  fa98		       85 1e		      sta	ENAM1
    319  fa9a		       60		      rts
    320  fa9b
    321  fa9b				   BugSample
    322  fa9b		       a9 1e		      lda	#BUG_SAMPLE_LEN
    323  fa9d		       85 90		      sta	SampleStep
    324  fa9f		       a9 03		      lda	#BUG_SAMPLE_C
    325  faa1		       85 16		      sta	AUDC1
    326  faa3		       a9 14		      lda	#BUG_SAMPLE_F
    327  faa5		       85 18		      sta	AUDF1
    328  faa7		       a9 04		      lda	#BUG_SAMPLE_V
    329  faa9		       85 1a		      sta	AUDV1
    330  faab		       60		      rts
    331  faac
    332  faac				   BugColSample
    333  faac		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    334  faae		       85 90		      sta	SampleStep
    335  fab0		       a9 08		      lda	#BUG_COL_SAMPLE_C
    336  fab2		       85 16		      sta	AUDC1
    337  fab4		       a9 08		      lda	#BUG_COL_SAMPLE_F
    338  fab6		       85 18		      sta	AUDF1
    339  fab8		       a9 03		      lda	#BUG_COL_SAMPLE_V
    340  faba		       85 1a		      sta	AUDV1
    341  fabc		       60		      rts
------- FILE game.asm
     20  fabd							;    include "objects/swatter.asm"
     21  fabd
     22  fabd							; Initialization
     23  fabd
     24  fabd				   GameInit
     25  fabd
     26  fabd							; Setup logic and kernel
      0  fabd					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fabd				   .POINTER   SET	VBlankPtr
      2  fabd				   .ADDRESS   SET	GameVerticalBlank
      3  fabd
      4  fabd		       a9 08		      LDA	#<.ADDRESS
      5  fabf		       85 87		      STA	.POINTER
      6  fac1		       a9 fb		      LDA	#>.ADDRESS
      7  fac3		       85 88		      STA	.POINTER+1
      8  fac5
      0  fac5					      SET_POINTER	KernelPtr, GameKernel
      1  fac5				   .POINTER   SET	KernelPtr
      2  fac5				   .ADDRESS   SET	GameKernel
      3  fac5
      4  fac5		       a9 85		      LDA	#<.ADDRESS
      5  fac7		       85 89		      STA	.POINTER
      6  fac9		       a9 fb		      LDA	#>.ADDRESS
      7  facb		       85 8a		      STA	.POINTER+1
      8  facd
      0  facd					      SET_POINTER	OverScanPtr, GameOverScan
      1  facd				   .POINTER   SET	OverScanPtr
      2  facd				   .ADDRESS   SET	GameOverScan
      3  facd
      4  facd		       a9 29		      LDA	#<.ADDRESS
      5  facf		       85 8b		      STA	.POINTER
      6  fad1		       a9 fb		      LDA	#>.ADDRESS
      7  fad3		       85 8c		      STA	.POINTER+1
      8  fad5
     30  fad5
     31  fad5							; Mute Audio
     32  fad5		       a9 00		      lda	#0
     33  fad7		       85 15		      sta	AUDC0
     34  fad9		       85 19		      sta	AUDV0
     35  fadb		       85 17		      sta	AUDF0
     36  fadd		       85 16		      sta	AUDC1
     37  fadf		       85 1a		      sta	AUDV1
     38  fae1		       85 18		      sta	AUDF1
     39  fae3		       85 90		      sta	SampleStep
     40  fae5
     41  fae5							; Load Audio Settings
     42  fae5		       a9 04		      lda	#GAME_AUDIO_VOLUME
     43  fae7		       85 19		      sta	AUDV0
     44  fae9
     45  fae9							; Make it so that we play the first note immediately
     46  fae9		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     47  faeb		       85 8f		      sta	AudioStep
     48  faed		       a9 02		      lda	#2
     49  faef		       85 8e		      sta	FrameTimer
     50  faf1
     51  faf1							; Reset NuSiz
     52  faf1		       a9 00		      lda	#0
     53  faf3		       85 81		      sta	NuSiz0
     54  faf5		       85 04		      sta	NUSIZ0
     55  faf7		       85 82		      sta	NuSiz1
     56  faf9		       85 05		      sta	NUSIZ1
     57  fafb
     58  fafb							; Initialize Objects
     59  fafb		       20 d1 f4 	      jsr	ScoreInit
     60  fafe		       20 2d f6 	      jsr	SpiderInit
     61  fb01		       20 d3 f7 	      jsr	LineInit
     62  fb04		       20 89 f9 	      jsr	BugInit
     63  fb07							;    jsr SwatterInit
     64  fb07
     65  fb07		       60		      rts
     66  fb08
     67  fb08				   GameVerticalBlank
     68  fb08
     69  fb08							; Refresh random values
     70  fb08		       20 13 f0 	      jsr	Random
     71  fb0b
     72  fb0b							; Update Objects
     73  fb0b		       20 3e f6 	      jsr	SpiderUpdate
     74  fb0e		       20 e8 f7 	      jsr	LineUpdate
     75  fb11		       20 aa f9 	      jsr	BugUpdate
     76  fb14							;    jsr SwatterUpdate
     77  fb14		       20 da f4 	      jsr	ScoreUpdate
     78  fb17
     79  fb17							; Reset Collisions
     80  fb17		       85 2c		      sta	CXCLR
     81  fb19
     82  fb19							; Clear horizontal movement
     83  fb19		       85 2b		      sta	HMCLR
     84  fb1b
     85  fb1b							; Update Positions
     86  fb1b		       20 49 f7 	      jsr	SpiderPosition
     87  fb1e		       20 06 f9 	      jsr	LinePosition
     88  fb21		       20 4b fa 	      jsr	BugPosition
     89  fb24							;    jsr SwatterPosition
     90  fb24
     91  fb24							; Set final x positions
     92  fb24		       85 02		      sta	WSYNC
     93  fb26		       85 2a		      sta	HMOVE
     94  fb28
     95  fb28		       60		      rts
     96  fb29
     97  fb29				   GameOverScan
     98  fb29
     99  fb29							; Audio Routines
    100  fb29		       20 47 fb 	      jsr	GameAudio
    101  fb2c		       20 33 fb 	      jsr	GameSample
    102  fb2f
    103  fb2f							; State Routines
    104  fb2f		       20 7b fb 	      jsr	GameDeath
    105  fb32
    106  fb32		       60		      rts
    107  fb33
    108  fb33				   GameSample
    109  fb33
    110  fb33		       a6 90		      ldx	SampleStep
    111  fb35		       e0 00		      cpx	#0
    112  fb37		       f0 0b		      beq	.game_sample_return
    113  fb39
    114  fb39		       ca		      dex
    115  fb3a		       d0 08		      bne	.game_sample_return
    116  fb3c
    117  fb3c				   .game_sample_mute
    118  fb3c		       a9 00		      lda	#0
    119  fb3e		       85 1a		      sta	AUDV1
    120  fb40		       85 18		      sta	AUDF1
    121  fb42		       85 16		      sta	AUDC1
    122  fb44
    123  fb44				   .game_sample_return
    124  fb44		       86 90		      stx	SampleStep
    125  fb46		       60		      rts
    126  fb47
    127  fb47				   GameAudio
    128  fb47
    129  fb47		       a6 8e		      ldx	FrameTimer
    130  fb49		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    131  fb4b		       f0 25		      beq	.game_audio_mute_note
    132  fb4d		       e0 00		      cpx	#0
    133  fb4f		       d0 29		      bne	.game_audio_return
    134  fb51
    135  fb51							; Reset Timer
    136  fb51		       a2 09		      ldx	#GAME_AUDIO_STEP
    137  fb53		       86 8e		      stx	FrameTimer
    138  fb55
    139  fb55				   .game_audio_play
    140  fb55
    141  fb55							; Increment melody position
    142  fb55		       a4 8f		      ldy	AudioStep
    143  fb57		       c8		      iny
    144  fb58
    145  fb58		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    146  fb5a		       d0 02		      bne	.game_audio_play_note
    147  fb5c
    148  fb5c							; Loop our audio step
    149  fb5c		       a0 00		      ldy	#0
    150  fb5e
    151  fb5e				   .game_audio_play_note
    152  fb5e
    153  fb5e							; Save current position
    154  fb5e		       84 8f		      sty	AudioStep
    155  fb60
    156  fb60							; Melody Line
    157  fb60		       b9 e9 fb 	      lda	GameAudio0,y
    158  fb63		       c9 ff		      cmp	#$FF
    159  fb65		       f0 0b		      beq	.game_audio_mute_note
    160  fb67		       85 17		      sta	AUDF0
    161  fb69		       a9 06		      lda	#GAME_AUDIO_TONE
    162  fb6b		       85 15		      sta	AUDC0
    163  fb6d		       a9 04		      lda	#GAME_AUDIO_VOLUME
    164  fb6f		       85 19		      sta	AUDV0
    165  fb71
    166  fb71		       60		      rts
    167  fb72
    168  fb72				   .game_audio_mute_note
    169  fb72
    170  fb72		       a9 00		      lda	#0
    171  fb74		       85 17		      sta	AUDF0
    172  fb76		       85 15		      sta	AUDC0
    173  fb78		       85 19		      sta	AUDV0
    174  fb7a
    175  fb7a				   .game_audio_return
    176  fb7a		       60		      rts
    177  fb7b
    178  fb7b				   GameDeath
    179  fb7b		       a5 91		      lda	ScoreValue+0
    180  fb7d		       c9 00		      cmp	#0
    181  fb7f		       d0 03		      bne	.game_death_return
    182  fb81
    183  fb81							; Show Game Over Screen
    184  fb81		       20 09 fc 	      jsr	OverInit
    185  fb84
    186  fb84				   .game_death_return
    187  fb84		       60		      rts
    188  fb85
    189  fb85				   GameKernel
    190  fb85
    191  fb85							; Turn on display
    192  fb85		       a9 00		      lda	#0
    193  fb87		       85 01		      sta	VBLANK
    194  fb89
    195  fb89				   .game_kernel_score
    196  fb89
    197  fb89							; Draw Score on top first
    198  fb89		       20 fa f4 	      jsr	ScoreDraw
    199  fb8c
    200  fb8c				   .game_kernel_objects_start
    201  fb8c
    202  fb8c							; Setup Drawing Objects
    203  fb8c		       20 ba f5 	      jsr	WebDrawStart
    204  fb8f		       20 51 f7 	      jsr	SpiderDrawStart
    205  fb92		       20 0e f9 	      jsr	LineDrawStart
    206  fb95		       20 5a fa 	      jsr	BugDrawStart
    207  fb98							;    jsr SwatterDrawStart
    208  fb98
    209  fb98							; Start Scanline Counter
    210  fb98		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    211  fb9a							; The extra 5 is for processing overflow
    212  fb9a
    213  fb9a							; Half scanline counter in Temp+1
    214  fb9a		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    215  fb9c		       85 84		      sta	Temp+1
    216  fb9e
    217  fb9e				   .game_kernel_objects
    218  fb9e
    219  fb9e							; Draw Objects in order
    220  fb9e
    221  fb9e							;    jsr LineDraw
    222  fb9e							;    jsr BugDraw
    223  fb9e		       20 d5 f5 	      jsr	WebDraw	; Every 6 lines
    224  fba1
    225  fba1		       85 02		      sta	WSYNC
    226  fba3		       ca		      dex
    227  fba4		       f0 34		      beq	.game_kernel_clean
    228  fba6
    229  fba6		       20 75 f7 	      jsr	SpiderDraw	; Every odd scanline
    230  fba9							;    jsr SwatterDraw
    231  fba9
    232  fba9		       85 02		      sta	WSYNC
    233  fbab		       c6 84		      dec	Temp+1
    234  fbad		       ca		      dex
    235  fbae		       f0 2a		      beq	.game_kernel_clean
    236  fbb0
    237  fbb0		       a5 84		      lda	Temp+1
    238  fbb2		       20 2e f9 	      jsr	LineDraw
    239  fbb5		       20 77 fa 	      jsr	BugDraw
    240  fbb8
    241  fbb8							;    sta WSYNC
    242  fbb8		       ca		      dex
    243  fbb9		       f0 1f		      beq	.game_kernel_clean
    244  fbbb
    245  fbbb		       20 75 f7 	      jsr	SpiderDraw
    246  fbbe							;    jsr SwatterDraw
    247  fbbe
    248  fbbe		       85 02		      sta	WSYNC
    249  fbc0		       c6 84		      dec	Temp+1
    250  fbc2		       ca		      dex
    251  fbc3		       f0 15		      beq	.game_kernel_clean
    252  fbc5
    253  fbc5		       a5 84		      lda	Temp+1
    254  fbc7		       20 2e f9 	      jsr	LineDraw
    255  fbca		       20 77 fa 	      jsr	BugDraw
    256  fbcd
    257  fbcd							;    sta WSYNC
    258  fbcd		       ca		      dex
    259  fbce		       f0 0a		      beq	.game_kernel_clean
    260  fbd0
    261  fbd0		       20 75 f7 	      jsr	SpiderDraw
    262  fbd3							;    jsr SwatterDraw
    263  fbd3
    264  fbd3		       85 02		      sta	WSYNC
    265  fbd5		       c6 84		      dec	Temp+1
    266  fbd7		       ca		      dex
    267  fbd8		       d0 c4		      bne	.game_kernel_objects
    268  fbda
    269  fbda				   .game_kernel_clean
    270  fbda
    271  fbda		       20 f7 f5 	      jsr	WebClean
    272  fbdd		       20 a6 f7 	      jsr	SpiderClean
    273  fbe0		       20 41 f9 	      jsr	LineClean
    274  fbe3		       20 94 fa 	      jsr	BugClean
    275  fbe6							;    jsr SwatterClean
    276  fbe6
    277  fbe6		       85 02		      sta	WSYNC
    278  fbe8
    279  fbe8				   .game_kernel_return
    280  fbe8		       60		      rts
    281  fbe9
    282  fbe9				   GameAudio0
    283  fbe9		       0d		      .byte.b	#13	; D
    284  fbea		       ff		      .byte.b	#$FF
    285  fbeb		       0f		      .byte.b	#15	; B
    286  fbec		       ff		      .byte.b	#$FF
    287  fbed		       0d		      .byte.b	#13	; D
    288  fbee		       ff		      .byte.b	#$FF
    289  fbef		       0f		      .byte.b	#15	; B
    290  fbf0		       ff		      .byte.b	#$FF
    291  fbf1		       0d		      .byte.b	#13	; D
    292  fbf2		       0d		      .byte.b	#13	; D
    293  fbf3		       0f		      .byte.b	#15	; B
    294  fbf4		       ff		      .byte.b	#$FF
    295  fbf5		       0c		      .byte.b	#12	; D#
    296  fbf6		       ff		      .byte.b	#$FF
    297  fbf7		       0f		      .byte.b	#15	; B
    298  fbf8		       ff		      .byte.b	#$FF
    299  fbf9		       0b		      .byte.b	#11	; E
    300  fbfa		       ff		      .byte.b	#$FF
    301  fbfb		       0e		      .byte.b	#14	; C#
    302  fbfc		       ff		      .byte.b	#$FF
    303  fbfd		       0b		      .byte.b	#11
    304  fbfe		       ff		      .byte.b	#$FF
    305  fbff		       0e		      .byte.b	#14
    306  fc00		       ff		      .byte.b	#$FF
    307  fc01		       0b		      .byte.b	#11
    308  fc02		       0b		      .byte.b	#11
    309  fc03		       0e		      .byte.b	#14
    310  fc04		       ff		      .byte.b	#$FF
    311  fc05		       0b		      .byte.b	#11
    312  fc06		       ff		      .byte.b	#$FF
    313  fc07		       0e		      .byte.b	#14
    314  fc08		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fc09					      include	"over.asm"
      1  fc09							;================
      2  fc09							; Constants
      3  fc09							;================
      4  fc09
      5  fc09		       00 dc	   OVER_FRAMES =	220
      6  fc09
      7  fc09		       00 00	   OVER_BG_COLOR =	#$00
      8  fc09		       00 44	   OVER_FG_COLOR =	#$44
      9  fc09
     10  fc09		       00 07	   OVER_AUDIO_TONE =	7
     11  fc09		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fc09		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fc09		       00 10	   OVER_AUDIO_STEP =	16
     14  fc09
     15  fc09		       00 09	   OVER_IMAGE_SIZE =	9
     16  fc09		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fc09		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fc09		       00 35	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fc09
     20  fc09				   OverInit
     21  fc09
     22  fc09							; Setup logic and kernel
      0  fc09					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fc09				   .POINTER   SET	VBlankPtr
      2  fc09				   .ADDRESS   SET	OverVerticalBlank
      3  fc09
      4  fc09		       a9 4b		      LDA	#<.ADDRESS
      5  fc0b		       85 87		      STA	.POINTER
      6  fc0d		       a9 fc		      LDA	#>.ADDRESS
      7  fc0f		       85 88		      STA	.POINTER+1
      8  fc11
      0  fc11					      SET_POINTER	KernelPtr, OverKernel
      1  fc11				   .POINTER   SET	KernelPtr
      2  fc11				   .ADDRESS   SET	OverKernel
      3  fc11
      4  fc11		       a9 89		      LDA	#<.ADDRESS
      5  fc13		       85 89		      STA	.POINTER
      6  fc15		       a9 fc		      LDA	#>.ADDRESS
      7  fc17		       85 8a		      STA	.POINTER+1
      8  fc19
      0  fc19					      SET_POINTER	OverScanPtr, OverOverScan
      1  fc19				   .POINTER   SET	OverScanPtr
      2  fc19				   .ADDRESS   SET	OverOverScan
      3  fc19
      4  fc19		       a9 4f		      LDA	#<.ADDRESS
      5  fc1b		       85 8b		      STA	.POINTER
      6  fc1d		       a9 fc		      LDA	#>.ADDRESS
      7  fc1f		       85 8c		      STA	.POINTER+1
      8  fc21
     26  fc21
     27  fc21							; Load Colors
     28  fc21		       a9 00		      lda	#OVER_BG_COLOR
     29  fc23		       85 09		      sta	COLUBK
     30  fc25		       a9 44		      lda	#OVER_FG_COLOR
     31  fc27		       85 08		      sta	COLUPF
     32  fc29
     33  fc29							; Load audio settings
     34  fc29		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fc2b		       85 15		      sta	AUDC0
     36  fc2d		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fc2f		       85 19		      sta	AUDV0
     38  fc31		       a9 00		      lda	#0
     39  fc33		       85 16		      sta	AUDC1
     40  fc35		       85 1a		      sta	AUDV1
     41  fc37		       a9 00		      lda	#0
     42  fc39		       85 8f		      sta	AudioStep
     43  fc3b
     44  fc3b							; Play first note
     45  fc3b		       ad db fc 	      lda	OverAudio0,AudioStep
     46  fc3e		       85 17		      sta	AUDF0
     47  fc40
     48  fc40							; Setup frame counters
     49  fc40		       a9 00		      lda	#0
     50  fc42		       85 8d		      sta	Frame
     51  fc44		       a9 10		      lda	#OVER_AUDIO_STEP
     52  fc46		       85 8e		      sta	FrameTimer
     53  fc48		       85 84		      sta	Temp+1
     54  fc4a
     55  fc4a		       60		      rts
     56  fc4b
     57  fc4b				   OverVerticalBlank
     58  fc4b		       20 da f4 	      jsr	ScoreUpdate
     59  fc4e		       60		      rts
     60  fc4f
     61  fc4f				   OverOverScan
     62  fc4f		       20 56 fc 	      jsr	OverAudio
     63  fc52		       20 7f fc 	      jsr	OverState
     64  fc55		       60		      rts
     65  fc56
     66  fc56				   OverAudio
     67  fc56
     68  fc56		       a6 8e		      ldx	FrameTimer
     69  fc58		       e0 00		      cpx	#0
     70  fc5a		       d0 22		      bne	.over_audio_return
     71  fc5c
     72  fc5c							; Reset Timer
     73  fc5c		       a6 84		      ldx	Temp+1
     74  fc5e					      REPEAT	3
     75  fc5e		       e8		      inx
     74  fc5e					      REPEND
     75  fc5f		       e8		      inx
     74  fc5f					      REPEND
     75  fc60		       e8		      inx
     76  fc61					      REPEND
     77  fc61		       86 8e		      stx	FrameTimer
     78  fc63		       86 84		      stx	Temp+1
     79  fc65
     80  fc65				   .over_audio_play
     81  fc65
     82  fc65							; Increment melody position
     83  fc65		       a4 8f		      ldy	AudioStep
     84  fc67		       c8		      iny
     85  fc68
     86  fc68		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  fc6a		       f0 0c		      beq	.over_audio_mute_note
     88  fc6c
     89  fc6c				   .over_audio_play_note
     90  fc6c
     91  fc6c							; Save current position
     92  fc6c		       84 8f		      sty	AudioStep
     93  fc6e
     94  fc6e							; Melody Line
     95  fc6e		       b9 db fc 	      lda	OverAudio0,y
     96  fc71		       85 17		      sta	AUDF0
     97  fc73		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  fc75		       85 19		      sta	AUDV0
     99  fc77
    100  fc77		       60		      rts
    101  fc78
    102  fc78				   .over_audio_mute_note
    103  fc78		       a9 00		      lda	#0
    104  fc7a		       85 17		      sta	AUDF0
    105  fc7c		       85 19		      sta	AUDV0
    106  fc7e
    107  fc7e				   .over_audio_return
    108  fc7e		       60		      rts
    109  fc7f
    110  fc7f				   OverState
    111  fc7f		       a5 8d		      lda	Frame
    112  fc81		       c9 dc		      cmp	#OVER_FRAMES
    113  fc83		       d0 03		      bne	.over_state_return
    114  fc85
    115  fc85		       20 4a f2 	      jsr	TitleInit
    116  fc88
    117  fc88				   .over_state_return
    118  fc88		       60		      rts
    119  fc89
    120  fc89				   OverKernel
    121  fc89
    122  fc89							; Turn on display
    123  fc89		       a9 00		      lda	#0
    124  fc8b		       85 01		      sta	VBLANK
    125  fc8d
    126  fc8d				   .over_kernel_score
    127  fc8d
    128  fc8d							; Draw Score on top first (no update)
    129  fc8d		       20 fa f4 	      jsr	ScoreDraw
    130  fc90
    131  fc90				   .over_kernel_init
    132  fc90							; Playfield Control
    133  fc90		       a5 80		      lda	CtrlPf
    134  fc92		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  fc94		       09 01		      ora	#%00000001	; Set mirroring
    136  fc96		       85 80		      sta	CtrlPf
    137  fc98		       85 0a		      sta	CTRLPF
    138  fc9a
    139  fc9a				   .over_kernel_top_padding
    140  fc9a							; Top Padding
    141  fc9a		       20 b9 fc 	      jsr	OverPadding
    142  fc9d
    143  fc9d				   .over_kernel_image
    144  fc9d		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  fc9f
    146  fc9f				   .over_kernel_image_next
    147  fc9f		       bd d2 fc 	      lda	OverImagePF2,x
    148  fca2		       85 0f		      sta	PF2
    149  fca4		       bd c9 fc 	      lda	OverImagePF1,x
    150  fca7		       85 0e		      sta	PF1
    151  fca9							;    lda OverImagePF0,x
    152  fca9							;    sta PF0
    153  fca9
    154  fca9		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  fcab				   .over_kernel_image_loop
    156  fcab		       85 02		      sta	WSYNC
    157  fcad		       88		      dey
    158  fcae		       d0 fb		      bne	.over_kernel_image_loop
    159  fcb0
    160  fcb0		       ca		      dex
    161  fcb1		       10 ec		      bpl	.over_kernel_image_next
    162  fcb3
    163  fcb3				   .over_kernel_bottom_padding
    164  fcb3							; Bottom Padding
    165  fcb3		       20 b9 fc 	      jsr	OverPadding
    166  fcb6
    167  fcb6				   .over_kernel_return
    168  fcb6		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  fcb8		       60		      rts
    170  fcb9
    171  fcb9				   OverPadding
    172  fcb9		       a9 00		      lda	#0
    173  fcbb		       85 0d		      sta	PF0
    174  fcbd		       85 0e		      sta	PF1
    175  fcbf		       85 0f		      sta	PF2
    176  fcc1
    177  fcc1		       a2 35		      ldx	#OVER_IMAGE_PADDING
    178  fcc3				   .over_padding_loop
    179  fcc3		       85 02		      sta	WSYNC
    180  fcc5		       ca		      dex
    181  fcc6		       d0 fb		      bne	.over_padding_loop
    182  fcc8
    183  fcc8		       60		      rts
    184  fcc9
    185  fcc9				   OverAssets
    186  fcc9
    187  fcc9							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  fcc9					      include	"over_image.asm"
      1  fcc9							;OverImagePF0:
      2  fcc9							;    .BYTE %00000000
      3  fcc9							;    .BYTE %00000000
      4  fcc9							;    .BYTE %00000000
      5  fcc9							;    .BYTE %00000000
      6  fcc9							;    .BYTE %00000000
      7  fcc9							;    .BYTE %00000000
      8  fcc9							;    .BYTE %00000000
      9  fcc9							;    .BYTE %00000000
     10  fcc9							;    .BYTE %00000000
     11  fcc9
     12  fcc9				   OverImagePF1
     13  fcc9		       0c		      .BYTE.b	%00001100
     14  fcca		       13		      .BYTE.b	%00010011
     15  fccb		       20		      .BYTE.b	%00100000
     16  fccc		       23		      .BYTE.b	%00100011
     17  fccd		       24		      .BYTE.b	%00100100
     18  fcce		       24		      .BYTE.b	%00100100
     19  fccf		       12		      .BYTE.b	%00010010
     20  fcd0		       10		      .BYTE.b	%00010000
     21  fcd1		       08		      .BYTE.b	%00001000
     22  fcd2
     23  fcd2				   OverImagePF2
     24  fcd2		       e0		      .BYTE.b	%11100000
     25  fcd3		       18		      .BYTE.b	%00011000
     26  fcd4		       05		      .BYTE.b	%00000101
     27  fcd5		       52		      .BYTE.b	%01010010
     28  fcd6		       23		      .BYTE.b	%00100011
     29  fcd7		       52		      .BYTE.b	%01010010
     30  fcd8		       04		      .BYTE.b	%00000100
     31  fcd9		       18		      .BYTE.b	%00011000
     32  fcda		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  fcdb
    190  fcdb				   OverAudio0
    191  fcdb
    192  fcdb		       0c		      .BYTE.b	#12	; D#2
    193  fcdc		       0d		      .BYTE.b	#13	; D2
    194  fcdd		       11		      .BYTE.b	#17	; A1
    195  fcde		       16		      .BYTE.b	#22	; F1
    196  fcdf		       1a		      .BYTE.b	#26	; D1
    197  fce0		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    288  fce1
    289  fce1							;================
    290  fce1							; End of cart
    291  fce1							;================
    292  fce1
    293  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    294  fffa
    295  fffa				   InterruptVectors
    296  fffa
    297  fffa		       21 f0		      .word.w	InitSystem	; NMI
    298  fffc		       21 f0		      .word.w	InitSystem	; RESET
    299  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    300  10000
    301  10000					       END
