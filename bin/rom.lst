------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00c5 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00 00	   FrameTimer ds	2
     70 U0090
     71 U0090		       00	   AudioStep  ds	1
     72 U0091
     73 U0091		       00	   SampleStep ds	1
     74 U0092
     75 U0092							; Score
     76 U0092
     77 U0092		       00 00	   ScoreValue ds	2
     78 U0094		       00 00	   ScoreDigitOnes ds	2
     79 U0096		       00 00	   ScoreDigitTens ds	2
     80 U0098		       00 00	   ScoreGfx   ds	2
     81 U009a
     82 U009a							; Web
     83 U009a
     84 U009a		       00	   WebIndex   ds	1
     85 U009b		       00	   WebDir     ds	1
     86 U009c
     87 U009c							; Spider
     88 U009c
     89 U009c		       00 00	   SpiderPtr  ds	2
     90 U009e		       00 00	   SpiderPos  ds	2
     91 U00a0		       00	   SpiderCtrl ds	1
     92 U00a1		       00	   SpiderColor ds	1
     93 U00a2
     94 U00a2		       00	   SpiderIndex ds	1
     95 U00a3		       00	   SpiderDrawPos ds	1
     96 U00a4		       00	   SpiderLine ds	1
     97 U00a5
     98 U00a5		       00 00	   SpiderPtr2 ds	2
     99 U00a7
    100 U00a7							; Line
    101 U00a7
    102 U00a7		       00	   LineEnabled ds	1
    103 U00a8		       00 00	   LinePos    ds	2
    104 U00aa		       00 00	   LineVelocity ds	2
    105 U00ac		       00 00	   LineStartPos ds	2
    106 U00ae		       00 00	   LineDrawPos ds	2
    107 U00b0
    108 U00b0							; Bug
    109 U00b0
    110 U00b0		       00 00	   BugStunned ds	2
    111 U00b2		       00 00	   BugPosX    ds	2
    112 U00b4		       00 00	   BugPosY    ds	2
    113 U00b6		       00 00	   BugColor   ds	2
    114 U00b8
    115 U00b8		       00 00	   BugDrawPosBottom ds	2
    116 U00ba		       00 00	   BugDrawPosTop ds	2
    117 U00bc
    118 U00bc							; Swatter
    119 U00bc
    120 U00bc		       00 00	   SwatterPos ds	2
    121 U00be		       00	   SwatterState ds	1
    122 U00bf		       00	   SwatterColor ds	1
    123 U00c0
    124 U00c0		       00	   SwatterIndex ds	1
    125 U00c1		       00	   SwatterDrawPos ds	1
    126 U00c2		       00	   SwatterLine ds	1
    127 U00c3
    128 U00c3		       00	   SwatterSampleCount ds	1
    129 U00c4		       00	   SwatterSampleF ds	1
    130 U00c5
    131  10000 ????				       SEG
    132  f000					      org	$F000	; Start of cart area
    133  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    135  f021
    136  f021				   InitSystem
    137  f021
    138  f021				   .init_clean
    139  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    141  f02c
    142  f02c				   .init_tia
    143  f02c							; Define default TIA register values
    144  f02c
    145  f02c							; Initialize copies
    146  f02c		       a9 00		      lda	#0
    147  f02e		       85 80		      sta	CtrlPf
    148  f030		       85 81		      sta	NuSiz0
    149  f032		       85 82		      sta	NuSiz1
    150  f034
    151  f034							; Set background color
    152  f034		       a9 00		      lda	#$00	; Black
    153  f036		       85 09		      sta	COLUBK
    154  f038
    155  f038							; Set the playfield and player color
    156  f038		       a9 0e		      lda	#$0E	; White
    157  f03a		       85 08		      sta	COLUPF
    158  f03c		       85 06		      sta	COLUP0
    159  f03e		       85 07		      sta	COLUP1
    160  f040
    161  f040							; Playfield Control
    162  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    163  f042		       85 80		      sta	CtrlPf
    164  f044		       85 0a		      sta	CTRLPF
    165  f046
    166  f046							; Disable Game Elements
    167  f046		       a9 00		      lda	#$00
    168  f048		       85 1f		      sta	ENABL	; Turn off ball
    169  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    170  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    171  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    172  f050		       85 1c		      sta	GRP1	; Turn off player 2
    173  f052
    174  f052							; Empty playfield
    175  f052		       a9 00		      lda	#%00000000
    176  f054		       85 0d		      sta	PF0
    177  f056		       85 0e		      sta	PF1
    178  f058		       85 0f		      sta	PF2
    179  f05a
    180  f05a				   .init_seed
    181  f05a							; Seed the random number generator
    182  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    183  f05d		       85 85		      sta	Rand8	; Use as seed
    184  f05f		       49 ff		      eor	#$FF	; Flip bits
    185  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    186  f063
    187  f063				   .init_game
    188  f063
    189  f063		       20 cb f0 	      jsr	LogoInit
    190  f066
    191  f066							;=======================================
    192  f066							; Game Kernel
    193  f066							;=======================================
    194  f066
    195  f066				   Main
    196  f066
    197  f066		       20 75 f0 	      jsr	VerticalSync
    198  f069		       20 8e f0 	      jsr	VerticalBlank
    199  f06c		       20 a1 f0 	      jsr	Kernel
    200  f06f		       20 a8 f0 	      jsr	OverScan
    201  f072		       4c 66 f0 	      jmp	Main
    202  f075
    203  f075				   VerticalSync
    204  f075
    205  f075		       a9 00		      lda	#0
    206  f077		       85 01		      sta	VBLANK
    207  f079
    208  f079							; Turn on Vertical Sync signal and setup timer
    209  f079		       a9 02		      lda	#2
    210  f07b		       85 00		      sta	VSYNC
    211  f07d
    212  f07d							; Increment frame count and reduce frame counter
    213  f07d		       e6 8d		      inc	Frame
    214  f07f		       c6 8e		      dec	FrameTimer
    215  f081		       c6 8f		      dec	FrameTimer+1
    216  f083
    217  f083							; VSYNCH signal scanlines
    218  f083					      REPEAT	#KERNEL_VSYNC
    219  f083		       85 02		      sta	WSYNC
    218  f083					      REPEND
    219  f085		       85 02		      sta	WSYNC
    218  f085					      REPEND
    219  f087		       85 02		      sta	WSYNC
    220  f089					      REPEND
    221  f089
    222  f089							; Turn off Vertical Sync signal
    223  f089		       a9 00		      lda	#0
    224  f08b		       85 00		      sta	VSYNC
    225  f08d
    226  f08d				   .vsync_return
    227  f08d		       60		      rts
    228  f08e
    229  f08e				   VerticalBlank
    230  f08e							; Setup Timer
    231  f08e		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    232  f090		       8d 96 02 	      sta	TIM64T
    233  f093
    234  f093				   .vblank_logic
    235  f093							; Perform Game Logic
    236  f093		       20 9e f0 	      jsr	.vblank_logic_call_ptr
    237  f096
    238  f096				   .vblank_loop
    239  f096							; WSYNC until Timer is complete
    240  f096		       85 02		      sta	WSYNC
    241  f098		       ad 84 02 	      lda	INTIM
    242  f09b		       d0 f9		      bne	.vblank_loop
    243  f09d
    244  f09d				   .vblank_return
    245  f09d		       60		      rts
    246  f09e
    247  f09e				   .vblank_logic_call_ptr
    248  f09e		       6c 87 00 	      jmp	(VBlankPtr)
    249  f0a1
    250  f0a1				   Kernel
    251  f0a1
    252  f0a1							; Perform Selected Kernel
    253  f0a1		       20 a5 f0 	      jsr	.kernel_call_ptr
    254  f0a4		       60		      rts
    255  f0a5
    256  f0a5				   .kernel_call_ptr
    257  f0a5		       6c 89 00 	      jmp	(KernelPtr)
    258  f0a8
    259  f0a8				   OverScan
    260  f0a8
    261  f0a8							; End of screen, enter blanking
    262  f0a8		       a9 42		      lda	#%01000010
    263  f0aa		       85 01		      sta	VBLANK
    264  f0ac
    265  f0ac							; Setup Timer
    266  f0ac		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    267  f0ae		       8d 96 02 	      sta	TIM64T
    268  f0b1
    269  f0b1							;.overscan_reset:
    270  f0b1							; Check for reset switch
    271  f0b1		       ad 82 02 	      lda	SWCHB
    272  f0b4		       4a		      lsr		; Push D0 to carry (C)
    273  f0b5		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    274  f0b7
    275  f0b7							; Perform reset
    276  f0b7		       20 cb f0 	      jsr	LogoInit	; No need for logic
    277  f0ba		       4c c0 f0 	      jmp	.overscan_loop
    278  f0bd
    279  f0bd				   .overscan_logic
    280  f0bd							; Perform OverScan Logic
    281  f0bd		       20 c8 f0 	      jsr	.overscan_logic_call_ptr
    282  f0c0
    283  f0c0				   .overscan_loop
    284  f0c0							; WSYNC until Timer is complete
    285  f0c0		       85 02		      sta	WSYNC
    286  f0c2		       ad 84 02 	      lda	INTIM
    287  f0c5		       d0 f9		      bne	.overscan_loop
    288  f0c7
    289  f0c7				   .overscan_return
    290  f0c7		       60		      rts
    291  f0c8
    292  f0c8				   .overscan_logic_call_ptr
    293  f0c8		       6c 8b 00 	      jmp	(OverScanPtr)
    294  f0cb
    295  f0cb							;================
    296  f0cb							; State Code
    297  f0cb							;================
    298  f0cb
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0cb					      include	"logo.asm"
      1  f0cb							;================
      2  f0cb							; Constants
      3  f0cb							;================
      4  f0cb
      5  f0cb		       00 b4	   LOGO_FRAMES =	180
      6  f0cb
      7  f0cb		       00 00	   LOGO_BG_COLOR =	#$00
      8  f0cb		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f0cb
     10  f0cb		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0cb		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0cb		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0cb		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0cb		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0cb		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0cb
     17  f0cb		       00 10	   LOGO_IMAGE_SIZE =	16
     18  f0cb		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     19  f0cb		       00 50	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     20  f0cb		       00 38	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     21  f0cb
     22  f0cb				   LogoInit
     23  f0cb
     24  f0cb							; Setup logic and kernel
      0  f0cb					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0cb				   .POINTER   SET	VBlankPtr
      2  f0cb				   .ADDRESS   SET	LogoVerticalBlank
      3  f0cb
      4  f0cb		       a9 16		      LDA	#<.ADDRESS
      5  f0cd		       85 87		      STA	.POINTER
      6  f0cf		       a9 f1		      LDA	#>.ADDRESS
      7  f0d1		       85 88		      STA	.POINTER+1
      8  f0d3
      0  f0d3					      SET_POINTER	KernelPtr, LogoKernel
      1  f0d3				   .POINTER   SET	KernelPtr
      2  f0d3				   .ADDRESS   SET	LogoKernel
      3  f0d3
      4  f0d3		       a9 67		      LDA	#<.ADDRESS
      5  f0d5		       85 89		      STA	.POINTER
      6  f0d7		       a9 f1		      LDA	#>.ADDRESS
      7  f0d9		       85 8a		      STA	.POINTER+1
      8  f0db
      0  f0db					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0db				   .POINTER   SET	OverScanPtr
      2  f0db				   .ADDRESS   SET	LogoOverScan
      3  f0db
      4  f0db		       a9 1a		      LDA	#<.ADDRESS
      5  f0dd		       85 8b		      STA	.POINTER
      6  f0df		       a9 f1		      LDA	#>.ADDRESS
      7  f0e1		       85 8c		      STA	.POINTER+1
      8  f0e3
     28  f0e3
     29  f0e3							; Load Colors
     30  f0e3		       a9 00		      lda	#LOGO_BG_COLOR
     31  f0e5		       85 09		      sta	COLUBK
     32  f0e7		       a9 c6		      lda	#LOGO_FG_COLOR
     33  f0e9		       85 08		      sta	COLUPF
     34  f0eb
     35  f0eb							; Load audio settings
     36  f0eb		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     37  f0ed		       85 15		      sta	AUDC0
     38  f0ef		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     39  f0f1		       85 19		      sta	AUDV0
     40  f0f3		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     41  f0f5		       85 16		      sta	AUDC1
     42  f0f7		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     43  f0f9		       85 1a		      sta	AUDV1
     44  f0fb		       a9 00		      lda	#0
     45  f0fd		       85 90		      sta	AudioStep
     46  f0ff
     47  f0ff							; Play first note
     48  f0ff		       ad 34 f2 	      lda	LogoAudio0,AudioStep
     49  f102		       85 17		      sta	AUDF0
     50  f104		       ad 40 f2 	      lda	LogoAudio1,AudioStep
     51  f107		       85 18		      sta	AUDF1
     52  f109
     53  f109							; Setup frame counters
     54  f109		       a9 00		      lda	#0
     55  f10b		       85 8d		      sta	Frame
     56  f10d		       a9 b4		      lda	#LOGO_FRAMES
     57  f10f		       85 8e		      sta	FrameTimer
     58  f111
     59  f111							; Setup Image Animation
     60  f111		       a9 22		      lda	#(LOGO_IMAGE_SIZE+1)*2
     61  f113		       85 9a		      sta	WebIndex
     62  f115
     63  f115		       60		      rts
     64  f116
     65  f116				   LogoVerticalBlank
     66  f116		       20 21 f1 	      jsr	LogoAnimation
     67  f119		       60		      rts
     68  f11a
     69  f11a				   LogoOverScan
     70  f11a		       20 32 f1 	      jsr	LogoAudio
     71  f11d		       20 5d f1 	      jsr	LogoState
     72  f120		       60		      rts
     73  f121
     74  f121				   LogoAnimation
     75  f121		       a5 8d		      lda	Frame
     76  f123		       29 03		      and	#%00000011	; Every 4 when bits are 00
     77  f125		       d0 0a		      bne	.logo_animation_return
     78  f127
     79  f127		       a6 9a		      ldx	WebIndex
     80  f129		       e0 00		      cpx	#0
     81  f12b		       f0 04		      beq	.logo_animation_return
     82  f12d
     83  f12d							; Add another visible line
     84  f12d		       ca		      dex
     85  f12e		       ca		      dex
     86  f12f		       86 9a		      stx	WebIndex
     87  f131
     88  f131				   .logo_animation_return
     89  f131		       60		      rts
     90  f132
     91  f132				   LogoAudio
     92  f132
     93  f132		       a5 8d		      lda	Frame
     94  f134		       29 07		      and	#%00000111	; Every 8 when bits are 000
     95  f136		       d0 24		      bne	.logo_audio_return
     96  f138
     97  f138				   .logo_audio_play
     98  f138
     99  f138							; Check if we're at the end of the melody
    100  f138		       a4 90		      ldy	AudioStep
    101  f13a		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
    102  f13c		       f0 10		      beq	.logo_audio_mute
    103  f13e
    104  f13e				   .logo_audio_play_note
    105  f13e							; Increment audio position
    106  f13e		       c8		      iny
    107  f13f		       84 90		      sty	AudioStep
    108  f141
    109  f141							; Logo note and play
    110  f141		       b9 34 f2 	      lda	LogoAudio0,y
    111  f144		       85 17		      sta	AUDF0
    112  f146		       b9 40 f2 	      lda	LogoAudio1,y
    113  f149		       85 18		      sta	AUDF1
    114  f14b		       4c 5c f1 	      jmp	.logo_audio_mute_skip
    115  f14e
    116  f14e				   .logo_audio_mute
    117  f14e
    118  f14e							; Mute audio
    119  f14e		       a9 00		      lda	#0
    120  f150		       85 15		      sta	AUDC0
    121  f152		       85 19		      sta	AUDV0
    122  f154		       85 17		      sta	AUDF0
    123  f156		       85 16		      sta	AUDC1
    124  f158		       85 1a		      sta	AUDV1
    125  f15a		       85 18		      sta	AUDF1
    126  f15c
    127  f15c				   .logo_audio_mute_skip
    128  f15c				   .logo_audio_return
    129  f15c		       60		      rts
    130  f15d
    131  f15d				   LogoState
    132  f15d		       a5 8e		      lda	FrameTimer
    133  f15f		       c9 00		      cmp	#0
    134  f161		       d0 03		      bne	.logo_state_return
    135  f163
    136  f163				   .logo_state_next
    137  f163		       20 4c f2 	      jsr	TitleInit
    138  f166
    139  f166				   .logo_state_return
    140  f166		       60		      rts
    141  f167
    142  f167				   LogoKernel
    143  f167
    144  f167							; Playfield Control
    145  f167		       a5 80		      lda	CtrlPf
    146  f169		       29 fe		      and	#%11111110	; No mirroring
    147  f16b		       85 80		      sta	CtrlPf
    148  f16d		       85 0a		      sta	CTRLPF
    149  f16f
    150  f16f							; Turn on display
    151  f16f		       a9 00		      lda	#0
    152  f171		       85 01		      sta	VBLANK
    153  f173
    154  f173				   .logo_kernel_top_padding
    155  f173							; Top Padding
    156  f173		       20 c4 f1 	      jsr	LogoPadding
    157  f176
    158  f176				   .logo_kernel_image_animation
    159  f176		       a4 9a		      ldy	WebIndex
    160  f178		       c0 00		      cpy	#0
    161  f17a		       f0 0b		      beq	.logo_kernel_image
    162  f17c
    163  f17c				   .logo_kernel_image_animation_start
    164  f17c		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    165  f17e
    166  f17e				   .logo_kernel_image_animation_loop
    167  f17e		       85 02		      sta	WSYNC
    168  f180		       ca		      dex
    169  f181		       d0 fb		      bne	.logo_kernel_image_animation_loop
    170  f183
    171  f183		       88		      dey
    172  f184		       88		      dey
    173  f185		       d0 f5		      bne	.logo_kernel_image_animation_start
    174  f187
    175  f187				   .logo_kernel_image
    176  f187
    177  f187		       a2 20		      ldx	#(LOGO_IMAGE_SIZE*2)
    178  f189		       a0 04		      ldy	#LOGO_IMAGE_LINE_SIZE-1
    179  f18b							; The extra 1 on line size is for processing overflow
    180  f18b
    181  f18b		       ca		      dex
    182  f18c		       e4 9a		      cpx	WebIndex
    183  f18e		       90 30		      bcc	.logo_kernel_bottom_padding
    184  f190
    185  f190				   .logo_kernel_image_line
    186  f190		       85 02		      sta	WSYNC
    187  f192
    188  f192		       bd d3 f1 	      lda	LogoImagePF0-1,x
    189  f195		       85 0d		      sta	PF0
    190  f197		       bd f3 f1 	      lda	LogoImagePF1-1,x
    191  f19a		       85 0e		      sta	PF1
    192  f19c		       bd 13 f2 	      lda	LogoImagePF2-1,x
    193  f19f		       85 0f		      sta	PF2
    194  f1a1
      0  f1a1					      sleep	6
      1  f1a1				   .CYCLES    SET	6
      2  f1a1
      3  f1a1				  -	      IF	.CYCLES < 2
      4  f1a1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1a1				  -	      ERR
      6  f1a1					      ENDIF
      7  f1a1
      8  f1a1				  -	      IF	.CYCLES & 1
      9  f1a1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1a1				  -	      nop	0
     11  f1a1				  -	      ELSE
     12  f1a1				  -	      bit	VSYNC
     13  f1a1				  -	      ENDIF
     14  f1a1				  -.CYCLES    SET	.CYCLES - 3
     15  f1a1					      ENDIF
     16  f1a1
     17  f1a1					      REPEAT	.CYCLES / 2
     18  f1a1		       ea		      nop
     17  f1a1					      REPEND
     18  f1a2		       ea		      nop
     17  f1a2					      REPEND
     18  f1a3		       ea		      nop
     19  f1a4					      REPEND
    196  f1a4
    197  f1a4		       bd d4 f1 	      lda	LogoImagePF0,x
    198  f1a7		       85 0d		      sta	PF0
    199  f1a9		       bd f4 f1 	      lda	LogoImagePF1,x
    200  f1ac		       85 0e		      sta	PF1
    201  f1ae		       bd 14 f2 	      lda	LogoImagePF2,x
    202  f1b1		       85 0f		      sta	PF2
    203  f1b3
    204  f1b3		       88		      dey
    205  f1b4		       d0 da		      bne	.logo_kernel_image_line
    206  f1b6
    207  f1b6		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    208  f1b8
    209  f1b8		       ca		      dex
    210  f1b9		       e4 9a		      cpx	WebIndex
    211  f1bb		       90 03		      bcc	.logo_kernel_bottom_padding
    212  f1bd
    213  f1bd		       ca		      dex
    214  f1be		       10 d0		      bpl	.logo_kernel_image_line
    215  f1c0
    216  f1c0				   .logo_kernel_bottom_padding
    217  f1c0							; Bottom Padding
    218  f1c0		       20 c4 f1 	      jsr	LogoPadding
    219  f1c3
    220  f1c3				   .logo_kernel_image_return
    221  f1c3		       60		      rts
    222  f1c4
    223  f1c4				   LogoPadding
    224  f1c4		       a9 00		      lda	#0
    225  f1c6		       85 0d		      sta	PF0
    226  f1c8		       85 0e		      sta	PF1
    227  f1ca		       85 0f		      sta	PF2
    228  f1cc
    229  f1cc		       a2 38		      ldx	#LOGO_IMAGE_PADDING
    230  f1ce				   .logo_padding_loop
    231  f1ce		       85 02		      sta	WSYNC
    232  f1d0		       ca		      dex
    233  f1d1		       d0 fb		      bne	.logo_padding_loop
    234  f1d3
    235  f1d3		       60		      rts
    236  f1d4
    237  f1d4				   LogoAssets
    238  f1d4
    239  f1d4							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f1d4					      include	"logo_image.asm"
      1  f1d4				   LogoImagePF0
      2  f1d4		       00		      .BYTE.b	%00000000
      3  f1d5		       10		      .BYTE.b	%00010000
      4  f1d6		       00		      .BYTE.b	%00000000
      5  f1d7		       30		      .BYTE.b	%00110000
      6  f1d8		       00		      .BYTE.b	%00000000
      7  f1d9		       70		      .BYTE.b	%01110000
      8  f1da		       00		      .BYTE.b	%00000000
      9  f1db		       60		      .BYTE.b	%01100000
     10  f1dc		       00		      .BYTE.b	%00000000
     11  f1dd		       60		      .BYTE.b	%01100000
     12  f1de		       00		      .BYTE.b	%00000000
     13  f1df		       20		      .BYTE.b	%00100000
     14  f1e0		       80		      .BYTE.b	%10000000
     15  f1e1		       00		      .BYTE.b	%00000000
     16  f1e2		       c0		      .BYTE.b	%11000000
     17  f1e3		       00		      .BYTE.b	%00000000
     18  f1e4		       c0		      .BYTE.b	%11000000
     19  f1e5		       00		      .BYTE.b	%00000000
     20  f1e6		       80		      .BYTE.b	%10000000
     21  f1e7		       00		      .BYTE.b	%00000000
     22  f1e8		       00		      .BYTE.b	%00000000
     23  f1e9		       40		      .BYTE.b	%01000000
     24  f1ea		       00		      .BYTE.b	%00000000
     25  f1eb		       60		      .BYTE.b	%01100000
     26  f1ec		       00		      .BYTE.b	%00000000
     27  f1ed		       60		      .BYTE.b	%01100000
     28  f1ee		       00		      .BYTE.b	%00000000
     29  f1ef		       70		      .BYTE.b	%01110000
     30  f1f0		       00		      .BYTE.b	%00000000
     31  f1f1		       30		      .BYTE.b	%00110000
     32  f1f2		       00		      .BYTE.b	%00000000
     33  f1f3		       10		      .BYTE.b	%00010000
     34  f1f4
     35  f1f4				   LogoImagePF1
     36  f1f4		       03		      .BYTE.b	%00000011
     37  f1f5		       f0		      .BYTE.b	%11110000
     38  f1f6		       03		      .BYTE.b	%00000011
     39  f1f7		       f8		      .BYTE.b	%11111000
     40  f1f8		       13		      .BYTE.b	%00010011
     41  f1f9		       fc		      .BYTE.b	%11111100
     42  f1fa		       33		      .BYTE.b	%00110011
     43  f1fb		       dc		      .BYTE.b	%11011100
     44  f1fc		       63		      .BYTE.b	%01100011
     45  f1fd		       cc		      .BYTE.b	%11001100
     46  f1fe		       c3		      .BYTE.b	%11000011
     47  f1ff		       cc		      .BYTE.b	%11001100
     48  f200		       83		      .BYTE.b	%10000011
     49  f201		       cc		      .BYTE.b	%11001100
     50  f202		       03		      .BYTE.b	%00000011
     51  f203		       cc		      .BYTE.b	%11001100
     52  f204		       03		      .BYTE.b	%00000011
     53  f205		       cc		      .BYTE.b	%11001100
     54  f206		       83		      .BYTE.b	%10000011
     55  f207		       cc		      .BYTE.b	%11001100
     56  f208		       c3		      .BYTE.b	%11000011
     57  f209		       cc		      .BYTE.b	%11001100
     58  f20a		       63		      .BYTE.b	%01100011
     59  f20b		       cc		      .BYTE.b	%11001100
     60  f20c		       33		      .BYTE.b	%00110011
     61  f20d		       dc		      .BYTE.b	%11011100
     62  f20e		       13		      .BYTE.b	%00010011
     63  f20f		       fc		      .BYTE.b	%11111100
     64  f210		       03		      .BYTE.b	%00000011
     65  f211		       f8		      .BYTE.b	%11111000
     66  f212		       03		      .BYTE.b	%00000011
     67  f213		       f0		      .BYTE.b	%11110000
     68  f214
     69  f214				   LogoImagePF2
     70  f214		       83		      .BYTE.b	%10000011
     71  f215		       00		      .BYTE.b	%00000000
     72  f216		       c7		      .BYTE.b	%11000111
     73  f217		       00		      .BYTE.b	%00000000
     74  f218		       ef		      .BYTE.b	%11101111
     75  f219		       01		      .BYTE.b	%00000001
     76  f21a		       6e		      .BYTE.b	%01101110
     77  f21b		       03		      .BYTE.b	%00000011
     78  f21c		       6c		      .BYTE.b	%01101100
     79  f21d		       06		      .BYTE.b	%00000110
     80  f21e		       6c		      .BYTE.b	%01101100
     81  f21f		       0c		      .BYTE.b	%00001100
     82  f220		       6c		      .BYTE.b	%01101100
     83  f221		       18		      .BYTE.b	%00011000
     84  f222		       6c		      .BYTE.b	%01101100
     85  f223		       30		      .BYTE.b	%00110000
     86  f224		       6c		      .BYTE.b	%01101100
     87  f225		       30		      .BYTE.b	%00110000
     88  f226		       6c		      .BYTE.b	%01101100
     89  f227		       18		      .BYTE.b	%00011000
     90  f228		       6c		      .BYTE.b	%01101100
     91  f229		       0c		      .BYTE.b	%00001100
     92  f22a		       6c		      .BYTE.b	%01101100
     93  f22b		       06		      .BYTE.b	%00000110
     94  f22c		       6e		      .BYTE.b	%01101110
     95  f22d		       03		      .BYTE.b	%00000011
     96  f22e		       ef		      .BYTE.b	%11101111
     97  f22f		       01		      .BYTE.b	%00000001
     98  f230		       c7		      .BYTE.b	%11000111
     99  f231		       00		      .BYTE.b	%00000000
    100  f232		       83		      .BYTE.b	%10000011
    101  f233		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    241  f234
    242  f234				   LogoAudio0
    243  f234
    244  f234		       1d		      .BYTE.b	#29	; C
    245  f235		       17		      .BYTE.b	#23	; E
    246  f236		       13		      .BYTE.b	#19	; G
    247  f237		       0f		      .BYTE.b	#15	; A
    248  f238		       17		      .BYTE.b	#23	; E
    249  f239		       13		      .BYTE.b	#19	; G
    250  f23a		       0f		      .BYTE.b	#15	; B
    251  f23b		       0e		      .BYTE.b	#14	; C
    252  f23c		       0b		      .BYTE.b	#11	; E
    253  f23d		       0b		      .BYTE.b	#11
    254  f23e		       0b		      .BYTE.b	#11
    255  f23f		       0b		      .BYTE.b	#11
    256  f240
    257  f240				   LogoAudio1
    258  f240
    259  f240		       1f		      .BYTE.b	#31	; C
    260  f241		       1f		      .BYTE.b	#31
    261  f242		       1f		      .BYTE.b	#31
    262  f243		       1f		      .BYTE.b	#31
    263  f244		       19		      .BYTE.b	#25	; E
    264  f245		       19		      .BYTE.b	#25
    265  f246		       19		      .BYTE.b	#25
    266  f247		       19		      .BYTE.b	#25
    267  f248		       14		      .BYTE.b	#20	; G
    268  f249		       14		      .BYTE.b	#20
    269  f24a		       14		      .BYTE.b	#20
    270  f24b		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f24c					      include	"title.asm"
      1  f24c							;================
      2  f24c							; Constants
      3  f24c							;================
      4  f24c
      5  f24c		       00 00	   TITLE_BG_COLOR =	#$00
      6  f24c		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f24c		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f24c		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f24c
     10  f24c		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f24c		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f24c		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f24c		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f24c		       00 09	   TITLE_AUDIO_STEP =	9
     15  f24c
     16  f24c		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     17  f24c		       00 05	   TITLE_FRAME_BOT_LINES =	5
     18  f24c		       00 07	   TITLE_LABEL_LINE =	7
     19  f24c
     20  f24c		       00 0f	   TITLE_GAP_SIZE =	#15
     21  f24c
     22  f24c		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     23  f24c		       00 09	   TITLE_SPIDER_SIZE =	#9
     24  f24c		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f24c
     26  f24c				   TitleInit
     27  f24c
     28  f24c							; Setup logic and kernel
      0  f24c					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f24c				   .POINTER   SET	VBlankPtr
      2  f24c				   .ADDRESS   SET	TitleVerticalBlank
      3  f24c
      4  f24c		       a9 b9		      LDA	#<.ADDRESS
      5  f24e		       85 87		      STA	.POINTER
      6  f250		       a9 f2		      LDA	#>.ADDRESS
      7  f252		       85 88		      STA	.POINTER+1
      8  f254
      0  f254					      SET_POINTER	KernelPtr, TitleKernel
      1  f254				   .POINTER   SET	KernelPtr
      2  f254				   .ADDRESS   SET	TitleKernel
      3  f254
      4  f254		       a9 51		      LDA	#<.ADDRESS
      5  f256		       85 89		      STA	.POINTER
      6  f258		       a9 f3		      LDA	#>.ADDRESS
      7  f25a		       85 8a		      STA	.POINTER+1
      8  f25c
      0  f25c					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f25c				   .POINTER   SET	OverScanPtr
      2  f25c				   .ADDRESS   SET	TitleOverScan
      3  f25c
      4  f25c		       a9 0a		      LDA	#<.ADDRESS
      5  f25e		       85 8b		      STA	.POINTER
      6  f260		       a9 f3		      LDA	#>.ADDRESS
      7  f262		       85 8c		      STA	.POINTER+1
      8  f264
     32  f264
     33  f264							; Load Colors
     34  f264		       a9 00		      lda	#TITLE_BG_COLOR
     35  f266		       85 09		      sta	COLUBK
     36  f268		       a9 06		      lda	#TITLE_WEB_COLOR
     37  f26a		       85 08		      sta	COLUPF
     38  f26c		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f26e		       85 06		      sta	COLUP0
     40  f270		       85 07		      sta	COLUP1
     41  f272
     42  f272							; Load audio settings
     43  f272
     44  f272							; Melody Line
     45  f272		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f274		       85 15		      sta	AUDC0
     47  f276		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f278		       85 19		      sta	AUDV0
     49  f27a
     50  f27a							; Drums and Bass
     51  f27a		       a9 00		      lda	#0
     52  f27c		       85 16		      sta	AUDC1
     53  f27e		       85 1a		      sta	AUDV1
     54  f280
     55  f280							; Make it so that we play the first note immediately
     56  f280		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f282		       85 90		      sta	AudioStep
     58  f284		       a9 01		      lda	#1
     59  f286		       85 8e		      sta	FrameTimer
     60  f288
     61  f288							; Setup Spider Sprite
      0  f288					      SET_POINTER	SpiderPtr, TitleSpider
      1  f288				   .POINTER   SET	SpiderPtr
      2  f288				   .ADDRESS   SET	TitleSpider
      3  f288
      4  f288		       a9 91		      LDA	#<.ADDRESS
      5  f28a		       85 9c		      STA	.POINTER
      6  f28c		       a9 f4		      LDA	#>.ADDRESS
      7  f28e		       85 9d		      STA	.POINTER+1
      8  f290
     63  f290
     64  f290		       a5 81		      lda	NuSiz0
     65  f292		       29 f8		      and	#%11111000
     66  f294		       09 06		      ora	#%00000110	; Triple Sprite
     67  f296		       85 81		      sta	NuSiz0
     68  f298		       85 04		      sta	NUSIZ0
     69  f29a		       85 82		      sta	NuSiz1
     70  f29c		       85 05		      sta	NUSIZ1
     71  f29e
     72  f29e		       a9 00		      lda	#0	; No reflect
     73  f2a0		       85 0b		      sta	REFP0
     74  f2a2		       a9 ff		      lda	#$FF	; Reflect P1
     75  f2a4		       85 0c		      sta	REFP1
     76  f2a6
     77  f2a6		       a9 00		      lda	#0
     78  f2a8		       85 a3		      sta	SpiderDrawPos	; Initialize animation state
     79  f2aa
     80  f2aa							; Setup Web Line
     81  f2aa							; Missle0 (2 clock size)
     82  f2aa		       a5 81		      lda	NuSiz0
     83  f2ac		       29 cf		      and	#%11001111
     84  f2ae		       09 10		      ora	#%00010000
     85  f2b0		       85 81		      sta	NuSiz0
     86  f2b2		       85 04		      sta	NUSIZ0
     87  f2b4
     88  f2b4							; Disable at start
     89  f2b4		       a9 00		      lda	#0
     90  f2b6		       85 1d		      sta	ENAM0
     91  f2b8
     92  f2b8		       60		      rts
     93  f2b9
     94  f2b9				   TitleVerticalBlank
     95  f2b9
     96  f2b9							; Refresh random values
     97  f2b9		       20 13 f0 	      jsr	Random
     98  f2bc
     99  f2bc		       20 c3 f2 	      jsr	TitlePosition
    100  f2bf		       20 dd f2 	      jsr	TitleAnimation
    101  f2c2
    102  f2c2		       60		      rts
    103  f2c3
    104  f2c3				   TitlePosition
    105  f2c3
    106  f2c3							; Position Spider
    107  f2c3		       a2 00		      ldx	#0	; Object (player0)
    108  f2c5		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    109  f2c7		       20 00 f0 	      jsr	PosObject
    110  f2ca
    111  f2ca		       a2 01		      ldx	#1	; Object (player1)
    112  f2cc		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    113  f2ce		       20 00 f0 	      jsr	PosObject
    114  f2d1
    115  f2d1							; Position Web Line
    116  f2d1		       a2 02		      ldx	#2	; Object (missle0)
    117  f2d3		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    118  f2d5		       20 00 f0 	      jsr	PosObject
    119  f2d8
    120  f2d8		       85 02		      sta	WSYNC
    121  f2da		       85 2a		      sta	HMOVE
    122  f2dc
    123  f2dc		       60		      rts
    124  f2dd
    125  f2dd				   TitleAnimation
    126  f2dd
    127  f2dd		       a5 90		      lda	AudioStep
    128  f2df		       c9 00		      cmp	#0
    129  f2e1		       f0 0d		      beq	.title_animation_1
    130  f2e3		       c9 04		      cmp	#4
    131  f2e5		       f0 16		      beq	.title_animation_2
    132  f2e7		       c9 09		      cmp	#9
    133  f2e9		       f0 05		      beq	.title_animation_1
    134  f2eb		       c9 0c		      cmp	#12
    135  f2ed		       f0 0e		      beq	.title_animation_2
    136  f2ef		       60		      rts
    137  f2f0
    138  f2f0				   .title_animation_1
      0  f2f0					      SET_POINTER	SpiderPtr, TitleSpider
      1  f2f0				   .POINTER   SET	SpiderPtr
      2  f2f0				   .ADDRESS   SET	TitleSpider
      3  f2f0
      4  f2f0		       a9 91		      LDA	#<.ADDRESS
      5  f2f2		       85 9c		      STA	.POINTER
      6  f2f4		       a9 f4		      LDA	#>.ADDRESS
      7  f2f6		       85 9d		      STA	.POINTER+1
      8  f2f8
    140  f2f8		       a9 00		      lda	#0
    141  f2fa		       85 a3		      sta	SpiderDrawPos
    142  f2fc		       60		      rts
    143  f2fd
    144  f2fd				   .title_animation_2
      0  f2fd					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f2fd				   .POINTER   SET	SpiderPtr
      2  f2fd				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f2fd
      4  f2fd		       a9 9a		      LDA	#<.ADDRESS
      5  f2ff		       85 9c		      STA	.POINTER
      6  f301		       a9 f4		      LDA	#>.ADDRESS
      7  f303		       85 9d		      STA	.POINTER+1
      8  f305
    146  f305		       a9 01		      lda	#1
    147  f307		       85 a3		      sta	SpiderDrawPos
    148  f309		       60		      rts
    149  f30a
    150  f30a				   TitleOverScan
    151  f30a		       20 11 f3 	      jsr	TitleAudio
    152  f30d		       20 49 f3 	      jsr	TitleState
    153  f310		       60		      rts
    154  f311
    155  f311				   TitleAudio
    156  f311
    157  f311		       a6 8e		      ldx	FrameTimer
    158  f313		       e0 00		      cpx	#0
    159  f315		       d0 31		      bne	.title_audio_return
    160  f317
    161  f317							; Reset Timer
    162  f317		       a2 09		      ldx	#TITLE_AUDIO_STEP
    163  f319		       86 8e		      stx	FrameTimer
    164  f31b
    165  f31b				   .title_audio_play
    166  f31b
    167  f31b							; Increment melody position
    168  f31b		       a4 90		      ldy	AudioStep
    169  f31d		       c8		      iny
    170  f31e
    171  f31e							; Check if we're at the end of the melody
    172  f31e		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    173  f320		       d0 02		      bne	.title_audio_play_note
    174  f322
    175  f322							; Loop our audio step
    176  f322		       a0 00		      ldy	#0
    177  f324
    178  f324				   .title_audio_play_note
    179  f324
    180  f324							; Save current position
    181  f324		       84 90		      sty	AudioStep
    182  f326
    183  f326							; Basic Melody Line
    184  f326		       b9 a3 f4 	      lda	TitleAudio0,y
    185  f329		       85 17		      sta	AUDF0
    186  f32b
    187  f32b							; Drums and Bass
    188  f32b		       b9 b3 f4 	      lda	TitleTone1,y
    189  f32e		       c9 ff		      cmp	#$FF
    190  f330		       f0 0e		      beq	.title_audio_play_note_1_mute
    191  f332
    192  f332		       85 16		      sta	AUDC1
    193  f334		       b9 c3 f4 	      lda	TitleAudio1,y
    194  f337		       85 18		      sta	AUDF1
    195  f339		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    196  f33b		       85 1a		      sta	AUDV1
    197  f33d
    198  f33d		       4c 48 f3 	      jmp	.title_audio_return
    199  f340
    200  f340				   .title_audio_play_note_1_mute
    201  f340
    202  f340		       a9 00		      lda	#0
    203  f342		       85 18		      sta	AUDF1
    204  f344		       85 16		      sta	AUDC1
    205  f346		       85 1a		      sta	AUDV1
    206  f348
    207  f348				   .title_audio_return
    208  f348		       60		      rts
    209  f349
    210  f349				   TitleState
    211  f349							; Check if Fire Button on controller 1 is pressed
    212  f349		       a5 0c		      lda	INPT4
    213  f34b		       30 03		      bmi	.title_state_return
    214  f34d
    215  f34d		       20 2e fc 	      jsr	GameInit
    216  f350
    217  f350				   .title_state_return
    218  f350		       60		      rts
    219  f351
    220  f351				   TitleKernel
    221  f351
    222  f351							; Playfield Control
    223  f351		       a5 80		      lda	CtrlPf
    224  f353		       29 fe		      and	#%11111110	; No mirroring
    225  f355		       85 80		      sta	CtrlPf
    226  f357		       85 0a		      sta	CTRLPF
    227  f359
    228  f359							; Turn on display
    229  f359		       a9 00		      lda	#0
    230  f35b		       85 01		      sta	VBLANK
    231  f35d
    232  f35d		       85 02		      sta	WSYNC
    233  f35f
    234  f35f				   TitleFrameTopDraw
    235  f35f
    236  f35f							; Start Counters
    237  f35f		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    238  f361		       a0 00		      ldy	#0	; Image Counter
    239  f363
    240  f363				   .title_frame_top
    241  f363
    242  f363							; 76 machine cycles per scanline
    243  f363		       85 02		      sta	WSYNC
    244  f365
    245  f365				   .title_frame_top_load		; 66 cycles
    246  f365
    247  f365							; First half of image
    248  f365		       b9 2b f4 	      lda	TitleFrameTop,y	; 5
    249  f368		       85 0d		      sta	PF0	; 4
    250  f36a		       b9 2c f4 	      lda	TitleFrameTop+1,y	; 5
    251  f36d		       85 0e		      sta	PF1	; 4
    252  f36f		       b9 2d f4 	      lda	TitleFrameTop+2,y	; 5
    253  f372		       85 0f		      sta	PF2	; 4
    254  f374
      0  f374					      sleep	6
      1  f374				   .CYCLES    SET	6
      2  f374
      3  f374				  -	      IF	.CYCLES < 2
      4  f374				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f374				  -	      ERR
      6  f374					      ENDIF
      7  f374
      8  f374				  -	      IF	.CYCLES & 1
      9  f374				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f374				  -	      nop	0
     11  f374				  -	      ELSE
     12  f374				  -	      bit	VSYNC
     13  f374				  -	      ENDIF
     14  f374				  -.CYCLES    SET	.CYCLES - 3
     15  f374					      ENDIF
     16  f374
     17  f374					      REPEAT	.CYCLES / 2
     18  f374		       ea		      nop
     17  f374					      REPEND
     18  f375		       ea		      nop
     17  f375					      REPEND
     18  f376		       ea		      nop
     19  f377					      REPEND
    256  f377
    257  f377							; Second half of image
    258  f377		       b9 2e f4 	      lda	TitleFrameTop+3,y	; 5
    259  f37a		       85 0d		      sta	PF0	; 4
    260  f37c		       b9 2f f4 	      lda	TitleFrameTop+4,y	; 5
    261  f37f		       85 0e		      sta	PF1	; 4
    262  f381		       b9 30 f4 	      lda	TitleFrameTop+5,y	; 5
    263  f384		       85 0f		      sta	PF2	; 4
    264  f386
    265  f386				   .title_frame_top_index		; 4 cycles
    266  f386
    267  f386		       ca		      dex		; 2
    268  f387		       d0 da		      bne	.title_frame_top	; 2
    269  f389
    270  f389				   .title_frame_top_index_next		; 6 cycles
    271  f389
    272  f389							; Restore scanline counter
    273  f389		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    274  f38b
    275  f38b		       98		      tya		; 2
    276  f38c		       18		      clc		; 2
    277  f38d		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    278  f38f		       a8		      tay		; 2
    279  f390
    280  f390		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA
    281  f392		       d0 04		      bne	.title_frame_top_label_color_skip
    282  f394		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    283  f396		       85 08		      sta	COLUPF	; 4
    284  f398				   .title_frame_top_label_color_skip
    285  f398
    286  f398		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA
    287  f39a		       d0 c7		      bne	.title_frame_top	; 2
    288  f39c
    289  f39c				   .title_frame_top_clean
    290  f39c
    291  f39c							; Clear out playfield
    292  f39c		       a9 00		      lda	#0
    293  f39e		       85 0d		      sta	PF0
    294  f3a0		       85 0e		      sta	PF1
    295  f3a2		       85 0f		      sta	PF2
    296  f3a4
    297  f3a4				   TitleWebDraw
    298  f3a4		       a9 02		      lda	#%00000010
    299  f3a6		       85 1d		      sta	ENAM0
    300  f3a8
    301  f3a8		       a9 06		      lda	#TITLE_WEB_COLOR
    302  f3aa		       85 06		      sta	COLUP0
    303  f3ac
    304  f3ac		       a2 0f		      ldx	#TITLE_GAP_SIZE
    305  f3ae				   .title_web_gap
    306  f3ae		       ca		      dex
    307  f3af		       85 02		      sta	WSYNC
    308  f3b1		       d0 fb		      bne	.title_web_gap
    309  f3b3
    310  f3b3				   TitleSpiderDraw
    311  f3b3
    312  f3b3		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    313  f3b5
    314  f3b5		       a5 a3		      lda	SpiderDrawPos
    315  f3b7		       c9 01		      cmp	#1
    316  f3b9		       d0 0c		      bne	.title_spider_extra_web_disable
    317  f3bb
    318  f3bb				   .title_spider_extra_web_start
    319  f3bb		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    320  f3bd				   .title_spider_extra_web_loop
    321  f3bd		       85 02		      sta	WSYNC
    322  f3bf		       ca		      dex
    323  f3c0		       d0 fb		      bne	.title_spider_extra_web_loop
    324  f3c2
    325  f3c2		       88		      dey
    326  f3c3		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    327  f3c5		       d0 f4		      bne	.title_spider_extra_web_start
    328  f3c7
    329  f3c7				   .title_spider_extra_web_disable
    330  f3c7		       a9 00		      lda	#0
    331  f3c9		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    332  f3cb
    333  f3cb		       85 02		      sta	WSYNC
    334  f3cd
    335  f3cd		       85 1d		      sta	ENAM0
    336  f3cf		       a9 56		      lda	#TITLE_SPIDER_COLOR
    337  f3d1		       85 06		      sta	COLUP0
    338  f3d3
    339  f3d3				   .title_spider
    340  f3d3		       b1 9c		      lda	(SpiderPtr),y
    341  f3d5		       85 1b		      sta	GRP0
    342  f3d7		       85 1c		      sta	GRP1
    343  f3d9
    344  f3d9				   .title_spider_delay
    345  f3d9		       ca		      dex
    346  f3da		       85 02		      sta	WSYNC
    347  f3dc		       d0 fb		      bne	.title_spider_delay
    348  f3de
    349  f3de				   .title_spider_index
    350  f3de		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    351  f3e0		       88		      dey
    352  f3e1		       10 f0		      bpl	.title_spider
    353  f3e3
    354  f3e3				   .title_spider_clean
    355  f3e3
    356  f3e3							; Clear sprites
    357  f3e3		       a9 00		      lda	#0
    358  f3e5		       85 1b		      sta	GRP0
    359  f3e7		       85 1c		      sta	GRP1
    360  f3e9
    361  f3e9				   TitleFrameBottomDraw
    362  f3e9
    363  f3e9							; Load Frame Color
    364  f3e9		       a9 06		      lda	#TITLE_WEB_COLOR
    365  f3eb		       85 08		      sta	COLUPF
    366  f3ed
    367  f3ed							; Start Counters
    368  f3ed		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    369  f3ef		       a0 00		      ldy	#0	; Image Counter
    370  f3f1
    371  f3f1				   .title_frame_bottom
    372  f3f1
    373  f3f1							; 76 machine cycles per scanline
    374  f3f1		       85 02		      sta	WSYNC
    375  f3f3
    376  f3f3				   .title_frame_bottom_load		; 66 cycles
    377  f3f3
    378  f3f3							; First half of image
    379  f3f3		       b9 73 f4 	      lda	TitleFrameBottom,y	; 5
    380  f3f6		       85 0d		      sta	PF0	; 4
    381  f3f8		       b9 74 f4 	      lda	TitleFrameBottom+1,y	; 5
    382  f3fb		       85 0e		      sta	PF1	; 4
    383  f3fd		       b9 75 f4 	      lda	TitleFrameBottom+2,y	; 5
    384  f400		       85 0f		      sta	PF2	; 4
    385  f402
      0  f402					      sleep	6
      1  f402				   .CYCLES    SET	6
      2  f402
      3  f402				  -	      IF	.CYCLES < 2
      4  f402				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f402				  -	      ERR
      6  f402					      ENDIF
      7  f402
      8  f402				  -	      IF	.CYCLES & 1
      9  f402				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f402				  -	      nop	0
     11  f402				  -	      ELSE
     12  f402				  -	      bit	VSYNC
     13  f402				  -	      ENDIF
     14  f402				  -.CYCLES    SET	.CYCLES - 3
     15  f402					      ENDIF
     16  f402
     17  f402					      REPEAT	.CYCLES / 2
     18  f402		       ea		      nop
     17  f402					      REPEND
     18  f403		       ea		      nop
     17  f403					      REPEND
     18  f404		       ea		      nop
     19  f405					      REPEND
    387  f405
    388  f405							; Second half of image
    389  f405		       b9 76 f4 	      lda	TitleFrameBottom+3,y	; 5
    390  f408		       85 0d		      sta	PF0	; 4
    391  f40a		       b9 77 f4 	      lda	TitleFrameBottom+4,y	; 5
    392  f40d		       85 0e		      sta	PF1	; 4
    393  f40f		       b9 78 f4 	      lda	TitleFrameBottom+5,y	; 5
    394  f412		       85 0f		      sta	PF2	; 4
    395  f414
    396  f414				   .title_frame_bottom_index		; 4 cycles
    397  f414
    398  f414		       ca		      dex		; 2
    399  f415		       d0 da		      bne	.title_frame_bottom	; 2
    400  f417
    401  f417				   .title_frame_bottom_index_next		; 6 cycles
    402  f417
    403  f417							; Restore scanline counter
    404  f417		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    405  f419
    406  f419		       98		      tya		; 2
    407  f41a		       18		      clc		; 2
    408  f41b		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    409  f41d		       a8		      tay		; 2
    410  f41e		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    411  f420		       d0 cf		      bne	.title_frame_bottom	; 2
    412  f422
    413  f422				   .title_frame_bottom_clean
    414  f422
    415  f422							; Clear out playfield
    416  f422		       a9 00		      lda	#0
    417  f424		       85 0d		      sta	PF0
    418  f426		       85 0e		      sta	PF1
    419  f428		       85 0f		      sta	PF2
    420  f42a
    421  f42a				   .title_kernel_return
    422  f42a		       60		      rts
    423  f42b
    424  f42b				   TitleAssets
    425  f42b
    426  f42b							; Assets
------- FILE title_frame_top.asm LEVEL 3 PASS 2
      0  f42b					      include	"title_frame_top.asm"
      1  f42b				   TitleFrameTop
      2  f42b
      3  f42b		       a0		      .BYTE.b	%10100000
      4  f42c		       54		      .BYTE.b	%01010100
      5  f42d		       01		      .BYTE.b	%00000001
      6  f42e		       00		      .BYTE.b	%00000000
      7  f42f		       03		      .BYTE.b	%00000011
      8  f430		       2c		      .BYTE.b	%00101100
      9  f431
     10  f431		       d0		      .BYTE.b	%11010000
     11  f432		       23		      .BYTE.b	%00100011
     12  f433		       00		      .BYTE.b	%00000000
     13  f434		       00		      .BYTE.b	%00000000
     14  f435		       00		      .BYTE.b	%00000000
     15  f436		       51		      .BYTE.b	%01010001
     16  f437
     17  f437		       60		      .BYTE.b	%01100000
     18  f438		       dc		      .BYTE.b	%11011100
     19  f439		       00		      .BYTE.b	%00000000
     20  f43a		       00		      .BYTE.b	%00000000
     21  f43b		       00		      .BYTE.b	%00000000
     22  f43c		       8e		      .BYTE.b	%10001110
     23  f43d
     24  f43d		       b0		      .BYTE.b	%10110000
     25  f43e		       00		      .BYTE.b	%00000000
     26  f43f		       00		      .BYTE.b	%00000000
     27  f440		       00		      .BYTE.b	%00000000
     28  f441		       00		      .BYTE.b	%00000000
     29  f442		       51		      .BYTE.b	%01010001
     30  f443
     31  f443		       40		      .BYTE.b	%01000000
     32  f444		       80		      .BYTE.b	%10000000
     33  f445		       00		      .BYTE.b	%00000000
     34  f446		       00		      .BYTE.b	%00000000
     35  f447		       00		      .BYTE.b	%00000000
     36  f448		       ad		      .BYTE.b	%10101101
     37  f449
     38  f449		       50		      .BYTE.b	%01010000
     39  f44a		       00		      .BYTE.b	%00000000
     40  f44b		       00		      .BYTE.b	%00000000
     41  f44c		       00		      .BYTE.b	%00000000
     42  f44d		       01		      .BYTE.b	%00000001
     43  f44e		       82		      .BYTE.b	%10000010
     44  f44f
     45  f44f		       20		      .BYTE.b	%00100000
     46  f450		       00		      .BYTE.b	%00000000
     47  f451		       00		      .BYTE.b	%00000000
     48  f452		       00		      .BYTE.b	%00000000
     49  f453		       02		      .BYTE.b	%00000010
     50  f454		       00		      .BYTE.b	%00000000
     51  f455
     52  f455		       c0		      .BYTE.b	%11000000
     53  f456		       77		      .BYTE.b	%01110111
     54  f457		       66		      .BYTE.b	%01100110
     55  f458		       30		      .BYTE.b	%00110000
     56  f459		       22		      .BYTE.b	%00100010
     57  f45a		       1b		      .BYTE.b	%00011011
     58  f45b
     59  f45b		       40		      .BYTE.b	%01000000
     60  f45c		       52		      .BYTE.b	%01010010
     61  f45d		       2a		      .BYTE.b	%00101010
     62  f45e		       50		      .BYTE.b	%01010000
     63  f45f		       22		      .BYTE.b	%00100010
     64  f460		       29		      .BYTE.b	%00101001
     65  f461
     66  f461		       c0		      .BYTE.b	%11000000
     67  f462		       72		      .BYTE.b	%01110010
     68  f463		       6a		      .BYTE.b	%01101010
     69  f464		       50		      .BYTE.b	%01010000
     70  f465		       22		      .BYTE.b	%00100010
     71  f466		       1b		      .BYTE.b	%00011011
     72  f467
     73  f467		       80		      .BYTE.b	%10000000
     74  f468		       42		      .BYTE.b	%01000010
     75  f469		       2a		      .BYTE.b	%00101010
     76  f46a		       30		      .BYTE.b	%00110000
     77  f46b		       2a		      .BYTE.b	%00101010
     78  f46c		       29		      .BYTE.b	%00101001
     79  f46d
     80  f46d		       c0		      .BYTE.b	%11000000
     81  f46e		       47		      .BYTE.b	%01000111
     82  f46f		       e6		      .BYTE.b	%11100110
     83  f470		       50		      .BYTE.b	%01010000
     84  f471		       14		      .BYTE.b	%00010100
     85  f472		       1b		      .BYTE.b	%00011011
------- FILE title.asm
------- FILE title_frame_bottom.asm LEVEL 3 PASS 2
      0  f473					      include	"title_frame_bottom.asm"
      1  f473				   TitleFrameBottom
      2  f473
      3  f473		       20		      .BYTE.b	%00100000
      4  f474		       00		      .BYTE.b	%00000000
      5  f475		       00		      .BYTE.b	%00000000
      6  f476		       00		      .BYTE.b	%00000000
      7  f477		       00		      .BYTE.b	%00000000
      8  f478		       64		      .BYTE.b	%01100100
      9  f479
     10  f479		       50		      .BYTE.b	%01010000
     11  f47a		       00		      .BYTE.b	%00000000
     12  f47b		       00		      .BYTE.b	%00000000
     13  f47c		       00		      .BYTE.b	%00000000
     14  f47d		       00		      .BYTE.b	%00000000
     15  f47e		       98		      .BYTE.b	%10011000
     16  f47f
     17  f47f		       90		      .BYTE.b	%10010000
     18  f480		       80		      .BYTE.b	%10000000
     19  f481		       00		      .BYTE.b	%00000000
     20  f482		       00		      .BYTE.b	%00000000
     21  f483		       00		      .BYTE.b	%00000000
     22  f484		       28		      .BYTE.b	%00101000
     23  f485
     24  f485		       60		      .BYTE.b	%01100000
     25  f486		       60		      .BYTE.b	%01100000
     26  f487		       00		      .BYTE.b	%00000000
     27  f488		       00		      .BYTE.b	%00000000
     28  f489		       00		      .BYTE.b	%00000000
     29  f48a		       44		      .BYTE.b	%01000100
     30  f48b
     31  f48b		       d0		      .BYTE.b	%11010000
     32  f48c		       1c		      .BYTE.b	%00011100
     33  f48d		       00		      .BYTE.b	%00000000
     34  f48e		       00		      .BYTE.b	%00000000
     35  f48f		       00		      .BYTE.b	%00000000
     36  f490		       ab		      .BYTE.b	%10101011
------- FILE title.asm
------- FILE title_spider.asm LEVEL 3 PASS 2
      0  f491					      include	"title_spider.asm"
      1  f491				   TitleSpider
      2  f491
      3  f491		       30		      .BYTE.b	%00110000
      4  f492		       67		      .BYTE.b	%01100111
      5  f493		       4f		      .BYTE.b	%01001111
      6  f494		       dd		      .BYTE.b	%11011101
      7  f495		       d8		      .BYTE.b	%11011000
      8  f496		       df		      .BYTE.b	%11011111
      9  f497		       4d		      .BYTE.b	%01001101
     10  f498		       6f		      .BYTE.b	%01101111
     11  f499		       3b		      .BYTE.b	%00111011
     12  f49a
     13  f49a		       37		      .BYTE.b	%00110111
     14  f49b		       6d		      .BYTE.b	%01101101
     15  f49c		       d8		      .BYTE.b	%11011000
     16  f49d		       df		      .BYTE.b	%11011111
     17  f49e		       cd		      .BYTE.b	%11001101
     18  f49f		       6f		      .BYTE.b	%01101111
     19  f4a0		       3b		      .BYTE.b	%00111011
     20  f4a1		       00		      .BYTE.b	%00000000
     21  f4a2		       00		      .BYTE.b	%00000000
------- FILE title.asm
    430  f4a3
    431  f4a3				   TitleAudio0
    432  f4a3
    433  f4a3		       0f		      .BYTE.b	#15	; B
    434  f4a4		       13		      .BYTE.b	#19	; G
    435  f4a5		       17		      .BYTE.b	#23	; E
    436  f4a6		       13		      .BYTE.b	#19	; G
    437  f4a7		       0e		      .BYTE.b	#14	; C
    438  f4a8		       13		      .BYTE.b	#19
    439  f4a9		       17		      .BYTE.b	#23
    440  f4aa		       13		      .BYTE.b	#19
    441  f4ab		       0c		      .BYTE.b	#12	; D
    442  f4ac		       13		      .BYTE.b	#19
    443  f4ad		       17		      .BYTE.b	#23
    444  f4ae		       13		      .BYTE.b	#19
    445  f4af		       0e		      .BYTE.b	#14	; C
    446  f4b0		       13		      .BYTE.b	#19
    447  f4b1		       17		      .BYTE.b	#23
    448  f4b2		       13		      .BYTE.b	#19
    449  f4b3
    450  f4b3				   TitleTone1
    451  f4b3
    452  f4b3		       0f		      .BYTE.b	#15	; Electronic Rumble
    453  f4b4		       ff		      .BYTE.b	#$FF
    454  f4b5		       01		      .BYTE.b	#1	; Low Pure Tone
    455  f4b6		       01		      .BYTE.b	#1
    456  f4b7		       08		      .BYTE.b	#8	; White Noise
    457  f4b8		       01		      .BYTE.b	#1
    458  f4b9		       01		      .BYTE.b	#1
    459  f4ba		       ff		      .BYTE.b	#$FF
    460  f4bb		       ff		      .BYTE.b	#$FF
    461  f4bc		       0f		      .BYTE.b	#15
    462  f4bd		       ff		      .BYTE.b	#$FF
    463  f4be		       ff		      .BYTE.b	#$FF
    464  f4bf		       08		      .BYTE.b	#8
    465  f4c0		       ff		      .BYTE.b	#$FF
    466  f4c1		       01		      .BYTE.b	#1
    467  f4c2		       01		      .BYTE.b	#1
    468  f4c3
    469  f4c3				   TitleAudio1
    470  f4c3
    471  f4c3		       1d		      .BYTE.b	#29	; Kick
    472  f4c4		       ff		      .BYTE.b	#$FF
    473  f4c5		       1f		      .BYTE.b	#31	; C
    474  f4c6		       1f		      .BYTE.b	#31
    475  f4c7		       07		      .BYTE.b	#7	; Snare
    476  f4c8		       1f		      .BYTE.b	#31
    477  f4c9		       1f		      .BYTE.b	#31
    478  f4ca		       ff		      .BYTE.b	#$FF
    479  f4cb		       ff		      .BYTE.b	#$FF
    480  f4cc		       1d		      .BYTE.b	#29
    481  f4cd		       ff		      .BYTE.b	#$FF
    482  f4ce		       ff		      .BYTE.b	#$FF
    483  f4cf		       07		      .BYTE.b	#7
    484  f4d0		       ff		      .BYTE.b	#$FF
    485  f4d1		       17		      .BYTE.b	#23	; F
    486  f4d2		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4d3					      include	"game.asm"
      1  f4d3							;================
      2  f4d3							; Game
      3  f4d3							;================
      4  f4d3
      5  f4d3							; Constants
      6  f4d3
      7  f4d3		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f4d3		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4d3		       00 09	   GAME_AUDIO_STEP =	9
     10  f4d3		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4d3		       00 06	   GAME_AUDIO_TONE =	6
     12  f4d3
     13  f4d3							; Object Code
     14  f4d3
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f4d3					      include	"objects/score.asm"
      1  f4d3							;======================
      2  f4d3							; Score (playfield)
      3  f4d3							;======================
      4  f4d3
      5  f4d3							; Constants
      6  f4d3
      7  f4d3		       00 00	   SCORE_BG_COLOR =	#$00
      8  f4d3		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f4d3		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f4d3
     11  f4d3		       00 05	   SCORE_CHAR_SIZE =	5
     12  f4d3		       00 02	   SCORE_LINE_SIZE =	2
     13  f4d3		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f4d3
     15  f4d3							; Initialization
     16  f4d3
     17  f4d3				   ScoreInit
     18  f4d3
     19  f4d3							; Health Score
     20  f4d3		       a9 ff		      lda	#$FF
     21  f4d5		       85 92		      sta	ScoreValue+0
     22  f4d7
     23  f4d7							; Game Score
     24  f4d7		       a9 00		      lda	#0
     25  f4d9		       85 93		      sta	ScoreValue+1
     26  f4db
     27  f4db		       60		      rts
     28  f4dc
     29  f4dc							; Frame Update
     30  f4dc
     31  f4dc				   ScoreUpdate
     32  f4dc
     33  f4dc		       a2 01		      ldx	#1
     34  f4de				   .score_update_loop
     35  f4de
     36  f4de							; Ones Digit
     37  f4de		       b5 92		      lda	ScoreValue,x
     38  f4e0		       29 0f		      and	#$0f
     39  f4e2		       85 83		      sta	Temp
     40  f4e4		       0a		      asl
     41  f4e5		       0a		      asl
     42  f4e6		       65 83		      adc	Temp
     43  f4e8		       95 94		      sta	ScoreDigitOnes,x
     44  f4ea
     45  f4ea							; Tens Digit
     46  f4ea		       b5 92		      lda	ScoreValue,x
     47  f4ec		       29 f0		      and	#$f0
     48  f4ee		       4a		      lsr
     49  f4ef		       4a		      lsr
     50  f4f0		       85 83		      sta	Temp
     51  f4f2		       4a		      lsr
     52  f4f3		       4a		      lsr
     53  f4f4		       65 83		      adc	Temp
     54  f4f6		       95 96		      sta	ScoreDigitTens,x
     55  f4f8
     56  f4f8		       ca		      dex
     57  f4f9		       10 e3		      bpl	.score_update_loop
     58  f4fb
     59  f4fb				   .score_update_end
     60  f4fb		       60		      rts
     61  f4fc
     62  f4fc							; Draw loop (uses SCORE_LINES scanlines)
     63  f4fc
     64  f4fc				   ScoreDraw
     65  f4fc
     66  f4fc							; Load Colors
     67  f4fc		       a9 00		      lda	#SCORE_BG_COLOR
     68  f4fe		       85 09		      sta	COLUBK
     69  f500		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f502		       85 08		      sta	COLUPF
     71  f504		       85 06		      sta	COLUP0
     72  f506		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f508		       85 07		      sta	COLUP1
     74  f50a
     75  f50a							; Set Non-Mirror and p0/p1 color
     76  f50a		       a5 80		      lda	CtrlPf
     77  f50c		       29 fc		      and	#%11111100
     78  f50e		       09 02		      ora	#%00000010
     79  f510		       85 80		      sta	CtrlPf
     80  f512		       85 0a		      sta	CTRLPF
     81  f514
     82  f514							;sta WSYNC
     83  f514
     84  f514		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f516
     86  f516				   .score_draw_line
     87  f516
     88  f516							; 1st Value
     89  f516		       a4 96		      ldy	ScoreDigitTens
     90  f518		       b9 6c f5 	      lda	ScoreDigits,y
     91  f51b		       29 f0		      and	#$f0
     92  f51d		       85 98		      sta	ScoreGfx
     93  f51f		       a4 94		      ldy	ScoreDigitOnes
     94  f521		       b9 6c f5 	      lda	ScoreDigits,y
     95  f524		       29 0f		      and	#$0f
     96  f526		       05 98		      ora	ScoreGfx
     97  f528		       85 98		      sta	ScoreGfx
     98  f52a
     99  f52a		       85 02		      sta	WSYNC
    100  f52c		       85 0e		      sta	PF1
    101  f52e
    102  f52e							; 2nd Value
    103  f52e		       a4 97		      ldy	ScoreDigitTens+1
    104  f530		       b9 6c f5 	      lda	ScoreDigits,y
    105  f533		       29 f0		      and	#$f0
    106  f535		       85 99		      sta	ScoreGfx+1
    107  f537		       a4 95		      ldy	ScoreDigitOnes+1
    108  f539		       b9 6c f5 	      lda	ScoreDigits,y
    109  f53c		       29 0f		      and	#$0f
    110  f53e		       05 99		      ora	ScoreGfx+1
    111  f540		       85 99		      sta	ScoreGfx+1
    112  f542
      0  f542					      sleep	12
      1  f542				   .CYCLES    SET	12
      2  f542
      3  f542				  -	      IF	.CYCLES < 2
      4  f542				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f542				  -	      ERR
      6  f542					      ENDIF
      7  f542
      8  f542				  -	      IF	.CYCLES & 1
      9  f542				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f542				  -	      nop	0
     11  f542				  -	      ELSE
     12  f542				  -	      bit	VSYNC
     13  f542				  -	      ENDIF
     14  f542				  -.CYCLES    SET	.CYCLES - 3
     15  f542					      ENDIF
     16  f542
     17  f542					      REPEAT	.CYCLES / 2
     18  f542		       ea		      nop
     17  f542					      REPEND
     18  f543		       ea		      nop
     17  f543					      REPEND
     18  f544		       ea		      nop
     17  f544					      REPEND
     18  f545		       ea		      nop
     17  f545					      REPEND
     18  f546		       ea		      nop
     17  f546					      REPEND
     18  f547		       ea		      nop
     19  f548					      REPEND
    114  f548		       85 0e		      sta	PF1
    115  f54a
    116  f54a		       a4 98		      ldy	ScoreGfx
    117  f54c		       85 02		      sta	WSYNC
    118  f54e
    119  f54e		       84 0e		      sty	PF1
    120  f550
    121  f550		       e6 94		      inc	ScoreDigitOnes
    122  f552		       e6 95		      inc	ScoreDigitOnes+1
    123  f554		       e6 96		      inc	ScoreDigitTens
    124  f556		       e6 97		      inc	ScoreDigitTens+1
    125  f558
      0  f558					      sleep	12
      1  f558				   .CYCLES    SET	12
      2  f558
      3  f558				  -	      IF	.CYCLES < 2
      4  f558				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f558				  -	      ERR
      6  f558					      ENDIF
      7  f558
      8  f558				  -	      IF	.CYCLES & 1
      9  f558				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f558				  -	      nop	0
     11  f558				  -	      ELSE
     12  f558				  -	      bit	VSYNC
     13  f558				  -	      ENDIF
     14  f558				  -.CYCLES    SET	.CYCLES - 3
     15  f558					      ENDIF
     16  f558
     17  f558					      REPEAT	.CYCLES / 2
     18  f558		       ea		      nop
     17  f558					      REPEND
     18  f559		       ea		      nop
     17  f559					      REPEND
     18  f55a		       ea		      nop
     17  f55a					      REPEND
     18  f55b		       ea		      nop
     17  f55b					      REPEND
     18  f55c		       ea		      nop
     17  f55c					      REPEND
     18  f55d		       ea		      nop
     19  f55e					      REPEND
    127  f55e		       ca		      dex
    128  f55f		       85 0e		      sta	PF1
    129  f561
    130  f561		       d0 b3		      bne	.score_draw_line
    131  f563		       85 02		      sta	WSYNC
    132  f565
    133  f565							; Clear
    134  f565		       a9 00		      lda	#0
    135  f567		       85 0e		      sta	PF1
    136  f569
    137  f569		       85 02		      sta	WSYNC
    138  f56b
    139  f56b		       60		      rts
    140  f56c
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f56c					      include	"objects/score_digits.asm"
      1  f56c				   ScoreDigits
      2  f56c
      3  f56c		       77		      .BYTE.b	%01110111
      4  f56d		       55		      .BYTE.b	%01010101
      5  f56e		       55		      .BYTE.b	%01010101
      6  f56f		       55		      .BYTE.b	%01010101
      7  f570		       77		      .BYTE.b	%01110111
      8  f571
      9  f571		       11		      .BYTE.b	%00010001
     10  f572		       11		      .BYTE.b	%00010001
     11  f573		       11		      .BYTE.b	%00010001
     12  f574		       11		      .BYTE.b	%00010001
     13  f575		       11		      .BYTE.b	%00010001
     14  f576
     15  f576		       77		      .BYTE.b	%01110111
     16  f577		       11		      .BYTE.b	%00010001
     17  f578		       77		      .BYTE.b	%01110111
     18  f579		       44		      .BYTE.b	%01000100
     19  f57a		       77		      .BYTE.b	%01110111
     20  f57b
     21  f57b		       77		      .BYTE.b	%01110111
     22  f57c		       11		      .BYTE.b	%00010001
     23  f57d		       33		      .BYTE.b	%00110011
     24  f57e		       11		      .BYTE.b	%00010001
     25  f57f		       77		      .BYTE.b	%01110111
     26  f580
     27  f580		       55		      .BYTE.b	%01010101
     28  f581		       55		      .BYTE.b	%01010101
     29  f582		       77		      .BYTE.b	%01110111
     30  f583		       11		      .BYTE.b	%00010001
     31  f584		       11		      .BYTE.b	%00010001
     32  f585
     33  f585		       77		      .BYTE.b	%01110111
     34  f586		       44		      .BYTE.b	%01000100
     35  f587		       77		      .BYTE.b	%01110111
     36  f588		       11		      .BYTE.b	%00010001
     37  f589		       77		      .BYTE.b	%01110111
     38  f58a
     39  f58a		       77		      .BYTE.b	%01110111
     40  f58b		       44		      .BYTE.b	%01000100
     41  f58c		       77		      .BYTE.b	%01110111
     42  f58d		       55		      .BYTE.b	%01010101
     43  f58e		       77		      .BYTE.b	%01110111
     44  f58f
     45  f58f		       77		      .BYTE.b	%01110111
     46  f590		       11		      .BYTE.b	%00010001
     47  f591		       22		      .BYTE.b	%00100010
     48  f592		       22		      .BYTE.b	%00100010
     49  f593		       22		      .BYTE.b	%00100010
     50  f594
     51  f594		       77		      .BYTE.b	%01110111
     52  f595		       55		      .BYTE.b	%01010101
     53  f596		       77		      .BYTE.b	%01110111
     54  f597		       55		      .BYTE.b	%01010101
     55  f598		       77		      .BYTE.b	%01110111
     56  f599
     57  f599		       77		      .BYTE.b	%01110111
     58  f59a		       55		      .BYTE.b	%01010101
     59  f59b		       77		      .BYTE.b	%01110111
     60  f59c		       11		      .BYTE.b	%00010001
     61  f59d		       11		      .BYTE.b	%00010001
     62  f59e
     63  f59e		       77		      .BYTE.b	%01110111
     64  f59f		       55		      .BYTE.b	%01010101
     65  f5a0		       77		      .BYTE.b	%01110111
     66  f5a1		       55		      .BYTE.b	%01010101
     67  f5a2		       55		      .BYTE.b	%01010101
     68  f5a3
     69  f5a3		       66		      .BYTE.b	%01100110
     70  f5a4		       55		      .BYTE.b	%01010101
     71  f5a5		       66		      .BYTE.b	%01100110
     72  f5a6		       55		      .BYTE.b	%01010101
     73  f5a7		       66		      .BYTE.b	%01100110
     74  f5a8
     75  f5a8		       77		      .BYTE.b	%01110111
     76  f5a9		       44		      .BYTE.b	%01000100
     77  f5aa		       44		      .BYTE.b	%01000100
     78  f5ab		       44		      .BYTE.b	%01000100
     79  f5ac		       77		      .BYTE.b	%01110111
     80  f5ad
     81  f5ad		       66		      .BYTE.b	%01100110
     82  f5ae		       55		      .BYTE.b	%01010101
     83  f5af		       55		      .BYTE.b	%01010101
     84  f5b0		       55		      .BYTE.b	%01010101
     85  f5b1		       66		      .BYTE.b	%01100110
     86  f5b2
     87  f5b2		       77		      .BYTE.b	%01110111
     88  f5b3		       44		      .BYTE.b	%01000100
     89  f5b4		       66		      .BYTE.b	%01100110
     90  f5b5		       44		      .BYTE.b	%01000100
     91  f5b6		       77		      .BYTE.b	%01110111
     92  f5b7
     93  f5b7		       77		      .BYTE.b	%01110111
     94  f5b8		       44		      .BYTE.b	%01000100
     95  f5b9		       66		      .BYTE.b	%01100110
     96  f5ba		       44		      .BYTE.b	%01000100
     97  f5bb		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f5bc					      include	"objects/web.asm"
      1  f5bc							;================
      2  f5bc							; Web (Playfield)
      3  f5bc							;================
      4  f5bc
      5  f5bc							; Constants
      6  f5bc
      7  f5bc		       00 00	   WEB_BG_COLOR =	#$00
      8  f5bc		       00 06	   WEB_FG_COLOR =	#$06
      9  f5bc
     10  f5bc		       00 1e	   WEB_SIZE   =	30
     11  f5bc		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f5bc		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f5bc
     14  f5bc							; Scanline Draw
     15  f5bc
     16  f5bc				   WebDrawStart
     17  f5bc
     18  f5bc							; Load Colors
     19  f5bc		       a9 00		      lda	#WEB_BG_COLOR
     20  f5be		       85 09		      sta	COLUBK
     21  f5c0		       a9 06		      lda	#WEB_FG_COLOR
     22  f5c2		       85 08		      sta	COLUPF
     23  f5c4
     24  f5c4							; Mirror playfield and use standard playfield color
     25  f5c4		       a5 80		      lda	CtrlPf
     26  f5c6		       29 fc		      and	#%11111100
     27  f5c8		       09 01		      ora	#%00000001
     28  f5ca		       85 80		      sta	CtrlPf
     29  f5cc		       85 0a		      sta	CTRLPF
     30  f5ce
     31  f5ce							; Initialize image index
     32  f5ce		       a9 00		      lda	#0
     33  f5d0		       85 9a		      sta	WebIndex
     34  f5d2		       a9 01		      lda	#1
     35  f5d4		       85 9b		      sta	WebDir
     36  f5d6
     37  f5d6		       60		      rts
     38  f5d7
     39  f5d7				   WebDraw
     40  f5d7
     41  f5d7		       a4 9a		      ldy	WebIndex
     42  f5d9
     43  f5d9							; Draw Image
     44  f5d9		       b9 02 f6 	      lda	WebImagePF0,y
     45  f5dc		       85 0d		      sta	PF0
     46  f5de		       b9 20 f6 	      lda	WebImagePF1,y
     47  f5e1		       85 0e		      sta	PF1
     48  f5e3		       b9 3e f6 	      lda	WebImagePF2,y
     49  f5e6		       85 0f		      sta	PF2
     50  f5e8
     51  f5e8							; Increment image index
     52  f5e8		       18		      clc
     53  f5e9		       98		      tya
     54  f5ea		       65 9b		      adc	WebDir
     55  f5ec		       85 9a		      sta	WebIndex
     56  f5ee
     57  f5ee		       c9 0f		      cmp	#WEB_SIZE/2
     58  f5f0		       d0 06		      bne	.web_draw_return
     59  f5f2
     60  f5f2		       a9 ff		      lda	#-1
     61  f5f4		       85 9b		      sta	WebDir
     62  f5f6
     63  f5f6		       c6 9a		      dec	WebIndex
     64  f5f8
     65  f5f8				   .web_draw_return
     66  f5f8		       60		      rts
     67  f5f9
     68  f5f9				   WebClean
     69  f5f9
     70  f5f9							; Clear out playfield
     71  f5f9		       a9 00		      lda	#0
     72  f5fb		       85 0d		      sta	PF0
     73  f5fd		       85 0e		      sta	PF1
     74  f5ff		       85 0f		      sta	PF2
     75  f601
     76  f601		       60		      rts
     77  f602
     78  f602							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f602					      include	"objects/web_image.asm"
      1  f602				   WebImagePF0
      2  f602		       00		      .BYTE.b	%00000000
      3  f603		       00		      .BYTE.b	%00000000
      4  f604		       00		      .BYTE.b	%00000000
      5  f605		       00		      .BYTE.b	%00000000
      6  f606		       00		      .BYTE.b	%00000000
      7  f607		       00		      .BYTE.b	%00000000
      8  f608		       00		      .BYTE.b	%00000000
      9  f609		       00		      .BYTE.b	%00000000
     10  f60a		       00		      .BYTE.b	%00000000
     11  f60b		       30		      .BYTE.b	%00110000
     12  f60c		       e0		      .BYTE.b	%11100000
     13  f60d		       20		      .BYTE.b	%00100000
     14  f60e		       40		      .BYTE.b	%01000000
     15  f60f		       40		      .BYTE.b	%01000000
     16  f610		       80		      .BYTE.b	%10000000
     17  f611		       80		      .BYTE.b	%10000000
     18  f612		       40		      .BYTE.b	%01000000
     19  f613		       40		      .BYTE.b	%01000000
     20  f614		       20		      .BYTE.b	%00100000
     21  f615		       e0		      .BYTE.b	%11100000
     22  f616		       30		      .BYTE.b	%00110000
     23  f617		       00		      .BYTE.b	%00000000
     24  f618		       00		      .BYTE.b	%00000000
     25  f619		       00		      .BYTE.b	%00000000
     26  f61a		       00		      .BYTE.b	%00000000
     27  f61b		       00		      .BYTE.b	%00000000
     28  f61c		       00		      .BYTE.b	%00000000
     29  f61d		       00		      .BYTE.b	%00000000
     30  f61e		       00		      .BYTE.b	%00000000
     31  f61f		       00		      .BYTE.b	%00000000
     32  f620
     33  f620				   WebImagePF1
     34  f620		       08		      .BYTE.b	%00001000
     35  f621		       06		      .BYTE.b	%00000110
     36  f622		       01		      .BYTE.b	%00000001
     37  f623		       00		      .BYTE.b	%00000000
     38  f624		       00		      .BYTE.b	%00000000
     39  f625		       01		      .BYTE.b	%00000001
     40  f626		       01		      .BYTE.b	%00000001
     41  f627		       02		      .BYTE.b	%00000010
     42  f628		       0c		      .BYTE.b	%00001100
     43  f629		       30		      .BYTE.b	%00110000
     44  f62a		       c0		      .BYTE.b	%11000000
     45  f62b		       38		      .BYTE.b	%00111000
     46  f62c		       07		      .BYTE.b	%00000111
     47  f62d		       00		      .BYTE.b	%00000000
     48  f62e		       00		      .BYTE.b	%00000000
     49  f62f		       00		      .BYTE.b	%00000000
     50  f630		       00		      .BYTE.b	%00000000
     51  f631		       07		      .BYTE.b	%00000111
     52  f632		       38		      .BYTE.b	%00111000
     53  f633		       c0		      .BYTE.b	%11000000
     54  f634		       30		      .BYTE.b	%00110000
     55  f635		       0c		      .BYTE.b	%00001100
     56  f636		       02		      .BYTE.b	%00000010
     57  f637		       01		      .BYTE.b	%00000001
     58  f638		       01		      .BYTE.b	%00000001
     59  f639		       00		      .BYTE.b	%00000000
     60  f63a		       00		      .BYTE.b	%00000000
     61  f63b		       01		      .BYTE.b	%00000001
     62  f63c		       06		      .BYTE.b	%00000110
     63  f63d		       08		      .BYTE.b	%00001000
     64  f63e
     65  f63e				   WebImagePF2
     66  f63e		       20		      .BYTE.b	%00100000
     67  f63f		       18		      .BYTE.b	%00011000
     68  f640		       04		      .BYTE.b	%00000100
     69  f641		       03		      .BYTE.b	%00000011
     70  f642		       3f		      .BYTE.b	%00111111
     71  f643		       c2		      .BYTE.b	%11000010
     72  f644		       04		      .BYTE.b	%00000100
     73  f645		       08		      .BYTE.b	%00001000
     74  f646		       08		      .BYTE.b	%00001000
     75  f647		       10		      .BYTE.b	%00010000
     76  f648		       20		      .BYTE.b	%00100000
     77  f649		       20		      .BYTE.b	%00100000
     78  f64a		       41		      .BYTE.b	%01000001
     79  f64b		       8e		      .BYTE.b	%10001110
     80  f64c		       f0		      .BYTE.b	%11110000
     81  f64d		       f0		      .BYTE.b	%11110000
     82  f64e		       8e		      .BYTE.b	%10001110
     83  f64f		       41		      .BYTE.b	%01000001
     84  f650		       20		      .BYTE.b	%00100000
     85  f651		       20		      .BYTE.b	%00100000
     86  f652		       10		      .BYTE.b	%00010000
     87  f653		       08		      .BYTE.b	%00001000
     88  f654		       08		      .BYTE.b	%00001000
     89  f655		       04		      .BYTE.b	%00000100
     90  f656		       c2		      .BYTE.b	%11000010
     91  f657		       3f		      .BYTE.b	%00111111
     92  f658		       03		      .BYTE.b	%00000011
     93  f659		       04		      .BYTE.b	%00000100
     94  f65a		       18		      .BYTE.b	%00011000
     95  f65b		       20		      .BYTE.b	%00100000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f65c					      include	"objects/spider.asm"
      1  f65c							;=================
      2  f65c							; Spider (player0)
      3  f65c							;=================
      4  f65c
      5  f65c							; Constants
      6  f65c
      7  f65c		       00 56	   SPIDER_COLOR =	#$56
      8  f65c		       00 10	   SPIDER_SPRITE_SIZE =	16
      9  f65c		       00 20	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE*2
     10  f65c		       00 02	   SPIDER_VEL_X =	2
     11  f65c		       00 02	   SPIDER_VEL_Y =	2
     12  f65c
     13  f65c		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f65c
     15  f65c							; Initialization
     16  f65c
     17  f65c				   SpiderInit
     18  f65c
     19  f65c							; Initialize Position in center of screen
     20  f65c		       a9 2f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f65e		       85 9e		      sta	SpiderPos
     22  f660		       a9 38		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f662		       85 9f		      sta	SpiderPos+1
     24  f664
     25  f664							; Setup Sprite
      0  f664					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f664				   .POINTER   SET	SpiderPtr
      2  f664				   .ADDRESS   SET	SpiderSprite
      3  f664
      4  f664		       a9 ab		      LDA	#<.ADDRESS
      5  f666		       85 9c		      STA	.POINTER
      6  f668		       a9 f7		      LDA	#>.ADDRESS
      7  f66a		       85 9d		      STA	.POINTER+1
      8  f66c
     27  f66c
     28  f66c							;    lda #SPIDER_COLOR
     29  f66c							;    sta SpiderColor
     30  f66c
     31  f66c		       60		      rts
     32  f66d
     33  f66d							; Frame Update
     34  f66d
     35  f66d				   SpiderUpdate
     36  f66d		       20 74 f6 	      jsr	SpiderControl
     37  f670		       20 5a f7 	      jsr	SpiderCollision
     38  f673		       60		      rts
     39  f674
     40  f674				   SpiderControl
     41  f674
     42  f674							; Control Position
     43  f674		       a6 9e		      ldx	SpiderPos
     44  f676		       a4 9f		      ldy	SpiderPos+1
     45  f678		       ad 80 02 	      lda	SWCHA
     46  f67b
     47  f67b				   .spider_control_check_right
     48  f67b		       30 02		      bmi	.spider_control_check_left
     49  f67d
     50  f67d					      REPEAT	#SPIDER_VEL_X
     51  f67d		       e8		      inx
     50  f67d					      REPEND
     51  f67e		       e8		      inx
     52  f67f					      REPEND
     53  f67f
     54  f67f				   .spider_control_check_left
     55  f67f		       2a		      rol
     56  f680		       30 02		      bmi	.spider_control_check_down
     57  f682
     58  f682					      REPEAT	#SPIDER_VEL_X
     59  f682		       ca		      dex
     58  f682					      REPEND
     59  f683		       ca		      dex
     60  f684					      REPEND
     61  f684
     62  f684				   .spider_control_check_down
     63  f684		       2a		      rol
     64  f685		       30 02		      bmi	.spider_control_check_up
     65  f687
     66  f687					      REPEAT	#SPIDER_VEL_Y
     67  f687		       88		      dey
     66  f687					      REPEND
     67  f688		       88		      dey
     68  f689					      REPEND
     69  f689
     70  f689				   .spider_control_check_up
     71  f689		       2a		      rol
     72  f68a		       30 02		      bmi	.spider_control_sprite
     73  f68c
     74  f68c					      REPEAT	#SPIDER_VEL_Y
     75  f68c		       c8		      iny
     74  f68c					      REPEND
     75  f68d		       c8		      iny
     76  f68e					      REPEND
     77  f68e
     78  f68e				   .spider_control_sprite
     79  f68e							; Control Sprite
     80  f68e		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f690
     82  f690				   .spider_control_sprite_x
     83  f690		       e4 9e		      cpx	SpiderPos
     84  f692		       90 04		      bcc	.spider_control_sprite_left
     85  f694		       f0 09		      beq	.spider_control_sprite_y
     86  f696		       b0 05		      bcs	.spider_control_sprite_right
     87  f698
     88  f698				   .spider_control_sprite_left
     89  f698		       09 80		      ora	#%10000000
     90  f69a		       4c 9f f6 	      jmp	.spider_control_sprite_y
     91  f69d
     92  f69d				   .spider_control_sprite_right
     93  f69d		       09 40		      ora	#%01000000
     94  f69f
     95  f69f				   .spider_control_sprite_y
     96  f69f		       c4 9f		      cpy	SpiderPos+1
     97  f6a1		       90 04		      bcc	.spider_control_sprite_down
     98  f6a3		       f0 09		      beq	.spider_control_sprite_store
     99  f6a5		       b0 05		      bcs	.spider_control_sprite_up
    100  f6a7
    101  f6a7				   .spider_control_sprite_down
    102  f6a7		       09 10		      ora	#%00010000
    103  f6a9		       4c ae f6 	      jmp	.spider_control_sprite_store
    104  f6ac
    105  f6ac				   .spider_control_sprite_up
    106  f6ac		       09 20		      ora	#%00100000
    107  f6ae
    108  f6ae				   .spider_control_sprite_store
    109  f6ae		       c9 00		      cmp	#%00000000
    110  f6b0		       f0 02		      beq	.spider_control_boundary
    111  f6b2		       85 a0		      sta	SpiderCtrl
    112  f6b4
    113  f6b4				   .spider_control_boundary
    114  f6b4							; Check Playfield Boundaries
    115  f6b4
    116  f6b4				   .spider_control_boundary_left
    117  f6b4		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f6b6		       b0 05		      bcs	.spider_control_boundary_right
    119  f6b8		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f6ba		       4c c3 f6 	      jmp	.spider_control_boundary_top
    121  f6bd
    122  f6bd				   .spider_control_boundary_right
    123  f6bd		       e0 5e		      cpx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    124  f6bf		       90 02		      bcc	.spider_control_boundary_top
    125  f6c1		       a2 5e		      ldx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    126  f6c3
    127  f6c3				   .spider_control_boundary_top
    128  f6c3		       c0 03		      cpy	#SPIDER_VEL_X+1
    129  f6c5		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f6c7		       a0 03		      ldy	#SPIDER_VEL_X+1
    131  f6c9		       4c d2 f6 	      jmp	.spider_control_store
    132  f6cc
    133  f6cc				   .spider_control_boundary_bottom
    134  f6cc		       c0 b1		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    135  f6ce		       90 02		      bcc	.spider_control_store
    136  f6d0		       a0 b1		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    137  f6d2
    138  f6d2				   .spider_control_store
    139  f6d2							; Store new position
    140  f6d2		       86 9e		      stx	SpiderPos
    141  f6d4		       84 9f		      sty	SpiderPos+1
    142  f6d6
    143  f6d6							; TODO: Optimize this somehow?
    144  f6d6				   .spider_control_sprite_assign
    145  f6d6							; Skip if no change
    146  f6d6		       c9 00		      cmp	#%00000000
    147  f6d8		       f0 7f		      beq	.spider_control_return
    148  f6da
    149  f6da		       a2 00		      ldx	#%00000000	; For reflection
    150  f6dc
    151  f6dc				   .spider_control_sprite_assign_left
    152  f6dc		       c9 80		      cmp	#%10000000
    153  f6de		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f6e0					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f6e0				   .POINTER   SET	SpiderPtr
      2  f6e0				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f6e0
      4  f6e0		       a9 cb		      LDA	#<.ADDRESS
      5  f6e2		       85 9c		      STA	.POINTER
      6  f6e4		       a9 f7		      LDA	#>.ADDRESS
      7  f6e6		       85 9d		      STA	.POINTER+1
      8  f6e8
    155  f6e8		       a2 08		      ldx	#%00001000
    156  f6ea		       4c 57 f7 	      jmp	.spider_control_reflect
    157  f6ed
    158  f6ed				   .spider_control_sprite_assign_right
    159  f6ed		       c9 40		      cmp	#%01000000
    160  f6ef		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f6f1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f6f1				   .POINTER   SET	SpiderPtr
      2  f6f1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f6f1
      4  f6f1		       a9 cb		      LDA	#<.ADDRESS
      5  f6f3		       85 9c		      STA	.POINTER
      6  f6f5		       a9 f7		      LDA	#>.ADDRESS
      7  f6f7		       85 9d		      STA	.POINTER+1
      8  f6f9
    162  f6f9		       4c 57 f7 	      jmp	.spider_control_reflect
    163  f6fc
    164  f6fc				   .spider_control_sprite_assign_top
    165  f6fc		       c9 20		      cmp	#%00100000
    166  f6fe		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f700					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f700				   .POINTER   SET	SpiderPtr
      2  f700				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f700
      4  f700		       a9 ab		      LDA	#<.ADDRESS
      5  f702		       85 9c		      STA	.POINTER
      6  f704		       a9 f7		      LDA	#>.ADDRESS
      7  f706		       85 9d		      STA	.POINTER+1
      8  f708
    168  f708		       4c 57 f7 	      jmp	.spider_control_reflect
    169  f70b
    170  f70b				   .spider_control_sprite_assign_bottom
    171  f70b		       c9 10		      cmp	#%00010000
    172  f70d		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f70f					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f70f				   .POINTER   SET	SpiderPtr
      2  f70f				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f70f
      4  f70f		       a9 eb		      LDA	#<.ADDRESS
      5  f711		       85 9c		      STA	.POINTER
      6  f713		       a9 f7		      LDA	#>.ADDRESS
      7  f715		       85 9d		      STA	.POINTER+1
      8  f717
    174  f717		       4c 57 f7 	      jmp	.spider_control_reflect
    175  f71a
    176  f71a				   .spider_control_sprite_assign_top_right
    177  f71a		       c9 60		      cmp	#%01100000
    178  f71c		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f71e					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f71e				   .POINTER   SET	SpiderPtr
      2  f71e				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f71e
      4  f71e		       a9 bb		      LDA	#<.ADDRESS
      5  f720		       85 9c		      STA	.POINTER
      6  f722		       a9 f7		      LDA	#>.ADDRESS
      7  f724		       85 9d		      STA	.POINTER+1
      8  f726
    180  f726		       4c 57 f7 	      jmp	.spider_control_reflect
    181  f729
    182  f729				   .spider_control_sprite_assign_bottom_right
    183  f729		       c9 50		      cmp	#%01010000
    184  f72b		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f72d					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f72d				   .POINTER   SET	SpiderPtr
      2  f72d				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f72d
      4  f72d		       a9 db		      LDA	#<.ADDRESS
      5  f72f		       85 9c		      STA	.POINTER
      6  f731		       a9 f7		      LDA	#>.ADDRESS
      7  f733		       85 9d		      STA	.POINTER+1
      8  f735
    186  f735		       4c 57 f7 	      jmp	.spider_control_reflect
    187  f738
    188  f738				   .spider_control_sprite_assign_bottom_left
    189  f738		       c9 90		      cmp	#%10010000
    190  f73a		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f73c					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f73c				   .POINTER   SET	SpiderPtr
      2  f73c				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f73c
      4  f73c		       a9 db		      LDA	#<.ADDRESS
      5  f73e		       85 9c		      STA	.POINTER
      6  f740		       a9 f7		      LDA	#>.ADDRESS
      7  f742		       85 9d		      STA	.POINTER+1
      8  f744
    192  f744		       a2 08		      ldx	#%00001000
    193  f746		       4c 57 f7 	      jmp	.spider_control_reflect
    194  f749
    195  f749				   .spider_control_sprite_assign_top_left
    196  f749		       c9 a0		      cmp	#%10100000
    197  f74b		       d0 0a		      bne	.spider_control_reflect
      0  f74d					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f74d				   .POINTER   SET	SpiderPtr
      2  f74d				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f74d
      4  f74d		       a9 bb		      LDA	#<.ADDRESS
      5  f74f		       85 9c		      STA	.POINTER
      6  f751		       a9 f7		      LDA	#>.ADDRESS
      7  f753		       85 9d		      STA	.POINTER+1
      8  f755
    199  f755		       a2 08		      ldx	#%00001000
    200  f757
    201  f757				   .spider_control_reflect
    202  f757		       86 0b		      stx	REFP0
    203  f759
    204  f759				   .spider_control_return
    205  f759		       60		      rts
    206  f75a
    207  f75a				   SpiderCollision
    208  f75a		       a9 56		      lda	#SPIDER_COLOR
    209  f75c
    210  f75c				   .spider_collision_m0
    211  f75c							; Check stun status
    212  f75c		       a6 b0		      ldx	BugStunned
    213  f75e		       e0 00		      cpx	#0
    214  f760		       d0 04		      bne	.spider_collision_m1
    215  f762
    216  f762							; Collision for M0 (V set)
    217  f762		       24 00		      bit	CXM0P
    218  f764		       70 0d		      bvs	.spider_collision_active
    219  f766
    220  f766				   .spider_collision_m1
    221  f766							; Check stun status
    222  f766		       a6 b1		      ldx	BugStunned+1
    223  f768		       e0 00		      cpx	#0
    224  f76a		       d0 09		      bne	.spider_collision_return
    225  f76c
    226  f76c							; Collision for M1 (N set)
    227  f76c		       24 01		      bit	CXM1P
    228  f76e		       30 03		      bmi	.spider_collision_active
    229  f770
    230  f770		       4c 75 f7 	      jmp	.spider_collision_return
    231  f773
    232  f773				   .spider_collision_active
    233  f773		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f775
    235  f775				   .spider_collision_return
    236  f775		       85 a1		      sta	SpiderColor
    237  f777		       60		      rts
    238  f778
    239  f778				   SpiderPosition
    240  f778
    241  f778							; Set Position
    242  f778		       a2 00		      ldx	#0	; Object (player0)
    243  f77a		       a5 9e		      lda	SpiderPos	; X Position
    244  f77c		       20 00 f0 	      jsr	PosObject
    245  f77f
    246  f77f		       60		      rts
    247  f780
    248  f780							; Scanline Draw
    249  f780
    250  f780				   SpiderDrawStart
    251  f780
    252  f780							; Set player 0 to be quad size
    253  f780		       a5 81		      lda	NuSiz0
    254  f782		       09 07		      ora	#%00000111
    255  f784		       85 81		      sta	NuSiz0
    256  f786		       85 04		      sta	NUSIZ0
    257  f788
    258  f788							; Set sprite color
    259  f788		       a5 a1		      lda	SpiderColor
    260  f78a		       85 06		      sta	COLUP0
    261  f78c
    262  f78c							; Determine if we need to use vertical delay (odd line)
    263  f78c		       a5 9f		      lda	SpiderPos+1	; Y Position
    264  f78e		       4a		      lsr
    265  f78f		       b0 05		      bcs	.spider_draw_start_nodelay
    266  f791
    267  f791		       a0 01		      ldy	#1
    268  f793		       4c 98 f7 	      jmp	.spider_draw_start_set_delay
    269  f796
    270  f796				   .spider_draw_start_nodelay
    271  f796		       a0 00		      ldy	#0
    272  f798
    273  f798				   .spider_draw_start_set_delay
    274  f798		       84 25		      sty	VDELP0
    275  f79a
    276  f79a				   .spider_draw_start_pos
    277  f79a							; Calculate starting position
    278  f79a		       18		      clc
    279  f79b		       69 20		      adc	#SPIDER_SIZE
    280  f79d		       85 a3		      sta	SpiderDrawPos
    281  f79f
    282  f79f							; Initialize sprite index and line buffer
    283  f79f		       a9 00		      lda	#0
    284  f7a1		       85 a2		      sta	SpiderIndex
    285  f7a3		       85 a4		      sta	SpiderLine
    286  f7a5
    287  f7a5		       60		      rts
    288  f7a6
    289  f7a6				   SpiderClean
    290  f7a6
    291  f7a6							; Clear out Player0 sprite
    292  f7a6		       a9 00		      lda	#0
    293  f7a8		       85 1b		      sta	GRP0
    294  f7aa
    295  f7aa		       60		      rts
    296  f7ab
    297  f7ab							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f7ab					      include	"objects/spider_sprite.asm"
      1  f7ab				   SpiderSprite
      2  f7ab
      3  f7ab		       99		      .BYTE.b	%10011001
      4  f7ac		       99		      .BYTE.b	%10011001
      5  f7ad		       bd		      .BYTE.b	%10111101
      6  f7ae		       bd		      .BYTE.b	%10111101
      7  f7af		       99		      .BYTE.b	%10011001
      8  f7b0		       99		      .BYTE.b	%10011001
      9  f7b1		       7e		      .BYTE.b	%01111110
     10  f7b2		       3c		      .BYTE.b	%00111100
     11  f7b3		       3c		      .BYTE.b	%00111100
     12  f7b4		       18		      .BYTE.b	%00011000
     13  f7b5		       3c		      .BYTE.b	%00111100
     14  f7b6		       7e		      .BYTE.b	%01111110
     15  f7b7		       bd		      .BYTE.b	%10111101
     16  f7b8		       bd		      .BYTE.b	%10111101
     17  f7b9		       bd		      .BYTE.b	%10111101
     18  f7ba		       99		      .BYTE.b	%10011001
     19  f7bb
     20  f7bb		       0b		      .BYTE.b	%00001011
     21  f7bc		       0b		      .BYTE.b	%00001011
     22  f7bd		       13		      .BYTE.b	%00010011
     23  f7be		       13		      .BYTE.b	%00010011
     24  f7bf		       1c		      .BYTE.b	%00011100
     25  f7c0		       1c		      .BYTE.b	%00011100
     26  f7c1		       3d		      .BYTE.b	%00111101
     27  f7c2		       3d		      .BYTE.b	%00111101
     28  f7c3		       7e		      .BYTE.b	%01111110
     29  f7c4		       fe		      .BYTE.b	%11111110
     30  f7c5		       b8		      .BYTE.b	%10111000
     31  f7c6		       b8		      .BYTE.b	%10111000
     32  f7c7		       10		      .BYTE.b	%00010000
     33  f7c8		       10		      .BYTE.b	%00010000
     34  f7c9		       30		      .BYTE.b	%00110000
     35  f7ca		       20		      .BYTE.b	%00100000
     36  f7cb
     37  f7cb		       c7		      .BYTE.b	%11000111
     38  f7cc		       c7		      .BYTE.b	%11000111
     39  f7cd		       28		      .BYTE.b	%00101000
     40  f7ce		       28		      .BYTE.b	%00101000
     41  f7cf		       3a		      .BYTE.b	%00111010
     42  f7d0		       7a		      .BYTE.b	%01111010
     43  f7d1		       fd		      .BYTE.b	%11111101
     44  f7d2		       ff		      .BYTE.b	%11111111
     45  f7d3		       ff		      .BYTE.b	%11111111
     46  f7d4		       fd		      .BYTE.b	%11111101
     47  f7d5		       7a		      .BYTE.b	%01111010
     48  f7d6		       3a		      .BYTE.b	%00111010
     49  f7d7		       28		      .BYTE.b	%00101000
     50  f7d8		       28		      .BYTE.b	%00101000
     51  f7d9		       c7		      .BYTE.b	%11000111
     52  f7da		       c7		      .BYTE.b	%11000111
     53  f7db
     54  f7db		       20		      .BYTE.b	%00100000
     55  f7dc		       30		      .BYTE.b	%00110000
     56  f7dd		       10		      .BYTE.b	%00010000
     57  f7de		       10		      .BYTE.b	%00010000
     58  f7df		       b8		      .BYTE.b	%10111000
     59  f7e0		       bc		      .BYTE.b	%10111100
     60  f7e1		       fc		      .BYTE.b	%11111100
     61  f7e2		       7e		      .BYTE.b	%01111110
     62  f7e3		       3f		      .BYTE.b	%00111111
     63  f7e4		       1d		      .BYTE.b	%00011101
     64  f7e5		       0c		      .BYTE.b	%00001100
     65  f7e6		       1c		      .BYTE.b	%00011100
     66  f7e7		       13		      .BYTE.b	%00010011
     67  f7e8		       13		      .BYTE.b	%00010011
     68  f7e9		       0b		      .BYTE.b	%00001011
     69  f7ea		       0b		      .BYTE.b	%00001011
     70  f7eb
     71  f7eb		       99		      .BYTE.b	%10011001
     72  f7ec		       bd		      .BYTE.b	%10111101
     73  f7ed		       bd		      .BYTE.b	%10111101
     74  f7ee		       bd		      .BYTE.b	%10111101
     75  f7ef		       7e		      .BYTE.b	%01111110
     76  f7f0		       3c		      .BYTE.b	%00111100
     77  f7f1		       18		      .BYTE.b	%00011000
     78  f7f2		       3c		      .BYTE.b	%00111100
     79  f7f3		       3c		      .BYTE.b	%00111100
     80  f7f4		       7e		      .BYTE.b	%01111110
     81  f7f5		       99		      .BYTE.b	%10011001
     82  f7f6		       99		      .BYTE.b	%10011001
     83  f7f7		       bd		      .BYTE.b	%10111101
     84  f7f8		       bd		      .BYTE.b	%10111101
     85  f7f9		       99		      .BYTE.b	%10011001
     86  f7fa		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f7fb					      include	"objects/line.asm"
      1  f7fb							;================
      2  f7fb							; Line (ball)
      3  f7fb							;================
      4  f7fb
      5  f7fb							; Constants
      6  f7fb
      7  f7fb		       00 04	   LINE_SIZE  =	4
      8  f7fb		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f7fb		       00 04	   LINE_VEL_X =	4
     10  f7fb		       00 04	   LINE_VEL_Y =	4
     11  f7fb
     12  f7fb		       00 08	   LINE_AUDIO_C =	8
     13  f7fb		       00 01	   LINE_AUDIO_F =	1
     14  f7fb		       00 04	   LINE_AUDIO_V =	4
     15  f7fb
     16  f7fb		       00 08	   LINE_SAMPLE_LEN =	8
     17  f7fb		       00 03	   LINE_SAMPLE_C =	3
     18  f7fb		       00 01	   LINE_SAMPLE_F =	1
     19  f7fb		       00 04	   LINE_SAMPLE_V =	4
     20  f7fb
     21  f7fb							; Initialization
     22  f7fb
     23  f7fb				   LineInit
     24  f7fb
     25  f7fb							; Initial Line Control
     26  f7fb		       a9 00		      lda	#0
     27  f7fd		       85 a7		      sta	LineEnabled
     28  f7ff		       85 a8		      sta	LinePos+0
     29  f801		       85 a9		      sta	LinePos+1
     30  f803		       85 aa		      sta	LineVelocity+0
     31  f805		       85 ab		      sta	LineVelocity+1
     32  f807		       85 ac		      sta	LineStartPos+0
     33  f809		       85 ad		      sta	LineStartPos+1
     34  f80b		       85 ae		      sta	LineDrawPos+0
     35  f80d		       85 af		      sta	LineDrawPos+1
     36  f80f
     37  f80f		       60		      rts
     38  f810
     39  f810							; Frame Update
     40  f810
     41  f810				   LineUpdate
     42  f810		       20 1a f8 	      jsr	LineControl
     43  f813		       20 cc f8 	      jsr	LineObject
     44  f816		       20 13 f9 	      jsr	LineCollision
     45  f819		       60		      rts
     46  f81a
     47  f81a				   LineControl
     48  f81a
     49  f81a							; Check if Fire Button on controller 1 is pressed
     50  f81a		       a5 0c		      lda	INPT4
     51  f81c		       30 0a		      bmi	.line_control_skip
     52  f81e
     53  f81e		       24 a7		      bit	LineEnabled
     54  f820		       30 06		      bmi	.line_control_skip
     55  f822
     56  f822		       a5 a0		      lda	SpiderCtrl
     57  f824		       c9 00		      cmp	#0
     58  f826		       d0 03		      bne	.line_control_fire
     59  f828
     60  f828				   .line_control_skip
     61  f828		       4c cb f8 	      jmp	.line_control_return
     62  f82b
     63  f82b				   .line_control_fire
     64  f82b		       20 5b f9 	      jsr	LineEnable
     65  f82e
     66  f82e				   .line_control_x
     67  f82e		       a5 a0		      lda	SpiderCtrl
     68  f830		       29 c0		      and	#%11000000
     69  f832		       f0 0e		      beq	.line_control_x_none
     70  f834				   .line_control_x_left
     71  f834		       c9 80		      cmp	#%10000000
     72  f836		       d0 05		      bne	.line_control_x_right
     73  f838
     74  f838		       a9 fc		      lda	#-LINE_VEL_X
     75  f83a		       4c 44 f8 	      jmp	.line_control_x_store
     76  f83d				   .line_control_x_right
     77  f83d		       a9 04		      lda	#LINE_VEL_X
     78  f83f		       4c 44 f8 	      jmp	.line_control_x_store
     79  f842				   .line_control_x_none
     80  f842		       a9 00		      lda	#0
     81  f844				   .line_control_x_store
     82  f844		       85 aa		      sta	LineVelocity
     83  f846
     84  f846				   .line_control_y
     85  f846		       a5 a0		      lda	SpiderCtrl
     86  f848		       29 30		      and	#%00110000
     87  f84a		       f0 0e		      beq	.line_control_y_none
     88  f84c				   .line_control_y_up
     89  f84c		       c9 20		      cmp	#%00100000
     90  f84e		       d0 05		      bne	.line_control_y_down
     91  f850
     92  f850		       a9 04		      lda	#LINE_VEL_Y
     93  f852		       4c 5c f8 	      jmp	.line_control_y_store
     94  f855				   .line_control_y_down
     95  f855		       a9 fc		      lda	#-LINE_VEL_Y
     96  f857		       4c 5c f8 	      jmp	.line_control_y_store
     97  f85a				   .line_control_y_none
     98  f85a		       a9 00		      lda	#0
     99  f85c				   .line_control_y_store
    100  f85c		       85 ab		      sta	LineVelocity+1
    101  f85e
    102  f85e				   .line_control_position
    103  f85e
    104  f85e		       a2 00		      ldx	#0	; offsetX
    105  f860		       a0 00		      ldy	#0	; offsetY
    106  f862
    107  f862		       a5 a0		      lda	SpiderCtrl
    108  f864		       29 f0		      and	#%11110000
    109  f866
    110  f866				   .line_control_position_left
    111  f866		       c9 80		      cmp	#%10000000
    112  f868		       d0 07		      bne	.line_control_position_right
    113  f86a
    114  f86a		       a2 04		      ldx	#LINE_SIZE
    115  f86c		       a0 20		      ldy	#SPIDER_SIZE
    116  f86e		       4c b3 f8 	      jmp	.line_control_position_store
    117  f871
    118  f871				   .line_control_position_right
    119  f871		       c9 40		      cmp	#%01000000
    120  f873		       d0 07		      bne	.line_control_position_top
    121  f875
    122  f875		       a2 40		      ldx	#SPIDER_SIZE*2
    123  f877		       a0 20		      ldy	#SPIDER_SIZE
    124  f879		       4c b3 f8 	      jmp	.line_control_position_store
    125  f87c
    126  f87c				   .line_control_position_top
    127  f87c		       c9 20		      cmp	#%00100000
    128  f87e		       d0 07		      bne	.line_control_position_bottom
    129  f880
    130  f880		       a2 20		      ldx	#SPIDER_SIZE
    131  f882		       a0 40		      ldy	#SPIDER_SIZE*2
    132  f884		       4c b3 f8 	      jmp	.line_control_position_store
    133  f887
    134  f887				   .line_control_position_bottom
    135  f887		       c9 10		      cmp	#%00010000
    136  f889		       d0 05		      bne	.line_control_position_top_right
    137  f88b
    138  f88b		       a2 20		      ldx	#SPIDER_SIZE
    139  f88d		       4c b3 f8 	      jmp	.line_control_position_store
    140  f890
    141  f890				   .line_control_position_top_right
    142  f890		       c9 60		      cmp	#%01100000
    143  f892		       d0 07		      bne	.line_control_position_bottom_right
    144  f894
    145  f894		       a2 40		      ldx	#SPIDER_SIZE*2
    146  f896		       a0 40		      ldy	#SPIDER_SIZE*2
    147  f898		       4c b3 f8 	      jmp	.line_control_position_store
    148  f89b
    149  f89b				   .line_control_position_bottom_right
    150  f89b		       c9 50		      cmp	#%01010000
    151  f89d		       d0 05		      bne	.line_control_position_bottom_left
    152  f89f
    153  f89f		       a2 40		      ldx	#SPIDER_SIZE*2
    154  f8a1		       4c b3 f8 	      jmp	.line_control_position_store
    155  f8a4
    156  f8a4				   .line_control_position_bottom_left
    157  f8a4		       c9 90		      cmp	#%10010000
    158  f8a6		       d0 03		      bne	.line_control_position_top_left
    159  f8a8
    160  f8a8							; No Offset
    161  f8a8		       4c b3 f8 	      jmp	.line_control_position_store
    162  f8ab
    163  f8ab				   .line_control_position_top_left
    164  f8ab		       c9 a0		      cmp	#%10100000
    165  f8ad		       d0 04		      bne	.line_control_position_store
    166  f8af
    167  f8af		       a2 04		      ldx	#LINE_SIZE
    168  f8b1		       a0 40		      ldy	#SPIDER_SIZE*2
    169  f8b3
    170  f8b3				   .line_control_position_store
    171  f8b3
    172  f8b3							; Apply offsetX to playerX
    173  f8b3		       a5 9e		      lda	SpiderPos
    174  f8b5		       86 83		      stx	Temp
    175  f8b7		       18		      clc
    176  f8b8		       65 83		      adc	Temp
    177  f8ba		       aa		      tax
    178  f8bb
    179  f8bb							; Apply offsetY to playerY
    180  f8bb		       a5 9f		      lda	SpiderPos+1
    181  f8bd		       84 83		      sty	Temp
    182  f8bf		       18		      clc
    183  f8c0		       65 83		      adc	Temp
    184  f8c2		       a8		      tay
    185  f8c3
    186  f8c3		       86 a8		      stx	LinePos
    187  f8c5		       84 a9		      sty	LinePos+1
    188  f8c7		       86 ac		      stx	LineStartPos
    189  f8c9		       84 ad		      sty	LineStartPos+1
    190  f8cb
    191  f8cb				   .line_control_return
    192  f8cb		       60		      rts
    193  f8cc
    194  f8cc				   LineObject
    195  f8cc
    196  f8cc							; Check if line is enabled
    197  f8cc		       24 a7		      bit	LineEnabled
    198  f8ce		       10 42		      bpl	.line_object_return
    199  f8d0
    200  f8d0							; Load position
    201  f8d0		       a6 a8		      ldx	LinePos
    202  f8d2		       a4 a9		      ldy	LinePos+1
    203  f8d4
    204  f8d4				   .line_object_distance
    205  f8d4
    206  f8d4							; Check distance from player with absolute value differences
    207  f8d4
    208  f8d4				   .line_object_distance_x
    209  f8d4		       8a		      txa
    210  f8d5		       18		      clc
    211  f8d6		       e5 ac		      sbc	LineStartPos
    212  f8d8		       b0 04		      bcs	.line_object_distance_x_check
    213  f8da		       49 ff		      eor	#$FF	; C flag is clear here
    214  f8dc		       69 01		      adc	#$01	; form two's complement
    215  f8de				   .line_object_distance_x_check		; Jumps to if positive
    216  f8de		       c9 40		      cmp	#LINE_DISTANCE
    217  f8e0		       b0 2d		      bcs	.line_object_disable
    218  f8e2
    219  f8e2				   .line_object_distance_y
    220  f8e2		       98		      tya
    221  f8e3		       18		      clc
    222  f8e4		       e5 ad		      sbc	LineStartPos+1
    223  f8e6		       b0 04		      bcs	.line_object_distance_y_check
    224  f8e8		       49 ff		      eor	#$FF	; C flag is clear here
    225  f8ea		       69 01		      adc	#$01	; form two's complement
    226  f8ec				   .line_object_distance_y_check		; Jumps to if positive
    227  f8ec		       c9 40		      cmp	#LINE_DISTANCE
    228  f8ee		       b0 1f		      bcs	.line_object_disable
    229  f8f0
    230  f8f0				   .line_object_boundary
    231  f8f0				   .line_object_boundary_left
    232  f8f0		       e0 04		      cpx	#LINE_VEL_X
    233  f8f2		       90 1b		      bcc	.line_object_disable
    234  f8f4				   .line_object_boundary_right
    235  f8f4		       e0 9c		      cpx	#160-LINE_VEL_X
    236  f8f6		       b0 17		      bcs	.line_object_disable
    237  f8f8				   .line_object_boundary_bottom
    238  f8f8		       c0 04		      cpy	#LINE_VEL_Y
    239  f8fa		       90 13		      bcc	.line_object_disable
    240  f8fc				   .line_object_boundary_top
    241  f8fc		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    242  f8fe		       b0 0f		      bcs	.line_object_disable
    243  f900
    244  f900				   .line_object_velocity
    245  f900
    246  f900							; Apply Velocity
    247  f900		       8a		      txa
    248  f901		       18		      clc
    249  f902		       65 aa		      adc	LineVelocity
    250  f904		       85 a8		      sta	LinePos
    251  f906
    252  f906		       98		      tya
    253  f907		       18		      clc
    254  f908		       65 ab		      adc	LineVelocity+1
    255  f90a		       85 a9		      sta	LinePos+1
    256  f90c
    257  f90c		       4c 12 f9 	      jmp	.line_object_return
    258  f90f
    259  f90f				   .line_object_disable
    260  f90f		       20 69 f9 	      jsr	LineDisable
    261  f912
    262  f912				   .line_object_return
    263  f912		       60		      rts
    264  f913
    265  f913				   LineCollision
    266  f913
    267  f913		       a9 78		      lda	#BUG_STUN_LENGTH
    268  f915
    269  f915				   .line_collision_m0
    270  f915		       24 04		      bit	CXM0FB
    271  f917		       50 08		      bvc	.line_collision_m1
    272  f919
    273  f919							; Set stun timer
    274  f919		       85 b0		      sta	BugStunned+0
    275  f91b
    276  f91b							; Disable line
    277  f91b		       20 69 f9 	      jsr	LineDisable
    278  f91e		       4c 2a f9 	      jmp	.line_collision_sample
    279  f921
    280  f921				   .line_collision_m1
    281  f921		       24 05		      bit	CXM1FB
    282  f923		       50 08		      bvc	.line_collision_return
    283  f925
    284  f925							; Set stun timer
    285  f925		       85 b1		      sta	BugStunned+1
    286  f927
    287  f927							; Disable line
    288  f927		       20 69 f9 	      jsr	LineDisable
    289  f92a
    290  f92a				   .line_collision_sample
    291  f92a		       20 8d f9 	      jsr	LineSample
    292  f92d
    293  f92d				   .line_collision_return
    294  f92d		       60		      rts
    295  f92e
    296  f92e				   LinePosition
    297  f92e
    298  f92e							; Set Line Position
    299  f92e		       a2 04		      ldx	#4	; Object (ball)
    300  f930		       a5 a8		      lda	LinePos	; X Position
    301  f932		       20 00 f0 	      jsr	PosObject
    302  f935
    303  f935		       60		      rts
    304  f936
    305  f936							; Scanline Draw
    306  f936
    307  f936				   LineDrawStart
    308  f936
    309  f936							; Set ball size to be 4 clocks (4/5 bits)
    310  f936		       a5 80		      lda	CtrlPf
    311  f938		       29 cf		      and	#%11001111
    312  f93a		       09 20		      ora	#%00100000
    313  f93c		       85 80		      sta	CtrlPf
    314  f93e		       85 0a		      sta	CTRLPF
    315  f940
    316  f940							; Determine if we need to use vertical delay (oven line)
    317  f940		       a5 a9		      lda	LinePos+1
    318  f942		       4a		      lsr
    319  f943		       90 05		      bcc	.line_draw_start_nodelay
    320  f945
    321  f945		       a0 01		      ldy	#1
    322  f947		       4c 4c f9 	      jmp	.line_draw_start_set_delay
    323  f94a
    324  f94a				   .line_draw_start_nodelay
    325  f94a		       a0 00		      ldy	#0
    326  f94c
    327  f94c				   .line_draw_start_set_delay
    328  f94c		       84 27		      sty	VDELBL
    329  f94e
    330  f94e				   .line_draw_start_pos
    331  f94e							; Calculate starting position
    332  f94e		       18		      clc
    333  f94f		       85 ae		      sta	LineDrawPos+0
    334  f951		       69 02		      adc	#LINE_SIZE/2
    335  f953		       85 af		      sta	LineDrawPos+1
    336  f955
    337  f955		       60		      rts
    338  f956
    339  f956				   LineClean
    340  f956
    341  f956							; Clear out Line
    342  f956		       a9 00		      lda	#0
    343  f958		       85 1f		      sta	ENABL
    344  f95a
    345  f95a		       60		      rts
    346  f95b
    347  f95b				   LineEnable
    348  f95b		       a9 80		      lda	#%10000000
    349  f95d		       85 a7		      sta	LineEnabled
    350  f95f
    351  f95f		       a5 91		      lda	SampleStep
    352  f961		       c9 00		      cmp	#0
    353  f963		       d0 03		      bne	.line_enable_return
    354  f965
    355  f965		       20 77 f9 	      jsr	LineAudioPlay
    356  f968
    357  f968				   .line_enable_return
    358  f968		       60		      rts
    359  f969
    360  f969				   LineDisable
    361  f969		       a9 00		      lda	#0
    362  f96b		       85 a7		      sta	LineEnabled
    363  f96d
    364  f96d		       a5 91		      lda	SampleStep
    365  f96f		       c9 00		      cmp	#0
    366  f971		       d0 03		      bne	.line_disable_return
    367  f973
    368  f973		       20 84 f9 	      jsr	LineAudioMute
    369  f976
    370  f976				   .line_disable_return
    371  f976		       60		      rts
    372  f977
    373  f977				   LineAudioPlay
    374  f977		       a9 08		      lda	#LINE_AUDIO_C
    375  f979		       85 16		      sta	AUDC1
    376  f97b		       a9 01		      lda	#LINE_AUDIO_F
    377  f97d		       85 18		      sta	AUDF1
    378  f97f		       a9 04		      lda	#LINE_AUDIO_V
    379  f981		       85 1a		      sta	AUDV1
    380  f983		       60		      rts
    381  f984
    382  f984				   LineAudioMute
    383  f984		       a9 00		      lda	#0
    384  f986		       85 1a		      sta	AUDV1
    385  f988		       85 18		      sta	AUDF1
    386  f98a		       85 16		      sta	AUDC1
    387  f98c		       60		      rts
    388  f98d
    389  f98d				   LineSample
    390  f98d		       a9 08		      lda	#LINE_SAMPLE_LEN
    391  f98f		       85 91		      sta	SampleStep
    392  f991		       a9 03		      lda	#LINE_SAMPLE_C
    393  f993		       85 16		      sta	AUDC1
    394  f995		       a9 01		      lda	#LINE_SAMPLE_F
    395  f997		       85 18		      sta	AUDF1
    396  f999		       a9 04		      lda	#LINE_SAMPLE_V
    397  f99b		       85 1a		      sta	AUDV1
    398  f99d		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f99e					      include	"objects/bug.asm"
      1  f99e							;======================
      2  f99e							; Bugs (missiles 0 & 1)
      3  f99e							;======================
      4  f99e
      5  f99e							; Constants
      6  f99e
      7  f99e		       00 08	   BUG_SIZE   =	8
      8  f99e		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f99e		       00 02	   BUG_SPEED  =	2
     10  f99e		       00 78	   BUG_STUN_LENGTH =	120
     11  f99e		       00 04	   BUG_POINTS =	4
     12  f99e
     13  f99e		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f99e		       00 38	   BUG_COLOR_STUN =	#$38
     15  f99e
     16  f99e		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f99e		       00 03	   BUG_SAMPLE_C =	3
     18  f99e		       00 14	   BUG_SAMPLE_F =	20
     19  f99e		       00 04	   BUG_SAMPLE_V =	4
     20  f99e
     21  f99e		       00 01	   BUG_COL_SAMPLE_LEN =	1
     22  f99e		       00 08	   BUG_COL_SAMPLE_C =	8
     23  f99e		       00 08	   BUG_COL_SAMPLE_F =	8
     24  f99e		       00 03	   BUG_COL_SAMPLE_V =	3
     25  f99e
     26  f99e							; Initialization
     27  f99e
     28  f99e				   BugInit
     29  f99e
     30  f99e							; Initialize Bugs
     31  f99e		       a2 01		      ldx	#1
     32  f9a0
     33  f9a0				   .bug_init_loop
     34  f9a0		       20 a7 f9 	      jsr	BugReset
     35  f9a3
     36  f9a3		       ca		      dex
     37  f9a4		       10 fa		      bpl	.bug_init_loop
     38  f9a6
     39  f9a6		       60		      rts
     40  f9a7
     41  f9a7				   BugReset		; x = bug (0 or 1)
     42  f9a7
     43  f9a7							; Set random position
     44  f9a7		       20 13 f0 	      jsr	Random
     45  f9aa
     46  f9aa		       a5 85		      lda	Rand8
     47  f9ac		       29 7f		      and	#$7f
     48  f9ae		       95 b2		      sta	BugPosX,x
     49  f9b0
     50  f9b0		       a5 86		      lda	Rand16
     51  f9b2		       29 7f		      and	#$7f
     52  f9b4		       95 b4		      sta	BugPosY,x
     53  f9b6
     54  f9b6							; Set as active
     55  f9b6		       a9 00		      lda	#0
     56  f9b8		       95 b0		      sta	BugStunned,x
     57  f9ba
     58  f9ba							; Reset Color
     59  f9ba		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     60  f9bc		       95 b6		      sta	BugColor,x
     61  f9be
     62  f9be		       60		      rts
     63  f9bf
     64  f9bf							; Frame Update
     65  f9bf
     66  f9bf				   BugUpdate
     67  f9bf
     68  f9bf		       a2 01		      ldx	#1
     69  f9c1				   .bug_update_loop
     70  f9c1		       86 83		      stx	Temp+0
     71  f9c3
     72  f9c3		       b5 b0		      lda	BugStunned,x
     73  f9c5		       c9 00		      cmp	#0
     74  f9c7		       f0 08		      beq	.bug_update_active
     75  f9c9
     76  f9c9				   .bug_update_stunned
     77  f9c9		       d6 b0		      dec	BugStunned,x
     78  f9cb		       20 4a fa 	      jsr	BugStunCollision
     79  f9ce		       4c d7 f9 	      jmp	.bug_update_next
     80  f9d1
     81  f9d1				   .bug_update_active
     82  f9d1		       20 dd f9 	      jsr	BugMovement
     83  f9d4		       20 30 fa 	      jsr	BugCollision
     84  f9d7
     85  f9d7				   .bug_update_next
     86  f9d7		       a6 83		      ldx	Temp+0
     87  f9d9		       ca		      dex
     88  f9da		       10 e5		      bpl	.bug_update_loop
     89  f9dc
     90  f9dc		       60		      rts
     91  f9dd
     92  f9dd				   BugMovement
     93  f9dd
     94  f9dd				   .bug_movement_random
     95  f9dd		       20 13 f0 	      jsr	Random
     96  f9e0		       29 03		      and	#%00000011
     97  f9e2		       85 84		      sta	Temp+1
     98  f9e4
     99  f9e4				   .bug_movement_load
    100  f9e4							; Load x and y values
    101  f9e4		       a6 83		      ldx	Temp+0
    102  f9e6		       b5 b2		      lda	BugPosX,x
    103  f9e8		       b4 b4		      ldy	BugPosY,x
    104  f9ea		       aa		      tax
    105  f9eb
    106  f9eb				   .bug_movement_x
    107  f9eb							; Alter X Position
    108  f9eb		       a5 84		      lda	Temp+1
    109  f9ed		       29 01		      and	#%00000001
    110  f9ef
    111  f9ef				   .bug_movement_x_left
    112  f9ef		       c9 01		      cmp	#1
    113  f9f1		       d0 05		      bne	.bug_movement_x_right
    114  f9f3					      REPEAT	#BUG_SPEED
    115  f9f3		       ca		      dex
    114  f9f3					      REPEND
    115  f9f4		       ca		      dex
    116  f9f5					      REPEND
    117  f9f5		       4c fa f9 	      jmp	.bug_movement_y
    118  f9f8
    119  f9f8				   .bug_movement_x_right
    120  f9f8					      REPEAT	#BUG_SPEED
    121  f9f8		       e8		      inx
    120  f9f8					      REPEND
    121  f9f9		       e8		      inx
    122  f9fa					      REPEND
    123  f9fa
    124  f9fa				   .bug_movement_y
    125  f9fa							; Alter Y Position
    126  f9fa		       a5 84		      lda	Temp+1
    127  f9fc		       29 02		      and	#%00000010
    128  f9fe		       4a		      lsr
    129  f9ff
    130  f9ff				   .bug_movement_y_up
    131  f9ff		       c9 01		      cmp	#1
    132  fa01		       d0 05		      bne	.bug_movement_y_down
    133  fa03					      REPEAT	#BUG_SPEED
    134  fa03		       c8		      iny
    133  fa03					      REPEND
    134  fa04		       c8		      iny
    135  fa05					      REPEND
    136  fa05		       4c 0a fa 	      jmp	.bug_movement_boundary
    137  fa08
    138  fa08				   .bug_movement_y_down
    139  fa08					      REPEAT	#BUG_SPEED
    140  fa08		       88		      dey
    139  fa08					      REPEND
    140  fa09		       88		      dey
    141  fa0a					      REPEND
    142  fa0a
    143  fa0a				   .bug_movement_boundary
    144  fa0a
    145  fa0a				   .bug_movement_boundary_left
    146  fa0a		       e0 08		      cpx	#BUG_BOUNDARY
    147  fa0c		       b0 05		      bcs	.bug_movement_boundary_right
    148  fa0e		       a2 08		      ldx	#BUG_BOUNDARY
    149  fa10		       4c 19 fa 	      jmp	.bug_movement_boundary_top
    150  fa13
    151  fa13				   .bug_movement_boundary_right
    152  fa13		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    153  fa15		       90 02		      bcc	.bug_movement_boundary_top
    154  fa17		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    155  fa19
    156  fa19				   .bug_movement_boundary_top
    157  fa19		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    158  fa1b		       b0 05		      bcs	.bug_movement_boundary_bottom
    159  fa1d		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    160  fa1f		       4c 28 fa 	      jmp	.bug_movement_store
    161  fa22
    162  fa22				   .bug_movement_boundary_bottom
    163  fa22		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    164  fa24		       90 02		      bcc	.bug_movement_store
    165  fa26		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    166  fa28
    167  fa28				   .bug_movement_store
    168  fa28		       8a		      txa
    169  fa29		       a6 83		      ldx	Temp+0
    170  fa2b		       95 b2		      sta	BugPosX,x
    171  fa2d		       94 b4		      sty	BugPosY,x
    172  fa2f
    173  fa2f				   .bug_movement_return
    174  fa2f		       60		      rts
    175  fa30
    176  fa30				   BugCollision
    177  fa30
    178  fa30		       e0 01		      cpx	#1
    179  fa32		       f0 05		      beq	.bug_collision_m1
    180  fa34
    181  fa34				   .bug_collision_m0
    182  fa34							; Collision for M0 (V set)
    183  fa34		       24 00		      bit	CXM0P
    184  fa36		       70 06		      bvs	.bug_collision_active
    185  fa38		       60		      rts
    186  fa39
    187  fa39				   .bug_collision_m1
    188  fa39							; Collision for M1 (N set)
    189  fa39		       24 01		      bit	CXM1P
    190  fa3b		       30 01		      bmi	.bug_collision_active
    191  fa3d		       60		      rts
    192  fa3e
    193  fa3e				   .bug_collision_active
    194  fa3e
    195  fa3e							; Reduce players score
    196  fa3e		       a5 92		      lda	ScoreValue
    197  fa40		       c9 00		      cmp	#0
    198  fa42		       f0 02		      beq	.bug_collision_score_skip
    199  fa44		       c6 92		      dec	ScoreValue
    200  fa46				   .bug_collision_score_skip
    201  fa46
    202  fa46							; Play sound
    203  fa46		       20 c7 fa 	      jsr	BugColSample
    204  fa49
    205  fa49		       60		      rts
    206  fa4a
    207  fa4a				   BugStunCollision
    208  fa4a
    209  fa4a		       e0 01		      cpx	#1
    210  fa4c		       f0 05		      beq	.bug_stun_collision_m1
    211  fa4e
    212  fa4e				   .bug_stun_collision_m0
    213  fa4e							; Collision for M0 (V set)
    214  fa4e		       24 00		      bit	CXM0P
    215  fa50		       70 06		      bvs	.bug_stun_collision_active
    216  fa52		       60		      rts
    217  fa53
    218  fa53				   .bug_stun_collision_m1
    219  fa53							; Collision for M1 (N set)
    220  fa53		       24 01		      bit	CXM1P
    221  fa55		       30 01		      bmi	.bug_stun_collision_active
    222  fa57		       60		      rts
    223  fa58
    224  fa58				   .bug_stun_collision_active
    225  fa58							; Add points to score
    226  fa58		       18		      clc
    227  fa59		       a5 93		      lda	ScoreValue+1
    228  fa5b		       69 04		      adc	#BUG_POINTS
    229  fa5d		       85 93		      sta	ScoreValue+1
    230  fa5f
    231  fa5f							; Reset bug
    232  fa5f		       20 a7 f9 	      jsr	BugReset
    233  fa62
    234  fa62							; Play sample
    235  fa62		       20 b6 fa 	      jsr	BugSample
    236  fa65
    237  fa65		       60		      rts
    238  fa66
    239  fa66							; Horizontal Positioning
    240  fa66
    241  fa66				   BugPosition
    242  fa66
    243  fa66		       a2 02		      ldx	#2
    244  fa68		       a5 b2		      lda	BugPosX+0
    245  fa6a		       20 00 f0 	      jsr	PosObject
    246  fa6d
    247  fa6d		       a2 03		      ldx	#3
    248  fa6f		       a5 b3		      lda	BugPosX+1
    249  fa71		       20 00 f0 	      jsr	PosObject
    250  fa74
    251  fa74		       60		      rts
    252  fa75
    253  fa75							; Scanline Draw
    254  fa75
    255  fa75				   BugDrawStart
    256  fa75
    257  fa75		       a0 01		      ldy	#1
    258  fa77				   .bug_draw_start_loop
    259  fa77
    260  fa77							; Set missile 0 & 1 to be 8 clock size
    261  fa77		       b9 81 00 	      lda	NuSiz0,y
    262  fa7a		       09 30		      ora	#%00110000
    263  fa7c		       99 81 00 	      sta	NuSiz0,y
    264  fa7f		       99 04 00 	      sta	NUSIZ0,y
    265  fa82
    266  fa82							; Setup half scanline positions
    267  fa82		       b9 b4 00 	      lda	BugPosY,y
    268  fa85		       4a		      lsr
    269  fa86		       99 b8 00 	      sta	BugDrawPosBottom,y
    270  fa89
    271  fa89		       69 04		      adc	#BUG_SIZE/2
    272  fa8b		       99 ba 00 	      sta	BugDrawPosTop,y
    273  fa8e
    274  fa8e		       88		      dey
    275  fa8f		       10 e6		      bpl	.bug_draw_start_loop
    276  fa91
    277  fa91		       60		      rts
    278  fa92
    279  fa92				   BugDraw
    280  fa92
    281  fa92							; Load half scanline
    282  fa92							;    lda Temp+1
    283  fa92
    284  fa92				   .bug_draw_0
    285  fa92		       a0 00		      ldy	#%00000000
    286  fa94
    287  fa94							; Check top and bottom y pos
    288  fa94		       c5 ba		      cmp	BugDrawPosTop+0
    289  fa96		       b0 06		      bcs	.bug_draw_0_off
    290  fa98
    291  fa98		       c5 b8		      cmp	BugDrawPosBottom+0
    292  fa9a		       90 02		      bcc	.bug_draw_0_off
    293  fa9c
    294  fa9c				   .bug_draw_0_on
    295  fa9c		       a0 02		      ldy	#%00000010
    296  fa9e
    297  fa9e				   .bug_draw_0_off
    298  fa9e		       84 1d		      sty	ENAM0
    299  faa0
    300  faa0				   .bug_draw_1
    301  faa0		       a0 00		      ldy	#%00000000
    302  faa2
    303  faa2							; Check top and bottom y pos
    304  faa2		       c5 bb		      cmp	BugDrawPosTop+1
    305  faa4		       b0 06		      bcs	.bug_draw_1_off
    306  faa6
    307  faa6		       c5 b9		      cmp	BugDrawPosBottom+1
    308  faa8		       90 02		      bcc	.bug_draw_1_off
    309  faaa
    310  faaa				   .bug_draw_1_on
    311  faaa		       a0 02		      ldy	#%00000010
    312  faac
    313  faac				   .bug_draw_1_off
    314  faac		       84 1e		      sty	ENAM1
    315  faae
    316  faae				   .bug_draw_return
    317  faae		       60		      rts
    318  faaf
    319  faaf				   BugClean
    320  faaf		       a9 00		      lda	#0
    321  fab1		       85 1d		      sta	ENAM0
    322  fab3		       85 1e		      sta	ENAM1
    323  fab5		       60		      rts
    324  fab6
    325  fab6				   BugSample
    326  fab6		       a9 1e		      lda	#BUG_SAMPLE_LEN
    327  fab8		       85 91		      sta	SampleStep
    328  faba		       a9 03		      lda	#BUG_SAMPLE_C
    329  fabc		       85 16		      sta	AUDC1
    330  fabe		       a9 14		      lda	#BUG_SAMPLE_F
    331  fac0		       85 18		      sta	AUDF1
    332  fac2		       a9 04		      lda	#BUG_SAMPLE_V
    333  fac4		       85 1a		      sta	AUDV1
    334  fac6		       60		      rts
    335  fac7
    336  fac7				   BugColSample
    337  fac7		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    338  fac9		       85 91		      sta	SampleStep
    339  facb		       a9 08		      lda	#BUG_COL_SAMPLE_C
    340  facd		       85 16		      sta	AUDC1
    341  facf		       a9 08		      lda	#BUG_COL_SAMPLE_F
    342  fad1		       85 18		      sta	AUDF1
    343  fad3		       a9 03		      lda	#BUG_COL_SAMPLE_V
    344  fad5		       85 1a		      sta	AUDV1
    345  fad7		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fad8					      include	"objects/swatter.asm"
      1  fad8							;==================
      2  fad8							; Swatter (player1)
      3  fad8							;==================
      4  fad8
      5  fad8							; Constants
      6  fad8
      7  fad8		       00 36	   SWATTER_COLOR =	#$36
      8  fad8		       00 30	   SWATTER_HOLD_COLOR =	#$30
      9  fad8		       00 14	   SWATTER_SPRITE_SIZE =	#20
     10  fad8		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     11  fad8
     12  fad8		       00 b4	   SWATTER_WAIT_TIME =	60*3	; 60 frames per second
     13  fad8		       00 3c	   SWATTER_HOLD_TIME =	60
     14  fad8		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     15  fad8
     16  fad8		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     17  fad8		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     18  fad8		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     19  fad8
     20  fad8		       00 10	   SWATTER_HIT_DAMAGE =	#$10
     21  fad8
     22  fad8		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fad8		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fad8		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fad8		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fad8		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fad8
     28  fad8		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fad8		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fad8		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fad8		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fad8
     33  fad8		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fad8		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fad8		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fad8		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fad8
     38  fad8							; Initialization
     39  fad8
     40  fad8				   SwatterInit
     41  fad8
     42  fad8		       20 c9 fb 	      jsr	SwatterReset
     43  fadb
     44  fadb		       60		      rts
     45  fadc
     46  fadc							; Frame Update
     47  fadc
     48  fadc				   SwatterUpdate
     49  fadc
     50  fadc				   .swatter_update_color
     51  fadc		       a5 be		      lda	SwatterState
     52  fade		       c9 80		      cmp	#SWATTER_STATE_HOLD
     53  fae0		       d0 05		      bne	.swatter_update_color_active
     54  fae2				   .swatter_update_color_hold
     55  fae2		       a9 30		      lda	#SWATTER_HOLD_COLOR
     56  fae4		       4c e9 fa 	      jmp	.swatter_update_color_set
     57  fae7				   .swatter_update_color_active
     58  fae7		       a9 36		      lda	#SWATTER_COLOR
     59  fae9				   .swatter_update_color_set
     60  fae9		       85 bf		      sta	SwatterColor
     61  faeb
     62  faeb				   .swatter_update_hold_sample
     63  faeb		       a4 be		      ldy	SwatterState
     64  faed		       c0 80		      cpy	#SWATTER_STATE_HOLD
     65  faef		       d0 0f		      bne	.swatter_update_state
     66  faf1
     67  faf1		       c6 c3		      dec	SwatterSampleCount
     68  faf3		       d0 0b		      bne	.swatter_update_state
     69  faf5
     70  faf5		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     71  faf7		       85 c3		      sta	SwatterSampleCount
     72  faf9
     73  faf9		       c6 c4		      dec	SwatterSampleF
     74  fafb		       a4 c4		      ldy	SwatterSampleF
     75  fafd		       20 e9 fb 	      jsr	SwatterHoldSample
     76  fb00
     77  fb00				   .swatter_update_state
     78  fb00		       a6 8f		      ldx	FrameTimer+1
     79  fb02		       e0 00		      cpx	#0
     80  fb04		       d0 2d		      bne	.swatter_update_collision
     81  fb06
     82  fb06		       a4 be		      ldy	SwatterState
     83  fb08		       c0 00		      cpy	#SWATTER_STATE_WAIT
     84  fb0a		       f0 0a		      beq	.swatter_update_state_wait
     85  fb0c
     86  fb0c		       c0 80		      cpy	#SWATTER_STATE_HOLD
     87  fb0e		       f0 18		      beq	.swatter_update_state_hold
     88  fb10
     89  fb10							; Else we're at the end of the active state
     90  fb10		       20 c9 fb 	      jsr	SwatterReset
     91  fb13		       4c 42 fb 	      jmp	.swatter_update_return
     92  fb16
     93  fb16				   .swatter_update_state_wait
     94  fb16		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
     95  fb18		       84 c4		      sty	SwatterSampleF
     96  fb1a		       20 e9 fb 	      jsr	SwatterHoldSample
     97  fb1d
     98  fb1d		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     99  fb1f		       85 c3		      sta	SwatterSampleCount
    100  fb21
    101  fb21		       a9 80		      lda	#SWATTER_STATE_HOLD
    102  fb23		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    103  fb25		       4c 2f fb 	      jmp	.swatter_update_state_set
    104  fb28
    105  fb28				   .swatter_update_state_hold
    106  fb28		       20 f8 fb 	      jsr	SwatterActiveSample
    107  fb2b
    108  fb2b		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    109  fb2d		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    110  fb2f
    111  fb2f				   .swatter_update_state_set
    112  fb2f		       85 be		      sta	SwatterState
    113  fb31		       86 8f		      stx	FrameTimer+1
    114  fb33
    115  fb33				   .swatter_update_collision
    116  fb33							; Check 1 frame after active
    117  fb33		       a5 be		      lda	SwatterState
    118  fb35		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    119  fb37		       d0 09		      bne	.swatter_update_return
    120  fb39		       a6 8f		      ldx	FrameTimer+1
    121  fb3b		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    122  fb3d		       d0 03		      bne	.swatter_update_return
    123  fb3f
    124  fb3f		       20 43 fb 	      jsr	SwatterCollision
    125  fb42
    126  fb42				   .swatter_update_return
    127  fb42		       60		      rts
    128  fb43
    129  fb43				   SwatterCollision
    130  fb43		       24 00		      bit	CXM0P
    131  fb45		       30 09		      bmi	.swatter_collision_m0
    132  fb47
    133  fb47		       24 01		      bit	CXM1P
    134  fb49		       70 0a		      bvs	.swatter_collision_m1
    135  fb4b
    136  fb4b		       24 07		      bit	CXPPMM
    137  fb4d		       30 0e		      bmi	.swatter_collision_p0
    138  fb4f
    139  fb4f		       60		      rts
    140  fb50
    141  fb50				   .swatter_collision_m0
    142  fb50		       a2 00		      ldx	#0
    143  fb52		       4c 57 fb 	      jmp	.swatter_collision_bug_reset
    144  fb55
    145  fb55				   .swatter_collision_m1
    146  fb55		       a2 01		      ldx	#1
    147  fb57
    148  fb57				   .swatter_collision_bug_reset
    149  fb57		       20 a7 f9 	      jsr	BugReset
    150  fb5a		       4c 6f fb 	      jmp	.swatter_collision_active
    151  fb5d
    152  fb5d				   .swatter_collision_p0
    153  fb5d
    154  fb5d		       a5 92		      lda	ScoreValue
    155  fb5f		       c9 10		      cmp	#SWATTER_HIT_DAMAGE
    156  fb61		       90 08		      bcc	.swatter_collision_p0_zero
    157  fb63		       f0 06		      beq	.swatter_collision_p0_zero
    158  fb65
    159  fb65		       18		      clc
    160  fb66		       e9 10		      sbc	#SWATTER_HIT_DAMAGE
    161  fb68		       4c 6d fb 	      jmp	.swatter_collision_p0_set
    162  fb6b
    163  fb6b				   .swatter_collision_p0_zero
    164  fb6b		       a9 00		      lda	#0
    165  fb6d
    166  fb6d				   .swatter_collision_p0_set
    167  fb6d		       85 92		      sta	ScoreValue
    168  fb6f
    169  fb6f				   .swatter_collision_active
    170  fb6f		       20 09 fc 	      jsr	SwatterHitSample
    171  fb72
    172  fb72		       60		      rts
    173  fb73
    174  fb73				   SwatterPosition
    175  fb73
    176  fb73							; Set Position
    177  fb73		       a2 01		      ldx	#1	; Object (player1)
    178  fb75		       a5 bc		      lda	SwatterPos	; X Position
    179  fb77		       20 00 f0 	      jsr	PosObject
    180  fb7a
    181  fb7a		       60		      rts
    182  fb7b
    183  fb7b							; Scanline Draw
    184  fb7b
    185  fb7b				   SwatterDrawStart
    186  fb7b
    187  fb7b							; Set player 1 to be quad size
    188  fb7b		       a5 82		      lda	NuSiz1
    189  fb7d		       29 f8		      and	#%11111000
    190  fb7f		       09 07		      ora	#%00000111
    191  fb81		       85 82		      sta	NuSiz1
    192  fb83		       85 05		      sta	NUSIZ1
    193  fb85
    194  fb85							; Set sprite color
    195  fb85		       a5 bf		      lda	SwatterColor
    196  fb87		       85 07		      sta	COLUP1
    197  fb89
    198  fb89							; Note: Doesn't need vertical delay
    199  fb89
    200  fb89							; Calculate starting position
    201  fb89		       a5 bd		      lda	SwatterPos+1	; Y Position
    202  fb8b		       4a		      lsr
    203  fb8c		       18		      clc
    204  fb8d		       69 14		      adc	#SWATTER_SPRITE_SIZE
    205  fb8f		       85 c1		      sta	SwatterDrawPos
    206  fb91
    207  fb91							; Initialize sprite index
    208  fb91		       a9 00		      lda	#0
    209  fb93		       85 c0		      sta	SwatterIndex
    210  fb95		       85 c2		      sta	SwatterLine
    211  fb97
    212  fb97		       60		      rts
    213  fb98
    214  fb98				   SwatterDraw
    215  fb98
    216  fb98		       a5 be		      lda	SwatterState
    217  fb9a		       c9 00		      cmp	#SWATTER_STATE_WAIT
    218  fb9c		       f0 25		      beq	.swatter_draw_return
    219  fb9e
    220  fb9e		       a4 c0		      ldy	SwatterIndex
    221  fba0		       c0 14		      cpy	#SWATTER_SPRITE_SIZE
    222  fba2		       f0 1c		      beq	.swatter_draw_blank	; At end of sprite
    223  fba4		       b0 1d		      bcs	.swatter_draw_return	; Completed drawing sprite
    224  fba6		       c0 00		      cpy	#0
    225  fba8		       d0 06		      bne	.swatter_draw_line
    226  fbaa
    227  fbaa							; Use half scanline
    228  fbaa		       a5 84		      lda	Temp+1
    229  fbac
    230  fbac		       e5 c1		      sbc	SwatterDrawPos
    231  fbae		       10 13		      bpl	.swatter_draw_return	; Not yet to draw sprite
    232  fbb0
    233  fbb0				   .swatter_draw_line
    234  fbb0		       98		      tya
    235  fbb1		       4a		      lsr
    236  fbb2		       b0 06		      bcs	.swatter_draw_skip
    237  fbb4		       a8		      tay
    238  fbb5
    239  fbb5		       b9 1a fc 	      lda	SwatterSprite,y
    240  fbb8		       85 1c		      sta	GRP1
    241  fbba
    242  fbba				   .swatter_draw_skip
    243  fbba		       a4 c0		      ldy	SwatterIndex
    244  fbbc		       c8		      iny
    245  fbbd		       84 c0		      sty	SwatterIndex
    246  fbbf		       60		      rts		; Early return
    247  fbc0
    248  fbc0				   .swatter_draw_blank
    249  fbc0							;    lda #0
    250  fbc0							;    sta GRP1
    251  fbc0
    252  fbc0							; Push index to be one above
    253  fbc0		       c8		      iny
    254  fbc1		       84 c0		      sty	SwatterIndex
    255  fbc3
    256  fbc3				   .swatter_draw_return
    257  fbc3		       60		      rts
    258  fbc4
    259  fbc4				   SwatterClean
    260  fbc4
    261  fbc4							; Clear out Player1 sprite
    262  fbc4		       a9 00		      lda	#0
    263  fbc6		       85 1c		      sta	GRP1
    264  fbc8
    265  fbc8		       60		      rts
    266  fbc9
    267  fbc9				   SwatterReset
    268  fbc9							; Initialize Swatter State
    269  fbc9		       a9 00		      lda	#SWATTER_STATE_WAIT
    270  fbcb		       85 be		      sta	SwatterState
    271  fbcd
    272  fbcd							; Set Wait Timer
    273  fbcd		       20 13 f0 	      jsr	Random
    274  fbd0		       a5 85		      lda	Rand8
    275  fbd2		       29 3f		      and	#$3f
    276  fbd4		       18		      clc
    277  fbd5		       69 b4		      adc	#SWATTER_WAIT_TIME
    278  fbd7		       85 8f		      sta	FrameTimer+1
    279  fbd9
    280  fbd9							; Set Random Position
    281  fbd9		       20 13 f0 	      jsr	Random
    282  fbdc		       a5 85		      lda	Rand8	; X Position
    283  fbde		       29 7f		      and	#$7f
    284  fbe0		       85 bc		      sta	SwatterPos+0
    285  fbe2		       a5 86		      lda	Rand16	; Y Position
    286  fbe4		       29 7e		      and	#$7e	; Ensure that Y position is even
    287  fbe6		       85 bd		      sta	SwatterPos+1
    288  fbe8
    289  fbe8		       60		      rts
    290  fbe9
    291  fbe9				   SwatterHoldSample
    292  fbe9		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    293  fbeb		       85 91		      sta	SampleStep
    294  fbed		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    295  fbef		       85 16		      sta	AUDC1
    296  fbf1		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    297  fbf3		       85 1a		      sta	AUDV1
    298  fbf5
    299  fbf5		       84 18		      sty	AUDF1	; Store value of y as frequency
    300  fbf7
    301  fbf7		       60		      rts
    302  fbf8
    303  fbf8				   SwatterActiveSample
    304  fbf8		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    305  fbfa		       85 91		      sta	SampleStep
    306  fbfc		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    307  fbfe		       85 16		      sta	AUDC1
    308  fc00		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    309  fc02		       85 18		      sta	AUDF1
    310  fc04		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    311  fc06		       85 1a		      sta	AUDV1
    312  fc08		       60		      rts
    313  fc09
    314  fc09				   SwatterHitSample
    315  fc09		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    316  fc0b		       85 91		      sta	SampleStep
    317  fc0d		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    318  fc0f		       85 16		      sta	AUDC1
    319  fc11		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    320  fc13		       85 18		      sta	AUDF1
    321  fc15		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    322  fc17		       85 1a		      sta	AUDV1
    323  fc19		       60		      rts
    324  fc1a
    325  fc1a							; Swatter Sprites
------- FILE objects/swatter_sprite.asm LEVEL 4 PASS 2
      0  fc1a					      include	"objects/swatter_sprite.asm"
      1  fc1a				   SwatterSprite
      2  fc1a
      3  fc1a		       3c		      .BYTE.b	%00111100
      4  fc1b		       3c		      .BYTE.b	%00111100
      5  fc1c		       56		      .BYTE.b	%01010110
      6  fc1d		       6a		      .BYTE.b	%01101010
      7  fc1e		       d5		      .BYTE.b	%11010101
      8  fc1f		       ab		      .BYTE.b	%10101011
      9  fc20		       d5		      .BYTE.b	%11010101
     10  fc21		       ab		      .BYTE.b	%10101011
     11  fc22		       d5		      .BYTE.b	%11010101
     12  fc23		       ab		      .BYTE.b	%10101011
     13  fc24		       d5		      .BYTE.b	%11010101
     14  fc25		       ab		      .BYTE.b	%10101011
     15  fc26		       56		      .BYTE.b	%01010110
     16  fc27		       6a		      .BYTE.b	%01101010
     17  fc28		       56		      .BYTE.b	%01010110
     18  fc29		       6a		      .BYTE.b	%01101010
     19  fc2a		       34		      .BYTE.b	%00110100
     20  fc2b		       2c		      .BYTE.b	%00101100
     21  fc2c		       34		      .BYTE.b	%00110100
     22  fc2d		       18		      .BYTE.b	%00011000
------- FILE objects/swatter.asm
------- FILE game.asm
     21  fc2e
     22  fc2e							; Initialization
     23  fc2e
     24  fc2e				   GameInit
     25  fc2e
     26  fc2e							; Setup logic and kernel
      0  fc2e					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fc2e				   .POINTER   SET	VBlankPtr
      2  fc2e				   .ADDRESS   SET	GameVerticalBlank
      3  fc2e
      4  fc2e		       a9 7c		      LDA	#<.ADDRESS
      5  fc30		       85 87		      STA	.POINTER
      6  fc32		       a9 fc		      LDA	#>.ADDRESS
      7  fc34		       85 88		      STA	.POINTER+1
      8  fc36
      0  fc36					      SET_POINTER	KernelPtr, GameKernel
      1  fc36				   .POINTER   SET	KernelPtr
      2  fc36				   .ADDRESS   SET	GameKernel
      3  fc36
      4  fc36		       a9 ff		      LDA	#<.ADDRESS
      5  fc38		       85 89		      STA	.POINTER
      6  fc3a		       a9 fc		      LDA	#>.ADDRESS
      7  fc3c		       85 8a		      STA	.POINTER+1
      8  fc3e
      0  fc3e					      SET_POINTER	OverScanPtr, GameOverScan
      1  fc3e				   .POINTER   SET	OverScanPtr
      2  fc3e				   .ADDRESS   SET	GameOverScan
      3  fc3e
      4  fc3e		       a9 a3		      LDA	#<.ADDRESS
      5  fc40		       85 8b		      STA	.POINTER
      6  fc42		       a9 fc		      LDA	#>.ADDRESS
      7  fc44		       85 8c		      STA	.POINTER+1
      8  fc46
     30  fc46
     31  fc46							; Mute Audio
     32  fc46		       a9 00		      lda	#0
     33  fc48		       85 15		      sta	AUDC0
     34  fc4a		       85 19		      sta	AUDV0
     35  fc4c		       85 17		      sta	AUDF0
     36  fc4e		       85 16		      sta	AUDC1
     37  fc50		       85 1a		      sta	AUDV1
     38  fc52		       85 18		      sta	AUDF1
     39  fc54		       85 91		      sta	SampleStep
     40  fc56
     41  fc56							; Load Audio Settings
     42  fc56		       a9 02		      lda	#GAME_AUDIO_VOLUME
     43  fc58		       85 19		      sta	AUDV0
     44  fc5a
     45  fc5a							; Make it so that we play the first note immediately
     46  fc5a		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     47  fc5c		       85 90		      sta	AudioStep
     48  fc5e		       a9 02		      lda	#2
     49  fc60		       85 8e		      sta	FrameTimer
     50  fc62
     51  fc62							; Reset NuSiz
     52  fc62		       a9 00		      lda	#0
     53  fc64		       85 81		      sta	NuSiz0
     54  fc66		       85 04		      sta	NUSIZ0
     55  fc68		       85 82		      sta	NuSiz1
     56  fc6a		       85 05		      sta	NUSIZ1
     57  fc6c
     58  fc6c							; Initialize Objects
     59  fc6c		       20 d3 f4 	      jsr	ScoreInit
     60  fc6f		       20 5c f6 	      jsr	SpiderInit
     61  fc72		       20 fb f7 	      jsr	LineInit
     62  fc75		       20 9e f9 	      jsr	BugInit
     63  fc78		       20 d8 fa 	      jsr	SwatterInit
     64  fc7b
     65  fc7b		       60		      rts
     66  fc7c
     67  fc7c				   GameVerticalBlank
     68  fc7c
     69  fc7c							; Refresh random values
     70  fc7c		       20 13 f0 	      jsr	Random
     71  fc7f
     72  fc7f							; Update Objects
     73  fc7f		       20 6d f6 	      jsr	SpiderUpdate
     74  fc82		       20 10 f8 	      jsr	LineUpdate
     75  fc85		       20 bf f9 	      jsr	BugUpdate
     76  fc88		       20 dc fa 	      jsr	SwatterUpdate
     77  fc8b		       20 dc f4 	      jsr	ScoreUpdate
     78  fc8e
     79  fc8e							; Reset Collisions
     80  fc8e		       85 2c		      sta	CXCLR
     81  fc90
     82  fc90							; Clear horizontal movement
     83  fc90		       85 2b		      sta	HMCLR
     84  fc92
     85  fc92							; Update Positions
     86  fc92		       20 78 f7 	      jsr	SpiderPosition
     87  fc95		       20 2e f9 	      jsr	LinePosition
     88  fc98		       20 66 fa 	      jsr	BugPosition
     89  fc9b		       20 73 fb 	      jsr	SwatterPosition
     90  fc9e
     91  fc9e							; Set final x positions
     92  fc9e		       85 02		      sta	WSYNC
     93  fca0		       85 2a		      sta	HMOVE
     94  fca2
     95  fca2		       60		      rts
     96  fca3
     97  fca3				   GameOverScan
     98  fca3
     99  fca3							; Audio Routines
    100  fca3		       20 c1 fc 	      jsr	GameAudio
    101  fca6		       20 ad fc 	      jsr	GameSample
    102  fca9
    103  fca9							; State Routines
    104  fca9		       20 f5 fc 	      jsr	GameDeath
    105  fcac
    106  fcac		       60		      rts
    107  fcad
    108  fcad				   GameSample
    109  fcad
    110  fcad		       a6 91		      ldx	SampleStep
    111  fcaf		       e0 00		      cpx	#0
    112  fcb1		       f0 0b		      beq	.game_sample_return
    113  fcb3
    114  fcb3		       ca		      dex
    115  fcb4		       d0 08		      bne	.game_sample_return
    116  fcb6
    117  fcb6				   .game_sample_mute
    118  fcb6		       a9 00		      lda	#0
    119  fcb8		       85 1a		      sta	AUDV1
    120  fcba		       85 18		      sta	AUDF1
    121  fcbc		       85 16		      sta	AUDC1
    122  fcbe
    123  fcbe				   .game_sample_return
    124  fcbe		       86 91		      stx	SampleStep
    125  fcc0		       60		      rts
    126  fcc1
    127  fcc1				   GameAudio
    128  fcc1
    129  fcc1		       a6 8e		      ldx	FrameTimer
    130  fcc3		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    131  fcc5		       f0 25		      beq	.game_audio_mute_note
    132  fcc7		       e0 00		      cpx	#0
    133  fcc9		       d0 29		      bne	.game_audio_return
    134  fccb
    135  fccb							; Reset Timer
    136  fccb		       a2 09		      ldx	#GAME_AUDIO_STEP
    137  fccd		       86 8e		      stx	FrameTimer
    138  fccf
    139  fccf				   .game_audio_play
    140  fccf
    141  fccf							; Increment melody position
    142  fccf		       a4 90		      ldy	AudioStep
    143  fcd1		       c8		      iny
    144  fcd2
    145  fcd2		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    146  fcd4		       d0 02		      bne	.game_audio_play_note
    147  fcd6
    148  fcd6							; Loop our audio step
    149  fcd6		       a0 00		      ldy	#0
    150  fcd8
    151  fcd8				   .game_audio_play_note
    152  fcd8
    153  fcd8							; Save current position
    154  fcd8		       84 90		      sty	AudioStep
    155  fcda
    156  fcda							; Melody Line
    157  fcda		       b9 a0 fe 	      lda	GameAudio0,y
    158  fcdd		       c9 ff		      cmp	#$FF
    159  fcdf		       f0 0b		      beq	.game_audio_mute_note
    160  fce1		       85 17		      sta	AUDF0
    161  fce3		       a9 06		      lda	#GAME_AUDIO_TONE
    162  fce5		       85 15		      sta	AUDC0
    163  fce7		       a9 02		      lda	#GAME_AUDIO_VOLUME
    164  fce9		       85 19		      sta	AUDV0
    165  fceb
    166  fceb		       60		      rts
    167  fcec
    168  fcec				   .game_audio_mute_note
    169  fcec
    170  fcec		       a9 00		      lda	#0
    171  fcee		       85 17		      sta	AUDF0
    172  fcf0		       85 15		      sta	AUDC0
    173  fcf2		       85 19		      sta	AUDV0
    174  fcf4
    175  fcf4				   .game_audio_return
    176  fcf4		       60		      rts
    177  fcf5
    178  fcf5				   GameDeath
    179  fcf5		       a5 92		      lda	ScoreValue+0
    180  fcf7		       c9 00		      cmp	#0
    181  fcf9		       d0 03		      bne	.game_death_return
    182  fcfb
    183  fcfb							; Show Game Over Screen
    184  fcfb		       20 c0 fe 	      jsr	OverInit
    185  fcfe
    186  fcfe				   .game_death_return
    187  fcfe		       60		      rts
    188  fcff
    189  fcff				   GameKernel
    190  fcff
    191  fcff							; Turn on display
    192  fcff		       a9 00		      lda	#0
    193  fd01		       85 01		      sta	VBLANK
    194  fd03
    195  fd03				   .game_kernel_score
    196  fd03
    197  fd03							; Draw Score on top first
    198  fd03		       20 fc f4 	      jsr	ScoreDraw
    199  fd06
    200  fd06				   .game_kernel_objects_start
    201  fd06
    202  fd06							; Setup Drawing Objects
    203  fd06		       20 bc f5 	      jsr	WebDrawStart
    204  fd09		       20 80 f7 	      jsr	SpiderDrawStart
    205  fd0c		       20 7b fb 	      jsr	SwatterDrawStart
    206  fd0f		       20 36 f9 	      jsr	LineDrawStart
    207  fd12		       20 75 fa 	      jsr	BugDrawStart
    208  fd15
    209  fd15							; Start Scanline Counter
    210  fd15		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    211  fd17							; The extra 5 is for processing overflow
    212  fd17
    213  fd17							; Half scanline counter in Temp+1
    214  fd17		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    215  fd19		       85 84		      sta	Temp+1
    216  fd1b
    217  fd1b				   .game_kernel_objects
    218  fd1b
    219  fd1b		       85 02		      sta	WSYNC
    220  fd1d
    221  fd1d				   .game_kernel_web
    222  fd1d
    223  fd1d							; Web
    224  fd1d		       a4 9a		      ldy	WebIndex
    225  fd1f
    226  fd1f							; Load Image
    227  fd1f		       b9 02 f6 	      lda	WebImagePF0,y
    228  fd22		       85 0d		      sta	PF0
    229  fd24		       b9 20 f6 	      lda	WebImagePF1,y
    230  fd27		       85 0e		      sta	PF1
    231  fd29		       b9 3e f6 	      lda	WebImagePF2,y
    232  fd2c		       85 0f		      sta	PF2
    233  fd2e
    234  fd2e		       e6 9a		      inc	WebIndex
    235  fd30
    236  fd30				   .game_kernel_line_1
    237  fd30							; Line (1st time)
    238  fd30
    239  fd30		       24 a7		      bit	LineEnabled
    240  fd32		       10 10		      bpl	.game_kernel_line_1_skip
    241  fd34
    242  fd34							; Load half-line
    243  fd34		       a5 84		      lda	Temp+1
    244  fd36
    245  fd36		       a0 00		      ldy	#%00000000
    246  fd38
    247  fd38							; Top
    248  fd38		       c5 af		      cmp	LineDrawPos+1
    249  fd3a		       b0 06		      bcs	.game_kernel_line_1_off
    250  fd3c
    251  fd3c							; Bottom
    252  fd3c		       c5 ae		      cmp	LineDrawPos+0
    253  fd3e		       90 02		      bcc	.game_kernel_line_1_off
    254  fd40
    255  fd40				   .game_kernel_line_1_on
    256  fd40		       a0 02		      ldy	#%00000010
    257  fd42
    258  fd42				   .game_kernel_line_1_off
    259  fd42		       84 1f		      sty	ENABL
    260  fd44
    261  fd44				   .game_kernel_line_1_skip
    262  fd44
    263  fd44		       ca		      dex
    264  fd45		       85 02		      sta	WSYNC
    265  fd47
    266  fd47				   .game_kernel_spider_1
    267  fd47							; Spider (1st time)
    268  fd47
    269  fd47		       a4 a2		      ldy	SpiderIndex
    270  fd49		       30 1a		      bmi	.game_kernel_spider_1_load	; At end of sprite
    271  fd4b		       d0 06		      bne	.game_kernel_spider_1_draw	; Currently drawing (not zero)
    272  fd4d
    273  fd4d							; Check y position to see if we should start
    274  fd4d		       a5 84		      lda	Temp+1	; Use half scanline
    275  fd4f		       e5 a3		      sbc	SpiderDrawPos
    276  fd51		       10 12		      bpl	.game_kernel_spider_1_load
    277  fd53
    278  fd53				   .game_kernel_spider_1_draw
    279  fd53		       b1 9c		      lda	(SpiderPtr),y
    280  fd55		       85 a4		      sta	SpiderLine
    281  fd57
    282  fd57							; Increment sprite index
    283  fd57		       e6 a2		      inc	SpiderIndex
    284  fd59
    285  fd59							; See if we're at the end
    286  fd59		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    287  fd5b		       d0 0a		      bne	.game_kernel_spider_1_line
    288  fd5d		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    289  fd5f		       84 a2		      sty	SpiderIndex
    290  fd61		       a9 00		      lda	#0
    291  fd63		       85 a4		      sta	SpiderLine
    292  fd65
    293  fd65				   .game_kernel_spider_1_load
    294  fd65		       a5 a4		      lda	SpiderLine
    295  fd67				   .game_kernel_spider_1_line
    296  fd67		       85 1b		      sta	GRP0
    297  fd69
    298  fd69				   .game_kernel_swatter_1
    299  fd69							; Swatter (1st time)
    300  fd69
    301  fd69							; Check if wait state
    302  fd69		       24 be		      bit	SwatterState
    303  fd6b		       10 1b		      bpl	.game_kernel_swatter_1_load
    304  fd6d
    305  fd6d		       a4 c0		      ldy	SwatterIndex
    306  fd6f		       30 17		      bmi	.game_kernel_swatter_1_load	; At end of sprite
    307  fd71		       d0 06		      bne	.game_kernel_swatter_1_draw	; Currently drawing (not zero)
    308  fd73
    309  fd73							; Check y position to see if we should start
    310  fd73		       a5 84		      lda	Temp+1	; Use half scanline
    311  fd75		       e5 c1		      sbc	SwatterDrawPos
    312  fd77		       10 0f		      bpl	.game_kernel_swatter_1_load
    313  fd79
    314  fd79				   .game_kernel_swatter_1_draw
    315  fd79		       b9 1a fc 	      lda	SwatterSprite,y
    316  fd7c		       85 c2		      sta	SwatterLine
    317  fd7e
    318  fd7e							; Increment index
    319  fd7e		       e6 c0		      inc	SwatterIndex
    320  fd80
    321  fd80							; See if we're at the end
    322  fd80		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    323  fd82		       d0 06		      bne	.game_kernel_swatter_1_line
    324  fd84		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    325  fd86		       84 c0		      sty	SwatterIndex
    326  fd88
    327  fd88				   .game_kernel_swatter_1_load
    328  fd88		       a5 c2		      lda	SwatterLine
    329  fd8a				   .game_kernel_swatter_1_line
    330  fd8a		       85 1c		      sta	GRP1
    331  fd8c
    332  fd8c							; New line and decrement half scanline
    333  fd8c		       c6 84		      dec	Temp+1
    334  fd8e		       ca		      dex
    335  fd8f		       85 02		      sta	WSYNC
    336  fd91
    337  fd91							; Preload half-line
    338  fd91		       a5 84		      lda	Temp+1
    339  fd93
    340  fd93				   .game_kernel_line_2
    341  fd93							; Line (2nd time)
    342  fd93
    343  fd93		       24 a7		      bit	LineEnabled
    344  fd95		       10 0e		      bpl	.game_kernel_line_2_skip
    345  fd97
    346  fd97		       a0 00		      ldy	#%00000000
    347  fd99
    348  fd99							; Top
    349  fd99		       c5 af		      cmp	LineDrawPos+1
    350  fd9b		       b0 06		      bcs	.game_kernel_line_2_off
    351  fd9d
    352  fd9d							; Bottom
    353  fd9d		       c5 ae		      cmp	LineDrawPos+0
    354  fd9f		       90 02		      bcc	.game_kernel_line_2_off
    355  fda1
    356  fda1				   .game_kernel_line_2_on
    357  fda1		       a0 02		      ldy	#%00000010
    358  fda3
    359  fda3				   .game_kernel_line_2_off
    360  fda3		       84 1f		      sty	ENABL
    361  fda5
    362  fda5				   .game_kernel_line_2_skip
    363  fda5
    364  fda5				   .game_kernel_bug_1_0
    365  fda5							; First Bug (1st time)
    366  fda5
    367  fda5		       a0 00		      ldy	#%00000000
    368  fda7
    369  fda7							; Top
    370  fda7		       c5 ba		      cmp	BugDrawPosTop+0
    371  fda9		       b0 06		      bcs	.game_kernel_bug_1_0_off
    372  fdab
    373  fdab							; Bottom
    374  fdab		       c5 b8		      cmp	BugDrawPosBottom+0
    375  fdad		       90 02		      bcc	.game_kernel_bug_1_0_off
    376  fdaf
    377  fdaf				   .game_kernel_bug_1_0_on
    378  fdaf		       a0 02		      ldy	#%00000010
    379  fdb1
    380  fdb1				   .game_kernel_bug_1_0_off
    381  fdb1		       84 1d		      sty	ENAM0
    382  fdb3
    383  fdb3				   .game_kernel_bug_1_1
    384  fdb3							; Second Bug (1st time)
    385  fdb3
    386  fdb3		       a0 00		      ldy	#%00000000
    387  fdb5
    388  fdb5							; Top
    389  fdb5		       c5 bb		      cmp	BugDrawPosTop+1
    390  fdb7		       b0 06		      bcs	.game_kernel_bug_1_1_off
    391  fdb9
    392  fdb9							; Bottom
    393  fdb9		       c5 b9		      cmp	BugDrawPosBottom+1
    394  fdbb		       90 02		      bcc	.game_kernel_bug_1_1_off
    395  fdbd
    396  fdbd				   .game_kernel_bug_1_1_on
    397  fdbd		       a0 02		      ldy	#%00000010
    398  fdbf
    399  fdbf				   .game_kernel_bug_1_1_off
    400  fdbf		       84 1e		      sty	ENAM1
    401  fdc1
    402  fdc1							; Next Line
    403  fdc1		       ca		      dex
    404  fdc2		       85 02		      sta	WSYNC
    405  fdc4
    406  fdc4				   .game_kernel_spider_2
    407  fdc4							; Spider (2nd time)
    408  fdc4
    409  fdc4		       a4 a2		      ldy	SpiderIndex
    410  fdc6		       30 1a		      bmi	.game_kernel_spider_2_load	; At end of sprite
    411  fdc8		       d0 06		      bne	.game_kernel_spider_2_draw	; Currently drawing (not zero)
    412  fdca
    413  fdca							; Check y position to see if we should start
    414  fdca		       a5 84		      lda	Temp+1	; Use half scanline
    415  fdcc		       e5 a3		      sbc	SpiderDrawPos
    416  fdce		       10 12		      bpl	.game_kernel_spider_2_load
    417  fdd0
    418  fdd0				   .game_kernel_spider_2_draw
    419  fdd0		       b1 9c		      lda	(SpiderPtr),y
    420  fdd2		       85 a4		      sta	SpiderLine
    421  fdd4
    422  fdd4							; Increment sprite index
    423  fdd4		       e6 a2		      inc	SpiderIndex
    424  fdd6
    425  fdd6							; See if we're at the end
    426  fdd6		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    427  fdd8		       d0 0a		      bne	.game_kernel_spider_2_line
    428  fdda		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    429  fddc		       84 a2		      sty	SpiderIndex
    430  fdde		       a9 00		      lda	#0
    431  fde0		       85 a4		      sta	SpiderLine
    432  fde2
    433  fde2				   .game_kernel_spider_2_load
    434  fde2		       a5 a4		      lda	SpiderLine
    435  fde4				   .game_kernel_spider_2_line
    436  fde4		       85 1b		      sta	GRP0
    437  fde6
    438  fde6				   .game_kernel_swatter_2
    439  fde6							; Swatter (2nd time)
    440  fde6
    441  fde6							; Check if wait state
    442  fde6		       24 be		      bit	SwatterState
    443  fde8		       10 1b		      bpl	.game_kernel_swatter_2_load
    444  fdea
    445  fdea		       a4 c0		      ldy	SwatterIndex
    446  fdec		       30 17		      bmi	.game_kernel_swatter_2_load	; At end of sprite
    447  fdee		       d0 06		      bne	.game_kernel_swatter_2_draw	; Currently drawing (not zero)
    448  fdf0
    449  fdf0							; Check y position to see if we should start
    450  fdf0		       a5 84		      lda	Temp+1	; Use half scanline
    451  fdf2		       e5 c1		      sbc	SwatterDrawPos
    452  fdf4		       10 0f		      bpl	.game_kernel_swatter_2_load
    453  fdf6
    454  fdf6				   .game_kernel_swatter_2_draw
    455  fdf6		       b9 1a fc 	      lda	SwatterSprite,y
    456  fdf9		       85 c2		      sta	SwatterLine
    457  fdfb
    458  fdfb							; Increment index
    459  fdfb		       e6 c0		      inc	SwatterIndex
    460  fdfd
    461  fdfd							; See if we're at the end
    462  fdfd		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    463  fdff		       d0 06		      bne	.game_kernel_swatter_2_line
    464  fe01		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    465  fe03		       84 c0		      sty	SwatterIndex
    466  fe05
    467  fe05				   .game_kernel_swatter_2_load
    468  fe05		       a5 c2		      lda	SwatterLine
    469  fe07				   .game_kernel_swatter_2_line
    470  fe07		       85 1c		      sta	GRP1
    471  fe09
    472  fe09							; Next Line and half-line
    473  fe09		       c6 84		      dec	Temp+1
    474  fe0b		       ca		      dex
    475  fe0c		       85 02		      sta	WSYNC
    476  fe0e
    477  fe0e							; Preload half-line
    478  fe0e		       a5 84		      lda	Temp+1
    479  fe10
    480  fe10				   .game_kernel_line_3
    481  fe10							; Line (3rd time)
    482  fe10
    483  fe10		       24 a7		      bit	LineEnabled
    484  fe12		       10 0e		      bpl	.game_kernel_line_3_skip
    485  fe14
    486  fe14		       a0 00		      ldy	#%00000000
    487  fe16
    488  fe16							; Top
    489  fe16		       c5 af		      cmp	LineDrawPos+1
    490  fe18		       b0 06		      bcs	.game_kernel_line_3_off
    491  fe1a
    492  fe1a							; Bottom
    493  fe1a		       c5 ae		      cmp	LineDrawPos+0
    494  fe1c		       90 02		      bcc	.game_kernel_line_3_off
    495  fe1e
    496  fe1e				   .game_kernel_line_3_on
    497  fe1e		       a0 02		      ldy	#%00000010
    498  fe20
    499  fe20				   .game_kernel_line_3_off
    500  fe20		       84 1f		      sty	ENABL
    501  fe22
    502  fe22				   .game_kernel_line_3_skip
    503  fe22
    504  fe22				   .game_kernel_bug_2_0
    505  fe22							; First Bug (2nd time)
    506  fe22
    507  fe22		       a0 00		      ldy	#%00000000
    508  fe24
    509  fe24							; Top
    510  fe24		       c5 ba		      cmp	BugDrawPosTop+0
    511  fe26		       b0 06		      bcs	.game_kernel_bug_2_0_off
    512  fe28
    513  fe28							; Bottom
    514  fe28		       c5 b8		      cmp	BugDrawPosBottom+0
    515  fe2a		       90 02		      bcc	.game_kernel_bug_2_0_off
    516  fe2c
    517  fe2c				   .game_kernel_bug_2_0_on
    518  fe2c		       a0 02		      ldy	#%00000010
    519  fe2e
    520  fe2e				   .game_kernel_bug_2_0_off
    521  fe2e		       84 1d		      sty	ENAM0
    522  fe30
    523  fe30				   .game_kernel_bug_2_1
    524  fe30							; Second Bug (2nd time)
    525  fe30
    526  fe30		       a0 00		      ldy	#%00000000
    527  fe32
    528  fe32							; Top
    529  fe32		       c5 bb		      cmp	BugDrawPosTop+1
    530  fe34		       b0 06		      bcs	.game_kernel_bug_2_1_off
    531  fe36
    532  fe36							; Bottom
    533  fe36		       c5 b9		      cmp	BugDrawPosBottom+1
    534  fe38		       90 02		      bcc	.game_kernel_bug_2_1_off
    535  fe3a
    536  fe3a				   .game_kernel_bug_2_1_on
    537  fe3a		       a0 02		      ldy	#%00000010
    538  fe3c
    539  fe3c				   .game_kernel_bug_2_1_off
    540  fe3c		       84 1e		      sty	ENAM1
    541  fe3e
    542  fe3e							; Next Line
    543  fe3e		       ca		      dex
    544  fe3f		       85 02		      sta	WSYNC
    545  fe41
    546  fe41				   .game_kernel_spider_3
    547  fe41							; Spider (3rd time)
    548  fe41
    549  fe41		       a4 a2		      ldy	SpiderIndex
    550  fe43		       30 1a		      bmi	.game_kernel_spider_3_load	; At end of sprite
    551  fe45		       d0 06		      bne	.game_kernel_spider_3_draw	; Currently drawing (not zero)
    552  fe47
    553  fe47							; Check y position to see if we should start
    554  fe47		       a5 84		      lda	Temp+1	; Use half scanline
    555  fe49		       e5 a3		      sbc	SpiderDrawPos
    556  fe4b		       10 12		      bpl	.game_kernel_spider_3_load
    557  fe4d
    558  fe4d				   .game_kernel_spider_3_draw
    559  fe4d		       b1 9c		      lda	(SpiderPtr),y
    560  fe4f		       85 a4		      sta	SpiderLine
    561  fe51
    562  fe51							; Increment sprite index
    563  fe51		       e6 a2		      inc	SpiderIndex
    564  fe53
    565  fe53							; See if we're at the end
    566  fe53		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    567  fe55		       d0 0a		      bne	.game_kernel_spider_3_line
    568  fe57		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    569  fe59		       84 a2		      sty	SpiderIndex
    570  fe5b		       a9 00		      lda	#0
    571  fe5d		       85 a4		      sta	SpiderLine
    572  fe5f
    573  fe5f				   .game_kernel_spider_3_load
    574  fe5f		       a5 a4		      lda	SpiderLine
    575  fe61				   .game_kernel_spider_3_line
    576  fe61		       85 1b		      sta	GRP0
    577  fe63
    578  fe63				   .game_kernel_spider_3_skip
    579  fe63
    580  fe63				   .game_kernel_swatter_3
    581  fe63							; Swatter (3rd time)
    582  fe63
    583  fe63							; Check if wait state
    584  fe63		       24 be		      bit	SwatterState
    585  fe65		       10 1b		      bpl	.game_kernel_swatter_3_load
    586  fe67
    587  fe67		       a4 c0		      ldy	SwatterIndex
    588  fe69		       30 17		      bmi	.game_kernel_swatter_3_load	; At end of sprite
    589  fe6b		       d0 06		      bne	.game_kernel_swatter_3_draw	; Currently drawing (not zero)
    590  fe6d
    591  fe6d							; Check y position to see if we should start
    592  fe6d		       a5 84		      lda	Temp+1	; Use half scanline
    593  fe6f		       e5 c1		      sbc	SwatterDrawPos
    594  fe71		       10 0f		      bpl	.game_kernel_swatter_3_load
    595  fe73
    596  fe73				   .game_kernel_swatter_3_draw
    597  fe73		       b9 1a fc 	      lda	SwatterSprite,y
    598  fe76		       85 c2		      sta	SwatterLine
    599  fe78
    600  fe78							; Increment index
    601  fe78		       e6 c0		      inc	SwatterIndex
    602  fe7a
    603  fe7a							; See if we're at the end
    604  fe7a		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    605  fe7c		       d0 06		      bne	.game_kernel_swatter_3_line
    606  fe7e		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    607  fe80		       84 c0		      sty	SwatterIndex
    608  fe82
    609  fe82				   .game_kernel_swatter_3_load
    610  fe82		       a5 c2		      lda	SwatterLine
    611  fe84				   .game_kernel_swatter_3_line
    612  fe84		       85 1c		      sta	GRP1
    613  fe86
    614  fe86				   .game_kernel_swatter_3_skip
    615  fe86
    616  fe86							; New line and decrement half scanline
    617  fe86		       c6 84		      dec	Temp+1
    618  fe88		       ca		      dex
    619  fe89		       f0 03		      beq	.game_kernel_clean
    620  fe8b		       4c 1b fd 	      jmp	.game_kernel_objects
    621  fe8e
    622  fe8e				   .game_kernel_clean
    623  fe8e
    624  fe8e		       20 f9 f5 	      jsr	WebClean
    625  fe91		       20 a6 f7 	      jsr	SpiderClean
    626  fe94		       20 56 f9 	      jsr	LineClean
    627  fe97		       20 af fa 	      jsr	BugClean
    628  fe9a		       20 c4 fb 	      jsr	SwatterClean
    629  fe9d
    630  fe9d		       85 02		      sta	WSYNC
    631  fe9f
    632  fe9f				   .game_kernel_return
    633  fe9f		       60		      rts
    634  fea0
    635  fea0				   GameAudio0
    636  fea0		       0d		      .byte.b	#13	; D
    637  fea1		       ff		      .byte.b	#$FF
    638  fea2		       0f		      .byte.b	#15	; B
    639  fea3		       ff		      .byte.b	#$FF
    640  fea4		       0d		      .byte.b	#13	; D
    641  fea5		       ff		      .byte.b	#$FF
    642  fea6		       0f		      .byte.b	#15	; B
    643  fea7		       ff		      .byte.b	#$FF
    644  fea8		       0d		      .byte.b	#13	; D
    645  fea9		       0d		      .byte.b	#13	; D
    646  feaa		       0f		      .byte.b	#15	; B
    647  feab		       ff		      .byte.b	#$FF
    648  feac		       0c		      .byte.b	#12	; D#
    649  fead		       ff		      .byte.b	#$FF
    650  feae		       0f		      .byte.b	#15	; B
    651  feaf		       ff		      .byte.b	#$FF
    652  feb0		       0b		      .byte.b	#11	; E
    653  feb1		       ff		      .byte.b	#$FF
    654  feb2		       0e		      .byte.b	#14	; C#
    655  feb3		       ff		      .byte.b	#$FF
    656  feb4		       0b		      .byte.b	#11
    657  feb5		       ff		      .byte.b	#$FF
    658  feb6		       0e		      .byte.b	#14
    659  feb7		       ff		      .byte.b	#$FF
    660  feb8		       0b		      .byte.b	#11
    661  feb9		       0b		      .byte.b	#11
    662  feba		       0e		      .byte.b	#14
    663  febb		       ff		      .byte.b	#$FF
    664  febc		       0b		      .byte.b	#11
    665  febd		       ff		      .byte.b	#$FF
    666  febe		       0e		      .byte.b	#14
    667  febf		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fec0					      include	"over.asm"
      1  fec0							;================
      2  fec0							; Constants
      3  fec0							;================
      4  fec0
      5  fec0		       00 dc	   OVER_FRAMES =	220
      6  fec0
      7  fec0		       00 00	   OVER_BG_COLOR =	#$00
      8  fec0		       00 44	   OVER_FG_COLOR =	#$44
      9  fec0
     10  fec0		       00 07	   OVER_AUDIO_TONE =	7
     11  fec0		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fec0		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fec0		       00 10	   OVER_AUDIO_STEP =	16
     14  fec0
     15  fec0		       00 09	   OVER_IMAGE_SIZE =	9
     16  fec0		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fec0		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fec0		       00 35	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fec0
     20  fec0				   OverInit
     21  fec0
     22  fec0							; Setup logic and kernel
      0  fec0					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fec0				   .POINTER   SET	VBlankPtr
      2  fec0				   .ADDRESS   SET	OverVerticalBlank
      3  fec0
      4  fec0		       a9 02		      LDA	#<.ADDRESS
      5  fec2		       85 87		      STA	.POINTER
      6  fec4		       a9 ff		      LDA	#>.ADDRESS
      7  fec6		       85 88		      STA	.POINTER+1
      8  fec8
      0  fec8					      SET_POINTER	KernelPtr, OverKernel
      1  fec8				   .POINTER   SET	KernelPtr
      2  fec8				   .ADDRESS   SET	OverKernel
      3  fec8
      4  fec8		       a9 40		      LDA	#<.ADDRESS
      5  feca		       85 89		      STA	.POINTER
      6  fecc		       a9 ff		      LDA	#>.ADDRESS
      7  fece		       85 8a		      STA	.POINTER+1
      8  fed0
      0  fed0					      SET_POINTER	OverScanPtr, OverOverScan
      1  fed0				   .POINTER   SET	OverScanPtr
      2  fed0				   .ADDRESS   SET	OverOverScan
      3  fed0
      4  fed0		       a9 06		      LDA	#<.ADDRESS
      5  fed2		       85 8b		      STA	.POINTER
      6  fed4		       a9 ff		      LDA	#>.ADDRESS
      7  fed6		       85 8c		      STA	.POINTER+1
      8  fed8
     26  fed8
     27  fed8							; Load Colors
     28  fed8		       a9 00		      lda	#OVER_BG_COLOR
     29  feda		       85 09		      sta	COLUBK
     30  fedc		       a9 44		      lda	#OVER_FG_COLOR
     31  fede		       85 08		      sta	COLUPF
     32  fee0
     33  fee0							; Load audio settings
     34  fee0		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fee2		       85 15		      sta	AUDC0
     36  fee4		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fee6		       85 19		      sta	AUDV0
     38  fee8		       a9 00		      lda	#0
     39  feea		       85 16		      sta	AUDC1
     40  feec		       85 1a		      sta	AUDV1
     41  feee		       a9 00		      lda	#0
     42  fef0		       85 90		      sta	AudioStep
     43  fef2
     44  fef2							; Play first note
     45  fef2		       ad 92 ff 	      lda	OverAudio0,AudioStep
     46  fef5		       85 17		      sta	AUDF0
     47  fef7
     48  fef7							; Setup frame counters
     49  fef7		       a9 00		      lda	#0
     50  fef9		       85 8d		      sta	Frame
     51  fefb		       a9 10		      lda	#OVER_AUDIO_STEP
     52  fefd		       85 8e		      sta	FrameTimer
     53  feff		       85 84		      sta	Temp+1
     54  ff01
     55  ff01		       60		      rts
     56  ff02
     57  ff02				   OverVerticalBlank
     58  ff02		       20 dc f4 	      jsr	ScoreUpdate
     59  ff05		       60		      rts
     60  ff06
     61  ff06				   OverOverScan
     62  ff06		       20 0d ff 	      jsr	OverAudio
     63  ff09		       20 36 ff 	      jsr	OverState
     64  ff0c		       60		      rts
     65  ff0d
     66  ff0d				   OverAudio
     67  ff0d
     68  ff0d		       a6 8e		      ldx	FrameTimer
     69  ff0f		       e0 00		      cpx	#0
     70  ff11		       d0 22		      bne	.over_audio_return
     71  ff13
     72  ff13							; Reset Timer
     73  ff13		       a6 84		      ldx	Temp+1
     74  ff15					      REPEAT	3
     75  ff15		       e8		      inx
     74  ff15					      REPEND
     75  ff16		       e8		      inx
     74  ff16					      REPEND
     75  ff17		       e8		      inx
     76  ff18					      REPEND
     77  ff18		       86 8e		      stx	FrameTimer
     78  ff1a		       86 84		      stx	Temp+1
     79  ff1c
     80  ff1c				   .over_audio_play
     81  ff1c
     82  ff1c							; Increment melody position
     83  ff1c		       a4 90		      ldy	AudioStep
     84  ff1e		       c8		      iny
     85  ff1f
     86  ff1f		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  ff21		       f0 0c		      beq	.over_audio_mute_note
     88  ff23
     89  ff23				   .over_audio_play_note
     90  ff23
     91  ff23							; Save current position
     92  ff23		       84 90		      sty	AudioStep
     93  ff25
     94  ff25							; Melody Line
     95  ff25		       b9 92 ff 	      lda	OverAudio0,y
     96  ff28		       85 17		      sta	AUDF0
     97  ff2a		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  ff2c		       85 19		      sta	AUDV0
     99  ff2e
    100  ff2e		       60		      rts
    101  ff2f
    102  ff2f				   .over_audio_mute_note
    103  ff2f		       a9 00		      lda	#0
    104  ff31		       85 17		      sta	AUDF0
    105  ff33		       85 19		      sta	AUDV0
    106  ff35
    107  ff35				   .over_audio_return
    108  ff35		       60		      rts
    109  ff36
    110  ff36				   OverState
    111  ff36		       a5 8d		      lda	Frame
    112  ff38		       c9 dc		      cmp	#OVER_FRAMES
    113  ff3a		       d0 03		      bne	.over_state_return
    114  ff3c
    115  ff3c		       20 4c f2 	      jsr	TitleInit
    116  ff3f
    117  ff3f				   .over_state_return
    118  ff3f		       60		      rts
    119  ff40
    120  ff40				   OverKernel
    121  ff40
    122  ff40							; Turn on display
    123  ff40		       a9 00		      lda	#0
    124  ff42		       85 01		      sta	VBLANK
    125  ff44
    126  ff44				   .over_kernel_score
    127  ff44
    128  ff44							; Draw Score on top first (no update)
    129  ff44		       20 fc f4 	      jsr	ScoreDraw
    130  ff47
    131  ff47				   .over_kernel_init
    132  ff47							; Playfield Control
    133  ff47		       a5 80		      lda	CtrlPf
    134  ff49		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  ff4b		       09 01		      ora	#%00000001	; Set mirroring
    136  ff4d		       85 80		      sta	CtrlPf
    137  ff4f		       85 0a		      sta	CTRLPF
    138  ff51
    139  ff51				   .over_kernel_top_padding
    140  ff51							; Top Padding
    141  ff51		       20 70 ff 	      jsr	OverPadding
    142  ff54
    143  ff54				   .over_kernel_image
    144  ff54		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  ff56
    146  ff56				   .over_kernel_image_next
    147  ff56		       bd 89 ff 	      lda	OverImagePF2,x
    148  ff59		       85 0f		      sta	PF2
    149  ff5b		       bd 80 ff 	      lda	OverImagePF1,x
    150  ff5e		       85 0e		      sta	PF1
    151  ff60							;    lda OverImagePF0,x
    152  ff60							;    sta PF0
    153  ff60
    154  ff60		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  ff62				   .over_kernel_image_loop
    156  ff62		       85 02		      sta	WSYNC
    157  ff64		       88		      dey
    158  ff65		       d0 fb		      bne	.over_kernel_image_loop
    159  ff67
    160  ff67		       ca		      dex
    161  ff68		       10 ec		      bpl	.over_kernel_image_next
    162  ff6a
    163  ff6a				   .over_kernel_bottom_padding
    164  ff6a							; Bottom Padding
    165  ff6a		       20 70 ff 	      jsr	OverPadding
    166  ff6d
    167  ff6d				   .over_kernel_return
    168  ff6d		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  ff6f		       60		      rts
    170  ff70
    171  ff70				   OverPadding
    172  ff70		       a9 00		      lda	#0
    173  ff72		       85 0d		      sta	PF0
    174  ff74		       85 0e		      sta	PF1
    175  ff76		       85 0f		      sta	PF2
    176  ff78
    177  ff78		       a2 35		      ldx	#OVER_IMAGE_PADDING
    178  ff7a				   .over_padding_loop
    179  ff7a		       85 02		      sta	WSYNC
    180  ff7c		       ca		      dex
    181  ff7d		       d0 fb		      bne	.over_padding_loop
    182  ff7f
    183  ff7f		       60		      rts
    184  ff80
    185  ff80				   OverAssets
    186  ff80
    187  ff80							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ff80					      include	"over_image.asm"
      1  ff80							;OverImagePF0:
      2  ff80							;    .BYTE %00000000
      3  ff80							;    .BYTE %00000000
      4  ff80							;    .BYTE %00000000
      5  ff80							;    .BYTE %00000000
      6  ff80							;    .BYTE %00000000
      7  ff80							;    .BYTE %00000000
      8  ff80							;    .BYTE %00000000
      9  ff80							;    .BYTE %00000000
     10  ff80							;    .BYTE %00000000
     11  ff80
     12  ff80				   OverImagePF1
     13  ff80		       0c		      .BYTE.b	%00001100
     14  ff81		       13		      .BYTE.b	%00010011
     15  ff82		       20		      .BYTE.b	%00100000
     16  ff83		       23		      .BYTE.b	%00100011
     17  ff84		       24		      .BYTE.b	%00100100
     18  ff85		       24		      .BYTE.b	%00100100
     19  ff86		       12		      .BYTE.b	%00010010
     20  ff87		       10		      .BYTE.b	%00010000
     21  ff88		       08		      .BYTE.b	%00001000
     22  ff89
     23  ff89				   OverImagePF2
     24  ff89		       e0		      .BYTE.b	%11100000
     25  ff8a		       18		      .BYTE.b	%00011000
     26  ff8b		       05		      .BYTE.b	%00000101
     27  ff8c		       52		      .BYTE.b	%01010010
     28  ff8d		       23		      .BYTE.b	%00100011
     29  ff8e		       52		      .BYTE.b	%01010010
     30  ff8f		       04		      .BYTE.b	%00000100
     31  ff90		       18		      .BYTE.b	%00011000
     32  ff91		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  ff92
    190  ff92				   OverAudio0
    191  ff92
    192  ff92		       0c		      .BYTE.b	#12	; D#2
    193  ff93		       0d		      .BYTE.b	#13	; D2
    194  ff94		       11		      .BYTE.b	#17	; A1
    195  ff95		       16		      .BYTE.b	#22	; F1
    196  ff96		       1a		      .BYTE.b	#26	; D1
    197  ff97		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    303  ff98
    304  ff98							;================
    305  ff98							; End of cart
    306  ff98							;================
    307  ff98
    308  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    309  fffa
    310  fffa				   InterruptVectors
    311  fffa
    312  fffa		       21 f0		      .word.w	InitSystem	; NMI
    313  fffc		       21 f0		      .word.w	InitSystem	; RESET
    314  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    315  10000
    316  10000					       END
