------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 11th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00cd ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00 00    Temp       ds	3
     61 U0086		       00	   Rand8      ds	1
     62 U0087		       00	   Rand16     ds	1
     63 U0088
     64 U0088		       00 00	   VBlankPtr  ds	2
     65 U008a		       00 00	   KernelPtr  ds	2
     66 U008c		       00 00	   OverScanPtr ds	2
     67 U008e
     68 U008e		       00	   Frame      ds	1
     69 U008f		       00 00	   FrameTimer ds	2
     70 U0091		       00	   InputState ds	1
     71 U0092
     72 U0092		       00	   AudioStep  ds	1
     73 U0093
     74 U0093		       00	   SampleStep ds	1
     75 U0094
     76 U0094							; Score
     77 U0094
     78 U0094		       00 00	   ScoreValue ds	2
     79 U0096		       00 00	   ScoreDigitOnes ds	2
     80 U0098		       00 00	   ScoreDigitTens ds	2
     81 U009a		       00 00 00    ScoreDigitGfx ds	3
     82 U009d		       00 00	   ScoreBarGfx ds	2
     83 U009f
     84 U009f							; Level
     85 U009f		       00	   LevelCurrent ds	1
     86 U00a0
     87 U00a0							; Web
     88 U00a0
     89 U00a0		       00	   WebIndex   ds	1
     90 U00a1		       00 00	   WebColor   ds	2
     91 U00a3
     92 U00a3							; Spider
     93 U00a3
     94 U00a3		       00 00	   SpiderPtr  ds	2
     95 U00a5		       00 00	   SpiderPos  ds	2
     96 U00a7		       00	   SpiderCtrl ds	1
     97 U00a8		       00	   SpiderColor ds	1
     98 U00a9
     99 U00a9		       00	   SpiderIndex ds	1
    100 U00aa		       00	   SpiderDrawPos ds	1
    101 U00ab		       00	   SpiderLine ds	1
    102 U00ac
    103 U00ac		       00 00	   SpiderPtr2 ds	2
    104 U00ae
    105 U00ae							; Line
    106 U00ae
    107 U00ae		       00	   LineEnabled ds	1
    108 U00af		       00 00	   LinePos    ds	2
    109 U00b1		       00 00	   LineVelocity ds	2
    110 U00b3		       00 00	   LineStartPos ds	2
    111 U00b5		       00 00	   LineDrawPos ds	2
    112 U00b7
    113 U00b7							; Bug
    114 U00b7
    115 U00b7		       00	   BugSpeed   ds	1
    116 U00b8
    117 U00b8		       00 00	   BugStunned ds	2
    118 U00ba		       00 00	   BugPosX    ds	2
    119 U00bc		       00 00	   BugPosY    ds	2
    120 U00be
    121 U00be		       00 00	   BugDrawPosBottom ds	2
    122 U00c0		       00 00	   BugDrawPosTop ds	2
    123 U00c2
    124 U00c2							; Swatter
    125 U00c2
    126 U00c2		       00 00	   SwatterPos ds	2
    127 U00c4		       00	   SwatterState ds	1
    128 U00c5		       00	   SwatterColor ds	1
    129 U00c6
    130 U00c6		       00	   SwatterWaitTime ds	1
    131 U00c7		       00	   SwatterHitDamage ds	1
    132 U00c8
    133 U00c8		       00	   SwatterIndex ds	1
    134 U00c9		       00	   SwatterDrawPos ds	1
    135 U00ca		       00	   SwatterLine ds	1
    136 U00cb
    137 U00cb		       00	   SwatterSampleCount ds	1
    138 U00cc		       00	   SwatterSampleF ds	1
    139 U00cd
    140  10000 ????				       SEG
    141  f000					      org	$F000	; Start of cart area
    142  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 86		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 87		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 86		      sta	Rand8
     49  f01e		       45 87		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 83		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 84		      sta	Temp+1
     70  f029		       85 85		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 83		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 84		      lda	Temp+1	; And add into result
     77  f031		       65 84		      adc	Temp+1
     78  f033		       85 84		      sta	Temp+1
     79  f035
     80  f035		       a5 85		      lda	Temp+2	; Propagating any carry
     81  f037		       65 85		      adc	Temp+2
     82  f039		       85 85		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 84		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 85		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    144  f044
    145  f044							; Assets
    146  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    150  f0bc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0bc					      include	"objects/score_digits.asm"
      1  f0bc				   ScoreDigits
      2  f0bc
      3  f0bc		       77		      .BYTE.b	%01110111
      4  f0bd		       55		      .BYTE.b	%01010101
      5  f0be		       55		      .BYTE.b	%01010101
      6  f0bf		       55		      .BYTE.b	%01010101
      7  f0c0		       77		      .BYTE.b	%01110111
      8  f0c1
      9  f0c1		       11		      .BYTE.b	%00010001
     10  f0c2		       11		      .BYTE.b	%00010001
     11  f0c3		       11		      .BYTE.b	%00010001
     12  f0c4		       11		      .BYTE.b	%00010001
     13  f0c5		       11		      .BYTE.b	%00010001
     14  f0c6
     15  f0c6		       77		      .BYTE.b	%01110111
     16  f0c7		       11		      .BYTE.b	%00010001
     17  f0c8		       77		      .BYTE.b	%01110111
     18  f0c9		       44		      .BYTE.b	%01000100
     19  f0ca		       77		      .BYTE.b	%01110111
     20  f0cb
     21  f0cb		       77		      .BYTE.b	%01110111
     22  f0cc		       11		      .BYTE.b	%00010001
     23  f0cd		       33		      .BYTE.b	%00110011
     24  f0ce		       11		      .BYTE.b	%00010001
     25  f0cf		       77		      .BYTE.b	%01110111
     26  f0d0
     27  f0d0		       55		      .BYTE.b	%01010101
     28  f0d1		       55		      .BYTE.b	%01010101
     29  f0d2		       77		      .BYTE.b	%01110111
     30  f0d3		       11		      .BYTE.b	%00010001
     31  f0d4		       11		      .BYTE.b	%00010001
     32  f0d5
     33  f0d5		       77		      .BYTE.b	%01110111
     34  f0d6		       44		      .BYTE.b	%01000100
     35  f0d7		       77		      .BYTE.b	%01110111
     36  f0d8		       11		      .BYTE.b	%00010001
     37  f0d9		       77		      .BYTE.b	%01110111
     38  f0da
     39  f0da		       77		      .BYTE.b	%01110111
     40  f0db		       44		      .BYTE.b	%01000100
     41  f0dc		       77		      .BYTE.b	%01110111
     42  f0dd		       55		      .BYTE.b	%01010101
     43  f0de		       77		      .BYTE.b	%01110111
     44  f0df
     45  f0df		       77		      .BYTE.b	%01110111
     46  f0e0		       11		      .BYTE.b	%00010001
     47  f0e1		       22		      .BYTE.b	%00100010
     48  f0e2		       22		      .BYTE.b	%00100010
     49  f0e3		       22		      .BYTE.b	%00100010
     50  f0e4
     51  f0e4		       77		      .BYTE.b	%01110111
     52  f0e5		       55		      .BYTE.b	%01010101
     53  f0e6		       77		      .BYTE.b	%01110111
     54  f0e7		       55		      .BYTE.b	%01010101
     55  f0e8		       77		      .BYTE.b	%01110111
     56  f0e9
     57  f0e9		       77		      .BYTE.b	%01110111
     58  f0ea		       55		      .BYTE.b	%01010101
     59  f0eb		       77		      .BYTE.b	%01110111
     60  f0ec		       11		      .BYTE.b	%00010001
     61  f0ed		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f0ee					      include	"objects/score_digits_flip.asm"
      1  f0ee				   ScoreDigitsFlip
      2  f0ee
      3  f0ee		       ee		      .BYTE.b	%11101110
      4  f0ef		       aa		      .BYTE.b	%10101010
      5  f0f0		       aa		      .BYTE.b	%10101010
      6  f0f1		       aa		      .BYTE.b	%10101010
      7  f0f2		       ee		      .BYTE.b	%11101110
      8  f0f3
      9  f0f3		       88		      .BYTE.b	%10001000
     10  f0f4		       88		      .BYTE.b	%10001000
     11  f0f5		       88		      .BYTE.b	%10001000
     12  f0f6		       88		      .BYTE.b	%10001000
     13  f0f7		       88		      .BYTE.b	%10001000
     14  f0f8
     15  f0f8		       ee		      .BYTE.b	%11101110
     16  f0f9		       88		      .BYTE.b	%10001000
     17  f0fa		       ee		      .BYTE.b	%11101110
     18  f0fb		       22		      .BYTE.b	%00100010
     19  f0fc		       ee		      .BYTE.b	%11101110
     20  f0fd
     21  f0fd		       ee		      .BYTE.b	%11101110
     22  f0fe		       88		      .BYTE.b	%10001000
     23  f0ff		       cc		      .BYTE.b	%11001100
     24  f100		       88		      .BYTE.b	%10001000
     25  f101		       ee		      .BYTE.b	%11101110
     26  f102
     27  f102		       aa		      .BYTE.b	%10101010
     28  f103		       aa		      .BYTE.b	%10101010
     29  f104		       ee		      .BYTE.b	%11101110
     30  f105		       88		      .BYTE.b	%10001000
     31  f106		       88		      .BYTE.b	%10001000
     32  f107
     33  f107		       ee		      .BYTE.b	%11101110
     34  f108		       22		      .BYTE.b	%00100010
     35  f109		       ee		      .BYTE.b	%11101110
     36  f10a		       88		      .BYTE.b	%10001000
     37  f10b		       ee		      .BYTE.b	%11101110
     38  f10c
     39  f10c		       ee		      .BYTE.b	%11101110
     40  f10d		       22		      .BYTE.b	%00100010
     41  f10e		       ee		      .BYTE.b	%11101110
     42  f10f		       aa		      .BYTE.b	%10101010
     43  f110		       ee		      .BYTE.b	%11101110
     44  f111
     45  f111		       ee		      .BYTE.b	%11101110
     46  f112		       88		      .BYTE.b	%10001000
     47  f113		       44		      .BYTE.b	%01000100
     48  f114		       44		      .BYTE.b	%01000100
     49  f115		       44		      .BYTE.b	%01000100
     50  f116
     51  f116		       ee		      .BYTE.b	%11101110
     52  f117		       aa		      .BYTE.b	%10101010
     53  f118		       ee		      .BYTE.b	%11101110
     54  f119		       aa		      .BYTE.b	%10101010
     55  f11a		       ee		      .BYTE.b	%11101110
     56  f11b
     57  f11b		       ee		      .BYTE.b	%11101110
     58  f11c		       aa		      .BYTE.b	%10101010
     59  f11d		       ee		      .BYTE.b	%11101110
     60  f11e		       88		      .BYTE.b	%10001000
     61  f11f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f120					      include	"objects/score_label.asm"
      1  f120				   ScoreLabel
      2  f120
      3  f120		       20		      .BYTE.b	%00100000
      4  f121		       50		      .BYTE.b	%01010000
      5  f122		       ee		      .BYTE.b	%11101110
      6  f123		       00		      .BYTE.b	%00000000
      7  f124		       57		      .BYTE.b	%01010111
      8  f125		       00		      .BYTE.b	%00000000
      9  f126
     10  f126		       20		      .BYTE.b	%00100000
     11  f127		       50		      .BYTE.b	%01010000
     12  f128		       4a		      .BYTE.b	%01001010
     13  f129		       00		      .BYTE.b	%00000000
     14  f12a		       55		      .BYTE.b	%01010101
     15  f12b		       00		      .BYTE.b	%00000000
     16  f12c
     17  f12c		       20		      .BYTE.b	%00100000
     18  f12d		       50		      .BYTE.b	%01010000
     19  f12e		       4e		      .BYTE.b	%01001110
     20  f12f		       00		      .BYTE.b	%00000000
     21  f130		       77		      .BYTE.b	%01110111
     22  f131		       00		      .BYTE.b	%00000000
     23  f132
     24  f132		       20		      .BYTE.b	%00100000
     25  f133		       50		      .BYTE.b	%01010000
     26  f134		       42		      .BYTE.b	%01000010
     27  f135		       00		      .BYTE.b	%00000000
     28  f136		       54		      .BYTE.b	%01010100
     29  f137		       00		      .BYTE.b	%00000000
     30  f138
     31  f138		       e0		      .BYTE.b	%11100000
     32  f139		       20		      .BYTE.b	%00100000
     33  f13a		       42		      .BYTE.b	%01000010
     34  f13b		       00		      .BYTE.b	%00000000
     35  f13c		       54		      .BYTE.b	%01010100
     36  f13d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    154  f13e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f13e					      include	"objects/web_image.asm"
      1  f13e				   WebImagePF0
      2  f13e		       00		      .BYTE.b	%00000000
      3  f13f		       00		      .BYTE.b	%00000000
      4  f140		       00		      .BYTE.b	%00000000
      5  f141		       00		      .BYTE.b	%00000000
      6  f142		       00		      .BYTE.b	%00000000
      7  f143		       00		      .BYTE.b	%00000000
      8  f144		       00		      .BYTE.b	%00000000
      9  f145		       00		      .BYTE.b	%00000000
     10  f146		       00		      .BYTE.b	%00000000
     11  f147		       30		      .BYTE.b	%00110000
     12  f148		       e0		      .BYTE.b	%11100000
     13  f149		       20		      .BYTE.b	%00100000
     14  f14a		       40		      .BYTE.b	%01000000
     15  f14b		       40		      .BYTE.b	%01000000
     16  f14c		       80		      .BYTE.b	%10000000
     17  f14d		       80		      .BYTE.b	%10000000
     18  f14e		       40		      .BYTE.b	%01000000
     19  f14f		       40		      .BYTE.b	%01000000
     20  f150		       20		      .BYTE.b	%00100000
     21  f151		       e0		      .BYTE.b	%11100000
     22  f152		       30		      .BYTE.b	%00110000
     23  f153		       00		      .BYTE.b	%00000000
     24  f154		       00		      .BYTE.b	%00000000
     25  f155		       00		      .BYTE.b	%00000000
     26  f156		       00		      .BYTE.b	%00000000
     27  f157		       00		      .BYTE.b	%00000000
     28  f158		       00		      .BYTE.b	%00000000
     29  f159		       00		      .BYTE.b	%00000000
     30  f15a		       00		      .BYTE.b	%00000000
     31  f15b		       00		      .BYTE.b	%00000000
     32  f15c
     33  f15c				   WebImagePF1
     34  f15c		       08		      .BYTE.b	%00001000
     35  f15d		       06		      .BYTE.b	%00000110
     36  f15e		       01		      .BYTE.b	%00000001
     37  f15f		       00		      .BYTE.b	%00000000
     38  f160		       00		      .BYTE.b	%00000000
     39  f161		       01		      .BYTE.b	%00000001
     40  f162		       01		      .BYTE.b	%00000001
     41  f163		       02		      .BYTE.b	%00000010
     42  f164		       0c		      .BYTE.b	%00001100
     43  f165		       30		      .BYTE.b	%00110000
     44  f166		       c0		      .BYTE.b	%11000000
     45  f167		       38		      .BYTE.b	%00111000
     46  f168		       07		      .BYTE.b	%00000111
     47  f169		       00		      .BYTE.b	%00000000
     48  f16a		       00		      .BYTE.b	%00000000
     49  f16b		       00		      .BYTE.b	%00000000
     50  f16c		       00		      .BYTE.b	%00000000
     51  f16d		       07		      .BYTE.b	%00000111
     52  f16e		       38		      .BYTE.b	%00111000
     53  f16f		       c0		      .BYTE.b	%11000000
     54  f170		       30		      .BYTE.b	%00110000
     55  f171		       0c		      .BYTE.b	%00001100
     56  f172		       02		      .BYTE.b	%00000010
     57  f173		       01		      .BYTE.b	%00000001
     58  f174		       01		      .BYTE.b	%00000001
     59  f175		       00		      .BYTE.b	%00000000
     60  f176		       00		      .BYTE.b	%00000000
     61  f177		       01		      .BYTE.b	%00000001
     62  f178		       06		      .BYTE.b	%00000110
     63  f179		       08		      .BYTE.b	%00001000
     64  f17a
     65  f17a				   WebImagePF2
     66  f17a		       20		      .BYTE.b	%00100000
     67  f17b		       18		      .BYTE.b	%00011000
     68  f17c		       04		      .BYTE.b	%00000100
     69  f17d		       03		      .BYTE.b	%00000011
     70  f17e		       3f		      .BYTE.b	%00111111
     71  f17f		       c2		      .BYTE.b	%11000010
     72  f180		       04		      .BYTE.b	%00000100
     73  f181		       08		      .BYTE.b	%00001000
     74  f182		       08		      .BYTE.b	%00001000
     75  f183		       10		      .BYTE.b	%00010000
     76  f184		       20		      .BYTE.b	%00100000
     77  f185		       20		      .BYTE.b	%00100000
     78  f186		       41		      .BYTE.b	%01000001
     79  f187		       8e		      .BYTE.b	%10001110
     80  f188		       f0		      .BYTE.b	%11110000
     81  f189		       f0		      .BYTE.b	%11110000
     82  f18a		       8e		      .BYTE.b	%10001110
     83  f18b		       41		      .BYTE.b	%01000001
     84  f18c		       20		      .BYTE.b	%00100000
     85  f18d		       20		      .BYTE.b	%00100000
     86  f18e		       10		      .BYTE.b	%00010000
     87  f18f		       08		      .BYTE.b	%00001000
     88  f190		       08		      .BYTE.b	%00001000
     89  f191		       04		      .BYTE.b	%00000100
     90  f192		       c2		      .BYTE.b	%11000010
     91  f193		       3f		      .BYTE.b	%00111111
     92  f194		       03		      .BYTE.b	%00000011
     93  f195		       04		      .BYTE.b	%00000100
     94  f196		       18		      .BYTE.b	%00011000
     95  f197		       20		      .BYTE.b	%00100000
------- FILE kernel.asm
    156  f198
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f198					      include	"objects/spider_sprite.asm"
      1  f198				   SpiderSprite
      2  f198
      3  f198		       99		      .BYTE.b	%10011001
      4  f199		       bd		      .BYTE.b	%10111101
      5  f19a		       db		      .BYTE.b	%11011011
      6  f19b		       bd		      .BYTE.b	%10111101
      7  f19c		       99		      .BYTE.b	%10011001
      8  f19d		       99		      .BYTE.b	%10011001
      9  f19e		       7e		      .BYTE.b	%01111110
     10  f19f		       3c		      .BYTE.b	%00111100
     11  f1a0		       3c		      .BYTE.b	%00111100
     12  f1a1		       18		      .BYTE.b	%00011000
     13  f1a2		       3c		      .BYTE.b	%00111100
     14  f1a3		       7e		      .BYTE.b	%01111110
     15  f1a4		       bd		      .BYTE.b	%10111101
     16  f1a5		       bd		      .BYTE.b	%10111101
     17  f1a6		       bd		      .BYTE.b	%10111101
     18  f1a7		       99		      .BYTE.b	%10011001
     19  f1a8
     20  f1a8		       c7		      .BYTE.b	%11000111
     21  f1a9		       c7		      .BYTE.b	%11000111
     22  f1aa		       28		      .BYTE.b	%00101000
     23  f1ab		       28		      .BYTE.b	%00101000
     24  f1ac		       3a		      .BYTE.b	%00111010
     25  f1ad		       7a		      .BYTE.b	%01111010
     26  f1ae		       fd		      .BYTE.b	%11111101
     27  f1af		       ff		      .BYTE.b	%11111111
     28  f1b0		       ff		      .BYTE.b	%11111111
     29  f1b1		       fd		      .BYTE.b	%11111101
     30  f1b2		       7a		      .BYTE.b	%01111010
     31  f1b3		       3a		      .BYTE.b	%00111010
     32  f1b4		       28		      .BYTE.b	%00101000
     33  f1b5		       28		      .BYTE.b	%00101000
     34  f1b6		       c7		      .BYTE.b	%11000111
     35  f1b7		       c7		      .BYTE.b	%11000111
     36  f1b8
     37  f1b8		       99		      .BYTE.b	%10011001
     38  f1b9		       bd		      .BYTE.b	%10111101
     39  f1ba		       bd		      .BYTE.b	%10111101
     40  f1bb		       bd		      .BYTE.b	%10111101
     41  f1bc		       7e		      .BYTE.b	%01111110
     42  f1bd		       3c		      .BYTE.b	%00111100
     43  f1be		       18		      .BYTE.b	%00011000
     44  f1bf		       3c		      .BYTE.b	%00111100
     45  f1c0		       3c		      .BYTE.b	%00111100
     46  f1c1		       7e		      .BYTE.b	%01111110
     47  f1c2		       99		      .BYTE.b	%10011001
     48  f1c3		       99		      .BYTE.b	%10011001
     49  f1c4		       bd		      .BYTE.b	%10111101
     50  f1c5		       db		      .BYTE.b	%11011011
     51  f1c6		       bd		      .BYTE.b	%10111101
     52  f1c7		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    158  f1c8
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1c8					      include	"objects/swatter_sprite.asm"
      1  f1c8				   SwatterSprite
      2  f1c8
      3  f1c8		       3c		      .BYTE.b	%00111100
      4  f1c9		       3c		      .BYTE.b	%00111100
      5  f1ca		       56		      .BYTE.b	%01010110
      6  f1cb		       6a		      .BYTE.b	%01101010
      7  f1cc		       d5		      .BYTE.b	%11010101
      8  f1cd		       ab		      .BYTE.b	%10101011
      9  f1ce		       d5		      .BYTE.b	%11010101
     10  f1cf		       ab		      .BYTE.b	%10101011
     11  f1d0		       d5		      .BYTE.b	%11010101
     12  f1d1		       ab		      .BYTE.b	%10101011
     13  f1d2		       d5		      .BYTE.b	%11010101
     14  f1d3		       ab		      .BYTE.b	%10101011
     15  f1d4		       56		      .BYTE.b	%01010110
     16  f1d5		       6a		      .BYTE.b	%01101010
     17  f1d6		       56		      .BYTE.b	%01010110
     18  f1d7		       6a		      .BYTE.b	%01101010
     19  f1d8		       34		      .BYTE.b	%00110100
     20  f1d9		       2c		      .BYTE.b	%00101100
     21  f1da		       34		      .BYTE.b	%00110100
     22  f1db		       18		      .BYTE.b	%00011000
------- FILE kernel.asm
    160  f1dc
    161  f1dc				   InitSystem
    162  f1dc
    163  f1dc				   .init_clean
    164  f1dc							; Resets RAM, TIA registers, and CPU registers
      0  f1dc					      CLEAN_START
      1  f1dc		       78		      sei
      2  f1dd		       d8		      cld
      3  f1de
      4  f1de		       a2 00		      ldx	#0
      5  f1e0		       8a		      txa
      6  f1e1		       a8		      tay
      7  f1e2		       ca	   .CLEAR_STACK dex
      8  f1e3		       9a		      txs
      9  f1e4		       48		      pha
     10  f1e5		       d0 fb		      bne	.CLEAR_STACK
     11  f1e7
    166  f1e7
    167  f1e7				   .init_tia
    168  f1e7							; Define default TIA register values
    169  f1e7
    170  f1e7							; Initialize copies
    171  f1e7		       a9 00		      lda	#0
    172  f1e9		       85 80		      sta	CtrlPf
    173  f1eb		       85 81		      sta	NuSiz0
    174  f1ed		       85 82		      sta	NuSiz1
    175  f1ef
    176  f1ef							; Set background color
    177  f1ef		       a9 00		      lda	#$00	; Black
    178  f1f1		       85 09		      sta	COLUBK
    179  f1f3
    180  f1f3							; Set the playfield and player color
    181  f1f3		       a9 0e		      lda	#$0E	; White
    182  f1f5		       85 08		      sta	COLUPF
    183  f1f7		       85 06		      sta	COLUP0
    184  f1f9		       85 07		      sta	COLUP1
    185  f1fb
    186  f1fb							; Playfield Control
    187  f1fb		       a9 01		      lda	#%00000001	; 1 for mirroring
    188  f1fd		       85 80		      sta	CtrlPf
    189  f1ff		       85 0a		      sta	CTRLPF
    190  f201
    191  f201							; Disable Game Elements
    192  f201		       a9 00		      lda	#$00
    193  f203		       85 1f		      sta	ENABL	; Turn off ball
    194  f205		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    195  f207		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    196  f209		       85 1b		      sta	GRP0	; Turn off player 1
    197  f20b		       85 1c		      sta	GRP1	; Turn off player 2
    198  f20d
    199  f20d							; Empty playfield
    200  f20d		       a9 00		      lda	#%00000000
    201  f20f		       85 0d		      sta	PF0
    202  f211		       85 0e		      sta	PF1
    203  f213		       85 0f		      sta	PF2
    204  f215
    205  f215				   .init_seed
    206  f215							; Seed the random number generator
    207  f215		       ad 84 02 	      lda	INTIM	; Unknown value
    208  f218		       85 86		      sta	Rand8	; Use as seed
    209  f21a		       49 ff		      eor	#$FF	; Flip bits
    210  f21c		       85 87		      sta	Rand16	; Just in case INTIM was 0
    211  f21e
    212  f21e				   .init_game
    213  f21e
    214  f21e							;   jsr LogoInit
    215  f21e		       20 86 f2 	      jsr	TitleInit
    216  f221
    217  f221							;=======================================
    218  f221							; Game Kernel
    219  f221							;=======================================
    220  f221
    221  f221				   Main
    222  f221
    223  f221		       20 30 f2 	      jsr	VerticalSync
    224  f224		       20 49 f2 	      jsr	VerticalBlank
    225  f227		       20 5c f2 	      jsr	Kernel
    226  f22a		       20 63 f2 	      jsr	OverScan
    227  f22d		       4c 21 f2 	      jmp	Main
    228  f230
    229  f230				   VerticalSync
    230  f230
    231  f230		       a9 00		      lda	#0
    232  f232		       85 01		      sta	VBLANK
    233  f234
    234  f234							; Turn on Vertical Sync signal and setup timer
    235  f234		       a9 02		      lda	#2
    236  f236		       85 00		      sta	VSYNC
    237  f238
    238  f238							; Increment frame count and reduce frame counter
    239  f238		       e6 8e		      inc	Frame
    240  f23a		       c6 8f		      dec	FrameTimer
    241  f23c		       c6 90		      dec	FrameTimer+1
    242  f23e
    243  f23e							; VSYNCH signal scanlines
    244  f23e					      REPEAT	#KERNEL_VSYNC
    245  f23e		       85 02		      sta	WSYNC
    244  f23e					      REPEND
    245  f240		       85 02		      sta	WSYNC
    244  f240					      REPEND
    245  f242		       85 02		      sta	WSYNC
    246  f244					      REPEND
    247  f244
    248  f244							; Turn off Vertical Sync signal
    249  f244		       a9 00		      lda	#0
    250  f246		       85 00		      sta	VSYNC
    251  f248
    252  f248				   .vsync_return
    253  f248		       60		      rts
    254  f249
    255  f249				   VerticalBlank
    256  f249							; Setup Timer
    257  f249		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    258  f24b		       8d 96 02 	      sta	TIM64T
    259  f24e
    260  f24e				   .vblank_logic
    261  f24e							; Perform Game Logic
    262  f24e		       20 59 f2 	      jsr	.vblank_logic_call_ptr
    263  f251
    264  f251				   .vblank_loop
    265  f251							; WSYNC until Timer is complete
    266  f251		       85 02		      sta	WSYNC
    267  f253		       ad 84 02 	      lda	INTIM
    268  f256		       d0 f9		      bne	.vblank_loop
    269  f258
    270  f258				   .vblank_return
    271  f258		       60		      rts
    272  f259
    273  f259				   .vblank_logic_call_ptr
    274  f259		       6c 88 00 	      jmp	(VBlankPtr)
    275  f25c
    276  f25c				   Kernel
    277  f25c
    278  f25c							; Perform Selected Kernel
    279  f25c		       20 60 f2 	      jsr	.kernel_call_ptr
    280  f25f		       60		      rts
    281  f260
    282  f260				   .kernel_call_ptr
    283  f260		       6c 8a 00 	      jmp	(KernelPtr)
    284  f263
    285  f263				   OverScan
    286  f263
    287  f263							; End of screen, enter blanking
    288  f263		       a9 42		      lda	#%01000010
    289  f265		       85 01		      sta	VBLANK
    290  f267
    291  f267							; Setup Timer
    292  f267		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    293  f269		       8d 96 02 	      sta	TIM64T
    294  f26c
    295  f26c							;.overscan_reset:
    296  f26c							; Check for reset switch
    297  f26c		       ad 82 02 	      lda	SWCHB
    298  f26f		       4a		      lsr		; Push D0 to carry (C)
    299  f270		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    300  f272
    301  f272							; Perform reset
    302  f272							;    jsr LogoInit	      ; No need for logic
    303  f272		       20 86 f2 	      jsr	TitleInit
    304  f275		       4c 7b f2 	      jmp	.overscan_loop
    305  f278
    306  f278				   .overscan_logic
    307  f278							; Perform OverScan Logic
    308  f278		       20 83 f2 	      jsr	.overscan_logic_call_ptr
    309  f27b
    310  f27b				   .overscan_loop
    311  f27b							; WSYNC until Timer is complete
    312  f27b		       85 02		      sta	WSYNC
    313  f27d		       ad 84 02 	      lda	INTIM
    314  f280		       d0 f9		      bne	.overscan_loop
    315  f282
    316  f282				   .overscan_return
    317  f282		       60		      rts
    318  f283
    319  f283				   .overscan_logic_call_ptr
    320  f283		       6c 8c 00 	      jmp	(OverScanPtr)
    321  f286
    322  f286							;================
    323  f286							; State Code
    324  f286							;================
    325  f286
    326  f286							;    include "logo.asm"
------- FILE title.asm LEVEL 2 PASS 2
      0  f286					      include	"title.asm"
      1  f286							;================
      2  f286							; Constants
      3  f286							;================
      4  f286
      5  f286		       00 00	   TITLE_BG_COLOR =	#$00
      6  f286		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f286		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f286		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f286		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f286
     11  f286		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f286		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f286		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f286		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f286		       00 09	   TITLE_AUDIO_STEP =	9
     16  f286
     17  f286		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f286		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f286		       00 07	   TITLE_LABEL_LINE =	7
     20  f286
     21  f286		       00 10	   TITLE_GAP_SIZE =	#16
     22  f286
     23  f286		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f286		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f286		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f286
     27  f286				   TitleInit
     28  f286
     29  f286							; Setup logic and kernel
      0  f286					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f286				   .POINTER   SET	VBlankPtr
      2  f286				   .ADDRESS   SET	TitleVerticalBlank
      3  f286
      4  f286		       a9 e7		      LDA	#<.ADDRESS
      5  f288		       85 88		      STA	.POINTER
      6  f28a		       a9 f2		      LDA	#>.ADDRESS
      7  f28c		       85 89		      STA	.POINTER+1
      8  f28e
      0  f28e					      SET_POINTER	KernelPtr, TitleKernel
      1  f28e				   .POINTER   SET	KernelPtr
      2  f28e				   .ADDRESS   SET	TitleKernel
      3  f28e
      4  f28e		       a9 a8		      LDA	#<.ADDRESS
      5  f290		       85 8a		      STA	.POINTER
      6  f292		       a9 f3		      LDA	#>.ADDRESS
      7  f294		       85 8b		      STA	.POINTER+1
      8  f296
      0  f296					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f296				   .POINTER   SET	OverScanPtr
      2  f296				   .ADDRESS   SET	TitleOverScan
      3  f296
      4  f296		       a9 58		      LDA	#<.ADDRESS
      5  f298		       85 8c		      STA	.POINTER
      6  f29a		       a9 f3		      LDA	#>.ADDRESS
      7  f29c		       85 8d		      STA	.POINTER+1
      8  f29e
     33  f29e
     34  f29e							; Load audio settings
     35  f29e
     36  f29e							; Melody Line
     37  f29e		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f2a0		       85 15		      sta	AUDC0
     39  f2a2		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f2a4		       85 19		      sta	AUDV0
     41  f2a6
     42  f2a6							; Drums and Bass
     43  f2a6		       a9 00		      lda	#0
     44  f2a8		       85 16		      sta	AUDC1
     45  f2aa		       85 1a		      sta	AUDV1
     46  f2ac
     47  f2ac							; Make it so that we play the first note immediately
     48  f2ac		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f2ae		       85 92		      sta	AudioStep
     50  f2b0		       a9 01		      lda	#1
     51  f2b2		       85 8f		      sta	FrameTimer
     52  f2b4
     53  f2b4							; Setup Spider Sprite
      0  f2b4					      SET_POINTER	SpiderPtr, TitleSpider
      1  f2b4				   .POINTER   SET	SpiderPtr
      2  f2b4				   .ADDRESS   SET	TitleSpider
      3  f2b4
      4  f2b4		       a9 aa		      LDA	#<.ADDRESS
      5  f2b6		       85 a3		      STA	.POINTER
      6  f2b8		       a9 f0		      LDA	#>.ADDRESS
      7  f2ba		       85 a4		      STA	.POINTER+1
      8  f2bc
     55  f2bc
     56  f2bc		       a5 81		      lda	NuSiz0
     57  f2be		       29 f8		      and	#%11111000
     58  f2c0		       09 06		      ora	#%00000110	; Triple Sprite
     59  f2c2		       85 81		      sta	NuSiz0
     60  f2c4		       85 04		      sta	NUSIZ0
     61  f2c6		       85 82		      sta	NuSiz1
     62  f2c8		       85 05		      sta	NUSIZ1
     63  f2ca
     64  f2ca		       a9 00		      lda	#0	; No reflect
     65  f2cc		       85 0b		      sta	REFP0
     66  f2ce		       a9 ff		      lda	#$FF	; Reflect P1
     67  f2d0		       85 0c		      sta	REFP1
     68  f2d2
     69  f2d2		       a9 00		      lda	#0
     70  f2d4		       85 aa		      sta	SpiderDrawPos	; Initialize animation state
     71  f2d6
     72  f2d6							; Setup Web Line
     73  f2d6							; Missle0 (2 clock size)
     74  f2d6		       a5 81		      lda	NuSiz0
     75  f2d8		       29 cf		      and	#%11001111
     76  f2da		       09 10		      ora	#%00010000
     77  f2dc		       85 81		      sta	NuSiz0
     78  f2de		       85 04		      sta	NUSIZ0
     79  f2e0
     80  f2e0							; Disable at start
     81  f2e0		       a9 00		      lda	#0
     82  f2e2		       85 1d		      sta	ENAM0
     83  f2e4
     84  f2e4							; Set initial button state
     85  f2e4							;lda #0
     86  f2e4		       85 91		      sta	InputState
     87  f2e6
     88  f2e6		       60		      rts
     89  f2e7
     90  f2e7				   TitleVerticalBlank
     91  f2e7
     92  f2e7							; Refresh random values
     93  f2e7		       20 13 f0 	      jsr	Random
     94  f2ea
     95  f2ea		       20 f4 f2 	      jsr	TitlePosition
     96  f2ed		       20 0e f3 	      jsr	TitleAnimation
     97  f2f0		       20 39 f3 	      jsr	TitleColor
     98  f2f3
     99  f2f3		       60		      rts
    100  f2f4
    101  f2f4				   TitlePosition
    102  f2f4
    103  f2f4							; Position Spider
    104  f2f4		       a2 00		      ldx	#0	; Object (player0)
    105  f2f6		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    106  f2f8		       20 00 f0 	      jsr	PosObject
    107  f2fb
    108  f2fb		       a2 01		      ldx	#1	; Object (player1)
    109  f2fd		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    110  f2ff		       20 00 f0 	      jsr	PosObject
    111  f302
    112  f302							; Position Web Line
    113  f302		       a2 02		      ldx	#2	; Object (missle0)
    114  f304		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    115  f306		       20 00 f0 	      jsr	PosObject
    116  f309
    117  f309		       85 02		      sta	WSYNC
    118  f30b		       85 2a		      sta	HMOVE
    119  f30d
    120  f30d		       60		      rts
    121  f30e
    122  f30e				   TitleAnimation
    123  f30e
    124  f30e		       a5 92		      lda	AudioStep
    125  f310							;cmp #0
    126  f310		       f0 0d		      beq	.title_animation_1
    127  f312		       c9 04		      cmp	#4
    128  f314		       f0 16		      beq	.title_animation_2
    129  f316		       c9 09		      cmp	#9
    130  f318		       f0 05		      beq	.title_animation_1
    131  f31a		       c9 0c		      cmp	#12
    132  f31c		       f0 0e		      beq	.title_animation_2
    133  f31e		       60		      rts
    134  f31f
    135  f31f				   .title_animation_1
      0  f31f					      SET_POINTER	SpiderPtr, TitleSpider
      1  f31f				   .POINTER   SET	SpiderPtr
      2  f31f				   .ADDRESS   SET	TitleSpider
      3  f31f
      4  f31f		       a9 aa		      LDA	#<.ADDRESS
      5  f321		       85 a3		      STA	.POINTER
      6  f323		       a9 f0		      LDA	#>.ADDRESS
      7  f325		       85 a4		      STA	.POINTER+1
      8  f327
    137  f327		       a9 00		      lda	#0
    138  f329		       85 aa		      sta	SpiderDrawPos
    139  f32b		       60		      rts
    140  f32c
    141  f32c				   .title_animation_2
      0  f32c					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f32c				   .POINTER   SET	SpiderPtr
      2  f32c				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f32c
      4  f32c		       a9 b3		      LDA	#<.ADDRESS
      5  f32e		       85 a3		      STA	.POINTER
      6  f330		       a9 f0		      LDA	#>.ADDRESS
      7  f332		       85 a4		      STA	.POINTER+1
      8  f334
    143  f334		       a9 01		      lda	#1
    144  f336		       85 aa		      sta	SpiderDrawPos
    145  f338		       60		      rts
    146  f339
    147  f339				   TitleColor
    148  f339
    149  f339							; Load Colors
    150  f339		       a9 00		      lda	#TITLE_BG_COLOR
    151  f33b		       85 09		      sta	COLUBK
    152  f33d		       a9 06		      lda	#TITLE_WEB_COLOR
    153  f33f		       85 08		      sta	COLUPF
    154  f341
    155  f341							; Check b/w
    156  f341		       ad 82 02 	      lda	SWCHB
    157  f344					      REPEAT	4
    158  f344		       4a		      lsr
    157  f344					      REPEND
    158  f345		       4a		      lsr
    157  f345					      REPEND
    158  f346		       4a		      lsr
    157  f346					      REPEND
    158  f347		       4a		      lsr
    159  f348					      REPEND
    160  f348		       90 07		      bcc	.title_bw
    161  f34a
    162  f34a				   .title_color
    163  f34a		       a9 56		      lda	#TITLE_SPIDER_COLOR
    164  f34c		       85 06		      sta	COLUP0
    165  f34e		       85 07		      sta	COLUP1
    166  f350
    167  f350		       60		      rts
    168  f351
    169  f351				   .title_bw
    170  f351							; Load B/W Colors
    171  f351		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    172  f353		       85 06		      sta	COLUP0
    173  f355		       85 07		      sta	COLUP1
    174  f357
    175  f357		       60		      rts
    176  f358
    177  f358				   TitleOverScan
    178  f358		       20 5f f3 	      jsr	TitleAudio
    179  f35b		       20 97 f3 	      jsr	TitleState
    180  f35e		       60		      rts
    181  f35f
    182  f35f				   TitleAudio
    183  f35f
    184  f35f		       a6 8f		      ldx	FrameTimer
    185  f361		       e0 00		      cpx	#0
    186  f363		       d0 31		      bne	.title_audio_return
    187  f365
    188  f365							; Reset Timer
    189  f365		       a2 09		      ldx	#TITLE_AUDIO_STEP
    190  f367		       86 8f		      stx	FrameTimer
    191  f369
    192  f369				   .title_audio_play
    193  f369
    194  f369							; Increment melody position
    195  f369		       a4 92		      ldy	AudioStep
    196  f36b		       c8		      iny
    197  f36c
    198  f36c							; Check if we're at the end of the melody
    199  f36c		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    200  f36e		       d0 02		      bne	.title_audio_play_note
    201  f370
    202  f370							; Loop our audio step
    203  f370		       a0 00		      ldy	#0
    204  f372
    205  f372				   .title_audio_play_note
    206  f372
    207  f372							; Save current position
    208  f372		       84 92		      sty	AudioStep
    209  f374
    210  f374							; Basic Melody Line
    211  f374		       b9 94 f4 	      lda	TitleAudio0,y
    212  f377		       85 17		      sta	AUDF0
    213  f379
    214  f379							; Drums and Bass
    215  f379		       b9 a4 f4 	      lda	TitleTone1,y
    216  f37c		       c9 ff		      cmp	#$FF
    217  f37e		       f0 0e		      beq	.title_audio_play_note_1_mute
    218  f380
    219  f380		       85 16		      sta	AUDC1
    220  f382		       b9 b4 f4 	      lda	TitleAudio1,y
    221  f385		       85 18		      sta	AUDF1
    222  f387		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    223  f389		       85 1a		      sta	AUDV1
    224  f38b
    225  f38b		       4c 96 f3 	      jmp	.title_audio_return
    226  f38e
    227  f38e				   .title_audio_play_note_1_mute
    228  f38e
    229  f38e		       a9 00		      lda	#0
    230  f390		       85 18		      sta	AUDF1
    231  f392		       85 16		      sta	AUDC1
    232  f394		       85 1a		      sta	AUDV1
    233  f396
    234  f396				   .title_audio_return
    235  f396		       60		      rts
    236  f397
    237  f397				   TitleState
    238  f397
    239  f397							; Check if Fire Button on controller 1 is released
    240  f397		       a5 0c		      lda	INPT4
    241  f399		       30 05		      bmi	.title_state_check
    242  f39b
    243  f39b				   .title_state_on
    244  f39b		       a9 01		      lda	#1
    245  f39d		       85 91		      sta	InputState
    246  f39f		       60		      rts
    247  f3a0
    248  f3a0				   .title_state_check
    249  f3a0		       a5 91		      lda	InputState
    250  f3a2		       f0 03		      beq	.title_state_return
    251  f3a4
    252  f3a4				   .title_state_next
    253  f3a4							; Button is released, load up game
    254  f3a4		       20 6e fc 	      jsr	GameInit
    255  f3a7
    256  f3a7				   .title_state_return
    257  f3a7		       60		      rts
    258  f3a8
    259  f3a8				   TitleKernel
    260  f3a8
    261  f3a8							; Playfield Control
    262  f3a8		       a5 80		      lda	CtrlPf
    263  f3aa		       29 fe		      and	#%11111110	; No mirroring
    264  f3ac		       85 80		      sta	CtrlPf
    265  f3ae		       85 0a		      sta	CTRLPF
    266  f3b0
    267  f3b0							; Turn on display
    268  f3b0		       a9 00		      lda	#0
    269  f3b2		       85 01		      sta	VBLANK
    270  f3b4
    271  f3b4		       85 02		      sta	WSYNC
    272  f3b6
    273  f3b6				   TitleFrameTopDraw
    274  f3b6
    275  f3b6							; Start Counters
    276  f3b6		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    277  f3b8		       a0 00		      ldy	#0	; Image Counter
    278  f3ba
    279  f3ba				   .title_frame_top
    280  f3ba
    281  f3ba							; 76 machine cycles per scanline
    282  f3ba		       85 02		      sta	WSYNC
    283  f3bc
    284  f3bc				   .title_frame_top_load		; 66 cycles
    285  f3bc
    286  f3bc							; First half of image
    287  f3bc		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    288  f3bf		       85 0d		      sta	PF0	; 4
    289  f3c1		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    290  f3c4		       85 0e		      sta	PF1	; 4
    291  f3c6		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    292  f3c9		       85 0f		      sta	PF2	; 4
    293  f3cb
      0  f3cb					      sleep	6
      1  f3cb				   .CYCLES    SET	6
      2  f3cb
      3  f3cb				  -	      IF	.CYCLES < 2
      4  f3cb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3cb				  -	      ERR
      6  f3cb					      ENDIF
      7  f3cb
      8  f3cb				  -	      IF	.CYCLES & 1
      9  f3cb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3cb				  -	      nop	0
     11  f3cb				  -	      ELSE
     12  f3cb				  -	      bit	VSYNC
     13  f3cb				  -	      ENDIF
     14  f3cb				  -.CYCLES    SET	.CYCLES - 3
     15  f3cb					      ENDIF
     16  f3cb
     17  f3cb					      REPEAT	.CYCLES / 2
     18  f3cb		       ea		      nop
     17  f3cb					      REPEND
     18  f3cc		       ea		      nop
     17  f3cc					      REPEND
     18  f3cd		       ea		      nop
     19  f3ce					      REPEND
    295  f3ce
    296  f3ce							; Second half of image
    297  f3ce		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    298  f3d1		       85 0d		      sta	PF0	; 4
    299  f3d3		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    300  f3d6		       85 0e		      sta	PF1	; 4
    301  f3d8		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    302  f3db		       85 0f		      sta	PF2	; 4
    303  f3dd
    304  f3dd				   .title_frame_top_index		; 4 cycles
    305  f3dd
    306  f3dd		       ca		      dex		; 2
    307  f3de		       d0 da		      bne	.title_frame_top	; 2
    308  f3e0
    309  f3e0				   .title_frame_top_index_next		; 6 cycles
    310  f3e0
    311  f3e0							; Restore scanline counter
    312  f3e0		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    313  f3e2
    314  f3e2		       98		      tya		; 2
    315  f3e3		       18		      clc		; 2
    316  f3e4		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    317  f3e6		       a8		      tay		; 2
    318  f3e7
    319  f3e7		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    320  f3e9		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    321  f3eb		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    322  f3ed		       85 08		      sta	COLUPF	; 4
    323  f3ef		       ea		      nop		; 2
    324  f3f0		       4c bc f3 	      jmp	.title_frame_top_load	; 3
    325  f3f3
    326  f3f3				   .title_frame_top_label_color_skip
    327  f3f3
    328  f3f3		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    329  f3f5		       d0 c3		      bne	.title_frame_top	; 2
    330  f3f7
    331  f3f7				   .title_frame_top_clean
    332  f3f7
    333  f3f7							; Clear out playfield
    334  f3f7		       a9 00		      lda	#0
    335  f3f9		       85 0d		      sta	PF0
    336  f3fb		       85 0e		      sta	PF1
    337  f3fd		       85 0f		      sta	PF2
    338  f3ff
    339  f3ff				   TitleWebDraw
    340  f3ff		       a9 02		      lda	#%00000010
    341  f401		       85 1d		      sta	ENAM0
    342  f403
    343  f403		       a9 06		      lda	#TITLE_WEB_COLOR
    344  f405		       85 06		      sta	COLUP0
    345  f407
    346  f407		       a2 10		      ldx	#TITLE_GAP_SIZE
    347  f409				   .title_web_gap
    348  f409		       ca		      dex
    349  f40a		       85 02		      sta	WSYNC
    350  f40c		       d0 fb		      bne	.title_web_gap
    351  f40e
    352  f40e				   TitleSpiderDraw
    353  f40e
    354  f40e		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    355  f410
    356  f410		       a5 aa		      lda	SpiderDrawPos
    357  f412		       c9 01		      cmp	#1
    358  f414		       d0 0c		      bne	.title_spider_extra_web_disable
    359  f416
    360  f416				   .title_spider_extra_web_start
    361  f416		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    362  f418				   .title_spider_extra_web_loop
    363  f418		       85 02		      sta	WSYNC
    364  f41a		       ca		      dex
    365  f41b		       d0 fb		      bne	.title_spider_extra_web_loop
    366  f41d
    367  f41d		       88		      dey
    368  f41e		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    369  f420		       d0 f4		      bne	.title_spider_extra_web_start
    370  f422
    371  f422				   .title_spider_extra_web_disable
    372  f422		       a9 00		      lda	#0
    373  f424		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    374  f426
    375  f426		       85 02		      sta	WSYNC
    376  f428
    377  f428		       85 1d		      sta	ENAM0
    378  f42a
    379  f42a							; Check b/w
    380  f42a		       ad 82 02 	      lda	SWCHB
    381  f42d					      REPEAT	4
    382  f42d		       4a		      lsr
    381  f42d					      REPEND
    382  f42e		       4a		      lsr
    381  f42e					      REPEND
    382  f42f		       4a		      lsr
    381  f42f					      REPEND
    382  f430		       4a		      lsr
    383  f431					      REPEND
    384  f431		       90 05		      bcc	.title_spider_bw
    385  f433
    386  f433				   .title_spider_color
    387  f433		       a9 56		      lda	#TITLE_SPIDER_COLOR
    388  f435		       4c 3a f4 	      jmp	.title_spider_color_set
    389  f438				   .title_spider_bw
    390  f438		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    391  f43a				   .title_spider_color_set
    392  f43a		       85 06		      sta	COLUP0
    393  f43c
    394  f43c				   .title_spider
    395  f43c		       b1 a3		      lda	(SpiderPtr),y
    396  f43e		       85 1b		      sta	GRP0
    397  f440		       85 1c		      sta	GRP1
    398  f442
    399  f442				   .title_spider_delay
    400  f442		       ca		      dex
    401  f443		       85 02		      sta	WSYNC
    402  f445		       d0 fb		      bne	.title_spider_delay
    403  f447
    404  f447				   .title_spider_index
    405  f447		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    406  f449		       88		      dey
    407  f44a		       10 f0		      bpl	.title_spider
    408  f44c
    409  f44c				   .title_spider_clean
    410  f44c
    411  f44c							; Clear sprites
    412  f44c		       a9 00		      lda	#0
    413  f44e		       85 1b		      sta	GRP0
    414  f450		       85 1c		      sta	GRP1
    415  f452
    416  f452				   TitleFrameBottomDraw
    417  f452
    418  f452							; Load Frame Color
    419  f452		       a9 06		      lda	#TITLE_WEB_COLOR
    420  f454		       85 08		      sta	COLUPF
    421  f456
    422  f456							; Start Counters
    423  f456		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    424  f458		       a0 00		      ldy	#0	; Image Counter
    425  f45a
    426  f45a				   .title_frame_bottom
    427  f45a
    428  f45a							; 76 machine cycles per scanline
    429  f45a		       85 02		      sta	WSYNC
    430  f45c
    431  f45c				   .title_frame_bottom_load		; 66 cycles
    432  f45c
    433  f45c							; First half of image
    434  f45c		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    435  f45f		       85 0d		      sta	PF0	; 4
    436  f461		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    437  f464		       85 0e		      sta	PF1	; 4
    438  f466		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    439  f469		       85 0f		      sta	PF2	; 4
    440  f46b
      0  f46b					      sleep	6
      1  f46b				   .CYCLES    SET	6
      2  f46b
      3  f46b				  -	      IF	.CYCLES < 2
      4  f46b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f46b				  -	      ERR
      6  f46b					      ENDIF
      7  f46b
      8  f46b				  -	      IF	.CYCLES & 1
      9  f46b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f46b				  -	      nop	0
     11  f46b				  -	      ELSE
     12  f46b				  -	      bit	VSYNC
     13  f46b				  -	      ENDIF
     14  f46b				  -.CYCLES    SET	.CYCLES - 3
     15  f46b					      ENDIF
     16  f46b
     17  f46b					      REPEAT	.CYCLES / 2
     18  f46b		       ea		      nop
     17  f46b					      REPEND
     18  f46c		       ea		      nop
     17  f46c					      REPEND
     18  f46d		       ea		      nop
     19  f46e					      REPEND
    442  f46e
    443  f46e							; Second half of image
    444  f46e		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    445  f471		       85 0d		      sta	PF0	; 4
    446  f473		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    447  f476		       85 0e		      sta	PF1	; 4
    448  f478		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    449  f47b		       85 0f		      sta	PF2	; 4
    450  f47d
    451  f47d				   .title_frame_bottom_index		; 4 cycles
    452  f47d
    453  f47d		       ca		      dex		; 2
    454  f47e		       d0 da		      bne	.title_frame_bottom	; 2
    455  f480
    456  f480				   .title_frame_bottom_index_next		; 6 cycles
    457  f480
    458  f480							; Restore scanline counter
    459  f480		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    460  f482
    461  f482		       98		      tya		; 2
    462  f483		       18		      clc		; 2
    463  f484		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    464  f486		       a8		      tay		; 2
    465  f487		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    466  f489		       d0 cf		      bne	.title_frame_bottom	; 2
    467  f48b
    468  f48b				   .title_frame_bottom_clean
    469  f48b
    470  f48b							; Clear out playfield
    471  f48b		       a9 00		      lda	#0
    472  f48d		       85 0d		      sta	PF0
    473  f48f		       85 0e		      sta	PF1
    474  f491		       85 0f		      sta	PF2
    475  f493
    476  f493				   .title_kernel_return
    477  f493		       60		      rts
    478  f494
    479  f494				   TitleAudio0
    480  f494
    481  f494		       0f		      .BYTE.b	#15	; B
    482  f495		       13		      .BYTE.b	#19	; G
    483  f496		       17		      .BYTE.b	#23	; E
    484  f497		       13		      .BYTE.b	#19	; G
    485  f498		       0e		      .BYTE.b	#14	; C
    486  f499		       13		      .BYTE.b	#19
    487  f49a		       17		      .BYTE.b	#23
    488  f49b		       13		      .BYTE.b	#19
    489  f49c		       0c		      .BYTE.b	#12	; D
    490  f49d		       13		      .BYTE.b	#19
    491  f49e		       17		      .BYTE.b	#23
    492  f49f		       13		      .BYTE.b	#19
    493  f4a0		       0e		      .BYTE.b	#14	; C
    494  f4a1		       13		      .BYTE.b	#19
    495  f4a2		       17		      .BYTE.b	#23
    496  f4a3		       13		      .BYTE.b	#19
    497  f4a4
    498  f4a4				   TitleTone1
    499  f4a4
    500  f4a4		       0f		      .BYTE.b	#15	; Electronic Rumble
    501  f4a5		       ff		      .BYTE.b	#$FF
    502  f4a6		       01		      .BYTE.b	#1	; Low Pure Tone
    503  f4a7		       01		      .BYTE.b	#1
    504  f4a8		       08		      .BYTE.b	#8	; White Noise
    505  f4a9		       01		      .BYTE.b	#1
    506  f4aa		       01		      .BYTE.b	#1
    507  f4ab		       ff		      .BYTE.b	#$FF
    508  f4ac		       ff		      .BYTE.b	#$FF
    509  f4ad		       0f		      .BYTE.b	#15
    510  f4ae		       ff		      .BYTE.b	#$FF
    511  f4af		       ff		      .BYTE.b	#$FF
    512  f4b0		       08		      .BYTE.b	#8
    513  f4b1		       ff		      .BYTE.b	#$FF
    514  f4b2		       01		      .BYTE.b	#1
    515  f4b3		       01		      .BYTE.b	#1
    516  f4b4
    517  f4b4				   TitleAudio1
    518  f4b4
    519  f4b4		       1d		      .BYTE.b	#29	; Kick
    520  f4b5		       ff		      .BYTE.b	#$FF
    521  f4b6		       1f		      .BYTE.b	#31	; C
    522  f4b7		       1f		      .BYTE.b	#31
    523  f4b8		       07		      .BYTE.b	#7	; Snare
    524  f4b9		       1f		      .BYTE.b	#31
    525  f4ba		       1f		      .BYTE.b	#31
    526  f4bb		       ff		      .BYTE.b	#$FF
    527  f4bc		       ff		      .BYTE.b	#$FF
    528  f4bd		       1d		      .BYTE.b	#29
    529  f4be		       ff		      .BYTE.b	#$FF
    530  f4bf		       ff		      .BYTE.b	#$FF
    531  f4c0		       07		      .BYTE.b	#7
    532  f4c1		       ff		      .BYTE.b	#$FF
    533  f4c2		       17		      .BYTE.b	#23	; F
    534  f4c3		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4c4					      include	"game.asm"
      1  f4c4							;================
      2  f4c4							; Game
      3  f4c4							;================
      4  f4c4
      5  f4c4							; Constants
      6  f4c4
      7  f4c4		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f4c4		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4c4		       00 09	   GAME_AUDIO_STEP =	9
     10  f4c4		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4c4		       00 06	   GAME_AUDIO_TONE =	6
     12  f4c4
     13  f4c4							; Object Code
     14  f4c4
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f4c4					      include	"objects/level.asm"
      1  f4c4							;======================
      2  f4c4							; Level Logic
      3  f4c4							;======================
      4  f4c4
      5  f4c4							; Constants
      6  f4c4
      7  f4c4		       00 13	   LEVELS     =	19
      8  f4c4
      9  f4c4				   LevelInit
     10  f4c4
     11  f4c4							; Set beginning level by difficulty switches treated as binary
     12  f4c4		       ad 82 02 	      lda	SWCHB
     13  f4c7					      REPEAT	6
     14  f4c7		       4a		      lsr
     13  f4c7					      REPEND
     14  f4c8		       4a		      lsr
     13  f4c8					      REPEND
     14  f4c9		       4a		      lsr
     13  f4c9					      REPEND
     14  f4ca		       4a		      lsr
     13  f4ca					      REPEND
     14  f4cb		       4a		      lsr
     13  f4cb					      REPEND
     14  f4cc		       4a		      lsr
     15  f4cd					      REPEND
     16  f4cd		       29 03		      and	#%00000011
     17  f4cf		       85 9f		      sta	LevelCurrent
     18  f4d1
     19  f4d1		       20 f7 f4 	      jsr	LevelLoad
     20  f4d4
     21  f4d4		       60		      rts
     22  f4d5
     23  f4d5				   LevelUpdate
     24  f4d5
     25  f4d5							; Calculate Desired score: (level+2)*5
     26  f4d5		       a5 9f		      lda	LevelCurrent
     27  f4d7		       18		      clc
     28  f4d8		       69 02		      adc	#2	; +2
     29  f4da		       85 83		      sta	Temp
     30  f4dc		       0a		      asl		; x2
     31  f4dd		       0a		      asl		; x2
     32  f4de		       65 83		      adc	Temp	; x1
     33  f4e0
     34  f4e0							; Check if score is high enough
     35  f4e0		       c5 95		      cmp	ScoreValue+1
     36  f4e2		       b0 0f		      bcs	.level_update_return
     37  f4e4
     38  f4e4							; Reset score
     39  f4e4		       a9 00		      lda	#0
     40  f4e6		       85 95		      sta	ScoreValue+1
     41  f4e8
     42  f4e8							; Check if we haven't reached the final level
     43  f4e8		       a5 9f		      lda	LevelCurrent
     44  f4ea		       c9 12		      cmp	#LEVELS-1
     45  f4ec		       b0 05		      bcs	.level_update_return
     46  f4ee
     47  f4ee		       e6 9f		      inc	LevelCurrent
     48  f4f0		       20 f7 f4 	      jsr	LevelLoad
     49  f4f3
     50  f4f3				   .level_update_return
     51  f4f3
     52  f4f3		       20 1a f5 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     53  f4f6
     54  f4f6		       60		      rts
     55  f4f7
     56  f4f7				   LevelLoad
     57  f4f7
     58  f4f7							; Bug Speed: level/4+2
     59  f4f7		       a5 9f		      lda	LevelCurrent
     60  f4f9		       4a		      lsr		; /2
     61  f4fa		       4a		      lsr		; /2
     62  f4fb		       69 02		      adc	#2
     63  f4fd		       85 b7		      sta	BugSpeed
     64  f4ff
     65  f4ff							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     66  f4ff		       a9 14		      lda	#20
     67  f501		       18		      clc
     68  f502		       e5 9f		      sbc	LevelCurrent
     69  f504		       0a		      asl		; x2
     70  f505		       85 83		      sta	Temp
     71  f507		       0a		      asl		; x2
     72  f508		       0a		      asl		; x2
     73  f509		       65 83		      adc	Temp
     74  f50b		       85 c6		      sta	SwatterWaitTime
     75  f50d
     76  f50d							; Swatter Hit Damage: level*3+$10
     77  f50d		       a5 9f		      lda	LevelCurrent
     78  f50f		       18		      clc
     79  f510		       85 83		      sta	Temp
     80  f512		       0a		      asl		; x2
     81  f513		       65 83		      adc	Temp
     82  f515		       69 10		      adc	#$10
     83  f517		       85 c7		      sta	SwatterHitDamage
     84  f519
     85  f519		       60		      rts
     86  f51a
     87  f51a				   LevelLoadColor
     88  f51a		       a4 9f		      ldy	LevelCurrent
     89  f51c
     90  f51c							; check b/w
     91  f51c		       ad 82 02 	      lda	SWCHB
     92  f51f					      REPEAT	4
     93  f51f		       4a		      lsr
     92  f51f					      REPEND
     93  f520		       4a		      lsr
     92  f520					      REPEND
     93  f521		       4a		      lsr
     92  f521					      REPEND
     93  f522		       4a		      lsr
     94  f523					      REPEND
     95  f523		       90 0b		      bcc	.level_load_bw
     96  f525
     97  f525				   .level_load_color
     98  f525
     99  f525							; Background Color
    100  f525		       b9 39 f5 	      lda	LevelDataBk,y
    101  f528		       85 a1		      sta	WebColor+0
    102  f52a
    103  f52a							; Web Color
    104  f52a		       b9 4c f5 	      lda	LevelDataPf,y
    105  f52d		       85 a2		      sta	WebColor+1
    106  f52f
    107  f52f		       60		      rts
    108  f530
    109  f530				   .level_load_bw
    110  f530
    111  f530							; Background Color
    112  f530		       a9 00		      lda	#WEB_BG_COLOR
    113  f532		       85 a1		      sta	WebColor+0
    114  f534
    115  f534							; Web Color
    116  f534		       a9 02		      lda	#WEB_FG_COLOR
    117  f536		       85 a2		      sta	WebColor+1
    118  f538
    119  f538		       60		      rts
    120  f539
    121  f539							; Easy: 1-5
    122  f539							; Medium: 6-9
    123  f539							; Hard: 10-15
    124  f539							; Extreme: 16-19
    125  f539
    126  f539				   LevelDataBk		; Background Color
    127  f539		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    128  f53a		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    129  f53b		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    130  f53c		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    131  f53d		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    132  f53e		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    133  f53f		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    134  f540		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    135  f541		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    136  f542		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    137  f543		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    138  f544		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    139  f545		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    140  f546		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    141  f547		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    142  f548		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    143  f549		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    144  f54a		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    145  f54b		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    146  f54c
    147  f54c				   LevelDataPf		; Web Color
    148  f54c		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    149  f54d		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    150  f54e		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    151  f54f		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    152  f550		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    153  f551		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    154  f552		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    155  f553		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    156  f554		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    157  f555		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    158  f556		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    159  f557		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    160  f558		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    161  f559		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    162  f55a		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    163  f55b		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    164  f55c		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    165  f55d		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    166  f55e		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f55f					      include	"objects/score.asm"
      1  f55f							;======================
      2  f55f							; Score (playfield)
      3  f55f							;======================
      4  f55f
      5  f55f							; Constants
      6  f55f
      7  f55f		       00 00	   SCORE_BG_COLOR =	#$00
      8  f55f		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f55f		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f55f		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f55f		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f55f		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f55f
     14  f55f		       00 05	   SCORE_LABEL_SIZE =	5
     15  f55f		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f55f		       00 02	   SCORE_LINE_SIZE =	2
     17  f55f		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f55f
     19  f55f							; Initialization
     20  f55f
     21  f55f				   ScoreInit
     22  f55f
     23  f55f							; Health Score
     24  f55f		       a9 ff		      lda	#$ff
     25  f561		       85 94		      sta	ScoreValue+0
     26  f563
     27  f563							; Game Score
     28  f563		       a9 00		      lda	#0
     29  f565		       85 95		      sta	ScoreValue+1
     30  f567
     31  f567		       60		      rts
     32  f568
     33  f568							; Frame Update
     34  f568
     35  f568				   ScoreUpdate
     36  f568
     37  f568							; Current Level Digits
     38  f568		       a5 9f		      lda	LevelCurrent
     39  f56a		       18		      clc
     40  f56b		       69 01		      adc	#1
     41  f56d
     42  f56d		       20 21 f0 	      jsr	BinBcdConvert
     43  f570
     44  f570							; Only use first byte
     45  f570		       8a		      txa
     46  f571		       29 0f		      and	#$0f
     47  f573		       a8		      tay
     48  f574		       8a		      txa
     49  f575		       29 f0		      and	#$f0
     50  f577					      REPEAT	4
     51  f577		       4a		      lsr
     50  f577					      REPEND
     51  f578		       4a		      lsr
     50  f578					      REPEND
     51  f579		       4a		      lsr
     50  f579					      REPEND
     51  f57a		       4a		      lsr
     52  f57b					      REPEND
     53  f57b		       aa		      tax
     54  f57c
     55  f57c							; Adjust index positions by multiplying by 5
     56  f57c		       8a		      txa
     57  f57d		       85 83		      sta	Temp
     58  f57f		       0a		      asl
     59  f580		       0a		      asl
     60  f581		       65 83		      adc	Temp
     61  f583		       85 98		      sta	ScoreDigitTens
     62  f585
     63  f585		       98		      tya
     64  f586		       85 83		      sta	Temp
     65  f588		       0a		      asl
     66  f589		       0a		      asl
     67  f58a		       65 83		      adc	Temp
     68  f58c		       85 96		      sta	ScoreDigitOnes
     69  f58e
     70  f58e							; Score Digits
     71  f58e		       a5 95		      lda	ScoreValue+1
     72  f590
     73  f590		       20 21 f0 	      jsr	BinBcdConvert
     74  f593
     75  f593							; Only use first byte
     76  f593		       8a		      txa
     77  f594		       29 0f		      and	#$0f
     78  f596		       a8		      tay
     79  f597		       8a		      txa
     80  f598		       29 f0		      and	#$f0
     81  f59a					      REPEAT	4
     82  f59a		       4a		      lsr
     81  f59a					      REPEND
     82  f59b		       4a		      lsr
     81  f59b					      REPEND
     82  f59c		       4a		      lsr
     81  f59c					      REPEND
     82  f59d		       4a		      lsr
     83  f59e					      REPEND
     84  f59e		       aa		      tax
     85  f59f
     86  f59f							; Adjust index positions by multiplying by 5
     87  f59f		       8a		      txa
     88  f5a0		       85 83		      sta	Temp
     89  f5a2		       0a		      asl
     90  f5a3		       0a		      asl
     91  f5a4		       65 83		      adc	Temp
     92  f5a6		       85 99		      sta	ScoreDigitTens+1
     93  f5a8
     94  f5a8		       98		      tya
     95  f5a9		       85 83		      sta	Temp
     96  f5ab		       0a		      asl
     97  f5ac		       0a		      asl
     98  f5ad		       65 83		      adc	Temp
     99  f5af		       85 97		      sta	ScoreDigitOnes+1
    100  f5b1
    101  f5b1							; Health Bar
    102  f5b1		       a5 94		      lda	ScoreValue+0
    103  f5b3		       f0 1c		      beq	.score_update_bar_empty
    104  f5b5
    105  f5b5					      REPEAT	4
    106  f5b5		       4a		      lsr
    105  f5b5					      REPEND
    106  f5b6		       4a		      lsr
    105  f5b6					      REPEND
    106  f5b7		       4a		      lsr
    105  f5b7					      REPEND
    106  f5b8		       4a		      lsr
    107  f5b9					      REPEND
    108  f5b9		       c9 08		      cmp	#8
    109  f5bb		       b0 09		      bcs	.score_update_bar_top
    110  f5bd
    111  f5bd				   .score_update_bar_bottom
    112  f5bd		       aa		      tax
    113  f5be		       bd e4 f6 	      lda	ScoreBar,x
    114  f5c1		       a0 00		      ldy	#$00
    115  f5c3		       4c d5 f5 	      jmp	.score_update_bar_store
    116  f5c6
    117  f5c6				   .score_update_bar_top
    118  f5c6		       29 07		      and	#%00000111
    119  f5c8		       aa		      tax
    120  f5c9		       a9 7f		      lda	#$7f
    121  f5cb		       bc ec f6 	      ldy	ScoreBarFlip,x
    122  f5ce		       4c d5 f5 	      jmp	.score_update_bar_store
    123  f5d1
    124  f5d1				   .score_update_bar_empty
    125  f5d1		       a9 00		      lda	#0
    126  f5d3		       a0 00		      ldy	#0
    127  f5d5
    128  f5d5				   .score_update_bar_store
    129  f5d5		       85 9d		      sta	ScoreBarGfx+0
    130  f5d7		       84 9e		      sty	ScoreBarGfx+1
    131  f5d9
    132  f5d9				   .score_update_end
    133  f5d9		       60		      rts
    134  f5da
    135  f5da							; Draw loop (uses SCORE_LINES scanlines)
    136  f5da
    137  f5da				   ScoreDraw
    138  f5da
    139  f5da							; Load Colors
    140  f5da		       a9 00		      lda	#SCORE_BG_COLOR
    141  f5dc		       85 09		      sta	COLUBK
    142  f5de		       a9 06		      lda	#SCORE_LABEL_COLOR
    143  f5e0		       85 08		      sta	COLUPF
    144  f5e2		       85 06		      sta	COLUP0
    145  f5e4		       85 07		      sta	COLUP1
    146  f5e6
    147  f5e6							; Set Non-Mirror
    148  f5e6		       a5 80		      lda	CtrlPf
    149  f5e8		       29 fc		      and	#%11111100
    150  f5ea		       09 02		      ora	#%00000010
    151  f5ec		       85 80		      sta	CtrlPf
    152  f5ee		       85 0a		      sta	CTRLPF
    153  f5f0
    154  f5f0		       a2 00		      ldx	#0
    155  f5f2				   .score_draw_label
    156  f5f2
    157  f5f2		       85 02		      sta	WSYNC
    158  f5f4
    159  f5f4							; First half of image
    160  f5f4		       bd 20 f1 	      lda	ScoreLabel+0,x	; 4
    161  f5f7		       85 0d		      sta	PF0	; 3
    162  f5f9		       bd 21 f1 	      lda	ScoreLabel+1,x
    163  f5fc		       85 0e		      sta	PF1
    164  f5fe		       bd 22 f1 	      lda	ScoreLabel+2,x
    165  f601		       85 0f		      sta	PF2
    166  f603
      0  f603					      sleep	8
      1  f603				   .CYCLES    SET	8
      2  f603
      3  f603				  -	      IF	.CYCLES < 2
      4  f603				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f603				  -	      ERR
      6  f603					      ENDIF
      7  f603
      8  f603				  -	      IF	.CYCLES & 1
      9  f603				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f603				  -	      nop	0
     11  f603				  -	      ELSE
     12  f603				  -	      bit	VSYNC
     13  f603				  -	      ENDIF
     14  f603				  -.CYCLES    SET	.CYCLES - 3
     15  f603					      ENDIF
     16  f603
     17  f603					      REPEAT	.CYCLES / 2
     18  f603		       ea		      nop
     17  f603					      REPEND
     18  f604		       ea		      nop
     17  f604					      REPEND
     18  f605		       ea		      nop
     17  f605					      REPEND
     18  f606		       ea		      nop
     19  f607					      REPEND
    168  f607
    169  f607							; Second half of image
    170  f607							;lda ScoreLabel+3,x ; 4
    171  f607		       a9 00		      lda	#0	; 2
    172  f609		       85 0d		      sta	PF0	; 3
    173  f60b		       bd 24 f1 	      lda	ScoreLabel+4,x
    174  f60e		       85 0e		      sta	PF1
    175  f610		       bd 25 f1 	      lda	ScoreLabel+5,x
    176  f613		       85 0f		      sta	PF2
    177  f615
    178  f615		       8a		      txa
    179  f616		       18		      clc
    180  f617		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    181  f619		       aa		      tax
    182  f61a		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    183  f61c		       d0 d4		      bne	.score_draw_label
    184  f61e
    185  f61e							; Clear labels and setup color
    186  f61e		       a9 00		      lda	#0
    187  f620		       85 0d		      sta	PF0
    188  f622		       85 0e		      sta	PF1
    189  f624		       85 0f		      sta	PF2
    190  f626
    191  f626		       85 02		      sta	WSYNC
    192  f628
    193  f628							; Load Colors
    194  f628		       ad 82 02 	      lda	SWCHB
    195  f62b					      REPEAT	4
    196  f62b		       4a		      lsr
    195  f62b					      REPEND
    196  f62c		       4a		      lsr
    195  f62c					      REPEND
    196  f62d		       4a		      lsr
    195  f62d					      REPEND
    196  f62e		       4a		      lsr
    197  f62f					      REPEND
    198  f62f		       90 0d		      bcc	.score_draw_bw
    199  f631
    200  f631				   .score_draw_color
    201  f631		       a9 44		      lda	#SCORE_LEVEL_COLOR
    202  f633		       85 08		      sta	COLUPF
    203  f635		       85 06		      sta	COLUP0
    204  f637		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    205  f639		       85 07		      sta	COLUP1
    206  f63b
    207  f63b		       4c 48 f6 	      jmp	.score_draw_digit_start
    208  f63e
    209  f63e				   .score_draw_bw
    210  f63e		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    211  f640		       85 08		      sta	COLUPF
    212  f642		       85 06		      sta	COLUP0
    213  f644		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    214  f646		       85 07		      sta	COLUP1
    215  f648
    216  f648				   .score_draw_digit_start
    217  f648
    218  f648		       85 02		      sta	WSYNC
    219  f64a
    220  f64a							; Prepare initial line
    221  f64a
    222  f64a							; Level
    223  f64a		       a4 98		      ldy	ScoreDigitTens
    224  f64c		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    225  f64f		       29 f0		      and	#$f0
    226  f651		       85 9a		      sta	ScoreDigitGfx
    227  f653
    228  f653		       a4 96		      ldy	ScoreDigitOnes
    229  f655		       b9 bc f0 	      lda	ScoreDigits,y
    230  f658		       29 f0		      and	#$f0
    231  f65a		       85 9b		      sta	ScoreDigitGfx+1
    232  f65c
    233  f65c							; Score
    234  f65c		       a4 99		      ldy	ScoreDigitTens+1
    235  f65e		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    236  f661		       29 0f		      and	#$0f
    237  f663		       85 9c		      sta	ScoreDigitGfx+2
    238  f665
    239  f665		       a4 97		      ldy	ScoreDigitOnes+1
    240  f667		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    241  f66a		       29 f0		      and	#$f0
    242  f66c		       05 9c		      ora	ScoreDigitGfx+2
    243  f66e		       85 9c		      sta	ScoreDigitGfx+2
    244  f670
    245  f670		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    246  f672		       a5 9a		      lda	ScoreDigitGfx
    247  f674		       85 02		      sta	WSYNC
    248  f676				   .score_draw_digit
    249  f676
    250  f676							;lda ScoreDigitGfx
    251  f676		       85 0d		      sta	PF0
    252  f678		       a5 9b		      lda	ScoreDigitGfx+1
    253  f67a		       85 0e		      sta	PF1
    254  f67c		       a5 9c		      lda	ScoreDigitGfx+2
    255  f67e		       85 0f		      sta	PF2
    256  f680
    257  f680							; Begin preparing next line
    258  f680		       e6 96		      inc	ScoreDigitOnes
    259  f682		       e6 98		      inc	ScoreDigitTens
    260  f684		       e6 97		      inc	ScoreDigitOnes+1
    261  f686		       e6 99		      inc	ScoreDigitTens+1
    262  f688
    263  f688		       a9 00		      lda	#0
    264  f68a		       85 0d		      sta	PF0
    265  f68c		       a5 9d		      lda	ScoreBarGfx+0
    266  f68e		       85 0e		      sta	PF1
    267  f690		       a5 9e		      lda	ScoreBarGfx+1
    268  f692		       85 0f		      sta	PF2
    269  f694
    270  f694							; Level 1st Digit
    271  f694		       a4 98		      ldy	ScoreDigitTens
    272  f696		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    273  f699		       29 f0		      and	#$f0
    274  f69b		       85 83		      sta	Temp
    275  f69d
    276  f69d							; Score 1st Digit
    277  f69d		       a4 99		      ldy	ScoreDigitTens+1
    278  f69f		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    279  f6a2		       29 0f		      and	#$0f
    280  f6a4		       85 84		      sta	Temp+1
    281  f6a6
    282  f6a6		       a5 9a		      lda	ScoreDigitGfx
    283  f6a8		       85 0d		      sta	PF0
    284  f6aa		       a5 9b		      lda	ScoreDigitGfx+1
    285  f6ac		       85 0e		      sta	PF1
    286  f6ae		       a5 9c		      lda	ScoreDigitGfx+2
    287  f6b0		       85 0f		      sta	PF2
    288  f6b2
    289  f6b2							; Level 2nd Digit (and transfer)
    290  f6b2		       a4 96		      ldy	ScoreDigitOnes
    291  f6b4		       b9 bc f0 	      lda	ScoreDigits,y
    292  f6b7		       29 f0		      and	#$f0
    293  f6b9		       85 9b		      sta	ScoreDigitGfx+1
    294  f6bb
      0  f6bb					      sleep	3
      1  f6bb				   .CYCLES    SET	3
      2  f6bb
      3  f6bb				  -	      IF	.CYCLES < 2
      4  f6bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6bb				  -	      ERR
      6  f6bb					      ENDIF
      7  f6bb
      8  f6bb					      IF	.CYCLES & 1
      9  f6bb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6bb		       04 00		      nop	0
     11  f6bd				  -	      ELSE
     12  f6bd				  -	      bit	VSYNC
     13  f6bd					      ENDIF
     14  f6bd				   .CYCLES    SET	.CYCLES - 3
     15  f6bd					      ENDIF
     16  f6bd
     17  f6bd				  -	      REPEAT	.CYCLES / 2
     18  f6bd				  -	      nop
     19  f6bd					      REPEND
    296  f6bd
    297  f6bd		       a9 00		      lda	#0
    298  f6bf		       85 0d		      sta	PF0
    299  f6c1		       a5 9d		      lda	ScoreBarGfx+0
    300  f6c3		       85 0e		      sta	PF1
    301  f6c5		       a4 9e		      ldy	ScoreBarGfx+1
    302  f6c7		       84 0f		      sty	PF2
    303  f6c9
    304  f6c9							; Score 2nd Digit (and transfer)
    305  f6c9		       a4 97		      ldy	ScoreDigitOnes+1
    306  f6cb		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    307  f6ce		       29 f0		      and	#$f0
    308  f6d0		       05 84		      ora	Temp+1
    309  f6d2		       85 9c		      sta	ScoreDigitGfx+2
    310  f6d4
    311  f6d4							; Transfer Level 1st Digit
    312  f6d4		       a5 83		      lda	Temp
    313  f6d6		       85 9a		      sta	ScoreDigitGfx
    314  f6d8
    315  f6d8		       ca		      dex
    316  f6d9		       d0 9b		      bne	.score_draw_digit
    317  f6db
    318  f6db		       a9 00		      lda	#0
    319  f6dd		       85 0d		      sta	PF0
    320  f6df		       85 0e		      sta	PF1
    321  f6e1		       85 0f		      sta	PF2
    322  f6e3
    323  f6e3		       60		      rts
    324  f6e4
    325  f6e4				   ScoreBar
    326  f6e4		       40		      .BYTE.b	#%01000000
    327  f6e5		       40		      .BYTE.b	#%01000000
    328  f6e6		       60		      .BYTE.b	#%01100000
    329  f6e7		       70		      .BYTE.b	#%01110000
    330  f6e8		       78		      .BYTE.b	#%01111000
    331  f6e9		       7c		      .BYTE.b	#%01111100
    332  f6ea		       7e		      .BYTE.b	#%01111110
    333  f6eb		       7f		      .BYTE.b	#%01111111
    334  f6ec
    335  f6ec				   ScoreBarFlip
    336  f6ec		       01		      .BYTE.b	#%00000001
    337  f6ed		       03		      .BYTE.b	#%00000011
    338  f6ee		       07		      .BYTE.b	#%00000111
    339  f6ef		       0f		      .BYTE.b	#%00001111
    340  f6f0		       1f		      .BYTE.b	#%00011111
    341  f6f1		       3f		      .BYTE.b	#%00111111
    342  f6f2		       7f		      .BYTE.b	#%01111111
    343  f6f3		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f6f4					      include	"objects/web.asm"
      1  f6f4							;================
      2  f6f4							; Web (Playfield)
      3  f6f4							;================
      4  f6f4
      5  f6f4							; Constants
      6  f6f4
      7  f6f4		       00 00	   WEB_BG_COLOR =	#$00
      8  f6f4		       00 02	   WEB_FG_COLOR =	#$02
      9  f6f4
     10  f6f4		       00 1e	   WEB_SIZE   =	30
     11  f6f4		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f6f4		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f6f4
     14  f6f4							; Scanline Draw
     15  f6f4
     16  f6f4				   WebDrawStart
     17  f6f4
     18  f6f4							; Load Colors
     19  f6f4		       a5 a2		      lda	WebColor+1
     20  f6f6		       85 08		      sta	COLUPF
     21  f6f8
     22  f6f8							; Mirror playfield and use standard playfield color
     23  f6f8		       a5 80		      lda	CtrlPf
     24  f6fa		       29 fc		      and	#%11111100
     25  f6fc		       09 01		      ora	#%00000001
     26  f6fe		       85 80		      sta	CtrlPf
     27  f700		       85 0a		      sta	CTRLPF
     28  f702
     29  f702							; Initialize image index
     30  f702		       a9 00		      lda	#0
     31  f704		       85 a0		      sta	WebIndex
     32  f706
     33  f706		       60		      rts
     34  f707
     35  f707				   WebClean
     36  f707
     37  f707							; Clear out playfield
     38  f707		       a9 00		      lda	#0
     39  f709		       85 0d		      sta	PF0
     40  f70b		       85 0e		      sta	PF1
     41  f70d		       85 0f		      sta	PF2
     42  f70f
     43  f70f							; Clear colors
     44  f70f		       85 09		      sta	COLUBK
     45  f711		       85 08		      sta	COLUPF
     46  f713
     47  f713		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f714					      include	"objects/spider.asm"
      1  f714							;=================
      2  f714							; Spider (player0)
      3  f714							;=================
      4  f714
      5  f714							; Constants
      6  f714
      7  f714		       00 56	   SPIDER_COLOR =	#$56
      8  f714		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f714		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f714		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f714
     12  f714		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f714		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f714		       00 02	   SPIDER_VEL_X =	2
     15  f714		       00 02	   SPIDER_VEL_Y =	2
     16  f714
     17  f714							; Initialization
     18  f714
     19  f714				   SpiderInit
     20  f714
     21  f714							; Initialize Position in center of screen
     22  f714		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f716		       85 a5		      sta	SpiderPos
     24  f718		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f71a		       85 a6		      sta	SpiderPos+1
     26  f71c
     27  f71c							; Setup Sprite
      0  f71c					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f71c				   .POINTER   SET	SpiderPtr
      2  f71c				   .ADDRESS   SET	SpiderSprite
      3  f71c
      4  f71c		       a9 98		      LDA	#<.ADDRESS
      5  f71e		       85 a3		      STA	.POINTER
      6  f720		       a9 f1		      LDA	#>.ADDRESS
      7  f722		       85 a4		      STA	.POINTER+1
      8  f724
     29  f724
     30  f724		       60		      rts
     31  f725
     32  f725							; Frame Update
     33  f725
     34  f725				   SpiderUpdate
     35  f725		       20 2c f7 	      jsr	SpiderControl
     36  f728		       20 12 f8 	      jsr	SpiderCollision
     37  f72b		       60		      rts
     38  f72c
     39  f72c				   SpiderControl
     40  f72c
     41  f72c							; Control Position
     42  f72c		       a6 a5		      ldx	SpiderPos
     43  f72e		       a4 a6		      ldy	SpiderPos+1
     44  f730		       ad 80 02 	      lda	SWCHA
     45  f733
     46  f733				   .spider_control_check_right
     47  f733		       30 02		      bmi	.spider_control_check_left
     48  f735
     49  f735					      REPEAT	#SPIDER_VEL_X
     50  f735		       e8		      inx
     49  f735					      REPEND
     50  f736		       e8		      inx
     51  f737					      REPEND
     52  f737
     53  f737				   .spider_control_check_left
     54  f737		       2a		      rol
     55  f738		       30 02		      bmi	.spider_control_check_down
     56  f73a
     57  f73a					      REPEAT	#SPIDER_VEL_X
     58  f73a		       ca		      dex
     57  f73a					      REPEND
     58  f73b		       ca		      dex
     59  f73c					      REPEND
     60  f73c
     61  f73c				   .spider_control_check_down
     62  f73c		       2a		      rol
     63  f73d		       30 02		      bmi	.spider_control_check_up
     64  f73f
     65  f73f					      REPEAT	#SPIDER_VEL_Y
     66  f73f		       88		      dey
     65  f73f					      REPEND
     66  f740		       88		      dey
     67  f741					      REPEND
     68  f741
     69  f741				   .spider_control_check_up
     70  f741		       2a		      rol
     71  f742		       30 02		      bmi	.spider_control_sprite
     72  f744
     73  f744					      REPEAT	#SPIDER_VEL_Y
     74  f744		       c8		      iny
     73  f744					      REPEND
     74  f745		       c8		      iny
     75  f746					      REPEND
     76  f746
     77  f746				   .spider_control_sprite
     78  f746							; Control Sprite
     79  f746		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     80  f748
     81  f748				   .spider_control_sprite_x
     82  f748		       e4 a5		      cpx	SpiderPos
     83  f74a		       90 04		      bcc	.spider_control_sprite_left
     84  f74c		       f0 09		      beq	.spider_control_sprite_y
     85  f74e		       b0 05		      bcs	.spider_control_sprite_right
     86  f750
     87  f750				   .spider_control_sprite_left
     88  f750		       09 80		      ora	#%10000000
     89  f752		       4c 57 f7 	      jmp	.spider_control_sprite_y
     90  f755
     91  f755				   .spider_control_sprite_right
     92  f755		       09 40		      ora	#%01000000
     93  f757
     94  f757				   .spider_control_sprite_y
     95  f757		       c4 a6		      cpy	SpiderPos+1
     96  f759		       90 04		      bcc	.spider_control_sprite_down
     97  f75b		       f0 09		      beq	.spider_control_sprite_store
     98  f75d		       b0 05		      bcs	.spider_control_sprite_up
     99  f75f
    100  f75f				   .spider_control_sprite_down
    101  f75f		       09 10		      ora	#%00010000
    102  f761		       4c 66 f7 	      jmp	.spider_control_sprite_store
    103  f764
    104  f764				   .spider_control_sprite_up
    105  f764		       09 20		      ora	#%00100000
    106  f766
    107  f766				   .spider_control_sprite_store
    108  f766		       c9 00		      cmp	#%00000000
    109  f768		       f0 02		      beq	.spider_control_boundary
    110  f76a		       85 a7		      sta	SpiderCtrl
    111  f76c
    112  f76c				   .spider_control_boundary
    113  f76c							; Check Playfield Boundaries
    114  f76c
    115  f76c				   .spider_control_boundary_left
    116  f76c		       e0 03		      cpx	#SPIDER_VEL_X+1
    117  f76e		       b0 05		      bcs	.spider_control_boundary_right
    118  f770		       a2 03		      ldx	#SPIDER_VEL_X+1
    119  f772		       4c 7b f7 	      jmp	.spider_control_boundary_top
    120  f775
    121  f775				   .spider_control_boundary_right
    122  f775		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    123  f777		       90 02		      bcc	.spider_control_boundary_top
    124  f779		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    125  f77b
    126  f77b				   .spider_control_boundary_top
    127  f77b		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    128  f77d		       b0 05		      bcs	.spider_control_boundary_bottom
    129  f77f		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    130  f781		       4c 8a f7 	      jmp	.spider_control_store
    131  f784
    132  f784				   .spider_control_boundary_bottom
    133  f784		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    134  f786		       90 02		      bcc	.spider_control_store
    135  f788		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    136  f78a
    137  f78a				   .spider_control_store
    138  f78a							; Store new position
    139  f78a		       86 a5		      stx	SpiderPos
    140  f78c		       84 a6		      sty	SpiderPos+1
    141  f78e
    142  f78e							; TODO: Optimize this somehow?
    143  f78e				   .spider_control_sprite_assign
    144  f78e							; Skip if no change
    145  f78e		       c9 00		      cmp	#%00000000
    146  f790		       f0 7f		      beq	.spider_control_return
    147  f792
    148  f792		       a2 00		      ldx	#%00000000	; For reflection
    149  f794
    150  f794				   .spider_control_sprite_assign_left
    151  f794		       c9 80		      cmp	#%10000000
    152  f796		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f798					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f798				   .POINTER   SET	SpiderPtr
      2  f798				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f798
      4  f798		       a9 a8		      LDA	#<.ADDRESS
      5  f79a		       85 a3		      STA	.POINTER
      6  f79c		       a9 f1		      LDA	#>.ADDRESS
      7  f79e		       85 a4		      STA	.POINTER+1
      8  f7a0
    154  f7a0		       a2 08		      ldx	#%00001000
    155  f7a2		       4c 0f f8 	      jmp	.spider_control_reflect
    156  f7a5
    157  f7a5				   .spider_control_sprite_assign_right
    158  f7a5		       c9 40		      cmp	#%01000000
    159  f7a7		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f7a9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f7a9				   .POINTER   SET	SpiderPtr
      2  f7a9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f7a9
      4  f7a9		       a9 a8		      LDA	#<.ADDRESS
      5  f7ab		       85 a3		      STA	.POINTER
      6  f7ad		       a9 f1		      LDA	#>.ADDRESS
      7  f7af		       85 a4		      STA	.POINTER+1
      8  f7b1
    161  f7b1		       4c 0f f8 	      jmp	.spider_control_reflect
    162  f7b4
    163  f7b4				   .spider_control_sprite_assign_top
    164  f7b4		       c9 20		      cmp	#%00100000
    165  f7b6		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f7b8					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f7b8				   .POINTER   SET	SpiderPtr
      2  f7b8				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f7b8
      4  f7b8		       a9 98		      LDA	#<.ADDRESS
      5  f7ba		       85 a3		      STA	.POINTER
      6  f7bc		       a9 f1		      LDA	#>.ADDRESS
      7  f7be		       85 a4		      STA	.POINTER+1
      8  f7c0
    167  f7c0		       4c 0f f8 	      jmp	.spider_control_reflect
    168  f7c3
    169  f7c3				   .spider_control_sprite_assign_bottom
    170  f7c3		       c9 10		      cmp	#%00010000
    171  f7c5		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f7c7					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f7c7				   .POINTER   SET	SpiderPtr
      2  f7c7				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f7c7
      4  f7c7		       a9 b8		      LDA	#<.ADDRESS
      5  f7c9		       85 a3		      STA	.POINTER
      6  f7cb		       a9 f1		      LDA	#>.ADDRESS
      7  f7cd		       85 a4		      STA	.POINTER+1
      8  f7cf
    173  f7cf		       4c 0f f8 	      jmp	.spider_control_reflect
    174  f7d2
    175  f7d2				   .spider_control_sprite_assign_top_right
    176  f7d2		       c9 60		      cmp	#%01100000
    177  f7d4		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f7d6					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f7d6				   .POINTER   SET	SpiderPtr
      2  f7d6				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f7d6
      4  f7d6		       a9 a8		      LDA	#<.ADDRESS
      5  f7d8		       85 a3		      STA	.POINTER
      6  f7da		       a9 f1		      LDA	#>.ADDRESS
      7  f7dc		       85 a4		      STA	.POINTER+1
      8  f7de
    179  f7de		       4c 0f f8 	      jmp	.spider_control_reflect
    180  f7e1
    181  f7e1				   .spider_control_sprite_assign_bottom_right
    182  f7e1		       c9 50		      cmp	#%01010000
    183  f7e3		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f7e5					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f7e5				   .POINTER   SET	SpiderPtr
      2  f7e5				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f7e5
      4  f7e5		       a9 a8		      LDA	#<.ADDRESS
      5  f7e7		       85 a3		      STA	.POINTER
      6  f7e9		       a9 f1		      LDA	#>.ADDRESS
      7  f7eb		       85 a4		      STA	.POINTER+1
      8  f7ed
    185  f7ed		       4c 0f f8 	      jmp	.spider_control_reflect
    186  f7f0
    187  f7f0				   .spider_control_sprite_assign_bottom_left
    188  f7f0		       c9 90		      cmp	#%10010000
    189  f7f2		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f7f4					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f7f4				   .POINTER   SET	SpiderPtr
      2  f7f4				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f7f4
      4  f7f4		       a9 a8		      LDA	#<.ADDRESS
      5  f7f6		       85 a3		      STA	.POINTER
      6  f7f8		       a9 f1		      LDA	#>.ADDRESS
      7  f7fa		       85 a4		      STA	.POINTER+1
      8  f7fc
    191  f7fc		       a2 08		      ldx	#%00001000
    192  f7fe		       4c 0f f8 	      jmp	.spider_control_reflect
    193  f801
    194  f801				   .spider_control_sprite_assign_top_left
    195  f801		       c9 a0		      cmp	#%10100000
    196  f803		       d0 0a		      bne	.spider_control_reflect
      0  f805					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f805				   .POINTER   SET	SpiderPtr
      2  f805				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f805
      4  f805		       a9 a8		      LDA	#<.ADDRESS
      5  f807		       85 a3		      STA	.POINTER
      6  f809		       a9 f1		      LDA	#>.ADDRESS
      7  f80b		       85 a4		      STA	.POINTER+1
      8  f80d
    198  f80d		       a2 08		      ldx	#%00001000
    199  f80f
    200  f80f				   .spider_control_reflect
    201  f80f		       86 0b		      stx	REFP0
    202  f811
    203  f811				   .spider_control_return
    204  f811		       60		      rts
    205  f812
    206  f812				   SpiderCollision
    207  f812		       a0 56		      ldy	#SPIDER_COLOR
    208  f814
    209  f814							; Check b/w
    210  f814		       ad 82 02 	      lda	SWCHB
    211  f817					      REPEAT	4
    212  f817		       4a		      lsr
    211  f817					      REPEND
    212  f818		       4a		      lsr
    211  f818					      REPEND
    212  f819		       4a		      lsr
    211  f819					      REPEND
    212  f81a		       4a		      lsr
    213  f81b					      REPEND
    214  f81b		       b0 02		      bcs	.spider_collision_m0
    215  f81d
    216  f81d		       a0 0e		      ldy	#SPIDER_BW_COLOR
    217  f81f
    218  f81f				   .spider_collision_m0
    219  f81f							; Check stun status
    220  f81f		       a6 b8		      ldx	BugStunned
    221  f821		       e0 00		      cpx	#0
    222  f823		       d0 04		      bne	.spider_collision_m1
    223  f825
    224  f825							; Collision for M0 (V set)
    225  f825		       24 00		      bit	CXM0P
    226  f827		       70 0d		      bvs	.spider_collision_active
    227  f829
    228  f829				   .spider_collision_m1
    229  f829							; Check stun status
    230  f829		       a6 b9		      ldx	BugStunned+1
    231  f82b		       e0 00		      cpx	#0
    232  f82d		       d0 14		      bne	.spider_collision_return
    233  f82f
    234  f82f							; Collision for M1 (N set)
    235  f82f		       24 01		      bit	CXM1P
    236  f831		       30 03		      bmi	.spider_collision_active
    237  f833
    238  f833		       4c 43 f8 	      jmp	.spider_collision_return
    239  f836
    240  f836				   .spider_collision_active
    241  f836		       a0 44		      ldy	#SPIDER_COL_COLOR
    242  f838
    243  f838							; Check b/w
    244  f838		       ad 82 02 	      lda	SWCHB
    245  f83b					      REPEAT	4
    246  f83b		       4a		      lsr
    245  f83b					      REPEND
    246  f83c		       4a		      lsr
    245  f83c					      REPEND
    246  f83d		       4a		      lsr
    245  f83d					      REPEND
    246  f83e		       4a		      lsr
    247  f83f					      REPEND
    248  f83f		       b0 02		      bcs	.spider_collision_return
    249  f841
    250  f841		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    251  f843
    252  f843				   .spider_collision_return
    253  f843		       84 a8		      sty	SpiderColor
    254  f845		       60		      rts
    255  f846
    256  f846				   SpiderPosition
    257  f846
    258  f846							; Set Position
    259  f846		       a2 00		      ldx	#0	; Object (player0)
    260  f848		       a5 a5		      lda	SpiderPos	; X Position
    261  f84a		       20 00 f0 	      jsr	PosObject
    262  f84d
    263  f84d		       60		      rts
    264  f84e
    265  f84e							; Scanline Draw
    266  f84e
    267  f84e				   SpiderDrawStart
    268  f84e
    269  f84e							; Set player 0 to be quad size
    270  f84e		       a5 81		      lda	NuSiz0
    271  f850		       29 f8		      and	#%11111000
    272  f852		       09 05		      ora	#%00000101
    273  f854		       85 81		      sta	NuSiz0
    274  f856		       85 04		      sta	NUSIZ0
    275  f858
    276  f858							; Set sprite color
    277  f858		       a5 a8		      lda	SpiderColor
    278  f85a		       85 06		      sta	COLUP0
    279  f85c
    280  f85c							; Determine if we need to use vertical delay (odd line)
    281  f85c		       a5 a6		      lda	SpiderPos+1	; Y Position
    282  f85e		       4a		      lsr
    283  f85f		       b0 05		      bcs	.spider_draw_start_nodelay
    284  f861
    285  f861		       a0 01		      ldy	#1
    286  f863		       4c 68 f8 	      jmp	.spider_draw_start_set_delay
    287  f866
    288  f866				   .spider_draw_start_nodelay
    289  f866		       a0 00		      ldy	#0
    290  f868
    291  f868				   .spider_draw_start_set_delay
    292  f868		       84 25		      sty	VDELP0
    293  f86a
    294  f86a				   .spider_draw_start_pos
    295  f86a							; Calculate starting position
    296  f86a		       18		      clc
    297  f86b		       69 10		      adc	#SPIDER_SIZE
    298  f86d		       85 aa		      sta	SpiderDrawPos
    299  f86f
    300  f86f							; Initialize sprite index and line buffer
    301  f86f		       a9 00		      lda	#0
    302  f871		       85 a9		      sta	SpiderIndex
    303  f873		       85 ab		      sta	SpiderLine
    304  f875
    305  f875		       60		      rts
    306  f876
    307  f876				   SpiderClean
    308  f876
    309  f876							; Clear out Player0 sprite
    310  f876		       a9 00		      lda	#0
    311  f878		       85 1b		      sta	GRP0
    312  f87a
    313  f87a		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f87b					      include	"objects/line.asm"
      1  f87b							;================
      2  f87b							; Line (ball)
      3  f87b							;================
      4  f87b
      5  f87b							; Constants
      6  f87b
      7  f87b		       00 08	   LINE_SIZE  =	8
      8  f87b		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f87b		       00 04	   LINE_VEL_X =	4
     10  f87b		       00 04	   LINE_VEL_Y =	4
     11  f87b
     12  f87b		       00 08	   LINE_AUDIO_C =	8
     13  f87b		       00 01	   LINE_AUDIO_F =	1
     14  f87b		       00 04	   LINE_AUDIO_V =	4
     15  f87b
     16  f87b		       00 08	   LINE_SAMPLE_LEN =	8
     17  f87b		       00 03	   LINE_SAMPLE_C =	3
     18  f87b		       00 01	   LINE_SAMPLE_F =	1
     19  f87b		       00 04	   LINE_SAMPLE_V =	4
     20  f87b
     21  f87b							; Initialization
     22  f87b
     23  f87b				   LineInit
     24  f87b
     25  f87b							; Initial Line Control
     26  f87b		       a9 00		      lda	#0
     27  f87d		       85 ae		      sta	LineEnabled
     28  f87f		       85 af		      sta	LinePos+0
     29  f881		       85 b0		      sta	LinePos+1
     30  f883		       85 b1		      sta	LineVelocity+0
     31  f885		       85 b2		      sta	LineVelocity+1
     32  f887		       85 b3		      sta	LineStartPos+0
     33  f889		       85 b4		      sta	LineStartPos+1
     34  f88b		       85 b5		      sta	LineDrawPos+0
     35  f88d		       85 b6		      sta	LineDrawPos+1
     36  f88f
     37  f88f		       60		      rts
     38  f890
     39  f890							; Frame Update
     40  f890
     41  f890				   LineUpdate
     42  f890		       20 9a f8 	      jsr	LineControl
     43  f893		       20 50 f9 	      jsr	LineObject
     44  f896		       20 97 f9 	      jsr	LineCollision
     45  f899		       60		      rts
     46  f89a
     47  f89a				   LineControl
     48  f89a
     49  f89a							; Check if Fire Button on controller 1 is pressed
     50  f89a		       a5 0c		      lda	INPT4
     51  f89c		       30 08		      bmi	.line_control_skip
     52  f89e
     53  f89e		       24 ae		      bit	LineEnabled
     54  f8a0		       30 04		      bmi	.line_control_skip
     55  f8a2
     56  f8a2		       a5 a7		      lda	SpiderCtrl
     57  f8a4		       d0 03		      bne	.line_control_fire
     58  f8a6
     59  f8a6				   .line_control_skip
     60  f8a6		       4c 4f f9 	      jmp	.line_control_return
     61  f8a9
     62  f8a9				   .line_control_fire
     63  f8a9		       20 df f9 	      jsr	LineEnable
     64  f8ac
     65  f8ac				   .line_control_x
     66  f8ac		       a5 a7		      lda	SpiderCtrl
     67  f8ae		       29 c0		      and	#%11000000
     68  f8b0		       f0 0e		      beq	.line_control_x_none
     69  f8b2				   .line_control_x_left
     70  f8b2		       c9 80		      cmp	#%10000000
     71  f8b4		       d0 05		      bne	.line_control_x_right
     72  f8b6
     73  f8b6		       a9 fc		      lda	#-LINE_VEL_X
     74  f8b8		       4c c2 f8 	      jmp	.line_control_x_store
     75  f8bb				   .line_control_x_right
     76  f8bb		       a9 04		      lda	#LINE_VEL_X
     77  f8bd		       4c c2 f8 	      jmp	.line_control_x_store
     78  f8c0				   .line_control_x_none
     79  f8c0		       a9 00		      lda	#0
     80  f8c2				   .line_control_x_store
     81  f8c2		       85 b1		      sta	LineVelocity
     82  f8c4
     83  f8c4				   .line_control_y
     84  f8c4		       a5 a7		      lda	SpiderCtrl
     85  f8c6		       29 30		      and	#%00110000
     86  f8c8		       f0 0e		      beq	.line_control_y_none
     87  f8ca				   .line_control_y_up
     88  f8ca		       c9 20		      cmp	#%00100000
     89  f8cc		       d0 05		      bne	.line_control_y_down
     90  f8ce
     91  f8ce		       a9 04		      lda	#LINE_VEL_Y
     92  f8d0		       4c da f8 	      jmp	.line_control_y_store
     93  f8d3				   .line_control_y_down
     94  f8d3		       a9 fc		      lda	#-LINE_VEL_Y
     95  f8d5		       4c da f8 	      jmp	.line_control_y_store
     96  f8d8				   .line_control_y_none
     97  f8d8		       a9 00		      lda	#0
     98  f8da				   .line_control_y_store
     99  f8da		       85 b2		      sta	LineVelocity+1
    100  f8dc
    101  f8dc				   .line_control_position
    102  f8dc
    103  f8dc		       a2 00		      ldx	#0	; offsetX
    104  f8de		       a0 00		      ldy	#0	; offsetY
    105  f8e0
    106  f8e0		       a5 a7		      lda	SpiderCtrl
    107  f8e2		       29 f0		      and	#%11110000
    108  f8e4
    109  f8e4				   .line_control_position_left
    110  f8e4		       c9 80		      cmp	#%10000000
    111  f8e6		       d0 07		      bne	.line_control_position_right
    112  f8e8
    113  f8e8		       a2 00		      ldx	#0
    114  f8ea		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    115  f8ec		       4c 37 f9 	      jmp	.line_control_position_store
    116  f8ef
    117  f8ef				   .line_control_position_right
    118  f8ef		       c9 40		      cmp	#%01000000
    119  f8f1		       d0 07		      bne	.line_control_position_top
    120  f8f3
    121  f8f3		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    122  f8f5		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    123  f8f7		       4c 37 f9 	      jmp	.line_control_position_store
    124  f8fa
    125  f8fa				   .line_control_position_top
    126  f8fa		       c9 20		      cmp	#%00100000
    127  f8fc		       d0 07		      bne	.line_control_position_bottom
    128  f8fe
    129  f8fe		       a2 08		      ldx	#SPIDER_SIZE/2
    130  f900		       a0 10		      ldy	#SPIDER_SIZE
    131  f902		       4c 37 f9 	      jmp	.line_control_position_store
    132  f905
    133  f905				   .line_control_position_bottom
    134  f905		       c9 10		      cmp	#%00010000
    135  f907		       d0 05		      bne	.line_control_position_top_right
    136  f909
    137  f909		       a2 08		      ldx	#SPIDER_SIZE/2
    138  f90b		       4c 37 f9 	      jmp	.line_control_position_store
    139  f90e
    140  f90e				   .line_control_position_top_right
    141  f90e		       c9 60		      cmp	#%01100000
    142  f910		       d0 07		      bne	.line_control_position_bottom_right
    143  f912
    144  f912		       a2 10		      ldx	#SPIDER_SIZE
    145  f914		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    146  f916		       4c 37 f9 	      jmp	.line_control_position_store
    147  f919
    148  f919				   .line_control_position_bottom_right
    149  f919		       c9 50		      cmp	#%01010000
    150  f91b		       d0 07		      bne	.line_control_position_bottom_left
    151  f91d
    152  f91d		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    153  f91f		       a0 00		      ldy	#0
    154  f921		       4c 37 f9 	      jmp	.line_control_position_store
    155  f924
    156  f924				   .line_control_position_bottom_left
    157  f924		       c9 90		      cmp	#%10010000
    158  f926		       d0 07		      bne	.line_control_position_top_left
    159  f928
    160  f928							; No Offset
    161  f928		       a2 04		      ldx	#LINE_SIZE/2
    162  f92a		       a0 04		      ldy	#LINE_SIZE/2
    163  f92c		       4c 37 f9 	      jmp	.line_control_position_store
    164  f92f
    165  f92f				   .line_control_position_top_left
    166  f92f		       c9 a0		      cmp	#%10100000
    167  f931		       d0 04		      bne	.line_control_position_store
    168  f933
    169  f933		       a2 00		      ldx	#0
    170  f935		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    171  f937
    172  f937				   .line_control_position_store
    173  f937
    174  f937							; Apply offsetX to playerX
    175  f937		       a5 a5		      lda	SpiderPos
    176  f939		       86 83		      stx	Temp
    177  f93b		       18		      clc
    178  f93c		       65 83		      adc	Temp
    179  f93e		       aa		      tax
    180  f93f
    181  f93f							; Apply offsetY to playerY
    182  f93f		       a5 a6		      lda	SpiderPos+1
    183  f941		       84 83		      sty	Temp
    184  f943		       18		      clc
    185  f944		       65 83		      adc	Temp
    186  f946		       a8		      tay
    187  f947
    188  f947		       86 af		      stx	LinePos
    189  f949		       84 b0		      sty	LinePos+1
    190  f94b		       86 b3		      stx	LineStartPos
    191  f94d		       84 b4		      sty	LineStartPos+1
    192  f94f
    193  f94f				   .line_control_return
    194  f94f		       60		      rts
    195  f950
    196  f950				   LineObject
    197  f950
    198  f950							; Check if line is enabled
    199  f950		       24 ae		      bit	LineEnabled
    200  f952		       10 42		      bpl	.line_object_return
    201  f954
    202  f954							; Load position
    203  f954		       a6 af		      ldx	LinePos
    204  f956		       a4 b0		      ldy	LinePos+1
    205  f958
    206  f958				   .line_object_distance
    207  f958
    208  f958							; Check distance from player with absolute value differences
    209  f958
    210  f958				   .line_object_distance_x
    211  f958		       8a		      txa
    212  f959		       18		      clc
    213  f95a		       e5 b3		      sbc	LineStartPos
    214  f95c		       b0 04		      bcs	.line_object_distance_x_check
    215  f95e		       49 ff		      eor	#$FF	; C flag is clear here
    216  f960		       69 01		      adc	#$01	; form two's complement
    217  f962				   .line_object_distance_x_check		; Jumps to if positive
    218  f962		       c9 40		      cmp	#LINE_DISTANCE
    219  f964		       b0 2d		      bcs	.line_object_disable
    220  f966
    221  f966				   .line_object_distance_y
    222  f966		       98		      tya
    223  f967		       18		      clc
    224  f968		       e5 b4		      sbc	LineStartPos+1
    225  f96a		       b0 04		      bcs	.line_object_distance_y_check
    226  f96c		       49 ff		      eor	#$FF	; C flag is clear here
    227  f96e		       69 01		      adc	#$01	; form two's complement
    228  f970				   .line_object_distance_y_check		; Jumps to if positive
    229  f970		       c9 40		      cmp	#LINE_DISTANCE
    230  f972		       b0 1f		      bcs	.line_object_disable
    231  f974
    232  f974				   .line_object_boundary
    233  f974				   .line_object_boundary_left
    234  f974		       e0 04		      cpx	#LINE_VEL_X
    235  f976		       90 1b		      bcc	.line_object_disable
    236  f978				   .line_object_boundary_right
    237  f978		       e0 9c		      cpx	#160-LINE_VEL_X
    238  f97a		       b0 17		      bcs	.line_object_disable
    239  f97c				   .line_object_boundary_bottom
    240  f97c		       c0 04		      cpy	#LINE_VEL_Y
    241  f97e		       90 13		      bcc	.line_object_disable
    242  f980				   .line_object_boundary_top
    243  f980		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    244  f982		       b0 0f		      bcs	.line_object_disable
    245  f984
    246  f984				   .line_object_velocity
    247  f984
    248  f984							; Apply Velocity
    249  f984		       8a		      txa
    250  f985		       18		      clc
    251  f986		       65 b1		      adc	LineVelocity
    252  f988		       85 af		      sta	LinePos
    253  f98a
    254  f98a		       98		      tya
    255  f98b		       18		      clc
    256  f98c		       65 b2		      adc	LineVelocity+1
    257  f98e		       85 b0		      sta	LinePos+1
    258  f990
    259  f990		       4c 96 f9 	      jmp	.line_object_return
    260  f993
    261  f993				   .line_object_disable
    262  f993		       20 eb f9 	      jsr	LineDisable
    263  f996
    264  f996				   .line_object_return
    265  f996		       60		      rts
    266  f997
    267  f997				   LineCollision
    268  f997
    269  f997		       a9 78		      lda	#BUG_STUN_LENGTH
    270  f999
    271  f999				   .line_collision_m0
    272  f999		       24 04		      bit	CXM0FB
    273  f99b		       50 08		      bvc	.line_collision_m1
    274  f99d
    275  f99d							; Set stun timer
    276  f99d		       85 b8		      sta	BugStunned+0
    277  f99f
    278  f99f							; Disable line
    279  f99f		       20 eb f9 	      jsr	LineDisable
    280  f9a2		       4c ae f9 	      jmp	.line_collision_sample
    281  f9a5
    282  f9a5				   .line_collision_m1
    283  f9a5		       24 05		      bit	CXM1FB
    284  f9a7		       50 08		      bvc	.line_collision_return
    285  f9a9
    286  f9a9							; Set stun timer
    287  f9a9		       85 b9		      sta	BugStunned+1
    288  f9ab
    289  f9ab							; Disable line
    290  f9ab		       20 eb f9 	      jsr	LineDisable
    291  f9ae
    292  f9ae				   .line_collision_sample
    293  f9ae		       20 0d fa 	      jsr	LineSample
    294  f9b1
    295  f9b1				   .line_collision_return
    296  f9b1		       60		      rts
    297  f9b2
    298  f9b2				   LinePosition
    299  f9b2
    300  f9b2							; Set Line Position
    301  f9b2		       a2 04		      ldx	#4	; Object (ball)
    302  f9b4		       a5 af		      lda	LinePos	; X Position
    303  f9b6		       20 00 f0 	      jsr	PosObject
    304  f9b9
    305  f9b9		       60		      rts
    306  f9ba
    307  f9ba							; Scanline Draw
    308  f9ba
    309  f9ba				   LineDrawStart
    310  f9ba
    311  f9ba							; Set ball size to be 4 clocks (4/5 bits)
    312  f9ba		       a5 80		      lda	CtrlPf
    313  f9bc		       29 cf		      and	#%11001111
    314  f9be		       09 20		      ora	#%00100000
    315  f9c0		       85 80		      sta	CtrlPf
    316  f9c2		       85 0a		      sta	CTRLPF
    317  f9c4
    318  f9c4							; Determine if we need to use vertical delay (oven line)
    319  f9c4		       a5 b0		      lda	LinePos+1
    320  f9c6		       4a		      lsr
    321  f9c7		       90 05		      bcc	.line_draw_start_nodelay
    322  f9c9
    323  f9c9		       a0 01		      ldy	#1
    324  f9cb		       4c d0 f9 	      jmp	.line_draw_start_set_delay
    325  f9ce
    326  f9ce				   .line_draw_start_nodelay
    327  f9ce		       a0 00		      ldy	#0
    328  f9d0
    329  f9d0				   .line_draw_start_set_delay
    330  f9d0		       84 27		      sty	VDELBL
    331  f9d2
    332  f9d2				   .line_draw_start_pos
    333  f9d2							; Calculate starting position
    334  f9d2		       18		      clc
    335  f9d3		       85 b5		      sta	LineDrawPos+0
    336  f9d5		       69 04		      adc	#LINE_SIZE/2
    337  f9d7		       85 b6		      sta	LineDrawPos+1
    338  f9d9
    339  f9d9		       60		      rts
    340  f9da
    341  f9da				   LineClean
    342  f9da
    343  f9da							; Clear out Line
    344  f9da		       a9 00		      lda	#0
    345  f9dc		       85 1f		      sta	ENABL
    346  f9de
    347  f9de		       60		      rts
    348  f9df
    349  f9df				   LineEnable
    350  f9df		       a9 80		      lda	#%10000000
    351  f9e1		       85 ae		      sta	LineEnabled
    352  f9e3
    353  f9e3		       a5 93		      lda	SampleStep
    354  f9e5		       d0 03		      bne	.line_enable_return
    355  f9e7
    356  f9e7		       20 f7 f9 	      jsr	LineAudioPlay
    357  f9ea
    358  f9ea				   .line_enable_return
    359  f9ea		       60		      rts
    360  f9eb
    361  f9eb				   LineDisable
    362  f9eb		       a9 00		      lda	#0
    363  f9ed		       85 ae		      sta	LineEnabled
    364  f9ef
    365  f9ef		       a5 93		      lda	SampleStep
    366  f9f1		       d0 03		      bne	.line_disable_return
    367  f9f3
    368  f9f3		       20 04 fa 	      jsr	LineAudioMute
    369  f9f6
    370  f9f6				   .line_disable_return
    371  f9f6		       60		      rts
    372  f9f7
    373  f9f7				   LineAudioPlay
    374  f9f7		       a9 08		      lda	#LINE_AUDIO_C
    375  f9f9		       85 16		      sta	AUDC1
    376  f9fb		       a9 01		      lda	#LINE_AUDIO_F
    377  f9fd		       85 18		      sta	AUDF1
    378  f9ff		       a9 04		      lda	#LINE_AUDIO_V
    379  fa01		       85 1a		      sta	AUDV1
    380  fa03		       60		      rts
    381  fa04
    382  fa04				   LineAudioMute
    383  fa04		       a9 00		      lda	#0
    384  fa06		       85 1a		      sta	AUDV1
    385  fa08		       85 18		      sta	AUDF1
    386  fa0a		       85 16		      sta	AUDC1
    387  fa0c		       60		      rts
    388  fa0d
    389  fa0d				   LineSample
    390  fa0d		       a9 08		      lda	#LINE_SAMPLE_LEN
    391  fa0f		       85 93		      sta	SampleStep
    392  fa11		       a9 03		      lda	#LINE_SAMPLE_C
    393  fa13		       85 16		      sta	AUDC1
    394  fa15		       a9 01		      lda	#LINE_SAMPLE_F
    395  fa17		       85 18		      sta	AUDF1
    396  fa19		       a9 04		      lda	#LINE_SAMPLE_V
    397  fa1b		       85 1a		      sta	AUDV1
    398  fa1d		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  fa1e					      include	"objects/bug.asm"
      1  fa1e							;======================
      2  fa1e							; Bugs (missiles 0 & 1)
      3  fa1e							;======================
      4  fa1e
      5  fa1e							; Constants
      6  fa1e
      7  fa1e		       00 08	   BUG_SIZE   =	8
      8  fa1e		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  fa1e		       00 78	   BUG_STUN_LENGTH =	120
     10  fa1e		       00 04	   BUG_POINTS =	4
     11  fa1e
     12  fa1e		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  fa1e		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  fa1e		       00 38	   BUG_STUN_COLOR =	#$38
     15  fa1e		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  fa1e
     17  fa1e		       00 1e	   BUG_SAMPLE_LEN =	30
     18  fa1e		       00 03	   BUG_SAMPLE_C =	3
     19  fa1e		       00 14	   BUG_SAMPLE_F =	20
     20  fa1e		       00 04	   BUG_SAMPLE_V =	4
     21  fa1e
     22  fa1e		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  fa1e		       00 08	   BUG_COL_SAMPLE_C =	8
     24  fa1e		       00 08	   BUG_COL_SAMPLE_F =	8
     25  fa1e		       00 03	   BUG_COL_SAMPLE_V =	3
     26  fa1e
     27  fa1e							; Initialization
     28  fa1e
     29  fa1e				   BugInit
     30  fa1e
     31  fa1e							; Initialize Bugs
     32  fa1e		       a2 01		      ldx	#1
     33  fa20
     34  fa20				   .bug_init_loop
     35  fa20		       20 27 fa 	      jsr	BugReset
     36  fa23
     37  fa23		       ca		      dex
     38  fa24		       10 fa		      bpl	.bug_init_loop
     39  fa26
     40  fa26		       60		      rts
     41  fa27
     42  fa27				   BugReset		; x = bug (0 or 1)
     43  fa27
     44  fa27							; Set random position
     45  fa27		       20 13 f0 	      jsr	Random
     46  fa2a
     47  fa2a		       a5 86		      lda	Rand8
     48  fa2c		       29 7f		      and	#$7f
     49  fa2e		       95 ba		      sta	BugPosX,x
     50  fa30
     51  fa30		       a5 87		      lda	Rand16
     52  fa32		       29 7f		      and	#$7f
     53  fa34		       95 bc		      sta	BugPosY,x
     54  fa36
     55  fa36							; Set as active
     56  fa36		       a9 00		      lda	#0
     57  fa38		       95 b8		      sta	BugStunned,x
     58  fa3a
     59  fa3a		       60		      rts
     60  fa3b
     61  fa3b							; Frame Update
     62  fa3b
     63  fa3b				   BugUpdate
     64  fa3b
     65  fa3b		       a2 01		      ldx	#1
     66  fa3d				   .bug_update_loop
     67  fa3d		       86 83		      stx	Temp+0
     68  fa3f
     69  fa3f		       b5 b8		      lda	BugStunned,x
     70  fa41		       f0 08		      beq	.bug_update_active
     71  fa43
     72  fa43				   .bug_update_stunned
     73  fa43		       d6 b8		      dec	BugStunned,x
     74  fa45		       20 ce fa 	      jsr	BugStunCollision
     75  fa48		       4c 51 fa 	      jmp	.bug_update_next
     76  fa4b
     77  fa4b				   .bug_update_active
     78  fa4b		       20 57 fa 	      jsr	BugMovement
     79  fa4e		       20 b6 fa 	      jsr	BugCollision
     80  fa51
     81  fa51				   .bug_update_next
     82  fa51		       a6 83		      ldx	Temp+0
     83  fa53		       ca		      dex
     84  fa54		       10 e7		      bpl	.bug_update_loop
     85  fa56
     86  fa56		       60		      rts
     87  fa57
     88  fa57				   BugMovement
     89  fa57
     90  fa57				   .bug_movement_random
     91  fa57		       20 13 f0 	      jsr	Random
     92  fa5a		       29 03		      and	#%00000011
     93  fa5c		       85 84		      sta	Temp+1
     94  fa5e
     95  fa5e				   .bug_movement_load
     96  fa5e		       a6 83		      ldx	Temp+0
     97  fa60
     98  fa60				   .bug_movement_x
     99  fa60		       a4 b7		      ldy	BugSpeed
    100  fa62
    101  fa62							; Alter X Position
    102  fa62		       a5 84		      lda	Temp+1
    103  fa64		       29 01		      and	#%00000001
    104  fa66
    105  fa66				   .bug_movement_x_check
    106  fa66		       c9 01		      cmp	#1
    107  fa68		       d0 08		      bne	.bug_movement_x_right
    108  fa6a
    109  fa6a				   .bug_movement_x_left
    110  fa6a		       d6 ba		      dec	BugPosX,x
    111  fa6c		       88		      dey
    112  fa6d		       d0 fb		      bne	.bug_movement_x_left
    113  fa6f
    114  fa6f		       4c 77 fa 	      jmp	.bug_movement_y
    115  fa72
    116  fa72				   .bug_movement_x_right
    117  fa72		       f6 ba		      inc	BugPosX,x
    118  fa74		       88		      dey
    119  fa75		       d0 fb		      bne	.bug_movement_x_right
    120  fa77
    121  fa77				   .bug_movement_y
    122  fa77		       a4 b7		      ldy	BugSpeed
    123  fa79
    124  fa79							; Alter Y Position
    125  fa79		       a5 84		      lda	Temp+1
    126  fa7b		       29 02		      and	#%00000010
    127  fa7d		       4a		      lsr
    128  fa7e
    129  fa7e				   .bug_movement_y_check
    130  fa7e		       c9 01		      cmp	#1
    131  fa80		       d0 08		      bne	.bug_movement_y_down
    132  fa82
    133  fa82				   .bug_movement_y_up
    134  fa82		       f6 bc		      inc	BugPosY,x
    135  fa84		       88		      dey
    136  fa85		       d0 fb		      bne	.bug_movement_y_up
    137  fa87
    138  fa87		       4c 8f fa 	      jmp	.bug_movement_boundary
    139  fa8a
    140  fa8a				   .bug_movement_y_down
    141  fa8a		       d6 bc		      dec	BugPosY,x
    142  fa8c		       88		      dey
    143  fa8d		       d0 fb		      bne	.bug_movement_y_down
    144  fa8f
    145  fa8f				   .bug_movement_boundary
    146  fa8f		       b5 ba		      lda	BugPosX,x
    147  fa91		       b4 bc		      ldy	BugPosY,x
    148  fa93
    149  fa93				   .bug_movement_boundary_left
    150  fa93		       c9 18		      cmp	#BUG_BOUNDARY
    151  fa95		       b0 05		      bcs	.bug_movement_boundary_right
    152  fa97		       a9 18		      lda	#BUG_BOUNDARY
    153  fa99		       4c a2 fa 	      jmp	.bug_movement_boundary_top
    154  fa9c
    155  fa9c				   .bug_movement_boundary_right
    156  fa9c		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    157  fa9e		       90 02		      bcc	.bug_movement_boundary_top
    158  faa0		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    159  faa2
    160  faa2				   .bug_movement_boundary_top
    161  faa2		       c0 18		      cpy	#BUG_BOUNDARY
    162  faa4		       b0 05		      bcs	.bug_movement_boundary_bottom
    163  faa6		       a0 18		      ldy	#BUG_BOUNDARY
    164  faa8		       4c b1 fa 	      jmp	.bug_movement_store
    165  faab
    166  faab				   .bug_movement_boundary_bottom
    167  faab		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    168  faad		       90 02		      bcc	.bug_movement_store
    169  faaf		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    170  fab1
    171  fab1				   .bug_movement_store
    172  fab1		       95 ba		      sta	BugPosX,x
    173  fab3		       94 bc		      sty	BugPosY,x
    174  fab5
    175  fab5				   .bug_movement_return
    176  fab5		       60		      rts
    177  fab6
    178  fab6				   BugCollision
    179  fab6
    180  fab6		       e0 01		      cpx	#1
    181  fab8		       f0 05		      beq	.bug_collision_m1
    182  faba
    183  faba				   .bug_collision_m0
    184  faba							; Collision for M0 (V set)
    185  faba		       24 00		      bit	CXM0P
    186  fabc		       70 06		      bvs	.bug_collision_active
    187  fabe		       60		      rts
    188  fabf
    189  fabf				   .bug_collision_m1
    190  fabf							; Collision for M1 (N set)
    191  fabf		       24 01		      bit	CXM1P
    192  fac1		       30 01		      bmi	.bug_collision_active
    193  fac3		       60		      rts
    194  fac4
    195  fac4				   .bug_collision_active
    196  fac4
    197  fac4							; Reduce players score
    198  fac4		       a5 94		      lda	ScoreValue
    199  fac6		       f0 02		      beq	.bug_collision_score_skip
    200  fac8		       c6 94		      dec	ScoreValue
    201  faca				   .bug_collision_score_skip
    202  faca
    203  faca							; Play sound
    204  faca		       20 2e fb 	      jsr	BugColSample
    205  facd
    206  facd		       60		      rts
    207  face
    208  face				   BugStunCollision
    209  face
    210  face		       e0 01		      cpx	#1
    211  fad0		       f0 05		      beq	.bug_stun_collision_m1
    212  fad2
    213  fad2				   .bug_stun_collision_m0
    214  fad2							; Collision for M0 (V set)
    215  fad2		       24 00		      bit	CXM0P
    216  fad4		       70 06		      bvs	.bug_stun_collision_active
    217  fad6		       60		      rts
    218  fad7
    219  fad7				   .bug_stun_collision_m1
    220  fad7							; Collision for M1 (N set)
    221  fad7		       24 01		      bit	CXM1P
    222  fad9		       30 01		      bmi	.bug_stun_collision_active
    223  fadb		       60		      rts
    224  fadc
    225  fadc				   .bug_stun_collision_active
    226  fadc							; Add points to score
    227  fadc		       18		      clc
    228  fadd		       a5 95		      lda	ScoreValue+1
    229  fadf		       69 04		      adc	#BUG_POINTS
    230  fae1		       85 95		      sta	ScoreValue+1
    231  fae3
    232  fae3							; Reset bug
    233  fae3		       20 27 fa 	      jsr	BugReset
    234  fae6
    235  fae6							; Play sample
    236  fae6		       20 1d fb 	      jsr	BugSample
    237  fae9
    238  fae9		       60		      rts
    239  faea
    240  faea							; Horizontal Positioning
    241  faea
    242  faea				   BugPosition
    243  faea
    244  faea		       a2 02		      ldx	#2
    245  faec		       a5 ba		      lda	BugPosX+0
    246  faee		       20 00 f0 	      jsr	PosObject
    247  faf1
    248  faf1		       a2 03		      ldx	#3
    249  faf3		       a5 bb		      lda	BugPosX+1
    250  faf5		       20 00 f0 	      jsr	PosObject
    251  faf8
    252  faf8		       60		      rts
    253  faf9
    254  faf9							; Scanline Draw
    255  faf9
    256  faf9				   BugDrawStart
    257  faf9
    258  faf9		       a0 01		      ldy	#1
    259  fafb				   .bug_draw_start_loop
    260  fafb
    261  fafb							; Set missile 0 & 1 to be 8 clock size
    262  fafb		       b9 81 00 	      lda	NuSiz0,y
    263  fafe		       09 30		      ora	#%00110000
    264  fb00		       99 81 00 	      sta	NuSiz0,y
    265  fb03		       99 04 00 	      sta	NUSIZ0,y
    266  fb06
    267  fb06							; Setup half scanline positions
    268  fb06		       b9 bc 00 	      lda	BugPosY,y
    269  fb09		       4a		      lsr
    270  fb0a		       99 be 00 	      sta	BugDrawPosBottom,y
    271  fb0d
    272  fb0d		       69 04		      adc	#BUG_SIZE/2
    273  fb0f		       99 c0 00 	      sta	BugDrawPosTop,y
    274  fb12
    275  fb12		       88		      dey
    276  fb13		       10 e6		      bpl	.bug_draw_start_loop
    277  fb15
    278  fb15		       60		      rts
    279  fb16
    280  fb16				   BugClean
    281  fb16		       a9 00		      lda	#0
    282  fb18		       85 1d		      sta	ENAM0
    283  fb1a		       85 1e		      sta	ENAM1
    284  fb1c		       60		      rts
    285  fb1d
    286  fb1d				   BugSample
    287  fb1d		       a9 1e		      lda	#BUG_SAMPLE_LEN
    288  fb1f		       85 93		      sta	SampleStep
    289  fb21		       a9 03		      lda	#BUG_SAMPLE_C
    290  fb23		       85 16		      sta	AUDC1
    291  fb25		       a9 14		      lda	#BUG_SAMPLE_F
    292  fb27		       85 18		      sta	AUDF1
    293  fb29		       a9 04		      lda	#BUG_SAMPLE_V
    294  fb2b		       85 1a		      sta	AUDV1
    295  fb2d		       60		      rts
    296  fb2e
    297  fb2e				   BugColSample
    298  fb2e		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    299  fb30		       85 93		      sta	SampleStep
    300  fb32		       a9 08		      lda	#BUG_COL_SAMPLE_C
    301  fb34		       85 16		      sta	AUDC1
    302  fb36		       a9 08		      lda	#BUG_COL_SAMPLE_F
    303  fb38		       85 18		      sta	AUDF1
    304  fb3a		       a9 03		      lda	#BUG_COL_SAMPLE_V
    305  fb3c		       85 1a		      sta	AUDV1
    306  fb3e		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fb3f					      include	"objects/swatter.asm"
      1  fb3f							;==================
      2  fb3f							; Swatter (player1)
      3  fb3f							;==================
      4  fb3f
      5  fb3f							; Constants
      6  fb3f
      7  fb3f		       00 30	   SWATTER_COLOR =	#$30
      8  fb3f		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fb3f		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fb3f		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fb3f
     12  fb3f		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fb3f		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fb3f
     15  fb3f		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fb3f		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fb3f
     18  fb3f		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fb3f		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fb3f		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fb3f
     22  fb3f		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fb3f		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fb3f		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fb3f		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fb3f		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fb3f
     28  fb3f		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fb3f		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fb3f		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fb3f		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fb3f
     33  fb3f		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fb3f		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fb3f		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fb3f		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fb3f
     38  fb3f							; Initialization
     39  fb3f
     40  fb3f				   SwatterInit
     41  fb3f
     42  fb3f		       20 1d fc 	      jsr	SwatterReset
     43  fb42
     44  fb42		       60		      rts
     45  fb43
     46  fb43							; Frame Update
     47  fb43
     48  fb43				   SwatterUpdate
     49  fb43
     50  fb43							; Check b/w
     51  fb43		       ad 82 02 	      lda	SWCHB
     52  fb46					      REPEAT	4
     53  fb46		       4a		      lsr
     52  fb46					      REPEND
     53  fb47		       4a		      lsr
     52  fb47					      REPEND
     53  fb48		       4a		      lsr
     52  fb48					      REPEND
     53  fb49		       4a		      lsr
     54  fb4a					      REPEND
     55  fb4a		       90 10		      bcc	.swatter_update_bw
     56  fb4c
     57  fb4c				   .swatter_update_color
     58  fb4c		       a5 c4		      lda	SwatterState
     59  fb4e		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     60  fb50		       d0 05		      bne	.swatter_update_color_hold
     61  fb52				   .swatter_update_color_active
     62  fb52		       a9 30		      lda	#SWATTER_COLOR
     63  fb54		       4c 69 fb 	      jmp	.swatter_update_color_set
     64  fb57				   .swatter_update_color_hold
     65  fb57		       a9 36		      lda	#SWATTER_HOLD_COLOR
     66  fb59		       4c 69 fb 	      jmp	.swatter_update_color_set
     67  fb5c
     68  fb5c				   .swatter_update_bw
     69  fb5c		       a5 c4		      lda	SwatterState
     70  fb5e		       c9 80		      cmp	#SWATTER_STATE_HOLD
     71  fb60		       d0 05		      bne	.swatter_update_bw_active
     72  fb62				   .swatter_update_bw_hold
     73  fb62		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     74  fb64		       4c 69 fb 	      jmp	.swatter_update_color_set
     75  fb67				   .swatter_update_bw_active
     76  fb67		       a9 0e		      lda	#SWATTER_BW_COLOR
     77  fb69
     78  fb69				   .swatter_update_color_set
     79  fb69		       85 c5		      sta	SwatterColor
     80  fb6b
     81  fb6b				   .swatter_update_hold_sample
     82  fb6b		       a4 c4		      ldy	SwatterState
     83  fb6d		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fb6f		       d0 0f		      bne	.swatter_update_state
     85  fb71
     86  fb71		       c6 cb		      dec	SwatterSampleCount
     87  fb73		       d0 0b		      bne	.swatter_update_state
     88  fb75
     89  fb75		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     90  fb77		       85 cb		      sta	SwatterSampleCount
     91  fb79
     92  fb79		       c6 cc		      dec	SwatterSampleF
     93  fb7b		       a4 cc		      ldy	SwatterSampleF
     94  fb7d		       20 3d fc 	      jsr	SwatterHoldSample
     95  fb80
     96  fb80				   .swatter_update_state
     97  fb80		       a6 90		      ldx	FrameTimer+1
     98  fb82		       e0 00		      cpx	#0
     99  fb84		       d0 2d		      bne	.swatter_update_collision
    100  fb86
    101  fb86		       a4 c4		      ldy	SwatterState
    102  fb88		       c0 00		      cpy	#SWATTER_STATE_WAIT
    103  fb8a		       f0 0a		      beq	.swatter_update_state_wait
    104  fb8c
    105  fb8c		       c0 80		      cpy	#SWATTER_STATE_HOLD
    106  fb8e		       f0 18		      beq	.swatter_update_state_hold
    107  fb90
    108  fb90							; Else we're at the end of the active state
    109  fb90		       20 1d fc 	      jsr	SwatterReset
    110  fb93		       4c c2 fb 	      jmp	.swatter_update_return
    111  fb96
    112  fb96				   .swatter_update_state_wait
    113  fb96		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    114  fb98		       84 cc		      sty	SwatterSampleF
    115  fb9a		       20 3d fc 	      jsr	SwatterHoldSample
    116  fb9d
    117  fb9d		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    118  fb9f		       85 cb		      sta	SwatterSampleCount
    119  fba1
    120  fba1		       a9 80		      lda	#SWATTER_STATE_HOLD
    121  fba3		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    122  fba5		       4c af fb 	      jmp	.swatter_update_state_set
    123  fba8
    124  fba8				   .swatter_update_state_hold
    125  fba8		       20 4c fc 	      jsr	SwatterActiveSample
    126  fbab
    127  fbab		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    128  fbad		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    129  fbaf
    130  fbaf				   .swatter_update_state_set
    131  fbaf		       85 c4		      sta	SwatterState
    132  fbb1		       86 90		      stx	FrameTimer+1
    133  fbb3
    134  fbb3				   .swatter_update_collision
    135  fbb3							; Check 1 frame after active
    136  fbb3		       a5 c4		      lda	SwatterState
    137  fbb5		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    138  fbb7		       d0 09		      bne	.swatter_update_return
    139  fbb9		       a6 90		      ldx	FrameTimer+1
    140  fbbb		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    141  fbbd		       d0 03		      bne	.swatter_update_return
    142  fbbf
    143  fbbf		       20 c3 fb 	      jsr	SwatterCollision
    144  fbc2
    145  fbc2				   .swatter_update_return
    146  fbc2		       60		      rts
    147  fbc3
    148  fbc3				   SwatterCollision
    149  fbc3		       24 00		      bit	CXM0P
    150  fbc5		       30 09		      bmi	.swatter_collision_m0
    151  fbc7
    152  fbc7		       24 01		      bit	CXM1P
    153  fbc9		       70 0a		      bvs	.swatter_collision_m1
    154  fbcb
    155  fbcb		       24 07		      bit	CXPPMM
    156  fbcd		       30 0e		      bmi	.swatter_collision_p0
    157  fbcf
    158  fbcf		       60		      rts
    159  fbd0
    160  fbd0				   .swatter_collision_m0
    161  fbd0		       a2 00		      ldx	#0
    162  fbd2		       4c d7 fb 	      jmp	.swatter_collision_bug_reset
    163  fbd5
    164  fbd5				   .swatter_collision_m1
    165  fbd5		       a2 01		      ldx	#1
    166  fbd7
    167  fbd7				   .swatter_collision_bug_reset
    168  fbd7		       20 27 fa 	      jsr	BugReset
    169  fbda		       4c ef fb 	      jmp	.swatter_collision_active
    170  fbdd
    171  fbdd				   .swatter_collision_p0
    172  fbdd
    173  fbdd		       a5 94		      lda	ScoreValue
    174  fbdf		       c5 c7		      cmp	SwatterHitDamage
    175  fbe1		       90 08		      bcc	.swatter_collision_p0_zero
    176  fbe3		       f0 06		      beq	.swatter_collision_p0_zero
    177  fbe5
    178  fbe5		       18		      clc
    179  fbe6		       e5 c7		      sbc	SwatterHitDamage
    180  fbe8		       4c ed fb 	      jmp	.swatter_collision_p0_set
    181  fbeb
    182  fbeb				   .swatter_collision_p0_zero
    183  fbeb		       a9 00		      lda	#0
    184  fbed
    185  fbed				   .swatter_collision_p0_set
    186  fbed		       85 94		      sta	ScoreValue
    187  fbef
    188  fbef				   .swatter_collision_active
    189  fbef		       20 5d fc 	      jsr	SwatterHitSample
    190  fbf2
    191  fbf2		       60		      rts
    192  fbf3
    193  fbf3				   SwatterPosition
    194  fbf3
    195  fbf3							; Set Position
    196  fbf3		       a2 01		      ldx	#1	; Object (player1)
    197  fbf5		       a5 c2		      lda	SwatterPos	; X Position
    198  fbf7		       20 00 f0 	      jsr	PosObject
    199  fbfa
    200  fbfa		       60		      rts
    201  fbfb
    202  fbfb							; Scanline Draw
    203  fbfb
    204  fbfb				   SwatterDrawStart
    205  fbfb
    206  fbfb							; Set player 1 to be quad size
    207  fbfb		       a5 82		      lda	NuSiz1
    208  fbfd		       29 f8		      and	#%11111000
    209  fbff		       09 07		      ora	#%00000111
    210  fc01		       85 82		      sta	NuSiz1
    211  fc03		       85 05		      sta	NUSIZ1
    212  fc05
    213  fc05							; Set sprite color
    214  fc05		       a5 c5		      lda	SwatterColor
    215  fc07		       85 07		      sta	COLUP1
    216  fc09
    217  fc09							; Note: Doesn't need vertical delay
    218  fc09
    219  fc09							; Calculate starting position
    220  fc09		       a5 c3		      lda	SwatterPos+1	; Y Position
    221  fc0b		       4a		      lsr
    222  fc0c		       18		      clc
    223  fc0d		       69 14		      adc	#SWATTER_SPRITE_SIZE
    224  fc0f		       85 c9		      sta	SwatterDrawPos
    225  fc11
    226  fc11							; Initialize sprite index
    227  fc11		       a9 00		      lda	#0
    228  fc13		       85 c8		      sta	SwatterIndex
    229  fc15		       85 ca		      sta	SwatterLine
    230  fc17
    231  fc17		       60		      rts
    232  fc18
    233  fc18				   SwatterClean
    234  fc18
    235  fc18							; Clear out Player1 sprite
    236  fc18		       a9 00		      lda	#0
    237  fc1a		       85 1c		      sta	GRP1
    238  fc1c
    239  fc1c		       60		      rts
    240  fc1d
    241  fc1d				   SwatterReset
    242  fc1d							; Initialize Swatter State
    243  fc1d		       a9 00		      lda	#SWATTER_STATE_WAIT
    244  fc1f		       85 c4		      sta	SwatterState
    245  fc21
    246  fc21							; Set Wait Timer
    247  fc21		       20 13 f0 	      jsr	Random
    248  fc24		       a5 86		      lda	Rand8
    249  fc26		       29 3f		      and	#$3f
    250  fc28		       18		      clc
    251  fc29		       65 c6		      adc	SwatterWaitTime
    252  fc2b		       85 90		      sta	FrameTimer+1
    253  fc2d
    254  fc2d							; Set Random Position
    255  fc2d		       20 13 f0 	      jsr	Random
    256  fc30		       a5 86		      lda	Rand8	; X Position
    257  fc32		       29 7f		      and	#$7f
    258  fc34		       85 c2		      sta	SwatterPos+0
    259  fc36		       a5 87		      lda	Rand16	; Y Position
    260  fc38		       29 7e		      and	#$7e	; Ensure that Y position is even
    261  fc3a		       85 c3		      sta	SwatterPos+1
    262  fc3c
    263  fc3c		       60		      rts
    264  fc3d
    265  fc3d				   SwatterHoldSample
    266  fc3d		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    267  fc3f		       85 93		      sta	SampleStep
    268  fc41		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    269  fc43		       85 16		      sta	AUDC1
    270  fc45		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    271  fc47		       85 1a		      sta	AUDV1
    272  fc49
    273  fc49		       84 18		      sty	AUDF1	; Store value of y as frequency
    274  fc4b
    275  fc4b		       60		      rts
    276  fc4c
    277  fc4c				   SwatterActiveSample
    278  fc4c		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    279  fc4e		       85 93		      sta	SampleStep
    280  fc50		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    281  fc52		       85 16		      sta	AUDC1
    282  fc54		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    283  fc56		       85 18		      sta	AUDF1
    284  fc58		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    285  fc5a		       85 1a		      sta	AUDV1
    286  fc5c		       60		      rts
    287  fc5d
    288  fc5d				   SwatterHitSample
    289  fc5d		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    290  fc5f		       85 93		      sta	SampleStep
    291  fc61		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    292  fc63		       85 16		      sta	AUDC1
    293  fc65		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    294  fc67		       85 18		      sta	AUDF1
    295  fc69		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    296  fc6b		       85 1a		      sta	AUDV1
    297  fc6d		       60		      rts
------- FILE game.asm
     22  fc6e
     23  fc6e							; Initialization
     24  fc6e
     25  fc6e				   GameInit
     26  fc6e
     27  fc6e							; Setup logic and kernel
      0  fc6e					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fc6e				   .POINTER   SET	VBlankPtr
      2  fc6e				   .ADDRESS   SET	GameVerticalBlank
      3  fc6e
      4  fc6e		       a9 af		      LDA	#<.ADDRESS
      5  fc70		       85 88		      STA	.POINTER
      6  fc72		       a9 fc		      LDA	#>.ADDRESS
      7  fc74		       85 89		      STA	.POINTER+1
      8  fc76
      0  fc76					      SET_POINTER	KernelPtr, GameKernel
      1  fc76				   .POINTER   SET	KernelPtr
      2  fc76				   .ADDRESS   SET	GameKernel
      3  fc76
      4  fc76		       a9 33		      LDA	#<.ADDRESS
      5  fc78		       85 8a		      STA	.POINTER
      6  fc7a		       a9 fd		      LDA	#>.ADDRESS
      7  fc7c		       85 8b		      STA	.POINTER+1
      8  fc7e
      0  fc7e					      SET_POINTER	OverScanPtr, GameOverScan
      1  fc7e				   .POINTER   SET	OverScanPtr
      2  fc7e				   .ADDRESS   SET	GameOverScan
      3  fc7e
      4  fc7e		       a9 d9		      LDA	#<.ADDRESS
      5  fc80		       85 8c		      STA	.POINTER
      6  fc82		       a9 fc		      LDA	#>.ADDRESS
      7  fc84		       85 8d		      STA	.POINTER+1
      8  fc86
     31  fc86
     32  fc86							; Mute Audio
     33  fc86		       a9 00		      lda	#0
     34  fc88							;    sta AUDC0
     35  fc88							;    sta AUDV0
     36  fc88							;    sta AUDF0
     37  fc88		       85 16		      sta	AUDC1
     38  fc8a		       85 1a		      sta	AUDV1
     39  fc8c		       85 18		      sta	AUDF1
     40  fc8e		       85 93		      sta	SampleStep
     41  fc90
     42  fc90							; Load Audio Settings
     43  fc90		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fc92		       85 19		      sta	AUDV0
     45  fc94
     46  fc94							; Make it so that we play the first note immediately
     47  fc94		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fc96		       85 92		      sta	AudioStep
     49  fc98		       a9 02		      lda	#2
     50  fc9a		       85 8f		      sta	FrameTimer
     51  fc9c
     52  fc9c							; Reset NuSiz
     53  fc9c							;    lda #0
     54  fc9c							;    sta NuSiz0
     55  fc9c							;    sta NUSIZ0
     56  fc9c							;    sta NuSiz1
     57  fc9c							;    sta NUSIZ1
     58  fc9c
     59  fc9c							; Initialize Objects
     60  fc9c		       20 c4 f4 	      jsr	LevelInit
     61  fc9f		       20 5f f5 	      jsr	ScoreInit
     62  fca2		       20 14 f7 	      jsr	SpiderInit
     63  fca5		       20 7b f8 	      jsr	LineInit
     64  fca8		       20 1e fa 	      jsr	BugInit
     65  fcab		       20 3f fb 	      jsr	SwatterInit
     66  fcae
     67  fcae		       60		      rts
     68  fcaf
     69  fcaf				   GameVerticalBlank
     70  fcaf
     71  fcaf							; Refresh random values
     72  fcaf		       20 13 f0 	      jsr	Random
     73  fcb2
     74  fcb2							; Update Objects
     75  fcb2		       20 d5 f4 	      jsr	LevelUpdate
     76  fcb5		       20 25 f7 	      jsr	SpiderUpdate
     77  fcb8		       20 90 f8 	      jsr	LineUpdate
     78  fcbb		       20 3b fa 	      jsr	BugUpdate
     79  fcbe		       20 43 fb 	      jsr	SwatterUpdate
     80  fcc1		       20 68 f5 	      jsr	ScoreUpdate
     81  fcc4
     82  fcc4							; Reset Collisions
     83  fcc4		       85 2c		      sta	CXCLR
     84  fcc6
     85  fcc6							; Clear horizontal movement
     86  fcc6		       85 2b		      sta	HMCLR
     87  fcc8
     88  fcc8							; Update Positions
     89  fcc8		       20 46 f8 	      jsr	SpiderPosition
     90  fccb		       20 b2 f9 	      jsr	LinePosition
     91  fcce		       20 ea fa 	      jsr	BugPosition
     92  fcd1		       20 f3 fb 	      jsr	SwatterPosition
     93  fcd4
     94  fcd4							; Set final x positions
     95  fcd4		       85 02		      sta	WSYNC
     96  fcd6		       85 2a		      sta	HMOVE
     97  fcd8
     98  fcd8		       60		      rts
     99  fcd9
    100  fcd9				   GameOverScan
    101  fcd9
    102  fcd9							; Audio Routines
    103  fcd9		       20 f7 fc 	      jsr	GameAudio
    104  fcdc		       20 e3 fc 	      jsr	GameSample
    105  fcdf
    106  fcdf							; State Routines
    107  fcdf		       20 2b fd 	      jsr	GameDeath
    108  fce2
    109  fce2		       60		      rts
    110  fce3
    111  fce3				   GameSample
    112  fce3
    113  fce3		       a6 93		      ldx	SampleStep
    114  fce5		       e0 00		      cpx	#0
    115  fce7		       f0 0b		      beq	.game_sample_return
    116  fce9
    117  fce9		       ca		      dex
    118  fcea		       d0 08		      bne	.game_sample_return
    119  fcec
    120  fcec				   .game_sample_mute
    121  fcec		       a9 00		      lda	#0
    122  fcee		       85 1a		      sta	AUDV1
    123  fcf0		       85 18		      sta	AUDF1
    124  fcf2		       85 16		      sta	AUDC1
    125  fcf4
    126  fcf4				   .game_sample_return
    127  fcf4		       86 93		      stx	SampleStep
    128  fcf6		       60		      rts
    129  fcf7
    130  fcf7				   GameAudio
    131  fcf7
    132  fcf7		       a6 8f		      ldx	FrameTimer
    133  fcf9		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    134  fcfb		       f0 25		      beq	.game_audio_mute_note
    135  fcfd		       e0 00		      cpx	#0
    136  fcff		       d0 29		      bne	.game_audio_return
    137  fd01
    138  fd01							; Reset Timer
    139  fd01		       a2 09		      ldx	#GAME_AUDIO_STEP
    140  fd03		       86 8f		      stx	FrameTimer
    141  fd05
    142  fd05				   .game_audio_play
    143  fd05
    144  fd05							; Increment melody position
    145  fd05		       a4 92		      ldy	AudioStep
    146  fd07		       c8		      iny
    147  fd08
    148  fd08		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    149  fd0a		       d0 02		      bne	.game_audio_play_note
    150  fd0c
    151  fd0c							; Loop our audio step
    152  fd0c		       a0 00		      ldy	#0
    153  fd0e
    154  fd0e				   .game_audio_play_note
    155  fd0e
    156  fd0e							; Save current position
    157  fd0e		       84 92		      sty	AudioStep
    158  fd10
    159  fd10							; Melody Line
    160  fd10		       b9 0b fe 	      lda	GameAudio0,y
    161  fd13		       c9 ff		      cmp	#$FF
    162  fd15		       f0 0b		      beq	.game_audio_mute_note
    163  fd17		       85 17		      sta	AUDF0
    164  fd19		       a9 06		      lda	#GAME_AUDIO_TONE
    165  fd1b		       85 15		      sta	AUDC0
    166  fd1d		       a9 02		      lda	#GAME_AUDIO_VOLUME
    167  fd1f		       85 19		      sta	AUDV0
    168  fd21
    169  fd21		       60		      rts
    170  fd22
    171  fd22				   .game_audio_mute_note
    172  fd22
    173  fd22		       a9 00		      lda	#0
    174  fd24		       85 17		      sta	AUDF0
    175  fd26		       85 15		      sta	AUDC0
    176  fd28		       85 19		      sta	AUDV0
    177  fd2a
    178  fd2a				   .game_audio_return
    179  fd2a		       60		      rts
    180  fd2b
    181  fd2b				   GameDeath
    182  fd2b		       a5 94		      lda	ScoreValue+0
    183  fd2d		       d0 03		      bne	.game_death_return
    184  fd2f
    185  fd2f							; Show Game Over Screen
    186  fd2f		       20 2b fe 	      jsr	OverInit
    187  fd32
    188  fd32				   .game_death_return
    189  fd32		       60		      rts
    190  fd33
    191  fd33				   GameKernel
    192  fd33
    193  fd33							; Turn on display
    194  fd33		       a9 00		      lda	#0
    195  fd35		       85 01		      sta	VBLANK
    196  fd37
    197  fd37				   .game_kernel_score
    198  fd37
    199  fd37							; Draw Score on top first
    200  fd37		       20 da f5 	      jsr	ScoreDraw
    201  fd3a
    202  fd3a				   .game_kernel_objects_start
    203  fd3a
    204  fd3a							; Setup Drawing Objects
    205  fd3a		       20 f4 f6 	      jsr	WebDrawStart
    206  fd3d		       20 4e f8 	      jsr	SpiderDrawStart
    207  fd40		       20 fb fb 	      jsr	SwatterDrawStart
    208  fd43		       20 ba f9 	      jsr	LineDrawStart
    209  fd46		       20 f9 fa 	      jsr	BugDrawStart
    210  fd49
    211  fd49							; Start Scanline Counter
    212  fd49		       a2 a8		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    213  fd4b							; The extra 5 is for processing overflow
    214  fd4b
    215  fd4b							; Half scanline counter in Temp+1
    216  fd4b		       a9 56		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    217  fd4d		       85 84		      sta	Temp+1
    218  fd4f
    219  fd4f							; 6 line counter
    220  fd4f		       a9 00		      lda	#0
    221  fd51		       85 85		      sta	Temp+2
    222  fd53
    223  fd53							; Load background color
    224  fd53		       a5 a1		      lda	WebColor+0
    225  fd55		       85 09		      sta	COLUBK
    226  fd57
    227  fd57							;sta WSYNC
    228  fd57
    229  fd57				   .game_kernel_objects
    230  fd57
    231  fd57		       a5 85		      lda	Temp+2
    232  fd59		       d0 1a		      bne	.game_kernel_missle
    233  fd5b
    234  fd5b		       a9 03		      lda	#3
    235  fd5d		       85 85		      sta	Temp+2
    236  fd5f
    237  fd5f				   .game_kernel_web
    238  fd5f
    239  fd5f				   .game_kernel_web_pf
    240  fd5f							; Web
    241  fd5f
    242  fd5f		       a4 a0		      ldy	WebIndex
    243  fd61
    244  fd61							; Load Image
    245  fd61		       b9 3e f1 	      lda	WebImagePF0,y
    246  fd64		       85 0d		      sta	PF0
    247  fd66		       b9 5c f1 	      lda	WebImagePF1,y
    248  fd69		       85 0e		      sta	PF1
    249  fd6b		       b9 7a f1 	      lda	WebImagePF2,y
    250  fd6e		       85 0f		      sta	PF2
    251  fd70
    252  fd70		       e6 a0		      inc	WebIndex
    253  fd72
    254  fd72		       4c 93 fd 	      jmp	.game_kernel_line
    255  fd75
    256  fd75				   .game_kernel_missle
    257  fd75
    258  fd75							; Preload half-line
    259  fd75		       a5 84		      lda	Temp+1
    260  fd77
    261  fd77				   .game_kernel_missle_bug_0
    262  fd77							; First Bug
    263  fd77
    264  fd77		       a0 00		      ldy	#%00000000
    265  fd79
    266  fd79							; Top
    267  fd79		       c5 c0		      cmp	BugDrawPosTop+0
    268  fd7b		       b0 06		      bcs	.game_kernel_missle_bug_0_off
    269  fd7d
    270  fd7d							; Bottom
    271  fd7d		       c5 be		      cmp	BugDrawPosBottom+0
    272  fd7f		       90 02		      bcc	.game_kernel_missle_bug_0_off
    273  fd81
    274  fd81				   .game_kernel_missle_bug_0_on
    275  fd81		       a0 02		      ldy	#%00000010
    276  fd83
    277  fd83				   .game_kernel_missle_bug_0_off
    278  fd83		       84 1d		      sty	ENAM0
    279  fd85
    280  fd85				   .game_kernel_missle_bug_1
    281  fd85							; Second Bug
    282  fd85
    283  fd85		       a0 00		      ldy	#%00000000
    284  fd87
    285  fd87							; Top
    286  fd87		       c5 c1		      cmp	BugDrawPosTop+1
    287  fd89		       b0 06		      bcs	.game_kernel_missle_bug_1_off
    288  fd8b
    289  fd8b							; Bottom
    290  fd8b		       c5 bf		      cmp	BugDrawPosBottom+1
    291  fd8d		       90 02		      bcc	.game_kernel_missle_bug_1_off
    292  fd8f
    293  fd8f				   .game_kernel_missle_bug_1_on
    294  fd8f		       a0 02		      ldy	#%00000010
    295  fd91
    296  fd91				   .game_kernel_missle_bug_1_off
    297  fd91		       84 1e		      sty	ENAM1
    298  fd93
    299  fd93							;jmp .game_kernel_line_skip
    300  fd93
    301  fd93				   .game_kernel_line
    302  fd93							; Line
    303  fd93
    304  fd93		       24 ae		      bit	LineEnabled
    305  fd95		       10 10		      bpl	.game_kernel_line_skip
    306  fd97
    307  fd97							; Load half-line
    308  fd97		       a5 84		      lda	Temp+1
    309  fd99
    310  fd99		       a0 00		      ldy	#%00000000
    311  fd9b
    312  fd9b							; Top
    313  fd9b		       c5 b6		      cmp	LineDrawPos+1
    314  fd9d		       b0 06		      bcs	.game_kernel_line_set
    315  fd9f
    316  fd9f							; Bottom
    317  fd9f		       c5 b5		      cmp	LineDrawPos+0
    318  fda1		       90 02		      bcc	.game_kernel_line_set
    319  fda3
    320  fda3		       a0 02		      ldy	#%00000010
    321  fda5				   .game_kernel_line_set
    322  fda5		       84 1f		      sty	ENABL
    323  fda7
    324  fda7				   .game_kernel_line_skip
    325  fda7
    326  fda7							; Next Line
    327  fda7		       ca		      dex
    328  fda8							;sta WSYNC
    329  fda8
    330  fda8				   .game_kernel_sprite
    331  fda8
    332  fda8				   .game_kernel_sprite_spider
    333  fda8							; Spider
    334  fda8
    335  fda8		       a4 a9		      ldy	SpiderIndex
    336  fdaa		       30 1a		      bmi	.game_kernel_sprite_spider_load	; At end of sprite
    337  fdac		       d0 06		      bne	.game_kernel_sprite_spider_draw	; Currently drawing (not zero)
    338  fdae
    339  fdae							; Check y position to see if we should start
    340  fdae		       a5 84		      lda	Temp+1	; Use half scanline
    341  fdb0		       e5 aa		      sbc	SpiderDrawPos
    342  fdb2		       10 12		      bpl	.game_kernel_sprite_spider_load
    343  fdb4
    344  fdb4				   .game_kernel_sprite_spider_draw
    345  fdb4		       b1 a3		      lda	(SpiderPtr),y
    346  fdb6		       85 ab		      sta	SpiderLine
    347  fdb8
    348  fdb8							; Increment sprite index
    349  fdb8		       e6 a9		      inc	SpiderIndex
    350  fdba
    351  fdba							; See if we're at the end
    352  fdba		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    353  fdbc		       d0 0a		      bne	.game_kernel_sprite_spider_line
    354  fdbe		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    355  fdc0		       84 a9		      sty	SpiderIndex
    356  fdc2		       a9 00		      lda	#0
    357  fdc4		       85 ab		      sta	SpiderLine
    358  fdc6
    359  fdc6				   .game_kernel_sprite_spider_load
    360  fdc6		       a5 ab		      lda	SpiderLine
    361  fdc8				   .game_kernel_sprite_spider_line
    362  fdc8		       85 1b		      sta	GRP0
    363  fdca
    364  fdca				   .game_kernel_sprite_swatter
    365  fdca							; Swatter
    366  fdca
    367  fdca							; Check if wait state
    368  fdca		       24 c4		      bit	SwatterState
    369  fdcc		       10 1b		      bpl	.game_kernel_sprite_swatter_load
    370  fdce
    371  fdce		       a4 c8		      ldy	SwatterIndex
    372  fdd0		       30 17		      bmi	.game_kernel_sprite_swatter_load	; At end of sprite
    373  fdd2		       d0 06		      bne	.game_kernel_sprite_swatter_draw	; Currently drawing (not zero)
    374  fdd4
    375  fdd4							; Check y position to see if we should start
    376  fdd4		       a5 84		      lda	Temp+1	; Use half scanline
    377  fdd6		       e5 c9		      sbc	SwatterDrawPos
    378  fdd8		       10 0f		      bpl	.game_kernel_sprite_swatter_load
    379  fdda
    380  fdda				   .game_kernel_sprite_swatter_draw
    381  fdda		       b9 c8 f1 	      lda	SwatterSprite,y
    382  fddd		       85 ca		      sta	SwatterLine
    383  fddf
    384  fddf							; Increment index
    385  fddf		       e6 c8		      inc	SwatterIndex
    386  fde1
    387  fde1							; See if we're at the end
    388  fde1		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    389  fde3		       d0 06		      bne	.game_kernel_sprite_swatter_line
    390  fde5		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    391  fde7		       84 c8		      sty	SwatterIndex
    392  fde9
    393  fde9				   .game_kernel_sprite_swatter_load
    394  fde9		       a5 ca		      lda	SwatterLine
    395  fdeb				   .game_kernel_sprite_swatter_line
    396  fdeb		       85 1c		      sta	GRP1
    397  fded
    398  fded		       85 02		      sta	WSYNC
    399  fdef
    400  fdef				   .game_kernel_sprite_end
    401  fdef
    402  fdef							; New line, decrement half scanline, and increment 3 line counter
    403  fdef		       c6 84		      dec	Temp+1
    404  fdf1		       c6 85		      dec	Temp+2
    405  fdf3		       ca		      dex
    406  fdf4		       f0 03		      beq	.game_kernel_clean
    407  fdf6		       4c 57 fd 	      jmp	.game_kernel_objects
    408  fdf9
    409  fdf9				   .game_kernel_clean
    410  fdf9
    411  fdf9		       20 07 f7 	      jsr	WebClean
    412  fdfc		       20 76 f8 	      jsr	SpiderClean
    413  fdff		       20 da f9 	      jsr	LineClean
    414  fe02		       20 16 fb 	      jsr	BugClean
    415  fe05		       20 18 fc 	      jsr	SwatterClean
    416  fe08
    417  fe08		       85 02		      sta	WSYNC
    418  fe0a
    419  fe0a				   .game_kernel_return
    420  fe0a		       60		      rts
    421  fe0b
    422  fe0b				   GameAudio0
    423  fe0b		       0d		      .byte.b	#13	; D
    424  fe0c		       ff		      .byte.b	#$FF
    425  fe0d		       0f		      .byte.b	#15	; B
    426  fe0e		       ff		      .byte.b	#$FF
    427  fe0f		       0d		      .byte.b	#13	; D
    428  fe10		       ff		      .byte.b	#$FF
    429  fe11		       0f		      .byte.b	#15	; B
    430  fe12		       ff		      .byte.b	#$FF
    431  fe13		       0d		      .byte.b	#13	; D
    432  fe14		       0d		      .byte.b	#13	; D
    433  fe15		       0f		      .byte.b	#15	; B
    434  fe16		       ff		      .byte.b	#$FF
    435  fe17		       0c		      .byte.b	#12	; D#
    436  fe18		       ff		      .byte.b	#$FF
    437  fe19		       0f		      .byte.b	#15	; B
    438  fe1a		       ff		      .byte.b	#$FF
    439  fe1b		       0b		      .byte.b	#11	; E
    440  fe1c		       ff		      .byte.b	#$FF
    441  fe1d		       0e		      .byte.b	#14	; C#
    442  fe1e		       ff		      .byte.b	#$FF
    443  fe1f		       0b		      .byte.b	#11
    444  fe20		       ff		      .byte.b	#$FF
    445  fe21		       0e		      .byte.b	#14
    446  fe22		       ff		      .byte.b	#$FF
    447  fe23		       0b		      .byte.b	#11
    448  fe24		       0b		      .byte.b	#11
    449  fe25		       0e		      .byte.b	#14
    450  fe26		       ff		      .byte.b	#$FF
    451  fe27		       0b		      .byte.b	#11
    452  fe28		       ff		      .byte.b	#$FF
    453  fe29		       0e		      .byte.b	#14
    454  fe2a		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fe2b					      include	"over.asm"
      1  fe2b							;================
      2  fe2b							; Constants
      3  fe2b							;================
      4  fe2b
      5  fe2b		       00 00	   OVER_BG_COLOR =	#$00
      6  fe2b		       00 44	   OVER_FG_COLOR =	#$44
      7  fe2b		       00 06	   OVER_FG_BW_COLOR =	#$06
      8  fe2b
      9  fe2b		       00 07	   OVER_AUDIO_TONE =	7
     10  fe2b		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     11  fe2b		       00 06	   OVER_AUDIO_LENGTH =	6
     12  fe2b		       00 10	   OVER_AUDIO_STEP =	16
     13  fe2b
     14  fe2b		       00 09	   OVER_IMAGE_SIZE =	9
     15  fe2b		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     16  fe2b		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     17  fe2b		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     18  fe2b
     19  fe2b				   OverInit
     20  fe2b
     21  fe2b							; Setup logic and kernel
      0  fe2b					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fe2b				   .POINTER   SET	VBlankPtr
      2  fe2b				   .ADDRESS   SET	OverVerticalBlank
      3  fe2b
      4  fe2b		       a9 5c		      LDA	#<.ADDRESS
      5  fe2d		       85 88		      STA	.POINTER
      6  fe2f		       a9 fe		      LDA	#>.ADDRESS
      7  fe31		       85 89		      STA	.POINTER+1
      8  fe33
      0  fe33					      SET_POINTER	KernelPtr, OverKernel
      1  fe33				   .POINTER   SET	KernelPtr
      2  fe33				   .ADDRESS   SET	OverKernel
      3  fe33
      4  fe33		       a9 b4		      LDA	#<.ADDRESS
      5  fe35		       85 8a		      STA	.POINTER
      6  fe37		       a9 fe		      LDA	#>.ADDRESS
      7  fe39		       85 8b		      STA	.POINTER+1
      8  fe3b
      0  fe3b					      SET_POINTER	OverScanPtr, OverOverScan
      1  fe3b				   .POINTER   SET	OverScanPtr
      2  fe3b				   .ADDRESS   SET	OverOverScan
      3  fe3b
      4  fe3b		       a9 76		      LDA	#<.ADDRESS
      5  fe3d		       85 8c		      STA	.POINTER
      6  fe3f		       a9 fe		      LDA	#>.ADDRESS
      7  fe41		       85 8d		      STA	.POINTER+1
      8  fe43
     25  fe43
     26  fe43							; Load audio settings
     27  fe43		       a9 07		      lda	#OVER_AUDIO_TONE
     28  fe45		       85 15		      sta	AUDC0
     29  fe47							;lda #OVER_AUDIO_VOLUME
     30  fe47							;sta AUDV0
     31  fe47		       a9 00		      lda	#0
     32  fe49		       85 16		      sta	AUDC1
     33  fe4b		       85 1a		      sta	AUDV1
     34  fe4d
     35  fe4d							; Set initial button state
     36  fe4d							;lda #0
     37  fe4d		       85 91		      sta	InputState
     38  fe4f
     39  fe4f							; Setup frame counters
     40  fe4f		       a9 01		      lda	#1
     41  fe51		       85 8f		      sta	FrameTimer
     42  fe53		       a9 10		      lda	#OVER_AUDIO_STEP
     43  fe55		       85 93		      sta	SampleStep
     44  fe57		       a9 06		      lda	#OVER_AUDIO_LENGTH
     45  fe59		       85 92		      sta	AudioStep
     46  fe5b
     47  fe5b		       60		      rts
     48  fe5c
     49  fe5c				   OverVerticalBlank
     50  fe5c		       20 68 f5 	      jsr	ScoreUpdate
     51  fe5f
     52  fe5f							; Load Colors
     53  fe5f		       a9 00		      lda	#OVER_BG_COLOR
     54  fe61		       85 09		      sta	COLUBK
     55  fe63
     56  fe63							; Check b/w
     57  fe63		       ad 82 02 	      lda	SWCHB
     58  fe66					      REPEAT	4
     59  fe66		       4a		      lsr
     58  fe66					      REPEND
     59  fe67		       4a		      lsr
     58  fe67					      REPEND
     59  fe68		       4a		      lsr
     58  fe68					      REPEND
     59  fe69		       4a		      lsr
     60  fe6a					      REPEND
     61  fe6a		       90 05		      bcc	.over_bw
     62  fe6c
     63  fe6c				   .over_color
     64  fe6c		       a9 44		      lda	#OVER_FG_COLOR
     65  fe6e		       85 08		      sta	COLUPF
     66  fe70
     67  fe70		       60		      rts
     68  fe71
     69  fe71				   .over_bw
     70  fe71							; Load b/w Colors
     71  fe71		       a9 06		      lda	#OVER_FG_BW_COLOR
     72  fe73		       85 08		      sta	COLUPF
     73  fe75
     74  fe75		       60		      rts
     75  fe76
     76  fe76				   OverOverScan
     77  fe76		       20 7d fe 	      jsr	OverAudio
     78  fe79		       20 a3 fe 	      jsr	OverState
     79  fe7c		       60		      rts
     80  fe7d
     81  fe7d				   OverAudio
     82  fe7d
     83  fe7d		       a5 8f		      lda	FrameTimer
     84  fe7f		       d0 21		      bne	.over_audio_return
     85  fe81
     86  fe81							; Reset Timer
     87  fe81					      REPEAT	3
     88  fe81		       e6 93		      inc	SampleStep
     87  fe81					      REPEND
     88  fe83		       e6 93		      inc	SampleStep
     87  fe83					      REPEND
     88  fe85		       e6 93		      inc	SampleStep
     89  fe87					      REPEND
     90  fe87		       a5 93		      lda	SampleStep
     91  fe89		       85 8f		      sta	FrameTimer
     92  fe8b
     93  fe8b				   .over_audio_play
     94  fe8b
     95  fe8b							; Increment melody position
     96  fe8b		       a4 92		      ldy	AudioStep
     97  fe8d		       f0 0d		      beq	.over_audio_mute_note
     98  fe8f		       c6 92		      dec	AudioStep
     99  fe91		       88		      dey
    100  fe92
    101  fe92				   .over_audio_play_note
    102  fe92
    103  fe92							; Melody Line
    104  fe92		       b9 06 ff 	      lda	OverAudio0,y
    105  fe95		       85 17		      sta	AUDF0
    106  fe97		       a9 06		      lda	#OVER_AUDIO_VOLUME
    107  fe99		       85 19		      sta	AUDV0
    108  fe9b
    109  fe9b		       60		      rts
    110  fe9c
    111  fe9c				   .over_audio_mute_note
    112  fe9c		       a9 00		      lda	#0
    113  fe9e		       85 17		      sta	AUDF0
    114  fea0		       85 19		      sta	AUDV0
    115  fea2
    116  fea2				   .over_audio_return
    117  fea2		       60		      rts
    118  fea3
    119  fea3				   OverState
    120  fea3
    121  fea3							; Check if Fire Button on controller 1 is released
    122  fea3		       a5 0c		      lda	INPT4
    123  fea5		       30 05		      bmi	.over_state_check
    124  fea7
    125  fea7				   .over_state_on
    126  fea7		       a9 01		      lda	#1
    127  fea9		       85 91		      sta	InputState
    128  feab		       60		      rts
    129  feac
    130  feac				   .over_state_check
    131  feac		       a5 91		      lda	InputState
    132  feae		       f0 03		      beq	.over_state_return
    133  feb0
    134  feb0				   .over_state_next
    135  feb0							; Button is released, load title screen
    136  feb0		       20 86 f2 	      jsr	TitleInit
    137  feb3
    138  feb3				   .over_state_return
    139  feb3		       60		      rts
    140  feb4
    141  feb4				   OverKernel
    142  feb4
    143  feb4							; Turn on display
    144  feb4		       a9 00		      lda	#0
    145  feb6		       85 01		      sta	VBLANK
    146  feb8
    147  feb8				   .over_kernel_score
    148  feb8
    149  feb8							; Draw Score on top first (no update)
    150  feb8		       20 da f5 	      jsr	ScoreDraw
    151  febb
    152  febb				   .over_kernel_init
    153  febb							; Playfield Control
    154  febb		       a5 80		      lda	CtrlPf
    155  febd		       29 fd		      and	#%11111101	; Use playfield foreground color
    156  febf		       09 01		      ora	#%00000001	; Set mirroring
    157  fec1		       85 80		      sta	CtrlPf
    158  fec3		       85 0a		      sta	CTRLPF
    159  fec5
    160  fec5				   .over_kernel_top_padding
    161  fec5							; Top Padding
    162  fec5		       20 e4 fe 	      jsr	OverPadding
    163  fec8
    164  fec8				   .over_kernel_image
    165  fec8		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    166  feca
    167  feca				   .over_kernel_image_next
    168  feca		       bd fd fe 	      lda	OverImagePF2,x
    169  fecd		       85 0f		      sta	PF2
    170  fecf		       bd f4 fe 	      lda	OverImagePF1,x
    171  fed2		       85 0e		      sta	PF1
    172  fed4							;    lda OverImagePF0,x
    173  fed4							;    sta PF0
    174  fed4
    175  fed4		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    176  fed6				   .over_kernel_image_loop
    177  fed6		       85 02		      sta	WSYNC
    178  fed8		       88		      dey
    179  fed9		       d0 fb		      bne	.over_kernel_image_loop
    180  fedb
    181  fedb		       ca		      dex
    182  fedc		       10 ec		      bpl	.over_kernel_image_next
    183  fede
    184  fede				   .over_kernel_bottom_padding
    185  fede							; Bottom Padding
    186  fede		       20 e4 fe 	      jsr	OverPadding
    187  fee1
    188  fee1				   .over_kernel_return
    189  fee1		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    190  fee3		       60		      rts
    191  fee4
    192  fee4				   OverPadding
    193  fee4		       a9 00		      lda	#0
    194  fee6		       85 0d		      sta	PF0
    195  fee8		       85 0e		      sta	PF1
    196  feea		       85 0f		      sta	PF2
    197  feec
    198  feec		       a2 32		      ldx	#OVER_IMAGE_PADDING
    199  feee				   .over_padding_loop
    200  feee		       85 02		      sta	WSYNC
    201  fef0		       ca		      dex
    202  fef1		       d0 fb		      bne	.over_padding_loop
    203  fef3
    204  fef3		       60		      rts
    205  fef4
    206  fef4				   OverAssets
    207  fef4
    208  fef4							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  fef4					      include	"over_image.asm"
      1  fef4							;OverImagePF0:
      2  fef4							;    .BYTE %00000000
      3  fef4							;    .BYTE %00000000
      4  fef4							;    .BYTE %00000000
      5  fef4							;    .BYTE %00000000
      6  fef4							;    .BYTE %00000000
      7  fef4							;    .BYTE %00000000
      8  fef4							;    .BYTE %00000000
      9  fef4							;    .BYTE %00000000
     10  fef4							;    .BYTE %00000000
     11  fef4
     12  fef4				   OverImagePF1
     13  fef4		       0c		      .BYTE.b	%00001100
     14  fef5		       13		      .BYTE.b	%00010011
     15  fef6		       20		      .BYTE.b	%00100000
     16  fef7		       23		      .BYTE.b	%00100011
     17  fef8		       24		      .BYTE.b	%00100100
     18  fef9		       24		      .BYTE.b	%00100100
     19  fefa		       12		      .BYTE.b	%00010010
     20  fefb		       10		      .BYTE.b	%00010000
     21  fefc		       08		      .BYTE.b	%00001000
     22  fefd
     23  fefd				   OverImagePF2
     24  fefd		       e0		      .BYTE.b	%11100000
     25  fefe		       18		      .BYTE.b	%00011000
     26  feff		       05		      .BYTE.b	%00000101
     27  ff00		       52		      .BYTE.b	%01010010
     28  ff01		       23		      .BYTE.b	%00100011
     29  ff02		       52		      .BYTE.b	%01010010
     30  ff03		       04		      .BYTE.b	%00000100
     31  ff04		       18		      .BYTE.b	%00011000
     32  ff05		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    210  ff06
    211  ff06				   OverAudio0
    212  ff06
    213  ff06		       1a		      .BYTE.b	#26	; D1
    214  ff07		       1a		      .BYTE.b	#26
    215  ff08		       16		      .BYTE.b	#22	; F1
    216  ff09		       11		      .BYTE.b	#17	; A1
    217  ff0a		       0d		      .BYTE.b	#13	; D2
    218  ff0b		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    330  ff0c
    331  ff0c							;================
    332  ff0c							; End of cart
    333  ff0c							;================
    334  ff0c
    335  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    336  fffa
    337  fffa				   InterruptVectors
    338  fffa
    339  fffa		       dc f1		      .word.w	InitSystem	; NMI
    340  fffc		       dc f1		      .word.w	InitSystem	; RESET
    341  fffe		       dc f1		      .word.w	InitSystem	; IRQ
    342  10000
    343  10000					       END
