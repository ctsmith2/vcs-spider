------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00c1 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00 00	   FrameTimer ds	2
     70 U0090
     71 U0090		       00	   AudioStep  ds	1
     72 U0091
     73 U0091		       00	   SampleStep ds	1
     74 U0092
     75 U0092							; Score
     76 U0092
     77 U0092		       00 00	   ScoreValue ds	2
     78 U0094		       00 00	   ScoreDigitOnes ds	2
     79 U0096		       00 00	   ScoreDigitTens ds	2
     80 U0098		       00 00	   ScoreGfx   ds	2
     81 U009a
     82 U009a							; Web
     83 U009a
     84 U009a		       00	   WebIndex   ds	1
     85 U009b		       00	   WebDir     ds	1
     86 U009c
     87 U009c							; Spider
     88 U009c
     89 U009c		       00 00	   SpiderPtr  ds	2
     90 U009e		       00 00	   SpiderPos  ds	2
     91 U00a0		       00	   SpiderCtrl ds	1
     92 U00a1		       00	   SpiderColor ds	1
     93 U00a2
     94 U00a2		       00	   SpiderIndex ds	1
     95 U00a3		       00	   SpiderDrawPos ds	1
     96 U00a4
     97 U00a4		       00 00	   SpiderPtr2 ds	2
     98 U00a6
     99 U00a6							; Line
    100 U00a6
    101 U00a6		       00	   LineEnabled ds	1
    102 U00a7		       00 00	   LinePos    ds	2
    103 U00a9		       00 00	   LineVelocity ds	2
    104 U00ab		       00 00	   LineStartPos ds	2
    105 U00ad		       00 00	   LineDrawPos ds	2
    106 U00af
    107 U00af							; Bug
    108 U00af
    109 U00af		       00 00	   BugStunned ds	2
    110 U00b1		       00 00	   BugPosX    ds	2
    111 U00b3		       00 00	   BugPosY    ds	2
    112 U00b5		       00 00	   BugColor   ds	2
    113 U00b7
    114 U00b7		       00 00	   BugDrawPosBottom ds	2
    115 U00b9		       00 00	   BugDrawPosTop ds	2
    116 U00bb
    117 U00bb							; Swatter
    118 U00bb
    119 U00bb		       00 00	   SwatterPos ds	2
    120 U00bd		       00	   SwatterState ds	1
    121 U00be		       00	   SwatterColor ds	1
    122 U00bf
    123 U00bf		       00	   SwatterIndex ds	1
    124 U00c0		       00	   SwatterDrawPos ds	1
    125 U00c1
    126  10000 ????				       SEG
    127  f000					      org	$F000	; Start of cart area
    128  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    130  f021
    131  f021				   InitSystem
    132  f021
    133  f021				   .init_clean
    134  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    136  f02c
    137  f02c				   .init_tia
    138  f02c							; Define default TIA register values
    139  f02c
    140  f02c							; Initialize copies
    141  f02c		       a9 00		      lda	#0
    142  f02e		       85 80		      sta	CtrlPf
    143  f030		       85 81		      sta	NuSiz0
    144  f032		       85 82		      sta	NuSiz1
    145  f034
    146  f034							; Set background color
    147  f034		       a9 00		      lda	#$00	; Black
    148  f036		       85 09		      sta	COLUBK
    149  f038
    150  f038							; Set the playfield and player color
    151  f038		       a9 0e		      lda	#$0E	; White
    152  f03a		       85 08		      sta	COLUPF
    153  f03c		       85 06		      sta	COLUP0
    154  f03e		       85 07		      sta	COLUP1
    155  f040
    156  f040							; Playfield Control
    157  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    158  f042		       85 80		      sta	CtrlPf
    159  f044		       85 0a		      sta	CTRLPF
    160  f046
    161  f046							; Disable Game Elements
    162  f046		       a9 00		      lda	#$00
    163  f048		       85 1f		      sta	ENABL	; Turn off ball
    164  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    165  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    166  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    167  f050		       85 1c		      sta	GRP1	; Turn off player 2
    168  f052
    169  f052							; Empty playfield
    170  f052		       a9 00		      lda	#%00000000
    171  f054		       85 0d		      sta	PF0
    172  f056		       85 0e		      sta	PF1
    173  f058		       85 0f		      sta	PF2
    174  f05a
    175  f05a				   .init_seed
    176  f05a							; Seed the random number generator
    177  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    178  f05d		       85 85		      sta	Rand8	; Use as seed
    179  f05f		       49 ff		      eor	#$FF	; Flip bits
    180  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    181  f063
    182  f063				   .init_game
    183  f063
    184  f063		       20 cb f0 	      jsr	LogoInit
    185  f066
    186  f066							;=======================================
    187  f066							; Game Kernel
    188  f066							;=======================================
    189  f066
    190  f066				   Main
    191  f066
    192  f066		       20 75 f0 	      jsr	VerticalSync
    193  f069		       20 8e f0 	      jsr	VerticalBlank
    194  f06c		       20 a1 f0 	      jsr	Kernel
    195  f06f		       20 a8 f0 	      jsr	OverScan
    196  f072		       4c 66 f0 	      jmp	Main
    197  f075
    198  f075				   VerticalSync
    199  f075
    200  f075		       a9 00		      lda	#0
    201  f077		       85 01		      sta	VBLANK
    202  f079
    203  f079							; Turn on Vertical Sync signal and setup timer
    204  f079		       a9 02		      lda	#2
    205  f07b		       85 00		      sta	VSYNC
    206  f07d
    207  f07d							; Increment frame count and reduce frame counter
    208  f07d		       e6 8d		      inc	Frame
    209  f07f		       c6 8e		      dec	FrameTimer
    210  f081		       c6 8f		      dec	FrameTimer+1
    211  f083
    212  f083							; VSYNCH signal scanlines
    213  f083					      REPEAT	#KERNEL_VSYNC
    214  f083		       85 02		      sta	WSYNC
    213  f083					      REPEND
    214  f085		       85 02		      sta	WSYNC
    213  f085					      REPEND
    214  f087		       85 02		      sta	WSYNC
    215  f089					      REPEND
    216  f089
    217  f089							; Turn off Vertical Sync signal
    218  f089		       a9 00		      lda	#0
    219  f08b		       85 00		      sta	VSYNC
    220  f08d
    221  f08d				   .vsync_return
    222  f08d		       60		      rts
    223  f08e
    224  f08e				   VerticalBlank
    225  f08e							; Setup Timer
    226  f08e		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    227  f090		       8d 96 02 	      sta	TIM64T
    228  f093
    229  f093				   .vblank_logic
    230  f093							; Perform Game Logic
    231  f093		       20 9e f0 	      jsr	.vblank_logic_call_ptr
    232  f096
    233  f096				   .vblank_loop
    234  f096							; WSYNC until Timer is complete
    235  f096		       85 02		      sta	WSYNC
    236  f098		       ad 84 02 	      lda	INTIM
    237  f09b		       d0 f9		      bne	.vblank_loop
    238  f09d
    239  f09d				   .vblank_return
    240  f09d		       60		      rts
    241  f09e
    242  f09e				   .vblank_logic_call_ptr
    243  f09e		       6c 87 00 	      jmp	(VBlankPtr)
    244  f0a1
    245  f0a1				   Kernel
    246  f0a1
    247  f0a1							; Perform Selected Kernel
    248  f0a1		       20 a5 f0 	      jsr	.kernel_call_ptr
    249  f0a4		       60		      rts
    250  f0a5
    251  f0a5				   .kernel_call_ptr
    252  f0a5		       6c 89 00 	      jmp	(KernelPtr)
    253  f0a8
    254  f0a8				   OverScan
    255  f0a8
    256  f0a8							; End of screen, enter blanking
    257  f0a8		       a9 42		      lda	#%01000010
    258  f0aa		       85 01		      sta	VBLANK
    259  f0ac
    260  f0ac							; Setup Timer
    261  f0ac		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    262  f0ae		       8d 96 02 	      sta	TIM64T
    263  f0b1
    264  f0b1							;.overscan_reset:
    265  f0b1							; Check for reset switch
    266  f0b1		       ad 82 02 	      lda	SWCHB
    267  f0b4		       4a		      lsr		; Push D0 to carry (C)
    268  f0b5		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    269  f0b7
    270  f0b7							; Perform reset
    271  f0b7		       20 cb f0 	      jsr	LogoInit	; No need for logic
    272  f0ba		       4c c0 f0 	      jmp	.overscan_loop
    273  f0bd
    274  f0bd				   .overscan_logic
    275  f0bd							; Perform OverScan Logic
    276  f0bd		       20 c8 f0 	      jsr	.overscan_logic_call_ptr
    277  f0c0
    278  f0c0				   .overscan_loop
    279  f0c0							; WSYNC until Timer is complete
    280  f0c0		       85 02		      sta	WSYNC
    281  f0c2		       ad 84 02 	      lda	INTIM
    282  f0c5		       d0 f9		      bne	.overscan_loop
    283  f0c7
    284  f0c7				   .overscan_return
    285  f0c7		       60		      rts
    286  f0c8
    287  f0c8				   .overscan_logic_call_ptr
    288  f0c8		       6c 8b 00 	      jmp	(OverScanPtr)
    289  f0cb
    290  f0cb							;================
    291  f0cb							; State Code
    292  f0cb							;================
    293  f0cb
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0cb					      include	"logo.asm"
      1  f0cb							;================
      2  f0cb							; Constants
      3  f0cb							;================
      4  f0cb
      5  f0cb		       00 b4	   LOGO_FRAMES =	180
      6  f0cb
      7  f0cb		       00 00	   LOGO_BG_COLOR =	#$00
      8  f0cb		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f0cb
     10  f0cb		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0cb		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0cb		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0cb		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0cb		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0cb		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0cb
     17  f0cb		       00 10	   LOGO_IMAGE_SIZE =	16
     18  f0cb		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     19  f0cb		       00 50	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     20  f0cb		       00 38	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     21  f0cb
     22  f0cb				   LogoInit
     23  f0cb
     24  f0cb							; Setup logic and kernel
      0  f0cb					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0cb				   .POINTER   SET	VBlankPtr
      2  f0cb				   .ADDRESS   SET	LogoVerticalBlank
      3  f0cb
      4  f0cb		       a9 16		      LDA	#<.ADDRESS
      5  f0cd		       85 87		      STA	.POINTER
      6  f0cf		       a9 f1		      LDA	#>.ADDRESS
      7  f0d1		       85 88		      STA	.POINTER+1
      8  f0d3
      0  f0d3					      SET_POINTER	KernelPtr, LogoKernel
      1  f0d3				   .POINTER   SET	KernelPtr
      2  f0d3				   .ADDRESS   SET	LogoKernel
      3  f0d3
      4  f0d3		       a9 67		      LDA	#<.ADDRESS
      5  f0d5		       85 89		      STA	.POINTER
      6  f0d7		       a9 f1		      LDA	#>.ADDRESS
      7  f0d9		       85 8a		      STA	.POINTER+1
      8  f0db
      0  f0db					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0db				   .POINTER   SET	OverScanPtr
      2  f0db				   .ADDRESS   SET	LogoOverScan
      3  f0db
      4  f0db		       a9 1a		      LDA	#<.ADDRESS
      5  f0dd		       85 8b		      STA	.POINTER
      6  f0df		       a9 f1		      LDA	#>.ADDRESS
      7  f0e1		       85 8c		      STA	.POINTER+1
      8  f0e3
     28  f0e3
     29  f0e3							; Load Colors
     30  f0e3		       a9 00		      lda	#LOGO_BG_COLOR
     31  f0e5		       85 09		      sta	COLUBK
     32  f0e7		       a9 c6		      lda	#LOGO_FG_COLOR
     33  f0e9		       85 08		      sta	COLUPF
     34  f0eb
     35  f0eb							; Load audio settings
     36  f0eb		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     37  f0ed		       85 15		      sta	AUDC0
     38  f0ef		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     39  f0f1		       85 19		      sta	AUDV0
     40  f0f3		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     41  f0f5		       85 16		      sta	AUDC1
     42  f0f7		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     43  f0f9		       85 1a		      sta	AUDV1
     44  f0fb		       a9 00		      lda	#0
     45  f0fd		       85 90		      sta	AudioStep
     46  f0ff
     47  f0ff							; Play first note
     48  f0ff		       ad 34 f2 	      lda	LogoAudio0,AudioStep
     49  f102		       85 17		      sta	AUDF0
     50  f104		       ad 40 f2 	      lda	LogoAudio1,AudioStep
     51  f107		       85 18		      sta	AUDF1
     52  f109
     53  f109							; Setup frame counters
     54  f109		       a9 00		      lda	#0
     55  f10b		       85 8d		      sta	Frame
     56  f10d		       a9 b4		      lda	#LOGO_FRAMES
     57  f10f		       85 8e		      sta	FrameTimer
     58  f111
     59  f111							; Setup Image Animation
     60  f111		       a9 22		      lda	#(LOGO_IMAGE_SIZE+1)*2
     61  f113		       85 9a		      sta	WebIndex
     62  f115
     63  f115		       60		      rts
     64  f116
     65  f116				   LogoVerticalBlank
     66  f116		       20 21 f1 	      jsr	LogoAnimation
     67  f119		       60		      rts
     68  f11a
     69  f11a				   LogoOverScan
     70  f11a		       20 32 f1 	      jsr	LogoAudio
     71  f11d		       20 5d f1 	      jsr	LogoState
     72  f120		       60		      rts
     73  f121
     74  f121				   LogoAnimation
     75  f121		       a5 8d		      lda	Frame
     76  f123		       29 03		      and	#%00000011	; Every 4 when bits are 00
     77  f125		       d0 0a		      bne	.logo_animation_return
     78  f127
     79  f127		       a6 9a		      ldx	WebIndex
     80  f129		       e0 00		      cpx	#0
     81  f12b		       f0 04		      beq	.logo_animation_return
     82  f12d
     83  f12d							; Add another visible line
     84  f12d		       ca		      dex
     85  f12e		       ca		      dex
     86  f12f		       86 9a		      stx	WebIndex
     87  f131
     88  f131				   .logo_animation_return
     89  f131		       60		      rts
     90  f132
     91  f132				   LogoAudio
     92  f132
     93  f132		       a5 8d		      lda	Frame
     94  f134		       29 07		      and	#%00000111	; Every 8 when bits are 000
     95  f136		       d0 24		      bne	.logo_audio_return
     96  f138
     97  f138				   .logo_audio_play
     98  f138
     99  f138							; Check if we're at the end of the melody
    100  f138		       a4 90		      ldy	AudioStep
    101  f13a		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
    102  f13c		       f0 10		      beq	.logo_audio_mute
    103  f13e
    104  f13e				   .logo_audio_play_note
    105  f13e							; Increment audio position
    106  f13e		       c8		      iny
    107  f13f		       84 90		      sty	AudioStep
    108  f141
    109  f141							; Logo note and play
    110  f141		       b9 34 f2 	      lda	LogoAudio0,y
    111  f144		       85 17		      sta	AUDF0
    112  f146		       b9 40 f2 	      lda	LogoAudio1,y
    113  f149		       85 18		      sta	AUDF1
    114  f14b		       4c 5c f1 	      jmp	.logo_audio_mute_skip
    115  f14e
    116  f14e				   .logo_audio_mute
    117  f14e
    118  f14e							; Mute audio
    119  f14e		       a9 00		      lda	#0
    120  f150		       85 15		      sta	AUDC0
    121  f152		       85 19		      sta	AUDV0
    122  f154		       85 17		      sta	AUDF0
    123  f156		       85 16		      sta	AUDC1
    124  f158		       85 1a		      sta	AUDV1
    125  f15a		       85 18		      sta	AUDF1
    126  f15c
    127  f15c				   .logo_audio_mute_skip
    128  f15c				   .logo_audio_return
    129  f15c		       60		      rts
    130  f15d
    131  f15d				   LogoState
    132  f15d		       a5 8e		      lda	FrameTimer
    133  f15f		       c9 00		      cmp	#0
    134  f161		       d0 03		      bne	.logo_state_return
    135  f163
    136  f163		       20 4c f2 	      jsr	TitleInit
    137  f166
    138  f166				   .logo_state_return
    139  f166		       60		      rts
    140  f167
    141  f167				   LogoKernel
    142  f167
    143  f167							; Playfield Control
    144  f167		       a5 80		      lda	CtrlPf
    145  f169		       29 fe		      and	#%11111110	; No mirroring
    146  f16b		       85 80		      sta	CtrlPf
    147  f16d		       85 0a		      sta	CTRLPF
    148  f16f
    149  f16f							; Turn on display
    150  f16f		       a9 00		      lda	#0
    151  f171		       85 01		      sta	VBLANK
    152  f173
    153  f173				   .logo_kernel_top_padding
    154  f173							; Top Padding
    155  f173		       20 c4 f1 	      jsr	LogoPadding
    156  f176
    157  f176				   .logo_kernel_image_animation
    158  f176		       a4 9a		      ldy	WebIndex
    159  f178		       c0 00		      cpy	#0
    160  f17a		       f0 0b		      beq	.logo_kernel_image
    161  f17c
    162  f17c				   .logo_kernel_image_animation_start
    163  f17c		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    164  f17e
    165  f17e				   .logo_kernel_image_animation_loop
    166  f17e		       85 02		      sta	WSYNC
    167  f180		       ca		      dex
    168  f181		       d0 fb		      bne	.logo_kernel_image_animation_loop
    169  f183
    170  f183		       88		      dey
    171  f184		       88		      dey
    172  f185		       d0 f5		      bne	.logo_kernel_image_animation_start
    173  f187
    174  f187				   .logo_kernel_image
    175  f187
    176  f187		       a2 20		      ldx	#(LOGO_IMAGE_SIZE*2)
    177  f189		       a0 04		      ldy	#LOGO_IMAGE_LINE_SIZE-1
    178  f18b							; The extra 1 on line size is for processing overflow
    179  f18b
    180  f18b		       ca		      dex
    181  f18c		       e4 9a		      cpx	WebIndex
    182  f18e		       90 30		      bcc	.logo_kernel_bottom_padding
    183  f190
    184  f190				   .logo_kernel_image_line
    185  f190		       85 02		      sta	WSYNC
    186  f192
    187  f192		       bd d3 f1 	      lda	LogoImagePF0-1,x
    188  f195		       85 0d		      sta	PF0
    189  f197		       bd f3 f1 	      lda	LogoImagePF1-1,x
    190  f19a		       85 0e		      sta	PF1
    191  f19c		       bd 13 f2 	      lda	LogoImagePF2-1,x
    192  f19f		       85 0f		      sta	PF2
    193  f1a1
      0  f1a1					      sleep	6
      1  f1a1				   .CYCLES    SET	6
      2  f1a1
      3  f1a1				  -	      IF	.CYCLES < 2
      4  f1a1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1a1				  -	      ERR
      6  f1a1					      ENDIF
      7  f1a1
      8  f1a1				  -	      IF	.CYCLES & 1
      9  f1a1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1a1				  -	      nop	0
     11  f1a1				  -	      ELSE
     12  f1a1				  -	      bit	VSYNC
     13  f1a1				  -	      ENDIF
     14  f1a1				  -.CYCLES    SET	.CYCLES - 3
     15  f1a1					      ENDIF
     16  f1a1
     17  f1a1					      REPEAT	.CYCLES / 2
     18  f1a1		       ea		      nop
     17  f1a1					      REPEND
     18  f1a2		       ea		      nop
     17  f1a2					      REPEND
     18  f1a3		       ea		      nop
     19  f1a4					      REPEND
    195  f1a4
    196  f1a4		       bd d4 f1 	      lda	LogoImagePF0,x
    197  f1a7		       85 0d		      sta	PF0
    198  f1a9		       bd f4 f1 	      lda	LogoImagePF1,x
    199  f1ac		       85 0e		      sta	PF1
    200  f1ae		       bd 14 f2 	      lda	LogoImagePF2,x
    201  f1b1		       85 0f		      sta	PF2
    202  f1b3
    203  f1b3		       88		      dey
    204  f1b4		       d0 da		      bne	.logo_kernel_image_line
    205  f1b6
    206  f1b6		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    207  f1b8
    208  f1b8		       ca		      dex
    209  f1b9		       e4 9a		      cpx	WebIndex
    210  f1bb		       90 03		      bcc	.logo_kernel_bottom_padding
    211  f1bd
    212  f1bd		       ca		      dex
    213  f1be		       10 d0		      bpl	.logo_kernel_image_line
    214  f1c0
    215  f1c0				   .logo_kernel_bottom_padding
    216  f1c0							; Bottom Padding
    217  f1c0		       20 c4 f1 	      jsr	LogoPadding
    218  f1c3
    219  f1c3				   .logo_kernel_image_return
    220  f1c3		       60		      rts
    221  f1c4
    222  f1c4				   LogoPadding
    223  f1c4		       a9 00		      lda	#0
    224  f1c6		       85 0d		      sta	PF0
    225  f1c8		       85 0e		      sta	PF1
    226  f1ca		       85 0f		      sta	PF2
    227  f1cc
    228  f1cc		       a2 38		      ldx	#LOGO_IMAGE_PADDING
    229  f1ce				   .logo_padding_loop
    230  f1ce		       85 02		      sta	WSYNC
    231  f1d0		       ca		      dex
    232  f1d1		       d0 fb		      bne	.logo_padding_loop
    233  f1d3
    234  f1d3		       60		      rts
    235  f1d4
    236  f1d4				   LogoAssets
    237  f1d4
    238  f1d4							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f1d4					      include	"logo_image.asm"
      1  f1d4				   LogoImagePF0
      2  f1d4		       00		      .BYTE.b	%00000000
      3  f1d5		       10		      .BYTE.b	%00010000
      4  f1d6		       00		      .BYTE.b	%00000000
      5  f1d7		       30		      .BYTE.b	%00110000
      6  f1d8		       00		      .BYTE.b	%00000000
      7  f1d9		       70		      .BYTE.b	%01110000
      8  f1da		       00		      .BYTE.b	%00000000
      9  f1db		       60		      .BYTE.b	%01100000
     10  f1dc		       00		      .BYTE.b	%00000000
     11  f1dd		       60		      .BYTE.b	%01100000
     12  f1de		       00		      .BYTE.b	%00000000
     13  f1df		       20		      .BYTE.b	%00100000
     14  f1e0		       80		      .BYTE.b	%10000000
     15  f1e1		       00		      .BYTE.b	%00000000
     16  f1e2		       c0		      .BYTE.b	%11000000
     17  f1e3		       00		      .BYTE.b	%00000000
     18  f1e4		       c0		      .BYTE.b	%11000000
     19  f1e5		       00		      .BYTE.b	%00000000
     20  f1e6		       80		      .BYTE.b	%10000000
     21  f1e7		       00		      .BYTE.b	%00000000
     22  f1e8		       00		      .BYTE.b	%00000000
     23  f1e9		       40		      .BYTE.b	%01000000
     24  f1ea		       00		      .BYTE.b	%00000000
     25  f1eb		       60		      .BYTE.b	%01100000
     26  f1ec		       00		      .BYTE.b	%00000000
     27  f1ed		       60		      .BYTE.b	%01100000
     28  f1ee		       00		      .BYTE.b	%00000000
     29  f1ef		       70		      .BYTE.b	%01110000
     30  f1f0		       00		      .BYTE.b	%00000000
     31  f1f1		       30		      .BYTE.b	%00110000
     32  f1f2		       00		      .BYTE.b	%00000000
     33  f1f3		       10		      .BYTE.b	%00010000
     34  f1f4
     35  f1f4				   LogoImagePF1
     36  f1f4		       03		      .BYTE.b	%00000011
     37  f1f5		       f0		      .BYTE.b	%11110000
     38  f1f6		       03		      .BYTE.b	%00000011
     39  f1f7		       f8		      .BYTE.b	%11111000
     40  f1f8		       13		      .BYTE.b	%00010011
     41  f1f9		       fc		      .BYTE.b	%11111100
     42  f1fa		       33		      .BYTE.b	%00110011
     43  f1fb		       dc		      .BYTE.b	%11011100
     44  f1fc		       63		      .BYTE.b	%01100011
     45  f1fd		       cc		      .BYTE.b	%11001100
     46  f1fe		       c3		      .BYTE.b	%11000011
     47  f1ff		       cc		      .BYTE.b	%11001100
     48  f200		       83		      .BYTE.b	%10000011
     49  f201		       cc		      .BYTE.b	%11001100
     50  f202		       03		      .BYTE.b	%00000011
     51  f203		       cc		      .BYTE.b	%11001100
     52  f204		       03		      .BYTE.b	%00000011
     53  f205		       cc		      .BYTE.b	%11001100
     54  f206		       83		      .BYTE.b	%10000011
     55  f207		       cc		      .BYTE.b	%11001100
     56  f208		       c3		      .BYTE.b	%11000011
     57  f209		       cc		      .BYTE.b	%11001100
     58  f20a		       63		      .BYTE.b	%01100011
     59  f20b		       cc		      .BYTE.b	%11001100
     60  f20c		       33		      .BYTE.b	%00110011
     61  f20d		       dc		      .BYTE.b	%11011100
     62  f20e		       13		      .BYTE.b	%00010011
     63  f20f		       fc		      .BYTE.b	%11111100
     64  f210		       03		      .BYTE.b	%00000011
     65  f211		       f8		      .BYTE.b	%11111000
     66  f212		       03		      .BYTE.b	%00000011
     67  f213		       f0		      .BYTE.b	%11110000
     68  f214
     69  f214				   LogoImagePF2
     70  f214		       83		      .BYTE.b	%10000011
     71  f215		       00		      .BYTE.b	%00000000
     72  f216		       c7		      .BYTE.b	%11000111
     73  f217		       00		      .BYTE.b	%00000000
     74  f218		       ef		      .BYTE.b	%11101111
     75  f219		       01		      .BYTE.b	%00000001
     76  f21a		       6e		      .BYTE.b	%01101110
     77  f21b		       03		      .BYTE.b	%00000011
     78  f21c		       6c		      .BYTE.b	%01101100
     79  f21d		       06		      .BYTE.b	%00000110
     80  f21e		       6c		      .BYTE.b	%01101100
     81  f21f		       0c		      .BYTE.b	%00001100
     82  f220		       6c		      .BYTE.b	%01101100
     83  f221		       18		      .BYTE.b	%00011000
     84  f222		       6c		      .BYTE.b	%01101100
     85  f223		       30		      .BYTE.b	%00110000
     86  f224		       6c		      .BYTE.b	%01101100
     87  f225		       30		      .BYTE.b	%00110000
     88  f226		       6c		      .BYTE.b	%01101100
     89  f227		       18		      .BYTE.b	%00011000
     90  f228		       6c		      .BYTE.b	%01101100
     91  f229		       0c		      .BYTE.b	%00001100
     92  f22a		       6c		      .BYTE.b	%01101100
     93  f22b		       06		      .BYTE.b	%00000110
     94  f22c		       6e		      .BYTE.b	%01101110
     95  f22d		       03		      .BYTE.b	%00000011
     96  f22e		       ef		      .BYTE.b	%11101111
     97  f22f		       01		      .BYTE.b	%00000001
     98  f230		       c7		      .BYTE.b	%11000111
     99  f231		       00		      .BYTE.b	%00000000
    100  f232		       83		      .BYTE.b	%10000011
    101  f233		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    240  f234
    241  f234				   LogoAudio0
    242  f234
    243  f234		       1d		      .BYTE.b	#29	; C
    244  f235		       17		      .BYTE.b	#23	; E
    245  f236		       13		      .BYTE.b	#19	; G
    246  f237		       0f		      .BYTE.b	#15	; A
    247  f238		       17		      .BYTE.b	#23	; E
    248  f239		       13		      .BYTE.b	#19	; G
    249  f23a		       0f		      .BYTE.b	#15	; B
    250  f23b		       0e		      .BYTE.b	#14	; C
    251  f23c		       0b		      .BYTE.b	#11	; E
    252  f23d		       0b		      .BYTE.b	#11
    253  f23e		       0b		      .BYTE.b	#11
    254  f23f		       0b		      .BYTE.b	#11
    255  f240
    256  f240				   LogoAudio1
    257  f240
    258  f240		       1f		      .BYTE.b	#31	; C
    259  f241		       1f		      .BYTE.b	#31
    260  f242		       1f		      .BYTE.b	#31
    261  f243		       1f		      .BYTE.b	#31
    262  f244		       19		      .BYTE.b	#25	; E
    263  f245		       19		      .BYTE.b	#25
    264  f246		       19		      .BYTE.b	#25
    265  f247		       19		      .BYTE.b	#25
    266  f248		       14		      .BYTE.b	#20	; G
    267  f249		       14		      .BYTE.b	#20
    268  f24a		       14		      .BYTE.b	#20
    269  f24b		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f24c					      include	"title.asm"
      1  f24c							;================
      2  f24c							; Constants
      3  f24c							;================
      4  f24c
      5  f24c		       00 00	   TITLE_BG_COLOR =	#$00
      6  f24c		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f24c		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f24c		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f24c
     10  f24c		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f24c		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f24c		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f24c		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f24c		       00 09	   TITLE_AUDIO_STEP =	9
     15  f24c
     16  f24c		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     17  f24c		       00 05	   TITLE_FRAME_BOT_LINES =	5
     18  f24c		       00 07	   TITLE_LABEL_LINE =	7
     19  f24c
     20  f24c		       00 0f	   TITLE_GAP_SIZE =	#15
     21  f24c
     22  f24c		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     23  f24c		       00 09	   TITLE_SPIDER_SIZE =	#9
     24  f24c		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f24c
     26  f24c				   TitleInit
     27  f24c
     28  f24c							; Setup logic and kernel
      0  f24c					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f24c				   .POINTER   SET	VBlankPtr
      2  f24c				   .ADDRESS   SET	TitleVerticalBlank
      3  f24c
      4  f24c		       a9 b9		      LDA	#<.ADDRESS
      5  f24e		       85 87		      STA	.POINTER
      6  f250		       a9 f2		      LDA	#>.ADDRESS
      7  f252		       85 88		      STA	.POINTER+1
      8  f254
      0  f254					      SET_POINTER	KernelPtr, TitleKernel
      1  f254				   .POINTER   SET	KernelPtr
      2  f254				   .ADDRESS   SET	TitleKernel
      3  f254
      4  f254		       a9 51		      LDA	#<.ADDRESS
      5  f256		       85 89		      STA	.POINTER
      6  f258		       a9 f3		      LDA	#>.ADDRESS
      7  f25a		       85 8a		      STA	.POINTER+1
      8  f25c
      0  f25c					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f25c				   .POINTER   SET	OverScanPtr
      2  f25c				   .ADDRESS   SET	TitleOverScan
      3  f25c
      4  f25c		       a9 0a		      LDA	#<.ADDRESS
      5  f25e		       85 8b		      STA	.POINTER
      6  f260		       a9 f3		      LDA	#>.ADDRESS
      7  f262		       85 8c		      STA	.POINTER+1
      8  f264
     32  f264
     33  f264							; Load Colors
     34  f264		       a9 00		      lda	#TITLE_BG_COLOR
     35  f266		       85 09		      sta	COLUBK
     36  f268		       a9 06		      lda	#TITLE_WEB_COLOR
     37  f26a		       85 08		      sta	COLUPF
     38  f26c		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f26e		       85 06		      sta	COLUP0
     40  f270		       85 07		      sta	COLUP1
     41  f272
     42  f272							; Load audio settings
     43  f272
     44  f272							; Melody Line
     45  f272		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f274		       85 15		      sta	AUDC0
     47  f276		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f278		       85 19		      sta	AUDV0
     49  f27a
     50  f27a							; Drums and Bass
     51  f27a		       a9 00		      lda	#0
     52  f27c		       85 16		      sta	AUDC1
     53  f27e		       85 1a		      sta	AUDV1
     54  f280
     55  f280							; Make it so that we play the first note immediately
     56  f280		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f282		       85 90		      sta	AudioStep
     58  f284		       a9 01		      lda	#1
     59  f286		       85 8e		      sta	FrameTimer
     60  f288
     61  f288							; Setup Spider Sprite
      0  f288					      SET_POINTER	SpiderPtr, TitleSpider
      1  f288				   .POINTER   SET	SpiderPtr
      2  f288				   .ADDRESS   SET	TitleSpider
      3  f288
      4  f288		       a9 91		      LDA	#<.ADDRESS
      5  f28a		       85 9c		      STA	.POINTER
      6  f28c		       a9 f4		      LDA	#>.ADDRESS
      7  f28e		       85 9d		      STA	.POINTER+1
      8  f290
     63  f290
     64  f290		       a5 81		      lda	NuSiz0
     65  f292		       29 f8		      and	#%11111000
     66  f294		       09 06		      ora	#%00000110	; Triple Sprite
     67  f296		       85 81		      sta	NuSiz0
     68  f298		       85 04		      sta	NUSIZ0
     69  f29a		       85 82		      sta	NuSiz1
     70  f29c		       85 05		      sta	NUSIZ1
     71  f29e
     72  f29e		       a9 00		      lda	#0	; No reflect
     73  f2a0		       85 0b		      sta	REFP0
     74  f2a2		       a9 ff		      lda	#$FF	; Reflect P1
     75  f2a4		       85 0c		      sta	REFP1
     76  f2a6
     77  f2a6		       a9 00		      lda	#0
     78  f2a8		       85 a3		      sta	SpiderDrawPos	; Initialize animation state
     79  f2aa
     80  f2aa							; Setup Web Line
     81  f2aa							; Missle0 (2 clock size)
     82  f2aa		       a5 81		      lda	NuSiz0
     83  f2ac		       29 cf		      and	#%11001111
     84  f2ae		       09 10		      ora	#%00010000
     85  f2b0		       85 81		      sta	NuSiz0
     86  f2b2		       85 04		      sta	NUSIZ0
     87  f2b4
     88  f2b4							; Disable at start
     89  f2b4		       a9 00		      lda	#0
     90  f2b6		       85 1d		      sta	ENAM0
     91  f2b8
     92  f2b8		       60		      rts
     93  f2b9
     94  f2b9				   TitleVerticalBlank
     95  f2b9
     96  f2b9							; Refresh random values
     97  f2b9		       20 13 f0 	      jsr	Random
     98  f2bc
     99  f2bc		       20 c3 f2 	      jsr	TitlePosition
    100  f2bf		       20 dd f2 	      jsr	TitleAnimation
    101  f2c2
    102  f2c2		       60		      rts
    103  f2c3
    104  f2c3				   TitlePosition
    105  f2c3
    106  f2c3							; Position Spider
    107  f2c3		       a2 00		      ldx	#0	; Object (player0)
    108  f2c5		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    109  f2c7		       20 00 f0 	      jsr	PosObject
    110  f2ca
    111  f2ca		       a2 01		      ldx	#1	; Object (player1)
    112  f2cc		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    113  f2ce		       20 00 f0 	      jsr	PosObject
    114  f2d1
    115  f2d1							; Position Web Line
    116  f2d1		       a2 02		      ldx	#2	; Object (missle0)
    117  f2d3		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    118  f2d5		       20 00 f0 	      jsr	PosObject
    119  f2d8
    120  f2d8		       85 02		      sta	WSYNC
    121  f2da		       85 2a		      sta	HMOVE
    122  f2dc
    123  f2dc		       60		      rts
    124  f2dd
    125  f2dd				   TitleAnimation
    126  f2dd
    127  f2dd		       a5 90		      lda	AudioStep
    128  f2df		       c9 00		      cmp	#0
    129  f2e1		       f0 0d		      beq	.title_animation_1
    130  f2e3		       c9 04		      cmp	#4
    131  f2e5		       f0 16		      beq	.title_animation_2
    132  f2e7		       c9 09		      cmp	#9
    133  f2e9		       f0 05		      beq	.title_animation_1
    134  f2eb		       c9 0c		      cmp	#12
    135  f2ed		       f0 0e		      beq	.title_animation_2
    136  f2ef		       60		      rts
    137  f2f0
    138  f2f0				   .title_animation_1
      0  f2f0					      SET_POINTER	SpiderPtr, TitleSpider
      1  f2f0				   .POINTER   SET	SpiderPtr
      2  f2f0				   .ADDRESS   SET	TitleSpider
      3  f2f0
      4  f2f0		       a9 91		      LDA	#<.ADDRESS
      5  f2f2		       85 9c		      STA	.POINTER
      6  f2f4		       a9 f4		      LDA	#>.ADDRESS
      7  f2f6		       85 9d		      STA	.POINTER+1
      8  f2f8
    140  f2f8		       a9 00		      lda	#0
    141  f2fa		       85 a3		      sta	SpiderDrawPos
    142  f2fc		       60		      rts
    143  f2fd
    144  f2fd				   .title_animation_2
      0  f2fd					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f2fd				   .POINTER   SET	SpiderPtr
      2  f2fd				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f2fd
      4  f2fd		       a9 9a		      LDA	#<.ADDRESS
      5  f2ff		       85 9c		      STA	.POINTER
      6  f301		       a9 f4		      LDA	#>.ADDRESS
      7  f303		       85 9d		      STA	.POINTER+1
      8  f305
    146  f305		       a9 01		      lda	#1
    147  f307		       85 a3		      sta	SpiderDrawPos
    148  f309		       60		      rts
    149  f30a
    150  f30a				   TitleOverScan
    151  f30a		       20 11 f3 	      jsr	TitleAudio
    152  f30d		       20 49 f3 	      jsr	TitleState
    153  f310		       60		      rts
    154  f311
    155  f311				   TitleAudio
    156  f311
    157  f311		       a6 8e		      ldx	FrameTimer
    158  f313		       e0 00		      cpx	#0
    159  f315		       d0 31		      bne	.title_audio_return
    160  f317
    161  f317							; Reset Timer
    162  f317		       a2 09		      ldx	#TITLE_AUDIO_STEP
    163  f319		       86 8e		      stx	FrameTimer
    164  f31b
    165  f31b				   .title_audio_play
    166  f31b
    167  f31b							; Increment melody position
    168  f31b		       a4 90		      ldy	AudioStep
    169  f31d		       c8		      iny
    170  f31e
    171  f31e							; Check if we're at the end of the melody
    172  f31e		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    173  f320		       d0 02		      bne	.title_audio_play_note
    174  f322
    175  f322							; Loop our audio step
    176  f322		       a0 00		      ldy	#0
    177  f324
    178  f324				   .title_audio_play_note
    179  f324
    180  f324							; Save current position
    181  f324		       84 90		      sty	AudioStep
    182  f326
    183  f326							; Basic Melody Line
    184  f326		       b9 a3 f4 	      lda	TitleAudio0,y
    185  f329		       85 17		      sta	AUDF0
    186  f32b
    187  f32b							; Drums and Bass
    188  f32b		       b9 b3 f4 	      lda	TitleTone1,y
    189  f32e		       c9 ff		      cmp	#$FF
    190  f330		       f0 0e		      beq	.title_audio_play_note_1_mute
    191  f332
    192  f332		       85 16		      sta	AUDC1
    193  f334		       b9 c3 f4 	      lda	TitleAudio1,y
    194  f337		       85 18		      sta	AUDF1
    195  f339		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    196  f33b		       85 1a		      sta	AUDV1
    197  f33d
    198  f33d		       4c 48 f3 	      jmp	.title_audio_return
    199  f340
    200  f340				   .title_audio_play_note_1_mute
    201  f340
    202  f340		       a9 00		      lda	#0
    203  f342		       85 18		      sta	AUDF1
    204  f344		       85 16		      sta	AUDC1
    205  f346		       85 1a		      sta	AUDV1
    206  f348
    207  f348				   .title_audio_return
    208  f348		       60		      rts
    209  f349
    210  f349				   TitleState
    211  f349							; Check if Fire Button on controller 1 is pressed
    212  f349		       a5 0c		      lda	INPT4
    213  f34b		       30 03		      bmi	.title_state_return
    214  f34d
    215  f34d		       20 6e fb 	      jsr	GameInit
    216  f350
    217  f350				   .title_state_return
    218  f350		       60		      rts
    219  f351
    220  f351				   TitleKernel
    221  f351
    222  f351							; Playfield Control
    223  f351		       a5 80		      lda	CtrlPf
    224  f353		       29 fe		      and	#%11111110	; No mirroring
    225  f355		       85 80		      sta	CtrlPf
    226  f357		       85 0a		      sta	CTRLPF
    227  f359
    228  f359							; Turn on display
    229  f359		       a9 00		      lda	#0
    230  f35b		       85 01		      sta	VBLANK
    231  f35d
    232  f35d		       85 02		      sta	WSYNC
    233  f35f
    234  f35f				   TitleFrameTopDraw
    235  f35f
    236  f35f							; Start Counters
    237  f35f		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    238  f361		       a0 00		      ldy	#0	; Image Counter
    239  f363
    240  f363				   .title_frame_top
    241  f363
    242  f363							; 76 machine cycles per scanline
    243  f363		       85 02		      sta	WSYNC
    244  f365
    245  f365				   .title_frame_top_load		; 66 cycles
    246  f365
    247  f365							; First half of image
    248  f365		       b9 2b f4 	      lda	TitleFrameTop,y	; 5
    249  f368		       85 0d		      sta	PF0	; 4
    250  f36a		       b9 2c f4 	      lda	TitleFrameTop+1,y	; 5
    251  f36d		       85 0e		      sta	PF1	; 4
    252  f36f		       b9 2d f4 	      lda	TitleFrameTop+2,y	; 5
    253  f372		       85 0f		      sta	PF2	; 4
    254  f374
      0  f374					      sleep	6
      1  f374				   .CYCLES    SET	6
      2  f374
      3  f374				  -	      IF	.CYCLES < 2
      4  f374				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f374				  -	      ERR
      6  f374					      ENDIF
      7  f374
      8  f374				  -	      IF	.CYCLES & 1
      9  f374				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f374				  -	      nop	0
     11  f374				  -	      ELSE
     12  f374				  -	      bit	VSYNC
     13  f374				  -	      ENDIF
     14  f374				  -.CYCLES    SET	.CYCLES - 3
     15  f374					      ENDIF
     16  f374
     17  f374					      REPEAT	.CYCLES / 2
     18  f374		       ea		      nop
     17  f374					      REPEND
     18  f375		       ea		      nop
     17  f375					      REPEND
     18  f376		       ea		      nop
     19  f377					      REPEND
    256  f377
    257  f377							; Second half of image
    258  f377		       b9 2e f4 	      lda	TitleFrameTop+3,y	; 5
    259  f37a		       85 0d		      sta	PF0	; 4
    260  f37c		       b9 2f f4 	      lda	TitleFrameTop+4,y	; 5
    261  f37f		       85 0e		      sta	PF1	; 4
    262  f381		       b9 30 f4 	      lda	TitleFrameTop+5,y	; 5
    263  f384		       85 0f		      sta	PF2	; 4
    264  f386
    265  f386				   .title_frame_top_index		; 4 cycles
    266  f386
    267  f386		       ca		      dex		; 2
    268  f387		       d0 da		      bne	.title_frame_top	; 2
    269  f389
    270  f389				   .title_frame_top_index_next		; 6 cycles
    271  f389
    272  f389							; Restore scanline counter
    273  f389		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    274  f38b
    275  f38b		       98		      tya		; 2
    276  f38c		       18		      clc		; 2
    277  f38d		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    278  f38f		       a8		      tay		; 2
    279  f390
    280  f390		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA
    281  f392		       d0 04		      bne	.title_frame_top_label_color_skip
    282  f394		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    283  f396		       85 08		      sta	COLUPF	; 4
    284  f398				   .title_frame_top_label_color_skip
    285  f398
    286  f398		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA
    287  f39a		       d0 c7		      bne	.title_frame_top	; 2
    288  f39c
    289  f39c				   .title_frame_top_clean
    290  f39c
    291  f39c							; Clear out playfield
    292  f39c		       a9 00		      lda	#0
    293  f39e		       85 0d		      sta	PF0
    294  f3a0		       85 0e		      sta	PF1
    295  f3a2		       85 0f		      sta	PF2
    296  f3a4
    297  f3a4				   TitleWebDraw
    298  f3a4		       a9 02		      lda	#%00000010
    299  f3a6		       85 1d		      sta	ENAM0
    300  f3a8
    301  f3a8		       a9 06		      lda	#TITLE_WEB_COLOR
    302  f3aa		       85 06		      sta	COLUP0
    303  f3ac
    304  f3ac		       a2 0f		      ldx	#TITLE_GAP_SIZE
    305  f3ae				   .title_web_gap
    306  f3ae		       ca		      dex
    307  f3af		       85 02		      sta	WSYNC
    308  f3b1		       d0 fb		      bne	.title_web_gap
    309  f3b3
    310  f3b3				   TitleSpiderDraw
    311  f3b3
    312  f3b3		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    313  f3b5
    314  f3b5		       a5 a3		      lda	SpiderDrawPos
    315  f3b7		       c9 01		      cmp	#1
    316  f3b9		       d0 0c		      bne	.title_spider_extra_web_disable
    317  f3bb
    318  f3bb				   .title_spider_extra_web_start
    319  f3bb		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    320  f3bd				   .title_spider_extra_web_loop
    321  f3bd		       85 02		      sta	WSYNC
    322  f3bf		       ca		      dex
    323  f3c0		       d0 fb		      bne	.title_spider_extra_web_loop
    324  f3c2
    325  f3c2		       88		      dey
    326  f3c3		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    327  f3c5		       d0 f4		      bne	.title_spider_extra_web_start
    328  f3c7
    329  f3c7				   .title_spider_extra_web_disable
    330  f3c7		       a9 00		      lda	#0
    331  f3c9		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    332  f3cb
    333  f3cb		       85 02		      sta	WSYNC
    334  f3cd
    335  f3cd		       85 1d		      sta	ENAM0
    336  f3cf		       a9 56		      lda	#TITLE_SPIDER_COLOR
    337  f3d1		       85 06		      sta	COLUP0
    338  f3d3
    339  f3d3				   .title_spider
    340  f3d3		       b1 9c		      lda	(SpiderPtr),y
    341  f3d5		       85 1b		      sta	GRP0
    342  f3d7		       85 1c		      sta	GRP1
    343  f3d9
    344  f3d9				   .title_spider_delay
    345  f3d9		       ca		      dex
    346  f3da		       85 02		      sta	WSYNC
    347  f3dc		       d0 fb		      bne	.title_spider_delay
    348  f3de
    349  f3de				   .title_spider_index
    350  f3de		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    351  f3e0		       88		      dey
    352  f3e1		       10 f0		      bpl	.title_spider
    353  f3e3
    354  f3e3				   .title_spider_clean
    355  f3e3
    356  f3e3							; Clear sprites
    357  f3e3		       a9 00		      lda	#0
    358  f3e5		       85 1b		      sta	GRP0
    359  f3e7		       85 1c		      sta	GRP1
    360  f3e9
    361  f3e9				   TitleFrameBottomDraw
    362  f3e9
    363  f3e9							; Load Frame Color
    364  f3e9		       a9 06		      lda	#TITLE_WEB_COLOR
    365  f3eb		       85 08		      sta	COLUPF
    366  f3ed
    367  f3ed							; Start Counters
    368  f3ed		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    369  f3ef		       a0 00		      ldy	#0	; Image Counter
    370  f3f1
    371  f3f1				   .title_frame_bottom
    372  f3f1
    373  f3f1							; 76 machine cycles per scanline
    374  f3f1		       85 02		      sta	WSYNC
    375  f3f3
    376  f3f3				   .title_frame_bottom_load		; 66 cycles
    377  f3f3
    378  f3f3							; First half of image
    379  f3f3		       b9 73 f4 	      lda	TitleFrameBottom,y	; 5
    380  f3f6		       85 0d		      sta	PF0	; 4
    381  f3f8		       b9 74 f4 	      lda	TitleFrameBottom+1,y	; 5
    382  f3fb		       85 0e		      sta	PF1	; 4
    383  f3fd		       b9 75 f4 	      lda	TitleFrameBottom+2,y	; 5
    384  f400		       85 0f		      sta	PF2	; 4
    385  f402
      0  f402					      sleep	6
      1  f402				   .CYCLES    SET	6
      2  f402
      3  f402				  -	      IF	.CYCLES < 2
      4  f402				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f402				  -	      ERR
      6  f402					      ENDIF
      7  f402
      8  f402				  -	      IF	.CYCLES & 1
      9  f402				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f402				  -	      nop	0
     11  f402				  -	      ELSE
     12  f402				  -	      bit	VSYNC
     13  f402				  -	      ENDIF
     14  f402				  -.CYCLES    SET	.CYCLES - 3
     15  f402					      ENDIF
     16  f402
     17  f402					      REPEAT	.CYCLES / 2
     18  f402		       ea		      nop
     17  f402					      REPEND
     18  f403		       ea		      nop
     17  f403					      REPEND
     18  f404		       ea		      nop
     19  f405					      REPEND
    387  f405
    388  f405							; Second half of image
    389  f405		       b9 76 f4 	      lda	TitleFrameBottom+3,y	; 5
    390  f408		       85 0d		      sta	PF0	; 4
    391  f40a		       b9 77 f4 	      lda	TitleFrameBottom+4,y	; 5
    392  f40d		       85 0e		      sta	PF1	; 4
    393  f40f		       b9 78 f4 	      lda	TitleFrameBottom+5,y	; 5
    394  f412		       85 0f		      sta	PF2	; 4
    395  f414
    396  f414				   .title_frame_bottom_index		; 4 cycles
    397  f414
    398  f414		       ca		      dex		; 2
    399  f415		       d0 da		      bne	.title_frame_bottom	; 2
    400  f417
    401  f417				   .title_frame_bottom_index_next		; 6 cycles
    402  f417
    403  f417							; Restore scanline counter
    404  f417		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    405  f419
    406  f419		       98		      tya		; 2
    407  f41a		       18		      clc		; 2
    408  f41b		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    409  f41d		       a8		      tay		; 2
    410  f41e		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    411  f420		       d0 cf		      bne	.title_frame_bottom	; 2
    412  f422
    413  f422				   .title_frame_bottom_clean
    414  f422
    415  f422							; Clear out playfield
    416  f422		       a9 00		      lda	#0
    417  f424		       85 0d		      sta	PF0
    418  f426		       85 0e		      sta	PF1
    419  f428		       85 0f		      sta	PF2
    420  f42a
    421  f42a				   .title_kernel_return
    422  f42a		       60		      rts
    423  f42b
    424  f42b				   TitleAssets
    425  f42b
    426  f42b							; Assets
------- FILE title_frame_top.asm LEVEL 3 PASS 2
      0  f42b					      include	"title_frame_top.asm"
      1  f42b				   TitleFrameTop
      2  f42b
      3  f42b		       a0		      .BYTE.b	%10100000
      4  f42c		       54		      .BYTE.b	%01010100
      5  f42d		       01		      .BYTE.b	%00000001
      6  f42e		       00		      .BYTE.b	%00000000
      7  f42f		       03		      .BYTE.b	%00000011
      8  f430		       2c		      .BYTE.b	%00101100
      9  f431
     10  f431		       d0		      .BYTE.b	%11010000
     11  f432		       23		      .BYTE.b	%00100011
     12  f433		       00		      .BYTE.b	%00000000
     13  f434		       00		      .BYTE.b	%00000000
     14  f435		       00		      .BYTE.b	%00000000
     15  f436		       51		      .BYTE.b	%01010001
     16  f437
     17  f437		       60		      .BYTE.b	%01100000
     18  f438		       dc		      .BYTE.b	%11011100
     19  f439		       00		      .BYTE.b	%00000000
     20  f43a		       00		      .BYTE.b	%00000000
     21  f43b		       00		      .BYTE.b	%00000000
     22  f43c		       8e		      .BYTE.b	%10001110
     23  f43d
     24  f43d		       b0		      .BYTE.b	%10110000
     25  f43e		       00		      .BYTE.b	%00000000
     26  f43f		       00		      .BYTE.b	%00000000
     27  f440		       00		      .BYTE.b	%00000000
     28  f441		       00		      .BYTE.b	%00000000
     29  f442		       51		      .BYTE.b	%01010001
     30  f443
     31  f443		       40		      .BYTE.b	%01000000
     32  f444		       80		      .BYTE.b	%10000000
     33  f445		       00		      .BYTE.b	%00000000
     34  f446		       00		      .BYTE.b	%00000000
     35  f447		       00		      .BYTE.b	%00000000
     36  f448		       ad		      .BYTE.b	%10101101
     37  f449
     38  f449		       50		      .BYTE.b	%01010000
     39  f44a		       00		      .BYTE.b	%00000000
     40  f44b		       00		      .BYTE.b	%00000000
     41  f44c		       00		      .BYTE.b	%00000000
     42  f44d		       01		      .BYTE.b	%00000001
     43  f44e		       82		      .BYTE.b	%10000010
     44  f44f
     45  f44f		       20		      .BYTE.b	%00100000
     46  f450		       00		      .BYTE.b	%00000000
     47  f451		       00		      .BYTE.b	%00000000
     48  f452		       00		      .BYTE.b	%00000000
     49  f453		       02		      .BYTE.b	%00000010
     50  f454		       00		      .BYTE.b	%00000000
     51  f455
     52  f455		       c0		      .BYTE.b	%11000000
     53  f456		       77		      .BYTE.b	%01110111
     54  f457		       66		      .BYTE.b	%01100110
     55  f458		       30		      .BYTE.b	%00110000
     56  f459		       22		      .BYTE.b	%00100010
     57  f45a		       1b		      .BYTE.b	%00011011
     58  f45b
     59  f45b		       40		      .BYTE.b	%01000000
     60  f45c		       52		      .BYTE.b	%01010010
     61  f45d		       2a		      .BYTE.b	%00101010
     62  f45e		       50		      .BYTE.b	%01010000
     63  f45f		       22		      .BYTE.b	%00100010
     64  f460		       29		      .BYTE.b	%00101001
     65  f461
     66  f461		       c0		      .BYTE.b	%11000000
     67  f462		       72		      .BYTE.b	%01110010
     68  f463		       6a		      .BYTE.b	%01101010
     69  f464		       50		      .BYTE.b	%01010000
     70  f465		       22		      .BYTE.b	%00100010
     71  f466		       1b		      .BYTE.b	%00011011
     72  f467
     73  f467		       80		      .BYTE.b	%10000000
     74  f468		       42		      .BYTE.b	%01000010
     75  f469		       2a		      .BYTE.b	%00101010
     76  f46a		       30		      .BYTE.b	%00110000
     77  f46b		       2a		      .BYTE.b	%00101010
     78  f46c		       29		      .BYTE.b	%00101001
     79  f46d
     80  f46d		       c0		      .BYTE.b	%11000000
     81  f46e		       47		      .BYTE.b	%01000111
     82  f46f		       e6		      .BYTE.b	%11100110
     83  f470		       50		      .BYTE.b	%01010000
     84  f471		       14		      .BYTE.b	%00010100
     85  f472		       1b		      .BYTE.b	%00011011
------- FILE title.asm
------- FILE title_frame_bottom.asm LEVEL 3 PASS 2
      0  f473					      include	"title_frame_bottom.asm"
      1  f473				   TitleFrameBottom
      2  f473
      3  f473		       20		      .BYTE.b	%00100000
      4  f474		       00		      .BYTE.b	%00000000
      5  f475		       00		      .BYTE.b	%00000000
      6  f476		       00		      .BYTE.b	%00000000
      7  f477		       00		      .BYTE.b	%00000000
      8  f478		       64		      .BYTE.b	%01100100
      9  f479
     10  f479		       50		      .BYTE.b	%01010000
     11  f47a		       00		      .BYTE.b	%00000000
     12  f47b		       00		      .BYTE.b	%00000000
     13  f47c		       00		      .BYTE.b	%00000000
     14  f47d		       00		      .BYTE.b	%00000000
     15  f47e		       98		      .BYTE.b	%10011000
     16  f47f
     17  f47f		       90		      .BYTE.b	%10010000
     18  f480		       80		      .BYTE.b	%10000000
     19  f481		       00		      .BYTE.b	%00000000
     20  f482		       00		      .BYTE.b	%00000000
     21  f483		       00		      .BYTE.b	%00000000
     22  f484		       28		      .BYTE.b	%00101000
     23  f485
     24  f485		       60		      .BYTE.b	%01100000
     25  f486		       60		      .BYTE.b	%01100000
     26  f487		       00		      .BYTE.b	%00000000
     27  f488		       00		      .BYTE.b	%00000000
     28  f489		       00		      .BYTE.b	%00000000
     29  f48a		       44		      .BYTE.b	%01000100
     30  f48b
     31  f48b		       d0		      .BYTE.b	%11010000
     32  f48c		       1c		      .BYTE.b	%00011100
     33  f48d		       00		      .BYTE.b	%00000000
     34  f48e		       00		      .BYTE.b	%00000000
     35  f48f		       00		      .BYTE.b	%00000000
     36  f490		       ab		      .BYTE.b	%10101011
------- FILE title.asm
    429  f491					      include	"title_label.asm"
------- FILE title_spider.asm LEVEL 3 PASS 2
      0  f491					      include	"title_spider.asm"
      1  f491				   TitleSpider
      2  f491
      3  f491		       30		      .BYTE.b	%00110000
      4  f492		       67		      .BYTE.b	%01100111
      5  f493		       4f		      .BYTE.b	%01001111
      6  f494		       dd		      .BYTE.b	%11011101
      7  f495		       d8		      .BYTE.b	%11011000
      8  f496		       df		      .BYTE.b	%11011111
      9  f497		       4d		      .BYTE.b	%01001101
     10  f498		       6f		      .BYTE.b	%01101111
     11  f499		       3b		      .BYTE.b	%00111011
     12  f49a
     13  f49a		       37		      .BYTE.b	%00110111
     14  f49b		       6d		      .BYTE.b	%01101101
     15  f49c		       d8		      .BYTE.b	%11011000
     16  f49d		       df		      .BYTE.b	%11011111
     17  f49e		       cd		      .BYTE.b	%11001101
     18  f49f		       6f		      .BYTE.b	%01101111
     19  f4a0		       3b		      .BYTE.b	%00111011
     20  f4a1		       00		      .BYTE.b	%00000000
     21  f4a2		       00		      .BYTE.b	%00000000
------- FILE title.asm
    431  f4a3
    432  f4a3				   TitleAudio0
    433  f4a3
    434  f4a3		       0f		      .BYTE.b	#15	; B
    435  f4a4		       13		      .BYTE.b	#19	; G
    436  f4a5		       17		      .BYTE.b	#23	; E
    437  f4a6		       13		      .BYTE.b	#19	; G
    438  f4a7		       0e		      .BYTE.b	#14	; C
    439  f4a8		       13		      .BYTE.b	#19
    440  f4a9		       17		      .BYTE.b	#23
    441  f4aa		       13		      .BYTE.b	#19
    442  f4ab		       0c		      .BYTE.b	#12	; D
    443  f4ac		       13		      .BYTE.b	#19
    444  f4ad		       17		      .BYTE.b	#23
    445  f4ae		       13		      .BYTE.b	#19
    446  f4af		       0e		      .BYTE.b	#14	; C
    447  f4b0		       13		      .BYTE.b	#19
    448  f4b1		       17		      .BYTE.b	#23
    449  f4b2		       13		      .BYTE.b	#19
    450  f4b3
    451  f4b3				   TitleTone1
    452  f4b3
    453  f4b3		       0f		      .BYTE.b	#15	; Electronic Rumble
    454  f4b4		       ff		      .BYTE.b	#$FF
    455  f4b5		       01		      .BYTE.b	#1	; Low Pure Tone
    456  f4b6		       01		      .BYTE.b	#1
    457  f4b7		       08		      .BYTE.b	#8	; White Noise
    458  f4b8		       01		      .BYTE.b	#1
    459  f4b9		       01		      .BYTE.b	#1
    460  f4ba		       ff		      .BYTE.b	#$FF
    461  f4bb		       ff		      .BYTE.b	#$FF
    462  f4bc		       0f		      .BYTE.b	#15
    463  f4bd		       ff		      .BYTE.b	#$FF
    464  f4be		       ff		      .BYTE.b	#$FF
    465  f4bf		       08		      .BYTE.b	#8
    466  f4c0		       ff		      .BYTE.b	#$FF
    467  f4c1		       01		      .BYTE.b	#1
    468  f4c2		       01		      .BYTE.b	#1
    469  f4c3
    470  f4c3				   TitleAudio1
    471  f4c3
    472  f4c3		       1d		      .BYTE.b	#29	; Kick
    473  f4c4		       ff		      .BYTE.b	#$FF
    474  f4c5		       1f		      .BYTE.b	#31	; C
    475  f4c6		       1f		      .BYTE.b	#31
    476  f4c7		       07		      .BYTE.b	#7	; Snare
    477  f4c8		       1f		      .BYTE.b	#31
    478  f4c9		       1f		      .BYTE.b	#31
    479  f4ca		       ff		      .BYTE.b	#$FF
    480  f4cb		       ff		      .BYTE.b	#$FF
    481  f4cc		       1d		      .BYTE.b	#29
    482  f4cd		       ff		      .BYTE.b	#$FF
    483  f4ce		       ff		      .BYTE.b	#$FF
    484  f4cf		       07		      .BYTE.b	#7
    485  f4d0		       ff		      .BYTE.b	#$FF
    486  f4d1		       17		      .BYTE.b	#23	; F
    487  f4d2		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4d3					      include	"game.asm"
      1  f4d3							;================
      2  f4d3							; Game
      3  f4d3							;================
      4  f4d3
      5  f4d3							; Constants
      6  f4d3
      7  f4d3		       00 04	   GAME_AUDIO_VOLUME =	4
      8  f4d3		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4d3		       00 09	   GAME_AUDIO_STEP =	9
     10  f4d3		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4d3		       00 06	   GAME_AUDIO_TONE =	6
     12  f4d3
     13  f4d3							; Object Code
     14  f4d3
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f4d3					      include	"objects/score.asm"
      1  f4d3							;======================
      2  f4d3							; Score (playfield)
      3  f4d3							;======================
      4  f4d3
      5  f4d3							; Constants
      6  f4d3
      7  f4d3		       00 00	   SCORE_BG_COLOR =	#$00
      8  f4d3		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f4d3		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f4d3
     11  f4d3		       00 05	   SCORE_CHAR_SIZE =	5
     12  f4d3		       00 02	   SCORE_LINE_SIZE =	2
     13  f4d3		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f4d3
     15  f4d3							; Initialization
     16  f4d3
     17  f4d3				   ScoreInit
     18  f4d3
     19  f4d3							; Health Score
     20  f4d3		       a9 ff		      lda	#$FF
     21  f4d5		       85 92		      sta	ScoreValue+0
     22  f4d7
     23  f4d7							; Game Score
     24  f4d7		       a9 00		      lda	#0
     25  f4d9		       85 93		      sta	ScoreValue+1
     26  f4db
     27  f4db		       60		      rts
     28  f4dc
     29  f4dc							; Frame Update
     30  f4dc
     31  f4dc				   ScoreUpdate
     32  f4dc
     33  f4dc		       a2 01		      ldx	#1
     34  f4de				   .score_update_loop
     35  f4de
     36  f4de							; Ones Digit
     37  f4de		       b5 92		      lda	ScoreValue,x
     38  f4e0		       29 0f		      and	#$0f
     39  f4e2		       85 83		      sta	Temp
     40  f4e4		       0a		      asl
     41  f4e5		       0a		      asl
     42  f4e6		       65 83		      adc	Temp
     43  f4e8		       95 94		      sta	ScoreDigitOnes,x
     44  f4ea
     45  f4ea							; Tens Digit
     46  f4ea		       b5 92		      lda	ScoreValue,x
     47  f4ec		       29 f0		      and	#$f0
     48  f4ee		       4a		      lsr
     49  f4ef		       4a		      lsr
     50  f4f0		       85 83		      sta	Temp
     51  f4f2		       4a		      lsr
     52  f4f3		       4a		      lsr
     53  f4f4		       65 83		      adc	Temp
     54  f4f6		       95 96		      sta	ScoreDigitTens,x
     55  f4f8
     56  f4f8		       ca		      dex
     57  f4f9		       10 e3		      bpl	.score_update_loop
     58  f4fb
     59  f4fb				   .score_update_end
     60  f4fb		       60		      rts
     61  f4fc
     62  f4fc							; Draw loop (uses SCORE_LINES scanlines)
     63  f4fc
     64  f4fc				   ScoreDraw
     65  f4fc
     66  f4fc							; Load Colors
     67  f4fc		       a9 00		      lda	#SCORE_BG_COLOR
     68  f4fe		       85 09		      sta	COLUBK
     69  f500		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f502		       85 08		      sta	COLUPF
     71  f504		       85 06		      sta	COLUP0
     72  f506		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f508		       85 07		      sta	COLUP1
     74  f50a
     75  f50a							; Set Non-Mirror and p0/p1 color
     76  f50a		       a5 80		      lda	CtrlPf
     77  f50c		       29 fc		      and	#%11111100
     78  f50e		       09 02		      ora	#%00000010
     79  f510		       85 80		      sta	CtrlPf
     80  f512		       85 0a		      sta	CTRLPF
     81  f514
     82  f514							;sta WSYNC
     83  f514
     84  f514		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f516
     86  f516				   .score_draw_line
     87  f516
     88  f516							; 1st Value
     89  f516		       a4 96		      ldy	ScoreDigitTens
     90  f518		       b9 6c f5 	      lda	ScoreDigits,y
     91  f51b		       29 f0		      and	#$f0
     92  f51d		       85 98		      sta	ScoreGfx
     93  f51f		       a4 94		      ldy	ScoreDigitOnes
     94  f521		       b9 6c f5 	      lda	ScoreDigits,y
     95  f524		       29 0f		      and	#$0f
     96  f526		       05 98		      ora	ScoreGfx
     97  f528		       85 98		      sta	ScoreGfx
     98  f52a
     99  f52a		       85 02		      sta	WSYNC
    100  f52c		       85 0e		      sta	PF1
    101  f52e
    102  f52e							; 2nd Value
    103  f52e		       a4 97		      ldy	ScoreDigitTens+1
    104  f530		       b9 6c f5 	      lda	ScoreDigits,y
    105  f533		       29 f0		      and	#$f0
    106  f535		       85 99		      sta	ScoreGfx+1
    107  f537		       a4 95		      ldy	ScoreDigitOnes+1
    108  f539		       b9 6c f5 	      lda	ScoreDigits,y
    109  f53c		       29 0f		      and	#$0f
    110  f53e		       05 99		      ora	ScoreGfx+1
    111  f540		       85 99		      sta	ScoreGfx+1
    112  f542
      0  f542					      sleep	12
      1  f542				   .CYCLES    SET	12
      2  f542
      3  f542				  -	      IF	.CYCLES < 2
      4  f542				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f542				  -	      ERR
      6  f542					      ENDIF
      7  f542
      8  f542				  -	      IF	.CYCLES & 1
      9  f542				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f542				  -	      nop	0
     11  f542				  -	      ELSE
     12  f542				  -	      bit	VSYNC
     13  f542				  -	      ENDIF
     14  f542				  -.CYCLES    SET	.CYCLES - 3
     15  f542					      ENDIF
     16  f542
     17  f542					      REPEAT	.CYCLES / 2
     18  f542		       ea		      nop
     17  f542					      REPEND
     18  f543		       ea		      nop
     17  f543					      REPEND
     18  f544		       ea		      nop
     17  f544					      REPEND
     18  f545		       ea		      nop
     17  f545					      REPEND
     18  f546		       ea		      nop
     17  f546					      REPEND
     18  f547		       ea		      nop
     19  f548					      REPEND
    114  f548		       85 0e		      sta	PF1
    115  f54a
    116  f54a		       a4 98		      ldy	ScoreGfx
    117  f54c		       85 02		      sta	WSYNC
    118  f54e
    119  f54e		       84 0e		      sty	PF1
    120  f550
    121  f550		       e6 94		      inc	ScoreDigitOnes
    122  f552		       e6 95		      inc	ScoreDigitOnes+1
    123  f554		       e6 96		      inc	ScoreDigitTens
    124  f556		       e6 97		      inc	ScoreDigitTens+1
    125  f558
      0  f558					      sleep	12
      1  f558				   .CYCLES    SET	12
      2  f558
      3  f558				  -	      IF	.CYCLES < 2
      4  f558				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f558				  -	      ERR
      6  f558					      ENDIF
      7  f558
      8  f558				  -	      IF	.CYCLES & 1
      9  f558				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f558				  -	      nop	0
     11  f558				  -	      ELSE
     12  f558				  -	      bit	VSYNC
     13  f558				  -	      ENDIF
     14  f558				  -.CYCLES    SET	.CYCLES - 3
     15  f558					      ENDIF
     16  f558
     17  f558					      REPEAT	.CYCLES / 2
     18  f558		       ea		      nop
     17  f558					      REPEND
     18  f559		       ea		      nop
     17  f559					      REPEND
     18  f55a		       ea		      nop
     17  f55a					      REPEND
     18  f55b		       ea		      nop
     17  f55b					      REPEND
     18  f55c		       ea		      nop
     17  f55c					      REPEND
     18  f55d		       ea		      nop
     19  f55e					      REPEND
    127  f55e		       ca		      dex
    128  f55f		       85 0e		      sta	PF1
    129  f561
    130  f561		       d0 b3		      bne	.score_draw_line
    131  f563		       85 02		      sta	WSYNC
    132  f565
    133  f565							; Clear
    134  f565		       a9 00		      lda	#0
    135  f567		       85 0e		      sta	PF1
    136  f569
    137  f569		       85 02		      sta	WSYNC
    138  f56b
    139  f56b		       60		      rts
    140  f56c
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f56c					      include	"objects/score_digits.asm"
      1  f56c				   ScoreDigits
      2  f56c
      3  f56c		       77		      .BYTE.b	%01110111
      4  f56d		       55		      .BYTE.b	%01010101
      5  f56e		       55		      .BYTE.b	%01010101
      6  f56f		       55		      .BYTE.b	%01010101
      7  f570		       77		      .BYTE.b	%01110111
      8  f571
      9  f571		       11		      .BYTE.b	%00010001
     10  f572		       11		      .BYTE.b	%00010001
     11  f573		       11		      .BYTE.b	%00010001
     12  f574		       11		      .BYTE.b	%00010001
     13  f575		       11		      .BYTE.b	%00010001
     14  f576
     15  f576		       77		      .BYTE.b	%01110111
     16  f577		       11		      .BYTE.b	%00010001
     17  f578		       77		      .BYTE.b	%01110111
     18  f579		       44		      .BYTE.b	%01000100
     19  f57a		       77		      .BYTE.b	%01110111
     20  f57b
     21  f57b		       77		      .BYTE.b	%01110111
     22  f57c		       11		      .BYTE.b	%00010001
     23  f57d		       33		      .BYTE.b	%00110011
     24  f57e		       11		      .BYTE.b	%00010001
     25  f57f		       77		      .BYTE.b	%01110111
     26  f580
     27  f580		       55		      .BYTE.b	%01010101
     28  f581		       55		      .BYTE.b	%01010101
     29  f582		       77		      .BYTE.b	%01110111
     30  f583		       11		      .BYTE.b	%00010001
     31  f584		       11		      .BYTE.b	%00010001
     32  f585
     33  f585		       77		      .BYTE.b	%01110111
     34  f586		       44		      .BYTE.b	%01000100
     35  f587		       77		      .BYTE.b	%01110111
     36  f588		       11		      .BYTE.b	%00010001
     37  f589		       77		      .BYTE.b	%01110111
     38  f58a
     39  f58a		       77		      .BYTE.b	%01110111
     40  f58b		       44		      .BYTE.b	%01000100
     41  f58c		       77		      .BYTE.b	%01110111
     42  f58d		       55		      .BYTE.b	%01010101
     43  f58e		       77		      .BYTE.b	%01110111
     44  f58f
     45  f58f		       77		      .BYTE.b	%01110111
     46  f590		       11		      .BYTE.b	%00010001
     47  f591		       22		      .BYTE.b	%00100010
     48  f592		       22		      .BYTE.b	%00100010
     49  f593		       22		      .BYTE.b	%00100010
     50  f594
     51  f594		       77		      .BYTE.b	%01110111
     52  f595		       55		      .BYTE.b	%01010101
     53  f596		       77		      .BYTE.b	%01110111
     54  f597		       55		      .BYTE.b	%01010101
     55  f598		       77		      .BYTE.b	%01110111
     56  f599
     57  f599		       77		      .BYTE.b	%01110111
     58  f59a		       55		      .BYTE.b	%01010101
     59  f59b		       77		      .BYTE.b	%01110111
     60  f59c		       11		      .BYTE.b	%00010001
     61  f59d		       11		      .BYTE.b	%00010001
     62  f59e
     63  f59e		       77		      .BYTE.b	%01110111
     64  f59f		       55		      .BYTE.b	%01010101
     65  f5a0		       77		      .BYTE.b	%01110111
     66  f5a1		       55		      .BYTE.b	%01010101
     67  f5a2		       55		      .BYTE.b	%01010101
     68  f5a3
     69  f5a3		       66		      .BYTE.b	%01100110
     70  f5a4		       55		      .BYTE.b	%01010101
     71  f5a5		       66		      .BYTE.b	%01100110
     72  f5a6		       55		      .BYTE.b	%01010101
     73  f5a7		       66		      .BYTE.b	%01100110
     74  f5a8
     75  f5a8		       77		      .BYTE.b	%01110111
     76  f5a9		       44		      .BYTE.b	%01000100
     77  f5aa		       44		      .BYTE.b	%01000100
     78  f5ab		       44		      .BYTE.b	%01000100
     79  f5ac		       77		      .BYTE.b	%01110111
     80  f5ad
     81  f5ad		       66		      .BYTE.b	%01100110
     82  f5ae		       55		      .BYTE.b	%01010101
     83  f5af		       55		      .BYTE.b	%01010101
     84  f5b0		       55		      .BYTE.b	%01010101
     85  f5b1		       66		      .BYTE.b	%01100110
     86  f5b2
     87  f5b2		       77		      .BYTE.b	%01110111
     88  f5b3		       44		      .BYTE.b	%01000100
     89  f5b4		       66		      .BYTE.b	%01100110
     90  f5b5		       44		      .BYTE.b	%01000100
     91  f5b6		       77		      .BYTE.b	%01110111
     92  f5b7
     93  f5b7		       77		      .BYTE.b	%01110111
     94  f5b8		       44		      .BYTE.b	%01000100
     95  f5b9		       66		      .BYTE.b	%01100110
     96  f5ba		       44		      .BYTE.b	%01000100
     97  f5bb		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f5bc					      include	"objects/web.asm"
      1  f5bc							;================
      2  f5bc							; Web (Playfield)
      3  f5bc							;================
      4  f5bc
      5  f5bc							; Constants
      6  f5bc
      7  f5bc		       00 00	   WEB_BG_COLOR =	#$00
      8  f5bc		       00 06	   WEB_FG_COLOR =	#$06
      9  f5bc
     10  f5bc		       00 1e	   WEB_SIZE   =	30
     11  f5bc		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f5bc		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f5bc
     14  f5bc							; Scanline Draw
     15  f5bc
     16  f5bc				   WebDrawStart
     17  f5bc
     18  f5bc							; Load Colors
     19  f5bc		       a9 00		      lda	#WEB_BG_COLOR
     20  f5be		       85 09		      sta	COLUBK
     21  f5c0		       a9 06		      lda	#WEB_FG_COLOR
     22  f5c2		       85 08		      sta	COLUPF
     23  f5c4
     24  f5c4							; Mirror playfield and use standard playfield color
     25  f5c4		       a5 80		      lda	CtrlPf
     26  f5c6		       29 fc		      and	#%11111100
     27  f5c8		       09 01		      ora	#%00000001
     28  f5ca		       85 80		      sta	CtrlPf
     29  f5cc		       85 0a		      sta	CTRLPF
     30  f5ce
     31  f5ce							; Initialize image index
     32  f5ce		       a9 00		      lda	#0
     33  f5d0		       85 9a		      sta	WebIndex
     34  f5d2		       a9 01		      lda	#1
     35  f5d4		       85 9b		      sta	WebDir
     36  f5d6
     37  f5d6		       60		      rts
     38  f5d7
     39  f5d7				   WebDraw
     40  f5d7
     41  f5d7		       a4 9a		      ldy	WebIndex
     42  f5d9
     43  f5d9							; Draw Image
     44  f5d9		       b9 02 f6 	      lda	WebImagePF0,y
     45  f5dc		       85 0d		      sta	PF0
     46  f5de		       b9 11 f6 	      lda	WebImagePF1,y
     47  f5e1		       85 0e		      sta	PF1
     48  f5e3		       b9 20 f6 	      lda	WebImagePF2,y
     49  f5e6		       85 0f		      sta	PF2
     50  f5e8
     51  f5e8							; Increment image index
     52  f5e8		       18		      clc
     53  f5e9		       98		      tya
     54  f5ea		       65 9b		      adc	WebDir
     55  f5ec		       85 9a		      sta	WebIndex
     56  f5ee
     57  f5ee		       c9 0f		      cmp	#WEB_SIZE/2
     58  f5f0		       d0 06		      bne	.web_draw_return
     59  f5f2
     60  f5f2		       a9 ff		      lda	#-1
     61  f5f4		       85 9b		      sta	WebDir
     62  f5f6
     63  f5f6		       c6 9a		      dec	WebIndex
     64  f5f8
     65  f5f8				   .web_draw_return
     66  f5f8		       60		      rts
     67  f5f9
     68  f5f9				   WebClean
     69  f5f9
     70  f5f9							; Clear out playfield
     71  f5f9		       a9 00		      lda	#0
     72  f5fb		       85 0d		      sta	PF0
     73  f5fd		       85 0e		      sta	PF1
     74  f5ff		       85 0f		      sta	PF2
     75  f601
     76  f601		       60		      rts
     77  f602
     78  f602							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f602					      include	"objects/web_image.asm"
      1  f602				   WebImagePF0
      2  f602		       00		      .BYTE.b	%00000000
      3  f603		       00		      .BYTE.b	%00000000
      4  f604		       00		      .BYTE.b	%00000000
      5  f605		       00		      .BYTE.b	%00000000
      6  f606		       00		      .BYTE.b	%00000000
      7  f607		       00		      .BYTE.b	%00000000
      8  f608		       00		      .BYTE.b	%00000000
      9  f609		       00		      .BYTE.b	%00000000
     10  f60a		       00		      .BYTE.b	%00000000
     11  f60b		       30		      .BYTE.b	%00110000
     12  f60c		       e0		      .BYTE.b	%11100000
     13  f60d		       20		      .BYTE.b	%00100000
     14  f60e		       40		      .BYTE.b	%01000000
     15  f60f		       40		      .BYTE.b	%01000000
     16  f610		       80		      .BYTE.b	%10000000
     17  f611
     18  f611				   WebImagePF1
     19  f611		       08		      .BYTE.b	%00001000
     20  f612		       06		      .BYTE.b	%00000110
     21  f613		       01		      .BYTE.b	%00000001
     22  f614		       00		      .BYTE.b	%00000000
     23  f615		       00		      .BYTE.b	%00000000
     24  f616		       01		      .BYTE.b	%00000001
     25  f617		       01		      .BYTE.b	%00000001
     26  f618		       02		      .BYTE.b	%00000010
     27  f619		       0c		      .BYTE.b	%00001100
     28  f61a		       30		      .BYTE.b	%00110000
     29  f61b		       c0		      .BYTE.b	%11000000
     30  f61c		       38		      .BYTE.b	%00111000
     31  f61d		       07		      .BYTE.b	%00000111
     32  f61e		       00		      .BYTE.b	%00000000
     33  f61f		       00		      .BYTE.b	%00000000
     34  f620
     35  f620				   WebImagePF2
     36  f620		       20		      .BYTE.b	%00100000
     37  f621		       18		      .BYTE.b	%00011000
     38  f622		       04		      .BYTE.b	%00000100
     39  f623		       03		      .BYTE.b	%00000011
     40  f624		       3f		      .BYTE.b	%00111111
     41  f625		       c2		      .BYTE.b	%11000010
     42  f626		       04		      .BYTE.b	%00000100
     43  f627		       08		      .BYTE.b	%00001000
     44  f628		       08		      .BYTE.b	%00001000
     45  f629		       10		      .BYTE.b	%00010000
     46  f62a		       20		      .BYTE.b	%00100000
     47  f62b		       20		      .BYTE.b	%00100000
     48  f62c		       41		      .BYTE.b	%01000001
     49  f62d		       8e		      .BYTE.b	%10001110
     50  f62e		       f0		      .BYTE.b	%11110000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f62f					      include	"objects/spider.asm"
      1  f62f							;=================
      2  f62f							; Spider (player0)
      3  f62f							;=================
      4  f62f
      5  f62f							; Constants
      6  f62f
      7  f62f		       00 56	   SPIDER_COLOR =	#$56
      8  f62f		       00 10	   SPIDER_SIZE =	16
      9  f62f		       00 08	   SPIDER_SPRITE_SIZE =	8
     10  f62f		       00 02	   SPIDER_VEL_X =	2
     11  f62f		       00 02	   SPIDER_VEL_Y =	2
     12  f62f
     13  f62f		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f62f
     15  f62f							; Initialization
     16  f62f
     17  f62f				   SpiderInit
     18  f62f
     19  f62f							; Initialize Position in center of screen
     20  f62f		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f631		       85 9e		      sta	SpiderPos
     22  f633		       a9 48		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f635		       85 9f		      sta	SpiderPos+1
     24  f637
     25  f637							; Setup Sprite
      0  f637					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f637				   .POINTER   SET	SpiderPtr
      2  f637				   .ADDRESS   SET	SpiderSprite
      3  f637
      4  f637		       a9 a5		      LDA	#<.ADDRESS
      5  f639		       85 9c		      STA	.POINTER
      6  f63b		       a9 f7		      LDA	#>.ADDRESS
      7  f63d		       85 9d		      STA	.POINTER+1
      8  f63f
     27  f63f
     28  f63f							;    lda #SPIDER_COLOR
     29  f63f							;    sta SpiderColor
     30  f63f
     31  f63f		       60		      rts
     32  f640
     33  f640							; Frame Update
     34  f640
     35  f640				   SpiderUpdate
     36  f640		       20 47 f6 	      jsr	SpiderControl
     37  f643		       20 2d f7 	      jsr	SpiderCollision
     38  f646		       60		      rts
     39  f647
     40  f647				   SpiderControl
     41  f647
     42  f647							; Control Position
     43  f647		       a6 9e		      ldx	SpiderPos
     44  f649		       a4 9f		      ldy	SpiderPos+1
     45  f64b		       ad 80 02 	      lda	SWCHA
     46  f64e
     47  f64e				   .spider_control_check_right
     48  f64e		       30 02		      bmi	.spider_control_check_left
     49  f650
     50  f650					      REPEAT	#SPIDER_VEL_X
     51  f650		       e8		      inx
     50  f650					      REPEND
     51  f651		       e8		      inx
     52  f652					      REPEND
     53  f652
     54  f652				   .spider_control_check_left
     55  f652		       2a		      rol
     56  f653		       30 02		      bmi	.spider_control_check_down
     57  f655
     58  f655					      REPEAT	#SPIDER_VEL_X
     59  f655		       ca		      dex
     58  f655					      REPEND
     59  f656		       ca		      dex
     60  f657					      REPEND
     61  f657
     62  f657				   .spider_control_check_down
     63  f657		       2a		      rol
     64  f658		       30 02		      bmi	.spider_control_check_up
     65  f65a
     66  f65a					      REPEAT	#SPIDER_VEL_Y
     67  f65a		       88		      dey
     66  f65a					      REPEND
     67  f65b		       88		      dey
     68  f65c					      REPEND
     69  f65c
     70  f65c				   .spider_control_check_up
     71  f65c		       2a		      rol
     72  f65d		       30 02		      bmi	.spider_control_sprite
     73  f65f
     74  f65f					      REPEAT	#SPIDER_VEL_Y
     75  f65f		       c8		      iny
     74  f65f					      REPEND
     75  f660		       c8		      iny
     76  f661					      REPEND
     77  f661
     78  f661				   .spider_control_sprite
     79  f661							; Control Sprite
     80  f661		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f663
     82  f663				   .spider_control_sprite_x
     83  f663		       e4 9e		      cpx	SpiderPos
     84  f665		       90 04		      bcc	.spider_control_sprite_left
     85  f667		       f0 09		      beq	.spider_control_sprite_y
     86  f669		       b0 05		      bcs	.spider_control_sprite_right
     87  f66b
     88  f66b				   .spider_control_sprite_left
     89  f66b		       09 80		      ora	#%10000000
     90  f66d		       4c 72 f6 	      jmp	.spider_control_sprite_y
     91  f670
     92  f670				   .spider_control_sprite_right
     93  f670		       09 40		      ora	#%01000000
     94  f672
     95  f672				   .spider_control_sprite_y
     96  f672		       c4 9f		      cpy	SpiderPos+1
     97  f674		       90 04		      bcc	.spider_control_sprite_down
     98  f676		       f0 09		      beq	.spider_control_sprite_store
     99  f678		       b0 05		      bcs	.spider_control_sprite_up
    100  f67a
    101  f67a				   .spider_control_sprite_down
    102  f67a		       09 10		      ora	#%00010000
    103  f67c		       4c 81 f6 	      jmp	.spider_control_sprite_store
    104  f67f
    105  f67f				   .spider_control_sprite_up
    106  f67f		       09 20		      ora	#%00100000
    107  f681
    108  f681				   .spider_control_sprite_store
    109  f681		       c9 00		      cmp	#%00000000
    110  f683		       f0 02		      beq	.spider_control_boundary
    111  f685		       85 a0		      sta	SpiderCtrl
    112  f687
    113  f687				   .spider_control_boundary
    114  f687							; Check Playfield Boundaries
    115  f687
    116  f687				   .spider_control_boundary_left
    117  f687		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f689		       b0 05		      bcs	.spider_control_boundary_right
    119  f68b		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f68d		       4c 96 f6 	      jmp	.spider_control_boundary_top
    121  f690
    122  f690				   .spider_control_boundary_right
    123  f690		       e0 7e		      cpx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    124  f692		       90 02		      bcc	.spider_control_boundary_top
    125  f694		       a2 7e		      ldx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    126  f696
    127  f696				   .spider_control_boundary_top
    128  f696		       c0 03		      cpy	#SPIDER_VEL_X+1
    129  f698		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f69a		       a0 03		      ldy	#SPIDER_VEL_X+1
    131  f69c		       4c a5 f6 	      jmp	.spider_control_store
    132  f69f
    133  f69f				   .spider_control_boundary_bottom
    134  f69f		       c0 b1		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    135  f6a1		       90 02		      bcc	.spider_control_store
    136  f6a3		       a0 b1		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    137  f6a5
    138  f6a5				   .spider_control_store
    139  f6a5							; Store new position
    140  f6a5		       86 9e		      stx	SpiderPos
    141  f6a7		       84 9f		      sty	SpiderPos+1
    142  f6a9
    143  f6a9							; TODO: Optimize this somehow?
    144  f6a9				   .spider_control_sprite_assign
    145  f6a9							; Skip if no change
    146  f6a9		       c9 00		      cmp	#%00000000
    147  f6ab		       f0 7f		      beq	.spider_control_return
    148  f6ad
    149  f6ad		       a2 00		      ldx	#%00000000	; For reflection
    150  f6af
    151  f6af				   .spider_control_sprite_assign_left
    152  f6af		       c9 80		      cmp	#%10000000
    153  f6b1		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f6b3					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f6b3				   .POINTER   SET	SpiderPtr
      2  f6b3				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f6b3
      4  f6b3		       a9 b5		      LDA	#<.ADDRESS
      5  f6b5		       85 9c		      STA	.POINTER
      6  f6b7		       a9 f7		      LDA	#>.ADDRESS
      7  f6b9		       85 9d		      STA	.POINTER+1
      8  f6bb
    155  f6bb		       a2 08		      ldx	#%00001000
    156  f6bd		       4c 2a f7 	      jmp	.spider_control_reflect
    157  f6c0
    158  f6c0				   .spider_control_sprite_assign_right
    159  f6c0		       c9 40		      cmp	#%01000000
    160  f6c2		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f6c4					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f6c4				   .POINTER   SET	SpiderPtr
      2  f6c4				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f6c4
      4  f6c4		       a9 b5		      LDA	#<.ADDRESS
      5  f6c6		       85 9c		      STA	.POINTER
      6  f6c8		       a9 f7		      LDA	#>.ADDRESS
      7  f6ca		       85 9d		      STA	.POINTER+1
      8  f6cc
    162  f6cc		       4c 2a f7 	      jmp	.spider_control_reflect
    163  f6cf
    164  f6cf				   .spider_control_sprite_assign_top
    165  f6cf		       c9 20		      cmp	#%00100000
    166  f6d1		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f6d3					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f6d3				   .POINTER   SET	SpiderPtr
      2  f6d3				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f6d3
      4  f6d3		       a9 a5		      LDA	#<.ADDRESS
      5  f6d5		       85 9c		      STA	.POINTER
      6  f6d7		       a9 f7		      LDA	#>.ADDRESS
      7  f6d9		       85 9d		      STA	.POINTER+1
      8  f6db
    168  f6db		       4c 2a f7 	      jmp	.spider_control_reflect
    169  f6de
    170  f6de				   .spider_control_sprite_assign_bottom
    171  f6de		       c9 10		      cmp	#%00010000
    172  f6e0		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f6e2					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f6e2				   .POINTER   SET	SpiderPtr
      2  f6e2				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f6e2
      4  f6e2		       a9 c5		      LDA	#<.ADDRESS
      5  f6e4		       85 9c		      STA	.POINTER
      6  f6e6		       a9 f7		      LDA	#>.ADDRESS
      7  f6e8		       85 9d		      STA	.POINTER+1
      8  f6ea
    174  f6ea		       4c 2a f7 	      jmp	.spider_control_reflect
    175  f6ed
    176  f6ed				   .spider_control_sprite_assign_top_right
    177  f6ed		       c9 60		      cmp	#%01100000
    178  f6ef		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f6f1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f6f1				   .POINTER   SET	SpiderPtr
      2  f6f1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f6f1
      4  f6f1		       a9 ad		      LDA	#<.ADDRESS
      5  f6f3		       85 9c		      STA	.POINTER
      6  f6f5		       a9 f7		      LDA	#>.ADDRESS
      7  f6f7		       85 9d		      STA	.POINTER+1
      8  f6f9
    180  f6f9		       4c 2a f7 	      jmp	.spider_control_reflect
    181  f6fc
    182  f6fc				   .spider_control_sprite_assign_bottom_right
    183  f6fc		       c9 50		      cmp	#%01010000
    184  f6fe		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f700					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f700				   .POINTER   SET	SpiderPtr
      2  f700				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f700
      4  f700		       a9 bd		      LDA	#<.ADDRESS
      5  f702		       85 9c		      STA	.POINTER
      6  f704		       a9 f7		      LDA	#>.ADDRESS
      7  f706		       85 9d		      STA	.POINTER+1
      8  f708
    186  f708		       4c 2a f7 	      jmp	.spider_control_reflect
    187  f70b
    188  f70b				   .spider_control_sprite_assign_bottom_left
    189  f70b		       c9 90		      cmp	#%10010000
    190  f70d		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f70f					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f70f				   .POINTER   SET	SpiderPtr
      2  f70f				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f70f
      4  f70f		       a9 bd		      LDA	#<.ADDRESS
      5  f711		       85 9c		      STA	.POINTER
      6  f713		       a9 f7		      LDA	#>.ADDRESS
      7  f715		       85 9d		      STA	.POINTER+1
      8  f717
    192  f717		       a2 08		      ldx	#%00001000
    193  f719		       4c 2a f7 	      jmp	.spider_control_reflect
    194  f71c
    195  f71c				   .spider_control_sprite_assign_top_left
    196  f71c		       c9 a0		      cmp	#%10100000
    197  f71e		       d0 0a		      bne	.spider_control_reflect
      0  f720					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f720				   .POINTER   SET	SpiderPtr
      2  f720				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f720
      4  f720		       a9 ad		      LDA	#<.ADDRESS
      5  f722		       85 9c		      STA	.POINTER
      6  f724		       a9 f7		      LDA	#>.ADDRESS
      7  f726		       85 9d		      STA	.POINTER+1
      8  f728
    199  f728		       a2 08		      ldx	#%00001000
    200  f72a
    201  f72a				   .spider_control_reflect
    202  f72a		       86 0b		      stx	REFP0
    203  f72c
    204  f72c				   .spider_control_return
    205  f72c		       60		      rts
    206  f72d
    207  f72d				   SpiderCollision
    208  f72d		       a9 56		      lda	#SPIDER_COLOR
    209  f72f
    210  f72f				   .spider_collision_m0
    211  f72f							; Check stun status
    212  f72f		       a6 af		      ldx	BugStunned
    213  f731		       e0 00		      cpx	#0
    214  f733		       d0 04		      bne	.spider_collision_m1
    215  f735
    216  f735							; Collision for M0 (V set)
    217  f735		       24 00		      bit	CXM0P
    218  f737		       70 0d		      bvs	.spider_collision_active
    219  f739
    220  f739				   .spider_collision_m1
    221  f739							; Check stun status
    222  f739		       a6 b0		      ldx	BugStunned+1
    223  f73b		       e0 00		      cpx	#0
    224  f73d		       d0 09		      bne	.spider_collision_return
    225  f73f
    226  f73f							; Collision for M1 (N set)
    227  f73f		       24 01		      bit	CXM1P
    228  f741		       30 03		      bmi	.spider_collision_active
    229  f743
    230  f743		       4c 48 f7 	      jmp	.spider_collision_return
    231  f746
    232  f746				   .spider_collision_active
    233  f746		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f748
    235  f748				   .spider_collision_return
    236  f748		       85 a1		      sta	SpiderColor
    237  f74a		       60		      rts
    238  f74b
    239  f74b				   SpiderPosition
    240  f74b
    241  f74b							; Set Position
    242  f74b		       a2 00		      ldx	#0	; Object (player0)
    243  f74d		       a5 9e		      lda	SpiderPos	; X Position
    244  f74f		       20 00 f0 	      jsr	PosObject
    245  f752
    246  f752		       60		      rts
    247  f753
    248  f753							; Scanline Draw
    249  f753
    250  f753				   SpiderDrawStart
    251  f753
    252  f753							; Set player 0 to be quad size
    253  f753		       a5 81		      lda	NuSiz0
    254  f755		       09 07		      ora	#%00000111
    255  f757		       85 81		      sta	NuSiz0
    256  f759		       85 04		      sta	NUSIZ0
    257  f75b
    258  f75b							; Set sprite color
    259  f75b		       a5 a1		      lda	SpiderColor
    260  f75d		       85 06		      sta	COLUP0
    261  f75f
    262  f75f							; Determine if we need to use vertical delay (odd line)
    263  f75f		       a5 9f		      lda	SpiderPos+1	; Y Position
    264  f761		       4a		      lsr
    265  f762		       b0 05		      bcs	.spider_draw_start_nodelay
    266  f764
    267  f764		       a0 01		      ldy	#1
    268  f766		       4c 6b f7 	      jmp	.spider_draw_start_set_delay
    269  f769
    270  f769				   .spider_draw_start_nodelay
    271  f769		       a0 00		      ldy	#0
    272  f76b
    273  f76b				   .spider_draw_start_set_delay
    274  f76b		       84 25		      sty	VDELP0
    275  f76d
    276  f76d				   .spider_draw_start_pos
    277  f76d							; Calculate starting position
    278  f76d		       18		      clc
    279  f76e		       69 10		      adc	#SPIDER_SIZE
    280  f770		       85 a3		      sta	SpiderDrawPos
    281  f772
    282  f772							; Initialize sprite index
    283  f772		       a9 00		      lda	#0
    284  f774		       85 a2		      sta	SpiderIndex
    285  f776
    286  f776		       60		      rts
    287  f777
    288  f777				   SpiderDraw
    289  f777
    290  f777		       a4 a2		      ldy	SpiderIndex
    291  f779		       c0 10		      cpy	#(SPIDER_SPRITE_SIZE*2)
    292  f77b		       f0 1b		      beq	.spider_draw_blank	; At end of sprite
    293  f77d		       b0 20		      bcs	.spider_draw_return	; Completed drawing sprite
    294  f77f		       c0 00		      cpy	#0
    295  f781		       d0 06		      bne	.spider_draw_line
    296  f783
    297  f783							; Use half scanline
    298  f783		       a5 84		      lda	Temp+1
    299  f785
    300  f785		       e5 a3		      sbc	SpiderDrawPos
    301  f787		       10 16		      bpl	.spider_draw_return	; Not yet to draw sprite
    302  f789
    303  f789				   .spider_draw_line
    304  f789		       98		      tya
    305  f78a		       4a		      lsr
    306  f78b		       b0 05		      bcs	.spider_draw_skip
    307  f78d		       a8		      tay
    308  f78e
    309  f78e		       b1 9c		      lda	(SpiderPtr),y
    310  f790		       85 1b		      sta	GRP0
    311  f792
    312  f792				   .spider_draw_skip
    313  f792		       a4 a2		      ldy	SpiderIndex
    314  f794		       c8		      iny
    315  f795		       84 a2		      sty	SpiderIndex
    316  f797		       60		      rts		; Early return
    317  f798
    318  f798				   .spider_draw_blank
    319  f798		       a9 00		      lda	#0
    320  f79a		       85 1b		      sta	GRP0
    321  f79c
    322  f79c							; Push index to be one above
    323  f79c		       c8		      iny
    324  f79d		       84 a2		      sty	SpiderIndex
    325  f79f
    326  f79f				   .spider_draw_return
    327  f79f		       60		      rts
    328  f7a0
    329  f7a0				   SpiderClean
    330  f7a0
    331  f7a0							; Clear out Player0 sprite
    332  f7a0		       a9 00		      lda	#0
    333  f7a2		       85 1b		      sta	GRP0
    334  f7a4
    335  f7a4		       60		      rts
    336  f7a5
    337  f7a5							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f7a5					      include	"objects/spider_sprite.asm"
      1  f7a5				   SpiderSprite
      2  f7a5
      3  f7a5		       99		      .BYTE.b	%10011001
      4  f7a6		       bd		      .BYTE.b	%10111101
      5  f7a7		       99		      .BYTE.b	%10011001
      6  f7a8		       7e		      .BYTE.b	%01111110
      7  f7a9		       3c		      .BYTE.b	%00111100
      8  f7aa		       7e		      .BYTE.b	%01111110
      9  f7ab		       bd		      .BYTE.b	%10111101
     10  f7ac		       99		      .BYTE.b	%10011001
     11  f7ad
     12  f7ad		       0b		      .BYTE.b	%00001011
     13  f7ae		       13		      .BYTE.b	%00010011
     14  f7af		       1c		      .BYTE.b	%00011100
     15  f7b0		       2d		      .BYTE.b	%00101101
     16  f7b1		       f6		      .BYTE.b	%11110110
     17  f7b2		       b8		      .BYTE.b	%10111000
     18  f7b3		       10		      .BYTE.b	%00010000
     19  f7b4		       30		      .BYTE.b	%00110000
     20  f7b5
     21  f7b5		       c7		      .BYTE.b	%11000111
     22  f7b6		       28		      .BYTE.b	%00101000
     23  f7b7		       7a		      .BYTE.b	%01111010
     24  f7b8		       ff		      .BYTE.b	%11111111
     25  f7b9		       ff		      .BYTE.b	%11111111
     26  f7ba		       7a		      .BYTE.b	%01111010
     27  f7bb		       28		      .BYTE.b	%00101000
     28  f7bc		       c7		      .BYTE.b	%11000111
     29  f7bd
     30  f7bd		       30		      .BYTE.b	%00110000
     31  f7be		       10		      .BYTE.b	%00010000
     32  f7bf		       b8		      .BYTE.b	%10111000
     33  f7c0		       f6		      .BYTE.b	%11110110
     34  f7c1		       2d		      .BYTE.b	%00101101
     35  f7c2		       1c		      .BYTE.b	%00011100
     36  f7c3		       13		      .BYTE.b	%00010011
     37  f7c4		       0b		      .BYTE.b	%00001011
     38  f7c5
     39  f7c5		       99		      .BYTE.b	%10011001
     40  f7c6		       bd		      .BYTE.b	%10111101
     41  f7c7		       7e		      .BYTE.b	%01111110
     42  f7c8		       3c		      .BYTE.b	%00111100
     43  f7c9		       7e		      .BYTE.b	%01111110
     44  f7ca		       99		      .BYTE.b	%10011001
     45  f7cb		       bd		      .BYTE.b	%10111101
     46  f7cc		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f7cd					      include	"objects/line.asm"
      1  f7cd							;================
      2  f7cd							; Line (ball)
      3  f7cd							;================
      4  f7cd
      5  f7cd							; Constants
      6  f7cd
      7  f7cd		       00 04	   LINE_SIZE  =	4
      8  f7cd		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f7cd		       00 04	   LINE_VEL_X =	4
     10  f7cd		       00 04	   LINE_VEL_Y =	4
     11  f7cd
     12  f7cd		       00 08	   LINE_AUDIO_C =	8
     13  f7cd		       00 01	   LINE_AUDIO_F =	1
     14  f7cd		       00 04	   LINE_AUDIO_V =	4
     15  f7cd
     16  f7cd		       00 08	   LINE_SAMPLE_LEN =	8
     17  f7cd		       00 03	   LINE_SAMPLE_C =	3
     18  f7cd		       00 01	   LINE_SAMPLE_F =	1
     19  f7cd		       00 04	   LINE_SAMPLE_V =	4
     20  f7cd
     21  f7cd							; Initialization
     22  f7cd
     23  f7cd				   LineInit
     24  f7cd
     25  f7cd							; Initial Line Control
     26  f7cd		       a9 00		      lda	#0
     27  f7cf		       85 a6		      sta	LineEnabled
     28  f7d1		       85 a7		      sta	LinePos+0
     29  f7d3		       85 a8		      sta	LinePos+1
     30  f7d5		       85 a9		      sta	LineVelocity+0
     31  f7d7		       85 aa		      sta	LineVelocity+1
     32  f7d9		       85 ab		      sta	LineStartPos+0
     33  f7db		       85 ac		      sta	LineStartPos+1
     34  f7dd		       85 ad		      sta	LineDrawPos+0
     35  f7df		       85 ae		      sta	LineDrawPos+1
     36  f7e1
     37  f7e1		       60		      rts
     38  f7e2
     39  f7e2							; Frame Update
     40  f7e2
     41  f7e2				   LineUpdate
     42  f7e2		       20 ec f7 	      jsr	LineControl
     43  f7e5		       20 9e f8 	      jsr	LineObject
     44  f7e8		       20 e5 f8 	      jsr	LineCollision
     45  f7eb		       60		      rts
     46  f7ec
     47  f7ec				   LineControl
     48  f7ec
     49  f7ec							; Check if Fire Button on controller 1 is pressed
     50  f7ec		       a5 0c		      lda	INPT4
     51  f7ee		       30 0a		      bmi	.line_control_skip
     52  f7f0
     53  f7f0		       24 a6		      bit	LineEnabled
     54  f7f2		       30 06		      bmi	.line_control_skip
     55  f7f4
     56  f7f4		       a5 a0		      lda	SpiderCtrl
     57  f7f6		       c9 00		      cmp	#0
     58  f7f8		       d0 03		      bne	.line_control_fire
     59  f7fa
     60  f7fa				   .line_control_skip
     61  f7fa		       4c 9d f8 	      jmp	.line_control_return
     62  f7fd
     63  f7fd				   .line_control_fire
     64  f7fd		       20 40 f9 	      jsr	LineEnable
     65  f800
     66  f800				   .line_control_x
     67  f800		       a5 a0		      lda	SpiderCtrl
     68  f802		       29 c0		      and	#%11000000
     69  f804		       f0 0e		      beq	.line_control_x_none
     70  f806				   .line_control_x_left
     71  f806		       c9 80		      cmp	#%10000000
     72  f808		       d0 05		      bne	.line_control_x_right
     73  f80a
     74  f80a		       a9 fc		      lda	#-LINE_VEL_X
     75  f80c		       4c 16 f8 	      jmp	.line_control_x_store
     76  f80f				   .line_control_x_right
     77  f80f		       a9 04		      lda	#LINE_VEL_X
     78  f811		       4c 16 f8 	      jmp	.line_control_x_store
     79  f814				   .line_control_x_none
     80  f814		       a9 00		      lda	#0
     81  f816				   .line_control_x_store
     82  f816		       85 a9		      sta	LineVelocity
     83  f818
     84  f818				   .line_control_y
     85  f818		       a5 a0		      lda	SpiderCtrl
     86  f81a		       29 30		      and	#%00110000
     87  f81c		       f0 0e		      beq	.line_control_y_none
     88  f81e				   .line_control_y_up
     89  f81e		       c9 20		      cmp	#%00100000
     90  f820		       d0 05		      bne	.line_control_y_down
     91  f822
     92  f822		       a9 04		      lda	#LINE_VEL_Y
     93  f824		       4c 2e f8 	      jmp	.line_control_y_store
     94  f827				   .line_control_y_down
     95  f827		       a9 fc		      lda	#-LINE_VEL_Y
     96  f829		       4c 2e f8 	      jmp	.line_control_y_store
     97  f82c				   .line_control_y_none
     98  f82c		       a9 00		      lda	#0
     99  f82e				   .line_control_y_store
    100  f82e		       85 aa		      sta	LineVelocity+1
    101  f830
    102  f830				   .line_control_position
    103  f830
    104  f830		       a2 00		      ldx	#0	; offsetX
    105  f832		       a0 00		      ldy	#0	; offsetY
    106  f834
    107  f834		       a5 a0		      lda	SpiderCtrl
    108  f836		       29 f0		      and	#%11110000
    109  f838
    110  f838				   .line_control_position_left
    111  f838		       c9 80		      cmp	#%10000000
    112  f83a		       d0 07		      bne	.line_control_position_right
    113  f83c
    114  f83c		       a2 04		      ldx	#LINE_SIZE
    115  f83e		       a0 10		      ldy	#SPIDER_SIZE
    116  f840		       4c 85 f8 	      jmp	.line_control_position_store
    117  f843
    118  f843				   .line_control_position_right
    119  f843		       c9 40		      cmp	#%01000000
    120  f845		       d0 07		      bne	.line_control_position_top
    121  f847
    122  f847		       a2 20		      ldx	#SPIDER_SIZE*2
    123  f849		       a0 10		      ldy	#SPIDER_SIZE
    124  f84b		       4c 85 f8 	      jmp	.line_control_position_store
    125  f84e
    126  f84e				   .line_control_position_top
    127  f84e		       c9 20		      cmp	#%00100000
    128  f850		       d0 07		      bne	.line_control_position_bottom
    129  f852
    130  f852		       a2 10		      ldx	#SPIDER_SIZE
    131  f854		       a0 20		      ldy	#SPIDER_SIZE*2
    132  f856		       4c 85 f8 	      jmp	.line_control_position_store
    133  f859
    134  f859				   .line_control_position_bottom
    135  f859		       c9 10		      cmp	#%00010000
    136  f85b		       d0 05		      bne	.line_control_position_top_right
    137  f85d
    138  f85d		       a2 10		      ldx	#SPIDER_SIZE
    139  f85f		       4c 85 f8 	      jmp	.line_control_position_store
    140  f862
    141  f862				   .line_control_position_top_right
    142  f862		       c9 60		      cmp	#%01100000
    143  f864		       d0 07		      bne	.line_control_position_bottom_right
    144  f866
    145  f866		       a2 20		      ldx	#SPIDER_SIZE*2
    146  f868		       a0 20		      ldy	#SPIDER_SIZE*2
    147  f86a		       4c 85 f8 	      jmp	.line_control_position_store
    148  f86d
    149  f86d				   .line_control_position_bottom_right
    150  f86d		       c9 50		      cmp	#%01010000
    151  f86f		       d0 05		      bne	.line_control_position_bottom_left
    152  f871
    153  f871		       a2 20		      ldx	#SPIDER_SIZE*2
    154  f873		       4c 85 f8 	      jmp	.line_control_position_store
    155  f876
    156  f876				   .line_control_position_bottom_left
    157  f876		       c9 90		      cmp	#%10010000
    158  f878		       d0 03		      bne	.line_control_position_top_left
    159  f87a
    160  f87a							; No Offset
    161  f87a		       4c 85 f8 	      jmp	.line_control_position_store
    162  f87d
    163  f87d				   .line_control_position_top_left
    164  f87d		       c9 a0		      cmp	#%10100000
    165  f87f		       d0 04		      bne	.line_control_position_store
    166  f881
    167  f881		       a2 04		      ldx	#LINE_SIZE
    168  f883		       a0 20		      ldy	#SPIDER_SIZE*2
    169  f885
    170  f885				   .line_control_position_store
    171  f885
    172  f885							; Apply offsetX to playerX
    173  f885		       a5 9e		      lda	SpiderPos
    174  f887		       86 83		      stx	Temp
    175  f889		       18		      clc
    176  f88a		       65 83		      adc	Temp
    177  f88c		       aa		      tax
    178  f88d
    179  f88d							; Apply offsetY to playerY
    180  f88d		       a5 9f		      lda	SpiderPos+1
    181  f88f		       84 83		      sty	Temp
    182  f891		       18		      clc
    183  f892		       65 83		      adc	Temp
    184  f894		       a8		      tay
    185  f895
    186  f895		       86 a7		      stx	LinePos
    187  f897		       84 a8		      sty	LinePos+1
    188  f899		       86 ab		      stx	LineStartPos
    189  f89b		       84 ac		      sty	LineStartPos+1
    190  f89d
    191  f89d				   .line_control_return
    192  f89d		       60		      rts
    193  f89e
    194  f89e				   LineObject
    195  f89e
    196  f89e							; Check if line is enabled
    197  f89e		       24 a6		      bit	LineEnabled
    198  f8a0		       10 42		      bpl	.line_object_return
    199  f8a2
    200  f8a2							; Load position
    201  f8a2		       a6 a7		      ldx	LinePos
    202  f8a4		       a4 a8		      ldy	LinePos+1
    203  f8a6
    204  f8a6				   .line_object_distance
    205  f8a6
    206  f8a6							; Check distance from player with absolute value differences
    207  f8a6
    208  f8a6				   .line_object_distance_x
    209  f8a6		       8a		      txa
    210  f8a7		       18		      clc
    211  f8a8		       e5 ab		      sbc	LineStartPos
    212  f8aa		       b0 04		      bcs	.line_object_distance_x_check
    213  f8ac		       49 ff		      eor	#$FF	; C flag is clear here
    214  f8ae		       69 01		      adc	#$01	; form two's complement
    215  f8b0				   .line_object_distance_x_check		; Jumps to if positive
    216  f8b0		       c9 40		      cmp	#LINE_DISTANCE
    217  f8b2		       b0 2d		      bcs	.line_object_disable
    218  f8b4
    219  f8b4				   .line_object_distance_y
    220  f8b4		       98		      tya
    221  f8b5		       18		      clc
    222  f8b6		       e5 ac		      sbc	LineStartPos+1
    223  f8b8		       b0 04		      bcs	.line_object_distance_y_check
    224  f8ba		       49 ff		      eor	#$FF	; C flag is clear here
    225  f8bc		       69 01		      adc	#$01	; form two's complement
    226  f8be				   .line_object_distance_y_check		; Jumps to if positive
    227  f8be		       c9 40		      cmp	#LINE_DISTANCE
    228  f8c0		       b0 1f		      bcs	.line_object_disable
    229  f8c2
    230  f8c2				   .line_object_boundary
    231  f8c2				   .line_object_boundary_left
    232  f8c2		       e0 04		      cpx	#LINE_VEL_X
    233  f8c4		       90 1b		      bcc	.line_object_disable
    234  f8c6				   .line_object_boundary_right
    235  f8c6		       e0 9c		      cpx	#160-LINE_VEL_X
    236  f8c8		       b0 17		      bcs	.line_object_disable
    237  f8ca				   .line_object_boundary_bottom
    238  f8ca		       c0 04		      cpy	#LINE_VEL_Y
    239  f8cc		       90 13		      bcc	.line_object_disable
    240  f8ce				   .line_object_boundary_top
    241  f8ce		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    242  f8d0		       b0 0f		      bcs	.line_object_disable
    243  f8d2
    244  f8d2				   .line_object_velocity
    245  f8d2
    246  f8d2							; Apply Velocity
    247  f8d2		       8a		      txa
    248  f8d3		       18		      clc
    249  f8d4		       65 a9		      adc	LineVelocity
    250  f8d6		       85 a7		      sta	LinePos
    251  f8d8
    252  f8d8		       98		      tya
    253  f8d9		       18		      clc
    254  f8da		       65 aa		      adc	LineVelocity+1
    255  f8dc		       85 a8		      sta	LinePos+1
    256  f8de
    257  f8de		       4c e4 f8 	      jmp	.line_object_return
    258  f8e1
    259  f8e1				   .line_object_disable
    260  f8e1		       20 4e f9 	      jsr	LineDisable
    261  f8e4
    262  f8e4				   .line_object_return
    263  f8e4		       60		      rts
    264  f8e5
    265  f8e5				   LineCollision
    266  f8e5
    267  f8e5		       a9 78		      lda	#BUG_STUN_LENGTH
    268  f8e7
    269  f8e7				   .line_collision_m0
    270  f8e7		       24 04		      bit	CXM0FB
    271  f8e9		       50 08		      bvc	.line_collision_m1
    272  f8eb
    273  f8eb							; Set stun timer
    274  f8eb		       85 af		      sta	BugStunned+0
    275  f8ed
    276  f8ed							; Disable line
    277  f8ed		       20 4e f9 	      jsr	LineDisable
    278  f8f0		       4c fc f8 	      jmp	.line_collision_sample
    279  f8f3
    280  f8f3				   .line_collision_m1
    281  f8f3		       24 05		      bit	CXM1FB
    282  f8f5		       50 08		      bvc	.line_collision_return
    283  f8f7
    284  f8f7							; Set stun timer
    285  f8f7		       85 b0		      sta	BugStunned+1
    286  f8f9
    287  f8f9							; Disable line
    288  f8f9		       20 4e f9 	      jsr	LineDisable
    289  f8fc
    290  f8fc				   .line_collision_sample
    291  f8fc		       20 72 f9 	      jsr	LineSample
    292  f8ff
    293  f8ff				   .line_collision_return
    294  f8ff		       60		      rts
    295  f900
    296  f900				   LinePosition
    297  f900
    298  f900							; Set Line Position
    299  f900		       a2 04		      ldx	#4	; Object (ball)
    300  f902		       a5 a7		      lda	LinePos	; X Position
    301  f904		       20 00 f0 	      jsr	PosObject
    302  f907
    303  f907		       60		      rts
    304  f908
    305  f908							; Scanline Draw
    306  f908
    307  f908				   LineDrawStart
    308  f908
    309  f908							; Set ball size to be 4 clocks (4/5 bits)
    310  f908		       a5 80		      lda	CtrlPf
    311  f90a		       29 cf		      and	#%11001111
    312  f90c		       09 20		      ora	#%00100000
    313  f90e		       85 80		      sta	CtrlPf
    314  f910		       85 0a		      sta	CTRLPF
    315  f912
    316  f912							; Determine if we need to use vertical delay (oven line)
    317  f912		       a5 a8		      lda	LinePos+1
    318  f914		       4a		      lsr
    319  f915		       90 05		      bcc	.line_draw_start_nodelay
    320  f917
    321  f917		       a0 01		      ldy	#1
    322  f919		       4c 1e f9 	      jmp	.line_draw_start_set_delay
    323  f91c
    324  f91c				   .line_draw_start_nodelay
    325  f91c		       a0 00		      ldy	#0
    326  f91e
    327  f91e				   .line_draw_start_set_delay
    328  f91e		       84 27		      sty	VDELBL
    329  f920
    330  f920				   .line_draw_start_pos
    331  f920							; Calculate starting position
    332  f920		       18		      clc
    333  f921		       85 ad		      sta	LineDrawPos+0
    334  f923		       69 02		      adc	#LINE_SIZE/2
    335  f925		       85 ae		      sta	LineDrawPos+1
    336  f927
    337  f927		       60		      rts
    338  f928
    339  f928				   LineDraw
    340  f928
    341  f928		       a0 00		      ldy	#%00000000
    342  f92a
    343  f92a							; Check if visible
    344  f92a		       24 a6		      bit	LineEnabled
    345  f92c		       10 0a		      bpl	.line_draw_off
    346  f92e
    347  f92e							; Load half scanline
    348  f92e							;    lda Temp+1
    349  f92e
    350  f92e							; Top
    351  f92e		       c5 ae		      cmp	LineDrawPos+1
    352  f930		       b0 06		      bcs	.line_draw_off
    353  f932
    354  f932							; Bottom
    355  f932		       c5 ad		      cmp	LineDrawPos+0
    356  f934		       90 02		      bcc	.line_draw_off
    357  f936
    358  f936				   .line_draw_on
    359  f936		       a0 02		      ldy	#%00000010
    360  f938
    361  f938				   .line_draw_off
    362  f938		       84 1f		      sty	ENABL
    363  f93a
    364  f93a		       60		      rts
    365  f93b
    366  f93b				   LineClean
    367  f93b
    368  f93b							; Clear out Line
    369  f93b		       a9 00		      lda	#0
    370  f93d		       85 1f		      sta	ENABL
    371  f93f
    372  f93f		       60		      rts
    373  f940
    374  f940				   LineEnable
    375  f940		       a9 80		      lda	#%10000000
    376  f942		       85 a6		      sta	LineEnabled
    377  f944
    378  f944		       a5 91		      lda	SampleStep
    379  f946		       c9 00		      cmp	#0
    380  f948		       d0 03		      bne	.line_enable_return
    381  f94a
    382  f94a		       20 5c f9 	      jsr	LineAudioPlay
    383  f94d
    384  f94d				   .line_enable_return
    385  f94d		       60		      rts
    386  f94e
    387  f94e				   LineDisable
    388  f94e		       a9 00		      lda	#0
    389  f950		       85 a6		      sta	LineEnabled
    390  f952
    391  f952		       a5 91		      lda	SampleStep
    392  f954		       c9 00		      cmp	#0
    393  f956		       d0 03		      bne	.line_disable_return
    394  f958
    395  f958		       20 69 f9 	      jsr	LineAudioMute
    396  f95b
    397  f95b				   .line_disable_return
    398  f95b		       60		      rts
    399  f95c
    400  f95c				   LineAudioPlay
    401  f95c		       a9 08		      lda	#LINE_AUDIO_C
    402  f95e		       85 16		      sta	AUDC1
    403  f960		       a9 01		      lda	#LINE_AUDIO_F
    404  f962		       85 18		      sta	AUDF1
    405  f964		       a9 04		      lda	#LINE_AUDIO_V
    406  f966		       85 1a		      sta	AUDV1
    407  f968		       60		      rts
    408  f969
    409  f969				   LineAudioMute
    410  f969		       a9 00		      lda	#0
    411  f96b		       85 1a		      sta	AUDV1
    412  f96d		       85 18		      sta	AUDF1
    413  f96f		       85 16		      sta	AUDC1
    414  f971		       60		      rts
    415  f972
    416  f972				   LineSample
    417  f972		       a9 08		      lda	#LINE_SAMPLE_LEN
    418  f974		       85 91		      sta	SampleStep
    419  f976		       a9 03		      lda	#LINE_SAMPLE_C
    420  f978		       85 16		      sta	AUDC1
    421  f97a		       a9 01		      lda	#LINE_SAMPLE_F
    422  f97c		       85 18		      sta	AUDF1
    423  f97e		       a9 04		      lda	#LINE_SAMPLE_V
    424  f980		       85 1a		      sta	AUDV1
    425  f982		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f983					      include	"objects/bug.asm"
      1  f983							;======================
      2  f983							; Bugs (missiles 0 & 1)
      3  f983							;======================
      4  f983
      5  f983							; Constants
      6  f983
      7  f983		       00 08	   BUG_SIZE   =	8
      8  f983		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f983		       00 02	   BUG_SPEED  =	2
     10  f983		       00 78	   BUG_STUN_LENGTH =	120
     11  f983		       00 04	   BUG_POINTS =	4
     12  f983
     13  f983		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f983		       00 38	   BUG_COLOR_STUN =	#$38
     15  f983
     16  f983		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f983		       00 03	   BUG_SAMPLE_C =	3
     18  f983		       00 14	   BUG_SAMPLE_F =	20
     19  f983		       00 04	   BUG_SAMPLE_V =	4
     20  f983
     21  f983		       00 01	   BUG_COL_SAMPLE_LEN =	1
     22  f983		       00 08	   BUG_COL_SAMPLE_C =	8
     23  f983		       00 08	   BUG_COL_SAMPLE_F =	8
     24  f983		       00 03	   BUG_COL_SAMPLE_V =	3
     25  f983
     26  f983							; Initialization
     27  f983
     28  f983				   BugInit
     29  f983
     30  f983							; Initialize Bugs
     31  f983		       a2 01		      ldx	#1
     32  f985
     33  f985				   .bug_init_loop
     34  f985		       20 8c f9 	      jsr	BugReset
     35  f988
     36  f988		       ca		      dex
     37  f989		       10 fa		      bpl	.bug_init_loop
     38  f98b
     39  f98b		       60		      rts
     40  f98c
     41  f98c				   BugReset		; x = bug (0 or 1)
     42  f98c
     43  f98c							; Set random position
     44  f98c		       20 13 f0 	      jsr	Random
     45  f98f
     46  f98f		       a5 85		      lda	Rand8
     47  f991		       29 7f		      and	#$7f
     48  f993		       95 b1		      sta	BugPosX,x
     49  f995
     50  f995		       a5 86		      lda	Rand16
     51  f997		       29 7f		      and	#$7f
     52  f999		       95 b3		      sta	BugPosY,x
     53  f99b
     54  f99b							; Set as active
     55  f99b		       a9 00		      lda	#0
     56  f99d		       95 af		      sta	BugStunned,x
     57  f99f
     58  f99f							; Reset Color
     59  f99f		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     60  f9a1		       95 b5		      sta	BugColor,x
     61  f9a3
     62  f9a3		       60		      rts
     63  f9a4
     64  f9a4							; Frame Update
     65  f9a4
     66  f9a4				   BugUpdate
     67  f9a4
     68  f9a4		       a2 01		      ldx	#1
     69  f9a6				   .bug_update_loop
     70  f9a6		       86 83		      stx	Temp+0
     71  f9a8
     72  f9a8		       b5 af		      lda	BugStunned,x
     73  f9aa		       c9 00		      cmp	#0
     74  f9ac		       f0 08		      beq	.bug_update_active
     75  f9ae
     76  f9ae				   .bug_update_stunned
     77  f9ae		       d6 af		      dec	BugStunned,x
     78  f9b0		       20 29 fa 	      jsr	BugStunCollision
     79  f9b3		       4c bc f9 	      jmp	.bug_update_next
     80  f9b6
     81  f9b6				   .bug_update_active
     82  f9b6		       20 c2 f9 	      jsr	BugMovement
     83  f9b9		       20 15 fa 	      jsr	BugCollision
     84  f9bc
     85  f9bc				   .bug_update_next
     86  f9bc		       a6 83		      ldx	Temp+0
     87  f9be		       ca		      dex
     88  f9bf		       10 e5		      bpl	.bug_update_loop
     89  f9c1
     90  f9c1		       60		      rts
     91  f9c2
     92  f9c2				   BugMovement
     93  f9c2
     94  f9c2				   .bug_movement_random
     95  f9c2		       20 13 f0 	      jsr	Random
     96  f9c5		       29 03		      and	#%00000011
     97  f9c7		       85 84		      sta	Temp+1
     98  f9c9
     99  f9c9				   .bug_movement_load
    100  f9c9							; Load x and y values
    101  f9c9		       a6 83		      ldx	Temp+0
    102  f9cb		       b5 b1		      lda	BugPosX,x
    103  f9cd		       b4 b3		      ldy	BugPosY,x
    104  f9cf		       aa		      tax
    105  f9d0
    106  f9d0				   .bug_movement_x
    107  f9d0							; Alter X Position
    108  f9d0		       a5 84		      lda	Temp+1
    109  f9d2		       29 01		      and	#%00000001
    110  f9d4
    111  f9d4				   .bug_movement_x_left
    112  f9d4		       c9 01		      cmp	#1
    113  f9d6		       d0 05		      bne	.bug_movement_x_right
    114  f9d8					      REPEAT	#BUG_SPEED
    115  f9d8		       ca		      dex
    114  f9d8					      REPEND
    115  f9d9		       ca		      dex
    116  f9da					      REPEND
    117  f9da		       4c df f9 	      jmp	.bug_movement_y
    118  f9dd
    119  f9dd				   .bug_movement_x_right
    120  f9dd					      REPEAT	#BUG_SPEED
    121  f9dd		       e8		      inx
    120  f9dd					      REPEND
    121  f9de		       e8		      inx
    122  f9df					      REPEND
    123  f9df
    124  f9df				   .bug_movement_y
    125  f9df							; Alter Y Position
    126  f9df		       a5 84		      lda	Temp+1
    127  f9e1		       29 02		      and	#%00000010
    128  f9e3		       4a		      lsr
    129  f9e4
    130  f9e4				   .bug_movement_y_up
    131  f9e4		       c9 01		      cmp	#1
    132  f9e6		       d0 05		      bne	.bug_movement_y_down
    133  f9e8					      REPEAT	#BUG_SPEED
    134  f9e8		       c8		      iny
    133  f9e8					      REPEND
    134  f9e9		       c8		      iny
    135  f9ea					      REPEND
    136  f9ea		       4c ef f9 	      jmp	.bug_movement_boundary
    137  f9ed
    138  f9ed				   .bug_movement_y_down
    139  f9ed					      REPEAT	#BUG_SPEED
    140  f9ed		       88		      dey
    139  f9ed					      REPEND
    140  f9ee		       88		      dey
    141  f9ef					      REPEND
    142  f9ef
    143  f9ef				   .bug_movement_boundary
    144  f9ef
    145  f9ef				   .bug_movement_boundary_left
    146  f9ef		       e0 08		      cpx	#BUG_BOUNDARY
    147  f9f1		       b0 05		      bcs	.bug_movement_boundary_right
    148  f9f3		       a2 08		      ldx	#BUG_BOUNDARY
    149  f9f5		       4c fe f9 	      jmp	.bug_movement_boundary_top
    150  f9f8
    151  f9f8				   .bug_movement_boundary_right
    152  f9f8		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    153  f9fa		       90 02		      bcc	.bug_movement_boundary_top
    154  f9fc		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    155  f9fe
    156  f9fe				   .bug_movement_boundary_top
    157  f9fe		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    158  fa00		       b0 05		      bcs	.bug_movement_boundary_bottom
    159  fa02		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    160  fa04		       4c 0d fa 	      jmp	.bug_movement_store
    161  fa07
    162  fa07				   .bug_movement_boundary_bottom
    163  fa07		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    164  fa09		       90 02		      bcc	.bug_movement_store
    165  fa0b		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    166  fa0d
    167  fa0d				   .bug_movement_store
    168  fa0d		       8a		      txa
    169  fa0e		       a6 83		      ldx	Temp+0
    170  fa10		       95 b1		      sta	BugPosX,x
    171  fa12		       94 b3		      sty	BugPosY,x
    172  fa14
    173  fa14				   .bug_movement_return
    174  fa14		       60		      rts
    175  fa15
    176  fa15				   BugCollision
    177  fa15
    178  fa15		       e0 01		      cpx	#1
    179  fa17		       f0 05		      beq	.bug_collision_m1
    180  fa19
    181  fa19				   .bug_collision_m0
    182  fa19							; Collision for M0 (V set)
    183  fa19		       24 00		      bit	CXM0P
    184  fa1b		       70 06		      bvs	.bug_collision_active
    185  fa1d		       60		      rts
    186  fa1e
    187  fa1e				   .bug_collision_m1
    188  fa1e							; Collision for M1 (N set)
    189  fa1e		       24 01		      bit	CXM1P
    190  fa20		       30 01		      bmi	.bug_collision_active
    191  fa22		       60		      rts
    192  fa23
    193  fa23				   .bug_collision_active
    194  fa23
    195  fa23							; Reduce players score
    196  fa23		       c6 92		      dec	ScoreValue
    197  fa25
    198  fa25							; Play sound
    199  fa25		       20 a6 fa 	      jsr	BugColSample
    200  fa28
    201  fa28		       60		      rts
    202  fa29
    203  fa29				   BugStunCollision
    204  fa29
    205  fa29		       e0 01		      cpx	#1
    206  fa2b		       f0 05		      beq	.bug_stun_collision_m1
    207  fa2d
    208  fa2d				   .bug_stun_collision_m0
    209  fa2d							; Collision for M0 (V set)
    210  fa2d		       24 00		      bit	CXM0P
    211  fa2f		       70 06		      bvs	.bug_stun_collision_active
    212  fa31		       60		      rts
    213  fa32
    214  fa32				   .bug_stun_collision_m1
    215  fa32							; Collision for M1 (N set)
    216  fa32		       24 01		      bit	CXM1P
    217  fa34		       30 01		      bmi	.bug_stun_collision_active
    218  fa36		       60		      rts
    219  fa37
    220  fa37				   .bug_stun_collision_active
    221  fa37							; Add points to score
    222  fa37		       18		      clc
    223  fa38		       a5 93		      lda	ScoreValue+1
    224  fa3a		       69 04		      adc	#BUG_POINTS
    225  fa3c		       85 93		      sta	ScoreValue+1
    226  fa3e
    227  fa3e							; Reset bug
    228  fa3e		       20 8c f9 	      jsr	BugReset
    229  fa41
    230  fa41							; Play sample
    231  fa41		       20 95 fa 	      jsr	BugSample
    232  fa44
    233  fa44		       60		      rts
    234  fa45
    235  fa45							; Horizontal Positioning
    236  fa45
    237  fa45				   BugPosition
    238  fa45
    239  fa45		       a2 02		      ldx	#2
    240  fa47		       a5 b1		      lda	BugPosX+0
    241  fa49		       20 00 f0 	      jsr	PosObject
    242  fa4c
    243  fa4c		       a2 03		      ldx	#3
    244  fa4e		       a5 b2		      lda	BugPosX+1
    245  fa50		       20 00 f0 	      jsr	PosObject
    246  fa53
    247  fa53		       60		      rts
    248  fa54
    249  fa54							; Scanline Draw
    250  fa54
    251  fa54				   BugDrawStart
    252  fa54
    253  fa54		       a0 01		      ldy	#1
    254  fa56				   .bug_draw_start_loop
    255  fa56
    256  fa56							; Set missile 0 & 1 to be 8 clock size
    257  fa56		       b9 81 00 	      lda	NuSiz0,y
    258  fa59		       09 30		      ora	#%00110000
    259  fa5b		       99 81 00 	      sta	NuSiz0,y
    260  fa5e		       99 04 00 	      sta	NUSIZ0,y
    261  fa61
    262  fa61							; Setup half scanline positions
    263  fa61		       b9 b3 00 	      lda	BugPosY,y
    264  fa64		       4a		      lsr
    265  fa65		       99 b7 00 	      sta	BugDrawPosBottom,y
    266  fa68
    267  fa68		       69 04		      adc	#BUG_SIZE/2
    268  fa6a		       99 b9 00 	      sta	BugDrawPosTop,y
    269  fa6d
    270  fa6d		       88		      dey
    271  fa6e		       10 e6		      bpl	.bug_draw_start_loop
    272  fa70
    273  fa70		       60		      rts
    274  fa71
    275  fa71				   BugDraw
    276  fa71
    277  fa71							; Load half scanline
    278  fa71							;    lda Temp+1
    279  fa71
    280  fa71				   .bug_draw_0
    281  fa71		       a0 00		      ldy	#%00000000
    282  fa73
    283  fa73							; Check top and bottom y pos
    284  fa73		       c5 b9		      cmp	BugDrawPosTop+0
    285  fa75		       b0 06		      bcs	.bug_draw_0_off
    286  fa77
    287  fa77		       c5 b7		      cmp	BugDrawPosBottom+0
    288  fa79		       90 02		      bcc	.bug_draw_0_off
    289  fa7b
    290  fa7b				   .bug_draw_0_on
    291  fa7b		       a0 02		      ldy	#%00000010
    292  fa7d
    293  fa7d				   .bug_draw_0_off
    294  fa7d		       84 1d		      sty	ENAM0
    295  fa7f
    296  fa7f				   .bug_draw_1
    297  fa7f		       a0 00		      ldy	#%00000000
    298  fa81
    299  fa81							; Check top and bottom y pos
    300  fa81		       c5 ba		      cmp	BugDrawPosTop+1
    301  fa83		       b0 06		      bcs	.bug_draw_1_off
    302  fa85
    303  fa85		       c5 b8		      cmp	BugDrawPosBottom+1
    304  fa87		       90 02		      bcc	.bug_draw_1_off
    305  fa89
    306  fa89				   .bug_draw_1_on
    307  fa89		       a0 02		      ldy	#%00000010
    308  fa8b
    309  fa8b				   .bug_draw_1_off
    310  fa8b		       84 1e		      sty	ENAM1
    311  fa8d
    312  fa8d				   .bug_draw_return
    313  fa8d		       60		      rts
    314  fa8e
    315  fa8e				   BugClean
    316  fa8e		       a9 00		      lda	#0
    317  fa90		       85 1d		      sta	ENAM0
    318  fa92		       85 1e		      sta	ENAM1
    319  fa94		       60		      rts
    320  fa95
    321  fa95				   BugSample
    322  fa95		       a9 1e		      lda	#BUG_SAMPLE_LEN
    323  fa97		       85 91		      sta	SampleStep
    324  fa99		       a9 03		      lda	#BUG_SAMPLE_C
    325  fa9b		       85 16		      sta	AUDC1
    326  fa9d		       a9 14		      lda	#BUG_SAMPLE_F
    327  fa9f		       85 18		      sta	AUDF1
    328  faa1		       a9 04		      lda	#BUG_SAMPLE_V
    329  faa3		       85 1a		      sta	AUDV1
    330  faa5		       60		      rts
    331  faa6
    332  faa6				   BugColSample
    333  faa6		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    334  faa8		       85 91		      sta	SampleStep
    335  faaa		       a9 08		      lda	#BUG_COL_SAMPLE_C
    336  faac		       85 16		      sta	AUDC1
    337  faae		       a9 08		      lda	#BUG_COL_SAMPLE_F
    338  fab0		       85 18		      sta	AUDF1
    339  fab2		       a9 03		      lda	#BUG_COL_SAMPLE_V
    340  fab4		       85 1a		      sta	AUDV1
    341  fab6		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fab7					      include	"objects/swatter.asm"
      1  fab7							;==================
      2  fab7							; Swatter (player1)
      3  fab7							;==================
      4  fab7
      5  fab7							; Constants
      6  fab7
      7  fab7		       00 36	   SWATTER_COLOR =	#$36
      8  fab7		       00 30	   SWATTER_HOLD_COLOR =	#$30
      9  fab7		       00 0a	   SWATTER_SIZE =	10
     10  fab7		       00 0a	   SWATTER_SPRITE_SIZE =	10
     11  fab7
     12  fab7		       00 b4	   SWATTER_WAIT_TIME =	60*3	; 60 frames per second
     13  fab7		       00 3c	   SWATTER_HOLD_TIME =	60
     14  fab7		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     15  fab7
     16  fab7		       00 00	   SWATTER_STATE_WAIT =	0
     17  fab7		       00 01	   SWATTER_STATE_HOLD =	1
     18  fab7		       00 02	   SWATTER_STATE_ACTIVE =	2
     19  fab7
     20  fab7							; Initialization
     21  fab7
     22  fab7				   SwatterInit
     23  fab7
     24  fab7		       20 44 fb 	      jsr	SwatterReset
     25  faba
     26  faba		       60		      rts
     27  fabb
     28  fabb							; Frame Update
     29  fabb
     30  fabb				   SwatterUpdate
     31  fabb
     32  fabb				   .swatter_update_color
     33  fabb		       a5 bd		      lda	SwatterState
     34  fabd		       c9 01		      cmp	#SWATTER_STATE_HOLD
     35  fabf		       d0 05		      bne	.swatter_update_color_active
     36  fac1				   .swatter_update_color_hold
     37  fac1		       a9 30		      lda	#SWATTER_HOLD_COLOR
     38  fac3		       4c c8 fa 	      jmp	.swatter_update_color_set
     39  fac6				   .swatter_update_color_active
     40  fac6		       a9 36		      lda	#SWATTER_COLOR
     41  fac8				   .swatter_update_color_set
     42  fac8		       85 be		      sta	SwatterColor
     43  faca
     44  faca				   .swatter_update_state
     45  faca		       a6 8f		      ldx	FrameTimer+1
     46  facc		       e0 00		      cpx	#0
     47  face		       d0 1f		      bne	.swatter_update_return
     48  fad0
     49  fad0		       a4 bd		      ldy	SwatterState
     50  fad2		       c0 00		      cpy	#SWATTER_STATE_WAIT
     51  fad4		       f0 0a		      beq	.swatter_update_state_wait
     52  fad6		       c0 01		      cpy	#SWATTER_STATE_HOLD
     53  fad8		       f0 0d		      beq	.swatter_update_state_hold
     54  fada
     55  fada							; Else we're at the end of the active state
     56  fada		       20 44 fb 	      jsr	SwatterReset
     57  fadd		       4c ef fa 	      jmp	.swatter_update_return
     58  fae0
     59  fae0				   .swatter_update_state_wait
     60  fae0		       a9 01		      lda	#SWATTER_STATE_HOLD
     61  fae2		       a2 3c		      ldx	#SWATTER_HOLD_TIME
     62  fae4		       4c eb fa 	      jmp	.swatter_update_state_set
     63  fae7
     64  fae7				   .swatter_update_state_hold
     65  fae7		       a9 02		      lda	#SWATTER_STATE_ACTIVE
     66  fae9		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
     67  faeb
     68  faeb				   .swatter_update_state_set
     69  faeb		       85 bd		      sta	SwatterState
     70  faed		       86 8f		      stx	FrameTimer+1
     71  faef
     72  faef				   .swatter_update_return
     73  faef		       60		      rts
     74  faf0
     75  faf0				   SwatterPosition
     76  faf0
     77  faf0							; Set Position
     78  faf0		       a2 01		      ldx	#1	; Object (player1)
     79  faf2		       a5 bb		      lda	SwatterPos	; X Position
     80  faf4		       20 00 f0 	      jsr	PosObject
     81  faf7
     82  faf7		       60		      rts
     83  faf8
     84  faf8							; Scanline Draw
     85  faf8
     86  faf8				   SwatterDrawStart
     87  faf8
     88  faf8							; Set player 1 to be quad size
     89  faf8		       a5 82		      lda	NuSiz1
     90  fafa		       29 f8		      and	#%11111000
     91  fafc		       09 07		      ora	#%00000111
     92  fafe		       85 82		      sta	NuSiz1
     93  fb00		       85 05		      sta	NUSIZ1
     94  fb02
     95  fb02							; Set sprite color
     96  fb02		       a5 be		      lda	SwatterColor
     97  fb04		       85 07		      sta	COLUP1
     98  fb06
     99  fb06							; Note: Doesn't need vertical delay
    100  fb06
    101  fb06							; Calculate starting position
    102  fb06		       a5 bc		      lda	SwatterPos+1	; Y Position
    103  fb08		       4a		      lsr
    104  fb09		       18		      clc
    105  fb0a		       69 0a		      adc	#SWATTER_SIZE
    106  fb0c		       85 c0		      sta	SwatterDrawPos
    107  fb0e
    108  fb0e							; Initialize sprite index
    109  fb0e		       a9 00		      lda	#0
    110  fb10		       85 bf		      sta	SwatterIndex
    111  fb12
    112  fb12		       60		      rts
    113  fb13
    114  fb13				   SwatterDraw
    115  fb13
    116  fb13		       a5 bd		      lda	SwatterState
    117  fb15		       c9 00		      cmp	#SWATTER_STATE_WAIT
    118  fb17		       f0 25		      beq	.swatter_draw_return
    119  fb19
    120  fb19		       a4 bf		      ldy	SwatterIndex
    121  fb1b		       c0 14		      cpy	#(SWATTER_SPRITE_SIZE*2)
    122  fb1d		       f0 1c		      beq	.swatter_draw_blank	; At end of sprite
    123  fb1f		       b0 1d		      bcs	.swatter_draw_return	; Completed drawing sprite
    124  fb21		       c0 00		      cpy	#0
    125  fb23		       d0 06		      bne	.swatter_draw_line
    126  fb25
    127  fb25							; Use half scanline
    128  fb25		       a5 84		      lda	Temp+1
    129  fb27
    130  fb27		       e5 c0		      sbc	SwatterDrawPos
    131  fb29		       10 13		      bpl	.swatter_draw_return	; Not yet to draw sprite
    132  fb2b
    133  fb2b				   .swatter_draw_line
    134  fb2b		       98		      tya
    135  fb2c		       4a		      lsr
    136  fb2d		       b0 06		      bcs	.swatter_draw_skip
    137  fb2f		       a8		      tay
    138  fb30
    139  fb30		       b9 64 fb 	      lda	SwatterSprite,y
    140  fb33		       85 1c		      sta	GRP1
    141  fb35
    142  fb35				   .swatter_draw_skip
    143  fb35		       a4 bf		      ldy	SwatterIndex
    144  fb37		       c8		      iny
    145  fb38		       84 bf		      sty	SwatterIndex
    146  fb3a		       60		      rts		; Early return
    147  fb3b
    148  fb3b				   .swatter_draw_blank
    149  fb3b							;    lda #0
    150  fb3b							;    sta GRP1
    151  fb3b
    152  fb3b							; Push index to be one above
    153  fb3b		       c8		      iny
    154  fb3c		       84 bf		      sty	SwatterIndex
    155  fb3e
    156  fb3e				   .swatter_draw_return
    157  fb3e		       60		      rts
    158  fb3f
    159  fb3f				   SwatterClean
    160  fb3f
    161  fb3f							; Clear out Player1 sprite
    162  fb3f		       a9 00		      lda	#0
    163  fb41		       85 1c		      sta	GRP1
    164  fb43
    165  fb43		       60		      rts
    166  fb44
    167  fb44				   SwatterReset
    168  fb44							; Initialize Swatter State
    169  fb44		       a9 00		      lda	#SWATTER_STATE_WAIT
    170  fb46		       85 bd		      sta	SwatterState
    171  fb48
    172  fb48							; Set Wait Timer
    173  fb48		       20 13 f0 	      jsr	Random
    174  fb4b		       a5 85		      lda	Rand8
    175  fb4d		       29 3f		      and	#$3f
    176  fb4f		       18		      clc
    177  fb50		       69 b4		      adc	#SWATTER_WAIT_TIME
    178  fb52		       85 8f		      sta	FrameTimer+1
    179  fb54
    180  fb54							; Set Random Position
    181  fb54		       20 13 f0 	      jsr	Random
    182  fb57		       a5 85		      lda	Rand8	; X Position
    183  fb59		       29 7f		      and	#$7f
    184  fb5b		       85 bb		      sta	SwatterPos+0
    185  fb5d		       a5 86		      lda	Rand16	; Y Position
    186  fb5f		       29 7e		      and	#$7e	; Ensure that Y position is even
    187  fb61		       85 bc		      sta	SwatterPos+1
    188  fb63
    189  fb63		       60		      rts
    190  fb64
    191  fb64							; Swatter Sprites
------- FILE objects/swatter_sprite.asm LEVEL 4 PASS 2
      0  fb64					      include	"objects/swatter_sprite.asm"
      1  fb64				   SwatterSprite
      2  fb64
      3  fb64		       3c		      .BYTE.b	%00111100
      4  fb65		       6a		      .BYTE.b	%01101010
      5  fb66		       d5		      .BYTE.b	%11010101
      6  fb67		       ab		      .BYTE.b	%10101011
      7  fb68		       d5		      .BYTE.b	%11010101
      8  fb69		       ab		      .BYTE.b	%10101011
      9  fb6a		       56		      .BYTE.b	%01010110
     10  fb6b		       6a		      .BYTE.b	%01101010
     11  fb6c		       3c		      .BYTE.b	%00111100
     12  fb6d		       18		      .BYTE.b	%00011000
------- FILE objects/swatter.asm
------- FILE game.asm
     21  fb6e
     22  fb6e							; Initialization
     23  fb6e
     24  fb6e				   GameInit
     25  fb6e
     26  fb6e							; Setup logic and kernel
      0  fb6e					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fb6e				   .POINTER   SET	VBlankPtr
      2  fb6e				   .ADDRESS   SET	GameVerticalBlank
      3  fb6e
      4  fb6e		       a9 bc		      LDA	#<.ADDRESS
      5  fb70		       85 87		      STA	.POINTER
      6  fb72		       a9 fb		      LDA	#>.ADDRESS
      7  fb74		       85 88		      STA	.POINTER+1
      8  fb76
      0  fb76					      SET_POINTER	KernelPtr, GameKernel
      1  fb76				   .POINTER   SET	KernelPtr
      2  fb76				   .ADDRESS   SET	GameKernel
      3  fb76
      4  fb76		       a9 3f		      LDA	#<.ADDRESS
      5  fb78		       85 89		      STA	.POINTER
      6  fb7a		       a9 fc		      LDA	#>.ADDRESS
      7  fb7c		       85 8a		      STA	.POINTER+1
      8  fb7e
      0  fb7e					      SET_POINTER	OverScanPtr, GameOverScan
      1  fb7e				   .POINTER   SET	OverScanPtr
      2  fb7e				   .ADDRESS   SET	GameOverScan
      3  fb7e
      4  fb7e		       a9 e3		      LDA	#<.ADDRESS
      5  fb80		       85 8b		      STA	.POINTER
      6  fb82		       a9 fb		      LDA	#>.ADDRESS
      7  fb84		       85 8c		      STA	.POINTER+1
      8  fb86
     30  fb86
     31  fb86							; Mute Audio
     32  fb86		       a9 00		      lda	#0
     33  fb88		       85 15		      sta	AUDC0
     34  fb8a		       85 19		      sta	AUDV0
     35  fb8c		       85 17		      sta	AUDF0
     36  fb8e		       85 16		      sta	AUDC1
     37  fb90		       85 1a		      sta	AUDV1
     38  fb92		       85 18		      sta	AUDF1
     39  fb94		       85 91		      sta	SampleStep
     40  fb96
     41  fb96							; Load Audio Settings
     42  fb96		       a9 04		      lda	#GAME_AUDIO_VOLUME
     43  fb98		       85 19		      sta	AUDV0
     44  fb9a
     45  fb9a							; Make it so that we play the first note immediately
     46  fb9a		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     47  fb9c		       85 90		      sta	AudioStep
     48  fb9e		       a9 02		      lda	#2
     49  fba0		       85 8e		      sta	FrameTimer
     50  fba2
     51  fba2							; Reset NuSiz
     52  fba2		       a9 00		      lda	#0
     53  fba4		       85 81		      sta	NuSiz0
     54  fba6		       85 04		      sta	NUSIZ0
     55  fba8		       85 82		      sta	NuSiz1
     56  fbaa		       85 05		      sta	NUSIZ1
     57  fbac
     58  fbac							; Initialize Objects
     59  fbac		       20 d3 f4 	      jsr	ScoreInit
     60  fbaf		       20 2f f6 	      jsr	SpiderInit
     61  fbb2		       20 cd f7 	      jsr	LineInit
     62  fbb5		       20 83 f9 	      jsr	BugInit
     63  fbb8		       20 b7 fa 	      jsr	SwatterInit
     64  fbbb
     65  fbbb		       60		      rts
     66  fbbc
     67  fbbc				   GameVerticalBlank
     68  fbbc
     69  fbbc							; Refresh random values
     70  fbbc		       20 13 f0 	      jsr	Random
     71  fbbf
     72  fbbf							; Update Objects
     73  fbbf		       20 40 f6 	      jsr	SpiderUpdate
     74  fbc2		       20 e2 f7 	      jsr	LineUpdate
     75  fbc5		       20 a4 f9 	      jsr	BugUpdate
     76  fbc8		       20 bb fa 	      jsr	SwatterUpdate
     77  fbcb		       20 dc f4 	      jsr	ScoreUpdate
     78  fbce
     79  fbce							; Reset Collisions
     80  fbce		       85 2c		      sta	CXCLR
     81  fbd0
     82  fbd0							; Clear horizontal movement
     83  fbd0		       85 2b		      sta	HMCLR
     84  fbd2
     85  fbd2							; Update Positions
     86  fbd2		       20 4b f7 	      jsr	SpiderPosition
     87  fbd5		       20 00 f9 	      jsr	LinePosition
     88  fbd8		       20 45 fa 	      jsr	BugPosition
     89  fbdb		       20 f0 fa 	      jsr	SwatterPosition
     90  fbde
     91  fbde							; Set final x positions
     92  fbde		       85 02		      sta	WSYNC
     93  fbe0		       85 2a		      sta	HMOVE
     94  fbe2
     95  fbe2		       60		      rts
     96  fbe3
     97  fbe3				   GameOverScan
     98  fbe3
     99  fbe3							; Audio Routines
    100  fbe3		       20 01 fc 	      jsr	GameAudio
    101  fbe6		       20 ed fb 	      jsr	GameSample
    102  fbe9
    103  fbe9							; State Routines
    104  fbe9		       20 35 fc 	      jsr	GameDeath
    105  fbec
    106  fbec		       60		      rts
    107  fbed
    108  fbed				   GameSample
    109  fbed
    110  fbed		       a6 91		      ldx	SampleStep
    111  fbef		       e0 00		      cpx	#0
    112  fbf1		       f0 0b		      beq	.game_sample_return
    113  fbf3
    114  fbf3		       ca		      dex
    115  fbf4		       d0 08		      bne	.game_sample_return
    116  fbf6
    117  fbf6				   .game_sample_mute
    118  fbf6		       a9 00		      lda	#0
    119  fbf8		       85 1a		      sta	AUDV1
    120  fbfa		       85 18		      sta	AUDF1
    121  fbfc		       85 16		      sta	AUDC1
    122  fbfe
    123  fbfe				   .game_sample_return
    124  fbfe		       86 91		      stx	SampleStep
    125  fc00		       60		      rts
    126  fc01
    127  fc01				   GameAudio
    128  fc01
    129  fc01		       a6 8e		      ldx	FrameTimer
    130  fc03		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    131  fc05		       f0 25		      beq	.game_audio_mute_note
    132  fc07		       e0 00		      cpx	#0
    133  fc09		       d0 29		      bne	.game_audio_return
    134  fc0b
    135  fc0b							; Reset Timer
    136  fc0b		       a2 09		      ldx	#GAME_AUDIO_STEP
    137  fc0d		       86 8e		      stx	FrameTimer
    138  fc0f
    139  fc0f				   .game_audio_play
    140  fc0f
    141  fc0f							; Increment melody position
    142  fc0f		       a4 90		      ldy	AudioStep
    143  fc11		       c8		      iny
    144  fc12
    145  fc12		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    146  fc14		       d0 02		      bne	.game_audio_play_note
    147  fc16
    148  fc16							; Loop our audio step
    149  fc16		       a0 00		      ldy	#0
    150  fc18
    151  fc18				   .game_audio_play_note
    152  fc18
    153  fc18							; Save current position
    154  fc18		       84 90		      sty	AudioStep
    155  fc1a
    156  fc1a							; Melody Line
    157  fc1a		       b9 a9 fc 	      lda	GameAudio0,y
    158  fc1d		       c9 ff		      cmp	#$FF
    159  fc1f		       f0 0b		      beq	.game_audio_mute_note
    160  fc21		       85 17		      sta	AUDF0
    161  fc23		       a9 06		      lda	#GAME_AUDIO_TONE
    162  fc25		       85 15		      sta	AUDC0
    163  fc27		       a9 04		      lda	#GAME_AUDIO_VOLUME
    164  fc29		       85 19		      sta	AUDV0
    165  fc2b
    166  fc2b		       60		      rts
    167  fc2c
    168  fc2c				   .game_audio_mute_note
    169  fc2c
    170  fc2c		       a9 00		      lda	#0
    171  fc2e		       85 17		      sta	AUDF0
    172  fc30		       85 15		      sta	AUDC0
    173  fc32		       85 19		      sta	AUDV0
    174  fc34
    175  fc34				   .game_audio_return
    176  fc34		       60		      rts
    177  fc35
    178  fc35				   GameDeath
    179  fc35		       a5 92		      lda	ScoreValue+0
    180  fc37		       c9 00		      cmp	#0
    181  fc39		       d0 03		      bne	.game_death_return
    182  fc3b
    183  fc3b							; Show Game Over Screen
    184  fc3b		       20 c9 fc 	      jsr	OverInit
    185  fc3e
    186  fc3e				   .game_death_return
    187  fc3e		       60		      rts
    188  fc3f
    189  fc3f				   GameKernel
    190  fc3f
    191  fc3f							; Turn on display
    192  fc3f		       a9 00		      lda	#0
    193  fc41		       85 01		      sta	VBLANK
    194  fc43
    195  fc43				   .game_kernel_score
    196  fc43
    197  fc43							; Draw Score on top first
    198  fc43		       20 fc f4 	      jsr	ScoreDraw
    199  fc46
    200  fc46				   .game_kernel_objects_start
    201  fc46
    202  fc46							; Setup Drawing Objects
    203  fc46		       20 bc f5 	      jsr	WebDrawStart
    204  fc49		       20 53 f7 	      jsr	SpiderDrawStart
    205  fc4c		       20 f8 fa 	      jsr	SwatterDrawStart
    206  fc4f		       20 08 f9 	      jsr	LineDrawStart
    207  fc52		       20 54 fa 	      jsr	BugDrawStart
    208  fc55
    209  fc55							; Start Scanline Counter
    210  fc55		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    211  fc57							; The extra 5 is for processing overflow
    212  fc57
    213  fc57							; Half scanline counter in Temp+1
    214  fc57		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    215  fc59		       85 84		      sta	Temp+1
    216  fc5b
    217  fc5b				   .game_kernel_objects
    218  fc5b
    219  fc5b							; Draw Objects in order
    220  fc5b
    221  fc5b							;    jsr LineDraw
    222  fc5b							;    jsr BugDraw
    223  fc5b		       20 d7 f5 	      jsr	WebDraw	; Every 6 lines
    224  fc5e
    225  fc5e		       85 02		      sta	WSYNC
    226  fc60		       ca		      dex
    227  fc61		       f0 34		      beq	.game_kernel_clean
    228  fc63
    229  fc63							;    jsr SpiderDraw ; Every odd scanline
    230  fc63		       20 13 fb 	      jsr	SwatterDraw
    231  fc66
    232  fc66		       85 02		      sta	WSYNC
    233  fc68		       c6 84		      dec	Temp+1
    234  fc6a		       ca		      dex
    235  fc6b		       f0 2a		      beq	.game_kernel_clean
    236  fc6d
    237  fc6d		       a5 84		      lda	Temp+1
    238  fc6f		       20 28 f9 	      jsr	LineDraw
    239  fc72		       20 71 fa 	      jsr	BugDraw
    240  fc75
    241  fc75							;    sta WSYNC
    242  fc75		       ca		      dex
    243  fc76		       f0 1f		      beq	.game_kernel_clean
    244  fc78
    245  fc78							;    jsr SpiderDraw
    246  fc78		       20 13 fb 	      jsr	SwatterDraw
    247  fc7b
    248  fc7b		       85 02		      sta	WSYNC
    249  fc7d		       c6 84		      dec	Temp+1
    250  fc7f		       ca		      dex
    251  fc80		       f0 15		      beq	.game_kernel_clean
    252  fc82
    253  fc82		       a5 84		      lda	Temp+1
    254  fc84		       20 28 f9 	      jsr	LineDraw
    255  fc87		       20 71 fa 	      jsr	BugDraw
    256  fc8a
    257  fc8a							;    sta WSYNC
    258  fc8a		       ca		      dex
    259  fc8b		       f0 0a		      beq	.game_kernel_clean
    260  fc8d
    261  fc8d							;    jsr SpiderDraw
    262  fc8d		       20 13 fb 	      jsr	SwatterDraw
    263  fc90
    264  fc90		       85 02		      sta	WSYNC
    265  fc92		       c6 84		      dec	Temp+1
    266  fc94		       ca		      dex
    267  fc95		       d0 c4		      bne	.game_kernel_objects
    268  fc97
    269  fc97				   .game_kernel_clean
    270  fc97
    271  fc97		       20 f9 f5 	      jsr	WebClean
    272  fc9a		       20 a0 f7 	      jsr	SpiderClean
    273  fc9d		       20 3b f9 	      jsr	LineClean
    274  fca0		       20 8e fa 	      jsr	BugClean
    275  fca3		       20 3f fb 	      jsr	SwatterClean
    276  fca6
    277  fca6		       85 02		      sta	WSYNC
    278  fca8
    279  fca8				   .game_kernel_return
    280  fca8		       60		      rts
    281  fca9
    282  fca9				   GameAudio0
    283  fca9		       0d		      .byte.b	#13	; D
    284  fcaa		       ff		      .byte.b	#$FF
    285  fcab		       0f		      .byte.b	#15	; B
    286  fcac		       ff		      .byte.b	#$FF
    287  fcad		       0d		      .byte.b	#13	; D
    288  fcae		       ff		      .byte.b	#$FF
    289  fcaf		       0f		      .byte.b	#15	; B
    290  fcb0		       ff		      .byte.b	#$FF
    291  fcb1		       0d		      .byte.b	#13	; D
    292  fcb2		       0d		      .byte.b	#13	; D
    293  fcb3		       0f		      .byte.b	#15	; B
    294  fcb4		       ff		      .byte.b	#$FF
    295  fcb5		       0c		      .byte.b	#12	; D#
    296  fcb6		       ff		      .byte.b	#$FF
    297  fcb7		       0f		      .byte.b	#15	; B
    298  fcb8		       ff		      .byte.b	#$FF
    299  fcb9		       0b		      .byte.b	#11	; E
    300  fcba		       ff		      .byte.b	#$FF
    301  fcbb		       0e		      .byte.b	#14	; C#
    302  fcbc		       ff		      .byte.b	#$FF
    303  fcbd		       0b		      .byte.b	#11
    304  fcbe		       ff		      .byte.b	#$FF
    305  fcbf		       0e		      .byte.b	#14
    306  fcc0		       ff		      .byte.b	#$FF
    307  fcc1		       0b		      .byte.b	#11
    308  fcc2		       0b		      .byte.b	#11
    309  fcc3		       0e		      .byte.b	#14
    310  fcc4		       ff		      .byte.b	#$FF
    311  fcc5		       0b		      .byte.b	#11
    312  fcc6		       ff		      .byte.b	#$FF
    313  fcc7		       0e		      .byte.b	#14
    314  fcc8		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fcc9					      include	"over.asm"
      1  fcc9							;================
      2  fcc9							; Constants
      3  fcc9							;================
      4  fcc9
      5  fcc9		       00 dc	   OVER_FRAMES =	220
      6  fcc9
      7  fcc9		       00 00	   OVER_BG_COLOR =	#$00
      8  fcc9		       00 44	   OVER_FG_COLOR =	#$44
      9  fcc9
     10  fcc9		       00 07	   OVER_AUDIO_TONE =	7
     11  fcc9		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fcc9		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fcc9		       00 10	   OVER_AUDIO_STEP =	16
     14  fcc9
     15  fcc9		       00 09	   OVER_IMAGE_SIZE =	9
     16  fcc9		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fcc9		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fcc9		       00 35	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fcc9
     20  fcc9				   OverInit
     21  fcc9
     22  fcc9							; Setup logic and kernel
      0  fcc9					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fcc9				   .POINTER   SET	VBlankPtr
      2  fcc9				   .ADDRESS   SET	OverVerticalBlank
      3  fcc9
      4  fcc9		       a9 0b		      LDA	#<.ADDRESS
      5  fccb		       85 87		      STA	.POINTER
      6  fccd		       a9 fd		      LDA	#>.ADDRESS
      7  fccf		       85 88		      STA	.POINTER+1
      8  fcd1
      0  fcd1					      SET_POINTER	KernelPtr, OverKernel
      1  fcd1				   .POINTER   SET	KernelPtr
      2  fcd1				   .ADDRESS   SET	OverKernel
      3  fcd1
      4  fcd1		       a9 49		      LDA	#<.ADDRESS
      5  fcd3		       85 89		      STA	.POINTER
      6  fcd5		       a9 fd		      LDA	#>.ADDRESS
      7  fcd7		       85 8a		      STA	.POINTER+1
      8  fcd9
      0  fcd9					      SET_POINTER	OverScanPtr, OverOverScan
      1  fcd9				   .POINTER   SET	OverScanPtr
      2  fcd9				   .ADDRESS   SET	OverOverScan
      3  fcd9
      4  fcd9		       a9 0f		      LDA	#<.ADDRESS
      5  fcdb		       85 8b		      STA	.POINTER
      6  fcdd		       a9 fd		      LDA	#>.ADDRESS
      7  fcdf		       85 8c		      STA	.POINTER+1
      8  fce1
     26  fce1
     27  fce1							; Load Colors
     28  fce1		       a9 00		      lda	#OVER_BG_COLOR
     29  fce3		       85 09		      sta	COLUBK
     30  fce5		       a9 44		      lda	#OVER_FG_COLOR
     31  fce7		       85 08		      sta	COLUPF
     32  fce9
     33  fce9							; Load audio settings
     34  fce9		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fceb		       85 15		      sta	AUDC0
     36  fced		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fcef		       85 19		      sta	AUDV0
     38  fcf1		       a9 00		      lda	#0
     39  fcf3		       85 16		      sta	AUDC1
     40  fcf5		       85 1a		      sta	AUDV1
     41  fcf7		       a9 00		      lda	#0
     42  fcf9		       85 90		      sta	AudioStep
     43  fcfb
     44  fcfb							; Play first note
     45  fcfb		       ad 9b fd 	      lda	OverAudio0,AudioStep
     46  fcfe		       85 17		      sta	AUDF0
     47  fd00
     48  fd00							; Setup frame counters
     49  fd00		       a9 00		      lda	#0
     50  fd02		       85 8d		      sta	Frame
     51  fd04		       a9 10		      lda	#OVER_AUDIO_STEP
     52  fd06		       85 8e		      sta	FrameTimer
     53  fd08		       85 84		      sta	Temp+1
     54  fd0a
     55  fd0a		       60		      rts
     56  fd0b
     57  fd0b				   OverVerticalBlank
     58  fd0b		       20 dc f4 	      jsr	ScoreUpdate
     59  fd0e		       60		      rts
     60  fd0f
     61  fd0f				   OverOverScan
     62  fd0f		       20 16 fd 	      jsr	OverAudio
     63  fd12		       20 3f fd 	      jsr	OverState
     64  fd15		       60		      rts
     65  fd16
     66  fd16				   OverAudio
     67  fd16
     68  fd16		       a6 8e		      ldx	FrameTimer
     69  fd18		       e0 00		      cpx	#0
     70  fd1a		       d0 22		      bne	.over_audio_return
     71  fd1c
     72  fd1c							; Reset Timer
     73  fd1c		       a6 84		      ldx	Temp+1
     74  fd1e					      REPEAT	3
     75  fd1e		       e8		      inx
     74  fd1e					      REPEND
     75  fd1f		       e8		      inx
     74  fd1f					      REPEND
     75  fd20		       e8		      inx
     76  fd21					      REPEND
     77  fd21		       86 8e		      stx	FrameTimer
     78  fd23		       86 84		      stx	Temp+1
     79  fd25
     80  fd25				   .over_audio_play
     81  fd25
     82  fd25							; Increment melody position
     83  fd25		       a4 90		      ldy	AudioStep
     84  fd27		       c8		      iny
     85  fd28
     86  fd28		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  fd2a		       f0 0c		      beq	.over_audio_mute_note
     88  fd2c
     89  fd2c				   .over_audio_play_note
     90  fd2c
     91  fd2c							; Save current position
     92  fd2c		       84 90		      sty	AudioStep
     93  fd2e
     94  fd2e							; Melody Line
     95  fd2e		       b9 9b fd 	      lda	OverAudio0,y
     96  fd31		       85 17		      sta	AUDF0
     97  fd33		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  fd35		       85 19		      sta	AUDV0
     99  fd37
    100  fd37		       60		      rts
    101  fd38
    102  fd38				   .over_audio_mute_note
    103  fd38		       a9 00		      lda	#0
    104  fd3a		       85 17		      sta	AUDF0
    105  fd3c		       85 19		      sta	AUDV0
    106  fd3e
    107  fd3e				   .over_audio_return
    108  fd3e		       60		      rts
    109  fd3f
    110  fd3f				   OverState
    111  fd3f		       a5 8d		      lda	Frame
    112  fd41		       c9 dc		      cmp	#OVER_FRAMES
    113  fd43		       d0 03		      bne	.over_state_return
    114  fd45
    115  fd45		       20 4c f2 	      jsr	TitleInit
    116  fd48
    117  fd48				   .over_state_return
    118  fd48		       60		      rts
    119  fd49
    120  fd49				   OverKernel
    121  fd49
    122  fd49							; Turn on display
    123  fd49		       a9 00		      lda	#0
    124  fd4b		       85 01		      sta	VBLANK
    125  fd4d
    126  fd4d				   .over_kernel_score
    127  fd4d
    128  fd4d							; Draw Score on top first (no update)
    129  fd4d		       20 fc f4 	      jsr	ScoreDraw
    130  fd50
    131  fd50				   .over_kernel_init
    132  fd50							; Playfield Control
    133  fd50		       a5 80		      lda	CtrlPf
    134  fd52		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  fd54		       09 01		      ora	#%00000001	; Set mirroring
    136  fd56		       85 80		      sta	CtrlPf
    137  fd58		       85 0a		      sta	CTRLPF
    138  fd5a
    139  fd5a				   .over_kernel_top_padding
    140  fd5a							; Top Padding
    141  fd5a		       20 79 fd 	      jsr	OverPadding
    142  fd5d
    143  fd5d				   .over_kernel_image
    144  fd5d		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  fd5f
    146  fd5f				   .over_kernel_image_next
    147  fd5f		       bd 92 fd 	      lda	OverImagePF2,x
    148  fd62		       85 0f		      sta	PF2
    149  fd64		       bd 89 fd 	      lda	OverImagePF1,x
    150  fd67		       85 0e		      sta	PF1
    151  fd69							;    lda OverImagePF0,x
    152  fd69							;    sta PF0
    153  fd69
    154  fd69		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  fd6b				   .over_kernel_image_loop
    156  fd6b		       85 02		      sta	WSYNC
    157  fd6d		       88		      dey
    158  fd6e		       d0 fb		      bne	.over_kernel_image_loop
    159  fd70
    160  fd70		       ca		      dex
    161  fd71		       10 ec		      bpl	.over_kernel_image_next
    162  fd73
    163  fd73				   .over_kernel_bottom_padding
    164  fd73							; Bottom Padding
    165  fd73		       20 79 fd 	      jsr	OverPadding
    166  fd76
    167  fd76				   .over_kernel_return
    168  fd76		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  fd78		       60		      rts
    170  fd79
    171  fd79				   OverPadding
    172  fd79		       a9 00		      lda	#0
    173  fd7b		       85 0d		      sta	PF0
    174  fd7d		       85 0e		      sta	PF1
    175  fd7f		       85 0f		      sta	PF2
    176  fd81
    177  fd81		       a2 35		      ldx	#OVER_IMAGE_PADDING
    178  fd83				   .over_padding_loop
    179  fd83		       85 02		      sta	WSYNC
    180  fd85		       ca		      dex
    181  fd86		       d0 fb		      bne	.over_padding_loop
    182  fd88
    183  fd88		       60		      rts
    184  fd89
    185  fd89				   OverAssets
    186  fd89
    187  fd89							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  fd89					      include	"over_image.asm"
      1  fd89							;OverImagePF0:
      2  fd89							;    .BYTE %00000000
      3  fd89							;    .BYTE %00000000
      4  fd89							;    .BYTE %00000000
      5  fd89							;    .BYTE %00000000
      6  fd89							;    .BYTE %00000000
      7  fd89							;    .BYTE %00000000
      8  fd89							;    .BYTE %00000000
      9  fd89							;    .BYTE %00000000
     10  fd89							;    .BYTE %00000000
     11  fd89
     12  fd89				   OverImagePF1
     13  fd89		       0c		      .BYTE.b	%00001100
     14  fd8a		       13		      .BYTE.b	%00010011
     15  fd8b		       20		      .BYTE.b	%00100000
     16  fd8c		       23		      .BYTE.b	%00100011
     17  fd8d		       24		      .BYTE.b	%00100100
     18  fd8e		       24		      .BYTE.b	%00100100
     19  fd8f		       12		      .BYTE.b	%00010010
     20  fd90		       10		      .BYTE.b	%00010000
     21  fd91		       08		      .BYTE.b	%00001000
     22  fd92
     23  fd92				   OverImagePF2
     24  fd92		       e0		      .BYTE.b	%11100000
     25  fd93		       18		      .BYTE.b	%00011000
     26  fd94		       05		      .BYTE.b	%00000101
     27  fd95		       52		      .BYTE.b	%01010010
     28  fd96		       23		      .BYTE.b	%00100011
     29  fd97		       52		      .BYTE.b	%01010010
     30  fd98		       04		      .BYTE.b	%00000100
     31  fd99		       18		      .BYTE.b	%00011000
     32  fd9a		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  fd9b
    190  fd9b				   OverAudio0
    191  fd9b
    192  fd9b		       0c		      .BYTE.b	#12	; D#2
    193  fd9c		       0d		      .BYTE.b	#13	; D2
    194  fd9d		       11		      .BYTE.b	#17	; A1
    195  fd9e		       16		      .BYTE.b	#22	; F1
    196  fd9f		       1a		      .BYTE.b	#26	; D1
    197  fda0		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    298  fda1
    299  fda1							;================
    300  fda1							; End of cart
    301  fda1							;================
    302  fda1
    303  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    304  fffa
    305  fffa				   InterruptVectors
    306  fffa
    307  fffa		       21 f0		      .word.w	InitSystem	; NMI
    308  fffc		       21 f0		      .word.w	InitSystem	; RESET
    309  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    310  10000
    311  10000					       END
