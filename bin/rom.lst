------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: September 5th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????
     39  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     40  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     41  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     42  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     43  10000 ????
     44  10000 ????						;================
     45  10000 ????						; Variables
     46  10000 ????						;================
     47  10000 ????
     48 U008e ????				      SEG.U	vars
     49 U0080					      org	$80
     50 U0080
     51 U0080		       00 00	   VBlankPtr  ds	2
     52 U0082		       00 00	   KernelPtr  ds	2
     53 U0084		       00 00	   OverScanPtr ds	2
     54 U0086
     55 U0086		       00	   Frame      ds	1
     56 U0087		       00	   FrameTimer ds	1
     57 U0088
     58 U0088		       00	   AudioStep  ds	1
     59 U0089
     60 U0089		       00	   ImageIndex ds	1
     61 U008a
     62 U008a		       00 00	   PlayerPtr  ds	2
     63 U008c		       00 00	   PlayerPosition ds	2
     64 U008e
     65  10000 ????				       SEG
     66  10000 ????
     67  f000					      ORG	$F000	; Start of cart area
     68  f000
     69  f000							;=======================================
     70  f000							; Global Kernel Subroutines
     71  f000							;=======================================
     72  f000
     73  f000							;=======================================
     74  f000							; PosObject
     75  f000							; ---------
     76  f000							; A - holds the X position of the object
     77  f000							; X - holds which object to position
     78  f000							;   0 = player0
     79  f000							;   1 = player1
     80  f000							;   2 = missile0
     81  f000							;   3 = missile1
     82  f000							;   4 = Ball
     83  f000							;=======================================
     84  f000
     85  f000				   PosObject
     86  f000		       38		      sec
     87  f001		       85 02		      sta	WSYNC
     88  f003				   .posobject_divide_loop
     89  f003		       e9 0f		      sbc	#15
     90  f005		       b0 fc		      bcs	.posobject_divide_loop
     91  f007		       49 07		      eor	#7
     92  f009					      REPEAT	4
     93  f009		       0a		      asl
     92  f009					      REPEND
     93  f00a		       0a		      asl
     92  f00a					      REPEND
     93  f00b		       0a		      asl
     92  f00b					      REPEND
     93  f00c		       0a		      asl
     94  f00d					      REPEND
     95  f00d		       9d 20 00 	      sta.wx	HMP0,x
     96  f010		       95 10		      sta	RESP0,x
     97  f012		       60		      rts
     98  f013
     99  f013				   InitSystem
    100  f013
    101  f013				   .init_clean
    102  f013							; Resets RAM, TIA registers, and CPU registers
      0  f013					      CLEAN_START
      1  f013		       78		      sei
      2  f014		       d8		      cld
      3  f015
      4  f015		       a2 00		      ldx	#0
      5  f017		       8a		      txa
      6  f018		       a8		      tay
      7  f019		       ca	   .CLEAR_STACK dex
      8  f01a		       9a		      txs
      9  f01b		       48		      pha
     10  f01c		       d0 fb		      bne	.CLEAR_STACK
     11  f01e
    104  f01e
    105  f01e				   .init_tia
    106  f01e							; Define default TIA register values
    107  f01e
    108  f01e							; Set background color
    109  f01e		       a9 00		      lda	#$00	; Black
    110  f020		       85 09		      sta	COLUBK
    111  f022
    112  f022							; Set the playfield and player color
    113  f022		       a9 0e		      lda	#$0E	; White
    114  f024		       85 08		      sta	COLUPF
    115  f026		       85 06		      sta	COLUP0
    116  f028		       85 07		      sta	COLUP1
    117  f02a
    118  f02a							; Playfield Control
    119  f02a		       a9 01		      lda	#%00000001	; 1 for mirroring
    120  f02c		       85 0a		      sta	CTRLPF
    121  f02e
    122  f02e							; Disable Game Elements
    123  f02e		       a9 00		      lda	#$00
    124  f030		       85 1f		      sta	ENABL	; Turn off ball
    125  f032		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    126  f034		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    127  f036		       85 1b		      sta	GRP0	; Turn off player 1
    128  f038		       85 1c		      sta	GRP1	; Turn off player 2
    129  f03a
    130  f03a							; Empty playfield
    131  f03a		       a9 00		      lda	#%00000000
    132  f03c		       85 0d		      sta	PF0
    133  f03e		       85 0e		      sta	PF1
    134  f040		       85 0f		      sta	PF2
    135  f042
    136  f042				   .init_game
    137  f042
    138  f042		       20 9c f0 	      jsr	LogoInit
    139  f045							;jsr GameInit
    140  f045
    141  f045							;=======================================
    142  f045							; Game Kernel
    143  f045							;=======================================
    144  f045
    145  f045				   Main
    146  f045
    147  f045		       20 54 f0 	      jsr	VerticalSync
    148  f048		       20 6b f0 	      jsr	VerticalBlank
    149  f04b		       20 7e f0 	      jsr	Kernel
    150  f04e		       20 85 f0 	      jsr	OverScan
    151  f051		       4c 45 f0 	      jmp	Main
    152  f054
    153  f054				   VerticalSync
    154  f054
    155  f054		       a9 00		      lda	#0
    156  f056		       85 01		      sta	VBLANK
    157  f058
    158  f058							; Turn on Vertical Sync signal and setup timer
    159  f058		       a9 02		      lda	#2
    160  f05a		       85 00		      sta	VSYNC
    161  f05c
    162  f05c							; Increment frame count and reduce frame counter
    163  f05c		       e6 86		      inc	Frame
    164  f05e		       c6 87		      dec	FrameTimer
    165  f060
    166  f060							; VSYNCH signal scanlines
    167  f060					      REPEAT	#KERNEL_VSYNC
    168  f060		       85 02		      sta	WSYNC
    167  f060					      REPEND
    168  f062		       85 02		      sta	WSYNC
    167  f062					      REPEND
    168  f064		       85 02		      sta	WSYNC
    169  f066					      REPEND
    170  f066
    171  f066							; Turn off Vertical Sync signal
    172  f066		       a9 00		      lda	#0
    173  f068		       85 00		      sta	VSYNC
    174  f06a
    175  f06a				   .vsync_return
    176  f06a		       60		      rts
    177  f06b
    178  f06b				   VerticalBlank
    179  f06b							; Setup Timer
    180  f06b		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    181  f06d		       8d 96 02 	      sta	TIM64T
    182  f070
    183  f070				   .vblank_logic
    184  f070							; Perform Game Logic
    185  f070							;jsr (VBlankPtr)
    186  f070		       20 7b f0 	      jsr	.vblank_logic_call_ptr
    187  f073
    188  f073				   .vblank_loop
    189  f073							; WSYNC until Timer is complete
    190  f073		       85 02		      sta	WSYNC
    191  f075		       ad 84 02 	      lda	INTIM
    192  f078		       d0 f9		      bne	.vblank_loop
    193  f07a
    194  f07a				   .vblank_return
    195  f07a		       60		      rts
    196  f07b
    197  f07b				   .vblank_logic_call_ptr
    198  f07b		       6c 80 00 	      jmp	(VBlankPtr)
    199  f07e
    200  f07e				   Kernel
    201  f07e
    202  f07e							; Perform Selected Kernel
    203  f07e							;jsr (KernelPtr)
    204  f07e		       20 82 f0 	      jsr	.kernel_call_ptr
    205  f081		       60		      rts
    206  f082
    207  f082				   .kernel_call_ptr
    208  f082		       6c 82 00 	      jmp	(KernelPtr)
    209  f085
    210  f085				   OverScan
    211  f085
    212  f085							; End of screen, enter blanking
    213  f085		       a9 42		      lda	#%01000010
    214  f087		       85 01		      sta	VBLANK
    215  f089
    216  f089							; Setup Timer
    217  f089		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    218  f08b		       8d 96 02 	      sta	TIM64T
    219  f08e
    220  f08e				   .overscan_logic
    221  f08e							; Perform OverScan Logic
    222  f08e							;jsr (OverScanPtr)
    223  f08e		       20 99 f0 	      jsr	.overscan_logic_call_ptr
    224  f091
    225  f091				   .overscan_loop
    226  f091							; WSYNC until Timer is complete
    227  f091		       85 02		      sta	WSYNC
    228  f093		       ad 84 02 	      lda	INTIM
    229  f096		       d0 f9		      bne	.overscan_loop
    230  f098
    231  f098				   .overscan_return
    232  f098		       60		      rts
    233  f099
    234  f099				   .overscan_logic_call_ptr
    235  f099		       6c 84 00 	      jmp	(OverScanPtr)
    236  f09c
    237  f09c							;================
    238  f09c							; State Code
    239  f09c							;================
    240  f09c
------- FILE logo.asm LEVEL 2 PASS 2
      0  f09c					      include	"logo.asm"
      1  f09c							;================
      2  f09c							; Constants
      3  f09c							;================
      4  f09c
      5  f09c		       00 b4	   LOGO_FRAMES =	180
      6  f09c
      7  f09c		       00 a2	   LOGO_BG_COLOR =	#$A2
      8  f09c		       00 5e	   LOGO_FG_COLOR =	#$5E
      9  f09c
     10  f09c		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f09c		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f09c		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f09c		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f09c		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f09c		       00 08	   LOGO_AUDIO_STEP =	8
     16  f09c
     17  f09c				   LogoInit
     18  f09c
     19  f09c							; Setup logic and kernel
      0  f09c					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f09c				   .POINTER   SET	VBlankPtr
      2  f09c				   .ADDRESS   SET	LogoVerticalBlank
      3  f09c
      4  f09c		       a9 e3		      LDA	#<.ADDRESS
      5  f09e		       85 80		      STA	.POINTER
      6  f0a0		       a9 f0		      LDA	#>.ADDRESS
      7  f0a2		       85 81		      STA	.POINTER+1
      8  f0a4
      0  f0a4					      SET_POINTER	KernelPtr, LogoKernel
      1  f0a4				   .POINTER   SET	KernelPtr
      2  f0a4				   .ADDRESS   SET	LogoKernel
      3  f0a4
      4  f0a4		       a9 27		      LDA	#<.ADDRESS
      5  f0a6		       85 82		      STA	.POINTER
      6  f0a8		       a9 f1		      LDA	#>.ADDRESS
      7  f0aa		       85 83		      STA	.POINTER+1
      8  f0ac
      0  f0ac					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0ac				   .POINTER   SET	OverScanPtr
      2  f0ac				   .ADDRESS   SET	LogoOverScan
      3  f0ac
      4  f0ac		       a9 e4		      LDA	#<.ADDRESS
      5  f0ae		       85 84		      STA	.POINTER
      6  f0b0		       a9 f0		      LDA	#>.ADDRESS
      7  f0b2		       85 85		      STA	.POINTER+1
      8  f0b4
     23  f0b4
     24  f0b4							; Load Colors
     25  f0b4		       a9 a2		      lda	#LOGO_BG_COLOR
     26  f0b6		       85 09		      sta	COLUBK
     27  f0b8		       a9 5e		      lda	#LOGO_FG_COLOR
     28  f0ba		       85 08		      sta	COLUPF
     29  f0bc
     30  f0bc							; Load audio settings
     31  f0bc		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     32  f0be		       85 15		      sta	AUDC0
     33  f0c0		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     34  f0c2		       85 19		      sta	AUDV0
     35  f0c4		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     36  f0c6		       85 16		      sta	AUDC1
     37  f0c8		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     38  f0ca		       85 1a		      sta	AUDV1
     39  f0cc		       a9 00		      lda	#0
     40  f0ce		       85 88		      sta	AudioStep
     41  f0d0
     42  f0d0							; Play first note
     43  f0d0		       ad ff f1 	      lda	LogoAudio0,AudioStep
     44  f0d3		       85 17		      sta	AUDF0
     45  f0d5		       ad 0b f2 	      lda	LogoAudio1,AudioStep
     46  f0d8		       85 18		      sta	AUDF1
     47  f0da
     48  f0da							; Setup frame counters
     49  f0da		       a9 00		      lda	#0
     50  f0dc		       85 86		      sta	Frame
     51  f0de		       a9 b4		      lda	#LOGO_FRAMES
     52  f0e0		       85 87		      sta	FrameTimer
     53  f0e2
     54  f0e2							; Setup Image Animation
     55  f0e2							;lda #KERNEL_IMAGE_SIZE
     56  f0e2							;sta ImageVisible
     57  f0e2
     58  f0e2		       60		      rts
     59  f0e3
     60  f0e3				   LogoVerticalBlank
     61  f0e3							;jsr LogoAnimation
     62  f0e3		       60		      rts
     63  f0e4
     64  f0e4				   LogoOverScan
     65  f0e4		       20 f2 f0 	      jsr	LogoAudio
     66  f0e7		       20 1d f1 	      jsr	LogoState
     67  f0ea		       60		      rts
     68  f0eb
     69  f0eb				   LogoAnimation
     70  f0eb		       a5 86		      lda	Frame
     71  f0ed		       29 03		      and	#%00000011	; Every 4 when bits are 00
     72  f0ef		       d0 00		      bne	.logo_animation_return
     73  f0f1
     74  f0f1							;ldx ImageVisible
     75  f0f1							;cpx #0
     76  f0f1							;beq .logo_animation_return
     77  f0f1
     78  f0f1							; Add another visible line
     79  f0f1							;dex
     80  f0f1							;stx ImageVisible
     81  f0f1
     82  f0f1				   .logo_animation_return
     83  f0f1		       60		      rts
     84  f0f2
     85  f0f2				   LogoAudio
     86  f0f2
     87  f0f2		       a5 86		      lda	Frame
     88  f0f4		       29 07		      and	#%00000111	; Every 8 when bits are 000
     89  f0f6		       d0 24		      bne	.logo_audio_return
     90  f0f8
     91  f0f8				   .logo_audio_play
     92  f0f8
     93  f0f8							; Check if we're at the end of the melody
     94  f0f8		       a4 88		      ldy	AudioStep
     95  f0fa		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
     96  f0fc		       f0 10		      beq	.logo_audio_mute
     97  f0fe
     98  f0fe				   .logo_audio_play_note
     99  f0fe							; Increment audio position
    100  f0fe		       c8		      iny
    101  f0ff		       84 88		      sty	AudioStep
    102  f101
    103  f101							; Logo note and play
    104  f101		       b9 ff f1 	      lda	LogoAudio0,y
    105  f104		       85 17		      sta	AUDF0
    106  f106		       b9 0b f2 	      lda	LogoAudio1,y
    107  f109		       85 18		      sta	AUDF1
    108  f10b		       4c 1c f1 	      jmp	.logo_audio_mute_skip
    109  f10e
    110  f10e				   .logo_audio_mute
    111  f10e
    112  f10e							; Mute audio
    113  f10e		       a9 00		      lda	#0
    114  f110		       85 15		      sta	AUDC0
    115  f112		       85 19		      sta	AUDV0
    116  f114		       85 17		      sta	AUDF0
    117  f116		       85 16		      sta	AUDC1
    118  f118		       85 1a		      sta	AUDV1
    119  f11a		       85 18		      sta	AUDF1
    120  f11c
    121  f11c				   .logo_audio_mute_skip
    122  f11c				   .logo_audio_return
    123  f11c		       60		      rts
    124  f11d
    125  f11d				   LogoState
    126  f11d		       a5 87		      lda	FrameTimer
    127  f11f		       c9 00		      cmp	#0
    128  f121		       d0 03		      bne	.logo_state_return
    129  f123
    130  f123		       20 17 f2 	      jsr	TitleInit
    131  f126
    132  f126				   .logo_state_return
    133  f126		       60		      rts
    134  f127
    135  f127				   LogoKernel
    136  f127
    137  f127							; Playfield Control
    138  f127		       a9 00		      lda	#%00000000	; No mirroring
    139  f129		       85 0a		      sta	CTRLPF
    140  f12b
    141  f12b							; Start Counters
    142  f12b		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    143  f12d		       a0 00		      ldy	#0	; Image Counter
    144  f12f
    145  f12f							; Turn on display
    146  f12f		       a9 00		      lda	#0
    147  f131		       85 01		      sta	VBLANK
    148  f133
    149  f133		       85 02		      sta	WSYNC
    150  f135
    151  f135				   .logo_kernel_image
    152  f135
    153  f135							; 76 machine cycles per scanline
    154  f135		       85 02		      sta	WSYNC
    155  f137
    156  f137				   .logo_kernel_image_load		; 66 cycles
    157  f137
    158  f137							; First half of image
    159  f137		       b9 6f f1 	      lda	LogoImage,y	; 5
    160  f13a		       85 0d		      sta	PF0	; 4
    161  f13c		       b9 70 f1 	      lda	LogoImage+1,y	; 5
    162  f13f		       85 0e		      sta	PF1	; 4
    163  f141		       b9 71 f1 	      lda	LogoImage+2,y	; 5
    164  f144		       85 0f		      sta	PF2	; 4
    165  f146
      0  f146					      sleep	6
      1  f146				   .CYCLES    SET	6
      2  f146
      3  f146				  -	      IF	.CYCLES < 2
      4  f146				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f146				  -	      ERR
      6  f146					      ENDIF
      7  f146
      8  f146				  -	      IF	.CYCLES & 1
      9  f146				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f146				  -	      nop	0
     11  f146				  -	      ELSE
     12  f146				  -	      bit	VSYNC
     13  f146				  -	      ENDIF
     14  f146				  -.CYCLES    SET	.CYCLES - 3
     15  f146					      ENDIF
     16  f146
     17  f146					      REPEAT	.CYCLES / 2
     18  f146		       ea		      nop
     17  f146					      REPEND
     18  f147		       ea		      nop
     17  f147					      REPEND
     18  f148		       ea		      nop
     19  f149					      REPEND
    167  f149
    168  f149							; Second half of image
    169  f149		       b9 72 f1 	      lda	LogoImage+3,y	; 5
    170  f14c		       85 0d		      sta	PF0	; 4
    171  f14e		       b9 73 f1 	      lda	LogoImage+4,y	; 5
    172  f151		       85 0e		      sta	PF1	; 4
    173  f153		       b9 74 f1 	      lda	LogoImage+5,y	; 5
    174  f156		       85 0f		      sta	PF2	; 4
    175  f158
    176  f158				   .logo_kernel_image_index		; 4 cycles
    177  f158
    178  f158		       ca		      dex		; 2
    179  f159		       d0 da		      bne	.logo_kernel_image	; 2
    180  f15b
    181  f15b				   .logo_kernel_image_index_next		; 6 cycles
    182  f15b
    183  f15b							; Restore scanline counter
    184  f15b		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    185  f15d
    186  f15d		       98		      tya		; 2
    187  f15e		       18		      clc		; 2
    188  f15f		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    189  f161		       a8		      tay		; 2
    190  f162		       c0 90		      cpy	#KERNEL_IMAGE_SIZE*KERNEL_IMAGE_FULL_DATA
    191  f164		       d0 cf		      bne	.logo_kernel_image	; 2
    192  f166
    193  f166				   .logo_kernel_image_clean
    194  f166
    195  f166							; Clear out playfield
    196  f166		       a9 00		      lda	#0
    197  f168		       85 0d		      sta	PF0
    198  f16a		       85 0e		      sta	PF1
    199  f16c		       85 0f		      sta	PF2
    200  f16e
    201  f16e				   .logo_kernel_image_return
    202  f16e		       60		      rts
    203  f16f
    204  f16f				   LogoAssets
    205  f16f
    206  f16f							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f16f					      include	"logo_image.asm"
      1  f16f				   LogoImage
      2  f16f
      3  f16f		       00		      .BYTE.b	%00000000
      4  f170		       00		      .BYTE.b	%00000000
      5  f171		       00		      .BYTE.b	%00000000
      6  f172		       00		      .BYTE.b	%00000000
      7  f173		       00		      .BYTE.b	%00000000
      8  f174		       00		      .BYTE.b	%00000000
      9  f175
     10  f175		       00		      .BYTE.b	%00000000
     11  f176		       00		      .BYTE.b	%00000000
     12  f177		       00		      .BYTE.b	%00000000
     13  f178		       00		      .BYTE.b	%00000000
     14  f179		       00		      .BYTE.b	%00000000
     15  f17a		       00		      .BYTE.b	%00000000
     16  f17b
     17  f17b		       00		      .BYTE.b	%00000000
     18  f17c		       00		      .BYTE.b	%00000000
     19  f17d		       00		      .BYTE.b	%00000000
     20  f17e		       00		      .BYTE.b	%00000000
     21  f17f		       00		      .BYTE.b	%00000000
     22  f180		       00		      .BYTE.b	%00000000
     23  f181
     24  f181		       00		      .BYTE.b	%00000000
     25  f182		       00		      .BYTE.b	%00000000
     26  f183		       00		      .BYTE.b	%00000000
     27  f184		       00		      .BYTE.b	%00000000
     28  f185		       00		      .BYTE.b	%00000000
     29  f186		       00		      .BYTE.b	%00000000
     30  f187
     31  f187		       00		      .BYTE.b	%00000000
     32  f188		       00		      .BYTE.b	%00000000
     33  f189		       00		      .BYTE.b	%00000000
     34  f18a		       00		      .BYTE.b	%00000000
     35  f18b		       00		      .BYTE.b	%00000000
     36  f18c		       00		      .BYTE.b	%00000000
     37  f18d
     38  f18d		       00		      .BYTE.b	%00000000
     39  f18e		       00		      .BYTE.b	%00000000
     40  f18f		       00		      .BYTE.b	%00000000
     41  f190		       00		      .BYTE.b	%00000000
     42  f191		       00		      .BYTE.b	%00000000
     43  f192		       00		      .BYTE.b	%00000000
     44  f193
     45  f193		       00		      .BYTE.b	%00000000
     46  f194		       00		      .BYTE.b	%00000000
     47  f195		       00		      .BYTE.b	%00000000
     48  f196		       00		      .BYTE.b	%00000000
     49  f197		       00		      .BYTE.b	%00000000
     50  f198		       00		      .BYTE.b	%00000000
     51  f199
     52  f199		       00		      .BYTE.b	%00000000
     53  f19a		       00		      .BYTE.b	%00000000
     54  f19b		       8c		      .BYTE.b	%10001100
     55  f19c		       c0		      .BYTE.b	%11000000
     56  f19d		       00		      .BYTE.b	%00000000
     57  f19e		       00		      .BYTE.b	%00000000
     58  f19f
     59  f19f		       00		      .BYTE.b	%00000000
     60  f1a0		       00		      .BYTE.b	%00000000
     61  f1a1		       54		      .BYTE.b	%01010100
     62  f1a2		       50		      .BYTE.b	%01010000
     63  f1a3		       80		      .BYTE.b	%10000000
     64  f1a4		       00		      .BYTE.b	%00000000
     65  f1a5
     66  f1a5		       00		      .BYTE.b	%00000000
     67  f1a6		       00		      .BYTE.b	%00000000
     68  f1a7		       54		      .BYTE.b	%01010100
     69  f1a8		       40		      .BYTE.b	%01000000
     70  f1a9		       80		      .BYTE.b	%10000000
     71  f1aa		       00		      .BYTE.b	%00000000
     72  f1ab
     73  f1ab		       00		      .BYTE.b	%00000000
     74  f1ac		       00		      .BYTE.b	%00000000
     75  f1ad		       54		      .BYTE.b	%01010100
     76  f1ae		       50		      .BYTE.b	%01010000
     77  f1af		       80		      .BYTE.b	%10000000
     78  f1b0		       00		      .BYTE.b	%00000000
     79  f1b1
     80  f1b1		       00		      .BYTE.b	%00000000
     81  f1b2		       00		      .BYTE.b	%00000000
     82  f1b3		       8c		      .BYTE.b	%10001100
     83  f1b4		       c0		      .BYTE.b	%11000000
     84  f1b5		       00		      .BYTE.b	%00000000
     85  f1b6		       00		      .BYTE.b	%00000000
     86  f1b7
     87  f1b7		       00		      .BYTE.b	%00000000
     88  f1b8		       00		      .BYTE.b	%00000000
     89  f1b9		       00		      .BYTE.b	%00000000
     90  f1ba		       00		      .BYTE.b	%00000000
     91  f1bb		       00		      .BYTE.b	%00000000
     92  f1bc		       00		      .BYTE.b	%00000000
     93  f1bd
     94  f1bd		       00		      .BYTE.b	%00000000
     95  f1be		       00		      .BYTE.b	%00000000
     96  f1bf		       10		      .BYTE.b	%00010000
     97  f1c0		       10		      .BYTE.b	%00010000
     98  f1c1		       80		      .BYTE.b	%10000000
     99  f1c2		       00		      .BYTE.b	%00000000
    100  f1c3
    101  f1c3		       00		      .BYTE.b	%00000000
    102  f1c4		       00		      .BYTE.b	%00000000
    103  f1c5		       a8		      .BYTE.b	%10101000
    104  f1c6		       a0		      .BYTE.b	%10100000
    105  f1c7		       00		      .BYTE.b	%00000000
    106  f1c8		       00		      .BYTE.b	%00000000
    107  f1c9
    108  f1c9		       00		      .BYTE.b	%00000000
    109  f1ca		       00		      .BYTE.b	%00000000
    110  f1cb		       44		      .BYTE.b	%01000100
    111  f1cc		       40		      .BYTE.b	%01000000
    112  f1cd		       00		      .BYTE.b	%00000000
    113  f1ce		       00		      .BYTE.b	%00000000
    114  f1cf
    115  f1cf		       00		      .BYTE.b	%00000000
    116  f1d0		       00		      .BYTE.b	%00000000
    117  f1d1		       00		      .BYTE.b	%00000000
    118  f1d2		       00		      .BYTE.b	%00000000
    119  f1d3		       00		      .BYTE.b	%00000000
    120  f1d4		       00		      .BYTE.b	%00000000
    121  f1d5
    122  f1d5		       00		      .BYTE.b	%00000000
    123  f1d6		       00		      .BYTE.b	%00000000
    124  f1d7		       00		      .BYTE.b	%00000000
    125  f1d8		       00		      .BYTE.b	%00000000
    126  f1d9		       00		      .BYTE.b	%00000000
    127  f1da		       00		      .BYTE.b	%00000000
    128  f1db
    129  f1db		       00		      .BYTE.b	%00000000
    130  f1dc		       00		      .BYTE.b	%00000000
    131  f1dd		       00		      .BYTE.b	%00000000
    132  f1de		       00		      .BYTE.b	%00000000
    133  f1df		       00		      .BYTE.b	%00000000
    134  f1e0		       00		      .BYTE.b	%00000000
    135  f1e1
    136  f1e1		       00		      .BYTE.b	%00000000
    137  f1e2		       00		      .BYTE.b	%00000000
    138  f1e3		       00		      .BYTE.b	%00000000
    139  f1e4		       00		      .BYTE.b	%00000000
    140  f1e5		       00		      .BYTE.b	%00000000
    141  f1e6		       00		      .BYTE.b	%00000000
    142  f1e7
    143  f1e7		       00		      .BYTE.b	%00000000
    144  f1e8		       00		      .BYTE.b	%00000000
    145  f1e9		       00		      .BYTE.b	%00000000
    146  f1ea		       00		      .BYTE.b	%00000000
    147  f1eb		       00		      .BYTE.b	%00000000
    148  f1ec		       00		      .BYTE.b	%00000000
    149  f1ed
    150  f1ed		       00		      .BYTE.b	%00000000
    151  f1ee		       00		      .BYTE.b	%00000000
    152  f1ef		       00		      .BYTE.b	%00000000
    153  f1f0		       00		      .BYTE.b	%00000000
    154  f1f1		       00		      .BYTE.b	%00000000
    155  f1f2		       00		      .BYTE.b	%00000000
    156  f1f3
    157  f1f3		       00		      .BYTE.b	%00000000
    158  f1f4		       00		      .BYTE.b	%00000000
    159  f1f5		       00		      .BYTE.b	%00000000
    160  f1f6		       00		      .BYTE.b	%00000000
    161  f1f7		       00		      .BYTE.b	%00000000
    162  f1f8		       00		      .BYTE.b	%00000000
    163  f1f9
    164  f1f9		       00		      .BYTE.b	%00000000
    165  f1fa		       00		      .BYTE.b	%00000000
    166  f1fb		       00		      .BYTE.b	%00000000
    167  f1fc		       00		      .BYTE.b	%00000000
    168  f1fd		       00		      .BYTE.b	%00000000
    169  f1fe		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    208  f1ff
    209  f1ff				   LogoAudio0
    210  f1ff
    211  f1ff		       1d		      .BYTE.b	#29	; C
    212  f200		       17		      .BYTE.b	#23	; E
    213  f201		       13		      .BYTE.b	#19	; G
    214  f202		       0f		      .BYTE.b	#15	; A
    215  f203		       17		      .BYTE.b	#23	; E
    216  f204		       13		      .BYTE.b	#19	; G
    217  f205		       0f		      .BYTE.b	#15	; B
    218  f206		       0e		      .BYTE.b	#14	; C
    219  f207		       0b		      .BYTE.b	#11	; E
    220  f208		       0b		      .BYTE.b	#11
    221  f209		       0b		      .BYTE.b	#11
    222  f20a		       0b		      .BYTE.b	#11
    223  f20b
    224  f20b				   LogoAudio1
    225  f20b
    226  f20b		       1f		      .BYTE.b	#31	; C
    227  f20c		       1f		      .BYTE.b	#31
    228  f20d		       1f		      .BYTE.b	#31
    229  f20e		       1f		      .BYTE.b	#31
    230  f20f		       19		      .BYTE.b	#25	; E
    231  f210		       19		      .BYTE.b	#25
    232  f211		       19		      .BYTE.b	#25
    233  f212		       19		      .BYTE.b	#25
    234  f213		       14		      .BYTE.b	#20	; G
    235  f214		       14		      .BYTE.b	#20
    236  f215		       14		      .BYTE.b	#20
    237  f216		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f217					      include	"title.asm"
      1  f217							;================
      2  f217							; Constants
      3  f217							;================
      4  f217
      5  f217		       00 08	   TITLE_LINE_SIZE =	8
      6  f217		       00 04	   TITLE_DATA_SIZE =	%00000100
      7  f217		       00 01	   TITLE_BORDER =	1
      8  f217		       00 04	   TITLE_PAD  =	4
      9  f217		       00 06	   TITLE_IMAGE =	6
     10  f217		       00 02	   TITLE_GAP  =	2
     11  f217
     12  f217		       00 70	   TITLE_BG_COLOR =	#$70
     13  f217		       00 7e	   TITLE_BD_COLOR =	#$7E
     14  f217		       00 0e	   TITLE_FG_COLOR =	#$0E
     15  f217
     16  f217		       00 04	   TITLE_AUDIO_0_TONE =	4
     17  f217		       00 04	   TITLE_AUDIO_0_VOLUME =	4
     18  f217		       00 07	   TITLE_AUDIO_1_VOLUME =	7
     19  f217		       00 10	   TITLE_AUDIO_LENGTH =	16
     20  f217		       00 09	   TITLE_AUDIO_STEP =	9
     21  f217
     22  f217				   TitleInit
     23  f217
     24  f217							; Setup logic and kernel
      0  f217					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f217				   .POINTER   SET	VBlankPtr
      2  f217				   .ADDRESS   SET	TitleVerticalBlank
      3  f217
      4  f217		       a9 4e		      LDA	#<.ADDRESS
      5  f219		       85 80		      STA	.POINTER
      6  f21b		       a9 f2		      LDA	#>.ADDRESS
      7  f21d		       85 81		      STA	.POINTER+1
      8  f21f
      0  f21f					      SET_POINTER	KernelPtr, TitleKernel
      1  f21f				   .POINTER   SET	KernelPtr
      2  f21f				   .ADDRESS   SET	TitleKernel
      3  f21f
      4  f21f		       a9 96		      LDA	#<.ADDRESS
      5  f221		       85 82		      STA	.POINTER
      6  f223		       a9 f2		      LDA	#>.ADDRESS
      7  f225		       85 83		      STA	.POINTER+1
      8  f227
      0  f227					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f227				   .POINTER   SET	OverScanPtr
      2  f227				   .ADDRESS   SET	TitleOverScan
      3  f227
      4  f227		       a9 4f		      LDA	#<.ADDRESS
      5  f229		       85 84		      STA	.POINTER
      6  f22b		       a9 f2		      LDA	#>.ADDRESS
      7  f22d		       85 85		      STA	.POINTER+1
      8  f22f
     28  f22f
     29  f22f							; Load Colors
     30  f22f		       a9 70		      lda	#TITLE_BG_COLOR
     31  f231		       85 09		      sta	COLUBK
     32  f233		       a9 0e		      lda	#TITLE_FG_COLOR
     33  f235		       85 08		      sta	COLUPF
     34  f237
     35  f237							; Load audio settings
     36  f237
     37  f237							; Melody Line
     38  f237		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     39  f239		       85 15		      sta	AUDC0
     40  f23b		       a9 04		      lda	#TITLE_AUDIO_0_VOLUME
     41  f23d		       85 19		      sta	AUDV0
     42  f23f
     43  f23f							; Drums and Bass
     44  f23f		       a9 00		      lda	#0
     45  f241		       85 16		      sta	AUDC1
     46  f243		       85 1a		      sta	AUDV1
     47  f245
     48  f245							; Make it so that we play the first note immediately
     49  f245		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     50  f247		       85 88		      sta	AudioStep
     51  f249		       a9 01		      lda	#1
     52  f24b		       85 87		      sta	FrameTimer
     53  f24d
     54  f24d		       60		      rts
     55  f24e
     56  f24e				   TitleVerticalBlank
     57  f24e		       60		      rts
     58  f24f
     59  f24f				   TitleOverScan
     60  f24f		       20 56 f2 	      jsr	TitleAudio
     61  f252		       20 8e f2 	      jsr	TitleState
     62  f255		       60		      rts
     63  f256
     64  f256				   TitleAudio
     65  f256
     66  f256		       a6 87		      ldx	FrameTimer
     67  f258		       e0 00		      cpx	#0
     68  f25a		       d0 31		      bne	.title_audio_return
     69  f25c
     70  f25c							; Reset Timer
     71  f25c		       a2 09		      ldx	#TITLE_AUDIO_STEP
     72  f25e		       86 87		      stx	FrameTimer
     73  f260
     74  f260				   .title_audio_play
     75  f260
     76  f260							; Increment melody position
     77  f260		       a4 88		      ldy	AudioStep
     78  f262		       c8		      iny
     79  f263
     80  f263							; Check if we're at the end of the melody
     81  f263		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
     82  f265		       d0 02		      bne	.title_audio_play_note
     83  f267
     84  f267							; Loop our audio step
     85  f267		       a0 00		      ldy	#0
     86  f269
     87  f269				   .title_audio_play_note
     88  f269
     89  f269							; Save current position
     90  f269		       84 88		      sty	AudioStep
     91  f26b
     92  f26b							; Basic Melody Line
     93  f26b		       b9 6e f3 	      lda	TitleAudio0,y
     94  f26e		       85 17		      sta	AUDF0
     95  f270
     96  f270							; Drums and Bass
     97  f270		       b9 7e f3 	      lda	TitleTone1,y
     98  f273		       c9 ff		      cmp	#$FF
     99  f275		       f0 0e		      beq	.title_audio_play_note_1_mute
    100  f277
    101  f277		       85 16		      sta	AUDC1
    102  f279		       b9 8e f3 	      lda	TitleAudio1,y
    103  f27c		       85 18		      sta	AUDF1
    104  f27e		       a9 07		      lda	#TITLE_AUDIO_1_VOLUME
    105  f280		       85 1a		      sta	AUDV1
    106  f282
    107  f282		       4c 8d f2 	      jmp	.title_audio_return
    108  f285
    109  f285				   .title_audio_play_note_1_mute
    110  f285
    111  f285		       a9 00		      lda	#0
    112  f287		       85 18		      sta	AUDF1
    113  f289		       85 16		      sta	AUDC1
    114  f28b		       85 1a		      sta	AUDV1
    115  f28d
    116  f28d				   .title_audio_return
    117  f28d		       60		      rts
    118  f28e
    119  f28e				   TitleState
    120  f28e							; Check if Fire Button on controller 1 is pressed
    121  f28e		       a5 0c		      lda	INPT4
    122  f290		       30 03		      bmi	.title_state_return
    123  f292
    124  f292		       20 9e f3 	      jsr	GameInit
    125  f295
    126  f295				   .title_state_return
    127  f295		       60		      rts
    128  f296
    129  f296				   TitleKernel
    130  f296
    131  f296							; Playfield Control
    132  f296		       a9 00		      lda	#%00000000	; No mirroring
    133  f298		       85 0a		      sta	CTRLPF
    134  f29a
    135  f29a							; Start Counters
    136  f29a		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    137  f29c		       a0 00		      ldy	#0	; Image Counter
    138  f29e
    139  f29e							; Turn on display
    140  f29e		       a9 00		      lda	#0
    141  f2a0		       85 01		      sta	VBLANK
    142  f2a2
    143  f2a2		       85 02		      sta	WSYNC
    144  f2a4
    145  f2a4				   .title_kernel_image
    146  f2a4
    147  f2a4							; 76 machine cycles per scanline
    148  f2a4		       85 02		      sta	WSYNC
    149  f2a6
    150  f2a6				   .title_kernel_image_load		; 66 cycles
    151  f2a6
    152  f2a6							; First half of image
    153  f2a6		       b9 de f2 	      lda	TitleImage,y	; 5
    154  f2a9		       85 0d		      sta	PF0	; 4
    155  f2ab		       b9 df f2 	      lda	TitleImage+1,y	; 5
    156  f2ae		       85 0e		      sta	PF1	; 4
    157  f2b0		       b9 e0 f2 	      lda	TitleImage+2,y	; 5
    158  f2b3		       85 0f		      sta	PF2	; 4
    159  f2b5
      0  f2b5					      sleep	6
      1  f2b5				   .CYCLES    SET	6
      2  f2b5
      3  f2b5				  -	      IF	.CYCLES < 2
      4  f2b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2b5				  -	      ERR
      6  f2b5					      ENDIF
      7  f2b5
      8  f2b5				  -	      IF	.CYCLES & 1
      9  f2b5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2b5				  -	      nop	0
     11  f2b5				  -	      ELSE
     12  f2b5				  -	      bit	VSYNC
     13  f2b5				  -	      ENDIF
     14  f2b5				  -.CYCLES    SET	.CYCLES - 3
     15  f2b5					      ENDIF
     16  f2b5
     17  f2b5					      REPEAT	.CYCLES / 2
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     19  f2b8					      REPEND
    161  f2b8
    162  f2b8							; Second half of image
    163  f2b8		       b9 e1 f2 	      lda	TitleImage+3,y	; 5
    164  f2bb		       85 0d		      sta	PF0	; 4
    165  f2bd		       b9 e2 f2 	      lda	TitleImage+4,y	; 5
    166  f2c0		       85 0e		      sta	PF1	; 4
    167  f2c2		       b9 e3 f2 	      lda	TitleImage+5,y	; 5
    168  f2c5		       85 0f		      sta	PF2	; 4
    169  f2c7
    170  f2c7				   .title_kernel_image_index		; 4 cycles
    171  f2c7
    172  f2c7		       ca		      dex		; 2
    173  f2c8		       d0 da		      bne	.title_kernel_image	; 2
    174  f2ca
    175  f2ca				   .title_kernel_image_index_next		; 6 cycles
    176  f2ca
    177  f2ca							; Restore scanline counter
    178  f2ca		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    179  f2cc
    180  f2cc		       98		      tya		; 2
    181  f2cd		       18		      clc		; 2
    182  f2ce		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    183  f2d0		       a8		      tay		; 2
    184  f2d1		       c0 90		      cpy	#KERNEL_IMAGE_SIZE*KERNEL_IMAGE_FULL_DATA
    185  f2d3		       d0 cf		      bne	.title_kernel_image	; 2
    186  f2d5
    187  f2d5				   .title_kernel_image_clean
    188  f2d5
    189  f2d5							; Clear out playfield
    190  f2d5		       a9 00		      lda	#0
    191  f2d7		       85 0d		      sta	PF0
    192  f2d9		       85 0e		      sta	PF1
    193  f2db		       85 0f		      sta	PF2
    194  f2dd
    195  f2dd				   .title_kernel_image_return
    196  f2dd		       60		      rts
    197  f2de
    198  f2de				   TitleAssets
    199  f2de
    200  f2de							; Assets
------- FILE title_image.asm LEVEL 3 PASS 2
      0  f2de					      include	"title_image.asm"
      1  f2de				   TitleImage
      2  f2de
      3  f2de		       f0		      .BYTE.b	%11110000
      4  f2df		       ff		      .BYTE.b	%11111111
      5  f2e0		       ff		      .BYTE.b	%11111111
      6  f2e1		       f0		      .BYTE.b	%11110000
      7  f2e2		       ff		      .BYTE.b	%11111111
      8  f2e3		       ff		      .BYTE.b	%11111111
      9  f2e4
     10  f2e4		       10		      .BYTE.b	%00010000
     11  f2e5		       00		      .BYTE.b	%00000000
     12  f2e6		       00		      .BYTE.b	%00000000
     13  f2e7		       00		      .BYTE.b	%00000000
     14  f2e8		       00		      .BYTE.b	%00000000
     15  f2e9		       80		      .BYTE.b	%10000000
     16  f2ea
     17  f2ea		       10		      .BYTE.b	%00010000
     18  f2eb		       00		      .BYTE.b	%00000000
     19  f2ec		       00		      .BYTE.b	%00000000
     20  f2ed		       00		      .BYTE.b	%00000000
     21  f2ee		       00		      .BYTE.b	%00000000
     22  f2ef		       80		      .BYTE.b	%10000000
     23  f2f0
     24  f2f0		       10		      .BYTE.b	%00010000
     25  f2f1		       00		      .BYTE.b	%00000000
     26  f2f2		       00		      .BYTE.b	%00000000
     27  f2f3		       00		      .BYTE.b	%00000000
     28  f2f4		       00		      .BYTE.b	%00000000
     29  f2f5		       80		      .BYTE.b	%10000000
     30  f2f6
     31  f2f6		       10		      .BYTE.b	%00010000
     32  f2f7		       00		      .BYTE.b	%00000000
     33  f2f8		       00		      .BYTE.b	%00000000
     34  f2f9		       00		      .BYTE.b	%00000000
     35  f2fa		       00		      .BYTE.b	%00000000
     36  f2fb		       80		      .BYTE.b	%10000000
     37  f2fc
     38  f2fc		       10		      .BYTE.b	%00010000
     39  f2fd		       77		      .BYTE.b	%01110111
     40  f2fe		       ee		      .BYTE.b	%11101110
     41  f2ff		       c0		      .BYTE.b	%11000000
     42  f300		       b8		      .BYTE.b	%10111000
     43  f301		       80		      .BYTE.b	%10000000
     44  f302
     45  f302		       10		      .BYTE.b	%00010000
     46  f303		       45		      .BYTE.b	%01000101
     47  f304		       24		      .BYTE.b	%00100100
     48  f305		       50		      .BYTE.b	%01010000
     49  f306		       24		      .BYTE.b	%00100100
     50  f307		       80		      .BYTE.b	%10000000
     51  f308
     52  f308		       10		      .BYTE.b	%00010000
     53  f309		       47		      .BYTE.b	%01000111
     54  f30a		       24		      .BYTE.b	%00100100
     55  f30b		       d0		      .BYTE.b	%11010000
     56  f30c		       24		      .BYTE.b	%00100100
     57  f30d		       80		      .BYTE.b	%10000000
     58  f30e
     59  f30e		       10		      .BYTE.b	%00010000
     60  f30f		       74		      .BYTE.b	%01110100
     61  f310		       24		      .BYTE.b	%00100100
     62  f311		       50		      .BYTE.b	%01010000
     63  f312		       38		      .BYTE.b	%00111000
     64  f313		       80		      .BYTE.b	%10000000
     65  f314
     66  f314		       10		      .BYTE.b	%00010000
     67  f315		       14		      .BYTE.b	%00010100
     68  f316		       24		      .BYTE.b	%00100100
     69  f317		       50		      .BYTE.b	%01010000
     70  f318		       24		      .BYTE.b	%00100100
     71  f319		       80		      .BYTE.b	%10000000
     72  f31a
     73  f31a		       10		      .BYTE.b	%00010000
     74  f31b		       74		      .BYTE.b	%01110100
     75  f31c		       ee		      .BYTE.b	%11101110
     76  f31d		       c0		      .BYTE.b	%11000000
     77  f31e		       a4		      .BYTE.b	%10100100
     78  f31f		       80		      .BYTE.b	%10000000
     79  f320
     80  f320		       10		      .BYTE.b	%00010000
     81  f321		       00		      .BYTE.b	%00000000
     82  f322		       00		      .BYTE.b	%00000000
     83  f323		       00		      .BYTE.b	%00000000
     84  f324		       00		      .BYTE.b	%00000000
     85  f325		       80		      .BYTE.b	%10000000
     86  f326
     87  f326		       10		      .BYTE.b	%00010000
     88  f327		       00		      .BYTE.b	%00000000
     89  f328		       00		      .BYTE.b	%00000000
     90  f329		       00		      .BYTE.b	%00000000
     91  f32a		       00		      .BYTE.b	%00000000
     92  f32b		       80		      .BYTE.b	%10000000
     93  f32c
     94  f32c		       10		      .BYTE.b	%00010000
     95  f32d		       01		      .BYTE.b	%00000001
     96  f32e		       03		      .BYTE.b	%00000011
     97  f32f		       20		      .BYTE.b	%00100000
     98  f330		       5d		      .BYTE.b	%01011101
     99  f331		       83		      .BYTE.b	%10000011
    100  f332
    101  f332		       10		      .BYTE.b	%00010000
    102  f333		       0a		      .BYTE.b	%00001010
    103  f334		       14		      .BYTE.b	%00010100
    104  f335		       20		      .BYTE.b	%00100000
    105  f336		       51		      .BYTE.b	%01010001
    106  f337		       84		      .BYTE.b	%10000100
    107  f338
    108  f338		       10		      .BYTE.b	%00010000
    109  f339		       15		      .BYTE.b	%00010101
    110  f33a		       2a		      .BYTE.b	%00101010
    111  f33b		       20		      .BYTE.b	%00100000
    112  f33c		       59		      .BYTE.b	%01011001
    113  f33d		       83		      .BYTE.b	%10000011
    114  f33e
    115  f33e		       10		      .BYTE.b	%00010000
    116  f33f		       24		      .BYTE.b	%00100100
    117  f340		       49		      .BYTE.b	%01001001
    118  f341		       20		      .BYTE.b	%00100000
    119  f342		       51		      .BYTE.b	%01010001
    120  f343		       84		      .BYTE.b	%10000100
    121  f344
    122  f344		       10		      .BYTE.b	%00010000
    123  f345		       22		      .BYTE.b	%00100010
    124  f346		       44		      .BYTE.b	%01000100
    125  f347		       a0		      .BYTE.b	%10100000
    126  f348		       51		      .BYTE.b	%01010001
    127  f349		       84		      .BYTE.b	%10000100
    128  f34a
    129  f34a		       10		      .BYTE.b	%00010000
    130  f34b		       11		      .BYTE.b	%00010001
    131  f34c		       23		      .BYTE.b	%00100011
    132  f34d		       40		      .BYTE.b	%01000000
    133  f34e		       9d		      .BYTE.b	%10011101
    134  f34f		       83		      .BYTE.b	%10000011
    135  f350
    136  f350		       10		      .BYTE.b	%00010000
    137  f351		       00		      .BYTE.b	%00000000
    138  f352		       00		      .BYTE.b	%00000000
    139  f353		       00		      .BYTE.b	%00000000
    140  f354		       00		      .BYTE.b	%00000000
    141  f355		       80		      .BYTE.b	%10000000
    142  f356
    143  f356		       10		      .BYTE.b	%00010000
    144  f357		       00		      .BYTE.b	%00000000
    145  f358		       00		      .BYTE.b	%00000000
    146  f359		       00		      .BYTE.b	%00000000
    147  f35a		       00		      .BYTE.b	%00000000
    148  f35b		       80		      .BYTE.b	%10000000
    149  f35c
    150  f35c		       10		      .BYTE.b	%00010000
    151  f35d		       00		      .BYTE.b	%00000000
    152  f35e		       00		      .BYTE.b	%00000000
    153  f35f		       00		      .BYTE.b	%00000000
    154  f360		       00		      .BYTE.b	%00000000
    155  f361		       80		      .BYTE.b	%10000000
    156  f362
    157  f362		       10		      .BYTE.b	%00010000
    158  f363		       00		      .BYTE.b	%00000000
    159  f364		       00		      .BYTE.b	%00000000
    160  f365		       00		      .BYTE.b	%00000000
    161  f366		       00		      .BYTE.b	%00000000
    162  f367		       80		      .BYTE.b	%10000000
    163  f368
    164  f368		       f0		      .BYTE.b	%11110000
    165  f369		       ff		      .BYTE.b	%11111111
    166  f36a		       ff		      .BYTE.b	%11111111
    167  f36b		       f0		      .BYTE.b	%11110000
    168  f36c		       ff		      .BYTE.b	%11111111
    169  f36d		       ff		      .BYTE.b	%11111111
------- FILE title.asm
    202  f36e
    203  f36e				   TitleAudio0
    204  f36e
    205  f36e		       0f		      .BYTE.b	#15	; B
    206  f36f		       13		      .BYTE.b	#19	; G
    207  f370		       17		      .BYTE.b	#23	; E
    208  f371		       13		      .BYTE.b	#19	; G
    209  f372		       0e		      .BYTE.b	#14	; C
    210  f373		       13		      .BYTE.b	#19
    211  f374		       17		      .BYTE.b	#23
    212  f375		       13		      .BYTE.b	#19
    213  f376		       0c		      .BYTE.b	#12	; D
    214  f377		       13		      .BYTE.b	#19
    215  f378		       17		      .BYTE.b	#23
    216  f379		       13		      .BYTE.b	#19
    217  f37a		       0e		      .BYTE.b	#14	; C
    218  f37b		       13		      .BYTE.b	#19
    219  f37c		       17		      .BYTE.b	#23
    220  f37d		       13		      .BYTE.b	#19
    221  f37e
    222  f37e				   TitleTone1
    223  f37e
    224  f37e		       0f		      .BYTE.b	#15	; Electronic Rumble
    225  f37f		       ff		      .BYTE.b	#$FF
    226  f380		       01		      .BYTE.b	#1	; Low Pure Tone
    227  f381		       01		      .BYTE.b	#1
    228  f382		       08		      .BYTE.b	#8	; White Noise
    229  f383		       01		      .BYTE.b	#1
    230  f384		       01		      .BYTE.b	#1
    231  f385		       ff		      .BYTE.b	#$FF
    232  f386		       ff		      .BYTE.b	#$FF
    233  f387		       0f		      .BYTE.b	#15
    234  f388		       ff		      .BYTE.b	#$FF
    235  f389		       ff		      .BYTE.b	#$FF
    236  f38a		       08		      .BYTE.b	#8
    237  f38b		       ff		      .BYTE.b	#$FF
    238  f38c		       01		      .BYTE.b	#1
    239  f38d		       01		      .BYTE.b	#1
    240  f38e
    241  f38e				   TitleAudio1
    242  f38e
    243  f38e		       1d		      .BYTE.b	#29	; Kick
    244  f38f		       ff		      .BYTE.b	#$FF
    245  f390		       1f		      .BYTE.b	#31	; C
    246  f391		       1f		      .BYTE.b	#31
    247  f392		       07		      .BYTE.b	#7	; Snare
    248  f393		       1f		      .BYTE.b	#31
    249  f394		       1f		      .BYTE.b	#31
    250  f395		       ff		      .BYTE.b	#$FF
    251  f396		       ff		      .BYTE.b	#$FF
    252  f397		       1d		      .BYTE.b	#29
    253  f398		       ff		      .BYTE.b	#$FF
    254  f399		       ff		      .BYTE.b	#$FF
    255  f39a		       07		      .BYTE.b	#7
    256  f39b		       ff		      .BYTE.b	#$FF
    257  f39c		       17		      .BYTE.b	#23	; F
    258  f39d		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f39e					      include	"game.asm"
      1  f39e							;================
      2  f39e							; Constants
      3  f39e							;================
      4  f39e
      5  f39e		       00 00	   GAME_BG_COLOR =	#$00
      6  f39e		       00 0c	   GAME_FG_COLOR =	#$0C
      7  f39e
      8  f39e		       00 56	   GAME_P0_COLOR =	#$56
      9  f39e		       00 08	   GAME_P0_SIZE =	8
     10  f39e		       00 08	   GAME_P0_BOUNDARY =	GAME_P0_SIZE
     11  f39e
     12  f39e				   GameInit
     13  f39e
     14  f39e							; Setup logic and kernel
      0  f39e					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  f39e				   .POINTER   SET	VBlankPtr
      2  f39e				   .ADDRESS   SET	GameVerticalBlank
      3  f39e
      4  f39e		       a9 df		      LDA	#<.ADDRESS
      5  f3a0		       85 80		      STA	.POINTER
      6  f3a2		       a9 f3		      LDA	#>.ADDRESS
      7  f3a4		       85 81		      STA	.POINTER+1
      8  f3a6
      0  f3a6					      SET_POINTER	KernelPtr, GameKernel
      1  f3a6				   .POINTER   SET	KernelPtr
      2  f3a6				   .ADDRESS   SET	GameKernel
      3  f3a6
      4  f3a6		       a9 b9		      LDA	#<.ADDRESS
      5  f3a8		       85 82		      STA	.POINTER
      6  f3aa		       a9 f4		      LDA	#>.ADDRESS
      7  f3ac		       85 83		      STA	.POINTER+1
      8  f3ae
      0  f3ae					      SET_POINTER	OverScanPtr, GameOverScan
      1  f3ae				   .POINTER   SET	OverScanPtr
      2  f3ae				   .ADDRESS   SET	GameOverScan
      3  f3ae
      4  f3ae		       a9 e6		      LDA	#<.ADDRESS
      5  f3b0		       85 84		      STA	.POINTER
      6  f3b2		       a9 f3		      LDA	#>.ADDRESS
      7  f3b4		       85 85		      STA	.POINTER+1
      8  f3b6
     18  f3b6
     19  f3b6							; Load Colors
     20  f3b6		       a9 00		      lda	#GAME_BG_COLOR
     21  f3b8		       85 09		      sta	COLUBK
     22  f3ba		       a9 0c		      lda	#GAME_FG_COLOR
     23  f3bc		       85 08		      sta	COLUPF
     24  f3be		       a9 56		      lda	#GAME_P0_COLOR
     25  f3c0		       85 06		      sta	COLUP0
     26  f3c2
     27  f3c2							; Mute Audio
     28  f3c2		       a9 00		      lda	#0
     29  f3c4		       85 15		      sta	AUDC0
     30  f3c6		       85 19		      sta	AUDV0
     31  f3c8		       85 17		      sta	AUDF0
     32  f3ca		       85 16		      sta	AUDC1
     33  f3cc		       85 1a		      sta	AUDV1
     34  f3ce		       85 18		      sta	AUDF1
     35  f3d0
     36  f3d0							; Initial Player Control
     37  f3d0		       a9 32		      lda	#50
     38  f3d2		       85 8c		      sta	PlayerPosition
     39  f3d4		       85 8d		      sta	PlayerPosition+1
     40  f3d6
     41  f3d6							; Setup Player Sprite
      0  f3d6					      SET_POINTER	PlayerPtr, GamePlayerSprite
      1  f3d6				   .POINTER   SET	PlayerPtr
      2  f3d6				   .ADDRESS   SET	GamePlayerSprite
      3  f3d6
      4  f3d6		       a9 58		      LDA	#<.ADDRESS
      5  f3d8		       85 8a		      STA	.POINTER
      6  f3da		       a9 f5		      LDA	#>.ADDRESS
      7  f3dc		       85 8b		      STA	.POINTER+1
      8  f3de
     43  f3de
     44  f3de		       60		      rts
     45  f3df
     46  f3df				   GameVerticalBlank
     47  f3df		       20 e7 f3 	      jsr	GameControl
     48  f3e2		       20 ad f4 	      jsr	GameObjects
     49  f3e5		       60		      rts
     50  f3e6
     51  f3e6				   GameOverScan
     52  f3e6		       60		      rts
     53  f3e7
     54  f3e7				   GameControl
     55  f3e7		       a6 8c		      ldx	PlayerPosition
     56  f3e9		       a4 8d		      ldy	PlayerPosition+1
     57  f3eb		       ad 80 02 	      lda	SWCHA
     58  f3ee
     59  f3ee				   .game_control_check_right
     60  f3ee		       30 01		      bmi	.game_control_check_left
     61  f3f0		       e8		      inx
     62  f3f1
     63  f3f1				   .game_control_check_left
     64  f3f1		       2a		      rol
     65  f3f2		       30 01		      bmi	.game_control_check_down
     66  f3f4		       ca		      dex
     67  f3f5
     68  f3f5				   .game_control_check_down
     69  f3f5		       2a		      rol
     70  f3f6		       30 01		      bmi	.game_control_check_up
     71  f3f8		       88		      dey
     72  f3f9
     73  f3f9				   .game_control_check_up
     74  f3f9		       2a		      rol
     75  f3fa		       30 01		      bmi	.game_control_sprite
     76  f3fc		       c8		      iny
     77  f3fd
     78  f3fd				   .game_control_sprite
     79  f3fd		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     80  f3ff
     81  f3ff				   .game_control_sprite_x
     82  f3ff		       e4 8c		      cpx	PlayerPosition
     83  f401		       90 04		      bcc	.game_control_sprite_left
     84  f403		       f0 09		      beq	.game_control_sprite_y
     85  f405		       b0 05		      bcs	.game_control_sprite_right
     86  f407
     87  f407				   .game_control_sprite_left
     88  f407		       09 80		      ora	#%10000000
     89  f409		       4c 0e f4 	      jmp	.game_control_sprite_y
     90  f40c
     91  f40c				   .game_control_sprite_right
     92  f40c		       09 40		      ora	#%01000000
     93  f40e
     94  f40e				   .game_control_sprite_y
     95  f40e		       c4 8d		      cpy	PlayerPosition+1
     96  f410		       90 04		      bcc	.game_control_sprite_down
     97  f412		       f0 09		      beq	.game_control_boundary
     98  f414		       b0 05		      bcs	.game_control_sprite_up
     99  f416
    100  f416				   .game_control_sprite_down
    101  f416		       09 10		      ora	#%00010000
    102  f418		       4c 1d f4 	      jmp	.game_control_boundary
    103  f41b
    104  f41b				   .game_control_sprite_up
    105  f41b		       09 20		      ora	#%00100000
    106  f41d
    107  f41d				   .game_control_boundary
    108  f41d							; Check Playfield Boundaries
    109  f41d
    110  f41d				   .game_control_boundary_left
    111  f41d		       e0 08		      cpx	#GAME_P0_BOUNDARY
    112  f41f		       b0 02		      bcs	.game_control_boundary_right
    113  f421		       a2 08		      ldx	#GAME_P0_BOUNDARY
    114  f423
    115  f423				   .game_control_boundary_right
    116  f423							;cpx #KERNEL_WIDTH-GAME_P0_BOUNDARY-GAME_P0_SIZE
    117  f423							;bcc .game_control_boundary_top
    118  f423							;ldx #KERNEL_WIDTH-GAME_P0_BOUNDARY-GAME_P0_SIZE
    119  f423
    120  f423				   .game_control_boundary_top
    121  f423		       c0 08		      cpy	#GAME_P0_BOUNDARY
    122  f425		       b0 02		      bcs	.game_control_boundary_bottom
    123  f427		       a0 08		      ldy	#GAME_P0_BOUNDARY
    124  f429
    125  f429				   .game_control_boundary_bottom
    126  f429		       c0 b0		      cpy	#KERNEL_SCANLINES-GAME_P0_BOUNDARY-GAME_P0_SIZE
    127  f42b		       90 02		      bcc	.game_control_store
    128  f42d		       a0 b0		      ldy	#KERNEL_SCANLINES-GAME_P0_BOUNDARY-GAME_P0_SIZE
    129  f42f
    130  f42f				   .game_control_store
    131  f42f							; Store new position
    132  f42f		       86 8c		      stx	PlayerPosition
    133  f431		       84 8d		      sty	PlayerPosition+1
    134  f433
    135  f433				   .game_control_sprite_assign
    136  f433							; Skip if no change
    137  f433		       c9 00		      cmp	#%00000000
    138  f435		       f0 75		      beq	.game_control_return
    139  f437
    140  f437				   .game_control_sprite_assign_left
    141  f437		       c9 80		      cmp	#%10000000
    142  f439		       d0 0b		      bne	.game_control_sprite_assign_right
      0  f43b					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*6
      1  f43b				   .POINTER   SET	PlayerPtr
      2  f43b				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*6
      3  f43b
      4  f43b		       a9 88		      LDA	#<.ADDRESS
      5  f43d		       85 8a		      STA	.POINTER
      6  f43f		       a9 f5		      LDA	#>.ADDRESS
      7  f441		       85 8b		      STA	.POINTER+1
      8  f443
    144  f443		       4c ac f4 	      jmp	.game_control_return
    145  f446
    146  f446				   .game_control_sprite_assign_right
    147  f446		       c9 40		      cmp	#%01000000
    148  f448		       d0 0b		      bne	.game_control_sprite_assign_top
      0  f44a					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*2
      1  f44a				   .POINTER   SET	PlayerPtr
      2  f44a				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*2
      3  f44a
      4  f44a		       a9 68		      LDA	#<.ADDRESS
      5  f44c		       85 8a		      STA	.POINTER
      6  f44e		       a9 f5		      LDA	#>.ADDRESS
      7  f450		       85 8b		      STA	.POINTER+1
      8  f452
    150  f452		       4c ac f4 	      jmp	.game_control_return
    151  f455
    152  f455				   .game_control_sprite_assign_top
    153  f455		       c9 20		      cmp	#%00100000
    154  f457		       d0 0b		      bne	.game_control_sprite_assign_bottom
      0  f459					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*0
      1  f459				   .POINTER   SET	PlayerPtr
      2  f459				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*0
      3  f459
      4  f459		       a9 58		      LDA	#<.ADDRESS
      5  f45b		       85 8a		      STA	.POINTER
      6  f45d		       a9 f5		      LDA	#>.ADDRESS
      7  f45f		       85 8b		      STA	.POINTER+1
      8  f461
    156  f461		       4c ac f4 	      jmp	.game_control_return
    157  f464
    158  f464				   .game_control_sprite_assign_bottom
    159  f464		       c9 10		      cmp	#%00010000
    160  f466		       d0 0b		      bne	.game_control_sprite_assign_top_right
      0  f468					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*4
      1  f468				   .POINTER   SET	PlayerPtr
      2  f468				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*4
      3  f468
      4  f468		       a9 78		      LDA	#<.ADDRESS
      5  f46a		       85 8a		      STA	.POINTER
      6  f46c		       a9 f5		      LDA	#>.ADDRESS
      7  f46e		       85 8b		      STA	.POINTER+1
      8  f470
    162  f470		       4c ac f4 	      jmp	.game_control_return
    163  f473
    164  f473				   .game_control_sprite_assign_top_right
    165  f473		       c9 60		      cmp	#%01100000
    166  f475		       d0 0b		      bne	.game_control_sprite_assign_bottom_right
      0  f477					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*1
      1  f477				   .POINTER   SET	PlayerPtr
      2  f477				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*1
      3  f477
      4  f477		       a9 60		      LDA	#<.ADDRESS
      5  f479		       85 8a		      STA	.POINTER
      6  f47b		       a9 f5		      LDA	#>.ADDRESS
      7  f47d		       85 8b		      STA	.POINTER+1
      8  f47f
    168  f47f		       4c ac f4 	      jmp	.game_control_return
    169  f482
    170  f482				   .game_control_sprite_assign_bottom_right
    171  f482		       c9 50		      cmp	#%01010000
    172  f484		       d0 0b		      bne	.game_control_sprite_assign_bottom_left
      0  f486					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*3
      1  f486				   .POINTER   SET	PlayerPtr
      2  f486				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*3
      3  f486
      4  f486		       a9 70		      LDA	#<.ADDRESS
      5  f488		       85 8a		      STA	.POINTER
      6  f48a		       a9 f5		      LDA	#>.ADDRESS
      7  f48c		       85 8b		      STA	.POINTER+1
      8  f48e
    174  f48e		       4c ac f4 	      jmp	.game_control_return
    175  f491
    176  f491				   .game_control_sprite_assign_bottom_left
    177  f491		       c9 90		      cmp	#%10010000
    178  f493		       d0 0b		      bne	.game_control_sprite_assign_top_left
      0  f495					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*5
      1  f495				   .POINTER   SET	PlayerPtr
      2  f495				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*5
      3  f495
      4  f495		       a9 80		      LDA	#<.ADDRESS
      5  f497		       85 8a		      STA	.POINTER
      6  f499		       a9 f5		      LDA	#>.ADDRESS
      7  f49b		       85 8b		      STA	.POINTER+1
      8  f49d
    180  f49d		       4c ac f4 	      jmp	.game_control_return
    181  f4a0
    182  f4a0				   .game_control_sprite_assign_top_left
    183  f4a0		       c9 a0		      cmp	#%10100000
    184  f4a2		       d0 08		      bne	.game_control_return
      0  f4a4					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*7
      1  f4a4				   .POINTER   SET	PlayerPtr
      2  f4a4				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*7
      3  f4a4
      4  f4a4		       a9 90		      LDA	#<.ADDRESS
      5  f4a6		       85 8a		      STA	.POINTER
      6  f4a8		       a9 f5		      LDA	#>.ADDRESS
      7  f4aa		       85 8b		      STA	.POINTER+1
      8  f4ac
    186  f4ac
    187  f4ac				   .game_control_return
    188  f4ac		       60		      rts
    189  f4ad
    190  f4ad				   GameObjects
    191  f4ad
    192  f4ad				   .game_objects_player
    193  f4ad
    194  f4ad		       a2 00		      ldx	#0	; Object (player0)
    195  f4af		       a5 8c		      lda	PlayerPosition	; X Position
    196  f4b1		       20 00 f0 	      jsr	PosObject
    197  f4b4
    198  f4b4							; Set final x position
    199  f4b4		       85 02		      sta	WSYNC
    200  f4b6		       85 2a		      sta	HMOVE
    201  f4b8
    202  f4b8		       60		      rts
    203  f4b9
    204  f4b9				   GameKernel
    205  f4b9
    206  f4b9							; Playfield Control
    207  f4b9		       a9 01		      lda	#%00000001	; Mirrored
    208  f4bb		       85 0a		      sta	CTRLPF
    209  f4bd
    210  f4bd							; Set player 0 to be double size
    211  f4bd		       a5 04		      lda	NUSIZ0
    212  f4bf		       29 f8		      and	#%11111000
    213  f4c1		       09 05		      ora	#%00000101
    214  f4c3		       85 04		      sta	NUSIZ0
    215  f4c5
    216  f4c5							; Turn on display
    217  f4c5		       a9 00		      lda	#0
    218  f4c7		       85 01		      sta	VBLANK
    219  f4c9
    220  f4c9							; Setup Image Index
    221  f4c9		       a9 00		      lda	#0
    222  f4cb		       85 89		      sta	ImageIndex
    223  f4cd
    224  f4cd							; Start Counters
    225  f4cd		       a2 c0		      ldx	#KERNEL_SCANLINES	; Scanline Counter
    226  f4cf							;    ldy #0 ; Image Counter
    227  f4cf
    228  f4cf				   .game_kernel
    229  f4cf
    230  f4cf				   .game_kernel_player
    231  f4cf
    232  f4cf		       8a		      txa
    233  f4d0		       e5 8d		      sbc	PlayerPosition+1
    234  f4d2
    235  f4d2		       c9 10		      cmp	#GAME_P0_SIZE*2
    236  f4d4		       90 07		      bcc	.game_kernel_player_draw
    237  f4d6
    238  f4d6				   .game_kernel_player_blank
    239  f4d6
    240  f4d6							; Draw empty sprite
    241  f4d6		       a9 00		      lda	#0
    242  f4d8		       85 1b		      sta	GRP0
    243  f4da		       4c e5 f4 	      jmp	.game_kernel_image
    244  f4dd
    245  f4dd				   .game_kernel_player_draw
    246  f4dd
    247  f4dd							; Load sprite line
    248  f4dd		       29 fe		      and	#%11111110
    249  f4df		       4a		      lsr		; Divide by 2
    250  f4e0		       a8		      tay
    251  f4e1		       b1 8a		      lda	(PlayerPtr),y
    252  f4e3		       85 1b		      sta	GRP0
    253  f4e5
    254  f4e5				   .game_kernel_image
    255  f4e5
    256  f4e5							; Sync up to horizontal line
    257  f4e5		       85 02		      sta	WSYNC
    258  f4e7
    259  f4e7							; Check to see if new playfield needs to be loaded
    260  f4e7		       8a		      txa
    261  f4e8		       29 07		      and	#%00000111
    262  f4ea		       d0 14		      bne	.game_kernel_line
    263  f4ec
    264  f4ec				   .game_kernel_image_load
    265  f4ec
    266  f4ec		       a4 89		      ldy	ImageIndex
    267  f4ee
    268  f4ee							; Draw Image
    269  f4ee		       b9 10 f5 	      lda	GameImagePF0,y	; 3
    270  f4f1		       85 0d		      sta	PF0	; 1
    271  f4f3		       b9 28 f5 	      lda	GameImagePF1,y	; 3
    272  f4f6		       85 0e		      sta	PF1	; 1
    273  f4f8		       b9 40 f5 	      lda	GameImagePF2,y	; 3
    274  f4fb		       85 0f		      sta	PF2	; 1
    275  f4fd
    276  f4fd		       c8		      iny		; 2
    277  f4fe		       84 89		      sty	ImageIndex
    278  f500
    279  f500				   .game_kernel_line
    280  f500		       ca		      dex
    281  f501		       d0 cc		      bne	.game_kernel
    282  f503
    283  f503				   .game_kernel_clean
    284  f503		       85 02		      sta	WSYNC
    285  f505
    286  f505							; Clear out playfield
    287  f505		       a9 00		      lda	#0
    288  f507		       85 0d		      sta	PF0
    289  f509		       85 0e		      sta	PF1
    290  f50b		       85 0f		      sta	PF2
    291  f50d
    292  f50d							; Clear out Player sprite
    293  f50d		       85 1b		      sta	GRP0
    294  f50f
    295  f50f				   .game_kernel_return
    296  f50f		       60		      rts
    297  f510
    298  f510				   GameAssets
    299  f510
    300  f510							; Game Background
------- FILE game_image.asm LEVEL 3 PASS 2
      0  f510					      include	"game_image.asm"
      1  f510				   GameImagePF0
      2  f510		       00		      .BYTE.b	%00000000
      3  f511		       00		      .BYTE.b	%00000000
      4  f512		       00		      .BYTE.b	%00000000
      5  f513		       00		      .BYTE.b	%00000000
      6  f514		       00		      .BYTE.b	%00000000
      7  f515		       00		      .BYTE.b	%00000000
      8  f516		       30		      .BYTE.b	%00110000
      9  f517		       e0		      .BYTE.b	%11100000
     10  f518		       20		      .BYTE.b	%00100000
     11  f519		       40		      .BYTE.b	%01000000
     12  f51a		       40		      .BYTE.b	%01000000
     13  f51b		       80		      .BYTE.b	%10000000
     14  f51c		       80		      .BYTE.b	%10000000
     15  f51d		       40		      .BYTE.b	%01000000
     16  f51e		       40		      .BYTE.b	%01000000
     17  f51f		       20		      .BYTE.b	%00100000
     18  f520		       e0		      .BYTE.b	%11100000
     19  f521		       30		      .BYTE.b	%00110000
     20  f522		       00		      .BYTE.b	%00000000
     21  f523		       00		      .BYTE.b	%00000000
     22  f524		       00		      .BYTE.b	%00000000
     23  f525		       00		      .BYTE.b	%00000000
     24  f526		       00		      .BYTE.b	%00000000
     25  f527		       00		      .BYTE.b	%00000000
     26  f528
     27  f528				   GameImagePF1
     28  f528		       00		      .BYTE.b	%00000000
     29  f529		       00		      .BYTE.b	%00000000
     30  f52a		       01		      .BYTE.b	%00000001
     31  f52b		       01		      .BYTE.b	%00000001
     32  f52c		       02		      .BYTE.b	%00000010
     33  f52d		       0c		      .BYTE.b	%00001100
     34  f52e		       30		      .BYTE.b	%00110000
     35  f52f		       c0		      .BYTE.b	%11000000
     36  f530		       38		      .BYTE.b	%00111000
     37  f531		       07		      .BYTE.b	%00000111
     38  f532		       00		      .BYTE.b	%00000000
     39  f533		       00		      .BYTE.b	%00000000
     40  f534		       00		      .BYTE.b	%00000000
     41  f535		       00		      .BYTE.b	%00000000
     42  f536		       07		      .BYTE.b	%00000111
     43  f537		       38		      .BYTE.b	%00111000
     44  f538		       c0		      .BYTE.b	%11000000
     45  f539		       30		      .BYTE.b	%00110000
     46  f53a		       0c		      .BYTE.b	%00001100
     47  f53b		       02		      .BYTE.b	%00000010
     48  f53c		       01		      .BYTE.b	%00000001
     49  f53d		       01		      .BYTE.b	%00000001
     50  f53e		       00		      .BYTE.b	%00000000
     51  f53f		       00		      .BYTE.b	%00000000
     52  f540
     53  f540				   GameImagePF2
     54  f540		       03		      .BYTE.b	%00000011
     55  f541		       3f		      .BYTE.b	%00111111
     56  f542		       c2		      .BYTE.b	%11000010
     57  f543		       04		      .BYTE.b	%00000100
     58  f544		       08		      .BYTE.b	%00001000
     59  f545		       08		      .BYTE.b	%00001000
     60  f546		       10		      .BYTE.b	%00010000
     61  f547		       20		      .BYTE.b	%00100000
     62  f548		       20		      .BYTE.b	%00100000
     63  f549		       41		      .BYTE.b	%01000001
     64  f54a		       8e		      .BYTE.b	%10001110
     65  f54b		       f0		      .BYTE.b	%11110000
     66  f54c		       f0		      .BYTE.b	%11110000
     67  f54d		       8e		      .BYTE.b	%10001110
     68  f54e		       41		      .BYTE.b	%01000001
     69  f54f		       20		      .BYTE.b	%00100000
     70  f550		       20		      .BYTE.b	%00100000
     71  f551		       10		      .BYTE.b	%00010000
     72  f552		       08		      .BYTE.b	%00001000
     73  f553		       08		      .BYTE.b	%00001000
     74  f554		       04		      .BYTE.b	%00000100
     75  f555		       c2		      .BYTE.b	%11000010
     76  f556		       3f		      .BYTE.b	%00111111
     77  f557		       03		      .BYTE.b	%00000011
------- FILE game.asm
    302  f558
    303  f558							; Game Player Sprites
------- FILE game_player.asm LEVEL 3 PASS 2
      0  f558					      include	"game_player.asm"
      1  f558				   GamePlayerSprite
      2  f558
      3  f558		       99		      .BYTE.b	%10011001
      4  f559		       bd		      .BYTE.b	%10111101
      5  f55a		       7e		      .BYTE.b	%01111110
      6  f55b		       3c		      .BYTE.b	%00111100
      7  f55c		       7e		      .BYTE.b	%01111110
      8  f55d		       99		      .BYTE.b	%10011001
      9  f55e		       bd		      .BYTE.b	%10111101
     10  f55f		       99		      .BYTE.b	%10011001
     11  f560
     12  f560		       30		      .BYTE.b	%00110000
     13  f561		       10		      .BYTE.b	%00010000
     14  f562		       b8		      .BYTE.b	%10111000
     15  f563		       f6		      .BYTE.b	%11110110
     16  f564		       2d		      .BYTE.b	%00101101
     17  f565		       1c		      .BYTE.b	%00011100
     18  f566		       13		      .BYTE.b	%00010011
     19  f567		       0b		      .BYTE.b	%00001011
     20  f568
     21  f568		       c7		      .BYTE.b	%11000111
     22  f569		       28		      .BYTE.b	%00101000
     23  f56a		       7a		      .BYTE.b	%01111010
     24  f56b		       ff		      .BYTE.b	%11111111
     25  f56c		       ff		      .BYTE.b	%11111111
     26  f56d		       7a		      .BYTE.b	%01111010
     27  f56e		       28		      .BYTE.b	%00101000
     28  f56f		       c7		      .BYTE.b	%11000111
     29  f570
     30  f570		       0b		      .BYTE.b	%00001011
     31  f571		       13		      .BYTE.b	%00010011
     32  f572		       1c		      .BYTE.b	%00011100
     33  f573		       2d		      .BYTE.b	%00101101
     34  f574		       f6		      .BYTE.b	%11110110
     35  f575		       b8		      .BYTE.b	%10111000
     36  f576		       10		      .BYTE.b	%00010000
     37  f577		       30		      .BYTE.b	%00110000
     38  f578
     39  f578		       99		      .BYTE.b	%10011001
     40  f579		       bd		      .BYTE.b	%10111101
     41  f57a		       99		      .BYTE.b	%10011001
     42  f57b		       7e		      .BYTE.b	%01111110
     43  f57c		       3c		      .BYTE.b	%00111100
     44  f57d		       7e		      .BYTE.b	%01111110
     45  f57e		       bd		      .BYTE.b	%10111101
     46  f57f		       99		      .BYTE.b	%10011001
     47  f580
     48  f580		       d0		      .BYTE.b	%11010000
     49  f581		       c8		      .BYTE.b	%11001000
     50  f582		       38		      .BYTE.b	%00111000
     51  f583		       b4		      .BYTE.b	%10110100
     52  f584		       6f		      .BYTE.b	%01101111
     53  f585		       1d		      .BYTE.b	%00011101
     54  f586		       08		      .BYTE.b	%00001000
     55  f587		       0c		      .BYTE.b	%00001100
     56  f588
     57  f588		       e3		      .BYTE.b	%11100011
     58  f589		       14		      .BYTE.b	%00010100
     59  f58a		       5e		      .BYTE.b	%01011110
     60  f58b		       ff		      .BYTE.b	%11111111
     61  f58c		       ff		      .BYTE.b	%11111111
     62  f58d		       5e		      .BYTE.b	%01011110
     63  f58e		       14		      .BYTE.b	%00010100
     64  f58f		       e3		      .BYTE.b	%11100011
     65  f590
     66  f590		       0c		      .BYTE.b	%00001100
     67  f591		       08		      .BYTE.b	%00001000
     68  f592		       1d		      .BYTE.b	%00011101
     69  f593		       6f		      .BYTE.b	%01101111
     70  f594		       b4		      .BYTE.b	%10110100
     71  f595		       38		      .BYTE.b	%00111000
     72  f596		       c8		      .BYTE.b	%11001000
     73  f597		       d0		      .BYTE.b	%11010000
------- FILE game.asm
------- FILE kernel.asm
    244  f598
    245  f598							;================
    246  f598							; End of cart
    247  f598							;================
    248  f598
    249  fffa					      ORG	$FFFA
    250  fffa
    251  fffa				   InterruptVectors
    252  fffa
    253  fffa		       13 f0		      .word.w	InitSystem	; NMI
    254  fffc		       13 f0		      .word.w	InitSystem	; RESET
    255  fffe		       13 f0		      .word.w	InitSystem	; IRQ
    256  10000
    257  10000					       END
