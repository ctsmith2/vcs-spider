------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 10th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00cc ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00 00    Temp       ds	3
     61 U0086		       00	   Rand8      ds	1
     62 U0087		       00	   Rand16     ds	1
     63 U0088
     64 U0088		       00 00	   VBlankPtr  ds	2
     65 U008a		       00 00	   KernelPtr  ds	2
     66 U008c		       00 00	   OverScanPtr ds	2
     67 U008e
     68 U008e		       00	   Frame      ds	1
     69 U008f		       00 00	   FrameTimer ds	2
     70 U0091
     71 U0091		       00	   AudioStep  ds	1
     72 U0092
     73 U0092		       00	   SampleStep ds	1
     74 U0093
     75 U0093							; Score
     76 U0093
     77 U0093		       00 00	   ScoreValue ds	2
     78 U0095		       00 00	   ScoreDigitOnes ds	2
     79 U0097		       00 00	   ScoreDigitTens ds	2
     80 U0099		       00 00 00    ScoreDigitGfx ds	3
     81 U009c		       00 00	   ScoreBarGfx ds	2
     82 U009e
     83 U009e							; Level
     84 U009e		       00	   LevelCurrent ds	1
     85 U009f
     86 U009f							; Web
     87 U009f
     88 U009f		       00	   WebIndex   ds	1
     89 U00a0		       00 00	   WebColor   ds	2
     90 U00a2
     91 U00a2							; Spider
     92 U00a2
     93 U00a2		       00 00	   SpiderPtr  ds	2
     94 U00a4		       00 00	   SpiderPos  ds	2
     95 U00a6		       00	   SpiderCtrl ds	1
     96 U00a7		       00	   SpiderColor ds	1
     97 U00a8
     98 U00a8		       00	   SpiderIndex ds	1
     99 U00a9		       00	   SpiderDrawPos ds	1
    100 U00aa		       00	   SpiderLine ds	1
    101 U00ab
    102 U00ab		       00 00	   SpiderPtr2 ds	2
    103 U00ad
    104 U00ad							; Line
    105 U00ad
    106 U00ad		       00	   LineEnabled ds	1
    107 U00ae		       00 00	   LinePos    ds	2
    108 U00b0		       00 00	   LineVelocity ds	2
    109 U00b2		       00 00	   LineStartPos ds	2
    110 U00b4		       00 00	   LineDrawPos ds	2
    111 U00b6
    112 U00b6							; Bug
    113 U00b6
    114 U00b6		       00	   BugSpeed   ds	1
    115 U00b7
    116 U00b7		       00 00	   BugStunned ds	2
    117 U00b9		       00 00	   BugPosX    ds	2
    118 U00bb		       00 00	   BugPosY    ds	2
    119 U00bd
    120 U00bd		       00 00	   BugDrawPosBottom ds	2
    121 U00bf		       00 00	   BugDrawPosTop ds	2
    122 U00c1
    123 U00c1							; Swatter
    124 U00c1
    125 U00c1		       00 00	   SwatterPos ds	2
    126 U00c3		       00	   SwatterState ds	1
    127 U00c4		       00	   SwatterColor ds	1
    128 U00c5
    129 U00c5		       00	   SwatterWaitTime ds	1
    130 U00c6		       00	   SwatterHitDamage ds	1
    131 U00c7
    132 U00c7		       00	   SwatterIndex ds	1
    133 U00c8		       00	   SwatterDrawPos ds	1
    134 U00c9		       00	   SwatterLine ds	1
    135 U00ca
    136 U00ca		       00	   SwatterSampleCount ds	1
    137 U00cb		       00	   SwatterSampleF ds	1
    138 U00cc
    139  10000 ????				       SEG
    140  f000					      org	$F000	; Start of cart area
    141  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 86		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 87		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 86		      sta	Rand8
     49  f01e		       45 87		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 83		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 84		      sta	Temp+1
     70  f029		       85 85		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 83		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 84		      lda	Temp+1	; And add into result
     77  f031		       65 84		      adc	Temp+1
     78  f033		       85 84		      sta	Temp+1
     79  f035
     80  f035		       a5 85		      lda	Temp+2	; Propagating any carry
     81  f037		       65 85		      adc	Temp+2
     82  f039		       85 85		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 84		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 85		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    143  f044
    144  f044							; Assets
    145  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    149  f0bc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0bc					      include	"objects/score_digits.asm"
      1  f0bc				   ScoreDigits
      2  f0bc
      3  f0bc		       77		      .BYTE.b	%01110111
      4  f0bd		       55		      .BYTE.b	%01010101
      5  f0be		       55		      .BYTE.b	%01010101
      6  f0bf		       55		      .BYTE.b	%01010101
      7  f0c0		       77		      .BYTE.b	%01110111
      8  f0c1
      9  f0c1		       11		      .BYTE.b	%00010001
     10  f0c2		       11		      .BYTE.b	%00010001
     11  f0c3		       11		      .BYTE.b	%00010001
     12  f0c4		       11		      .BYTE.b	%00010001
     13  f0c5		       11		      .BYTE.b	%00010001
     14  f0c6
     15  f0c6		       77		      .BYTE.b	%01110111
     16  f0c7		       11		      .BYTE.b	%00010001
     17  f0c8		       77		      .BYTE.b	%01110111
     18  f0c9		       44		      .BYTE.b	%01000100
     19  f0ca		       77		      .BYTE.b	%01110111
     20  f0cb
     21  f0cb		       77		      .BYTE.b	%01110111
     22  f0cc		       11		      .BYTE.b	%00010001
     23  f0cd		       33		      .BYTE.b	%00110011
     24  f0ce		       11		      .BYTE.b	%00010001
     25  f0cf		       77		      .BYTE.b	%01110111
     26  f0d0
     27  f0d0		       55		      .BYTE.b	%01010101
     28  f0d1		       55		      .BYTE.b	%01010101
     29  f0d2		       77		      .BYTE.b	%01110111
     30  f0d3		       11		      .BYTE.b	%00010001
     31  f0d4		       11		      .BYTE.b	%00010001
     32  f0d5
     33  f0d5		       77		      .BYTE.b	%01110111
     34  f0d6		       44		      .BYTE.b	%01000100
     35  f0d7		       77		      .BYTE.b	%01110111
     36  f0d8		       11		      .BYTE.b	%00010001
     37  f0d9		       77		      .BYTE.b	%01110111
     38  f0da
     39  f0da		       77		      .BYTE.b	%01110111
     40  f0db		       44		      .BYTE.b	%01000100
     41  f0dc		       77		      .BYTE.b	%01110111
     42  f0dd		       55		      .BYTE.b	%01010101
     43  f0de		       77		      .BYTE.b	%01110111
     44  f0df
     45  f0df		       77		      .BYTE.b	%01110111
     46  f0e0		       11		      .BYTE.b	%00010001
     47  f0e1		       22		      .BYTE.b	%00100010
     48  f0e2		       22		      .BYTE.b	%00100010
     49  f0e3		       22		      .BYTE.b	%00100010
     50  f0e4
     51  f0e4		       77		      .BYTE.b	%01110111
     52  f0e5		       55		      .BYTE.b	%01010101
     53  f0e6		       77		      .BYTE.b	%01110111
     54  f0e7		       55		      .BYTE.b	%01010101
     55  f0e8		       77		      .BYTE.b	%01110111
     56  f0e9
     57  f0e9		       77		      .BYTE.b	%01110111
     58  f0ea		       55		      .BYTE.b	%01010101
     59  f0eb		       77		      .BYTE.b	%01110111
     60  f0ec		       11		      .BYTE.b	%00010001
     61  f0ed		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f0ee					      include	"objects/score_digits_flip.asm"
      1  f0ee				   ScoreDigitsFlip
      2  f0ee
      3  f0ee		       ee		      .BYTE.b	%11101110
      4  f0ef		       aa		      .BYTE.b	%10101010
      5  f0f0		       aa		      .BYTE.b	%10101010
      6  f0f1		       aa		      .BYTE.b	%10101010
      7  f0f2		       ee		      .BYTE.b	%11101110
      8  f0f3
      9  f0f3		       88		      .BYTE.b	%10001000
     10  f0f4		       88		      .BYTE.b	%10001000
     11  f0f5		       88		      .BYTE.b	%10001000
     12  f0f6		       88		      .BYTE.b	%10001000
     13  f0f7		       88		      .BYTE.b	%10001000
     14  f0f8
     15  f0f8		       ee		      .BYTE.b	%11101110
     16  f0f9		       88		      .BYTE.b	%10001000
     17  f0fa		       ee		      .BYTE.b	%11101110
     18  f0fb		       22		      .BYTE.b	%00100010
     19  f0fc		       ee		      .BYTE.b	%11101110
     20  f0fd
     21  f0fd		       ee		      .BYTE.b	%11101110
     22  f0fe		       88		      .BYTE.b	%10001000
     23  f0ff		       cc		      .BYTE.b	%11001100
     24  f100		       88		      .BYTE.b	%10001000
     25  f101		       ee		      .BYTE.b	%11101110
     26  f102
     27  f102		       aa		      .BYTE.b	%10101010
     28  f103		       aa		      .BYTE.b	%10101010
     29  f104		       ee		      .BYTE.b	%11101110
     30  f105		       88		      .BYTE.b	%10001000
     31  f106		       88		      .BYTE.b	%10001000
     32  f107
     33  f107		       ee		      .BYTE.b	%11101110
     34  f108		       22		      .BYTE.b	%00100010
     35  f109		       ee		      .BYTE.b	%11101110
     36  f10a		       88		      .BYTE.b	%10001000
     37  f10b		       ee		      .BYTE.b	%11101110
     38  f10c
     39  f10c		       ee		      .BYTE.b	%11101110
     40  f10d		       22		      .BYTE.b	%00100010
     41  f10e		       ee		      .BYTE.b	%11101110
     42  f10f		       aa		      .BYTE.b	%10101010
     43  f110		       ee		      .BYTE.b	%11101110
     44  f111
     45  f111		       ee		      .BYTE.b	%11101110
     46  f112		       88		      .BYTE.b	%10001000
     47  f113		       44		      .BYTE.b	%01000100
     48  f114		       44		      .BYTE.b	%01000100
     49  f115		       44		      .BYTE.b	%01000100
     50  f116
     51  f116		       ee		      .BYTE.b	%11101110
     52  f117		       aa		      .BYTE.b	%10101010
     53  f118		       ee		      .BYTE.b	%11101110
     54  f119		       aa		      .BYTE.b	%10101010
     55  f11a		       ee		      .BYTE.b	%11101110
     56  f11b
     57  f11b		       ee		      .BYTE.b	%11101110
     58  f11c		       aa		      .BYTE.b	%10101010
     59  f11d		       ee		      .BYTE.b	%11101110
     60  f11e		       88		      .BYTE.b	%10001000
     61  f11f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f120					      include	"objects/score_label.asm"
      1  f120				   ScoreLabel
      2  f120
      3  f120		       20		      .BYTE.b	%00100000
      4  f121		       50		      .BYTE.b	%01010000
      5  f122		       ee		      .BYTE.b	%11101110
      6  f123		       00		      .BYTE.b	%00000000
      7  f124		       57		      .BYTE.b	%01010111
      8  f125		       00		      .BYTE.b	%00000000
      9  f126
     10  f126		       20		      .BYTE.b	%00100000
     11  f127		       50		      .BYTE.b	%01010000
     12  f128		       4a		      .BYTE.b	%01001010
     13  f129		       00		      .BYTE.b	%00000000
     14  f12a		       55		      .BYTE.b	%01010101
     15  f12b		       00		      .BYTE.b	%00000000
     16  f12c
     17  f12c		       20		      .BYTE.b	%00100000
     18  f12d		       50		      .BYTE.b	%01010000
     19  f12e		       4e		      .BYTE.b	%01001110
     20  f12f		       00		      .BYTE.b	%00000000
     21  f130		       77		      .BYTE.b	%01110111
     22  f131		       00		      .BYTE.b	%00000000
     23  f132
     24  f132		       20		      .BYTE.b	%00100000
     25  f133		       50		      .BYTE.b	%01010000
     26  f134		       42		      .BYTE.b	%01000010
     27  f135		       00		      .BYTE.b	%00000000
     28  f136		       54		      .BYTE.b	%01010100
     29  f137		       00		      .BYTE.b	%00000000
     30  f138
     31  f138		       e0		      .BYTE.b	%11100000
     32  f139		       20		      .BYTE.b	%00100000
     33  f13a		       42		      .BYTE.b	%01000010
     34  f13b		       00		      .BYTE.b	%00000000
     35  f13c		       54		      .BYTE.b	%01010100
     36  f13d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    153  f13e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f13e					      include	"objects/web_image.asm"
      1  f13e				   WebImagePF0
      2  f13e		       00		      .BYTE.b	%00000000
      3  f13f		       00		      .BYTE.b	%00000000
      4  f140		       00		      .BYTE.b	%00000000
      5  f141		       00		      .BYTE.b	%00000000
      6  f142		       00		      .BYTE.b	%00000000
      7  f143		       00		      .BYTE.b	%00000000
      8  f144		       00		      .BYTE.b	%00000000
      9  f145		       00		      .BYTE.b	%00000000
     10  f146		       00		      .BYTE.b	%00000000
     11  f147		       30		      .BYTE.b	%00110000
     12  f148		       e0		      .BYTE.b	%11100000
     13  f149		       20		      .BYTE.b	%00100000
     14  f14a		       40		      .BYTE.b	%01000000
     15  f14b		       40		      .BYTE.b	%01000000
     16  f14c		       80		      .BYTE.b	%10000000
     17  f14d		       80		      .BYTE.b	%10000000
     18  f14e		       40		      .BYTE.b	%01000000
     19  f14f		       40		      .BYTE.b	%01000000
     20  f150		       20		      .BYTE.b	%00100000
     21  f151		       e0		      .BYTE.b	%11100000
     22  f152		       30		      .BYTE.b	%00110000
     23  f153		       00		      .BYTE.b	%00000000
     24  f154		       00		      .BYTE.b	%00000000
     25  f155		       00		      .BYTE.b	%00000000
     26  f156		       00		      .BYTE.b	%00000000
     27  f157		       00		      .BYTE.b	%00000000
     28  f158		       00		      .BYTE.b	%00000000
     29  f159		       00		      .BYTE.b	%00000000
     30  f15a		       00		      .BYTE.b	%00000000
     31  f15b		       00		      .BYTE.b	%00000000
     32  f15c
     33  f15c				   WebImagePF1
     34  f15c		       08		      .BYTE.b	%00001000
     35  f15d		       06		      .BYTE.b	%00000110
     36  f15e		       01		      .BYTE.b	%00000001
     37  f15f		       00		      .BYTE.b	%00000000
     38  f160		       00		      .BYTE.b	%00000000
     39  f161		       01		      .BYTE.b	%00000001
     40  f162		       01		      .BYTE.b	%00000001
     41  f163		       02		      .BYTE.b	%00000010
     42  f164		       0c		      .BYTE.b	%00001100
     43  f165		       30		      .BYTE.b	%00110000
     44  f166		       c0		      .BYTE.b	%11000000
     45  f167		       38		      .BYTE.b	%00111000
     46  f168		       07		      .BYTE.b	%00000111
     47  f169		       00		      .BYTE.b	%00000000
     48  f16a		       00		      .BYTE.b	%00000000
     49  f16b		       00		      .BYTE.b	%00000000
     50  f16c		       00		      .BYTE.b	%00000000
     51  f16d		       07		      .BYTE.b	%00000111
     52  f16e		       38		      .BYTE.b	%00111000
     53  f16f		       c0		      .BYTE.b	%11000000
     54  f170		       30		      .BYTE.b	%00110000
     55  f171		       0c		      .BYTE.b	%00001100
     56  f172		       02		      .BYTE.b	%00000010
     57  f173		       01		      .BYTE.b	%00000001
     58  f174		       01		      .BYTE.b	%00000001
     59  f175		       00		      .BYTE.b	%00000000
     60  f176		       00		      .BYTE.b	%00000000
     61  f177		       01		      .BYTE.b	%00000001
     62  f178		       06		      .BYTE.b	%00000110
     63  f179		       08		      .BYTE.b	%00001000
     64  f17a
     65  f17a				   WebImagePF2
     66  f17a		       20		      .BYTE.b	%00100000
     67  f17b		       18		      .BYTE.b	%00011000
     68  f17c		       04		      .BYTE.b	%00000100
     69  f17d		       03		      .BYTE.b	%00000011
     70  f17e		       3f		      .BYTE.b	%00111111
     71  f17f		       c2		      .BYTE.b	%11000010
     72  f180		       04		      .BYTE.b	%00000100
     73  f181		       08		      .BYTE.b	%00001000
     74  f182		       08		      .BYTE.b	%00001000
     75  f183		       10		      .BYTE.b	%00010000
     76  f184		       20		      .BYTE.b	%00100000
     77  f185		       20		      .BYTE.b	%00100000
     78  f186		       41		      .BYTE.b	%01000001
     79  f187		       8e		      .BYTE.b	%10001110
     80  f188		       f0		      .BYTE.b	%11110000
     81  f189		       f0		      .BYTE.b	%11110000
     82  f18a		       8e		      .BYTE.b	%10001110
     83  f18b		       41		      .BYTE.b	%01000001
     84  f18c		       20		      .BYTE.b	%00100000
     85  f18d		       20		      .BYTE.b	%00100000
     86  f18e		       10		      .BYTE.b	%00010000
     87  f18f		       08		      .BYTE.b	%00001000
     88  f190		       08		      .BYTE.b	%00001000
     89  f191		       04		      .BYTE.b	%00000100
     90  f192		       c2		      .BYTE.b	%11000010
     91  f193		       3f		      .BYTE.b	%00111111
     92  f194		       03		      .BYTE.b	%00000011
     93  f195		       04		      .BYTE.b	%00000100
     94  f196		       18		      .BYTE.b	%00011000
     95  f197		       20		      .BYTE.b	%00100000
------- FILE kernel.asm
    155  f198
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f198					      include	"objects/spider_sprite.asm"
      1  f198				   SpiderSprite
      2  f198
      3  f198		       99		      .BYTE.b	%10011001
      4  f199		       99		      .BYTE.b	%10011001
      5  f19a		       bd		      .BYTE.b	%10111101
      6  f19b		       bd		      .BYTE.b	%10111101
      7  f19c		       99		      .BYTE.b	%10011001
      8  f19d		       99		      .BYTE.b	%10011001
      9  f19e		       7e		      .BYTE.b	%01111110
     10  f19f		       3c		      .BYTE.b	%00111100
     11  f1a0		       3c		      .BYTE.b	%00111100
     12  f1a1		       18		      .BYTE.b	%00011000
     13  f1a2		       3c		      .BYTE.b	%00111100
     14  f1a3		       7e		      .BYTE.b	%01111110
     15  f1a4		       bd		      .BYTE.b	%10111101
     16  f1a5		       bd		      .BYTE.b	%10111101
     17  f1a6		       bd		      .BYTE.b	%10111101
     18  f1a7		       99		      .BYTE.b	%10011001
     19  f1a8
     20  f1a8		       0b		      .BYTE.b	%00001011
     21  f1a9		       0b		      .BYTE.b	%00001011
     22  f1aa		       13		      .BYTE.b	%00010011
     23  f1ab		       13		      .BYTE.b	%00010011
     24  f1ac		       1c		      .BYTE.b	%00011100
     25  f1ad		       1c		      .BYTE.b	%00011100
     26  f1ae		       3d		      .BYTE.b	%00111101
     27  f1af		       3d		      .BYTE.b	%00111101
     28  f1b0		       7e		      .BYTE.b	%01111110
     29  f1b1		       fe		      .BYTE.b	%11111110
     30  f1b2		       b8		      .BYTE.b	%10111000
     31  f1b3		       b8		      .BYTE.b	%10111000
     32  f1b4		       10		      .BYTE.b	%00010000
     33  f1b5		       10		      .BYTE.b	%00010000
     34  f1b6		       30		      .BYTE.b	%00110000
     35  f1b7		       20		      .BYTE.b	%00100000
     36  f1b8
     37  f1b8		       c7		      .BYTE.b	%11000111
     38  f1b9		       c7		      .BYTE.b	%11000111
     39  f1ba		       28		      .BYTE.b	%00101000
     40  f1bb		       28		      .BYTE.b	%00101000
     41  f1bc		       3a		      .BYTE.b	%00111010
     42  f1bd		       7a		      .BYTE.b	%01111010
     43  f1be		       fd		      .BYTE.b	%11111101
     44  f1bf		       ff		      .BYTE.b	%11111111
     45  f1c0		       ff		      .BYTE.b	%11111111
     46  f1c1		       fd		      .BYTE.b	%11111101
     47  f1c2		       7a		      .BYTE.b	%01111010
     48  f1c3		       3a		      .BYTE.b	%00111010
     49  f1c4		       28		      .BYTE.b	%00101000
     50  f1c5		       28		      .BYTE.b	%00101000
     51  f1c6		       c7		      .BYTE.b	%11000111
     52  f1c7		       c7		      .BYTE.b	%11000111
     53  f1c8
     54  f1c8		       20		      .BYTE.b	%00100000
     55  f1c9		       30		      .BYTE.b	%00110000
     56  f1ca		       10		      .BYTE.b	%00010000
     57  f1cb		       10		      .BYTE.b	%00010000
     58  f1cc		       b8		      .BYTE.b	%10111000
     59  f1cd		       bc		      .BYTE.b	%10111100
     60  f1ce		       fc		      .BYTE.b	%11111100
     61  f1cf		       7e		      .BYTE.b	%01111110
     62  f1d0		       3f		      .BYTE.b	%00111111
     63  f1d1		       1d		      .BYTE.b	%00011101
     64  f1d2		       0c		      .BYTE.b	%00001100
     65  f1d3		       1c		      .BYTE.b	%00011100
     66  f1d4		       13		      .BYTE.b	%00010011
     67  f1d5		       13		      .BYTE.b	%00010011
     68  f1d6		       0b		      .BYTE.b	%00001011
     69  f1d7		       0b		      .BYTE.b	%00001011
     70  f1d8
     71  f1d8		       99		      .BYTE.b	%10011001
     72  f1d9		       bd		      .BYTE.b	%10111101
     73  f1da		       bd		      .BYTE.b	%10111101
     74  f1db		       bd		      .BYTE.b	%10111101
     75  f1dc		       7e		      .BYTE.b	%01111110
     76  f1dd		       3c		      .BYTE.b	%00111100
     77  f1de		       18		      .BYTE.b	%00011000
     78  f1df		       3c		      .BYTE.b	%00111100
     79  f1e0		       3c		      .BYTE.b	%00111100
     80  f1e1		       7e		      .BYTE.b	%01111110
     81  f1e2		       99		      .BYTE.b	%10011001
     82  f1e3		       99		      .BYTE.b	%10011001
     83  f1e4		       bd		      .BYTE.b	%10111101
     84  f1e5		       bd		      .BYTE.b	%10111101
     85  f1e6		       99		      .BYTE.b	%10011001
     86  f1e7		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    157  f1e8
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1e8					      include	"objects/swatter_sprite.asm"
      1  f1e8				   SwatterSprite
      2  f1e8
      3  f1e8		       3c		      .BYTE.b	%00111100
      4  f1e9		       3c		      .BYTE.b	%00111100
      5  f1ea		       56		      .BYTE.b	%01010110
      6  f1eb		       6a		      .BYTE.b	%01101010
      7  f1ec		       d5		      .BYTE.b	%11010101
      8  f1ed		       ab		      .BYTE.b	%10101011
      9  f1ee		       d5		      .BYTE.b	%11010101
     10  f1ef		       ab		      .BYTE.b	%10101011
     11  f1f0		       d5		      .BYTE.b	%11010101
     12  f1f1		       ab		      .BYTE.b	%10101011
     13  f1f2		       d5		      .BYTE.b	%11010101
     14  f1f3		       ab		      .BYTE.b	%10101011
     15  f1f4		       56		      .BYTE.b	%01010110
     16  f1f5		       6a		      .BYTE.b	%01101010
     17  f1f6		       56		      .BYTE.b	%01010110
     18  f1f7		       6a		      .BYTE.b	%01101010
     19  f1f8		       34		      .BYTE.b	%00110100
     20  f1f9		       2c		      .BYTE.b	%00101100
     21  f1fa		       34		      .BYTE.b	%00110100
     22  f1fb		       18		      .BYTE.b	%00011000
------- FILE kernel.asm
    159  f1fc
    160  f1fc				   InitSystem
    161  f1fc
    162  f1fc				   .init_clean
    163  f1fc							; Resets RAM, TIA registers, and CPU registers
      0  f1fc					      CLEAN_START
      1  f1fc		       78		      sei
      2  f1fd		       d8		      cld
      3  f1fe
      4  f1fe		       a2 00		      ldx	#0
      5  f200		       8a		      txa
      6  f201		       a8		      tay
      7  f202		       ca	   .CLEAR_STACK dex
      8  f203		       9a		      txs
      9  f204		       48		      pha
     10  f205		       d0 fb		      bne	.CLEAR_STACK
     11  f207
    165  f207
    166  f207				   .init_tia
    167  f207							; Define default TIA register values
    168  f207
    169  f207							; Initialize copies
    170  f207		       a9 00		      lda	#0
    171  f209		       85 80		      sta	CtrlPf
    172  f20b		       85 81		      sta	NuSiz0
    173  f20d		       85 82		      sta	NuSiz1
    174  f20f
    175  f20f							; Set background color
    176  f20f		       a9 00		      lda	#$00	; Black
    177  f211		       85 09		      sta	COLUBK
    178  f213
    179  f213							; Set the playfield and player color
    180  f213		       a9 0e		      lda	#$0E	; White
    181  f215		       85 08		      sta	COLUPF
    182  f217		       85 06		      sta	COLUP0
    183  f219		       85 07		      sta	COLUP1
    184  f21b
    185  f21b							; Playfield Control
    186  f21b		       a9 01		      lda	#%00000001	; 1 for mirroring
    187  f21d		       85 80		      sta	CtrlPf
    188  f21f		       85 0a		      sta	CTRLPF
    189  f221
    190  f221							; Disable Game Elements
    191  f221		       a9 00		      lda	#$00
    192  f223		       85 1f		      sta	ENABL	; Turn off ball
    193  f225		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    194  f227		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    195  f229		       85 1b		      sta	GRP0	; Turn off player 1
    196  f22b		       85 1c		      sta	GRP1	; Turn off player 2
    197  f22d
    198  f22d							; Empty playfield
    199  f22d		       a9 00		      lda	#%00000000
    200  f22f		       85 0d		      sta	PF0
    201  f231		       85 0e		      sta	PF1
    202  f233		       85 0f		      sta	PF2
    203  f235
    204  f235				   .init_seed
    205  f235							; Seed the random number generator
    206  f235		       ad 84 02 	      lda	INTIM	; Unknown value
    207  f238		       85 86		      sta	Rand8	; Use as seed
    208  f23a		       49 ff		      eor	#$FF	; Flip bits
    209  f23c		       85 87		      sta	Rand16	; Just in case INTIM was 0
    210  f23e
    211  f23e				   .init_game
    212  f23e
    213  f23e							;   jsr LogoInit
    214  f23e		       20 a6 f2 	      jsr	TitleInit
    215  f241
    216  f241							;=======================================
    217  f241							; Game Kernel
    218  f241							;=======================================
    219  f241
    220  f241				   Main
    221  f241
    222  f241		       20 50 f2 	      jsr	VerticalSync
    223  f244		       20 69 f2 	      jsr	VerticalBlank
    224  f247		       20 7c f2 	      jsr	Kernel
    225  f24a		       20 83 f2 	      jsr	OverScan
    226  f24d		       4c 41 f2 	      jmp	Main
    227  f250
    228  f250				   VerticalSync
    229  f250
    230  f250		       a9 00		      lda	#0
    231  f252		       85 01		      sta	VBLANK
    232  f254
    233  f254							; Turn on Vertical Sync signal and setup timer
    234  f254		       a9 02		      lda	#2
    235  f256		       85 00		      sta	VSYNC
    236  f258
    237  f258							; Increment frame count and reduce frame counter
    238  f258		       e6 8e		      inc	Frame
    239  f25a		       c6 8f		      dec	FrameTimer
    240  f25c		       c6 90		      dec	FrameTimer+1
    241  f25e
    242  f25e							; VSYNCH signal scanlines
    243  f25e					      REPEAT	#KERNEL_VSYNC
    244  f25e		       85 02		      sta	WSYNC
    243  f25e					      REPEND
    244  f260		       85 02		      sta	WSYNC
    243  f260					      REPEND
    244  f262		       85 02		      sta	WSYNC
    245  f264					      REPEND
    246  f264
    247  f264							; Turn off Vertical Sync signal
    248  f264		       a9 00		      lda	#0
    249  f266		       85 00		      sta	VSYNC
    250  f268
    251  f268				   .vsync_return
    252  f268		       60		      rts
    253  f269
    254  f269				   VerticalBlank
    255  f269							; Setup Timer
    256  f269		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    257  f26b		       8d 96 02 	      sta	TIM64T
    258  f26e
    259  f26e				   .vblank_logic
    260  f26e							; Perform Game Logic
    261  f26e		       20 79 f2 	      jsr	.vblank_logic_call_ptr
    262  f271
    263  f271				   .vblank_loop
    264  f271							; WSYNC until Timer is complete
    265  f271		       85 02		      sta	WSYNC
    266  f273		       ad 84 02 	      lda	INTIM
    267  f276		       d0 f9		      bne	.vblank_loop
    268  f278
    269  f278				   .vblank_return
    270  f278		       60		      rts
    271  f279
    272  f279				   .vblank_logic_call_ptr
    273  f279		       6c 88 00 	      jmp	(VBlankPtr)
    274  f27c
    275  f27c				   Kernel
    276  f27c
    277  f27c							; Perform Selected Kernel
    278  f27c		       20 80 f2 	      jsr	.kernel_call_ptr
    279  f27f		       60		      rts
    280  f280
    281  f280				   .kernel_call_ptr
    282  f280		       6c 8a 00 	      jmp	(KernelPtr)
    283  f283
    284  f283				   OverScan
    285  f283
    286  f283							; End of screen, enter blanking
    287  f283		       a9 42		      lda	#%01000010
    288  f285		       85 01		      sta	VBLANK
    289  f287
    290  f287							; Setup Timer
    291  f287		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    292  f289		       8d 96 02 	      sta	TIM64T
    293  f28c
    294  f28c							;.overscan_reset:
    295  f28c							; Check for reset switch
    296  f28c		       ad 82 02 	      lda	SWCHB
    297  f28f		       4a		      lsr		; Push D0 to carry (C)
    298  f290		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    299  f292
    300  f292							; Perform reset
    301  f292							;    jsr LogoInit	      ; No need for logic
    302  f292		       20 a6 f2 	      jsr	TitleInit
    303  f295		       4c 9b f2 	      jmp	.overscan_loop
    304  f298
    305  f298				   .overscan_logic
    306  f298							; Perform OverScan Logic
    307  f298		       20 a3 f2 	      jsr	.overscan_logic_call_ptr
    308  f29b
    309  f29b				   .overscan_loop
    310  f29b							; WSYNC until Timer is complete
    311  f29b		       85 02		      sta	WSYNC
    312  f29d		       ad 84 02 	      lda	INTIM
    313  f2a0		       d0 f9		      bne	.overscan_loop
    314  f2a2
    315  f2a2				   .overscan_return
    316  f2a2		       60		      rts
    317  f2a3
    318  f2a3				   .overscan_logic_call_ptr
    319  f2a3		       6c 8c 00 	      jmp	(OverScanPtr)
    320  f2a6
    321  f2a6							;================
    322  f2a6							; State Code
    323  f2a6							;================
    324  f2a6
    325  f2a6							;    include "logo.asm"
------- FILE title.asm LEVEL 2 PASS 2
      0  f2a6					      include	"title.asm"
      1  f2a6							;================
      2  f2a6							; Constants
      3  f2a6							;================
      4  f2a6
      5  f2a6		       00 00	   TITLE_BG_COLOR =	#$00
      6  f2a6		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f2a6		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f2a6		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f2a6		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f2a6
     11  f2a6		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f2a6		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f2a6		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f2a6		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f2a6		       00 09	   TITLE_AUDIO_STEP =	9
     16  f2a6
     17  f2a6		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f2a6		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f2a6		       00 07	   TITLE_LABEL_LINE =	7
     20  f2a6
     21  f2a6		       00 10	   TITLE_GAP_SIZE =	#16
     22  f2a6
     23  f2a6		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f2a6		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f2a6		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f2a6
     27  f2a6				   TitleInit
     28  f2a6
     29  f2a6							; Setup logic and kernel
      0  f2a6					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f2a6				   .POINTER   SET	VBlankPtr
      2  f2a6				   .ADDRESS   SET	TitleVerticalBlank
      3  f2a6
      4  f2a6		       a9 05		      LDA	#<.ADDRESS
      5  f2a8		       85 88		      STA	.POINTER
      6  f2aa		       a9 f3		      LDA	#>.ADDRESS
      7  f2ac		       85 89		      STA	.POINTER+1
      8  f2ae
      0  f2ae					      SET_POINTER	KernelPtr, TitleKernel
      1  f2ae				   .POINTER   SET	KernelPtr
      2  f2ae				   .ADDRESS   SET	TitleKernel
      3  f2ae
      4  f2ae		       a9 bf		      LDA	#<.ADDRESS
      5  f2b0		       85 8a		      STA	.POINTER
      6  f2b2		       a9 f3		      LDA	#>.ADDRESS
      7  f2b4		       85 8b		      STA	.POINTER+1
      8  f2b6
      0  f2b6					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f2b6				   .POINTER   SET	OverScanPtr
      2  f2b6				   .ADDRESS   SET	TitleOverScan
      3  f2b6
      4  f2b6		       a9 78		      LDA	#<.ADDRESS
      5  f2b8		       85 8c		      STA	.POINTER
      6  f2ba		       a9 f3		      LDA	#>.ADDRESS
      7  f2bc		       85 8d		      STA	.POINTER+1
      8  f2be
     33  f2be
     34  f2be							; Load audio settings
     35  f2be
     36  f2be							; Melody Line
     37  f2be		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f2c0		       85 15		      sta	AUDC0
     39  f2c2		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f2c4		       85 19		      sta	AUDV0
     41  f2c6
     42  f2c6							; Drums and Bass
     43  f2c6		       a9 00		      lda	#0
     44  f2c8		       85 16		      sta	AUDC1
     45  f2ca		       85 1a		      sta	AUDV1
     46  f2cc
     47  f2cc							; Make it so that we play the first note immediately
     48  f2cc		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f2ce		       85 91		      sta	AudioStep
     50  f2d0		       a9 01		      lda	#1
     51  f2d2		       85 8f		      sta	FrameTimer
     52  f2d4
     53  f2d4							; Setup Spider Sprite
      0  f2d4					      SET_POINTER	SpiderPtr, TitleSpider
      1  f2d4				   .POINTER   SET	SpiderPtr
      2  f2d4				   .ADDRESS   SET	TitleSpider
      3  f2d4
      4  f2d4		       a9 aa		      LDA	#<.ADDRESS
      5  f2d6		       85 a2		      STA	.POINTER
      6  f2d8		       a9 f0		      LDA	#>.ADDRESS
      7  f2da		       85 a3		      STA	.POINTER+1
      8  f2dc
     55  f2dc
     56  f2dc		       a5 81		      lda	NuSiz0
     57  f2de		       29 f8		      and	#%11111000
     58  f2e0		       09 06		      ora	#%00000110	; Triple Sprite
     59  f2e2		       85 81		      sta	NuSiz0
     60  f2e4		       85 04		      sta	NUSIZ0
     61  f2e6		       85 82		      sta	NuSiz1
     62  f2e8		       85 05		      sta	NUSIZ1
     63  f2ea
     64  f2ea		       a9 00		      lda	#0	; No reflect
     65  f2ec		       85 0b		      sta	REFP0
     66  f2ee		       a9 ff		      lda	#$FF	; Reflect P1
     67  f2f0		       85 0c		      sta	REFP1
     68  f2f2
     69  f2f2		       a9 00		      lda	#0
     70  f2f4		       85 a9		      sta	SpiderDrawPos	; Initialize animation state
     71  f2f6
     72  f2f6							; Setup Web Line
     73  f2f6							; Missle0 (2 clock size)
     74  f2f6		       a5 81		      lda	NuSiz0
     75  f2f8		       29 cf		      and	#%11001111
     76  f2fa		       09 10		      ora	#%00010000
     77  f2fc		       85 81		      sta	NuSiz0
     78  f2fe		       85 04		      sta	NUSIZ0
     79  f300
     80  f300							; Disable at start
     81  f300		       a9 00		      lda	#0
     82  f302		       85 1d		      sta	ENAM0
     83  f304
     84  f304		       60		      rts
     85  f305
     86  f305				   TitleVerticalBlank
     87  f305
     88  f305							; Refresh random values
     89  f305		       20 13 f0 	      jsr	Random
     90  f308
     91  f308		       20 12 f3 	      jsr	TitlePosition
     92  f30b		       20 2c f3 	      jsr	TitleAnimation
     93  f30e		       20 59 f3 	      jsr	TitleColor
     94  f311
     95  f311		       60		      rts
     96  f312
     97  f312				   TitlePosition
     98  f312
     99  f312							; Position Spider
    100  f312		       a2 00		      ldx	#0	; Object (player0)
    101  f314		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    102  f316		       20 00 f0 	      jsr	PosObject
    103  f319
    104  f319		       a2 01		      ldx	#1	; Object (player1)
    105  f31b		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    106  f31d		       20 00 f0 	      jsr	PosObject
    107  f320
    108  f320							; Position Web Line
    109  f320		       a2 02		      ldx	#2	; Object (missle0)
    110  f322		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    111  f324		       20 00 f0 	      jsr	PosObject
    112  f327
    113  f327		       85 02		      sta	WSYNC
    114  f329		       85 2a		      sta	HMOVE
    115  f32b
    116  f32b		       60		      rts
    117  f32c
    118  f32c				   TitleAnimation
    119  f32c
    120  f32c		       a5 91		      lda	AudioStep
    121  f32e		       c9 00		      cmp	#0
    122  f330		       f0 0d		      beq	.title_animation_1
    123  f332		       c9 04		      cmp	#4
    124  f334		       f0 16		      beq	.title_animation_2
    125  f336		       c9 09		      cmp	#9
    126  f338		       f0 05		      beq	.title_animation_1
    127  f33a		       c9 0c		      cmp	#12
    128  f33c		       f0 0e		      beq	.title_animation_2
    129  f33e		       60		      rts
    130  f33f
    131  f33f				   .title_animation_1
      0  f33f					      SET_POINTER	SpiderPtr, TitleSpider
      1  f33f				   .POINTER   SET	SpiderPtr
      2  f33f				   .ADDRESS   SET	TitleSpider
      3  f33f
      4  f33f		       a9 aa		      LDA	#<.ADDRESS
      5  f341		       85 a2		      STA	.POINTER
      6  f343		       a9 f0		      LDA	#>.ADDRESS
      7  f345		       85 a3		      STA	.POINTER+1
      8  f347
    133  f347		       a9 00		      lda	#0
    134  f349		       85 a9		      sta	SpiderDrawPos
    135  f34b		       60		      rts
    136  f34c
    137  f34c				   .title_animation_2
      0  f34c					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f34c				   .POINTER   SET	SpiderPtr
      2  f34c				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f34c
      4  f34c		       a9 b3		      LDA	#<.ADDRESS
      5  f34e		       85 a2		      STA	.POINTER
      6  f350		       a9 f0		      LDA	#>.ADDRESS
      7  f352		       85 a3		      STA	.POINTER+1
      8  f354
    139  f354		       a9 01		      lda	#1
    140  f356		       85 a9		      sta	SpiderDrawPos
    141  f358		       60		      rts
    142  f359
    143  f359				   TitleColor
    144  f359
    145  f359							; Load Colors
    146  f359		       a9 00		      lda	#TITLE_BG_COLOR
    147  f35b		       85 09		      sta	COLUBK
    148  f35d		       a9 06		      lda	#TITLE_WEB_COLOR
    149  f35f		       85 08		      sta	COLUPF
    150  f361
    151  f361							; Check b/w
    152  f361		       ad 82 02 	      lda	SWCHB
    153  f364					      REPEAT	4
    154  f364		       4a		      lsr
    153  f364					      REPEND
    154  f365		       4a		      lsr
    153  f365					      REPEND
    154  f366		       4a		      lsr
    153  f366					      REPEND
    154  f367		       4a		      lsr
    155  f368					      REPEND
    156  f368		       90 07		      bcc	.title_bw
    157  f36a
    158  f36a				   .title_color
    159  f36a		       a9 56		      lda	#TITLE_SPIDER_COLOR
    160  f36c		       85 06		      sta	COLUP0
    161  f36e		       85 07		      sta	COLUP1
    162  f370
    163  f370		       60		      rts
    164  f371
    165  f371				   .title_bw
    166  f371							; Load B/W Colors
    167  f371		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    168  f373		       85 06		      sta	COLUP0
    169  f375		       85 07		      sta	COLUP1
    170  f377
    171  f377		       60		      rts
    172  f378
    173  f378				   TitleOverScan
    174  f378		       20 7f f3 	      jsr	TitleAudio
    175  f37b		       20 b7 f3 	      jsr	TitleState
    176  f37e		       60		      rts
    177  f37f
    178  f37f				   TitleAudio
    179  f37f
    180  f37f		       a6 8f		      ldx	FrameTimer
    181  f381		       e0 00		      cpx	#0
    182  f383		       d0 31		      bne	.title_audio_return
    183  f385
    184  f385							; Reset Timer
    185  f385		       a2 09		      ldx	#TITLE_AUDIO_STEP
    186  f387		       86 8f		      stx	FrameTimer
    187  f389
    188  f389				   .title_audio_play
    189  f389
    190  f389							; Increment melody position
    191  f389		       a4 91		      ldy	AudioStep
    192  f38b		       c8		      iny
    193  f38c
    194  f38c							; Check if we're at the end of the melody
    195  f38c		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    196  f38e		       d0 02		      bne	.title_audio_play_note
    197  f390
    198  f390							; Loop our audio step
    199  f390		       a0 00		      ldy	#0
    200  f392
    201  f392				   .title_audio_play_note
    202  f392
    203  f392							; Save current position
    204  f392		       84 91		      sty	AudioStep
    205  f394
    206  f394							; Basic Melody Line
    207  f394		       b9 ab f4 	      lda	TitleAudio0,y
    208  f397		       85 17		      sta	AUDF0
    209  f399
    210  f399							; Drums and Bass
    211  f399		       b9 bb f4 	      lda	TitleTone1,y
    212  f39c		       c9 ff		      cmp	#$FF
    213  f39e		       f0 0e		      beq	.title_audio_play_note_1_mute
    214  f3a0
    215  f3a0		       85 16		      sta	AUDC1
    216  f3a2		       b9 cb f4 	      lda	TitleAudio1,y
    217  f3a5		       85 18		      sta	AUDF1
    218  f3a7		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    219  f3a9		       85 1a		      sta	AUDV1
    220  f3ab
    221  f3ab		       4c b6 f3 	      jmp	.title_audio_return
    222  f3ae
    223  f3ae				   .title_audio_play_note_1_mute
    224  f3ae
    225  f3ae		       a9 00		      lda	#0
    226  f3b0		       85 18		      sta	AUDF1
    227  f3b2		       85 16		      sta	AUDC1
    228  f3b4		       85 1a		      sta	AUDV1
    229  f3b6
    230  f3b6				   .title_audio_return
    231  f3b6		       60		      rts
    232  f3b7
    233  f3b7				   TitleState
    234  f3b7							; Check if Fire Button on controller 1 is pressed
    235  f3b7		       a5 0c		      lda	INPT4
    236  f3b9		       30 03		      bmi	.title_state_return
    237  f3bb
    238  f3bb		       20 6a fc 	      jsr	GameInit
    239  f3be
    240  f3be				   .title_state_return
    241  f3be		       60		      rts
    242  f3bf
    243  f3bf				   TitleKernel
    244  f3bf
    245  f3bf							; Playfield Control
    246  f3bf		       a5 80		      lda	CtrlPf
    247  f3c1		       29 fe		      and	#%11111110	; No mirroring
    248  f3c3		       85 80		      sta	CtrlPf
    249  f3c5		       85 0a		      sta	CTRLPF
    250  f3c7
    251  f3c7							; Turn on display
    252  f3c7		       a9 00		      lda	#0
    253  f3c9		       85 01		      sta	VBLANK
    254  f3cb
    255  f3cb		       85 02		      sta	WSYNC
    256  f3cd
    257  f3cd				   TitleFrameTopDraw
    258  f3cd
    259  f3cd							; Start Counters
    260  f3cd		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    261  f3cf		       a0 00		      ldy	#0	; Image Counter
    262  f3d1
    263  f3d1				   .title_frame_top
    264  f3d1
    265  f3d1							; 76 machine cycles per scanline
    266  f3d1		       85 02		      sta	WSYNC
    267  f3d3
    268  f3d3				   .title_frame_top_load		; 66 cycles
    269  f3d3
    270  f3d3							; First half of image
    271  f3d3		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    272  f3d6		       85 0d		      sta	PF0	; 4
    273  f3d8		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    274  f3db		       85 0e		      sta	PF1	; 4
    275  f3dd		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    276  f3e0		       85 0f		      sta	PF2	; 4
    277  f3e2
      0  f3e2					      sleep	6
      1  f3e2				   .CYCLES    SET	6
      2  f3e2
      3  f3e2				  -	      IF	.CYCLES < 2
      4  f3e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e2				  -	      ERR
      6  f3e2					      ENDIF
      7  f3e2
      8  f3e2				  -	      IF	.CYCLES & 1
      9  f3e2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e2				  -	      nop	0
     11  f3e2				  -	      ELSE
     12  f3e2				  -	      bit	VSYNC
     13  f3e2				  -	      ENDIF
     14  f3e2				  -.CYCLES    SET	.CYCLES - 3
     15  f3e2					      ENDIF
     16  f3e2
     17  f3e2					      REPEAT	.CYCLES / 2
     18  f3e2		       ea		      nop
     17  f3e2					      REPEND
     18  f3e3		       ea		      nop
     17  f3e3					      REPEND
     18  f3e4		       ea		      nop
     19  f3e5					      REPEND
    279  f3e5
    280  f3e5							; Second half of image
    281  f3e5		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    282  f3e8		       85 0d		      sta	PF0	; 4
    283  f3ea		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    284  f3ed		       85 0e		      sta	PF1	; 4
    285  f3ef		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    286  f3f2		       85 0f		      sta	PF2	; 4
    287  f3f4
    288  f3f4				   .title_frame_top_index		; 4 cycles
    289  f3f4
    290  f3f4		       ca		      dex		; 2
    291  f3f5		       d0 da		      bne	.title_frame_top	; 2
    292  f3f7
    293  f3f7				   .title_frame_top_index_next		; 6 cycles
    294  f3f7
    295  f3f7							; Restore scanline counter
    296  f3f7		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    297  f3f9
    298  f3f9		       98		      tya		; 2
    299  f3fa		       18		      clc		; 2
    300  f3fb		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    301  f3fd		       a8		      tay		; 2
    302  f3fe
    303  f3fe		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    304  f400		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    305  f402		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    306  f404		       85 08		      sta	COLUPF	; 4
    307  f406		       ea		      nop		; 2
    308  f407		       4c d3 f3 	      jmp	.title_frame_top_load	; 3
    309  f40a
    310  f40a				   .title_frame_top_label_color_skip
    311  f40a
    312  f40a		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    313  f40c		       d0 c3		      bne	.title_frame_top	; 2
    314  f40e
    315  f40e				   .title_frame_top_clean
    316  f40e
    317  f40e							; Clear out playfield
    318  f40e		       a9 00		      lda	#0
    319  f410		       85 0d		      sta	PF0
    320  f412		       85 0e		      sta	PF1
    321  f414		       85 0f		      sta	PF2
    322  f416
    323  f416				   TitleWebDraw
    324  f416		       a9 02		      lda	#%00000010
    325  f418		       85 1d		      sta	ENAM0
    326  f41a
    327  f41a		       a9 06		      lda	#TITLE_WEB_COLOR
    328  f41c		       85 06		      sta	COLUP0
    329  f41e
    330  f41e		       a2 10		      ldx	#TITLE_GAP_SIZE
    331  f420				   .title_web_gap
    332  f420		       ca		      dex
    333  f421		       85 02		      sta	WSYNC
    334  f423		       d0 fb		      bne	.title_web_gap
    335  f425
    336  f425				   TitleSpiderDraw
    337  f425
    338  f425		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    339  f427
    340  f427		       a5 a9		      lda	SpiderDrawPos
    341  f429		       c9 01		      cmp	#1
    342  f42b		       d0 0c		      bne	.title_spider_extra_web_disable
    343  f42d
    344  f42d				   .title_spider_extra_web_start
    345  f42d		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    346  f42f				   .title_spider_extra_web_loop
    347  f42f		       85 02		      sta	WSYNC
    348  f431		       ca		      dex
    349  f432		       d0 fb		      bne	.title_spider_extra_web_loop
    350  f434
    351  f434		       88		      dey
    352  f435		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    353  f437		       d0 f4		      bne	.title_spider_extra_web_start
    354  f439
    355  f439				   .title_spider_extra_web_disable
    356  f439		       a9 00		      lda	#0
    357  f43b		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    358  f43d
    359  f43d		       85 02		      sta	WSYNC
    360  f43f
    361  f43f		       85 1d		      sta	ENAM0
    362  f441
    363  f441							; Check b/w
    364  f441		       ad 82 02 	      lda	SWCHB
    365  f444					      REPEAT	4
    366  f444		       4a		      lsr
    365  f444					      REPEND
    366  f445		       4a		      lsr
    365  f445					      REPEND
    366  f446		       4a		      lsr
    365  f446					      REPEND
    366  f447		       4a		      lsr
    367  f448					      REPEND
    368  f448		       90 05		      bcc	.title_spider_bw
    369  f44a
    370  f44a				   .title_spider_color
    371  f44a		       a9 56		      lda	#TITLE_SPIDER_COLOR
    372  f44c		       4c 51 f4 	      jmp	.title_spider_color_set
    373  f44f				   .title_spider_bw
    374  f44f		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    375  f451				   .title_spider_color_set
    376  f451		       85 06		      sta	COLUP0
    377  f453
    378  f453				   .title_spider
    379  f453		       b1 a2		      lda	(SpiderPtr),y
    380  f455		       85 1b		      sta	GRP0
    381  f457		       85 1c		      sta	GRP1
    382  f459
    383  f459				   .title_spider_delay
    384  f459		       ca		      dex
    385  f45a		       85 02		      sta	WSYNC
    386  f45c		       d0 fb		      bne	.title_spider_delay
    387  f45e
    388  f45e				   .title_spider_index
    389  f45e		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    390  f460		       88		      dey
    391  f461		       10 f0		      bpl	.title_spider
    392  f463
    393  f463				   .title_spider_clean
    394  f463
    395  f463							; Clear sprites
    396  f463		       a9 00		      lda	#0
    397  f465		       85 1b		      sta	GRP0
    398  f467		       85 1c		      sta	GRP1
    399  f469
    400  f469				   TitleFrameBottomDraw
    401  f469
    402  f469							; Load Frame Color
    403  f469		       a9 06		      lda	#TITLE_WEB_COLOR
    404  f46b		       85 08		      sta	COLUPF
    405  f46d
    406  f46d							; Start Counters
    407  f46d		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    408  f46f		       a0 00		      ldy	#0	; Image Counter
    409  f471
    410  f471				   .title_frame_bottom
    411  f471
    412  f471							; 76 machine cycles per scanline
    413  f471		       85 02		      sta	WSYNC
    414  f473
    415  f473				   .title_frame_bottom_load		; 66 cycles
    416  f473
    417  f473							; First half of image
    418  f473		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    419  f476		       85 0d		      sta	PF0	; 4
    420  f478		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    421  f47b		       85 0e		      sta	PF1	; 4
    422  f47d		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    423  f480		       85 0f		      sta	PF2	; 4
    424  f482
      0  f482					      sleep	6
      1  f482				   .CYCLES    SET	6
      2  f482
      3  f482				  -	      IF	.CYCLES < 2
      4  f482				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f482				  -	      ERR
      6  f482					      ENDIF
      7  f482
      8  f482				  -	      IF	.CYCLES & 1
      9  f482				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f482				  -	      nop	0
     11  f482				  -	      ELSE
     12  f482				  -	      bit	VSYNC
     13  f482				  -	      ENDIF
     14  f482				  -.CYCLES    SET	.CYCLES - 3
     15  f482					      ENDIF
     16  f482
     17  f482					      REPEAT	.CYCLES / 2
     18  f482		       ea		      nop
     17  f482					      REPEND
     18  f483		       ea		      nop
     17  f483					      REPEND
     18  f484		       ea		      nop
     19  f485					      REPEND
    426  f485
    427  f485							; Second half of image
    428  f485		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    429  f488		       85 0d		      sta	PF0	; 4
    430  f48a		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    431  f48d		       85 0e		      sta	PF1	; 4
    432  f48f		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    433  f492		       85 0f		      sta	PF2	; 4
    434  f494
    435  f494				   .title_frame_bottom_index		; 4 cycles
    436  f494
    437  f494		       ca		      dex		; 2
    438  f495		       d0 da		      bne	.title_frame_bottom	; 2
    439  f497
    440  f497				   .title_frame_bottom_index_next		; 6 cycles
    441  f497
    442  f497							; Restore scanline counter
    443  f497		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    444  f499
    445  f499		       98		      tya		; 2
    446  f49a		       18		      clc		; 2
    447  f49b		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    448  f49d		       a8		      tay		; 2
    449  f49e		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    450  f4a0		       d0 cf		      bne	.title_frame_bottom	; 2
    451  f4a2
    452  f4a2				   .title_frame_bottom_clean
    453  f4a2
    454  f4a2							; Clear out playfield
    455  f4a2		       a9 00		      lda	#0
    456  f4a4		       85 0d		      sta	PF0
    457  f4a6		       85 0e		      sta	PF1
    458  f4a8		       85 0f		      sta	PF2
    459  f4aa
    460  f4aa				   .title_kernel_return
    461  f4aa		       60		      rts
    462  f4ab
    463  f4ab				   TitleAudio0
    464  f4ab
    465  f4ab		       0f		      .BYTE.b	#15	; B
    466  f4ac		       13		      .BYTE.b	#19	; G
    467  f4ad		       17		      .BYTE.b	#23	; E
    468  f4ae		       13		      .BYTE.b	#19	; G
    469  f4af		       0e		      .BYTE.b	#14	; C
    470  f4b0		       13		      .BYTE.b	#19
    471  f4b1		       17		      .BYTE.b	#23
    472  f4b2		       13		      .BYTE.b	#19
    473  f4b3		       0c		      .BYTE.b	#12	; D
    474  f4b4		       13		      .BYTE.b	#19
    475  f4b5		       17		      .BYTE.b	#23
    476  f4b6		       13		      .BYTE.b	#19
    477  f4b7		       0e		      .BYTE.b	#14	; C
    478  f4b8		       13		      .BYTE.b	#19
    479  f4b9		       17		      .BYTE.b	#23
    480  f4ba		       13		      .BYTE.b	#19
    481  f4bb
    482  f4bb				   TitleTone1
    483  f4bb
    484  f4bb		       0f		      .BYTE.b	#15	; Electronic Rumble
    485  f4bc		       ff		      .BYTE.b	#$FF
    486  f4bd		       01		      .BYTE.b	#1	; Low Pure Tone
    487  f4be		       01		      .BYTE.b	#1
    488  f4bf		       08		      .BYTE.b	#8	; White Noise
    489  f4c0		       01		      .BYTE.b	#1
    490  f4c1		       01		      .BYTE.b	#1
    491  f4c2		       ff		      .BYTE.b	#$FF
    492  f4c3		       ff		      .BYTE.b	#$FF
    493  f4c4		       0f		      .BYTE.b	#15
    494  f4c5		       ff		      .BYTE.b	#$FF
    495  f4c6		       ff		      .BYTE.b	#$FF
    496  f4c7		       08		      .BYTE.b	#8
    497  f4c8		       ff		      .BYTE.b	#$FF
    498  f4c9		       01		      .BYTE.b	#1
    499  f4ca		       01		      .BYTE.b	#1
    500  f4cb
    501  f4cb				   TitleAudio1
    502  f4cb
    503  f4cb		       1d		      .BYTE.b	#29	; Kick
    504  f4cc		       ff		      .BYTE.b	#$FF
    505  f4cd		       1f		      .BYTE.b	#31	; C
    506  f4ce		       1f		      .BYTE.b	#31
    507  f4cf		       07		      .BYTE.b	#7	; Snare
    508  f4d0		       1f		      .BYTE.b	#31
    509  f4d1		       1f		      .BYTE.b	#31
    510  f4d2		       ff		      .BYTE.b	#$FF
    511  f4d3		       ff		      .BYTE.b	#$FF
    512  f4d4		       1d		      .BYTE.b	#29
    513  f4d5		       ff		      .BYTE.b	#$FF
    514  f4d6		       ff		      .BYTE.b	#$FF
    515  f4d7		       07		      .BYTE.b	#7
    516  f4d8		       ff		      .BYTE.b	#$FF
    517  f4d9		       17		      .BYTE.b	#23	; F
    518  f4da		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4db					      include	"game.asm"
      1  f4db							;================
      2  f4db							; Game
      3  f4db							;================
      4  f4db
      5  f4db							; Constants
      6  f4db
      7  f4db		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f4db		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4db		       00 09	   GAME_AUDIO_STEP =	9
     10  f4db		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4db		       00 06	   GAME_AUDIO_TONE =	6
     12  f4db
     13  f4db							; Object Code
     14  f4db
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f4db					      include	"objects/level.asm"
      1  f4db							;======================
      2  f4db							; Level Logic
      3  f4db							;======================
      4  f4db
      5  f4db							; Constants
      6  f4db
      7  f4db		       00 04	   LEVELS     =	4
      8  f4db
      9  f4db				   LevelInit
     10  f4db
     11  f4db							; Set beginning level by difficulty switches treated as binary
     12  f4db		       ad 82 02 	      lda	SWCHB
     13  f4de					      REPEAT	6
     14  f4de		       4a		      lsr
     13  f4de					      REPEND
     14  f4df		       4a		      lsr
     13  f4df					      REPEND
     14  f4e0		       4a		      lsr
     13  f4e0					      REPEND
     14  f4e1		       4a		      lsr
     13  f4e1					      REPEND
     14  f4e2		       4a		      lsr
     13  f4e2					      REPEND
     14  f4e3		       4a		      lsr
     15  f4e4					      REPEND
     16  f4e4		       29 03		      and	#%00000011
     17  f4e6		       85 9e		      sta	LevelCurrent
     18  f4e8
     19  f4e8		       20 08 f5 	      jsr	LevelLoad
     20  f4eb
     21  f4eb		       60		      rts
     22  f4ec
     23  f4ec				   LevelUpdate
     24  f4ec
     25  f4ec							; Check if score is high enough
     26  f4ec		       a4 9e		      ldy	LevelCurrent
     27  f4ee		       a5 94		      lda	ScoreValue+1
     28  f4f0		       d9 39 f5 	      cmp	LevelDataScore,y
     29  f4f3		       90 0f		      bcc	.level_update_return
     30  f4f5
     31  f4f5							; Reset score
     32  f4f5		       a9 00		      lda	#0
     33  f4f7		       85 94		      sta	ScoreValue+1
     34  f4f9
     35  f4f9							; Check if we haven't reached the final level
     36  f4f9		       a5 9e		      lda	LevelCurrent
     37  f4fb		       c9 03		      cmp	#LEVELS-1
     38  f4fd		       b0 05		      bcs	.level_update_return
     39  f4ff
     40  f4ff		       e6 9e		      inc	LevelCurrent
     41  f501		       20 08 f5 	      jsr	LevelLoad
     42  f504
     43  f504				   .level_update_return
     44  f504
     45  f504		       20 1a f5 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     46  f507
     47  f507		       60		      rts
     48  f508
     49  f508				   LevelLoad
     50  f508		       a4 9e		      ldy	LevelCurrent
     51  f50a
     52  f50a							; Bug Speed
     53  f50a		       b9 45 f5 	      lda	LevelDataBug,y
     54  f50d		       85 b6		      sta	BugSpeed
     55  f50f
     56  f50f							; Swatter Wait Time
     57  f50f		       b9 49 f5 	      lda	LevelDataSwatterWait,y
     58  f512		       85 c5		      sta	SwatterWaitTime
     59  f514
     60  f514							; Swatter Hit Damage
     61  f514		       b9 4d f5 	      lda	LevelDataSwatterDamage,y
     62  f517		       85 c6		      sta	SwatterHitDamage
     63  f519
     64  f519		       60		      rts
     65  f51a
     66  f51a				   LevelLoadColor
     67  f51a		       a4 9e		      ldy	LevelCurrent
     68  f51c
     69  f51c							; check b/w
     70  f51c		       ad 82 02 	      lda	SWCHB
     71  f51f					      REPEAT	4
     72  f51f		       4a		      lsr
     71  f51f					      REPEND
     72  f520		       4a		      lsr
     71  f520					      REPEND
     72  f521		       4a		      lsr
     71  f521					      REPEND
     72  f522		       4a		      lsr
     73  f523					      REPEND
     74  f523		       90 0b		      bcc	.level_load_bw
     75  f525
     76  f525				   .level_load_color
     77  f525
     78  f525							; Background Color
     79  f525		       b9 3d f5 	      lda	LevelDataBk,y
     80  f528		       85 a0		      sta	WebColor+0
     81  f52a
     82  f52a							; Web Color
     83  f52a		       b9 41 f5 	      lda	LevelDataPf,y
     84  f52d		       85 a1		      sta	WebColor+1
     85  f52f
     86  f52f		       60		      rts
     87  f530
     88  f530				   .level_load_bw
     89  f530
     90  f530							; Background Color
     91  f530		       a9 00		      lda	#WEB_BG_COLOR
     92  f532		       85 a0		      sta	WebColor+0
     93  f534
     94  f534							; Web Color
     95  f534		       a9 02		      lda	#WEB_FG_COLOR
     96  f536		       85 a1		      sta	WebColor+1
     97  f538
     98  f538		       60		      rts
     99  f539
    100  f539				   LevelDataScore		; Score needed
    101  f539		       0a		      .BYTE.b	#10
    102  f53a		       14		      .BYTE.b	#20
    103  f53b		       28		      .BYTE.b	#40
    104  f53c		       63		      .BYTE.b	#99
    105  f53d
    106  f53d				   LevelDataBk		; Background Color
    107  f53d		       00		      .BYTE.b	#$00
    108  f53e		       60		      .BYTE.b	#$60
    109  f53f		       50		      .BYTE.b	#$50
    110  f540		       30		      .BYTE.b	#$30
    111  f541
    112  f541				   LevelDataPf		; Web Color
    113  f541		       06		      .BYTE.b	#$06
    114  f542		       64		      .BYTE.b	#$64
    115  f543		       54		      .BYTE.b	#$54
    116  f544		       34		      .BYTE.b	#$34
    117  f545
    118  f545				   LevelDataBug 		; Bug Speed
    119  f545		       02		      .BYTE.b	#2
    120  f546		       03		      .BYTE.b	#3
    121  f547		       04		      .BYTE.b	#4
    122  f548		       05		      .BYTE.b	#5
    123  f549
    124  f549				   LevelDataSwatterWait 		; Swatter Wait Time Min (adds random 0-128)
    125  f549		       b4		      .BYTE.b	#180
    126  f54a		       96		      .BYTE.b	#150
    127  f54b		       78		      .BYTE.b	#120
    128  f54c		       3c		      .BYTE.b	#60
    129  f54d
    130  f54d				   LevelDataSwatterDamage		; Swatter Damage
    131  f54d		       10		      .BYTE.b	#$10
    132  f54e		       18		      .BYTE.b	#$18
    133  f54f		       20		      .BYTE.b	#$20
    134  f550		       40		      .BYTE.b	#$40
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f551					      include	"objects/score.asm"
      1  f551							;======================
      2  f551							; Score (playfield)
      3  f551							;======================
      4  f551
      5  f551							; Constants
      6  f551
      7  f551		       00 00	   SCORE_BG_COLOR =	#$00
      8  f551		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f551		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f551		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f551		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f551		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f551
     14  f551		       00 05	   SCORE_LABEL_SIZE =	5
     15  f551		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f551		       00 02	   SCORE_LINE_SIZE =	2
     17  f551		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f551
     19  f551							; Initialization
     20  f551
     21  f551				   ScoreInit
     22  f551
     23  f551							; Health Score
     24  f551		       a9 ff		      lda	#$ff
     25  f553		       85 93		      sta	ScoreValue+0
     26  f555
     27  f555							; Game Score
     28  f555		       a9 00		      lda	#0
     29  f557		       85 94		      sta	ScoreValue+1
     30  f559
     31  f559		       60		      rts
     32  f55a
     33  f55a							; Frame Update
     34  f55a
     35  f55a				   ScoreUpdate
     36  f55a
     37  f55a							; Current Level Digits
     38  f55a		       a5 9e		      lda	LevelCurrent
     39  f55c		       18		      clc
     40  f55d		       69 01		      adc	#1
     41  f55f
     42  f55f		       20 21 f0 	      jsr	BinBcdConvert
     43  f562
     44  f562							; Only use first byte
     45  f562		       8a		      txa
     46  f563		       29 0f		      and	#$0f
     47  f565		       a8		      tay
     48  f566		       8a		      txa
     49  f567		       29 f0		      and	#$f0
     50  f569					      REPEAT	4
     51  f569		       4a		      lsr
     50  f569					      REPEND
     51  f56a		       4a		      lsr
     50  f56a					      REPEND
     51  f56b		       4a		      lsr
     50  f56b					      REPEND
     51  f56c		       4a		      lsr
     52  f56d					      REPEND
     53  f56d		       aa		      tax
     54  f56e
     55  f56e							; Adjust index positions by multiplying by 5
     56  f56e		       8a		      txa
     57  f56f		       85 83		      sta	Temp
     58  f571		       0a		      asl
     59  f572		       0a		      asl
     60  f573		       65 83		      adc	Temp
     61  f575		       85 97		      sta	ScoreDigitTens
     62  f577
     63  f577		       98		      tya
     64  f578		       85 83		      sta	Temp
     65  f57a		       0a		      asl
     66  f57b		       0a		      asl
     67  f57c		       65 83		      adc	Temp
     68  f57e		       85 95		      sta	ScoreDigitOnes
     69  f580
     70  f580							; Score Digits
     71  f580		       a5 94		      lda	ScoreValue+1
     72  f582
     73  f582		       20 21 f0 	      jsr	BinBcdConvert
     74  f585
     75  f585							; Only use first byte
     76  f585		       8a		      txa
     77  f586		       29 0f		      and	#$0f
     78  f588		       a8		      tay
     79  f589		       8a		      txa
     80  f58a		       29 f0		      and	#$f0
     81  f58c					      REPEAT	4
     82  f58c		       4a		      lsr
     81  f58c					      REPEND
     82  f58d		       4a		      lsr
     81  f58d					      REPEND
     82  f58e		       4a		      lsr
     81  f58e					      REPEND
     82  f58f		       4a		      lsr
     83  f590					      REPEND
     84  f590		       aa		      tax
     85  f591
     86  f591							; Adjust index positions by multiplying by 5
     87  f591		       8a		      txa
     88  f592		       85 83		      sta	Temp
     89  f594		       0a		      asl
     90  f595		       0a		      asl
     91  f596		       65 83		      adc	Temp
     92  f598		       85 98		      sta	ScoreDigitTens+1
     93  f59a
     94  f59a		       98		      tya
     95  f59b		       85 83		      sta	Temp
     96  f59d		       0a		      asl
     97  f59e		       0a		      asl
     98  f59f		       65 83		      adc	Temp
     99  f5a1		       85 96		      sta	ScoreDigitOnes+1
    100  f5a3
    101  f5a3							; Health Bar
    102  f5a3		       a5 93		      lda	ScoreValue+0
    103  f5a5		       f0 1c		      beq	.score_update_bar_empty
    104  f5a7
    105  f5a7					      REPEAT	4
    106  f5a7		       4a		      lsr
    105  f5a7					      REPEND
    106  f5a8		       4a		      lsr
    105  f5a8					      REPEND
    106  f5a9		       4a		      lsr
    105  f5a9					      REPEND
    106  f5aa		       4a		      lsr
    107  f5ab					      REPEND
    108  f5ab		       c9 08		      cmp	#8
    109  f5ad		       b0 09		      bcs	.score_update_bar_top
    110  f5af
    111  f5af				   .score_update_bar_bottom
    112  f5af		       aa		      tax
    113  f5b0		       bd d6 f6 	      lda	ScoreBar,x
    114  f5b3		       a0 00		      ldy	#$00
    115  f5b5		       4c c7 f5 	      jmp	.score_update_bar_store
    116  f5b8
    117  f5b8				   .score_update_bar_top
    118  f5b8		       29 07		      and	#%00000111
    119  f5ba		       aa		      tax
    120  f5bb		       a9 7f		      lda	#$7f
    121  f5bd		       bc de f6 	      ldy	ScoreBarFlip,x
    122  f5c0		       4c c7 f5 	      jmp	.score_update_bar_store
    123  f5c3
    124  f5c3				   .score_update_bar_empty
    125  f5c3		       a9 00		      lda	#0
    126  f5c5		       a0 00		      ldy	#0
    127  f5c7
    128  f5c7				   .score_update_bar_store
    129  f5c7		       85 9c		      sta	ScoreBarGfx+0
    130  f5c9		       84 9d		      sty	ScoreBarGfx+1
    131  f5cb
    132  f5cb				   .score_update_end
    133  f5cb		       60		      rts
    134  f5cc
    135  f5cc							; Draw loop (uses SCORE_LINES scanlines)
    136  f5cc
    137  f5cc				   ScoreDraw
    138  f5cc
    139  f5cc							; Load Colors
    140  f5cc		       a9 00		      lda	#SCORE_BG_COLOR
    141  f5ce		       85 09		      sta	COLUBK
    142  f5d0		       a9 06		      lda	#SCORE_LABEL_COLOR
    143  f5d2		       85 08		      sta	COLUPF
    144  f5d4		       85 06		      sta	COLUP0
    145  f5d6		       85 07		      sta	COLUP1
    146  f5d8
    147  f5d8							; Set Non-Mirror
    148  f5d8		       a5 80		      lda	CtrlPf
    149  f5da		       29 fc		      and	#%11111100
    150  f5dc		       09 02		      ora	#%00000010
    151  f5de		       85 80		      sta	CtrlPf
    152  f5e0		       85 0a		      sta	CTRLPF
    153  f5e2
    154  f5e2		       a2 00		      ldx	#0
    155  f5e4				   .score_draw_label
    156  f5e4
    157  f5e4		       85 02		      sta	WSYNC
    158  f5e6
    159  f5e6							; First half of image
    160  f5e6		       bd 20 f1 	      lda	ScoreLabel+0,x	; 4
    161  f5e9		       85 0d		      sta	PF0	; 3
    162  f5eb		       bd 21 f1 	      lda	ScoreLabel+1,x
    163  f5ee		       85 0e		      sta	PF1
    164  f5f0		       bd 22 f1 	      lda	ScoreLabel+2,x
    165  f5f3		       85 0f		      sta	PF2
    166  f5f5
      0  f5f5					      sleep	8
      1  f5f5				   .CYCLES    SET	8
      2  f5f5
      3  f5f5				  -	      IF	.CYCLES < 2
      4  f5f5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5f5				  -	      ERR
      6  f5f5					      ENDIF
      7  f5f5
      8  f5f5				  -	      IF	.CYCLES & 1
      9  f5f5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5f5				  -	      nop	0
     11  f5f5				  -	      ELSE
     12  f5f5				  -	      bit	VSYNC
     13  f5f5				  -	      ENDIF
     14  f5f5				  -.CYCLES    SET	.CYCLES - 3
     15  f5f5					      ENDIF
     16  f5f5
     17  f5f5					      REPEAT	.CYCLES / 2
     18  f5f5		       ea		      nop
     17  f5f5					      REPEND
     18  f5f6		       ea		      nop
     17  f5f6					      REPEND
     18  f5f7		       ea		      nop
     17  f5f7					      REPEND
     18  f5f8		       ea		      nop
     19  f5f9					      REPEND
    168  f5f9
    169  f5f9							; Second half of image
    170  f5f9							;lda ScoreLabel+3,x ; 4
    171  f5f9		       a9 00		      lda	#0	; 2
    172  f5fb		       85 0d		      sta	PF0	; 3
    173  f5fd		       bd 24 f1 	      lda	ScoreLabel+4,x
    174  f600		       85 0e		      sta	PF1
    175  f602		       bd 25 f1 	      lda	ScoreLabel+5,x
    176  f605		       85 0f		      sta	PF2
    177  f607
    178  f607		       8a		      txa
    179  f608		       18		      clc
    180  f609		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    181  f60b		       aa		      tax
    182  f60c		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    183  f60e		       d0 d4		      bne	.score_draw_label
    184  f610
    185  f610							; Clear labels and setup color
    186  f610		       a9 00		      lda	#0
    187  f612		       85 0d		      sta	PF0
    188  f614		       85 0e		      sta	PF1
    189  f616		       85 0f		      sta	PF2
    190  f618
    191  f618		       85 02		      sta	WSYNC
    192  f61a
    193  f61a							; Load Colors
    194  f61a		       ad 82 02 	      lda	SWCHB
    195  f61d					      REPEAT	4
    196  f61d		       4a		      lsr
    195  f61d					      REPEND
    196  f61e		       4a		      lsr
    195  f61e					      REPEND
    196  f61f		       4a		      lsr
    195  f61f					      REPEND
    196  f620		       4a		      lsr
    197  f621					      REPEND
    198  f621		       90 0d		      bcc	.score_draw_bw
    199  f623
    200  f623				   .score_draw_color
    201  f623		       a9 44		      lda	#SCORE_LEVEL_COLOR
    202  f625		       85 08		      sta	COLUPF
    203  f627		       85 06		      sta	COLUP0
    204  f629		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    205  f62b		       85 07		      sta	COLUP1
    206  f62d
    207  f62d		       4c 3a f6 	      jmp	.score_draw_digit_start
    208  f630
    209  f630				   .score_draw_bw
    210  f630		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    211  f632		       85 08		      sta	COLUPF
    212  f634		       85 06		      sta	COLUP0
    213  f636		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    214  f638		       85 07		      sta	COLUP1
    215  f63a
    216  f63a				   .score_draw_digit_start
    217  f63a
    218  f63a		       85 02		      sta	WSYNC
    219  f63c
    220  f63c							; Prepare initial line
    221  f63c
    222  f63c							; Level
    223  f63c		       a4 97		      ldy	ScoreDigitTens
    224  f63e		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    225  f641		       29 f0		      and	#$f0
    226  f643		       85 99		      sta	ScoreDigitGfx
    227  f645
    228  f645		       a4 95		      ldy	ScoreDigitOnes
    229  f647		       b9 bc f0 	      lda	ScoreDigits,y
    230  f64a		       29 f0		      and	#$f0
    231  f64c		       85 9a		      sta	ScoreDigitGfx+1
    232  f64e
    233  f64e							; Score
    234  f64e		       a4 98		      ldy	ScoreDigitTens+1
    235  f650		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    236  f653		       29 0f		      and	#$0f
    237  f655		       85 9b		      sta	ScoreDigitGfx+2
    238  f657
    239  f657		       a4 96		      ldy	ScoreDigitOnes+1
    240  f659		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    241  f65c		       29 f0		      and	#$f0
    242  f65e		       05 9b		      ora	ScoreDigitGfx+2
    243  f660		       85 9b		      sta	ScoreDigitGfx+2
    244  f662
    245  f662		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    246  f664		       a5 99		      lda	ScoreDigitGfx
    247  f666		       85 02		      sta	WSYNC
    248  f668				   .score_draw_digit
    249  f668
    250  f668							;lda ScoreDigitGfx
    251  f668		       85 0d		      sta	PF0
    252  f66a		       a5 9a		      lda	ScoreDigitGfx+1
    253  f66c		       85 0e		      sta	PF1
    254  f66e		       a5 9b		      lda	ScoreDigitGfx+2
    255  f670		       85 0f		      sta	PF2
    256  f672
    257  f672							; Begin preparing next line
    258  f672		       e6 95		      inc	ScoreDigitOnes
    259  f674		       e6 97		      inc	ScoreDigitTens
    260  f676		       e6 96		      inc	ScoreDigitOnes+1
    261  f678		       e6 98		      inc	ScoreDigitTens+1
    262  f67a
    263  f67a		       a9 00		      lda	#0
    264  f67c		       85 0d		      sta	PF0
    265  f67e		       a5 9c		      lda	ScoreBarGfx+0
    266  f680		       85 0e		      sta	PF1
    267  f682		       a5 9d		      lda	ScoreBarGfx+1
    268  f684		       85 0f		      sta	PF2
    269  f686
    270  f686							; Level 1st Digit
    271  f686		       a4 97		      ldy	ScoreDigitTens
    272  f688		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    273  f68b		       29 f0		      and	#$f0
    274  f68d		       85 83		      sta	Temp
    275  f68f
    276  f68f							; Score 1st Digit
    277  f68f		       a4 98		      ldy	ScoreDigitTens+1
    278  f691		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    279  f694		       29 0f		      and	#$0f
    280  f696		       85 84		      sta	Temp+1
    281  f698
    282  f698		       a5 99		      lda	ScoreDigitGfx
    283  f69a		       85 0d		      sta	PF0
    284  f69c		       a5 9a		      lda	ScoreDigitGfx+1
    285  f69e		       85 0e		      sta	PF1
    286  f6a0		       a5 9b		      lda	ScoreDigitGfx+2
    287  f6a2		       85 0f		      sta	PF2
    288  f6a4
    289  f6a4							; Level 2nd Digit (and transfer)
    290  f6a4		       a4 95		      ldy	ScoreDigitOnes
    291  f6a6		       b9 bc f0 	      lda	ScoreDigits,y
    292  f6a9		       29 f0		      and	#$f0
    293  f6ab		       85 9a		      sta	ScoreDigitGfx+1
    294  f6ad
      0  f6ad					      sleep	3
      1  f6ad				   .CYCLES    SET	3
      2  f6ad
      3  f6ad				  -	      IF	.CYCLES < 2
      4  f6ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6ad				  -	      ERR
      6  f6ad					      ENDIF
      7  f6ad
      8  f6ad					      IF	.CYCLES & 1
      9  f6ad					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6ad		       04 00		      nop	0
     11  f6af				  -	      ELSE
     12  f6af				  -	      bit	VSYNC
     13  f6af					      ENDIF
     14  f6af				   .CYCLES    SET	.CYCLES - 3
     15  f6af					      ENDIF
     16  f6af
     17  f6af				  -	      REPEAT	.CYCLES / 2
     18  f6af				  -	      nop
     19  f6af					      REPEND
    296  f6af
    297  f6af		       a9 00		      lda	#0
    298  f6b1		       85 0d		      sta	PF0
    299  f6b3		       a5 9c		      lda	ScoreBarGfx+0
    300  f6b5		       85 0e		      sta	PF1
    301  f6b7		       a4 9d		      ldy	ScoreBarGfx+1
    302  f6b9		       84 0f		      sty	PF2
    303  f6bb
    304  f6bb							; Score 2nd Digit (and transfer)
    305  f6bb		       a4 96		      ldy	ScoreDigitOnes+1
    306  f6bd		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    307  f6c0		       29 f0		      and	#$f0
    308  f6c2		       05 84		      ora	Temp+1
    309  f6c4		       85 9b		      sta	ScoreDigitGfx+2
    310  f6c6
    311  f6c6							; Transfer Level 1st Digit
    312  f6c6		       a5 83		      lda	Temp
    313  f6c8		       85 99		      sta	ScoreDigitGfx
    314  f6ca
    315  f6ca		       ca		      dex
    316  f6cb		       d0 9b		      bne	.score_draw_digit
    317  f6cd
    318  f6cd		       a9 00		      lda	#0
    319  f6cf		       85 0d		      sta	PF0
    320  f6d1		       85 0e		      sta	PF1
    321  f6d3		       85 0f		      sta	PF2
    322  f6d5
    323  f6d5		       60		      rts
    324  f6d6
    325  f6d6				   ScoreBar
    326  f6d6		       40		      .BYTE.b	#%01000000
    327  f6d7		       40		      .BYTE.b	#%01000000
    328  f6d8		       60		      .BYTE.b	#%01100000
    329  f6d9		       70		      .BYTE.b	#%01110000
    330  f6da		       78		      .BYTE.b	#%01111000
    331  f6db		       7c		      .BYTE.b	#%01111100
    332  f6dc		       7e		      .BYTE.b	#%01111110
    333  f6dd		       7f		      .BYTE.b	#%01111111
    334  f6de
    335  f6de				   ScoreBarFlip
    336  f6de		       01		      .BYTE.b	#%00000001
    337  f6df		       03		      .BYTE.b	#%00000011
    338  f6e0		       07		      .BYTE.b	#%00000111
    339  f6e1		       0f		      .BYTE.b	#%00001111
    340  f6e2		       1f		      .BYTE.b	#%00011111
    341  f6e3		       3f		      .BYTE.b	#%00111111
    342  f6e4		       7f		      .BYTE.b	#%01111111
    343  f6e5		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f6e6					      include	"objects/web.asm"
      1  f6e6							;================
      2  f6e6							; Web (Playfield)
      3  f6e6							;================
      4  f6e6
      5  f6e6							; Constants
      6  f6e6
      7  f6e6		       00 00	   WEB_BG_COLOR =	#$00
      8  f6e6		       00 02	   WEB_FG_COLOR =	#$02
      9  f6e6
     10  f6e6		       00 1e	   WEB_SIZE   =	30
     11  f6e6		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f6e6		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f6e6
     14  f6e6							; Scanline Draw
     15  f6e6
     16  f6e6				   WebDrawStart
     17  f6e6
     18  f6e6							; Load Colors
     19  f6e6		       a5 a1		      lda	WebColor+1
     20  f6e8		       85 08		      sta	COLUPF
     21  f6ea
     22  f6ea							; Mirror playfield and use standard playfield color
     23  f6ea		       a5 80		      lda	CtrlPf
     24  f6ec		       29 fc		      and	#%11111100
     25  f6ee		       09 01		      ora	#%00000001
     26  f6f0		       85 80		      sta	CtrlPf
     27  f6f2		       85 0a		      sta	CTRLPF
     28  f6f4
     29  f6f4							; Initialize image index
     30  f6f4		       a9 00		      lda	#0
     31  f6f6		       85 9f		      sta	WebIndex
     32  f6f8
     33  f6f8		       60		      rts
     34  f6f9
     35  f6f9				   WebClean
     36  f6f9
     37  f6f9							; Clear out playfield
     38  f6f9		       a9 00		      lda	#0
     39  f6fb		       85 0d		      sta	PF0
     40  f6fd		       85 0e		      sta	PF1
     41  f6ff		       85 0f		      sta	PF2
     42  f701
     43  f701							; Clear colors
     44  f701		       85 09		      sta	COLUBK
     45  f703		       85 08		      sta	COLUPF
     46  f705
     47  f705		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f706					      include	"objects/spider.asm"
      1  f706							;=================
      2  f706							; Spider (player0)
      3  f706							;=================
      4  f706
      5  f706							; Constants
      6  f706
      7  f706		       00 56	   SPIDER_COLOR =	#$56
      8  f706		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f706		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f706		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f706
     12  f706		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f706		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f706		       00 02	   SPIDER_VEL_X =	2
     15  f706		       00 02	   SPIDER_VEL_Y =	2
     16  f706
     17  f706							; Initialization
     18  f706
     19  f706				   SpiderInit
     20  f706
     21  f706							; Initialize Position in center of screen
     22  f706		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f708		       85 a4		      sta	SpiderPos
     24  f70a		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f70c		       85 a5		      sta	SpiderPos+1
     26  f70e
     27  f70e							; Setup Sprite
      0  f70e					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f70e				   .POINTER   SET	SpiderPtr
      2  f70e				   .ADDRESS   SET	SpiderSprite
      3  f70e
      4  f70e		       a9 98		      LDA	#<.ADDRESS
      5  f710		       85 a2		      STA	.POINTER
      6  f712		       a9 f1		      LDA	#>.ADDRESS
      7  f714		       85 a3		      STA	.POINTER+1
      8  f716
     29  f716
     30  f716		       60		      rts
     31  f717
     32  f717							; Frame Update
     33  f717
     34  f717				   SpiderUpdate
     35  f717		       20 1e f7 	      jsr	SpiderControl
     36  f71a		       20 04 f8 	      jsr	SpiderCollision
     37  f71d		       60		      rts
     38  f71e
     39  f71e				   SpiderControl
     40  f71e
     41  f71e							; Control Position
     42  f71e		       a6 a4		      ldx	SpiderPos
     43  f720		       a4 a5		      ldy	SpiderPos+1
     44  f722		       ad 80 02 	      lda	SWCHA
     45  f725
     46  f725				   .spider_control_check_right
     47  f725		       30 02		      bmi	.spider_control_check_left
     48  f727
     49  f727					      REPEAT	#SPIDER_VEL_X
     50  f727		       e8		      inx
     49  f727					      REPEND
     50  f728		       e8		      inx
     51  f729					      REPEND
     52  f729
     53  f729				   .spider_control_check_left
     54  f729		       2a		      rol
     55  f72a		       30 02		      bmi	.spider_control_check_down
     56  f72c
     57  f72c					      REPEAT	#SPIDER_VEL_X
     58  f72c		       ca		      dex
     57  f72c					      REPEND
     58  f72d		       ca		      dex
     59  f72e					      REPEND
     60  f72e
     61  f72e				   .spider_control_check_down
     62  f72e		       2a		      rol
     63  f72f		       30 02		      bmi	.spider_control_check_up
     64  f731
     65  f731					      REPEAT	#SPIDER_VEL_Y
     66  f731		       88		      dey
     65  f731					      REPEND
     66  f732		       88		      dey
     67  f733					      REPEND
     68  f733
     69  f733				   .spider_control_check_up
     70  f733		       2a		      rol
     71  f734		       30 02		      bmi	.spider_control_sprite
     72  f736
     73  f736					      REPEAT	#SPIDER_VEL_Y
     74  f736		       c8		      iny
     73  f736					      REPEND
     74  f737		       c8		      iny
     75  f738					      REPEND
     76  f738
     77  f738				   .spider_control_sprite
     78  f738							; Control Sprite
     79  f738		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     80  f73a
     81  f73a				   .spider_control_sprite_x
     82  f73a		       e4 a4		      cpx	SpiderPos
     83  f73c		       90 04		      bcc	.spider_control_sprite_left
     84  f73e		       f0 09		      beq	.spider_control_sprite_y
     85  f740		       b0 05		      bcs	.spider_control_sprite_right
     86  f742
     87  f742				   .spider_control_sprite_left
     88  f742		       09 80		      ora	#%10000000
     89  f744		       4c 49 f7 	      jmp	.spider_control_sprite_y
     90  f747
     91  f747				   .spider_control_sprite_right
     92  f747		       09 40		      ora	#%01000000
     93  f749
     94  f749				   .spider_control_sprite_y
     95  f749		       c4 a5		      cpy	SpiderPos+1
     96  f74b		       90 04		      bcc	.spider_control_sprite_down
     97  f74d		       f0 09		      beq	.spider_control_sprite_store
     98  f74f		       b0 05		      bcs	.spider_control_sprite_up
     99  f751
    100  f751				   .spider_control_sprite_down
    101  f751		       09 10		      ora	#%00010000
    102  f753		       4c 58 f7 	      jmp	.spider_control_sprite_store
    103  f756
    104  f756				   .spider_control_sprite_up
    105  f756		       09 20		      ora	#%00100000
    106  f758
    107  f758				   .spider_control_sprite_store
    108  f758		       c9 00		      cmp	#%00000000
    109  f75a		       f0 02		      beq	.spider_control_boundary
    110  f75c		       85 a6		      sta	SpiderCtrl
    111  f75e
    112  f75e				   .spider_control_boundary
    113  f75e							; Check Playfield Boundaries
    114  f75e
    115  f75e				   .spider_control_boundary_left
    116  f75e		       e0 03		      cpx	#SPIDER_VEL_X+1
    117  f760		       b0 05		      bcs	.spider_control_boundary_right
    118  f762		       a2 03		      ldx	#SPIDER_VEL_X+1
    119  f764		       4c 6d f7 	      jmp	.spider_control_boundary_top
    120  f767
    121  f767				   .spider_control_boundary_right
    122  f767		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    123  f769		       90 02		      bcc	.spider_control_boundary_top
    124  f76b		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    125  f76d
    126  f76d				   .spider_control_boundary_top
    127  f76d		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    128  f76f		       b0 05		      bcs	.spider_control_boundary_bottom
    129  f771		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    130  f773		       4c 7c f7 	      jmp	.spider_control_store
    131  f776
    132  f776				   .spider_control_boundary_bottom
    133  f776		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    134  f778		       90 02		      bcc	.spider_control_store
    135  f77a		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    136  f77c
    137  f77c				   .spider_control_store
    138  f77c							; Store new position
    139  f77c		       86 a4		      stx	SpiderPos
    140  f77e		       84 a5		      sty	SpiderPos+1
    141  f780
    142  f780							; TODO: Optimize this somehow?
    143  f780				   .spider_control_sprite_assign
    144  f780							; Skip if no change
    145  f780		       c9 00		      cmp	#%00000000
    146  f782		       f0 7f		      beq	.spider_control_return
    147  f784
    148  f784		       a2 00		      ldx	#%00000000	; For reflection
    149  f786
    150  f786				   .spider_control_sprite_assign_left
    151  f786		       c9 80		      cmp	#%10000000
    152  f788		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f78a					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f78a				   .POINTER   SET	SpiderPtr
      2  f78a				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f78a
      4  f78a		       a9 b8		      LDA	#<.ADDRESS
      5  f78c		       85 a2		      STA	.POINTER
      6  f78e		       a9 f1		      LDA	#>.ADDRESS
      7  f790		       85 a3		      STA	.POINTER+1
      8  f792
    154  f792		       a2 08		      ldx	#%00001000
    155  f794		       4c 01 f8 	      jmp	.spider_control_reflect
    156  f797
    157  f797				   .spider_control_sprite_assign_right
    158  f797		       c9 40		      cmp	#%01000000
    159  f799		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f79b					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f79b				   .POINTER   SET	SpiderPtr
      2  f79b				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f79b
      4  f79b		       a9 b8		      LDA	#<.ADDRESS
      5  f79d		       85 a2		      STA	.POINTER
      6  f79f		       a9 f1		      LDA	#>.ADDRESS
      7  f7a1		       85 a3		      STA	.POINTER+1
      8  f7a3
    161  f7a3		       4c 01 f8 	      jmp	.spider_control_reflect
    162  f7a6
    163  f7a6				   .spider_control_sprite_assign_top
    164  f7a6		       c9 20		      cmp	#%00100000
    165  f7a8		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f7aa					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f7aa				   .POINTER   SET	SpiderPtr
      2  f7aa				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f7aa
      4  f7aa		       a9 98		      LDA	#<.ADDRESS
      5  f7ac		       85 a2		      STA	.POINTER
      6  f7ae		       a9 f1		      LDA	#>.ADDRESS
      7  f7b0		       85 a3		      STA	.POINTER+1
      8  f7b2
    167  f7b2		       4c 01 f8 	      jmp	.spider_control_reflect
    168  f7b5
    169  f7b5				   .spider_control_sprite_assign_bottom
    170  f7b5		       c9 10		      cmp	#%00010000
    171  f7b7		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f7b9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f7b9				   .POINTER   SET	SpiderPtr
      2  f7b9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f7b9
      4  f7b9		       a9 d8		      LDA	#<.ADDRESS
      5  f7bb		       85 a2		      STA	.POINTER
      6  f7bd		       a9 f1		      LDA	#>.ADDRESS
      7  f7bf		       85 a3		      STA	.POINTER+1
      8  f7c1
    173  f7c1		       4c 01 f8 	      jmp	.spider_control_reflect
    174  f7c4
    175  f7c4				   .spider_control_sprite_assign_top_right
    176  f7c4		       c9 60		      cmp	#%01100000
    177  f7c6		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f7c8					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f7c8				   .POINTER   SET	SpiderPtr
      2  f7c8				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f7c8
      4  f7c8		       a9 a8		      LDA	#<.ADDRESS
      5  f7ca		       85 a2		      STA	.POINTER
      6  f7cc		       a9 f1		      LDA	#>.ADDRESS
      7  f7ce		       85 a3		      STA	.POINTER+1
      8  f7d0
    179  f7d0		       4c 01 f8 	      jmp	.spider_control_reflect
    180  f7d3
    181  f7d3				   .spider_control_sprite_assign_bottom_right
    182  f7d3		       c9 50		      cmp	#%01010000
    183  f7d5		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f7d7					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f7d7				   .POINTER   SET	SpiderPtr
      2  f7d7				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f7d7
      4  f7d7		       a9 c8		      LDA	#<.ADDRESS
      5  f7d9		       85 a2		      STA	.POINTER
      6  f7db		       a9 f1		      LDA	#>.ADDRESS
      7  f7dd		       85 a3		      STA	.POINTER+1
      8  f7df
    185  f7df		       4c 01 f8 	      jmp	.spider_control_reflect
    186  f7e2
    187  f7e2				   .spider_control_sprite_assign_bottom_left
    188  f7e2		       c9 90		      cmp	#%10010000
    189  f7e4		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f7e6					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f7e6				   .POINTER   SET	SpiderPtr
      2  f7e6				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f7e6
      4  f7e6		       a9 c8		      LDA	#<.ADDRESS
      5  f7e8		       85 a2		      STA	.POINTER
      6  f7ea		       a9 f1		      LDA	#>.ADDRESS
      7  f7ec		       85 a3		      STA	.POINTER+1
      8  f7ee
    191  f7ee		       a2 08		      ldx	#%00001000
    192  f7f0		       4c 01 f8 	      jmp	.spider_control_reflect
    193  f7f3
    194  f7f3				   .spider_control_sprite_assign_top_left
    195  f7f3		       c9 a0		      cmp	#%10100000
    196  f7f5		       d0 0a		      bne	.spider_control_reflect
      0  f7f7					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f7f7				   .POINTER   SET	SpiderPtr
      2  f7f7				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f7f7
      4  f7f7		       a9 a8		      LDA	#<.ADDRESS
      5  f7f9		       85 a2		      STA	.POINTER
      6  f7fb		       a9 f1		      LDA	#>.ADDRESS
      7  f7fd		       85 a3		      STA	.POINTER+1
      8  f7ff
    198  f7ff		       a2 08		      ldx	#%00001000
    199  f801
    200  f801				   .spider_control_reflect
    201  f801		       86 0b		      stx	REFP0
    202  f803
    203  f803				   .spider_control_return
    204  f803		       60		      rts
    205  f804
    206  f804				   SpiderCollision
    207  f804		       a0 56		      ldy	#SPIDER_COLOR
    208  f806
    209  f806							; Check b/w
    210  f806		       ad 82 02 	      lda	SWCHB
    211  f809					      REPEAT	4
    212  f809		       4a		      lsr
    211  f809					      REPEND
    212  f80a		       4a		      lsr
    211  f80a					      REPEND
    212  f80b		       4a		      lsr
    211  f80b					      REPEND
    212  f80c		       4a		      lsr
    213  f80d					      REPEND
    214  f80d		       b0 02		      bcs	.spider_collision_m0
    215  f80f
    216  f80f		       a0 0e		      ldy	#SPIDER_BW_COLOR
    217  f811
    218  f811				   .spider_collision_m0
    219  f811							; Check stun status
    220  f811		       a6 b7		      ldx	BugStunned
    221  f813		       e0 00		      cpx	#0
    222  f815		       d0 04		      bne	.spider_collision_m1
    223  f817
    224  f817							; Collision for M0 (V set)
    225  f817		       24 00		      bit	CXM0P
    226  f819		       70 0d		      bvs	.spider_collision_active
    227  f81b
    228  f81b				   .spider_collision_m1
    229  f81b							; Check stun status
    230  f81b		       a6 b8		      ldx	BugStunned+1
    231  f81d		       e0 00		      cpx	#0
    232  f81f		       d0 14		      bne	.spider_collision_return
    233  f821
    234  f821							; Collision for M1 (N set)
    235  f821		       24 01		      bit	CXM1P
    236  f823		       30 03		      bmi	.spider_collision_active
    237  f825
    238  f825		       4c 35 f8 	      jmp	.spider_collision_return
    239  f828
    240  f828				   .spider_collision_active
    241  f828		       a0 44		      ldy	#SPIDER_COL_COLOR
    242  f82a
    243  f82a							; Check b/w
    244  f82a		       ad 82 02 	      lda	SWCHB
    245  f82d					      REPEAT	4
    246  f82d		       4a		      lsr
    245  f82d					      REPEND
    246  f82e		       4a		      lsr
    245  f82e					      REPEND
    246  f82f		       4a		      lsr
    245  f82f					      REPEND
    246  f830		       4a		      lsr
    247  f831					      REPEND
    248  f831		       b0 02		      bcs	.spider_collision_return
    249  f833
    250  f833		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    251  f835
    252  f835				   .spider_collision_return
    253  f835		       84 a7		      sty	SpiderColor
    254  f837		       60		      rts
    255  f838
    256  f838				   SpiderPosition
    257  f838
    258  f838							; Set Position
    259  f838		       a2 00		      ldx	#0	; Object (player0)
    260  f83a		       a5 a4		      lda	SpiderPos	; X Position
    261  f83c		       20 00 f0 	      jsr	PosObject
    262  f83f
    263  f83f		       60		      rts
    264  f840
    265  f840							; Scanline Draw
    266  f840
    267  f840				   SpiderDrawStart
    268  f840
    269  f840							; Set player 0 to be quad size
    270  f840		       a5 81		      lda	NuSiz0
    271  f842		       29 f8		      and	#%11111000
    272  f844		       09 05		      ora	#%00000101
    273  f846		       85 81		      sta	NuSiz0
    274  f848		       85 04		      sta	NUSIZ0
    275  f84a
    276  f84a							; Set sprite color
    277  f84a		       a5 a7		      lda	SpiderColor
    278  f84c		       85 06		      sta	COLUP0
    279  f84e
    280  f84e							; Determine if we need to use vertical delay (odd line)
    281  f84e		       a5 a5		      lda	SpiderPos+1	; Y Position
    282  f850		       4a		      lsr
    283  f851		       b0 05		      bcs	.spider_draw_start_nodelay
    284  f853
    285  f853		       a0 01		      ldy	#1
    286  f855		       4c 5a f8 	      jmp	.spider_draw_start_set_delay
    287  f858
    288  f858				   .spider_draw_start_nodelay
    289  f858		       a0 00		      ldy	#0
    290  f85a
    291  f85a				   .spider_draw_start_set_delay
    292  f85a		       84 25		      sty	VDELP0
    293  f85c
    294  f85c				   .spider_draw_start_pos
    295  f85c							; Calculate starting position
    296  f85c		       18		      clc
    297  f85d		       69 10		      adc	#SPIDER_SIZE
    298  f85f		       85 a9		      sta	SpiderDrawPos
    299  f861
    300  f861							; Initialize sprite index and line buffer
    301  f861		       a9 00		      lda	#0
    302  f863		       85 a8		      sta	SpiderIndex
    303  f865		       85 aa		      sta	SpiderLine
    304  f867
    305  f867		       60		      rts
    306  f868
    307  f868				   SpiderClean
    308  f868
    309  f868							; Clear out Player0 sprite
    310  f868		       a9 00		      lda	#0
    311  f86a		       85 1b		      sta	GRP0
    312  f86c
    313  f86c		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f86d					      include	"objects/line.asm"
      1  f86d							;================
      2  f86d							; Line (ball)
      3  f86d							;================
      4  f86d
      5  f86d							; Constants
      6  f86d
      7  f86d		       00 08	   LINE_SIZE  =	8
      8  f86d		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f86d		       00 04	   LINE_VEL_X =	4
     10  f86d		       00 04	   LINE_VEL_Y =	4
     11  f86d
     12  f86d		       00 08	   LINE_AUDIO_C =	8
     13  f86d		       00 01	   LINE_AUDIO_F =	1
     14  f86d		       00 04	   LINE_AUDIO_V =	4
     15  f86d
     16  f86d		       00 08	   LINE_SAMPLE_LEN =	8
     17  f86d		       00 03	   LINE_SAMPLE_C =	3
     18  f86d		       00 01	   LINE_SAMPLE_F =	1
     19  f86d		       00 04	   LINE_SAMPLE_V =	4
     20  f86d
     21  f86d							; Initialization
     22  f86d
     23  f86d				   LineInit
     24  f86d
     25  f86d							; Initial Line Control
     26  f86d		       a9 00		      lda	#0
     27  f86f		       85 ad		      sta	LineEnabled
     28  f871		       85 ae		      sta	LinePos+0
     29  f873		       85 af		      sta	LinePos+1
     30  f875		       85 b0		      sta	LineVelocity+0
     31  f877		       85 b1		      sta	LineVelocity+1
     32  f879		       85 b2		      sta	LineStartPos+0
     33  f87b		       85 b3		      sta	LineStartPos+1
     34  f87d		       85 b4		      sta	LineDrawPos+0
     35  f87f		       85 b5		      sta	LineDrawPos+1
     36  f881
     37  f881		       60		      rts
     38  f882
     39  f882							; Frame Update
     40  f882
     41  f882				   LineUpdate
     42  f882		       20 8c f8 	      jsr	LineControl
     43  f885		       20 44 f9 	      jsr	LineObject
     44  f888		       20 8b f9 	      jsr	LineCollision
     45  f88b		       60		      rts
     46  f88c
     47  f88c				   LineControl
     48  f88c
     49  f88c							; Check if Fire Button on controller 1 is pressed
     50  f88c		       a5 0c		      lda	INPT4
     51  f88e		       30 0a		      bmi	.line_control_skip
     52  f890
     53  f890		       24 ad		      bit	LineEnabled
     54  f892		       30 06		      bmi	.line_control_skip
     55  f894
     56  f894		       a5 a6		      lda	SpiderCtrl
     57  f896		       c9 00		      cmp	#0
     58  f898		       d0 03		      bne	.line_control_fire
     59  f89a
     60  f89a				   .line_control_skip
     61  f89a		       4c 43 f9 	      jmp	.line_control_return
     62  f89d
     63  f89d				   .line_control_fire
     64  f89d		       20 d3 f9 	      jsr	LineEnable
     65  f8a0
     66  f8a0				   .line_control_x
     67  f8a0		       a5 a6		      lda	SpiderCtrl
     68  f8a2		       29 c0		      and	#%11000000
     69  f8a4		       f0 0e		      beq	.line_control_x_none
     70  f8a6				   .line_control_x_left
     71  f8a6		       c9 80		      cmp	#%10000000
     72  f8a8		       d0 05		      bne	.line_control_x_right
     73  f8aa
     74  f8aa		       a9 fc		      lda	#-LINE_VEL_X
     75  f8ac		       4c b6 f8 	      jmp	.line_control_x_store
     76  f8af				   .line_control_x_right
     77  f8af		       a9 04		      lda	#LINE_VEL_X
     78  f8b1		       4c b6 f8 	      jmp	.line_control_x_store
     79  f8b4				   .line_control_x_none
     80  f8b4		       a9 00		      lda	#0
     81  f8b6				   .line_control_x_store
     82  f8b6		       85 b0		      sta	LineVelocity
     83  f8b8
     84  f8b8				   .line_control_y
     85  f8b8		       a5 a6		      lda	SpiderCtrl
     86  f8ba		       29 30		      and	#%00110000
     87  f8bc		       f0 0e		      beq	.line_control_y_none
     88  f8be				   .line_control_y_up
     89  f8be		       c9 20		      cmp	#%00100000
     90  f8c0		       d0 05		      bne	.line_control_y_down
     91  f8c2
     92  f8c2		       a9 04		      lda	#LINE_VEL_Y
     93  f8c4		       4c ce f8 	      jmp	.line_control_y_store
     94  f8c7				   .line_control_y_down
     95  f8c7		       a9 fc		      lda	#-LINE_VEL_Y
     96  f8c9		       4c ce f8 	      jmp	.line_control_y_store
     97  f8cc				   .line_control_y_none
     98  f8cc		       a9 00		      lda	#0
     99  f8ce				   .line_control_y_store
    100  f8ce		       85 b1		      sta	LineVelocity+1
    101  f8d0
    102  f8d0				   .line_control_position
    103  f8d0
    104  f8d0		       a2 00		      ldx	#0	; offsetX
    105  f8d2		       a0 00		      ldy	#0	; offsetY
    106  f8d4
    107  f8d4		       a5 a6		      lda	SpiderCtrl
    108  f8d6		       29 f0		      and	#%11110000
    109  f8d8
    110  f8d8				   .line_control_position_left
    111  f8d8		       c9 80		      cmp	#%10000000
    112  f8da		       d0 07		      bne	.line_control_position_right
    113  f8dc
    114  f8dc		       a2 00		      ldx	#0
    115  f8de		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    116  f8e0		       4c 2b f9 	      jmp	.line_control_position_store
    117  f8e3
    118  f8e3				   .line_control_position_right
    119  f8e3		       c9 40		      cmp	#%01000000
    120  f8e5		       d0 07		      bne	.line_control_position_top
    121  f8e7
    122  f8e7		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    123  f8e9		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    124  f8eb		       4c 2b f9 	      jmp	.line_control_position_store
    125  f8ee
    126  f8ee				   .line_control_position_top
    127  f8ee		       c9 20		      cmp	#%00100000
    128  f8f0		       d0 07		      bne	.line_control_position_bottom
    129  f8f2
    130  f8f2		       a2 08		      ldx	#SPIDER_SIZE/2
    131  f8f4		       a0 10		      ldy	#SPIDER_SIZE
    132  f8f6		       4c 2b f9 	      jmp	.line_control_position_store
    133  f8f9
    134  f8f9				   .line_control_position_bottom
    135  f8f9		       c9 10		      cmp	#%00010000
    136  f8fb		       d0 05		      bne	.line_control_position_top_right
    137  f8fd
    138  f8fd		       a2 08		      ldx	#SPIDER_SIZE/2
    139  f8ff		       4c 2b f9 	      jmp	.line_control_position_store
    140  f902
    141  f902				   .line_control_position_top_right
    142  f902		       c9 60		      cmp	#%01100000
    143  f904		       d0 07		      bne	.line_control_position_bottom_right
    144  f906
    145  f906		       a2 10		      ldx	#SPIDER_SIZE
    146  f908		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    147  f90a		       4c 2b f9 	      jmp	.line_control_position_store
    148  f90d
    149  f90d				   .line_control_position_bottom_right
    150  f90d		       c9 50		      cmp	#%01010000
    151  f90f		       d0 07		      bne	.line_control_position_bottom_left
    152  f911
    153  f911		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    154  f913		       a0 00		      ldy	#0
    155  f915		       4c 2b f9 	      jmp	.line_control_position_store
    156  f918
    157  f918				   .line_control_position_bottom_left
    158  f918		       c9 90		      cmp	#%10010000
    159  f91a		       d0 07		      bne	.line_control_position_top_left
    160  f91c
    161  f91c							; No Offset
    162  f91c		       a2 04		      ldx	#LINE_SIZE/2
    163  f91e		       a0 04		      ldy	#LINE_SIZE/2
    164  f920		       4c 2b f9 	      jmp	.line_control_position_store
    165  f923
    166  f923				   .line_control_position_top_left
    167  f923		       c9 a0		      cmp	#%10100000
    168  f925		       d0 04		      bne	.line_control_position_store
    169  f927
    170  f927		       a2 00		      ldx	#0
    171  f929		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    172  f92b
    173  f92b				   .line_control_position_store
    174  f92b
    175  f92b							; Apply offsetX to playerX
    176  f92b		       a5 a4		      lda	SpiderPos
    177  f92d		       86 83		      stx	Temp
    178  f92f		       18		      clc
    179  f930		       65 83		      adc	Temp
    180  f932		       aa		      tax
    181  f933
    182  f933							; Apply offsetY to playerY
    183  f933		       a5 a5		      lda	SpiderPos+1
    184  f935		       84 83		      sty	Temp
    185  f937		       18		      clc
    186  f938		       65 83		      adc	Temp
    187  f93a		       a8		      tay
    188  f93b
    189  f93b		       86 ae		      stx	LinePos
    190  f93d		       84 af		      sty	LinePos+1
    191  f93f		       86 b2		      stx	LineStartPos
    192  f941		       84 b3		      sty	LineStartPos+1
    193  f943
    194  f943				   .line_control_return
    195  f943		       60		      rts
    196  f944
    197  f944				   LineObject
    198  f944
    199  f944							; Check if line is enabled
    200  f944		       24 ad		      bit	LineEnabled
    201  f946		       10 42		      bpl	.line_object_return
    202  f948
    203  f948							; Load position
    204  f948		       a6 ae		      ldx	LinePos
    205  f94a		       a4 af		      ldy	LinePos+1
    206  f94c
    207  f94c				   .line_object_distance
    208  f94c
    209  f94c							; Check distance from player with absolute value differences
    210  f94c
    211  f94c				   .line_object_distance_x
    212  f94c		       8a		      txa
    213  f94d		       18		      clc
    214  f94e		       e5 b2		      sbc	LineStartPos
    215  f950		       b0 04		      bcs	.line_object_distance_x_check
    216  f952		       49 ff		      eor	#$FF	; C flag is clear here
    217  f954		       69 01		      adc	#$01	; form two's complement
    218  f956				   .line_object_distance_x_check		; Jumps to if positive
    219  f956		       c9 40		      cmp	#LINE_DISTANCE
    220  f958		       b0 2d		      bcs	.line_object_disable
    221  f95a
    222  f95a				   .line_object_distance_y
    223  f95a		       98		      tya
    224  f95b		       18		      clc
    225  f95c		       e5 b3		      sbc	LineStartPos+1
    226  f95e		       b0 04		      bcs	.line_object_distance_y_check
    227  f960		       49 ff		      eor	#$FF	; C flag is clear here
    228  f962		       69 01		      adc	#$01	; form two's complement
    229  f964				   .line_object_distance_y_check		; Jumps to if positive
    230  f964		       c9 40		      cmp	#LINE_DISTANCE
    231  f966		       b0 1f		      bcs	.line_object_disable
    232  f968
    233  f968				   .line_object_boundary
    234  f968				   .line_object_boundary_left
    235  f968		       e0 04		      cpx	#LINE_VEL_X
    236  f96a		       90 1b		      bcc	.line_object_disable
    237  f96c				   .line_object_boundary_right
    238  f96c		       e0 9c		      cpx	#160-LINE_VEL_X
    239  f96e		       b0 17		      bcs	.line_object_disable
    240  f970				   .line_object_boundary_bottom
    241  f970		       c0 04		      cpy	#LINE_VEL_Y
    242  f972		       90 13		      bcc	.line_object_disable
    243  f974				   .line_object_boundary_top
    244  f974		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    245  f976		       b0 0f		      bcs	.line_object_disable
    246  f978
    247  f978				   .line_object_velocity
    248  f978
    249  f978							; Apply Velocity
    250  f978		       8a		      txa
    251  f979		       18		      clc
    252  f97a		       65 b0		      adc	LineVelocity
    253  f97c		       85 ae		      sta	LinePos
    254  f97e
    255  f97e		       98		      tya
    256  f97f		       18		      clc
    257  f980		       65 b1		      adc	LineVelocity+1
    258  f982		       85 af		      sta	LinePos+1
    259  f984
    260  f984		       4c 8a f9 	      jmp	.line_object_return
    261  f987
    262  f987				   .line_object_disable
    263  f987		       20 e1 f9 	      jsr	LineDisable
    264  f98a
    265  f98a				   .line_object_return
    266  f98a		       60		      rts
    267  f98b
    268  f98b				   LineCollision
    269  f98b
    270  f98b		       a9 78		      lda	#BUG_STUN_LENGTH
    271  f98d
    272  f98d				   .line_collision_m0
    273  f98d		       24 04		      bit	CXM0FB
    274  f98f		       50 08		      bvc	.line_collision_m1
    275  f991
    276  f991							; Set stun timer
    277  f991		       85 b7		      sta	BugStunned+0
    278  f993
    279  f993							; Disable line
    280  f993		       20 e1 f9 	      jsr	LineDisable
    281  f996		       4c a2 f9 	      jmp	.line_collision_sample
    282  f999
    283  f999				   .line_collision_m1
    284  f999		       24 05		      bit	CXM1FB
    285  f99b		       50 08		      bvc	.line_collision_return
    286  f99d
    287  f99d							; Set stun timer
    288  f99d		       85 b8		      sta	BugStunned+1
    289  f99f
    290  f99f							; Disable line
    291  f99f		       20 e1 f9 	      jsr	LineDisable
    292  f9a2
    293  f9a2				   .line_collision_sample
    294  f9a2		       20 05 fa 	      jsr	LineSample
    295  f9a5
    296  f9a5				   .line_collision_return
    297  f9a5		       60		      rts
    298  f9a6
    299  f9a6				   LinePosition
    300  f9a6
    301  f9a6							; Set Line Position
    302  f9a6		       a2 04		      ldx	#4	; Object (ball)
    303  f9a8		       a5 ae		      lda	LinePos	; X Position
    304  f9aa		       20 00 f0 	      jsr	PosObject
    305  f9ad
    306  f9ad		       60		      rts
    307  f9ae
    308  f9ae							; Scanline Draw
    309  f9ae
    310  f9ae				   LineDrawStart
    311  f9ae
    312  f9ae							; Set ball size to be 4 clocks (4/5 bits)
    313  f9ae		       a5 80		      lda	CtrlPf
    314  f9b0		       29 cf		      and	#%11001111
    315  f9b2		       09 20		      ora	#%00100000
    316  f9b4		       85 80		      sta	CtrlPf
    317  f9b6		       85 0a		      sta	CTRLPF
    318  f9b8
    319  f9b8							; Determine if we need to use vertical delay (oven line)
    320  f9b8		       a5 af		      lda	LinePos+1
    321  f9ba		       4a		      lsr
    322  f9bb		       90 05		      bcc	.line_draw_start_nodelay
    323  f9bd
    324  f9bd		       a0 01		      ldy	#1
    325  f9bf		       4c c4 f9 	      jmp	.line_draw_start_set_delay
    326  f9c2
    327  f9c2				   .line_draw_start_nodelay
    328  f9c2		       a0 00		      ldy	#0
    329  f9c4
    330  f9c4				   .line_draw_start_set_delay
    331  f9c4		       84 27		      sty	VDELBL
    332  f9c6
    333  f9c6				   .line_draw_start_pos
    334  f9c6							; Calculate starting position
    335  f9c6		       18		      clc
    336  f9c7		       85 b4		      sta	LineDrawPos+0
    337  f9c9		       69 04		      adc	#LINE_SIZE/2
    338  f9cb		       85 b5		      sta	LineDrawPos+1
    339  f9cd
    340  f9cd		       60		      rts
    341  f9ce
    342  f9ce				   LineClean
    343  f9ce
    344  f9ce							; Clear out Line
    345  f9ce		       a9 00		      lda	#0
    346  f9d0		       85 1f		      sta	ENABL
    347  f9d2
    348  f9d2		       60		      rts
    349  f9d3
    350  f9d3				   LineEnable
    351  f9d3		       a9 80		      lda	#%10000000
    352  f9d5		       85 ad		      sta	LineEnabled
    353  f9d7
    354  f9d7		       a5 92		      lda	SampleStep
    355  f9d9		       c9 00		      cmp	#0
    356  f9db		       d0 03		      bne	.line_enable_return
    357  f9dd
    358  f9dd		       20 ef f9 	      jsr	LineAudioPlay
    359  f9e0
    360  f9e0				   .line_enable_return
    361  f9e0		       60		      rts
    362  f9e1
    363  f9e1				   LineDisable
    364  f9e1		       a9 00		      lda	#0
    365  f9e3		       85 ad		      sta	LineEnabled
    366  f9e5
    367  f9e5		       a5 92		      lda	SampleStep
    368  f9e7		       c9 00		      cmp	#0
    369  f9e9		       d0 03		      bne	.line_disable_return
    370  f9eb
    371  f9eb		       20 fc f9 	      jsr	LineAudioMute
    372  f9ee
    373  f9ee				   .line_disable_return
    374  f9ee		       60		      rts
    375  f9ef
    376  f9ef				   LineAudioPlay
    377  f9ef		       a9 08		      lda	#LINE_AUDIO_C
    378  f9f1		       85 16		      sta	AUDC1
    379  f9f3		       a9 01		      lda	#LINE_AUDIO_F
    380  f9f5		       85 18		      sta	AUDF1
    381  f9f7		       a9 04		      lda	#LINE_AUDIO_V
    382  f9f9		       85 1a		      sta	AUDV1
    383  f9fb		       60		      rts
    384  f9fc
    385  f9fc				   LineAudioMute
    386  f9fc		       a9 00		      lda	#0
    387  f9fe		       85 1a		      sta	AUDV1
    388  fa00		       85 18		      sta	AUDF1
    389  fa02		       85 16		      sta	AUDC1
    390  fa04		       60		      rts
    391  fa05
    392  fa05				   LineSample
    393  fa05		       a9 08		      lda	#LINE_SAMPLE_LEN
    394  fa07		       85 92		      sta	SampleStep
    395  fa09		       a9 03		      lda	#LINE_SAMPLE_C
    396  fa0b		       85 16		      sta	AUDC1
    397  fa0d		       a9 01		      lda	#LINE_SAMPLE_F
    398  fa0f		       85 18		      sta	AUDF1
    399  fa11		       a9 04		      lda	#LINE_SAMPLE_V
    400  fa13		       85 1a		      sta	AUDV1
    401  fa15		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  fa16					      include	"objects/bug.asm"
      1  fa16							;======================
      2  fa16							; Bugs (missiles 0 & 1)
      3  fa16							;======================
      4  fa16
      5  fa16							; Constants
      6  fa16
      7  fa16		       00 08	   BUG_SIZE   =	8
      8  fa16		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  fa16		       00 78	   BUG_STUN_LENGTH =	120
     10  fa16		       00 04	   BUG_POINTS =	4
     11  fa16
     12  fa16		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  fa16		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  fa16		       00 38	   BUG_STUN_COLOR =	#$38
     15  fa16		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  fa16
     17  fa16		       00 1e	   BUG_SAMPLE_LEN =	30
     18  fa16		       00 03	   BUG_SAMPLE_C =	3
     19  fa16		       00 14	   BUG_SAMPLE_F =	20
     20  fa16		       00 04	   BUG_SAMPLE_V =	4
     21  fa16
     22  fa16		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  fa16		       00 08	   BUG_COL_SAMPLE_C =	8
     24  fa16		       00 08	   BUG_COL_SAMPLE_F =	8
     25  fa16		       00 03	   BUG_COL_SAMPLE_V =	3
     26  fa16
     27  fa16							; Initialization
     28  fa16
     29  fa16				   BugInit
     30  fa16
     31  fa16							; Initialize Bugs
     32  fa16		       a2 01		      ldx	#1
     33  fa18
     34  fa18				   .bug_init_loop
     35  fa18		       20 1f fa 	      jsr	BugReset
     36  fa1b
     37  fa1b		       ca		      dex
     38  fa1c		       10 fa		      bpl	.bug_init_loop
     39  fa1e
     40  fa1e		       60		      rts
     41  fa1f
     42  fa1f				   BugReset		; x = bug (0 or 1)
     43  fa1f
     44  fa1f							; Set random position
     45  fa1f		       20 13 f0 	      jsr	Random
     46  fa22
     47  fa22		       a5 86		      lda	Rand8
     48  fa24		       29 7f		      and	#$7f
     49  fa26		       95 b9		      sta	BugPosX,x
     50  fa28
     51  fa28		       a5 87		      lda	Rand16
     52  fa2a		       29 7f		      and	#$7f
     53  fa2c		       95 bb		      sta	BugPosY,x
     54  fa2e
     55  fa2e							; Set as active
     56  fa2e		       a9 00		      lda	#0
     57  fa30		       95 b7		      sta	BugStunned,x
     58  fa32
     59  fa32		       60		      rts
     60  fa33
     61  fa33							; Frame Update
     62  fa33
     63  fa33				   BugUpdate
     64  fa33
     65  fa33		       a2 01		      ldx	#1
     66  fa35				   .bug_update_loop
     67  fa35		       86 83		      stx	Temp+0
     68  fa37
     69  fa37		       b5 b7		      lda	BugStunned,x
     70  fa39		       c9 00		      cmp	#0
     71  fa3b		       f0 08		      beq	.bug_update_active
     72  fa3d
     73  fa3d				   .bug_update_stunned
     74  fa3d		       d6 b7		      dec	BugStunned,x
     75  fa3f		       20 ca fa 	      jsr	BugStunCollision
     76  fa42		       4c 4b fa 	      jmp	.bug_update_next
     77  fa45
     78  fa45				   .bug_update_active
     79  fa45		       20 51 fa 	      jsr	BugMovement
     80  fa48		       20 b0 fa 	      jsr	BugCollision
     81  fa4b
     82  fa4b				   .bug_update_next
     83  fa4b		       a6 83		      ldx	Temp+0
     84  fa4d		       ca		      dex
     85  fa4e		       10 e5		      bpl	.bug_update_loop
     86  fa50
     87  fa50		       60		      rts
     88  fa51
     89  fa51				   BugMovement
     90  fa51
     91  fa51				   .bug_movement_random
     92  fa51		       20 13 f0 	      jsr	Random
     93  fa54		       29 03		      and	#%00000011
     94  fa56		       85 84		      sta	Temp+1
     95  fa58
     96  fa58				   .bug_movement_load
     97  fa58		       a6 83		      ldx	Temp+0
     98  fa5a
     99  fa5a				   .bug_movement_x
    100  fa5a		       a4 b6		      ldy	BugSpeed
    101  fa5c
    102  fa5c							; Alter X Position
    103  fa5c		       a5 84		      lda	Temp+1
    104  fa5e		       29 01		      and	#%00000001
    105  fa60
    106  fa60				   .bug_movement_x_check
    107  fa60		       c9 01		      cmp	#1
    108  fa62		       d0 08		      bne	.bug_movement_x_right
    109  fa64
    110  fa64				   .bug_movement_x_left
    111  fa64		       d6 b9		      dec	BugPosX,x
    112  fa66		       88		      dey
    113  fa67		       d0 fb		      bne	.bug_movement_x_left
    114  fa69
    115  fa69		       4c 71 fa 	      jmp	.bug_movement_y
    116  fa6c
    117  fa6c				   .bug_movement_x_right
    118  fa6c		       f6 b9		      inc	BugPosX,x
    119  fa6e		       88		      dey
    120  fa6f		       d0 fb		      bne	.bug_movement_x_right
    121  fa71
    122  fa71				   .bug_movement_y
    123  fa71		       a4 b6		      ldy	BugSpeed
    124  fa73
    125  fa73							; Alter Y Position
    126  fa73		       a5 84		      lda	Temp+1
    127  fa75		       29 02		      and	#%00000010
    128  fa77		       4a		      lsr
    129  fa78
    130  fa78				   .bug_movement_y_check
    131  fa78		       c9 01		      cmp	#1
    132  fa7a		       d0 08		      bne	.bug_movement_y_down
    133  fa7c
    134  fa7c				   .bug_movement_y_up
    135  fa7c		       f6 bb		      inc	BugPosY,x
    136  fa7e		       88		      dey
    137  fa7f		       d0 fb		      bne	.bug_movement_y_up
    138  fa81
    139  fa81		       4c 89 fa 	      jmp	.bug_movement_boundary
    140  fa84
    141  fa84				   .bug_movement_y_down
    142  fa84		       d6 bb		      dec	BugPosY,x
    143  fa86		       88		      dey
    144  fa87		       d0 fb		      bne	.bug_movement_y_down
    145  fa89
    146  fa89				   .bug_movement_boundary
    147  fa89		       b5 b9		      lda	BugPosX,x
    148  fa8b		       b4 bb		      ldy	BugPosY,x
    149  fa8d
    150  fa8d				   .bug_movement_boundary_left
    151  fa8d		       c9 18		      cmp	#BUG_BOUNDARY
    152  fa8f		       b0 05		      bcs	.bug_movement_boundary_right
    153  fa91		       a9 18		      lda	#BUG_BOUNDARY
    154  fa93		       4c 9c fa 	      jmp	.bug_movement_boundary_top
    155  fa96
    156  fa96				   .bug_movement_boundary_right
    157  fa96		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    158  fa98		       90 02		      bcc	.bug_movement_boundary_top
    159  fa9a		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    160  fa9c
    161  fa9c				   .bug_movement_boundary_top
    162  fa9c		       c0 18		      cpy	#BUG_BOUNDARY
    163  fa9e		       b0 05		      bcs	.bug_movement_boundary_bottom
    164  faa0		       a0 18		      ldy	#BUG_BOUNDARY
    165  faa2		       4c ab fa 	      jmp	.bug_movement_store
    166  faa5
    167  faa5				   .bug_movement_boundary_bottom
    168  faa5		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    169  faa7		       90 02		      bcc	.bug_movement_store
    170  faa9		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    171  faab
    172  faab				   .bug_movement_store
    173  faab		       95 b9		      sta	BugPosX,x
    174  faad		       94 bb		      sty	BugPosY,x
    175  faaf
    176  faaf				   .bug_movement_return
    177  faaf		       60		      rts
    178  fab0
    179  fab0				   BugCollision
    180  fab0
    181  fab0		       e0 01		      cpx	#1
    182  fab2		       f0 05		      beq	.bug_collision_m1
    183  fab4
    184  fab4				   .bug_collision_m0
    185  fab4							; Collision for M0 (V set)
    186  fab4		       24 00		      bit	CXM0P
    187  fab6		       70 06		      bvs	.bug_collision_active
    188  fab8		       60		      rts
    189  fab9
    190  fab9				   .bug_collision_m1
    191  fab9							; Collision for M1 (N set)
    192  fab9		       24 01		      bit	CXM1P
    193  fabb		       30 01		      bmi	.bug_collision_active
    194  fabd		       60		      rts
    195  fabe
    196  fabe				   .bug_collision_active
    197  fabe
    198  fabe							; Reduce players score
    199  fabe		       a5 93		      lda	ScoreValue
    200  fac0		       c9 00		      cmp	#0
    201  fac2		       f0 02		      beq	.bug_collision_score_skip
    202  fac4		       c6 93		      dec	ScoreValue
    203  fac6				   .bug_collision_score_skip
    204  fac6
    205  fac6							; Play sound
    206  fac6		       20 2a fb 	      jsr	BugColSample
    207  fac9
    208  fac9		       60		      rts
    209  faca
    210  faca				   BugStunCollision
    211  faca
    212  faca		       e0 01		      cpx	#1
    213  facc		       f0 05		      beq	.bug_stun_collision_m1
    214  face
    215  face				   .bug_stun_collision_m0
    216  face							; Collision for M0 (V set)
    217  face		       24 00		      bit	CXM0P
    218  fad0		       70 06		      bvs	.bug_stun_collision_active
    219  fad2		       60		      rts
    220  fad3
    221  fad3				   .bug_stun_collision_m1
    222  fad3							; Collision for M1 (N set)
    223  fad3		       24 01		      bit	CXM1P
    224  fad5		       30 01		      bmi	.bug_stun_collision_active
    225  fad7		       60		      rts
    226  fad8
    227  fad8				   .bug_stun_collision_active
    228  fad8							; Add points to score
    229  fad8		       18		      clc
    230  fad9		       a5 94		      lda	ScoreValue+1
    231  fadb		       69 04		      adc	#BUG_POINTS
    232  fadd		       85 94		      sta	ScoreValue+1
    233  fadf
    234  fadf							; Reset bug
    235  fadf		       20 1f fa 	      jsr	BugReset
    236  fae2
    237  fae2							; Play sample
    238  fae2		       20 19 fb 	      jsr	BugSample
    239  fae5
    240  fae5		       60		      rts
    241  fae6
    242  fae6							; Horizontal Positioning
    243  fae6
    244  fae6				   BugPosition
    245  fae6
    246  fae6		       a2 02		      ldx	#2
    247  fae8		       a5 b9		      lda	BugPosX+0
    248  faea		       20 00 f0 	      jsr	PosObject
    249  faed
    250  faed		       a2 03		      ldx	#3
    251  faef		       a5 ba		      lda	BugPosX+1
    252  faf1		       20 00 f0 	      jsr	PosObject
    253  faf4
    254  faf4		       60		      rts
    255  faf5
    256  faf5							; Scanline Draw
    257  faf5
    258  faf5				   BugDrawStart
    259  faf5
    260  faf5		       a0 01		      ldy	#1
    261  faf7				   .bug_draw_start_loop
    262  faf7
    263  faf7							; Set missile 0 & 1 to be 8 clock size
    264  faf7		       b9 81 00 	      lda	NuSiz0,y
    265  fafa		       09 30		      ora	#%00110000
    266  fafc		       99 81 00 	      sta	NuSiz0,y
    267  faff		       99 04 00 	      sta	NUSIZ0,y
    268  fb02
    269  fb02							; Setup half scanline positions
    270  fb02		       b9 bb 00 	      lda	BugPosY,y
    271  fb05		       4a		      lsr
    272  fb06		       99 bd 00 	      sta	BugDrawPosBottom,y
    273  fb09
    274  fb09		       69 04		      adc	#BUG_SIZE/2
    275  fb0b		       99 bf 00 	      sta	BugDrawPosTop,y
    276  fb0e
    277  fb0e		       88		      dey
    278  fb0f		       10 e6		      bpl	.bug_draw_start_loop
    279  fb11
    280  fb11		       60		      rts
    281  fb12
    282  fb12				   BugClean
    283  fb12		       a9 00		      lda	#0
    284  fb14		       85 1d		      sta	ENAM0
    285  fb16		       85 1e		      sta	ENAM1
    286  fb18		       60		      rts
    287  fb19
    288  fb19				   BugSample
    289  fb19		       a9 1e		      lda	#BUG_SAMPLE_LEN
    290  fb1b		       85 92		      sta	SampleStep
    291  fb1d		       a9 03		      lda	#BUG_SAMPLE_C
    292  fb1f		       85 16		      sta	AUDC1
    293  fb21		       a9 14		      lda	#BUG_SAMPLE_F
    294  fb23		       85 18		      sta	AUDF1
    295  fb25		       a9 04		      lda	#BUG_SAMPLE_V
    296  fb27		       85 1a		      sta	AUDV1
    297  fb29		       60		      rts
    298  fb2a
    299  fb2a				   BugColSample
    300  fb2a		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    301  fb2c		       85 92		      sta	SampleStep
    302  fb2e		       a9 08		      lda	#BUG_COL_SAMPLE_C
    303  fb30		       85 16		      sta	AUDC1
    304  fb32		       a9 08		      lda	#BUG_COL_SAMPLE_F
    305  fb34		       85 18		      sta	AUDF1
    306  fb36		       a9 03		      lda	#BUG_COL_SAMPLE_V
    307  fb38		       85 1a		      sta	AUDV1
    308  fb3a		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fb3b					      include	"objects/swatter.asm"
      1  fb3b							;==================
      2  fb3b							; Swatter (player1)
      3  fb3b							;==================
      4  fb3b
      5  fb3b							; Constants
      6  fb3b
      7  fb3b		       00 30	   SWATTER_COLOR =	#$30
      8  fb3b		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fb3b		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fb3b		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fb3b
     12  fb3b		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fb3b		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fb3b
     15  fb3b		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fb3b		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fb3b
     18  fb3b		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fb3b		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fb3b		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fb3b
     22  fb3b		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fb3b		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fb3b		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fb3b		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fb3b		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fb3b
     28  fb3b		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fb3b		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fb3b		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fb3b		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fb3b
     33  fb3b		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fb3b		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fb3b		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fb3b		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fb3b
     38  fb3b							; Initialization
     39  fb3b
     40  fb3b				   SwatterInit
     41  fb3b
     42  fb3b		       20 19 fc 	      jsr	SwatterReset
     43  fb3e
     44  fb3e		       60		      rts
     45  fb3f
     46  fb3f							; Frame Update
     47  fb3f
     48  fb3f				   SwatterUpdate
     49  fb3f
     50  fb3f							; Check b/w
     51  fb3f		       ad 82 02 	      lda	SWCHB
     52  fb42					      REPEAT	4
     53  fb42		       4a		      lsr
     52  fb42					      REPEND
     53  fb43		       4a		      lsr
     52  fb43					      REPEND
     53  fb44		       4a		      lsr
     52  fb44					      REPEND
     53  fb45		       4a		      lsr
     54  fb46					      REPEND
     55  fb46		       90 10		      bcc	.swatter_update_bw
     56  fb48
     57  fb48				   .swatter_update_color
     58  fb48		       a5 c3		      lda	SwatterState
     59  fb4a		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     60  fb4c		       d0 05		      bne	.swatter_update_color_hold
     61  fb4e				   .swatter_update_color_active
     62  fb4e		       a9 30		      lda	#SWATTER_COLOR
     63  fb50		       4c 65 fb 	      jmp	.swatter_update_color_set
     64  fb53				   .swatter_update_color_hold
     65  fb53		       a9 36		      lda	#SWATTER_HOLD_COLOR
     66  fb55		       4c 65 fb 	      jmp	.swatter_update_color_set
     67  fb58
     68  fb58				   .swatter_update_bw
     69  fb58		       a5 c3		      lda	SwatterState
     70  fb5a		       c9 80		      cmp	#SWATTER_STATE_HOLD
     71  fb5c		       d0 05		      bne	.swatter_update_bw_active
     72  fb5e				   .swatter_update_bw_hold
     73  fb5e		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     74  fb60		       4c 65 fb 	      jmp	.swatter_update_color_set
     75  fb63				   .swatter_update_bw_active
     76  fb63		       a9 0e		      lda	#SWATTER_BW_COLOR
     77  fb65
     78  fb65				   .swatter_update_color_set
     79  fb65		       85 c4		      sta	SwatterColor
     80  fb67
     81  fb67				   .swatter_update_hold_sample
     82  fb67		       a4 c3		      ldy	SwatterState
     83  fb69		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fb6b		       d0 0f		      bne	.swatter_update_state
     85  fb6d
     86  fb6d		       c6 ca		      dec	SwatterSampleCount
     87  fb6f		       d0 0b		      bne	.swatter_update_state
     88  fb71
     89  fb71		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     90  fb73		       85 ca		      sta	SwatterSampleCount
     91  fb75
     92  fb75		       c6 cb		      dec	SwatterSampleF
     93  fb77		       a4 cb		      ldy	SwatterSampleF
     94  fb79		       20 39 fc 	      jsr	SwatterHoldSample
     95  fb7c
     96  fb7c				   .swatter_update_state
     97  fb7c		       a6 90		      ldx	FrameTimer+1
     98  fb7e		       e0 00		      cpx	#0
     99  fb80		       d0 2d		      bne	.swatter_update_collision
    100  fb82
    101  fb82		       a4 c3		      ldy	SwatterState
    102  fb84		       c0 00		      cpy	#SWATTER_STATE_WAIT
    103  fb86		       f0 0a		      beq	.swatter_update_state_wait
    104  fb88
    105  fb88		       c0 80		      cpy	#SWATTER_STATE_HOLD
    106  fb8a		       f0 18		      beq	.swatter_update_state_hold
    107  fb8c
    108  fb8c							; Else we're at the end of the active state
    109  fb8c		       20 19 fc 	      jsr	SwatterReset
    110  fb8f		       4c be fb 	      jmp	.swatter_update_return
    111  fb92
    112  fb92				   .swatter_update_state_wait
    113  fb92		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    114  fb94		       84 cb		      sty	SwatterSampleF
    115  fb96		       20 39 fc 	      jsr	SwatterHoldSample
    116  fb99
    117  fb99		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    118  fb9b		       85 ca		      sta	SwatterSampleCount
    119  fb9d
    120  fb9d		       a9 80		      lda	#SWATTER_STATE_HOLD
    121  fb9f		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    122  fba1		       4c ab fb 	      jmp	.swatter_update_state_set
    123  fba4
    124  fba4				   .swatter_update_state_hold
    125  fba4		       20 48 fc 	      jsr	SwatterActiveSample
    126  fba7
    127  fba7		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    128  fba9		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    129  fbab
    130  fbab				   .swatter_update_state_set
    131  fbab		       85 c3		      sta	SwatterState
    132  fbad		       86 90		      stx	FrameTimer+1
    133  fbaf
    134  fbaf				   .swatter_update_collision
    135  fbaf							; Check 1 frame after active
    136  fbaf		       a5 c3		      lda	SwatterState
    137  fbb1		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    138  fbb3		       d0 09		      bne	.swatter_update_return
    139  fbb5		       a6 90		      ldx	FrameTimer+1
    140  fbb7		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    141  fbb9		       d0 03		      bne	.swatter_update_return
    142  fbbb
    143  fbbb		       20 bf fb 	      jsr	SwatterCollision
    144  fbbe
    145  fbbe				   .swatter_update_return
    146  fbbe		       60		      rts
    147  fbbf
    148  fbbf				   SwatterCollision
    149  fbbf		       24 00		      bit	CXM0P
    150  fbc1		       30 09		      bmi	.swatter_collision_m0
    151  fbc3
    152  fbc3		       24 01		      bit	CXM1P
    153  fbc5		       70 0a		      bvs	.swatter_collision_m1
    154  fbc7
    155  fbc7		       24 07		      bit	CXPPMM
    156  fbc9		       30 0e		      bmi	.swatter_collision_p0
    157  fbcb
    158  fbcb		       60		      rts
    159  fbcc
    160  fbcc				   .swatter_collision_m0
    161  fbcc		       a2 00		      ldx	#0
    162  fbce		       4c d3 fb 	      jmp	.swatter_collision_bug_reset
    163  fbd1
    164  fbd1				   .swatter_collision_m1
    165  fbd1		       a2 01		      ldx	#1
    166  fbd3
    167  fbd3				   .swatter_collision_bug_reset
    168  fbd3		       20 1f fa 	      jsr	BugReset
    169  fbd6		       4c eb fb 	      jmp	.swatter_collision_active
    170  fbd9
    171  fbd9				   .swatter_collision_p0
    172  fbd9
    173  fbd9		       a5 93		      lda	ScoreValue
    174  fbdb		       c5 c6		      cmp	SwatterHitDamage
    175  fbdd		       90 08		      bcc	.swatter_collision_p0_zero
    176  fbdf		       f0 06		      beq	.swatter_collision_p0_zero
    177  fbe1
    178  fbe1		       18		      clc
    179  fbe2		       e5 c6		      sbc	SwatterHitDamage
    180  fbe4		       4c e9 fb 	      jmp	.swatter_collision_p0_set
    181  fbe7
    182  fbe7				   .swatter_collision_p0_zero
    183  fbe7		       a9 00		      lda	#0
    184  fbe9
    185  fbe9				   .swatter_collision_p0_set
    186  fbe9		       85 93		      sta	ScoreValue
    187  fbeb
    188  fbeb				   .swatter_collision_active
    189  fbeb		       20 59 fc 	      jsr	SwatterHitSample
    190  fbee
    191  fbee		       60		      rts
    192  fbef
    193  fbef				   SwatterPosition
    194  fbef
    195  fbef							; Set Position
    196  fbef		       a2 01		      ldx	#1	; Object (player1)
    197  fbf1		       a5 c1		      lda	SwatterPos	; X Position
    198  fbf3		       20 00 f0 	      jsr	PosObject
    199  fbf6
    200  fbf6		       60		      rts
    201  fbf7
    202  fbf7							; Scanline Draw
    203  fbf7
    204  fbf7				   SwatterDrawStart
    205  fbf7
    206  fbf7							; Set player 1 to be quad size
    207  fbf7		       a5 82		      lda	NuSiz1
    208  fbf9		       29 f8		      and	#%11111000
    209  fbfb		       09 07		      ora	#%00000111
    210  fbfd		       85 82		      sta	NuSiz1
    211  fbff		       85 05		      sta	NUSIZ1
    212  fc01
    213  fc01							; Set sprite color
    214  fc01		       a5 c4		      lda	SwatterColor
    215  fc03		       85 07		      sta	COLUP1
    216  fc05
    217  fc05							; Note: Doesn't need vertical delay
    218  fc05
    219  fc05							; Calculate starting position
    220  fc05		       a5 c2		      lda	SwatterPos+1	; Y Position
    221  fc07		       4a		      lsr
    222  fc08		       18		      clc
    223  fc09		       69 14		      adc	#SWATTER_SPRITE_SIZE
    224  fc0b		       85 c8		      sta	SwatterDrawPos
    225  fc0d
    226  fc0d							; Initialize sprite index
    227  fc0d		       a9 00		      lda	#0
    228  fc0f		       85 c7		      sta	SwatterIndex
    229  fc11		       85 c9		      sta	SwatterLine
    230  fc13
    231  fc13		       60		      rts
    232  fc14
    233  fc14				   SwatterClean
    234  fc14
    235  fc14							; Clear out Player1 sprite
    236  fc14		       a9 00		      lda	#0
    237  fc16		       85 1c		      sta	GRP1
    238  fc18
    239  fc18		       60		      rts
    240  fc19
    241  fc19				   SwatterReset
    242  fc19							; Initialize Swatter State
    243  fc19		       a9 00		      lda	#SWATTER_STATE_WAIT
    244  fc1b		       85 c3		      sta	SwatterState
    245  fc1d
    246  fc1d							; Set Wait Timer
    247  fc1d		       20 13 f0 	      jsr	Random
    248  fc20		       a5 86		      lda	Rand8
    249  fc22		       29 3f		      and	#$3f
    250  fc24		       18		      clc
    251  fc25		       65 c5		      adc	SwatterWaitTime
    252  fc27		       85 90		      sta	FrameTimer+1
    253  fc29
    254  fc29							; Set Random Position
    255  fc29		       20 13 f0 	      jsr	Random
    256  fc2c		       a5 86		      lda	Rand8	; X Position
    257  fc2e		       29 7f		      and	#$7f
    258  fc30		       85 c1		      sta	SwatterPos+0
    259  fc32		       a5 87		      lda	Rand16	; Y Position
    260  fc34		       29 7e		      and	#$7e	; Ensure that Y position is even
    261  fc36		       85 c2		      sta	SwatterPos+1
    262  fc38
    263  fc38		       60		      rts
    264  fc39
    265  fc39				   SwatterHoldSample
    266  fc39		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    267  fc3b		       85 92		      sta	SampleStep
    268  fc3d		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    269  fc3f		       85 16		      sta	AUDC1
    270  fc41		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    271  fc43		       85 1a		      sta	AUDV1
    272  fc45
    273  fc45		       84 18		      sty	AUDF1	; Store value of y as frequency
    274  fc47
    275  fc47		       60		      rts
    276  fc48
    277  fc48				   SwatterActiveSample
    278  fc48		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    279  fc4a		       85 92		      sta	SampleStep
    280  fc4c		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    281  fc4e		       85 16		      sta	AUDC1
    282  fc50		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    283  fc52		       85 18		      sta	AUDF1
    284  fc54		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    285  fc56		       85 1a		      sta	AUDV1
    286  fc58		       60		      rts
    287  fc59
    288  fc59				   SwatterHitSample
    289  fc59		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    290  fc5b		       85 92		      sta	SampleStep
    291  fc5d		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    292  fc5f		       85 16		      sta	AUDC1
    293  fc61		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    294  fc63		       85 18		      sta	AUDF1
    295  fc65		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    296  fc67		       85 1a		      sta	AUDV1
    297  fc69		       60		      rts
------- FILE game.asm
     22  fc6a
     23  fc6a							; Initialization
     24  fc6a
     25  fc6a				   GameInit
     26  fc6a
     27  fc6a							; Setup logic and kernel
      0  fc6a					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fc6a				   .POINTER   SET	VBlankPtr
      2  fc6a				   .ADDRESS   SET	GameVerticalBlank
      3  fc6a
      4  fc6a		       a9 bb		      LDA	#<.ADDRESS
      5  fc6c		       85 88		      STA	.POINTER
      6  fc6e		       a9 fc		      LDA	#>.ADDRESS
      7  fc70		       85 89		      STA	.POINTER+1
      8  fc72
      0  fc72					      SET_POINTER	KernelPtr, GameKernel
      1  fc72				   .POINTER   SET	KernelPtr
      2  fc72				   .ADDRESS   SET	GameKernel
      3  fc72
      4  fc72		       a9 41		      LDA	#<.ADDRESS
      5  fc74		       85 8a		      STA	.POINTER
      6  fc76		       a9 fd		      LDA	#>.ADDRESS
      7  fc78		       85 8b		      STA	.POINTER+1
      8  fc7a
      0  fc7a					      SET_POINTER	OverScanPtr, GameOverScan
      1  fc7a				   .POINTER   SET	OverScanPtr
      2  fc7a				   .ADDRESS   SET	GameOverScan
      3  fc7a
      4  fc7a		       a9 e5		      LDA	#<.ADDRESS
      5  fc7c		       85 8c		      STA	.POINTER
      6  fc7e		       a9 fc		      LDA	#>.ADDRESS
      7  fc80		       85 8d		      STA	.POINTER+1
      8  fc82
     31  fc82
     32  fc82							; Mute Audio
     33  fc82		       a9 00		      lda	#0
     34  fc84		       85 15		      sta	AUDC0
     35  fc86		       85 19		      sta	AUDV0
     36  fc88		       85 17		      sta	AUDF0
     37  fc8a		       85 16		      sta	AUDC1
     38  fc8c		       85 1a		      sta	AUDV1
     39  fc8e		       85 18		      sta	AUDF1
     40  fc90		       85 92		      sta	SampleStep
     41  fc92
     42  fc92							; Load Audio Settings
     43  fc92		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fc94		       85 19		      sta	AUDV0
     45  fc96
     46  fc96							; Make it so that we play the first note immediately
     47  fc96		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fc98		       85 91		      sta	AudioStep
     49  fc9a		       a9 02		      lda	#2
     50  fc9c		       85 8f		      sta	FrameTimer
     51  fc9e
     52  fc9e							; Reset NuSiz
     53  fc9e		       a9 00		      lda	#0
     54  fca0		       85 81		      sta	NuSiz0
     55  fca2		       85 04		      sta	NUSIZ0
     56  fca4		       85 82		      sta	NuSiz1
     57  fca6		       85 05		      sta	NUSIZ1
     58  fca8
     59  fca8							; Initialize Objects
     60  fca8		       20 db f4 	      jsr	LevelInit
     61  fcab		       20 51 f5 	      jsr	ScoreInit
     62  fcae		       20 06 f7 	      jsr	SpiderInit
     63  fcb1		       20 6d f8 	      jsr	LineInit
     64  fcb4		       20 16 fa 	      jsr	BugInit
     65  fcb7		       20 3b fb 	      jsr	SwatterInit
     66  fcba
     67  fcba		       60		      rts
     68  fcbb
     69  fcbb				   GameVerticalBlank
     70  fcbb
     71  fcbb							; Refresh random values
     72  fcbb		       20 13 f0 	      jsr	Random
     73  fcbe
     74  fcbe							; Update Objects
     75  fcbe		       20 ec f4 	      jsr	LevelUpdate
     76  fcc1		       20 17 f7 	      jsr	SpiderUpdate
     77  fcc4		       20 82 f8 	      jsr	LineUpdate
     78  fcc7		       20 33 fa 	      jsr	BugUpdate
     79  fcca		       20 3f fb 	      jsr	SwatterUpdate
     80  fccd		       20 5a f5 	      jsr	ScoreUpdate
     81  fcd0
     82  fcd0							; Reset Collisions
     83  fcd0		       85 2c		      sta	CXCLR
     84  fcd2
     85  fcd2							; Clear horizontal movement
     86  fcd2		       85 2b		      sta	HMCLR
     87  fcd4
     88  fcd4							; Update Positions
     89  fcd4		       20 38 f8 	      jsr	SpiderPosition
     90  fcd7		       20 a6 f9 	      jsr	LinePosition
     91  fcda		       20 e6 fa 	      jsr	BugPosition
     92  fcdd		       20 ef fb 	      jsr	SwatterPosition
     93  fce0
     94  fce0							; Set final x positions
     95  fce0		       85 02		      sta	WSYNC
     96  fce2		       85 2a		      sta	HMOVE
     97  fce4
     98  fce4		       60		      rts
     99  fce5
    100  fce5				   GameOverScan
    101  fce5
    102  fce5							; Audio Routines
    103  fce5		       20 03 fd 	      jsr	GameAudio
    104  fce8		       20 ef fc 	      jsr	GameSample
    105  fceb
    106  fceb							; State Routines
    107  fceb		       20 37 fd 	      jsr	GameDeath
    108  fcee
    109  fcee		       60		      rts
    110  fcef
    111  fcef				   GameSample
    112  fcef
    113  fcef		       a6 92		      ldx	SampleStep
    114  fcf1		       e0 00		      cpx	#0
    115  fcf3		       f0 0b		      beq	.game_sample_return
    116  fcf5
    117  fcf5		       ca		      dex
    118  fcf6		       d0 08		      bne	.game_sample_return
    119  fcf8
    120  fcf8				   .game_sample_mute
    121  fcf8		       a9 00		      lda	#0
    122  fcfa		       85 1a		      sta	AUDV1
    123  fcfc		       85 18		      sta	AUDF1
    124  fcfe		       85 16		      sta	AUDC1
    125  fd00
    126  fd00				   .game_sample_return
    127  fd00		       86 92		      stx	SampleStep
    128  fd02		       60		      rts
    129  fd03
    130  fd03				   GameAudio
    131  fd03
    132  fd03		       a6 8f		      ldx	FrameTimer
    133  fd05		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    134  fd07		       f0 25		      beq	.game_audio_mute_note
    135  fd09		       e0 00		      cpx	#0
    136  fd0b		       d0 29		      bne	.game_audio_return
    137  fd0d
    138  fd0d							; Reset Timer
    139  fd0d		       a2 09		      ldx	#GAME_AUDIO_STEP
    140  fd0f		       86 8f		      stx	FrameTimer
    141  fd11
    142  fd11				   .game_audio_play
    143  fd11
    144  fd11							; Increment melody position
    145  fd11		       a4 91		      ldy	AudioStep
    146  fd13		       c8		      iny
    147  fd14
    148  fd14		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    149  fd16		       d0 02		      bne	.game_audio_play_note
    150  fd18
    151  fd18							; Loop our audio step
    152  fd18		       a0 00		      ldy	#0
    153  fd1a
    154  fd1a				   .game_audio_play_note
    155  fd1a
    156  fd1a							; Save current position
    157  fd1a		       84 91		      sty	AudioStep
    158  fd1c
    159  fd1c							; Melody Line
    160  fd1c		       b9 e6 fe 	      lda	GameAudio0,y
    161  fd1f		       c9 ff		      cmp	#$FF
    162  fd21		       f0 0b		      beq	.game_audio_mute_note
    163  fd23		       85 17		      sta	AUDF0
    164  fd25		       a9 06		      lda	#GAME_AUDIO_TONE
    165  fd27		       85 15		      sta	AUDC0
    166  fd29		       a9 02		      lda	#GAME_AUDIO_VOLUME
    167  fd2b		       85 19		      sta	AUDV0
    168  fd2d
    169  fd2d		       60		      rts
    170  fd2e
    171  fd2e				   .game_audio_mute_note
    172  fd2e
    173  fd2e		       a9 00		      lda	#0
    174  fd30		       85 17		      sta	AUDF0
    175  fd32		       85 15		      sta	AUDC0
    176  fd34		       85 19		      sta	AUDV0
    177  fd36
    178  fd36				   .game_audio_return
    179  fd36		       60		      rts
    180  fd37
    181  fd37				   GameDeath
    182  fd37		       a5 93		      lda	ScoreValue+0
    183  fd39		       c9 00		      cmp	#0
    184  fd3b		       d0 03		      bne	.game_death_return
    185  fd3d
    186  fd3d							; Show Game Over Screen
    187  fd3d		       20 06 ff 	      jsr	OverInit
    188  fd40
    189  fd40				   .game_death_return
    190  fd40		       60		      rts
    191  fd41
    192  fd41				   GameKernel
    193  fd41
    194  fd41							; Turn on display
    195  fd41		       a9 00		      lda	#0
    196  fd43		       85 01		      sta	VBLANK
    197  fd45
    198  fd45				   .game_kernel_score
    199  fd45
    200  fd45							; Draw Score on top first
    201  fd45		       20 cc f5 	      jsr	ScoreDraw
    202  fd48
    203  fd48				   .game_kernel_objects_start
    204  fd48
    205  fd48							; Setup Drawing Objects
    206  fd48		       20 e6 f6 	      jsr	WebDrawStart
    207  fd4b		       20 40 f8 	      jsr	SpiderDrawStart
    208  fd4e		       20 f7 fb 	      jsr	SwatterDrawStart
    209  fd51		       20 ae f9 	      jsr	LineDrawStart
    210  fd54		       20 f5 fa 	      jsr	BugDrawStart
    211  fd57
    212  fd57							; Start Scanline Counter
    213  fd57		       a2 a8		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    214  fd59							; The extra 5 is for processing overflow
    215  fd59
    216  fd59							; Half scanline counter in Temp+1
    217  fd59		       a9 56		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    218  fd5b		       85 84		      sta	Temp+1
    219  fd5d
    220  fd5d							; Load background color
    221  fd5d		       a5 a0		      lda	WebColor+0
    222  fd5f		       85 09		      sta	COLUBK
    223  fd61
    224  fd61				   .game_kernel_objects
    225  fd61
    226  fd61		       85 02		      sta	WSYNC
    227  fd63
    228  fd63				   .game_kernel_web
    229  fd63
    230  fd63							; Web
    231  fd63		       a4 9f		      ldy	WebIndex
    232  fd65
    233  fd65							; Load Image
    234  fd65		       b9 3e f1 	      lda	WebImagePF0,y
    235  fd68		       85 0d		      sta	PF0
    236  fd6a		       b9 5c f1 	      lda	WebImagePF1,y
    237  fd6d		       85 0e		      sta	PF1
    238  fd6f		       b9 7a f1 	      lda	WebImagePF2,y
    239  fd72		       85 0f		      sta	PF2
    240  fd74
    241  fd74		       e6 9f		      inc	WebIndex
    242  fd76
    243  fd76				   .game_kernel_line_1
    244  fd76							; Line (1st time)
    245  fd76
    246  fd76		       24 ad		      bit	LineEnabled
    247  fd78		       10 10		      bpl	.game_kernel_line_1_skip
    248  fd7a
    249  fd7a							; Load half-line
    250  fd7a		       a5 84		      lda	Temp+1
    251  fd7c
    252  fd7c		       a0 00		      ldy	#%00000000
    253  fd7e
    254  fd7e							; Top
    255  fd7e		       c5 b5		      cmp	LineDrawPos+1
    256  fd80		       b0 06		      bcs	.game_kernel_line_1_off
    257  fd82
    258  fd82							; Bottom
    259  fd82		       c5 b4		      cmp	LineDrawPos+0
    260  fd84		       90 02		      bcc	.game_kernel_line_1_off
    261  fd86
    262  fd86				   .game_kernel_line_1_on
    263  fd86		       a0 02		      ldy	#%00000010
    264  fd88
    265  fd88				   .game_kernel_line_1_off
    266  fd88		       84 1f		      sty	ENABL
    267  fd8a
    268  fd8a				   .game_kernel_line_1_skip
    269  fd8a
    270  fd8a		       ca		      dex
    271  fd8b		       85 02		      sta	WSYNC
    272  fd8d
    273  fd8d				   .game_kernel_spider_1
    274  fd8d							; Spider (1st time)
    275  fd8d
    276  fd8d		       a4 a8		      ldy	SpiderIndex
    277  fd8f		       30 1a		      bmi	.game_kernel_spider_1_load	; At end of sprite
    278  fd91		       d0 06		      bne	.game_kernel_spider_1_draw	; Currently drawing (not zero)
    279  fd93
    280  fd93							; Check y position to see if we should start
    281  fd93		       a5 84		      lda	Temp+1	; Use half scanline
    282  fd95		       e5 a9		      sbc	SpiderDrawPos
    283  fd97		       10 12		      bpl	.game_kernel_spider_1_load
    284  fd99
    285  fd99				   .game_kernel_spider_1_draw
    286  fd99		       b1 a2		      lda	(SpiderPtr),y
    287  fd9b		       85 aa		      sta	SpiderLine
    288  fd9d
    289  fd9d							; Increment sprite index
    290  fd9d		       e6 a8		      inc	SpiderIndex
    291  fd9f
    292  fd9f							; See if we're at the end
    293  fd9f		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    294  fda1		       d0 0a		      bne	.game_kernel_spider_1_line
    295  fda3		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    296  fda5		       84 a8		      sty	SpiderIndex
    297  fda7		       a9 00		      lda	#0
    298  fda9		       85 aa		      sta	SpiderLine
    299  fdab
    300  fdab				   .game_kernel_spider_1_load
    301  fdab		       a5 aa		      lda	SpiderLine
    302  fdad				   .game_kernel_spider_1_line
    303  fdad		       85 1b		      sta	GRP0
    304  fdaf
    305  fdaf				   .game_kernel_swatter_1
    306  fdaf							; Swatter (1st time)
    307  fdaf
    308  fdaf							; Check if wait state
    309  fdaf		       24 c3		      bit	SwatterState
    310  fdb1		       10 1b		      bpl	.game_kernel_swatter_1_load
    311  fdb3
    312  fdb3		       a4 c7		      ldy	SwatterIndex
    313  fdb5		       30 17		      bmi	.game_kernel_swatter_1_load	; At end of sprite
    314  fdb7		       d0 06		      bne	.game_kernel_swatter_1_draw	; Currently drawing (not zero)
    315  fdb9
    316  fdb9							; Check y position to see if we should start
    317  fdb9		       a5 84		      lda	Temp+1	; Use half scanline
    318  fdbb		       e5 c8		      sbc	SwatterDrawPos
    319  fdbd		       10 0f		      bpl	.game_kernel_swatter_1_load
    320  fdbf
    321  fdbf				   .game_kernel_swatter_1_draw
    322  fdbf		       b9 e8 f1 	      lda	SwatterSprite,y
    323  fdc2		       85 c9		      sta	SwatterLine
    324  fdc4
    325  fdc4							; Increment index
    326  fdc4		       e6 c7		      inc	SwatterIndex
    327  fdc6
    328  fdc6							; See if we're at the end
    329  fdc6		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    330  fdc8		       d0 06		      bne	.game_kernel_swatter_1_line
    331  fdca		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    332  fdcc		       84 c7		      sty	SwatterIndex
    333  fdce
    334  fdce				   .game_kernel_swatter_1_load
    335  fdce		       a5 c9		      lda	SwatterLine
    336  fdd0				   .game_kernel_swatter_1_line
    337  fdd0		       85 1c		      sta	GRP1
    338  fdd2
    339  fdd2							; New line and decrement half scanline
    340  fdd2		       c6 84		      dec	Temp+1
    341  fdd4		       ca		      dex
    342  fdd5		       85 02		      sta	WSYNC
    343  fdd7
    344  fdd7							; Preload half-line
    345  fdd7		       a5 84		      lda	Temp+1
    346  fdd9
    347  fdd9				   .game_kernel_line_2
    348  fdd9							; Line (2nd time)
    349  fdd9
    350  fdd9		       24 ad		      bit	LineEnabled
    351  fddb		       10 0e		      bpl	.game_kernel_line_2_skip
    352  fddd
    353  fddd		       a0 00		      ldy	#%00000000
    354  fddf
    355  fddf							; Top
    356  fddf		       c5 b5		      cmp	LineDrawPos+1
    357  fde1		       b0 06		      bcs	.game_kernel_line_2_off
    358  fde3
    359  fde3							; Bottom
    360  fde3		       c5 b4		      cmp	LineDrawPos+0
    361  fde5		       90 02		      bcc	.game_kernel_line_2_off
    362  fde7
    363  fde7				   .game_kernel_line_2_on
    364  fde7		       a0 02		      ldy	#%00000010
    365  fde9
    366  fde9				   .game_kernel_line_2_off
    367  fde9		       84 1f		      sty	ENABL
    368  fdeb
    369  fdeb				   .game_kernel_line_2_skip
    370  fdeb
    371  fdeb				   .game_kernel_bug_1_0
    372  fdeb							; First Bug (1st time)
    373  fdeb
    374  fdeb		       a0 00		      ldy	#%00000000
    375  fded
    376  fded							; Top
    377  fded		       c5 bf		      cmp	BugDrawPosTop+0
    378  fdef		       b0 06		      bcs	.game_kernel_bug_1_0_off
    379  fdf1
    380  fdf1							; Bottom
    381  fdf1		       c5 bd		      cmp	BugDrawPosBottom+0
    382  fdf3		       90 02		      bcc	.game_kernel_bug_1_0_off
    383  fdf5
    384  fdf5				   .game_kernel_bug_1_0_on
    385  fdf5		       a0 02		      ldy	#%00000010
    386  fdf7
    387  fdf7				   .game_kernel_bug_1_0_off
    388  fdf7		       84 1d		      sty	ENAM0
    389  fdf9
    390  fdf9				   .game_kernel_bug_1_1
    391  fdf9							; Second Bug (1st time)
    392  fdf9
    393  fdf9		       a0 00		      ldy	#%00000000
    394  fdfb
    395  fdfb							; Top
    396  fdfb		       c5 c0		      cmp	BugDrawPosTop+1
    397  fdfd		       b0 06		      bcs	.game_kernel_bug_1_1_off
    398  fdff
    399  fdff							; Bottom
    400  fdff		       c5 be		      cmp	BugDrawPosBottom+1
    401  fe01		       90 02		      bcc	.game_kernel_bug_1_1_off
    402  fe03
    403  fe03				   .game_kernel_bug_1_1_on
    404  fe03		       a0 02		      ldy	#%00000010
    405  fe05
    406  fe05				   .game_kernel_bug_1_1_off
    407  fe05		       84 1e		      sty	ENAM1
    408  fe07
    409  fe07							; Next Line
    410  fe07		       ca		      dex
    411  fe08		       85 02		      sta	WSYNC
    412  fe0a
    413  fe0a				   .game_kernel_spider_2
    414  fe0a							; Spider (2nd time)
    415  fe0a
    416  fe0a		       a4 a8		      ldy	SpiderIndex
    417  fe0c		       30 1a		      bmi	.game_kernel_spider_2_load	; At end of sprite
    418  fe0e		       d0 06		      bne	.game_kernel_spider_2_draw	; Currently drawing (not zero)
    419  fe10
    420  fe10							; Check y position to see if we should start
    421  fe10		       a5 84		      lda	Temp+1	; Use half scanline
    422  fe12		       e5 a9		      sbc	SpiderDrawPos
    423  fe14		       10 12		      bpl	.game_kernel_spider_2_load
    424  fe16
    425  fe16				   .game_kernel_spider_2_draw
    426  fe16		       b1 a2		      lda	(SpiderPtr),y
    427  fe18		       85 aa		      sta	SpiderLine
    428  fe1a
    429  fe1a							; Increment sprite index
    430  fe1a		       e6 a8		      inc	SpiderIndex
    431  fe1c
    432  fe1c							; See if we're at the end
    433  fe1c		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    434  fe1e		       d0 0a		      bne	.game_kernel_spider_2_line
    435  fe20		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    436  fe22		       84 a8		      sty	SpiderIndex
    437  fe24		       a9 00		      lda	#0
    438  fe26		       85 aa		      sta	SpiderLine
    439  fe28
    440  fe28				   .game_kernel_spider_2_load
    441  fe28		       a5 aa		      lda	SpiderLine
    442  fe2a				   .game_kernel_spider_2_line
    443  fe2a		       85 1b		      sta	GRP0
    444  fe2c
    445  fe2c				   .game_kernel_swatter_2
    446  fe2c							; Swatter (2nd time)
    447  fe2c
    448  fe2c							; Check if wait state
    449  fe2c		       24 c3		      bit	SwatterState
    450  fe2e		       10 1b		      bpl	.game_kernel_swatter_2_load
    451  fe30
    452  fe30		       a4 c7		      ldy	SwatterIndex
    453  fe32		       30 17		      bmi	.game_kernel_swatter_2_load	; At end of sprite
    454  fe34		       d0 06		      bne	.game_kernel_swatter_2_draw	; Currently drawing (not zero)
    455  fe36
    456  fe36							; Check y position to see if we should start
    457  fe36		       a5 84		      lda	Temp+1	; Use half scanline
    458  fe38		       e5 c8		      sbc	SwatterDrawPos
    459  fe3a		       10 0f		      bpl	.game_kernel_swatter_2_load
    460  fe3c
    461  fe3c				   .game_kernel_swatter_2_draw
    462  fe3c		       b9 e8 f1 	      lda	SwatterSprite,y
    463  fe3f		       85 c9		      sta	SwatterLine
    464  fe41
    465  fe41							; Increment index
    466  fe41		       e6 c7		      inc	SwatterIndex
    467  fe43
    468  fe43							; See if we're at the end
    469  fe43		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    470  fe45		       d0 06		      bne	.game_kernel_swatter_2_line
    471  fe47		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    472  fe49		       84 c7		      sty	SwatterIndex
    473  fe4b
    474  fe4b				   .game_kernel_swatter_2_load
    475  fe4b		       a5 c9		      lda	SwatterLine
    476  fe4d				   .game_kernel_swatter_2_line
    477  fe4d		       85 1c		      sta	GRP1
    478  fe4f
    479  fe4f							; Next Line and half-line
    480  fe4f		       c6 84		      dec	Temp+1
    481  fe51		       ca		      dex
    482  fe52		       85 02		      sta	WSYNC
    483  fe54
    484  fe54							; Preload half-line
    485  fe54		       a5 84		      lda	Temp+1
    486  fe56
    487  fe56				   .game_kernel_line_3
    488  fe56							; Line (3rd time)
    489  fe56
    490  fe56		       24 ad		      bit	LineEnabled
    491  fe58		       10 0e		      bpl	.game_kernel_line_3_skip
    492  fe5a
    493  fe5a		       a0 00		      ldy	#%00000000
    494  fe5c
    495  fe5c							; Top
    496  fe5c		       c5 b5		      cmp	LineDrawPos+1
    497  fe5e		       b0 06		      bcs	.game_kernel_line_3_off
    498  fe60
    499  fe60							; Bottom
    500  fe60		       c5 b4		      cmp	LineDrawPos+0
    501  fe62		       90 02		      bcc	.game_kernel_line_3_off
    502  fe64
    503  fe64				   .game_kernel_line_3_on
    504  fe64		       a0 02		      ldy	#%00000010
    505  fe66
    506  fe66				   .game_kernel_line_3_off
    507  fe66		       84 1f		      sty	ENABL
    508  fe68
    509  fe68				   .game_kernel_line_3_skip
    510  fe68
    511  fe68				   .game_kernel_bug_2_0
    512  fe68							; First Bug (2nd time)
    513  fe68
    514  fe68		       a0 00		      ldy	#%00000000
    515  fe6a
    516  fe6a							; Top
    517  fe6a		       c5 bf		      cmp	BugDrawPosTop+0
    518  fe6c		       b0 06		      bcs	.game_kernel_bug_2_0_off
    519  fe6e
    520  fe6e							; Bottom
    521  fe6e		       c5 bd		      cmp	BugDrawPosBottom+0
    522  fe70		       90 02		      bcc	.game_kernel_bug_2_0_off
    523  fe72
    524  fe72				   .game_kernel_bug_2_0_on
    525  fe72		       a0 02		      ldy	#%00000010
    526  fe74
    527  fe74				   .game_kernel_bug_2_0_off
    528  fe74		       84 1d		      sty	ENAM0
    529  fe76
    530  fe76				   .game_kernel_bug_2_1
    531  fe76							; Second Bug (2nd time)
    532  fe76
    533  fe76		       a0 00		      ldy	#%00000000
    534  fe78
    535  fe78							; Top
    536  fe78		       c5 c0		      cmp	BugDrawPosTop+1
    537  fe7a		       b0 06		      bcs	.game_kernel_bug_2_1_off
    538  fe7c
    539  fe7c							; Bottom
    540  fe7c		       c5 be		      cmp	BugDrawPosBottom+1
    541  fe7e		       90 02		      bcc	.game_kernel_bug_2_1_off
    542  fe80
    543  fe80				   .game_kernel_bug_2_1_on
    544  fe80		       a0 02		      ldy	#%00000010
    545  fe82
    546  fe82				   .game_kernel_bug_2_1_off
    547  fe82		       84 1e		      sty	ENAM1
    548  fe84
    549  fe84							; Next Line
    550  fe84		       ca		      dex
    551  fe85		       85 02		      sta	WSYNC
    552  fe87
    553  fe87				   .game_kernel_spider_3
    554  fe87							; Spider (3rd time)
    555  fe87
    556  fe87		       a4 a8		      ldy	SpiderIndex
    557  fe89		       30 1a		      bmi	.game_kernel_spider_3_load	; At end of sprite
    558  fe8b		       d0 06		      bne	.game_kernel_spider_3_draw	; Currently drawing (not zero)
    559  fe8d
    560  fe8d							; Check y position to see if we should start
    561  fe8d		       a5 84		      lda	Temp+1	; Use half scanline
    562  fe8f		       e5 a9		      sbc	SpiderDrawPos
    563  fe91		       10 12		      bpl	.game_kernel_spider_3_load
    564  fe93
    565  fe93				   .game_kernel_spider_3_draw
    566  fe93		       b1 a2		      lda	(SpiderPtr),y
    567  fe95		       85 aa		      sta	SpiderLine
    568  fe97
    569  fe97							; Increment sprite index
    570  fe97		       e6 a8		      inc	SpiderIndex
    571  fe99
    572  fe99							; See if we're at the end
    573  fe99		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    574  fe9b		       d0 0a		      bne	.game_kernel_spider_3_line
    575  fe9d		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    576  fe9f		       84 a8		      sty	SpiderIndex
    577  fea1		       a9 00		      lda	#0
    578  fea3		       85 aa		      sta	SpiderLine
    579  fea5
    580  fea5				   .game_kernel_spider_3_load
    581  fea5		       a5 aa		      lda	SpiderLine
    582  fea7				   .game_kernel_spider_3_line
    583  fea7		       85 1b		      sta	GRP0
    584  fea9
    585  fea9				   .game_kernel_spider_3_skip
    586  fea9
    587  fea9				   .game_kernel_swatter_3
    588  fea9							; Swatter (3rd time)
    589  fea9
    590  fea9							; Check if wait state
    591  fea9		       24 c3		      bit	SwatterState
    592  feab		       10 1b		      bpl	.game_kernel_swatter_3_load
    593  fead
    594  fead		       a4 c7		      ldy	SwatterIndex
    595  feaf		       30 17		      bmi	.game_kernel_swatter_3_load	; At end of sprite
    596  feb1		       d0 06		      bne	.game_kernel_swatter_3_draw	; Currently drawing (not zero)
    597  feb3
    598  feb3							; Check y position to see if we should start
    599  feb3		       a5 84		      lda	Temp+1	; Use half scanline
    600  feb5		       e5 c8		      sbc	SwatterDrawPos
    601  feb7		       10 0f		      bpl	.game_kernel_swatter_3_load
    602  feb9
    603  feb9				   .game_kernel_swatter_3_draw
    604  feb9		       b9 e8 f1 	      lda	SwatterSprite,y
    605  febc		       85 c9		      sta	SwatterLine
    606  febe
    607  febe							; Increment index
    608  febe		       e6 c7		      inc	SwatterIndex
    609  fec0
    610  fec0							; See if we're at the end
    611  fec0		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    612  fec2		       d0 06		      bne	.game_kernel_swatter_3_line
    613  fec4		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    614  fec6		       84 c7		      sty	SwatterIndex
    615  fec8
    616  fec8				   .game_kernel_swatter_3_load
    617  fec8		       a5 c9		      lda	SwatterLine
    618  feca				   .game_kernel_swatter_3_line
    619  feca		       85 1c		      sta	GRP1
    620  fecc
    621  fecc				   .game_kernel_swatter_3_skip
    622  fecc
    623  fecc							; New line and decrement half scanline
    624  fecc		       c6 84		      dec	Temp+1
    625  fece		       ca		      dex
    626  fecf		       f0 03		      beq	.game_kernel_clean
    627  fed1		       4c 61 fd 	      jmp	.game_kernel_objects
    628  fed4
    629  fed4				   .game_kernel_clean
    630  fed4
    631  fed4		       20 f9 f6 	      jsr	WebClean
    632  fed7		       20 68 f8 	      jsr	SpiderClean
    633  feda		       20 ce f9 	      jsr	LineClean
    634  fedd		       20 12 fb 	      jsr	BugClean
    635  fee0		       20 14 fc 	      jsr	SwatterClean
    636  fee3
    637  fee3		       85 02		      sta	WSYNC
    638  fee5
    639  fee5				   .game_kernel_return
    640  fee5		       60		      rts
    641  fee6
    642  fee6				   GameAudio0
    643  fee6		       0d		      .byte.b	#13	; D
    644  fee7		       ff		      .byte.b	#$FF
    645  fee8		       0f		      .byte.b	#15	; B
    646  fee9		       ff		      .byte.b	#$FF
    647  feea		       0d		      .byte.b	#13	; D
    648  feeb		       ff		      .byte.b	#$FF
    649  feec		       0f		      .byte.b	#15	; B
    650  feed		       ff		      .byte.b	#$FF
    651  feee		       0d		      .byte.b	#13	; D
    652  feef		       0d		      .byte.b	#13	; D
    653  fef0		       0f		      .byte.b	#15	; B
    654  fef1		       ff		      .byte.b	#$FF
    655  fef2		       0c		      .byte.b	#12	; D#
    656  fef3		       ff		      .byte.b	#$FF
    657  fef4		       0f		      .byte.b	#15	; B
    658  fef5		       ff		      .byte.b	#$FF
    659  fef6		       0b		      .byte.b	#11	; E
    660  fef7		       ff		      .byte.b	#$FF
    661  fef8		       0e		      .byte.b	#14	; C#
    662  fef9		       ff		      .byte.b	#$FF
    663  fefa		       0b		      .byte.b	#11
    664  fefb		       ff		      .byte.b	#$FF
    665  fefc		       0e		      .byte.b	#14
    666  fefd		       ff		      .byte.b	#$FF
    667  fefe		       0b		      .byte.b	#11
    668  feff		       0b		      .byte.b	#11
    669  ff00		       0e		      .byte.b	#14
    670  ff01		       ff		      .byte.b	#$FF
    671  ff02		       0b		      .byte.b	#11
    672  ff03		       ff		      .byte.b	#$FF
    673  ff04		       0e		      .byte.b	#14
    674  ff05		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  ff06					      include	"over.asm"
      1  ff06							;================
      2  ff06							; Constants
      3  ff06							;================
      4  ff06
      5  ff06		       00 dc	   OVER_FRAMES =	220
      6  ff06
      7  ff06		       00 00	   OVER_BG_COLOR =	#$00
      8  ff06		       00 44	   OVER_FG_COLOR =	#$44
      9  ff06		       00 06	   OVER_FG_BW_COLOR =	#$06
     10  ff06
     11  ff06		       00 07	   OVER_AUDIO_TONE =	7
     12  ff06		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     13  ff06		       00 06	   OVER_AUDIO_LENGTH =	6
     14  ff06		       00 10	   OVER_AUDIO_STEP =	16
     15  ff06
     16  ff06		       00 09	   OVER_IMAGE_SIZE =	9
     17  ff06		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     18  ff06		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     19  ff06		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     20  ff06
     21  ff06				   OverInit
     22  ff06
     23  ff06							; Setup logic and kernel
      0  ff06					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  ff06				   .POINTER   SET	VBlankPtr
      2  ff06				   .ADDRESS   SET	OverVerticalBlank
      3  ff06
      4  ff06		       a9 40		      LDA	#<.ADDRESS
      5  ff08		       85 88		      STA	.POINTER
      6  ff0a		       a9 ff		      LDA	#>.ADDRESS
      7  ff0c		       85 89		      STA	.POINTER+1
      8  ff0e
      0  ff0e					      SET_POINTER	KernelPtr, OverKernel
      1  ff0e				   .POINTER   SET	KernelPtr
      2  ff0e				   .ADDRESS   SET	OverKernel
      3  ff0e
      4  ff0e		       a9 94		      LDA	#<.ADDRESS
      5  ff10		       85 8a		      STA	.POINTER
      6  ff12		       a9 ff		      LDA	#>.ADDRESS
      7  ff14		       85 8b		      STA	.POINTER+1
      8  ff16
      0  ff16					      SET_POINTER	OverScanPtr, OverOverScan
      1  ff16				   .POINTER   SET	OverScanPtr
      2  ff16				   .ADDRESS   SET	OverOverScan
      3  ff16
      4  ff16		       a9 5a		      LDA	#<.ADDRESS
      5  ff18		       85 8c		      STA	.POINTER
      6  ff1a		       a9 ff		      LDA	#>.ADDRESS
      7  ff1c		       85 8d		      STA	.POINTER+1
      8  ff1e
     27  ff1e
     28  ff1e							; Load audio settings
     29  ff1e		       a9 07		      lda	#OVER_AUDIO_TONE
     30  ff20		       85 15		      sta	AUDC0
     31  ff22		       a9 06		      lda	#OVER_AUDIO_VOLUME
     32  ff24		       85 19		      sta	AUDV0
     33  ff26		       a9 00		      lda	#0
     34  ff28		       85 16		      sta	AUDC1
     35  ff2a		       85 1a		      sta	AUDV1
     36  ff2c		       a9 00		      lda	#0
     37  ff2e		       85 91		      sta	AudioStep
     38  ff30
     39  ff30							; Play first note
     40  ff30		       ad e6 ff 	      lda	OverAudio0,AudioStep
     41  ff33		       85 17		      sta	AUDF0
     42  ff35
     43  ff35							; Setup frame counters
     44  ff35		       a9 00		      lda	#0
     45  ff37		       85 8e		      sta	Frame
     46  ff39		       a9 10		      lda	#OVER_AUDIO_STEP
     47  ff3b		       85 8f		      sta	FrameTimer
     48  ff3d		       85 84		      sta	Temp+1
     49  ff3f
     50  ff3f		       60		      rts
     51  ff40
     52  ff40				   OverVerticalBlank
     53  ff40		       20 5a f5 	      jsr	ScoreUpdate
     54  ff43
     55  ff43							; Load Colors
     56  ff43		       a9 00		      lda	#OVER_BG_COLOR
     57  ff45		       85 09		      sta	COLUBK
     58  ff47
     59  ff47							; Check b/w
     60  ff47		       ad 82 02 	      lda	SWCHB
     61  ff4a					      REPEAT	4
     62  ff4a		       4a		      lsr
     61  ff4a					      REPEND
     62  ff4b		       4a		      lsr
     61  ff4b					      REPEND
     62  ff4c		       4a		      lsr
     61  ff4c					      REPEND
     62  ff4d		       4a		      lsr
     63  ff4e					      REPEND
     64  ff4e		       90 05		      bcc	.over_bw
     65  ff50
     66  ff50				   .over_color
     67  ff50		       a9 44		      lda	#OVER_FG_COLOR
     68  ff52		       85 08		      sta	COLUPF
     69  ff54
     70  ff54		       60		      rts
     71  ff55
     72  ff55				   .over_bw
     73  ff55							; Load b/w Colors
     74  ff55		       a9 06		      lda	#OVER_FG_BW_COLOR
     75  ff57		       85 08		      sta	COLUPF
     76  ff59
     77  ff59		       60		      rts
     78  ff5a
     79  ff5a				   OverOverScan
     80  ff5a		       20 61 ff 	      jsr	OverAudio
     81  ff5d		       20 8a ff 	      jsr	OverState
     82  ff60		       60		      rts
     83  ff61
     84  ff61				   OverAudio
     85  ff61
     86  ff61		       a6 8f		      ldx	FrameTimer
     87  ff63		       e0 00		      cpx	#0
     88  ff65		       d0 22		      bne	.over_audio_return
     89  ff67
     90  ff67							; Reset Timer
     91  ff67		       a6 84		      ldx	Temp+1
     92  ff69					      REPEAT	3
     93  ff69		       e8		      inx
     92  ff69					      REPEND
     93  ff6a		       e8		      inx
     92  ff6a					      REPEND
     93  ff6b		       e8		      inx
     94  ff6c					      REPEND
     95  ff6c		       86 8f		      stx	FrameTimer
     96  ff6e		       86 84		      stx	Temp+1
     97  ff70
     98  ff70				   .over_audio_play
     99  ff70
    100  ff70							; Increment melody position
    101  ff70		       a4 91		      ldy	AudioStep
    102  ff72		       c8		      iny
    103  ff73
    104  ff73		       c0 06		      cpy	#OVER_AUDIO_LENGTH
    105  ff75		       f0 0c		      beq	.over_audio_mute_note
    106  ff77
    107  ff77				   .over_audio_play_note
    108  ff77
    109  ff77							; Save current position
    110  ff77		       84 91		      sty	AudioStep
    111  ff79
    112  ff79							; Melody Line
    113  ff79		       b9 e6 ff 	      lda	OverAudio0,y
    114  ff7c		       85 17		      sta	AUDF0
    115  ff7e		       a9 06		      lda	#OVER_AUDIO_VOLUME
    116  ff80		       85 19		      sta	AUDV0
    117  ff82
    118  ff82		       60		      rts
    119  ff83
    120  ff83				   .over_audio_mute_note
    121  ff83		       a9 00		      lda	#0
    122  ff85		       85 17		      sta	AUDF0
    123  ff87		       85 19		      sta	AUDV0
    124  ff89
    125  ff89				   .over_audio_return
    126  ff89		       60		      rts
    127  ff8a
    128  ff8a				   OverState
    129  ff8a		       a5 8e		      lda	Frame
    130  ff8c		       c9 dc		      cmp	#OVER_FRAMES
    131  ff8e		       d0 03		      bne	.over_state_return
    132  ff90
    133  ff90		       20 a6 f2 	      jsr	TitleInit
    134  ff93
    135  ff93				   .over_state_return
    136  ff93		       60		      rts
    137  ff94
    138  ff94				   OverKernel
    139  ff94
    140  ff94							; Turn on display
    141  ff94		       a9 00		      lda	#0
    142  ff96		       85 01		      sta	VBLANK
    143  ff98
    144  ff98				   .over_kernel_score
    145  ff98
    146  ff98							; Draw Score on top first (no update)
    147  ff98		       20 cc f5 	      jsr	ScoreDraw
    148  ff9b
    149  ff9b				   .over_kernel_init
    150  ff9b							; Playfield Control
    151  ff9b		       a5 80		      lda	CtrlPf
    152  ff9d		       29 fd		      and	#%11111101	; Use playfield foreground color
    153  ff9f		       09 01		      ora	#%00000001	; Set mirroring
    154  ffa1		       85 80		      sta	CtrlPf
    155  ffa3		       85 0a		      sta	CTRLPF
    156  ffa5
    157  ffa5				   .over_kernel_top_padding
    158  ffa5							; Top Padding
    159  ffa5		       20 c4 ff 	      jsr	OverPadding
    160  ffa8
    161  ffa8				   .over_kernel_image
    162  ffa8		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    163  ffaa
    164  ffaa				   .over_kernel_image_next
    165  ffaa		       bd dd ff 	      lda	OverImagePF2,x
    166  ffad		       85 0f		      sta	PF2
    167  ffaf		       bd d4 ff 	      lda	OverImagePF1,x
    168  ffb2		       85 0e		      sta	PF1
    169  ffb4							;    lda OverImagePF0,x
    170  ffb4							;    sta PF0
    171  ffb4
    172  ffb4		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    173  ffb6				   .over_kernel_image_loop
    174  ffb6		       85 02		      sta	WSYNC
    175  ffb8		       88		      dey
    176  ffb9		       d0 fb		      bne	.over_kernel_image_loop
    177  ffbb
    178  ffbb		       ca		      dex
    179  ffbc		       10 ec		      bpl	.over_kernel_image_next
    180  ffbe
    181  ffbe				   .over_kernel_bottom_padding
    182  ffbe							; Bottom Padding
    183  ffbe		       20 c4 ff 	      jsr	OverPadding
    184  ffc1
    185  ffc1				   .over_kernel_return
    186  ffc1		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    187  ffc3		       60		      rts
    188  ffc4
    189  ffc4				   OverPadding
    190  ffc4		       a9 00		      lda	#0
    191  ffc6		       85 0d		      sta	PF0
    192  ffc8		       85 0e		      sta	PF1
    193  ffca		       85 0f		      sta	PF2
    194  ffcc
    195  ffcc		       a2 32		      ldx	#OVER_IMAGE_PADDING
    196  ffce				   .over_padding_loop
    197  ffce		       85 02		      sta	WSYNC
    198  ffd0		       ca		      dex
    199  ffd1		       d0 fb		      bne	.over_padding_loop
    200  ffd3
    201  ffd3		       60		      rts
    202  ffd4
    203  ffd4				   OverAssets
    204  ffd4
    205  ffd4							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ffd4					      include	"over_image.asm"
      1  ffd4							;OverImagePF0:
      2  ffd4							;    .BYTE %00000000
      3  ffd4							;    .BYTE %00000000
      4  ffd4							;    .BYTE %00000000
      5  ffd4							;    .BYTE %00000000
      6  ffd4							;    .BYTE %00000000
      7  ffd4							;    .BYTE %00000000
      8  ffd4							;    .BYTE %00000000
      9  ffd4							;    .BYTE %00000000
     10  ffd4							;    .BYTE %00000000
     11  ffd4
     12  ffd4				   OverImagePF1
     13  ffd4		       0c		      .BYTE.b	%00001100
     14  ffd5		       13		      .BYTE.b	%00010011
     15  ffd6		       20		      .BYTE.b	%00100000
     16  ffd7		       23		      .BYTE.b	%00100011
     17  ffd8		       24		      .BYTE.b	%00100100
     18  ffd9		       24		      .BYTE.b	%00100100
     19  ffda		       12		      .BYTE.b	%00010010
     20  ffdb		       10		      .BYTE.b	%00010000
     21  ffdc		       08		      .BYTE.b	%00001000
     22  ffdd
     23  ffdd				   OverImagePF2
     24  ffdd		       e0		      .BYTE.b	%11100000
     25  ffde		       18		      .BYTE.b	%00011000
     26  ffdf		       05		      .BYTE.b	%00000101
     27  ffe0		       52		      .BYTE.b	%01010010
     28  ffe1		       23		      .BYTE.b	%00100011
     29  ffe2		       52		      .BYTE.b	%01010010
     30  ffe3		       04		      .BYTE.b	%00000100
     31  ffe4		       18		      .BYTE.b	%00011000
     32  ffe5		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    207  ffe6
    208  ffe6				   OverAudio0
    209  ffe6
    210  ffe6		       0c		      .BYTE.b	#12	; D#2
    211  ffe7		       0d		      .BYTE.b	#13	; D2
    212  ffe8		       11		      .BYTE.b	#17	; A1
    213  ffe9		       16		      .BYTE.b	#22	; F1
    214  ffea		       1a		      .BYTE.b	#26	; D1
    215  ffeb		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    329  ffec
    330  ffec							;================
    331  ffec							; End of cart
    332  ffec							;================
    333  ffec
    334  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    335  fffa
    336  fffa				   InterruptVectors
    337  fffa
    338  fffa		       fc f1		      .word.w	InitSystem	; NMI
    339  fffc		       fc f1		      .word.w	InitSystem	; RESET
    340  fffe		       fc f1		      .word.w	InitSystem	; IRQ
    341  10000
    342  10000					       END
