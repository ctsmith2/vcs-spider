------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00ba ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00	   FrameTimer ds	1
     70 U008f
     71 U008f		       00	   AudioStep  ds	1
     72 U0090
     73 U0090		       00	   SampleStep ds	1
     74 U0091
     75 U0091							; Score
     76 U0091
     77 U0091		       00 00	   ScoreValue ds	2
     78 U0093		       00 00	   ScoreDigitOnes ds	2
     79 U0095		       00 00	   ScoreDigitTens ds	2
     80 U0097		       00 00	   ScoreGfx   ds	2
     81 U0099
     82 U0099							; Web
     83 U0099
     84 U0099		       00	   WebIndex   ds	1
     85 U009a		       00	   WebDir     ds	1
     86 U009b
     87 U009b							; Spider
     88 U009b
     89 U009b		       00 00	   SpiderPtr  ds	2
     90 U009d		       00 00	   SpiderPos  ds	2
     91 U009f		       00	   SpiderCtrl ds	1
     92 U00a0		       00	   SpiderColor ds	1
     93 U00a1
     94 U00a1		       00	   SpiderIndex ds	1
     95 U00a2		       00	   SpiderDrawPos ds	1
     96 U00a3
     97 U00a3		       00 00	   SpiderPtr2 ds	2
     98 U00a5
     99 U00a5							; Line
    100 U00a5
    101 U00a5		       00	   LineEnabled ds	1
    102 U00a6		       00 00	   LinePos    ds	2
    103 U00a8		       00 00	   LineVelocity ds	2
    104 U00aa		       00 00	   LineStartPos ds	2
    105 U00ac		       00 00	   LineDrawPos ds	2
    106 U00ae
    107 U00ae							; Bug
    108 U00ae
    109 U00ae		       00 00	   BugStunned ds	2
    110 U00b0		       00 00	   BugPosX    ds	2
    111 U00b2		       00 00	   BugPosY    ds	2
    112 U00b4		       00 00	   BugColor   ds	2
    113 U00b6
    114 U00b6		       00 00	   BugDrawPosBottom ds	2
    115 U00b8		       00 00	   BugDrawPosTop ds	2
    116 U00ba
    117  10000 ????				       SEG
    118  f000					      org	$F000	; Start of cart area
    119  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    121  f021
    122  f021				   InitSystem
    123  f021
    124  f021				   .init_clean
    125  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    127  f02c
    128  f02c				   .init_tia
    129  f02c							; Define default TIA register values
    130  f02c
    131  f02c							; Initialize copies
    132  f02c		       a9 00		      lda	#0
    133  f02e		       85 80		      sta	CtrlPf
    134  f030		       85 81		      sta	NuSiz0
    135  f032		       85 82		      sta	NuSiz1
    136  f034
    137  f034							; Set background color
    138  f034		       a9 00		      lda	#$00	; Black
    139  f036		       85 09		      sta	COLUBK
    140  f038
    141  f038							; Set the playfield and player color
    142  f038		       a9 0e		      lda	#$0E	; White
    143  f03a		       85 08		      sta	COLUPF
    144  f03c		       85 06		      sta	COLUP0
    145  f03e		       85 07		      sta	COLUP1
    146  f040
    147  f040							; Playfield Control
    148  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    149  f042		       85 80		      sta	CtrlPf
    150  f044		       85 0a		      sta	CTRLPF
    151  f046
    152  f046							; Disable Game Elements
    153  f046		       a9 00		      lda	#$00
    154  f048		       85 1f		      sta	ENABL	; Turn off ball
    155  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    156  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    157  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    158  f050		       85 1c		      sta	GRP1	; Turn off player 2
    159  f052
    160  f052							; Empty playfield
    161  f052		       a9 00		      lda	#%00000000
    162  f054		       85 0d		      sta	PF0
    163  f056		       85 0e		      sta	PF1
    164  f058		       85 0f		      sta	PF2
    165  f05a
    166  f05a				   .init_seed
    167  f05a							; Seed the random number generator
    168  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    169  f05d		       85 85		      sta	Rand8	; Use as seed
    170  f05f		       49 ff		      eor	#$FF	; Flip bits
    171  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    172  f063
    173  f063				   .init_game
    174  f063
    175  f063		       20 c9 f0 	      jsr	LogoInit
    176  f066
    177  f066							;=======================================
    178  f066							; Game Kernel
    179  f066							;=======================================
    180  f066
    181  f066				   Main
    182  f066
    183  f066		       20 75 f0 	      jsr	VerticalSync
    184  f069		       20 8c f0 	      jsr	VerticalBlank
    185  f06c		       20 9f f0 	      jsr	Kernel
    186  f06f		       20 a6 f0 	      jsr	OverScan
    187  f072		       4c 66 f0 	      jmp	Main
    188  f075
    189  f075				   VerticalSync
    190  f075
    191  f075		       a9 00		      lda	#0
    192  f077		       85 01		      sta	VBLANK
    193  f079
    194  f079							; Turn on Vertical Sync signal and setup timer
    195  f079		       a9 02		      lda	#2
    196  f07b		       85 00		      sta	VSYNC
    197  f07d
    198  f07d							; Increment frame count and reduce frame counter
    199  f07d		       e6 8d		      inc	Frame
    200  f07f		       c6 8e		      dec	FrameTimer
    201  f081
    202  f081							; VSYNCH signal scanlines
    203  f081					      REPEAT	#KERNEL_VSYNC
    204  f081		       85 02		      sta	WSYNC
    203  f081					      REPEND
    204  f083		       85 02		      sta	WSYNC
    203  f083					      REPEND
    204  f085		       85 02		      sta	WSYNC
    205  f087					      REPEND
    206  f087
    207  f087							; Turn off Vertical Sync signal
    208  f087		       a9 00		      lda	#0
    209  f089		       85 00		      sta	VSYNC
    210  f08b
    211  f08b				   .vsync_return
    212  f08b		       60		      rts
    213  f08c
    214  f08c				   VerticalBlank
    215  f08c							; Setup Timer
    216  f08c		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    217  f08e		       8d 96 02 	      sta	TIM64T
    218  f091
    219  f091				   .vblank_logic
    220  f091							; Perform Game Logic
    221  f091		       20 9c f0 	      jsr	.vblank_logic_call_ptr
    222  f094
    223  f094				   .vblank_loop
    224  f094							; WSYNC until Timer is complete
    225  f094		       85 02		      sta	WSYNC
    226  f096		       ad 84 02 	      lda	INTIM
    227  f099		       d0 f9		      bne	.vblank_loop
    228  f09b
    229  f09b				   .vblank_return
    230  f09b		       60		      rts
    231  f09c
    232  f09c				   .vblank_logic_call_ptr
    233  f09c		       6c 87 00 	      jmp	(VBlankPtr)
    234  f09f
    235  f09f				   Kernel
    236  f09f
    237  f09f							; Perform Selected Kernel
    238  f09f		       20 a3 f0 	      jsr	.kernel_call_ptr
    239  f0a2		       60		      rts
    240  f0a3
    241  f0a3				   .kernel_call_ptr
    242  f0a3		       6c 89 00 	      jmp	(KernelPtr)
    243  f0a6
    244  f0a6				   OverScan
    245  f0a6
    246  f0a6							; End of screen, enter blanking
    247  f0a6		       a9 42		      lda	#%01000010
    248  f0a8		       85 01		      sta	VBLANK
    249  f0aa
    250  f0aa							; Setup Timer
    251  f0aa		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    252  f0ac		       8d 96 02 	      sta	TIM64T
    253  f0af
    254  f0af							;.overscan_reset:
    255  f0af							; Check for reset switch
    256  f0af		       ad 82 02 	      lda	SWCHB
    257  f0b2		       4a		      lsr		; Push D0 to carry (C)
    258  f0b3		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    259  f0b5
    260  f0b5							; Perform reset
    261  f0b5		       20 c9 f0 	      jsr	LogoInit	; No need for logic
    262  f0b8		       4c be f0 	      jmp	.overscan_loop
    263  f0bb
    264  f0bb				   .overscan_logic
    265  f0bb							; Perform OverScan Logic
    266  f0bb		       20 c6 f0 	      jsr	.overscan_logic_call_ptr
    267  f0be
    268  f0be				   .overscan_loop
    269  f0be							; WSYNC until Timer is complete
    270  f0be		       85 02		      sta	WSYNC
    271  f0c0		       ad 84 02 	      lda	INTIM
    272  f0c3		       d0 f9		      bne	.overscan_loop
    273  f0c5
    274  f0c5				   .overscan_return
    275  f0c5		       60		      rts
    276  f0c6
    277  f0c6				   .overscan_logic_call_ptr
    278  f0c6		       6c 8b 00 	      jmp	(OverScanPtr)
    279  f0c9
    280  f0c9							;================
    281  f0c9							; State Code
    282  f0c9							;================
    283  f0c9
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0c9					      include	"logo.asm"
      1  f0c9							;================
      2  f0c9							; Constants
      3  f0c9							;================
      4  f0c9
      5  f0c9		       00 b4	   LOGO_FRAMES =	180
      6  f0c9
      7  f0c9		       00 00	   LOGO_BG_COLOR =	#$00
      8  f0c9		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f0c9
     10  f0c9		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0c9		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0c9		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0c9		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0c9		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0c9		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0c9
     17  f0c9		       00 10	   LOGO_IMAGE_SIZE =	16
     18  f0c9		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     19  f0c9		       00 50	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     20  f0c9		       00 38	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     21  f0c9
     22  f0c9				   LogoInit
     23  f0c9
     24  f0c9							; Setup logic and kernel
      0  f0c9					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0c9				   .POINTER   SET	VBlankPtr
      2  f0c9				   .ADDRESS   SET	LogoVerticalBlank
      3  f0c9
      4  f0c9		       a9 14		      LDA	#<.ADDRESS
      5  f0cb		       85 87		      STA	.POINTER
      6  f0cd		       a9 f1		      LDA	#>.ADDRESS
      7  f0cf		       85 88		      STA	.POINTER+1
      8  f0d1
      0  f0d1					      SET_POINTER	KernelPtr, LogoKernel
      1  f0d1				   .POINTER   SET	KernelPtr
      2  f0d1				   .ADDRESS   SET	LogoKernel
      3  f0d1
      4  f0d1		       a9 65		      LDA	#<.ADDRESS
      5  f0d3		       85 89		      STA	.POINTER
      6  f0d5		       a9 f1		      LDA	#>.ADDRESS
      7  f0d7		       85 8a		      STA	.POINTER+1
      8  f0d9
      0  f0d9					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0d9				   .POINTER   SET	OverScanPtr
      2  f0d9				   .ADDRESS   SET	LogoOverScan
      3  f0d9
      4  f0d9		       a9 18		      LDA	#<.ADDRESS
      5  f0db		       85 8b		      STA	.POINTER
      6  f0dd		       a9 f1		      LDA	#>.ADDRESS
      7  f0df		       85 8c		      STA	.POINTER+1
      8  f0e1
     28  f0e1
     29  f0e1							; Load Colors
     30  f0e1		       a9 00		      lda	#LOGO_BG_COLOR
     31  f0e3		       85 09		      sta	COLUBK
     32  f0e5		       a9 c6		      lda	#LOGO_FG_COLOR
     33  f0e7		       85 08		      sta	COLUPF
     34  f0e9
     35  f0e9							; Load audio settings
     36  f0e9		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     37  f0eb		       85 15		      sta	AUDC0
     38  f0ed		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     39  f0ef		       85 19		      sta	AUDV0
     40  f0f1		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     41  f0f3		       85 16		      sta	AUDC1
     42  f0f5		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     43  f0f7		       85 1a		      sta	AUDV1
     44  f0f9		       a9 00		      lda	#0
     45  f0fb		       85 8f		      sta	AudioStep
     46  f0fd
     47  f0fd							; Play first note
     48  f0fd		       ad 32 f2 	      lda	LogoAudio0,AudioStep
     49  f100		       85 17		      sta	AUDF0
     50  f102		       ad 3e f2 	      lda	LogoAudio1,AudioStep
     51  f105		       85 18		      sta	AUDF1
     52  f107
     53  f107							; Setup frame counters
     54  f107		       a9 00		      lda	#0
     55  f109		       85 8d		      sta	Frame
     56  f10b		       a9 b4		      lda	#LOGO_FRAMES
     57  f10d		       85 8e		      sta	FrameTimer
     58  f10f
     59  f10f							; Setup Image Animation
     60  f10f		       a9 22		      lda	#(LOGO_IMAGE_SIZE+1)*2
     61  f111		       85 99		      sta	WebIndex
     62  f113
     63  f113		       60		      rts
     64  f114
     65  f114				   LogoVerticalBlank
     66  f114		       20 1f f1 	      jsr	LogoAnimation
     67  f117		       60		      rts
     68  f118
     69  f118				   LogoOverScan
     70  f118		       20 30 f1 	      jsr	LogoAudio
     71  f11b		       20 5b f1 	      jsr	LogoState
     72  f11e		       60		      rts
     73  f11f
     74  f11f				   LogoAnimation
     75  f11f		       a5 8d		      lda	Frame
     76  f121		       29 03		      and	#%00000011	; Every 4 when bits are 00
     77  f123		       d0 0a		      bne	.logo_animation_return
     78  f125
     79  f125		       a6 99		      ldx	WebIndex
     80  f127		       e0 00		      cpx	#0
     81  f129		       f0 04		      beq	.logo_animation_return
     82  f12b
     83  f12b							; Add another visible line
     84  f12b		       ca		      dex
     85  f12c		       ca		      dex
     86  f12d		       86 99		      stx	WebIndex
     87  f12f
     88  f12f				   .logo_animation_return
     89  f12f		       60		      rts
     90  f130
     91  f130				   LogoAudio
     92  f130
     93  f130		       a5 8d		      lda	Frame
     94  f132		       29 07		      and	#%00000111	; Every 8 when bits are 000
     95  f134		       d0 24		      bne	.logo_audio_return
     96  f136
     97  f136				   .logo_audio_play
     98  f136
     99  f136							; Check if we're at the end of the melody
    100  f136		       a4 8f		      ldy	AudioStep
    101  f138		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
    102  f13a		       f0 10		      beq	.logo_audio_mute
    103  f13c
    104  f13c				   .logo_audio_play_note
    105  f13c							; Increment audio position
    106  f13c		       c8		      iny
    107  f13d		       84 8f		      sty	AudioStep
    108  f13f
    109  f13f							; Logo note and play
    110  f13f		       b9 32 f2 	      lda	LogoAudio0,y
    111  f142		       85 17		      sta	AUDF0
    112  f144		       b9 3e f2 	      lda	LogoAudio1,y
    113  f147		       85 18		      sta	AUDF1
    114  f149		       4c 5a f1 	      jmp	.logo_audio_mute_skip
    115  f14c
    116  f14c				   .logo_audio_mute
    117  f14c
    118  f14c							; Mute audio
    119  f14c		       a9 00		      lda	#0
    120  f14e		       85 15		      sta	AUDC0
    121  f150		       85 19		      sta	AUDV0
    122  f152		       85 17		      sta	AUDF0
    123  f154		       85 16		      sta	AUDC1
    124  f156		       85 1a		      sta	AUDV1
    125  f158		       85 18		      sta	AUDF1
    126  f15a
    127  f15a				   .logo_audio_mute_skip
    128  f15a				   .logo_audio_return
    129  f15a		       60		      rts
    130  f15b
    131  f15b				   LogoState
    132  f15b		       a5 8e		      lda	FrameTimer
    133  f15d		       c9 00		      cmp	#0
    134  f15f		       d0 03		      bne	.logo_state_return
    135  f161
    136  f161		       20 4a f2 	      jsr	TitleInit
    137  f164
    138  f164				   .logo_state_return
    139  f164		       60		      rts
    140  f165
    141  f165				   LogoKernel
    142  f165
    143  f165							; Playfield Control
    144  f165		       a5 80		      lda	CtrlPf
    145  f167		       29 fe		      and	#%11111110	; No mirroring
    146  f169		       85 80		      sta	CtrlPf
    147  f16b		       85 0a		      sta	CTRLPF
    148  f16d
    149  f16d							; Turn on display
    150  f16d		       a9 00		      lda	#0
    151  f16f		       85 01		      sta	VBLANK
    152  f171
    153  f171				   .logo_kernel_top_padding
    154  f171							; Top Padding
    155  f171		       20 c2 f1 	      jsr	LogoPadding
    156  f174
    157  f174				   .logo_kernel_image_animation
    158  f174		       a4 99		      ldy	WebIndex
    159  f176		       c0 00		      cpy	#0
    160  f178		       f0 0b		      beq	.logo_kernel_image
    161  f17a
    162  f17a				   .logo_kernel_image_animation_start
    163  f17a		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    164  f17c
    165  f17c				   .logo_kernel_image_animation_loop
    166  f17c		       85 02		      sta	WSYNC
    167  f17e		       ca		      dex
    168  f17f		       d0 fb		      bne	.logo_kernel_image_animation_loop
    169  f181
    170  f181		       88		      dey
    171  f182		       88		      dey
    172  f183		       d0 f5		      bne	.logo_kernel_image_animation_start
    173  f185
    174  f185				   .logo_kernel_image
    175  f185
    176  f185		       a2 20		      ldx	#(LOGO_IMAGE_SIZE*2)
    177  f187		       a0 04		      ldy	#LOGO_IMAGE_LINE_SIZE-1
    178  f189							; The extra 1 on line size is for processing overflow
    179  f189
    180  f189		       ca		      dex
    181  f18a		       e4 99		      cpx	WebIndex
    182  f18c		       90 30		      bcc	.logo_kernel_bottom_padding
    183  f18e
    184  f18e				   .logo_kernel_image_line
    185  f18e		       85 02		      sta	WSYNC
    186  f190
    187  f190		       bd d1 f1 	      lda	LogoImagePF0-1,x
    188  f193		       85 0d		      sta	PF0
    189  f195		       bd f1 f1 	      lda	LogoImagePF1-1,x
    190  f198		       85 0e		      sta	PF1
    191  f19a		       bd 11 f2 	      lda	LogoImagePF2-1,x
    192  f19d		       85 0f		      sta	PF2
    193  f19f
      0  f19f					      sleep	6
      1  f19f				   .CYCLES    SET	6
      2  f19f
      3  f19f				  -	      IF	.CYCLES < 2
      4  f19f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f19f				  -	      ERR
      6  f19f					      ENDIF
      7  f19f
      8  f19f				  -	      IF	.CYCLES & 1
      9  f19f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f19f				  -	      nop	0
     11  f19f				  -	      ELSE
     12  f19f				  -	      bit	VSYNC
     13  f19f				  -	      ENDIF
     14  f19f				  -.CYCLES    SET	.CYCLES - 3
     15  f19f					      ENDIF
     16  f19f
     17  f19f					      REPEAT	.CYCLES / 2
     18  f19f		       ea		      nop
     17  f19f					      REPEND
     18  f1a0		       ea		      nop
     17  f1a0					      REPEND
     18  f1a1		       ea		      nop
     19  f1a2					      REPEND
    195  f1a2
    196  f1a2		       bd d2 f1 	      lda	LogoImagePF0,x
    197  f1a5		       85 0d		      sta	PF0
    198  f1a7		       bd f2 f1 	      lda	LogoImagePF1,x
    199  f1aa		       85 0e		      sta	PF1
    200  f1ac		       bd 12 f2 	      lda	LogoImagePF2,x
    201  f1af		       85 0f		      sta	PF2
    202  f1b1
    203  f1b1		       88		      dey
    204  f1b2		       d0 da		      bne	.logo_kernel_image_line
    205  f1b4
    206  f1b4		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    207  f1b6
    208  f1b6		       ca		      dex
    209  f1b7		       e4 99		      cpx	WebIndex
    210  f1b9		       90 03		      bcc	.logo_kernel_bottom_padding
    211  f1bb
    212  f1bb		       ca		      dex
    213  f1bc		       10 d0		      bpl	.logo_kernel_image_line
    214  f1be
    215  f1be				   .logo_kernel_bottom_padding
    216  f1be							; Bottom Padding
    217  f1be		       20 c2 f1 	      jsr	LogoPadding
    218  f1c1
    219  f1c1				   .logo_kernel_image_return
    220  f1c1		       60		      rts
    221  f1c2
    222  f1c2				   LogoPadding
    223  f1c2		       a9 00		      lda	#0
    224  f1c4		       85 0d		      sta	PF0
    225  f1c6		       85 0e		      sta	PF1
    226  f1c8		       85 0f		      sta	PF2
    227  f1ca
    228  f1ca		       a2 38		      ldx	#LOGO_IMAGE_PADDING
    229  f1cc				   .logo_padding_loop
    230  f1cc		       85 02		      sta	WSYNC
    231  f1ce		       ca		      dex
    232  f1cf		       d0 fb		      bne	.logo_padding_loop
    233  f1d1
    234  f1d1		       60		      rts
    235  f1d2
    236  f1d2				   LogoAssets
    237  f1d2
    238  f1d2							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f1d2					      include	"logo_image.asm"
      1  f1d2				   LogoImagePF0
      2  f1d2		       00		      .BYTE.b	%00000000
      3  f1d3		       10		      .BYTE.b	%00010000
      4  f1d4		       00		      .BYTE.b	%00000000
      5  f1d5		       30		      .BYTE.b	%00110000
      6  f1d6		       00		      .BYTE.b	%00000000
      7  f1d7		       70		      .BYTE.b	%01110000
      8  f1d8		       00		      .BYTE.b	%00000000
      9  f1d9		       60		      .BYTE.b	%01100000
     10  f1da		       00		      .BYTE.b	%00000000
     11  f1db		       60		      .BYTE.b	%01100000
     12  f1dc		       00		      .BYTE.b	%00000000
     13  f1dd		       20		      .BYTE.b	%00100000
     14  f1de		       80		      .BYTE.b	%10000000
     15  f1df		       00		      .BYTE.b	%00000000
     16  f1e0		       c0		      .BYTE.b	%11000000
     17  f1e1		       00		      .BYTE.b	%00000000
     18  f1e2		       c0		      .BYTE.b	%11000000
     19  f1e3		       00		      .BYTE.b	%00000000
     20  f1e4		       80		      .BYTE.b	%10000000
     21  f1e5		       00		      .BYTE.b	%00000000
     22  f1e6		       00		      .BYTE.b	%00000000
     23  f1e7		       40		      .BYTE.b	%01000000
     24  f1e8		       00		      .BYTE.b	%00000000
     25  f1e9		       60		      .BYTE.b	%01100000
     26  f1ea		       00		      .BYTE.b	%00000000
     27  f1eb		       60		      .BYTE.b	%01100000
     28  f1ec		       00		      .BYTE.b	%00000000
     29  f1ed		       70		      .BYTE.b	%01110000
     30  f1ee		       00		      .BYTE.b	%00000000
     31  f1ef		       30		      .BYTE.b	%00110000
     32  f1f0		       00		      .BYTE.b	%00000000
     33  f1f1		       10		      .BYTE.b	%00010000
     34  f1f2
     35  f1f2				   LogoImagePF1
     36  f1f2		       03		      .BYTE.b	%00000011
     37  f1f3		       f0		      .BYTE.b	%11110000
     38  f1f4		       03		      .BYTE.b	%00000011
     39  f1f5		       f8		      .BYTE.b	%11111000
     40  f1f6		       13		      .BYTE.b	%00010011
     41  f1f7		       fc		      .BYTE.b	%11111100
     42  f1f8		       33		      .BYTE.b	%00110011
     43  f1f9		       dc		      .BYTE.b	%11011100
     44  f1fa		       63		      .BYTE.b	%01100011
     45  f1fb		       cc		      .BYTE.b	%11001100
     46  f1fc		       c3		      .BYTE.b	%11000011
     47  f1fd		       cc		      .BYTE.b	%11001100
     48  f1fe		       83		      .BYTE.b	%10000011
     49  f1ff		       cc		      .BYTE.b	%11001100
     50  f200		       03		      .BYTE.b	%00000011
     51  f201		       cc		      .BYTE.b	%11001100
     52  f202		       03		      .BYTE.b	%00000011
     53  f203		       cc		      .BYTE.b	%11001100
     54  f204		       83		      .BYTE.b	%10000011
     55  f205		       cc		      .BYTE.b	%11001100
     56  f206		       c3		      .BYTE.b	%11000011
     57  f207		       cc		      .BYTE.b	%11001100
     58  f208		       63		      .BYTE.b	%01100011
     59  f209		       cc		      .BYTE.b	%11001100
     60  f20a		       33		      .BYTE.b	%00110011
     61  f20b		       dc		      .BYTE.b	%11011100
     62  f20c		       13		      .BYTE.b	%00010011
     63  f20d		       fc		      .BYTE.b	%11111100
     64  f20e		       03		      .BYTE.b	%00000011
     65  f20f		       f8		      .BYTE.b	%11111000
     66  f210		       03		      .BYTE.b	%00000011
     67  f211		       f0		      .BYTE.b	%11110000
     68  f212
     69  f212				   LogoImagePF2
     70  f212		       83		      .BYTE.b	%10000011
     71  f213		       00		      .BYTE.b	%00000000
     72  f214		       c7		      .BYTE.b	%11000111
     73  f215		       00		      .BYTE.b	%00000000
     74  f216		       ef		      .BYTE.b	%11101111
     75  f217		       01		      .BYTE.b	%00000001
     76  f218		       6e		      .BYTE.b	%01101110
     77  f219		       03		      .BYTE.b	%00000011
     78  f21a		       6c		      .BYTE.b	%01101100
     79  f21b		       06		      .BYTE.b	%00000110
     80  f21c		       6c		      .BYTE.b	%01101100
     81  f21d		       0c		      .BYTE.b	%00001100
     82  f21e		       6c		      .BYTE.b	%01101100
     83  f21f		       18		      .BYTE.b	%00011000
     84  f220		       6c		      .BYTE.b	%01101100
     85  f221		       30		      .BYTE.b	%00110000
     86  f222		       6c		      .BYTE.b	%01101100
     87  f223		       30		      .BYTE.b	%00110000
     88  f224		       6c		      .BYTE.b	%01101100
     89  f225		       18		      .BYTE.b	%00011000
     90  f226		       6c		      .BYTE.b	%01101100
     91  f227		       0c		      .BYTE.b	%00001100
     92  f228		       6c		      .BYTE.b	%01101100
     93  f229		       06		      .BYTE.b	%00000110
     94  f22a		       6e		      .BYTE.b	%01101110
     95  f22b		       03		      .BYTE.b	%00000011
     96  f22c		       ef		      .BYTE.b	%11101111
     97  f22d		       01		      .BYTE.b	%00000001
     98  f22e		       c7		      .BYTE.b	%11000111
     99  f22f		       00		      .BYTE.b	%00000000
    100  f230		       83		      .BYTE.b	%10000011
    101  f231		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    240  f232
    241  f232				   LogoAudio0
    242  f232
    243  f232		       1d		      .BYTE.b	#29	; C
    244  f233		       17		      .BYTE.b	#23	; E
    245  f234		       13		      .BYTE.b	#19	; G
    246  f235		       0f		      .BYTE.b	#15	; A
    247  f236		       17		      .BYTE.b	#23	; E
    248  f237		       13		      .BYTE.b	#19	; G
    249  f238		       0f		      .BYTE.b	#15	; B
    250  f239		       0e		      .BYTE.b	#14	; C
    251  f23a		       0b		      .BYTE.b	#11	; E
    252  f23b		       0b		      .BYTE.b	#11
    253  f23c		       0b		      .BYTE.b	#11
    254  f23d		       0b		      .BYTE.b	#11
    255  f23e
    256  f23e				   LogoAudio1
    257  f23e
    258  f23e		       1f		      .BYTE.b	#31	; C
    259  f23f		       1f		      .BYTE.b	#31
    260  f240		       1f		      .BYTE.b	#31
    261  f241		       1f		      .BYTE.b	#31
    262  f242		       19		      .BYTE.b	#25	; E
    263  f243		       19		      .BYTE.b	#25
    264  f244		       19		      .BYTE.b	#25
    265  f245		       19		      .BYTE.b	#25
    266  f246		       14		      .BYTE.b	#20	; G
    267  f247		       14		      .BYTE.b	#20
    268  f248		       14		      .BYTE.b	#20
    269  f249		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f24a					      include	"title.asm"
      1  f24a							;================
      2  f24a							; Constants
      3  f24a							;================
      4  f24a
      5  f24a		       00 00	   TITLE_BG_COLOR =	#$00
      6  f24a		       00 06	   TITLE_FRAME_COLOR =	#$06
      7  f24a		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f24a		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f24a
     10  f24a		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f24a		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f24a		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f24a		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f24a		       00 09	   TITLE_AUDIO_STEP =	9
     15  f24a
     16  f24a		       00 07	   TITLE_FRAME_TOP_LINES =	7
     17  f24a		       00 06	   TITLE_LABEL_LINES =	6
     18  f24a		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f24a
     20  f24a		       00 07	   TITLE_GAP_SIZE =	#7
     21  f24a
     22  f24a		       00 28	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)
     23  f24a		       00 09	   TITLE_SPIDER_SIZE =	#9
     24  f24a		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f24a
     26  f24a				   TitleInit
     27  f24a
     28  f24a							; Setup logic and kernel
      0  f24a					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f24a				   .POINTER   SET	VBlankPtr
      2  f24a				   .ADDRESS   SET	TitleVerticalBlank
      3  f24a
      4  f24a		       a9 a1		      LDA	#<.ADDRESS
      5  f24c		       85 87		      STA	.POINTER
      6  f24e		       a9 f2		      LDA	#>.ADDRESS
      7  f250		       85 88		      STA	.POINTER+1
      8  f252
      0  f252					      SET_POINTER	KernelPtr, TitleKernel
      1  f252				   .POINTER   SET	KernelPtr
      2  f252				   .ADDRESS   SET	TitleKernel
      3  f252
      4  f252		       a9 2a		      LDA	#<.ADDRESS
      5  f254		       85 89		      STA	.POINTER
      6  f256		       a9 f3		      LDA	#>.ADDRESS
      7  f258		       85 8a		      STA	.POINTER+1
      8  f25a
      0  f25a					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f25a				   .POINTER   SET	OverScanPtr
      2  f25a				   .ADDRESS   SET	TitleOverScan
      3  f25a
      4  f25a		       a9 e3		      LDA	#<.ADDRESS
      5  f25c		       85 8b		      STA	.POINTER
      6  f25e		       a9 f2		      LDA	#>.ADDRESS
      7  f260		       85 8c		      STA	.POINTER+1
      8  f262
     32  f262
     33  f262							; Load Colors
     34  f262		       a9 00		      lda	#TITLE_BG_COLOR
     35  f264		       85 09		      sta	COLUBK
     36  f266		       a9 06		      lda	#TITLE_FRAME_COLOR
     37  f268		       85 08		      sta	COLUPF
     38  f26a		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f26c		       85 06		      sta	COLUP0
     40  f26e		       85 07		      sta	COLUP1
     41  f270
     42  f270							; Load audio settings
     43  f270
     44  f270							; Melody Line
     45  f270		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f272		       85 15		      sta	AUDC0
     47  f274		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f276		       85 19		      sta	AUDV0
     49  f278
     50  f278							; Drums and Bass
     51  f278		       a9 00		      lda	#0
     52  f27a		       85 16		      sta	AUDC1
     53  f27c		       85 1a		      sta	AUDV1
     54  f27e
     55  f27e							; Make it so that we play the first note immediately
     56  f27e		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f280		       85 8f		      sta	AudioStep
     58  f282		       a9 01		      lda	#1
     59  f284		       85 8e		      sta	FrameTimer
     60  f286
     61  f286							; Setup Spider Sprite
      0  f286					      SET_POINTER	SpiderPtr, TitleSpider
      1  f286				   .POINTER   SET	SpiderPtr
      2  f286				   .ADDRESS   SET	TitleSpider
      3  f286
      4  f286		       a9 87		      LDA	#<.ADDRESS
      5  f288		       85 9b		      STA	.POINTER
      6  f28a		       a9 f4		      LDA	#>.ADDRESS
      7  f28c		       85 9c		      STA	.POINTER+1
      8  f28e
     63  f28e
     64  f28e		       a9 06		      lda	#%00000110	; Triple Sprite
     65  f290		       85 81		      sta	NuSiz0
     66  f292		       85 04		      sta	NUSIZ0
     67  f294		       85 82		      sta	NuSiz1
     68  f296		       85 05		      sta	NUSIZ1
     69  f298
     70  f298		       a9 00		      lda	#0	; No reflect
     71  f29a		       85 0b		      sta	REFP0
     72  f29c		       a9 ff		      lda	#$FF	; Reflect P1
     73  f29e		       85 0c		      sta	REFP1
     74  f2a0
     75  f2a0		       60		      rts
     76  f2a1
     77  f2a1				   TitleVerticalBlank
     78  f2a1
     79  f2a1							; Refresh random values
     80  f2a1		       20 13 f0 	      jsr	Random
     81  f2a4
     82  f2a4		       20 ab f2 	      jsr	TitlePosition
     83  f2a7		       20 be f2 	      jsr	TitleAnimation
     84  f2aa
     85  f2aa		       60		      rts
     86  f2ab
     87  f2ab				   TitlePosition
     88  f2ab
     89  f2ab							; Position Spider
     90  f2ab		       a2 00		      ldx	#0	; Object (player0)
     91  f2ad		       a9 28		      lda	#TITLE_SPIDER_POS_X	; X Position
     92  f2af		       20 00 f0 	      jsr	PosObject
     93  f2b2
     94  f2b2		       a2 01		      ldx	#1	; Object (player1)
     95  f2b4		       a9 30		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
     96  f2b6		       20 00 f0 	      jsr	PosObject
     97  f2b9
     98  f2b9		       85 02		      sta	WSYNC
     99  f2bb		       85 2a		      sta	HMOVE
    100  f2bd
    101  f2bd		       60		      rts
    102  f2be
    103  f2be				   TitleAnimation
    104  f2be
    105  f2be		       a5 8f		      lda	AudioStep
    106  f2c0		       c9 00		      cmp	#0
    107  f2c2		       f0 0d		      beq	.title_animation_1
    108  f2c4		       c9 04		      cmp	#4
    109  f2c6		       f0 12		      beq	.title_animation_2
    110  f2c8		       c9 09		      cmp	#9
    111  f2ca		       f0 05		      beq	.title_animation_1
    112  f2cc		       c9 0c		      cmp	#12
    113  f2ce		       f0 0a		      beq	.title_animation_2
    114  f2d0		       60		      rts
    115  f2d1
    116  f2d1				   .title_animation_1
      0  f2d1					      SET_POINTER	SpiderPtr, TitleSpider
      1  f2d1				   .POINTER   SET	SpiderPtr
      2  f2d1				   .ADDRESS   SET	TitleSpider
      3  f2d1
      4  f2d1		       a9 87		      LDA	#<.ADDRESS
      5  f2d3		       85 9b		      STA	.POINTER
      6  f2d5		       a9 f4		      LDA	#>.ADDRESS
      7  f2d7		       85 9c		      STA	.POINTER+1
      8  f2d9
    118  f2d9		       60		      rts
    119  f2da
    120  f2da				   .title_animation_2
      0  f2da					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f2da				   .POINTER   SET	SpiderPtr
      2  f2da				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f2da
      4  f2da		       a9 90		      LDA	#<.ADDRESS
      5  f2dc		       85 9b		      STA	.POINTER
      6  f2de		       a9 f4		      LDA	#>.ADDRESS
      7  f2e0		       85 9c		      STA	.POINTER+1
      8  f2e2
    122  f2e2		       60		      rts
    123  f2e3
    124  f2e3				   TitleOverScan
    125  f2e3		       20 ea f2 	      jsr	TitleAudio
    126  f2e6		       20 22 f3 	      jsr	TitleState
    127  f2e9		       60		      rts
    128  f2ea
    129  f2ea				   TitleAudio
    130  f2ea
    131  f2ea		       a6 8e		      ldx	FrameTimer
    132  f2ec		       e0 00		      cpx	#0
    133  f2ee		       d0 31		      bne	.title_audio_return
    134  f2f0
    135  f2f0							; Reset Timer
    136  f2f0		       a2 09		      ldx	#TITLE_AUDIO_STEP
    137  f2f2		       86 8e		      stx	FrameTimer
    138  f2f4
    139  f2f4				   .title_audio_play
    140  f2f4
    141  f2f4							; Increment melody position
    142  f2f4		       a4 8f		      ldy	AudioStep
    143  f2f6		       c8		      iny
    144  f2f7
    145  f2f7							; Check if we're at the end of the melody
    146  f2f7		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    147  f2f9		       d0 02		      bne	.title_audio_play_note
    148  f2fb
    149  f2fb							; Loop our audio step
    150  f2fb		       a0 00		      ldy	#0
    151  f2fd
    152  f2fd				   .title_audio_play_note
    153  f2fd
    154  f2fd							; Save current position
    155  f2fd		       84 8f		      sty	AudioStep
    156  f2ff
    157  f2ff							; Basic Melody Line
    158  f2ff		       b9 99 f4 	      lda	TitleAudio0,y
    159  f302		       85 17		      sta	AUDF0
    160  f304
    161  f304							; Drums and Bass
    162  f304		       b9 a9 f4 	      lda	TitleTone1,y
    163  f307		       c9 ff		      cmp	#$FF
    164  f309		       f0 0e		      beq	.title_audio_play_note_1_mute
    165  f30b
    166  f30b		       85 16		      sta	AUDC1
    167  f30d		       b9 b9 f4 	      lda	TitleAudio1,y
    168  f310		       85 18		      sta	AUDF1
    169  f312		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    170  f314		       85 1a		      sta	AUDV1
    171  f316
    172  f316		       4c 21 f3 	      jmp	.title_audio_return
    173  f319
    174  f319				   .title_audio_play_note_1_mute
    175  f319
    176  f319		       a9 00		      lda	#0
    177  f31b		       85 18		      sta	AUDF1
    178  f31d		       85 16		      sta	AUDC1
    179  f31f		       85 1a		      sta	AUDV1
    180  f321
    181  f321				   .title_audio_return
    182  f321		       60		      rts
    183  f322
    184  f322				   TitleState
    185  f322							; Check if Fire Button on controller 1 is pressed
    186  f322		       a5 0c		      lda	INPT4
    187  f324		       30 03		      bmi	.title_state_return
    188  f326
    189  f326		       20 b5 fa 	      jsr	GameInit
    190  f329
    191  f329				   .title_state_return
    192  f329		       60		      rts
    193  f32a
    194  f32a				   TitleKernel
    195  f32a
    196  f32a							; Playfield Control
    197  f32a		       a5 80		      lda	CtrlPf
    198  f32c		       29 fe		      and	#%11111110	; No mirroring
    199  f32e		       85 80		      sta	CtrlPf
    200  f330		       85 0a		      sta	CTRLPF
    201  f332
    202  f332							; Turn on display
    203  f332		       a9 00		      lda	#0
    204  f334		       85 01		      sta	VBLANK
    205  f336
    206  f336		       85 02		      sta	WSYNC
    207  f338
    208  f338				   TitleFrameTopDraw
    209  f338
    210  f338							; Start Counters
    211  f338		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    212  f33a		       a0 00		      ldy	#0	; Image Counter
    213  f33c
    214  f33c				   .title_frame_top
    215  f33c
    216  f33c							; 76 machine cycles per scanline
    217  f33c		       85 02		      sta	WSYNC
    218  f33e
    219  f33e				   .title_frame_top_load		; 66 cycles
    220  f33e
    221  f33e							; First half of image
    222  f33e		       b9 1b f4 	      lda	TitleFrameTop,y	; 5
    223  f341		       85 0d		      sta	PF0	; 4
    224  f343		       b9 1c f4 	      lda	TitleFrameTop+1,y	; 5
    225  f346		       85 0e		      sta	PF1	; 4
    226  f348		       b9 1d f4 	      lda	TitleFrameTop+2,y	; 5
    227  f34b		       85 0f		      sta	PF2	; 4
    228  f34d
      0  f34d					      sleep	6
      1  f34d				   .CYCLES    SET	6
      2  f34d
      3  f34d				  -	      IF	.CYCLES < 2
      4  f34d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f34d				  -	      ERR
      6  f34d					      ENDIF
      7  f34d
      8  f34d				  -	      IF	.CYCLES & 1
      9  f34d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f34d				  -	      nop	0
     11  f34d				  -	      ELSE
     12  f34d				  -	      bit	VSYNC
     13  f34d				  -	      ENDIF
     14  f34d				  -.CYCLES    SET	.CYCLES - 3
     15  f34d					      ENDIF
     16  f34d
     17  f34d					      REPEAT	.CYCLES / 2
     18  f34d		       ea		      nop
     17  f34d					      REPEND
     18  f34e		       ea		      nop
     17  f34e					      REPEND
     18  f34f		       ea		      nop
     19  f350					      REPEND
    230  f350
    231  f350							; Second half of image
    232  f350		       b9 1e f4 	      lda	TitleFrameTop+3,y	; 5
    233  f353		       85 0d		      sta	PF0	; 4
    234  f355		       b9 1f f4 	      lda	TitleFrameTop+4,y	; 5
    235  f358		       85 0e		      sta	PF1	; 4
    236  f35a		       b9 20 f4 	      lda	TitleFrameTop+5,y	; 5
    237  f35d		       85 0f		      sta	PF2	; 4
    238  f35f
    239  f35f				   .title_frame_top_index		; 4 cycles
    240  f35f
    241  f35f		       ca		      dex		; 2
    242  f360		       d0 da		      bne	.title_frame_top	; 2
    243  f362
    244  f362				   .title_frame_top_index_next		; 6 cycles
    245  f362
    246  f362							; Restore scanline counter
    247  f362		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    248  f364
    249  f364		       98		      tya		; 2
    250  f365		       18		      clc		; 2
    251  f366		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    252  f368		       a8		      tay		; 2
    253  f369		       c0 2a		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA
    254  f36b		       d0 cf		      bne	.title_frame_top	; 2
    255  f36d
    256  f36d				   .title_frame_top_clean
    257  f36d
    258  f36d							; Clear out playfield
    259  f36d		       a9 00		      lda	#0
    260  f36f		       85 0d		      sta	PF0
    261  f371		       85 0e		      sta	PF1
    262  f373		       85 0f		      sta	PF2
    263  f375
    264  f375				   TitleLabelDraw
    265  f375
    266  f375							; Load Label Color
    267  f375		       a9 0e		      lda	#TITLE_LABEL_COLOR
    268  f377		       85 08		      sta	COLUPF
    269  f379
    270  f379							; Start Counters
    271  f379		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    272  f37b		       a0 00		      ldy	#0	; Image Counter
    273  f37d
    274  f37d				   .title_label
    275  f37d
    276  f37d							; 76 machine cycles per scanline
    277  f37d		       85 02		      sta	WSYNC
    278  f37f
    279  f37f				   .title_label_load		; 66 cycles
    280  f37f
    281  f37f							; First half of image
    282  f37f		       b9 63 f4 	      lda	TitleLabel,y	; 5
    283  f382		       85 0d		      sta	PF0	; 4
    284  f384		       b9 64 f4 	      lda	TitleLabel+1,y	; 5
    285  f387		       85 0e		      sta	PF1	; 4
    286  f389		       b9 65 f4 	      lda	TitleLabel+2,y	; 5
    287  f38c		       85 0f		      sta	PF2	; 4
    288  f38e
      0  f38e					      sleep	6
      1  f38e				   .CYCLES    SET	6
      2  f38e
      3  f38e				  -	      IF	.CYCLES < 2
      4  f38e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f38e				  -	      ERR
      6  f38e					      ENDIF
      7  f38e
      8  f38e				  -	      IF	.CYCLES & 1
      9  f38e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f38e				  -	      nop	0
     11  f38e				  -	      ELSE
     12  f38e				  -	      bit	VSYNC
     13  f38e				  -	      ENDIF
     14  f38e				  -.CYCLES    SET	.CYCLES - 3
     15  f38e					      ENDIF
     16  f38e
     17  f38e					      REPEAT	.CYCLES / 2
     18  f38e		       ea		      nop
     17  f38e					      REPEND
     18  f38f		       ea		      nop
     17  f38f					      REPEND
     18  f390		       ea		      nop
     19  f391					      REPEND
    290  f391
    291  f391							; Second half of image
    292  f391		       b9 66 f4 	      lda	TitleLabel+3,y	; 5
    293  f394		       85 0d		      sta	PF0	; 4
    294  f396		       b9 67 f4 	      lda	TitleLabel+4,y	; 5
    295  f399		       85 0e		      sta	PF1	; 4
    296  f39b		       b9 68 f4 	      lda	TitleLabel+5,y	; 5
    297  f39e		       85 0f		      sta	PF2	; 4
    298  f3a0
    299  f3a0				   .title_label_index		; 4 cycles
    300  f3a0
    301  f3a0		       ca		      dex		; 2
    302  f3a1		       d0 da		      bne	.title_label	; 2
    303  f3a3
    304  f3a3				   .title_label_index_next		; 6 cycles
    305  f3a3
    306  f3a3							; Restore scanline counter
    307  f3a3		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    308  f3a5
    309  f3a5		       98		      tya		; 2
    310  f3a6		       18		      clc		; 2
    311  f3a7		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    312  f3a9		       a8		      tay		; 2
    313  f3aa		       c0 24		      cpy	#TITLE_LABEL_LINES*KERNEL_IMAGE_FULL_DATA
    314  f3ac		       d0 cf		      bne	.title_label	; 2
    315  f3ae
    316  f3ae				   .title_label_clean
    317  f3ae
    318  f3ae							; Clear out playfield
    319  f3ae		       a9 00		      lda	#0
    320  f3b0		       85 0d		      sta	PF0
    321  f3b2		       85 0e		      sta	PF1
    322  f3b4		       85 0f		      sta	PF2
    323  f3b6
    324  f3b6				   TitleGap
    325  f3b6		       a2 07		      ldx	#TITLE_GAP_SIZE
    326  f3b8
    327  f3b8				   .title_gap
    328  f3b8		       ca		      dex
    329  f3b9		       85 02		      sta	WSYNC
    330  f3bb		       d0 fb		      bne	.title_gap
    331  f3bd
    332  f3bd				   TitleSpiderDraw
    333  f3bd		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    334  f3bf		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    335  f3c1
    336  f3c1		       85 02		      sta	WSYNC
    337  f3c3
    338  f3c3				   .title_spider
    339  f3c3		       b1 9b		      lda	(SpiderPtr),y
    340  f3c5		       85 1b		      sta	GRP0
    341  f3c7		       85 1c		      sta	GRP1
    342  f3c9
    343  f3c9				   .title_spider_delay
    344  f3c9		       ca		      dex
    345  f3ca		       85 02		      sta	WSYNC
    346  f3cc		       d0 fb		      bne	.title_spider_delay
    347  f3ce
    348  f3ce				   .title_spider_index
    349  f3ce		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    350  f3d0		       88		      dey
    351  f3d1		       10 f0		      bpl	.title_spider
    352  f3d3
    353  f3d3				   .title_spider_clean
    354  f3d3
    355  f3d3							; Clear sprites
    356  f3d3		       a9 00		      lda	#0
    357  f3d5		       85 1b		      sta	GRP0
    358  f3d7		       85 1c		      sta	GRP1
    359  f3d9
    360  f3d9				   TitleFrameBottomDraw
    361  f3d9
    362  f3d9							; Load Frame Color
    363  f3d9		       a9 06		      lda	#TITLE_FRAME_COLOR
    364  f3db		       85 08		      sta	COLUPF
    365  f3dd
    366  f3dd							; Start Counters
    367  f3dd		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    368  f3df		       a0 00		      ldy	#0	; Image Counter
    369  f3e1
    370  f3e1				   .title_frame_bottom
    371  f3e1
    372  f3e1							; 76 machine cycles per scanline
    373  f3e1		       85 02		      sta	WSYNC
    374  f3e3
    375  f3e3				   .title_frame_bottom_load		; 66 cycles
    376  f3e3
    377  f3e3							; First half of image
    378  f3e3		       b9 45 f4 	      lda	TitleFrameBottom,y	; 5
    379  f3e6		       85 0d		      sta	PF0	; 4
    380  f3e8		       b9 46 f4 	      lda	TitleFrameBottom+1,y	; 5
    381  f3eb		       85 0e		      sta	PF1	; 4
    382  f3ed		       b9 47 f4 	      lda	TitleFrameBottom+2,y	; 5
    383  f3f0		       85 0f		      sta	PF2	; 4
    384  f3f2
      0  f3f2					      sleep	6
      1  f3f2				   .CYCLES    SET	6
      2  f3f2
      3  f3f2				  -	      IF	.CYCLES < 2
      4  f3f2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3f2				  -	      ERR
      6  f3f2					      ENDIF
      7  f3f2
      8  f3f2				  -	      IF	.CYCLES & 1
      9  f3f2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3f2				  -	      nop	0
     11  f3f2				  -	      ELSE
     12  f3f2				  -	      bit	VSYNC
     13  f3f2				  -	      ENDIF
     14  f3f2				  -.CYCLES    SET	.CYCLES - 3
     15  f3f2					      ENDIF
     16  f3f2
     17  f3f2					      REPEAT	.CYCLES / 2
     18  f3f2		       ea		      nop
     17  f3f2					      REPEND
     18  f3f3		       ea		      nop
     17  f3f3					      REPEND
     18  f3f4		       ea		      nop
     19  f3f5					      REPEND
    386  f3f5
    387  f3f5							; Second half of image
    388  f3f5		       b9 48 f4 	      lda	TitleFrameBottom+3,y	; 5
    389  f3f8		       85 0d		      sta	PF0	; 4
    390  f3fa		       b9 49 f4 	      lda	TitleFrameBottom+4,y	; 5
    391  f3fd		       85 0e		      sta	PF1	; 4
    392  f3ff		       b9 4a f4 	      lda	TitleFrameBottom+5,y	; 5
    393  f402		       85 0f		      sta	PF2	; 4
    394  f404
    395  f404				   .title_frame_bottom_index		; 4 cycles
    396  f404
    397  f404		       ca		      dex		; 2
    398  f405		       d0 da		      bne	.title_frame_bottom	; 2
    399  f407
    400  f407				   .title_frame_bottom_index_next		; 6 cycles
    401  f407
    402  f407							; Restore scanline counter
    403  f407		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    404  f409
    405  f409		       98		      tya		; 2
    406  f40a		       18		      clc		; 2
    407  f40b		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    408  f40d		       a8		      tay		; 2
    409  f40e		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    410  f410		       d0 cf		      bne	.title_frame_bottom	; 2
    411  f412
    412  f412				   .title_frame_bottom_clean
    413  f412
    414  f412							; Clear out playfield
    415  f412		       a9 00		      lda	#0
    416  f414		       85 0d		      sta	PF0
    417  f416		       85 0e		      sta	PF1
    418  f418		       85 0f		      sta	PF2
    419  f41a
    420  f41a				   .title_kernel_return
    421  f41a		       60		      rts
    422  f41b
    423  f41b				   TitleAssets
    424  f41b
    425  f41b							; Assets
------- FILE title_frame_top.asm LEVEL 3 PASS 2
      0  f41b					      include	"title_frame_top.asm"
      1  f41b				   TitleFrameTop
      2  f41b
      3  f41b		       a0		      .BYTE.b	%10100000
      4  f41c		       54		      .BYTE.b	%01010100
      5  f41d		       01		      .BYTE.b	%00000001
      6  f41e		       00		      .BYTE.b	%00000000
      7  f41f		       03		      .BYTE.b	%00000011
      8  f420		       2c		      .BYTE.b	%00101100
      9  f421
     10  f421		       d0		      .BYTE.b	%11010000
     11  f422		       23		      .BYTE.b	%00100011
     12  f423		       00		      .BYTE.b	%00000000
     13  f424		       00		      .BYTE.b	%00000000
     14  f425		       00		      .BYTE.b	%00000000
     15  f426		       51		      .BYTE.b	%01010001
     16  f427
     17  f427		       60		      .BYTE.b	%01100000
     18  f428		       dc		      .BYTE.b	%11011100
     19  f429		       00		      .BYTE.b	%00000000
     20  f42a		       00		      .BYTE.b	%00000000
     21  f42b		       00		      .BYTE.b	%00000000
     22  f42c		       8e		      .BYTE.b	%10001110
     23  f42d
     24  f42d		       b0		      .BYTE.b	%10110000
     25  f42e		       00		      .BYTE.b	%00000000
     26  f42f		       00		      .BYTE.b	%00000000
     27  f430		       00		      .BYTE.b	%00000000
     28  f431		       00		      .BYTE.b	%00000000
     29  f432		       51		      .BYTE.b	%01010001
     30  f433
     31  f433		       40		      .BYTE.b	%01000000
     32  f434		       80		      .BYTE.b	%10000000
     33  f435		       00		      .BYTE.b	%00000000
     34  f436		       00		      .BYTE.b	%00000000
     35  f437		       00		      .BYTE.b	%00000000
     36  f438		       ad		      .BYTE.b	%10101101
     37  f439
     38  f439		       50		      .BYTE.b	%01010000
     39  f43a		       00		      .BYTE.b	%00000000
     40  f43b		       00		      .BYTE.b	%00000000
     41  f43c		       00		      .BYTE.b	%00000000
     42  f43d		       01		      .BYTE.b	%00000001
     43  f43e		       82		      .BYTE.b	%10000010
     44  f43f
     45  f43f		       20		      .BYTE.b	%00100000
     46  f440		       00		      .BYTE.b	%00000000
     47  f441		       00		      .BYTE.b	%00000000
     48  f442		       00		      .BYTE.b	%00000000
     49  f443		       02		      .BYTE.b	%00000010
     50  f444		       00		      .BYTE.b	%00000000
------- FILE title.asm
------- FILE title_frame_bottom.asm LEVEL 3 PASS 2
      0  f445					      include	"title_frame_bottom.asm"
      1  f445				   TitleFrameBottom
      2  f445
      3  f445		       20		      .BYTE.b	%00100000
      4  f446		       00		      .BYTE.b	%00000000
      5  f447		       00		      .BYTE.b	%00000000
      6  f448		       00		      .BYTE.b	%00000000
      7  f449		       00		      .BYTE.b	%00000000
      8  f44a		       64		      .BYTE.b	%01100100
      9  f44b
     10  f44b		       50		      .BYTE.b	%01010000
     11  f44c		       00		      .BYTE.b	%00000000
     12  f44d		       00		      .BYTE.b	%00000000
     13  f44e		       00		      .BYTE.b	%00000000
     14  f44f		       00		      .BYTE.b	%00000000
     15  f450		       98		      .BYTE.b	%10011000
     16  f451
     17  f451		       90		      .BYTE.b	%10010000
     18  f452		       80		      .BYTE.b	%10000000
     19  f453		       00		      .BYTE.b	%00000000
     20  f454		       00		      .BYTE.b	%00000000
     21  f455		       00		      .BYTE.b	%00000000
     22  f456		       28		      .BYTE.b	%00101000
     23  f457
     24  f457		       60		      .BYTE.b	%01100000
     25  f458		       60		      .BYTE.b	%01100000
     26  f459		       00		      .BYTE.b	%00000000
     27  f45a		       00		      .BYTE.b	%00000000
     28  f45b		       00		      .BYTE.b	%00000000
     29  f45c		       44		      .BYTE.b	%01000100
     30  f45d
     31  f45d		       d0		      .BYTE.b	%11010000
     32  f45e		       1c		      .BYTE.b	%00011100
     33  f45f		       00		      .BYTE.b	%00000000
     34  f460		       00		      .BYTE.b	%00000000
     35  f461		       00		      .BYTE.b	%00000000
     36  f462		       ab		      .BYTE.b	%10101011
------- FILE title.asm
------- FILE title_label.asm LEVEL 3 PASS 2
      0  f463					      include	"title_label.asm"
      1  f463				   TitleLabel
      2  f463
      3  f463		       c0		      .BYTE.b	%11000000
      4  f464		       77		      .BYTE.b	%01110111
      5  f465		       66		      .BYTE.b	%01100110
      6  f466		       30		      .BYTE.b	%00110000
      7  f467		       22		      .BYTE.b	%00100010
      8  f468		       1b		      .BYTE.b	%00011011
      9  f469
     10  f469		       40		      .BYTE.b	%01000000
     11  f46a		       52		      .BYTE.b	%01010010
     12  f46b		       2a		      .BYTE.b	%00101010
     13  f46c		       50		      .BYTE.b	%01010000
     14  f46d		       22		      .BYTE.b	%00100010
     15  f46e		       29		      .BYTE.b	%00101001
     16  f46f
     17  f46f		       40		      .BYTE.b	%01000000
     18  f470		       72		      .BYTE.b	%01110010
     19  f471		       6a		      .BYTE.b	%01101010
     20  f472		       50		      .BYTE.b	%01010000
     21  f473		       22		      .BYTE.b	%00100010
     22  f474		       1b		      .BYTE.b	%00011011
     23  f475
     24  f475		       c0		      .BYTE.b	%11000000
     25  f476		       42		      .BYTE.b	%01000010
     26  f477		       2a		      .BYTE.b	%00101010
     27  f478		       30		      .BYTE.b	%00110000
     28  f479		       22		      .BYTE.b	%00100010
     29  f47a		       29		      .BYTE.b	%00101001
     30  f47b
     31  f47b		       80		      .BYTE.b	%10000000
     32  f47c		       42		      .BYTE.b	%01000010
     33  f47d		       2a		      .BYTE.b	%00101010
     34  f47e		       50		      .BYTE.b	%01010000
     35  f47f		       2a		      .BYTE.b	%00101010
     36  f480		       29		      .BYTE.b	%00101001
     37  f481
     38  f481		       c0		      .BYTE.b	%11000000
     39  f482		       47		      .BYTE.b	%01000111
     40  f483		       66		      .BYTE.b	%01100110
     41  f484		       50		      .BYTE.b	%01010000
     42  f485		       14		      .BYTE.b	%00010100
     43  f486		       1b		      .BYTE.b	%00011011
------- FILE title.asm
------- FILE title_spider.asm LEVEL 3 PASS 2
      0  f487					      include	"title_spider.asm"
      1  f487				   TitleSpider
      2  f487
      3  f487		       30		      .BYTE.b	%00110000
      4  f488		       67		      .BYTE.b	%01100111
      5  f489		       48		      .BYTE.b	%01001000
      6  f48a		       d2		      .BYTE.b	%11010010
      7  f48b		       d7		      .BYTE.b	%11010111
      8  f48c		       d0		      .BYTE.b	%11010000
      9  f48d		       4a		      .BYTE.b	%01001010
     10  f48e		       6c		      .BYTE.b	%01101100
     11  f48f		       3b		      .BYTE.b	%00111011
     12  f490
     13  f490		       37		      .BYTE.b	%00110111
     14  f491		       6a		      .BYTE.b	%01101010
     15  f492		       d7		      .BYTE.b	%11010111
     16  f493		       d0		      .BYTE.b	%11010000
     17  f494		       ca		      .BYTE.b	%11001010
     18  f495		       6c		      .BYTE.b	%01101100
     19  f496		       3b		      .BYTE.b	%00111011
     20  f497		       00		      .BYTE.b	%00000000
     21  f498		       00		      .BYTE.b	%00000000
------- FILE title.asm
    430  f499
    431  f499				   TitleAudio0
    432  f499
    433  f499		       0f		      .BYTE.b	#15	; B
    434  f49a		       13		      .BYTE.b	#19	; G
    435  f49b		       17		      .BYTE.b	#23	; E
    436  f49c		       13		      .BYTE.b	#19	; G
    437  f49d		       0e		      .BYTE.b	#14	; C
    438  f49e		       13		      .BYTE.b	#19
    439  f49f		       17		      .BYTE.b	#23
    440  f4a0		       13		      .BYTE.b	#19
    441  f4a1		       0c		      .BYTE.b	#12	; D
    442  f4a2		       13		      .BYTE.b	#19
    443  f4a3		       17		      .BYTE.b	#23
    444  f4a4		       13		      .BYTE.b	#19
    445  f4a5		       0e		      .BYTE.b	#14	; C
    446  f4a6		       13		      .BYTE.b	#19
    447  f4a7		       17		      .BYTE.b	#23
    448  f4a8		       13		      .BYTE.b	#19
    449  f4a9
    450  f4a9				   TitleTone1
    451  f4a9
    452  f4a9		       0f		      .BYTE.b	#15	; Electronic Rumble
    453  f4aa		       ff		      .BYTE.b	#$FF
    454  f4ab		       01		      .BYTE.b	#1	; Low Pure Tone
    455  f4ac		       01		      .BYTE.b	#1
    456  f4ad		       08		      .BYTE.b	#8	; White Noise
    457  f4ae		       01		      .BYTE.b	#1
    458  f4af		       01		      .BYTE.b	#1
    459  f4b0		       ff		      .BYTE.b	#$FF
    460  f4b1		       ff		      .BYTE.b	#$FF
    461  f4b2		       0f		      .BYTE.b	#15
    462  f4b3		       ff		      .BYTE.b	#$FF
    463  f4b4		       ff		      .BYTE.b	#$FF
    464  f4b5		       08		      .BYTE.b	#8
    465  f4b6		       ff		      .BYTE.b	#$FF
    466  f4b7		       01		      .BYTE.b	#1
    467  f4b8		       01		      .BYTE.b	#1
    468  f4b9
    469  f4b9				   TitleAudio1
    470  f4b9
    471  f4b9		       1d		      .BYTE.b	#29	; Kick
    472  f4ba		       ff		      .BYTE.b	#$FF
    473  f4bb		       1f		      .BYTE.b	#31	; C
    474  f4bc		       1f		      .BYTE.b	#31
    475  f4bd		       07		      .BYTE.b	#7	; Snare
    476  f4be		       1f		      .BYTE.b	#31
    477  f4bf		       1f		      .BYTE.b	#31
    478  f4c0		       ff		      .BYTE.b	#$FF
    479  f4c1		       ff		      .BYTE.b	#$FF
    480  f4c2		       1d		      .BYTE.b	#29
    481  f4c3		       ff		      .BYTE.b	#$FF
    482  f4c4		       ff		      .BYTE.b	#$FF
    483  f4c5		       07		      .BYTE.b	#7
    484  f4c6		       ff		      .BYTE.b	#$FF
    485  f4c7		       17		      .BYTE.b	#23	; F
    486  f4c8		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4c9					      include	"game.asm"
      1  f4c9							;================
      2  f4c9							; Game
      3  f4c9							;================
      4  f4c9
      5  f4c9							; Constants
      6  f4c9
      7  f4c9		       00 04	   GAME_AUDIO_VOLUME =	4
      8  f4c9		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4c9		       00 09	   GAME_AUDIO_STEP =	9
     10  f4c9		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4c9		       00 06	   GAME_AUDIO_TONE =	6
     12  f4c9
     13  f4c9							; Object Code
     14  f4c9
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f4c9					      include	"objects/score.asm"
      1  f4c9							;======================
      2  f4c9							; Score (playfield)
      3  f4c9							;======================
      4  f4c9
      5  f4c9							; Constants
      6  f4c9
      7  f4c9		       00 00	   SCORE_BG_COLOR =	#$00
      8  f4c9		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f4c9		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f4c9
     11  f4c9		       00 05	   SCORE_CHAR_SIZE =	5
     12  f4c9		       00 02	   SCORE_LINE_SIZE =	2
     13  f4c9		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f4c9
     15  f4c9							; Initialization
     16  f4c9
     17  f4c9				   ScoreInit
     18  f4c9
     19  f4c9							; Health Score
     20  f4c9		       a9 ff		      lda	#$FF
     21  f4cb		       85 91		      sta	ScoreValue+0
     22  f4cd
     23  f4cd							; Game Score
     24  f4cd		       a9 00		      lda	#0
     25  f4cf		       85 92		      sta	ScoreValue+1
     26  f4d1
     27  f4d1		       60		      rts
     28  f4d2
     29  f4d2							; Frame Update
     30  f4d2
     31  f4d2				   ScoreUpdate
     32  f4d2
     33  f4d2		       a2 01		      ldx	#1
     34  f4d4				   .score_update_loop
     35  f4d4
     36  f4d4							; Ones Digit
     37  f4d4		       b5 91		      lda	ScoreValue,x
     38  f4d6		       29 0f		      and	#$0f
     39  f4d8		       85 83		      sta	Temp
     40  f4da		       0a		      asl
     41  f4db		       0a		      asl
     42  f4dc		       65 83		      adc	Temp
     43  f4de		       95 93		      sta	ScoreDigitOnes,x
     44  f4e0
     45  f4e0							; Tens Digit
     46  f4e0		       b5 91		      lda	ScoreValue,x
     47  f4e2		       29 f0		      and	#$f0
     48  f4e4		       4a		      lsr
     49  f4e5		       4a		      lsr
     50  f4e6		       85 83		      sta	Temp
     51  f4e8		       4a		      lsr
     52  f4e9		       4a		      lsr
     53  f4ea		       65 83		      adc	Temp
     54  f4ec		       95 95		      sta	ScoreDigitTens,x
     55  f4ee
     56  f4ee		       ca		      dex
     57  f4ef		       10 e3		      bpl	.score_update_loop
     58  f4f1
     59  f4f1				   .score_update_end
     60  f4f1		       60		      rts
     61  f4f2
     62  f4f2							; Draw loop (uses SCORE_LINES scanlines)
     63  f4f2
     64  f4f2				   ScoreDraw
     65  f4f2
     66  f4f2							; Load Colors
     67  f4f2		       a9 00		      lda	#SCORE_BG_COLOR
     68  f4f4		       85 09		      sta	COLUBK
     69  f4f6		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f4f8		       85 08		      sta	COLUPF
     71  f4fa		       85 06		      sta	COLUP0
     72  f4fc		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f4fe		       85 07		      sta	COLUP1
     74  f500
     75  f500							; Set Non-Mirror and p0/p1 color
     76  f500		       a5 80		      lda	CtrlPf
     77  f502		       29 fc		      and	#%11111100
     78  f504		       09 02		      ora	#%00000010
     79  f506		       85 80		      sta	CtrlPf
     80  f508		       85 0a		      sta	CTRLPF
     81  f50a
     82  f50a							;sta WSYNC
     83  f50a
     84  f50a		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f50c
     86  f50c				   .score_draw_line
     87  f50c
     88  f50c							; 1st Value
     89  f50c		       a4 95		      ldy	ScoreDigitTens
     90  f50e		       b9 62 f5 	      lda	ScoreDigits,y
     91  f511		       29 f0		      and	#$f0
     92  f513		       85 97		      sta	ScoreGfx
     93  f515		       a4 93		      ldy	ScoreDigitOnes
     94  f517		       b9 62 f5 	      lda	ScoreDigits,y
     95  f51a		       29 0f		      and	#$0f
     96  f51c		       05 97		      ora	ScoreGfx
     97  f51e		       85 97		      sta	ScoreGfx
     98  f520
     99  f520		       85 02		      sta	WSYNC
    100  f522		       85 0e		      sta	PF1
    101  f524
    102  f524							; 2nd Value
    103  f524		       a4 96		      ldy	ScoreDigitTens+1
    104  f526		       b9 62 f5 	      lda	ScoreDigits,y
    105  f529		       29 f0		      and	#$f0
    106  f52b		       85 98		      sta	ScoreGfx+1
    107  f52d		       a4 94		      ldy	ScoreDigitOnes+1
    108  f52f		       b9 62 f5 	      lda	ScoreDigits,y
    109  f532		       29 0f		      and	#$0f
    110  f534		       05 98		      ora	ScoreGfx+1
    111  f536		       85 98		      sta	ScoreGfx+1
    112  f538
      0  f538					      sleep	12
      1  f538				   .CYCLES    SET	12
      2  f538
      3  f538				  -	      IF	.CYCLES < 2
      4  f538				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f538				  -	      ERR
      6  f538					      ENDIF
      7  f538
      8  f538				  -	      IF	.CYCLES & 1
      9  f538				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f538				  -	      nop	0
     11  f538				  -	      ELSE
     12  f538				  -	      bit	VSYNC
     13  f538				  -	      ENDIF
     14  f538				  -.CYCLES    SET	.CYCLES - 3
     15  f538					      ENDIF
     16  f538
     17  f538					      REPEAT	.CYCLES / 2
     18  f538		       ea		      nop
     17  f538					      REPEND
     18  f539		       ea		      nop
     17  f539					      REPEND
     18  f53a		       ea		      nop
     17  f53a					      REPEND
     18  f53b		       ea		      nop
     17  f53b					      REPEND
     18  f53c		       ea		      nop
     17  f53c					      REPEND
     18  f53d		       ea		      nop
     19  f53e					      REPEND
    114  f53e		       85 0e		      sta	PF1
    115  f540
    116  f540		       a4 97		      ldy	ScoreGfx
    117  f542		       85 02		      sta	WSYNC
    118  f544
    119  f544		       84 0e		      sty	PF1
    120  f546
    121  f546		       e6 93		      inc	ScoreDigitOnes
    122  f548		       e6 94		      inc	ScoreDigitOnes+1
    123  f54a		       e6 95		      inc	ScoreDigitTens
    124  f54c		       e6 96		      inc	ScoreDigitTens+1
    125  f54e
      0  f54e					      sleep	12
      1  f54e				   .CYCLES    SET	12
      2  f54e
      3  f54e				  -	      IF	.CYCLES < 2
      4  f54e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f54e				  -	      ERR
      6  f54e					      ENDIF
      7  f54e
      8  f54e				  -	      IF	.CYCLES & 1
      9  f54e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f54e				  -	      nop	0
     11  f54e				  -	      ELSE
     12  f54e				  -	      bit	VSYNC
     13  f54e				  -	      ENDIF
     14  f54e				  -.CYCLES    SET	.CYCLES - 3
     15  f54e					      ENDIF
     16  f54e
     17  f54e					      REPEAT	.CYCLES / 2
     18  f54e		       ea		      nop
     17  f54e					      REPEND
     18  f54f		       ea		      nop
     17  f54f					      REPEND
     18  f550		       ea		      nop
     17  f550					      REPEND
     18  f551		       ea		      nop
     17  f551					      REPEND
     18  f552		       ea		      nop
     17  f552					      REPEND
     18  f553		       ea		      nop
     19  f554					      REPEND
    127  f554		       ca		      dex
    128  f555		       85 0e		      sta	PF1
    129  f557
    130  f557		       d0 b3		      bne	.score_draw_line
    131  f559		       85 02		      sta	WSYNC
    132  f55b
    133  f55b							; Clear
    134  f55b		       a9 00		      lda	#0
    135  f55d		       85 0e		      sta	PF1
    136  f55f
    137  f55f		       85 02		      sta	WSYNC
    138  f561
    139  f561		       60		      rts
    140  f562
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f562					      include	"objects/score_digits.asm"
      1  f562				   ScoreDigits
      2  f562
      3  f562		       77		      .BYTE.b	%01110111
      4  f563		       55		      .BYTE.b	%01010101
      5  f564		       55		      .BYTE.b	%01010101
      6  f565		       55		      .BYTE.b	%01010101
      7  f566		       77		      .BYTE.b	%01110111
      8  f567
      9  f567		       11		      .BYTE.b	%00010001
     10  f568		       11		      .BYTE.b	%00010001
     11  f569		       11		      .BYTE.b	%00010001
     12  f56a		       11		      .BYTE.b	%00010001
     13  f56b		       11		      .BYTE.b	%00010001
     14  f56c
     15  f56c		       77		      .BYTE.b	%01110111
     16  f56d		       11		      .BYTE.b	%00010001
     17  f56e		       77		      .BYTE.b	%01110111
     18  f56f		       44		      .BYTE.b	%01000100
     19  f570		       77		      .BYTE.b	%01110111
     20  f571
     21  f571		       77		      .BYTE.b	%01110111
     22  f572		       11		      .BYTE.b	%00010001
     23  f573		       33		      .BYTE.b	%00110011
     24  f574		       11		      .BYTE.b	%00010001
     25  f575		       77		      .BYTE.b	%01110111
     26  f576
     27  f576		       55		      .BYTE.b	%01010101
     28  f577		       55		      .BYTE.b	%01010101
     29  f578		       77		      .BYTE.b	%01110111
     30  f579		       11		      .BYTE.b	%00010001
     31  f57a		       11		      .BYTE.b	%00010001
     32  f57b
     33  f57b		       77		      .BYTE.b	%01110111
     34  f57c		       44		      .BYTE.b	%01000100
     35  f57d		       77		      .BYTE.b	%01110111
     36  f57e		       11		      .BYTE.b	%00010001
     37  f57f		       77		      .BYTE.b	%01110111
     38  f580
     39  f580		       77		      .BYTE.b	%01110111
     40  f581		       44		      .BYTE.b	%01000100
     41  f582		       77		      .BYTE.b	%01110111
     42  f583		       55		      .BYTE.b	%01010101
     43  f584		       77		      .BYTE.b	%01110111
     44  f585
     45  f585		       77		      .BYTE.b	%01110111
     46  f586		       11		      .BYTE.b	%00010001
     47  f587		       22		      .BYTE.b	%00100010
     48  f588		       22		      .BYTE.b	%00100010
     49  f589		       22		      .BYTE.b	%00100010
     50  f58a
     51  f58a		       77		      .BYTE.b	%01110111
     52  f58b		       55		      .BYTE.b	%01010101
     53  f58c		       77		      .BYTE.b	%01110111
     54  f58d		       55		      .BYTE.b	%01010101
     55  f58e		       77		      .BYTE.b	%01110111
     56  f58f
     57  f58f		       77		      .BYTE.b	%01110111
     58  f590		       55		      .BYTE.b	%01010101
     59  f591		       77		      .BYTE.b	%01110111
     60  f592		       11		      .BYTE.b	%00010001
     61  f593		       11		      .BYTE.b	%00010001
     62  f594
     63  f594		       77		      .BYTE.b	%01110111
     64  f595		       55		      .BYTE.b	%01010101
     65  f596		       77		      .BYTE.b	%01110111
     66  f597		       55		      .BYTE.b	%01010101
     67  f598		       55		      .BYTE.b	%01010101
     68  f599
     69  f599		       66		      .BYTE.b	%01100110
     70  f59a		       55		      .BYTE.b	%01010101
     71  f59b		       66		      .BYTE.b	%01100110
     72  f59c		       55		      .BYTE.b	%01010101
     73  f59d		       66		      .BYTE.b	%01100110
     74  f59e
     75  f59e		       77		      .BYTE.b	%01110111
     76  f59f		       44		      .BYTE.b	%01000100
     77  f5a0		       44		      .BYTE.b	%01000100
     78  f5a1		       44		      .BYTE.b	%01000100
     79  f5a2		       77		      .BYTE.b	%01110111
     80  f5a3
     81  f5a3		       66		      .BYTE.b	%01100110
     82  f5a4		       55		      .BYTE.b	%01010101
     83  f5a5		       55		      .BYTE.b	%01010101
     84  f5a6		       55		      .BYTE.b	%01010101
     85  f5a7		       66		      .BYTE.b	%01100110
     86  f5a8
     87  f5a8		       77		      .BYTE.b	%01110111
     88  f5a9		       44		      .BYTE.b	%01000100
     89  f5aa		       66		      .BYTE.b	%01100110
     90  f5ab		       44		      .BYTE.b	%01000100
     91  f5ac		       77		      .BYTE.b	%01110111
     92  f5ad
     93  f5ad		       77		      .BYTE.b	%01110111
     94  f5ae		       44		      .BYTE.b	%01000100
     95  f5af		       66		      .BYTE.b	%01100110
     96  f5b0		       44		      .BYTE.b	%01000100
     97  f5b1		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f5b2					      include	"objects/web.asm"
      1  f5b2							;================
      2  f5b2							; Web (Playfield)
      3  f5b2							;================
      4  f5b2
      5  f5b2							; Constants
      6  f5b2
      7  f5b2		       00 00	   WEB_BG_COLOR =	#$00
      8  f5b2		       00 06	   WEB_FG_COLOR =	#$06
      9  f5b2
     10  f5b2		       00 1e	   WEB_SIZE   =	30
     11  f5b2		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f5b2		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f5b2
     14  f5b2							; Scanline Draw
     15  f5b2
     16  f5b2				   WebDrawStart
     17  f5b2
     18  f5b2							; Load Colors
     19  f5b2		       a9 00		      lda	#WEB_BG_COLOR
     20  f5b4		       85 09		      sta	COLUBK
     21  f5b6		       a9 06		      lda	#WEB_FG_COLOR
     22  f5b8		       85 08		      sta	COLUPF
     23  f5ba
     24  f5ba							; Mirror playfield and use standard playfield color
     25  f5ba		       a5 80		      lda	CtrlPf
     26  f5bc		       29 fc		      and	#%11111100
     27  f5be		       09 01		      ora	#%00000001
     28  f5c0		       85 80		      sta	CtrlPf
     29  f5c2		       85 0a		      sta	CTRLPF
     30  f5c4
     31  f5c4							; Initialize image index
     32  f5c4		       a9 00		      lda	#0
     33  f5c6		       85 99		      sta	WebIndex
     34  f5c8		       a9 01		      lda	#1
     35  f5ca		       85 9a		      sta	WebDir
     36  f5cc
     37  f5cc		       60		      rts
     38  f5cd
     39  f5cd				   WebDraw
     40  f5cd
     41  f5cd		       a4 99		      ldy	WebIndex
     42  f5cf
     43  f5cf							; Draw Image
     44  f5cf		       b9 f8 f5 	      lda	WebImagePF0,y
     45  f5d2		       85 0d		      sta	PF0
     46  f5d4		       b9 07 f6 	      lda	WebImagePF1,y
     47  f5d7		       85 0e		      sta	PF1
     48  f5d9		       b9 16 f6 	      lda	WebImagePF2,y
     49  f5dc		       85 0f		      sta	PF2
     50  f5de
     51  f5de							; Increment image index
     52  f5de		       18		      clc
     53  f5df		       98		      tya
     54  f5e0		       65 9a		      adc	WebDir
     55  f5e2		       85 99		      sta	WebIndex
     56  f5e4
     57  f5e4		       c9 0f		      cmp	#WEB_SIZE/2
     58  f5e6		       d0 06		      bne	.web_draw_return
     59  f5e8
     60  f5e8		       a9 ff		      lda	#-1
     61  f5ea		       85 9a		      sta	WebDir
     62  f5ec
     63  f5ec		       c6 99		      dec	WebIndex
     64  f5ee
     65  f5ee				   .web_draw_return
     66  f5ee		       60		      rts
     67  f5ef
     68  f5ef				   WebClean
     69  f5ef
     70  f5ef							; Clear out playfield
     71  f5ef		       a9 00		      lda	#0
     72  f5f1		       85 0d		      sta	PF0
     73  f5f3		       85 0e		      sta	PF1
     74  f5f5		       85 0f		      sta	PF2
     75  f5f7
     76  f5f7		       60		      rts
     77  f5f8
     78  f5f8							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f5f8					      include	"objects/web_image.asm"
      1  f5f8				   WebImagePF0
      2  f5f8		       00		      .BYTE.b	%00000000
      3  f5f9		       00		      .BYTE.b	%00000000
      4  f5fa		       00		      .BYTE.b	%00000000
      5  f5fb		       00		      .BYTE.b	%00000000
      6  f5fc		       00		      .BYTE.b	%00000000
      7  f5fd		       00		      .BYTE.b	%00000000
      8  f5fe		       00		      .BYTE.b	%00000000
      9  f5ff		       00		      .BYTE.b	%00000000
     10  f600		       00		      .BYTE.b	%00000000
     11  f601		       30		      .BYTE.b	%00110000
     12  f602		       e0		      .BYTE.b	%11100000
     13  f603		       20		      .BYTE.b	%00100000
     14  f604		       40		      .BYTE.b	%01000000
     15  f605		       40		      .BYTE.b	%01000000
     16  f606		       80		      .BYTE.b	%10000000
     17  f607
     18  f607				   WebImagePF1
     19  f607		       08		      .BYTE.b	%00001000
     20  f608		       06		      .BYTE.b	%00000110
     21  f609		       01		      .BYTE.b	%00000001
     22  f60a		       00		      .BYTE.b	%00000000
     23  f60b		       00		      .BYTE.b	%00000000
     24  f60c		       01		      .BYTE.b	%00000001
     25  f60d		       01		      .BYTE.b	%00000001
     26  f60e		       02		      .BYTE.b	%00000010
     27  f60f		       0c		      .BYTE.b	%00001100
     28  f610		       30		      .BYTE.b	%00110000
     29  f611		       c0		      .BYTE.b	%11000000
     30  f612		       38		      .BYTE.b	%00111000
     31  f613		       07		      .BYTE.b	%00000111
     32  f614		       00		      .BYTE.b	%00000000
     33  f615		       00		      .BYTE.b	%00000000
     34  f616
     35  f616				   WebImagePF2
     36  f616		       20		      .BYTE.b	%00100000
     37  f617		       18		      .BYTE.b	%00011000
     38  f618		       04		      .BYTE.b	%00000100
     39  f619		       03		      .BYTE.b	%00000011
     40  f61a		       3f		      .BYTE.b	%00111111
     41  f61b		       c2		      .BYTE.b	%11000010
     42  f61c		       04		      .BYTE.b	%00000100
     43  f61d		       08		      .BYTE.b	%00001000
     44  f61e		       08		      .BYTE.b	%00001000
     45  f61f		       10		      .BYTE.b	%00010000
     46  f620		       20		      .BYTE.b	%00100000
     47  f621		       20		      .BYTE.b	%00100000
     48  f622		       41		      .BYTE.b	%01000001
     49  f623		       8e		      .BYTE.b	%10001110
     50  f624		       f0		      .BYTE.b	%11110000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f625					      include	"objects/spider.asm"
      1  f625							;=================
      2  f625							; Spider (player0)
      3  f625							;=================
      4  f625
      5  f625							; Constants
      6  f625
      7  f625		       00 56	   SPIDER_COLOR =	#$56
      8  f625		       00 10	   SPIDER_SIZE =	16
      9  f625		       00 08	   SPIDER_SPRITE_SIZE =	8
     10  f625		       00 02	   SPIDER_VEL_X =	2
     11  f625		       00 02	   SPIDER_VEL_Y =	2
     12  f625
     13  f625		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f625
     15  f625							; Initialization
     16  f625
     17  f625				   SpiderInit
     18  f625
     19  f625							; Initialize Position in center of screen
     20  f625		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f627		       85 9d		      sta	SpiderPos
     22  f629		       a9 48		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f62b		       85 9e		      sta	SpiderPos+1
     24  f62d
     25  f62d							; Setup Sprite
      0  f62d					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f62d				   .POINTER   SET	SpiderPtr
      2  f62d				   .ADDRESS   SET	SpiderSprite
      3  f62d
      4  f62d		       a9 a3		      LDA	#<.ADDRESS
      5  f62f		       85 9b		      STA	.POINTER
      6  f631		       a9 f7		      LDA	#>.ADDRESS
      7  f633		       85 9c		      STA	.POINTER+1
      8  f635
     27  f635
     28  f635							;    lda #SPIDER_COLOR
     29  f635							;    sta SpiderColor
     30  f635
     31  f635		       60		      rts
     32  f636
     33  f636							; Frame Update
     34  f636
     35  f636				   SpiderUpdate
     36  f636		       20 3d f6 	      jsr	SpiderControl
     37  f639		       20 23 f7 	      jsr	SpiderCollision
     38  f63c		       60		      rts
     39  f63d
     40  f63d				   SpiderControl
     41  f63d
     42  f63d							; Control Position
     43  f63d		       a6 9d		      ldx	SpiderPos
     44  f63f		       a4 9e		      ldy	SpiderPos+1
     45  f641		       ad 80 02 	      lda	SWCHA
     46  f644
     47  f644				   .spider_control_check_right
     48  f644		       30 02		      bmi	.spider_control_check_left
     49  f646
     50  f646					      REPEAT	#SPIDER_VEL_X
     51  f646		       e8		      inx
     50  f646					      REPEND
     51  f647		       e8		      inx
     52  f648					      REPEND
     53  f648
     54  f648				   .spider_control_check_left
     55  f648		       2a		      rol
     56  f649		       30 02		      bmi	.spider_control_check_down
     57  f64b
     58  f64b					      REPEAT	#SPIDER_VEL_X
     59  f64b		       ca		      dex
     58  f64b					      REPEND
     59  f64c		       ca		      dex
     60  f64d					      REPEND
     61  f64d
     62  f64d				   .spider_control_check_down
     63  f64d		       2a		      rol
     64  f64e		       30 02		      bmi	.spider_control_check_up
     65  f650
     66  f650					      REPEAT	#SPIDER_VEL_Y
     67  f650		       88		      dey
     66  f650					      REPEND
     67  f651		       88		      dey
     68  f652					      REPEND
     69  f652
     70  f652				   .spider_control_check_up
     71  f652		       2a		      rol
     72  f653		       30 02		      bmi	.spider_control_sprite
     73  f655
     74  f655					      REPEAT	#SPIDER_VEL_Y
     75  f655		       c8		      iny
     74  f655					      REPEND
     75  f656		       c8		      iny
     76  f657					      REPEND
     77  f657
     78  f657				   .spider_control_sprite
     79  f657							; Control Sprite
     80  f657		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f659
     82  f659				   .spider_control_sprite_x
     83  f659		       e4 9d		      cpx	SpiderPos
     84  f65b		       90 04		      bcc	.spider_control_sprite_left
     85  f65d		       f0 09		      beq	.spider_control_sprite_y
     86  f65f		       b0 05		      bcs	.spider_control_sprite_right
     87  f661
     88  f661				   .spider_control_sprite_left
     89  f661		       09 80		      ora	#%10000000
     90  f663		       4c 68 f6 	      jmp	.spider_control_sprite_y
     91  f666
     92  f666				   .spider_control_sprite_right
     93  f666		       09 40		      ora	#%01000000
     94  f668
     95  f668				   .spider_control_sprite_y
     96  f668		       c4 9e		      cpy	SpiderPos+1
     97  f66a		       90 04		      bcc	.spider_control_sprite_down
     98  f66c		       f0 09		      beq	.spider_control_sprite_store
     99  f66e		       b0 05		      bcs	.spider_control_sprite_up
    100  f670
    101  f670				   .spider_control_sprite_down
    102  f670		       09 10		      ora	#%00010000
    103  f672		       4c 77 f6 	      jmp	.spider_control_sprite_store
    104  f675
    105  f675				   .spider_control_sprite_up
    106  f675		       09 20		      ora	#%00100000
    107  f677
    108  f677				   .spider_control_sprite_store
    109  f677		       c9 00		      cmp	#%00000000
    110  f679		       f0 02		      beq	.spider_control_boundary
    111  f67b		       85 9f		      sta	SpiderCtrl
    112  f67d
    113  f67d				   .spider_control_boundary
    114  f67d							; Check Playfield Boundaries
    115  f67d
    116  f67d				   .spider_control_boundary_left
    117  f67d		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f67f		       b0 05		      bcs	.spider_control_boundary_right
    119  f681		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f683		       4c 8c f6 	      jmp	.spider_control_boundary_top
    121  f686
    122  f686				   .spider_control_boundary_right
    123  f686		       e0 7e		      cpx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    124  f688		       90 02		      bcc	.spider_control_boundary_top
    125  f68a		       a2 7e		      ldx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    126  f68c
    127  f68c				   .spider_control_boundary_top
    128  f68c		       c0 03		      cpy	#SPIDER_VEL_X+1
    129  f68e		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f690		       a0 03		      ldy	#SPIDER_VEL_X+1
    131  f692		       4c 9b f6 	      jmp	.spider_control_store
    132  f695
    133  f695				   .spider_control_boundary_bottom
    134  f695		       c0 b1		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    135  f697		       90 02		      bcc	.spider_control_store
    136  f699		       a0 b1		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    137  f69b
    138  f69b				   .spider_control_store
    139  f69b							; Store new position
    140  f69b		       86 9d		      stx	SpiderPos
    141  f69d		       84 9e		      sty	SpiderPos+1
    142  f69f
    143  f69f							; TODO: Optimize this somehow?
    144  f69f				   .spider_control_sprite_assign
    145  f69f							; Skip if no change
    146  f69f		       c9 00		      cmp	#%00000000
    147  f6a1		       f0 7f		      beq	.spider_control_return
    148  f6a3
    149  f6a3		       a2 00		      ldx	#%00000000	; For reflection
    150  f6a5
    151  f6a5				   .spider_control_sprite_assign_left
    152  f6a5		       c9 80		      cmp	#%10000000
    153  f6a7		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f6a9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f6a9				   .POINTER   SET	SpiderPtr
      2  f6a9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f6a9
      4  f6a9		       a9 b3		      LDA	#<.ADDRESS
      5  f6ab		       85 9b		      STA	.POINTER
      6  f6ad		       a9 f7		      LDA	#>.ADDRESS
      7  f6af		       85 9c		      STA	.POINTER+1
      8  f6b1
    155  f6b1		       a2 08		      ldx	#%00001000
    156  f6b3		       4c 20 f7 	      jmp	.spider_control_reflect
    157  f6b6
    158  f6b6				   .spider_control_sprite_assign_right
    159  f6b6		       c9 40		      cmp	#%01000000
    160  f6b8		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f6ba					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f6ba				   .POINTER   SET	SpiderPtr
      2  f6ba				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f6ba
      4  f6ba		       a9 b3		      LDA	#<.ADDRESS
      5  f6bc		       85 9b		      STA	.POINTER
      6  f6be		       a9 f7		      LDA	#>.ADDRESS
      7  f6c0		       85 9c		      STA	.POINTER+1
      8  f6c2
    162  f6c2		       4c 20 f7 	      jmp	.spider_control_reflect
    163  f6c5
    164  f6c5				   .spider_control_sprite_assign_top
    165  f6c5		       c9 20		      cmp	#%00100000
    166  f6c7		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f6c9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f6c9				   .POINTER   SET	SpiderPtr
      2  f6c9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f6c9
      4  f6c9		       a9 a3		      LDA	#<.ADDRESS
      5  f6cb		       85 9b		      STA	.POINTER
      6  f6cd		       a9 f7		      LDA	#>.ADDRESS
      7  f6cf		       85 9c		      STA	.POINTER+1
      8  f6d1
    168  f6d1		       4c 20 f7 	      jmp	.spider_control_reflect
    169  f6d4
    170  f6d4				   .spider_control_sprite_assign_bottom
    171  f6d4		       c9 10		      cmp	#%00010000
    172  f6d6		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f6d8					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f6d8				   .POINTER   SET	SpiderPtr
      2  f6d8				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f6d8
      4  f6d8		       a9 c3		      LDA	#<.ADDRESS
      5  f6da		       85 9b		      STA	.POINTER
      6  f6dc		       a9 f7		      LDA	#>.ADDRESS
      7  f6de		       85 9c		      STA	.POINTER+1
      8  f6e0
    174  f6e0		       4c 20 f7 	      jmp	.spider_control_reflect
    175  f6e3
    176  f6e3				   .spider_control_sprite_assign_top_right
    177  f6e3		       c9 60		      cmp	#%01100000
    178  f6e5		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f6e7					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f6e7				   .POINTER   SET	SpiderPtr
      2  f6e7				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f6e7
      4  f6e7		       a9 ab		      LDA	#<.ADDRESS
      5  f6e9		       85 9b		      STA	.POINTER
      6  f6eb		       a9 f7		      LDA	#>.ADDRESS
      7  f6ed		       85 9c		      STA	.POINTER+1
      8  f6ef
    180  f6ef		       4c 20 f7 	      jmp	.spider_control_reflect
    181  f6f2
    182  f6f2				   .spider_control_sprite_assign_bottom_right
    183  f6f2		       c9 50		      cmp	#%01010000
    184  f6f4		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f6f6					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f6f6				   .POINTER   SET	SpiderPtr
      2  f6f6				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f6f6
      4  f6f6		       a9 bb		      LDA	#<.ADDRESS
      5  f6f8		       85 9b		      STA	.POINTER
      6  f6fa		       a9 f7		      LDA	#>.ADDRESS
      7  f6fc		       85 9c		      STA	.POINTER+1
      8  f6fe
    186  f6fe		       4c 20 f7 	      jmp	.spider_control_reflect
    187  f701
    188  f701				   .spider_control_sprite_assign_bottom_left
    189  f701		       c9 90		      cmp	#%10010000
    190  f703		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f705					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f705				   .POINTER   SET	SpiderPtr
      2  f705				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f705
      4  f705		       a9 bb		      LDA	#<.ADDRESS
      5  f707		       85 9b		      STA	.POINTER
      6  f709		       a9 f7		      LDA	#>.ADDRESS
      7  f70b		       85 9c		      STA	.POINTER+1
      8  f70d
    192  f70d		       a2 08		      ldx	#%00001000
    193  f70f		       4c 20 f7 	      jmp	.spider_control_reflect
    194  f712
    195  f712				   .spider_control_sprite_assign_top_left
    196  f712		       c9 a0		      cmp	#%10100000
    197  f714		       d0 0a		      bne	.spider_control_reflect
      0  f716					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f716				   .POINTER   SET	SpiderPtr
      2  f716				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f716
      4  f716		       a9 ab		      LDA	#<.ADDRESS
      5  f718		       85 9b		      STA	.POINTER
      6  f71a		       a9 f7		      LDA	#>.ADDRESS
      7  f71c		       85 9c		      STA	.POINTER+1
      8  f71e
    199  f71e		       a2 08		      ldx	#%00001000
    200  f720
    201  f720				   .spider_control_reflect
    202  f720		       86 0b		      stx	REFP0
    203  f722
    204  f722				   .spider_control_return
    205  f722		       60		      rts
    206  f723
    207  f723				   SpiderCollision
    208  f723		       a9 56		      lda	#SPIDER_COLOR
    209  f725
    210  f725				   .spider_collision_m0
    211  f725							; Check stun status
    212  f725		       a6 ae		      ldx	BugStunned
    213  f727		       e0 00		      cpx	#0
    214  f729		       d0 04		      bne	.spider_collision_m1
    215  f72b
    216  f72b							; Collision for M0 (V set)
    217  f72b		       24 00		      bit	CXM0P
    218  f72d		       70 0d		      bvs	.spider_collision_active
    219  f72f
    220  f72f				   .spider_collision_m1
    221  f72f							; Check stun status
    222  f72f		       a6 af		      ldx	BugStunned+1
    223  f731		       e0 00		      cpx	#0
    224  f733		       d0 09		      bne	.spider_collision_return
    225  f735
    226  f735							; Collision for M1 (N set)
    227  f735		       24 01		      bit	CXM1P
    228  f737		       30 03		      bmi	.spider_collision_active
    229  f739
    230  f739		       4c 3e f7 	      jmp	.spider_collision_return
    231  f73c
    232  f73c				   .spider_collision_active
    233  f73c		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f73e
    235  f73e				   .spider_collision_return
    236  f73e		       85 a0		      sta	SpiderColor
    237  f740		       60		      rts
    238  f741
    239  f741				   SpiderPosition
    240  f741
    241  f741							; Set Position
    242  f741		       a2 00		      ldx	#0	; Object (player0)
    243  f743		       a5 9d		      lda	SpiderPos	; X Position
    244  f745		       20 00 f0 	      jsr	PosObject
    245  f748
    246  f748		       60		      rts
    247  f749
    248  f749							; Scanline Draw
    249  f749
    250  f749				   SpiderDrawStart
    251  f749
    252  f749							; Set player 0 to be double size
    253  f749							; and missile 0 to be 4 clock size
    254  f749		       a5 81		      lda	NuSiz0
    255  f74b		       09 07		      ora	#%00000111
    256  f74d		       85 81		      sta	NuSiz0
    257  f74f		       85 04		      sta	NUSIZ0
    258  f751
    259  f751							; Set sprite color
    260  f751		       a5 a0		      lda	SpiderColor
    261  f753		       85 06		      sta	COLUP0
    262  f755
    263  f755							; Determine if we need to use vertical delay (odd line)
    264  f755		       a5 9e		      lda	SpiderPos+1	; Y Position
    265  f757		       4a		      lsr
    266  f758		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f75a
    268  f75a		       a0 01		      ldy	#1
    269  f75c		       4c 61 f7 	      jmp	.spider_draw_start_set_delay
    270  f75f
    271  f75f				   .spider_draw_start_nodelay
    272  f75f		       a0 00		      ldy	#0
    273  f761
    274  f761				   .spider_draw_start_set_delay
    275  f761		       84 25		      sty	VDELP0
    276  f763
    277  f763				   .spider_draw_start_pos
    278  f763							; Calculate starting position
    279  f763		       18		      clc
    280  f764		       69 10		      adc	#SPIDER_SIZE
    281  f766		       85 a2		      sta	SpiderDrawPos
    282  f768
    283  f768							; Initialize sprite index
    284  f768		       a9 00		      lda	#0
    285  f76a		       85 a1		      sta	SpiderIndex
    286  f76c
    287  f76c		       60		      rts
    288  f76d
    289  f76d				   SpiderDraw
    290  f76d
    291  f76d		       a4 a1		      ldy	SpiderIndex
    292  f76f		       c0 10		      cpy	#(SPIDER_SPRITE_SIZE*2)
    293  f771		       f0 1f		      beq	.spider_draw_blank	; At end of sprite
    294  f773		       b0 28		      bcs	.spider_draw_return	; Completed drawing sprite
    295  f775		       c0 00		      cpy	#0
    296  f777		       d0 06		      bne	.spider_draw_line
    297  f779
    298  f779							; Use half scanline
    299  f779		       a5 84		      lda	Temp+1
    300  f77b
    301  f77b		       e5 a2		      sbc	SpiderDrawPos
    302  f77d		       10 1e		      bpl	.spider_draw_return	; Not yet to draw sprite
    303  f77f
    304  f77f				   .spider_draw_line
    305  f77f		       98		      tya
    306  f780		       4a		      lsr
    307  f781		       b0 09		      bcs	.spider_draw_skip
    308  f783		       a8		      tay
    309  f784
    310  f784		       b1 9b		      lda	(SpiderPtr),y
    311  f786		       85 1b		      sta	GRP0
    312  f788
    313  f788							; Using this for now until we have another sprite
    314  f788		       a9 00		      lda	#0
    315  f78a		       85 1c		      sta	GRP1
    316  f78c
    317  f78c				   .spider_draw_skip
    318  f78c		       a4 a1		      ldy	SpiderIndex
    319  f78e		       c8		      iny
    320  f78f		       84 a1		      sty	SpiderIndex
    321  f791		       60		      rts		; Early return
    322  f792
    323  f792				   .spider_draw_blank
    324  f792		       a9 00		      lda	#0
    325  f794		       85 1b		      sta	GRP0
    326  f796
    327  f796							; Using this for now until we have another sprite
    328  f796		       a9 00		      lda	#0
    329  f798		       85 1c		      sta	GRP1
    330  f79a
    331  f79a							; Push index to be one above
    332  f79a		       c8		      iny
    333  f79b		       84 a1		      sty	SpiderIndex
    334  f79d
    335  f79d				   .spider_draw_return
    336  f79d		       60		      rts
    337  f79e
    338  f79e				   SpiderClean
    339  f79e
    340  f79e							; Clear out Player0 sprite
    341  f79e		       a9 00		      lda	#0
    342  f7a0		       85 1b		      sta	GRP0
    343  f7a2
    344  f7a2		       60		      rts
    345  f7a3
    346  f7a3							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f7a3					      include	"objects/spider_sprite.asm"
      1  f7a3				   SpiderSprite
      2  f7a3
      3  f7a3		       99		      .BYTE.b	%10011001
      4  f7a4		       bd		      .BYTE.b	%10111101
      5  f7a5		       99		      .BYTE.b	%10011001
      6  f7a6		       7e		      .BYTE.b	%01111110
      7  f7a7		       3c		      .BYTE.b	%00111100
      8  f7a8		       7e		      .BYTE.b	%01111110
      9  f7a9		       bd		      .BYTE.b	%10111101
     10  f7aa		       99		      .BYTE.b	%10011001
     11  f7ab
     12  f7ab		       0b		      .BYTE.b	%00001011
     13  f7ac		       13		      .BYTE.b	%00010011
     14  f7ad		       1c		      .BYTE.b	%00011100
     15  f7ae		       2d		      .BYTE.b	%00101101
     16  f7af		       f6		      .BYTE.b	%11110110
     17  f7b0		       b8		      .BYTE.b	%10111000
     18  f7b1		       10		      .BYTE.b	%00010000
     19  f7b2		       30		      .BYTE.b	%00110000
     20  f7b3
     21  f7b3		       c7		      .BYTE.b	%11000111
     22  f7b4		       28		      .BYTE.b	%00101000
     23  f7b5		       7a		      .BYTE.b	%01111010
     24  f7b6		       ff		      .BYTE.b	%11111111
     25  f7b7		       ff		      .BYTE.b	%11111111
     26  f7b8		       7a		      .BYTE.b	%01111010
     27  f7b9		       28		      .BYTE.b	%00101000
     28  f7ba		       c7		      .BYTE.b	%11000111
     29  f7bb
     30  f7bb		       30		      .BYTE.b	%00110000
     31  f7bc		       10		      .BYTE.b	%00010000
     32  f7bd		       b8		      .BYTE.b	%10111000
     33  f7be		       f6		      .BYTE.b	%11110110
     34  f7bf		       2d		      .BYTE.b	%00101101
     35  f7c0		       1c		      .BYTE.b	%00011100
     36  f7c1		       13		      .BYTE.b	%00010011
     37  f7c2		       0b		      .BYTE.b	%00001011
     38  f7c3
     39  f7c3		       99		      .BYTE.b	%10011001
     40  f7c4		       bd		      .BYTE.b	%10111101
     41  f7c5		       7e		      .BYTE.b	%01111110
     42  f7c6		       3c		      .BYTE.b	%00111100
     43  f7c7		       7e		      .BYTE.b	%01111110
     44  f7c8		       99		      .BYTE.b	%10011001
     45  f7c9		       bd		      .BYTE.b	%10111101
     46  f7ca		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f7cb					      include	"objects/line.asm"
      1  f7cb							;================
      2  f7cb							; Line (ball)
      3  f7cb							;================
      4  f7cb
      5  f7cb							; Constants
      6  f7cb
      7  f7cb		       00 04	   LINE_SIZE  =	4
      8  f7cb		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f7cb		       00 04	   LINE_VEL_X =	4
     10  f7cb		       00 04	   LINE_VEL_Y =	4
     11  f7cb
     12  f7cb		       00 08	   LINE_AUDIO_C =	8
     13  f7cb		       00 01	   LINE_AUDIO_F =	1
     14  f7cb		       00 04	   LINE_AUDIO_V =	4
     15  f7cb
     16  f7cb		       00 08	   LINE_SAMPLE_LEN =	8
     17  f7cb		       00 03	   LINE_SAMPLE_C =	3
     18  f7cb		       00 01	   LINE_SAMPLE_F =	1
     19  f7cb		       00 04	   LINE_SAMPLE_V =	4
     20  f7cb
     21  f7cb							; Initialization
     22  f7cb
     23  f7cb				   LineInit
     24  f7cb
     25  f7cb							; Initial Line Control
     26  f7cb		       a9 00		      lda	#0
     27  f7cd		       85 a5		      sta	LineEnabled
     28  f7cf		       85 a6		      sta	LinePos+0
     29  f7d1		       85 a7		      sta	LinePos+1
     30  f7d3		       85 a8		      sta	LineVelocity+0
     31  f7d5		       85 a9		      sta	LineVelocity+1
     32  f7d7		       85 aa		      sta	LineStartPos+0
     33  f7d9		       85 ab		      sta	LineStartPos+1
     34  f7db		       85 ac		      sta	LineDrawPos+0
     35  f7dd		       85 ad		      sta	LineDrawPos+1
     36  f7df
     37  f7df		       60		      rts
     38  f7e0
     39  f7e0							; Frame Update
     40  f7e0
     41  f7e0				   LineUpdate
     42  f7e0		       20 ea f7 	      jsr	LineControl
     43  f7e3		       20 9c f8 	      jsr	LineObject
     44  f7e6		       20 e3 f8 	      jsr	LineCollision
     45  f7e9		       60		      rts
     46  f7ea
     47  f7ea				   LineControl
     48  f7ea
     49  f7ea							; Check if Fire Button on controller 1 is pressed
     50  f7ea		       a5 0c		      lda	INPT4
     51  f7ec		       30 0a		      bmi	.line_control_skip
     52  f7ee
     53  f7ee		       24 a5		      bit	LineEnabled
     54  f7f0		       30 06		      bmi	.line_control_skip
     55  f7f2
     56  f7f2		       a5 9f		      lda	SpiderCtrl
     57  f7f4		       c9 00		      cmp	#0
     58  f7f6		       d0 03		      bne	.line_control_fire
     59  f7f8
     60  f7f8				   .line_control_skip
     61  f7f8		       4c 9b f8 	      jmp	.line_control_return
     62  f7fb
     63  f7fb				   .line_control_fire
     64  f7fb		       20 3e f9 	      jsr	LineEnable
     65  f7fe
     66  f7fe				   .line_control_x
     67  f7fe		       a5 9f		      lda	SpiderCtrl
     68  f800		       29 c0		      and	#%11000000
     69  f802		       f0 0e		      beq	.line_control_x_none
     70  f804				   .line_control_x_left
     71  f804		       c9 80		      cmp	#%10000000
     72  f806		       d0 05		      bne	.line_control_x_right
     73  f808
     74  f808		       a9 fc		      lda	#-LINE_VEL_X
     75  f80a		       4c 14 f8 	      jmp	.line_control_x_store
     76  f80d				   .line_control_x_right
     77  f80d		       a9 04		      lda	#LINE_VEL_X
     78  f80f		       4c 14 f8 	      jmp	.line_control_x_store
     79  f812				   .line_control_x_none
     80  f812		       a9 00		      lda	#0
     81  f814				   .line_control_x_store
     82  f814		       85 a8		      sta	LineVelocity
     83  f816
     84  f816				   .line_control_y
     85  f816		       a5 9f		      lda	SpiderCtrl
     86  f818		       29 30		      and	#%00110000
     87  f81a		       f0 0e		      beq	.line_control_y_none
     88  f81c				   .line_control_y_up
     89  f81c		       c9 20		      cmp	#%00100000
     90  f81e		       d0 05		      bne	.line_control_y_down
     91  f820
     92  f820		       a9 04		      lda	#LINE_VEL_Y
     93  f822		       4c 2c f8 	      jmp	.line_control_y_store
     94  f825				   .line_control_y_down
     95  f825		       a9 fc		      lda	#-LINE_VEL_Y
     96  f827		       4c 2c f8 	      jmp	.line_control_y_store
     97  f82a				   .line_control_y_none
     98  f82a		       a9 00		      lda	#0
     99  f82c				   .line_control_y_store
    100  f82c		       85 a9		      sta	LineVelocity+1
    101  f82e
    102  f82e				   .line_control_position
    103  f82e
    104  f82e		       a2 00		      ldx	#0	; offsetX
    105  f830		       a0 00		      ldy	#0	; offsetY
    106  f832
    107  f832		       a5 9f		      lda	SpiderCtrl
    108  f834		       29 f0		      and	#%11110000
    109  f836
    110  f836				   .line_control_position_left
    111  f836		       c9 80		      cmp	#%10000000
    112  f838		       d0 07		      bne	.line_control_position_right
    113  f83a
    114  f83a		       a2 04		      ldx	#LINE_SIZE
    115  f83c		       a0 10		      ldy	#SPIDER_SIZE
    116  f83e		       4c 83 f8 	      jmp	.line_control_position_store
    117  f841
    118  f841				   .line_control_position_right
    119  f841		       c9 40		      cmp	#%01000000
    120  f843		       d0 07		      bne	.line_control_position_top
    121  f845
    122  f845		       a2 20		      ldx	#SPIDER_SIZE*2
    123  f847		       a0 10		      ldy	#SPIDER_SIZE
    124  f849		       4c 83 f8 	      jmp	.line_control_position_store
    125  f84c
    126  f84c				   .line_control_position_top
    127  f84c		       c9 20		      cmp	#%00100000
    128  f84e		       d0 07		      bne	.line_control_position_bottom
    129  f850
    130  f850		       a2 10		      ldx	#SPIDER_SIZE
    131  f852		       a0 20		      ldy	#SPIDER_SIZE*2
    132  f854		       4c 83 f8 	      jmp	.line_control_position_store
    133  f857
    134  f857				   .line_control_position_bottom
    135  f857		       c9 10		      cmp	#%00010000
    136  f859		       d0 05		      bne	.line_control_position_top_right
    137  f85b
    138  f85b		       a2 10		      ldx	#SPIDER_SIZE
    139  f85d		       4c 83 f8 	      jmp	.line_control_position_store
    140  f860
    141  f860				   .line_control_position_top_right
    142  f860		       c9 60		      cmp	#%01100000
    143  f862		       d0 07		      bne	.line_control_position_bottom_right
    144  f864
    145  f864		       a2 20		      ldx	#SPIDER_SIZE*2
    146  f866		       a0 20		      ldy	#SPIDER_SIZE*2
    147  f868		       4c 83 f8 	      jmp	.line_control_position_store
    148  f86b
    149  f86b				   .line_control_position_bottom_right
    150  f86b		       c9 50		      cmp	#%01010000
    151  f86d		       d0 05		      bne	.line_control_position_bottom_left
    152  f86f
    153  f86f		       a2 20		      ldx	#SPIDER_SIZE*2
    154  f871		       4c 83 f8 	      jmp	.line_control_position_store
    155  f874
    156  f874				   .line_control_position_bottom_left
    157  f874		       c9 90		      cmp	#%10010000
    158  f876		       d0 03		      bne	.line_control_position_top_left
    159  f878
    160  f878							; No Offset
    161  f878		       4c 83 f8 	      jmp	.line_control_position_store
    162  f87b
    163  f87b				   .line_control_position_top_left
    164  f87b		       c9 a0		      cmp	#%10100000
    165  f87d		       d0 04		      bne	.line_control_position_store
    166  f87f
    167  f87f		       a2 04		      ldx	#LINE_SIZE
    168  f881		       a0 20		      ldy	#SPIDER_SIZE*2
    169  f883
    170  f883				   .line_control_position_store
    171  f883
    172  f883							; Apply offsetX to playerX
    173  f883		       a5 9d		      lda	SpiderPos
    174  f885		       86 83		      stx	Temp
    175  f887		       18		      clc
    176  f888		       65 83		      adc	Temp
    177  f88a		       aa		      tax
    178  f88b
    179  f88b							; Apply offsetY to playerY
    180  f88b		       a5 9e		      lda	SpiderPos+1
    181  f88d		       84 83		      sty	Temp
    182  f88f		       18		      clc
    183  f890		       65 83		      adc	Temp
    184  f892		       a8		      tay
    185  f893
    186  f893		       86 a6		      stx	LinePos
    187  f895		       84 a7		      sty	LinePos+1
    188  f897		       86 aa		      stx	LineStartPos
    189  f899		       84 ab		      sty	LineStartPos+1
    190  f89b
    191  f89b				   .line_control_return
    192  f89b		       60		      rts
    193  f89c
    194  f89c				   LineObject
    195  f89c
    196  f89c							; Check if line is enabled
    197  f89c		       24 a5		      bit	LineEnabled
    198  f89e		       10 42		      bpl	.line_object_return
    199  f8a0
    200  f8a0							; Load position
    201  f8a0		       a6 a6		      ldx	LinePos
    202  f8a2		       a4 a7		      ldy	LinePos+1
    203  f8a4
    204  f8a4				   .line_object_distance
    205  f8a4
    206  f8a4							; Check distance from player with absolute value differences
    207  f8a4
    208  f8a4				   .line_object_distance_x
    209  f8a4		       8a		      txa
    210  f8a5		       18		      clc
    211  f8a6		       e5 aa		      sbc	LineStartPos
    212  f8a8		       b0 04		      bcs	.line_object_distance_x_check
    213  f8aa		       49 ff		      eor	#$FF	; C flag is clear here
    214  f8ac		       69 01		      adc	#$01	; form two's complement
    215  f8ae				   .line_object_distance_x_check		; Jumps to if positive
    216  f8ae		       c9 40		      cmp	#LINE_DISTANCE
    217  f8b0		       b0 2d		      bcs	.line_object_disable
    218  f8b2
    219  f8b2				   .line_object_distance_y
    220  f8b2		       98		      tya
    221  f8b3		       18		      clc
    222  f8b4		       e5 ab		      sbc	LineStartPos+1
    223  f8b6		       b0 04		      bcs	.line_object_distance_y_check
    224  f8b8		       49 ff		      eor	#$FF	; C flag is clear here
    225  f8ba		       69 01		      adc	#$01	; form two's complement
    226  f8bc				   .line_object_distance_y_check		; Jumps to if positive
    227  f8bc		       c9 40		      cmp	#LINE_DISTANCE
    228  f8be		       b0 1f		      bcs	.line_object_disable
    229  f8c0
    230  f8c0				   .line_object_boundary
    231  f8c0				   .line_object_boundary_left
    232  f8c0		       e0 04		      cpx	#LINE_VEL_X
    233  f8c2		       90 1b		      bcc	.line_object_disable
    234  f8c4				   .line_object_boundary_right
    235  f8c4		       e0 9c		      cpx	#160-LINE_VEL_X
    236  f8c6		       b0 17		      bcs	.line_object_disable
    237  f8c8				   .line_object_boundary_bottom
    238  f8c8		       c0 04		      cpy	#LINE_VEL_Y
    239  f8ca		       90 13		      bcc	.line_object_disable
    240  f8cc				   .line_object_boundary_top
    241  f8cc		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    242  f8ce		       b0 0f		      bcs	.line_object_disable
    243  f8d0
    244  f8d0				   .line_object_velocity
    245  f8d0
    246  f8d0							; Apply Velocity
    247  f8d0		       8a		      txa
    248  f8d1		       18		      clc
    249  f8d2		       65 a8		      adc	LineVelocity
    250  f8d4		       85 a6		      sta	LinePos
    251  f8d6
    252  f8d6		       98		      tya
    253  f8d7		       18		      clc
    254  f8d8		       65 a9		      adc	LineVelocity+1
    255  f8da		       85 a7		      sta	LinePos+1
    256  f8dc
    257  f8dc		       4c e2 f8 	      jmp	.line_object_return
    258  f8df
    259  f8df				   .line_object_disable
    260  f8df		       20 4c f9 	      jsr	LineDisable
    261  f8e2
    262  f8e2				   .line_object_return
    263  f8e2		       60		      rts
    264  f8e3
    265  f8e3				   LineCollision
    266  f8e3
    267  f8e3		       a9 78		      lda	#BUG_STUN_LENGTH
    268  f8e5
    269  f8e5				   .line_collision_m0
    270  f8e5		       24 04		      bit	CXM0FB
    271  f8e7		       50 08		      bvc	.line_collision_m1
    272  f8e9
    273  f8e9							; Set stun timer
    274  f8e9		       85 ae		      sta	BugStunned+0
    275  f8eb
    276  f8eb							; Disable line
    277  f8eb		       20 4c f9 	      jsr	LineDisable
    278  f8ee		       4c fa f8 	      jmp	.line_collision_sample
    279  f8f1
    280  f8f1				   .line_collision_m1
    281  f8f1		       24 05		      bit	CXM1FB
    282  f8f3		       50 08		      bvc	.line_collision_return
    283  f8f5
    284  f8f5							; Set stun timer
    285  f8f5		       85 af		      sta	BugStunned+1
    286  f8f7
    287  f8f7							; Disable line
    288  f8f7		       20 4c f9 	      jsr	LineDisable
    289  f8fa
    290  f8fa				   .line_collision_sample
    291  f8fa		       20 70 f9 	      jsr	LineSample
    292  f8fd
    293  f8fd				   .line_collision_return
    294  f8fd		       60		      rts
    295  f8fe
    296  f8fe				   LinePosition
    297  f8fe
    298  f8fe							; Set Line Position
    299  f8fe		       a2 04		      ldx	#4	; Object (ball)
    300  f900		       a5 a6		      lda	LinePos	; X Position
    301  f902		       20 00 f0 	      jsr	PosObject
    302  f905
    303  f905		       60		      rts
    304  f906
    305  f906							; Scanline Draw
    306  f906
    307  f906				   LineDrawStart
    308  f906
    309  f906							; Set ball size to be 4 clocks (4/5 bits)
    310  f906		       a5 80		      lda	CtrlPf
    311  f908		       29 cf		      and	#%11001111
    312  f90a		       09 20		      ora	#%00100000
    313  f90c		       85 80		      sta	CtrlPf
    314  f90e		       85 0a		      sta	CTRLPF
    315  f910
    316  f910							; Determine if we need to use vertical delay (oven line)
    317  f910		       a5 a7		      lda	LinePos+1
    318  f912		       4a		      lsr
    319  f913		       90 05		      bcc	.line_draw_start_nodelay
    320  f915
    321  f915		       a0 01		      ldy	#1
    322  f917		       4c 1c f9 	      jmp	.line_draw_start_set_delay
    323  f91a
    324  f91a				   .line_draw_start_nodelay
    325  f91a		       a0 00		      ldy	#0
    326  f91c
    327  f91c				   .line_draw_start_set_delay
    328  f91c		       84 27		      sty	VDELBL
    329  f91e
    330  f91e				   .line_draw_start_pos
    331  f91e							; Calculate starting position
    332  f91e		       18		      clc
    333  f91f		       85 ac		      sta	LineDrawPos+0
    334  f921		       69 02		      adc	#LINE_SIZE/2
    335  f923		       85 ad		      sta	LineDrawPos+1
    336  f925
    337  f925		       60		      rts
    338  f926
    339  f926				   LineDraw
    340  f926
    341  f926		       a0 00		      ldy	#%00000000
    342  f928
    343  f928							; Check if visible
    344  f928		       24 a5		      bit	LineEnabled
    345  f92a		       10 0a		      bpl	.line_draw_off
    346  f92c
    347  f92c							; Load half scanline
    348  f92c							;    lda Temp+1
    349  f92c
    350  f92c							; Top
    351  f92c		       c5 ad		      cmp	LineDrawPos+1
    352  f92e		       b0 06		      bcs	.line_draw_off
    353  f930
    354  f930							; Bottom
    355  f930		       c5 ac		      cmp	LineDrawPos+0
    356  f932		       90 02		      bcc	.line_draw_off
    357  f934
    358  f934				   .line_draw_on
    359  f934		       a0 02		      ldy	#%00000010
    360  f936
    361  f936				   .line_draw_off
    362  f936		       84 1f		      sty	ENABL
    363  f938
    364  f938		       60		      rts
    365  f939
    366  f939				   LineClean
    367  f939
    368  f939							; Clear out Line
    369  f939		       a9 00		      lda	#0
    370  f93b		       85 1f		      sta	ENABL
    371  f93d
    372  f93d		       60		      rts
    373  f93e
    374  f93e				   LineEnable
    375  f93e		       a9 80		      lda	#%10000000
    376  f940		       85 a5		      sta	LineEnabled
    377  f942
    378  f942		       a5 90		      lda	SampleStep
    379  f944		       c9 00		      cmp	#0
    380  f946		       d0 03		      bne	.line_enable_return
    381  f948
    382  f948		       20 5a f9 	      jsr	LineAudioPlay
    383  f94b
    384  f94b				   .line_enable_return
    385  f94b		       60		      rts
    386  f94c
    387  f94c				   LineDisable
    388  f94c		       a9 00		      lda	#0
    389  f94e		       85 a5		      sta	LineEnabled
    390  f950
    391  f950		       a5 90		      lda	SampleStep
    392  f952		       c9 00		      cmp	#0
    393  f954		       d0 03		      bne	.line_disable_return
    394  f956
    395  f956		       20 67 f9 	      jsr	LineAudioMute
    396  f959
    397  f959				   .line_disable_return
    398  f959		       60		      rts
    399  f95a
    400  f95a				   LineAudioPlay
    401  f95a		       a9 08		      lda	#LINE_AUDIO_C
    402  f95c		       85 16		      sta	AUDC1
    403  f95e		       a9 01		      lda	#LINE_AUDIO_F
    404  f960		       85 18		      sta	AUDF1
    405  f962		       a9 04		      lda	#LINE_AUDIO_V
    406  f964		       85 1a		      sta	AUDV1
    407  f966		       60		      rts
    408  f967
    409  f967				   LineAudioMute
    410  f967		       a9 00		      lda	#0
    411  f969		       85 1a		      sta	AUDV1
    412  f96b		       85 18		      sta	AUDF1
    413  f96d		       85 16		      sta	AUDC1
    414  f96f		       60		      rts
    415  f970
    416  f970				   LineSample
    417  f970		       a9 08		      lda	#LINE_SAMPLE_LEN
    418  f972		       85 90		      sta	SampleStep
    419  f974		       a9 03		      lda	#LINE_SAMPLE_C
    420  f976		       85 16		      sta	AUDC1
    421  f978		       a9 01		      lda	#LINE_SAMPLE_F
    422  f97a		       85 18		      sta	AUDF1
    423  f97c		       a9 04		      lda	#LINE_SAMPLE_V
    424  f97e		       85 1a		      sta	AUDV1
    425  f980		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f981					      include	"objects/bug.asm"
      1  f981							;======================
      2  f981							; Bugs (missiles 0 & 1)
      3  f981							;======================
      4  f981
      5  f981							; Constants
      6  f981
      7  f981		       00 08	   BUG_SIZE   =	8
      8  f981		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f981		       00 02	   BUG_SPEED  =	2
     10  f981		       00 78	   BUG_STUN_LENGTH =	120
     11  f981		       00 04	   BUG_POINTS =	4
     12  f981
     13  f981		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f981		       00 38	   BUG_COLOR_STUN =	#$38
     15  f981
     16  f981		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f981		       00 03	   BUG_SAMPLE_C =	3
     18  f981		       00 14	   BUG_SAMPLE_F =	20
     19  f981		       00 04	   BUG_SAMPLE_V =	4
     20  f981
     21  f981		       00 01	   BUG_COL_SAMPLE_LEN =	1
     22  f981		       00 08	   BUG_COL_SAMPLE_C =	8
     23  f981		       00 08	   BUG_COL_SAMPLE_F =	8
     24  f981		       00 03	   BUG_COL_SAMPLE_V =	3
     25  f981
     26  f981							; Initialization
     27  f981
     28  f981				   BugInit
     29  f981
     30  f981							; Initialize Bugs
     31  f981		       a2 01		      ldx	#1
     32  f983
     33  f983				   .bug_init_loop
     34  f983		       20 8a f9 	      jsr	BugReset
     35  f986
     36  f986		       ca		      dex
     37  f987		       10 fa		      bpl	.bug_init_loop
     38  f989
     39  f989		       60		      rts
     40  f98a
     41  f98a				   BugReset		; x = bug (0 or 1)
     42  f98a
     43  f98a							; Set random position
     44  f98a		       20 13 f0 	      jsr	Random
     45  f98d
     46  f98d		       a5 85		      lda	Rand8
     47  f98f		       29 7f		      and	#$7f
     48  f991		       95 b0		      sta	BugPosX,x
     49  f993
     50  f993		       a5 86		      lda	Rand16
     51  f995		       29 7f		      and	#$7f
     52  f997		       95 b2		      sta	BugPosY,x
     53  f999
     54  f999							; Set as active
     55  f999		       a9 00		      lda	#0
     56  f99b		       95 ae		      sta	BugStunned,x
     57  f99d
     58  f99d							; Reset Color
     59  f99d		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     60  f99f		       95 b4		      sta	BugColor,x
     61  f9a1
     62  f9a1		       60		      rts
     63  f9a2
     64  f9a2							; Frame Update
     65  f9a2
     66  f9a2				   BugUpdate
     67  f9a2
     68  f9a2		       a2 01		      ldx	#1
     69  f9a4				   .bug_update_loop
     70  f9a4		       86 83		      stx	Temp+0
     71  f9a6
     72  f9a6		       b5 ae		      lda	BugStunned,x
     73  f9a8		       c9 00		      cmp	#0
     74  f9aa		       f0 08		      beq	.bug_update_active
     75  f9ac
     76  f9ac				   .bug_update_stunned
     77  f9ac		       d6 ae		      dec	BugStunned,x
     78  f9ae		       20 27 fa 	      jsr	BugStunCollision
     79  f9b1		       4c ba f9 	      jmp	.bug_update_next
     80  f9b4
     81  f9b4				   .bug_update_active
     82  f9b4		       20 c0 f9 	      jsr	BugMovement
     83  f9b7		       20 13 fa 	      jsr	BugCollision
     84  f9ba
     85  f9ba				   .bug_update_next
     86  f9ba		       a6 83		      ldx	Temp+0
     87  f9bc		       ca		      dex
     88  f9bd		       10 e5		      bpl	.bug_update_loop
     89  f9bf
     90  f9bf		       60		      rts
     91  f9c0
     92  f9c0				   BugMovement
     93  f9c0
     94  f9c0				   .bug_movement_random
     95  f9c0		       20 13 f0 	      jsr	Random
     96  f9c3		       29 03		      and	#%00000011
     97  f9c5		       85 84		      sta	Temp+1
     98  f9c7
     99  f9c7				   .bug_movement_load
    100  f9c7							; Load x and y values
    101  f9c7		       a6 83		      ldx	Temp+0
    102  f9c9		       b5 b0		      lda	BugPosX,x
    103  f9cb		       b4 b2		      ldy	BugPosY,x
    104  f9cd		       aa		      tax
    105  f9ce
    106  f9ce				   .bug_movement_x
    107  f9ce							; Alter X Position
    108  f9ce		       a5 84		      lda	Temp+1
    109  f9d0		       29 01		      and	#%00000001
    110  f9d2
    111  f9d2				   .bug_movement_x_left
    112  f9d2		       c9 01		      cmp	#1
    113  f9d4		       d0 05		      bne	.bug_movement_x_right
    114  f9d6					      REPEAT	#BUG_SPEED
    115  f9d6		       ca		      dex
    114  f9d6					      REPEND
    115  f9d7		       ca		      dex
    116  f9d8					      REPEND
    117  f9d8		       4c dd f9 	      jmp	.bug_movement_y
    118  f9db
    119  f9db				   .bug_movement_x_right
    120  f9db					      REPEAT	#BUG_SPEED
    121  f9db		       e8		      inx
    120  f9db					      REPEND
    121  f9dc		       e8		      inx
    122  f9dd					      REPEND
    123  f9dd
    124  f9dd				   .bug_movement_y
    125  f9dd							; Alter Y Position
    126  f9dd		       a5 84		      lda	Temp+1
    127  f9df		       29 02		      and	#%00000010
    128  f9e1		       4a		      lsr
    129  f9e2
    130  f9e2				   .bug_movement_y_up
    131  f9e2		       c9 01		      cmp	#1
    132  f9e4		       d0 05		      bne	.bug_movement_y_down
    133  f9e6					      REPEAT	#BUG_SPEED
    134  f9e6		       c8		      iny
    133  f9e6					      REPEND
    134  f9e7		       c8		      iny
    135  f9e8					      REPEND
    136  f9e8		       4c ed f9 	      jmp	.bug_movement_boundary
    137  f9eb
    138  f9eb				   .bug_movement_y_down
    139  f9eb					      REPEAT	#BUG_SPEED
    140  f9eb		       88		      dey
    139  f9eb					      REPEND
    140  f9ec		       88		      dey
    141  f9ed					      REPEND
    142  f9ed
    143  f9ed				   .bug_movement_boundary
    144  f9ed
    145  f9ed				   .bug_movement_boundary_left
    146  f9ed		       e0 08		      cpx	#BUG_BOUNDARY
    147  f9ef		       b0 05		      bcs	.bug_movement_boundary_right
    148  f9f1		       a2 08		      ldx	#BUG_BOUNDARY
    149  f9f3		       4c fc f9 	      jmp	.bug_movement_boundary_top
    150  f9f6
    151  f9f6				   .bug_movement_boundary_right
    152  f9f6		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    153  f9f8		       90 02		      bcc	.bug_movement_boundary_top
    154  f9fa		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    155  f9fc
    156  f9fc				   .bug_movement_boundary_top
    157  f9fc		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    158  f9fe		       b0 05		      bcs	.bug_movement_boundary_bottom
    159  fa00		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    160  fa02		       4c 0b fa 	      jmp	.bug_movement_store
    161  fa05
    162  fa05				   .bug_movement_boundary_bottom
    163  fa05		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    164  fa07		       90 02		      bcc	.bug_movement_store
    165  fa09		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    166  fa0b
    167  fa0b				   .bug_movement_store
    168  fa0b		       8a		      txa
    169  fa0c		       a6 83		      ldx	Temp+0
    170  fa0e		       95 b0		      sta	BugPosX,x
    171  fa10		       94 b2		      sty	BugPosY,x
    172  fa12
    173  fa12				   .bug_movement_return
    174  fa12		       60		      rts
    175  fa13
    176  fa13				   BugCollision
    177  fa13
    178  fa13		       e0 01		      cpx	#1
    179  fa15		       f0 05		      beq	.bug_collision_m1
    180  fa17
    181  fa17				   .bug_collision_m0
    182  fa17							; Collision for M0 (V set)
    183  fa17		       24 00		      bit	CXM0P
    184  fa19		       70 06		      bvs	.bug_collision_active
    185  fa1b		       60		      rts
    186  fa1c
    187  fa1c				   .bug_collision_m1
    188  fa1c							; Collision for M1 (N set)
    189  fa1c		       24 01		      bit	CXM1P
    190  fa1e		       30 01		      bmi	.bug_collision_active
    191  fa20		       60		      rts
    192  fa21
    193  fa21				   .bug_collision_active
    194  fa21
    195  fa21							; Reduce players score
    196  fa21		       c6 91		      dec	ScoreValue
    197  fa23
    198  fa23							; Play sound
    199  fa23		       20 a4 fa 	      jsr	BugColSample
    200  fa26
    201  fa26		       60		      rts
    202  fa27
    203  fa27				   BugStunCollision
    204  fa27
    205  fa27		       e0 01		      cpx	#1
    206  fa29		       f0 05		      beq	.bug_stun_collision_m1
    207  fa2b
    208  fa2b				   .bug_stun_collision_m0
    209  fa2b							; Collision for M0 (V set)
    210  fa2b		       24 00		      bit	CXM0P
    211  fa2d		       70 06		      bvs	.bug_stun_collision_active
    212  fa2f		       60		      rts
    213  fa30
    214  fa30				   .bug_stun_collision_m1
    215  fa30							; Collision for M1 (N set)
    216  fa30		       24 01		      bit	CXM1P
    217  fa32		       30 01		      bmi	.bug_stun_collision_active
    218  fa34		       60		      rts
    219  fa35
    220  fa35				   .bug_stun_collision_active
    221  fa35							; Add points to score
    222  fa35		       18		      clc
    223  fa36		       a5 92		      lda	ScoreValue+1
    224  fa38		       69 04		      adc	#BUG_POINTS
    225  fa3a		       85 92		      sta	ScoreValue+1
    226  fa3c
    227  fa3c							; Reset bug
    228  fa3c		       20 8a f9 	      jsr	BugReset
    229  fa3f
    230  fa3f							; Play sample
    231  fa3f		       20 93 fa 	      jsr	BugSample
    232  fa42
    233  fa42		       60		      rts
    234  fa43
    235  fa43							; Horizontal Positioning
    236  fa43
    237  fa43				   BugPosition
    238  fa43
    239  fa43		       a2 02		      ldx	#2
    240  fa45		       a5 b0		      lda	BugPosX+0
    241  fa47		       20 00 f0 	      jsr	PosObject
    242  fa4a
    243  fa4a		       a2 03		      ldx	#3
    244  fa4c		       a5 b1		      lda	BugPosX+1
    245  fa4e		       20 00 f0 	      jsr	PosObject
    246  fa51
    247  fa51		       60		      rts
    248  fa52
    249  fa52							; Scanline Draw
    250  fa52
    251  fa52				   BugDrawStart
    252  fa52
    253  fa52		       a0 01		      ldy	#1
    254  fa54				   .bug_draw_start_loop
    255  fa54
    256  fa54							; Set missile 0 & 1 to be 4 clock size
    257  fa54		       b9 81 00 	      lda	NuSiz0,y
    258  fa57		       09 30		      ora	#%00110000
    259  fa59		       99 81 00 	      sta	NuSiz0,y
    260  fa5c		       99 04 00 	      sta	NUSIZ0,y
    261  fa5f
    262  fa5f							; Setup half scanline positions
    263  fa5f		       b9 b2 00 	      lda	BugPosY,y
    264  fa62		       4a		      lsr
    265  fa63		       99 b6 00 	      sta	BugDrawPosBottom,y
    266  fa66
    267  fa66		       69 04		      adc	#BUG_SIZE/2
    268  fa68		       99 b8 00 	      sta	BugDrawPosTop,y
    269  fa6b
    270  fa6b		       88		      dey
    271  fa6c		       10 e6		      bpl	.bug_draw_start_loop
    272  fa6e
    273  fa6e		       60		      rts
    274  fa6f
    275  fa6f				   BugDraw
    276  fa6f
    277  fa6f							; Load half scanline
    278  fa6f							;    lda Temp+1
    279  fa6f
    280  fa6f				   .bug_draw_0
    281  fa6f		       a0 00		      ldy	#%00000000
    282  fa71
    283  fa71							; Check top and bottom y pos
    284  fa71		       c5 b8		      cmp	BugDrawPosTop+0
    285  fa73		       b0 06		      bcs	.bug_draw_0_off
    286  fa75
    287  fa75		       c5 b6		      cmp	BugDrawPosBottom+0
    288  fa77		       90 02		      bcc	.bug_draw_0_off
    289  fa79
    290  fa79				   .bug_draw_0_on
    291  fa79		       a0 02		      ldy	#%00000010
    292  fa7b
    293  fa7b				   .bug_draw_0_off
    294  fa7b		       84 1d		      sty	ENAM0
    295  fa7d
    296  fa7d				   .bug_draw_1
    297  fa7d		       a0 00		      ldy	#%00000000
    298  fa7f
    299  fa7f							; Check top and bottom y pos
    300  fa7f		       c5 b9		      cmp	BugDrawPosTop+1
    301  fa81		       b0 06		      bcs	.bug_draw_1_off
    302  fa83
    303  fa83		       c5 b7		      cmp	BugDrawPosBottom+1
    304  fa85		       90 02		      bcc	.bug_draw_1_off
    305  fa87
    306  fa87				   .bug_draw_1_on
    307  fa87		       a0 02		      ldy	#%00000010
    308  fa89
    309  fa89				   .bug_draw_1_off
    310  fa89		       84 1e		      sty	ENAM1
    311  fa8b
    312  fa8b				   .bug_draw_return
    313  fa8b		       60		      rts
    314  fa8c
    315  fa8c				   BugClean
    316  fa8c		       a9 00		      lda	#0
    317  fa8e		       85 1d		      sta	ENAM0
    318  fa90		       85 1e		      sta	ENAM1
    319  fa92		       60		      rts
    320  fa93
    321  fa93				   BugSample
    322  fa93		       a9 1e		      lda	#BUG_SAMPLE_LEN
    323  fa95		       85 90		      sta	SampleStep
    324  fa97		       a9 03		      lda	#BUG_SAMPLE_C
    325  fa99		       85 16		      sta	AUDC1
    326  fa9b		       a9 14		      lda	#BUG_SAMPLE_F
    327  fa9d		       85 18		      sta	AUDF1
    328  fa9f		       a9 04		      lda	#BUG_SAMPLE_V
    329  faa1		       85 1a		      sta	AUDV1
    330  faa3		       60		      rts
    331  faa4
    332  faa4				   BugColSample
    333  faa4		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    334  faa6		       85 90		      sta	SampleStep
    335  faa8		       a9 08		      lda	#BUG_COL_SAMPLE_C
    336  faaa		       85 16		      sta	AUDC1
    337  faac		       a9 08		      lda	#BUG_COL_SAMPLE_F
    338  faae		       85 18		      sta	AUDF1
    339  fab0		       a9 03		      lda	#BUG_COL_SAMPLE_V
    340  fab2		       85 1a		      sta	AUDV1
    341  fab4		       60		      rts
------- FILE game.asm
     20  fab5							;    include "objects/swatter.asm"
     21  fab5
     22  fab5							; Initialization
     23  fab5
     24  fab5				   GameInit
     25  fab5
     26  fab5							; Setup logic and kernel
      0  fab5					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fab5				   .POINTER   SET	VBlankPtr
      2  fab5				   .ADDRESS   SET	GameVerticalBlank
      3  fab5
      4  fab5		       a9 00		      LDA	#<.ADDRESS
      5  fab7		       85 87		      STA	.POINTER
      6  fab9		       a9 fb		      LDA	#>.ADDRESS
      7  fabb		       85 88		      STA	.POINTER+1
      8  fabd
      0  fabd					      SET_POINTER	KernelPtr, GameKernel
      1  fabd				   .POINTER   SET	KernelPtr
      2  fabd				   .ADDRESS   SET	GameKernel
      3  fabd
      4  fabd		       a9 7d		      LDA	#<.ADDRESS
      5  fabf		       85 89		      STA	.POINTER
      6  fac1		       a9 fb		      LDA	#>.ADDRESS
      7  fac3		       85 8a		      STA	.POINTER+1
      8  fac5
      0  fac5					      SET_POINTER	OverScanPtr, GameOverScan
      1  fac5				   .POINTER   SET	OverScanPtr
      2  fac5				   .ADDRESS   SET	GameOverScan
      3  fac5
      4  fac5		       a9 21		      LDA	#<.ADDRESS
      5  fac7		       85 8b		      STA	.POINTER
      6  fac9		       a9 fb		      LDA	#>.ADDRESS
      7  facb		       85 8c		      STA	.POINTER+1
      8  facd
     30  facd
     31  facd							; Mute Audio
     32  facd		       a9 00		      lda	#0
     33  facf		       85 15		      sta	AUDC0
     34  fad1		       85 19		      sta	AUDV0
     35  fad3		       85 17		      sta	AUDF0
     36  fad5		       85 16		      sta	AUDC1
     37  fad7		       85 1a		      sta	AUDV1
     38  fad9		       85 18		      sta	AUDF1
     39  fadb		       85 90		      sta	SampleStep
     40  fadd
     41  fadd							; Load Audio Settings
     42  fadd		       a9 04		      lda	#GAME_AUDIO_VOLUME
     43  fadf		       85 19		      sta	AUDV0
     44  fae1
     45  fae1							; Make it so that we play the first note immediately
     46  fae1		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     47  fae3		       85 8f		      sta	AudioStep
     48  fae5		       a9 02		      lda	#2
     49  fae7		       85 8e		      sta	FrameTimer
     50  fae9
     51  fae9							; Reset NuSiz
     52  fae9		       a9 00		      lda	#0
     53  faeb		       85 81		      sta	NuSiz0
     54  faed		       85 04		      sta	NUSIZ0
     55  faef		       85 82		      sta	NuSiz1
     56  faf1		       85 05		      sta	NUSIZ1
     57  faf3
     58  faf3							; Initialize Objects
     59  faf3		       20 c9 f4 	      jsr	ScoreInit
     60  faf6		       20 25 f6 	      jsr	SpiderInit
     61  faf9		       20 cb f7 	      jsr	LineInit
     62  fafc		       20 81 f9 	      jsr	BugInit
     63  faff							;    jsr SwatterInit
     64  faff
     65  faff		       60		      rts
     66  fb00
     67  fb00				   GameVerticalBlank
     68  fb00
     69  fb00							; Refresh random values
     70  fb00		       20 13 f0 	      jsr	Random
     71  fb03
     72  fb03							; Update Objects
     73  fb03		       20 36 f6 	      jsr	SpiderUpdate
     74  fb06		       20 e0 f7 	      jsr	LineUpdate
     75  fb09		       20 a2 f9 	      jsr	BugUpdate
     76  fb0c							;    jsr SwatterUpdate
     77  fb0c		       20 d2 f4 	      jsr	ScoreUpdate
     78  fb0f
     79  fb0f							; Reset Collisions
     80  fb0f		       85 2c		      sta	CXCLR
     81  fb11
     82  fb11							; Clear horizontal movement
     83  fb11		       85 2b		      sta	HMCLR
     84  fb13
     85  fb13							; Update Positions
     86  fb13		       20 41 f7 	      jsr	SpiderPosition
     87  fb16		       20 fe f8 	      jsr	LinePosition
     88  fb19		       20 43 fa 	      jsr	BugPosition
     89  fb1c							;    jsr SwatterPosition
     90  fb1c
     91  fb1c							; Set final x positions
     92  fb1c		       85 02		      sta	WSYNC
     93  fb1e		       85 2a		      sta	HMOVE
     94  fb20
     95  fb20		       60		      rts
     96  fb21
     97  fb21				   GameOverScan
     98  fb21
     99  fb21							; Audio Routines
    100  fb21		       20 3f fb 	      jsr	GameAudio
    101  fb24		       20 2b fb 	      jsr	GameSample
    102  fb27
    103  fb27							; State Routines
    104  fb27		       20 73 fb 	      jsr	GameDeath
    105  fb2a
    106  fb2a		       60		      rts
    107  fb2b
    108  fb2b				   GameSample
    109  fb2b
    110  fb2b		       a6 90		      ldx	SampleStep
    111  fb2d		       e0 00		      cpx	#0
    112  fb2f		       f0 0b		      beq	.game_sample_return
    113  fb31
    114  fb31		       ca		      dex
    115  fb32		       d0 08		      bne	.game_sample_return
    116  fb34
    117  fb34				   .game_sample_mute
    118  fb34		       a9 00		      lda	#0
    119  fb36		       85 1a		      sta	AUDV1
    120  fb38		       85 18		      sta	AUDF1
    121  fb3a		       85 16		      sta	AUDC1
    122  fb3c
    123  fb3c				   .game_sample_return
    124  fb3c		       86 90		      stx	SampleStep
    125  fb3e		       60		      rts
    126  fb3f
    127  fb3f				   GameAudio
    128  fb3f
    129  fb3f		       a6 8e		      ldx	FrameTimer
    130  fb41		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    131  fb43		       f0 25		      beq	.game_audio_mute_note
    132  fb45		       e0 00		      cpx	#0
    133  fb47		       d0 29		      bne	.game_audio_return
    134  fb49
    135  fb49							; Reset Timer
    136  fb49		       a2 09		      ldx	#GAME_AUDIO_STEP
    137  fb4b		       86 8e		      stx	FrameTimer
    138  fb4d
    139  fb4d				   .game_audio_play
    140  fb4d
    141  fb4d							; Increment melody position
    142  fb4d		       a4 8f		      ldy	AudioStep
    143  fb4f		       c8		      iny
    144  fb50
    145  fb50		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    146  fb52		       d0 02		      bne	.game_audio_play_note
    147  fb54
    148  fb54							; Loop our audio step
    149  fb54		       a0 00		      ldy	#0
    150  fb56
    151  fb56				   .game_audio_play_note
    152  fb56
    153  fb56							; Save current position
    154  fb56		       84 8f		      sty	AudioStep
    155  fb58
    156  fb58							; Melody Line
    157  fb58		       b9 e1 fb 	      lda	GameAudio0,y
    158  fb5b		       c9 ff		      cmp	#$FF
    159  fb5d		       f0 0b		      beq	.game_audio_mute_note
    160  fb5f		       85 17		      sta	AUDF0
    161  fb61		       a9 06		      lda	#GAME_AUDIO_TONE
    162  fb63		       85 15		      sta	AUDC0
    163  fb65		       a9 04		      lda	#GAME_AUDIO_VOLUME
    164  fb67		       85 19		      sta	AUDV0
    165  fb69
    166  fb69		       60		      rts
    167  fb6a
    168  fb6a				   .game_audio_mute_note
    169  fb6a
    170  fb6a		       a9 00		      lda	#0
    171  fb6c		       85 17		      sta	AUDF0
    172  fb6e		       85 15		      sta	AUDC0
    173  fb70		       85 19		      sta	AUDV0
    174  fb72
    175  fb72				   .game_audio_return
    176  fb72		       60		      rts
    177  fb73
    178  fb73				   GameDeath
    179  fb73		       a5 91		      lda	ScoreValue+0
    180  fb75		       c9 00		      cmp	#0
    181  fb77		       d0 03		      bne	.game_death_return
    182  fb79
    183  fb79							; Show Game Over Screen
    184  fb79		       20 01 fc 	      jsr	OverInit
    185  fb7c
    186  fb7c				   .game_death_return
    187  fb7c		       60		      rts
    188  fb7d
    189  fb7d				   GameKernel
    190  fb7d
    191  fb7d							; Turn on display
    192  fb7d		       a9 00		      lda	#0
    193  fb7f		       85 01		      sta	VBLANK
    194  fb81
    195  fb81				   .game_kernel_score
    196  fb81
    197  fb81							; Draw Score on top first
    198  fb81		       20 f2 f4 	      jsr	ScoreDraw
    199  fb84
    200  fb84				   .game_kernel_objects_start
    201  fb84
    202  fb84							; Setup Drawing Objects
    203  fb84		       20 b2 f5 	      jsr	WebDrawStart
    204  fb87		       20 49 f7 	      jsr	SpiderDrawStart
    205  fb8a		       20 06 f9 	      jsr	LineDrawStart
    206  fb8d		       20 52 fa 	      jsr	BugDrawStart
    207  fb90							;    jsr SwatterDrawStart
    208  fb90
    209  fb90							; Start Scanline Counter
    210  fb90		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    211  fb92							; The extra 5 is for processing overflow
    212  fb92
    213  fb92							; Half scanline counter in Temp+1
    214  fb92		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    215  fb94		       85 84		      sta	Temp+1
    216  fb96
    217  fb96				   .game_kernel_objects
    218  fb96
    219  fb96							; Draw Objects in order
    220  fb96
    221  fb96							;    jsr LineDraw
    222  fb96							;    jsr BugDraw
    223  fb96		       20 cd f5 	      jsr	WebDraw	; Every 6 lines
    224  fb99
    225  fb99		       85 02		      sta	WSYNC
    226  fb9b		       ca		      dex
    227  fb9c		       f0 34		      beq	.game_kernel_clean
    228  fb9e
    229  fb9e		       20 6d f7 	      jsr	SpiderDraw	; Every odd scanline
    230  fba1							;    jsr SwatterDraw
    231  fba1
    232  fba1		       85 02		      sta	WSYNC
    233  fba3		       c6 84		      dec	Temp+1
    234  fba5		       ca		      dex
    235  fba6		       f0 2a		      beq	.game_kernel_clean
    236  fba8
    237  fba8		       a5 84		      lda	Temp+1
    238  fbaa		       20 26 f9 	      jsr	LineDraw
    239  fbad		       20 6f fa 	      jsr	BugDraw
    240  fbb0
    241  fbb0							;    sta WSYNC
    242  fbb0		       ca		      dex
    243  fbb1		       f0 1f		      beq	.game_kernel_clean
    244  fbb3
    245  fbb3		       20 6d f7 	      jsr	SpiderDraw
    246  fbb6							;    jsr SwatterDraw
    247  fbb6
    248  fbb6		       85 02		      sta	WSYNC
    249  fbb8		       c6 84		      dec	Temp+1
    250  fbba		       ca		      dex
    251  fbbb		       f0 15		      beq	.game_kernel_clean
    252  fbbd
    253  fbbd		       a5 84		      lda	Temp+1
    254  fbbf		       20 26 f9 	      jsr	LineDraw
    255  fbc2		       20 6f fa 	      jsr	BugDraw
    256  fbc5
    257  fbc5							;    sta WSYNC
    258  fbc5		       ca		      dex
    259  fbc6		       f0 0a		      beq	.game_kernel_clean
    260  fbc8
    261  fbc8		       20 6d f7 	      jsr	SpiderDraw
    262  fbcb							;    jsr SwatterDraw
    263  fbcb
    264  fbcb		       85 02		      sta	WSYNC
    265  fbcd		       c6 84		      dec	Temp+1
    266  fbcf		       ca		      dex
    267  fbd0		       d0 c4		      bne	.game_kernel_objects
    268  fbd2
    269  fbd2				   .game_kernel_clean
    270  fbd2
    271  fbd2		       20 ef f5 	      jsr	WebClean
    272  fbd5		       20 9e f7 	      jsr	SpiderClean
    273  fbd8		       20 39 f9 	      jsr	LineClean
    274  fbdb		       20 8c fa 	      jsr	BugClean
    275  fbde							;    jsr SwatterClean
    276  fbde
    277  fbde		       85 02		      sta	WSYNC
    278  fbe0
    279  fbe0				   .game_kernel_return
    280  fbe0		       60		      rts
    281  fbe1
    282  fbe1				   GameAudio0
    283  fbe1		       0d		      .byte.b	#13	; D
    284  fbe2		       ff		      .byte.b	#$FF
    285  fbe3		       0f		      .byte.b	#15	; B
    286  fbe4		       ff		      .byte.b	#$FF
    287  fbe5		       0d		      .byte.b	#13	; D
    288  fbe6		       ff		      .byte.b	#$FF
    289  fbe7		       0f		      .byte.b	#15	; B
    290  fbe8		       ff		      .byte.b	#$FF
    291  fbe9		       0d		      .byte.b	#13	; D
    292  fbea		       0d		      .byte.b	#13	; D
    293  fbeb		       0f		      .byte.b	#15	; B
    294  fbec		       ff		      .byte.b	#$FF
    295  fbed		       0c		      .byte.b	#12	; D#
    296  fbee		       ff		      .byte.b	#$FF
    297  fbef		       0f		      .byte.b	#15	; B
    298  fbf0		       ff		      .byte.b	#$FF
    299  fbf1		       0b		      .byte.b	#11	; E
    300  fbf2		       ff		      .byte.b	#$FF
    301  fbf3		       0e		      .byte.b	#14	; C#
    302  fbf4		       ff		      .byte.b	#$FF
    303  fbf5		       0b		      .byte.b	#11
    304  fbf6		       ff		      .byte.b	#$FF
    305  fbf7		       0e		      .byte.b	#14
    306  fbf8		       ff		      .byte.b	#$FF
    307  fbf9		       0b		      .byte.b	#11
    308  fbfa		       0b		      .byte.b	#11
    309  fbfb		       0e		      .byte.b	#14
    310  fbfc		       ff		      .byte.b	#$FF
    311  fbfd		       0b		      .byte.b	#11
    312  fbfe		       ff		      .byte.b	#$FF
    313  fbff		       0e		      .byte.b	#14
    314  fc00		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fc01					      include	"over.asm"
      1  fc01							;================
      2  fc01							; Constants
      3  fc01							;================
      4  fc01
      5  fc01		       00 dc	   OVER_FRAMES =	220
      6  fc01
      7  fc01		       00 00	   OVER_BG_COLOR =	#$00
      8  fc01		       00 44	   OVER_FG_COLOR =	#$44
      9  fc01
     10  fc01		       00 07	   OVER_AUDIO_TONE =	7
     11  fc01		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fc01		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fc01		       00 10	   OVER_AUDIO_STEP =	16
     14  fc01
     15  fc01		       00 09	   OVER_IMAGE_SIZE =	9
     16  fc01		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fc01		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fc01		       00 35	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fc01
     20  fc01				   OverInit
     21  fc01
     22  fc01							; Setup logic and kernel
      0  fc01					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fc01				   .POINTER   SET	VBlankPtr
      2  fc01				   .ADDRESS   SET	OverVerticalBlank
      3  fc01
      4  fc01		       a9 43		      LDA	#<.ADDRESS
      5  fc03		       85 87		      STA	.POINTER
      6  fc05		       a9 fc		      LDA	#>.ADDRESS
      7  fc07		       85 88		      STA	.POINTER+1
      8  fc09
      0  fc09					      SET_POINTER	KernelPtr, OverKernel
      1  fc09				   .POINTER   SET	KernelPtr
      2  fc09				   .ADDRESS   SET	OverKernel
      3  fc09
      4  fc09		       a9 81		      LDA	#<.ADDRESS
      5  fc0b		       85 89		      STA	.POINTER
      6  fc0d		       a9 fc		      LDA	#>.ADDRESS
      7  fc0f		       85 8a		      STA	.POINTER+1
      8  fc11
      0  fc11					      SET_POINTER	OverScanPtr, OverOverScan
      1  fc11				   .POINTER   SET	OverScanPtr
      2  fc11				   .ADDRESS   SET	OverOverScan
      3  fc11
      4  fc11		       a9 47		      LDA	#<.ADDRESS
      5  fc13		       85 8b		      STA	.POINTER
      6  fc15		       a9 fc		      LDA	#>.ADDRESS
      7  fc17		       85 8c		      STA	.POINTER+1
      8  fc19
     26  fc19
     27  fc19							; Load Colors
     28  fc19		       a9 00		      lda	#OVER_BG_COLOR
     29  fc1b		       85 09		      sta	COLUBK
     30  fc1d		       a9 44		      lda	#OVER_FG_COLOR
     31  fc1f		       85 08		      sta	COLUPF
     32  fc21
     33  fc21							; Load audio settings
     34  fc21		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fc23		       85 15		      sta	AUDC0
     36  fc25		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fc27		       85 19		      sta	AUDV0
     38  fc29		       a9 00		      lda	#0
     39  fc2b		       85 16		      sta	AUDC1
     40  fc2d		       85 1a		      sta	AUDV1
     41  fc2f		       a9 00		      lda	#0
     42  fc31		       85 8f		      sta	AudioStep
     43  fc33
     44  fc33							; Play first note
     45  fc33		       ad d3 fc 	      lda	OverAudio0,AudioStep
     46  fc36		       85 17		      sta	AUDF0
     47  fc38
     48  fc38							; Setup frame counters
     49  fc38		       a9 00		      lda	#0
     50  fc3a		       85 8d		      sta	Frame
     51  fc3c		       a9 10		      lda	#OVER_AUDIO_STEP
     52  fc3e		       85 8e		      sta	FrameTimer
     53  fc40		       85 84		      sta	Temp+1
     54  fc42
     55  fc42		       60		      rts
     56  fc43
     57  fc43				   OverVerticalBlank
     58  fc43		       20 d2 f4 	      jsr	ScoreUpdate
     59  fc46		       60		      rts
     60  fc47
     61  fc47				   OverOverScan
     62  fc47		       20 4e fc 	      jsr	OverAudio
     63  fc4a		       20 77 fc 	      jsr	OverState
     64  fc4d		       60		      rts
     65  fc4e
     66  fc4e				   OverAudio
     67  fc4e
     68  fc4e		       a6 8e		      ldx	FrameTimer
     69  fc50		       e0 00		      cpx	#0
     70  fc52		       d0 22		      bne	.over_audio_return
     71  fc54
     72  fc54							; Reset Timer
     73  fc54		       a6 84		      ldx	Temp+1
     74  fc56					      REPEAT	3
     75  fc56		       e8		      inx
     74  fc56					      REPEND
     75  fc57		       e8		      inx
     74  fc57					      REPEND
     75  fc58		       e8		      inx
     76  fc59					      REPEND
     77  fc59		       86 8e		      stx	FrameTimer
     78  fc5b		       86 84		      stx	Temp+1
     79  fc5d
     80  fc5d				   .over_audio_play
     81  fc5d
     82  fc5d							; Increment melody position
     83  fc5d		       a4 8f		      ldy	AudioStep
     84  fc5f		       c8		      iny
     85  fc60
     86  fc60		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  fc62		       f0 0c		      beq	.over_audio_mute_note
     88  fc64
     89  fc64				   .over_audio_play_note
     90  fc64
     91  fc64							; Save current position
     92  fc64		       84 8f		      sty	AudioStep
     93  fc66
     94  fc66							; Melody Line
     95  fc66		       b9 d3 fc 	      lda	OverAudio0,y
     96  fc69		       85 17		      sta	AUDF0
     97  fc6b		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  fc6d		       85 19		      sta	AUDV0
     99  fc6f
    100  fc6f		       60		      rts
    101  fc70
    102  fc70				   .over_audio_mute_note
    103  fc70		       a9 00		      lda	#0
    104  fc72		       85 17		      sta	AUDF0
    105  fc74		       85 19		      sta	AUDV0
    106  fc76
    107  fc76				   .over_audio_return
    108  fc76		       60		      rts
    109  fc77
    110  fc77				   OverState
    111  fc77		       a5 8d		      lda	Frame
    112  fc79		       c9 dc		      cmp	#OVER_FRAMES
    113  fc7b		       d0 03		      bne	.over_state_return
    114  fc7d
    115  fc7d		       20 4a f2 	      jsr	TitleInit
    116  fc80
    117  fc80				   .over_state_return
    118  fc80		       60		      rts
    119  fc81
    120  fc81				   OverKernel
    121  fc81
    122  fc81							; Turn on display
    123  fc81		       a9 00		      lda	#0
    124  fc83		       85 01		      sta	VBLANK
    125  fc85
    126  fc85				   .over_kernel_score
    127  fc85
    128  fc85							; Draw Score on top first (no update)
    129  fc85		       20 f2 f4 	      jsr	ScoreDraw
    130  fc88
    131  fc88				   .over_kernel_init
    132  fc88							; Playfield Control
    133  fc88		       a5 80		      lda	CtrlPf
    134  fc8a		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  fc8c		       09 01		      ora	#%00000001	; Set mirroring
    136  fc8e		       85 80		      sta	CtrlPf
    137  fc90		       85 0a		      sta	CTRLPF
    138  fc92
    139  fc92				   .over_kernel_top_padding
    140  fc92							; Top Padding
    141  fc92		       20 b1 fc 	      jsr	OverPadding
    142  fc95
    143  fc95				   .over_kernel_image
    144  fc95		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  fc97
    146  fc97				   .over_kernel_image_next
    147  fc97		       bd ca fc 	      lda	OverImagePF2,x
    148  fc9a		       85 0f		      sta	PF2
    149  fc9c		       bd c1 fc 	      lda	OverImagePF1,x
    150  fc9f		       85 0e		      sta	PF1
    151  fca1							;    lda OverImagePF0,x
    152  fca1							;    sta PF0
    153  fca1
    154  fca1		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  fca3				   .over_kernel_image_loop
    156  fca3		       85 02		      sta	WSYNC
    157  fca5		       88		      dey
    158  fca6		       d0 fb		      bne	.over_kernel_image_loop
    159  fca8
    160  fca8		       ca		      dex
    161  fca9		       10 ec		      bpl	.over_kernel_image_next
    162  fcab
    163  fcab				   .over_kernel_bottom_padding
    164  fcab							; Bottom Padding
    165  fcab		       20 b1 fc 	      jsr	OverPadding
    166  fcae
    167  fcae				   .over_kernel_return
    168  fcae		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  fcb0		       60		      rts
    170  fcb1
    171  fcb1				   OverPadding
    172  fcb1		       a9 00		      lda	#0
    173  fcb3		       85 0d		      sta	PF0
    174  fcb5		       85 0e		      sta	PF1
    175  fcb7		       85 0f		      sta	PF2
    176  fcb9
    177  fcb9		       a2 35		      ldx	#OVER_IMAGE_PADDING
    178  fcbb				   .over_padding_loop
    179  fcbb		       85 02		      sta	WSYNC
    180  fcbd		       ca		      dex
    181  fcbe		       d0 fb		      bne	.over_padding_loop
    182  fcc0
    183  fcc0		       60		      rts
    184  fcc1
    185  fcc1				   OverAssets
    186  fcc1
    187  fcc1							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  fcc1					      include	"over_image.asm"
      1  fcc1							;OverImagePF0:
      2  fcc1							;    .BYTE %00000000
      3  fcc1							;    .BYTE %00000000
      4  fcc1							;    .BYTE %00000000
      5  fcc1							;    .BYTE %00000000
      6  fcc1							;    .BYTE %00000000
      7  fcc1							;    .BYTE %00000000
      8  fcc1							;    .BYTE %00000000
      9  fcc1							;    .BYTE %00000000
     10  fcc1							;    .BYTE %00000000
     11  fcc1
     12  fcc1				   OverImagePF1
     13  fcc1		       0c		      .BYTE.b	%00001100
     14  fcc2		       13		      .BYTE.b	%00010011
     15  fcc3		       20		      .BYTE.b	%00100000
     16  fcc4		       23		      .BYTE.b	%00100011
     17  fcc5		       24		      .BYTE.b	%00100100
     18  fcc6		       24		      .BYTE.b	%00100100
     19  fcc7		       12		      .BYTE.b	%00010010
     20  fcc8		       10		      .BYTE.b	%00010000
     21  fcc9		       08		      .BYTE.b	%00001000
     22  fcca
     23  fcca				   OverImagePF2
     24  fcca		       e0		      .BYTE.b	%11100000
     25  fccb		       18		      .BYTE.b	%00011000
     26  fccc		       05		      .BYTE.b	%00000101
     27  fccd		       52		      .BYTE.b	%01010010
     28  fcce		       23		      .BYTE.b	%00100011
     29  fccf		       52		      .BYTE.b	%01010010
     30  fcd0		       04		      .BYTE.b	%00000100
     31  fcd1		       18		      .BYTE.b	%00011000
     32  fcd2		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  fcd3
    190  fcd3				   OverAudio0
    191  fcd3
    192  fcd3		       0c		      .BYTE.b	#12	; D#2
    193  fcd4		       0d		      .BYTE.b	#13	; D2
    194  fcd5		       11		      .BYTE.b	#17	; A1
    195  fcd6		       16		      .BYTE.b	#22	; F1
    196  fcd7		       1a		      .BYTE.b	#26	; D1
    197  fcd8		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    288  fcd9
    289  fcd9							;================
    290  fcd9							; End of cart
    291  fcd9							;================
    292  fcd9
    293  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    294  fffa
    295  fffa				   InterruptVectors
    296  fffa
    297  fffa		       21 f0		      .word.w	InitSystem	; NMI
    298  fffc		       21 f0		      .word.w	InitSystem	; RESET
    299  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    300  10000
    301  10000					       END
