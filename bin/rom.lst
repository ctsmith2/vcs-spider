------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: March 1st, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00d4 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; Global
     53 U0080
     54 U0080		       00 00 00 00 Temp       ds	4
     55 U0084		       00	   Rand8      ds	1
     56 U0085		       00	   Rand16     ds	1
     57 U0086
     58 U0086		       00 00	   VBlankPtr  ds	2
     59 U0088		       00 00	   KernelPtr  ds	2
     60 U008a		       00 00	   OverScanPtr ds	2
     61 U008c
     62 U008c		       00	   Frame      ds	1
     63 U008d		       00 00	   FrameTimer ds	2
     64 U008f		       00 00	   InputState ds	2
     65 U0091
     66 U0091		       00	   AudioStep  ds	1
     67 U0092		       00	   SampleStep ds	1
     68 U0093
     69 U0093							; Game
     70 U0093
     71 U0093		       00	   GameType   ds	1
     72 U0094		       00	   GameAudioStep ds	1
     73 U0095
     74 U0095							; Score
     75 U0095
     76 U0095		       00 00	   ScoreValue ds	2
     77 U0097		       00 00	   ScoreDigitOnes ds	2
     78 U0099		       00 00	   ScoreDigitTens ds	2
     79 U009b		       00 00 00    ScoreDigitGfx ds	3
     80 U009e		       00 00	   ScoreBarGfx ds	2
     81 U00a0
     82 U00a0							; Level
     83 U00a0		       00	   LevelCurrent ds	1
     84 U00a1
     85 U00a1							; Web
     86 U00a1
     87 U00a1		       00	   WebIndex   ds	1
     88 U00a2		       00 00	   WebColor   ds	2
     89 U00a4
     90 U00a4							; Object X Positions
     91 U00a4
     92 U00a4				   XPositions
     93 U00a4		       00	   SpiderPosX ds	1	; 0
     94 U00a5		       00	   SwatterPosX ds	1	; 1
     95 U00a6		       00 00	   BugPosX    ds	2	; 2/3
     96 U00a8		       00	   LinePosX   ds	1	; 4
     97 U00a9
     98 U00a9							; Spider
     99 U00a9
    100 U00a9		       00 00	   SpiderPtr  ds	2
    101 U00ab		       00	   SpiderPosY ds	1
    102 U00ac		       00	   SpiderCtrl ds	1
    103 U00ad		       00	   SpiderColor ds	1
    104 U00ae
    105 U00ae		       00	   SpiderIndex ds	1
    106 U00af		       00	   SpiderDrawPos ds	1
    107 U00b0		       00	   SpiderLine ds	1
    108 U00b1
    109 U00b1		       00 00	   SpiderPtr2 ds	2
    110 U00b3
    111 U00b3							; Line
    112 U00b3
    113 U00b3		       00	   LineEnabled ds	1
    114 U00b4		       00	   LinePosY   ds	1
    115 U00b5		       00 00	   LineVelocity ds	2
    116 U00b7		       00 00	   LineDrawPos ds	2
    117 U00b9
    118 U00b9							; Bug
    119 U00b9
    120 U00b9		       00	   BugSpeed   ds	1
    121 U00ba
    122 U00ba		       00 00	   BugStunned ds	2
    123 U00bc		       00 00	   BugPosY    ds	2
    124 U00be
    125 U00be		       00 00	   BugDrawPosBottom ds	2
    126 U00c0		       00 00	   BugDrawPosTop ds	2
    127 U00c2
    128 U00c2							; Swatter
    129 U00c2
    130 U00c2		       00	   SwatterPosY ds	1
    131 U00c3		       00	   SwatterState ds	1
    132 U00c4		       00	   SwatterColor ds	1
    133 U00c5
    134 U00c5		       00	   SwatterWaitTime ds	1
    135 U00c6		       00	   SwatterHoldTime ds	1
    136 U00c7		       00	   SwatterHitDamage ds	1
    137 U00c8
    138 U00c8		       00	   SwatterIndex ds	1
    139 U00c9		       00	   SwatterDrawPos ds	1
    140 U00ca		       00	   SwatterLine ds	1
    141 U00cb
    142 U00cb		       00	   SwatterSampleCount ds	1
    143 U00cc		       00	   SwatterSampleF ds	1
    144 U00cd
    145 U00cd							; Over
    146 U00cd
    147 U00cd		       00 00	   OverImagePF1Ptr ds	2
    148 U00cf		       00 00	   OverImagePF2Ptr ds	2
    149 U00d1		       00 00	   OverAudio0Ptr ds	2
    150 U00d3		       00	   OverColor  ds	1
    151 U00d4
    152  10000 ????				       SEG
    153  f000					      org	$F000	; Start of cart area
    154  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 84		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 85		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 84		      sta	Rand8
     49  f01e		       45 85		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 80		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 81		      sta	Temp+1
     70  f029		       85 82		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 80		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 81		      lda	Temp+1	; And add into result
     77  f031		       65 81		      adc	Temp+1
     78  f033		       85 81		      sta	Temp+1
     79  f035
     80  f035		       a5 82		      lda	Temp+2	; Propagating any carry
     81  f037		       65 82		      adc	Temp+2
     82  f039		       85 82		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 81		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 82		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
     93  f044
     94  f044							;=======================================
     95  f044							; BlankLines
     96  f044							; ---------
     97  f044							; X - Number of lines to draw
     98  f044							;
     99  f044							; Uses: A,X
    100  f044							; Draws blank playfield lines
    101  f044							;=======================================
    102  f044
    103  f044				   BlankLines
    104  f044		       a9 00		      lda	#0
    105  f046		       85 0d		      sta	PF0
    106  f048		       85 0e		      sta	PF1
    107  f04a		       85 0f		      sta	PF2
    108  f04c
    109  f04c				   .blank_lines_loop
    110  f04c		       85 02		      sta	WSYNC
    111  f04e		       ca		      dex
    112  f04f		       d0 fb		      bne	.blank_lines_loop
    113  f051
    114  f051		       60		      rts
------- FILE kernel.asm
    156  f052
    157  f052							; Assets
    158  f052
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f052					      include	"title_frame_top.asm"
      1  f052				   TitleFrameTop
      2  f052
      3  f052		       a0		      .BYTE.b	%10100000
      4  f053		       54		      .BYTE.b	%01010100
      5  f054		       01		      .BYTE.b	%00000001
      6  f055		       00		      .BYTE.b	%00000000
      7  f056		       03		      .BYTE.b	%00000011
      8  f057		       2c		      .BYTE.b	%00101100
      9  f058
     10  f058		       d0		      .BYTE.b	%11010000
     11  f059		       23		      .BYTE.b	%00100011
     12  f05a		       00		      .BYTE.b	%00000000
     13  f05b		       00		      .BYTE.b	%00000000
     14  f05c		       00		      .BYTE.b	%00000000
     15  f05d		       51		      .BYTE.b	%01010001
     16  f05e
     17  f05e		       60		      .BYTE.b	%01100000
     18  f05f		       dc		      .BYTE.b	%11011100
     19  f060		       00		      .BYTE.b	%00000000
     20  f061		       00		      .BYTE.b	%00000000
     21  f062		       00		      .BYTE.b	%00000000
     22  f063		       8e		      .BYTE.b	%10001110
     23  f064
     24  f064		       b0		      .BYTE.b	%10110000
     25  f065		       00		      .BYTE.b	%00000000
     26  f066		       00		      .BYTE.b	%00000000
     27  f067		       00		      .BYTE.b	%00000000
     28  f068		       00		      .BYTE.b	%00000000
     29  f069		       51		      .BYTE.b	%01010001
     30  f06a
     31  f06a		       40		      .BYTE.b	%01000000
     32  f06b		       80		      .BYTE.b	%10000000
     33  f06c		       00		      .BYTE.b	%00000000
     34  f06d		       00		      .BYTE.b	%00000000
     35  f06e		       00		      .BYTE.b	%00000000
     36  f06f		       ad		      .BYTE.b	%10101101
     37  f070
     38  f070		       50		      .BYTE.b	%01010000
     39  f071		       00		      .BYTE.b	%00000000
     40  f072		       00		      .BYTE.b	%00000000
     41  f073		       00		      .BYTE.b	%00000000
     42  f074		       01		      .BYTE.b	%00000001
     43  f075		       82		      .BYTE.b	%10000010
     44  f076
     45  f076		       20		      .BYTE.b	%00100000
     46  f077		       00		      .BYTE.b	%00000000
     47  f078		       00		      .BYTE.b	%00000000
     48  f079		       00		      .BYTE.b	%00000000
     49  f07a		       02		      .BYTE.b	%00000010
     50  f07b		       00		      .BYTE.b	%00000000
     51  f07c
     52  f07c		       c0		      .BYTE.b	%11000000
     53  f07d		       77		      .BYTE.b	%01110111
     54  f07e		       66		      .BYTE.b	%01100110
     55  f07f		       30		      .BYTE.b	%00110000
     56  f080		       22		      .BYTE.b	%00100010
     57  f081		       1b		      .BYTE.b	%00011011
     58  f082
     59  f082		       40		      .BYTE.b	%01000000
     60  f083		       52		      .BYTE.b	%01010010
     61  f084		       2a		      .BYTE.b	%00101010
     62  f085		       50		      .BYTE.b	%01010000
     63  f086		       22		      .BYTE.b	%00100010
     64  f087		       29		      .BYTE.b	%00101001
     65  f088
     66  f088		       c0		      .BYTE.b	%11000000
     67  f089		       72		      .BYTE.b	%01110010
     68  f08a		       6a		      .BYTE.b	%01101010
     69  f08b		       50		      .BYTE.b	%01010000
     70  f08c		       22		      .BYTE.b	%00100010
     71  f08d		       1b		      .BYTE.b	%00011011
     72  f08e
     73  f08e		       80		      .BYTE.b	%10000000
     74  f08f		       42		      .BYTE.b	%01000010
     75  f090		       2a		      .BYTE.b	%00101010
     76  f091		       30		      .BYTE.b	%00110000
     77  f092		       2a		      .BYTE.b	%00101010
     78  f093		       29		      .BYTE.b	%00101001
     79  f094
     80  f094		       c0		      .BYTE.b	%11000000
     81  f095		       47		      .BYTE.b	%01000111
     82  f096		       e6		      .BYTE.b	%11100110
     83  f097		       50		      .BYTE.b	%01010000
     84  f098		       14		      .BYTE.b	%00010100
     85  f099		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f09a					      include	"title_frame_bottom.asm"
      1  f09a				   TitleFrameBottom
      2  f09a
      3  f09a		       20		      .BYTE.b	%00100000
      4  f09b		       00		      .BYTE.b	%00000000
      5  f09c		       00		      .BYTE.b	%00000000
      6  f09d		       00		      .BYTE.b	%00000000
      7  f09e		       00		      .BYTE.b	%00000000
      8  f09f		       64		      .BYTE.b	%01100100
      9  f0a0
     10  f0a0		       50		      .BYTE.b	%01010000
     11  f0a1		       00		      .BYTE.b	%00000000
     12  f0a2		       00		      .BYTE.b	%00000000
     13  f0a3		       00		      .BYTE.b	%00000000
     14  f0a4		       00		      .BYTE.b	%00000000
     15  f0a5		       98		      .BYTE.b	%10011000
     16  f0a6
     17  f0a6		       90		      .BYTE.b	%10010000
     18  f0a7		       80		      .BYTE.b	%10000000
     19  f0a8		       00		      .BYTE.b	%00000000
     20  f0a9		       00		      .BYTE.b	%00000000
     21  f0aa		       00		      .BYTE.b	%00000000
     22  f0ab		       28		      .BYTE.b	%00101000
     23  f0ac
     24  f0ac		       60		      .BYTE.b	%01100000
     25  f0ad		       60		      .BYTE.b	%01100000
     26  f0ae		       00		      .BYTE.b	%00000000
     27  f0af		       00		      .BYTE.b	%00000000
     28  f0b0		       00		      .BYTE.b	%00000000
     29  f0b1		       44		      .BYTE.b	%01000100
     30  f0b2
     31  f0b2		       d0		      .BYTE.b	%11010000
     32  f0b3		       1c		      .BYTE.b	%00011100
     33  f0b4		       00		      .BYTE.b	%00000000
     34  f0b5		       00		      .BYTE.b	%00000000
     35  f0b6		       00		      .BYTE.b	%00000000
     36  f0b7		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0b8					      include	"title_spider.asm"
      1  f0b8				   TitleSpider
      2  f0b8
      3  f0b8		       30		      .BYTE.b	%00110000
      4  f0b9		       67		      .BYTE.b	%01100111
      5  f0ba		       4f		      .BYTE.b	%01001111
      6  f0bb		       dd		      .BYTE.b	%11011101
      7  f0bc		       d8		      .BYTE.b	%11011000
      8  f0bd		       df		      .BYTE.b	%11011111
      9  f0be		       4d		      .BYTE.b	%01001101
     10  f0bf		       6f		      .BYTE.b	%01101111
     11  f0c0		       3b		      .BYTE.b	%00111011
     12  f0c1
     13  f0c1		       37		      .BYTE.b	%00110111
     14  f0c2		       6d		      .BYTE.b	%01101101
     15  f0c3		       d8		      .BYTE.b	%11011000
     16  f0c4		       df		      .BYTE.b	%11011111
     17  f0c5		       cd		      .BYTE.b	%11001101
     18  f0c6		       6f		      .BYTE.b	%01101111
     19  f0c7		       3b		      .BYTE.b	%00111011
     20  f0c8		       00		      .BYTE.b	%00000000
     21  f0c9		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
------- FILE title_bug.asm LEVEL 2 PASS 2
      0  f0ca					      include	"title_bug.asm"
      1  f0ca				   TitleBug
      2  f0ca
      3  f0ca		       10		      .BYTE.b	%00010000
      4  f0cb		       57		      .BYTE.b	%01010111
      5  f0cc		       4f		      .BYTE.b	%01001111
      6  f0cd		       3f		      .BYTE.b	%00111111
      7  f0ce		       19		      .BYTE.b	%00011001
      8  f0cf		       79		      .BYTE.b	%01111001
      9  f0d0		       8f		      .BYTE.b	%10001111
     10  f0d1		       97		      .BYTE.b	%10010111
     11  f0d2		       e0		      .BYTE.b	%11100000
     12  f0d3
     13  f0d3		       57		      .BYTE.b	%01010111
     14  f0d4		       4f		      .BYTE.b	%01001111
     15  f0d5		       3f		      .BYTE.b	%00111111
     16  f0d6		       19		      .BYTE.b	%00011001
     17  f0d7		       7d		      .BYTE.b	%01111101
     18  f0d8		       8f		      .BYTE.b	%10001111
     19  f0d9		       f7		      .BYTE.b	%11110111
     20  f0da		       00		      .BYTE.b	%00000000
     21  f0db		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    163  f0dc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0dc					      include	"objects/score_digits.asm"
      1  f0dc				   ScoreDigits
      2  f0dc
      3  f0dc		       77		      .BYTE.b	%01110111
      4  f0dd		       55		      .BYTE.b	%01010101
      5  f0de		       55		      .BYTE.b	%01010101
      6  f0df		       55		      .BYTE.b	%01010101
      7  f0e0		       77		      .BYTE.b	%01110111
      8  f0e1
      9  f0e1		       11		      .BYTE.b	%00010001
     10  f0e2		       11		      .BYTE.b	%00010001
     11  f0e3		       11		      .BYTE.b	%00010001
     12  f0e4		       11		      .BYTE.b	%00010001
     13  f0e5		       11		      .BYTE.b	%00010001
     14  f0e6
     15  f0e6		       77		      .BYTE.b	%01110111
     16  f0e7		       11		      .BYTE.b	%00010001
     17  f0e8		       77		      .BYTE.b	%01110111
     18  f0e9		       44		      .BYTE.b	%01000100
     19  f0ea		       77		      .BYTE.b	%01110111
     20  f0eb
     21  f0eb		       77		      .BYTE.b	%01110111
     22  f0ec		       11		      .BYTE.b	%00010001
     23  f0ed		       33		      .BYTE.b	%00110011
     24  f0ee		       11		      .BYTE.b	%00010001
     25  f0ef		       77		      .BYTE.b	%01110111
     26  f0f0
     27  f0f0		       55		      .BYTE.b	%01010101
     28  f0f1		       55		      .BYTE.b	%01010101
     29  f0f2		       77		      .BYTE.b	%01110111
     30  f0f3		       11		      .BYTE.b	%00010001
     31  f0f4		       11		      .BYTE.b	%00010001
     32  f0f5
     33  f0f5		       77		      .BYTE.b	%01110111
     34  f0f6		       44		      .BYTE.b	%01000100
     35  f0f7		       77		      .BYTE.b	%01110111
     36  f0f8		       11		      .BYTE.b	%00010001
     37  f0f9		       77		      .BYTE.b	%01110111
     38  f0fa
     39  f0fa		       77		      .BYTE.b	%01110111
     40  f0fb		       44		      .BYTE.b	%01000100
     41  f0fc		       77		      .BYTE.b	%01110111
     42  f0fd		       55		      .BYTE.b	%01010101
     43  f0fe		       77		      .BYTE.b	%01110111
     44  f0ff
     45  f0ff		       77		      .BYTE.b	%01110111
     46  f100		       11		      .BYTE.b	%00010001
     47  f101		       22		      .BYTE.b	%00100010
     48  f102		       22		      .BYTE.b	%00100010
     49  f103		       22		      .BYTE.b	%00100010
     50  f104
     51  f104		       77		      .BYTE.b	%01110111
     52  f105		       55		      .BYTE.b	%01010101
     53  f106		       77		      .BYTE.b	%01110111
     54  f107		       55		      .BYTE.b	%01010101
     55  f108		       77		      .BYTE.b	%01110111
     56  f109
     57  f109		       77		      .BYTE.b	%01110111
     58  f10a		       55		      .BYTE.b	%01010101
     59  f10b		       77		      .BYTE.b	%01110111
     60  f10c		       11		      .BYTE.b	%00010001
     61  f10d		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f10e					      include	"objects/score_digits_flip.asm"
      1  f10e				   ScoreDigitsFlip
      2  f10e
      3  f10e		       ee		      .BYTE.b	%11101110
      4  f10f		       aa		      .BYTE.b	%10101010
      5  f110		       aa		      .BYTE.b	%10101010
      6  f111		       aa		      .BYTE.b	%10101010
      7  f112		       ee		      .BYTE.b	%11101110
      8  f113
      9  f113		       88		      .BYTE.b	%10001000
     10  f114		       88		      .BYTE.b	%10001000
     11  f115		       88		      .BYTE.b	%10001000
     12  f116		       88		      .BYTE.b	%10001000
     13  f117		       88		      .BYTE.b	%10001000
     14  f118
     15  f118		       ee		      .BYTE.b	%11101110
     16  f119		       88		      .BYTE.b	%10001000
     17  f11a		       ee		      .BYTE.b	%11101110
     18  f11b		       22		      .BYTE.b	%00100010
     19  f11c		       ee		      .BYTE.b	%11101110
     20  f11d
     21  f11d		       ee		      .BYTE.b	%11101110
     22  f11e		       88		      .BYTE.b	%10001000
     23  f11f		       cc		      .BYTE.b	%11001100
     24  f120		       88		      .BYTE.b	%10001000
     25  f121		       ee		      .BYTE.b	%11101110
     26  f122
     27  f122		       aa		      .BYTE.b	%10101010
     28  f123		       aa		      .BYTE.b	%10101010
     29  f124		       ee		      .BYTE.b	%11101110
     30  f125		       88		      .BYTE.b	%10001000
     31  f126		       88		      .BYTE.b	%10001000
     32  f127
     33  f127		       ee		      .BYTE.b	%11101110
     34  f128		       22		      .BYTE.b	%00100010
     35  f129		       ee		      .BYTE.b	%11101110
     36  f12a		       88		      .BYTE.b	%10001000
     37  f12b		       ee		      .BYTE.b	%11101110
     38  f12c
     39  f12c		       ee		      .BYTE.b	%11101110
     40  f12d		       22		      .BYTE.b	%00100010
     41  f12e		       ee		      .BYTE.b	%11101110
     42  f12f		       aa		      .BYTE.b	%10101010
     43  f130		       ee		      .BYTE.b	%11101110
     44  f131
     45  f131		       ee		      .BYTE.b	%11101110
     46  f132		       88		      .BYTE.b	%10001000
     47  f133		       44		      .BYTE.b	%01000100
     48  f134		       44		      .BYTE.b	%01000100
     49  f135		       44		      .BYTE.b	%01000100
     50  f136
     51  f136		       ee		      .BYTE.b	%11101110
     52  f137		       aa		      .BYTE.b	%10101010
     53  f138		       ee		      .BYTE.b	%11101110
     54  f139		       aa		      .BYTE.b	%10101010
     55  f13a		       ee		      .BYTE.b	%11101110
     56  f13b
     57  f13b		       ee		      .BYTE.b	%11101110
     58  f13c		       aa		      .BYTE.b	%10101010
     59  f13d		       ee		      .BYTE.b	%11101110
     60  f13e		       88		      .BYTE.b	%10001000
     61  f13f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f140					      include	"objects/score_label.asm"
      1  f140				   ScoreLabel
      2  f140
      3  f140		       20		      .BYTE.b	%00100000
      4  f141		       50		      .BYTE.b	%01010000
      5  f142		       ee		      .BYTE.b	%11101110
      6  f143		       00		      .BYTE.b	%00000000
      7  f144		       57		      .BYTE.b	%01010111
      8  f145		       00		      .BYTE.b	%00000000
      9  f146
     10  f146		       20		      .BYTE.b	%00100000
     11  f147		       50		      .BYTE.b	%01010000
     12  f148		       4a		      .BYTE.b	%01001010
     13  f149		       00		      .BYTE.b	%00000000
     14  f14a		       55		      .BYTE.b	%01010101
     15  f14b		       00		      .BYTE.b	%00000000
     16  f14c
     17  f14c		       20		      .BYTE.b	%00100000
     18  f14d		       50		      .BYTE.b	%01010000
     19  f14e		       4e		      .BYTE.b	%01001110
     20  f14f		       00		      .BYTE.b	%00000000
     21  f150		       77		      .BYTE.b	%01110111
     22  f151		       00		      .BYTE.b	%00000000
     23  f152
     24  f152		       20		      .BYTE.b	%00100000
     25  f153		       50		      .BYTE.b	%01010000
     26  f154		       42		      .BYTE.b	%01000010
     27  f155		       00		      .BYTE.b	%00000000
     28  f156		       54		      .BYTE.b	%01010100
     29  f157		       00		      .BYTE.b	%00000000
     30  f158
     31  f158		       e0		      .BYTE.b	%11100000
     32  f159		       20		      .BYTE.b	%00100000
     33  f15a		       42		      .BYTE.b	%01000010
     34  f15b		       00		      .BYTE.b	%00000000
     35  f15c		       54		      .BYTE.b	%01010100
     36  f15d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    167  f15e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f15e					      include	"objects/web_image.asm"
      1  f15e				   WebImagePF0
      2  f15e		       00		      .BYTE.b	%00000000
      3  f15f		       00		      .BYTE.b	%00000000
      4  f160		       00		      .BYTE.b	%00000000
      5  f161		       00		      .BYTE.b	%00000000
      6  f162		       00		      .BYTE.b	%00000000
      7  f163		       00		      .BYTE.b	%00000000
      8  f164		       00		      .BYTE.b	%00000000
      9  f165		       00		      .BYTE.b	%00000000
     10  f166		       30		      .BYTE.b	%00110000
     11  f167		       e0		      .BYTE.b	%11100000
     12  f168		       20		      .BYTE.b	%00100000
     13  f169		       40		      .BYTE.b	%01000000
     14  f16a		       40		      .BYTE.b	%01000000
     15  f16b		       80		      .BYTE.b	%10000000
     16  f16c		       80		      .BYTE.b	%10000000
     17  f16d		       40		      .BYTE.b	%01000000
     18  f16e		       40		      .BYTE.b	%01000000
     19  f16f		       20		      .BYTE.b	%00100000
     20  f170		       e0		      .BYTE.b	%11100000
     21  f171		       30		      .BYTE.b	%00110000
     22  f172		       00		      .BYTE.b	%00000000
     23  f173		       00		      .BYTE.b	%00000000
     24  f174		       00		      .BYTE.b	%00000000
     25  f175		       00		      .BYTE.b	%00000000
     26  f176		       00		      .BYTE.b	%00000000
     27  f177		       00		      .BYTE.b	%00000000
     28  f178		       00		      .BYTE.b	%00000000
     29  f179		       00		      .BYTE.b	%00000000
     30  f17a
     31  f17a				   WebImagePF1
     32  f17a		       02		      .BYTE.b	%00000010
     33  f17b		       01		      .BYTE.b	%00000001
     34  f17c		       00		      .BYTE.b	%00000000
     35  f17d		       00		      .BYTE.b	%00000000
     36  f17e		       01		      .BYTE.b	%00000001
     37  f17f		       01		      .BYTE.b	%00000001
     38  f180		       02		      .BYTE.b	%00000010
     39  f181		       0c		      .BYTE.b	%00001100
     40  f182		       30		      .BYTE.b	%00110000
     41  f183		       c0		      .BYTE.b	%11000000
     42  f184		       38		      .BYTE.b	%00111000
     43  f185		       07		      .BYTE.b	%00000111
     44  f186		       00		      .BYTE.b	%00000000
     45  f187		       00		      .BYTE.b	%00000000
     46  f188		       00		      .BYTE.b	%00000000
     47  f189		       00		      .BYTE.b	%00000000
     48  f18a		       07		      .BYTE.b	%00000111
     49  f18b		       38		      .BYTE.b	%00111000
     50  f18c		       c0		      .BYTE.b	%11000000
     51  f18d		       30		      .BYTE.b	%00110000
     52  f18e		       0c		      .BYTE.b	%00001100
     53  f18f		       02		      .BYTE.b	%00000010
     54  f190		       01		      .BYTE.b	%00000001
     55  f191		       01		      .BYTE.b	%00000001
     56  f192		       00		      .BYTE.b	%00000000
     57  f193		       00		      .BYTE.b	%00000000
     58  f194		       01		      .BYTE.b	%00000001
     59  f195		       02		      .BYTE.b	%00000010
     60  f196
     61  f196				   WebImagePF2
     62  f196		       08		      .BYTE.b	%00001000
     63  f197		       04		      .BYTE.b	%00000100
     64  f198		       03		      .BYTE.b	%00000011
     65  f199		       3f		      .BYTE.b	%00111111
     66  f19a		       c2		      .BYTE.b	%11000010
     67  f19b		       04		      .BYTE.b	%00000100
     68  f19c		       08		      .BYTE.b	%00001000
     69  f19d		       08		      .BYTE.b	%00001000
     70  f19e		       10		      .BYTE.b	%00010000
     71  f19f		       20		      .BYTE.b	%00100000
     72  f1a0		       20		      .BYTE.b	%00100000
     73  f1a1		       41		      .BYTE.b	%01000001
     74  f1a2		       8e		      .BYTE.b	%10001110
     75  f1a3		       f0		      .BYTE.b	%11110000
     76  f1a4		       f0		      .BYTE.b	%11110000
     77  f1a5		       8e		      .BYTE.b	%10001110
     78  f1a6		       41		      .BYTE.b	%01000001
     79  f1a7		       20		      .BYTE.b	%00100000
     80  f1a8		       20		      .BYTE.b	%00100000
     81  f1a9		       10		      .BYTE.b	%00010000
     82  f1aa		       08		      .BYTE.b	%00001000
     83  f1ab		       08		      .BYTE.b	%00001000
     84  f1ac		       04		      .BYTE.b	%00000100
     85  f1ad		       c2		      .BYTE.b	%11000010
     86  f1ae		       3f		      .BYTE.b	%00111111
     87  f1af		       03		      .BYTE.b	%00000011
     88  f1b0		       04		      .BYTE.b	%00000100
     89  f1b1		       08		      .BYTE.b	%00001000
------- FILE kernel.asm
    169  f1b2
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f1b2					      include	"objects/spider_sprite.asm"
      1  f1b2				   SpiderSprite
      2  f1b2
      3  f1b2		       99		      .BYTE.b	%10011001
      4  f1b3		       bd		      .BYTE.b	%10111101
      5  f1b4		       bd		      .BYTE.b	%10111101
      6  f1b5		       bd		      .BYTE.b	%10111101
      7  f1b6		       7e		      .BYTE.b	%01111110
      8  f1b7		       3c		      .BYTE.b	%00111100
      9  f1b8		       18		      .BYTE.b	%00011000
     10  f1b9		       3c		      .BYTE.b	%00111100
     11  f1ba		       3c		      .BYTE.b	%00111100
     12  f1bb		       7e		      .BYTE.b	%01111110
     13  f1bc		       99		      .BYTE.b	%10011001
     14  f1bd		       99		      .BYTE.b	%10011001
     15  f1be		       bd		      .BYTE.b	%10111101
     16  f1bf		       db		      .BYTE.b	%11011011
     17  f1c0		       bd		      .BYTE.b	%10111101
     18  f1c1		       99		      .BYTE.b	%10011001
     19  f1c2
     20  f1c2		       c7		      .BYTE.b	%11000111
     21  f1c3		       c7		      .BYTE.b	%11000111
     22  f1c4		       28		      .BYTE.b	%00101000
     23  f1c5		       28		      .BYTE.b	%00101000
     24  f1c6		       3a		      .BYTE.b	%00111010
     25  f1c7		       7a		      .BYTE.b	%01111010
     26  f1c8		       fd		      .BYTE.b	%11111101
     27  f1c9		       ff		      .BYTE.b	%11111111
     28  f1ca		       ff		      .BYTE.b	%11111111
     29  f1cb		       fd		      .BYTE.b	%11111101
     30  f1cc		       7a		      .BYTE.b	%01111010
     31  f1cd		       3a		      .BYTE.b	%00111010
     32  f1ce		       28		      .BYTE.b	%00101000
     33  f1cf		       28		      .BYTE.b	%00101000
     34  f1d0		       c7		      .BYTE.b	%11000111
     35  f1d1		       c7		      .BYTE.b	%11000111
     36  f1d2
     37  f1d2		       99		      .BYTE.b	%10011001
     38  f1d3		       bd		      .BYTE.b	%10111101
     39  f1d4		       db		      .BYTE.b	%11011011
     40  f1d5		       bd		      .BYTE.b	%10111101
     41  f1d6		       99		      .BYTE.b	%10011001
     42  f1d7		       99		      .BYTE.b	%10011001
     43  f1d8		       7e		      .BYTE.b	%01111110
     44  f1d9		       3c		      .BYTE.b	%00111100
     45  f1da		       3c		      .BYTE.b	%00111100
     46  f1db		       18		      .BYTE.b	%00011000
     47  f1dc		       3c		      .BYTE.b	%00111100
     48  f1dd		       7e		      .BYTE.b	%01111110
     49  f1de		       bd		      .BYTE.b	%10111101
     50  f1df		       bd		      .BYTE.b	%10111101
     51  f1e0		       bd		      .BYTE.b	%10111101
     52  f1e1		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    171  f1e2
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1e2					      include	"objects/swatter_sprite.asm"
      1  f1e2				   SwatterSprite
      2  f1e2
      3  f1e2		       18		      .BYTE.b	%00011000
      4  f1e3		       34		      .BYTE.b	%00110100
      5  f1e4		       2c		      .BYTE.b	%00101100
      6  f1e5		       34		      .BYTE.b	%00110100
      7  f1e6		       6a		      .BYTE.b	%01101010
      8  f1e7		       56		      .BYTE.b	%01010110
      9  f1e8		       6a		      .BYTE.b	%01101010
     10  f1e9		       56		      .BYTE.b	%01010110
     11  f1ea		       ab		      .BYTE.b	%10101011
     12  f1eb		       d5		      .BYTE.b	%11010101
     13  f1ec		       ab		      .BYTE.b	%10101011
     14  f1ed		       d5		      .BYTE.b	%11010101
     15  f1ee		       ab		      .BYTE.b	%10101011
     16  f1ef		       d5		      .BYTE.b	%11010101
     17  f1f0		       ab		      .BYTE.b	%10101011
     18  f1f1		       d5		      .BYTE.b	%11010101
     19  f1f2		       6a		      .BYTE.b	%01101010
     20  f1f3		       56		      .BYTE.b	%01010110
     21  f1f4		       3c		      .BYTE.b	%00111100
     22  f1f5		       3c		      .BYTE.b	%00111100
------- FILE kernel.asm
    173  f1f6
    174  f1f6							;    include "logo_image.asm"
    175  f1f6
    176  f1f6				   InitSystem
    177  f1f6
    178  f1f6				   .init_clean
    179  f1f6							; Resets RAM, TIA registers, and CPU registers
      0  f1f6					      CLEAN_START
      1  f1f6		       78		      sei
      2  f1f7		       d8		      cld
      3  f1f8
      4  f1f8		       a2 00		      ldx	#0
      5  f1fa		       8a		      txa
      6  f1fb		       a8		      tay
      7  f1fc		       ca	   .CLEAR_STACK dex
      8  f1fd		       9a		      txs
      9  f1fe		       48		      pha
     10  f1ff		       d0 fb		      bne	.CLEAR_STACK
     11  f201
    181  f201
    182  f201				   .init_seed
    183  f201							; Seed the random number generator
    184  f201		       ad 84 02 	      lda	INTIM	; Unknown value
    185  f204		       85 84		      sta	Rand8	; Use as seed
    186  f206		       49 ff		      eor	#$FF	; Flip bits
    187  f208		       85 85		      sta	Rand16	; Just in case INTIM was 0
    188  f20a
    189  f20a				   .init_game
    190  f20a
    191  f20a							;    jsr LogoInit
    192  f20a		       20 72 f2 	      jsr	TitleInit
    193  f20d
    194  f20d							;=======================================
    195  f20d							; Game Kernel
    196  f20d							;=======================================
    197  f20d
    198  f20d				   Main
    199  f20d
    200  f20d		       20 1c f2 	      jsr	VerticalSync
    201  f210		       20 35 f2 	      jsr	VerticalBlank
    202  f213		       20 48 f2 	      jsr	Kernel
    203  f216		       20 4f f2 	      jsr	OverScan
    204  f219		       4c 0d f2 	      jmp	Main
    205  f21c
    206  f21c				   VerticalSync
    207  f21c
    208  f21c		       a9 00		      lda	#0
    209  f21e		       85 01		      sta	VBLANK
    210  f220
    211  f220							; Turn on Vertical Sync signal and setup timer
    212  f220		       a9 02		      lda	#2
    213  f222		       85 00		      sta	VSYNC
    214  f224
    215  f224							; Increment frame count and reduce frame counter
    216  f224		       e6 8c		      inc	Frame
    217  f226		       c6 8d		      dec	FrameTimer
    218  f228		       c6 8e		      dec	FrameTimer+1
    219  f22a
    220  f22a							; VSYNCH signal scanlines
    221  f22a					      REPEAT	#KERNEL_VSYNC
    222  f22a		       85 02		      sta	WSYNC
    221  f22a					      REPEND
    222  f22c		       85 02		      sta	WSYNC
    221  f22c					      REPEND
    222  f22e		       85 02		      sta	WSYNC
    223  f230					      REPEND
    224  f230
    225  f230							; Turn off Vertical Sync signal
    226  f230		       a9 00		      lda	#0
    227  f232		       85 00		      sta	VSYNC
    228  f234
    229  f234				   .vsync_return
    230  f234		       60		      rts
    231  f235
    232  f235				   VerticalBlank
    233  f235							; Setup Timer
    234  f235		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    235  f237		       8d 96 02 	      sta	TIM64T
    236  f23a
    237  f23a				   .vblank_logic
    238  f23a							; Perform Game Logic
    239  f23a		       20 45 f2 	      jsr	.vblank_logic_call_ptr
    240  f23d
    241  f23d				   .vblank_loop
    242  f23d							; WSYNC until Timer is complete
    243  f23d		       85 02		      sta	WSYNC
    244  f23f		       ad 84 02 	      lda	INTIM
    245  f242		       d0 f9		      bne	.vblank_loop
    246  f244
    247  f244				   .vblank_return
    248  f244		       60		      rts
    249  f245
    250  f245				   .vblank_logic_call_ptr
    251  f245		       6c 86 00 	      jmp	(VBlankPtr)
    252  f248
    253  f248				   Kernel
    254  f248
    255  f248							; Perform Selected Kernel
    256  f248		       20 4c f2 	      jsr	.kernel_call_ptr
    257  f24b		       60		      rts
    258  f24c
    259  f24c				   .kernel_call_ptr
    260  f24c		       6c 88 00 	      jmp	(KernelPtr)
    261  f24f
    262  f24f				   OverScan
    263  f24f
    264  f24f							; End of screen, enter blanking
    265  f24f		       a9 42		      lda	#%01000010
    266  f251		       85 01		      sta	VBLANK
    267  f253
    268  f253							; Setup Timer
    269  f253		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    270  f255		       8d 96 02 	      sta	TIM64T
    271  f258
    272  f258				   .overscan_reset
    273  f258							; Check for reset switch
    274  f258		       ad 82 02 	      lda	SWCHB
    275  f25b		       4a		      lsr		; Push D0 to carry (C)
    276  f25c		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    277  f25e
    278  f25e							; Perform reset
    279  f25e							;    jsr LogoInit	      ; No need for logic
    280  f25e		       20 72 f2 	      jsr	TitleInit
    281  f261		       4c 67 f2 	      jmp	.overscan_loop
    282  f264
    283  f264				   .overscan_logic
    284  f264							; Perform OverScan Logic
    285  f264		       20 6f f2 	      jsr	.overscan_logic_call_ptr
    286  f267
    287  f267				   .overscan_loop
    288  f267							; WSYNC until Timer is complete
    289  f267		       85 02		      sta	WSYNC
    290  f269		       ad 84 02 	      lda	INTIM
    291  f26c		       d0 f9		      bne	.overscan_loop
    292  f26e
    293  f26e				   .overscan_return
    294  f26e		       60		      rts
    295  f26f
    296  f26f				   .overscan_logic_call_ptr
    297  f26f		       6c 8a 00 	      jmp	(OverScanPtr)
    298  f272
    299  f272							;================
    300  f272							; State Code
    301  f272							;================
    302  f272
    303  f272							;    include "logo.asm"
------- FILE title.asm LEVEL 2 PASS 2
      0  f272					      include	"title.asm"
      1  f272							;================
      2  f272							; Constants
      3  f272							;================
      4  f272
      5  f272		       00 00	   TITLE_BG_COLOR =	#$00
      6  f272		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f272		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f272		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f272		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f272
     11  f272		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f272		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f272		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f272		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f272		       00 09	   TITLE_AUDIO_STEP =	9
     16  f272
     17  f272		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f272		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f272		       00 07	   TITLE_LABEL_LINE =	7
     20  f272
     21  f272		       00 10	   TITLE_GAP_SIZE =	#16
     22  f272
     23  f272		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f272		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f272		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f272
     27  f272				   TitleInit
     28  f272
     29  f272							; Setup logic and kernel
      0  f272					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f272				   .POINTER   SET	VBlankPtr
      2  f272				   .ADDRESS   SET	TitleVerticalBlank
      3  f272
      4  f272		       a9 b9		      LDA	#<.ADDRESS
      5  f274		       85 86		      STA	.POINTER
      6  f276		       a9 f2		      LDA	#>.ADDRESS
      7  f278		       85 87		      STA	.POINTER+1
      8  f27a
      0  f27a					      SET_POINTER	KernelPtr, TitleKernel
      1  f27a				   .POINTER   SET	KernelPtr
      2  f27a				   .ADDRESS   SET	TitleKernel
      3  f27a
      4  f27a		       a9 ed		      LDA	#<.ADDRESS
      5  f27c		       85 88		      STA	.POINTER
      6  f27e		       a9 f3		      LDA	#>.ADDRESS
      7  f280		       85 89		      STA	.POINTER+1
      8  f282
      0  f282					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f282				   .POINTER   SET	OverScanPtr
      2  f282				   .ADDRESS   SET	TitleOverScan
      3  f282
      4  f282		       a9 7a		      LDA	#<.ADDRESS
      5  f284		       85 8a		      STA	.POINTER
      6  f286		       a9 f3		      LDA	#>.ADDRESS
      7  f288		       85 8b		      STA	.POINTER+1
      8  f28a
     33  f28a
     34  f28a							; Load audio settings
     35  f28a
     36  f28a							; Melody Line
     37  f28a		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f28c		       85 15		      sta	AUDC0
     39  f28e							;lda #TITLE_AUDIO_0_VOLUME
     40  f28e							;sta AUDV0
     41  f28e
     42  f28e							; Make it so that we play the first note immediately
     43  f28e		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     44  f290		       85 91		      sta	AudioStep
     45  f292		       a9 01		      lda	#1
     46  f294		       85 8d		      sta	FrameTimer
     47  f296
     48  f296							; Setup Spider Sprite
      0  f296					      SET_POINTER	SpiderPtr, TitleSpider
      1  f296				   .POINTER   SET	SpiderPtr
      2  f296				   .ADDRESS   SET	TitleSpider
      3  f296
      4  f296		       a9 b8		      LDA	#<.ADDRESS
      5  f298		       85 a9		      STA	.POINTER
      6  f29a		       a9 f0		      LDA	#>.ADDRESS
      7  f29c		       85 aa		      STA	.POINTER+1
      8  f29e
     50  f29e
     51  f29e		       a9 16		      lda	#%00010110	; Triple Sprite and 2 clock size missle0
     52  f2a0		       85 04		      sta	NUSIZ0
     53  f2a2		       a9 06		      lda	#%00000110	; Triple Sprite
     54  f2a4		       85 05		      sta	NUSIZ1
     55  f2a6
     56  f2a6		       a9 ff		      lda	#$FF	; Reflect P1
     57  f2a8		       85 0c		      sta	REFP1
     58  f2aa		       a9 00		      lda	#0	; No reflect
     59  f2ac		       85 0b		      sta	REFP0
     60  f2ae
     61  f2ae							; Drums and Bass
     62  f2ae							;lda #0
     63  f2ae							;sta AUDC1
     64  f2ae		       85 1a		      sta	AUDV1
     65  f2b0
     66  f2b0							;lda #0
     67  f2b0		       85 af		      sta	SpiderDrawPos	; Initialize animation state
     68  f2b2
     69  f2b2							; Disable at start
     70  f2b2							;lda #0
     71  f2b2		       85 1d		      sta	ENAM0
     72  f2b4
     73  f2b4							; Set initial button state
     74  f2b4							;lda #0
     75  f2b4		       85 8f		      sta	InputState
     76  f2b6
     77  f2b6							; Set initial select state
     78  f2b6		       85 82		      sta	Temp+2
     79  f2b8
     80  f2b8		       60		      rts
     81  f2b9
     82  f2b9				   TitleVerticalBlank
     83  f2b9
     84  f2b9							; Refresh random values
     85  f2b9		       20 13 f0 	      jsr	Random
     86  f2bc
     87  f2bc		       20 c6 f2 	      jsr	TitlePosition
     88  f2bf		       20 e0 f2 	      jsr	TitleAnimation
     89  f2c2		       20 5d f3 	      jsr	TitleColor
     90  f2c5
     91  f2c5		       60		      rts
     92  f2c6
     93  f2c6				   TitlePosition
     94  f2c6
     95  f2c6							; Position Spider
     96  f2c6		       a2 00		      ldx	#0	; Object (player0)
     97  f2c8		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
     98  f2ca		       20 00 f0 	      jsr	PosObject
     99  f2cd
    100  f2cd		       a2 01		      ldx	#1	; Object (player1)
    101  f2cf		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    102  f2d1		       20 00 f0 	      jsr	PosObject
    103  f2d4
    104  f2d4							; Position Web Line
    105  f2d4		       a2 02		      ldx	#2	; Object (missle0)
    106  f2d6		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    107  f2d8		       20 00 f0 	      jsr	PosObject
    108  f2db
    109  f2db		       85 02		      sta	WSYNC
    110  f2dd		       85 2a		      sta	HMOVE
    111  f2df
    112  f2df		       60		      rts
    113  f2e0
    114  f2e0				   TitleAnimation
    115  f2e0
    116  f2e0		       ad 82 02 	      lda	SWCHB
    117  f2e3		       29 02		      and	#%00000010
    118  f2e5		       d0 09		      bne	.title_animation_state_check
    119  f2e7
    120  f2e7		       a5 82		      lda	Temp+2
    121  f2e9
    122  f2e9				   .title_animation_state_on
    123  f2e9		       09 40		      ora	#%01000000
    124  f2eb		       85 82		      sta	Temp+2
    125  f2ed		       4c 03 f3 	      jmp	.title_animation_load
    126  f2f0
    127  f2f0				   .title_animation_state_check
    128  f2f0		       24 82		      bit	Temp+2
    129  f2f2		       50 0f		      bvc	.title_animation_load
    130  f2f4
    131  f2f4		       a5 82		      lda	Temp+2
    132  f2f6		       29 bf		      and	#%10111111
    133  f2f8
    134  f2f8				   .title_animation_state_swap
    135  f2f8		       10 05		      bpl	.title_animation_state_bug
    136  f2fa
    137  f2fa				   .title_animation_state_spider
    138  f2fa		       29 7f		      and	#%01111111
    139  f2fc		       4c 01 f3 	      jmp	.title_animation_state_set
    140  f2ff
    141  f2ff				   .title_animation_state_bug
    142  f2ff		       09 80		      ora	#%10000000
    143  f301
    144  f301				   .title_animation_state_set
    145  f301		       85 82		      sta	Temp+2
    146  f303
    147  f303				   .title_animation_load
    148  f303
    149  f303		       24 82		      bit	Temp+2
    150  f305		       30 2b		      bmi	.title_animation_bug
    151  f307
    152  f307				   .title_animation_spider
    153  f307
    154  f307		       a5 91		      lda	AudioStep
    155  f309		       f0 0d		      beq	.title_animation_spider_1
    156  f30b		       c9 04		      cmp	#4
    157  f30d		       f0 16		      beq	.title_animation_spider_2
    158  f30f		       c9 09		      cmp	#9
    159  f311		       f0 05		      beq	.title_animation_spider_1
    160  f313		       c9 0c		      cmp	#12
    161  f315		       f0 0e		      beq	.title_animation_spider_2
    162  f317		       60		      rts
    163  f318
    164  f318				   .title_animation_spider_1
      0  f318					      SET_POINTER	SpiderPtr, TitleSpider
      1  f318				   .POINTER   SET	SpiderPtr
      2  f318				   .ADDRESS   SET	TitleSpider
      3  f318
      4  f318		       a9 b8		      LDA	#<.ADDRESS
      5  f31a		       85 a9		      STA	.POINTER
      6  f31c		       a9 f0		      LDA	#>.ADDRESS
      7  f31e		       85 aa		      STA	.POINTER+1
      8  f320
    166  f320		       a9 00		      lda	#0
    167  f322		       4c 5a f3 	      jmp	.title_animation_return
    168  f325
    169  f325				   .title_animation_spider_2
      0  f325					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f325				   .POINTER   SET	SpiderPtr
      2  f325				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f325
      4  f325		       a9 c1		      LDA	#<.ADDRESS
      5  f327		       85 a9		      STA	.POINTER
      6  f329		       a9 f0		      LDA	#>.ADDRESS
      7  f32b		       85 aa		      STA	.POINTER+1
      8  f32d
    171  f32d		       a9 01		      lda	#1
    172  f32f		       4c 5a f3 	      jmp	.title_animation_return
    173  f332
    174  f332				   .title_animation_bug
    175  f332
    176  f332		       a5 91		      lda	AudioStep
    177  f334		       f0 0d		      beq	.title_animation_bug_1
    178  f336		       c9 04		      cmp	#4
    179  f338		       f0 16		      beq	.title_animation_bug_2
    180  f33a		       c9 09		      cmp	#9
    181  f33c		       f0 05		      beq	.title_animation_bug_1
    182  f33e		       c9 0c		      cmp	#12
    183  f340		       f0 0e		      beq	.title_animation_bug_2
    184  f342		       60		      rts
    185  f343
    186  f343				   .title_animation_bug_1
      0  f343					      SET_POINTER	SpiderPtr, TitleBug
      1  f343				   .POINTER   SET	SpiderPtr
      2  f343				   .ADDRESS   SET	TitleBug
      3  f343
      4  f343		       a9 ca		      LDA	#<.ADDRESS
      5  f345		       85 a9		      STA	.POINTER
      6  f347		       a9 f0		      LDA	#>.ADDRESS
      7  f349		       85 aa		      STA	.POINTER+1
      8  f34b
    188  f34b		       a9 00		      lda	#0
    189  f34d		       4c 5a f3 	      jmp	.title_animation_return
    190  f350
    191  f350				   .title_animation_bug_2
      0  f350					      SET_POINTER	SpiderPtr, TitleBug+#TITLE_SPIDER_SIZE
      1  f350				   .POINTER   SET	SpiderPtr
      2  f350				   .ADDRESS   SET	TitleBug+#TITLE_SPIDER_SIZE
      3  f350
      4  f350		       a9 d3		      LDA	#<.ADDRESS
      5  f352		       85 a9		      STA	.POINTER
      6  f354		       a9 f0		      LDA	#>.ADDRESS
      7  f356		       85 aa		      STA	.POINTER+1
      8  f358
    193  f358		       a9 01		      lda	#1
    194  f35a
    195  f35a				   .title_animation_return
    196  f35a		       85 af		      sta	SpiderDrawPos
    197  f35c		       60		      rts
    198  f35d
    199  f35d				   TitleColor
    200  f35d
    201  f35d							; Load Colors
    202  f35d		       a9 00		      lda	#TITLE_BG_COLOR
    203  f35f		       85 09		      sta	COLUBK
    204  f361		       a9 06		      lda	#TITLE_WEB_COLOR
    205  f363		       85 08		      sta	COLUPF
    206  f365
    207  f365							; Check b/w
    208  f365		       ad 82 02 	      lda	SWCHB
    209  f368		       29 08		      and	#%00001000
    210  f36a		       f0 07		      beq	.title_bw
    211  f36c
    212  f36c				   .title_color
    213  f36c		       a9 56		      lda	#TITLE_SPIDER_COLOR
    214  f36e		       85 06		      sta	COLUP0
    215  f370		       85 07		      sta	COLUP1
    216  f372
    217  f372		       60		      rts
    218  f373
    219  f373				   .title_bw
    220  f373							; Load B/W Colors
    221  f373		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    222  f375		       85 06		      sta	COLUP0
    223  f377		       85 07		      sta	COLUP1
    224  f379
    225  f379		       60		      rts
    226  f37a
    227  f37a				   TitleOverScan
    228  f37a		       20 81 f3 	      jsr	TitleAudio
    229  f37d		       20 bc f3 	      jsr	TitleState
    230  f380		       60		      rts
    231  f381
    232  f381				   TitleAudio
    233  f381
    234  f381		       a6 8d		      ldx	FrameTimer
    235  f383		       d0 36		      bne	.title_audio_return
    236  f385
    237  f385							; Reset Timer
    238  f385		       a2 09		      ldx	#TITLE_AUDIO_STEP
    239  f387		       86 8d		      stx	FrameTimer
    240  f389
    241  f389				   .title_audio_play
    242  f389
    243  f389							; Increment melody position
    244  f389		       a4 91		      ldy	AudioStep
    245  f38b		       c8		      iny
    246  f38c
    247  f38c							; Check if we're at the end of the melody
    248  f38c		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    249  f38e		       d0 02		      bne	.title_audio_play_note
    250  f390
    251  f390							; Loop our audio step
    252  f390		       a0 00		      ldy	#0
    253  f392
    254  f392				   .title_audio_play_note
    255  f392
    256  f392							; Save current position
    257  f392		       84 91		      sty	AudioStep
    258  f394
    259  f394				   .title_audio_play_melody
    260  f394							; Basic Melody Line
    261  f394		       b9 d1 f4 	      lda	TitleAudio0,y
    262  f397		       30 09		      bmi	.title_audio_play_melody_mute
    263  f399
    264  f399		       85 17		      sta	AUDF0
    265  f39b		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
    266  f39d		       85 19		      sta	AUDV0
    267  f39f
    268  f39f		       4c a6 f3 	      jmp	.title_audio_play_rhythm
    269  f3a2
    270  f3a2				   .title_audio_play_melody_mute
    271  f3a2
    272  f3a2		       a9 00		      lda	#0
    273  f3a4		       85 19		      sta	AUDV0
    274  f3a6
    275  f3a6				   .title_audio_play_rhythm
    276  f3a6
    277  f3a6							; Drums and Bass
    278  f3a6		       b9 e1 f4 	      lda	TitleTone1,y
    279  f3a9		       30 0c		      bmi	.title_audio_play_rhythm_mute
    280  f3ab
    281  f3ab		       85 16		      sta	AUDC1
    282  f3ad		       b9 f1 f4 	      lda	TitleAudio1,y
    283  f3b0		       85 18		      sta	AUDF1
    284  f3b2		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    285  f3b4		       85 1a		      sta	AUDV1
    286  f3b6
    287  f3b6		       60		      rts
    288  f3b7
    289  f3b7				   .title_audio_play_rhythm_mute
    290  f3b7
    291  f3b7		       a9 00		      lda	#0
    292  f3b9							;sta AUDF1
    293  f3b9							;sta AUDC1
    294  f3b9		       85 1a		      sta	AUDV1
    295  f3bb
    296  f3bb				   .title_audio_return
    297  f3bb		       60		      rts
    298  f3bc
    299  f3bc				   TitleState
    300  f3bc
    301  f3bc		       a2 01		      ldx	#1
    302  f3be
    303  f3be				   .title_state
    304  f3be							; Check if fire button on controller is released
    305  f3be		       b5 0c		      lda	INPT4,x
    306  f3c0		       30 0c		      bmi	.title_state_check
    307  f3c2
    308  f3c2				   .title_state_on
    309  f3c2		       a9 40		      lda	#%01000000
    310  f3c4		       e0 01		      cpx	#1
    311  f3c6		       d0 02		      bne	.title_state_on_set
    312  f3c8				   .title_state_on_1
    313  f3c8		       a9 80		      lda	#%10000000
    314  f3ca				   .title_state_on_set
    315  f3ca		       05 8f		      ora	InputState
    316  f3cc		       85 8f		      sta	InputState
    317  f3ce
    318  f3ce				   .title_state_check
    319  f3ce		       8a		      txa
    320  f3cf		       d0 07		      bne	.title_state_check_1
    321  f3d1				   .title_state_check_0
    322  f3d1		       24 8f		      bit	InputState
    323  f3d3		       70 0b		      bvs	.title_state_type_0
    324  f3d5		       4c dc f3 	      jmp	.title_state_dec
    325  f3d8				   .title_state_check_1
    326  f3d8		       24 8f		      bit	InputState
    327  f3da		       30 09		      bmi	.title_state_type_1
    328  f3dc
    329  f3dc				   .title_state_dec
    330  f3dc		       ca		      dex
    331  f3dd		       10 df		      bpl	.title_state
    332  f3df
    333  f3df		       60		      rts
    334  f3e0
    335  f3e0				   .title_state_type_0
    336  f3e0		       a9 40		      lda	#%01000000
    337  f3e2		       4c e7 f3 	      jmp	.title_state_type_set
    338  f3e5				   .title_state_type_1
    339  f3e5		       a9 80		      lda	#%10000000
    340  f3e7				   .title_state_type_set
    341  f3e7		       85 93		      sta	GameType
    342  f3e9				   .title_state_next
    343  f3e9							; Button is released, load up game
    344  f3e9		       20 e4 fb 	      jsr	GameInit
    345  f3ec
    346  f3ec				   .title_state_return
    347  f3ec		       60		      rts
    348  f3ed
    349  f3ed				   TitleKernel
    350  f3ed
    351  f3ed							; Playfield Control
    352  f3ed		       a9 00		      lda	#%00000000	; No mirroring
    353  f3ef		       85 0a		      sta	CTRLPF
    354  f3f1
    355  f3f1							; Turn on display
    356  f3f1							;lda #0
    357  f3f1		       85 01		      sta	VBLANK
    358  f3f3
    359  f3f3		       85 02		      sta	WSYNC
    360  f3f5
    361  f3f5				   TitleFrameTopDraw
    362  f3f5
    363  f3f5							; Start Counters
    364  f3f5		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    365  f3f7		       a0 00		      ldy	#0	; Image Counter
    366  f3f9
    367  f3f9				   .title_frame_top
    368  f3f9
    369  f3f9							; 76 machine cycles per scanline
    370  f3f9		       85 02		      sta	WSYNC
    371  f3fb
    372  f3fb				   .title_frame_top_load		; 66 cycles
    373  f3fb
    374  f3fb							; First half of image
    375  f3fb		       b9 52 f0 	      lda	TitleFrameTop,y	; 5
    376  f3fe		       85 0d		      sta	PF0	; 4
    377  f400		       b9 53 f0 	      lda	TitleFrameTop+1,y	; 5
    378  f403		       85 0e		      sta	PF1	; 4
    379  f405		       b9 54 f0 	      lda	TitleFrameTop+2,y	; 5
    380  f408		       85 0f		      sta	PF2	; 4
    381  f40a
      0  f40a					      sleep	6
      1  f40a				   .CYCLES    SET	6
      2  f40a
      3  f40a				  -	      IF	.CYCLES < 2
      4  f40a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f40a				  -	      ERR
      6  f40a					      ENDIF
      7  f40a
      8  f40a				  -	      IF	.CYCLES & 1
      9  f40a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f40a				  -	      nop	0
     11  f40a				  -	      ELSE
     12  f40a				  -	      bit	VSYNC
     13  f40a				  -	      ENDIF
     14  f40a				  -.CYCLES    SET	.CYCLES - 3
     15  f40a					      ENDIF
     16  f40a
     17  f40a					      REPEAT	.CYCLES / 2
     18  f40a		       ea		      nop
     17  f40a					      REPEND
     18  f40b		       ea		      nop
     17  f40b					      REPEND
     18  f40c		       ea		      nop
     19  f40d					      REPEND
    383  f40d
    384  f40d							; Second half of image
    385  f40d		       b9 55 f0 	      lda	TitleFrameTop+3,y	; 5
    386  f410		       85 0d		      sta	PF0	; 4
    387  f412		       b9 56 f0 	      lda	TitleFrameTop+4,y	; 5
    388  f415		       85 0e		      sta	PF1	; 4
    389  f417		       b9 57 f0 	      lda	TitleFrameTop+5,y	; 5
    390  f41a		       85 0f		      sta	PF2	; 4
    391  f41c
    392  f41c				   .title_frame_top_index		; 4 cycles
    393  f41c
    394  f41c		       ca		      dex		; 2
    395  f41d		       d0 da		      bne	.title_frame_top	; 2
    396  f41f
    397  f41f				   .title_frame_top_index_next		; 6 cycles
    398  f41f
    399  f41f							; Restore scanline counter
    400  f41f		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    401  f421
    402  f421		       98		      tya		; 2
    403  f422		       18		      clc		; 2
    404  f423		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    405  f425		       a8		      tay		; 2
    406  f426
    407  f426		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    408  f428		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    409  f42a		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    410  f42c		       85 08		      sta	COLUPF	; 4
    411  f42e		       ea		      nop		; 2
    412  f42f		       4c fb f3 	      jmp	.title_frame_top_load	; 3
    413  f432
    414  f432				   .title_frame_top_label_color_skip
    415  f432
    416  f432		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    417  f434		       d0 c3		      bne	.title_frame_top	; 2
    418  f436
    419  f436				   .title_frame_top_clean
    420  f436
    421  f436							; Clear out playfield
    422  f436		       a9 00		      lda	#0
    423  f438		       85 0d		      sta	PF0
    424  f43a		       85 0e		      sta	PF1
    425  f43c		       85 0f		      sta	PF2
    426  f43e
    427  f43e				   TitleWebDraw
    428  f43e
    429  f43e		       a9 00		      lda	#%00000000
    430  f440		       24 82		      bit	Temp+2
    431  f442		       30 02		      bmi	.title_web_set
    432  f444				   .title_web_spider
    433  f444		       a9 02		      lda	#%00000010
    434  f446				   .title_web_set
    435  f446		       85 1d		      sta	ENAM0
    436  f448
    437  f448		       a9 06		      lda	#TITLE_WEB_COLOR
    438  f44a		       85 06		      sta	COLUP0
    439  f44c
    440  f44c		       a2 10		      ldx	#TITLE_GAP_SIZE
    441  f44e		       20 44 f0 	      jsr	BlankLines
    442  f451
    443  f451				   TitleSpiderDraw
    444  f451
    445  f451		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    446  f453
    447  f453		       a5 af		      lda	SpiderDrawPos
    448  f455		       f0 0c		      beq	.title_spider_extra_web_disable
    449  f457
    450  f457				   .title_spider_extra_web_start
    451  f457		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    452  f459				   .title_spider_extra_web_loop
    453  f459		       85 02		      sta	WSYNC
    454  f45b		       ca		      dex
    455  f45c		       d0 fb		      bne	.title_spider_extra_web_loop
    456  f45e
    457  f45e		       88		      dey
    458  f45f		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    459  f461		       d0 f4		      bne	.title_spider_extra_web_start
    460  f463
    461  f463				   .title_spider_extra_web_disable
    462  f463							;lda #0
    463  f463		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    464  f465
    465  f465		       85 02		      sta	WSYNC
    466  f467
    467  f467		       85 1d		      sta	ENAM0
    468  f469
    469  f469							; Check b/w
    470  f469		       ad 82 02 	      lda	SWCHB
    471  f46c		       29 08		      and	#%00001000
    472  f46e		       f0 05		      beq	.title_spider_bw
    473  f470				   .title_spider_color
    474  f470		       a9 56		      lda	#TITLE_SPIDER_COLOR
    475  f472		       4c 77 f4 	      jmp	.title_spider_color_set
    476  f475				   .title_spider_bw
    477  f475		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    478  f477				   .title_spider_color_set
    479  f477		       85 06		      sta	COLUP0
    480  f479
    481  f479				   .title_spider
    482  f479		       b1 a9		      lda	(SpiderPtr),y
    483  f47b		       85 1b		      sta	GRP0
    484  f47d		       85 1c		      sta	GRP1
    485  f47f
    486  f47f				   .title_spider_delay
    487  f47f		       ca		      dex
    488  f480		       85 02		      sta	WSYNC
    489  f482		       d0 fb		      bne	.title_spider_delay
    490  f484
    491  f484				   .title_spider_index
    492  f484		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    493  f486		       88		      dey
    494  f487		       10 f0		      bpl	.title_spider
    495  f489
    496  f489				   .title_spider_clean
    497  f489
    498  f489							; Clear sprites
    499  f489		       a9 00		      lda	#0
    500  f48b		       85 1b		      sta	GRP0
    501  f48d		       85 1c		      sta	GRP1
    502  f48f
    503  f48f				   TitleFrameBottomDraw
    504  f48f
    505  f48f							; Load Frame Color
    506  f48f		       a9 06		      lda	#TITLE_WEB_COLOR
    507  f491		       85 08		      sta	COLUPF
    508  f493
    509  f493							; Start Counters
    510  f493		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    511  f495		       a0 00		      ldy	#0	; Image Counter
    512  f497
    513  f497				   .title_frame_bottom
    514  f497
    515  f497							; 76 machine cycles per scanline
    516  f497		       85 02		      sta	WSYNC
    517  f499
    518  f499				   .title_frame_bottom_load		; 66 cycles
    519  f499
    520  f499							; First half of image
    521  f499		       b9 9a f0 	      lda	TitleFrameBottom,y	; 5
    522  f49c		       85 0d		      sta	PF0	; 4
    523  f49e		       b9 9b f0 	      lda	TitleFrameBottom+1,y	; 5
    524  f4a1		       85 0e		      sta	PF1	; 4
    525  f4a3		       b9 9c f0 	      lda	TitleFrameBottom+2,y	; 5
    526  f4a6		       85 0f		      sta	PF2	; 4
    527  f4a8
      0  f4a8					      sleep	6
      1  f4a8				   .CYCLES    SET	6
      2  f4a8
      3  f4a8				  -	      IF	.CYCLES < 2
      4  f4a8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4a8				  -	      ERR
      6  f4a8					      ENDIF
      7  f4a8
      8  f4a8				  -	      IF	.CYCLES & 1
      9  f4a8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4a8				  -	      nop	0
     11  f4a8				  -	      ELSE
     12  f4a8				  -	      bit	VSYNC
     13  f4a8				  -	      ENDIF
     14  f4a8				  -.CYCLES    SET	.CYCLES - 3
     15  f4a8					      ENDIF
     16  f4a8
     17  f4a8					      REPEAT	.CYCLES / 2
     18  f4a8		       ea		      nop
     17  f4a8					      REPEND
     18  f4a9		       ea		      nop
     17  f4a9					      REPEND
     18  f4aa		       ea		      nop
     19  f4ab					      REPEND
    529  f4ab
    530  f4ab							; Second half of image
    531  f4ab		       b9 9d f0 	      lda	TitleFrameBottom+3,y	; 5
    532  f4ae		       85 0d		      sta	PF0	; 4
    533  f4b0		       b9 9e f0 	      lda	TitleFrameBottom+4,y	; 5
    534  f4b3		       85 0e		      sta	PF1	; 4
    535  f4b5		       b9 9f f0 	      lda	TitleFrameBottom+5,y	; 5
    536  f4b8		       85 0f		      sta	PF2	; 4
    537  f4ba
    538  f4ba				   .title_frame_bottom_index		; 4 cycles
    539  f4ba
    540  f4ba		       ca		      dex		; 2
    541  f4bb		       d0 da		      bne	.title_frame_bottom	; 2
    542  f4bd
    543  f4bd				   .title_frame_bottom_index_next		; 6 cycles
    544  f4bd
    545  f4bd							; Restore scanline counter
    546  f4bd		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    547  f4bf
    548  f4bf		       98		      tya		; 2
    549  f4c0		       18		      clc		; 2
    550  f4c1		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    551  f4c3		       a8		      tay		; 2
    552  f4c4		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    553  f4c6		       d0 cf		      bne	.title_frame_bottom	; 2
    554  f4c8
    555  f4c8				   .title_frame_bottom_clean
    556  f4c8
    557  f4c8							; Clear out playfield
    558  f4c8		       a9 00		      lda	#0
    559  f4ca		       85 0d		      sta	PF0
    560  f4cc		       85 0e		      sta	PF1
    561  f4ce		       85 0f		      sta	PF2
    562  f4d0
    563  f4d0				   .title_kernel_return
    564  f4d0		       60		      rts
    565  f4d1
    566  f4d1				   TitleAudio0
    567  f4d1
    568  f4d1		       0f		      .BYTE.b	#15	; B
    569  f4d2		       13		      .BYTE.b	#19	; G
    570  f4d3		       17		      .BYTE.b	#23	; E
    571  f4d4		       13		      .BYTE.b	#19	; G
    572  f4d5		       0e		      .BYTE.b	#14	; C
    573  f4d6		       0e		      .BYTE.b	#14
    574  f4d7		       ff		      .BYTE.b	#-1
    575  f4d8		       ff		      .BYTE.b	#-1
    576  f4d9		       0c		      .BYTE.b	#12	; D
    577  f4da		       13		      .BYTE.b	#19
    578  f4db		       17		      .BYTE.b	#23
    579  f4dc		       13		      .BYTE.b	#19
    580  f4dd		       0e		      .BYTE.b	#14	; C
    581  f4de		       0e		      .BYTE.b	#14
    582  f4df		       ff		      .BYTE.b	#-1
    583  f4e0		       ff		      .BYTE.b	#-1
    584  f4e1
    585  f4e1				   TitleTone1
    586  f4e1
    587  f4e1		       0f		      .BYTE.b	#15	; Electronic Rumble
    588  f4e2		       ff		      .BYTE.b	#-1
    589  f4e3		       01		      .BYTE.b	#1	; Low Pure Tone
    590  f4e4		       01		      .BYTE.b	#1
    591  f4e5		       08		      .BYTE.b	#8	; White Noise
    592  f4e6		       01		      .BYTE.b	#1
    593  f4e7		       01		      .BYTE.b	#1
    594  f4e8		       ff		      .BYTE.b	#-1
    595  f4e9		       ff		      .BYTE.b	#-1
    596  f4ea		       0f		      .BYTE.b	#15
    597  f4eb		       ff		      .BYTE.b	#-1
    598  f4ec		       ff		      .BYTE.b	#-1
    599  f4ed		       08		      .BYTE.b	#8
    600  f4ee		       ff		      .BYTE.b	#-1
    601  f4ef		       01		      .BYTE.b	#1
    602  f4f0		       01		      .BYTE.b	#1
    603  f4f1
    604  f4f1				   TitleAudio1
    605  f4f1
    606  f4f1		       1d		      .BYTE.b	#29	; Kick
    607  f4f2		       ff		      .BYTE.b	#-1
    608  f4f3		       1f		      .BYTE.b	#31	; C
    609  f4f4		       1f		      .BYTE.b	#31
    610  f4f5		       07		      .BYTE.b	#7	; Snare
    611  f4f6		       1f		      .BYTE.b	#31
    612  f4f7		       1f		      .BYTE.b	#31
    613  f4f8		       ff		      .BYTE.b	#-1
    614  f4f9		       ff		      .BYTE.b	#-1
    615  f4fa		       1d		      .BYTE.b	#29
    616  f4fb		       ff		      .BYTE.b	#-1
    617  f4fc		       ff		      .BYTE.b	#-1
    618  f4fd		       07		      .BYTE.b	#7
    619  f4fe		       ff		      .BYTE.b	#-1
    620  f4ff		       17		      .BYTE.b	#23	; F
    621  f500		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f501					      include	"game.asm"
      1  f501							;================
      2  f501							; Game
      3  f501							;================
      4  f501
      5  f501							; Constants
      6  f501
      7  f501		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f501		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f501		       00 09	   GAME_AUDIO_STEP =	9
     10  f501		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f501		       00 06	   GAME_AUDIO_TONE =	6
     12  f501
     13  f501							; Object Code
     14  f501
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f501					      include	"objects/level.asm"
      1  f501							;======================
      2  f501							; Level Logic
      3  f501							;======================
      4  f501
      5  f501							; Constants
      6  f501
      7  f501		       00 14	   LEVELS     =	20
      8  f501
      9  f501				   LevelInit
     10  f501
     11  f501							; Set beginning level by difficulty switches treated as binary
     12  f501		       ad 82 02 	      lda	SWCHB
     13  f504					      REPEAT	6	; shift to 0-3
     14  f504		       4a		      lsr
     13  f504					      REPEND
     14  f505		       4a		      lsr
     13  f505					      REPEND
     14  f506		       4a		      lsr
     13  f506					      REPEND
     14  f507		       4a		      lsr
     13  f507					      REPEND
     14  f508		       4a		      lsr
     13  f508					      REPEND
     14  f509		       4a		      lsr
     15  f50a					      REPEND
     16  f50a		       18		      clc		; multiply by 5
     17  f50b		       85 80		      sta	Temp
     18  f50d		       0a		      asl
     19  f50e		       0a		      asl
     20  f50f		       65 80		      adc	Temp
     21  f511		       85 a0		      sta	LevelCurrent
     22  f513
     23  f513		       20 3d f5 	      jsr	LevelLoad
     24  f516
     25  f516		       60		      rts
     26  f517
     27  f517				   LevelUpdate
     28  f517
     29  f517							; Calculate Desired score: level*4+23
     30  f517		       a5 a0		      lda	LevelCurrent
     31  f519		       0a		      asl		; x2
     32  f51a		       0a		      asl		; x2
     33  f51b		       69 17		      adc	#23	; +23
     34  f51d
     35  f51d							; Check if score is high enough
     36  f51d		       c5 96		      cmp	ScoreValue+1
     37  f51f		       b0 18		      bcs	.level_update_return
     38  f521
     39  f521							; Check if we haven't reached the final level
     40  f521		       a5 a0		      lda	LevelCurrent
     41  f523		       c9 13		      cmp	#LEVELS-1
     42  f525		       90 09		      bcc	.level_update_next
     43  f527
     44  f527							; Force score to 99
     45  f527		       a9 63		      lda	#99
     46  f529		       85 96		      sta	ScoreValue+1
     47  f52b
     48  f52b							; Show Win Screen
     49  f52b		       38		      sec		; Define win
     50  f52c		       20 b5 fd 	      jsr	OverInit
     51  f52f		       60		      rts
     52  f530
     53  f530				   .level_update_next
     54  f530
     55  f530							; Reset score
     56  f530		       a9 00		      lda	#0
     57  f532		       85 96		      sta	ScoreValue+1
     58  f534
     59  f534		       e6 a0		      inc	LevelCurrent
     60  f536		       20 3d f5 	      jsr	LevelLoad
     61  f539
     62  f539				   .level_update_return
     63  f539
     64  f539		       20 79 f5 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     65  f53c
     66  f53c		       60		      rts
     67  f53d
     68  f53d				   LevelLoad
     69  f53d
     70  f53d							; Game Audio Step: 9-(level/4)
     71  f53d		       a5 a0		      lda	LevelCurrent
     72  f53f		       4a		      lsr		; /2
     73  f540		       4a		      lsr		; /2
     74  f541		       85 80		      sta	Temp
     75  f543		       a9 0a		      lda	#GAME_AUDIO_STEP+1
     76  f545		       18		      clc
     77  f546		       e5 80		      sbc	Temp
     78  f548		       85 94		      sta	GameAudioStep
     79  f54a
     80  f54a							; Bug Speed: level/4+2
     81  f54a		       a5 a0		      lda	LevelCurrent
     82  f54c		       4a		      lsr		; /2
     83  f54d		       4a		      lsr		; /2
     84  f54e		       69 02		      adc	#2
     85  f550		       85 b9		      sta	BugSpeed
     86  f552
     87  f552							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     88  f552		       a9 14		      lda	#20
     89  f554		       18		      clc
     90  f555		       e5 a0		      sbc	LevelCurrent
     91  f557		       0a		      asl		; x2
     92  f558		       85 80		      sta	Temp
     93  f55a		       0a		      asl		; x2
     94  f55b		       0a		      asl		; x2
     95  f55c		       65 80		      adc	Temp
     96  f55e		       85 c5		      sta	SwatterWaitTime
     97  f560
     98  f560							; Swatter Hold Time: 60-(level*2)
     99  f560
    100  f560		       a5 a0		      lda	LevelCurrent
    101  f562		       0a		      asl		; x2
    102  f563		       85 80		      sta	Temp
    103  f565		       a9 3c		      lda	#60
    104  f567		       18		      clc
    105  f568		       e5 80		      sbc	Temp
    106  f56a		       85 c6		      sta	SwatterHoldTime
    107  f56c
    108  f56c							; Swatter Hit Damage: level*3+$10
    109  f56c		       a5 a0		      lda	LevelCurrent
    110  f56e		       18		      clc
    111  f56f		       85 80		      sta	Temp
    112  f571		       0a		      asl		; x2
    113  f572		       65 80		      adc	Temp
    114  f574		       69 10		      adc	#$10
    115  f576		       85 c7		      sta	SwatterHitDamage
    116  f578
    117  f578		       60		      rts
    118  f579
    119  f579				   LevelLoadColor
    120  f579		       a4 a0		      ldy	LevelCurrent
    121  f57b
    122  f57b							; check b/w
    123  f57b		       ad 82 02 	      lda	SWCHB
    124  f57e		       29 08		      and	#%00001000
    125  f580		       f0 0b		      beq	.level_load_bw
    126  f582
    127  f582				   .level_load_color
    128  f582
    129  f582							; Background Color
    130  f582		       b9 96 f5 	      lda	LevelDataBk,y
    131  f585		       85 a2		      sta	WebColor+0
    132  f587
    133  f587							; Web Color
    134  f587		       b9 aa f5 	      lda	LevelDataPf,y
    135  f58a		       85 a3		      sta	WebColor+1
    136  f58c
    137  f58c		       60		      rts
    138  f58d
    139  f58d				   .level_load_bw
    140  f58d
    141  f58d							; Background Color
    142  f58d		       a9 00		      lda	#WEB_BG_COLOR
    143  f58f		       85 a2		      sta	WebColor+0
    144  f591
    145  f591							; Web Color
    146  f591		       a9 02		      lda	#WEB_FG_COLOR
    147  f593		       85 a3		      sta	WebColor+1
    148  f595
    149  f595		       60		      rts
    150  f596
    151  f596							; Easy: 1-5
    152  f596							; Medium: 6-9
    153  f596							; Hard: 10-15
    154  f596							; Extreme: 16-19
    155  f596
    156  f596				   LevelDataBk		; Background Color
    157  f596		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    158  f597		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    159  f598		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    160  f599		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    161  f59a		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    162  f59b		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    163  f59c		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    164  f59d		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    165  f59e		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    166  f59f		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    167  f5a0		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    168  f5a1		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    169  f5a2		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    170  f5a3		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    171  f5a4		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    172  f5a5		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    173  f5a6		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    174  f5a7		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    175  f5a8		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    176  f5a9		       0c		      .BYTE.b	#$0C	; rgb(199, 199, 199)
    177  f5aa
    178  f5aa				   LevelDataPf		; Web Color
    179  f5aa		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    180  f5ab		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    181  f5ac		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    182  f5ad		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    183  f5ae		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    184  f5af		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    185  f5b0		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    186  f5b1		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    187  f5b2		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    188  f5b3		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    189  f5b4		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    190  f5b5		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    191  f5b6		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    192  f5b7		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    193  f5b8		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    194  f5b9		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    195  f5ba		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    196  f5bb		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    197  f5bc		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    198  f5bd		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f5be					      include	"objects/score.asm"
      1  f5be							;======================
      2  f5be							; Score (playfield)
      3  f5be							;======================
      4  f5be
      5  f5be							; Constants
      6  f5be
      7  f5be		       00 00	   SCORE_BG_COLOR =	#$00
      8  f5be		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f5be		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f5be		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f5be		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f5be		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f5be
     14  f5be		       00 05	   SCORE_LABEL_SIZE =	5
     15  f5be		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f5be		       00 02	   SCORE_LINE_SIZE =	2
     17  f5be		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f5be
     19  f5be							; Initialization
     20  f5be
     21  f5be				   ScoreInit
     22  f5be
     23  f5be							; Health Score
     24  f5be		       a9 ff		      lda	#$ff
     25  f5c0		       85 95		      sta	ScoreValue+0
     26  f5c2
     27  f5c2							; Game Score
     28  f5c2		       a9 00		      lda	#0
     29  f5c4		       85 96		      sta	ScoreValue+1
     30  f5c6
     31  f5c6		       60		      rts
     32  f5c7
     33  f5c7							; Frame Update
     34  f5c7
     35  f5c7				   ScoreUpdate
     36  f5c7
     37  f5c7							; Current Level Digits
     38  f5c7		       a5 a0		      lda	LevelCurrent
     39  f5c9		       18		      clc
     40  f5ca		       69 01		      adc	#1
     41  f5cc		       a0 00		      ldy	#0
     42  f5ce		       20 01 f6 	      jsr	ScoreUpdateDigits
     43  f5d1
     44  f5d1							; Score Digits
     45  f5d1		       a5 96		      lda	ScoreValue+1
     46  f5d3		       a0 01		      ldy	#1
     47  f5d5		       20 01 f6 	      jsr	ScoreUpdateDigits
     48  f5d8
     49  f5d8							; Health Bar
     50  f5d8		       a5 95		      lda	ScoreValue+0
     51  f5da		       f0 1c		      beq	.score_update_bar_empty
     52  f5dc
     53  f5dc					      REPEAT	4
     54  f5dc		       4a		      lsr
     53  f5dc					      REPEND
     54  f5dd		       4a		      lsr
     53  f5dd					      REPEND
     54  f5de		       4a		      lsr
     53  f5de					      REPEND
     54  f5df		       4a		      lsr
     55  f5e0					      REPEND
     56  f5e0		       c9 08		      cmp	#8
     57  f5e2		       b0 09		      bcs	.score_update_bar_top
     58  f5e4
     59  f5e4				   .score_update_bar_bottom
     60  f5e4		       aa		      tax
     61  f5e5		       bd 2c f7 	      lda	ScoreBar,x
     62  f5e8		       a0 00		      ldy	#$00
     63  f5ea		       4c fc f5 	      jmp	.score_update_bar_store
     64  f5ed
     65  f5ed				   .score_update_bar_top
     66  f5ed		       29 07		      and	#%00000111
     67  f5ef		       aa		      tax
     68  f5f0		       a9 7f		      lda	#$7f
     69  f5f2		       bc 34 f7 	      ldy	ScoreBarFlip,x
     70  f5f5		       4c fc f5 	      jmp	.score_update_bar_store
     71  f5f8
     72  f5f8				   .score_update_bar_empty
     73  f5f8		       a9 00		      lda	#0
     74  f5fa		       a0 00		      ldy	#0
     75  f5fc
     76  f5fc				   .score_update_bar_store
     77  f5fc		       85 9e		      sta	ScoreBarGfx+0
     78  f5fe		       84 9f		      sty	ScoreBarGfx+1
     79  f600
     80  f600				   .score_update_end
     81  f600		       60		      rts
     82  f601
     83  f601				   ScoreUpdateDigits		; Value in A, ScoreDigit index in Y
     84  f601
     85  f601		       84 83		      sty	Temp+3
     86  f603
     87  f603		       20 21 f0 	      jsr	BinBcdConvert
     88  f606
     89  f606							; Only use first byte
     90  f606		       8a		      txa
     91  f607		       29 0f		      and	#$0f
     92  f609		       a8		      tay
     93  f60a		       8a		      txa
     94  f60b		       29 f0		      and	#$f0
     95  f60d					      REPEAT	4
     96  f60d		       4a		      lsr
     95  f60d					      REPEND
     96  f60e		       4a		      lsr
     95  f60e					      REPEND
     96  f60f		       4a		      lsr
     95  f60f					      REPEND
     96  f610		       4a		      lsr
     97  f611					      REPEND
     98  f611		       aa		      tax
     99  f612
    100  f612							; Adjust index positions by multiplying by 5
    101  f612		       8a		      txa
    102  f613		       85 80		      sta	Temp
    103  f615		       0a		      asl
    104  f616		       0a		      asl
    105  f617		       65 80		      adc	Temp
    106  f619		       a6 83		      ldx	Temp+3
    107  f61b		       95 99		      sta	ScoreDigitTens,x
    108  f61d
    109  f61d		       98		      tya
    110  f61e		       85 80		      sta	Temp
    111  f620		       0a		      asl
    112  f621		       0a		      asl
    113  f622		       65 80		      adc	Temp
    114  f624		       a4 83		      ldy	Temp+3
    115  f626		       99 97 00 	      sta	ScoreDigitOnes,y
    116  f629
    117  f629		       60		      rts
    118  f62a
    119  f62a							; Draw loop (uses SCORE_LINES scanlines)
    120  f62a
    121  f62a				   ScoreDraw
    122  f62a
    123  f62a							; Load Colors
    124  f62a		       a9 00		      lda	#SCORE_BG_COLOR
    125  f62c		       85 09		      sta	COLUBK
    126  f62e		       a9 06		      lda	#SCORE_LABEL_COLOR
    127  f630		       85 08		      sta	COLUPF
    128  f632		       85 06		      sta	COLUP0
    129  f634		       85 07		      sta	COLUP1
    130  f636
    131  f636							; Set Non-Mirror
    132  f636		       a9 02		      lda	#%00000010
    133  f638		       85 0a		      sta	CTRLPF
    134  f63a
    135  f63a		       a2 00		      ldx	#0
    136  f63c				   .score_draw_label
    137  f63c
    138  f63c		       85 02		      sta	WSYNC
    139  f63e
    140  f63e							; First half of image
    141  f63e		       bd 40 f1 	      lda	ScoreLabel+0,x	; 4
    142  f641		       85 0d		      sta	PF0	; 3
    143  f643		       bd 41 f1 	      lda	ScoreLabel+1,x
    144  f646		       85 0e		      sta	PF1
    145  f648		       bd 42 f1 	      lda	ScoreLabel+2,x
    146  f64b		       85 0f		      sta	PF2
    147  f64d
      0  f64d					      sleep	8
      1  f64d				   .CYCLES    SET	8
      2  f64d
      3  f64d				  -	      IF	.CYCLES < 2
      4  f64d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f64d				  -	      ERR
      6  f64d					      ENDIF
      7  f64d
      8  f64d				  -	      IF	.CYCLES & 1
      9  f64d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f64d				  -	      nop	0
     11  f64d				  -	      ELSE
     12  f64d				  -	      bit	VSYNC
     13  f64d				  -	      ENDIF
     14  f64d				  -.CYCLES    SET	.CYCLES - 3
     15  f64d					      ENDIF
     16  f64d
     17  f64d					      REPEAT	.CYCLES / 2
     18  f64d		       ea		      nop
     17  f64d					      REPEND
     18  f64e		       ea		      nop
     17  f64e					      REPEND
     18  f64f		       ea		      nop
     17  f64f					      REPEND
     18  f650		       ea		      nop
     19  f651					      REPEND
    149  f651
    150  f651							; Second half of image
    151  f651							;lda ScoreLabel+3,x ; 4
    152  f651		       a9 00		      lda	#0	; 2
    153  f653		       85 0d		      sta	PF0	; 3
    154  f655		       bd 44 f1 	      lda	ScoreLabel+4,x
    155  f658		       85 0e		      sta	PF1
    156  f65a		       bd 45 f1 	      lda	ScoreLabel+5,x
    157  f65d		       85 0f		      sta	PF2
    158  f65f
    159  f65f		       8a		      txa
    160  f660		       18		      clc
    161  f661		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    162  f663		       aa		      tax
    163  f664		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    164  f666		       d0 d4		      bne	.score_draw_label
    165  f668
    166  f668							; Clear labels and setup color
    167  f668		       a9 00		      lda	#0
    168  f66a		       85 0d		      sta	PF0
    169  f66c		       85 0e		      sta	PF1
    170  f66e		       85 0f		      sta	PF2
    171  f670
    172  f670		       85 02		      sta	WSYNC
    173  f672
    174  f672							; Load Colors
    175  f672		       ad 82 02 	      lda	SWCHB
    176  f675		       29 08		      and	#%00001000
    177  f677		       f0 0d		      beq	.score_draw_bw
    178  f679
    179  f679				   .score_draw_color
    180  f679		       a9 44		      lda	#SCORE_LEVEL_COLOR
    181  f67b		       85 08		      sta	COLUPF
    182  f67d		       85 06		      sta	COLUP0
    183  f67f		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    184  f681		       85 07		      sta	COLUP1
    185  f683
    186  f683		       4c 90 f6 	      jmp	.score_draw_digit_start
    187  f686
    188  f686				   .score_draw_bw
    189  f686		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    190  f688		       85 08		      sta	COLUPF
    191  f68a		       85 06		      sta	COLUP0
    192  f68c		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    193  f68e		       85 07		      sta	COLUP1
    194  f690
    195  f690				   .score_draw_digit_start
    196  f690
    197  f690		       85 02		      sta	WSYNC
    198  f692
    199  f692							; Prepare initial line
    200  f692
    201  f692							; Level
    202  f692		       a4 99		      ldy	ScoreDigitTens
    203  f694		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    204  f697		       29 f0		      and	#$f0
    205  f699		       85 9b		      sta	ScoreDigitGfx
    206  f69b
    207  f69b		       a4 97		      ldy	ScoreDigitOnes
    208  f69d		       b9 dc f0 	      lda	ScoreDigits,y
    209  f6a0		       29 f0		      and	#$f0
    210  f6a2		       85 9c		      sta	ScoreDigitGfx+1
    211  f6a4
    212  f6a4							; Score
    213  f6a4		       a4 9a		      ldy	ScoreDigitTens+1
    214  f6a6		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    215  f6a9		       29 0f		      and	#$0f
    216  f6ab		       85 9d		      sta	ScoreDigitGfx+2
    217  f6ad
    218  f6ad		       a4 98		      ldy	ScoreDigitOnes+1
    219  f6af		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    220  f6b2		       29 f0		      and	#$f0
    221  f6b4		       05 9d		      ora	ScoreDigitGfx+2
    222  f6b6		       85 9d		      sta	ScoreDigitGfx+2
    223  f6b8
    224  f6b8		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    225  f6ba		       a5 9b		      lda	ScoreDigitGfx
    226  f6bc		       85 02		      sta	WSYNC
    227  f6be				   .score_draw_digit
    228  f6be
    229  f6be							;lda ScoreDigitGfx
    230  f6be		       85 0d		      sta	PF0
    231  f6c0		       a5 9c		      lda	ScoreDigitGfx+1
    232  f6c2		       85 0e		      sta	PF1
    233  f6c4		       a5 9d		      lda	ScoreDigitGfx+2
    234  f6c6		       85 0f		      sta	PF2
    235  f6c8
    236  f6c8							; Begin preparing next line
    237  f6c8		       e6 97		      inc	ScoreDigitOnes
    238  f6ca		       e6 99		      inc	ScoreDigitTens
    239  f6cc		       e6 98		      inc	ScoreDigitOnes+1
    240  f6ce		       e6 9a		      inc	ScoreDigitTens+1
    241  f6d0
    242  f6d0		       a9 00		      lda	#0
    243  f6d2		       85 0d		      sta	PF0
    244  f6d4		       a5 9e		      lda	ScoreBarGfx+0
    245  f6d6		       85 0e		      sta	PF1
    246  f6d8		       a5 9f		      lda	ScoreBarGfx+1
    247  f6da		       85 0f		      sta	PF2
    248  f6dc
    249  f6dc							; Level 1st Digit
    250  f6dc		       a4 99		      ldy	ScoreDigitTens
    251  f6de		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    252  f6e1		       29 f0		      and	#$f0
    253  f6e3		       85 80		      sta	Temp
    254  f6e5
    255  f6e5							; Score 1st Digit
    256  f6e5		       a4 9a		      ldy	ScoreDigitTens+1
    257  f6e7		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    258  f6ea		       29 0f		      and	#$0f
    259  f6ec		       85 81		      sta	Temp+1
    260  f6ee
    261  f6ee		       a5 9b		      lda	ScoreDigitGfx
    262  f6f0		       85 0d		      sta	PF0
    263  f6f2		       a5 9c		      lda	ScoreDigitGfx+1
    264  f6f4		       85 0e		      sta	PF1
    265  f6f6		       a5 9d		      lda	ScoreDigitGfx+2
    266  f6f8		       85 0f		      sta	PF2
    267  f6fa
    268  f6fa							; Level 2nd Digit (and transfer)
    269  f6fa		       a4 97		      ldy	ScoreDigitOnes
    270  f6fc		       b9 dc f0 	      lda	ScoreDigits,y
    271  f6ff		       29 f0		      and	#$f0
    272  f701		       85 9c		      sta	ScoreDigitGfx+1
    273  f703
      0  f703					      sleep	3
      1  f703				   .CYCLES    SET	3
      2  f703
      3  f703				  -	      IF	.CYCLES < 2
      4  f703				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f703				  -	      ERR
      6  f703					      ENDIF
      7  f703
      8  f703					      IF	.CYCLES & 1
      9  f703					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f703		       04 00		      nop	0
     11  f705				  -	      ELSE
     12  f705				  -	      bit	VSYNC
     13  f705					      ENDIF
     14  f705				   .CYCLES    SET	.CYCLES - 3
     15  f705					      ENDIF
     16  f705
     17  f705				  -	      REPEAT	.CYCLES / 2
     18  f705				  -	      nop
     19  f705					      REPEND
    275  f705
    276  f705		       a9 00		      lda	#0
    277  f707		       85 0d		      sta	PF0
    278  f709		       a5 9e		      lda	ScoreBarGfx+0
    279  f70b		       85 0e		      sta	PF1
    280  f70d		       a4 9f		      ldy	ScoreBarGfx+1
    281  f70f		       84 0f		      sty	PF2
    282  f711
    283  f711							; Score 2nd Digit (and transfer)
    284  f711		       a4 98		      ldy	ScoreDigitOnes+1
    285  f713		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    286  f716		       29 f0		      and	#$f0
    287  f718		       05 81		      ora	Temp+1
    288  f71a		       85 9d		      sta	ScoreDigitGfx+2
    289  f71c
    290  f71c							; Transfer Level 1st Digit
    291  f71c		       a5 80		      lda	Temp
    292  f71e		       85 9b		      sta	ScoreDigitGfx
    293  f720
    294  f720		       ca		      dex
    295  f721		       d0 9b		      bne	.score_draw_digit
    296  f723
    297  f723		       a9 00		      lda	#0
    298  f725		       85 0d		      sta	PF0
    299  f727		       85 0e		      sta	PF1
    300  f729		       85 0f		      sta	PF2
    301  f72b
    302  f72b		       60		      rts
    303  f72c
    304  f72c				   ScoreBar
    305  f72c		       40		      .BYTE.b	#%01000000
    306  f72d		       40		      .BYTE.b	#%01000000
    307  f72e		       60		      .BYTE.b	#%01100000
    308  f72f		       70		      .BYTE.b	#%01110000
    309  f730		       78		      .BYTE.b	#%01111000
    310  f731		       7c		      .BYTE.b	#%01111100
    311  f732		       7e		      .BYTE.b	#%01111110
    312  f733		       7f		      .BYTE.b	#%01111111
    313  f734
    314  f734				   ScoreBarFlip
    315  f734		       01		      .BYTE.b	#%00000001
    316  f735		       03		      .BYTE.b	#%00000011
    317  f736		       07		      .BYTE.b	#%00000111
    318  f737		       0f		      .BYTE.b	#%00001111
    319  f738		       1f		      .BYTE.b	#%00011111
    320  f739		       3f		      .BYTE.b	#%00111111
    321  f73a		       7f		      .BYTE.b	#%01111111
    322  f73b		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f73c					      include	"objects/web.asm"
      1  f73c							;================
      2  f73c							; Web (Playfield)
      3  f73c							;================
      4  f73c
      5  f73c							; Constants
      6  f73c
      7  f73c		       00 00	   WEB_BG_COLOR =	#$00
      8  f73c		       00 02	   WEB_FG_COLOR =	#$02
      9  f73c
     10  f73c		       00 1c	   WEB_SIZE   =	28
     11  f73c		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f73c		       00 06	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f73c
     14  f73c							; Scanline Draw
     15  f73c
     16  f73c				   WebDrawStart
     17  f73c
     18  f73c							; Load Colors
     19  f73c		       a5 a3		      lda	WebColor+1
     20  f73e		       85 08		      sta	COLUPF
     21  f740
     22  f740							; Mirror playfield and use standard playfield color
     23  f740							;lda CtrlPf
     24  f740							;and #%11111100
     25  f740							;ora #%00000001
     26  f740							;sta CtrlPf
     27  f740							;sta CTRLPF
     28  f740
     29  f740							; Initialize image index
     30  f740		       a9 00		      lda	#0
     31  f742		       85 a1		      sta	WebIndex
     32  f744
     33  f744		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f745					      include	"objects/spider.asm"
      1  f745							;=================
      2  f745							; Spider (player0)
      3  f745							;=================
      4  f745
      5  f745							; Constants
      6  f745
      7  f745		       00 56	   SPIDER_COLOR =	#$56
      8  f745		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f745		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f745		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f745
     12  f745		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f745		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f745		       00 02	   SPIDER_VEL_X =	2
     15  f745		       00 02	   SPIDER_VEL_Y =	2
     16  f745
     17  f745							; Initialization
     18  f745
     19  f745				   SpiderInit
     20  f745
     21  f745							; Initialize Position in center of screen
     22  f745		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f747		       85 a4		      sta	SpiderPosX
     24  f749		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f74b		       85 ab		      sta	SpiderPosY
     26  f74d
     27  f74d							; Initial direction
     28  f74d		       a9 10		      lda	#%00010000
     29  f74f		       85 ac		      sta	SpiderCtrl
     30  f751
     31  f751							; Setup Sprite
      0  f751					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f751				   .POINTER   SET	SpiderPtr
      2  f751				   .ADDRESS   SET	SpiderSprite
      3  f751
      4  f751		       a9 b2		      LDA	#<.ADDRESS
      5  f753		       85 a9		      STA	.POINTER
      6  f755		       a9 f1		      LDA	#>.ADDRESS
      7  f757		       85 aa		      STA	.POINTER+1
      8  f759
     33  f759
     34  f759		       60		      rts
     35  f75a
     36  f75a							; Frame Update
     37  f75a
     38  f75a				   SpiderUpdate
     39  f75a
     40  f75a				   SpiderControl
     41  f75a
     42  f75a							; Control Position
     43  f75a		       a6 a4		      ldx	SpiderPosX
     44  f75c		       a4 ab		      ldy	SpiderPosY
     45  f75e		       ad 80 02 	      lda	SWCHA
     46  f761
     47  f761				   .spider_control_check_right
     48  f761		       30 02		      bmi	.spider_control_check_left
     49  f763
     50  f763					      REPEAT	#SPIDER_VEL_X
     51  f763		       e8		      inx
     50  f763					      REPEND
     51  f764		       e8		      inx
     52  f765					      REPEND
     53  f765
     54  f765				   .spider_control_check_left
     55  f765		       2a		      rol
     56  f766		       30 02		      bmi	.spider_control_check_down
     57  f768
     58  f768					      REPEAT	#SPIDER_VEL_X
     59  f768		       ca		      dex
     58  f768					      REPEND
     59  f769		       ca		      dex
     60  f76a					      REPEND
     61  f76a
     62  f76a				   .spider_control_check_down
     63  f76a		       2a		      rol
     64  f76b		       30 02		      bmi	.spider_control_check_up
     65  f76d
     66  f76d					      REPEAT	#SPIDER_VEL_Y
     67  f76d		       88		      dey
     66  f76d					      REPEND
     67  f76e		       88		      dey
     68  f76f					      REPEND
     69  f76f
     70  f76f				   .spider_control_check_up
     71  f76f		       2a		      rol
     72  f770		       30 02		      bmi	.spider_control_sprite
     73  f772
     74  f772					      REPEAT	#SPIDER_VEL_Y
     75  f772		       c8		      iny
     74  f772					      REPEND
     75  f773		       c8		      iny
     76  f774					      REPEND
     77  f774
     78  f774				   .spider_control_sprite
     79  f774							; Control Sprite
     80  f774		       a9 00		      lda	#%00000000
     81  f776							; 7th bit: right
     82  f776							; 6th bit: left
     83  f776							; 5th bit: down
     84  f776							; 4th bit: up
     85  f776
     86  f776				   .spider_control_sprite_x
     87  f776		       e4 a4		      cpx	SpiderPosX
     88  f778		       90 04		      bcc	.spider_control_sprite_left
     89  f77a		       f0 09		      beq	.spider_control_sprite_y
     90  f77c		       b0 05		      bcs	.spider_control_sprite_right
     91  f77e
     92  f77e				   .spider_control_sprite_left
     93  f77e		       09 40		      ora	#%01000000
     94  f780		       4c 85 f7 	      jmp	.spider_control_sprite_y
     95  f783
     96  f783				   .spider_control_sprite_right
     97  f783		       09 80		      ora	#%10000000
     98  f785
     99  f785				   .spider_control_sprite_y
    100  f785		       c4 ab		      cpy	SpiderPosY
    101  f787		       90 04		      bcc	.spider_control_sprite_down
    102  f789		       f0 09		      beq	.spider_control_sprite_store
    103  f78b		       b0 05		      bcs	.spider_control_sprite_up
    104  f78d
    105  f78d				   .spider_control_sprite_down
    106  f78d		       09 20		      ora	#%00100000
    107  f78f		       4c 94 f7 	      jmp	.spider_control_sprite_store
    108  f792
    109  f792				   .spider_control_sprite_up
    110  f792		       09 10		      ora	#%00010000
    111  f794
    112  f794				   .spider_control_sprite_store
    113  f794		       c9 00		      cmp	#%00000000
    114  f796		       f0 02		      beq	.spider_control_boundary
    115  f798		       85 ac		      sta	SpiderCtrl
    116  f79a
    117  f79a				   .spider_control_boundary
    118  f79a							; Check Playfield Boundaries
    119  f79a
    120  f79a				   .spider_control_boundary_left
    121  f79a		       e0 02		      cpx	#SPIDER_VEL_X
    122  f79c		       b0 05		      bcs	.spider_control_boundary_right
    123  f79e		       a2 02		      ldx	#SPIDER_VEL_X
    124  f7a0		       4c a9 f7 	      jmp	.spider_control_boundary_top
    125  f7a3
    126  f7a3				   .spider_control_boundary_right
    127  f7a3		       e0 8e		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X
    128  f7a5		       90 02		      bcc	.spider_control_boundary_top
    129  f7a7		       a2 8e		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X
    130  f7a9
    131  f7a9				   .spider_control_boundary_top
    132  f7a9		       c0 04		      cpy	#SPIDER_VEL_Y+2
    133  f7ab		       b0 05		      bcs	.spider_control_boundary_bottom
    134  f7ad		       a0 04		      ldy	#SPIDER_VEL_Y+2
    135  f7af		       4c b8 f7 	      jmp	.spider_control_store
    136  f7b2
    137  f7b2				   .spider_control_boundary_bottom
    138  f7b2		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    139  f7b4		       90 02		      bcc	.spider_control_store
    140  f7b6		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    141  f7b8
    142  f7b8				   .spider_control_store
    143  f7b8							; Store new position
    144  f7b8		       86 a4		      stx	SpiderPosX
    145  f7ba		       84 ab		      sty	SpiderPosY
    146  f7bc
    147  f7bc				   .spider_control_sprite_assign
    148  f7bc							; Skip if no change
    149  f7bc		       c9 00		      cmp	#%00000000
    150  f7be		       f0 3c		      beq	.spider_control_return
    151  f7c0
    152  f7c0		       a2 00		      ldx	#%00000000	; For reflection
    153  f7c2
    154  f7c2		       24 ac		      bit	SpiderCtrl
    155  f7c4		       30 0f		      bmi	.spider_control_sprite_assign_right
    156  f7c6		       50 18		      bvc	.spider_control_sprite_assign_top
    157  f7c8
    158  f7c8				   .spider_control_sprite_assign_left
      0  f7c8					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f7c8				   .POINTER   SET	SpiderPtr
      2  f7c8				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f7c8
      4  f7c8		       a9 c2		      LDA	#<.ADDRESS
      5  f7ca		       85 a9		      STA	.POINTER
      6  f7cc		       a9 f1		      LDA	#>.ADDRESS
      7  f7ce		       85 aa		      STA	.POINTER+1
      8  f7d0
    160  f7d0		       a2 08		      ldx	#%00001000
    161  f7d2		       4c fa f7 	      jmp	.spider_control_reflect
    162  f7d5
    163  f7d5				   .spider_control_sprite_assign_right
      0  f7d5					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f7d5				   .POINTER   SET	SpiderPtr
      2  f7d5				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f7d5
      4  f7d5		       a9 c2		      LDA	#<.ADDRESS
      5  f7d7		       85 a9		      STA	.POINTER
      6  f7d9		       a9 f1		      LDA	#>.ADDRESS
      7  f7db		       85 aa		      STA	.POINTER+1
      8  f7dd
    165  f7dd		       4c fa f7 	      jmp	.spider_control_reflect
    166  f7e0
    167  f7e0				   .spider_control_sprite_assign_top
    168  f7e0		       c9 10		      cmp	#%00010000
    169  f7e2		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f7e4					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f7e4				   .POINTER   SET	SpiderPtr
      2  f7e4				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f7e4
      4  f7e4		       a9 b2		      LDA	#<.ADDRESS
      5  f7e6		       85 a9		      STA	.POINTER
      6  f7e8		       a9 f1		      LDA	#>.ADDRESS
      7  f7ea		       85 aa		      STA	.POINTER+1
      8  f7ec
    171  f7ec		       4c fa f7 	      jmp	.spider_control_reflect
    172  f7ef
    173  f7ef				   .spider_control_sprite_assign_bottom
      0  f7ef					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f7ef				   .POINTER   SET	SpiderPtr
      2  f7ef				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f7ef
      4  f7ef		       a9 d2		      LDA	#<.ADDRESS
      5  f7f1		       85 a9		      STA	.POINTER
      6  f7f3		       a9 f1		      LDA	#>.ADDRESS
      7  f7f5		       85 aa		      STA	.POINTER+1
      8  f7f7
    175  f7f7		       4c fa f7 	      jmp	.spider_control_reflect
    176  f7fa
    177  f7fa				   .spider_control_reflect
    178  f7fa		       86 0b		      stx	REFP0
    179  f7fc
    180  f7fc				   .spider_control_return
    181  f7fc							;    rts
    182  f7fc
    183  f7fc				   SpiderCollision
    184  f7fc		       a0 56		      ldy	#SPIDER_COLOR
    185  f7fe
    186  f7fe							; Check b/w
    187  f7fe		       ad 82 02 	      lda	SWCHB
    188  f801		       29 08		      and	#%00001000
    189  f803		       d0 02		      bne	.spider_collision_m0
    190  f805
    191  f805		       a0 0e		      ldy	#SPIDER_BW_COLOR
    192  f807
    193  f807				   .spider_collision_m0
    194  f807							; Check stun status
    195  f807		       a6 ba		      ldx	BugStunned
    196  f809		       d0 04		      bne	.spider_collision_m1
    197  f80b
    198  f80b							; Collision for M0 (V set)
    199  f80b		       24 00		      bit	CXM0P
    200  f80d		       70 0b		      bvs	.spider_collision_active
    201  f80f
    202  f80f				   .spider_collision_m1
    203  f80f							; Check stun status
    204  f80f		       a6 bb		      ldx	BugStunned+1
    205  f811		       d0 12		      bne	.spider_collision_return
    206  f813
    207  f813							; Collision for M1 (N set)
    208  f813		       24 01		      bit	CXM1P
    209  f815		       30 03		      bmi	.spider_collision_active
    210  f817
    211  f817		       4c 25 f8 	      jmp	.spider_collision_return
    212  f81a
    213  f81a				   .spider_collision_active
    214  f81a		       a0 44		      ldy	#SPIDER_COL_COLOR
    215  f81c
    216  f81c							; Check b/w
    217  f81c		       ad 82 02 	      lda	SWCHB
    218  f81f		       29 08		      and	#%00001000
    219  f821		       d0 02		      bne	.spider_collision_return
    220  f823
    221  f823		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    222  f825
    223  f825				   .spider_collision_return
    224  f825		       84 ad		      sty	SpiderColor
    225  f827
    226  f827				   .spider_update_return
    227  f827		       60		      rts
    228  f828
    229  f828							; Scanline Draw
    230  f828
    231  f828				   SpiderDrawStart
    232  f828
    233  f828							; Set player 0 to be quad size
    234  f828							;lda NuSiz0
    235  f828							;and #%11111000
    236  f828							;ora #%00000101
    237  f828							;sta NuSiz0
    238  f828							;sta NUSIZ0
    239  f828
    240  f828							; Set sprite color
    241  f828		       a5 ad		      lda	SpiderColor
    242  f82a		       85 06		      sta	COLUP0
    243  f82c
    244  f82c							; Determine if we need to use vertical delay (odd line)
    245  f82c		       a5 ab		      lda	SpiderPosY	; Y Position
    246  f82e		       4a		      lsr
    247  f82f		       b0 05		      bcs	.spider_draw_start_nodelay
    248  f831
    249  f831		       a0 01		      ldy	#1
    250  f833		       4c 38 f8 	      jmp	.spider_draw_start_set_delay
    251  f836
    252  f836				   .spider_draw_start_nodelay
    253  f836		       a0 00		      ldy	#0
    254  f838
    255  f838				   .spider_draw_start_set_delay
    256  f838		       84 25		      sty	VDELP0
    257  f83a
    258  f83a				   .spider_draw_start_pos
    259  f83a							; Calculate starting position
    260  f83a		       18		      clc
    261  f83b		       69 10		      adc	#SPIDER_SIZE
    262  f83d		       85 af		      sta	SpiderDrawPos
    263  f83f
    264  f83f							; Initialize sprite index and line buffer
    265  f83f		       a9 10		      lda	#SPIDER_SPRITE_SIZE
    266  f841		       85 ae		      sta	SpiderIndex
    267  f843		       a9 00		      lda	#0
    268  f845		       85 b0		      sta	SpiderLine
    269  f847
    270  f847		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f848					      include	"objects/line.asm"
      1  f848							;================
      2  f848							; Line (ball)
      3  f848							;================
      4  f848
      5  f848							; Constants
      6  f848
      7  f848		       00 08	   LINE_SIZE  =	8
      8  f848		       00 04	   LINE_VEL_X =	4
      9  f848		       00 04	   LINE_VEL_Y =	4
     10  f848
     11  f848		       00 08	   LINE_AUDIO_C =	8
     12  f848		       00 01	   LINE_AUDIO_F =	1
     13  f848		       00 04	   LINE_AUDIO_V =	4
     14  f848
     15  f848		       00 08	   LINE_SAMPLE_LEN =	8
     16  f848		       00 03	   LINE_SAMPLE_C =	3
     17  f848		       00 01	   LINE_SAMPLE_F =	1
     18  f848		       00 04	   LINE_SAMPLE_V =	4
     19  f848
     20  f848							; Initialization
     21  f848
     22  f848				   LineInit
     23  f848
     24  f848							; Initial Line Control
     25  f848		       a9 00		      lda	#0
     26  f84a		       85 b3		      sta	LineEnabled
     27  f84c							;sta LinePosX
     28  f84c							;sta LinePosY
     29  f84c
     30  f84c							; Initial direction
     31  f84c							;lda #0
     32  f84c							;sta LineVelocity+0
     33  f84c							;lda #LINE_VEL_Y
     34  f84c							;sta LineVelocity+1
     35  f84c
     36  f84c							; Disable line at start
     37  f84c							;lda #-1
     38  f84c							;sta LineDrawPos+0
     39  f84c							;sta LineDrawPos+1
     40  f84c
     41  f84c		       60		      rts
     42  f84d
     43  f84d							; Frame Update
     44  f84d
     45  f84d				   LineUpdate
     46  f84d		       20 57 f8 	      jsr	LineControl
     47  f850		       20 1b f9 	      jsr	LineObject
     48  f853		       20 46 f9 	      jsr	LineCollision
     49  f856		       60		      rts
     50  f857
     51  f857				   LineControl
     52  f857
     53  f857							; If in two player mode, no fire is required
     54  f857		       24 93		      bit	GameType
     55  f859		       30 04		      bmi	.line_control_check_enabled
     56  f85b
     57  f85b				   .line_control_check_fire
     58  f85b							; Check if Fire Button on controller 0 is pressed
     59  f85b		       a5 0c		      lda	INPT4
     60  f85d		       30 1c		      bmi	.line_control_skip
     61  f85f
     62  f85f				   .line_control_check_enabled
     63  f85f		       24 b3		      bit	LineEnabled
     64  f861		       30 18		      bmi	.line_control_skip
     65  f863
     66  f863		       24 93		      bit	GameType
     67  f865		       30 05		      bmi	.line_control_check_ctrl_1
     68  f867
     69  f867				   .line_control_check_ctrl_0
     70  f867		       a5 ac		      lda	SpiderCtrl
     71  f869		       4c 77 f8 	      jmp	.line_control_check_ctrl
     72  f86c
     73  f86c				   .line_control_check_ctrl_1
     74  f86c		       ad 80 02 	      lda	SWCHA
     75  f86f		       49 ff		      eor	#$ff	; invert bits
     76  f871					      REPEAT	4
     77  f871		       0a		      asl
     76  f871					      REPEND
     77  f872		       0a		      asl
     76  f872					      REPEND
     77  f873		       0a		      asl
     76  f873					      REPEND
     77  f874		       0a		      asl
     78  f875					      REPEND
     79  f875		       29 f0		      and	#%11110000
     80  f877
     81  f877				   .line_control_check_ctrl
     82  f877		       85 83		      sta	Temp+3
     83  f879		       d0 01		      bne	.line_control_fire
     84  f87b
     85  f87b				   .line_control_skip
     86  f87b		       60		      rts
     87  f87c
     88  f87c				   .line_control_fire
     89  f87c		       20 8f f9 	      jsr	LineEnable
     90  f87f
     91  f87f				   .line_control_x
     92  f87f		       a9 c0		      lda	#%11000000
     93  f881		       24 83		      bit	Temp+3
     94  f883		       f0 0c		      beq	.line_control_x_none
     95  f885				   .line_control_x_right
     96  f885		       10 05		      bpl	.line_control_x_left
     97  f887		       a9 04		      lda	#LINE_VEL_X
     98  f889		       4c 93 f8 	      jmp	.line_control_x_store
     99  f88c				   .line_control_x_left
    100  f88c		       a9 fc		      lda	#-LINE_VEL_X
    101  f88e		       4c 93 f8 	      jmp	.line_control_x_store
    102  f891				   .line_control_x_none
    103  f891		       a9 00		      lda	#0
    104  f893				   .line_control_x_store
    105  f893		       85 b5		      sta	LineVelocity
    106  f895
    107  f895				   .line_control_y
    108  f895		       a5 83		      lda	Temp+3
    109  f897		       29 30		      and	#%00110000
    110  f899		       f0 0e		      beq	.line_control_y_none
    111  f89b				   .line_control_y_down
    112  f89b		       c9 20		      cmp	#%00100000
    113  f89d		       d0 05		      bne	.line_control_y_up
    114  f89f		       a9 fc		      lda	#-LINE_VEL_Y
    115  f8a1		       4c ab f8 	      jmp	.line_control_y_store
    116  f8a4				   .line_control_y_up
    117  f8a4		       a9 04		      lda	#LINE_VEL_Y
    118  f8a6		       4c ab f8 	      jmp	.line_control_y_store
    119  f8a9				   .line_control_y_none
    120  f8a9		       a9 00		      lda	#0
    121  f8ab				   .line_control_y_store
    122  f8ab		       85 b6		      sta	LineVelocity+1
    123  f8ad
    124  f8ad				   .line_control_position
    125  f8ad
    126  f8ad		       a2 00		      ldx	#0	; offsetX
    127  f8af		       a0 00		      ldy	#0	; offsetY
    128  f8b1
    129  f8b1		       a5 83		      lda	Temp+3
    130  f8b3
    131  f8b3				   .line_control_position_left
    132  f8b3		       c9 40		      cmp	#%01000000
    133  f8b5		       d0 07		      bne	.line_control_position_right
    134  f8b7
    135  f8b7		       a2 00		      ldx	#0
    136  f8b9		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    137  f8bb		       4c 06 f9 	      jmp	.line_control_position_store
    138  f8be
    139  f8be				   .line_control_position_right
    140  f8be		       c9 80		      cmp	#%10000000
    141  f8c0		       d0 07		      bne	.line_control_position_top
    142  f8c2
    143  f8c2		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    144  f8c4		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    145  f8c6		       4c 06 f9 	      jmp	.line_control_position_store
    146  f8c9
    147  f8c9				   .line_control_position_top
    148  f8c9		       c9 10		      cmp	#%00010000
    149  f8cb		       d0 07		      bne	.line_control_position_bottom
    150  f8cd
    151  f8cd		       a2 08		      ldx	#SPIDER_SIZE/2
    152  f8cf		       a0 10		      ldy	#SPIDER_SIZE
    153  f8d1		       4c 06 f9 	      jmp	.line_control_position_store
    154  f8d4
    155  f8d4				   .line_control_position_bottom
    156  f8d4		       c9 20		      cmp	#%00100000
    157  f8d6		       d0 05		      bne	.line_control_position_top_right
    158  f8d8
    159  f8d8		       a2 08		      ldx	#SPIDER_SIZE/2
    160  f8da		       4c 06 f9 	      jmp	.line_control_position_store
    161  f8dd
    162  f8dd				   .line_control_position_top_right
    163  f8dd		       c9 90		      cmp	#%10010000
    164  f8df		       d0 07		      bne	.line_control_position_bottom_right
    165  f8e1
    166  f8e1		       a2 10		      ldx	#SPIDER_SIZE
    167  f8e3		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    168  f8e5		       4c 06 f9 	      jmp	.line_control_position_store
    169  f8e8
    170  f8e8				   .line_control_position_bottom_right
    171  f8e8		       c9 a0		      cmp	#%10100000
    172  f8ea		       d0 07		      bne	.line_control_position_bottom_left
    173  f8ec
    174  f8ec		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    175  f8ee		       a0 00		      ldy	#0
    176  f8f0		       4c 06 f9 	      jmp	.line_control_position_store
    177  f8f3
    178  f8f3				   .line_control_position_bottom_left
    179  f8f3		       c9 60		      cmp	#%01100000
    180  f8f5		       d0 07		      bne	.line_control_position_top_left
    181  f8f7
    182  f8f7							; No Offset
    183  f8f7		       a2 04		      ldx	#LINE_SIZE/2
    184  f8f9		       a0 04		      ldy	#LINE_SIZE/2
    185  f8fb		       4c 06 f9 	      jmp	.line_control_position_store
    186  f8fe
    187  f8fe				   .line_control_position_top_left
    188  f8fe		       c9 50		      cmp	#%01010000
    189  f900		       d0 04		      bne	.line_control_position_store
    190  f902
    191  f902		       a2 00		      ldx	#0
    192  f904		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    193  f906
    194  f906				   .line_control_position_store
    195  f906
    196  f906							; Apply offsetX to playerX
    197  f906		       a5 a4		      lda	SpiderPosX
    198  f908		       86 80		      stx	Temp
    199  f90a		       18		      clc
    200  f90b		       65 80		      adc	Temp
    201  f90d		       aa		      tax
    202  f90e
    203  f90e							; Apply offsetY to playerY
    204  f90e		       a5 ab		      lda	SpiderPosY
    205  f910		       84 80		      sty	Temp
    206  f912		       18		      clc
    207  f913		       65 80		      adc	Temp
    208  f915		       a8		      tay
    209  f916
    210  f916		       86 a8		      stx	LinePosX
    211  f918		       84 b4		      sty	LinePosY
    212  f91a
    213  f91a				   .line_control_return
    214  f91a		       60		      rts
    215  f91b
    216  f91b				   LineObject
    217  f91b
    218  f91b							; Check if line is enabled
    219  f91b		       24 b3		      bit	LineEnabled
    220  f91d		       10 26		      bpl	.line_object_return
    221  f91f
    222  f91f							; Load position
    223  f91f		       a6 a8		      ldx	LinePosX
    224  f921		       a4 b4		      ldy	LinePosY
    225  f923
    226  f923				   .line_object_boundary
    227  f923				   .line_object_boundary_left
    228  f923		       e0 04		      cpx	#LINE_VEL_X
    229  f925		       90 1b		      bcc	.line_object_disable
    230  f927				   .line_object_boundary_right
    231  f927		       e0 9b		      cpx	#160-LINE_VEL_X-1
    232  f929		       b0 17		      bcs	.line_object_disable
    233  f92b				   .line_object_boundary_bottom
    234  f92b		       c0 04		      cpy	#LINE_VEL_Y
    235  f92d		       90 13		      bcc	.line_object_disable
    236  f92f				   .line_object_boundary_top
    237  f92f		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    238  f931		       b0 0f		      bcs	.line_object_disable
    239  f933
    240  f933				   .line_object_velocity
    241  f933
    242  f933							; Apply Velocity
    243  f933		       8a		      txa
    244  f934		       18		      clc
    245  f935		       65 b5		      adc	LineVelocity
    246  f937		       85 a8		      sta	LinePosX
    247  f939
    248  f939		       98		      tya
    249  f93a		       18		      clc
    250  f93b		       65 b6		      adc	LineVelocity+1
    251  f93d		       85 b4		      sta	LinePosY
    252  f93f
    253  f93f		       4c 45 f9 	      jmp	.line_object_return
    254  f942
    255  f942				   .line_object_disable
    256  f942		       20 a4 f9 	      jsr	LineDisable
    257  f945
    258  f945				   .line_object_return
    259  f945		       60		      rts
    260  f946
    261  f946				   LineCollision
    262  f946
    263  f946		       a9 78		      lda	#BUG_STUN_LENGTH
    264  f948
    265  f948				   .line_collision_m0
    266  f948		       24 04		      bit	CXM0FB
    267  f94a		       50 08		      bvc	.line_collision_m1
    268  f94c
    269  f94c							; Set stun timer
    270  f94c		       85 ba		      sta	BugStunned+0
    271  f94e
    272  f94e							; Disable line
    273  f94e		       20 a4 f9 	      jsr	LineDisable
    274  f951		       4c 5d f9 	      jmp	.line_collision_sample
    275  f954
    276  f954				   .line_collision_m1
    277  f954		       24 05		      bit	CXM1FB
    278  f956		       50 15		      bvc	.line_collision_return
    279  f958
    280  f958							; Set stun timer
    281  f958		       85 bb		      sta	BugStunned+1
    282  f95a
    283  f95a							; Disable line
    284  f95a		       20 a4 f9 	      jsr	LineDisable
    285  f95d
    286  f95d				   .line_collision_sample
    287  f95d		       a9 08		      lda	#LINE_SAMPLE_LEN
    288  f95f		       85 92		      sta	SampleStep
    289  f961		       a9 03		      lda	#LINE_SAMPLE_C
    290  f963		       85 16		      sta	AUDC1
    291  f965		       a9 01		      lda	#LINE_SAMPLE_F
    292  f967		       85 18		      sta	AUDF1
    293  f969		       a9 04		      lda	#LINE_SAMPLE_V
    294  f96b		       85 1a		      sta	AUDV1
    295  f96d
    296  f96d				   .line_collision_return
    297  f96d		       60		      rts
    298  f96e
    299  f96e							; Scanline Draw
    300  f96e
    301  f96e				   LineDrawStart
    302  f96e
    303  f96e		       24 b3		      bit	LineEnabled
    304  f970		       30 07		      bmi	.line_draw_start
    305  f972
    306  f972		       a9 ff		      lda	#-1
    307  f974		       85 b7		      sta	LineDrawPos+0
    308  f976		       85 b8		      sta	LineDrawPos+1
    309  f978		       60		      rts
    310  f979
    311  f979				   .line_draw_start
    312  f979							; Determine if we need to use vertical delay (oven line)
    313  f979		       a5 b4		      lda	LinePosY
    314  f97b		       4a		      lsr
    315  f97c		       90 05		      bcc	.line_draw_start_nodelay
    316  f97e
    317  f97e		       a0 01		      ldy	#1
    318  f980		       4c 85 f9 	      jmp	.line_draw_start_set_delay
    319  f983
    320  f983				   .line_draw_start_nodelay
    321  f983		       a0 00		      ldy	#0
    322  f985
    323  f985				   .line_draw_start_set_delay
    324  f985		       84 27		      sty	VDELBL
    325  f987
    326  f987				   .line_draw_start_pos
    327  f987							; Calculate starting position
    328  f987		       18		      clc
    329  f988		       85 b7		      sta	LineDrawPos+0
    330  f98a		       69 04		      adc	#LINE_SIZE/2
    331  f98c		       85 b8		      sta	LineDrawPos+1
    332  f98e
    333  f98e		       60		      rts
    334  f98f
    335  f98f				   LineEnable
    336  f98f		       a9 80		      lda	#%10000000
    337  f991		       85 b3		      sta	LineEnabled
    338  f993
    339  f993		       a5 92		      lda	SampleStep
    340  f995		       d0 0c		      bne	.line_enable_return
    341  f997
    342  f997							; Play line audio
    343  f997		       a9 08		      lda	#LINE_AUDIO_C
    344  f999		       85 16		      sta	AUDC1
    345  f99b		       a9 01		      lda	#LINE_AUDIO_F
    346  f99d		       85 18		      sta	AUDF1
    347  f99f		       a9 04		      lda	#LINE_AUDIO_V
    348  f9a1		       85 1a		      sta	AUDV1
    349  f9a3
    350  f9a3				   .line_enable_return
    351  f9a3		       60		      rts
    352  f9a4
    353  f9a4				   LineDisable
    354  f9a4		       a9 00		      lda	#0
    355  f9a6		       85 b3		      sta	LineEnabled
    356  f9a8
    357  f9a8		       a6 92		      ldx	SampleStep
    358  f9aa		       d0 02		      bne	.line_disable_return
    359  f9ac
    360  f9ac							; Mute audio
    361  f9ac							;lda #0
    362  f9ac		       85 1a		      sta	AUDV1
    363  f9ae							;sta AUDF1
    364  f9ae							;sta AUDC1
    365  f9ae
    366  f9ae				   .line_disable_return
    367  f9ae		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f9af					      include	"objects/bug.asm"
      1  f9af							;======================
      2  f9af							; Bugs (missiles 0 & 1)
      3  f9af							;======================
      4  f9af
      5  f9af							; Constants
      6  f9af
      7  f9af		       00 08	   BUG_SIZE   =	8
      8  f9af		       00 08	   BUG_BOUNDARY =	#(BUG_SIZE)
      9  f9af		       00 78	   BUG_STUN_LENGTH =	120
     10  f9af		       00 04	   BUG_POINTS =	4
     11  f9af		       00 03	   BUG_HP     =	3
     12  f9af
     13  f9af		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     14  f9af		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     15  f9af		       00 38	   BUG_STUN_COLOR =	#$38
     16  f9af		       00 08	   BUG_STUN_BW_COLOR =	#$08
     17  f9af
     18  f9af		       00 1e	   BUG_SAMPLE_LEN =	30
     19  f9af		       00 03	   BUG_SAMPLE_C =	3
     20  f9af		       00 14	   BUG_SAMPLE_F =	20
     21  f9af		       00 04	   BUG_SAMPLE_V =	4
     22  f9af
     23  f9af		       00 01	   BUG_COL_SAMPLE_LEN =	1
     24  f9af		       00 08	   BUG_COL_SAMPLE_C =	8
     25  f9af		       00 08	   BUG_COL_SAMPLE_F =	8
     26  f9af		       00 03	   BUG_COL_SAMPLE_V =	3
     27  f9af
     28  f9af							; Initialization
     29  f9af
     30  f9af				   BugInit
     31  f9af
     32  f9af							; Initialize Bugs
     33  f9af		       a2 01		      ldx	#1
     34  f9b1
     35  f9b1				   .bug_init_loop
     36  f9b1		       20 b8 f9 	      jsr	BugReset
     37  f9b4
     38  f9b4		       ca		      dex
     39  f9b5		       10 fa		      bpl	.bug_init_loop
     40  f9b7
     41  f9b7		       60		      rts
     42  f9b8
     43  f9b8				   BugReset		; x = bug (0 or 1)
     44  f9b8
     45  f9b8							; Set random position
     46  f9b8		       20 13 f0 	      jsr	Random
     47  f9bb
     48  f9bb		       a5 84		      lda	Rand8
     49  f9bd		       30 14		      bmi	.bug_reset_v
     50  f9bf
     51  f9bf				   .bug_reset_h
     52  f9bf		       29 7f		      and	#$7f
     53  f9c1		       95 a6		      sta	BugPosX,x
     54  f9c3
     55  f9c3		       a5 85		      lda	Rand16
     56  f9c5		       30 05		      bmi	.bug_reset_h_bottom
     57  f9c7				   .bug_reset_h_top
     58  f9c7		       a9 08		      lda	#BUG_BOUNDARY
     59  f9c9		       4c ce f9 	      jmp	.bug_reset_h_y
     60  f9cc				   .bug_reset_h_bottom
     61  f9cc		       a9 a5		      lda	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
     62  f9ce				   .bug_reset_h_y
     63  f9ce		       95 bc		      sta	BugPosY,x
     64  f9d0		       4c e4 f9 	      jmp	.bug_reset_active
     65  f9d3
     66  f9d3				   .bug_reset_v
     67  f9d3		       29 7f		      and	#$7f
     68  f9d5		       95 bc		      sta	BugPosY,x
     69  f9d7
     70  f9d7		       a5 85		      lda	Rand16
     71  f9d9		       30 05		      bmi	.bug_reset_v_right
     72  f9db
     73  f9db				   .bug_reset_v_left
     74  f9db		       a9 08		      lda	#BUG_BOUNDARY
     75  f9dd		       4c e2 f9 	      jmp	.bug_reset_v_x
     76  f9e0				   .bug_reset_v_right
     77  f9e0		       a9 98		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
     78  f9e2				   .bug_reset_v_x
     79  f9e2		       95 a6		      sta	BugPosX,x
     80  f9e4
     81  f9e4				   .bug_reset_active
     82  f9e4							; Set as active
     83  f9e4		       a9 00		      lda	#0
     84  f9e6		       95 ba		      sta	BugStunned,x
     85  f9e8
     86  f9e8		       60		      rts
     87  f9e9
     88  f9e9							; Frame Update
     89  f9e9
     90  f9e9				   BugUpdate
     91  f9e9
     92  f9e9		       a2 01		      ldx	#1
     93  f9eb				   .bug_update_loop
     94  f9eb		       86 80		      stx	Temp+0
     95  f9ed
     96  f9ed		       b5 ba		      lda	BugStunned,x
     97  f9ef		       f0 08		      beq	.bug_update_active
     98  f9f1
     99  f9f1				   .bug_update_stunned
    100  f9f1		       d6 ba		      dec	BugStunned,x
    101  f9f3		       20 89 fa 	      jsr	BugStunCollision
    102  f9f6		       4c ff f9 	      jmp	.bug_update_next
    103  f9f9
    104  f9f9				   .bug_update_active
    105  f9f9		       20 05 fa 	      jsr	BugMovement
    106  f9fc		       20 64 fa 	      jsr	BugCollision
    107  f9ff
    108  f9ff				   .bug_update_next
    109  f9ff		       a6 80		      ldx	Temp+0
    110  fa01		       ca		      dex
    111  fa02		       10 e7		      bpl	.bug_update_loop
    112  fa04
    113  fa04		       60		      rts
    114  fa05
    115  fa05				   BugMovement
    116  fa05
    117  fa05				   .bug_movement_random
    118  fa05		       20 13 f0 	      jsr	Random
    119  fa08		       29 03		      and	#%00000011
    120  fa0a		       85 81		      sta	Temp+1
    121  fa0c
    122  fa0c				   .bug_movement_load
    123  fa0c		       a6 80		      ldx	Temp+0
    124  fa0e
    125  fa0e				   .bug_movement_x
    126  fa0e		       a4 b9		      ldy	BugSpeed
    127  fa10
    128  fa10							; Alter X Position
    129  fa10		       a5 81		      lda	Temp+1
    130  fa12		       29 01		      and	#%00000001
    131  fa14
    132  fa14				   .bug_movement_x_check
    133  fa14		       c9 01		      cmp	#1
    134  fa16		       d0 08		      bne	.bug_movement_x_right
    135  fa18
    136  fa18				   .bug_movement_x_left
    137  fa18		       d6 a6		      dec	BugPosX,x
    138  fa1a		       88		      dey
    139  fa1b		       d0 fb		      bne	.bug_movement_x_left
    140  fa1d
    141  fa1d		       4c 25 fa 	      jmp	.bug_movement_y
    142  fa20
    143  fa20				   .bug_movement_x_right
    144  fa20		       f6 a6		      inc	BugPosX,x
    145  fa22		       88		      dey
    146  fa23		       d0 fb		      bne	.bug_movement_x_right
    147  fa25
    148  fa25				   .bug_movement_y
    149  fa25		       a4 b9		      ldy	BugSpeed
    150  fa27
    151  fa27							; Alter Y Position
    152  fa27		       a5 81		      lda	Temp+1
    153  fa29		       29 02		      and	#%00000010
    154  fa2b		       4a		      lsr
    155  fa2c
    156  fa2c				   .bug_movement_y_check
    157  fa2c		       c9 01		      cmp	#1
    158  fa2e		       d0 08		      bne	.bug_movement_y_down
    159  fa30
    160  fa30				   .bug_movement_y_up
    161  fa30		       f6 bc		      inc	BugPosY,x
    162  fa32		       88		      dey
    163  fa33		       d0 fb		      bne	.bug_movement_y_up
    164  fa35
    165  fa35		       4c 3d fa 	      jmp	.bug_movement_boundary
    166  fa38
    167  fa38				   .bug_movement_y_down
    168  fa38		       d6 bc		      dec	BugPosY,x
    169  fa3a		       88		      dey
    170  fa3b		       d0 fb		      bne	.bug_movement_y_down
    171  fa3d
    172  fa3d				   .bug_movement_boundary
    173  fa3d		       b5 a6		      lda	BugPosX,x
    174  fa3f		       b4 bc		      ldy	BugPosY,x
    175  fa41
    176  fa41				   .bug_movement_boundary_left
    177  fa41		       c9 08		      cmp	#BUG_BOUNDARY
    178  fa43		       b0 05		      bcs	.bug_movement_boundary_right
    179  fa45		       a9 08		      lda	#BUG_BOUNDARY
    180  fa47		       4c 50 fa 	      jmp	.bug_movement_boundary_top
    181  fa4a
    182  fa4a				   .bug_movement_boundary_right
    183  fa4a		       c9 98		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    184  fa4c		       90 02		      bcc	.bug_movement_boundary_top
    185  fa4e		       a9 98		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    186  fa50
    187  fa50				   .bug_movement_boundary_top
    188  fa50		       c0 08		      cpy	#BUG_BOUNDARY
    189  fa52		       b0 05		      bcs	.bug_movement_boundary_bottom
    190  fa54		       a0 08		      ldy	#BUG_BOUNDARY
    191  fa56		       4c 5f fa 	      jmp	.bug_movement_store
    192  fa59
    193  fa59				   .bug_movement_boundary_bottom
    194  fa59		       c0 a5		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    195  fa5b		       90 02		      bcc	.bug_movement_store
    196  fa5d		       a0 a5		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    197  fa5f
    198  fa5f				   .bug_movement_store
    199  fa5f		       95 a6		      sta	BugPosX,x
    200  fa61		       94 bc		      sty	BugPosY,x
    201  fa63
    202  fa63				   .bug_movement_return
    203  fa63		       60		      rts
    204  fa64
    205  fa64				   BugCollision
    206  fa64
    207  fa64		       e0 01		      cpx	#1
    208  fa66		       f0 05		      beq	.bug_collision_m1
    209  fa68
    210  fa68				   .bug_collision_m0
    211  fa68							; Collision for M0 (V set)
    212  fa68		       24 00		      bit	CXM0P
    213  fa6a		       70 06		      bvs	.bug_collision_active
    214  fa6c		       60		      rts
    215  fa6d
    216  fa6d				   .bug_collision_m1
    217  fa6d							; Collision for M1 (N set)
    218  fa6d		       24 01		      bit	CXM1P
    219  fa6f		       30 01		      bmi	.bug_collision_active
    220  fa71		       60		      rts
    221  fa72
    222  fa72				   .bug_collision_active
    223  fa72
    224  fa72							; Reduce players score
    225  fa72		       a5 95		      lda	ScoreValue
    226  fa74		       f0 02		      beq	.bug_collision_score_skip
    227  fa76		       c6 95		      dec	ScoreValue
    228  fa78				   .bug_collision_score_skip
    229  fa78
    230  fa78							; Play collision sound
    231  fa78		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    232  fa7a		       85 92		      sta	SampleStep
    233  fa7c		       a9 08		      lda	#BUG_COL_SAMPLE_C
    234  fa7e		       85 16		      sta	AUDC1
    235  fa80		       a9 08		      lda	#BUG_COL_SAMPLE_F
    236  fa82		       85 18		      sta	AUDF1
    237  fa84		       a9 03		      lda	#BUG_COL_SAMPLE_V
    238  fa86		       85 1a		      sta	AUDV1
    239  fa88
    240  fa88		       60		      rts
    241  fa89
    242  fa89				   BugStunCollision
    243  fa89
    244  fa89		       e0 01		      cpx	#1
    245  fa8b		       f0 05		      beq	.bug_stun_collision_m1
    246  fa8d
    247  fa8d				   .bug_stun_collision_m0
    248  fa8d							; Collision for M0 (V set)
    249  fa8d		       24 00		      bit	CXM0P
    250  fa8f		       70 06		      bvs	.bug_stun_collision_active
    251  fa91		       60		      rts
    252  fa92
    253  fa92				   .bug_stun_collision_m1
    254  fa92							; Collision for M1 (N set)
    255  fa92		       24 01		      bit	CXM1P
    256  fa94		       30 01		      bmi	.bug_stun_collision_active
    257  fa96		       60		      rts
    258  fa97
    259  fa97				   .bug_stun_collision_active
    260  fa97							; Add health to player
    261  fa97		       18		      clc
    262  fa98		       a5 95		      lda	ScoreValue
    263  fa9a		       69 03		      adc	#BUG_HP
    264  fa9c		       90 02		      bcc	.bug_stun_collision_active_hp_skip
    265  fa9e		       a9 ff		      lda	#$ff
    266  faa0				   .bug_stun_collision_active_hp_skip
    267  faa0		       85 95		      sta	ScoreValue
    268  faa2
    269  faa2							; Add points to score
    270  faa2		       18		      clc
    271  faa3		       a5 96		      lda	ScoreValue+1
    272  faa5		       69 04		      adc	#BUG_POINTS
    273  faa7		       85 96		      sta	ScoreValue+1
    274  faa9
    275  faa9							; Reset bug
    276  faa9		       20 b8 f9 	      jsr	BugReset
    277  faac
    278  faac							; Play sample
    279  faac		       a9 1e		      lda	#BUG_SAMPLE_LEN
    280  faae		       85 92		      sta	SampleStep
    281  fab0		       a9 03		      lda	#BUG_SAMPLE_C
    282  fab2		       85 16		      sta	AUDC1
    283  fab4		       a9 14		      lda	#BUG_SAMPLE_F
    284  fab6		       85 18		      sta	AUDF1
    285  fab8		       a9 04		      lda	#BUG_SAMPLE_V
    286  faba		       85 1a		      sta	AUDV1
    287  fabc
    288  fabc		       60		      rts
    289  fabd
    290  fabd							; Scanline Draw
    291  fabd
    292  fabd				   BugDrawStart
    293  fabd
    294  fabd		       a0 01		      ldy	#1
    295  fabf				   .bug_draw_start_loop
    296  fabf
    297  fabf							; Set missile 0 & 1 to be 8 clock size
    298  fabf							;lda NuSiz0,y
    299  fabf							;ora #%00110000
    300  fabf							;sta NuSiz0,y
    301  fabf							;sta NUSIZ0,y
    302  fabf
    303  fabf							; Setup half scanline positions
    304  fabf		       b9 bc 00 	      lda	BugPosY,y
    305  fac2		       4a		      lsr
    306  fac3		       99 be 00 	      sta	BugDrawPosBottom,y
    307  fac6
    308  fac6		       69 04		      adc	#BUG_SIZE/2
    309  fac8		       99 c0 00 	      sta	BugDrawPosTop,y
    310  facb
    311  facb		       88		      dey
    312  facc		       10 f1		      bpl	.bug_draw_start_loop
    313  face
    314  face		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  facf					      include	"objects/swatter.asm"
      1  facf							;==================
      2  facf							; Swatter (player1)
      3  facf							;==================
      4  facf
      5  facf							; Constants
      6  facf
      7  facf		       00 30	   SWATTER_COLOR =	#$30
      8  facf		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  facf		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  facf		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  facf
     12  facf		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  facf		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  facf
     15  facf		       00 3c	   SWATTER_HOLD_TIME =	60
     16  facf		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  facf
     18  facf		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  facf		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  facf		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  facf
     22  facf		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  facf		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  facf		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  facf		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  facf		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  facf
     28  facf		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  facf		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  facf		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  facf		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  facf
     33  facf		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  facf		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  facf		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  facf		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  facf
     38  facf							; Initialization
     39  facf
     40  facf							;SwatterInit:
     41  facf							;    jsr SwatterReset
     42  facf							;    rts
     43  facf
     44  facf							; Frame Update
     45  facf
     46  facf				   SwatterUpdate
     47  facf
     48  facf							; Check b/w
     49  facf		       ad 82 02 	      lda	SWCHB
     50  fad2		       29 08		      and	#%00001000
     51  fad4		       f0 10		      beq	.swatter_update_bw
     52  fad6
     53  fad6				   .swatter_update_color
     54  fad6		       a5 c3		      lda	SwatterState
     55  fad8		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     56  fada		       d0 05		      bne	.swatter_update_color_hold
     57  fadc				   .swatter_update_color_active
     58  fadc		       a9 30		      lda	#SWATTER_COLOR
     59  fade		       4c f3 fa 	      jmp	.swatter_update_color_set
     60  fae1				   .swatter_update_color_hold
     61  fae1		       a9 36		      lda	#SWATTER_HOLD_COLOR
     62  fae3		       4c f3 fa 	      jmp	.swatter_update_color_set
     63  fae6
     64  fae6				   .swatter_update_bw
     65  fae6		       a5 c3		      lda	SwatterState
     66  fae8		       c9 80		      cmp	#SWATTER_STATE_HOLD
     67  faea		       d0 05		      bne	.swatter_update_bw_active
     68  faec				   .swatter_update_bw_hold
     69  faec		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     70  faee		       4c f3 fa 	      jmp	.swatter_update_color_set
     71  faf1				   .swatter_update_bw_active
     72  faf1		       a9 0e		      lda	#SWATTER_BW_COLOR
     73  faf3
     74  faf3				   .swatter_update_color_set
     75  faf3		       85 c4		      sta	SwatterColor
     76  faf5
     77  faf5				   .swatter_update_hold_sample
     78  faf5		       a4 c3		      ldy	SwatterState
     79  faf7		       c0 80		      cpy	#SWATTER_STATE_HOLD
     80  faf9		       d0 0f		      bne	.swatter_update_state
     81  fafb
     82  fafb		       c6 cb		      dec	SwatterSampleCount
     83  fafd		       d0 0b		      bne	.swatter_update_state
     84  faff
     85  faff		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     86  fb01		       85 cb		      sta	SwatterSampleCount
     87  fb03
     88  fb03		       c6 cc		      dec	SwatterSampleF
     89  fb05		       a4 cc		      ldy	SwatterSampleF
     90  fb07		       20 d5 fb 	      jsr	SwatterHoldSample
     91  fb0a
     92  fb0a				   .swatter_update_state
     93  fb0a		       a6 8e		      ldx	FrameTimer+1
     94  fb0c		       d0 3a		      bne	.swatter_update_collision
     95  fb0e
     96  fb0e		       a4 c3		      ldy	SwatterState
     97  fb10		       c0 00		      cpy	#SWATTER_STATE_WAIT
     98  fb12		       f0 0a		      beq	.swatter_update_state_wait
     99  fb14
    100  fb14		       c0 80		      cpy	#SWATTER_STATE_HOLD
    101  fb16		       f0 18		      beq	.swatter_update_state_hold
    102  fb18
    103  fb18							; Else we're at the end of the active state
    104  fb18		       20 b5 fb 	      jsr	SwatterReset
    105  fb1b		       4c 57 fb 	      jmp	.swatter_update_return
    106  fb1e
    107  fb1e				   .swatter_update_state_wait
    108  fb1e		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    109  fb20		       84 cc		      sty	SwatterSampleF
    110  fb22		       20 d5 fb 	      jsr	SwatterHoldSample
    111  fb25
    112  fb25		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    113  fb27		       85 cb		      sta	SwatterSampleCount
    114  fb29
    115  fb29		       a9 80		      lda	#SWATTER_STATE_HOLD
    116  fb2b		       a6 c6		      ldx	SwatterHoldTime
    117  fb2d		       4c 44 fb 	      jmp	.swatter_update_state_set
    118  fb30
    119  fb30				   .swatter_update_state_hold
    120  fb30							; Play Swatter Active Sample
    121  fb30		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    122  fb32		       85 92		      sta	SampleStep
    123  fb34		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    124  fb36		       85 16		      sta	AUDC1
    125  fb38		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    126  fb3a		       85 18		      sta	AUDF1
    127  fb3c		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    128  fb3e		       85 1a		      sta	AUDV1
    129  fb40
    130  fb40		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    131  fb42		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    132  fb44
    133  fb44				   .swatter_update_state_set
    134  fb44		       85 c3		      sta	SwatterState
    135  fb46		       86 8e		      stx	FrameTimer+1
    136  fb48
    137  fb48				   .swatter_update_collision
    138  fb48							; Check 1 frame after active
    139  fb48		       a5 c3		      lda	SwatterState
    140  fb4a		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    141  fb4c		       d0 09		      bne	.swatter_update_return
    142  fb4e		       a6 8e		      ldx	FrameTimer+1
    143  fb50		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    144  fb52		       d0 03		      bne	.swatter_update_return
    145  fb54
    146  fb54		       20 58 fb 	      jsr	SwatterCollision
    147  fb57
    148  fb57				   .swatter_update_return
    149  fb57		       60		      rts
    150  fb58
    151  fb58				   SwatterCollision
    152  fb58		       24 00		      bit	CXM0P
    153  fb5a		       30 09		      bmi	.swatter_collision_m0
    154  fb5c
    155  fb5c		       24 01		      bit	CXM1P
    156  fb5e		       70 0a		      bvs	.swatter_collision_m1
    157  fb60
    158  fb60		       24 07		      bit	CXPPMM
    159  fb62		       30 0e		      bmi	.swatter_collision_p0
    160  fb64
    161  fb64		       60		      rts
    162  fb65
    163  fb65				   .swatter_collision_m0
    164  fb65		       a2 00		      ldx	#0
    165  fb67		       4c 6c fb 	      jmp	.swatter_collision_bug_reset
    166  fb6a
    167  fb6a				   .swatter_collision_m1
    168  fb6a		       a2 01		      ldx	#1
    169  fb6c
    170  fb6c				   .swatter_collision_bug_reset
    171  fb6c		       20 b8 f9 	      jsr	BugReset
    172  fb6f		       4c 82 fb 	      jmp	.swatter_collision_active
    173  fb72
    174  fb72				   .swatter_collision_p0
    175  fb72
    176  fb72		       a5 95		      lda	ScoreValue
    177  fb74		       c5 c7		      cmp	SwatterHitDamage
    178  fb76		       90 06		      bcc	.swatter_collision_p0_zero
    179  fb78							;beq .swatter_collision_p0_zero
    180  fb78
    181  fb78		       18		      clc
    182  fb79		       e5 c7		      sbc	SwatterHitDamage
    183  fb7b		       4c 80 fb 	      jmp	.swatter_collision_p0_set
    184  fb7e
    185  fb7e				   .swatter_collision_p0_zero
    186  fb7e		       a9 00		      lda	#0
    187  fb80
    188  fb80				   .swatter_collision_p0_set
    189  fb80		       85 95		      sta	ScoreValue
    190  fb82
    191  fb82				   .swatter_collision_active
    192  fb82							; Player swatter hit sample
    193  fb82		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    194  fb84		       85 92		      sta	SampleStep
    195  fb86		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    196  fb88		       85 16		      sta	AUDC1
    197  fb8a		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    198  fb8c		       85 18		      sta	AUDF1
    199  fb8e		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    200  fb90		       85 1a		      sta	AUDV1
    201  fb92
    202  fb92		       60		      rts
    203  fb93
    204  fb93							; Scanline Draw
    205  fb93
    206  fb93				   SwatterDrawStart
    207  fb93
    208  fb93							; Set sprite color
    209  fb93		       a5 c4		      lda	SwatterColor
    210  fb95		       85 07		      sta	COLUP1
    211  fb97
    212  fb97							; Hide swatter if wait state
    213  fb97		       24 c3		      bit	SwatterState
    214  fb99		       30 09		      bmi	.swatter_draw_start
    215  fb9b
    216  fb9b		       a9 ff		      lda	#-1
    217  fb9d		       85 c8		      sta	SwatterIndex
    218  fb9f							;sta SwatterDrawPos
    219  fb9f		       a9 00		      lda	#0
    220  fba1		       85 ca		      sta	SwatterLine
    221  fba3
    222  fba3		       60		      rts
    223  fba4
    224  fba4				   .swatter_draw_start
    225  fba4
    226  fba4							; Note: Doesn't need vertical delay
    227  fba4
    228  fba4							; Calculate starting position
    229  fba4		       a5 c2		      lda	SwatterPosY	; Y Position
    230  fba6		       4a		      lsr
    231  fba7		       18		      clc
    232  fba8		       69 14		      adc	#SWATTER_SPRITE_SIZE
    233  fbaa		       85 c9		      sta	SwatterDrawPos
    234  fbac
    235  fbac							; Initialize sprite index
    236  fbac		       a9 13		      lda	#SWATTER_SPRITE_SIZE-1
    237  fbae		       85 c8		      sta	SwatterIndex
    238  fbb0		       a9 00		      lda	#0
    239  fbb2		       85 ca		      sta	SwatterLine
    240  fbb4
    241  fbb4		       60		      rts
    242  fbb5
    243  fbb5				   SwatterReset
    244  fbb5							; Initialize Swatter State
    245  fbb5		       a9 00		      lda	#SWATTER_STATE_WAIT
    246  fbb7		       85 c3		      sta	SwatterState
    247  fbb9
    248  fbb9							; Set Wait Timer
    249  fbb9		       20 13 f0 	      jsr	Random
    250  fbbc		       a5 84		      lda	Rand8
    251  fbbe		       29 3f		      and	#$3f
    252  fbc0		       18		      clc
    253  fbc1		       65 c5		      adc	SwatterWaitTime
    254  fbc3		       85 8e		      sta	FrameTimer+1
    255  fbc5
    256  fbc5							; Set Random Position
    257  fbc5		       20 13 f0 	      jsr	Random
    258  fbc8		       a5 84		      lda	Rand8	; X Position
    259  fbca		       29 7f		      and	#$7f
    260  fbcc		       85 a5		      sta	SwatterPosX
    261  fbce		       a5 85		      lda	Rand16	; Y Position
    262  fbd0		       29 7e		      and	#$7e	; Ensure that Y position is even
    263  fbd2		       85 c2		      sta	SwatterPosY
    264  fbd4
    265  fbd4		       60		      rts
    266  fbd5
    267  fbd5				   SwatterHoldSample
    268  fbd5		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    269  fbd7		       85 92		      sta	SampleStep
    270  fbd9		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    271  fbdb		       85 16		      sta	AUDC1
    272  fbdd		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    273  fbdf		       85 1a		      sta	AUDV1
    274  fbe1
    275  fbe1		       84 18		      sty	AUDF1	; Store value of y as frequency
    276  fbe3
    277  fbe3		       60		      rts
------- FILE game.asm
     22  fbe4
     23  fbe4							; Initialization
     24  fbe4
     25  fbe4				   GameInit
     26  fbe4
     27  fbe4							; Setup logic and kernel
      0  fbe4					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fbe4				   .POINTER   SET	VBlankPtr
      2  fbe4				   .ADDRESS   SET	GameVerticalBlank
      3  fbe4
      4  fbe4		       a9 21		      LDA	#<.ADDRESS
      5  fbe6		       85 86		      STA	.POINTER
      6  fbe8		       a9 fc		      LDA	#>.ADDRESS
      7  fbea		       85 87		      STA	.POINTER+1
      8  fbec
      0  fbec					      SET_POINTER	KernelPtr, GameKernel
      1  fbec				   .POINTER   SET	KernelPtr
      2  fbec				   .ADDRESS   SET	GameKernel
      3  fbec
      4  fbec		       a9 96		      LDA	#<.ADDRESS
      5  fbee		       85 88		      STA	.POINTER
      6  fbf0		       a9 fc		      LDA	#>.ADDRESS
      7  fbf2		       85 89		      STA	.POINTER+1
      8  fbf4
      0  fbf4					      SET_POINTER	OverScanPtr, GameOverScan
      1  fbf4				   .POINTER   SET	OverScanPtr
      2  fbf4				   .ADDRESS   SET	GameOverScan
      3  fbf4
      4  fbf4		       a9 49		      LDA	#<.ADDRESS
      5  fbf6		       85 8a		      STA	.POINTER
      6  fbf8		       a9 fc		      LDA	#>.ADDRESS
      7  fbfa		       85 8b		      STA	.POINTER+1
      8  fbfc
     31  fbfc
     32  fbfc							; Mute Audio
     33  fbfc		       a9 00		      lda	#0
     34  fbfe							;    sta AUDC0
     35  fbfe							;    sta AUDV0
     36  fbfe							;    sta AUDF0
     37  fbfe							;sta AUDC1
     38  fbfe		       85 1a		      sta	AUDV1
     39  fc00							;sta AUDF1
     40  fc00		       85 92		      sta	SampleStep
     41  fc02
     42  fc02							; Load Audio Settings
     43  fc02		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fc04		       85 19		      sta	AUDV0
     45  fc06
     46  fc06							; Make it so that we play the first note immediately
     47  fc06		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fc08		       85 91		      sta	AudioStep
     49  fc0a		       a9 02		      lda	#2
     50  fc0c		       85 8d		      sta	FrameTimer
     51  fc0e
     52  fc0e							; Reset NuSiz
     53  fc0e							;    lda #0
     54  fc0e							;    sta NuSiz0
     55  fc0e							;    sta NUSIZ0
     56  fc0e							;    sta NuSiz1
     57  fc0e							;    sta NUSIZ1
     58  fc0e
     59  fc0e							; Initialize Objects
     60  fc0e		       20 01 f5 	      jsr	LevelInit
     61  fc11		       20 be f5 	      jsr	ScoreInit
     62  fc14		       20 45 f7 	      jsr	SpiderInit
     63  fc17		       20 48 f8 	      jsr	LineInit
     64  fc1a		       20 af f9 	      jsr	BugInit
     65  fc1d							;jsr SwatterInit
     66  fc1d		       20 b5 fb 	      jsr	SwatterReset
     67  fc20
     68  fc20		       60		      rts
     69  fc21
     70  fc21				   GameVerticalBlank
     71  fc21
     72  fc21							; Refresh random values
     73  fc21		       20 13 f0 	      jsr	Random
     74  fc24
     75  fc24							; Update Objects
     76  fc24		       20 17 f5 	      jsr	LevelUpdate
     77  fc27		       20 5a f7 	      jsr	SpiderUpdate
     78  fc2a		       20 4d f8 	      jsr	LineUpdate
     79  fc2d		       20 e9 f9 	      jsr	BugUpdate
     80  fc30		       20 cf fa 	      jsr	SwatterUpdate
     81  fc33		       20 c7 f5 	      jsr	ScoreUpdate
     82  fc36
     83  fc36							; Reset Collisions
     84  fc36		       85 2c		      sta	CXCLR
     85  fc38
     86  fc38							; Clear horizontal movement
     87  fc38		       85 2b		      sta	HMCLR
     88  fc3a
     89  fc3a							; Update Positions
     90  fc3a		       a2 04		      ldx	#4
     91  fc3c				   .game_positions_loop
     92  fc3c		       b5 a4		      lda	XPositions,x
     93  fc3e		       20 00 f0 	      jsr	PosObject
     94  fc41		       ca		      dex
     95  fc42		       10 f8		      bpl	.game_positions_loop
     96  fc44
     97  fc44							; Set final x positions
     98  fc44		       85 02		      sta	WSYNC
     99  fc46		       85 2a		      sta	HMOVE
    100  fc48
    101  fc48		       60		      rts
    102  fc49
    103  fc49				   GameOverScan
    104  fc49
    105  fc49							; Audio Routines
    106  fc49		       20 66 fc 	      jsr	GameAudio
    107  fc4c		       20 58 fc 	      jsr	GameSample
    108  fc4f
    109  fc4f							; Check if player is dead
    110  fc4f		       a5 95		      lda	ScoreValue+0
    111  fc51		       d0 04		      bne	.game_overscan_return
    112  fc53
    113  fc53							; Show Game Over Screen
    114  fc53		       18		      clc		; Define lose
    115  fc54		       20 b5 fd 	      jsr	OverInit
    116  fc57
    117  fc57				   .game_overscan_return
    118  fc57		       60		      rts
    119  fc58
    120  fc58				   GameSample
    121  fc58
    122  fc58		       a6 92		      ldx	SampleStep
    123  fc5a		       f0 07		      beq	.game_sample_return
    124  fc5c
    125  fc5c		       ca		      dex
    126  fc5d		       d0 04		      bne	.game_sample_return
    127  fc5f
    128  fc5f				   .game_sample_mute
    129  fc5f		       a9 00		      lda	#0
    130  fc61		       85 1a		      sta	AUDV1
    131  fc63							;sta AUDF1
    132  fc63							;sta AUDC1
    133  fc63
    134  fc63				   .game_sample_return
    135  fc63		       86 92		      stx	SampleStep
    136  fc65		       60		      rts
    137  fc66
    138  fc66				   GameAudio
    139  fc66
    140  fc66		       a6 8d		      ldx	FrameTimer
    141  fc68		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    142  fc6a		       f0 25		      beq	.game_audio_mute_note
    143  fc6c		       e0 00		      cpx	#0
    144  fc6e		       d0 25		      bne	.game_audio_return
    145  fc70
    146  fc70							; Reset Timer
    147  fc70		       a6 94		      ldx	GameAudioStep
    148  fc72		       86 8d		      stx	FrameTimer
    149  fc74
    150  fc74				   .game_audio_play
    151  fc74
    152  fc74							; Increment melody position
    153  fc74		       a4 91		      ldy	AudioStep
    154  fc76		       c8		      iny
    155  fc77
    156  fc77		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    157  fc79		       d0 02		      bne	.game_audio_play_note
    158  fc7b
    159  fc7b							; Loop our audio step
    160  fc7b		       a0 00		      ldy	#0
    161  fc7d
    162  fc7d				   .game_audio_play_note
    163  fc7d
    164  fc7d							; Save current position
    165  fc7d		       84 91		      sty	AudioStep
    166  fc7f
    167  fc7f							; Melody Line
    168  fc7f		       b9 95 fd 	      lda	GameAudio0,y
    169  fc82		       c9 ff		      cmp	#$FF
    170  fc84		       f0 0b		      beq	.game_audio_mute_note
    171  fc86		       85 17		      sta	AUDF0
    172  fc88		       a9 06		      lda	#GAME_AUDIO_TONE
    173  fc8a		       85 15		      sta	AUDC0
    174  fc8c		       a9 02		      lda	#GAME_AUDIO_VOLUME
    175  fc8e		       85 19		      sta	AUDV0
    176  fc90
    177  fc90		       60		      rts
    178  fc91
    179  fc91				   .game_audio_mute_note
    180  fc91
    181  fc91		       a9 00		      lda	#0
    182  fc93							;sta AUDF0
    183  fc93							;sta AUDC0
    184  fc93		       85 19		      sta	AUDV0
    185  fc95
    186  fc95				   .game_audio_return
    187  fc95		       60		      rts
    188  fc96
    189  fc96				   GameKernel
    190  fc96
    191  fc96							; Turn on display
    192  fc96		       a9 00		      lda	#0
    193  fc98		       85 01		      sta	VBLANK
    194  fc9a
    195  fc9a				   .game_kernel_score
    196  fc9a
    197  fc9a							; Draw Score on top first
    198  fc9a		       20 2a f6 	      jsr	ScoreDraw
    199  fc9d
    200  fc9d				   .game_kernel_objects_start
    201  fc9d
    202  fc9d							; Setup Drawing Objects
    203  fc9d		       20 3c f7 	      jsr	WebDrawStart
    204  fca0		       20 28 f8 	      jsr	SpiderDrawStart
    205  fca3		       20 93 fb 	      jsr	SwatterDrawStart
    206  fca6		       20 6e f9 	      jsr	LineDrawStart
    207  fca9		       20 bd fa 	      jsr	BugDrawStart
    208  fcac
    209  fcac							; Set missle and sprite sizes
    210  fcac		       a9 35		      lda	#%00110101
    211  fcae		       85 04		      sta	NUSIZ0
    212  fcb0		       a9 37		      lda	#%00110111
    213  fcb2		       85 05		      sta	NUSIZ1
    214  fcb4
    215  fcb4							; Set playfield settings and ball size
    216  fcb4		       a9 21		      lda	#%00100001
    217  fcb6		       85 0a		      sta	CTRLPF
    218  fcb8
    219  fcb8							; Half scanline counter
    220  fcb8		       a2 54		      ldx	#(KERNEL_SCANLINES-SCORE_LINES)/2-2
    221  fcba
    222  fcba							; 6 line counter
    223  fcba		       a9 00		      lda	#0
    224  fcbc		       85 82		      sta	Temp+2
    225  fcbe
    226  fcbe							; Load background color and start first line
    227  fcbe		       a5 a2		      lda	WebColor+0
    228  fcc0		       85 02		      sta	WSYNC
    229  fcc2		       85 09		      sta	COLUBK
    230  fcc4
    231  fcc4				   .game_kernel_objects 		; 5 or 10 cycles
    232  fcc4
    233  fcc4		       a5 82		      lda	Temp+2	; 3
    234  fcc6		       d0 1a		      bne	.game_kernel_missle	; 2*
    235  fcc8
    236  fcc8		       a9 03		      lda	#3	; 2
    237  fcca		       85 82		      sta	Temp+2	; 3
    238  fccc
    239  fccc				   .game_kernel_web		; 32 cycles
    240  fccc							; Web
    241  fccc
    242  fccc		       a4 a1		      ldy	WebIndex	; 3
    243  fcce
    244  fcce							; Load Image
    245  fcce		       b9 5e f1 	      lda	WebImagePF0,y	; 4
    246  fcd1		       85 0d		      sta	PF0	; 3
    247  fcd3		       b9 7a f1 	      lda	WebImagePF1,y	; 4
    248  fcd6		       85 0e		      sta	PF1	; 3
    249  fcd8		       b9 96 f1 	      lda	WebImagePF2,y	; 4
    250  fcdb		       85 0f		      sta	PF2	; 3
    251  fcdd
    252  fcdd		       e6 a1		      inc	WebIndex	; 5
    253  fcdf
    254  fcdf		       4c 0c fd 	      jmp	.game_kernel_line	; 3
    255  fce2
    256  fce2				   .game_kernel_missle
    257  fce2
    258  fce2				   .game_kernel_missle_bug_0		; 18 cycles
    259  fce2							; First Bug
    260  fce2
    261  fce2							; Top
    262  fce2		       e4 c0		      cpx	BugDrawPosTop+0	; 3
    263  fce4		       b0 09		      bcs	.game_kernel_missle_bug_0_off_1	; 2 or 3 if branching
    264  fce6
    265  fce6							; Bottom
    266  fce6		       e4 be		      cpx	BugDrawPosBottom+0	; 3
    267  fce8		       90 08		      bcc	.game_kernel_missle_bug_0_off_2	; 2 or 3 if branching
    268  fcea
    269  fcea				   .game_kernel_missle_bug_0_on
    270  fcea		       a0 02		      ldy	#%00000010	; 2
    271  fcec		       4c f5 fc 	      jmp	.game_kernel_missle_bug_0_set	; 3
    272  fcef
    273  fcef				   .game_kernel_missle_bug_0_off_1
      0  fcef					      sleep	5
      1  fcef				   .CYCLES    SET	5
      2  fcef
      3  fcef				  -	      IF	.CYCLES < 2
      4  fcef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcef				  -	      ERR
      6  fcef					      ENDIF
      7  fcef
      8  fcef					      IF	.CYCLES & 1
      9  fcef					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcef		       04 00		      nop	0
     11  fcf1				  -	      ELSE
     12  fcf1				  -	      bit	VSYNC
     13  fcf1					      ENDIF
     14  fcf1				   .CYCLES    SET	.CYCLES - 3
     15  fcf1					      ENDIF
     16  fcf1
     17  fcf1					      REPEAT	.CYCLES / 2
     18  fcf1		       ea		      nop
     19  fcf2					      REPEND
    275  fcf2				   .game_kernel_missle_bug_0_off_2
      0  fcf2					      sleep	2
      1  fcf2				   .CYCLES    SET	2
      2  fcf2
      3  fcf2				  -	      IF	.CYCLES < 2
      4  fcf2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcf2				  -	      ERR
      6  fcf2					      ENDIF
      7  fcf2
      8  fcf2				  -	      IF	.CYCLES & 1
      9  fcf2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcf2				  -	      nop	0
     11  fcf2				  -	      ELSE
     12  fcf2				  -	      bit	VSYNC
     13  fcf2				  -	      ENDIF
     14  fcf2				  -.CYCLES    SET	.CYCLES - 3
     15  fcf2					      ENDIF
     16  fcf2
     17  fcf2					      REPEAT	.CYCLES / 2
     18  fcf2		       ea		      nop
     19  fcf3					      REPEND
    277  fcf3		       a0 00		      ldy	#%00000000	; 2
    278  fcf5				   .game_kernel_missle_bug_0_set
    279  fcf5		       84 1d		      sty	ENAM0	; 3
    280  fcf7
    281  fcf7				   .game_kernel_missle_bug_1		; 18 cycles
    282  fcf7							; Second Bug
    283  fcf7
    284  fcf7							; Top
    285  fcf7		       e4 c1		      cpx	BugDrawPosTop+1	; 3
    286  fcf9		       b0 09		      bcs	.game_kernel_missle_bug_1_off_1	; 2 or 3 if branching
    287  fcfb
    288  fcfb							; Bottom
    289  fcfb		       e4 bf		      cpx	BugDrawPosBottom+1	; 3
    290  fcfd		       90 08		      bcc	.game_kernel_missle_bug_1_off_2	; 2 or 3 if branching
    291  fcff
    292  fcff				   .game_kernel_missle_bug_1_on
    293  fcff		       a0 02		      ldy	#%00000010	; 2
    294  fd01		       4c 0a fd 	      jmp	.game_kernel_missle_bug_1_set	; 3
    295  fd04
    296  fd04				   .game_kernel_missle_bug_1_off_1
      0  fd04					      sleep	5
      1  fd04				   .CYCLES    SET	5
      2  fd04
      3  fd04				  -	      IF	.CYCLES < 2
      4  fd04				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd04				  -	      ERR
      6  fd04					      ENDIF
      7  fd04
      8  fd04					      IF	.CYCLES & 1
      9  fd04					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd04		       04 00		      nop	0
     11  fd06				  -	      ELSE
     12  fd06				  -	      bit	VSYNC
     13  fd06					      ENDIF
     14  fd06				   .CYCLES    SET	.CYCLES - 3
     15  fd06					      ENDIF
     16  fd06
     17  fd06					      REPEAT	.CYCLES / 2
     18  fd06		       ea		      nop
     19  fd07					      REPEND
    298  fd07				   .game_kernel_missle_bug_1_off_2
      0  fd07					      sleep	2
      1  fd07				   .CYCLES    SET	2
      2  fd07
      3  fd07				  -	      IF	.CYCLES < 2
      4  fd07				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd07				  -	      ERR
      6  fd07					      ENDIF
      7  fd07
      8  fd07				  -	      IF	.CYCLES & 1
      9  fd07				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd07				  -	      nop	0
     11  fd07				  -	      ELSE
     12  fd07				  -	      bit	VSYNC
     13  fd07				  -	      ENDIF
     14  fd07				  -.CYCLES    SET	.CYCLES - 3
     15  fd07					      ENDIF
     16  fd07
     17  fd07					      REPEAT	.CYCLES / 2
     18  fd07		       ea		      nop
     19  fd08					      REPEND
    300  fd08		       a0 00		      ldy	#%00000000	; 2
    301  fd0a				   .game_kernel_missle_bug_1_set
    302  fd0a		       84 1e		      sty	ENAM1	; 3
    303  fd0c
    304  fd0c				   .game_kernel_line		; 18 cycles
    305  fd0c							; Line
    306  fd0c
    307  fd0c							; Top
    308  fd0c		       e4 b8		      cpx	LineDrawPos+1	; 3
    309  fd0e		       b0 09		      bcs	.game_kernel_line_set_off_1	; 2 or 3 if branching
    310  fd10
    311  fd10							; Bottom
    312  fd10		       e4 b7		      cpx	LineDrawPos+0	; 3
    313  fd12		       90 08		      bcc	.game_kernel_line_set_off_2	; 2 or 3 if branching
    314  fd14
    315  fd14				   .game_kernel_line_set_on
    316  fd14		       a0 02		      ldy	#%00000010	; 2
    317  fd16		       4c 1f fd 	      jmp	.game_kernel_line_set	; 3
    318  fd19
    319  fd19				   .game_kernel_line_set_off_1
      0  fd19					      sleep	5
      1  fd19				   .CYCLES    SET	5
      2  fd19
      3  fd19				  -	      IF	.CYCLES < 2
      4  fd19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd19				  -	      ERR
      6  fd19					      ENDIF
      7  fd19
      8  fd19					      IF	.CYCLES & 1
      9  fd19					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd19		       04 00		      nop	0
     11  fd1b				  -	      ELSE
     12  fd1b				  -	      bit	VSYNC
     13  fd1b					      ENDIF
     14  fd1b				   .CYCLES    SET	.CYCLES - 3
     15  fd1b					      ENDIF
     16  fd1b
     17  fd1b					      REPEAT	.CYCLES / 2
     18  fd1b		       ea		      nop
     19  fd1c					      REPEND
    321  fd1c				   .game_kernel_line_set_off_2
      0  fd1c					      sleep	2
      1  fd1c				   .CYCLES    SET	2
      2  fd1c
      3  fd1c				  -	      IF	.CYCLES < 2
      4  fd1c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd1c				  -	      ERR
      6  fd1c					      ENDIF
      7  fd1c
      8  fd1c				  -	      IF	.CYCLES & 1
      9  fd1c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd1c				  -	      nop	0
     11  fd1c				  -	      ELSE
     12  fd1c				  -	      bit	VSYNC
     13  fd1c				  -	      ENDIF
     14  fd1c				  -.CYCLES    SET	.CYCLES - 3
     15  fd1c					      ENDIF
     16  fd1c
     17  fd1c					      REPEAT	.CYCLES / 2
     18  fd1c		       ea		      nop
     19  fd1d					      REPEND
    323  fd1d		       a0 00		      ldy	#%00000000	; 2
    324  fd1f				   .game_kernel_line_set
    325  fd1f		       84 1f		      sty	ENABL	; 3
    326  fd21
    327  fd21							; Next Line
    328  fd21							;sleep 17 or 16
    329  fd21		       85 02		      sta	WSYNC
    330  fd23
    331  fd23				   .game_kernel_sprite
    332  fd23
    333  fd23				   .game_kernel_sprite_spider		; 34 cycles
    334  fd23							; Spider
    335  fd23
    336  fd23		       a4 ae		      ldy	SpiderIndex	; 3
    337  fd25		       30 16		      bmi	.game_kernel_sprite_spider_load_1	; At end of sprite / 2 or 3 if branching
    338  fd27
    339  fd27							; Check y position to see if we should be drawing
    340  fd27		       8a		      txa		; 2
    341  fd28		       e5 af		      sbc	SpiderDrawPos	; 3
    342  fd2a		       10 15		      bpl	.game_kernel_sprite_spider_load_2	; 2 or 3 if branching
    343  fd2c
    344  fd2c				   .game_kernel_sprite_spider_draw
    345  fd2c
    346  fd2c							; Decrement sprite index
    347  fd2c		       88		      dey		; 2
    348  fd2d		       10 05		      bpl	.game_kernel_sprite_spider_grab	; 2 or 3 if branching
    349  fd2f
    350  fd2f		       a9 00		      lda	#0	; 2
    351  fd31							;sleep 1
    352  fd31		       4c 36 fd 	      jmp	.game_kernel_sprite_spider_store	; 3
    353  fd34
    354  fd34				   .game_kernel_sprite_spider_grab
    355  fd34		       b1 a9		      lda	(SpiderPtr),y	; 5
    356  fd36				   .game_kernel_sprite_spider_store
    357  fd36		       84 ae		      sty	SpiderIndex	; 3
    358  fd38		       85 b0		      sta	SpiderLine	; 3
    359  fd3a
    360  fd3a		       4c 4b fd 	      jmp	.game_kernel_sprite_spider_load_3	; 3
    361  fd3d
    362  fd3d				   .game_kernel_sprite_spider_load_1
      0  fd3d					      sleep	7
      1  fd3d				   .CYCLES    SET	7
      2  fd3d
      3  fd3d				  -	      IF	.CYCLES < 2
      4  fd3d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd3d				  -	      ERR
      6  fd3d					      ENDIF
      7  fd3d
      8  fd3d					      IF	.CYCLES & 1
      9  fd3d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd3d		       04 00		      nop	0
     11  fd3f				  -	      ELSE
     12  fd3f				  -	      bit	VSYNC
     13  fd3f					      ENDIF
     14  fd3f				   .CYCLES    SET	.CYCLES - 3
     15  fd3f					      ENDIF
     16  fd3f
     17  fd3f					      REPEAT	.CYCLES / 2
     18  fd3f		       ea		      nop
     17  fd3f					      REPEND
     18  fd40		       ea		      nop
     19  fd41					      REPEND
    364  fd41				   .game_kernel_sprite_spider_load_2
      0  fd41					      sleep	15
      1  fd41				   .CYCLES    SET	15
      2  fd41
      3  fd41				  -	      IF	.CYCLES < 2
      4  fd41				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd41				  -	      ERR
      6  fd41					      ENDIF
      7  fd41
      8  fd41					      IF	.CYCLES & 1
      9  fd41					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd41		       04 00		      nop	0
     11  fd43				  -	      ELSE
     12  fd43				  -	      bit	VSYNC
     13  fd43					      ENDIF
     14  fd43				   .CYCLES    SET	.CYCLES - 3
     15  fd43					      ENDIF
     16  fd43
     17  fd43					      REPEAT	.CYCLES / 2
     18  fd43		       ea		      nop
     17  fd43					      REPEND
     18  fd44		       ea		      nop
     17  fd44					      REPEND
     18  fd45		       ea		      nop
     17  fd45					      REPEND
     18  fd46		       ea		      nop
     17  fd46					      REPEND
     18  fd47		       ea		      nop
     17  fd47					      REPEND
     18  fd48		       ea		      nop
     19  fd49					      REPEND
    366  fd49		       a5 b0		      lda	SpiderLine	; 3
    367  fd4b				   .game_kernel_sprite_spider_load_3
    368  fd4b		       85 1b		      sta	GRP0	; 3
    369  fd4d
    370  fd4d				   .game_kernel_sprite_swatter		; 30 cycles
    371  fd4d							; Swatter
    372  fd4d
    373  fd4d							; Check if wait state
    374  fd4d							;bit SwatterState
    375  fd4d							;bpl .game_kernel_sprite_swatter_load
    376  fd4d
    377  fd4d		       a4 c8		      ldy	SwatterIndex	; 3
    378  fd4f		       30 0f		      bmi	.game_kernel_sprite_swatter_load_1	; At end of sprite / 2 or 3 if branching
    379  fd51
    380  fd51							; Check y position to see if we should be drawing
    381  fd51		       8a		      txa		; 2
    382  fd52		       e5 c9		      sbc	SwatterDrawPos	; 3
    383  fd54		       10 0e		      bpl	.game_kernel_sprite_swatter_load_2	; 2 or 3 if branching
    384  fd56
    385  fd56				   .game_kernel_sprite_swatter_draw
    386  fd56		       b9 e2 f1 	      lda	SwatterSprite,y	; 4
    387  fd59		       85 ca		      sta	SwatterLine	; 3
    388  fd5b
    389  fd5b							; Decrement sprite index
    390  fd5b		       c6 c8		      dec	SwatterIndex	; 5
    391  fd5d
    392  fd5d		       4c 6c fd 	      jmp	.game_kernel_sprite_swatter_line	; 3
    393  fd60
    394  fd60				   .game_kernel_sprite_swatter_load_1
      0  fd60					      sleep	7
      1  fd60				   .CYCLES    SET	7
      2  fd60
      3  fd60				  -	      IF	.CYCLES < 2
      4  fd60				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd60				  -	      ERR
      6  fd60					      ENDIF
      7  fd60
      8  fd60					      IF	.CYCLES & 1
      9  fd60					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd60		       04 00		      nop	0
     11  fd62				  -	      ELSE
     12  fd62				  -	      bit	VSYNC
     13  fd62					      ENDIF
     14  fd62				   .CYCLES    SET	.CYCLES - 3
     15  fd62					      ENDIF
     16  fd62
     17  fd62					      REPEAT	.CYCLES / 2
     18  fd62		       ea		      nop
     17  fd62					      REPEND
     18  fd63		       ea		      nop
     19  fd64					      REPEND
    396  fd64				   .game_kernel_sprite_swatter_load_2
      0  fd64					      sleep	11
      1  fd64				   .CYCLES    SET	11
      2  fd64
      3  fd64				  -	      IF	.CYCLES < 2
      4  fd64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd64				  -	      ERR
      6  fd64					      ENDIF
      7  fd64
      8  fd64					      IF	.CYCLES & 1
      9  fd64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd64		       04 00		      nop	0
     11  fd66				  -	      ELSE
     12  fd66				  -	      bit	VSYNC
     13  fd66					      ENDIF
     14  fd66				   .CYCLES    SET	.CYCLES - 3
     15  fd66					      ENDIF
     16  fd66
     17  fd66					      REPEAT	.CYCLES / 2
     18  fd66		       ea		      nop
     17  fd66					      REPEND
     18  fd67		       ea		      nop
     17  fd67					      REPEND
     18  fd68		       ea		      nop
     17  fd68					      REPEND
     18  fd69		       ea		      nop
     19  fd6a					      REPEND
    398  fd6a		       a5 ca		      lda	SwatterLine	; 3
    399  fd6c				   .game_kernel_sprite_swatter_line
    400  fd6c		       85 1c		      sta	GRP1	; 3
    401  fd6e
    402  fd6e				   .game_kernel_sprite_end		; 12 or 11 cycles
    403  fd6e
    404  fd6e							;sta WSYNC
    405  fd6e
    406  fd6e							; New line, decrement half scanline, and increment 3 line counter
    407  fd6e		       c6 82		      dec	Temp+2	; 5
    408  fd70		       ca		      dex		; 2
    409  fd71		       f0 03		      beq	.game_kernel_clean	; 2 or 3 if branching
    410  fd73		       4c c4 fc 	      jmp	.game_kernel_objects	; 3
    411  fd76
    412  fd76				   .game_kernel_clean
    413  fd76
    414  fd76		       85 02		      sta	WSYNC
    415  fd78
    416  fd78		       a9 00		      lda	#0
    417  fd7a		       85 09		      sta	COLUBK
    418  fd7c		       85 08		      sta	COLUPF
    419  fd7e		       85 06		      sta	COLUP0
    420  fd80		       85 07		      sta	COLUP1
    421  fd82		       85 0d		      sta	PF0
    422  fd84		       85 0e		      sta	PF1
    423  fd86		       85 0f		      sta	PF2
    424  fd88		       85 1b		      sta	GRP0
    425  fd8a		       85 1c		      sta	GRP1
    426  fd8c		       85 1d		      sta	ENAM0
    427  fd8e		       85 1e		      sta	ENAM1
    428  fd90		       85 1f		      sta	ENABL
    429  fd92
    430  fd92		       85 02		      sta	WSYNC
    431  fd94
    432  fd94				   .game_kernel_return
    433  fd94		       60		      rts
    434  fd95
    435  fd95				   GameAudio0
    436  fd95		       0d		      .byte.b	#13	; D
    437  fd96		       ff		      .byte.b	#$FF
    438  fd97		       0f		      .byte.b	#15	; B
    439  fd98		       ff		      .byte.b	#$FF
    440  fd99		       0d		      .byte.b	#13	; D
    441  fd9a		       ff		      .byte.b	#$FF
    442  fd9b		       0f		      .byte.b	#15	; B
    443  fd9c		       ff		      .byte.b	#$FF
    444  fd9d		       0d		      .byte.b	#13	; D
    445  fd9e		       0d		      .byte.b	#13	; D
    446  fd9f		       0f		      .byte.b	#15	; B
    447  fda0		       ff		      .byte.b	#$FF
    448  fda1		       0c		      .byte.b	#12	; D#
    449  fda2		       ff		      .byte.b	#$FF
    450  fda3		       0f		      .byte.b	#15	; B
    451  fda4		       ff		      .byte.b	#$FF
    452  fda5		       0b		      .byte.b	#11	; E
    453  fda6		       ff		      .byte.b	#$FF
    454  fda7		       0e		      .byte.b	#14	; C#
    455  fda8		       ff		      .byte.b	#$FF
    456  fda9		       0b		      .byte.b	#11
    457  fdaa		       ff		      .byte.b	#$FF
    458  fdab		       0e		      .byte.b	#14
    459  fdac		       ff		      .byte.b	#$FF
    460  fdad		       0b		      .byte.b	#11
    461  fdae		       0b		      .byte.b	#11
    462  fdaf		       0e		      .byte.b	#14
    463  fdb0		       ff		      .byte.b	#$FF
    464  fdb1		       0b		      .byte.b	#11
    465  fdb2		       ff		      .byte.b	#$FF
    466  fdb3		       0e		      .byte.b	#14
    467  fdb4		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fdb5					      include	"over.asm"
      1  fdb5							;================
      2  fdb5							; Constants
      3  fdb5							;================
      4  fdb5
      5  fdb5		       00 00	   OVER_BG_COLOR =	#$00
      6  fdb5		       00 56	   OVER_FG_WIN_COLOR =	#SPIDER_COLOR
      7  fdb5		       00 44	   OVER_FG_LOSE_COLOR =	#$44
      8  fdb5		       00 06	   OVER_FG_BW_COLOR =	#$06
      9  fdb5
     10  fdb5		       00 07	   OVER_AUDIO_TONE =	7
     11  fdb5		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fdb5		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fdb5		       00 10	   OVER_AUDIO_STEP =	16
     14  fdb5
     15  fdb5		       00 09	   OVER_IMAGE_SIZE =	9
     16  fdb5		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fdb5		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fdb5		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fdb5
     20  fdb5				   OverInit
     21  fdb5
     22  fdb5		       90 1f		      bcc	.over_init_lose
     23  fdb7
     24  fdb7				   .over_init_win
      0  fdb7					      SET_POINTER	OverImagePF1Ptr, OverWinImagePF1
      1  fdb7				   .POINTER   SET	OverImagePF1Ptr
      2  fdb7				   .ADDRESS   SET	OverWinImagePF1
      3  fdb7
      4  fdb7		       a9 aa		      LDA	#<.ADDRESS
      5  fdb9		       85 cd		      STA	.POINTER
      6  fdbb		       a9 fe		      LDA	#>.ADDRESS
      7  fdbd		       85 ce		      STA	.POINTER+1
      8  fdbf
      0  fdbf					      SET_POINTER	OverImagePF2Ptr, OverWinImagePF2
      1  fdbf				   .POINTER   SET	OverImagePF2Ptr
      2  fdbf				   .ADDRESS   SET	OverWinImagePF2
      3  fdbf
      4  fdbf		       a9 b3		      LDA	#<.ADDRESS
      5  fdc1		       85 cf		      STA	.POINTER
      6  fdc3		       a9 fe		      LDA	#>.ADDRESS
      7  fdc5		       85 d0		      STA	.POINTER+1
      8  fdc7
      0  fdc7					      SET_POINTER	OverAudio0Ptr, OverWinAudio0
      1  fdc7				   .POINTER   SET	OverAudio0Ptr
      2  fdc7				   .ADDRESS   SET	OverWinAudio0
      3  fdc7
      4  fdc7		       a9 ce		      LDA	#<.ADDRESS
      5  fdc9		       85 d1		      STA	.POINTER
      6  fdcb		       a9 fe		      LDA	#>.ADDRESS
      7  fdcd		       85 d2		      STA	.POINTER+1
      8  fdcf
     28  fdcf		       a9 56		      lda	#OVER_FG_WIN_COLOR
     29  fdd1		       85 d3		      sta	OverColor
     30  fdd3
     31  fdd3		       4c f2 fd 	      jmp	.over_init_logic
     32  fdd6
     33  fdd6				   .over_init_lose
      0  fdd6					      SET_POINTER	OverImagePF1Ptr, OverLoseImagePF1
      1  fdd6				   .POINTER   SET	OverImagePF1Ptr
      2  fdd6				   .ADDRESS   SET	OverLoseImagePF1
      3  fdd6
      4  fdd6		       a9 bc		      LDA	#<.ADDRESS
      5  fdd8		       85 cd		      STA	.POINTER
      6  fdda		       a9 fe		      LDA	#>.ADDRESS
      7  fddc		       85 ce		      STA	.POINTER+1
      8  fdde
      0  fdde					      SET_POINTER	OverImagePF2Ptr, OverLoseImagePF2
      1  fdde				   .POINTER   SET	OverImagePF2Ptr
      2  fdde				   .ADDRESS   SET	OverLoseImagePF2
      3  fdde
      4  fdde		       a9 c5		      LDA	#<.ADDRESS
      5  fde0		       85 cf		      STA	.POINTER
      6  fde2		       a9 fe		      LDA	#>.ADDRESS
      7  fde4		       85 d0		      STA	.POINTER+1
      8  fde6
      0  fde6					      SET_POINTER	OverAudio0Ptr, OverLoseAudio0
      1  fde6				   .POINTER   SET	OverAudio0Ptr
      2  fde6				   .ADDRESS   SET	OverLoseAudio0
      3  fde6
      4  fde6		       a9 d4		      LDA	#<.ADDRESS
      5  fde8		       85 d1		      STA	.POINTER
      6  fdea		       a9 fe		      LDA	#>.ADDRESS
      7  fdec		       85 d2		      STA	.POINTER+1
      8  fdee
     37  fdee		       a9 44		      lda	#OVER_FG_LOSE_COLOR
     38  fdf0		       85 d3		      sta	OverColor
     39  fdf2
     40  fdf2				   .over_init_logic
     41  fdf2
     42  fdf2							; Setup logic and kernel
      0  fdf2					      SET_POINTER	VBlankPtr, ScoreUpdate
      1  fdf2				   .POINTER   SET	VBlankPtr
      2  fdf2				   .ADDRESS   SET	ScoreUpdate
      3  fdf2
      4  fdf2		       a9 c7		      LDA	#<.ADDRESS
      5  fdf4		       85 86		      STA	.POINTER
      6  fdf6		       a9 f5		      LDA	#>.ADDRESS
      7  fdf8		       85 87		      STA	.POINTER+1
      8  fdfa
      0  fdfa					      SET_POINTER	KernelPtr, OverKernel
      1  fdfa				   .POINTER   SET	KernelPtr
      2  fdfa				   .ADDRESS   SET	OverKernel
      3  fdfa
      4  fdfa		       a9 66		      LDA	#<.ADDRESS
      5  fdfc		       85 88		      STA	.POINTER
      6  fdfe		       a9 fe		      LDA	#>.ADDRESS
      7  fe00		       85 89		      STA	.POINTER+1
      8  fe02
      0  fe02					      SET_POINTER	OverScanPtr, OverOverScan
      1  fe02				   .POINTER   SET	OverScanPtr
      2  fe02				   .ADDRESS   SET	OverOverScan
      3  fe02
      4  fe02		       a9 21		      LDA	#<.ADDRESS
      5  fe04		       85 8a		      STA	.POINTER
      6  fe06		       a9 fe		      LDA	#>.ADDRESS
      7  fe08		       85 8b		      STA	.POINTER+1
      8  fe0a
     46  fe0a
     47  fe0a							; Load audio settings
     48  fe0a		       a9 07		      lda	#OVER_AUDIO_TONE
     49  fe0c		       85 15		      sta	AUDC0
     50  fe0e							;lda #OVER_AUDIO_VOLUME
     51  fe0e							;sta AUDV0
     52  fe0e		       a9 00		      lda	#0
     53  fe10							;sta AUDC1
     54  fe10		       85 1a		      sta	AUDV1
     55  fe12
     56  fe12							; Set initial button state
     57  fe12							;lda #0
     58  fe12		       85 8f		      sta	InputState
     59  fe14
     60  fe14							; Setup frame counters
     61  fe14		       a9 01		      lda	#1
     62  fe16		       85 8d		      sta	FrameTimer
     63  fe18		       a9 10		      lda	#OVER_AUDIO_STEP
     64  fe1a		       85 92		      sta	SampleStep
     65  fe1c		       a9 06		      lda	#OVER_AUDIO_LENGTH
     66  fe1e		       85 91		      sta	AudioStep
     67  fe20
     68  fe20		       60		      rts
     69  fe21
     70  fe21				   OverOverScan
     71  fe21		       20 28 fe 	      jsr	OverAudio
     72  fe24		       20 4b fe 	      jsr	OverState
     73  fe27		       60		      rts
     74  fe28
     75  fe28				   OverAudio
     76  fe28
     77  fe28		       a5 8d		      lda	FrameTimer
     78  fe2a		       d0 1e		      bne	.over_audio_return
     79  fe2c
     80  fe2c							; Reset Timer
     81  fe2c					      REPEAT	3
     82  fe2c		       e6 92		      inc	SampleStep
     81  fe2c					      REPEND
     82  fe2e		       e6 92		      inc	SampleStep
     81  fe2e					      REPEND
     82  fe30		       e6 92		      inc	SampleStep
     83  fe32					      REPEND
     84  fe32		       a5 92		      lda	SampleStep
     85  fe34		       85 8d		      sta	FrameTimer
     86  fe36
     87  fe36				   .over_audio_play
     88  fe36
     89  fe36							; Increment melody position
     90  fe36		       a4 91		      ldy	AudioStep
     91  fe38		       f0 0c		      beq	.over_audio_mute_note
     92  fe3a		       c6 91		      dec	AudioStep
     93  fe3c		       88		      dey
     94  fe3d
     95  fe3d				   .over_audio_play_note
     96  fe3d
     97  fe3d							; Melody Line
     98  fe3d		       b1 d1		      lda	(OverAudio0Ptr),y
     99  fe3f		       85 17		      sta	AUDF0
    100  fe41		       a9 06		      lda	#OVER_AUDIO_VOLUME
    101  fe43		       85 19		      sta	AUDV0
    102  fe45
    103  fe45		       60		      rts
    104  fe46
    105  fe46				   .over_audio_mute_note
    106  fe46		       a9 00		      lda	#0
    107  fe48							;sta AUDF0
    108  fe48		       85 19		      sta	AUDV0
    109  fe4a
    110  fe4a				   .over_audio_return
    111  fe4a		       60		      rts
    112  fe4b
    113  fe4b				   OverState
    114  fe4b
    115  fe4b							; Check to see if audio has finished
    116  fe4b		       a5 91		      lda	AudioStep
    117  fe4d		       d0 16		      bne	.over_state_return
    118  fe4f
    119  fe4f		       a2 01		      ldx	#1
    120  fe51				   .over_state
    121  fe51							; Check if Fire Button on controller 1 is released
    122  fe51		       b5 0c		      lda	INPT4,x
    123  fe53		       30 05		      bmi	.over_state_check
    124  fe55
    125  fe55				   .over_state_on
    126  fe55		       a9 01		      lda	#1
    127  fe57		       95 8f		      sta	InputState,x
    128  fe59		       60		      rts
    129  fe5a
    130  fe5a				   .over_state_check
    131  fe5a		       b5 8f		      lda	InputState,x
    132  fe5c		       d0 04		      bne	.over_state_next
    133  fe5e
    134  fe5e				   .over_state_loop
    135  fe5e		       ca		      dex
    136  fe5f		       10 f0		      bpl	.over_state
    137  fe61		       60		      rts
    138  fe62
    139  fe62				   .over_state_next
    140  fe62							; Button is released, load title screen
    141  fe62		       20 72 f2 	      jsr	TitleInit
    142  fe65
    143  fe65				   .over_state_return
    144  fe65		       60		      rts
    145  fe66
    146  fe66				   OverKernel
    147  fe66
    148  fe66							; Turn on display
    149  fe66		       a9 00		      lda	#0
    150  fe68		       85 01		      sta	VBLANK
    151  fe6a
    152  fe6a				   .over_kernel_score
    153  fe6a
    154  fe6a							; Draw Score on top first (no update)
    155  fe6a		       20 2a f6 	      jsr	ScoreDraw
    156  fe6d
    157  fe6d				   .over_kernel_color
    158  fe6d							; Load Colors
    159  fe6d		       a9 00		      lda	#OVER_BG_COLOR
    160  fe6f		       85 09		      sta	COLUBK
    161  fe71
    162  fe71							; Check b/w
    163  fe71		       ad 82 02 	      lda	SWCHB
    164  fe74		       29 08		      and	#%00001000
    165  fe76		       f0 07		      beq	.over_kernel_color_bw
    166  fe78
    167  fe78				   .over_kernel_color_color
    168  fe78		       a5 d3		      lda	OverColor
    169  fe7a		       85 08		      sta	COLUPF
    170  fe7c
    171  fe7c		       4c 83 fe 	      jmp	.over_kernel_init
    172  fe7f
    173  fe7f				   .over_kernel_color_bw
    174  fe7f							; Load b/w Colors
    175  fe7f		       a9 06		      lda	#OVER_FG_BW_COLOR
    176  fe81		       85 08		      sta	COLUPF
    177  fe83
    178  fe83				   .over_kernel_init
    179  fe83							; Playfield Control
    180  fe83							;lda CtrlPf
    181  fe83							;and #%11111101 ; Use playfield foreground color
    182  fe83							;ora #%00000001 ; Set mirroring
    183  fe83							;sta CtrlPf
    184  fe83		       a9 01		      lda	#%00000001
    185  fe85		       85 0a		      sta	CTRLPF
    186  fe87
    187  fe87				   .over_kernel_top_padding
    188  fe87							; Top Padding
    189  fe87		       a2 32		      ldx	#OVER_IMAGE_PADDING
    190  fe89		       20 44 f0 	      jsr	BlankLines
    191  fe8c
    192  fe8c				   .over_kernel_image
    193  fe8c		       a0 08		      ldy	#OVER_IMAGE_SIZE-1
    194  fe8e
    195  fe8e				   .over_kernel_image_next
    196  fe8e		       b1 cf		      lda	(OverImagePF2Ptr),y
    197  fe90		       85 0f		      sta	PF2
    198  fe92		       b1 cd		      lda	(OverImagePF1Ptr),y
    199  fe94		       85 0e		      sta	PF1
    200  fe96							;    lda (OverImagePF0Ptr),y
    201  fe96							;    sta PF0
    202  fe96
    203  fe96		       a2 08		      ldx	#OVER_IMAGE_LINE_SIZE
    204  fe98				   .over_kernel_image_loop
    205  fe98		       85 02		      sta	WSYNC
    206  fe9a		       ca		      dex
    207  fe9b		       d0 fb		      bne	.over_kernel_image_loop
    208  fe9d
    209  fe9d		       88		      dey
    210  fe9e		       10 ee		      bpl	.over_kernel_image_next
    211  fea0
    212  fea0				   .over_kernel_bottom_padding
    213  fea0							; Bottom Padding
    214  fea0		       85 02		      sta	WSYNC	; Add extra line to get to 262
    215  fea2		       a2 32		      ldx	#OVER_IMAGE_PADDING
    216  fea4		       20 44 f0 	      jsr	BlankLines
    217  fea7
    218  fea7				   .over_kernel_return
    219  fea7		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    220  fea9		       60		      rts
    221  feaa
    222  feaa				   OverAssets
    223  feaa
    224  feaa							; Assets
------- FILE over_win_image.asm LEVEL 3 PASS 2
      0  feaa					      include	"over_win_image.asm"
      1  feaa							;OverWinImagePF0:
      2  feaa							;    .BYTE %00000000
      3  feaa							;    .BYTE %00000000
      4  feaa							;    .BYTE %00000000
      5  feaa							;    .BYTE %00000000
      6  feaa							;    .BYTE %00000000
      7  feaa							;    .BYTE %00000000
      8  feaa							;    .BYTE %00000000
      9  feaa							;    .BYTE %00000000
     10  feaa							;    .BYTE %00000000
     11  feaa
     12  feaa				   OverWinImagePF1
     13  feaa		       08		      .BYTE.b	%00001000
     14  feab		       10		      .BYTE.b	%00010000
     15  feac		       12		      .BYTE.b	%00010010
     16  fead		       24		      .BYTE.b	%00100100
     17  feae		       24		      .BYTE.b	%00100100
     18  feaf		       23		      .BYTE.b	%00100011
     19  feb0		       20		      .BYTE.b	%00100000
     20  feb1		       13		      .BYTE.b	%00010011
     21  feb2		       0c		      .BYTE.b	%00001100
     22  feb3
     23  feb3				   OverWinImagePF2
     24  feb3		       e0		      .BYTE.b	%11100000
     25  feb4		       f8		      .BYTE.b	%11111000
     26  feb5		       bc		      .BYTE.b	%10111100
     27  feb6		       0e		      .BYTE.b	%00001110
     28  feb7		       f7		      .BYTE.b	%11110111
     29  feb8		       9e		      .BYTE.b	%10011110
     30  feb9		       fd		      .BYTE.b	%11111101
     31  feba		       f8		      .BYTE.b	%11111000
     32  febb		       e0		      .BYTE.b	%11100000
------- FILE over.asm
------- FILE over_lose_image.asm LEVEL 3 PASS 2
      0  febc					      include	"over_lose_image.asm"
      1  febc							;OverLoseImagePF0:
      2  febc							;    .BYTE %00000000
      3  febc							;    .BYTE %00000000
      4  febc							;    .BYTE %00000000
      5  febc							;    .BYTE %00000000
      6  febc							;    .BYTE %00000000
      7  febc							;    .BYTE %00000000
      8  febc							;    .BYTE %00000000
      9  febc							;    .BYTE %00000000
     10  febc							;    .BYTE %00000000
     11  febc
     12  febc				   OverLoseImagePF1
     13  febc		       0c		      .BYTE.b	%00001100
     14  febd		       13		      .BYTE.b	%00010011
     15  febe		       20		      .BYTE.b	%00100000
     16  febf		       23		      .BYTE.b	%00100011
     17  fec0		       24		      .BYTE.b	%00100100
     18  fec1		       24		      .BYTE.b	%00100100
     19  fec2		       12		      .BYTE.b	%00010010
     20  fec3		       10		      .BYTE.b	%00010000
     21  fec4		       08		      .BYTE.b	%00001000
     22  fec5
     23  fec5				   OverLoseImagePF2
     24  fec5		       e0		      .BYTE.b	%11100000
     25  fec6		       f8		      .BYTE.b	%11111000
     26  fec7		       fd		      .BYTE.b	%11111101
     27  fec8		       ae		      .BYTE.b	%10101110
     28  fec9		       df		      .BYTE.b	%11011111
     29  feca		       ae		      .BYTE.b	%10101110
     30  fecb		       fc		      .BYTE.b	%11111100
     31  fecc		       f8		      .BYTE.b	%11111000
     32  fecd		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    227  fece
    228  fece				   OverWinAudio0
    229  fece		       0c		      .BYTE.b	#12
    230  fecf		       0c		      .BYTE.b	#12
    231  fed0		       0d		      .BYTE.b	#13
    232  fed1		       0e		      .BYTE.b	#14
    233  fed2		       10		      .BYTE.b	#16
    234  fed3		       12		      .BYTE.b	#18
    235  fed4
    236  fed4				   OverLoseAudio0
    237  fed4
    238  fed4		       1a		      .BYTE.b	#26	; D1
    239  fed5		       1a		      .BYTE.b	#26
    240  fed6		       16		      .BYTE.b	#22	; F1
    241  fed7		       11		      .BYTE.b	#17	; A1
    242  fed8		       0d		      .BYTE.b	#13	; D2
    243  fed9		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    307  feda
    308  feda							;================
    309  feda							; End of cart
    310  feda							;================
    311  feda
    312  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    313  fffa
    314  fffa				   InterruptVectors
    315  fffa
    316  fffa		       f6 f1		      .word.w	InitSystem	; NMI
    317  fffc		       f6 f1		      .word.w	InitSystem	; RESET
    318  fffe		       f6 f1		      .word.w	InitSystem	; IRQ
    319  10000
    320  10000					       END
