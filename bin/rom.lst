------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 11th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00cb ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00 00    Temp       ds	3
     61 U0086		       00	   Rand8      ds	1
     62 U0087		       00	   Rand16     ds	1
     63 U0088
     64 U0088		       00 00	   VBlankPtr  ds	2
     65 U008a		       00 00	   KernelPtr  ds	2
     66 U008c		       00 00	   OverScanPtr ds	2
     67 U008e
     68 U008e		       00	   Frame      ds	1
     69 U008f		       00 00	   FrameTimer ds	2
     70 U0091		       00	   InputState ds	1
     71 U0092
     72 U0092		       00	   AudioStep  ds	1
     73 U0093
     74 U0093		       00	   SampleStep ds	1
     75 U0094
     76 U0094							; Score
     77 U0094
     78 U0094		       00 00	   ScoreValue ds	2
     79 U0096		       00 00	   ScoreDigitOnes ds	2
     80 U0098		       00 00	   ScoreDigitTens ds	2
     81 U009a		       00 00 00    ScoreDigitGfx ds	3
     82 U009d		       00 00	   ScoreBarGfx ds	2
     83 U009f
     84 U009f							; Level
     85 U009f		       00	   LevelCurrent ds	1
     86 U00a0
     87 U00a0							; Web
     88 U00a0
     89 U00a0		       00	   WebIndex   ds	1
     90 U00a1		       00 00	   WebColor   ds	2
     91 U00a3
     92 U00a3							; Spider
     93 U00a3
     94 U00a3		       00 00	   SpiderPtr  ds	2
     95 U00a5		       00 00	   SpiderPos  ds	2
     96 U00a7		       00	   SpiderCtrl ds	1
     97 U00a8		       00	   SpiderColor ds	1
     98 U00a9
     99 U00a9		       00	   SpiderIndex ds	1
    100 U00aa		       00	   SpiderDrawPos ds	1
    101 U00ab		       00	   SpiderLine ds	1
    102 U00ac
    103 U00ac		       00 00	   SpiderPtr2 ds	2
    104 U00ae
    105 U00ae							; Line
    106 U00ae
    107 U00ae		       00	   LineEnabled ds	1
    108 U00af		       00 00	   LinePos    ds	2
    109 U00b1		       00 00	   LineVelocity ds	2
    110 U00b3		       00 00	   LineDrawPos ds	2
    111 U00b5
    112 U00b5							; Bug
    113 U00b5
    114 U00b5		       00	   BugSpeed   ds	1
    115 U00b6
    116 U00b6		       00 00	   BugStunned ds	2
    117 U00b8		       00 00	   BugPosX    ds	2
    118 U00ba		       00 00	   BugPosY    ds	2
    119 U00bc
    120 U00bc		       00 00	   BugDrawPosBottom ds	2
    121 U00be		       00 00	   BugDrawPosTop ds	2
    122 U00c0
    123 U00c0							; Swatter
    124 U00c0
    125 U00c0		       00 00	   SwatterPos ds	2
    126 U00c2		       00	   SwatterState ds	1
    127 U00c3		       00	   SwatterColor ds	1
    128 U00c4
    129 U00c4		       00	   SwatterWaitTime ds	1
    130 U00c5		       00	   SwatterHitDamage ds	1
    131 U00c6
    132 U00c6		       00	   SwatterIndex ds	1
    133 U00c7		       00	   SwatterDrawPos ds	1
    134 U00c8		       00	   SwatterLine ds	1
    135 U00c9
    136 U00c9		       00	   SwatterSampleCount ds	1
    137 U00ca		       00	   SwatterSampleF ds	1
    138 U00cb
    139  10000 ????				       SEG
    140  f000					      org	$F000	; Start of cart area
    141  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 86		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 87		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 86		      sta	Rand8
     49  f01e		       45 87		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 83		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 84		      sta	Temp+1
     70  f029		       85 85		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 83		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 84		      lda	Temp+1	; And add into result
     77  f031		       65 84		      adc	Temp+1
     78  f033		       85 84		      sta	Temp+1
     79  f035
     80  f035		       a5 85		      lda	Temp+2	; Propagating any carry
     81  f037		       65 85		      adc	Temp+2
     82  f039		       85 85		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 84		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 85		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    143  f044
    144  f044							; Assets
    145  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    149  f0bc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0bc					      include	"objects/score_digits.asm"
      1  f0bc				   ScoreDigits
      2  f0bc
      3  f0bc		       77		      .BYTE.b	%01110111
      4  f0bd		       55		      .BYTE.b	%01010101
      5  f0be		       55		      .BYTE.b	%01010101
      6  f0bf		       55		      .BYTE.b	%01010101
      7  f0c0		       77		      .BYTE.b	%01110111
      8  f0c1
      9  f0c1		       11		      .BYTE.b	%00010001
     10  f0c2		       11		      .BYTE.b	%00010001
     11  f0c3		       11		      .BYTE.b	%00010001
     12  f0c4		       11		      .BYTE.b	%00010001
     13  f0c5		       11		      .BYTE.b	%00010001
     14  f0c6
     15  f0c6		       77		      .BYTE.b	%01110111
     16  f0c7		       11		      .BYTE.b	%00010001
     17  f0c8		       77		      .BYTE.b	%01110111
     18  f0c9		       44		      .BYTE.b	%01000100
     19  f0ca		       77		      .BYTE.b	%01110111
     20  f0cb
     21  f0cb		       77		      .BYTE.b	%01110111
     22  f0cc		       11		      .BYTE.b	%00010001
     23  f0cd		       33		      .BYTE.b	%00110011
     24  f0ce		       11		      .BYTE.b	%00010001
     25  f0cf		       77		      .BYTE.b	%01110111
     26  f0d0
     27  f0d0		       55		      .BYTE.b	%01010101
     28  f0d1		       55		      .BYTE.b	%01010101
     29  f0d2		       77		      .BYTE.b	%01110111
     30  f0d3		       11		      .BYTE.b	%00010001
     31  f0d4		       11		      .BYTE.b	%00010001
     32  f0d5
     33  f0d5		       77		      .BYTE.b	%01110111
     34  f0d6		       44		      .BYTE.b	%01000100
     35  f0d7		       77		      .BYTE.b	%01110111
     36  f0d8		       11		      .BYTE.b	%00010001
     37  f0d9		       77		      .BYTE.b	%01110111
     38  f0da
     39  f0da		       77		      .BYTE.b	%01110111
     40  f0db		       44		      .BYTE.b	%01000100
     41  f0dc		       77		      .BYTE.b	%01110111
     42  f0dd		       55		      .BYTE.b	%01010101
     43  f0de		       77		      .BYTE.b	%01110111
     44  f0df
     45  f0df		       77		      .BYTE.b	%01110111
     46  f0e0		       11		      .BYTE.b	%00010001
     47  f0e1		       22		      .BYTE.b	%00100010
     48  f0e2		       22		      .BYTE.b	%00100010
     49  f0e3		       22		      .BYTE.b	%00100010
     50  f0e4
     51  f0e4		       77		      .BYTE.b	%01110111
     52  f0e5		       55		      .BYTE.b	%01010101
     53  f0e6		       77		      .BYTE.b	%01110111
     54  f0e7		       55		      .BYTE.b	%01010101
     55  f0e8		       77		      .BYTE.b	%01110111
     56  f0e9
     57  f0e9		       77		      .BYTE.b	%01110111
     58  f0ea		       55		      .BYTE.b	%01010101
     59  f0eb		       77		      .BYTE.b	%01110111
     60  f0ec		       11		      .BYTE.b	%00010001
     61  f0ed		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f0ee					      include	"objects/score_digits_flip.asm"
      1  f0ee				   ScoreDigitsFlip
      2  f0ee
      3  f0ee		       ee		      .BYTE.b	%11101110
      4  f0ef		       aa		      .BYTE.b	%10101010
      5  f0f0		       aa		      .BYTE.b	%10101010
      6  f0f1		       aa		      .BYTE.b	%10101010
      7  f0f2		       ee		      .BYTE.b	%11101110
      8  f0f3
      9  f0f3		       88		      .BYTE.b	%10001000
     10  f0f4		       88		      .BYTE.b	%10001000
     11  f0f5		       88		      .BYTE.b	%10001000
     12  f0f6		       88		      .BYTE.b	%10001000
     13  f0f7		       88		      .BYTE.b	%10001000
     14  f0f8
     15  f0f8		       ee		      .BYTE.b	%11101110
     16  f0f9		       88		      .BYTE.b	%10001000
     17  f0fa		       ee		      .BYTE.b	%11101110
     18  f0fb		       22		      .BYTE.b	%00100010
     19  f0fc		       ee		      .BYTE.b	%11101110
     20  f0fd
     21  f0fd		       ee		      .BYTE.b	%11101110
     22  f0fe		       88		      .BYTE.b	%10001000
     23  f0ff		       cc		      .BYTE.b	%11001100
     24  f100		       88		      .BYTE.b	%10001000
     25  f101		       ee		      .BYTE.b	%11101110
     26  f102
     27  f102		       aa		      .BYTE.b	%10101010
     28  f103		       aa		      .BYTE.b	%10101010
     29  f104		       ee		      .BYTE.b	%11101110
     30  f105		       88		      .BYTE.b	%10001000
     31  f106		       88		      .BYTE.b	%10001000
     32  f107
     33  f107		       ee		      .BYTE.b	%11101110
     34  f108		       22		      .BYTE.b	%00100010
     35  f109		       ee		      .BYTE.b	%11101110
     36  f10a		       88		      .BYTE.b	%10001000
     37  f10b		       ee		      .BYTE.b	%11101110
     38  f10c
     39  f10c		       ee		      .BYTE.b	%11101110
     40  f10d		       22		      .BYTE.b	%00100010
     41  f10e		       ee		      .BYTE.b	%11101110
     42  f10f		       aa		      .BYTE.b	%10101010
     43  f110		       ee		      .BYTE.b	%11101110
     44  f111
     45  f111		       ee		      .BYTE.b	%11101110
     46  f112		       88		      .BYTE.b	%10001000
     47  f113		       44		      .BYTE.b	%01000100
     48  f114		       44		      .BYTE.b	%01000100
     49  f115		       44		      .BYTE.b	%01000100
     50  f116
     51  f116		       ee		      .BYTE.b	%11101110
     52  f117		       aa		      .BYTE.b	%10101010
     53  f118		       ee		      .BYTE.b	%11101110
     54  f119		       aa		      .BYTE.b	%10101010
     55  f11a		       ee		      .BYTE.b	%11101110
     56  f11b
     57  f11b		       ee		      .BYTE.b	%11101110
     58  f11c		       aa		      .BYTE.b	%10101010
     59  f11d		       ee		      .BYTE.b	%11101110
     60  f11e		       88		      .BYTE.b	%10001000
     61  f11f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f120					      include	"objects/score_label.asm"
      1  f120				   ScoreLabel
      2  f120
      3  f120		       20		      .BYTE.b	%00100000
      4  f121		       50		      .BYTE.b	%01010000
      5  f122		       ee		      .BYTE.b	%11101110
      6  f123		       00		      .BYTE.b	%00000000
      7  f124		       57		      .BYTE.b	%01010111
      8  f125		       00		      .BYTE.b	%00000000
      9  f126
     10  f126		       20		      .BYTE.b	%00100000
     11  f127		       50		      .BYTE.b	%01010000
     12  f128		       4a		      .BYTE.b	%01001010
     13  f129		       00		      .BYTE.b	%00000000
     14  f12a		       55		      .BYTE.b	%01010101
     15  f12b		       00		      .BYTE.b	%00000000
     16  f12c
     17  f12c		       20		      .BYTE.b	%00100000
     18  f12d		       50		      .BYTE.b	%01010000
     19  f12e		       4e		      .BYTE.b	%01001110
     20  f12f		       00		      .BYTE.b	%00000000
     21  f130		       77		      .BYTE.b	%01110111
     22  f131		       00		      .BYTE.b	%00000000
     23  f132
     24  f132		       20		      .BYTE.b	%00100000
     25  f133		       50		      .BYTE.b	%01010000
     26  f134		       42		      .BYTE.b	%01000010
     27  f135		       00		      .BYTE.b	%00000000
     28  f136		       54		      .BYTE.b	%01010100
     29  f137		       00		      .BYTE.b	%00000000
     30  f138
     31  f138		       e0		      .BYTE.b	%11100000
     32  f139		       20		      .BYTE.b	%00100000
     33  f13a		       42		      .BYTE.b	%01000010
     34  f13b		       00		      .BYTE.b	%00000000
     35  f13c		       54		      .BYTE.b	%01010100
     36  f13d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    153  f13e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f13e					      include	"objects/web_image.asm"
      1  f13e				   WebImagePF0
      2  f13e		       00		      .BYTE.b	%00000000
      3  f13f		       00		      .BYTE.b	%00000000
      4  f140		       00		      .BYTE.b	%00000000
      5  f141		       00		      .BYTE.b	%00000000
      6  f142		       00		      .BYTE.b	%00000000
      7  f143		       00		      .BYTE.b	%00000000
      8  f144		       00		      .BYTE.b	%00000000
      9  f145		       00		      .BYTE.b	%00000000
     10  f146		       30		      .BYTE.b	%00110000
     11  f147		       e0		      .BYTE.b	%11100000
     12  f148		       20		      .BYTE.b	%00100000
     13  f149		       40		      .BYTE.b	%01000000
     14  f14a		       40		      .BYTE.b	%01000000
     15  f14b		       80		      .BYTE.b	%10000000
     16  f14c		       80		      .BYTE.b	%10000000
     17  f14d		       40		      .BYTE.b	%01000000
     18  f14e		       40		      .BYTE.b	%01000000
     19  f14f		       20		      .BYTE.b	%00100000
     20  f150		       e0		      .BYTE.b	%11100000
     21  f151		       30		      .BYTE.b	%00110000
     22  f152		       00		      .BYTE.b	%00000000
     23  f153		       00		      .BYTE.b	%00000000
     24  f154		       00		      .BYTE.b	%00000000
     25  f155		       00		      .BYTE.b	%00000000
     26  f156		       00		      .BYTE.b	%00000000
     27  f157		       00		      .BYTE.b	%00000000
     28  f158		       00		      .BYTE.b	%00000000
     29  f159		       00		      .BYTE.b	%00000000
     30  f15a
     31  f15a				   WebImagePF1
     32  f15a		       02		      .BYTE.b	%00000010
     33  f15b		       01		      .BYTE.b	%00000001
     34  f15c		       00		      .BYTE.b	%00000000
     35  f15d		       00		      .BYTE.b	%00000000
     36  f15e		       01		      .BYTE.b	%00000001
     37  f15f		       01		      .BYTE.b	%00000001
     38  f160		       02		      .BYTE.b	%00000010
     39  f161		       0c		      .BYTE.b	%00001100
     40  f162		       30		      .BYTE.b	%00110000
     41  f163		       c0		      .BYTE.b	%11000000
     42  f164		       38		      .BYTE.b	%00111000
     43  f165		       07		      .BYTE.b	%00000111
     44  f166		       00		      .BYTE.b	%00000000
     45  f167		       00		      .BYTE.b	%00000000
     46  f168		       00		      .BYTE.b	%00000000
     47  f169		       00		      .BYTE.b	%00000000
     48  f16a		       07		      .BYTE.b	%00000111
     49  f16b		       38		      .BYTE.b	%00111000
     50  f16c		       c0		      .BYTE.b	%11000000
     51  f16d		       30		      .BYTE.b	%00110000
     52  f16e		       0c		      .BYTE.b	%00001100
     53  f16f		       02		      .BYTE.b	%00000010
     54  f170		       01		      .BYTE.b	%00000001
     55  f171		       01		      .BYTE.b	%00000001
     56  f172		       00		      .BYTE.b	%00000000
     57  f173		       00		      .BYTE.b	%00000000
     58  f174		       01		      .BYTE.b	%00000001
     59  f175		       02		      .BYTE.b	%00000010
     60  f176
     61  f176				   WebImagePF2
     62  f176		       08		      .BYTE.b	%00001000
     63  f177		       04		      .BYTE.b	%00000100
     64  f178		       03		      .BYTE.b	%00000011
     65  f179		       3f		      .BYTE.b	%00111111
     66  f17a		       c2		      .BYTE.b	%11000010
     67  f17b		       04		      .BYTE.b	%00000100
     68  f17c		       08		      .BYTE.b	%00001000
     69  f17d		       08		      .BYTE.b	%00001000
     70  f17e		       10		      .BYTE.b	%00010000
     71  f17f		       20		      .BYTE.b	%00100000
     72  f180		       20		      .BYTE.b	%00100000
     73  f181		       41		      .BYTE.b	%01000001
     74  f182		       8e		      .BYTE.b	%10001110
     75  f183		       f0		      .BYTE.b	%11110000
     76  f184		       f0		      .BYTE.b	%11110000
     77  f185		       8e		      .BYTE.b	%10001110
     78  f186		       41		      .BYTE.b	%01000001
     79  f187		       20		      .BYTE.b	%00100000
     80  f188		       20		      .BYTE.b	%00100000
     81  f189		       10		      .BYTE.b	%00010000
     82  f18a		       08		      .BYTE.b	%00001000
     83  f18b		       08		      .BYTE.b	%00001000
     84  f18c		       04		      .BYTE.b	%00000100
     85  f18d		       c2		      .BYTE.b	%11000010
     86  f18e		       3f		      .BYTE.b	%00111111
     87  f18f		       03		      .BYTE.b	%00000011
     88  f190		       04		      .BYTE.b	%00000100
     89  f191		       08		      .BYTE.b	%00001000
------- FILE kernel.asm
    155  f192
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f192					      include	"objects/spider_sprite.asm"
      1  f192				   SpiderSprite
      2  f192
      3  f192		       99		      .BYTE.b	%10011001
      4  f193		       bd		      .BYTE.b	%10111101
      5  f194		       db		      .BYTE.b	%11011011
      6  f195		       bd		      .BYTE.b	%10111101
      7  f196		       99		      .BYTE.b	%10011001
      8  f197		       99		      .BYTE.b	%10011001
      9  f198		       7e		      .BYTE.b	%01111110
     10  f199		       3c		      .BYTE.b	%00111100
     11  f19a		       3c		      .BYTE.b	%00111100
     12  f19b		       18		      .BYTE.b	%00011000
     13  f19c		       3c		      .BYTE.b	%00111100
     14  f19d		       7e		      .BYTE.b	%01111110
     15  f19e		       bd		      .BYTE.b	%10111101
     16  f19f		       bd		      .BYTE.b	%10111101
     17  f1a0		       bd		      .BYTE.b	%10111101
     18  f1a1		       99		      .BYTE.b	%10011001
     19  f1a2
     20  f1a2		       c7		      .BYTE.b	%11000111
     21  f1a3		       c7		      .BYTE.b	%11000111
     22  f1a4		       28		      .BYTE.b	%00101000
     23  f1a5		       28		      .BYTE.b	%00101000
     24  f1a6		       3a		      .BYTE.b	%00111010
     25  f1a7		       7a		      .BYTE.b	%01111010
     26  f1a8		       fd		      .BYTE.b	%11111101
     27  f1a9		       ff		      .BYTE.b	%11111111
     28  f1aa		       ff		      .BYTE.b	%11111111
     29  f1ab		       fd		      .BYTE.b	%11111101
     30  f1ac		       7a		      .BYTE.b	%01111010
     31  f1ad		       3a		      .BYTE.b	%00111010
     32  f1ae		       28		      .BYTE.b	%00101000
     33  f1af		       28		      .BYTE.b	%00101000
     34  f1b0		       c7		      .BYTE.b	%11000111
     35  f1b1		       c7		      .BYTE.b	%11000111
     36  f1b2
     37  f1b2		       99		      .BYTE.b	%10011001
     38  f1b3		       bd		      .BYTE.b	%10111101
     39  f1b4		       bd		      .BYTE.b	%10111101
     40  f1b5		       bd		      .BYTE.b	%10111101
     41  f1b6		       7e		      .BYTE.b	%01111110
     42  f1b7		       3c		      .BYTE.b	%00111100
     43  f1b8		       18		      .BYTE.b	%00011000
     44  f1b9		       3c		      .BYTE.b	%00111100
     45  f1ba		       3c		      .BYTE.b	%00111100
     46  f1bb		       7e		      .BYTE.b	%01111110
     47  f1bc		       99		      .BYTE.b	%10011001
     48  f1bd		       99		      .BYTE.b	%10011001
     49  f1be		       bd		      .BYTE.b	%10111101
     50  f1bf		       db		      .BYTE.b	%11011011
     51  f1c0		       bd		      .BYTE.b	%10111101
     52  f1c1		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    157  f1c2
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1c2					      include	"objects/swatter_sprite.asm"
      1  f1c2				   SwatterSprite
      2  f1c2
      3  f1c2		       3c		      .BYTE.b	%00111100
      4  f1c3		       3c		      .BYTE.b	%00111100
      5  f1c4		       56		      .BYTE.b	%01010110
      6  f1c5		       6a		      .BYTE.b	%01101010
      7  f1c6		       d5		      .BYTE.b	%11010101
      8  f1c7		       ab		      .BYTE.b	%10101011
      9  f1c8		       d5		      .BYTE.b	%11010101
     10  f1c9		       ab		      .BYTE.b	%10101011
     11  f1ca		       d5		      .BYTE.b	%11010101
     12  f1cb		       ab		      .BYTE.b	%10101011
     13  f1cc		       d5		      .BYTE.b	%11010101
     14  f1cd		       ab		      .BYTE.b	%10101011
     15  f1ce		       56		      .BYTE.b	%01010110
     16  f1cf		       6a		      .BYTE.b	%01101010
     17  f1d0		       56		      .BYTE.b	%01010110
     18  f1d1		       6a		      .BYTE.b	%01101010
     19  f1d2		       34		      .BYTE.b	%00110100
     20  f1d3		       2c		      .BYTE.b	%00101100
     21  f1d4		       34		      .BYTE.b	%00110100
     22  f1d5		       18		      .BYTE.b	%00011000
------- FILE kernel.asm
    159  f1d6
------- FILE logo_image.asm LEVEL 2 PASS 2
      0  f1d6					      include	"logo_image.asm"
      1  f1d6				   LogoImage1
      2  f1d6		       03		      .BYTE.b	%00000011
      3  f1d7		       03		      .BYTE.b	%00000011
      4  f1d8		       13		      .BYTE.b	%00010011
      5  f1d9		       33		      .BYTE.b	%00110011
      6  f1da		       63		      .BYTE.b	%01100011
      7  f1db		       c3		      .BYTE.b	%11000011
      8  f1dc		       c3		      .BYTE.b	%11000011
      9  f1dd		       63		      .BYTE.b	%01100011
     10  f1de		       33		      .BYTE.b	%00110011
     11  f1df		       13		      .BYTE.b	%00010011
     12  f1e0		       03		      .BYTE.b	%00000011
     13  f1e1		       03		      .BYTE.b	%00000011
     14  f1e2
     15  f1e2				   LogoImage2
     16  f1e2		       83		      .BYTE.b	%10000011
     17  f1e3		       c7		      .BYTE.b	%11000111
     18  f1e4		       ef		      .BYTE.b	%11101111
     19  f1e5		       6e		      .BYTE.b	%01101110
     20  f1e6		       6c		      .BYTE.b	%01101100
     21  f1e7		       6c		      .BYTE.b	%01101100
     22  f1e8		       6c		      .BYTE.b	%01101100
     23  f1e9		       6c		      .BYTE.b	%01101100
     24  f1ea		       6e		      .BYTE.b	%01101110
     25  f1eb		       ef		      .BYTE.b	%11101111
     26  f1ec		       c7		      .BYTE.b	%11000111
     27  f1ed		       83		      .BYTE.b	%10000011
     28  f1ee
     29  f1ee				   LogoImage3
     30  f1ee		       8f		      .BYTE.b	%10001111
     31  f1ef		       cf		      .BYTE.b	%11001111
     32  f1f0		       ef		      .BYTE.b	%11101111
     33  f1f1		       6d		      .BYTE.b	%01101101
     34  f1f2		       2c		      .BYTE.b	%00101100
     35  f1f3		       0c		      .BYTE.b	%00001100
     36  f1f4		       0c		      .BYTE.b	%00001100
     37  f1f5		       4c		      .BYTE.b	%01001100
     38  f1f6		       6d		      .BYTE.b	%01101101
     39  f1f7		       ef		      .BYTE.b	%11101111
     40  f1f8		       cf		      .BYTE.b	%11001111
     41  f1f9		       8f		      .BYTE.b	%10001111
     42  f1fa
     43  f1fa				   LogoImage4
     44  f1fa		       00		      .BYTE.b	%00000000
     45  f1fb		       01		      .BYTE.b	%00000001
     46  f1fc		       13		      .BYTE.b	%00010011
     47  f1fd		       33		      .BYTE.b	%00110011
     48  f1fe		       63		      .BYTE.b	%01100011
     49  f1ff		       c3		      .BYTE.b	%11000011
     50  f200		       c3		      .BYTE.b	%11000011
     51  f201		       63		      .BYTE.b	%01100011
     52  f202		       33		      .BYTE.b	%00110011
     53  f203		       13		      .BYTE.b	%00010011
     54  f204		       01		      .BYTE.b	%00000001
     55  f205		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    161  f206
    162  f206				   InitSystem
    163  f206
    164  f206				   .init_clean
    165  f206							; Resets RAM, TIA registers, and CPU registers
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
    167  f211
    168  f211				   .init_tia
    169  f211							; Define default TIA register values
    170  f211
    171  f211							; Initialize copies
    172  f211							;    lda #0
    173  f211							;    sta CtrlPf
    174  f211							;    sta NuSiz0
    175  f211							;    sta NuSiz1
    176  f211
    177  f211							; Set background color
    178  f211							;    lda #$00	      ; Black
    179  f211							;    sta COLUBK
    180  f211
    181  f211							; Set the playfield and player color
    182  f211							;    lda #$0E	      ; White
    183  f211							;    sta COLUPF
    184  f211							;    sta COLUP0
    185  f211							;    sta COLUP1
    186  f211
    187  f211							; Playfield Control
    188  f211							;    lda #%00000001  ; 1 for mirroring
    189  f211							;    sta CtrlPf
    190  f211							;    sta CTRLPF
    191  f211
    192  f211							; Disable Game Elements
    193  f211							;    lda #$00
    194  f211							;    sta ENABL       ; Turn off ball
    195  f211							;    sta ENAM0       ; Turn off player 1 missile
    196  f211							;    sta ENAM1       ; Turn off player 2 missile
    197  f211							;    sta GRP0	      ; Turn off player 1
    198  f211							;    sta GRP1	      ; Turn off player 2
    199  f211
    200  f211							; Empty playfield
    201  f211							;    lda #%00000000
    202  f211							;    sta PF0
    203  f211							;    sta PF1
    204  f211							;    sta PF2
    205  f211
    206  f211				   .init_seed
    207  f211							; Seed the random number generator
    208  f211		       ad 84 02 	      lda	INTIM	; Unknown value
    209  f214		       85 86		      sta	Rand8	; Use as seed
    210  f216		       49 ff		      eor	#$FF	; Flip bits
    211  f218		       85 87		      sta	Rand16	; Just in case INTIM was 0
    212  f21a
    213  f21a				   .init_game
    214  f21a
    215  f21a		       20 82 f2 	      jsr	LogoInit
    216  f21d
    217  f21d							;=======================================
    218  f21d							; Game Kernel
    219  f21d							;=======================================
    220  f21d
    221  f21d				   Main
    222  f21d
    223  f21d		       20 2c f2 	      jsr	VerticalSync
    224  f220		       20 45 f2 	      jsr	VerticalBlank
    225  f223		       20 58 f2 	      jsr	Kernel
    226  f226		       20 5f f2 	      jsr	OverScan
    227  f229		       4c 1d f2 	      jmp	Main
    228  f22c
    229  f22c				   VerticalSync
    230  f22c
    231  f22c		       a9 00		      lda	#0
    232  f22e		       85 01		      sta	VBLANK
    233  f230
    234  f230							; Turn on Vertical Sync signal and setup timer
    235  f230		       a9 02		      lda	#2
    236  f232		       85 00		      sta	VSYNC
    237  f234
    238  f234							; Increment frame count and reduce frame counter
    239  f234		       e6 8e		      inc	Frame
    240  f236		       c6 8f		      dec	FrameTimer
    241  f238		       c6 90		      dec	FrameTimer+1
    242  f23a
    243  f23a							; VSYNCH signal scanlines
    244  f23a					      REPEAT	#KERNEL_VSYNC
    245  f23a		       85 02		      sta	WSYNC
    244  f23a					      REPEND
    245  f23c		       85 02		      sta	WSYNC
    244  f23c					      REPEND
    245  f23e		       85 02		      sta	WSYNC
    246  f240					      REPEND
    247  f240
    248  f240							; Turn off Vertical Sync signal
    249  f240		       a9 00		      lda	#0
    250  f242		       85 00		      sta	VSYNC
    251  f244
    252  f244				   .vsync_return
    253  f244		       60		      rts
    254  f245
    255  f245				   VerticalBlank
    256  f245							; Setup Timer
    257  f245		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    258  f247		       8d 96 02 	      sta	TIM64T
    259  f24a
    260  f24a				   .vblank_logic
    261  f24a							; Perform Game Logic
    262  f24a		       20 55 f2 	      jsr	.vblank_logic_call_ptr
    263  f24d
    264  f24d				   .vblank_loop
    265  f24d							; WSYNC until Timer is complete
    266  f24d		       85 02		      sta	WSYNC
    267  f24f		       ad 84 02 	      lda	INTIM
    268  f252		       d0 f9		      bne	.vblank_loop
    269  f254
    270  f254				   .vblank_return
    271  f254		       60		      rts
    272  f255
    273  f255				   .vblank_logic_call_ptr
    274  f255		       6c 88 00 	      jmp	(VBlankPtr)
    275  f258
    276  f258				   Kernel
    277  f258
    278  f258							; Perform Selected Kernel
    279  f258		       20 5c f2 	      jsr	.kernel_call_ptr
    280  f25b		       60		      rts
    281  f25c
    282  f25c				   .kernel_call_ptr
    283  f25c		       6c 8a 00 	      jmp	(KernelPtr)
    284  f25f
    285  f25f				   OverScan
    286  f25f
    287  f25f							; End of screen, enter blanking
    288  f25f		       a9 42		      lda	#%01000010
    289  f261		       85 01		      sta	VBLANK
    290  f263
    291  f263							; Setup Timer
    292  f263		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    293  f265		       8d 96 02 	      sta	TIM64T
    294  f268
    295  f268							;.overscan_reset:
    296  f268							; Check for reset switch
    297  f268		       ad 82 02 	      lda	SWCHB
    298  f26b		       4a		      lsr		; Push D0 to carry (C)
    299  f26c		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    300  f26e
    301  f26e							; Perform reset
    302  f26e		       20 82 f2 	      jsr	LogoInit	; No need for logic
    303  f271		       4c 77 f2 	      jmp	.overscan_loop
    304  f274
    305  f274				   .overscan_logic
    306  f274							; Perform OverScan Logic
    307  f274		       20 7f f2 	      jsr	.overscan_logic_call_ptr
    308  f277
    309  f277				   .overscan_loop
    310  f277							; WSYNC until Timer is complete
    311  f277		       85 02		      sta	WSYNC
    312  f279		       ad 84 02 	      lda	INTIM
    313  f27c		       d0 f9		      bne	.overscan_loop
    314  f27e
    315  f27e				   .overscan_return
    316  f27e		       60		      rts
    317  f27f
    318  f27f				   .overscan_logic_call_ptr
    319  f27f		       6c 8c 00 	      jmp	(OverScanPtr)
    320  f282
    321  f282							;================
    322  f282							; State Code
    323  f282							;================
    324  f282
------- FILE logo.asm LEVEL 2 PASS 2
      0  f282					      include	"logo.asm"
      1  f282							;================
      2  f282							; Constants
      3  f282							;================
      4  f282
      5  f282		       00 8c	   LOGO_FRAMES =	140
      6  f282
      7  f282		       00 00	   LOGO_BG_COLOR =	#$00
      8  f282		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f282		       00 00	   LOGO_BG_BW_COLOR =	#$00
     10  f282		       00 0e	   LOGO_FG_BW_COLOR =	#$0E
     11  f282
     12  f282		       00 0c	   LOGO_IMAGE_SIZE =	12
     13  f282		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     14  f282		       00 3c	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     15  f282		       00 42	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     16  f282		       00 38	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-10	; The extra 10 is for processing overflow
     17  f282		       00 06	   LOGO_IMAGE_ANIM_SPEED =	#6
     18  f282
     19  f282				   LogoInit
     20  f282
     21  f282							; Setup logic and kernel
      0  f282					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f282				   .POINTER   SET	VBlankPtr
      2  f282				   .ADDRESS   SET	LogoVerticalBlank
      3  f282
      4  f282		       a9 ad		      LDA	#<.ADDRESS
      5  f284		       85 88		      STA	.POINTER
      6  f286		       a9 f2		      LDA	#>.ADDRESS
      7  f288		       85 89		      STA	.POINTER+1
      8  f28a
      0  f28a					      SET_POINTER	KernelPtr, LogoKernel
      1  f28a				   .POINTER   SET	KernelPtr
      2  f28a				   .ADDRESS   SET	LogoKernel
      3  f28a
      4  f28a		       a9 db		      LDA	#<.ADDRESS
      5  f28c		       85 8a		      STA	.POINTER
      6  f28e		       a9 f2		      LDA	#>.ADDRESS
      7  f290		       85 8b		      STA	.POINTER+1
      8  f292
      0  f292					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f292				   .POINTER   SET	OverScanPtr
      2  f292				   .ADDRESS   SET	LogoOverScan
      3  f292
      4  f292		       a9 b1		      LDA	#<.ADDRESS
      5  f294		       85 8c		      STA	.POINTER
      6  f296		       a9 f2		      LDA	#>.ADDRESS
      7  f298		       85 8d		      STA	.POINTER+1
      8  f29a
     25  f29a
     26  f29a							; Clean audio
     27  f29a		       a9 00		      lda	#0
     28  f29c		       85 19		      sta	AUDV0
     29  f29e		       85 1a		      sta	AUDV1
     30  f2a0
     31  f2a0							; Set initial button state
     32  f2a0							;    lda #0
     33  f2a0		       85 91		      sta	InputState
     34  f2a2
     35  f2a2							; Setup frame counters
     36  f2a2							;    lda #0
     37  f2a2		       85 8e		      sta	Frame
     38  f2a4		       a9 8c		      lda	#LOGO_FRAMES
     39  f2a6		       85 8f		      sta	FrameTimer
     40  f2a8
     41  f2a8							; Setup Image Animation
     42  f2a8		       a9 0b		      lda	#LOGO_IMAGE_SIZE-1
     43  f2aa		       85 a0		      sta	WebIndex
     44  f2ac
     45  f2ac		       60		      rts
     46  f2ad
     47  f2ad				   LogoVerticalBlank
     48  f2ad		       20 b5 f2 	      jsr	LogoAnimation
     49  f2b0		       60		      rts
     50  f2b1
     51  f2b1				   LogoOverScan
     52  f2b1		       20 c6 f2 	      jsr	LogoState
     53  f2b4		       60		      rts
     54  f2b5
     55  f2b5				   LogoAnimation
     56  f2b5		       a5 8e		      lda	Frame
     57  f2b7		       c9 06		      cmp	#LOGO_IMAGE_ANIM_SPEED
     58  f2b9		       d0 0a		      bne	.logo_animation_return
     59  f2bb
     60  f2bb		       a9 00		      lda	#0
     61  f2bd		       85 8e		      sta	Frame
     62  f2bf
     63  f2bf		       a6 a0		      ldx	WebIndex
     64  f2c1		       f0 02		      beq	.logo_animation_return
     65  f2c3
     66  f2c3							; Add another visible line
     67  f2c3		       c6 a0		      dec	WebIndex
     68  f2c5
     69  f2c5				   .logo_animation_return
     70  f2c5		       60		      rts
     71  f2c6
     72  f2c6				   LogoState
     73  f2c6		       a5 8f		      lda	FrameTimer
     74  f2c8		       f0 0d		      beq	.logo_state_next
     75  f2ca
     76  f2ca							; Check if Fire Button on controller 1 is released
     77  f2ca		       a5 0c		      lda	INPT4
     78  f2cc		       30 05		      bmi	.logo_state_check
     79  f2ce
     80  f2ce				   .logo_state_on
     81  f2ce		       a9 01		      lda	#1
     82  f2d0		       85 91		      sta	InputState
     83  f2d2		       60		      rts
     84  f2d3
     85  f2d3				   .logo_state_check
     86  f2d3		       a6 91		      ldx	InputState
     87  f2d5		       f0 03		      beq	.logo_state_return
     88  f2d7
     89  f2d7				   .logo_state_next
     90  f2d7							; Button is released or timer runs out, load title screen
     91  f2d7		       20 6a f3 	      jsr	TitleInit
     92  f2da
     93  f2da				   .logo_state_return
     94  f2da		       60		      rts
     95  f2db
     96  f2db				   LogoKernel
     97  f2db
     98  f2db							; Playfield Control
     99  f2db		       a9 01		      lda	#%00000001	; Mirror
    100  f2dd							;sta CtrlPf
    101  f2dd		       85 0a		      sta	CTRLPF
    102  f2df
    103  f2df							; Load Colors
    104  f2df		       ad 82 02 	      lda	SWCHB
    105  f2e2					      REPEAT	4
    106  f2e2		       4a		      lsr
    105  f2e2					      REPEND
    106  f2e3		       4a		      lsr
    105  f2e3					      REPEND
    106  f2e4		       4a		      lsr
    105  f2e4					      REPEND
    106  f2e5		       4a		      lsr
    107  f2e6					      REPEND
    108  f2e6		       90 07		      bcc	.logo_kernel_bw
    109  f2e8
    110  f2e8				   .logo_kernel_color
    111  f2e8		       a2 00		      ldx	#LOGO_BG_COLOR
    112  f2ea		       a0 c6		      ldy	#LOGO_FG_COLOR
    113  f2ec		       4c f3 f2 	      jmp	.logo_kernel_set
    114  f2ef
    115  f2ef				   .logo_kernel_bw
    116  f2ef		       a9 00		      lda	#LOGO_BG_BW_COLOR
    117  f2f1		       a9 0e		      lda	#LOGO_FG_BW_COLOR
    118  f2f3
    119  f2f3				   .logo_kernel_set
    120  f2f3		       86 09		      stx	COLUBK
    121  f2f5		       84 08		      sty	COLUPF
    122  f2f7
    123  f2f7				   .logo_kernel_start
    124  f2f7
    125  f2f7							; Turn on display
    126  f2f7		       a9 00		      lda	#0
    127  f2f9		       85 01		      sta	VBLANK
    128  f2fb
    129  f2fb		       a4 a0		      ldy	WebIndex
    130  f2fd		       d0 06		      bne	.logo_kernel_top_anim_padding
    131  f2ff
    132  f2ff				   .logo_kernel_top_padding
    133  f2ff							; Top Padding
    134  f2ff		       20 4d f3 	      jsr	LogoPadding
    135  f302		       4c 12 f3 	      jmp	.logo_kernel_image
    136  f305
    137  f305				   .logo_kernel_top_anim_padding
    138  f305		       20 5d f3 	      jsr	LogoAnimPadding
    139  f308
    140  f308				   .logo_kernel_image_animation_start
    141  f308		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    142  f30a
    143  f30a				   .logo_kernel_image_animation_loop
    144  f30a		       85 02		      sta	WSYNC
    145  f30c		       ca		      dex
    146  f30d		       d0 fb		      bne	.logo_kernel_image_animation_loop
    147  f30f
    148  f30f		       88		      dey
    149  f310		       10 f6		      bpl	.logo_kernel_image_animation_start
    150  f312
    151  f312				   .logo_kernel_image
    152  f312
    153  f312		       a2 0b		      ldx	#LOGO_IMAGE_SIZE-1
    154  f314		       a0 03		      ldy	#LOGO_IMAGE_LINE_SIZE-2
    155  f316							; The extra 2 on line size is for processing overflow
    156  f316
    157  f316							;dex
    158  f316		       e4 a0		      cpx	WebIndex
    159  f318		       90 2f		      bcc	.logo_kernel_bottom_padding
    160  f31a
    161  f31a				   .logo_kernel_image_line
    162  f31a		       85 02		      sta	WSYNC
    163  f31c
    164  f31c		       bd d6 f1 	      lda	LogoImage1,x
    165  f31f		       85 0e		      sta	PF1
    166  f321		       bd e2 f1 	      lda	LogoImage2,x
    167  f324		       85 0f		      sta	PF2
    168  f326
      0  f326					      sleep	26
      1  f326				   .CYCLES    SET	26
      2  f326
      3  f326				  -	      IF	.CYCLES < 2
      4  f326				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f326				  -	      ERR
      6  f326					      ENDIF
      7  f326
      8  f326				  -	      IF	.CYCLES & 1
      9  f326				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f326				  -	      nop	0
     11  f326				  -	      ELSE
     12  f326				  -	      bit	VSYNC
     13  f326				  -	      ENDIF
     14  f326				  -.CYCLES    SET	.CYCLES - 3
     15  f326					      ENDIF
     16  f326
     17  f326					      REPEAT	.CYCLES / 2
     18  f326		       ea		      nop
     17  f326					      REPEND
     18  f327		       ea		      nop
     17  f327					      REPEND
     18  f328		       ea		      nop
     17  f328					      REPEND
     18  f329		       ea		      nop
     17  f329					      REPEND
     18  f32a		       ea		      nop
     17  f32a					      REPEND
     18  f32b		       ea		      nop
     17  f32b					      REPEND
     18  f32c		       ea		      nop
     17  f32c					      REPEND
     18  f32d		       ea		      nop
     17  f32d					      REPEND
     18  f32e		       ea		      nop
     17  f32e					      REPEND
     18  f32f		       ea		      nop
     17  f32f					      REPEND
     18  f330		       ea		      nop
     17  f330					      REPEND
     18  f331		       ea		      nop
     17  f331					      REPEND
     18  f332		       ea		      nop
     19  f333					      REPEND
    170  f333
    171  f333		       bd ee f1 	      lda	LogoImage3,x
    172  f336		       85 0f		      sta	PF2
    173  f338		       bd fa f1 	      lda	LogoImage4,x
    174  f33b		       85 0e		      sta	PF1
    175  f33d
    176  f33d		       88		      dey
    177  f33e		       d0 da		      bne	.logo_kernel_image_line
    178  f340
    179  f340		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    180  f342
    181  f342		       e4 a0		      cpx	WebIndex
    182  f344		       90 03		      bcc	.logo_kernel_bottom_padding
    183  f346
    184  f346		       ca		      dex
    185  f347		       10 d1		      bpl	.logo_kernel_image_line
    186  f349
    187  f349				   .logo_kernel_bottom_padding
    188  f349							; Bottom Padding
    189  f349		       20 4d f3 	      jsr	LogoPadding
    190  f34c
    191  f34c				   .logo_kernel_image_return
    192  f34c		       60		      rts
    193  f34d
    194  f34d				   LogoPadding
    195  f34d		       a9 00		      lda	#0
    196  f34f		       85 0d		      sta	PF0
    197  f351		       85 0e		      sta	PF1
    198  f353		       85 0f		      sta	PF2
    199  f355
    200  f355		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    201  f357				   .logo_padding_loop
    202  f357		       85 02		      sta	WSYNC
    203  f359		       ca		      dex
    204  f35a		       d0 fb		      bne	.logo_padding_loop
    205  f35c
    206  f35c		       60		      rts
    207  f35d
    208  f35d				   LogoAnimPadding
    209  f35d		       a9 00		      lda	#0
    210  f35f		       85 0d		      sta	PF0
    211  f361		       85 0e		      sta	PF1
    212  f363		       85 0f		      sta	PF2
    213  f365
    214  f365		       a2 38		      ldx	#LOGO_IMAGE_ANIM_PADDING
    215  f367		       4c 57 f3 	      jmp	.logo_padding_loop
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f36a					      include	"title.asm"
      1  f36a							;================
      2  f36a							; Constants
      3  f36a							;================
      4  f36a
      5  f36a		       00 00	   TITLE_BG_COLOR =	#$00
      6  f36a		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f36a		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f36a		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f36a		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f36a
     11  f36a		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f36a		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f36a		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f36a		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f36a		       00 09	   TITLE_AUDIO_STEP =	9
     16  f36a
     17  f36a		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f36a		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f36a		       00 07	   TITLE_LABEL_LINE =	7
     20  f36a
     21  f36a		       00 10	   TITLE_GAP_SIZE =	#16
     22  f36a
     23  f36a		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f36a		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f36a		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f36a
     27  f36a				   TitleInit
     28  f36a
     29  f36a							; Setup logic and kernel
      0  f36a					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f36a				   .POINTER   SET	VBlankPtr
      2  f36a				   .ADDRESS   SET	TitleVerticalBlank
      3  f36a
      4  f36a		       a9 cb		      LDA	#<.ADDRESS
      5  f36c		       85 88		      STA	.POINTER
      6  f36e		       a9 f3		      LDA	#>.ADDRESS
      7  f370		       85 89		      STA	.POINTER+1
      8  f372
      0  f372					      SET_POINTER	KernelPtr, TitleKernel
      1  f372				   .POINTER   SET	KernelPtr
      2  f372				   .ADDRESS   SET	TitleKernel
      3  f372
      4  f372		       a9 8a		      LDA	#<.ADDRESS
      5  f374		       85 8a		      STA	.POINTER
      6  f376		       a9 f4		      LDA	#>.ADDRESS
      7  f378		       85 8b		      STA	.POINTER+1
      8  f37a
      0  f37a					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f37a				   .POINTER   SET	OverScanPtr
      2  f37a				   .ADDRESS   SET	TitleOverScan
      3  f37a
      4  f37a		       a9 3c		      LDA	#<.ADDRESS
      5  f37c		       85 8c		      STA	.POINTER
      6  f37e		       a9 f4		      LDA	#>.ADDRESS
      7  f380		       85 8d		      STA	.POINTER+1
      8  f382
     33  f382
     34  f382							; Load audio settings
     35  f382
     36  f382							; Melody Line
     37  f382		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f384		       85 15		      sta	AUDC0
     39  f386		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f388		       85 19		      sta	AUDV0
     41  f38a
     42  f38a							; Drums and Bass
     43  f38a		       a9 00		      lda	#0
     44  f38c		       85 16		      sta	AUDC1
     45  f38e		       85 1a		      sta	AUDV1
     46  f390
     47  f390							; Make it so that we play the first note immediately
     48  f390		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f392		       85 92		      sta	AudioStep
     50  f394		       a9 01		      lda	#1
     51  f396		       85 8f		      sta	FrameTimer
     52  f398
     53  f398							; Setup Spider Sprite
      0  f398					      SET_POINTER	SpiderPtr, TitleSpider
      1  f398				   .POINTER   SET	SpiderPtr
      2  f398				   .ADDRESS   SET	TitleSpider
      3  f398
      4  f398		       a9 aa		      LDA	#<.ADDRESS
      5  f39a		       85 a3		      STA	.POINTER
      6  f39c		       a9 f0		      LDA	#>.ADDRESS
      7  f39e		       85 a4		      STA	.POINTER+1
      8  f3a0
     55  f3a0
     56  f3a0		       a5 81		      lda	NuSiz0
     57  f3a2		       29 f8		      and	#%11111000
     58  f3a4		       09 06		      ora	#%00000110	; Triple Sprite
     59  f3a6		       85 81		      sta	NuSiz0
     60  f3a8		       85 04		      sta	NUSIZ0
     61  f3aa		       85 82		      sta	NuSiz1
     62  f3ac		       85 05		      sta	NUSIZ1
     63  f3ae
     64  f3ae		       a9 00		      lda	#0	; No reflect
     65  f3b0		       85 0b		      sta	REFP0
     66  f3b2		       a9 ff		      lda	#$FF	; Reflect P1
     67  f3b4		       85 0c		      sta	REFP1
     68  f3b6
     69  f3b6		       a9 00		      lda	#0
     70  f3b8		       85 aa		      sta	SpiderDrawPos	; Initialize animation state
     71  f3ba
     72  f3ba							; Setup Web Line
     73  f3ba							; Missle0 (2 clock size)
     74  f3ba		       a5 81		      lda	NuSiz0
     75  f3bc		       29 cf		      and	#%11001111
     76  f3be		       09 10		      ora	#%00010000
     77  f3c0		       85 81		      sta	NuSiz0
     78  f3c2		       85 04		      sta	NUSIZ0
     79  f3c4
     80  f3c4							; Disable at start
     81  f3c4		       a9 00		      lda	#0
     82  f3c6		       85 1d		      sta	ENAM0
     83  f3c8
     84  f3c8							; Set initial button state
     85  f3c8							;lda #0
     86  f3c8		       85 91		      sta	InputState
     87  f3ca
     88  f3ca		       60		      rts
     89  f3cb
     90  f3cb				   TitleVerticalBlank
     91  f3cb
     92  f3cb							; Refresh random values
     93  f3cb		       20 13 f0 	      jsr	Random
     94  f3ce
     95  f3ce		       20 d8 f3 	      jsr	TitlePosition
     96  f3d1		       20 f2 f3 	      jsr	TitleAnimation
     97  f3d4		       20 1d f4 	      jsr	TitleColor
     98  f3d7
     99  f3d7		       60		      rts
    100  f3d8
    101  f3d8				   TitlePosition
    102  f3d8
    103  f3d8							; Position Spider
    104  f3d8		       a2 00		      ldx	#0	; Object (player0)
    105  f3da		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    106  f3dc		       20 00 f0 	      jsr	PosObject
    107  f3df
    108  f3df		       a2 01		      ldx	#1	; Object (player1)
    109  f3e1		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    110  f3e3		       20 00 f0 	      jsr	PosObject
    111  f3e6
    112  f3e6							; Position Web Line
    113  f3e6		       a2 02		      ldx	#2	; Object (missle0)
    114  f3e8		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    115  f3ea		       20 00 f0 	      jsr	PosObject
    116  f3ed
    117  f3ed		       85 02		      sta	WSYNC
    118  f3ef		       85 2a		      sta	HMOVE
    119  f3f1
    120  f3f1		       60		      rts
    121  f3f2
    122  f3f2				   TitleAnimation
    123  f3f2
    124  f3f2		       a5 92		      lda	AudioStep
    125  f3f4							;cmp #0
    126  f3f4		       f0 0d		      beq	.title_animation_1
    127  f3f6		       c9 04		      cmp	#4
    128  f3f8		       f0 16		      beq	.title_animation_2
    129  f3fa		       c9 09		      cmp	#9
    130  f3fc		       f0 05		      beq	.title_animation_1
    131  f3fe		       c9 0c		      cmp	#12
    132  f400		       f0 0e		      beq	.title_animation_2
    133  f402		       60		      rts
    134  f403
    135  f403				   .title_animation_1
      0  f403					      SET_POINTER	SpiderPtr, TitleSpider
      1  f403				   .POINTER   SET	SpiderPtr
      2  f403				   .ADDRESS   SET	TitleSpider
      3  f403
      4  f403		       a9 aa		      LDA	#<.ADDRESS
      5  f405		       85 a3		      STA	.POINTER
      6  f407		       a9 f0		      LDA	#>.ADDRESS
      7  f409		       85 a4		      STA	.POINTER+1
      8  f40b
    137  f40b		       a9 00		      lda	#0
    138  f40d		       85 aa		      sta	SpiderDrawPos
    139  f40f		       60		      rts
    140  f410
    141  f410				   .title_animation_2
      0  f410					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f410				   .POINTER   SET	SpiderPtr
      2  f410				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f410
      4  f410		       a9 b3		      LDA	#<.ADDRESS
      5  f412		       85 a3		      STA	.POINTER
      6  f414		       a9 f0		      LDA	#>.ADDRESS
      7  f416		       85 a4		      STA	.POINTER+1
      8  f418
    143  f418		       a9 01		      lda	#1
    144  f41a		       85 aa		      sta	SpiderDrawPos
    145  f41c		       60		      rts
    146  f41d
    147  f41d				   TitleColor
    148  f41d
    149  f41d							; Load Colors
    150  f41d		       a9 00		      lda	#TITLE_BG_COLOR
    151  f41f		       85 09		      sta	COLUBK
    152  f421		       a9 06		      lda	#TITLE_WEB_COLOR
    153  f423		       85 08		      sta	COLUPF
    154  f425
    155  f425							; Check b/w
    156  f425		       ad 82 02 	      lda	SWCHB
    157  f428					      REPEAT	4
    158  f428		       4a		      lsr
    157  f428					      REPEND
    158  f429		       4a		      lsr
    157  f429					      REPEND
    158  f42a		       4a		      lsr
    157  f42a					      REPEND
    158  f42b		       4a		      lsr
    159  f42c					      REPEND
    160  f42c		       90 07		      bcc	.title_bw
    161  f42e
    162  f42e				   .title_color
    163  f42e		       a9 56		      lda	#TITLE_SPIDER_COLOR
    164  f430		       85 06		      sta	COLUP0
    165  f432		       85 07		      sta	COLUP1
    166  f434
    167  f434		       60		      rts
    168  f435
    169  f435				   .title_bw
    170  f435							; Load B/W Colors
    171  f435		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    172  f437		       85 06		      sta	COLUP0
    173  f439		       85 07		      sta	COLUP1
    174  f43b
    175  f43b		       60		      rts
    176  f43c
    177  f43c				   TitleOverScan
    178  f43c		       20 43 f4 	      jsr	TitleAudio
    179  f43f		       20 79 f4 	      jsr	TitleState
    180  f442		       60		      rts
    181  f443
    182  f443				   TitleAudio
    183  f443
    184  f443		       a6 8f		      ldx	FrameTimer
    185  f445		       d0 31		      bne	.title_audio_return
    186  f447
    187  f447							; Reset Timer
    188  f447		       a2 09		      ldx	#TITLE_AUDIO_STEP
    189  f449		       86 8f		      stx	FrameTimer
    190  f44b
    191  f44b				   .title_audio_play
    192  f44b
    193  f44b							; Increment melody position
    194  f44b		       a4 92		      ldy	AudioStep
    195  f44d		       c8		      iny
    196  f44e
    197  f44e							; Check if we're at the end of the melody
    198  f44e		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    199  f450		       d0 02		      bne	.title_audio_play_note
    200  f452
    201  f452							; Loop our audio step
    202  f452		       a0 00		      ldy	#0
    203  f454
    204  f454				   .title_audio_play_note
    205  f454
    206  f454							; Save current position
    207  f454		       84 92		      sty	AudioStep
    208  f456
    209  f456							; Basic Melody Line
    210  f456		       b9 76 f5 	      lda	TitleAudio0,y
    211  f459		       85 17		      sta	AUDF0
    212  f45b
    213  f45b							; Drums and Bass
    214  f45b		       b9 86 f5 	      lda	TitleTone1,y
    215  f45e		       c9 ff		      cmp	#$FF
    216  f460		       f0 0e		      beq	.title_audio_play_note_1_mute
    217  f462
    218  f462		       85 16		      sta	AUDC1
    219  f464		       b9 96 f5 	      lda	TitleAudio1,y
    220  f467		       85 18		      sta	AUDF1
    221  f469		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    222  f46b		       85 1a		      sta	AUDV1
    223  f46d
    224  f46d		       4c 78 f4 	      jmp	.title_audio_return
    225  f470
    226  f470				   .title_audio_play_note_1_mute
    227  f470
    228  f470		       a9 00		      lda	#0
    229  f472		       85 18		      sta	AUDF1
    230  f474		       85 16		      sta	AUDC1
    231  f476		       85 1a		      sta	AUDV1
    232  f478
    233  f478				   .title_audio_return
    234  f478		       60		      rts
    235  f479
    236  f479				   TitleState
    237  f479
    238  f479							; Check if Fire Button on controller 1 is released
    239  f479		       a5 0c		      lda	INPT4
    240  f47b		       30 05		      bmi	.title_state_check
    241  f47d
    242  f47d				   .title_state_on
    243  f47d		       a9 01		      lda	#1
    244  f47f		       85 91		      sta	InputState
    245  f481		       60		      rts
    246  f482
    247  f482				   .title_state_check
    248  f482		       a5 91		      lda	InputState
    249  f484		       f0 03		      beq	.title_state_return
    250  f486
    251  f486				   .title_state_next
    252  f486							; Button is released, load up game
    253  f486		       20 0e fd 	      jsr	GameInit
    254  f489
    255  f489				   .title_state_return
    256  f489		       60		      rts
    257  f48a
    258  f48a				   TitleKernel
    259  f48a
    260  f48a							; Playfield Control
    261  f48a		       a5 80		      lda	CtrlPf
    262  f48c		       29 fe		      and	#%11111110	; No mirroring
    263  f48e		       85 80		      sta	CtrlPf
    264  f490		       85 0a		      sta	CTRLPF
    265  f492
    266  f492							; Turn on display
    267  f492		       a9 00		      lda	#0
    268  f494		       85 01		      sta	VBLANK
    269  f496
    270  f496		       85 02		      sta	WSYNC
    271  f498
    272  f498				   TitleFrameTopDraw
    273  f498
    274  f498							; Start Counters
    275  f498		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    276  f49a		       a0 00		      ldy	#0	; Image Counter
    277  f49c
    278  f49c				   .title_frame_top
    279  f49c
    280  f49c							; 76 machine cycles per scanline
    281  f49c		       85 02		      sta	WSYNC
    282  f49e
    283  f49e				   .title_frame_top_load		; 66 cycles
    284  f49e
    285  f49e							; First half of image
    286  f49e		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    287  f4a1		       85 0d		      sta	PF0	; 4
    288  f4a3		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    289  f4a6		       85 0e		      sta	PF1	; 4
    290  f4a8		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    291  f4ab		       85 0f		      sta	PF2	; 4
    292  f4ad
      0  f4ad					      sleep	6
      1  f4ad				   .CYCLES    SET	6
      2  f4ad
      3  f4ad				  -	      IF	.CYCLES < 2
      4  f4ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4ad				  -	      ERR
      6  f4ad					      ENDIF
      7  f4ad
      8  f4ad				  -	      IF	.CYCLES & 1
      9  f4ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4ad				  -	      nop	0
     11  f4ad				  -	      ELSE
     12  f4ad				  -	      bit	VSYNC
     13  f4ad				  -	      ENDIF
     14  f4ad				  -.CYCLES    SET	.CYCLES - 3
     15  f4ad					      ENDIF
     16  f4ad
     17  f4ad					      REPEAT	.CYCLES / 2
     18  f4ad		       ea		      nop
     17  f4ad					      REPEND
     18  f4ae		       ea		      nop
     17  f4ae					      REPEND
     18  f4af		       ea		      nop
     19  f4b0					      REPEND
    294  f4b0
    295  f4b0							; Second half of image
    296  f4b0		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    297  f4b3		       85 0d		      sta	PF0	; 4
    298  f4b5		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    299  f4b8		       85 0e		      sta	PF1	; 4
    300  f4ba		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    301  f4bd		       85 0f		      sta	PF2	; 4
    302  f4bf
    303  f4bf				   .title_frame_top_index		; 4 cycles
    304  f4bf
    305  f4bf		       ca		      dex		; 2
    306  f4c0		       d0 da		      bne	.title_frame_top	; 2
    307  f4c2
    308  f4c2				   .title_frame_top_index_next		; 6 cycles
    309  f4c2
    310  f4c2							; Restore scanline counter
    311  f4c2		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    312  f4c4
    313  f4c4		       98		      tya		; 2
    314  f4c5		       18		      clc		; 2
    315  f4c6		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    316  f4c8		       a8		      tay		; 2
    317  f4c9
    318  f4c9		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    319  f4cb		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    320  f4cd		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    321  f4cf		       85 08		      sta	COLUPF	; 4
    322  f4d1		       ea		      nop		; 2
    323  f4d2		       4c 9e f4 	      jmp	.title_frame_top_load	; 3
    324  f4d5
    325  f4d5				   .title_frame_top_label_color_skip
    326  f4d5
    327  f4d5		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    328  f4d7		       d0 c3		      bne	.title_frame_top	; 2
    329  f4d9
    330  f4d9				   .title_frame_top_clean
    331  f4d9
    332  f4d9							; Clear out playfield
    333  f4d9		       a9 00		      lda	#0
    334  f4db		       85 0d		      sta	PF0
    335  f4dd		       85 0e		      sta	PF1
    336  f4df		       85 0f		      sta	PF2
    337  f4e1
    338  f4e1				   TitleWebDraw
    339  f4e1		       a9 02		      lda	#%00000010
    340  f4e3		       85 1d		      sta	ENAM0
    341  f4e5
    342  f4e5		       a9 06		      lda	#TITLE_WEB_COLOR
    343  f4e7		       85 06		      sta	COLUP0
    344  f4e9
    345  f4e9		       a2 10		      ldx	#TITLE_GAP_SIZE
    346  f4eb				   .title_web_gap
    347  f4eb		       ca		      dex
    348  f4ec		       85 02		      sta	WSYNC
    349  f4ee		       d0 fb		      bne	.title_web_gap
    350  f4f0
    351  f4f0				   TitleSpiderDraw
    352  f4f0
    353  f4f0		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    354  f4f2
    355  f4f2		       a5 aa		      lda	SpiderDrawPos
    356  f4f4		       c9 01		      cmp	#1
    357  f4f6		       d0 0c		      bne	.title_spider_extra_web_disable
    358  f4f8
    359  f4f8				   .title_spider_extra_web_start
    360  f4f8		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    361  f4fa				   .title_spider_extra_web_loop
    362  f4fa		       85 02		      sta	WSYNC
    363  f4fc		       ca		      dex
    364  f4fd		       d0 fb		      bne	.title_spider_extra_web_loop
    365  f4ff
    366  f4ff		       88		      dey
    367  f500		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    368  f502		       d0 f4		      bne	.title_spider_extra_web_start
    369  f504
    370  f504				   .title_spider_extra_web_disable
    371  f504		       a9 00		      lda	#0
    372  f506		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    373  f508
    374  f508		       85 02		      sta	WSYNC
    375  f50a
    376  f50a		       85 1d		      sta	ENAM0
    377  f50c
    378  f50c							; Check b/w
    379  f50c		       ad 82 02 	      lda	SWCHB
    380  f50f					      REPEAT	4
    381  f50f		       4a		      lsr
    380  f50f					      REPEND
    381  f510		       4a		      lsr
    380  f510					      REPEND
    381  f511		       4a		      lsr
    380  f511					      REPEND
    381  f512		       4a		      lsr
    382  f513					      REPEND
    383  f513		       90 05		      bcc	.title_spider_bw
    384  f515
    385  f515				   .title_spider_color
    386  f515		       a9 56		      lda	#TITLE_SPIDER_COLOR
    387  f517		       4c 1c f5 	      jmp	.title_spider_color_set
    388  f51a				   .title_spider_bw
    389  f51a		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    390  f51c				   .title_spider_color_set
    391  f51c		       85 06		      sta	COLUP0
    392  f51e
    393  f51e				   .title_spider
    394  f51e		       b1 a3		      lda	(SpiderPtr),y
    395  f520		       85 1b		      sta	GRP0
    396  f522		       85 1c		      sta	GRP1
    397  f524
    398  f524				   .title_spider_delay
    399  f524		       ca		      dex
    400  f525		       85 02		      sta	WSYNC
    401  f527		       d0 fb		      bne	.title_spider_delay
    402  f529
    403  f529				   .title_spider_index
    404  f529		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    405  f52b		       88		      dey
    406  f52c		       10 f0		      bpl	.title_spider
    407  f52e
    408  f52e				   .title_spider_clean
    409  f52e
    410  f52e							; Clear sprites
    411  f52e		       a9 00		      lda	#0
    412  f530		       85 1b		      sta	GRP0
    413  f532		       85 1c		      sta	GRP1
    414  f534
    415  f534				   TitleFrameBottomDraw
    416  f534
    417  f534							; Load Frame Color
    418  f534		       a9 06		      lda	#TITLE_WEB_COLOR
    419  f536		       85 08		      sta	COLUPF
    420  f538
    421  f538							; Start Counters
    422  f538		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    423  f53a		       a0 00		      ldy	#0	; Image Counter
    424  f53c
    425  f53c				   .title_frame_bottom
    426  f53c
    427  f53c							; 76 machine cycles per scanline
    428  f53c		       85 02		      sta	WSYNC
    429  f53e
    430  f53e				   .title_frame_bottom_load		; 66 cycles
    431  f53e
    432  f53e							; First half of image
    433  f53e		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    434  f541		       85 0d		      sta	PF0	; 4
    435  f543		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    436  f546		       85 0e		      sta	PF1	; 4
    437  f548		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    438  f54b		       85 0f		      sta	PF2	; 4
    439  f54d
      0  f54d					      sleep	6
      1  f54d				   .CYCLES    SET	6
      2  f54d
      3  f54d				  -	      IF	.CYCLES < 2
      4  f54d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f54d				  -	      ERR
      6  f54d					      ENDIF
      7  f54d
      8  f54d				  -	      IF	.CYCLES & 1
      9  f54d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f54d				  -	      nop	0
     11  f54d				  -	      ELSE
     12  f54d				  -	      bit	VSYNC
     13  f54d				  -	      ENDIF
     14  f54d				  -.CYCLES    SET	.CYCLES - 3
     15  f54d					      ENDIF
     16  f54d
     17  f54d					      REPEAT	.CYCLES / 2
     18  f54d		       ea		      nop
     17  f54d					      REPEND
     18  f54e		       ea		      nop
     17  f54e					      REPEND
     18  f54f		       ea		      nop
     19  f550					      REPEND
    441  f550
    442  f550							; Second half of image
    443  f550		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    444  f553		       85 0d		      sta	PF0	; 4
    445  f555		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    446  f558		       85 0e		      sta	PF1	; 4
    447  f55a		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    448  f55d		       85 0f		      sta	PF2	; 4
    449  f55f
    450  f55f				   .title_frame_bottom_index		; 4 cycles
    451  f55f
    452  f55f		       ca		      dex		; 2
    453  f560		       d0 da		      bne	.title_frame_bottom	; 2
    454  f562
    455  f562				   .title_frame_bottom_index_next		; 6 cycles
    456  f562
    457  f562							; Restore scanline counter
    458  f562		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    459  f564
    460  f564		       98		      tya		; 2
    461  f565		       18		      clc		; 2
    462  f566		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    463  f568		       a8		      tay		; 2
    464  f569		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    465  f56b		       d0 cf		      bne	.title_frame_bottom	; 2
    466  f56d
    467  f56d				   .title_frame_bottom_clean
    468  f56d
    469  f56d							; Clear out playfield
    470  f56d		       a9 00		      lda	#0
    471  f56f		       85 0d		      sta	PF0
    472  f571		       85 0e		      sta	PF1
    473  f573		       85 0f		      sta	PF2
    474  f575
    475  f575				   .title_kernel_return
    476  f575		       60		      rts
    477  f576
    478  f576				   TitleAudio0
    479  f576
    480  f576		       0f		      .BYTE.b	#15	; B
    481  f577		       13		      .BYTE.b	#19	; G
    482  f578		       17		      .BYTE.b	#23	; E
    483  f579		       13		      .BYTE.b	#19	; G
    484  f57a		       0e		      .BYTE.b	#14	; C
    485  f57b		       13		      .BYTE.b	#19
    486  f57c		       17		      .BYTE.b	#23
    487  f57d		       13		      .BYTE.b	#19
    488  f57e		       0c		      .BYTE.b	#12	; D
    489  f57f		       13		      .BYTE.b	#19
    490  f580		       17		      .BYTE.b	#23
    491  f581		       13		      .BYTE.b	#19
    492  f582		       0e		      .BYTE.b	#14	; C
    493  f583		       13		      .BYTE.b	#19
    494  f584		       17		      .BYTE.b	#23
    495  f585		       13		      .BYTE.b	#19
    496  f586
    497  f586				   TitleTone1
    498  f586
    499  f586		       0f		      .BYTE.b	#15	; Electronic Rumble
    500  f587		       ff		      .BYTE.b	#$FF
    501  f588		       01		      .BYTE.b	#1	; Low Pure Tone
    502  f589		       01		      .BYTE.b	#1
    503  f58a		       08		      .BYTE.b	#8	; White Noise
    504  f58b		       01		      .BYTE.b	#1
    505  f58c		       01		      .BYTE.b	#1
    506  f58d		       ff		      .BYTE.b	#$FF
    507  f58e		       ff		      .BYTE.b	#$FF
    508  f58f		       0f		      .BYTE.b	#15
    509  f590		       ff		      .BYTE.b	#$FF
    510  f591		       ff		      .BYTE.b	#$FF
    511  f592		       08		      .BYTE.b	#8
    512  f593		       ff		      .BYTE.b	#$FF
    513  f594		       01		      .BYTE.b	#1
    514  f595		       01		      .BYTE.b	#1
    515  f596
    516  f596				   TitleAudio1
    517  f596
    518  f596		       1d		      .BYTE.b	#29	; Kick
    519  f597		       ff		      .BYTE.b	#$FF
    520  f598		       1f		      .BYTE.b	#31	; C
    521  f599		       1f		      .BYTE.b	#31
    522  f59a		       07		      .BYTE.b	#7	; Snare
    523  f59b		       1f		      .BYTE.b	#31
    524  f59c		       1f		      .BYTE.b	#31
    525  f59d		       ff		      .BYTE.b	#$FF
    526  f59e		       ff		      .BYTE.b	#$FF
    527  f59f		       1d		      .BYTE.b	#29
    528  f5a0		       ff		      .BYTE.b	#$FF
    529  f5a1		       ff		      .BYTE.b	#$FF
    530  f5a2		       07		      .BYTE.b	#7
    531  f5a3		       ff		      .BYTE.b	#$FF
    532  f5a4		       17		      .BYTE.b	#23	; F
    533  f5a5		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f5a6					      include	"game.asm"
      1  f5a6							;================
      2  f5a6							; Game
      3  f5a6							;================
      4  f5a6
      5  f5a6							; Constants
      6  f5a6
      7  f5a6		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f5a6		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f5a6		       00 09	   GAME_AUDIO_STEP =	9
     10  f5a6		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f5a6		       00 06	   GAME_AUDIO_TONE =	6
     12  f5a6
     13  f5a6							; Object Code
     14  f5a6
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f5a6					      include	"objects/level.asm"
      1  f5a6							;======================
      2  f5a6							; Level Logic
      3  f5a6							;======================
      4  f5a6
      5  f5a6							; Constants
      6  f5a6
      7  f5a6		       00 13	   LEVELS     =	19
      8  f5a6
      9  f5a6				   LevelInit
     10  f5a6
     11  f5a6							; Set beginning level by difficulty switches treated as binary
     12  f5a6		       ad 82 02 	      lda	SWCHB
     13  f5a9					      REPEAT	6	; shift to 0-3
     14  f5a9		       4a		      lsr
     13  f5a9					      REPEND
     14  f5aa		       4a		      lsr
     13  f5aa					      REPEND
     14  f5ab		       4a		      lsr
     13  f5ab					      REPEND
     14  f5ac		       4a		      lsr
     13  f5ac					      REPEND
     14  f5ad		       4a		      lsr
     13  f5ad					      REPEND
     14  f5ae		       4a		      lsr
     15  f5af					      REPEND
     16  f5af		       18		      clc		; multiply by 5
     17  f5b0		       85 83		      sta	Temp
     18  f5b2		       0a		      asl
     19  f5b3		       0a		      asl
     20  f5b4		       65 83		      adc	Temp
     21  f5b6		       85 9f		      sta	LevelCurrent
     22  f5b8
     23  f5b8		       20 de f5 	      jsr	LevelLoad
     24  f5bb
     25  f5bb		       60		      rts
     26  f5bc
     27  f5bc				   LevelUpdate
     28  f5bc
     29  f5bc							; Calculate Desired score: (level+2)*5
     30  f5bc		       a5 9f		      lda	LevelCurrent
     31  f5be		       18		      clc
     32  f5bf		       69 02		      adc	#2	; +2
     33  f5c1		       85 83		      sta	Temp
     34  f5c3		       0a		      asl		; x2
     35  f5c4		       0a		      asl		; x2
     36  f5c5		       65 83		      adc	Temp	; x1
     37  f5c7
     38  f5c7							; Check if score is high enough
     39  f5c7		       c5 95		      cmp	ScoreValue+1
     40  f5c9		       b0 0f		      bcs	.level_update_return
     41  f5cb
     42  f5cb							; Reset score
     43  f5cb		       a9 00		      lda	#0
     44  f5cd		       85 95		      sta	ScoreValue+1
     45  f5cf
     46  f5cf							; Check if we haven't reached the final level
     47  f5cf		       a5 9f		      lda	LevelCurrent
     48  f5d1		       c9 12		      cmp	#LEVELS-1
     49  f5d3		       b0 05		      bcs	.level_update_return
     50  f5d5
     51  f5d5		       e6 9f		      inc	LevelCurrent
     52  f5d7		       20 de f5 	      jsr	LevelLoad
     53  f5da
     54  f5da				   .level_update_return
     55  f5da
     56  f5da		       20 01 f6 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     57  f5dd
     58  f5dd		       60		      rts
     59  f5de
     60  f5de				   LevelLoad
     61  f5de
     62  f5de							; Bug Speed: level/4+2
     63  f5de		       a5 9f		      lda	LevelCurrent
     64  f5e0		       4a		      lsr		; /2
     65  f5e1		       4a		      lsr		; /2
     66  f5e2		       69 02		      adc	#2
     67  f5e4		       85 b5		      sta	BugSpeed
     68  f5e6
     69  f5e6							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     70  f5e6		       a9 14		      lda	#20
     71  f5e8		       18		      clc
     72  f5e9		       e5 9f		      sbc	LevelCurrent
     73  f5eb		       0a		      asl		; x2
     74  f5ec		       85 83		      sta	Temp
     75  f5ee		       0a		      asl		; x2
     76  f5ef		       0a		      asl		; x2
     77  f5f0		       65 83		      adc	Temp
     78  f5f2		       85 c4		      sta	SwatterWaitTime
     79  f5f4
     80  f5f4							; Swatter Hit Damage: level*3+$10
     81  f5f4		       a5 9f		      lda	LevelCurrent
     82  f5f6		       18		      clc
     83  f5f7		       85 83		      sta	Temp
     84  f5f9		       0a		      asl		; x2
     85  f5fa		       65 83		      adc	Temp
     86  f5fc		       69 10		      adc	#$10
     87  f5fe		       85 c5		      sta	SwatterHitDamage
     88  f600
     89  f600		       60		      rts
     90  f601
     91  f601				   LevelLoadColor
     92  f601		       a4 9f		      ldy	LevelCurrent
     93  f603
     94  f603							; check b/w
     95  f603		       ad 82 02 	      lda	SWCHB
     96  f606					      REPEAT	4
     97  f606		       4a		      lsr
     96  f606					      REPEND
     97  f607		       4a		      lsr
     96  f607					      REPEND
     97  f608		       4a		      lsr
     96  f608					      REPEND
     97  f609		       4a		      lsr
     98  f60a					      REPEND
     99  f60a		       90 0b		      bcc	.level_load_bw
    100  f60c
    101  f60c				   .level_load_color
    102  f60c
    103  f60c							; Background Color
    104  f60c		       b9 20 f6 	      lda	LevelDataBk,y
    105  f60f		       85 a1		      sta	WebColor+0
    106  f611
    107  f611							; Web Color
    108  f611		       b9 33 f6 	      lda	LevelDataPf,y
    109  f614		       85 a2		      sta	WebColor+1
    110  f616
    111  f616		       60		      rts
    112  f617
    113  f617				   .level_load_bw
    114  f617
    115  f617							; Background Color
    116  f617		       a9 00		      lda	#WEB_BG_COLOR
    117  f619		       85 a1		      sta	WebColor+0
    118  f61b
    119  f61b							; Web Color
    120  f61b		       a9 02		      lda	#WEB_FG_COLOR
    121  f61d		       85 a2		      sta	WebColor+1
    122  f61f
    123  f61f		       60		      rts
    124  f620
    125  f620							; Easy: 1-5
    126  f620							; Medium: 6-9
    127  f620							; Hard: 10-15
    128  f620							; Extreme: 16-19
    129  f620
    130  f620				   LevelDataBk		; Background Color
    131  f620		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    132  f621		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    133  f622		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    134  f623		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    135  f624		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    136  f625		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    137  f626		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    138  f627		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    139  f628		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    140  f629		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    141  f62a		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    142  f62b		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    143  f62c		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    144  f62d		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    145  f62e		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    146  f62f		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    147  f630		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    148  f631		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    149  f632		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    150  f633
    151  f633				   LevelDataPf		; Web Color
    152  f633		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    153  f634		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    154  f635		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    155  f636		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    156  f637		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    157  f638		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    158  f639		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    159  f63a		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    160  f63b		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    161  f63c		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    162  f63d		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    163  f63e		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    164  f63f		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    165  f640		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    166  f641		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    167  f642		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    168  f643		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    169  f644		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    170  f645		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f646					      include	"objects/score.asm"
      1  f646							;======================
      2  f646							; Score (playfield)
      3  f646							;======================
      4  f646
      5  f646							; Constants
      6  f646
      7  f646		       00 00	   SCORE_BG_COLOR =	#$00
      8  f646		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f646		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f646		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f646		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f646		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f646
     14  f646		       00 05	   SCORE_LABEL_SIZE =	5
     15  f646		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f646		       00 02	   SCORE_LINE_SIZE =	2
     17  f646		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f646
     19  f646							; Initialization
     20  f646
     21  f646				   ScoreInit
     22  f646
     23  f646							; Health Score
     24  f646		       a9 ff		      lda	#$ff
     25  f648		       85 94		      sta	ScoreValue+0
     26  f64a
     27  f64a							; Game Score
     28  f64a		       a9 00		      lda	#0
     29  f64c		       85 95		      sta	ScoreValue+1
     30  f64e
     31  f64e		       60		      rts
     32  f64f
     33  f64f							; Frame Update
     34  f64f
     35  f64f				   ScoreUpdate
     36  f64f
     37  f64f							; Current Level Digits
     38  f64f		       a5 9f		      lda	LevelCurrent
     39  f651		       18		      clc
     40  f652		       69 01		      adc	#1
     41  f654
     42  f654		       20 21 f0 	      jsr	BinBcdConvert
     43  f657
     44  f657							; Only use first byte
     45  f657		       8a		      txa
     46  f658		       29 0f		      and	#$0f
     47  f65a		       a8		      tay
     48  f65b		       8a		      txa
     49  f65c		       29 f0		      and	#$f0
     50  f65e					      REPEAT	4
     51  f65e		       4a		      lsr
     50  f65e					      REPEND
     51  f65f		       4a		      lsr
     50  f65f					      REPEND
     51  f660		       4a		      lsr
     50  f660					      REPEND
     51  f661		       4a		      lsr
     52  f662					      REPEND
     53  f662		       aa		      tax
     54  f663
     55  f663							; Adjust index positions by multiplying by 5
     56  f663		       8a		      txa
     57  f664		       85 83		      sta	Temp
     58  f666		       0a		      asl
     59  f667		       0a		      asl
     60  f668		       65 83		      adc	Temp
     61  f66a		       85 98		      sta	ScoreDigitTens
     62  f66c
     63  f66c		       98		      tya
     64  f66d		       85 83		      sta	Temp
     65  f66f		       0a		      asl
     66  f670		       0a		      asl
     67  f671		       65 83		      adc	Temp
     68  f673		       85 96		      sta	ScoreDigitOnes
     69  f675
     70  f675							; Score Digits
     71  f675		       a5 95		      lda	ScoreValue+1
     72  f677
     73  f677		       20 21 f0 	      jsr	BinBcdConvert
     74  f67a
     75  f67a							; Only use first byte
     76  f67a		       8a		      txa
     77  f67b		       29 0f		      and	#$0f
     78  f67d		       a8		      tay
     79  f67e		       8a		      txa
     80  f67f		       29 f0		      and	#$f0
     81  f681					      REPEAT	4
     82  f681		       4a		      lsr
     81  f681					      REPEND
     82  f682		       4a		      lsr
     81  f682					      REPEND
     82  f683		       4a		      lsr
     81  f683					      REPEND
     82  f684		       4a		      lsr
     83  f685					      REPEND
     84  f685		       aa		      tax
     85  f686
     86  f686							; Adjust index positions by multiplying by 5
     87  f686		       8a		      txa
     88  f687		       85 83		      sta	Temp
     89  f689		       0a		      asl
     90  f68a		       0a		      asl
     91  f68b		       65 83		      adc	Temp
     92  f68d		       85 99		      sta	ScoreDigitTens+1
     93  f68f
     94  f68f		       98		      tya
     95  f690		       85 83		      sta	Temp
     96  f692		       0a		      asl
     97  f693		       0a		      asl
     98  f694		       65 83		      adc	Temp
     99  f696		       85 97		      sta	ScoreDigitOnes+1
    100  f698
    101  f698							; Health Bar
    102  f698		       a5 94		      lda	ScoreValue+0
    103  f69a		       f0 1c		      beq	.score_update_bar_empty
    104  f69c
    105  f69c					      REPEAT	4
    106  f69c		       4a		      lsr
    105  f69c					      REPEND
    106  f69d		       4a		      lsr
    105  f69d					      REPEND
    106  f69e		       4a		      lsr
    105  f69e					      REPEND
    106  f69f		       4a		      lsr
    107  f6a0					      REPEND
    108  f6a0		       c9 08		      cmp	#8
    109  f6a2		       b0 09		      bcs	.score_update_bar_top
    110  f6a4
    111  f6a4				   .score_update_bar_bottom
    112  f6a4		       aa		      tax
    113  f6a5		       bd cb f7 	      lda	ScoreBar,x
    114  f6a8		       a0 00		      ldy	#$00
    115  f6aa		       4c bc f6 	      jmp	.score_update_bar_store
    116  f6ad
    117  f6ad				   .score_update_bar_top
    118  f6ad		       29 07		      and	#%00000111
    119  f6af		       aa		      tax
    120  f6b0		       a9 7f		      lda	#$7f
    121  f6b2		       bc d3 f7 	      ldy	ScoreBarFlip,x
    122  f6b5		       4c bc f6 	      jmp	.score_update_bar_store
    123  f6b8
    124  f6b8				   .score_update_bar_empty
    125  f6b8		       a9 00		      lda	#0
    126  f6ba		       a0 00		      ldy	#0
    127  f6bc
    128  f6bc				   .score_update_bar_store
    129  f6bc		       85 9d		      sta	ScoreBarGfx+0
    130  f6be		       84 9e		      sty	ScoreBarGfx+1
    131  f6c0
    132  f6c0				   .score_update_end
    133  f6c0		       60		      rts
    134  f6c1
    135  f6c1							; Draw loop (uses SCORE_LINES scanlines)
    136  f6c1
    137  f6c1				   ScoreDraw
    138  f6c1
    139  f6c1							; Load Colors
    140  f6c1		       a9 00		      lda	#SCORE_BG_COLOR
    141  f6c3		       85 09		      sta	COLUBK
    142  f6c5		       a9 06		      lda	#SCORE_LABEL_COLOR
    143  f6c7		       85 08		      sta	COLUPF
    144  f6c9		       85 06		      sta	COLUP0
    145  f6cb		       85 07		      sta	COLUP1
    146  f6cd
    147  f6cd							; Set Non-Mirror
    148  f6cd		       a5 80		      lda	CtrlPf
    149  f6cf		       29 fc		      and	#%11111100
    150  f6d1		       09 02		      ora	#%00000010
    151  f6d3		       85 80		      sta	CtrlPf
    152  f6d5		       85 0a		      sta	CTRLPF
    153  f6d7
    154  f6d7		       a2 00		      ldx	#0
    155  f6d9				   .score_draw_label
    156  f6d9
    157  f6d9		       85 02		      sta	WSYNC
    158  f6db
    159  f6db							; First half of image
    160  f6db		       bd 20 f1 	      lda	ScoreLabel+0,x	; 4
    161  f6de		       85 0d		      sta	PF0	; 3
    162  f6e0		       bd 21 f1 	      lda	ScoreLabel+1,x
    163  f6e3		       85 0e		      sta	PF1
    164  f6e5		       bd 22 f1 	      lda	ScoreLabel+2,x
    165  f6e8		       85 0f		      sta	PF2
    166  f6ea
      0  f6ea					      sleep	8
      1  f6ea				   .CYCLES    SET	8
      2  f6ea
      3  f6ea				  -	      IF	.CYCLES < 2
      4  f6ea				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6ea				  -	      ERR
      6  f6ea					      ENDIF
      7  f6ea
      8  f6ea				  -	      IF	.CYCLES & 1
      9  f6ea				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6ea				  -	      nop	0
     11  f6ea				  -	      ELSE
     12  f6ea				  -	      bit	VSYNC
     13  f6ea				  -	      ENDIF
     14  f6ea				  -.CYCLES    SET	.CYCLES - 3
     15  f6ea					      ENDIF
     16  f6ea
     17  f6ea					      REPEAT	.CYCLES / 2
     18  f6ea		       ea		      nop
     17  f6ea					      REPEND
     18  f6eb		       ea		      nop
     17  f6eb					      REPEND
     18  f6ec		       ea		      nop
     17  f6ec					      REPEND
     18  f6ed		       ea		      nop
     19  f6ee					      REPEND
    168  f6ee
    169  f6ee							; Second half of image
    170  f6ee							;lda ScoreLabel+3,x ; 4
    171  f6ee		       a9 00		      lda	#0	; 2
    172  f6f0		       85 0d		      sta	PF0	; 3
    173  f6f2		       bd 24 f1 	      lda	ScoreLabel+4,x
    174  f6f5		       85 0e		      sta	PF1
    175  f6f7		       bd 25 f1 	      lda	ScoreLabel+5,x
    176  f6fa		       85 0f		      sta	PF2
    177  f6fc
    178  f6fc		       8a		      txa
    179  f6fd		       18		      clc
    180  f6fe		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    181  f700		       aa		      tax
    182  f701		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    183  f703		       d0 d4		      bne	.score_draw_label
    184  f705
    185  f705							; Clear labels and setup color
    186  f705		       a9 00		      lda	#0
    187  f707		       85 0d		      sta	PF0
    188  f709		       85 0e		      sta	PF1
    189  f70b		       85 0f		      sta	PF2
    190  f70d
    191  f70d		       85 02		      sta	WSYNC
    192  f70f
    193  f70f							; Load Colors
    194  f70f		       ad 82 02 	      lda	SWCHB
    195  f712					      REPEAT	4
    196  f712		       4a		      lsr
    195  f712					      REPEND
    196  f713		       4a		      lsr
    195  f713					      REPEND
    196  f714		       4a		      lsr
    195  f714					      REPEND
    196  f715		       4a		      lsr
    197  f716					      REPEND
    198  f716		       90 0d		      bcc	.score_draw_bw
    199  f718
    200  f718				   .score_draw_color
    201  f718		       a9 44		      lda	#SCORE_LEVEL_COLOR
    202  f71a		       85 08		      sta	COLUPF
    203  f71c		       85 06		      sta	COLUP0
    204  f71e		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    205  f720		       85 07		      sta	COLUP1
    206  f722
    207  f722		       4c 2f f7 	      jmp	.score_draw_digit_start
    208  f725
    209  f725				   .score_draw_bw
    210  f725		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    211  f727		       85 08		      sta	COLUPF
    212  f729		       85 06		      sta	COLUP0
    213  f72b		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    214  f72d		       85 07		      sta	COLUP1
    215  f72f
    216  f72f				   .score_draw_digit_start
    217  f72f
    218  f72f		       85 02		      sta	WSYNC
    219  f731
    220  f731							; Prepare initial line
    221  f731
    222  f731							; Level
    223  f731		       a4 98		      ldy	ScoreDigitTens
    224  f733		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    225  f736		       29 f0		      and	#$f0
    226  f738		       85 9a		      sta	ScoreDigitGfx
    227  f73a
    228  f73a		       a4 96		      ldy	ScoreDigitOnes
    229  f73c		       b9 bc f0 	      lda	ScoreDigits,y
    230  f73f		       29 f0		      and	#$f0
    231  f741		       85 9b		      sta	ScoreDigitGfx+1
    232  f743
    233  f743							; Score
    234  f743		       a4 99		      ldy	ScoreDigitTens+1
    235  f745		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    236  f748		       29 0f		      and	#$0f
    237  f74a		       85 9c		      sta	ScoreDigitGfx+2
    238  f74c
    239  f74c		       a4 97		      ldy	ScoreDigitOnes+1
    240  f74e		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    241  f751		       29 f0		      and	#$f0
    242  f753		       05 9c		      ora	ScoreDigitGfx+2
    243  f755		       85 9c		      sta	ScoreDigitGfx+2
    244  f757
    245  f757		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    246  f759		       a5 9a		      lda	ScoreDigitGfx
    247  f75b		       85 02		      sta	WSYNC
    248  f75d				   .score_draw_digit
    249  f75d
    250  f75d							;lda ScoreDigitGfx
    251  f75d		       85 0d		      sta	PF0
    252  f75f		       a5 9b		      lda	ScoreDigitGfx+1
    253  f761		       85 0e		      sta	PF1
    254  f763		       a5 9c		      lda	ScoreDigitGfx+2
    255  f765		       85 0f		      sta	PF2
    256  f767
    257  f767							; Begin preparing next line
    258  f767		       e6 96		      inc	ScoreDigitOnes
    259  f769		       e6 98		      inc	ScoreDigitTens
    260  f76b		       e6 97		      inc	ScoreDigitOnes+1
    261  f76d		       e6 99		      inc	ScoreDigitTens+1
    262  f76f
    263  f76f		       a9 00		      lda	#0
    264  f771		       85 0d		      sta	PF0
    265  f773		       a5 9d		      lda	ScoreBarGfx+0
    266  f775		       85 0e		      sta	PF1
    267  f777		       a5 9e		      lda	ScoreBarGfx+1
    268  f779		       85 0f		      sta	PF2
    269  f77b
    270  f77b							; Level 1st Digit
    271  f77b		       a4 98		      ldy	ScoreDigitTens
    272  f77d		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    273  f780		       29 f0		      and	#$f0
    274  f782		       85 83		      sta	Temp
    275  f784
    276  f784							; Score 1st Digit
    277  f784		       a4 99		      ldy	ScoreDigitTens+1
    278  f786		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    279  f789		       29 0f		      and	#$0f
    280  f78b		       85 84		      sta	Temp+1
    281  f78d
    282  f78d		       a5 9a		      lda	ScoreDigitGfx
    283  f78f		       85 0d		      sta	PF0
    284  f791		       a5 9b		      lda	ScoreDigitGfx+1
    285  f793		       85 0e		      sta	PF1
    286  f795		       a5 9c		      lda	ScoreDigitGfx+2
    287  f797		       85 0f		      sta	PF2
    288  f799
    289  f799							; Level 2nd Digit (and transfer)
    290  f799		       a4 96		      ldy	ScoreDigitOnes
    291  f79b		       b9 bc f0 	      lda	ScoreDigits,y
    292  f79e		       29 f0		      and	#$f0
    293  f7a0		       85 9b		      sta	ScoreDigitGfx+1
    294  f7a2
      0  f7a2					      sleep	3
      1  f7a2				   .CYCLES    SET	3
      2  f7a2
      3  f7a2				  -	      IF	.CYCLES < 2
      4  f7a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7a2				  -	      ERR
      6  f7a2					      ENDIF
      7  f7a2
      8  f7a2					      IF	.CYCLES & 1
      9  f7a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7a2		       04 00		      nop	0
     11  f7a4				  -	      ELSE
     12  f7a4				  -	      bit	VSYNC
     13  f7a4					      ENDIF
     14  f7a4				   .CYCLES    SET	.CYCLES - 3
     15  f7a4					      ENDIF
     16  f7a4
     17  f7a4				  -	      REPEAT	.CYCLES / 2
     18  f7a4				  -	      nop
     19  f7a4					      REPEND
    296  f7a4
    297  f7a4		       a9 00		      lda	#0
    298  f7a6		       85 0d		      sta	PF0
    299  f7a8		       a5 9d		      lda	ScoreBarGfx+0
    300  f7aa		       85 0e		      sta	PF1
    301  f7ac		       a4 9e		      ldy	ScoreBarGfx+1
    302  f7ae		       84 0f		      sty	PF2
    303  f7b0
    304  f7b0							; Score 2nd Digit (and transfer)
    305  f7b0		       a4 97		      ldy	ScoreDigitOnes+1
    306  f7b2		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    307  f7b5		       29 f0		      and	#$f0
    308  f7b7		       05 84		      ora	Temp+1
    309  f7b9		       85 9c		      sta	ScoreDigitGfx+2
    310  f7bb
    311  f7bb							; Transfer Level 1st Digit
    312  f7bb		       a5 83		      lda	Temp
    313  f7bd		       85 9a		      sta	ScoreDigitGfx
    314  f7bf
    315  f7bf		       ca		      dex
    316  f7c0		       d0 9b		      bne	.score_draw_digit
    317  f7c2
    318  f7c2		       a9 00		      lda	#0
    319  f7c4		       85 0d		      sta	PF0
    320  f7c6		       85 0e		      sta	PF1
    321  f7c8		       85 0f		      sta	PF2
    322  f7ca
    323  f7ca		       60		      rts
    324  f7cb
    325  f7cb				   ScoreBar
    326  f7cb		       40		      .BYTE.b	#%01000000
    327  f7cc		       40		      .BYTE.b	#%01000000
    328  f7cd		       60		      .BYTE.b	#%01100000
    329  f7ce		       70		      .BYTE.b	#%01110000
    330  f7cf		       78		      .BYTE.b	#%01111000
    331  f7d0		       7c		      .BYTE.b	#%01111100
    332  f7d1		       7e		      .BYTE.b	#%01111110
    333  f7d2		       7f		      .BYTE.b	#%01111111
    334  f7d3
    335  f7d3				   ScoreBarFlip
    336  f7d3		       01		      .BYTE.b	#%00000001
    337  f7d4		       03		      .BYTE.b	#%00000011
    338  f7d5		       07		      .BYTE.b	#%00000111
    339  f7d6		       0f		      .BYTE.b	#%00001111
    340  f7d7		       1f		      .BYTE.b	#%00011111
    341  f7d8		       3f		      .BYTE.b	#%00111111
    342  f7d9		       7f		      .BYTE.b	#%01111111
    343  f7da		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f7db					      include	"objects/web.asm"
      1  f7db							;================
      2  f7db							; Web (Playfield)
      3  f7db							;================
      4  f7db
      5  f7db							; Constants
      6  f7db
      7  f7db		       00 00	   WEB_BG_COLOR =	#$00
      8  f7db		       00 02	   WEB_FG_COLOR =	#$02
      9  f7db
     10  f7db		       00 1c	   WEB_SIZE   =	28
     11  f7db		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f7db		       00 06	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f7db
     14  f7db							; Scanline Draw
     15  f7db
     16  f7db				   WebDrawStart
     17  f7db
     18  f7db							; Load Colors
     19  f7db		       a5 a2		      lda	WebColor+1
     20  f7dd		       85 08		      sta	COLUPF
     21  f7df
     22  f7df							; Mirror playfield and use standard playfield color
     23  f7df		       a5 80		      lda	CtrlPf
     24  f7e1		       29 fc		      and	#%11111100
     25  f7e3		       09 01		      ora	#%00000001
     26  f7e5		       85 80		      sta	CtrlPf
     27  f7e7		       85 0a		      sta	CTRLPF
     28  f7e9
     29  f7e9							; Initialize image index
     30  f7e9		       a9 00		      lda	#0
     31  f7eb		       85 a0		      sta	WebIndex
     32  f7ed
     33  f7ed		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f7ee					      include	"objects/spider.asm"
      1  f7ee							;=================
      2  f7ee							; Spider (player0)
      3  f7ee							;=================
      4  f7ee
      5  f7ee							; Constants
      6  f7ee
      7  f7ee		       00 56	   SPIDER_COLOR =	#$56
      8  f7ee		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f7ee		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f7ee		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f7ee
     12  f7ee		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f7ee		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f7ee		       00 02	   SPIDER_VEL_X =	2
     15  f7ee		       00 02	   SPIDER_VEL_Y =	2
     16  f7ee
     17  f7ee							; Initialization
     18  f7ee
     19  f7ee				   SpiderInit
     20  f7ee
     21  f7ee							; Initialize Position in center of screen
     22  f7ee		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f7f0		       85 a5		      sta	SpiderPos
     24  f7f2		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f7f4		       85 a6		      sta	SpiderPos+1
     26  f7f6
     27  f7f6							; Initial direction
     28  f7f6		       a9 20		      lda	#%00100000
     29  f7f8		       85 a7		      sta	SpiderCtrl
     30  f7fa
     31  f7fa							; Setup Sprite
      0  f7fa					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f7fa				   .POINTER   SET	SpiderPtr
      2  f7fa				   .ADDRESS   SET	SpiderSprite
      3  f7fa
      4  f7fa		       a9 92		      LDA	#<.ADDRESS
      5  f7fc		       85 a3		      STA	.POINTER
      6  f7fe		       a9 f1		      LDA	#>.ADDRESS
      7  f800		       85 a4		      STA	.POINTER+1
      8  f802
     33  f802
     34  f802		       60		      rts
     35  f803
     36  f803							; Frame Update
     37  f803
     38  f803				   SpiderUpdate
     39  f803		       20 0a f8 	      jsr	SpiderControl
     40  f806		       20 f0 f8 	      jsr	SpiderCollision
     41  f809		       60		      rts
     42  f80a
     43  f80a				   SpiderControl
     44  f80a
     45  f80a							; Control Position
     46  f80a		       a6 a5		      ldx	SpiderPos
     47  f80c		       a4 a6		      ldy	SpiderPos+1
     48  f80e		       ad 80 02 	      lda	SWCHA
     49  f811
     50  f811				   .spider_control_check_right
     51  f811		       30 02		      bmi	.spider_control_check_left
     52  f813
     53  f813					      REPEAT	#SPIDER_VEL_X
     54  f813		       e8		      inx
     53  f813					      REPEND
     54  f814		       e8		      inx
     55  f815					      REPEND
     56  f815
     57  f815				   .spider_control_check_left
     58  f815		       2a		      rol
     59  f816		       30 02		      bmi	.spider_control_check_down
     60  f818
     61  f818					      REPEAT	#SPIDER_VEL_X
     62  f818		       ca		      dex
     61  f818					      REPEND
     62  f819		       ca		      dex
     63  f81a					      REPEND
     64  f81a
     65  f81a				   .spider_control_check_down
     66  f81a		       2a		      rol
     67  f81b		       30 02		      bmi	.spider_control_check_up
     68  f81d
     69  f81d					      REPEAT	#SPIDER_VEL_Y
     70  f81d		       88		      dey
     69  f81d					      REPEND
     70  f81e		       88		      dey
     71  f81f					      REPEND
     72  f81f
     73  f81f				   .spider_control_check_up
     74  f81f		       2a		      rol
     75  f820		       30 02		      bmi	.spider_control_sprite
     76  f822
     77  f822					      REPEAT	#SPIDER_VEL_Y
     78  f822		       c8		      iny
     77  f822					      REPEND
     78  f823		       c8		      iny
     79  f824					      REPEND
     80  f824
     81  f824				   .spider_control_sprite
     82  f824							; Control Sprite
     83  f824		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     84  f826
     85  f826				   .spider_control_sprite_x
     86  f826		       e4 a5		      cpx	SpiderPos
     87  f828		       90 04		      bcc	.spider_control_sprite_left
     88  f82a		       f0 09		      beq	.spider_control_sprite_y
     89  f82c		       b0 05		      bcs	.spider_control_sprite_right
     90  f82e
     91  f82e				   .spider_control_sprite_left
     92  f82e		       09 80		      ora	#%10000000
     93  f830		       4c 35 f8 	      jmp	.spider_control_sprite_y
     94  f833
     95  f833				   .spider_control_sprite_right
     96  f833		       09 40		      ora	#%01000000
     97  f835
     98  f835				   .spider_control_sprite_y
     99  f835		       c4 a6		      cpy	SpiderPos+1
    100  f837		       90 04		      bcc	.spider_control_sprite_down
    101  f839		       f0 09		      beq	.spider_control_sprite_store
    102  f83b		       b0 05		      bcs	.spider_control_sprite_up
    103  f83d
    104  f83d				   .spider_control_sprite_down
    105  f83d		       09 10		      ora	#%00010000
    106  f83f		       4c 44 f8 	      jmp	.spider_control_sprite_store
    107  f842
    108  f842				   .spider_control_sprite_up
    109  f842		       09 20		      ora	#%00100000
    110  f844
    111  f844				   .spider_control_sprite_store
    112  f844		       c9 00		      cmp	#%00000000
    113  f846		       f0 02		      beq	.spider_control_boundary
    114  f848		       85 a7		      sta	SpiderCtrl
    115  f84a
    116  f84a				   .spider_control_boundary
    117  f84a							; Check Playfield Boundaries
    118  f84a
    119  f84a				   .spider_control_boundary_left
    120  f84a		       e0 03		      cpx	#SPIDER_VEL_X+1
    121  f84c		       b0 05		      bcs	.spider_control_boundary_right
    122  f84e		       a2 03		      ldx	#SPIDER_VEL_X+1
    123  f850		       4c 59 f8 	      jmp	.spider_control_boundary_top
    124  f853
    125  f853				   .spider_control_boundary_right
    126  f853		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    127  f855		       90 02		      bcc	.spider_control_boundary_top
    128  f857		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    129  f859
    130  f859				   .spider_control_boundary_top
    131  f859		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    132  f85b		       b0 05		      bcs	.spider_control_boundary_bottom
    133  f85d		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    134  f85f		       4c 68 f8 	      jmp	.spider_control_store
    135  f862
    136  f862				   .spider_control_boundary_bottom
    137  f862		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    138  f864		       90 02		      bcc	.spider_control_store
    139  f866		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    140  f868
    141  f868				   .spider_control_store
    142  f868							; Store new position
    143  f868		       86 a5		      stx	SpiderPos
    144  f86a		       84 a6		      sty	SpiderPos+1
    145  f86c
    146  f86c							; TODO: Optimize this somehow?
    147  f86c				   .spider_control_sprite_assign
    148  f86c							; Skip if no change
    149  f86c		       c9 00		      cmp	#%00000000
    150  f86e		       f0 7f		      beq	.spider_control_return
    151  f870
    152  f870		       a2 00		      ldx	#%00000000	; For reflection
    153  f872
    154  f872				   .spider_control_sprite_assign_left
    155  f872		       c9 80		      cmp	#%10000000
    156  f874		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f876					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f876				   .POINTER   SET	SpiderPtr
      2  f876				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f876
      4  f876		       a9 a2		      LDA	#<.ADDRESS
      5  f878		       85 a3		      STA	.POINTER
      6  f87a		       a9 f1		      LDA	#>.ADDRESS
      7  f87c		       85 a4		      STA	.POINTER+1
      8  f87e
    158  f87e		       a2 08		      ldx	#%00001000
    159  f880		       4c ed f8 	      jmp	.spider_control_reflect
    160  f883
    161  f883				   .spider_control_sprite_assign_right
    162  f883		       c9 40		      cmp	#%01000000
    163  f885		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f887					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f887				   .POINTER   SET	SpiderPtr
      2  f887				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f887
      4  f887		       a9 a2		      LDA	#<.ADDRESS
      5  f889		       85 a3		      STA	.POINTER
      6  f88b		       a9 f1		      LDA	#>.ADDRESS
      7  f88d		       85 a4		      STA	.POINTER+1
      8  f88f
    165  f88f		       4c ed f8 	      jmp	.spider_control_reflect
    166  f892
    167  f892				   .spider_control_sprite_assign_top
    168  f892		       c9 20		      cmp	#%00100000
    169  f894		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f896					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f896				   .POINTER   SET	SpiderPtr
      2  f896				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f896
      4  f896		       a9 92		      LDA	#<.ADDRESS
      5  f898		       85 a3		      STA	.POINTER
      6  f89a		       a9 f1		      LDA	#>.ADDRESS
      7  f89c		       85 a4		      STA	.POINTER+1
      8  f89e
    171  f89e		       4c ed f8 	      jmp	.spider_control_reflect
    172  f8a1
    173  f8a1				   .spider_control_sprite_assign_bottom
    174  f8a1		       c9 10		      cmp	#%00010000
    175  f8a3		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f8a5					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f8a5				   .POINTER   SET	SpiderPtr
      2  f8a5				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f8a5
      4  f8a5		       a9 b2		      LDA	#<.ADDRESS
      5  f8a7		       85 a3		      STA	.POINTER
      6  f8a9		       a9 f1		      LDA	#>.ADDRESS
      7  f8ab		       85 a4		      STA	.POINTER+1
      8  f8ad
    177  f8ad		       4c ed f8 	      jmp	.spider_control_reflect
    178  f8b0
    179  f8b0				   .spider_control_sprite_assign_top_right
    180  f8b0		       c9 60		      cmp	#%01100000
    181  f8b2		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f8b4					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8b4				   .POINTER   SET	SpiderPtr
      2  f8b4				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8b4
      4  f8b4		       a9 a2		      LDA	#<.ADDRESS
      5  f8b6		       85 a3		      STA	.POINTER
      6  f8b8		       a9 f1		      LDA	#>.ADDRESS
      7  f8ba		       85 a4		      STA	.POINTER+1
      8  f8bc
    183  f8bc		       4c ed f8 	      jmp	.spider_control_reflect
    184  f8bf
    185  f8bf				   .spider_control_sprite_assign_bottom_right
    186  f8bf		       c9 50		      cmp	#%01010000
    187  f8c1		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f8c3					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8c3				   .POINTER   SET	SpiderPtr
      2  f8c3				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8c3
      4  f8c3		       a9 a2		      LDA	#<.ADDRESS
      5  f8c5		       85 a3		      STA	.POINTER
      6  f8c7		       a9 f1		      LDA	#>.ADDRESS
      7  f8c9		       85 a4		      STA	.POINTER+1
      8  f8cb
    189  f8cb		       4c ed f8 	      jmp	.spider_control_reflect
    190  f8ce
    191  f8ce				   .spider_control_sprite_assign_bottom_left
    192  f8ce		       c9 90		      cmp	#%10010000
    193  f8d0		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f8d2					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8d2				   .POINTER   SET	SpiderPtr
      2  f8d2				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8d2
      4  f8d2		       a9 a2		      LDA	#<.ADDRESS
      5  f8d4		       85 a3		      STA	.POINTER
      6  f8d6		       a9 f1		      LDA	#>.ADDRESS
      7  f8d8		       85 a4		      STA	.POINTER+1
      8  f8da
    195  f8da		       a2 08		      ldx	#%00001000
    196  f8dc		       4c ed f8 	      jmp	.spider_control_reflect
    197  f8df
    198  f8df				   .spider_control_sprite_assign_top_left
    199  f8df		       c9 a0		      cmp	#%10100000
    200  f8e1		       d0 0a		      bne	.spider_control_reflect
      0  f8e3					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8e3				   .POINTER   SET	SpiderPtr
      2  f8e3				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8e3
      4  f8e3		       a9 a2		      LDA	#<.ADDRESS
      5  f8e5		       85 a3		      STA	.POINTER
      6  f8e7		       a9 f1		      LDA	#>.ADDRESS
      7  f8e9		       85 a4		      STA	.POINTER+1
      8  f8eb
    202  f8eb		       a2 08		      ldx	#%00001000
    203  f8ed
    204  f8ed				   .spider_control_reflect
    205  f8ed		       86 0b		      stx	REFP0
    206  f8ef
    207  f8ef				   .spider_control_return
    208  f8ef		       60		      rts
    209  f8f0
    210  f8f0				   SpiderCollision
    211  f8f0		       a0 56		      ldy	#SPIDER_COLOR
    212  f8f2
    213  f8f2							; Check b/w
    214  f8f2		       ad 82 02 	      lda	SWCHB
    215  f8f5					      REPEAT	4
    216  f8f5		       4a		      lsr
    215  f8f5					      REPEND
    216  f8f6		       4a		      lsr
    215  f8f6					      REPEND
    216  f8f7		       4a		      lsr
    215  f8f7					      REPEND
    216  f8f8		       4a		      lsr
    217  f8f9					      REPEND
    218  f8f9		       b0 02		      bcs	.spider_collision_m0
    219  f8fb
    220  f8fb		       a0 0e		      ldy	#SPIDER_BW_COLOR
    221  f8fd
    222  f8fd				   .spider_collision_m0
    223  f8fd							; Check stun status
    224  f8fd		       a6 b6		      ldx	BugStunned
    225  f8ff		       d0 04		      bne	.spider_collision_m1
    226  f901
    227  f901							; Collision for M0 (V set)
    228  f901		       24 00		      bit	CXM0P
    229  f903		       70 0b		      bvs	.spider_collision_active
    230  f905
    231  f905				   .spider_collision_m1
    232  f905							; Check stun status
    233  f905		       a6 b7		      ldx	BugStunned+1
    234  f907		       d0 14		      bne	.spider_collision_return
    235  f909
    236  f909							; Collision for M1 (N set)
    237  f909		       24 01		      bit	CXM1P
    238  f90b		       30 03		      bmi	.spider_collision_active
    239  f90d
    240  f90d		       4c 1d f9 	      jmp	.spider_collision_return
    241  f910
    242  f910				   .spider_collision_active
    243  f910		       a0 44		      ldy	#SPIDER_COL_COLOR
    244  f912
    245  f912							; Check b/w
    246  f912		       ad 82 02 	      lda	SWCHB
    247  f915					      REPEAT	4
    248  f915		       4a		      lsr
    247  f915					      REPEND
    248  f916		       4a		      lsr
    247  f916					      REPEND
    248  f917		       4a		      lsr
    247  f917					      REPEND
    248  f918		       4a		      lsr
    249  f919					      REPEND
    250  f919		       b0 02		      bcs	.spider_collision_return
    251  f91b
    252  f91b		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    253  f91d
    254  f91d				   .spider_collision_return
    255  f91d		       84 a8		      sty	SpiderColor
    256  f91f		       60		      rts
    257  f920
    258  f920				   SpiderPosition
    259  f920
    260  f920							; Set Position
    261  f920		       a2 00		      ldx	#0	; Object (player0)
    262  f922		       a5 a5		      lda	SpiderPos	; X Position
    263  f924		       20 00 f0 	      jsr	PosObject
    264  f927
    265  f927		       60		      rts
    266  f928
    267  f928							; Scanline Draw
    268  f928
    269  f928				   SpiderDrawStart
    270  f928
    271  f928							; Set player 0 to be quad size
    272  f928		       a5 81		      lda	NuSiz0
    273  f92a		       29 f8		      and	#%11111000
    274  f92c		       09 05		      ora	#%00000101
    275  f92e		       85 81		      sta	NuSiz0
    276  f930		       85 04		      sta	NUSIZ0
    277  f932
    278  f932							; Set sprite color
    279  f932		       a5 a8		      lda	SpiderColor
    280  f934		       85 06		      sta	COLUP0
    281  f936
    282  f936							; Determine if we need to use vertical delay (odd line)
    283  f936		       a5 a6		      lda	SpiderPos+1	; Y Position
    284  f938		       4a		      lsr
    285  f939		       b0 05		      bcs	.spider_draw_start_nodelay
    286  f93b
    287  f93b		       a0 01		      ldy	#1
    288  f93d		       4c 42 f9 	      jmp	.spider_draw_start_set_delay
    289  f940
    290  f940				   .spider_draw_start_nodelay
    291  f940		       a0 00		      ldy	#0
    292  f942
    293  f942				   .spider_draw_start_set_delay
    294  f942		       84 25		      sty	VDELP0
    295  f944
    296  f944				   .spider_draw_start_pos
    297  f944							; Calculate starting position
    298  f944		       18		      clc
    299  f945		       69 10		      adc	#SPIDER_SIZE
    300  f947		       85 aa		      sta	SpiderDrawPos
    301  f949
    302  f949							; Initialize sprite index and line buffer
    303  f949		       a9 00		      lda	#0
    304  f94b		       85 a9		      sta	SpiderIndex
    305  f94d		       85 ab		      sta	SpiderLine
    306  f94f
    307  f94f		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f950					      include	"objects/line.asm"
      1  f950							;================
      2  f950							; Line (ball)
      3  f950							;================
      4  f950
      5  f950							; Constants
      6  f950
      7  f950		       00 08	   LINE_SIZE  =	8
      8  f950		       00 04	   LINE_VEL_X =	4
      9  f950		       00 04	   LINE_VEL_Y =	4
     10  f950
     11  f950		       00 08	   LINE_AUDIO_C =	8
     12  f950		       00 01	   LINE_AUDIO_F =	1
     13  f950		       00 04	   LINE_AUDIO_V =	4
     14  f950
     15  f950		       00 08	   LINE_SAMPLE_LEN =	8
     16  f950		       00 03	   LINE_SAMPLE_C =	3
     17  f950		       00 01	   LINE_SAMPLE_F =	1
     18  f950		       00 04	   LINE_SAMPLE_V =	4
     19  f950
     20  f950							; Initialization
     21  f950
     22  f950				   LineInit
     23  f950
     24  f950							; Initial Line Control
     25  f950		       a9 00		      lda	#0
     26  f952		       85 ae		      sta	LineEnabled
     27  f954		       85 af		      sta	LinePos+0
     28  f956		       85 b0		      sta	LinePos+1
     29  f958		       85 b3		      sta	LineDrawPos+0
     30  f95a		       85 b4		      sta	LineDrawPos+1
     31  f95c
     32  f95c							; Initial direction
     33  f95c							;lda #0
     34  f95c		       85 b1		      sta	LineVelocity+0
     35  f95e		       a9 04		      lda	#LINE_VEL_Y
     36  f960		       85 b2		      sta	LineVelocity+1
     37  f962
     38  f962		       60		      rts
     39  f963
     40  f963							; Frame Update
     41  f963
     42  f963				   LineUpdate
     43  f963		       20 6d f9 	      jsr	LineControl
     44  f966		       20 1f fa 	      jsr	LineObject
     45  f969		       20 4a fa 	      jsr	LineCollision
     46  f96c		       60		      rts
     47  f96d
     48  f96d				   LineControl
     49  f96d
     50  f96d							; Check if Fire Button on controller 1 is pressed
     51  f96d		       a5 0c		      lda	INPT4
     52  f96f		       30 08		      bmi	.line_control_skip
     53  f971
     54  f971		       24 ae		      bit	LineEnabled
     55  f973		       30 04		      bmi	.line_control_skip
     56  f975
     57  f975		       a5 a7		      lda	SpiderCtrl
     58  f977		       d0 03		      bne	.line_control_fire
     59  f979
     60  f979				   .line_control_skip
     61  f979		       4c 1e fa 	      jmp	.line_control_return
     62  f97c
     63  f97c				   .line_control_fire
     64  f97c		       20 8d fa 	      jsr	LineEnable
     65  f97f
     66  f97f				   .line_control_x
     67  f97f		       a5 a7		      lda	SpiderCtrl
     68  f981		       29 c0		      and	#%11000000
     69  f983		       f0 0e		      beq	.line_control_x_none
     70  f985				   .line_control_x_left
     71  f985		       c9 80		      cmp	#%10000000
     72  f987		       d0 05		      bne	.line_control_x_right
     73  f989
     74  f989		       a9 fc		      lda	#-LINE_VEL_X
     75  f98b		       4c 95 f9 	      jmp	.line_control_x_store
     76  f98e				   .line_control_x_right
     77  f98e		       a9 04		      lda	#LINE_VEL_X
     78  f990		       4c 95 f9 	      jmp	.line_control_x_store
     79  f993				   .line_control_x_none
     80  f993		       a9 00		      lda	#0
     81  f995				   .line_control_x_store
     82  f995		       85 b1		      sta	LineVelocity
     83  f997
     84  f997				   .line_control_y
     85  f997		       a5 a7		      lda	SpiderCtrl
     86  f999		       29 30		      and	#%00110000
     87  f99b		       f0 0e		      beq	.line_control_y_none
     88  f99d				   .line_control_y_up
     89  f99d		       c9 20		      cmp	#%00100000
     90  f99f		       d0 05		      bne	.line_control_y_down
     91  f9a1
     92  f9a1		       a9 04		      lda	#LINE_VEL_Y
     93  f9a3		       4c ad f9 	      jmp	.line_control_y_store
     94  f9a6				   .line_control_y_down
     95  f9a6		       a9 fc		      lda	#-LINE_VEL_Y
     96  f9a8		       4c ad f9 	      jmp	.line_control_y_store
     97  f9ab				   .line_control_y_none
     98  f9ab		       a9 00		      lda	#0
     99  f9ad				   .line_control_y_store
    100  f9ad		       85 b2		      sta	LineVelocity+1
    101  f9af
    102  f9af				   .line_control_position
    103  f9af
    104  f9af		       a2 00		      ldx	#0	; offsetX
    105  f9b1		       a0 00		      ldy	#0	; offsetY
    106  f9b3
    107  f9b3		       a5 a7		      lda	SpiderCtrl
    108  f9b5		       29 f0		      and	#%11110000
    109  f9b7
    110  f9b7				   .line_control_position_left
    111  f9b7		       c9 80		      cmp	#%10000000
    112  f9b9		       d0 07		      bne	.line_control_position_right
    113  f9bb
    114  f9bb		       a2 00		      ldx	#0
    115  f9bd		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    116  f9bf		       4c 0a fa 	      jmp	.line_control_position_store
    117  f9c2
    118  f9c2				   .line_control_position_right
    119  f9c2		       c9 40		      cmp	#%01000000
    120  f9c4		       d0 07		      bne	.line_control_position_top
    121  f9c6
    122  f9c6		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    123  f9c8		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    124  f9ca		       4c 0a fa 	      jmp	.line_control_position_store
    125  f9cd
    126  f9cd				   .line_control_position_top
    127  f9cd		       c9 20		      cmp	#%00100000
    128  f9cf		       d0 07		      bne	.line_control_position_bottom
    129  f9d1
    130  f9d1		       a2 08		      ldx	#SPIDER_SIZE/2
    131  f9d3		       a0 10		      ldy	#SPIDER_SIZE
    132  f9d5		       4c 0a fa 	      jmp	.line_control_position_store
    133  f9d8
    134  f9d8				   .line_control_position_bottom
    135  f9d8		       c9 10		      cmp	#%00010000
    136  f9da		       d0 05		      bne	.line_control_position_top_right
    137  f9dc
    138  f9dc		       a2 08		      ldx	#SPIDER_SIZE/2
    139  f9de		       4c 0a fa 	      jmp	.line_control_position_store
    140  f9e1
    141  f9e1				   .line_control_position_top_right
    142  f9e1		       c9 60		      cmp	#%01100000
    143  f9e3		       d0 07		      bne	.line_control_position_bottom_right
    144  f9e5
    145  f9e5		       a2 10		      ldx	#SPIDER_SIZE
    146  f9e7		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    147  f9e9		       4c 0a fa 	      jmp	.line_control_position_store
    148  f9ec
    149  f9ec				   .line_control_position_bottom_right
    150  f9ec		       c9 50		      cmp	#%01010000
    151  f9ee		       d0 07		      bne	.line_control_position_bottom_left
    152  f9f0
    153  f9f0		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    154  f9f2		       a0 00		      ldy	#0
    155  f9f4		       4c 0a fa 	      jmp	.line_control_position_store
    156  f9f7
    157  f9f7				   .line_control_position_bottom_left
    158  f9f7		       c9 90		      cmp	#%10010000
    159  f9f9		       d0 07		      bne	.line_control_position_top_left
    160  f9fb
    161  f9fb							; No Offset
    162  f9fb		       a2 04		      ldx	#LINE_SIZE/2
    163  f9fd		       a0 04		      ldy	#LINE_SIZE/2
    164  f9ff		       4c 0a fa 	      jmp	.line_control_position_store
    165  fa02
    166  fa02				   .line_control_position_top_left
    167  fa02		       c9 a0		      cmp	#%10100000
    168  fa04		       d0 04		      bne	.line_control_position_store
    169  fa06
    170  fa06		       a2 00		      ldx	#0
    171  fa08		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    172  fa0a
    173  fa0a				   .line_control_position_store
    174  fa0a
    175  fa0a							; Apply offsetX to playerX
    176  fa0a		       a5 a5		      lda	SpiderPos
    177  fa0c		       86 83		      stx	Temp
    178  fa0e		       18		      clc
    179  fa0f		       65 83		      adc	Temp
    180  fa11		       aa		      tax
    181  fa12
    182  fa12							; Apply offsetY to playerY
    183  fa12		       a5 a6		      lda	SpiderPos+1
    184  fa14		       84 83		      sty	Temp
    185  fa16		       18		      clc
    186  fa17		       65 83		      adc	Temp
    187  fa19		       a8		      tay
    188  fa1a
    189  fa1a		       86 af		      stx	LinePos
    190  fa1c		       84 b0		      sty	LinePos+1
    191  fa1e
    192  fa1e				   .line_control_return
    193  fa1e		       60		      rts
    194  fa1f
    195  fa1f				   LineObject
    196  fa1f
    197  fa1f							; Check if line is enabled
    198  fa1f		       24 ae		      bit	LineEnabled
    199  fa21		       10 26		      bpl	.line_object_return
    200  fa23
    201  fa23							; Load position
    202  fa23		       a6 af		      ldx	LinePos
    203  fa25		       a4 b0		      ldy	LinePos+1
    204  fa27
    205  fa27				   .line_object_boundary
    206  fa27				   .line_object_boundary_left
    207  fa27		       e0 04		      cpx	#LINE_VEL_X
    208  fa29		       90 1b		      bcc	.line_object_disable
    209  fa2b				   .line_object_boundary_right
    210  fa2b		       e0 9b		      cpx	#160-LINE_VEL_X-1
    211  fa2d		       b0 17		      bcs	.line_object_disable
    212  fa2f				   .line_object_boundary_bottom
    213  fa2f		       c0 04		      cpy	#LINE_VEL_Y
    214  fa31		       90 13		      bcc	.line_object_disable
    215  fa33				   .line_object_boundary_top
    216  fa33		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    217  fa35		       b0 0f		      bcs	.line_object_disable
    218  fa37
    219  fa37				   .line_object_velocity
    220  fa37
    221  fa37							; Apply Velocity
    222  fa37		       8a		      txa
    223  fa38		       18		      clc
    224  fa39		       65 b1		      adc	LineVelocity
    225  fa3b		       85 af		      sta	LinePos
    226  fa3d
    227  fa3d		       98		      tya
    228  fa3e		       18		      clc
    229  fa3f		       65 b2		      adc	LineVelocity+1
    230  fa41		       85 b0		      sta	LinePos+1
    231  fa43
    232  fa43		       4c 49 fa 	      jmp	.line_object_return
    233  fa46
    234  fa46				   .line_object_disable
    235  fa46		       20 99 fa 	      jsr	LineDisable
    236  fa49
    237  fa49				   .line_object_return
    238  fa49		       60		      rts
    239  fa4a
    240  fa4a				   LineCollision
    241  fa4a
    242  fa4a		       a9 78		      lda	#BUG_STUN_LENGTH
    243  fa4c
    244  fa4c				   .line_collision_m0
    245  fa4c		       24 04		      bit	CXM0FB
    246  fa4e		       50 08		      bvc	.line_collision_m1
    247  fa50
    248  fa50							; Set stun timer
    249  fa50		       85 b6		      sta	BugStunned+0
    250  fa52
    251  fa52							; Disable line
    252  fa52		       20 99 fa 	      jsr	LineDisable
    253  fa55		       4c 61 fa 	      jmp	.line_collision_sample
    254  fa58
    255  fa58				   .line_collision_m1
    256  fa58		       24 05		      bit	CXM1FB
    257  fa5a		       50 08		      bvc	.line_collision_return
    258  fa5c
    259  fa5c							; Set stun timer
    260  fa5c		       85 b7		      sta	BugStunned+1
    261  fa5e
    262  fa5e							; Disable line
    263  fa5e		       20 99 fa 	      jsr	LineDisable
    264  fa61
    265  fa61				   .line_collision_sample
    266  fa61		       20 bb fa 	      jsr	LineSample
    267  fa64
    268  fa64				   .line_collision_return
    269  fa64		       60		      rts
    270  fa65
    271  fa65				   LinePosition
    272  fa65
    273  fa65							; Set Line Position
    274  fa65		       a2 04		      ldx	#4	; Object (ball)
    275  fa67		       a5 af		      lda	LinePos	; X Position
    276  fa69		       20 00 f0 	      jsr	PosObject
    277  fa6c
    278  fa6c		       60		      rts
    279  fa6d
    280  fa6d							; Scanline Draw
    281  fa6d
    282  fa6d				   LineDrawStart
    283  fa6d
    284  fa6d							; Set ball size to be 4 clocks (4/5 bits)
    285  fa6d		       a5 80		      lda	CtrlPf
    286  fa6f		       29 cf		      and	#%11001111
    287  fa71		       09 20		      ora	#%00100000
    288  fa73		       85 80		      sta	CtrlPf
    289  fa75		       85 0a		      sta	CTRLPF
    290  fa77
    291  fa77							; Determine if we need to use vertical delay (oven line)
    292  fa77		       a5 b0		      lda	LinePos+1
    293  fa79		       4a		      lsr
    294  fa7a		       90 05		      bcc	.line_draw_start_nodelay
    295  fa7c
    296  fa7c		       a0 01		      ldy	#1
    297  fa7e		       4c 83 fa 	      jmp	.line_draw_start_set_delay
    298  fa81
    299  fa81				   .line_draw_start_nodelay
    300  fa81		       a0 00		      ldy	#0
    301  fa83
    302  fa83				   .line_draw_start_set_delay
    303  fa83		       84 27		      sty	VDELBL
    304  fa85
    305  fa85				   .line_draw_start_pos
    306  fa85							; Calculate starting position
    307  fa85		       18		      clc
    308  fa86		       85 b3		      sta	LineDrawPos+0
    309  fa88		       69 04		      adc	#LINE_SIZE/2
    310  fa8a		       85 b4		      sta	LineDrawPos+1
    311  fa8c
    312  fa8c		       60		      rts
    313  fa8d
    314  fa8d				   LineEnable
    315  fa8d		       a9 80		      lda	#%10000000
    316  fa8f		       85 ae		      sta	LineEnabled
    317  fa91
    318  fa91		       a5 93		      lda	SampleStep
    319  fa93		       d0 03		      bne	.line_enable_return
    320  fa95
    321  fa95		       20 a5 fa 	      jsr	LineAudioPlay
    322  fa98
    323  fa98				   .line_enable_return
    324  fa98		       60		      rts
    325  fa99
    326  fa99				   LineDisable
    327  fa99		       a9 00		      lda	#0
    328  fa9b		       85 ae		      sta	LineEnabled
    329  fa9d
    330  fa9d		       a5 93		      lda	SampleStep
    331  fa9f		       d0 03		      bne	.line_disable_return
    332  faa1
    333  faa1		       20 b2 fa 	      jsr	LineAudioMute
    334  faa4
    335  faa4				   .line_disable_return
    336  faa4		       60		      rts
    337  faa5
    338  faa5				   LineAudioPlay
    339  faa5		       a9 08		      lda	#LINE_AUDIO_C
    340  faa7		       85 16		      sta	AUDC1
    341  faa9		       a9 01		      lda	#LINE_AUDIO_F
    342  faab		       85 18		      sta	AUDF1
    343  faad		       a9 04		      lda	#LINE_AUDIO_V
    344  faaf		       85 1a		      sta	AUDV1
    345  fab1		       60		      rts
    346  fab2
    347  fab2				   LineAudioMute
    348  fab2		       a9 00		      lda	#0
    349  fab4		       85 1a		      sta	AUDV1
    350  fab6		       85 18		      sta	AUDF1
    351  fab8		       85 16		      sta	AUDC1
    352  faba		       60		      rts
    353  fabb
    354  fabb				   LineSample
    355  fabb		       a9 08		      lda	#LINE_SAMPLE_LEN
    356  fabd		       85 93		      sta	SampleStep
    357  fabf		       a9 03		      lda	#LINE_SAMPLE_C
    358  fac1		       85 16		      sta	AUDC1
    359  fac3		       a9 01		      lda	#LINE_SAMPLE_F
    360  fac5		       85 18		      sta	AUDF1
    361  fac7		       a9 04		      lda	#LINE_SAMPLE_V
    362  fac9		       85 1a		      sta	AUDV1
    363  facb		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  facc					      include	"objects/bug.asm"
      1  facc							;======================
      2  facc							; Bugs (missiles 0 & 1)
      3  facc							;======================
      4  facc
      5  facc							; Constants
      6  facc
      7  facc		       00 08	   BUG_SIZE   =	8
      8  facc		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  facc		       00 78	   BUG_STUN_LENGTH =	120
     10  facc		       00 04	   BUG_POINTS =	4
     11  facc
     12  facc		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  facc		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  facc		       00 38	   BUG_STUN_COLOR =	#$38
     15  facc		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  facc
     17  facc		       00 1e	   BUG_SAMPLE_LEN =	30
     18  facc		       00 03	   BUG_SAMPLE_C =	3
     19  facc		       00 14	   BUG_SAMPLE_F =	20
     20  facc		       00 04	   BUG_SAMPLE_V =	4
     21  facc
     22  facc		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  facc		       00 08	   BUG_COL_SAMPLE_C =	8
     24  facc		       00 08	   BUG_COL_SAMPLE_F =	8
     25  facc		       00 03	   BUG_COL_SAMPLE_V =	3
     26  facc
     27  facc							; Initialization
     28  facc
     29  facc				   BugInit
     30  facc
     31  facc							; Initialize Bugs
     32  facc		       a2 01		      ldx	#1
     33  face
     34  face				   .bug_init_loop
     35  face		       20 d5 fa 	      jsr	BugReset
     36  fad1
     37  fad1		       ca		      dex
     38  fad2		       10 fa		      bpl	.bug_init_loop
     39  fad4
     40  fad4		       60		      rts
     41  fad5
     42  fad5				   BugReset		; x = bug (0 or 1)
     43  fad5
     44  fad5							; Set random position
     45  fad5		       20 13 f0 	      jsr	Random
     46  fad8
     47  fad8		       a5 86		      lda	Rand8
     48  fada		       29 7f		      and	#$7f
     49  fadc		       95 b8		      sta	BugPosX,x
     50  fade
     51  fade		       a5 87		      lda	Rand16
     52  fae0		       29 7f		      and	#$7f
     53  fae2		       95 ba		      sta	BugPosY,x
     54  fae4
     55  fae4							; Set as active
     56  fae4		       a9 00		      lda	#0
     57  fae6		       95 b6		      sta	BugStunned,x
     58  fae8
     59  fae8		       60		      rts
     60  fae9
     61  fae9							; Frame Update
     62  fae9
     63  fae9				   BugUpdate
     64  fae9
     65  fae9		       a2 01		      ldx	#1
     66  faeb				   .bug_update_loop
     67  faeb		       86 83		      stx	Temp+0
     68  faed
     69  faed		       b5 b6		      lda	BugStunned,x
     70  faef		       f0 08		      beq	.bug_update_active
     71  faf1
     72  faf1				   .bug_update_stunned
     73  faf1		       d6 b6		      dec	BugStunned,x
     74  faf3		       20 7c fb 	      jsr	BugStunCollision
     75  faf6		       4c ff fa 	      jmp	.bug_update_next
     76  faf9
     77  faf9				   .bug_update_active
     78  faf9		       20 05 fb 	      jsr	BugMovement
     79  fafc		       20 64 fb 	      jsr	BugCollision
     80  faff
     81  faff				   .bug_update_next
     82  faff		       a6 83		      ldx	Temp+0
     83  fb01		       ca		      dex
     84  fb02		       10 e7		      bpl	.bug_update_loop
     85  fb04
     86  fb04		       60		      rts
     87  fb05
     88  fb05				   BugMovement
     89  fb05
     90  fb05				   .bug_movement_random
     91  fb05		       20 13 f0 	      jsr	Random
     92  fb08		       29 03		      and	#%00000011
     93  fb0a		       85 84		      sta	Temp+1
     94  fb0c
     95  fb0c				   .bug_movement_load
     96  fb0c		       a6 83		      ldx	Temp+0
     97  fb0e
     98  fb0e				   .bug_movement_x
     99  fb0e		       a4 b5		      ldy	BugSpeed
    100  fb10
    101  fb10							; Alter X Position
    102  fb10		       a5 84		      lda	Temp+1
    103  fb12		       29 01		      and	#%00000001
    104  fb14
    105  fb14				   .bug_movement_x_check
    106  fb14		       c9 01		      cmp	#1
    107  fb16		       d0 08		      bne	.bug_movement_x_right
    108  fb18
    109  fb18				   .bug_movement_x_left
    110  fb18		       d6 b8		      dec	BugPosX,x
    111  fb1a		       88		      dey
    112  fb1b		       d0 fb		      bne	.bug_movement_x_left
    113  fb1d
    114  fb1d		       4c 25 fb 	      jmp	.bug_movement_y
    115  fb20
    116  fb20				   .bug_movement_x_right
    117  fb20		       f6 b8		      inc	BugPosX,x
    118  fb22		       88		      dey
    119  fb23		       d0 fb		      bne	.bug_movement_x_right
    120  fb25
    121  fb25				   .bug_movement_y
    122  fb25		       a4 b5		      ldy	BugSpeed
    123  fb27
    124  fb27							; Alter Y Position
    125  fb27		       a5 84		      lda	Temp+1
    126  fb29		       29 02		      and	#%00000010
    127  fb2b		       4a		      lsr
    128  fb2c
    129  fb2c				   .bug_movement_y_check
    130  fb2c		       c9 01		      cmp	#1
    131  fb2e		       d0 08		      bne	.bug_movement_y_down
    132  fb30
    133  fb30				   .bug_movement_y_up
    134  fb30		       f6 ba		      inc	BugPosY,x
    135  fb32		       88		      dey
    136  fb33		       d0 fb		      bne	.bug_movement_y_up
    137  fb35
    138  fb35		       4c 3d fb 	      jmp	.bug_movement_boundary
    139  fb38
    140  fb38				   .bug_movement_y_down
    141  fb38		       d6 ba		      dec	BugPosY,x
    142  fb3a		       88		      dey
    143  fb3b		       d0 fb		      bne	.bug_movement_y_down
    144  fb3d
    145  fb3d				   .bug_movement_boundary
    146  fb3d		       b5 b8		      lda	BugPosX,x
    147  fb3f		       b4 ba		      ldy	BugPosY,x
    148  fb41
    149  fb41				   .bug_movement_boundary_left
    150  fb41		       c9 18		      cmp	#BUG_BOUNDARY
    151  fb43		       b0 05		      bcs	.bug_movement_boundary_right
    152  fb45		       a9 18		      lda	#BUG_BOUNDARY
    153  fb47		       4c 50 fb 	      jmp	.bug_movement_boundary_top
    154  fb4a
    155  fb4a				   .bug_movement_boundary_right
    156  fb4a		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    157  fb4c		       90 02		      bcc	.bug_movement_boundary_top
    158  fb4e		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    159  fb50
    160  fb50				   .bug_movement_boundary_top
    161  fb50		       c0 18		      cpy	#BUG_BOUNDARY
    162  fb52		       b0 05		      bcs	.bug_movement_boundary_bottom
    163  fb54		       a0 18		      ldy	#BUG_BOUNDARY
    164  fb56		       4c 5f fb 	      jmp	.bug_movement_store
    165  fb59
    166  fb59				   .bug_movement_boundary_bottom
    167  fb59		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    168  fb5b		       90 02		      bcc	.bug_movement_store
    169  fb5d		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    170  fb5f
    171  fb5f				   .bug_movement_store
    172  fb5f		       95 b8		      sta	BugPosX,x
    173  fb61		       94 ba		      sty	BugPosY,x
    174  fb63
    175  fb63				   .bug_movement_return
    176  fb63		       60		      rts
    177  fb64
    178  fb64				   BugCollision
    179  fb64
    180  fb64		       e0 01		      cpx	#1
    181  fb66		       f0 05		      beq	.bug_collision_m1
    182  fb68
    183  fb68				   .bug_collision_m0
    184  fb68							; Collision for M0 (V set)
    185  fb68		       24 00		      bit	CXM0P
    186  fb6a		       70 06		      bvs	.bug_collision_active
    187  fb6c		       60		      rts
    188  fb6d
    189  fb6d				   .bug_collision_m1
    190  fb6d							; Collision for M1 (N set)
    191  fb6d		       24 01		      bit	CXM1P
    192  fb6f		       30 01		      bmi	.bug_collision_active
    193  fb71		       60		      rts
    194  fb72
    195  fb72				   .bug_collision_active
    196  fb72
    197  fb72							; Reduce players score
    198  fb72		       a5 94		      lda	ScoreValue
    199  fb74		       f0 02		      beq	.bug_collision_score_skip
    200  fb76		       c6 94		      dec	ScoreValue
    201  fb78				   .bug_collision_score_skip
    202  fb78
    203  fb78							; Play sound
    204  fb78		       20 d5 fb 	      jsr	BugColSample
    205  fb7b
    206  fb7b		       60		      rts
    207  fb7c
    208  fb7c				   BugStunCollision
    209  fb7c
    210  fb7c		       e0 01		      cpx	#1
    211  fb7e		       f0 05		      beq	.bug_stun_collision_m1
    212  fb80
    213  fb80				   .bug_stun_collision_m0
    214  fb80							; Collision for M0 (V set)
    215  fb80		       24 00		      bit	CXM0P
    216  fb82		       70 06		      bvs	.bug_stun_collision_active
    217  fb84		       60		      rts
    218  fb85
    219  fb85				   .bug_stun_collision_m1
    220  fb85							; Collision for M1 (N set)
    221  fb85		       24 01		      bit	CXM1P
    222  fb87		       30 01		      bmi	.bug_stun_collision_active
    223  fb89		       60		      rts
    224  fb8a
    225  fb8a				   .bug_stun_collision_active
    226  fb8a							; Add points to score
    227  fb8a		       18		      clc
    228  fb8b		       a5 95		      lda	ScoreValue+1
    229  fb8d		       69 04		      adc	#BUG_POINTS
    230  fb8f		       85 95		      sta	ScoreValue+1
    231  fb91
    232  fb91							; Reset bug
    233  fb91		       20 d5 fa 	      jsr	BugReset
    234  fb94
    235  fb94							; Play sample
    236  fb94		       20 c4 fb 	      jsr	BugSample
    237  fb97
    238  fb97		       60		      rts
    239  fb98
    240  fb98							; Horizontal Positioning
    241  fb98
    242  fb98				   BugPosition
    243  fb98
    244  fb98		       a2 02		      ldx	#2
    245  fb9a		       a5 b8		      lda	BugPosX+0
    246  fb9c		       20 00 f0 	      jsr	PosObject
    247  fb9f
    248  fb9f		       a2 03		      ldx	#3
    249  fba1		       a5 b9		      lda	BugPosX+1
    250  fba3		       20 00 f0 	      jsr	PosObject
    251  fba6
    252  fba6		       60		      rts
    253  fba7
    254  fba7							; Scanline Draw
    255  fba7
    256  fba7				   BugDrawStart
    257  fba7
    258  fba7		       a0 01		      ldy	#1
    259  fba9				   .bug_draw_start_loop
    260  fba9
    261  fba9							; Set missile 0 & 1 to be 8 clock size
    262  fba9		       b9 81 00 	      lda	NuSiz0,y
    263  fbac		       09 30		      ora	#%00110000
    264  fbae		       99 81 00 	      sta	NuSiz0,y
    265  fbb1		       99 04 00 	      sta	NUSIZ0,y
    266  fbb4
    267  fbb4							; Setup half scanline positions
    268  fbb4		       b9 ba 00 	      lda	BugPosY,y
    269  fbb7		       4a		      lsr
    270  fbb8		       99 bc 00 	      sta	BugDrawPosBottom,y
    271  fbbb
    272  fbbb		       69 04		      adc	#BUG_SIZE/2
    273  fbbd		       99 be 00 	      sta	BugDrawPosTop,y
    274  fbc0
    275  fbc0		       88		      dey
    276  fbc1		       10 e6		      bpl	.bug_draw_start_loop
    277  fbc3
    278  fbc3		       60		      rts
    279  fbc4
    280  fbc4				   BugSample
    281  fbc4		       a9 1e		      lda	#BUG_SAMPLE_LEN
    282  fbc6		       85 93		      sta	SampleStep
    283  fbc8		       a9 03		      lda	#BUG_SAMPLE_C
    284  fbca		       85 16		      sta	AUDC1
    285  fbcc		       a9 14		      lda	#BUG_SAMPLE_F
    286  fbce		       85 18		      sta	AUDF1
    287  fbd0		       a9 04		      lda	#BUG_SAMPLE_V
    288  fbd2		       85 1a		      sta	AUDV1
    289  fbd4		       60		      rts
    290  fbd5
    291  fbd5				   BugColSample
    292  fbd5		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    293  fbd7		       85 93		      sta	SampleStep
    294  fbd9		       a9 08		      lda	#BUG_COL_SAMPLE_C
    295  fbdb		       85 16		      sta	AUDC1
    296  fbdd		       a9 08		      lda	#BUG_COL_SAMPLE_F
    297  fbdf		       85 18		      sta	AUDF1
    298  fbe1		       a9 03		      lda	#BUG_COL_SAMPLE_V
    299  fbe3		       85 1a		      sta	AUDV1
    300  fbe5		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fbe6					      include	"objects/swatter.asm"
      1  fbe6							;==================
      2  fbe6							; Swatter (player1)
      3  fbe6							;==================
      4  fbe6
      5  fbe6							; Constants
      6  fbe6
      7  fbe6		       00 30	   SWATTER_COLOR =	#$30
      8  fbe6		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fbe6		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fbe6		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fbe6
     12  fbe6		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fbe6		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fbe6
     15  fbe6		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fbe6		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fbe6
     18  fbe6		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fbe6		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fbe6		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fbe6
     22  fbe6		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fbe6		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fbe6		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fbe6		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fbe6		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fbe6
     28  fbe6		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fbe6		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fbe6		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fbe6		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fbe6
     33  fbe6		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fbe6		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fbe6		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fbe6		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fbe6
     38  fbe6							; Initialization
     39  fbe6
     40  fbe6				   SwatterInit
     41  fbe6
     42  fbe6		       20 bd fc 	      jsr	SwatterReset
     43  fbe9
     44  fbe9		       60		      rts
     45  fbea
     46  fbea							; Frame Update
     47  fbea
     48  fbea				   SwatterUpdate
     49  fbea
     50  fbea							; Check b/w
     51  fbea		       ad 82 02 	      lda	SWCHB
     52  fbed					      REPEAT	4
     53  fbed		       4a		      lsr
     52  fbed					      REPEND
     53  fbee		       4a		      lsr
     52  fbee					      REPEND
     53  fbef		       4a		      lsr
     52  fbef					      REPEND
     53  fbf0		       4a		      lsr
     54  fbf1					      REPEND
     55  fbf1		       90 10		      bcc	.swatter_update_bw
     56  fbf3
     57  fbf3				   .swatter_update_color
     58  fbf3		       a5 c2		      lda	SwatterState
     59  fbf5		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     60  fbf7		       d0 05		      bne	.swatter_update_color_hold
     61  fbf9				   .swatter_update_color_active
     62  fbf9		       a9 30		      lda	#SWATTER_COLOR
     63  fbfb		       4c 10 fc 	      jmp	.swatter_update_color_set
     64  fbfe				   .swatter_update_color_hold
     65  fbfe		       a9 36		      lda	#SWATTER_HOLD_COLOR
     66  fc00		       4c 10 fc 	      jmp	.swatter_update_color_set
     67  fc03
     68  fc03				   .swatter_update_bw
     69  fc03		       a5 c2		      lda	SwatterState
     70  fc05		       c9 80		      cmp	#SWATTER_STATE_HOLD
     71  fc07		       d0 05		      bne	.swatter_update_bw_active
     72  fc09				   .swatter_update_bw_hold
     73  fc09		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     74  fc0b		       4c 10 fc 	      jmp	.swatter_update_color_set
     75  fc0e				   .swatter_update_bw_active
     76  fc0e		       a9 0e		      lda	#SWATTER_BW_COLOR
     77  fc10
     78  fc10				   .swatter_update_color_set
     79  fc10		       85 c3		      sta	SwatterColor
     80  fc12
     81  fc12				   .swatter_update_hold_sample
     82  fc12		       a4 c2		      ldy	SwatterState
     83  fc14		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fc16		       d0 0f		      bne	.swatter_update_state
     85  fc18
     86  fc18		       c6 c9		      dec	SwatterSampleCount
     87  fc1a		       d0 0b		      bne	.swatter_update_state
     88  fc1c
     89  fc1c		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     90  fc1e		       85 c9		      sta	SwatterSampleCount
     91  fc20
     92  fc20		       c6 ca		      dec	SwatterSampleF
     93  fc22		       a4 ca		      ldy	SwatterSampleF
     94  fc24		       20 dd fc 	      jsr	SwatterHoldSample
     95  fc27
     96  fc27				   .swatter_update_state
     97  fc27		       a6 90		      ldx	FrameTimer+1
     98  fc29		       d0 2d		      bne	.swatter_update_collision
     99  fc2b
    100  fc2b		       a4 c2		      ldy	SwatterState
    101  fc2d		       c0 00		      cpy	#SWATTER_STATE_WAIT
    102  fc2f		       f0 0a		      beq	.swatter_update_state_wait
    103  fc31
    104  fc31		       c0 80		      cpy	#SWATTER_STATE_HOLD
    105  fc33		       f0 18		      beq	.swatter_update_state_hold
    106  fc35
    107  fc35							; Else we're at the end of the active state
    108  fc35		       20 bd fc 	      jsr	SwatterReset
    109  fc38		       4c 67 fc 	      jmp	.swatter_update_return
    110  fc3b
    111  fc3b				   .swatter_update_state_wait
    112  fc3b		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    113  fc3d		       84 ca		      sty	SwatterSampleF
    114  fc3f		       20 dd fc 	      jsr	SwatterHoldSample
    115  fc42
    116  fc42		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    117  fc44		       85 c9		      sta	SwatterSampleCount
    118  fc46
    119  fc46		       a9 80		      lda	#SWATTER_STATE_HOLD
    120  fc48		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    121  fc4a		       4c 54 fc 	      jmp	.swatter_update_state_set
    122  fc4d
    123  fc4d				   .swatter_update_state_hold
    124  fc4d		       20 ec fc 	      jsr	SwatterActiveSample
    125  fc50
    126  fc50		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    127  fc52		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    128  fc54
    129  fc54				   .swatter_update_state_set
    130  fc54		       85 c2		      sta	SwatterState
    131  fc56		       86 90		      stx	FrameTimer+1
    132  fc58
    133  fc58				   .swatter_update_collision
    134  fc58							; Check 1 frame after active
    135  fc58		       a5 c2		      lda	SwatterState
    136  fc5a		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    137  fc5c		       d0 09		      bne	.swatter_update_return
    138  fc5e		       a6 90		      ldx	FrameTimer+1
    139  fc60		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    140  fc62		       d0 03		      bne	.swatter_update_return
    141  fc64
    142  fc64		       20 68 fc 	      jsr	SwatterCollision
    143  fc67
    144  fc67				   .swatter_update_return
    145  fc67		       60		      rts
    146  fc68
    147  fc68				   SwatterCollision
    148  fc68		       24 00		      bit	CXM0P
    149  fc6a		       30 09		      bmi	.swatter_collision_m0
    150  fc6c
    151  fc6c		       24 01		      bit	CXM1P
    152  fc6e		       70 0a		      bvs	.swatter_collision_m1
    153  fc70
    154  fc70		       24 07		      bit	CXPPMM
    155  fc72		       30 0e		      bmi	.swatter_collision_p0
    156  fc74
    157  fc74		       60		      rts
    158  fc75
    159  fc75				   .swatter_collision_m0
    160  fc75		       a2 00		      ldx	#0
    161  fc77		       4c 7c fc 	      jmp	.swatter_collision_bug_reset
    162  fc7a
    163  fc7a				   .swatter_collision_m1
    164  fc7a		       a2 01		      ldx	#1
    165  fc7c
    166  fc7c				   .swatter_collision_bug_reset
    167  fc7c		       20 d5 fa 	      jsr	BugReset
    168  fc7f		       4c 94 fc 	      jmp	.swatter_collision_active
    169  fc82
    170  fc82				   .swatter_collision_p0
    171  fc82
    172  fc82		       a5 94		      lda	ScoreValue
    173  fc84		       c5 c5		      cmp	SwatterHitDamage
    174  fc86		       90 08		      bcc	.swatter_collision_p0_zero
    175  fc88		       f0 06		      beq	.swatter_collision_p0_zero
    176  fc8a
    177  fc8a		       18		      clc
    178  fc8b		       e5 c5		      sbc	SwatterHitDamage
    179  fc8d		       4c 92 fc 	      jmp	.swatter_collision_p0_set
    180  fc90
    181  fc90				   .swatter_collision_p0_zero
    182  fc90		       a9 00		      lda	#0
    183  fc92
    184  fc92				   .swatter_collision_p0_set
    185  fc92		       85 94		      sta	ScoreValue
    186  fc94
    187  fc94				   .swatter_collision_active
    188  fc94		       20 fd fc 	      jsr	SwatterHitSample
    189  fc97
    190  fc97		       60		      rts
    191  fc98
    192  fc98				   SwatterPosition
    193  fc98
    194  fc98							; Set Position
    195  fc98		       a2 01		      ldx	#1	; Object (player1)
    196  fc9a		       a5 c0		      lda	SwatterPos	; X Position
    197  fc9c		       20 00 f0 	      jsr	PosObject
    198  fc9f
    199  fc9f		       60		      rts
    200  fca0
    201  fca0							; Scanline Draw
    202  fca0
    203  fca0				   SwatterDrawStart
    204  fca0
    205  fca0							; Set player 1 to be quad size
    206  fca0		       a5 82		      lda	NuSiz1
    207  fca2		       29 f8		      and	#%11111000
    208  fca4		       09 07		      ora	#%00000111
    209  fca6		       85 82		      sta	NuSiz1
    210  fca8		       85 05		      sta	NUSIZ1
    211  fcaa
    212  fcaa							; Set sprite color
    213  fcaa		       a5 c3		      lda	SwatterColor
    214  fcac		       85 07		      sta	COLUP1
    215  fcae
    216  fcae							; Note: Doesn't need vertical delay
    217  fcae
    218  fcae							; Calculate starting position
    219  fcae		       a5 c1		      lda	SwatterPos+1	; Y Position
    220  fcb0		       4a		      lsr
    221  fcb1		       18		      clc
    222  fcb2		       69 14		      adc	#SWATTER_SPRITE_SIZE
    223  fcb4		       85 c7		      sta	SwatterDrawPos
    224  fcb6
    225  fcb6							; Initialize sprite index
    226  fcb6		       a9 00		      lda	#0
    227  fcb8		       85 c6		      sta	SwatterIndex
    228  fcba		       85 c8		      sta	SwatterLine
    229  fcbc
    230  fcbc		       60		      rts
    231  fcbd
    232  fcbd				   SwatterReset
    233  fcbd							; Initialize Swatter State
    234  fcbd		       a9 00		      lda	#SWATTER_STATE_WAIT
    235  fcbf		       85 c2		      sta	SwatterState
    236  fcc1
    237  fcc1							; Set Wait Timer
    238  fcc1		       20 13 f0 	      jsr	Random
    239  fcc4		       a5 86		      lda	Rand8
    240  fcc6		       29 3f		      and	#$3f
    241  fcc8		       18		      clc
    242  fcc9		       65 c4		      adc	SwatterWaitTime
    243  fccb		       85 90		      sta	FrameTimer+1
    244  fccd
    245  fccd							; Set Random Position
    246  fccd		       20 13 f0 	      jsr	Random
    247  fcd0		       a5 86		      lda	Rand8	; X Position
    248  fcd2		       29 7f		      and	#$7f
    249  fcd4		       85 c0		      sta	SwatterPos+0
    250  fcd6		       a5 87		      lda	Rand16	; Y Position
    251  fcd8		       29 7e		      and	#$7e	; Ensure that Y position is even
    252  fcda		       85 c1		      sta	SwatterPos+1
    253  fcdc
    254  fcdc		       60		      rts
    255  fcdd
    256  fcdd				   SwatterHoldSample
    257  fcdd		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    258  fcdf		       85 93		      sta	SampleStep
    259  fce1		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    260  fce3		       85 16		      sta	AUDC1
    261  fce5		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    262  fce7		       85 1a		      sta	AUDV1
    263  fce9
    264  fce9		       84 18		      sty	AUDF1	; Store value of y as frequency
    265  fceb
    266  fceb		       60		      rts
    267  fcec
    268  fcec				   SwatterActiveSample
    269  fcec		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    270  fcee		       85 93		      sta	SampleStep
    271  fcf0		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    272  fcf2		       85 16		      sta	AUDC1
    273  fcf4		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    274  fcf6		       85 18		      sta	AUDF1
    275  fcf8		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    276  fcfa		       85 1a		      sta	AUDV1
    277  fcfc		       60		      rts
    278  fcfd
    279  fcfd				   SwatterHitSample
    280  fcfd		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    281  fcff		       85 93		      sta	SampleStep
    282  fd01		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    283  fd03		       85 16		      sta	AUDC1
    284  fd05		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    285  fd07		       85 18		      sta	AUDF1
    286  fd09		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    287  fd0b		       85 1a		      sta	AUDV1
    288  fd0d		       60		      rts
------- FILE game.asm
     22  fd0e
     23  fd0e							; Initialization
     24  fd0e
     25  fd0e				   GameInit
     26  fd0e
     27  fd0e							; Setup logic and kernel
      0  fd0e					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fd0e				   .POINTER   SET	VBlankPtr
      2  fd0e				   .ADDRESS   SET	GameVerticalBlank
      3  fd0e
      4  fd0e		       a9 4f		      LDA	#<.ADDRESS
      5  fd10		       85 88		      STA	.POINTER
      6  fd12		       a9 fd		      LDA	#>.ADDRESS
      7  fd14		       85 89		      STA	.POINTER+1
      8  fd16
      0  fd16					      SET_POINTER	KernelPtr, GameKernel
      1  fd16				   .POINTER   SET	KernelPtr
      2  fd16				   .ADDRESS   SET	GameKernel
      3  fd16
      4  fd16		       a9 d1		      LDA	#<.ADDRESS
      5  fd18		       85 8a		      STA	.POINTER
      6  fd1a		       a9 fd		      LDA	#>.ADDRESS
      7  fd1c		       85 8b		      STA	.POINTER+1
      8  fd1e
      0  fd1e					      SET_POINTER	OverScanPtr, GameOverScan
      1  fd1e				   .POINTER   SET	OverScanPtr
      2  fd1e				   .ADDRESS   SET	GameOverScan
      3  fd1e
      4  fd1e		       a9 79		      LDA	#<.ADDRESS
      5  fd20		       85 8c		      STA	.POINTER
      6  fd22		       a9 fd		      LDA	#>.ADDRESS
      7  fd24		       85 8d		      STA	.POINTER+1
      8  fd26
     31  fd26
     32  fd26							; Mute Audio
     33  fd26		       a9 00		      lda	#0
     34  fd28							;    sta AUDC0
     35  fd28							;    sta AUDV0
     36  fd28							;    sta AUDF0
     37  fd28		       85 16		      sta	AUDC1
     38  fd2a		       85 1a		      sta	AUDV1
     39  fd2c		       85 18		      sta	AUDF1
     40  fd2e		       85 93		      sta	SampleStep
     41  fd30
     42  fd30							; Load Audio Settings
     43  fd30		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fd32		       85 19		      sta	AUDV0
     45  fd34
     46  fd34							; Make it so that we play the first note immediately
     47  fd34		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fd36		       85 92		      sta	AudioStep
     49  fd38		       a9 02		      lda	#2
     50  fd3a		       85 8f		      sta	FrameTimer
     51  fd3c
     52  fd3c							; Reset NuSiz
     53  fd3c							;    lda #0
     54  fd3c							;    sta NuSiz0
     55  fd3c							;    sta NUSIZ0
     56  fd3c							;    sta NuSiz1
     57  fd3c							;    sta NUSIZ1
     58  fd3c
     59  fd3c							; Initialize Objects
     60  fd3c		       20 a6 f5 	      jsr	LevelInit
     61  fd3f		       20 46 f6 	      jsr	ScoreInit
     62  fd42		       20 ee f7 	      jsr	SpiderInit
     63  fd45		       20 50 f9 	      jsr	LineInit
     64  fd48		       20 cc fa 	      jsr	BugInit
     65  fd4b		       20 e6 fb 	      jsr	SwatterInit
     66  fd4e
     67  fd4e		       60		      rts
     68  fd4f
     69  fd4f				   GameVerticalBlank
     70  fd4f
     71  fd4f							; Refresh random values
     72  fd4f		       20 13 f0 	      jsr	Random
     73  fd52
     74  fd52							; Update Objects
     75  fd52		       20 bc f5 	      jsr	LevelUpdate
     76  fd55		       20 03 f8 	      jsr	SpiderUpdate
     77  fd58		       20 63 f9 	      jsr	LineUpdate
     78  fd5b		       20 e9 fa 	      jsr	BugUpdate
     79  fd5e		       20 ea fb 	      jsr	SwatterUpdate
     80  fd61		       20 4f f6 	      jsr	ScoreUpdate
     81  fd64
     82  fd64							; Reset Collisions
     83  fd64		       85 2c		      sta	CXCLR
     84  fd66
     85  fd66							; Clear horizontal movement
     86  fd66		       85 2b		      sta	HMCLR
     87  fd68
     88  fd68							; Update Positions
     89  fd68		       20 20 f9 	      jsr	SpiderPosition
     90  fd6b		       20 65 fa 	      jsr	LinePosition
     91  fd6e		       20 98 fb 	      jsr	BugPosition
     92  fd71		       20 98 fc 	      jsr	SwatterPosition
     93  fd74
     94  fd74							; Set final x positions
     95  fd74		       85 02		      sta	WSYNC
     96  fd76		       85 2a		      sta	HMOVE
     97  fd78
     98  fd78		       60		      rts
     99  fd79
    100  fd79				   GameOverScan
    101  fd79
    102  fd79							; Audio Routines
    103  fd79		       20 95 fd 	      jsr	GameAudio
    104  fd7c		       20 83 fd 	      jsr	GameSample
    105  fd7f
    106  fd7f							; State Routines
    107  fd7f		       20 c9 fd 	      jsr	GameDeath
    108  fd82
    109  fd82		       60		      rts
    110  fd83
    111  fd83				   GameSample
    112  fd83
    113  fd83		       a6 93		      ldx	SampleStep
    114  fd85		       f0 0b		      beq	.game_sample_return
    115  fd87
    116  fd87		       ca		      dex
    117  fd88		       d0 08		      bne	.game_sample_return
    118  fd8a
    119  fd8a				   .game_sample_mute
    120  fd8a		       a9 00		      lda	#0
    121  fd8c		       85 1a		      sta	AUDV1
    122  fd8e		       85 18		      sta	AUDF1
    123  fd90		       85 16		      sta	AUDC1
    124  fd92
    125  fd92				   .game_sample_return
    126  fd92		       86 93		      stx	SampleStep
    127  fd94		       60		      rts
    128  fd95
    129  fd95				   GameAudio
    130  fd95
    131  fd95		       a6 8f		      ldx	FrameTimer
    132  fd97		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    133  fd99		       f0 25		      beq	.game_audio_mute_note
    134  fd9b		       e0 00		      cpx	#0
    135  fd9d		       d0 29		      bne	.game_audio_return
    136  fd9f
    137  fd9f							; Reset Timer
    138  fd9f		       a2 09		      ldx	#GAME_AUDIO_STEP
    139  fda1		       86 8f		      stx	FrameTimer
    140  fda3
    141  fda3				   .game_audio_play
    142  fda3
    143  fda3							; Increment melody position
    144  fda3		       a4 92		      ldy	AudioStep
    145  fda5		       c8		      iny
    146  fda6
    147  fda6		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    148  fda8		       d0 02		      bne	.game_audio_play_note
    149  fdaa
    150  fdaa							; Loop our audio step
    151  fdaa		       a0 00		      ldy	#0
    152  fdac
    153  fdac				   .game_audio_play_note
    154  fdac
    155  fdac							; Save current position
    156  fdac		       84 92		      sty	AudioStep
    157  fdae
    158  fdae							; Melody Line
    159  fdae		       b9 b6 fe 	      lda	GameAudio0,y
    160  fdb1		       c9 ff		      cmp	#$FF
    161  fdb3		       f0 0b		      beq	.game_audio_mute_note
    162  fdb5		       85 17		      sta	AUDF0
    163  fdb7		       a9 06		      lda	#GAME_AUDIO_TONE
    164  fdb9		       85 15		      sta	AUDC0
    165  fdbb		       a9 02		      lda	#GAME_AUDIO_VOLUME
    166  fdbd		       85 19		      sta	AUDV0
    167  fdbf
    168  fdbf		       60		      rts
    169  fdc0
    170  fdc0				   .game_audio_mute_note
    171  fdc0
    172  fdc0		       a9 00		      lda	#0
    173  fdc2		       85 17		      sta	AUDF0
    174  fdc4		       85 15		      sta	AUDC0
    175  fdc6		       85 19		      sta	AUDV0
    176  fdc8
    177  fdc8				   .game_audio_return
    178  fdc8		       60		      rts
    179  fdc9
    180  fdc9				   GameDeath
    181  fdc9		       a5 94		      lda	ScoreValue+0
    182  fdcb		       d0 03		      bne	.game_death_return
    183  fdcd
    184  fdcd							; Show Game Over Screen
    185  fdcd		       20 d6 fe 	      jsr	OverInit
    186  fdd0
    187  fdd0				   .game_death_return
    188  fdd0		       60		      rts
    189  fdd1
    190  fdd1				   GameKernel
    191  fdd1
    192  fdd1							; Turn on display
    193  fdd1		       a9 00		      lda	#0
    194  fdd3		       85 01		      sta	VBLANK
    195  fdd5
    196  fdd5				   .game_kernel_score
    197  fdd5
    198  fdd5							; Draw Score on top first
    199  fdd5		       20 c1 f6 	      jsr	ScoreDraw
    200  fdd8
    201  fdd8				   .game_kernel_objects_start
    202  fdd8
    203  fdd8							; Setup Drawing Objects
    204  fdd8		       20 db f7 	      jsr	WebDrawStart
    205  fddb		       20 28 f9 	      jsr	SpiderDrawStart
    206  fdde		       20 a0 fc 	      jsr	SwatterDrawStart
    207  fde1		       20 6d fa 	      jsr	LineDrawStart
    208  fde4		       20 a7 fb 	      jsr	BugDrawStart
    209  fde7
    210  fde7							; Start Scanline Counter
    211  fde7		       a2 a8		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    212  fde9							; The extra 5 is for processing overflow
    213  fde9
    214  fde9							; Half scanline counter in Temp+1
    215  fde9		       a9 56		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    216  fdeb		       85 84		      sta	Temp+1
    217  fded
    218  fded							; 6 line counter
    219  fded		       a9 00		      lda	#0
    220  fdef		       85 85		      sta	Temp+2
    221  fdf1
    222  fdf1							; Load background color
    223  fdf1		       a5 a1		      lda	WebColor+0
    224  fdf3		       85 09		      sta	COLUBK
    225  fdf5
    226  fdf5							;sta WSYNC
    227  fdf5
    228  fdf5				   .game_kernel_objects
    229  fdf5
    230  fdf5		       a5 85		      lda	Temp+2
    231  fdf7		       d0 1a		      bne	.game_kernel_missle
    232  fdf9
    233  fdf9		       a9 03		      lda	#3
    234  fdfb		       85 85		      sta	Temp+2
    235  fdfd
    236  fdfd				   .game_kernel_web
    237  fdfd
    238  fdfd				   .game_kernel_web_pf
    239  fdfd							; Web
    240  fdfd
    241  fdfd		       a4 a0		      ldy	WebIndex
    242  fdff
    243  fdff							; Load Image
    244  fdff		       b9 3e f1 	      lda	WebImagePF0,y
    245  fe02		       85 0d		      sta	PF0
    246  fe04		       b9 5a f1 	      lda	WebImagePF1,y
    247  fe07		       85 0e		      sta	PF1
    248  fe09		       b9 76 f1 	      lda	WebImagePF2,y
    249  fe0c		       85 0f		      sta	PF2
    250  fe0e
    251  fe0e		       e6 a0		      inc	WebIndex
    252  fe10
    253  fe10		       4c 31 fe 	      jmp	.game_kernel_line
    254  fe13
    255  fe13				   .game_kernel_missle
    256  fe13
    257  fe13							; Preload half-line
    258  fe13		       a5 84		      lda	Temp+1
    259  fe15
    260  fe15				   .game_kernel_missle_bug_0
    261  fe15							; First Bug
    262  fe15
    263  fe15		       a0 00		      ldy	#%00000000
    264  fe17
    265  fe17							; Top
    266  fe17		       c5 be		      cmp	BugDrawPosTop+0
    267  fe19		       b0 06		      bcs	.game_kernel_missle_bug_0_off
    268  fe1b
    269  fe1b							; Bottom
    270  fe1b		       c5 bc		      cmp	BugDrawPosBottom+0
    271  fe1d		       90 02		      bcc	.game_kernel_missle_bug_0_off
    272  fe1f
    273  fe1f				   .game_kernel_missle_bug_0_on
    274  fe1f		       a0 02		      ldy	#%00000010
    275  fe21
    276  fe21				   .game_kernel_missle_bug_0_off
    277  fe21		       84 1d		      sty	ENAM0
    278  fe23
    279  fe23				   .game_kernel_missle_bug_1
    280  fe23							; Second Bug
    281  fe23
    282  fe23		       a0 00		      ldy	#%00000000
    283  fe25
    284  fe25							; Top
    285  fe25		       c5 bf		      cmp	BugDrawPosTop+1
    286  fe27		       b0 06		      bcs	.game_kernel_missle_bug_1_off
    287  fe29
    288  fe29							; Bottom
    289  fe29		       c5 bd		      cmp	BugDrawPosBottom+1
    290  fe2b		       90 02		      bcc	.game_kernel_missle_bug_1_off
    291  fe2d
    292  fe2d				   .game_kernel_missle_bug_1_on
    293  fe2d		       a0 02		      ldy	#%00000010
    294  fe2f
    295  fe2f				   .game_kernel_missle_bug_1_off
    296  fe2f		       84 1e		      sty	ENAM1
    297  fe31
    298  fe31							;jmp .game_kernel_line_skip
    299  fe31
    300  fe31				   .game_kernel_line
    301  fe31							; Line
    302  fe31
    303  fe31		       24 ae		      bit	LineEnabled
    304  fe33		       10 10		      bpl	.game_kernel_line_skip
    305  fe35
    306  fe35							; Load half-line
    307  fe35		       a5 84		      lda	Temp+1
    308  fe37
    309  fe37		       a0 00		      ldy	#%00000000
    310  fe39
    311  fe39							; Top
    312  fe39		       c5 b4		      cmp	LineDrawPos+1
    313  fe3b		       b0 06		      bcs	.game_kernel_line_set
    314  fe3d
    315  fe3d							; Bottom
    316  fe3d		       c5 b3		      cmp	LineDrawPos+0
    317  fe3f		       90 02		      bcc	.game_kernel_line_set
    318  fe41
    319  fe41		       a0 02		      ldy	#%00000010
    320  fe43				   .game_kernel_line_set
    321  fe43		       84 1f		      sty	ENABL
    322  fe45
    323  fe45				   .game_kernel_line_skip
    324  fe45
    325  fe45							; Next Line
    326  fe45		       ca		      dex
    327  fe46							;sta WSYNC
    328  fe46
    329  fe46				   .game_kernel_sprite
    330  fe46
    331  fe46				   .game_kernel_sprite_spider
    332  fe46							; Spider
    333  fe46
    334  fe46		       a4 a9		      ldy	SpiderIndex
    335  fe48		       30 1a		      bmi	.game_kernel_sprite_spider_load	; At end of sprite
    336  fe4a		       d0 06		      bne	.game_kernel_sprite_spider_draw	; Currently drawing (not zero)
    337  fe4c
    338  fe4c							; Check y position to see if we should start
    339  fe4c		       a5 84		      lda	Temp+1	; Use half scanline
    340  fe4e		       e5 aa		      sbc	SpiderDrawPos
    341  fe50		       10 12		      bpl	.game_kernel_sprite_spider_load
    342  fe52
    343  fe52				   .game_kernel_sprite_spider_draw
    344  fe52		       b1 a3		      lda	(SpiderPtr),y
    345  fe54		       85 ab		      sta	SpiderLine
    346  fe56
    347  fe56							; Increment sprite index
    348  fe56		       e6 a9		      inc	SpiderIndex
    349  fe58
    350  fe58							; See if we're at the end
    351  fe58		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    352  fe5a		       d0 0a		      bne	.game_kernel_sprite_spider_line
    353  fe5c		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    354  fe5e		       84 a9		      sty	SpiderIndex
    355  fe60		       a9 00		      lda	#0
    356  fe62		       85 ab		      sta	SpiderLine
    357  fe64
    358  fe64				   .game_kernel_sprite_spider_load
    359  fe64		       a5 ab		      lda	SpiderLine
    360  fe66				   .game_kernel_sprite_spider_line
    361  fe66		       85 1b		      sta	GRP0
    362  fe68
    363  fe68				   .game_kernel_sprite_swatter
    364  fe68							; Swatter
    365  fe68
    366  fe68							; Check if wait state
    367  fe68		       24 c2		      bit	SwatterState
    368  fe6a		       10 1b		      bpl	.game_kernel_sprite_swatter_load
    369  fe6c
    370  fe6c		       a4 c6		      ldy	SwatterIndex
    371  fe6e		       30 17		      bmi	.game_kernel_sprite_swatter_load	; At end of sprite
    372  fe70		       d0 06		      bne	.game_kernel_sprite_swatter_draw	; Currently drawing (not zero)
    373  fe72
    374  fe72							; Check y position to see if we should start
    375  fe72		       a5 84		      lda	Temp+1	; Use half scanline
    376  fe74		       e5 c7		      sbc	SwatterDrawPos
    377  fe76		       10 0f		      bpl	.game_kernel_sprite_swatter_load
    378  fe78
    379  fe78				   .game_kernel_sprite_swatter_draw
    380  fe78		       b9 c2 f1 	      lda	SwatterSprite,y
    381  fe7b		       85 c8		      sta	SwatterLine
    382  fe7d
    383  fe7d							; Increment index
    384  fe7d		       e6 c6		      inc	SwatterIndex
    385  fe7f
    386  fe7f							; See if we're at the end
    387  fe7f		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    388  fe81		       d0 06		      bne	.game_kernel_sprite_swatter_line
    389  fe83		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    390  fe85		       84 c6		      sty	SwatterIndex
    391  fe87
    392  fe87				   .game_kernel_sprite_swatter_load
    393  fe87		       a5 c8		      lda	SwatterLine
    394  fe89				   .game_kernel_sprite_swatter_line
    395  fe89		       85 1c		      sta	GRP1
    396  fe8b
    397  fe8b		       85 02		      sta	WSYNC
    398  fe8d
    399  fe8d				   .game_kernel_sprite_end
    400  fe8d
    401  fe8d							; New line, decrement half scanline, and increment 3 line counter
    402  fe8d		       c6 84		      dec	Temp+1
    403  fe8f		       c6 85		      dec	Temp+2
    404  fe91		       ca		      dex
    405  fe92		       f0 03		      beq	.game_kernel_clean
    406  fe94		       4c f5 fd 	      jmp	.game_kernel_objects
    407  fe97
    408  fe97				   .game_kernel_clean
    409  fe97
    410  fe97		       85 02		      sta	WSYNC
    411  fe99
    412  fe99		       a9 00		      lda	#0
    413  fe9b		       85 09		      sta	COLUBK
    414  fe9d		       85 08		      sta	COLUPF
    415  fe9f		       85 06		      sta	COLUP0
    416  fea1		       85 07		      sta	COLUP1
    417  fea3		       85 0d		      sta	PF0
    418  fea5		       85 0e		      sta	PF1
    419  fea7		       85 0f		      sta	PF2
    420  fea9		       85 1b		      sta	GRP0
    421  feab		       85 1c		      sta	GRP1
    422  fead		       85 1d		      sta	ENAM0
    423  feaf		       85 1e		      sta	ENAM1
    424  feb1		       85 1f		      sta	ENABL
    425  feb3
    426  feb3		       85 02		      sta	WSYNC
    427  feb5
    428  feb5				   .game_kernel_return
    429  feb5		       60		      rts
    430  feb6
    431  feb6				   GameAudio0
    432  feb6		       0d		      .byte.b	#13	; D
    433  feb7		       ff		      .byte.b	#$FF
    434  feb8		       0f		      .byte.b	#15	; B
    435  feb9		       ff		      .byte.b	#$FF
    436  feba		       0d		      .byte.b	#13	; D
    437  febb		       ff		      .byte.b	#$FF
    438  febc		       0f		      .byte.b	#15	; B
    439  febd		       ff		      .byte.b	#$FF
    440  febe		       0d		      .byte.b	#13	; D
    441  febf		       0d		      .byte.b	#13	; D
    442  fec0		       0f		      .byte.b	#15	; B
    443  fec1		       ff		      .byte.b	#$FF
    444  fec2		       0c		      .byte.b	#12	; D#
    445  fec3		       ff		      .byte.b	#$FF
    446  fec4		       0f		      .byte.b	#15	; B
    447  fec5		       ff		      .byte.b	#$FF
    448  fec6		       0b		      .byte.b	#11	; E
    449  fec7		       ff		      .byte.b	#$FF
    450  fec8		       0e		      .byte.b	#14	; C#
    451  fec9		       ff		      .byte.b	#$FF
    452  feca		       0b		      .byte.b	#11
    453  fecb		       ff		      .byte.b	#$FF
    454  fecc		       0e		      .byte.b	#14
    455  fecd		       ff		      .byte.b	#$FF
    456  fece		       0b		      .byte.b	#11
    457  fecf		       0b		      .byte.b	#11
    458  fed0		       0e		      .byte.b	#14
    459  fed1		       ff		      .byte.b	#$FF
    460  fed2		       0b		      .byte.b	#11
    461  fed3		       ff		      .byte.b	#$FF
    462  fed4		       0e		      .byte.b	#14
    463  fed5		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fed6					      include	"over.asm"
      1  fed6							;================
      2  fed6							; Constants
      3  fed6							;================
      4  fed6
      5  fed6		       00 00	   OVER_BG_COLOR =	#$00
      6  fed6		       00 44	   OVER_FG_COLOR =	#$44
      7  fed6		       00 06	   OVER_FG_BW_COLOR =	#$06
      8  fed6
      9  fed6		       00 07	   OVER_AUDIO_TONE =	7
     10  fed6		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     11  fed6		       00 06	   OVER_AUDIO_LENGTH =	6
     12  fed6		       00 10	   OVER_AUDIO_STEP =	16
     13  fed6
     14  fed6		       00 09	   OVER_IMAGE_SIZE =	9
     15  fed6		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     16  fed6		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     17  fed6		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     18  fed6
     19  fed6				   OverInit
     20  fed6
     21  fed6							; Setup logic and kernel
      0  fed6					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fed6				   .POINTER   SET	VBlankPtr
      2  fed6				   .ADDRESS   SET	OverVerticalBlank
      3  fed6
      4  fed6		       a9 07		      LDA	#<.ADDRESS
      5  fed8		       85 88		      STA	.POINTER
      6  feda		       a9 ff		      LDA	#>.ADDRESS
      7  fedc		       85 89		      STA	.POINTER+1
      8  fede
      0  fede					      SET_POINTER	KernelPtr, OverKernel
      1  fede				   .POINTER   SET	KernelPtr
      2  fede				   .ADDRESS   SET	OverKernel
      3  fede
      4  fede		       a9 63		      LDA	#<.ADDRESS
      5  fee0		       85 8a		      STA	.POINTER
      6  fee2		       a9 ff		      LDA	#>.ADDRESS
      7  fee4		       85 8b		      STA	.POINTER+1
      8  fee6
      0  fee6					      SET_POINTER	OverScanPtr, OverOverScan
      1  fee6				   .POINTER   SET	OverScanPtr
      2  fee6				   .ADDRESS   SET	OverOverScan
      3  fee6
      4  fee6		       a9 21		      LDA	#<.ADDRESS
      5  fee8		       85 8c		      STA	.POINTER
      6  feea		       a9 ff		      LDA	#>.ADDRESS
      7  feec		       85 8d		      STA	.POINTER+1
      8  feee
     25  feee
     26  feee							; Load audio settings
     27  feee		       a9 07		      lda	#OVER_AUDIO_TONE
     28  fef0		       85 15		      sta	AUDC0
     29  fef2							;lda #OVER_AUDIO_VOLUME
     30  fef2							;sta AUDV0
     31  fef2		       a9 00		      lda	#0
     32  fef4		       85 16		      sta	AUDC1
     33  fef6		       85 1a		      sta	AUDV1
     34  fef8
     35  fef8							; Set initial button state
     36  fef8							;lda #0
     37  fef8		       85 91		      sta	InputState
     38  fefa
     39  fefa							; Setup frame counters
     40  fefa		       a9 01		      lda	#1
     41  fefc		       85 8f		      sta	FrameTimer
     42  fefe		       a9 10		      lda	#OVER_AUDIO_STEP
     43  ff00		       85 93		      sta	SampleStep
     44  ff02		       a9 06		      lda	#OVER_AUDIO_LENGTH
     45  ff04		       85 92		      sta	AudioStep
     46  ff06
     47  ff06		       60		      rts
     48  ff07
     49  ff07				   OverVerticalBlank
     50  ff07		       20 4f f6 	      jsr	ScoreUpdate
     51  ff0a
     52  ff0a							; Load Colors
     53  ff0a		       a9 00		      lda	#OVER_BG_COLOR
     54  ff0c		       85 09		      sta	COLUBK
     55  ff0e
     56  ff0e							; Check b/w
     57  ff0e		       ad 82 02 	      lda	SWCHB
     58  ff11					      REPEAT	4
     59  ff11		       4a		      lsr
     58  ff11					      REPEND
     59  ff12		       4a		      lsr
     58  ff12					      REPEND
     59  ff13		       4a		      lsr
     58  ff13					      REPEND
     59  ff14		       4a		      lsr
     60  ff15					      REPEND
     61  ff15		       90 05		      bcc	.over_bw
     62  ff17
     63  ff17				   .over_color
     64  ff17		       a9 44		      lda	#OVER_FG_COLOR
     65  ff19		       85 08		      sta	COLUPF
     66  ff1b
     67  ff1b		       60		      rts
     68  ff1c
     69  ff1c				   .over_bw
     70  ff1c							; Load b/w Colors
     71  ff1c		       a9 06		      lda	#OVER_FG_BW_COLOR
     72  ff1e		       85 08		      sta	COLUPF
     73  ff20
     74  ff20		       60		      rts
     75  ff21
     76  ff21				   OverOverScan
     77  ff21		       20 28 ff 	      jsr	OverAudio
     78  ff24		       20 4e ff 	      jsr	OverState
     79  ff27		       60		      rts
     80  ff28
     81  ff28				   OverAudio
     82  ff28
     83  ff28		       a5 8f		      lda	FrameTimer
     84  ff2a		       d0 21		      bne	.over_audio_return
     85  ff2c
     86  ff2c							; Reset Timer
     87  ff2c					      REPEAT	3
     88  ff2c		       e6 93		      inc	SampleStep
     87  ff2c					      REPEND
     88  ff2e		       e6 93		      inc	SampleStep
     87  ff2e					      REPEND
     88  ff30		       e6 93		      inc	SampleStep
     89  ff32					      REPEND
     90  ff32		       a5 93		      lda	SampleStep
     91  ff34		       85 8f		      sta	FrameTimer
     92  ff36
     93  ff36				   .over_audio_play
     94  ff36
     95  ff36							; Increment melody position
     96  ff36		       a4 92		      ldy	AudioStep
     97  ff38		       f0 0d		      beq	.over_audio_mute_note
     98  ff3a		       c6 92		      dec	AudioStep
     99  ff3c		       88		      dey
    100  ff3d
    101  ff3d				   .over_audio_play_note
    102  ff3d
    103  ff3d							; Melody Line
    104  ff3d		       b9 b5 ff 	      lda	OverAudio0,y
    105  ff40		       85 17		      sta	AUDF0
    106  ff42		       a9 06		      lda	#OVER_AUDIO_VOLUME
    107  ff44		       85 19		      sta	AUDV0
    108  ff46
    109  ff46		       60		      rts
    110  ff47
    111  ff47				   .over_audio_mute_note
    112  ff47		       a9 00		      lda	#0
    113  ff49		       85 17		      sta	AUDF0
    114  ff4b		       85 19		      sta	AUDV0
    115  ff4d
    116  ff4d				   .over_audio_return
    117  ff4d		       60		      rts
    118  ff4e
    119  ff4e				   OverState
    120  ff4e
    121  ff4e							; Check to see if audio has finished
    122  ff4e		       a5 92		      lda	AudioStep
    123  ff50		       d0 10		      bne	.over_state_return
    124  ff52
    125  ff52							; Check if Fire Button on controller 1 is released
    126  ff52		       a5 0c		      lda	INPT4
    127  ff54		       30 05		      bmi	.over_state_check
    128  ff56
    129  ff56				   .over_state_on
    130  ff56		       a9 01		      lda	#1
    131  ff58		       85 91		      sta	InputState
    132  ff5a		       60		      rts
    133  ff5b
    134  ff5b				   .over_state_check
    135  ff5b		       a5 91		      lda	InputState
    136  ff5d		       f0 03		      beq	.over_state_return
    137  ff5f
    138  ff5f				   .over_state_next
    139  ff5f							; Button is released, load title screen
    140  ff5f		       20 6a f3 	      jsr	TitleInit
    141  ff62
    142  ff62				   .over_state_return
    143  ff62		       60		      rts
    144  ff63
    145  ff63				   OverKernel
    146  ff63
    147  ff63							; Turn on display
    148  ff63		       a9 00		      lda	#0
    149  ff65		       85 01		      sta	VBLANK
    150  ff67
    151  ff67				   .over_kernel_score
    152  ff67
    153  ff67							; Draw Score on top first (no update)
    154  ff67		       20 c1 f6 	      jsr	ScoreDraw
    155  ff6a
    156  ff6a				   .over_kernel_init
    157  ff6a							; Playfield Control
    158  ff6a		       a5 80		      lda	CtrlPf
    159  ff6c		       29 fd		      and	#%11111101	; Use playfield foreground color
    160  ff6e		       09 01		      ora	#%00000001	; Set mirroring
    161  ff70		       85 80		      sta	CtrlPf
    162  ff72		       85 0a		      sta	CTRLPF
    163  ff74
    164  ff74				   .over_kernel_top_padding
    165  ff74							; Top Padding
    166  ff74		       20 93 ff 	      jsr	OverPadding
    167  ff77
    168  ff77				   .over_kernel_image
    169  ff77		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    170  ff79
    171  ff79				   .over_kernel_image_next
    172  ff79		       bd ac ff 	      lda	OverImagePF2,x
    173  ff7c		       85 0f		      sta	PF2
    174  ff7e		       bd a3 ff 	      lda	OverImagePF1,x
    175  ff81		       85 0e		      sta	PF1
    176  ff83							;    lda OverImagePF0,x
    177  ff83							;    sta PF0
    178  ff83
    179  ff83		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    180  ff85				   .over_kernel_image_loop
    181  ff85		       85 02		      sta	WSYNC
    182  ff87		       88		      dey
    183  ff88		       d0 fb		      bne	.over_kernel_image_loop
    184  ff8a
    185  ff8a		       ca		      dex
    186  ff8b		       10 ec		      bpl	.over_kernel_image_next
    187  ff8d
    188  ff8d				   .over_kernel_bottom_padding
    189  ff8d							; Bottom Padding
    190  ff8d		       20 93 ff 	      jsr	OverPadding
    191  ff90
    192  ff90				   .over_kernel_return
    193  ff90		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    194  ff92		       60		      rts
    195  ff93
    196  ff93				   OverPadding
    197  ff93		       a9 00		      lda	#0
    198  ff95		       85 0d		      sta	PF0
    199  ff97		       85 0e		      sta	PF1
    200  ff99		       85 0f		      sta	PF2
    201  ff9b
    202  ff9b		       a2 32		      ldx	#OVER_IMAGE_PADDING
    203  ff9d				   .over_padding_loop
    204  ff9d		       85 02		      sta	WSYNC
    205  ff9f		       ca		      dex
    206  ffa0		       d0 fb		      bne	.over_padding_loop
    207  ffa2
    208  ffa2		       60		      rts
    209  ffa3
    210  ffa3				   OverAssets
    211  ffa3
    212  ffa3							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ffa3					      include	"over_image.asm"
      1  ffa3							;OverImagePF0:
      2  ffa3							;    .BYTE %00000000
      3  ffa3							;    .BYTE %00000000
      4  ffa3							;    .BYTE %00000000
      5  ffa3							;    .BYTE %00000000
      6  ffa3							;    .BYTE %00000000
      7  ffa3							;    .BYTE %00000000
      8  ffa3							;    .BYTE %00000000
      9  ffa3							;    .BYTE %00000000
     10  ffa3							;    .BYTE %00000000
     11  ffa3
     12  ffa3				   OverImagePF1
     13  ffa3		       0c		      .BYTE.b	%00001100
     14  ffa4		       13		      .BYTE.b	%00010011
     15  ffa5		       20		      .BYTE.b	%00100000
     16  ffa6		       23		      .BYTE.b	%00100011
     17  ffa7		       24		      .BYTE.b	%00100100
     18  ffa8		       24		      .BYTE.b	%00100100
     19  ffa9		       12		      .BYTE.b	%00010010
     20  ffaa		       10		      .BYTE.b	%00010000
     21  ffab		       08		      .BYTE.b	%00001000
     22  ffac
     23  ffac				   OverImagePF2
     24  ffac		       e0		      .BYTE.b	%11100000
     25  ffad		       18		      .BYTE.b	%00011000
     26  ffae		       05		      .BYTE.b	%00000101
     27  ffaf		       52		      .BYTE.b	%01010010
     28  ffb0		       23		      .BYTE.b	%00100011
     29  ffb1		       52		      .BYTE.b	%01010010
     30  ffb2		       04		      .BYTE.b	%00000100
     31  ffb3		       18		      .BYTE.b	%00011000
     32  ffb4		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    214  ffb5
    215  ffb5				   OverAudio0
    216  ffb5
    217  ffb5		       1a		      .BYTE.b	#26	; D1
    218  ffb6		       1a		      .BYTE.b	#26
    219  ffb7		       16		      .BYTE.b	#22	; F1
    220  ffb8		       11		      .BYTE.b	#17	; A1
    221  ffb9		       0d		      .BYTE.b	#13	; D2
    222  ffba		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    329  ffbb
    330  ffbb							;================
    331  ffbb							; End of cart
    332  ffbb							;================
    333  ffbb
    334  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    335  fffa
    336  fffa				   InterruptVectors
    337  fffa
    338  fffa		       06 f2		      .word.w	InitSystem	; NMI
    339  fffc		       06 f2		      .word.w	InitSystem	; RESET
    340  fffe		       06 f2		      .word.w	InitSystem	; IRQ
    341  10000
    342  10000					       END
