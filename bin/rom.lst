------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00b6 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00	   FrameTimer ds	1
     70 U008f
     71 U008f		       00	   AudioStep  ds	1
     72 U0090
     73 U0090		       00	   SampleStep ds	1
     74 U0091
     75 U0091							; Score
     76 U0091
     77 U0091		       00 00	   ScoreValue ds	2
     78 U0093		       00 00	   ScoreDigitOnes ds	2
     79 U0095		       00 00	   ScoreDigitTens ds	2
     80 U0097		       00 00	   ScoreGfx   ds	2
     81 U0099
     82 U0099							; Web
     83 U0099
     84 U0099		       00	   WebIndex   ds	1
     85 U009a
     86 U009a							; Spider
     87 U009a
     88 U009a		       00 00	   SpiderPtr  ds	2
     89 U009c		       00 00	   SpiderPos  ds	2
     90 U009e		       00	   SpiderCtrl ds	1
     91 U009f
     92 U009f		       00	   SpiderIndex ds	1
     93 U00a0		       00	   SpiderDrawPos ds	1
     94 U00a1
     95 U00a1							; Line
     96 U00a1
     97 U00a1		       00	   LineEnabled ds	1
     98 U00a2		       00 00	   LinePos    ds	2
     99 U00a4		       00 00	   LineVelocity ds	2
    100 U00a6		       00 00	   LineStartPos ds	2
    101 U00a8		       00 00	   LineDrawPos ds	2
    102 U00aa
    103 U00aa							; Bug
    104 U00aa
    105 U00aa		       00 00	   BugStunned ds	2
    106 U00ac		       00 00	   BugPosX    ds	2
    107 U00ae		       00 00	   BugPosY    ds	2
    108 U00b0		       00 00	   BugColor   ds	2
    109 U00b2
    110 U00b2		       00 00	   BugDrawPosBottom ds	2
    111 U00b4		       00 00	   BugDrawPosTop ds	2
    112 U00b6
    113  10000 ????				       SEG
    114  f000					      org	$F000	; Start of cart area
    115  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    117  f021
    118  f021				   InitSystem
    119  f021
    120  f021				   .init_clean
    121  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    123  f02c
    124  f02c				   .init_tia
    125  f02c							; Define default TIA register values
    126  f02c
    127  f02c							; Initialize copies
    128  f02c		       a9 00		      lda	#0
    129  f02e		       85 80		      sta	CtrlPf
    130  f030		       85 81		      sta	NuSiz0
    131  f032		       85 82		      sta	NuSiz1
    132  f034
    133  f034							; Set background color
    134  f034		       a9 00		      lda	#$00	; Black
    135  f036		       85 09		      sta	COLUBK
    136  f038
    137  f038							; Set the playfield and player color
    138  f038		       a9 0e		      lda	#$0E	; White
    139  f03a		       85 08		      sta	COLUPF
    140  f03c		       85 06		      sta	COLUP0
    141  f03e		       85 07		      sta	COLUP1
    142  f040
    143  f040							; Playfield Control
    144  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    145  f042		       85 80		      sta	CtrlPf
    146  f044		       85 0a		      sta	CTRLPF
    147  f046
    148  f046							; Disable Game Elements
    149  f046		       a9 00		      lda	#$00
    150  f048		       85 1f		      sta	ENABL	; Turn off ball
    151  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    152  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    153  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    154  f050		       85 1c		      sta	GRP1	; Turn off player 2
    155  f052
    156  f052							; Empty playfield
    157  f052		       a9 00		      lda	#%00000000
    158  f054		       85 0d		      sta	PF0
    159  f056		       85 0e		      sta	PF1
    160  f058		       85 0f		      sta	PF2
    161  f05a
    162  f05a				   .init_seed
    163  f05a							; Seed the random number generator
    164  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    165  f05d		       85 85		      sta	Rand8	; Use as seed
    166  f05f		       49 ff		      eor	#$FF	; Flip bits
    167  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    168  f063
    169  f063				   .init_game
    170  f063
    171  f063		       20 c9 f0 	      jsr	LogoInit
    172  f066							;    jsr GameInit   ; Used for testing
    173  f066
    174  f066							;=======================================
    175  f066							; Game Kernel
    176  f066							;=======================================
    177  f066
    178  f066				   Main
    179  f066
    180  f066		       20 75 f0 	      jsr	VerticalSync
    181  f069		       20 8c f0 	      jsr	VerticalBlank
    182  f06c		       20 9f f0 	      jsr	Kernel
    183  f06f		       20 a6 f0 	      jsr	OverScan
    184  f072		       4c 66 f0 	      jmp	Main
    185  f075
    186  f075				   VerticalSync
    187  f075
    188  f075		       a9 00		      lda	#0
    189  f077		       85 01		      sta	VBLANK
    190  f079
    191  f079							; Turn on Vertical Sync signal and setup timer
    192  f079		       a9 02		      lda	#2
    193  f07b		       85 00		      sta	VSYNC
    194  f07d
    195  f07d							; Increment frame count and reduce frame counter
    196  f07d		       e6 8d		      inc	Frame
    197  f07f		       c6 8e		      dec	FrameTimer
    198  f081
    199  f081							; VSYNCH signal scanlines
    200  f081					      REPEAT	#KERNEL_VSYNC
    201  f081		       85 02		      sta	WSYNC
    200  f081					      REPEND
    201  f083		       85 02		      sta	WSYNC
    200  f083					      REPEND
    201  f085		       85 02		      sta	WSYNC
    202  f087					      REPEND
    203  f087
    204  f087							; Turn off Vertical Sync signal
    205  f087		       a9 00		      lda	#0
    206  f089		       85 00		      sta	VSYNC
    207  f08b
    208  f08b				   .vsync_return
    209  f08b		       60		      rts
    210  f08c
    211  f08c				   VerticalBlank
    212  f08c							; Setup Timer
    213  f08c		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    214  f08e		       8d 96 02 	      sta	TIM64T
    215  f091
    216  f091				   .vblank_logic
    217  f091							; Perform Game Logic
    218  f091							;jsr (VBlankPtr)
    219  f091		       20 9c f0 	      jsr	.vblank_logic_call_ptr
    220  f094
    221  f094				   .vblank_loop
    222  f094							; WSYNC until Timer is complete
    223  f094		       85 02		      sta	WSYNC
    224  f096		       ad 84 02 	      lda	INTIM
    225  f099		       d0 f9		      bne	.vblank_loop
    226  f09b
    227  f09b				   .vblank_return
    228  f09b		       60		      rts
    229  f09c
    230  f09c				   .vblank_logic_call_ptr
    231  f09c		       6c 87 00 	      jmp	(VBlankPtr)
    232  f09f
    233  f09f				   Kernel
    234  f09f
    235  f09f							; Perform Selected Kernel
    236  f09f							;jsr (KernelPtr)
    237  f09f		       20 a3 f0 	      jsr	.kernel_call_ptr
    238  f0a2		       60		      rts
    239  f0a3
    240  f0a3				   .kernel_call_ptr
    241  f0a3		       6c 89 00 	      jmp	(KernelPtr)
    242  f0a6
    243  f0a6				   OverScan
    244  f0a6
    245  f0a6							; End of screen, enter blanking
    246  f0a6		       a9 42		      lda	#%01000010
    247  f0a8		       85 01		      sta	VBLANK
    248  f0aa
    249  f0aa							; Setup Timer
    250  f0aa		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    251  f0ac		       8d 96 02 	      sta	TIM64T
    252  f0af
    253  f0af				   .overscan_reset
    254  f0af							; Check for reset switch
    255  f0af		       ad 82 02 	      lda	SWCHB
    256  f0b2		       4a		      lsr		; Push D0 to carry (C)
    257  f0b3		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    258  f0b5
    259  f0b5							; Perform reset
    260  f0b5		       20 c9 f0 	      jsr	LogoInit	; No need for logic
    261  f0b8		       4c be f0 	      jmp	.overscan_loop
    262  f0bb
    263  f0bb				   .overscan_logic
    264  f0bb							; Perform OverScan Logic
    265  f0bb							;jsr (OverScanPtr)
    266  f0bb		       20 c6 f0 	      jsr	.overscan_logic_call_ptr
    267  f0be
    268  f0be				   .overscan_loop
    269  f0be							; WSYNC until Timer is complete
    270  f0be		       85 02		      sta	WSYNC
    271  f0c0		       ad 84 02 	      lda	INTIM
    272  f0c3		       d0 f9		      bne	.overscan_loop
    273  f0c5
    274  f0c5				   .overscan_return
    275  f0c5		       60		      rts
    276  f0c6
    277  f0c6				   .overscan_logic_call_ptr
    278  f0c6		       6c 8b 00 	      jmp	(OverScanPtr)
    279  f0c9
    280  f0c9							;================
    281  f0c9							; State Code
    282  f0c9							;================
    283  f0c9
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0c9					      include	"logo.asm"
      1  f0c9							;================
      2  f0c9							; Constants
      3  f0c9							;================
      4  f0c9
      5  f0c9		       00 b4	   LOGO_FRAMES =	180
      6  f0c9
      7  f0c9		       00 a2	   LOGO_BG_COLOR =	#$A2
      8  f0c9		       00 5e	   LOGO_FG_COLOR =	#$5E
      9  f0c9
     10  f0c9		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0c9		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0c9		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0c9		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0c9		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0c9		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0c9
     17  f0c9				   LogoInit
     18  f0c9
     19  f0c9							; Setup logic and kernel
      0  f0c9					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0c9				   .POINTER   SET	VBlankPtr
      2  f0c9				   .ADDRESS   SET	LogoVerticalBlank
      3  f0c9
      4  f0c9		       a9 10		      LDA	#<.ADDRESS
      5  f0cb		       85 87		      STA	.POINTER
      6  f0cd		       a9 f1		      LDA	#>.ADDRESS
      7  f0cf		       85 88		      STA	.POINTER+1
      8  f0d1
      0  f0d1					      SET_POINTER	KernelPtr, LogoKernel
      1  f0d1				   .POINTER   SET	KernelPtr
      2  f0d1				   .ADDRESS   SET	LogoKernel
      3  f0d1
      4  f0d1		       a9 54		      LDA	#<.ADDRESS
      5  f0d3		       85 89		      STA	.POINTER
      6  f0d5		       a9 f1		      LDA	#>.ADDRESS
      7  f0d7		       85 8a		      STA	.POINTER+1
      8  f0d9
      0  f0d9					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0d9				   .POINTER   SET	OverScanPtr
      2  f0d9				   .ADDRESS   SET	LogoOverScan
      3  f0d9
      4  f0d9		       a9 11		      LDA	#<.ADDRESS
      5  f0db		       85 8b		      STA	.POINTER
      6  f0dd		       a9 f1		      LDA	#>.ADDRESS
      7  f0df		       85 8c		      STA	.POINTER+1
      8  f0e1
     23  f0e1
     24  f0e1							; Load Colors
     25  f0e1		       a9 a2		      lda	#LOGO_BG_COLOR
     26  f0e3		       85 09		      sta	COLUBK
     27  f0e5		       a9 5e		      lda	#LOGO_FG_COLOR
     28  f0e7		       85 08		      sta	COLUPF
     29  f0e9
     30  f0e9							; Load audio settings
     31  f0e9		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     32  f0eb		       85 15		      sta	AUDC0
     33  f0ed		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     34  f0ef		       85 19		      sta	AUDV0
     35  f0f1		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     36  f0f3		       85 16		      sta	AUDC1
     37  f0f5		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     38  f0f7		       85 1a		      sta	AUDV1
     39  f0f9		       a9 00		      lda	#0
     40  f0fb		       85 8f		      sta	AudioStep
     41  f0fd
     42  f0fd							; Play first note
     43  f0fd		       ad 30 f2 	      lda	LogoAudio0,AudioStep
     44  f100		       85 17		      sta	AUDF0
     45  f102		       ad 3c f2 	      lda	LogoAudio1,AudioStep
     46  f105		       85 18		      sta	AUDF1
     47  f107
     48  f107							; Setup frame counters
     49  f107		       a9 00		      lda	#0
     50  f109		       85 8d		      sta	Frame
     51  f10b		       a9 b4		      lda	#LOGO_FRAMES
     52  f10d		       85 8e		      sta	FrameTimer
     53  f10f
     54  f10f							; Setup Image Animation
     55  f10f							;lda #KERNEL_IMAGE_SIZE
     56  f10f							;sta ImageVisible
     57  f10f
     58  f10f		       60		      rts
     59  f110
     60  f110				   LogoVerticalBlank
     61  f110							;jsr LogoAnimation
     62  f110		       60		      rts
     63  f111
     64  f111				   LogoOverScan
     65  f111		       20 1f f1 	      jsr	LogoAudio
     66  f114		       20 4a f1 	      jsr	LogoState
     67  f117		       60		      rts
     68  f118
     69  f118				   LogoAnimation
     70  f118		       a5 8d		      lda	Frame
     71  f11a		       29 03		      and	#%00000011	; Every 4 when bits are 00
     72  f11c		       d0 00		      bne	.logo_animation_return
     73  f11e
     74  f11e							;ldx ImageVisible
     75  f11e							;cpx #0
     76  f11e							;beq .logo_animation_return
     77  f11e
     78  f11e							; Add another visible line
     79  f11e							;dex
     80  f11e							;stx ImageVisible
     81  f11e
     82  f11e				   .logo_animation_return
     83  f11e		       60		      rts
     84  f11f
     85  f11f				   LogoAudio
     86  f11f
     87  f11f		       a5 8d		      lda	Frame
     88  f121		       29 07		      and	#%00000111	; Every 8 when bits are 000
     89  f123		       d0 24		      bne	.logo_audio_return
     90  f125
     91  f125				   .logo_audio_play
     92  f125
     93  f125							; Check if we're at the end of the melody
     94  f125		       a4 8f		      ldy	AudioStep
     95  f127		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
     96  f129		       f0 10		      beq	.logo_audio_mute
     97  f12b
     98  f12b				   .logo_audio_play_note
     99  f12b							; Increment audio position
    100  f12b		       c8		      iny
    101  f12c		       84 8f		      sty	AudioStep
    102  f12e
    103  f12e							; Logo note and play
    104  f12e		       b9 30 f2 	      lda	LogoAudio0,y
    105  f131		       85 17		      sta	AUDF0
    106  f133		       b9 3c f2 	      lda	LogoAudio1,y
    107  f136		       85 18		      sta	AUDF1
    108  f138		       4c 49 f1 	      jmp	.logo_audio_mute_skip
    109  f13b
    110  f13b				   .logo_audio_mute
    111  f13b
    112  f13b							; Mute audio
    113  f13b		       a9 00		      lda	#0
    114  f13d		       85 15		      sta	AUDC0
    115  f13f		       85 19		      sta	AUDV0
    116  f141		       85 17		      sta	AUDF0
    117  f143		       85 16		      sta	AUDC1
    118  f145		       85 1a		      sta	AUDV1
    119  f147		       85 18		      sta	AUDF1
    120  f149
    121  f149				   .logo_audio_mute_skip
    122  f149				   .logo_audio_return
    123  f149		       60		      rts
    124  f14a
    125  f14a				   LogoState
    126  f14a		       a5 8e		      lda	FrameTimer
    127  f14c		       c9 00		      cmp	#0
    128  f14e		       d0 03		      bne	.logo_state_return
    129  f150
    130  f150		       20 48 f2 	      jsr	TitleInit
    131  f153
    132  f153				   .logo_state_return
    133  f153		       60		      rts
    134  f154
    135  f154				   LogoKernel
    136  f154
    137  f154							; Playfield Control
    138  f154		       a5 80		      lda	CtrlPf
    139  f156		       29 fe		      and	#%11111110	; No mirroring
    140  f158		       85 80		      sta	CtrlPf
    141  f15a		       85 0a		      sta	CTRLPF
    142  f15c
    143  f15c							; Start Counters
    144  f15c		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    145  f15e		       a0 00		      ldy	#0	; Image Counter
    146  f160
    147  f160							; Turn on display
    148  f160		       a9 00		      lda	#0
    149  f162		       85 01		      sta	VBLANK
    150  f164
    151  f164		       85 02		      sta	WSYNC
    152  f166
    153  f166				   .logo_kernel_image
    154  f166
    155  f166							; 76 machine cycles per scanline
    156  f166		       85 02		      sta	WSYNC
    157  f168
    158  f168				   .logo_kernel_image_load		; 66 cycles
    159  f168
    160  f168							; First half of image
    161  f168		       b9 a0 f1 	      lda	LogoImage,y	; 5
    162  f16b		       85 0d		      sta	PF0	; 4
    163  f16d		       b9 a1 f1 	      lda	LogoImage+1,y	; 5
    164  f170		       85 0e		      sta	PF1	; 4
    165  f172		       b9 a2 f1 	      lda	LogoImage+2,y	; 5
    166  f175		       85 0f		      sta	PF2	; 4
    167  f177
      0  f177					      sleep	6
      1  f177				   .CYCLES    SET	6
      2  f177
      3  f177				  -	      IF	.CYCLES < 2
      4  f177				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f177				  -	      ERR
      6  f177					      ENDIF
      7  f177
      8  f177				  -	      IF	.CYCLES & 1
      9  f177				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f177				  -	      nop	0
     11  f177				  -	      ELSE
     12  f177				  -	      bit	VSYNC
     13  f177				  -	      ENDIF
     14  f177				  -.CYCLES    SET	.CYCLES - 3
     15  f177					      ENDIF
     16  f177
     17  f177					      REPEAT	.CYCLES / 2
     18  f177		       ea		      nop
     17  f177					      REPEND
     18  f178		       ea		      nop
     17  f178					      REPEND
     18  f179		       ea		      nop
     19  f17a					      REPEND
    169  f17a
    170  f17a							; Second half of image
    171  f17a		       b9 a3 f1 	      lda	LogoImage+3,y	; 5
    172  f17d		       85 0d		      sta	PF0	; 4
    173  f17f		       b9 a4 f1 	      lda	LogoImage+4,y	; 5
    174  f182		       85 0e		      sta	PF1	; 4
    175  f184		       b9 a5 f1 	      lda	LogoImage+5,y	; 5
    176  f187		       85 0f		      sta	PF2	; 4
    177  f189
    178  f189				   .logo_kernel_image_index		; 4 cycles
    179  f189
    180  f189		       ca		      dex		; 2
    181  f18a		       d0 da		      bne	.logo_kernel_image	; 2
    182  f18c
    183  f18c				   .logo_kernel_image_index_next		; 6 cycles
    184  f18c
    185  f18c							; Restore scanline counter
    186  f18c		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    187  f18e
    188  f18e		       98		      tya		; 2
    189  f18f		       18		      clc		; 2
    190  f190		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    191  f192		       a8		      tay		; 2
    192  f193		       c0 90		      cpy	#KERNEL_IMAGE_SIZE*KERNEL_IMAGE_FULL_DATA
    193  f195		       d0 cf		      bne	.logo_kernel_image	; 2
    194  f197
    195  f197				   .logo_kernel_image_clean
    196  f197
    197  f197							; Clear out playfield
    198  f197		       a9 00		      lda	#0
    199  f199		       85 0d		      sta	PF0
    200  f19b		       85 0e		      sta	PF1
    201  f19d		       85 0f		      sta	PF2
    202  f19f
    203  f19f				   .logo_kernel_image_return
    204  f19f		       60		      rts
    205  f1a0
    206  f1a0				   LogoAssets
    207  f1a0
    208  f1a0							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f1a0					      include	"logo_image.asm"
      1  f1a0				   LogoImage
      2  f1a0
      3  f1a0		       00		      .BYTE.b	%00000000
      4  f1a1		       00		      .BYTE.b	%00000000
      5  f1a2		       00		      .BYTE.b	%00000000
      6  f1a3		       00		      .BYTE.b	%00000000
      7  f1a4		       00		      .BYTE.b	%00000000
      8  f1a5		       00		      .BYTE.b	%00000000
      9  f1a6
     10  f1a6		       00		      .BYTE.b	%00000000
     11  f1a7		       00		      .BYTE.b	%00000000
     12  f1a8		       00		      .BYTE.b	%00000000
     13  f1a9		       00		      .BYTE.b	%00000000
     14  f1aa		       00		      .BYTE.b	%00000000
     15  f1ab		       00		      .BYTE.b	%00000000
     16  f1ac
     17  f1ac		       00		      .BYTE.b	%00000000
     18  f1ad		       00		      .BYTE.b	%00000000
     19  f1ae		       00		      .BYTE.b	%00000000
     20  f1af		       00		      .BYTE.b	%00000000
     21  f1b0		       00		      .BYTE.b	%00000000
     22  f1b1		       00		      .BYTE.b	%00000000
     23  f1b2
     24  f1b2		       00		      .BYTE.b	%00000000
     25  f1b3		       00		      .BYTE.b	%00000000
     26  f1b4		       00		      .BYTE.b	%00000000
     27  f1b5		       00		      .BYTE.b	%00000000
     28  f1b6		       00		      .BYTE.b	%00000000
     29  f1b7		       00		      .BYTE.b	%00000000
     30  f1b8
     31  f1b8		       00		      .BYTE.b	%00000000
     32  f1b9		       00		      .BYTE.b	%00000000
     33  f1ba		       00		      .BYTE.b	%00000000
     34  f1bb		       00		      .BYTE.b	%00000000
     35  f1bc		       00		      .BYTE.b	%00000000
     36  f1bd		       00		      .BYTE.b	%00000000
     37  f1be
     38  f1be		       00		      .BYTE.b	%00000000
     39  f1bf		       00		      .BYTE.b	%00000000
     40  f1c0		       00		      .BYTE.b	%00000000
     41  f1c1		       00		      .BYTE.b	%00000000
     42  f1c2		       00		      .BYTE.b	%00000000
     43  f1c3		       00		      .BYTE.b	%00000000
     44  f1c4
     45  f1c4		       00		      .BYTE.b	%00000000
     46  f1c5		       00		      .BYTE.b	%00000000
     47  f1c6		       00		      .BYTE.b	%00000000
     48  f1c7		       00		      .BYTE.b	%00000000
     49  f1c8		       00		      .BYTE.b	%00000000
     50  f1c9		       00		      .BYTE.b	%00000000
     51  f1ca
     52  f1ca		       00		      .BYTE.b	%00000000
     53  f1cb		       00		      .BYTE.b	%00000000
     54  f1cc		       8c		      .BYTE.b	%10001100
     55  f1cd		       c0		      .BYTE.b	%11000000
     56  f1ce		       00		      .BYTE.b	%00000000
     57  f1cf		       00		      .BYTE.b	%00000000
     58  f1d0
     59  f1d0		       00		      .BYTE.b	%00000000
     60  f1d1		       00		      .BYTE.b	%00000000
     61  f1d2		       54		      .BYTE.b	%01010100
     62  f1d3		       50		      .BYTE.b	%01010000
     63  f1d4		       80		      .BYTE.b	%10000000
     64  f1d5		       00		      .BYTE.b	%00000000
     65  f1d6
     66  f1d6		       00		      .BYTE.b	%00000000
     67  f1d7		       00		      .BYTE.b	%00000000
     68  f1d8		       54		      .BYTE.b	%01010100
     69  f1d9		       40		      .BYTE.b	%01000000
     70  f1da		       80		      .BYTE.b	%10000000
     71  f1db		       00		      .BYTE.b	%00000000
     72  f1dc
     73  f1dc		       00		      .BYTE.b	%00000000
     74  f1dd		       00		      .BYTE.b	%00000000
     75  f1de		       54		      .BYTE.b	%01010100
     76  f1df		       50		      .BYTE.b	%01010000
     77  f1e0		       80		      .BYTE.b	%10000000
     78  f1e1		       00		      .BYTE.b	%00000000
     79  f1e2
     80  f1e2		       00		      .BYTE.b	%00000000
     81  f1e3		       00		      .BYTE.b	%00000000
     82  f1e4		       8c		      .BYTE.b	%10001100
     83  f1e5		       c0		      .BYTE.b	%11000000
     84  f1e6		       00		      .BYTE.b	%00000000
     85  f1e7		       00		      .BYTE.b	%00000000
     86  f1e8
     87  f1e8		       00		      .BYTE.b	%00000000
     88  f1e9		       00		      .BYTE.b	%00000000
     89  f1ea		       00		      .BYTE.b	%00000000
     90  f1eb		       00		      .BYTE.b	%00000000
     91  f1ec		       00		      .BYTE.b	%00000000
     92  f1ed		       00		      .BYTE.b	%00000000
     93  f1ee
     94  f1ee		       00		      .BYTE.b	%00000000
     95  f1ef		       00		      .BYTE.b	%00000000
     96  f1f0		       10		      .BYTE.b	%00010000
     97  f1f1		       10		      .BYTE.b	%00010000
     98  f1f2		       80		      .BYTE.b	%10000000
     99  f1f3		       00		      .BYTE.b	%00000000
    100  f1f4
    101  f1f4		       00		      .BYTE.b	%00000000
    102  f1f5		       00		      .BYTE.b	%00000000
    103  f1f6		       a8		      .BYTE.b	%10101000
    104  f1f7		       a0		      .BYTE.b	%10100000
    105  f1f8		       00		      .BYTE.b	%00000000
    106  f1f9		       00		      .BYTE.b	%00000000
    107  f1fa
    108  f1fa		       00		      .BYTE.b	%00000000
    109  f1fb		       00		      .BYTE.b	%00000000
    110  f1fc		       44		      .BYTE.b	%01000100
    111  f1fd		       40		      .BYTE.b	%01000000
    112  f1fe		       00		      .BYTE.b	%00000000
    113  f1ff		       00		      .BYTE.b	%00000000
    114  f200
    115  f200		       00		      .BYTE.b	%00000000
    116  f201		       00		      .BYTE.b	%00000000
    117  f202		       00		      .BYTE.b	%00000000
    118  f203		       00		      .BYTE.b	%00000000
    119  f204		       00		      .BYTE.b	%00000000
    120  f205		       00		      .BYTE.b	%00000000
    121  f206
    122  f206		       00		      .BYTE.b	%00000000
    123  f207		       00		      .BYTE.b	%00000000
    124  f208		       00		      .BYTE.b	%00000000
    125  f209		       00		      .BYTE.b	%00000000
    126  f20a		       00		      .BYTE.b	%00000000
    127  f20b		       00		      .BYTE.b	%00000000
    128  f20c
    129  f20c		       00		      .BYTE.b	%00000000
    130  f20d		       00		      .BYTE.b	%00000000
    131  f20e		       00		      .BYTE.b	%00000000
    132  f20f		       00		      .BYTE.b	%00000000
    133  f210		       00		      .BYTE.b	%00000000
    134  f211		       00		      .BYTE.b	%00000000
    135  f212
    136  f212		       00		      .BYTE.b	%00000000
    137  f213		       00		      .BYTE.b	%00000000
    138  f214		       00		      .BYTE.b	%00000000
    139  f215		       00		      .BYTE.b	%00000000
    140  f216		       00		      .BYTE.b	%00000000
    141  f217		       00		      .BYTE.b	%00000000
    142  f218
    143  f218		       00		      .BYTE.b	%00000000
    144  f219		       00		      .BYTE.b	%00000000
    145  f21a		       00		      .BYTE.b	%00000000
    146  f21b		       00		      .BYTE.b	%00000000
    147  f21c		       00		      .BYTE.b	%00000000
    148  f21d		       00		      .BYTE.b	%00000000
    149  f21e
    150  f21e		       00		      .BYTE.b	%00000000
    151  f21f		       00		      .BYTE.b	%00000000
    152  f220		       00		      .BYTE.b	%00000000
    153  f221		       00		      .BYTE.b	%00000000
    154  f222		       00		      .BYTE.b	%00000000
    155  f223		       00		      .BYTE.b	%00000000
    156  f224
    157  f224		       00		      .BYTE.b	%00000000
    158  f225		       00		      .BYTE.b	%00000000
    159  f226		       00		      .BYTE.b	%00000000
    160  f227		       00		      .BYTE.b	%00000000
    161  f228		       00		      .BYTE.b	%00000000
    162  f229		       00		      .BYTE.b	%00000000
    163  f22a
    164  f22a		       00		      .BYTE.b	%00000000
    165  f22b		       00		      .BYTE.b	%00000000
    166  f22c		       00		      .BYTE.b	%00000000
    167  f22d		       00		      .BYTE.b	%00000000
    168  f22e		       00		      .BYTE.b	%00000000
    169  f22f		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    210  f230
    211  f230				   LogoAudio0
    212  f230
    213  f230		       1d		      .BYTE.b	#29	; C
    214  f231		       17		      .BYTE.b	#23	; E
    215  f232		       13		      .BYTE.b	#19	; G
    216  f233		       0f		      .BYTE.b	#15	; A
    217  f234		       17		      .BYTE.b	#23	; E
    218  f235		       13		      .BYTE.b	#19	; G
    219  f236		       0f		      .BYTE.b	#15	; B
    220  f237		       0e		      .BYTE.b	#14	; C
    221  f238		       0b		      .BYTE.b	#11	; E
    222  f239		       0b		      .BYTE.b	#11
    223  f23a		       0b		      .BYTE.b	#11
    224  f23b		       0b		      .BYTE.b	#11
    225  f23c
    226  f23c				   LogoAudio1
    227  f23c
    228  f23c		       1f		      .BYTE.b	#31	; C
    229  f23d		       1f		      .BYTE.b	#31
    230  f23e		       1f		      .BYTE.b	#31
    231  f23f		       1f		      .BYTE.b	#31
    232  f240		       19		      .BYTE.b	#25	; E
    233  f241		       19		      .BYTE.b	#25
    234  f242		       19		      .BYTE.b	#25
    235  f243		       19		      .BYTE.b	#25
    236  f244		       14		      .BYTE.b	#20	; G
    237  f245		       14		      .BYTE.b	#20
    238  f246		       14		      .BYTE.b	#20
    239  f247		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f248					      include	"title.asm"
      1  f248							;================
      2  f248							; Constants
      3  f248							;================
      4  f248
      5  f248		       00 08	   TITLE_LINE_SIZE =	8
      6  f248		       00 04	   TITLE_DATA_SIZE =	%00000100
      7  f248		       00 01	   TITLE_BORDER =	1
      8  f248		       00 04	   TITLE_PAD  =	4
      9  f248		       00 06	   TITLE_IMAGE =	6
     10  f248		       00 02	   TITLE_GAP  =	2
     11  f248
     12  f248		       00 00	   TITLE_BG_COLOR =	#$00
     13  f248		       00 0e	   TITLE_FG_COLOR =	#$0E
     14  f248
     15  f248		       00 04	   TITLE_AUDIO_0_TONE =	4
     16  f248		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     17  f248		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     18  f248		       00 10	   TITLE_AUDIO_LENGTH =	16
     19  f248		       00 09	   TITLE_AUDIO_STEP =	9
     20  f248
     21  f248				   TitleInit
     22  f248
     23  f248							; Setup logic and kernel
      0  f248					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f248				   .POINTER   SET	VBlankPtr
      2  f248				   .ADDRESS   SET	TitleVerticalBlank
      3  f248
      4  f248		       a9 7f		      LDA	#<.ADDRESS
      5  f24a		       85 87		      STA	.POINTER
      6  f24c		       a9 f2		      LDA	#>.ADDRESS
      7  f24e		       85 88		      STA	.POINTER+1
      8  f250
      0  f250					      SET_POINTER	KernelPtr, TitleKernel
      1  f250				   .POINTER   SET	KernelPtr
      2  f250				   .ADDRESS   SET	TitleKernel
      3  f250
      4  f250		       a9 ca		      LDA	#<.ADDRESS
      5  f252		       85 89		      STA	.POINTER
      6  f254		       a9 f2		      LDA	#>.ADDRESS
      7  f256		       85 8a		      STA	.POINTER+1
      8  f258
      0  f258					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f258				   .POINTER   SET	OverScanPtr
      2  f258				   .ADDRESS   SET	TitleOverScan
      3  f258
      4  f258		       a9 83		      LDA	#<.ADDRESS
      5  f25a		       85 8b		      STA	.POINTER
      6  f25c		       a9 f2		      LDA	#>.ADDRESS
      7  f25e		       85 8c		      STA	.POINTER+1
      8  f260
     27  f260
     28  f260							; Load Colors
     29  f260		       a9 00		      lda	#TITLE_BG_COLOR
     30  f262		       85 09		      sta	COLUBK
     31  f264		       a9 0e		      lda	#TITLE_FG_COLOR
     32  f266		       85 08		      sta	COLUPF
     33  f268
     34  f268							; Load audio settings
     35  f268
     36  f268							; Melody Line
     37  f268		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f26a		       85 15		      sta	AUDC0
     39  f26c		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f26e		       85 19		      sta	AUDV0
     41  f270
     42  f270							; Drums and Bass
     43  f270		       a9 00		      lda	#0
     44  f272		       85 16		      sta	AUDC1
     45  f274		       85 1a		      sta	AUDV1
     46  f276
     47  f276							; Make it so that we play the first note immediately
     48  f276		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f278		       85 8f		      sta	AudioStep
     50  f27a		       a9 01		      lda	#1
     51  f27c		       85 8e		      sta	FrameTimer
     52  f27e
     53  f27e		       60		      rts
     54  f27f
     55  f27f				   TitleVerticalBlank
     56  f27f
     57  f27f							; Refresh random values
     58  f27f		       20 13 f0 	      jsr	Random
     59  f282
     60  f282		       60		      rts
     61  f283
     62  f283				   TitleOverScan
     63  f283		       20 8a f2 	      jsr	TitleAudio
     64  f286		       20 c2 f2 	      jsr	TitleState
     65  f289		       60		      rts
     66  f28a
     67  f28a				   TitleAudio
     68  f28a
     69  f28a		       a6 8e		      ldx	FrameTimer
     70  f28c		       e0 00		      cpx	#0
     71  f28e		       d0 31		      bne	.title_audio_return
     72  f290
     73  f290							; Reset Timer
     74  f290		       a2 09		      ldx	#TITLE_AUDIO_STEP
     75  f292		       86 8e		      stx	FrameTimer
     76  f294
     77  f294				   .title_audio_play
     78  f294
     79  f294							; Increment melody position
     80  f294		       a4 8f		      ldy	AudioStep
     81  f296		       c8		      iny
     82  f297
     83  f297							; Check if we're at the end of the melody
     84  f297		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
     85  f299		       d0 02		      bne	.title_audio_play_note
     86  f29b
     87  f29b							; Loop our audio step
     88  f29b		       a0 00		      ldy	#0
     89  f29d
     90  f29d				   .title_audio_play_note
     91  f29d
     92  f29d							; Save current position
     93  f29d		       84 8f		      sty	AudioStep
     94  f29f
     95  f29f							; Basic Melody Line
     96  f29f		       b9 a6 f3 	      lda	TitleAudio0,y
     97  f2a2		       85 17		      sta	AUDF0
     98  f2a4
     99  f2a4							; Drums and Bass
    100  f2a4		       b9 b6 f3 	      lda	TitleTone1,y
    101  f2a7		       c9 ff		      cmp	#$FF
    102  f2a9		       f0 0e		      beq	.title_audio_play_note_1_mute
    103  f2ab
    104  f2ab		       85 16		      sta	AUDC1
    105  f2ad		       b9 c6 f3 	      lda	TitleAudio1,y
    106  f2b0		       85 18		      sta	AUDF1
    107  f2b2		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    108  f2b4		       85 1a		      sta	AUDV1
    109  f2b6
    110  f2b6		       4c c1 f2 	      jmp	.title_audio_return
    111  f2b9
    112  f2b9				   .title_audio_play_note_1_mute
    113  f2b9
    114  f2b9		       a9 00		      lda	#0
    115  f2bb		       85 18		      sta	AUDF1
    116  f2bd		       85 16		      sta	AUDC1
    117  f2bf		       85 1a		      sta	AUDV1
    118  f2c1
    119  f2c1				   .title_audio_return
    120  f2c1		       60		      rts
    121  f2c2
    122  f2c2				   TitleState
    123  f2c2							; Check if Fire Button on controller 1 is pressed
    124  f2c2		       a5 0c		      lda	INPT4
    125  f2c4		       30 03		      bmi	.title_state_return
    126  f2c6
    127  f2c6		       20 c0 f9 	      jsr	GameInit
    128  f2c9
    129  f2c9				   .title_state_return
    130  f2c9		       60		      rts
    131  f2ca
    132  f2ca				   TitleKernel
    133  f2ca
    134  f2ca							; Playfield Control
    135  f2ca		       a5 80		      lda	CtrlPf
    136  f2cc		       29 fe		      and	#%11111110	; No mirroring
    137  f2ce		       85 80		      sta	CtrlPf
    138  f2d0		       85 0a		      sta	CTRLPF
    139  f2d2
    140  f2d2							; Start Counters
    141  f2d2		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    142  f2d4		       a0 00		      ldy	#0	; Image Counter
    143  f2d6
    144  f2d6							; Turn on display
    145  f2d6		       a9 00		      lda	#0
    146  f2d8		       85 01		      sta	VBLANK
    147  f2da
    148  f2da		       85 02		      sta	WSYNC
    149  f2dc
    150  f2dc				   .title_kernel_image
    151  f2dc
    152  f2dc							; 76 machine cycles per scanline
    153  f2dc		       85 02		      sta	WSYNC
    154  f2de
    155  f2de				   .title_kernel_image_load		; 66 cycles
    156  f2de
    157  f2de							; First half of image
    158  f2de		       b9 16 f3 	      lda	TitleImage,y	; 5
    159  f2e1		       85 0d		      sta	PF0	; 4
    160  f2e3		       b9 17 f3 	      lda	TitleImage+1,y	; 5
    161  f2e6		       85 0e		      sta	PF1	; 4
    162  f2e8		       b9 18 f3 	      lda	TitleImage+2,y	; 5
    163  f2eb		       85 0f		      sta	PF2	; 4
    164  f2ed
      0  f2ed					      sleep	6
      1  f2ed				   .CYCLES    SET	6
      2  f2ed
      3  f2ed				  -	      IF	.CYCLES < 2
      4  f2ed				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2ed				  -	      ERR
      6  f2ed					      ENDIF
      7  f2ed
      8  f2ed				  -	      IF	.CYCLES & 1
      9  f2ed				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2ed				  -	      nop	0
     11  f2ed				  -	      ELSE
     12  f2ed				  -	      bit	VSYNC
     13  f2ed				  -	      ENDIF
     14  f2ed				  -.CYCLES    SET	.CYCLES - 3
     15  f2ed					      ENDIF
     16  f2ed
     17  f2ed					      REPEAT	.CYCLES / 2
     18  f2ed		       ea		      nop
     17  f2ed					      REPEND
     18  f2ee		       ea		      nop
     17  f2ee					      REPEND
     18  f2ef		       ea		      nop
     19  f2f0					      REPEND
    166  f2f0
    167  f2f0							; Second half of image
    168  f2f0		       b9 19 f3 	      lda	TitleImage+3,y	; 5
    169  f2f3		       85 0d		      sta	PF0	; 4
    170  f2f5		       b9 1a f3 	      lda	TitleImage+4,y	; 5
    171  f2f8		       85 0e		      sta	PF1	; 4
    172  f2fa		       b9 1b f3 	      lda	TitleImage+5,y	; 5
    173  f2fd		       85 0f		      sta	PF2	; 4
    174  f2ff
    175  f2ff				   .title_kernel_image_index		; 4 cycles
    176  f2ff
    177  f2ff		       ca		      dex		; 2
    178  f300		       d0 da		      bne	.title_kernel_image	; 2
    179  f302
    180  f302				   .title_kernel_image_index_next		; 6 cycles
    181  f302
    182  f302							; Restore scanline counter
    183  f302		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    184  f304
    185  f304		       98		      tya		; 2
    186  f305		       18		      clc		; 2
    187  f306		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    188  f308		       a8		      tay		; 2
    189  f309		       c0 90		      cpy	#KERNEL_IMAGE_SIZE*KERNEL_IMAGE_FULL_DATA
    190  f30b		       d0 cf		      bne	.title_kernel_image	; 2
    191  f30d
    192  f30d				   .title_kernel_image_clean
    193  f30d
    194  f30d							; Clear out playfield
    195  f30d		       a9 00		      lda	#0
    196  f30f		       85 0d		      sta	PF0
    197  f311		       85 0e		      sta	PF1
    198  f313		       85 0f		      sta	PF2
    199  f315
    200  f315				   .title_kernel_image_return
    201  f315		       60		      rts
    202  f316
    203  f316				   TitleAssets
    204  f316
    205  f316							; Assets
------- FILE title_image.asm LEVEL 3 PASS 2
      0  f316					      include	"title_image.asm"
      1  f316				   TitleImage
      2  f316
      3  f316		       f0		      .BYTE.b	%11110000
      4  f317		       ff		      .BYTE.b	%11111111
      5  f318		       ff		      .BYTE.b	%11111111
      6  f319		       f0		      .BYTE.b	%11110000
      7  f31a		       ff		      .BYTE.b	%11111111
      8  f31b		       ff		      .BYTE.b	%11111111
      9  f31c
     10  f31c		       10		      .BYTE.b	%00010000
     11  f31d		       00		      .BYTE.b	%00000000
     12  f31e		       00		      .BYTE.b	%00000000
     13  f31f		       00		      .BYTE.b	%00000000
     14  f320		       00		      .BYTE.b	%00000000
     15  f321		       80		      .BYTE.b	%10000000
     16  f322
     17  f322		       10		      .BYTE.b	%00010000
     18  f323		       00		      .BYTE.b	%00000000
     19  f324		       00		      .BYTE.b	%00000000
     20  f325		       00		      .BYTE.b	%00000000
     21  f326		       00		      .BYTE.b	%00000000
     22  f327		       80		      .BYTE.b	%10000000
     23  f328
     24  f328		       10		      .BYTE.b	%00010000
     25  f329		       00		      .BYTE.b	%00000000
     26  f32a		       00		      .BYTE.b	%00000000
     27  f32b		       00		      .BYTE.b	%00000000
     28  f32c		       00		      .BYTE.b	%00000000
     29  f32d		       80		      .BYTE.b	%10000000
     30  f32e
     31  f32e		       10		      .BYTE.b	%00010000
     32  f32f		       00		      .BYTE.b	%00000000
     33  f330		       00		      .BYTE.b	%00000000
     34  f331		       00		      .BYTE.b	%00000000
     35  f332		       00		      .BYTE.b	%00000000
     36  f333		       80		      .BYTE.b	%10000000
     37  f334
     38  f334		       10		      .BYTE.b	%00010000
     39  f335		       77		      .BYTE.b	%01110111
     40  f336		       ee		      .BYTE.b	%11101110
     41  f337		       c0		      .BYTE.b	%11000000
     42  f338		       b8		      .BYTE.b	%10111000
     43  f339		       80		      .BYTE.b	%10000000
     44  f33a
     45  f33a		       10		      .BYTE.b	%00010000
     46  f33b		       45		      .BYTE.b	%01000101
     47  f33c		       24		      .BYTE.b	%00100100
     48  f33d		       50		      .BYTE.b	%01010000
     49  f33e		       24		      .BYTE.b	%00100100
     50  f33f		       80		      .BYTE.b	%10000000
     51  f340
     52  f340		       10		      .BYTE.b	%00010000
     53  f341		       47		      .BYTE.b	%01000111
     54  f342		       24		      .BYTE.b	%00100100
     55  f343		       d0		      .BYTE.b	%11010000
     56  f344		       24		      .BYTE.b	%00100100
     57  f345		       80		      .BYTE.b	%10000000
     58  f346
     59  f346		       10		      .BYTE.b	%00010000
     60  f347		       74		      .BYTE.b	%01110100
     61  f348		       24		      .BYTE.b	%00100100
     62  f349		       50		      .BYTE.b	%01010000
     63  f34a		       38		      .BYTE.b	%00111000
     64  f34b		       80		      .BYTE.b	%10000000
     65  f34c
     66  f34c		       10		      .BYTE.b	%00010000
     67  f34d		       14		      .BYTE.b	%00010100
     68  f34e		       24		      .BYTE.b	%00100100
     69  f34f		       50		      .BYTE.b	%01010000
     70  f350		       24		      .BYTE.b	%00100100
     71  f351		       80		      .BYTE.b	%10000000
     72  f352
     73  f352		       10		      .BYTE.b	%00010000
     74  f353		       74		      .BYTE.b	%01110100
     75  f354		       ee		      .BYTE.b	%11101110
     76  f355		       c0		      .BYTE.b	%11000000
     77  f356		       a4		      .BYTE.b	%10100100
     78  f357		       80		      .BYTE.b	%10000000
     79  f358
     80  f358		       10		      .BYTE.b	%00010000
     81  f359		       00		      .BYTE.b	%00000000
     82  f35a		       00		      .BYTE.b	%00000000
     83  f35b		       00		      .BYTE.b	%00000000
     84  f35c		       00		      .BYTE.b	%00000000
     85  f35d		       80		      .BYTE.b	%10000000
     86  f35e
     87  f35e		       10		      .BYTE.b	%00010000
     88  f35f		       00		      .BYTE.b	%00000000
     89  f360		       00		      .BYTE.b	%00000000
     90  f361		       00		      .BYTE.b	%00000000
     91  f362		       00		      .BYTE.b	%00000000
     92  f363		       80		      .BYTE.b	%10000000
     93  f364
     94  f364		       10		      .BYTE.b	%00010000
     95  f365		       01		      .BYTE.b	%00000001
     96  f366		       03		      .BYTE.b	%00000011
     97  f367		       20		      .BYTE.b	%00100000
     98  f368		       5d		      .BYTE.b	%01011101
     99  f369		       83		      .BYTE.b	%10000011
    100  f36a
    101  f36a		       10		      .BYTE.b	%00010000
    102  f36b		       0a		      .BYTE.b	%00001010
    103  f36c		       14		      .BYTE.b	%00010100
    104  f36d		       20		      .BYTE.b	%00100000
    105  f36e		       51		      .BYTE.b	%01010001
    106  f36f		       84		      .BYTE.b	%10000100
    107  f370
    108  f370		       10		      .BYTE.b	%00010000
    109  f371		       15		      .BYTE.b	%00010101
    110  f372		       2a		      .BYTE.b	%00101010
    111  f373		       20		      .BYTE.b	%00100000
    112  f374		       59		      .BYTE.b	%01011001
    113  f375		       83		      .BYTE.b	%10000011
    114  f376
    115  f376		       10		      .BYTE.b	%00010000
    116  f377		       24		      .BYTE.b	%00100100
    117  f378		       49		      .BYTE.b	%01001001
    118  f379		       20		      .BYTE.b	%00100000
    119  f37a		       51		      .BYTE.b	%01010001
    120  f37b		       84		      .BYTE.b	%10000100
    121  f37c
    122  f37c		       10		      .BYTE.b	%00010000
    123  f37d		       22		      .BYTE.b	%00100010
    124  f37e		       44		      .BYTE.b	%01000100
    125  f37f		       a0		      .BYTE.b	%10100000
    126  f380		       51		      .BYTE.b	%01010001
    127  f381		       84		      .BYTE.b	%10000100
    128  f382
    129  f382		       10		      .BYTE.b	%00010000
    130  f383		       11		      .BYTE.b	%00010001
    131  f384		       23		      .BYTE.b	%00100011
    132  f385		       40		      .BYTE.b	%01000000
    133  f386		       9d		      .BYTE.b	%10011101
    134  f387		       83		      .BYTE.b	%10000011
    135  f388
    136  f388		       10		      .BYTE.b	%00010000
    137  f389		       00		      .BYTE.b	%00000000
    138  f38a		       00		      .BYTE.b	%00000000
    139  f38b		       00		      .BYTE.b	%00000000
    140  f38c		       00		      .BYTE.b	%00000000
    141  f38d		       80		      .BYTE.b	%10000000
    142  f38e
    143  f38e		       10		      .BYTE.b	%00010000
    144  f38f		       00		      .BYTE.b	%00000000
    145  f390		       00		      .BYTE.b	%00000000
    146  f391		       00		      .BYTE.b	%00000000
    147  f392		       00		      .BYTE.b	%00000000
    148  f393		       80		      .BYTE.b	%10000000
    149  f394
    150  f394		       10		      .BYTE.b	%00010000
    151  f395		       00		      .BYTE.b	%00000000
    152  f396		       00		      .BYTE.b	%00000000
    153  f397		       00		      .BYTE.b	%00000000
    154  f398		       00		      .BYTE.b	%00000000
    155  f399		       80		      .BYTE.b	%10000000
    156  f39a
    157  f39a		       10		      .BYTE.b	%00010000
    158  f39b		       00		      .BYTE.b	%00000000
    159  f39c		       00		      .BYTE.b	%00000000
    160  f39d		       00		      .BYTE.b	%00000000
    161  f39e		       00		      .BYTE.b	%00000000
    162  f39f		       80		      .BYTE.b	%10000000
    163  f3a0
    164  f3a0		       f0		      .BYTE.b	%11110000
    165  f3a1		       ff		      .BYTE.b	%11111111
    166  f3a2		       ff		      .BYTE.b	%11111111
    167  f3a3		       f0		      .BYTE.b	%11110000
    168  f3a4		       ff		      .BYTE.b	%11111111
    169  f3a5		       ff		      .BYTE.b	%11111111
------- FILE title.asm
    207  f3a6
    208  f3a6				   TitleAudio0
    209  f3a6
    210  f3a6		       0f		      .BYTE.b	#15	; B
    211  f3a7		       13		      .BYTE.b	#19	; G
    212  f3a8		       17		      .BYTE.b	#23	; E
    213  f3a9		       13		      .BYTE.b	#19	; G
    214  f3aa		       0e		      .BYTE.b	#14	; C
    215  f3ab		       13		      .BYTE.b	#19
    216  f3ac		       17		      .BYTE.b	#23
    217  f3ad		       13		      .BYTE.b	#19
    218  f3ae		       0c		      .BYTE.b	#12	; D
    219  f3af		       13		      .BYTE.b	#19
    220  f3b0		       17		      .BYTE.b	#23
    221  f3b1		       13		      .BYTE.b	#19
    222  f3b2		       0e		      .BYTE.b	#14	; C
    223  f3b3		       13		      .BYTE.b	#19
    224  f3b4		       17		      .BYTE.b	#23
    225  f3b5		       13		      .BYTE.b	#19
    226  f3b6
    227  f3b6				   TitleTone1
    228  f3b6
    229  f3b6		       0f		      .BYTE.b	#15	; Electronic Rumble
    230  f3b7		       ff		      .BYTE.b	#$FF
    231  f3b8		       01		      .BYTE.b	#1	; Low Pure Tone
    232  f3b9		       01		      .BYTE.b	#1
    233  f3ba		       08		      .BYTE.b	#8	; White Noise
    234  f3bb		       01		      .BYTE.b	#1
    235  f3bc		       01		      .BYTE.b	#1
    236  f3bd		       ff		      .BYTE.b	#$FF
    237  f3be		       ff		      .BYTE.b	#$FF
    238  f3bf		       0f		      .BYTE.b	#15
    239  f3c0		       ff		      .BYTE.b	#$FF
    240  f3c1		       ff		      .BYTE.b	#$FF
    241  f3c2		       08		      .BYTE.b	#8
    242  f3c3		       ff		      .BYTE.b	#$FF
    243  f3c4		       01		      .BYTE.b	#1
    244  f3c5		       01		      .BYTE.b	#1
    245  f3c6
    246  f3c6				   TitleAudio1
    247  f3c6
    248  f3c6		       1d		      .BYTE.b	#29	; Kick
    249  f3c7		       ff		      .BYTE.b	#$FF
    250  f3c8		       1f		      .BYTE.b	#31	; C
    251  f3c9		       1f		      .BYTE.b	#31
    252  f3ca		       07		      .BYTE.b	#7	; Snare
    253  f3cb		       1f		      .BYTE.b	#31
    254  f3cc		       1f		      .BYTE.b	#31
    255  f3cd		       ff		      .BYTE.b	#$FF
    256  f3ce		       ff		      .BYTE.b	#$FF
    257  f3cf		       1d		      .BYTE.b	#29
    258  f3d0		       ff		      .BYTE.b	#$FF
    259  f3d1		       ff		      .BYTE.b	#$FF
    260  f3d2		       07		      .BYTE.b	#7
    261  f3d3		       ff		      .BYTE.b	#$FF
    262  f3d4		       17		      .BYTE.b	#23	; F
    263  f3d5		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f3d6					      include	"game.asm"
      1  f3d6							;================
      2  f3d6							; Game
      3  f3d6							;================
      4  f3d6
      5  f3d6							; Constants
      6  f3d6
      7  f3d6		       00 04	   GAME_AUDIO_VOLUME =	4
      8  f3d6		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f3d6		       00 09	   GAME_AUDIO_STEP =	9
     10  f3d6		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f3d6
     12  f3d6							; Object Code
     13  f3d6
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f3d6					      include	"objects/score.asm"
      1  f3d6							;======================
      2  f3d6							; Score (playfield)
      3  f3d6							;======================
      4  f3d6
      5  f3d6							; Constants
      6  f3d6
      7  f3d6		       00 00	   SCORE_BG_COLOR =	#$00
      8  f3d6		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f3d6		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f3d6
     11  f3d6		       00 05	   SCORE_CHAR_SIZE =	5
     12  f3d6		       00 02	   SCORE_LINE_SIZE =	2
     13  f3d6		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f3d6
     15  f3d6							; Initialization
     16  f3d6
     17  f3d6				   ScoreInit
     18  f3d6
     19  f3d6							; Health Score
     20  f3d6		       a9 ff		      lda	#$FF
     21  f3d8		       85 91		      sta	ScoreValue+0
     22  f3da
     23  f3da							; Game Score
     24  f3da		       a9 00		      lda	#0
     25  f3dc		       85 92		      sta	ScoreValue+1
     26  f3de
     27  f3de		       60		      rts
     28  f3df
     29  f3df							; Frame Update
     30  f3df
     31  f3df				   ScoreUpdate
     32  f3df
     33  f3df		       a2 01		      ldx	#1
     34  f3e1				   .score_update_loop
     35  f3e1
     36  f3e1							; Ones Digit
     37  f3e1		       b5 91		      lda	ScoreValue,x
     38  f3e3		       29 0f		      and	#$0f
     39  f3e5		       85 83		      sta	Temp
     40  f3e7		       0a		      asl
     41  f3e8		       0a		      asl
     42  f3e9		       65 83		      adc	Temp
     43  f3eb		       95 93		      sta	ScoreDigitOnes,x
     44  f3ed
     45  f3ed							; Tens Digit
     46  f3ed		       b5 91		      lda	ScoreValue,x
     47  f3ef		       29 f0		      and	#$f0
     48  f3f1		       4a		      lsr
     49  f3f2		       4a		      lsr
     50  f3f3		       85 83		      sta	Temp
     51  f3f5		       4a		      lsr
     52  f3f6		       4a		      lsr
     53  f3f7		       65 83		      adc	Temp
     54  f3f9		       95 95		      sta	ScoreDigitTens,x
     55  f3fb
     56  f3fb		       ca		      dex
     57  f3fc		       10 e3		      bpl	.score_update_loop
     58  f3fe
     59  f3fe				   .score_update_end
     60  f3fe		       60		      rts
     61  f3ff
     62  f3ff							; Draw loop (uses SCORE_LINES scanlines)
     63  f3ff
     64  f3ff				   ScoreDraw
     65  f3ff
     66  f3ff							; Load Colors
     67  f3ff		       a9 00		      lda	#SCORE_BG_COLOR
     68  f401		       85 09		      sta	COLUBK
     69  f403		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f405		       85 08		      sta	COLUPF
     71  f407		       85 06		      sta	COLUP0
     72  f409		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f40b		       85 07		      sta	COLUP1
     74  f40d
     75  f40d							; Set Non-Mirror and p0/p1 color
     76  f40d		       a5 80		      lda	CtrlPf
     77  f40f		       29 fc		      and	#%11111100
     78  f411		       09 02		      ora	#%00000010
     79  f413		       85 80		      sta	CtrlPf
     80  f415		       85 0a		      sta	CTRLPF
     81  f417
     82  f417							;sta WSYNC
     83  f417
     84  f417		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f419
     86  f419				   .score_draw_line
     87  f419
     88  f419							; 1st Value
     89  f419		       a4 95		      ldy	ScoreDigitTens
     90  f41b		       b9 6f f4 	      lda	ScoreDigits,y
     91  f41e		       29 f0		      and	#$f0
     92  f420		       85 97		      sta	ScoreGfx
     93  f422		       a4 93		      ldy	ScoreDigitOnes
     94  f424		       b9 6f f4 	      lda	ScoreDigits,y
     95  f427		       29 0f		      and	#$0f
     96  f429		       05 97		      ora	ScoreGfx
     97  f42b		       85 97		      sta	ScoreGfx
     98  f42d
     99  f42d		       85 02		      sta	WSYNC
    100  f42f		       85 0e		      sta	PF1
    101  f431
    102  f431							; 2nd Value
    103  f431		       a4 96		      ldy	ScoreDigitTens+1
    104  f433		       b9 6f f4 	      lda	ScoreDigits,y
    105  f436		       29 f0		      and	#$f0
    106  f438		       85 98		      sta	ScoreGfx+1
    107  f43a		       a4 94		      ldy	ScoreDigitOnes+1
    108  f43c		       b9 6f f4 	      lda	ScoreDigits,y
    109  f43f		       29 0f		      and	#$0f
    110  f441		       05 98		      ora	ScoreGfx+1
    111  f443		       85 98		      sta	ScoreGfx+1
    112  f445
      0  f445					      sleep	12
      1  f445				   .CYCLES    SET	12
      2  f445
      3  f445				  -	      IF	.CYCLES < 2
      4  f445				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f445				  -	      ERR
      6  f445					      ENDIF
      7  f445
      8  f445				  -	      IF	.CYCLES & 1
      9  f445				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f445				  -	      nop	0
     11  f445				  -	      ELSE
     12  f445				  -	      bit	VSYNC
     13  f445				  -	      ENDIF
     14  f445				  -.CYCLES    SET	.CYCLES - 3
     15  f445					      ENDIF
     16  f445
     17  f445					      REPEAT	.CYCLES / 2
     18  f445		       ea		      nop
     17  f445					      REPEND
     18  f446		       ea		      nop
     17  f446					      REPEND
     18  f447		       ea		      nop
     17  f447					      REPEND
     18  f448		       ea		      nop
     17  f448					      REPEND
     18  f449		       ea		      nop
     17  f449					      REPEND
     18  f44a		       ea		      nop
     19  f44b					      REPEND
    114  f44b		       85 0e		      sta	PF1
    115  f44d
    116  f44d		       a4 97		      ldy	ScoreGfx
    117  f44f		       85 02		      sta	WSYNC
    118  f451
    119  f451		       84 0e		      sty	PF1
    120  f453
    121  f453		       e6 93		      inc	ScoreDigitOnes
    122  f455		       e6 94		      inc	ScoreDigitOnes+1
    123  f457		       e6 95		      inc	ScoreDigitTens
    124  f459		       e6 96		      inc	ScoreDigitTens+1
    125  f45b
      0  f45b					      sleep	12
      1  f45b				   .CYCLES    SET	12
      2  f45b
      3  f45b				  -	      IF	.CYCLES < 2
      4  f45b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f45b				  -	      ERR
      6  f45b					      ENDIF
      7  f45b
      8  f45b				  -	      IF	.CYCLES & 1
      9  f45b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f45b				  -	      nop	0
     11  f45b				  -	      ELSE
     12  f45b				  -	      bit	VSYNC
     13  f45b				  -	      ENDIF
     14  f45b				  -.CYCLES    SET	.CYCLES - 3
     15  f45b					      ENDIF
     16  f45b
     17  f45b					      REPEAT	.CYCLES / 2
     18  f45b		       ea		      nop
     17  f45b					      REPEND
     18  f45c		       ea		      nop
     17  f45c					      REPEND
     18  f45d		       ea		      nop
     17  f45d					      REPEND
     18  f45e		       ea		      nop
     17  f45e					      REPEND
     18  f45f		       ea		      nop
     17  f45f					      REPEND
     18  f460		       ea		      nop
     19  f461					      REPEND
    127  f461		       ca		      dex
    128  f462		       85 0e		      sta	PF1
    129  f464
    130  f464		       d0 b3		      bne	.score_draw_line
    131  f466		       85 02		      sta	WSYNC
    132  f468
    133  f468							; Clear
    134  f468		       a9 00		      lda	#0
    135  f46a		       85 0e		      sta	PF1
    136  f46c
    137  f46c		       85 02		      sta	WSYNC
    138  f46e
    139  f46e		       60		      rts
    140  f46f
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f46f					      include	"objects/score_digits.asm"
      1  f46f				   ScoreDigits
      2  f46f
      3  f46f		       77		      .BYTE.b	%01110111
      4  f470		       55		      .BYTE.b	%01010101
      5  f471		       55		      .BYTE.b	%01010101
      6  f472		       55		      .BYTE.b	%01010101
      7  f473		       77		      .BYTE.b	%01110111
      8  f474
      9  f474		       11		      .BYTE.b	%00010001
     10  f475		       11		      .BYTE.b	%00010001
     11  f476		       11		      .BYTE.b	%00010001
     12  f477		       11		      .BYTE.b	%00010001
     13  f478		       11		      .BYTE.b	%00010001
     14  f479
     15  f479		       77		      .BYTE.b	%01110111
     16  f47a		       11		      .BYTE.b	%00010001
     17  f47b		       77		      .BYTE.b	%01110111
     18  f47c		       44		      .BYTE.b	%01000100
     19  f47d		       77		      .BYTE.b	%01110111
     20  f47e
     21  f47e		       77		      .BYTE.b	%01110111
     22  f47f		       11		      .BYTE.b	%00010001
     23  f480		       33		      .BYTE.b	%00110011
     24  f481		       11		      .BYTE.b	%00010001
     25  f482		       77		      .BYTE.b	%01110111
     26  f483
     27  f483		       55		      .BYTE.b	%01010101
     28  f484		       55		      .BYTE.b	%01010101
     29  f485		       77		      .BYTE.b	%01110111
     30  f486		       11		      .BYTE.b	%00010001
     31  f487		       11		      .BYTE.b	%00010001
     32  f488
     33  f488		       77		      .BYTE.b	%01110111
     34  f489		       44		      .BYTE.b	%01000100
     35  f48a		       77		      .BYTE.b	%01110111
     36  f48b		       11		      .BYTE.b	%00010001
     37  f48c		       77		      .BYTE.b	%01110111
     38  f48d
     39  f48d		       77		      .BYTE.b	%01110111
     40  f48e		       44		      .BYTE.b	%01000100
     41  f48f		       77		      .BYTE.b	%01110111
     42  f490		       55		      .BYTE.b	%01010101
     43  f491		       77		      .BYTE.b	%01110111
     44  f492
     45  f492		       77		      .BYTE.b	%01110111
     46  f493		       11		      .BYTE.b	%00010001
     47  f494		       22		      .BYTE.b	%00100010
     48  f495		       22		      .BYTE.b	%00100010
     49  f496		       22		      .BYTE.b	%00100010
     50  f497
     51  f497		       77		      .BYTE.b	%01110111
     52  f498		       55		      .BYTE.b	%01010101
     53  f499		       77		      .BYTE.b	%01110111
     54  f49a		       55		      .BYTE.b	%01010101
     55  f49b		       77		      .BYTE.b	%01110111
     56  f49c
     57  f49c		       77		      .BYTE.b	%01110111
     58  f49d		       55		      .BYTE.b	%01010101
     59  f49e		       77		      .BYTE.b	%01110111
     60  f49f		       11		      .BYTE.b	%00010001
     61  f4a0		       11		      .BYTE.b	%00010001
     62  f4a1
     63  f4a1		       77		      .BYTE.b	%01110111
     64  f4a2		       55		      .BYTE.b	%01010101
     65  f4a3		       77		      .BYTE.b	%01110111
     66  f4a4		       55		      .BYTE.b	%01010101
     67  f4a5		       55		      .BYTE.b	%01010101
     68  f4a6
     69  f4a6		       66		      .BYTE.b	%01100110
     70  f4a7		       55		      .BYTE.b	%01010101
     71  f4a8		       66		      .BYTE.b	%01100110
     72  f4a9		       55		      .BYTE.b	%01010101
     73  f4aa		       66		      .BYTE.b	%01100110
     74  f4ab
     75  f4ab		       77		      .BYTE.b	%01110111
     76  f4ac		       44		      .BYTE.b	%01000100
     77  f4ad		       44		      .BYTE.b	%01000100
     78  f4ae		       44		      .BYTE.b	%01000100
     79  f4af		       77		      .BYTE.b	%01110111
     80  f4b0
     81  f4b0		       66		      .BYTE.b	%01100110
     82  f4b1		       55		      .BYTE.b	%01010101
     83  f4b2		       55		      .BYTE.b	%01010101
     84  f4b3		       55		      .BYTE.b	%01010101
     85  f4b4		       66		      .BYTE.b	%01100110
     86  f4b5
     87  f4b5		       77		      .BYTE.b	%01110111
     88  f4b6		       44		      .BYTE.b	%01000100
     89  f4b7		       66		      .BYTE.b	%01100110
     90  f4b8		       44		      .BYTE.b	%01000100
     91  f4b9		       77		      .BYTE.b	%01110111
     92  f4ba
     93  f4ba		       77		      .BYTE.b	%01110111
     94  f4bb		       44		      .BYTE.b	%01000100
     95  f4bc		       66		      .BYTE.b	%01100110
     96  f4bd		       44		      .BYTE.b	%01000100
     97  f4be		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f4bf					      include	"objects/web.asm"
      1  f4bf							;================
      2  f4bf							; Web (Playfield)
      3  f4bf							;================
      4  f4bf
      5  f4bf							; Constants
      6  f4bf
      7  f4bf		       00 00	   WEB_BG_COLOR =	#$00
      8  f4bf		       00 06	   WEB_FG_COLOR =	#$06
      9  f4bf
     10  f4bf		       00 b3	   WEB_SIZE   =	KERNEL_SCANLINES-SCORE_LINES
     11  f4bf		       00 05	   WEB_LINE   =	WEB_SIZE/30
     12  f4bf
     13  f4bf							; Scanline Draw
     14  f4bf
     15  f4bf				   WebDrawStart
     16  f4bf
     17  f4bf							; Load Colors
     18  f4bf		       a9 00		      lda	#WEB_BG_COLOR
     19  f4c1		       85 09		      sta	COLUBK
     20  f4c3		       a9 06		      lda	#WEB_FG_COLOR
     21  f4c5		       85 08		      sta	COLUPF
     22  f4c7
     23  f4c7							; Mirror playfield and use standard playfield color
     24  f4c7		       a5 80		      lda	CtrlPf
     25  f4c9		       29 fc		      and	#%11111100
     26  f4cb		       09 01		      ora	#%00000001
     27  f4cd		       85 80		      sta	CtrlPf
     28  f4cf		       85 0a		      sta	CTRLPF
     29  f4d1
     30  f4d1							; Initialize image index
     31  f4d1		       a9 00		      lda	#0
     32  f4d3		       85 99		      sta	WebIndex
     33  f4d5
     34  f4d5		       60		      rts
     35  f4d6
     36  f4d6				   WebDraw
     37  f4d6
     38  f4d6							; Draw Image
     39  f4d6		       a4 99		      ldy	WebIndex
     40  f4d8		       b9 f3 f4 	      lda	WebImagePF0,y
     41  f4db		       85 0d		      sta	PF0
     42  f4dd		       b9 11 f5 	      lda	WebImagePF1,y
     43  f4e0		       85 0e		      sta	PF1
     44  f4e2		       b9 2f f5 	      lda	WebImagePF2,y
     45  f4e5		       85 0f		      sta	PF2
     46  f4e7
     47  f4e7							; Increment image index
     48  f4e7		       e6 99		      inc	WebIndex
     49  f4e9
     50  f4e9		       60		      rts
     51  f4ea
     52  f4ea				   WebClean
     53  f4ea
     54  f4ea							; Clear out playfield
     55  f4ea		       a9 00		      lda	#0
     56  f4ec		       85 0d		      sta	PF0
     57  f4ee		       85 0e		      sta	PF1
     58  f4f0		       85 0f		      sta	PF2
     59  f4f2
     60  f4f2		       60		      rts
     61  f4f3
     62  f4f3							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f4f3					      include	"objects/web_image.asm"
      1  f4f3				   WebImagePF0
      2  f4f3		       00		      .BYTE.b	%00000000
      3  f4f4		       00		      .BYTE.b	%00000000
      4  f4f5		       00		      .BYTE.b	%00000000
      5  f4f6		       00		      .BYTE.b	%00000000
      6  f4f7		       00		      .BYTE.b	%00000000
      7  f4f8		       00		      .BYTE.b	%00000000
      8  f4f9		       00		      .BYTE.b	%00000000
      9  f4fa		       00		      .BYTE.b	%00000000
     10  f4fb		       00		      .BYTE.b	%00000000
     11  f4fc		       30		      .BYTE.b	%00110000
     12  f4fd		       e0		      .BYTE.b	%11100000
     13  f4fe		       20		      .BYTE.b	%00100000
     14  f4ff		       40		      .BYTE.b	%01000000
     15  f500		       40		      .BYTE.b	%01000000
     16  f501		       80		      .BYTE.b	%10000000
     17  f502		       80		      .BYTE.b	%10000000
     18  f503		       40		      .BYTE.b	%01000000
     19  f504		       40		      .BYTE.b	%01000000
     20  f505		       20		      .BYTE.b	%00100000
     21  f506		       e0		      .BYTE.b	%11100000
     22  f507		       30		      .BYTE.b	%00110000
     23  f508		       00		      .BYTE.b	%00000000
     24  f509		       00		      .BYTE.b	%00000000
     25  f50a		       00		      .BYTE.b	%00000000
     26  f50b		       00		      .BYTE.b	%00000000
     27  f50c		       00		      .BYTE.b	%00000000
     28  f50d		       00		      .BYTE.b	%00000000
     29  f50e		       00		      .BYTE.b	%00000000
     30  f50f		       00		      .BYTE.b	%00000000
     31  f510		       00		      .BYTE.b	%00000000
     32  f511
     33  f511				   WebImagePF1
     34  f511		       08		      .BYTE.b	%00001000
     35  f512		       06		      .BYTE.b	%00000110
     36  f513		       01		      .BYTE.b	%00000001
     37  f514		       00		      .BYTE.b	%00000000
     38  f515		       00		      .BYTE.b	%00000000
     39  f516		       01		      .BYTE.b	%00000001
     40  f517		       01		      .BYTE.b	%00000001
     41  f518		       02		      .BYTE.b	%00000010
     42  f519		       0c		      .BYTE.b	%00001100
     43  f51a		       30		      .BYTE.b	%00110000
     44  f51b		       c0		      .BYTE.b	%11000000
     45  f51c		       38		      .BYTE.b	%00111000
     46  f51d		       07		      .BYTE.b	%00000111
     47  f51e		       00		      .BYTE.b	%00000000
     48  f51f		       00		      .BYTE.b	%00000000
     49  f520		       00		      .BYTE.b	%00000000
     50  f521		       00		      .BYTE.b	%00000000
     51  f522		       07		      .BYTE.b	%00000111
     52  f523		       38		      .BYTE.b	%00111000
     53  f524		       c0		      .BYTE.b	%11000000
     54  f525		       30		      .BYTE.b	%00110000
     55  f526		       0c		      .BYTE.b	%00001100
     56  f527		       02		      .BYTE.b	%00000010
     57  f528		       01		      .BYTE.b	%00000001
     58  f529		       01		      .BYTE.b	%00000001
     59  f52a		       00		      .BYTE.b	%00000000
     60  f52b		       00		      .BYTE.b	%00000000
     61  f52c		       01		      .BYTE.b	%00000001
     62  f52d		       06		      .BYTE.b	%00000110
     63  f52e		       08		      .BYTE.b	%00001000
     64  f52f
     65  f52f				   WebImagePF2
     66  f52f		       20		      .BYTE.b	%00100000
     67  f530		       18		      .BYTE.b	%00011000
     68  f531		       04		      .BYTE.b	%00000100
     69  f532		       03		      .BYTE.b	%00000011
     70  f533		       3f		      .BYTE.b	%00111111
     71  f534		       c2		      .BYTE.b	%11000010
     72  f535		       04		      .BYTE.b	%00000100
     73  f536		       08		      .BYTE.b	%00001000
     74  f537		       08		      .BYTE.b	%00001000
     75  f538		       10		      .BYTE.b	%00010000
     76  f539		       20		      .BYTE.b	%00100000
     77  f53a		       20		      .BYTE.b	%00100000
     78  f53b		       41		      .BYTE.b	%01000001
     79  f53c		       8e		      .BYTE.b	%10001110
     80  f53d		       f0		      .BYTE.b	%11110000
     81  f53e		       f0		      .BYTE.b	%11110000
     82  f53f		       8e		      .BYTE.b	%10001110
     83  f540		       41		      .BYTE.b	%01000001
     84  f541		       20		      .BYTE.b	%00100000
     85  f542		       20		      .BYTE.b	%00100000
     86  f543		       10		      .BYTE.b	%00010000
     87  f544		       08		      .BYTE.b	%00001000
     88  f545		       08		      .BYTE.b	%00001000
     89  f546		       04		      .BYTE.b	%00000100
     90  f547		       c2		      .BYTE.b	%11000010
     91  f548		       3f		      .BYTE.b	%00111111
     92  f549		       03		      .BYTE.b	%00000011
     93  f54a		       04		      .BYTE.b	%00000100
     94  f54b		       18		      .BYTE.b	%00011000
     95  f54c		       20		      .BYTE.b	%00100000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f54d					      include	"objects/spider.asm"
      1  f54d							;=================
      2  f54d							; Spider (player0)
      3  f54d							;=================
      4  f54d
      5  f54d							; Constants
      6  f54d
      7  f54d		       00 56	   SPIDER_COLOR =	#$56
      8  f54d		       00 10	   SPIDER_SIZE =	16
      9  f54d		       00 08	   SPIDER_SPRITE_SIZE =	8
     10  f54d		       00 02	   SPIDER_VEL_X =	2
     11  f54d		       00 02	   SPIDER_VEL_Y =	2
     12  f54d
     13  f54d							; Initialization
     14  f54d
     15  f54d				   SpiderInit
     16  f54d
     17  f54d							; Initial Control
     18  f54d		       a9 32		      lda	#50
     19  f54f		       85 9c		      sta	SpiderPos
     20  f551		       85 9d		      sta	SpiderPos+1
     21  f553
     22  f553							; Setup Sprite
      0  f553					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f553				   .POINTER   SET	SpiderPtr
      2  f553				   .ADDRESS   SET	SpiderSprite
      3  f553
      4  f553		       a9 9e		      LDA	#<.ADDRESS
      5  f555		       85 9a		      STA	.POINTER
      6  f557		       a9 f6		      LDA	#>.ADDRESS
      7  f559		       85 9b		      STA	.POINTER+1
      8  f55b
     24  f55b
     25  f55b		       60		      rts
     26  f55c
     27  f55c							; Frame Update
     28  f55c
     29  f55c				   SpiderUpdate
     30  f55c		       20 60 f5 	      jsr	SpiderControl
     31  f55f		       60		      rts
     32  f560
     33  f560				   SpiderControl
     34  f560
     35  f560							; Control Position
     36  f560		       a6 9c		      ldx	SpiderPos
     37  f562		       a4 9d		      ldy	SpiderPos+1
     38  f564		       ad 80 02 	      lda	SWCHA
     39  f567
     40  f567				   .spider_control_check_right
     41  f567		       30 02		      bmi	.spider_control_check_left
     42  f569
     43  f569					      REPEAT	#SPIDER_VEL_X
     44  f569		       e8		      inx
     43  f569					      REPEND
     44  f56a		       e8		      inx
     45  f56b					      REPEND
     46  f56b
     47  f56b				   .spider_control_check_left
     48  f56b		       2a		      rol
     49  f56c		       30 02		      bmi	.spider_control_check_down
     50  f56e
     51  f56e					      REPEAT	#SPIDER_VEL_X
     52  f56e		       ca		      dex
     51  f56e					      REPEND
     52  f56f		       ca		      dex
     53  f570					      REPEND
     54  f570
     55  f570				   .spider_control_check_down
     56  f570		       2a		      rol
     57  f571		       30 02		      bmi	.spider_control_check_up
     58  f573
     59  f573					      REPEAT	#SPIDER_VEL_Y
     60  f573		       88		      dey
     59  f573					      REPEND
     60  f574		       88		      dey
     61  f575					      REPEND
     62  f575
     63  f575				   .spider_control_check_up
     64  f575		       2a		      rol
     65  f576		       30 02		      bmi	.spider_control_sprite
     66  f578
     67  f578					      REPEAT	#SPIDER_VEL_Y
     68  f578		       c8		      iny
     67  f578					      REPEND
     68  f579		       c8		      iny
     69  f57a					      REPEND
     70  f57a
     71  f57a				   .spider_control_sprite
     72  f57a							; Control Sprite
     73  f57a		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     74  f57c
     75  f57c				   .spider_control_sprite_x
     76  f57c		       e4 9c		      cpx	SpiderPos
     77  f57e		       90 04		      bcc	.spider_control_sprite_left
     78  f580		       f0 09		      beq	.spider_control_sprite_y
     79  f582		       b0 05		      bcs	.spider_control_sprite_right
     80  f584
     81  f584				   .spider_control_sprite_left
     82  f584		       09 80		      ora	#%10000000
     83  f586		       4c 8b f5 	      jmp	.spider_control_sprite_y
     84  f589
     85  f589				   .spider_control_sprite_right
     86  f589		       09 40		      ora	#%01000000
     87  f58b
     88  f58b				   .spider_control_sprite_y
     89  f58b		       c4 9d		      cpy	SpiderPos+1
     90  f58d		       90 04		      bcc	.spider_control_sprite_down
     91  f58f		       f0 09		      beq	.spider_control_sprite_store
     92  f591		       b0 05		      bcs	.spider_control_sprite_up
     93  f593
     94  f593				   .spider_control_sprite_down
     95  f593		       09 10		      ora	#%00010000
     96  f595		       4c 9a f5 	      jmp	.spider_control_sprite_store
     97  f598
     98  f598				   .spider_control_sprite_up
     99  f598		       09 20		      ora	#%00100000
    100  f59a
    101  f59a				   .spider_control_sprite_store
    102  f59a		       c9 00		      cmp	#%00000000
    103  f59c		       f0 02		      beq	.spider_control_boundary
    104  f59e		       85 9e		      sta	SpiderCtrl
    105  f5a0
    106  f5a0				   .spider_control_boundary
    107  f5a0							; Check Playfield Boundaries
    108  f5a0
    109  f5a0				   .spider_control_boundary_left
    110  f5a0		       e0 03		      cpx	#SPIDER_VEL_X+1
    111  f5a2		       b0 05		      bcs	.spider_control_boundary_right
    112  f5a4		       a2 03		      ldx	#SPIDER_VEL_X+1
    113  f5a6		       4c af f5 	      jmp	.spider_control_boundary_top
    114  f5a9
    115  f5a9				   .spider_control_boundary_right
    116  f5a9		       e0 7e		      cpx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    117  f5ab		       90 02		      bcc	.spider_control_boundary_top
    118  f5ad		       a2 7e		      ldx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    119  f5af
    120  f5af				   .spider_control_boundary_top
    121  f5af		       c0 03		      cpy	#SPIDER_VEL_X+1
    122  f5b1		       b0 05		      bcs	.spider_control_boundary_bottom
    123  f5b3		       a0 03		      ldy	#SPIDER_VEL_X+1
    124  f5b5		       4c be f5 	      jmp	.spider_control_store
    125  f5b8
    126  f5b8				   .spider_control_boundary_bottom
    127  f5b8		       c0 b1		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    128  f5ba		       90 02		      bcc	.spider_control_store
    129  f5bc		       a0 b1		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    130  f5be
    131  f5be				   .spider_control_store
    132  f5be							; Store new position
    133  f5be		       86 9c		      stx	SpiderPos
    134  f5c0		       84 9d		      sty	SpiderPos+1
    135  f5c2
    136  f5c2				   .spider_control_sprite_assign
    137  f5c2							; Skip if no change
    138  f5c2		       c9 00		      cmp	#%00000000
    139  f5c4		       f0 75		      beq	.spider_control_return
    140  f5c6
    141  f5c6				   .spider_control_sprite_assign_left
    142  f5c6		       c9 80		      cmp	#%10000000
    143  f5c8		       d0 0b		      bne	.spider_control_sprite_assign_right
      0  f5ca					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*6
      1  f5ca				   .POINTER   SET	SpiderPtr
      2  f5ca				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*6
      3  f5ca
      4  f5ca		       a9 ce		      LDA	#<.ADDRESS
      5  f5cc		       85 9a		      STA	.POINTER
      6  f5ce		       a9 f6		      LDA	#>.ADDRESS
      7  f5d0		       85 9b		      STA	.POINTER+1
      8  f5d2
    145  f5d2		       4c 3b f6 	      jmp	.spider_control_return
    146  f5d5
    147  f5d5				   .spider_control_sprite_assign_right
    148  f5d5		       c9 40		      cmp	#%01000000
    149  f5d7		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f5d9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f5d9				   .POINTER   SET	SpiderPtr
      2  f5d9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f5d9
      4  f5d9		       a9 ae		      LDA	#<.ADDRESS
      5  f5db		       85 9a		      STA	.POINTER
      6  f5dd		       a9 f6		      LDA	#>.ADDRESS
      7  f5df		       85 9b		      STA	.POINTER+1
      8  f5e1
    151  f5e1		       4c 3b f6 	      jmp	.spider_control_return
    152  f5e4
    153  f5e4				   .spider_control_sprite_assign_top
    154  f5e4		       c9 20		      cmp	#%00100000
    155  f5e6		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f5e8					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f5e8				   .POINTER   SET	SpiderPtr
      2  f5e8				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f5e8
      4  f5e8		       a9 9e		      LDA	#<.ADDRESS
      5  f5ea		       85 9a		      STA	.POINTER
      6  f5ec		       a9 f6		      LDA	#>.ADDRESS
      7  f5ee		       85 9b		      STA	.POINTER+1
      8  f5f0
    157  f5f0		       4c 3b f6 	      jmp	.spider_control_return
    158  f5f3
    159  f5f3				   .spider_control_sprite_assign_bottom
    160  f5f3		       c9 10		      cmp	#%00010000
    161  f5f5		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f5f7					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f5f7				   .POINTER   SET	SpiderPtr
      2  f5f7				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f5f7
      4  f5f7		       a9 be		      LDA	#<.ADDRESS
      5  f5f9		       85 9a		      STA	.POINTER
      6  f5fb		       a9 f6		      LDA	#>.ADDRESS
      7  f5fd		       85 9b		      STA	.POINTER+1
      8  f5ff
    163  f5ff		       4c 3b f6 	      jmp	.spider_control_return
    164  f602
    165  f602				   .spider_control_sprite_assign_top_right
    166  f602		       c9 60		      cmp	#%01100000
    167  f604		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f606					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f606				   .POINTER   SET	SpiderPtr
      2  f606				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f606
      4  f606		       a9 a6		      LDA	#<.ADDRESS
      5  f608		       85 9a		      STA	.POINTER
      6  f60a		       a9 f6		      LDA	#>.ADDRESS
      7  f60c		       85 9b		      STA	.POINTER+1
      8  f60e
    169  f60e		       4c 3b f6 	      jmp	.spider_control_return
    170  f611
    171  f611				   .spider_control_sprite_assign_bottom_right
    172  f611		       c9 50		      cmp	#%01010000
    173  f613		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f615					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f615				   .POINTER   SET	SpiderPtr
      2  f615				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f615
      4  f615		       a9 b6		      LDA	#<.ADDRESS
      5  f617		       85 9a		      STA	.POINTER
      6  f619		       a9 f6		      LDA	#>.ADDRESS
      7  f61b		       85 9b		      STA	.POINTER+1
      8  f61d
    175  f61d		       4c 3b f6 	      jmp	.spider_control_return
    176  f620
    177  f620				   .spider_control_sprite_assign_bottom_left
    178  f620		       c9 90		      cmp	#%10010000
    179  f622		       d0 0b		      bne	.spider_control_sprite_assign_top_left
      0  f624					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*5
      1  f624				   .POINTER   SET	SpiderPtr
      2  f624				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*5
      3  f624
      4  f624		       a9 c6		      LDA	#<.ADDRESS
      5  f626		       85 9a		      STA	.POINTER
      6  f628		       a9 f6		      LDA	#>.ADDRESS
      7  f62a		       85 9b		      STA	.POINTER+1
      8  f62c
    181  f62c		       4c 3b f6 	      jmp	.spider_control_return
    182  f62f
    183  f62f				   .spider_control_sprite_assign_top_left
    184  f62f		       c9 a0		      cmp	#%10100000
    185  f631		       d0 08		      bne	.spider_control_return
      0  f633					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*7
      1  f633				   .POINTER   SET	SpiderPtr
      2  f633				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*7
      3  f633
      4  f633		       a9 d6		      LDA	#<.ADDRESS
      5  f635		       85 9a		      STA	.POINTER
      6  f637		       a9 f6		      LDA	#>.ADDRESS
      7  f639		       85 9b		      STA	.POINTER+1
      8  f63b
    187  f63b
    188  f63b				   .spider_control_return
    189  f63b		       60		      rts
    190  f63c
    191  f63c				   SpiderPosition
    192  f63c
    193  f63c							; Set Position
    194  f63c		       a2 00		      ldx	#0	; Object (player0)
    195  f63e		       a5 9c		      lda	SpiderPos	; X Position
    196  f640		       20 00 f0 	      jsr	PosObject
    197  f643
    198  f643		       60		      rts
    199  f644
    200  f644							; Scanline Draw
    201  f644
    202  f644				   SpiderDrawStart
    203  f644
    204  f644							; Set player 0 to be double size
    205  f644							; and missile 0 to be 4 clock size
    206  f644		       a5 81		      lda	NuSiz0
    207  f646		       09 07		      ora	#%00000111
    208  f648		       85 81		      sta	NuSiz0
    209  f64a		       85 04		      sta	NUSIZ0
    210  f64c
    211  f64c							; Set sprite color
    212  f64c		       a9 56		      lda	#SPIDER_COLOR
    213  f64e		       85 06		      sta	COLUP0
    214  f650
    215  f650							; Determine if we need to use vertical delay (odd line)
    216  f650		       a5 9d		      lda	SpiderPos+1	; Y Position
    217  f652		       4a		      lsr
    218  f653		       b0 05		      bcs	.spider_draw_start_nodelay
    219  f655
    220  f655		       a0 01		      ldy	#1
    221  f657		       4c 5c f6 	      jmp	.spider_draw_start_set_delay
    222  f65a
    223  f65a				   .spider_draw_start_nodelay
    224  f65a		       a0 00		      ldy	#0
    225  f65c
    226  f65c				   .spider_draw_start_set_delay
    227  f65c		       84 25		      sty	VDELP0
    228  f65e
    229  f65e				   .spider_draw_start_pos
    230  f65e							; Calculate starting position
    231  f65e		       18		      clc
    232  f65f		       69 10		      adc	#SPIDER_SIZE
    233  f661		       85 a0		      sta	SpiderDrawPos
    234  f663
    235  f663							; Initialize sprite index
    236  f663		       a9 00		      lda	#0
    237  f665		       85 9f		      sta	SpiderIndex
    238  f667
    239  f667		       60		      rts
    240  f668
    241  f668				   SpiderDraw
    242  f668
    243  f668		       a4 9f		      ldy	SpiderIndex
    244  f66a		       c0 10		      cpy	#(SPIDER_SPRITE_SIZE*2)
    245  f66c		       f0 1f		      beq	.spider_draw_blank	; At end of sprite
    246  f66e		       b0 28		      bcs	.spider_draw_return	; Completed drawing sprite
    247  f670		       c0 00		      cpy	#0
    248  f672		       d0 06		      bne	.spider_draw_line
    249  f674
    250  f674							; Divide y in half
    251  f674		       8a		      txa
    252  f675		       4a		      lsr
    253  f676
    254  f676		       e5 a0		      sbc	SpiderDrawPos
    255  f678		       10 1e		      bpl	.spider_draw_return	; Not yet to draw sprite
    256  f67a
    257  f67a				   .spider_draw_line
    258  f67a		       98		      tya
    259  f67b		       4a		      lsr
    260  f67c		       b0 09		      bcs	.spider_draw_skip
    261  f67e		       a8		      tay
    262  f67f
    263  f67f		       b1 9a		      lda	(SpiderPtr),y
    264  f681		       85 1b		      sta	GRP0
    265  f683
    266  f683							; Using this for now until we have another sprite
    267  f683		       a9 00		      lda	#0
    268  f685		       85 1c		      sta	GRP1
    269  f687
    270  f687				   .spider_draw_skip
    271  f687		       a4 9f		      ldy	SpiderIndex
    272  f689		       c8		      iny
    273  f68a		       84 9f		      sty	SpiderIndex
    274  f68c		       60		      rts		; Early return
    275  f68d
    276  f68d				   .spider_draw_blank
    277  f68d		       a9 00		      lda	#0
    278  f68f		       85 1b		      sta	GRP0
    279  f691
    280  f691							; Using this for now until we have another sprite
    281  f691		       a9 00		      lda	#0
    282  f693		       85 1c		      sta	GRP1
    283  f695
    284  f695							; Push index to be one above
    285  f695		       c8		      iny
    286  f696		       84 9f		      sty	SpiderIndex
    287  f698
    288  f698				   .spider_draw_return
    289  f698		       60		      rts
    290  f699
    291  f699				   SpiderClean
    292  f699
    293  f699							; Clear out Player0 sprite
    294  f699		       a9 00		      lda	#0
    295  f69b		       85 1b		      sta	GRP0
    296  f69d
    297  f69d		       60		      rts
    298  f69e
    299  f69e							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f69e					      include	"objects/spider_sprite.asm"
      1  f69e				   SpiderSprite
      2  f69e
      3  f69e		       99		      .BYTE.b	%10011001
      4  f69f		       bd		      .BYTE.b	%10111101
      5  f6a0		       99		      .BYTE.b	%10011001
      6  f6a1		       7e		      .BYTE.b	%01111110
      7  f6a2		       3c		      .BYTE.b	%00111100
      8  f6a3		       7e		      .BYTE.b	%01111110
      9  f6a4		       bd		      .BYTE.b	%10111101
     10  f6a5		       99		      .BYTE.b	%10011001
     11  f6a6
     12  f6a6		       0b		      .BYTE.b	%00001011
     13  f6a7		       13		      .BYTE.b	%00010011
     14  f6a8		       1c		      .BYTE.b	%00011100
     15  f6a9		       2d		      .BYTE.b	%00101101
     16  f6aa		       f6		      .BYTE.b	%11110110
     17  f6ab		       b8		      .BYTE.b	%10111000
     18  f6ac		       10		      .BYTE.b	%00010000
     19  f6ad		       30		      .BYTE.b	%00110000
     20  f6ae
     21  f6ae		       c7		      .BYTE.b	%11000111
     22  f6af		       28		      .BYTE.b	%00101000
     23  f6b0		       7a		      .BYTE.b	%01111010
     24  f6b1		       ff		      .BYTE.b	%11111111
     25  f6b2		       ff		      .BYTE.b	%11111111
     26  f6b3		       7a		      .BYTE.b	%01111010
     27  f6b4		       28		      .BYTE.b	%00101000
     28  f6b5		       c7		      .BYTE.b	%11000111
     29  f6b6
     30  f6b6		       30		      .BYTE.b	%00110000
     31  f6b7		       10		      .BYTE.b	%00010000
     32  f6b8		       b8		      .BYTE.b	%10111000
     33  f6b9		       f6		      .BYTE.b	%11110110
     34  f6ba		       2d		      .BYTE.b	%00101101
     35  f6bb		       1c		      .BYTE.b	%00011100
     36  f6bc		       13		      .BYTE.b	%00010011
     37  f6bd		       0b		      .BYTE.b	%00001011
     38  f6be
     39  f6be		       99		      .BYTE.b	%10011001
     40  f6bf		       bd		      .BYTE.b	%10111101
     41  f6c0		       7e		      .BYTE.b	%01111110
     42  f6c1		       3c		      .BYTE.b	%00111100
     43  f6c2		       7e		      .BYTE.b	%01111110
     44  f6c3		       99		      .BYTE.b	%10011001
     45  f6c4		       bd		      .BYTE.b	%10111101
     46  f6c5		       99		      .BYTE.b	%10011001
     47  f6c6
     48  f6c6		       0c		      .BYTE.b	%00001100
     49  f6c7		       08		      .BYTE.b	%00001000
     50  f6c8		       1d		      .BYTE.b	%00011101
     51  f6c9		       6f		      .BYTE.b	%01101111
     52  f6ca		       b4		      .BYTE.b	%10110100
     53  f6cb		       38		      .BYTE.b	%00111000
     54  f6cc		       c8		      .BYTE.b	%11001000
     55  f6cd		       d0		      .BYTE.b	%11010000
     56  f6ce
     57  f6ce		       e3		      .BYTE.b	%11100011
     58  f6cf		       14		      .BYTE.b	%00010100
     59  f6d0		       5e		      .BYTE.b	%01011110
     60  f6d1		       ff		      .BYTE.b	%11111111
     61  f6d2		       ff		      .BYTE.b	%11111111
     62  f6d3		       5e		      .BYTE.b	%01011110
     63  f6d4		       14		      .BYTE.b	%00010100
     64  f6d5		       e3		      .BYTE.b	%11100011
     65  f6d6
     66  f6d6		       d0		      .BYTE.b	%11010000
     67  f6d7		       c8		      .BYTE.b	%11001000
     68  f6d8		       38		      .BYTE.b	%00111000
     69  f6d9		       b4		      .BYTE.b	%10110100
     70  f6da		       6f		      .BYTE.b	%01101111
     71  f6db		       1d		      .BYTE.b	%00011101
     72  f6dc		       08		      .BYTE.b	%00001000
     73  f6dd		       0c		      .BYTE.b	%00001100
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f6de					      include	"objects/line.asm"
      1  f6de							;================
      2  f6de							; Line (ball)
      3  f6de							;================
      4  f6de
      5  f6de							; Constants
      6  f6de
      7  f6de		       00 04	   LINE_SIZE  =	4
      8  f6de		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f6de		       00 04	   LINE_VEL_X =	4
     10  f6de		       00 04	   LINE_VEL_Y =	4
     11  f6de
     12  f6de		       00 08	   LINE_AUDIO_C =	8
     13  f6de		       00 01	   LINE_AUDIO_F =	1
     14  f6de		       00 04	   LINE_AUDIO_V =	4
     15  f6de
     16  f6de		       00 08	   LINE_SAMPLE_LEN =	8
     17  f6de		       00 03	   LINE_SAMPLE_C =	3
     18  f6de		       00 01	   LINE_SAMPLE_F =	1
     19  f6de		       00 04	   LINE_SAMPLE_V =	4
     20  f6de
     21  f6de							; Initialization
     22  f6de
     23  f6de				   LineInit
     24  f6de
     25  f6de							; Initial Line Control
     26  f6de		       a9 00		      lda	#0
     27  f6e0		       85 a1		      sta	LineEnabled
     28  f6e2		       85 a2		      sta	LinePos+0
     29  f6e4		       85 a3		      sta	LinePos+1
     30  f6e6		       85 a4		      sta	LineVelocity+0
     31  f6e8		       85 a5		      sta	LineVelocity+1
     32  f6ea		       85 a6		      sta	LineStartPos+0
     33  f6ec		       85 a7		      sta	LineStartPos+1
     34  f6ee		       85 a8		      sta	LineDrawPos+0
     35  f6f0		       85 a9		      sta	LineDrawPos+1
     36  f6f2
     37  f6f2		       60		      rts
     38  f6f3
     39  f6f3							; Frame Update
     40  f6f3
     41  f6f3				   LineUpdate
     42  f6f3		       20 fd f6 	      jsr	LineControl
     43  f6f6		       20 af f7 	      jsr	LineObject
     44  f6f9		       20 f6 f7 	      jsr	LineCollision
     45  f6fc		       60		      rts
     46  f6fd
     47  f6fd				   LineControl
     48  f6fd
     49  f6fd							; Check if Fire Button on controller 1 is pressed
     50  f6fd		       a5 0c		      lda	INPT4
     51  f6ff		       30 0a		      bmi	.line_control_skip
     52  f701
     53  f701		       24 a1		      bit	LineEnabled
     54  f703		       30 06		      bmi	.line_control_skip
     55  f705
     56  f705		       a5 9e		      lda	SpiderCtrl
     57  f707		       c9 00		      cmp	#0
     58  f709		       d0 03		      bne	.line_control_fire
     59  f70b
     60  f70b				   .line_control_skip
     61  f70b		       4c ae f7 	      jmp	.line_control_return
     62  f70e
     63  f70e				   .line_control_fire
     64  f70e		       20 51 f8 	      jsr	LineEnable
     65  f711
     66  f711				   .line_control_x
     67  f711		       a5 9e		      lda	SpiderCtrl
     68  f713		       29 c0		      and	#%11000000
     69  f715		       f0 0e		      beq	.line_control_x_none
     70  f717				   .line_control_x_left
     71  f717		       c9 80		      cmp	#%10000000
     72  f719		       d0 05		      bne	.line_control_x_right
     73  f71b
     74  f71b		       a9 fc		      lda	#-LINE_VEL_X
     75  f71d		       4c 27 f7 	      jmp	.line_control_x_store
     76  f720				   .line_control_x_right
     77  f720		       a9 04		      lda	#LINE_VEL_X
     78  f722		       4c 27 f7 	      jmp	.line_control_x_store
     79  f725				   .line_control_x_none
     80  f725		       a9 00		      lda	#0
     81  f727				   .line_control_x_store
     82  f727		       85 a4		      sta	LineVelocity
     83  f729
     84  f729				   .line_control_y
     85  f729		       a5 9e		      lda	SpiderCtrl
     86  f72b		       29 30		      and	#%00110000
     87  f72d		       f0 0e		      beq	.line_control_y_none
     88  f72f				   .line_control_y_up
     89  f72f		       c9 20		      cmp	#%00100000
     90  f731		       d0 05		      bne	.line_control_y_down
     91  f733
     92  f733		       a9 04		      lda	#LINE_VEL_Y
     93  f735		       4c 3f f7 	      jmp	.line_control_y_store
     94  f738				   .line_control_y_down
     95  f738		       a9 fc		      lda	#-LINE_VEL_Y
     96  f73a		       4c 3f f7 	      jmp	.line_control_y_store
     97  f73d				   .line_control_y_none
     98  f73d		       a9 00		      lda	#0
     99  f73f				   .line_control_y_store
    100  f73f		       85 a5		      sta	LineVelocity+1
    101  f741
    102  f741				   .line_control_position
    103  f741
    104  f741		       a2 00		      ldx	#0	; offsetX
    105  f743		       a0 00		      ldy	#0	; offsetY
    106  f745
    107  f745		       a5 9e		      lda	SpiderCtrl
    108  f747		       29 f0		      and	#%11110000
    109  f749
    110  f749				   .line_control_position_left
    111  f749		       c9 80		      cmp	#%10000000
    112  f74b		       d0 07		      bne	.line_control_position_right
    113  f74d
    114  f74d		       a2 04		      ldx	#LINE_SIZE
    115  f74f		       a0 10		      ldy	#SPIDER_SIZE
    116  f751		       4c 96 f7 	      jmp	.line_control_position_store
    117  f754
    118  f754				   .line_control_position_right
    119  f754		       c9 40		      cmp	#%01000000
    120  f756		       d0 07		      bne	.line_control_position_top
    121  f758
    122  f758		       a2 20		      ldx	#SPIDER_SIZE*2
    123  f75a		       a0 10		      ldy	#SPIDER_SIZE
    124  f75c		       4c 96 f7 	      jmp	.line_control_position_store
    125  f75f
    126  f75f				   .line_control_position_top
    127  f75f		       c9 20		      cmp	#%00100000
    128  f761		       d0 07		      bne	.line_control_position_bottom
    129  f763
    130  f763		       a2 10		      ldx	#SPIDER_SIZE
    131  f765		       a0 20		      ldy	#SPIDER_SIZE*2
    132  f767		       4c 96 f7 	      jmp	.line_control_position_store
    133  f76a
    134  f76a				   .line_control_position_bottom
    135  f76a		       c9 10		      cmp	#%00010000
    136  f76c		       d0 05		      bne	.line_control_position_top_right
    137  f76e
    138  f76e		       a2 10		      ldx	#SPIDER_SIZE
    139  f770		       4c 96 f7 	      jmp	.line_control_position_store
    140  f773
    141  f773				   .line_control_position_top_right
    142  f773		       c9 60		      cmp	#%01100000
    143  f775		       d0 07		      bne	.line_control_position_bottom_right
    144  f777
    145  f777		       a2 20		      ldx	#SPIDER_SIZE*2
    146  f779		       a0 20		      ldy	#SPIDER_SIZE*2
    147  f77b		       4c 96 f7 	      jmp	.line_control_position_store
    148  f77e
    149  f77e				   .line_control_position_bottom_right
    150  f77e		       c9 50		      cmp	#%01010000
    151  f780		       d0 05		      bne	.line_control_position_bottom_left
    152  f782
    153  f782		       a2 20		      ldx	#SPIDER_SIZE*2
    154  f784		       4c 96 f7 	      jmp	.line_control_position_store
    155  f787
    156  f787				   .line_control_position_bottom_left
    157  f787		       c9 90		      cmp	#%10010000
    158  f789		       d0 03		      bne	.line_control_position_top_left
    159  f78b
    160  f78b							; No Offset
    161  f78b		       4c 96 f7 	      jmp	.line_control_position_store
    162  f78e
    163  f78e				   .line_control_position_top_left
    164  f78e		       c9 a0		      cmp	#%10100000
    165  f790		       d0 04		      bne	.line_control_position_store
    166  f792
    167  f792		       a2 04		      ldx	#LINE_SIZE
    168  f794		       a0 20		      ldy	#SPIDER_SIZE*2
    169  f796
    170  f796				   .line_control_position_store
    171  f796
    172  f796							; Apply offsetX to playerX
    173  f796		       a5 9c		      lda	SpiderPos
    174  f798		       86 83		      stx	Temp
    175  f79a		       18		      clc
    176  f79b		       65 83		      adc	Temp
    177  f79d		       aa		      tax
    178  f79e
    179  f79e							; Apply offsetY to playerY
    180  f79e		       a5 9d		      lda	SpiderPos+1
    181  f7a0		       84 83		      sty	Temp
    182  f7a2		       18		      clc
    183  f7a3		       65 83		      adc	Temp
    184  f7a5		       a8		      tay
    185  f7a6
    186  f7a6		       86 a2		      stx	LinePos
    187  f7a8		       84 a3		      sty	LinePos+1
    188  f7aa		       86 a6		      stx	LineStartPos
    189  f7ac		       84 a7		      sty	LineStartPos+1
    190  f7ae
    191  f7ae				   .line_control_return
    192  f7ae		       60		      rts
    193  f7af
    194  f7af				   LineObject
    195  f7af
    196  f7af							; Check if line is enabled
    197  f7af		       24 a1		      bit	LineEnabled
    198  f7b1		       10 42		      bpl	.line_object_return
    199  f7b3
    200  f7b3							; Load position
    201  f7b3		       a6 a2		      ldx	LinePos
    202  f7b5		       a4 a3		      ldy	LinePos+1
    203  f7b7
    204  f7b7				   .line_object_distance
    205  f7b7
    206  f7b7							; Check distance from player with absolute value differences
    207  f7b7
    208  f7b7				   .line_object_distance_x
    209  f7b7		       8a		      txa
    210  f7b8		       18		      clc
    211  f7b9		       e5 a6		      sbc	LineStartPos
    212  f7bb		       b0 04		      bcs	.line_object_distance_x_check
    213  f7bd		       49 ff		      eor	#$FF	; C flag is clear here
    214  f7bf		       69 01		      adc	#$01	; form two's complement
    215  f7c1				   .line_object_distance_x_check		; Jumps to if positive
    216  f7c1		       c9 40		      cmp	#LINE_DISTANCE
    217  f7c3		       b0 2d		      bcs	.line_object_disable
    218  f7c5
    219  f7c5				   .line_object_distance_y
    220  f7c5		       98		      tya
    221  f7c6		       18		      clc
    222  f7c7		       e5 a7		      sbc	LineStartPos+1
    223  f7c9		       b0 04		      bcs	.line_object_distance_y_check
    224  f7cb		       49 ff		      eor	#$FF	; C flag is clear here
    225  f7cd		       69 01		      adc	#$01	; form two's complement
    226  f7cf				   .line_object_distance_y_check		; Jumps to if positive
    227  f7cf		       c9 40		      cmp	#LINE_DISTANCE
    228  f7d1		       b0 1f		      bcs	.line_object_disable
    229  f7d3
    230  f7d3				   .line_object_boundary
    231  f7d3				   .line_object_boundary_left
    232  f7d3		       e0 04		      cpx	#LINE_VEL_X
    233  f7d5		       90 1b		      bcc	.line_object_disable
    234  f7d7				   .line_object_boundary_right
    235  f7d7		       e0 9c		      cpx	#160-LINE_VEL_X
    236  f7d9		       b0 17		      bcs	.line_object_disable
    237  f7db				   .line_object_boundary_bottom
    238  f7db		       c0 04		      cpy	#LINE_VEL_Y
    239  f7dd		       90 13		      bcc	.line_object_disable
    240  f7df				   .line_object_boundary_top
    241  f7df		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    242  f7e1		       b0 0f		      bcs	.line_object_disable
    243  f7e3
    244  f7e3				   .line_object_velocity
    245  f7e3
    246  f7e3							; Apply Velocity
    247  f7e3		       8a		      txa
    248  f7e4		       18		      clc
    249  f7e5		       65 a4		      adc	LineVelocity
    250  f7e7		       85 a2		      sta	LinePos
    251  f7e9
    252  f7e9		       98		      tya
    253  f7ea		       18		      clc
    254  f7eb		       65 a5		      adc	LineVelocity+1
    255  f7ed		       85 a3		      sta	LinePos+1
    256  f7ef
    257  f7ef		       4c f5 f7 	      jmp	.line_object_return
    258  f7f2
    259  f7f2				   .line_object_disable
    260  f7f2		       20 5f f8 	      jsr	LineDisable
    261  f7f5
    262  f7f5				   .line_object_return
    263  f7f5		       60		      rts
    264  f7f6
    265  f7f6				   LineCollision
    266  f7f6
    267  f7f6		       a9 78		      lda	#BUG_STUN_LENGTH
    268  f7f8
    269  f7f8				   .line_collision_m0
    270  f7f8		       24 04		      bit	CXM0FB
    271  f7fa		       50 08		      bvc	.line_collision_m1
    272  f7fc
    273  f7fc							; Set stun timer
    274  f7fc		       85 aa		      sta	BugStunned+0
    275  f7fe
    276  f7fe							; Disable line
    277  f7fe		       20 5f f8 	      jsr	LineDisable
    278  f801		       4c 0d f8 	      jmp	.line_collision_sample
    279  f804
    280  f804				   .line_collision_m1
    281  f804		       24 05		      bit	CXM1FB
    282  f806		       50 08		      bvc	.line_collision_return
    283  f808
    284  f808							; Set stun timer
    285  f808		       85 ab		      sta	BugStunned+1
    286  f80a
    287  f80a							; Disable line
    288  f80a		       20 5f f8 	      jsr	LineDisable
    289  f80d
    290  f80d				   .line_collision_sample
    291  f80d		       20 83 f8 	      jsr	LineSample
    292  f810
    293  f810				   .line_collision_return
    294  f810		       60		      rts
    295  f811
    296  f811				   LinePosition
    297  f811
    298  f811							; Set Line Position
    299  f811		       a2 04		      ldx	#4	; Object (ball)
    300  f813		       a5 a2		      lda	LinePos	; X Position
    301  f815		       20 00 f0 	      jsr	PosObject
    302  f818
    303  f818		       60		      rts
    304  f819
    305  f819							; Scanline Draw
    306  f819
    307  f819				   LineDrawStart
    308  f819
    309  f819							; Set ball size to be 4 clocks (4/5 bits)
    310  f819		       a5 80		      lda	CtrlPf
    311  f81b		       29 cf		      and	#%11001111
    312  f81d		       09 20		      ora	#%00100000
    313  f81f		       85 80		      sta	CtrlPf
    314  f821		       85 0a		      sta	CTRLPF
    315  f823
    316  f823							; Determine if we need to use vertical delay (oven line)
    317  f823		       a5 a3		      lda	LinePos+1
    318  f825		       4a		      lsr
    319  f826		       90 05		      bcc	.line_draw_start_nodelay
    320  f828
    321  f828		       a0 01		      ldy	#1
    322  f82a		       4c 2f f8 	      jmp	.line_draw_start_set_delay
    323  f82d
    324  f82d				   .line_draw_start_nodelay
    325  f82d		       a0 00		      ldy	#0
    326  f82f
    327  f82f				   .line_draw_start_set_delay
    328  f82f		       84 27		      sty	VDELBL
    329  f831
    330  f831				   .line_draw_start_pos
    331  f831							; Calculate starting position
    332  f831		       18		      clc
    333  f832		       85 a8		      sta	LineDrawPos+0
    334  f834		       69 02		      adc	#LINE_SIZE/2
    335  f836		       85 a9		      sta	LineDrawPos+1
    336  f838
    337  f838		       60		      rts
    338  f839
    339  f839				   LineDraw
    340  f839
    341  f839		       a0 00		      ldy	#%00000000
    342  f83b
    343  f83b							; Check if visible
    344  f83b		       24 a1		      bit	LineEnabled
    345  f83d		       10 0a		      bpl	.line_draw_off
    346  f83f
    347  f83f							; Load half scanline
    348  f83f							;    lda Temp+1
    349  f83f
    350  f83f							; Top
    351  f83f		       c5 a9		      cmp	LineDrawPos+1
    352  f841		       b0 06		      bcs	.line_draw_off
    353  f843
    354  f843							; Bottom
    355  f843		       c5 a8		      cmp	LineDrawPos+0
    356  f845		       90 02		      bcc	.line_draw_off
    357  f847
    358  f847				   .line_draw_on
    359  f847		       a0 02		      ldy	#%00000010
    360  f849
    361  f849				   .line_draw_off
    362  f849		       84 1f		      sty	ENABL
    363  f84b
    364  f84b		       60		      rts
    365  f84c
    366  f84c				   LineClean
    367  f84c
    368  f84c							; Clear out Line
    369  f84c		       a9 00		      lda	#0
    370  f84e		       85 1f		      sta	ENABL
    371  f850
    372  f850		       60		      rts
    373  f851
    374  f851				   LineEnable
    375  f851		       a9 80		      lda	#%10000000
    376  f853		       85 a1		      sta	LineEnabled
    377  f855
    378  f855		       a5 90		      lda	SampleStep
    379  f857		       c9 00		      cmp	#0
    380  f859		       d0 03		      bne	.line_enable_return
    381  f85b
    382  f85b		       20 6d f8 	      jsr	LineAudioPlay
    383  f85e
    384  f85e				   .line_enable_return
    385  f85e		       60		      rts
    386  f85f
    387  f85f				   LineDisable
    388  f85f		       a9 00		      lda	#0
    389  f861		       85 a1		      sta	LineEnabled
    390  f863
    391  f863		       a5 90		      lda	SampleStep
    392  f865		       c9 00		      cmp	#0
    393  f867		       d0 03		      bne	.line_disable_return
    394  f869
    395  f869		       20 7a f8 	      jsr	LineAudioMute
    396  f86c
    397  f86c				   .line_disable_return
    398  f86c		       60		      rts
    399  f86d
    400  f86d				   LineAudioPlay
    401  f86d		       a9 08		      lda	#LINE_AUDIO_C
    402  f86f		       85 16		      sta	AUDC1
    403  f871		       a9 01		      lda	#LINE_AUDIO_F
    404  f873		       85 18		      sta	AUDF1
    405  f875		       a9 04		      lda	#LINE_AUDIO_V
    406  f877		       85 1a		      sta	AUDV1
    407  f879		       60		      rts
    408  f87a
    409  f87a				   LineAudioMute
    410  f87a		       a9 00		      lda	#0
    411  f87c		       85 1a		      sta	AUDV1
    412  f87e		       85 18		      sta	AUDF1
    413  f880		       85 16		      sta	AUDC1
    414  f882		       60		      rts
    415  f883
    416  f883				   LineSample
    417  f883		       a9 08		      lda	#LINE_SAMPLE_LEN
    418  f885		       85 90		      sta	SampleStep
    419  f887		       a9 03		      lda	#LINE_SAMPLE_C
    420  f889		       85 16		      sta	AUDC1
    421  f88b		       a9 01		      lda	#LINE_SAMPLE_F
    422  f88d		       85 18		      sta	AUDF1
    423  f88f		       a9 04		      lda	#LINE_SAMPLE_V
    424  f891		       85 1a		      sta	AUDV1
    425  f893		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f894					      include	"objects/bug.asm"
      1  f894							;======================
      2  f894							; Bugs (missiles 0 & 1)
      3  f894							;======================
      4  f894
      5  f894							; Constants
      6  f894
      7  f894		       00 08	   BUG_SIZE   =	8
      8  f894		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f894		       00 02	   BUG_SPEED  =	2
     10  f894		       00 78	   BUG_STUN_LENGTH =	120
     11  f894		       00 04	   BUG_POINTS =	4
     12  f894
     13  f894		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f894		       00 38	   BUG_COLOR_STUN =	#$38
     15  f894
     16  f894		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f894		       00 03	   BUG_SAMPLE_C =	3
     18  f894		       00 14	   BUG_SAMPLE_F =	20
     19  f894		       00 04	   BUG_SAMPLE_V =	4
     20  f894
     21  f894							; Initialization
     22  f894
     23  f894				   BugInit
     24  f894
     25  f894							; Initialize Bugs
     26  f894		       a2 01		      ldx	#1
     27  f896
     28  f896				   .bug_init_loop
     29  f896		       20 9d f8 	      jsr	BugReset
     30  f899
     31  f899		       ca		      dex
     32  f89a		       10 fa		      bpl	.bug_init_loop
     33  f89c
     34  f89c		       60		      rts
     35  f89d
     36  f89d				   BugReset		; x = bug (0 or 1)
     37  f89d
     38  f89d							; Set random position
     39  f89d		       20 13 f0 	      jsr	Random
     40  f8a0
     41  f8a0		       a5 85		      lda	Rand8
     42  f8a2		       29 7f		      and	#$7f
     43  f8a4		       95 ac		      sta	BugPosX,x
     44  f8a6
     45  f8a6		       a5 86		      lda	Rand16
     46  f8a8		       29 7f		      and	#$7f
     47  f8aa		       95 ae		      sta	BugPosY,x
     48  f8ac
     49  f8ac							; Set as active
     50  f8ac		       a9 00		      lda	#0
     51  f8ae		       95 aa		      sta	BugStunned,x
     52  f8b0
     53  f8b0							; Reset Color
     54  f8b0		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     55  f8b2		       95 b0		      sta	BugColor,x
     56  f8b4
     57  f8b4		       60		      rts
     58  f8b5
     59  f8b5							; Frame Update
     60  f8b5
     61  f8b5				   BugUpdate
     62  f8b5
     63  f8b5		       a2 01		      ldx	#1
     64  f8b7				   .bug_update_loop
     65  f8b7		       86 83		      stx	Temp+0
     66  f8b9
     67  f8b9		       b5 aa		      lda	BugStunned,x
     68  f8bb		       c9 00		      cmp	#0
     69  f8bd		       f0 08		      beq	.bug_update_active
     70  f8bf
     71  f8bf				   .bug_update_stunned
     72  f8bf		       d6 aa		      dec	BugStunned,x
     73  f8c1		       20 37 f9 	      jsr	BugStunCollision
     74  f8c4		       4c cd f8 	      jmp	.bug_update_next
     75  f8c7
     76  f8c7				   .bug_update_active
     77  f8c7		       20 d3 f8 	      jsr	BugMovement
     78  f8ca		       20 26 f9 	      jsr	BugCollision
     79  f8cd
     80  f8cd				   .bug_update_next
     81  f8cd		       a6 83		      ldx	Temp+0
     82  f8cf		       ca		      dex
     83  f8d0		       10 e5		      bpl	.bug_update_loop
     84  f8d2
     85  f8d2		       60		      rts
     86  f8d3
     87  f8d3				   BugMovement
     88  f8d3
     89  f8d3				   .bug_movement_random
     90  f8d3		       20 13 f0 	      jsr	Random
     91  f8d6		       29 03		      and	#%00000011
     92  f8d8		       85 84		      sta	Temp+1
     93  f8da
     94  f8da				   .bug_movement_load
     95  f8da							; Load x and y values
     96  f8da		       a6 83		      ldx	Temp+0
     97  f8dc		       b5 ac		      lda	BugPosX,x
     98  f8de		       b4 ae		      ldy	BugPosY,x
     99  f8e0		       aa		      tax
    100  f8e1
    101  f8e1				   .bug_movement_x
    102  f8e1							; Alter X Position
    103  f8e1		       a5 84		      lda	Temp+1
    104  f8e3		       29 01		      and	#%00000001
    105  f8e5
    106  f8e5				   .bug_movement_x_left
    107  f8e5		       c9 01		      cmp	#1
    108  f8e7		       d0 05		      bne	.bug_movement_x_right
    109  f8e9		       ca		      dex
    110  f8ea		       ca		      dex
    111  f8eb		       4c f0 f8 	      jmp	.bug_movement_y
    112  f8ee
    113  f8ee				   .bug_movement_x_right
    114  f8ee		       e8		      inx
    115  f8ef		       e8		      inx
    116  f8f0
    117  f8f0				   .bug_movement_y
    118  f8f0							; Alter Y Position
    119  f8f0		       a5 84		      lda	Temp+1
    120  f8f2		       29 02		      and	#%00000010
    121  f8f4		       4a		      lsr
    122  f8f5
    123  f8f5				   .bug_movement_y_up
    124  f8f5		       c9 01		      cmp	#1
    125  f8f7		       d0 05		      bne	.bug_movement_y_down
    126  f8f9		       c8		      iny
    127  f8fa		       c8		      iny
    128  f8fb		       4c 00 f9 	      jmp	.bug_movement_boundary
    129  f8fe
    130  f8fe				   .bug_movement_y_down
    131  f8fe		       88		      dey
    132  f8ff		       88		      dey
    133  f900
    134  f900				   .bug_movement_boundary
    135  f900
    136  f900				   .bug_movement_boundary_left
    137  f900		       e0 08		      cpx	#BUG_BOUNDARY
    138  f902		       b0 05		      bcs	.bug_movement_boundary_right
    139  f904		       a2 08		      ldx	#BUG_BOUNDARY
    140  f906		       4c 0f f9 	      jmp	.bug_movement_boundary_top
    141  f909
    142  f909				   .bug_movement_boundary_right
    143  f909		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    144  f90b		       90 02		      bcc	.bug_movement_boundary_top
    145  f90d		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    146  f90f
    147  f90f				   .bug_movement_boundary_top
    148  f90f		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    149  f911		       b0 05		      bcs	.bug_movement_boundary_bottom
    150  f913		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    151  f915		       4c 1e f9 	      jmp	.bug_movement_store
    152  f918
    153  f918				   .bug_movement_boundary_bottom
    154  f918		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    155  f91a		       90 02		      bcc	.bug_movement_store
    156  f91c		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    157  f91e
    158  f91e				   .bug_movement_store
    159  f91e		       8a		      txa
    160  f91f		       a6 83		      ldx	Temp+0
    161  f921		       95 ac		      sta	BugPosX,x
    162  f923		       94 ae		      sty	BugPosY,x
    163  f925
    164  f925				   .bug_movement_return
    165  f925		       60		      rts
    166  f926
    167  f926				   BugCollision
    168  f926
    169  f926		       e0 01		      cpx	#1
    170  f928		       f0 05		      beq	.bug_collision_m1
    171  f92a
    172  f92a				   .bug_collision_m0
    173  f92a							; Collision for M0 (V set)
    174  f92a		       24 00		      bit	CXM0P
    175  f92c		       70 06		      bvs	.bug_collision_active
    176  f92e		       60		      rts
    177  f92f
    178  f92f				   .bug_collision_m1
    179  f92f							; Collision for M1 (N set)
    180  f92f		       24 01		      bit	CXM1P
    181  f931		       30 01		      bmi	.bug_collision_active
    182  f933		       60		      rts
    183  f934
    184  f934				   .bug_collision_active
    185  f934		       c6 91		      dec	ScoreValue
    186  f936		       60		      rts
    187  f937
    188  f937				   BugStunCollision
    189  f937
    190  f937		       e0 01		      cpx	#1
    191  f939		       f0 05		      beq	.bug_stun_collision_m1
    192  f93b
    193  f93b				   .bug_stun_collision_m0
    194  f93b							; Collision for M0 (V set)
    195  f93b		       24 00		      bit	CXM0P
    196  f93d		       70 06		      bvs	.bug_stun_collision_active
    197  f93f		       60		      rts
    198  f940
    199  f940				   .bug_stun_collision_m1
    200  f940							; Collision for M1 (N set)
    201  f940		       24 01		      bit	CXM1P
    202  f942		       30 01		      bmi	.bug_stun_collision_active
    203  f944		       60		      rts
    204  f945
    205  f945				   .bug_stun_collision_active
    206  f945							; Add points to score
    207  f945		       18		      clc
    208  f946		       a5 92		      lda	ScoreValue+1
    209  f948		       69 04		      adc	#BUG_POINTS
    210  f94a		       85 92		      sta	ScoreValue+1
    211  f94c
    212  f94c							; Reset bug
    213  f94c		       20 9d f8 	      jsr	BugReset
    214  f94f
    215  f94f							; Play sample
    216  f94f		       20 af f9 	      jsr	BugSample
    217  f952
    218  f952		       60		      rts
    219  f953
    220  f953							; Horizontal Positioning
    221  f953
    222  f953				   BugPosition
    223  f953
    224  f953							; Set Position of each missile
    225  f953		       a0 01		      ldy	#1
    226  f955				   .bug_position
    227  f955
    228  f955							; Determine missile index
    229  f955		       18		      clc
    230  f956		       a2 02		      ldx	#2	; Missile 0/1
    231  f958		       98		      tya
    232  f959		       85 83		      sta	Temp
    233  f95b		       8a		      txa
    234  f95c		       65 83		      adc	Temp
    235  f95e		       aa		      tax
    236  f95f
    237  f95f		       b9 ac 00 	      lda	BugPosX,y
    238  f962		       20 00 f0 	      jsr	PosObject
    239  f965
    240  f965		       88		      dey
    241  f966		       10 ed		      bpl	.bug_position
    242  f968
    243  f968		       60		      rts
    244  f969
    245  f969							; Scanline Draw
    246  f969
    247  f969				   BugDrawStart
    248  f969
    249  f969							; Set missile 0 to be 4 clock size
    250  f969		       a5 81		      lda	NuSiz0
    251  f96b		       09 30		      ora	#%00110000
    252  f96d		       85 81		      sta	NuSiz0
    253  f96f		       85 04		      sta	NUSIZ0
    254  f971
    255  f971							; Set missile 1 to be 4 clock size
    256  f971		       a5 82		      lda	NuSiz1
    257  f973		       09 30		      ora	#%00110000
    258  f975		       85 82		      sta	NuSiz1
    259  f977		       85 05		      sta	NUSIZ1
    260  f979
    261  f979							; Setup half scanline positions
    262  f979		       a0 01		      ldy	#1
    263  f97b				   .bug_draw_start_pos
    264  f97b		       b9 ae 00 	      lda	BugPosY,y
    265  f97e		       4a		      lsr
    266  f97f		       99 b2 00 	      sta	BugDrawPosBottom,y
    267  f982
    268  f982		       69 04		      adc	#BUG_SIZE/2
    269  f984		       99 b4 00 	      sta	BugDrawPosTop,y
    270  f987
    271  f987		       88		      dey
    272  f988		       10 f1		      bpl	.bug_draw_start_pos
    273  f98a
    274  f98a		       60		      rts
    275  f98b
    276  f98b				   BugDraw
    277  f98b
    278  f98b							; Load half scanline
    279  f98b							;    lda Temp+1
    280  f98b
    281  f98b				   .bug_draw_0
    282  f98b		       a0 00		      ldy	#%00000000
    283  f98d
    284  f98d							; Check top and bottom y pos
    285  f98d		       c5 b4		      cmp	BugDrawPosTop+0
    286  f98f		       b0 06		      bcs	.bug_draw_0_off
    287  f991
    288  f991		       c5 b2		      cmp	BugDrawPosBottom+0
    289  f993		       90 02		      bcc	.bug_draw_0_off
    290  f995
    291  f995				   .bug_draw_0_on
    292  f995		       a0 02		      ldy	#%00000010
    293  f997
    294  f997				   .bug_draw_0_off
    295  f997		       84 1d		      sty	ENAM0
    296  f999
    297  f999				   .bug_draw_1
    298  f999		       a0 00		      ldy	#%00000000
    299  f99b
    300  f99b							; Check top and bottom y pos
    301  f99b		       c5 b5		      cmp	BugDrawPosTop+1
    302  f99d		       b0 06		      bcs	.bug_draw_1_off
    303  f99f
    304  f99f		       c5 b3		      cmp	BugDrawPosBottom+1
    305  f9a1		       90 02		      bcc	.bug_draw_1_off
    306  f9a3
    307  f9a3				   .bug_draw_1_on
    308  f9a3		       a0 02		      ldy	#%00000010
    309  f9a5
    310  f9a5				   .bug_draw_1_off
    311  f9a5		       84 1e		      sty	ENAM1
    312  f9a7
    313  f9a7				   .bug_draw_return
    314  f9a7		       60		      rts
    315  f9a8
    316  f9a8				   BugClean
    317  f9a8		       a9 00		      lda	#0
    318  f9aa		       85 1d		      sta	ENAM0
    319  f9ac		       85 1e		      sta	ENAM1
    320  f9ae		       60		      rts
    321  f9af
    322  f9af				   BugSample
    323  f9af		       a9 1e		      lda	#BUG_SAMPLE_LEN
    324  f9b1		       85 90		      sta	SampleStep
    325  f9b3		       a9 03		      lda	#BUG_SAMPLE_C
    326  f9b5		       85 16		      sta	AUDC1
    327  f9b7		       a9 14		      lda	#BUG_SAMPLE_F
    328  f9b9		       85 18		      sta	AUDF1
    329  f9bb		       a9 04		      lda	#BUG_SAMPLE_V
    330  f9bd		       85 1a		      sta	AUDV1
    331  f9bf		       60		      rts
------- FILE game.asm
     19  f9c0							;    include "objects/swatter.asm"
     20  f9c0
     21  f9c0							; Initialization
     22  f9c0
     23  f9c0				   GameInit
     24  f9c0
     25  f9c0							; Setup logic and kernel
      0  f9c0					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  f9c0				   .POINTER   SET	VBlankPtr
      2  f9c0				   .ADDRESS   SET	GameVerticalBlank
      3  f9c0
      4  f9c0		       a9 01		      LDA	#<.ADDRESS
      5  f9c2		       85 87		      STA	.POINTER
      6  f9c4		       a9 fa		      LDA	#>.ADDRESS
      7  f9c6		       85 88		      STA	.POINTER+1
      8  f9c8
      0  f9c8					      SET_POINTER	KernelPtr, GameKernel
      1  f9c8				   .POINTER   SET	KernelPtr
      2  f9c8				   .ADDRESS   SET	GameKernel
      3  f9c8
      4  f9c8		       a9 7f		      LDA	#<.ADDRESS
      5  f9ca		       85 89		      STA	.POINTER
      6  f9cc		       a9 fa		      LDA	#>.ADDRESS
      7  f9ce		       85 8a		      STA	.POINTER+1
      8  f9d0
      0  f9d0					      SET_POINTER	OverScanPtr, GameOverScan
      1  f9d0				   .POINTER   SET	OverScanPtr
      2  f9d0				   .ADDRESS   SET	GameOverScan
      3  f9d0
      4  f9d0		       a9 22		      LDA	#<.ADDRESS
      5  f9d2		       85 8b		      STA	.POINTER
      6  f9d4		       a9 fa		      LDA	#>.ADDRESS
      7  f9d6		       85 8c		      STA	.POINTER+1
      8  f9d8
     29  f9d8
     30  f9d8							; Mute Audio
     31  f9d8		       a9 00		      lda	#0
     32  f9da		       85 15		      sta	AUDC0
     33  f9dc		       85 19		      sta	AUDV0
     34  f9de		       85 17		      sta	AUDF0
     35  f9e0		       85 16		      sta	AUDC1
     36  f9e2		       85 1a		      sta	AUDV1
     37  f9e4		       85 18		      sta	AUDF1
     38  f9e6		       85 90		      sta	SampleStep
     39  f9e8
     40  f9e8							; Load Audio Settings
     41  f9e8		       a9 04		      lda	#GAME_AUDIO_VOLUME
     42  f9ea		       85 19		      sta	AUDV0
     43  f9ec
     44  f9ec							; Make it so that we play the first note immediately
     45  f9ec		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     46  f9ee		       85 8f		      sta	AudioStep
     47  f9f0		       a9 02		      lda	#2
     48  f9f2		       85 8e		      sta	FrameTimer
     49  f9f4
     50  f9f4							; Initialize Objects
     51  f9f4		       20 d6 f3 	      jsr	ScoreInit
     52  f9f7		       20 4d f5 	      jsr	SpiderInit
     53  f9fa		       20 de f6 	      jsr	LineInit
     54  f9fd		       20 94 f8 	      jsr	BugInit
     55  fa00							;    jsr SwatterInit
     56  fa00
     57  fa00		       60		      rts
     58  fa01
     59  fa01				   GameVerticalBlank
     60  fa01
     61  fa01							; Refresh random values
     62  fa01		       20 13 f0 	      jsr	Random
     63  fa04
     64  fa04							; Update Objects
     65  fa04		       20 5c f5 	      jsr	SpiderUpdate
     66  fa07		       20 f3 f6 	      jsr	LineUpdate
     67  fa0a		       20 b5 f8 	      jsr	BugUpdate
     68  fa0d							;    jsr SwatterUpdate
     69  fa0d		       20 df f3 	      jsr	ScoreUpdate
     70  fa10
     71  fa10							; Reset Collisions
     72  fa10		       85 2c		      sta	CXCLR
     73  fa12
     74  fa12							; Clear horizontal movement
     75  fa12		       85 2b		      sta	HMCLR
     76  fa14
     77  fa14							; Update Positions
     78  fa14		       20 3c f6 	      jsr	SpiderPosition
     79  fa17		       20 11 f8 	      jsr	LinePosition
     80  fa1a		       20 53 f9 	      jsr	BugPosition
     81  fa1d							;    jsr SwatterPosition
     82  fa1d
     83  fa1d							; Set final x positions
     84  fa1d		       85 02		      sta	WSYNC
     85  fa1f		       85 2a		      sta	HMOVE
     86  fa21
     87  fa21		       60		      rts
     88  fa22
     89  fa22				   GameOverScan
     90  fa22
     91  fa22							; Audio Routines
     92  fa22		       20 40 fa 	      jsr	GameAudio
     93  fa25		       20 2c fa 	      jsr	GameSample
     94  fa28
     95  fa28							; State Routines
     96  fa28		       20 75 fa 	      jsr	GameDeath
     97  fa2b
     98  fa2b		       60		      rts
     99  fa2c
    100  fa2c				   GameSample
    101  fa2c
    102  fa2c		       a6 90		      ldx	SampleStep
    103  fa2e		       e0 00		      cpx	#0
    104  fa30		       f0 0b		      beq	.game_sample_return
    105  fa32
    106  fa32		       ca		      dex
    107  fa33		       d0 08		      bne	.game_sample_return
    108  fa35
    109  fa35				   .game_sample_mute
    110  fa35		       a9 00		      lda	#0
    111  fa37		       85 1a		      sta	AUDV1
    112  fa39		       85 18		      sta	AUDF1
    113  fa3b		       85 16		      sta	AUDC1
    114  fa3d
    115  fa3d				   .game_sample_return
    116  fa3d		       86 90		      stx	SampleStep
    117  fa3f		       60		      rts
    118  fa40
    119  fa40				   GameAudio
    120  fa40
    121  fa40		       a6 8e		      ldx	FrameTimer
    122  fa42		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    123  fa44		       f0 26		      beq	.game_audio_mute_note
    124  fa46		       e0 00		      cpx	#0
    125  fa48		       d0 2a		      bne	.game_audio_return
    126  fa4a
    127  fa4a							; Reset Timer
    128  fa4a		       a2 09		      ldx	#GAME_AUDIO_STEP
    129  fa4c		       86 8e		      stx	FrameTimer
    130  fa4e
    131  fa4e				   .game_audio_play
    132  fa4e
    133  fa4e							; Increment melody position
    134  fa4e		       a4 8f		      ldy	AudioStep
    135  fa50		       c8		      iny
    136  fa51
    137  fa51		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    138  fa53		       d0 02		      bne	.game_audio_play_note
    139  fa55
    140  fa55							; Loop our audio step
    141  fa55		       a0 00		      ldy	#0
    142  fa57
    143  fa57				   .game_audio_play_note
    144  fa57
    145  fa57							; Save current position
    146  fa57		       84 8f		      sty	AudioStep
    147  fa59
    148  fa59							; Melody Line
    149  fa59		       b9 e3 fa 	      lda	GameTone0,y
    150  fa5c		       c9 ff		      cmp	#$FF
    151  fa5e		       f0 0c		      beq	.game_audio_mute_note
    152  fa60
    153  fa60		       85 15		      sta	AUDC0
    154  fa62		       b9 03 fb 	      lda	GameAudio0,y
    155  fa65		       85 17		      sta	AUDF0
    156  fa67		       a9 04		      lda	#GAME_AUDIO_VOLUME
    157  fa69		       85 19		      sta	AUDV0
    158  fa6b
    159  fa6b		       60		      rts
    160  fa6c
    161  fa6c				   .game_audio_mute_note
    162  fa6c
    163  fa6c		       a9 00		      lda	#0
    164  fa6e		       85 17		      sta	AUDF0
    165  fa70		       85 15		      sta	AUDC0
    166  fa72		       85 19		      sta	AUDV0
    167  fa74
    168  fa74				   .game_audio_return
    169  fa74		       60		      rts
    170  fa75
    171  fa75				   GameDeath
    172  fa75		       a5 91		      lda	ScoreValue+0
    173  fa77		       c9 00		      cmp	#0
    174  fa79		       d0 03		      bne	.game_death_return
    175  fa7b
    176  fa7b							; Show Game Over Screen
    177  fa7b		       20 23 fb 	      jsr	OverInit
    178  fa7e
    179  fa7e				   .game_death_return
    180  fa7e		       60		      rts
    181  fa7f
    182  fa7f				   GameKernel
    183  fa7f
    184  fa7f							; Turn on display
    185  fa7f		       a9 00		      lda	#0
    186  fa81		       85 01		      sta	VBLANK
    187  fa83
    188  fa83				   .game_kernel_score
    189  fa83
    190  fa83							; Draw Score on top first
    191  fa83		       20 ff f3 	      jsr	ScoreDraw
    192  fa86
    193  fa86				   .game_kernel_objects_start
    194  fa86
    195  fa86							; Setup Drawing Objects
    196  fa86		       20 bf f4 	      jsr	WebDrawStart
    197  fa89		       20 44 f6 	      jsr	SpiderDrawStart
    198  fa8c		       20 19 f8 	      jsr	LineDrawStart
    199  fa8f		       20 69 f9 	      jsr	BugDrawStart
    200  fa92							;    jsr SwatterDrawStart
    201  fa92
    202  fa92							; Start Scanline Counter
    203  fa92		       a2 b3		      ldx	#KERNEL_SCANLINES-SCORE_LINES
    204  fa94
    205  fa94							; Half scanline counter in Temp+1
    206  fa94		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    207  fa96		       85 84		      sta	Temp+1
    208  fa98
    209  fa98				   .game_kernel_objects
    210  fa98
    211  fa98							; Draw Objects in order
    212  fa98
    213  fa98							;    jsr LineDraw
    214  fa98							;    jsr BugDraw
    215  fa98		       20 d6 f4 	      jsr	WebDraw	; Every 6 lines
    216  fa9b
    217  fa9b		       85 02		      sta	WSYNC
    218  fa9d		       ca		      dex
    219  fa9e		       f0 34		      beq	.game_kernel_clean
    220  faa0
    221  faa0		       20 68 f6 	      jsr	SpiderDraw	; Every odd scanline
    222  faa3							;    jsr SwatterDraw
    223  faa3
    224  faa3		       85 02		      sta	WSYNC
    225  faa5		       c6 84		      dec	Temp+1
    226  faa7		       ca		      dex
    227  faa8		       f0 2a		      beq	.game_kernel_clean
    228  faaa
    229  faaa		       a5 84		      lda	Temp+1
    230  faac		       20 39 f8 	      jsr	LineDraw
    231  faaf		       20 8b f9 	      jsr	BugDraw
    232  fab2
    233  fab2							;    sta WSYNC
    234  fab2		       ca		      dex
    235  fab3		       f0 1f		      beq	.game_kernel_clean
    236  fab5
    237  fab5		       20 68 f6 	      jsr	SpiderDraw
    238  fab8							;    jsr SwatterDraw
    239  fab8
    240  fab8		       85 02		      sta	WSYNC
    241  faba		       c6 84		      dec	Temp+1
    242  fabc		       ca		      dex
    243  fabd		       f0 15		      beq	.game_kernel_clean
    244  fabf
    245  fabf		       a5 84		      lda	Temp+1
    246  fac1		       20 39 f8 	      jsr	LineDraw
    247  fac4		       20 8b f9 	      jsr	BugDraw
    248  fac7
    249  fac7							;    sta WSYNC
    250  fac7		       ca		      dex
    251  fac8		       f0 0a		      beq	.game_kernel_clean
    252  faca
    253  faca		       20 68 f6 	      jsr	SpiderDraw
    254  facd							;    jsr SwatterDraw
    255  facd
    256  facd		       85 02		      sta	WSYNC
    257  facf		       c6 84		      dec	Temp+1
    258  fad1		       ca		      dex
    259  fad2		       d0 c4		      bne	.game_kernel_objects
    260  fad4
    261  fad4				   .game_kernel_clean
    262  fad4
    263  fad4		       20 ea f4 	      jsr	WebClean
    264  fad7		       20 99 f6 	      jsr	SpiderClean
    265  fada		       20 4c f8 	      jsr	LineClean
    266  fadd		       20 a8 f9 	      jsr	BugClean
    267  fae0							;    jsr SwatterDraw
    268  fae0
    269  fae0		       85 02		      sta	WSYNC
    270  fae2
    271  fae2				   .game_kernel_return
    272  fae2		       60		      rts
    273  fae3
    274  fae3				   GameTone0
    275  fae3		       06		      .byte.b	#6
    276  fae4		       ff		      .byte.b	#$FF
    277  fae5		       06		      .byte.b	#6
    278  fae6		       ff		      .byte.b	#$FF
    279  fae7		       06		      .byte.b	#6
    280  fae8		       ff		      .byte.b	#$FF
    281  fae9		       06		      .byte.b	#6
    282  faea		       ff		      .byte.b	#$FF
    283  faeb		       06		      .byte.b	#6
    284  faec		       06		      .byte.b	#6
    285  faed		       06		      .byte.b	#6
    286  faee		       ff		      .byte.b	#$FF
    287  faef		       06		      .byte.b	#6
    288  faf0		       ff		      .byte.b	#$FF
    289  faf1		       06		      .byte.b	#6
    290  faf2		       ff		      .byte.b	#$FF
    291  faf3		       06		      .byte.b	#6
    292  faf4		       ff		      .byte.b	#$FF
    293  faf5		       06		      .byte.b	#6
    294  faf6		       ff		      .byte.b	#$FF
    295  faf7		       06		      .byte.b	#6
    296  faf8		       ff		      .byte.b	#$FF
    297  faf9		       06		      .byte.b	#6
    298  fafa		       ff		      .byte.b	#$FF
    299  fafb		       06		      .byte.b	#6
    300  fafc		       06		      .byte.b	#6
    301  fafd		       06		      .byte.b	#6
    302  fafe		       ff		      .byte.b	#$FF
    303  faff		       06		      .byte.b	#6
    304  fb00		       ff		      .byte.b	#$FF
    305  fb01		       06		      .byte.b	#6
    306  fb02		       ff		      .byte.b	#$FF
    307  fb03
    308  fb03				   GameAudio0
    309  fb03		       0d		      .byte.b	#13	; D
    310  fb04		       ff		      .byte.b	#$FF
    311  fb05		       0f		      .byte.b	#15	; B
    312  fb06		       ff		      .byte.b	#$FF
    313  fb07		       0d		      .byte.b	#13	; D
    314  fb08		       ff		      .byte.b	#$FF
    315  fb09		       0f		      .byte.b	#15	; B
    316  fb0a		       ff		      .byte.b	#$FF
    317  fb0b		       0d		      .byte.b	#13	; D
    318  fb0c		       0d		      .byte.b	#13	; D
    319  fb0d		       0f		      .byte.b	#15	; B
    320  fb0e		       ff		      .byte.b	#$FF
    321  fb0f		       0c		      .byte.b	#12	; D#
    322  fb10		       ff		      .byte.b	#$FF
    323  fb11		       0f		      .byte.b	#15	; B
    324  fb12		       ff		      .byte.b	#$FF
    325  fb13		       0b		      .byte.b	#11	; E
    326  fb14		       ff		      .byte.b	#$FF
    327  fb15		       0e		      .byte.b	#14	; C#
    328  fb16		       ff		      .byte.b	#$FF
    329  fb17		       0b		      .byte.b	#11
    330  fb18		       ff		      .byte.b	#$FF
    331  fb19		       0e		      .byte.b	#14
    332  fb1a		       ff		      .byte.b	#$FF
    333  fb1b		       0b		      .byte.b	#11
    334  fb1c		       0b		      .byte.b	#11
    335  fb1d		       0e		      .byte.b	#14
    336  fb1e		       ff		      .byte.b	#$FF
    337  fb1f		       0b		      .byte.b	#11
    338  fb20		       ff		      .byte.b	#$FF
    339  fb21		       0e		      .byte.b	#14
    340  fb22		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fb23					      include	"over.asm"
      1  fb23							;================
      2  fb23							; Constants
      3  fb23							;================
      4  fb23
      5  fb23		       00 dc	   OVER_FRAMES =	220
      6  fb23
      7  fb23		       00 00	   OVER_BG_COLOR =	#$00
      8  fb23		       00 44	   OVER_FG_COLOR =	#$44
      9  fb23
     10  fb23		       00 07	   OVER_AUDIO_TONE =	7
     11  fb23		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fb23		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fb23		       00 10	   OVER_AUDIO_STEP =	16
     14  fb23
     15  fb23		       00 0b	   OVER_IMAGE_SIZE =	11
     16  fb23		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fb23		       00 58	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fb23		       00 2d	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fb23
     20  fb23				   OverInit
     21  fb23
     22  fb23							; Setup logic and kernel
      0  fb23					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fb23				   .POINTER   SET	VBlankPtr
      2  fb23				   .ADDRESS   SET	OverVerticalBlank
      3  fb23
      4  fb23		       a9 65		      LDA	#<.ADDRESS
      5  fb25		       85 87		      STA	.POINTER
      6  fb27		       a9 fb		      LDA	#>.ADDRESS
      7  fb29		       85 88		      STA	.POINTER+1
      8  fb2b
      0  fb2b					      SET_POINTER	KernelPtr, OverKernel
      1  fb2b				   .POINTER   SET	KernelPtr
      2  fb2b				   .ADDRESS   SET	OverKernel
      3  fb2b
      4  fb2b		       a9 a3		      LDA	#<.ADDRESS
      5  fb2d		       85 89		      STA	.POINTER
      6  fb2f		       a9 fb		      LDA	#>.ADDRESS
      7  fb31		       85 8a		      STA	.POINTER+1
      8  fb33
      0  fb33					      SET_POINTER	OverScanPtr, OverOverScan
      1  fb33				   .POINTER   SET	OverScanPtr
      2  fb33				   .ADDRESS   SET	OverOverScan
      3  fb33
      4  fb33		       a9 69		      LDA	#<.ADDRESS
      5  fb35		       85 8b		      STA	.POINTER
      6  fb37		       a9 fb		      LDA	#>.ADDRESS
      7  fb39		       85 8c		      STA	.POINTER+1
      8  fb3b
     26  fb3b
     27  fb3b							; Load Colors
     28  fb3b		       a9 00		      lda	#OVER_BG_COLOR
     29  fb3d		       85 09		      sta	COLUBK
     30  fb3f		       a9 44		      lda	#OVER_FG_COLOR
     31  fb41		       85 08		      sta	COLUPF
     32  fb43
     33  fb43							; Load audio settings
     34  fb43		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fb45		       85 15		      sta	AUDC0
     36  fb47		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fb49		       85 19		      sta	AUDV0
     38  fb4b		       a9 00		      lda	#0
     39  fb4d		       85 16		      sta	AUDC1
     40  fb4f		       85 1a		      sta	AUDV1
     41  fb51		       a9 00		      lda	#0
     42  fb53		       85 8f		      sta	AudioStep
     43  fb55
     44  fb55							; Play first note
     45  fb55		       ad 07 fc 	      lda	OverAudio0,AudioStep
     46  fb58		       85 17		      sta	AUDF0
     47  fb5a
     48  fb5a							; Setup frame counters
     49  fb5a		       a9 00		      lda	#0
     50  fb5c		       85 8d		      sta	Frame
     51  fb5e		       a9 10		      lda	#OVER_AUDIO_STEP
     52  fb60		       85 8e		      sta	FrameTimer
     53  fb62		       85 84		      sta	Temp+1
     54  fb64
     55  fb64		       60		      rts
     56  fb65
     57  fb65				   OverVerticalBlank
     58  fb65		       20 df f3 	      jsr	ScoreUpdate
     59  fb68		       60		      rts
     60  fb69
     61  fb69				   OverOverScan
     62  fb69		       20 70 fb 	      jsr	OverAudio
     63  fb6c		       20 99 fb 	      jsr	OverState
     64  fb6f		       60		      rts
     65  fb70
     66  fb70				   OverAudio
     67  fb70
     68  fb70		       a6 8e		      ldx	FrameTimer
     69  fb72		       e0 00		      cpx	#0
     70  fb74		       d0 22		      bne	.over_audio_return
     71  fb76
     72  fb76							; Reset Timer
     73  fb76		       a6 84		      ldx	Temp+1
     74  fb78					      REPEAT	3
     75  fb78		       e8		      inx
     74  fb78					      REPEND
     75  fb79		       e8		      inx
     74  fb79					      REPEND
     75  fb7a		       e8		      inx
     76  fb7b					      REPEND
     77  fb7b		       86 8e		      stx	FrameTimer
     78  fb7d		       86 84		      stx	Temp+1
     79  fb7f
     80  fb7f				   .over_audio_play
     81  fb7f
     82  fb7f							; Increment melody position
     83  fb7f		       a4 8f		      ldy	AudioStep
     84  fb81		       c8		      iny
     85  fb82
     86  fb82		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  fb84		       f0 0c		      beq	.over_audio_mute_note
     88  fb86
     89  fb86				   .over_audio_play_note
     90  fb86
     91  fb86							; Save current position
     92  fb86		       84 8f		      sty	AudioStep
     93  fb88
     94  fb88							; Melody Line
     95  fb88		       b9 07 fc 	      lda	OverAudio0,y
     96  fb8b		       85 17		      sta	AUDF0
     97  fb8d		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  fb8f		       85 19		      sta	AUDV0
     99  fb91
    100  fb91		       60		      rts
    101  fb92
    102  fb92				   .over_audio_mute_note
    103  fb92		       a9 00		      lda	#0
    104  fb94		       85 17		      sta	AUDF0
    105  fb96		       85 19		      sta	AUDV0
    106  fb98
    107  fb98				   .over_audio_return
    108  fb98		       60		      rts
    109  fb99
    110  fb99				   OverState
    111  fb99		       a5 8d		      lda	Frame
    112  fb9b		       c9 dc		      cmp	#OVER_FRAMES
    113  fb9d		       d0 03		      bne	.over_state_return
    114  fb9f
    115  fb9f		       20 48 f2 	      jsr	TitleInit
    116  fba2
    117  fba2				   .over_state_return
    118  fba2		       60		      rts
    119  fba3
    120  fba3				   OverKernel
    121  fba3
    122  fba3							; Turn on display
    123  fba3		       a9 00		      lda	#0
    124  fba5		       85 01		      sta	VBLANK
    125  fba7
    126  fba7				   .over_kernel_score
    127  fba7
    128  fba7							; Draw Score on top first (no update)
    129  fba7		       20 ff f3 	      jsr	ScoreDraw
    130  fbaa
    131  fbaa				   .over_kernel_init
    132  fbaa							; Playfield Control
    133  fbaa		       a5 80		      lda	CtrlPf
    134  fbac		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  fbae		       09 01		      ora	#%00000001	; Set mirroring
    136  fbb0		       85 80		      sta	CtrlPf
    137  fbb2		       85 0a		      sta	CTRLPF
    138  fbb4
    139  fbb4				   .over_kernel_top_padding
    140  fbb4							; Top Padding
    141  fbb4		       20 d6 fb 	      jsr	OverPadding
    142  fbb7
    143  fbb7				   .over_kernel_image
    144  fbb7		       a2 0a		      ldx	#OVER_IMAGE_SIZE-1
    145  fbb9
    146  fbb9				   .over_kernel_image_next
    147  fbb9		       bd fc fb 	      lda	OverImagePF2,x
    148  fbbc		       85 0f		      sta	PF2
    149  fbbe		       bd f1 fb 	      lda	OverImagePF1,x
    150  fbc1		       85 0e		      sta	PF1
    151  fbc3		       bd e6 fb 	      lda	OverImagePF0,x
    152  fbc6		       85 0d		      sta	PF0
    153  fbc8
    154  fbc8		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  fbca				   .over_kernel_image_loop
    156  fbca		       85 02		      sta	WSYNC
    157  fbcc		       88		      dey
    158  fbcd		       d0 fb		      bne	.over_kernel_image_loop
    159  fbcf
    160  fbcf		       ca		      dex
    161  fbd0		       10 e7		      bpl	.over_kernel_image_next
    162  fbd2
    163  fbd2				   .over_kernel_bottom_padding
    164  fbd2							; Bottom Padding
    165  fbd2		       20 d6 fb 	      jsr	OverPadding
    166  fbd5
    167  fbd5				   .over_kernel_return
    168  fbd5		       60		      rts
    169  fbd6
    170  fbd6				   OverPadding
    171  fbd6		       a9 00		      lda	#0
    172  fbd8		       85 0d		      sta	PF0
    173  fbda		       85 0e		      sta	PF1
    174  fbdc		       85 0f		      sta	PF2
    175  fbde
    176  fbde		       a2 2d		      ldx	#OVER_IMAGE_PADDING
    177  fbe0				   .over_padding_loop
    178  fbe0		       85 02		      sta	WSYNC
    179  fbe2		       ca		      dex
    180  fbe3		       d0 fb		      bne	.over_padding_loop
    181  fbe5
    182  fbe5		       60		      rts
    183  fbe6
    184  fbe6				   OverAssets
    185  fbe6
    186  fbe6							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  fbe6					      include	"over_image.asm"
      1  fbe6				   OverImagePF0
      2  fbe6		       00		      .BYTE.b	%00000000
      3  fbe7		       00		      .BYTE.b	%00000000
      4  fbe8		       00		      .BYTE.b	%00000000
      5  fbe9		       00		      .BYTE.b	%00000000
      6  fbea		       00		      .BYTE.b	%00000000
      7  fbeb		       00		      .BYTE.b	%00000000
      8  fbec		       00		      .BYTE.b	%00000000
      9  fbed		       00		      .BYTE.b	%00000000
     10  fbee		       00		      .BYTE.b	%00000000
     11  fbef		       00		      .BYTE.b	%00000000
     12  fbf0		       00		      .BYTE.b	%00000000
     13  fbf1
     14  fbf1				   OverImagePF1
     15  fbf1		       0c		      .BYTE.b	%00001100
     16  fbf2		       13		      .BYTE.b	%00010011
     17  fbf3		       20		      .BYTE.b	%00100000
     18  fbf4		       23		      .BYTE.b	%00100011
     19  fbf5		       24		      .BYTE.b	%00100100
     20  fbf6		       24		      .BYTE.b	%00100100
     21  fbf7		       14		      .BYTE.b	%00010100
     22  fbf8		       12		      .BYTE.b	%00010010
     23  fbf9		       10		      .BYTE.b	%00010000
     24  fbfa		       08		      .BYTE.b	%00001000
     25  fbfb		       08		      .BYTE.b	%00001000
     26  fbfc
     27  fbfc				   OverImagePF2
     28  fbfc		       e0		      .BYTE.b	%11100000
     29  fbfd		       18		      .BYTE.b	%00011000
     30  fbfe		       05		      .BYTE.b	%00000101
     31  fbff		       52		      .BYTE.b	%01010010
     32  fc00		       23		      .BYTE.b	%00100011
     33  fc01		       52		      .BYTE.b	%01010010
     34  fc02		       02		      .BYTE.b	%00000010
     35  fc03		       04		      .BYTE.b	%00000100
     36  fc04		       18		      .BYTE.b	%00011000
     37  fc05		       e0		      .BYTE.b	%11100000
     38  fc06		       00		      .BYTE.b	%00000000
------- FILE over.asm
    188  fc07
    189  fc07				   OverAudio0
    190  fc07
    191  fc07		       0c		      .BYTE.b	#12	; D#2
    192  fc08		       0d		      .BYTE.b	#13	; D2
    193  fc09		       11		      .BYTE.b	#17	; A1
    194  fc0a		       16		      .BYTE.b	#22	; F1
    195  fc0b		       1a		      .BYTE.b	#26	; D1
    196  fc0c		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    288  fc0d
    289  fc0d							;================
    290  fc0d							; End of cart
    291  fc0d							;================
    292  fc0d
    293  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    294  fffa
    295  fffa				   InterruptVectors
    296  fffa
    297  fffa		       21 f0		      .word.w	InitSystem	; NMI
    298  fffc		       21 f0		      .word.w	InitSystem	; RESET
    299  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    300  10000
    301  10000					       END
