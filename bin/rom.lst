------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00c7 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00 00	   FrameTimer ds	2
     70 U0090
     71 U0090		       00	   AudioStep  ds	1
     72 U0091
     73 U0091		       00	   SampleStep ds	1
     74 U0092
     75 U0092							; Score
     76 U0092
     77 U0092		       00 00	   ScoreValue ds	2
     78 U0094		       00 00	   ScoreDigitOnes ds	2
     79 U0096		       00 00	   ScoreDigitTens ds	2
     80 U0098		       00 00	   ScoreGfx   ds	2
     81 U009a
     82 U009a							; Level
     83 U009a		       00	   LevelCurrent ds	1
     84 U009b
     85 U009b							; Web
     86 U009b
     87 U009b		       00	   WebIndex   ds	1
     88 U009c		       00 00	   WebColor   ds	2
     89 U009e
     90 U009e							; Spider
     91 U009e
     92 U009e		       00 00	   SpiderPtr  ds	2
     93 U00a0		       00 00	   SpiderPos  ds	2
     94 U00a2		       00	   SpiderCtrl ds	1
     95 U00a3		       00	   SpiderColor ds	1
     96 U00a4
     97 U00a4		       00	   SpiderIndex ds	1
     98 U00a5		       00	   SpiderDrawPos ds	1
     99 U00a6		       00	   SpiderLine ds	1
    100 U00a7
    101 U00a7		       00 00	   SpiderPtr2 ds	2
    102 U00a9
    103 U00a9							; Line
    104 U00a9
    105 U00a9		       00	   LineEnabled ds	1
    106 U00aa		       00 00	   LinePos    ds	2
    107 U00ac		       00 00	   LineVelocity ds	2
    108 U00ae		       00 00	   LineStartPos ds	2
    109 U00b0		       00 00	   LineDrawPos ds	2
    110 U00b2
    111 U00b2							; Bug
    112 U00b2
    113 U00b2		       00 00	   BugStunned ds	2
    114 U00b4		       00 00	   BugPosX    ds	2
    115 U00b6		       00 00	   BugPosY    ds	2
    116 U00b8		       00 00	   BugColor   ds	2
    117 U00ba
    118 U00ba		       00 00	   BugDrawPosBottom ds	2
    119 U00bc		       00 00	   BugDrawPosTop ds	2
    120 U00be
    121 U00be							; Swatter
    122 U00be
    123 U00be		       00 00	   SwatterPos ds	2
    124 U00c0		       00	   SwatterState ds	1
    125 U00c1		       00	   SwatterColor ds	1
    126 U00c2
    127 U00c2		       00	   SwatterIndex ds	1
    128 U00c3		       00	   SwatterDrawPos ds	1
    129 U00c4		       00	   SwatterLine ds	1
    130 U00c5
    131 U00c5		       00	   SwatterSampleCount ds	1
    132 U00c6		       00	   SwatterSampleF ds	1
    133 U00c7
    134  10000 ????				       SEG
    135  f000					      org	$F000	; Start of cart area
    136  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    138  f021
    139  f021				   InitSystem
    140  f021
    141  f021				   .init_clean
    142  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    144  f02c
    145  f02c				   .init_tia
    146  f02c							; Define default TIA register values
    147  f02c
    148  f02c							; Initialize copies
    149  f02c		       a9 00		      lda	#0
    150  f02e		       85 80		      sta	CtrlPf
    151  f030		       85 81		      sta	NuSiz0
    152  f032		       85 82		      sta	NuSiz1
    153  f034
    154  f034							; Set background color
    155  f034		       a9 00		      lda	#$00	; Black
    156  f036		       85 09		      sta	COLUBK
    157  f038
    158  f038							; Set the playfield and player color
    159  f038		       a9 0e		      lda	#$0E	; White
    160  f03a		       85 08		      sta	COLUPF
    161  f03c		       85 06		      sta	COLUP0
    162  f03e		       85 07		      sta	COLUP1
    163  f040
    164  f040							; Playfield Control
    165  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    166  f042		       85 80		      sta	CtrlPf
    167  f044		       85 0a		      sta	CTRLPF
    168  f046
    169  f046							; Disable Game Elements
    170  f046		       a9 00		      lda	#$00
    171  f048		       85 1f		      sta	ENABL	; Turn off ball
    172  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    173  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    174  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    175  f050		       85 1c		      sta	GRP1	; Turn off player 2
    176  f052
    177  f052							; Empty playfield
    178  f052		       a9 00		      lda	#%00000000
    179  f054		       85 0d		      sta	PF0
    180  f056		       85 0e		      sta	PF1
    181  f058		       85 0f		      sta	PF2
    182  f05a
    183  f05a				   .init_seed
    184  f05a							; Seed the random number generator
    185  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    186  f05d		       85 85		      sta	Rand8	; Use as seed
    187  f05f		       49 ff		      eor	#$FF	; Flip bits
    188  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    189  f063
    190  f063				   .init_game
    191  f063
    192  f063		       20 cb f0 	      jsr	LogoInit
    193  f066
    194  f066							;=======================================
    195  f066							; Game Kernel
    196  f066							;=======================================
    197  f066
    198  f066				   Main
    199  f066
    200  f066		       20 75 f0 	      jsr	VerticalSync
    201  f069		       20 8e f0 	      jsr	VerticalBlank
    202  f06c		       20 a1 f0 	      jsr	Kernel
    203  f06f		       20 a8 f0 	      jsr	OverScan
    204  f072		       4c 66 f0 	      jmp	Main
    205  f075
    206  f075				   VerticalSync
    207  f075
    208  f075		       a9 00		      lda	#0
    209  f077		       85 01		      sta	VBLANK
    210  f079
    211  f079							; Turn on Vertical Sync signal and setup timer
    212  f079		       a9 02		      lda	#2
    213  f07b		       85 00		      sta	VSYNC
    214  f07d
    215  f07d							; Increment frame count and reduce frame counter
    216  f07d		       e6 8d		      inc	Frame
    217  f07f		       c6 8e		      dec	FrameTimer
    218  f081		       c6 8f		      dec	FrameTimer+1
    219  f083
    220  f083							; VSYNCH signal scanlines
    221  f083					      REPEAT	#KERNEL_VSYNC
    222  f083		       85 02		      sta	WSYNC
    221  f083					      REPEND
    222  f085		       85 02		      sta	WSYNC
    221  f085					      REPEND
    222  f087		       85 02		      sta	WSYNC
    223  f089					      REPEND
    224  f089
    225  f089							; Turn off Vertical Sync signal
    226  f089		       a9 00		      lda	#0
    227  f08b		       85 00		      sta	VSYNC
    228  f08d
    229  f08d				   .vsync_return
    230  f08d		       60		      rts
    231  f08e
    232  f08e				   VerticalBlank
    233  f08e							; Setup Timer
    234  f08e		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    235  f090		       8d 96 02 	      sta	TIM64T
    236  f093
    237  f093				   .vblank_logic
    238  f093							; Perform Game Logic
    239  f093		       20 9e f0 	      jsr	.vblank_logic_call_ptr
    240  f096
    241  f096				   .vblank_loop
    242  f096							; WSYNC until Timer is complete
    243  f096		       85 02		      sta	WSYNC
    244  f098		       ad 84 02 	      lda	INTIM
    245  f09b		       d0 f9		      bne	.vblank_loop
    246  f09d
    247  f09d				   .vblank_return
    248  f09d		       60		      rts
    249  f09e
    250  f09e				   .vblank_logic_call_ptr
    251  f09e		       6c 87 00 	      jmp	(VBlankPtr)
    252  f0a1
    253  f0a1				   Kernel
    254  f0a1
    255  f0a1							; Perform Selected Kernel
    256  f0a1		       20 a5 f0 	      jsr	.kernel_call_ptr
    257  f0a4		       60		      rts
    258  f0a5
    259  f0a5				   .kernel_call_ptr
    260  f0a5		       6c 89 00 	      jmp	(KernelPtr)
    261  f0a8
    262  f0a8				   OverScan
    263  f0a8
    264  f0a8							; End of screen, enter blanking
    265  f0a8		       a9 42		      lda	#%01000010
    266  f0aa		       85 01		      sta	VBLANK
    267  f0ac
    268  f0ac							; Setup Timer
    269  f0ac		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    270  f0ae		       8d 96 02 	      sta	TIM64T
    271  f0b1
    272  f0b1							;.overscan_reset:
    273  f0b1							; Check for reset switch
    274  f0b1		       ad 82 02 	      lda	SWCHB
    275  f0b4		       4a		      lsr		; Push D0 to carry (C)
    276  f0b5		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    277  f0b7
    278  f0b7							; Perform reset
    279  f0b7		       20 cb f0 	      jsr	LogoInit	; No need for logic
    280  f0ba		       4c c0 f0 	      jmp	.overscan_loop
    281  f0bd
    282  f0bd				   .overscan_logic
    283  f0bd							; Perform OverScan Logic
    284  f0bd		       20 c8 f0 	      jsr	.overscan_logic_call_ptr
    285  f0c0
    286  f0c0				   .overscan_loop
    287  f0c0							; WSYNC until Timer is complete
    288  f0c0		       85 02		      sta	WSYNC
    289  f0c2		       ad 84 02 	      lda	INTIM
    290  f0c5		       d0 f9		      bne	.overscan_loop
    291  f0c7
    292  f0c7				   .overscan_return
    293  f0c7		       60		      rts
    294  f0c8
    295  f0c8				   .overscan_logic_call_ptr
    296  f0c8		       6c 8b 00 	      jmp	(OverScanPtr)
    297  f0cb
    298  f0cb							;================
    299  f0cb							; State Code
    300  f0cb							;================
    301  f0cb
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0cb					      include	"logo.asm"
      1  f0cb							;================
      2  f0cb							; Constants
      3  f0cb							;================
      4  f0cb
      5  f0cb		       00 b4	   LOGO_FRAMES =	180
      6  f0cb
      7  f0cb		       00 00	   LOGO_BG_COLOR =	#$00
      8  f0cb		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f0cb
     10  f0cb		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0cb		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0cb		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0cb		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0cb		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0cb		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0cb
     17  f0cb		       00 10	   LOGO_IMAGE_SIZE =	16
     18  f0cb		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     19  f0cb		       00 50	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     20  f0cb		       00 38	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     21  f0cb		       00 32	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-6	; The extra 6 is for processing overflow
     22  f0cb
     23  f0cb				   LogoInit
     24  f0cb
     25  f0cb							; Setup logic and kernel
      0  f0cb					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0cb				   .POINTER   SET	VBlankPtr
      2  f0cb				   .ADDRESS   SET	LogoVerticalBlank
      3  f0cb
      4  f0cb		       a9 16		      LDA	#<.ADDRESS
      5  f0cd		       85 87		      STA	.POINTER
      6  f0cf		       a9 f1		      LDA	#>.ADDRESS
      7  f0d1		       85 88		      STA	.POINTER+1
      8  f0d3
      0  f0d3					      SET_POINTER	KernelPtr, LogoKernel
      1  f0d3				   .POINTER   SET	KernelPtr
      2  f0d3				   .ADDRESS   SET	LogoKernel
      3  f0d3
      4  f0d3		       a9 67		      LDA	#<.ADDRESS
      5  f0d5		       85 89		      STA	.POINTER
      6  f0d7		       a9 f1		      LDA	#>.ADDRESS
      7  f0d9		       85 8a		      STA	.POINTER+1
      8  f0db
      0  f0db					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0db				   .POINTER   SET	OverScanPtr
      2  f0db				   .ADDRESS   SET	LogoOverScan
      3  f0db
      4  f0db		       a9 1a		      LDA	#<.ADDRESS
      5  f0dd		       85 8b		      STA	.POINTER
      6  f0df		       a9 f1		      LDA	#>.ADDRESS
      7  f0e1		       85 8c		      STA	.POINTER+1
      8  f0e3
     29  f0e3
     30  f0e3							; Load Colors
     31  f0e3		       a9 00		      lda	#LOGO_BG_COLOR
     32  f0e5		       85 09		      sta	COLUBK
     33  f0e7		       a9 c6		      lda	#LOGO_FG_COLOR
     34  f0e9		       85 08		      sta	COLUPF
     35  f0eb
     36  f0eb							; Load audio settings
     37  f0eb		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     38  f0ed		       85 15		      sta	AUDC0
     39  f0ef		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     40  f0f1		       85 19		      sta	AUDV0
     41  f0f3		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     42  f0f5		       85 16		      sta	AUDC1
     43  f0f7		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     44  f0f9		       85 1a		      sta	AUDV1
     45  f0fb		       a9 00		      lda	#0
     46  f0fd		       85 90		      sta	AudioStep
     47  f0ff
     48  f0ff							; Play first note
     49  f0ff		       ad 47 f2 	      lda	LogoAudio0,AudioStep
     50  f102		       85 17		      sta	AUDF0
     51  f104		       ad 53 f2 	      lda	LogoAudio1,AudioStep
     52  f107		       85 18		      sta	AUDF1
     53  f109
     54  f109							; Setup frame counters
     55  f109		       a9 00		      lda	#0
     56  f10b		       85 8d		      sta	Frame
     57  f10d		       a9 b4		      lda	#LOGO_FRAMES
     58  f10f		       85 8e		      sta	FrameTimer
     59  f111
     60  f111							; Setup Image Animation
     61  f111		       a9 22		      lda	#(LOGO_IMAGE_SIZE+1)*2
     62  f113		       85 9b		      sta	WebIndex
     63  f115
     64  f115		       60		      rts
     65  f116
     66  f116				   LogoVerticalBlank
     67  f116		       20 21 f1 	      jsr	LogoAnimation
     68  f119		       60		      rts
     69  f11a
     70  f11a				   LogoOverScan
     71  f11a		       20 32 f1 	      jsr	LogoAudio
     72  f11d		       20 5d f1 	      jsr	LogoState
     73  f120		       60		      rts
     74  f121
     75  f121				   LogoAnimation
     76  f121		       a5 8d		      lda	Frame
     77  f123		       29 03		      and	#%00000011	; Every 4 when bits are 00
     78  f125		       d0 0a		      bne	.logo_animation_return
     79  f127
     80  f127		       a6 9b		      ldx	WebIndex
     81  f129		       e0 00		      cpx	#0
     82  f12b		       f0 04		      beq	.logo_animation_return
     83  f12d
     84  f12d							; Add another visible line
     85  f12d		       ca		      dex
     86  f12e		       ca		      dex
     87  f12f		       86 9b		      stx	WebIndex
     88  f131
     89  f131				   .logo_animation_return
     90  f131		       60		      rts
     91  f132
     92  f132				   LogoAudio
     93  f132
     94  f132		       a5 8d		      lda	Frame
     95  f134		       29 07		      and	#%00000111	; Every 8 when bits are 000
     96  f136		       d0 24		      bne	.logo_audio_return
     97  f138
     98  f138				   .logo_audio_play
     99  f138
    100  f138							; Check if we're at the end of the melody
    101  f138		       a4 90		      ldy	AudioStep
    102  f13a		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
    103  f13c		       f0 10		      beq	.logo_audio_mute
    104  f13e
    105  f13e				   .logo_audio_play_note
    106  f13e							; Increment audio position
    107  f13e		       c8		      iny
    108  f13f		       84 90		      sty	AudioStep
    109  f141
    110  f141							; Logo note and play
    111  f141		       b9 47 f2 	      lda	LogoAudio0,y
    112  f144		       85 17		      sta	AUDF0
    113  f146		       b9 53 f2 	      lda	LogoAudio1,y
    114  f149		       85 18		      sta	AUDF1
    115  f14b		       4c 5c f1 	      jmp	.logo_audio_mute_skip
    116  f14e
    117  f14e				   .logo_audio_mute
    118  f14e
    119  f14e							; Mute audio
    120  f14e		       a9 00		      lda	#0
    121  f150		       85 15		      sta	AUDC0
    122  f152		       85 19		      sta	AUDV0
    123  f154		       85 17		      sta	AUDF0
    124  f156		       85 16		      sta	AUDC1
    125  f158		       85 1a		      sta	AUDV1
    126  f15a		       85 18		      sta	AUDF1
    127  f15c
    128  f15c				   .logo_audio_mute_skip
    129  f15c				   .logo_audio_return
    130  f15c		       60		      rts
    131  f15d
    132  f15d				   LogoState
    133  f15d		       a5 8e		      lda	FrameTimer
    134  f15f		       c9 00		      cmp	#0
    135  f161		       d0 03		      bne	.logo_state_return
    136  f163
    137  f163		       20 5f f2 	      jsr	TitleInit
    138  f166
    139  f166				   .logo_state_return
    140  f166		       60		      rts
    141  f167
    142  f167				   LogoKernel
    143  f167
    144  f167							; Playfield Control
    145  f167		       a5 80		      lda	CtrlPf
    146  f169		       29 fe		      and	#%11111110	; No mirroring
    147  f16b		       85 80		      sta	CtrlPf
    148  f16d		       85 0a		      sta	CTRLPF
    149  f16f
    150  f16f							; Turn on display
    151  f16f		       a9 00		      lda	#0
    152  f171		       85 01		      sta	VBLANK
    153  f173
    154  f173		       a4 9b		      ldy	WebIndex
    155  f175		       c0 00		      cpy	#0
    156  f177		       d0 06		      bne	.logo_kernel_top_anim_padding
    157  f179
    158  f179				   .logo_kernel_top_padding
    159  f179							; Top Padding
    160  f179		       20 ca f1 	      jsr	LogoPadding
    161  f17c		       4c 8d f1 	      jmp	.logo_kernel_image
    162  f17f
    163  f17f				   .logo_kernel_top_anim_padding
    164  f17f		       20 da f1 	      jsr	LogoAnimPadding
    165  f182
    166  f182				   .logo_kernel_image_animation_start
    167  f182		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    168  f184
    169  f184				   .logo_kernel_image_animation_loop
    170  f184		       85 02		      sta	WSYNC
    171  f186		       ca		      dex
    172  f187		       d0 fb		      bne	.logo_kernel_image_animation_loop
    173  f189
    174  f189		       88		      dey
    175  f18a		       88		      dey
    176  f18b		       d0 f5		      bne	.logo_kernel_image_animation_start
    177  f18d
    178  f18d				   .logo_kernel_image
    179  f18d
    180  f18d		       a2 20		      ldx	#(LOGO_IMAGE_SIZE*2)
    181  f18f		       a0 04		      ldy	#LOGO_IMAGE_LINE_SIZE-1
    182  f191							; The extra 1 on line size is for processing overflow
    183  f191
    184  f191		       ca		      dex
    185  f192		       e4 9b		      cpx	WebIndex
    186  f194		       90 30		      bcc	.logo_kernel_bottom_padding
    187  f196
    188  f196				   .logo_kernel_image_line
    189  f196		       85 02		      sta	WSYNC
    190  f198
    191  f198		       bd e6 f1 	      lda	LogoImagePF0-1,x
    192  f19b		       85 0d		      sta	PF0
    193  f19d		       bd 06 f2 	      lda	LogoImagePF1-1,x
    194  f1a0		       85 0e		      sta	PF1
    195  f1a2		       bd 26 f2 	      lda	LogoImagePF2-1,x
    196  f1a5		       85 0f		      sta	PF2
    197  f1a7
      0  f1a7					      sleep	6
      1  f1a7				   .CYCLES    SET	6
      2  f1a7
      3  f1a7				  -	      IF	.CYCLES < 2
      4  f1a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1a7				  -	      ERR
      6  f1a7					      ENDIF
      7  f1a7
      8  f1a7				  -	      IF	.CYCLES & 1
      9  f1a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1a7				  -	      nop	0
     11  f1a7				  -	      ELSE
     12  f1a7				  -	      bit	VSYNC
     13  f1a7				  -	      ENDIF
     14  f1a7				  -.CYCLES    SET	.CYCLES - 3
     15  f1a7					      ENDIF
     16  f1a7
     17  f1a7					      REPEAT	.CYCLES / 2
     18  f1a7		       ea		      nop
     17  f1a7					      REPEND
     18  f1a8		       ea		      nop
     17  f1a8					      REPEND
     18  f1a9		       ea		      nop
     19  f1aa					      REPEND
    199  f1aa
    200  f1aa		       bd e7 f1 	      lda	LogoImagePF0,x
    201  f1ad		       85 0d		      sta	PF0
    202  f1af		       bd 07 f2 	      lda	LogoImagePF1,x
    203  f1b2		       85 0e		      sta	PF1
    204  f1b4		       bd 27 f2 	      lda	LogoImagePF2,x
    205  f1b7		       85 0f		      sta	PF2
    206  f1b9
    207  f1b9		       88		      dey
    208  f1ba		       d0 da		      bne	.logo_kernel_image_line
    209  f1bc
    210  f1bc		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    211  f1be
    212  f1be		       ca		      dex
    213  f1bf		       e4 9b		      cpx	WebIndex
    214  f1c1		       90 03		      bcc	.logo_kernel_bottom_padding
    215  f1c3
    216  f1c3		       ca		      dex
    217  f1c4		       10 d0		      bpl	.logo_kernel_image_line
    218  f1c6
    219  f1c6				   .logo_kernel_bottom_padding
    220  f1c6							; Bottom Padding
    221  f1c6		       20 ca f1 	      jsr	LogoPadding
    222  f1c9
    223  f1c9				   .logo_kernel_image_return
    224  f1c9		       60		      rts
    225  f1ca
    226  f1ca				   LogoPadding
    227  f1ca		       a9 00		      lda	#0
    228  f1cc		       85 0d		      sta	PF0
    229  f1ce		       85 0e		      sta	PF1
    230  f1d0		       85 0f		      sta	PF2
    231  f1d2
    232  f1d2		       a2 38		      ldx	#LOGO_IMAGE_PADDING
    233  f1d4				   .logo_padding_loop
    234  f1d4		       85 02		      sta	WSYNC
    235  f1d6		       ca		      dex
    236  f1d7		       d0 fb		      bne	.logo_padding_loop
    237  f1d9
    238  f1d9		       60		      rts
    239  f1da
    240  f1da				   LogoAnimPadding
    241  f1da		       a9 00		      lda	#0
    242  f1dc		       85 0d		      sta	PF0
    243  f1de		       85 0e		      sta	PF1
    244  f1e0		       85 0f		      sta	PF2
    245  f1e2
    246  f1e2		       a2 32		      ldx	#LOGO_IMAGE_ANIM_PADDING
    247  f1e4		       4c d4 f1 	      jmp	.logo_padding_loop
    248  f1e7
    249  f1e7				   LogoAssets
    250  f1e7
    251  f1e7							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f1e7					      include	"logo_image.asm"
      1  f1e7				   LogoImagePF0
      2  f1e7		       00		      .BYTE.b	%00000000
      3  f1e8		       10		      .BYTE.b	%00010000
      4  f1e9		       00		      .BYTE.b	%00000000
      5  f1ea		       30		      .BYTE.b	%00110000
      6  f1eb		       00		      .BYTE.b	%00000000
      7  f1ec		       70		      .BYTE.b	%01110000
      8  f1ed		       00		      .BYTE.b	%00000000
      9  f1ee		       60		      .BYTE.b	%01100000
     10  f1ef		       00		      .BYTE.b	%00000000
     11  f1f0		       60		      .BYTE.b	%01100000
     12  f1f1		       00		      .BYTE.b	%00000000
     13  f1f2		       20		      .BYTE.b	%00100000
     14  f1f3		       80		      .BYTE.b	%10000000
     15  f1f4		       00		      .BYTE.b	%00000000
     16  f1f5		       c0		      .BYTE.b	%11000000
     17  f1f6		       00		      .BYTE.b	%00000000
     18  f1f7		       c0		      .BYTE.b	%11000000
     19  f1f8		       00		      .BYTE.b	%00000000
     20  f1f9		       80		      .BYTE.b	%10000000
     21  f1fa		       00		      .BYTE.b	%00000000
     22  f1fb		       00		      .BYTE.b	%00000000
     23  f1fc		       40		      .BYTE.b	%01000000
     24  f1fd		       00		      .BYTE.b	%00000000
     25  f1fe		       60		      .BYTE.b	%01100000
     26  f1ff		       00		      .BYTE.b	%00000000
     27  f200		       60		      .BYTE.b	%01100000
     28  f201		       00		      .BYTE.b	%00000000
     29  f202		       70		      .BYTE.b	%01110000
     30  f203		       00		      .BYTE.b	%00000000
     31  f204		       30		      .BYTE.b	%00110000
     32  f205		       00		      .BYTE.b	%00000000
     33  f206		       10		      .BYTE.b	%00010000
     34  f207
     35  f207				   LogoImagePF1
     36  f207		       03		      .BYTE.b	%00000011
     37  f208		       f0		      .BYTE.b	%11110000
     38  f209		       03		      .BYTE.b	%00000011
     39  f20a		       f8		      .BYTE.b	%11111000
     40  f20b		       13		      .BYTE.b	%00010011
     41  f20c		       fc		      .BYTE.b	%11111100
     42  f20d		       33		      .BYTE.b	%00110011
     43  f20e		       dc		      .BYTE.b	%11011100
     44  f20f		       63		      .BYTE.b	%01100011
     45  f210		       cc		      .BYTE.b	%11001100
     46  f211		       c3		      .BYTE.b	%11000011
     47  f212		       cc		      .BYTE.b	%11001100
     48  f213		       83		      .BYTE.b	%10000011
     49  f214		       cc		      .BYTE.b	%11001100
     50  f215		       03		      .BYTE.b	%00000011
     51  f216		       cc		      .BYTE.b	%11001100
     52  f217		       03		      .BYTE.b	%00000011
     53  f218		       cc		      .BYTE.b	%11001100
     54  f219		       83		      .BYTE.b	%10000011
     55  f21a		       cc		      .BYTE.b	%11001100
     56  f21b		       c3		      .BYTE.b	%11000011
     57  f21c		       cc		      .BYTE.b	%11001100
     58  f21d		       63		      .BYTE.b	%01100011
     59  f21e		       cc		      .BYTE.b	%11001100
     60  f21f		       33		      .BYTE.b	%00110011
     61  f220		       dc		      .BYTE.b	%11011100
     62  f221		       13		      .BYTE.b	%00010011
     63  f222		       fc		      .BYTE.b	%11111100
     64  f223		       03		      .BYTE.b	%00000011
     65  f224		       f8		      .BYTE.b	%11111000
     66  f225		       03		      .BYTE.b	%00000011
     67  f226		       f0		      .BYTE.b	%11110000
     68  f227
     69  f227				   LogoImagePF2
     70  f227		       83		      .BYTE.b	%10000011
     71  f228		       00		      .BYTE.b	%00000000
     72  f229		       c7		      .BYTE.b	%11000111
     73  f22a		       00		      .BYTE.b	%00000000
     74  f22b		       ef		      .BYTE.b	%11101111
     75  f22c		       01		      .BYTE.b	%00000001
     76  f22d		       6e		      .BYTE.b	%01101110
     77  f22e		       03		      .BYTE.b	%00000011
     78  f22f		       6c		      .BYTE.b	%01101100
     79  f230		       06		      .BYTE.b	%00000110
     80  f231		       6c		      .BYTE.b	%01101100
     81  f232		       0c		      .BYTE.b	%00001100
     82  f233		       6c		      .BYTE.b	%01101100
     83  f234		       18		      .BYTE.b	%00011000
     84  f235		       6c		      .BYTE.b	%01101100
     85  f236		       30		      .BYTE.b	%00110000
     86  f237		       6c		      .BYTE.b	%01101100
     87  f238		       30		      .BYTE.b	%00110000
     88  f239		       6c		      .BYTE.b	%01101100
     89  f23a		       18		      .BYTE.b	%00011000
     90  f23b		       6c		      .BYTE.b	%01101100
     91  f23c		       0c		      .BYTE.b	%00001100
     92  f23d		       6c		      .BYTE.b	%01101100
     93  f23e		       06		      .BYTE.b	%00000110
     94  f23f		       6e		      .BYTE.b	%01101110
     95  f240		       03		      .BYTE.b	%00000011
     96  f241		       ef		      .BYTE.b	%11101111
     97  f242		       01		      .BYTE.b	%00000001
     98  f243		       c7		      .BYTE.b	%11000111
     99  f244		       00		      .BYTE.b	%00000000
    100  f245		       83		      .BYTE.b	%10000011
    101  f246		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    253  f247
    254  f247				   LogoAudio0
    255  f247
    256  f247		       1d		      .BYTE.b	#29	; C
    257  f248		       17		      .BYTE.b	#23	; E
    258  f249		       13		      .BYTE.b	#19	; G
    259  f24a		       0f		      .BYTE.b	#15	; A
    260  f24b		       17		      .BYTE.b	#23	; E
    261  f24c		       13		      .BYTE.b	#19	; G
    262  f24d		       0f		      .BYTE.b	#15	; B
    263  f24e		       0e		      .BYTE.b	#14	; C
    264  f24f		       0b		      .BYTE.b	#11	; E
    265  f250		       0b		      .BYTE.b	#11
    266  f251		       0b		      .BYTE.b	#11
    267  f252		       0b		      .BYTE.b	#11
    268  f253
    269  f253				   LogoAudio1
    270  f253
    271  f253		       1f		      .BYTE.b	#31	; C
    272  f254		       1f		      .BYTE.b	#31
    273  f255		       1f		      .BYTE.b	#31
    274  f256		       1f		      .BYTE.b	#31
    275  f257		       19		      .BYTE.b	#25	; E
    276  f258		       19		      .BYTE.b	#25
    277  f259		       19		      .BYTE.b	#25
    278  f25a		       19		      .BYTE.b	#25
    279  f25b		       14		      .BYTE.b	#20	; G
    280  f25c		       14		      .BYTE.b	#20
    281  f25d		       14		      .BYTE.b	#20
    282  f25e		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f25f					      include	"title.asm"
      1  f25f							;================
      2  f25f							; Constants
      3  f25f							;================
      4  f25f
      5  f25f		       00 00	   TITLE_BG_COLOR =	#$00
      6  f25f		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f25f		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f25f		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f25f
     10  f25f		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f25f		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f25f		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f25f		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f25f		       00 09	   TITLE_AUDIO_STEP =	9
     15  f25f
     16  f25f		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     17  f25f		       00 05	   TITLE_FRAME_BOT_LINES =	5
     18  f25f		       00 07	   TITLE_LABEL_LINE =	7
     19  f25f
     20  f25f		       00 0f	   TITLE_GAP_SIZE =	#15
     21  f25f
     22  f25f		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     23  f25f		       00 09	   TITLE_SPIDER_SIZE =	#9
     24  f25f		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f25f
     26  f25f				   TitleInit
     27  f25f
     28  f25f							; Setup logic and kernel
      0  f25f					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f25f				   .POINTER   SET	VBlankPtr
      2  f25f				   .ADDRESS   SET	TitleVerticalBlank
      3  f25f
      4  f25f		       a9 cc		      LDA	#<.ADDRESS
      5  f261		       85 87		      STA	.POINTER
      6  f263		       a9 f2		      LDA	#>.ADDRESS
      7  f265		       85 88		      STA	.POINTER+1
      8  f267
      0  f267					      SET_POINTER	KernelPtr, TitleKernel
      1  f267				   .POINTER   SET	KernelPtr
      2  f267				   .ADDRESS   SET	TitleKernel
      3  f267
      4  f267		       a9 64		      LDA	#<.ADDRESS
      5  f269		       85 89		      STA	.POINTER
      6  f26b		       a9 f3		      LDA	#>.ADDRESS
      7  f26d		       85 8a		      STA	.POINTER+1
      8  f26f
      0  f26f					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f26f				   .POINTER   SET	OverScanPtr
      2  f26f				   .ADDRESS   SET	TitleOverScan
      3  f26f
      4  f26f		       a9 1d		      LDA	#<.ADDRESS
      5  f271		       85 8b		      STA	.POINTER
      6  f273		       a9 f3		      LDA	#>.ADDRESS
      7  f275		       85 8c		      STA	.POINTER+1
      8  f277
     32  f277
     33  f277							; Load Colors
     34  f277		       a9 00		      lda	#TITLE_BG_COLOR
     35  f279		       85 09		      sta	COLUBK
     36  f27b		       a9 06		      lda	#TITLE_WEB_COLOR
     37  f27d		       85 08		      sta	COLUPF
     38  f27f		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f281		       85 06		      sta	COLUP0
     40  f283		       85 07		      sta	COLUP1
     41  f285
     42  f285							; Load audio settings
     43  f285
     44  f285							; Melody Line
     45  f285		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f287		       85 15		      sta	AUDC0
     47  f289		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f28b		       85 19		      sta	AUDV0
     49  f28d
     50  f28d							; Drums and Bass
     51  f28d		       a9 00		      lda	#0
     52  f28f		       85 16		      sta	AUDC1
     53  f291		       85 1a		      sta	AUDV1
     54  f293
     55  f293							; Make it so that we play the first note immediately
     56  f293		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f295		       85 90		      sta	AudioStep
     58  f297		       a9 01		      lda	#1
     59  f299		       85 8e		      sta	FrameTimer
     60  f29b
     61  f29b							; Setup Spider Sprite
      0  f29b					      SET_POINTER	SpiderPtr, TitleSpider
      1  f29b				   .POINTER   SET	SpiderPtr
      2  f29b				   .ADDRESS   SET	TitleSpider
      3  f29b
      4  f29b		       a9 a4		      LDA	#<.ADDRESS
      5  f29d		       85 9e		      STA	.POINTER
      6  f29f		       a9 f4		      LDA	#>.ADDRESS
      7  f2a1		       85 9f		      STA	.POINTER+1
      8  f2a3
     63  f2a3
     64  f2a3		       a5 81		      lda	NuSiz0
     65  f2a5		       29 f8		      and	#%11111000
     66  f2a7		       09 06		      ora	#%00000110	; Triple Sprite
     67  f2a9		       85 81		      sta	NuSiz0
     68  f2ab		       85 04		      sta	NUSIZ0
     69  f2ad		       85 82		      sta	NuSiz1
     70  f2af		       85 05		      sta	NUSIZ1
     71  f2b1
     72  f2b1		       a9 00		      lda	#0	; No reflect
     73  f2b3		       85 0b		      sta	REFP0
     74  f2b5		       a9 ff		      lda	#$FF	; Reflect P1
     75  f2b7		       85 0c		      sta	REFP1
     76  f2b9
     77  f2b9		       a9 00		      lda	#0
     78  f2bb		       85 a5		      sta	SpiderDrawPos	; Initialize animation state
     79  f2bd
     80  f2bd							; Setup Web Line
     81  f2bd							; Missle0 (2 clock size)
     82  f2bd		       a5 81		      lda	NuSiz0
     83  f2bf		       29 cf		      and	#%11001111
     84  f2c1		       09 10		      ora	#%00010000
     85  f2c3		       85 81		      sta	NuSiz0
     86  f2c5		       85 04		      sta	NUSIZ0
     87  f2c7
     88  f2c7							; Disable at start
     89  f2c7		       a9 00		      lda	#0
     90  f2c9		       85 1d		      sta	ENAM0
     91  f2cb
     92  f2cb		       60		      rts
     93  f2cc
     94  f2cc				   TitleVerticalBlank
     95  f2cc
     96  f2cc							; Refresh random values
     97  f2cc		       20 13 f0 	      jsr	Random
     98  f2cf
     99  f2cf		       20 d6 f2 	      jsr	TitlePosition
    100  f2d2		       20 f0 f2 	      jsr	TitleAnimation
    101  f2d5
    102  f2d5		       60		      rts
    103  f2d6
    104  f2d6				   TitlePosition
    105  f2d6
    106  f2d6							; Position Spider
    107  f2d6		       a2 00		      ldx	#0	; Object (player0)
    108  f2d8		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    109  f2da		       20 00 f0 	      jsr	PosObject
    110  f2dd
    111  f2dd		       a2 01		      ldx	#1	; Object (player1)
    112  f2df		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    113  f2e1		       20 00 f0 	      jsr	PosObject
    114  f2e4
    115  f2e4							; Position Web Line
    116  f2e4		       a2 02		      ldx	#2	; Object (missle0)
    117  f2e6		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    118  f2e8		       20 00 f0 	      jsr	PosObject
    119  f2eb
    120  f2eb		       85 02		      sta	WSYNC
    121  f2ed		       85 2a		      sta	HMOVE
    122  f2ef
    123  f2ef		       60		      rts
    124  f2f0
    125  f2f0				   TitleAnimation
    126  f2f0
    127  f2f0		       a5 90		      lda	AudioStep
    128  f2f2		       c9 00		      cmp	#0
    129  f2f4		       f0 0d		      beq	.title_animation_1
    130  f2f6		       c9 04		      cmp	#4
    131  f2f8		       f0 16		      beq	.title_animation_2
    132  f2fa		       c9 09		      cmp	#9
    133  f2fc		       f0 05		      beq	.title_animation_1
    134  f2fe		       c9 0c		      cmp	#12
    135  f300		       f0 0e		      beq	.title_animation_2
    136  f302		       60		      rts
    137  f303
    138  f303				   .title_animation_1
      0  f303					      SET_POINTER	SpiderPtr, TitleSpider
      1  f303				   .POINTER   SET	SpiderPtr
      2  f303				   .ADDRESS   SET	TitleSpider
      3  f303
      4  f303		       a9 a4		      LDA	#<.ADDRESS
      5  f305		       85 9e		      STA	.POINTER
      6  f307		       a9 f4		      LDA	#>.ADDRESS
      7  f309		       85 9f		      STA	.POINTER+1
      8  f30b
    140  f30b		       a9 00		      lda	#0
    141  f30d		       85 a5		      sta	SpiderDrawPos
    142  f30f		       60		      rts
    143  f310
    144  f310				   .title_animation_2
      0  f310					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f310				   .POINTER   SET	SpiderPtr
      2  f310				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f310
      4  f310		       a9 ad		      LDA	#<.ADDRESS
      5  f312		       85 9e		      STA	.POINTER
      6  f314		       a9 f4		      LDA	#>.ADDRESS
      7  f316		       85 9f		      STA	.POINTER+1
      8  f318
    146  f318		       a9 01		      lda	#1
    147  f31a		       85 a5		      sta	SpiderDrawPos
    148  f31c		       60		      rts
    149  f31d
    150  f31d				   TitleOverScan
    151  f31d		       20 24 f3 	      jsr	TitleAudio
    152  f320		       20 5c f3 	      jsr	TitleState
    153  f323		       60		      rts
    154  f324
    155  f324				   TitleAudio
    156  f324
    157  f324		       a6 8e		      ldx	FrameTimer
    158  f326		       e0 00		      cpx	#0
    159  f328		       d0 31		      bne	.title_audio_return
    160  f32a
    161  f32a							; Reset Timer
    162  f32a		       a2 09		      ldx	#TITLE_AUDIO_STEP
    163  f32c		       86 8e		      stx	FrameTimer
    164  f32e
    165  f32e				   .title_audio_play
    166  f32e
    167  f32e							; Increment melody position
    168  f32e		       a4 90		      ldy	AudioStep
    169  f330		       c8		      iny
    170  f331
    171  f331							; Check if we're at the end of the melody
    172  f331		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    173  f333		       d0 02		      bne	.title_audio_play_note
    174  f335
    175  f335							; Loop our audio step
    176  f335		       a0 00		      ldy	#0
    177  f337
    178  f337				   .title_audio_play_note
    179  f337
    180  f337							; Save current position
    181  f337		       84 90		      sty	AudioStep
    182  f339
    183  f339							; Basic Melody Line
    184  f339		       b9 b6 f4 	      lda	TitleAudio0,y
    185  f33c		       85 17		      sta	AUDF0
    186  f33e
    187  f33e							; Drums and Bass
    188  f33e		       b9 c6 f4 	      lda	TitleTone1,y
    189  f341		       c9 ff		      cmp	#$FF
    190  f343		       f0 0e		      beq	.title_audio_play_note_1_mute
    191  f345
    192  f345		       85 16		      sta	AUDC1
    193  f347		       b9 d6 f4 	      lda	TitleAudio1,y
    194  f34a		       85 18		      sta	AUDF1
    195  f34c		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    196  f34e		       85 1a		      sta	AUDV1
    197  f350
    198  f350		       4c 5b f3 	      jmp	.title_audio_return
    199  f353
    200  f353				   .title_audio_play_note_1_mute
    201  f353
    202  f353		       a9 00		      lda	#0
    203  f355		       85 18		      sta	AUDF1
    204  f357		       85 16		      sta	AUDC1
    205  f359		       85 1a		      sta	AUDV1
    206  f35b
    207  f35b				   .title_audio_return
    208  f35b		       60		      rts
    209  f35c
    210  f35c				   TitleState
    211  f35c							; Check if Fire Button on controller 1 is pressed
    212  f35c		       a5 0c		      lda	INPT4
    213  f35e		       30 03		      bmi	.title_state_return
    214  f360
    215  f360		       20 19 fc 	      jsr	GameInit
    216  f363
    217  f363				   .title_state_return
    218  f363		       60		      rts
    219  f364
    220  f364				   TitleKernel
    221  f364
    222  f364							; Playfield Control
    223  f364		       a5 80		      lda	CtrlPf
    224  f366		       29 fe		      and	#%11111110	; No mirroring
    225  f368		       85 80		      sta	CtrlPf
    226  f36a		       85 0a		      sta	CTRLPF
    227  f36c
    228  f36c							; Turn on display
    229  f36c		       a9 00		      lda	#0
    230  f36e		       85 01		      sta	VBLANK
    231  f370
    232  f370		       85 02		      sta	WSYNC
    233  f372
    234  f372				   TitleFrameTopDraw
    235  f372
    236  f372							; Start Counters
    237  f372		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    238  f374		       a0 00		      ldy	#0	; Image Counter
    239  f376
    240  f376				   .title_frame_top
    241  f376
    242  f376							; 76 machine cycles per scanline
    243  f376		       85 02		      sta	WSYNC
    244  f378
    245  f378				   .title_frame_top_load		; 66 cycles
    246  f378
    247  f378							; First half of image
    248  f378		       b9 3e f4 	      lda	TitleFrameTop,y	; 5
    249  f37b		       85 0d		      sta	PF0	; 4
    250  f37d		       b9 3f f4 	      lda	TitleFrameTop+1,y	; 5
    251  f380		       85 0e		      sta	PF1	; 4
    252  f382		       b9 40 f4 	      lda	TitleFrameTop+2,y	; 5
    253  f385		       85 0f		      sta	PF2	; 4
    254  f387
      0  f387					      sleep	6
      1  f387				   .CYCLES    SET	6
      2  f387
      3  f387				  -	      IF	.CYCLES < 2
      4  f387				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f387				  -	      ERR
      6  f387					      ENDIF
      7  f387
      8  f387				  -	      IF	.CYCLES & 1
      9  f387				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f387				  -	      nop	0
     11  f387				  -	      ELSE
     12  f387				  -	      bit	VSYNC
     13  f387				  -	      ENDIF
     14  f387				  -.CYCLES    SET	.CYCLES - 3
     15  f387					      ENDIF
     16  f387
     17  f387					      REPEAT	.CYCLES / 2
     18  f387		       ea		      nop
     17  f387					      REPEND
     18  f388		       ea		      nop
     17  f388					      REPEND
     18  f389		       ea		      nop
     19  f38a					      REPEND
    256  f38a
    257  f38a							; Second half of image
    258  f38a		       b9 41 f4 	      lda	TitleFrameTop+3,y	; 5
    259  f38d		       85 0d		      sta	PF0	; 4
    260  f38f		       b9 42 f4 	      lda	TitleFrameTop+4,y	; 5
    261  f392		       85 0e		      sta	PF1	; 4
    262  f394		       b9 43 f4 	      lda	TitleFrameTop+5,y	; 5
    263  f397		       85 0f		      sta	PF2	; 4
    264  f399
    265  f399				   .title_frame_top_index		; 4 cycles
    266  f399
    267  f399		       ca		      dex		; 2
    268  f39a		       d0 da		      bne	.title_frame_top	; 2
    269  f39c
    270  f39c				   .title_frame_top_index_next		; 6 cycles
    271  f39c
    272  f39c							; Restore scanline counter
    273  f39c		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    274  f39e
    275  f39e		       98		      tya		; 2
    276  f39f		       18		      clc		; 2
    277  f3a0		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    278  f3a2		       a8		      tay		; 2
    279  f3a3
    280  f3a3		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA
    281  f3a5		       d0 04		      bne	.title_frame_top_label_color_skip
    282  f3a7		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    283  f3a9		       85 08		      sta	COLUPF	; 4
    284  f3ab				   .title_frame_top_label_color_skip
    285  f3ab
    286  f3ab		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA
    287  f3ad		       d0 c7		      bne	.title_frame_top	; 2
    288  f3af
    289  f3af				   .title_frame_top_clean
    290  f3af
    291  f3af							; Clear out playfield
    292  f3af		       a9 00		      lda	#0
    293  f3b1		       85 0d		      sta	PF0
    294  f3b3		       85 0e		      sta	PF1
    295  f3b5		       85 0f		      sta	PF2
    296  f3b7
    297  f3b7				   TitleWebDraw
    298  f3b7		       a9 02		      lda	#%00000010
    299  f3b9		       85 1d		      sta	ENAM0
    300  f3bb
    301  f3bb		       a9 06		      lda	#TITLE_WEB_COLOR
    302  f3bd		       85 06		      sta	COLUP0
    303  f3bf
    304  f3bf		       a2 0f		      ldx	#TITLE_GAP_SIZE
    305  f3c1				   .title_web_gap
    306  f3c1		       ca		      dex
    307  f3c2		       85 02		      sta	WSYNC
    308  f3c4		       d0 fb		      bne	.title_web_gap
    309  f3c6
    310  f3c6				   TitleSpiderDraw
    311  f3c6
    312  f3c6		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    313  f3c8
    314  f3c8		       a5 a5		      lda	SpiderDrawPos
    315  f3ca		       c9 01		      cmp	#1
    316  f3cc		       d0 0c		      bne	.title_spider_extra_web_disable
    317  f3ce
    318  f3ce				   .title_spider_extra_web_start
    319  f3ce		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    320  f3d0				   .title_spider_extra_web_loop
    321  f3d0		       85 02		      sta	WSYNC
    322  f3d2		       ca		      dex
    323  f3d3		       d0 fb		      bne	.title_spider_extra_web_loop
    324  f3d5
    325  f3d5		       88		      dey
    326  f3d6		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    327  f3d8		       d0 f4		      bne	.title_spider_extra_web_start
    328  f3da
    329  f3da				   .title_spider_extra_web_disable
    330  f3da		       a9 00		      lda	#0
    331  f3dc		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    332  f3de
    333  f3de		       85 02		      sta	WSYNC
    334  f3e0
    335  f3e0		       85 1d		      sta	ENAM0
    336  f3e2		       a9 56		      lda	#TITLE_SPIDER_COLOR
    337  f3e4		       85 06		      sta	COLUP0
    338  f3e6
    339  f3e6				   .title_spider
    340  f3e6		       b1 9e		      lda	(SpiderPtr),y
    341  f3e8		       85 1b		      sta	GRP0
    342  f3ea		       85 1c		      sta	GRP1
    343  f3ec
    344  f3ec				   .title_spider_delay
    345  f3ec		       ca		      dex
    346  f3ed		       85 02		      sta	WSYNC
    347  f3ef		       d0 fb		      bne	.title_spider_delay
    348  f3f1
    349  f3f1				   .title_spider_index
    350  f3f1		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    351  f3f3		       88		      dey
    352  f3f4		       10 f0		      bpl	.title_spider
    353  f3f6
    354  f3f6				   .title_spider_clean
    355  f3f6
    356  f3f6							; Clear sprites
    357  f3f6		       a9 00		      lda	#0
    358  f3f8		       85 1b		      sta	GRP0
    359  f3fa		       85 1c		      sta	GRP1
    360  f3fc
    361  f3fc				   TitleFrameBottomDraw
    362  f3fc
    363  f3fc							; Load Frame Color
    364  f3fc		       a9 06		      lda	#TITLE_WEB_COLOR
    365  f3fe		       85 08		      sta	COLUPF
    366  f400
    367  f400							; Start Counters
    368  f400		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    369  f402		       a0 00		      ldy	#0	; Image Counter
    370  f404
    371  f404				   .title_frame_bottom
    372  f404
    373  f404							; 76 machine cycles per scanline
    374  f404		       85 02		      sta	WSYNC
    375  f406
    376  f406				   .title_frame_bottom_load		; 66 cycles
    377  f406
    378  f406							; First half of image
    379  f406		       b9 86 f4 	      lda	TitleFrameBottom,y	; 5
    380  f409		       85 0d		      sta	PF0	; 4
    381  f40b		       b9 87 f4 	      lda	TitleFrameBottom+1,y	; 5
    382  f40e		       85 0e		      sta	PF1	; 4
    383  f410		       b9 88 f4 	      lda	TitleFrameBottom+2,y	; 5
    384  f413		       85 0f		      sta	PF2	; 4
    385  f415
      0  f415					      sleep	6
      1  f415				   .CYCLES    SET	6
      2  f415
      3  f415				  -	      IF	.CYCLES < 2
      4  f415				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f415				  -	      ERR
      6  f415					      ENDIF
      7  f415
      8  f415				  -	      IF	.CYCLES & 1
      9  f415				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f415				  -	      nop	0
     11  f415				  -	      ELSE
     12  f415				  -	      bit	VSYNC
     13  f415				  -	      ENDIF
     14  f415				  -.CYCLES    SET	.CYCLES - 3
     15  f415					      ENDIF
     16  f415
     17  f415					      REPEAT	.CYCLES / 2
     18  f415		       ea		      nop
     17  f415					      REPEND
     18  f416		       ea		      nop
     17  f416					      REPEND
     18  f417		       ea		      nop
     19  f418					      REPEND
    387  f418
    388  f418							; Second half of image
    389  f418		       b9 89 f4 	      lda	TitleFrameBottom+3,y	; 5
    390  f41b		       85 0d		      sta	PF0	; 4
    391  f41d		       b9 8a f4 	      lda	TitleFrameBottom+4,y	; 5
    392  f420		       85 0e		      sta	PF1	; 4
    393  f422		       b9 8b f4 	      lda	TitleFrameBottom+5,y	; 5
    394  f425		       85 0f		      sta	PF2	; 4
    395  f427
    396  f427				   .title_frame_bottom_index		; 4 cycles
    397  f427
    398  f427		       ca		      dex		; 2
    399  f428		       d0 da		      bne	.title_frame_bottom	; 2
    400  f42a
    401  f42a				   .title_frame_bottom_index_next		; 6 cycles
    402  f42a
    403  f42a							; Restore scanline counter
    404  f42a		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    405  f42c
    406  f42c		       98		      tya		; 2
    407  f42d		       18		      clc		; 2
    408  f42e		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    409  f430		       a8		      tay		; 2
    410  f431		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    411  f433		       d0 cf		      bne	.title_frame_bottom	; 2
    412  f435
    413  f435				   .title_frame_bottom_clean
    414  f435
    415  f435							; Clear out playfield
    416  f435		       a9 00		      lda	#0
    417  f437		       85 0d		      sta	PF0
    418  f439		       85 0e		      sta	PF1
    419  f43b		       85 0f		      sta	PF2
    420  f43d
    421  f43d				   .title_kernel_return
    422  f43d		       60		      rts
    423  f43e
    424  f43e				   TitleAssets
    425  f43e
    426  f43e							; Assets
------- FILE title_frame_top.asm LEVEL 3 PASS 2
      0  f43e					      include	"title_frame_top.asm"
      1  f43e				   TitleFrameTop
      2  f43e
      3  f43e		       a0		      .BYTE.b	%10100000
      4  f43f		       54		      .BYTE.b	%01010100
      5  f440		       01		      .BYTE.b	%00000001
      6  f441		       00		      .BYTE.b	%00000000
      7  f442		       03		      .BYTE.b	%00000011
      8  f443		       2c		      .BYTE.b	%00101100
      9  f444
     10  f444		       d0		      .BYTE.b	%11010000
     11  f445		       23		      .BYTE.b	%00100011
     12  f446		       00		      .BYTE.b	%00000000
     13  f447		       00		      .BYTE.b	%00000000
     14  f448		       00		      .BYTE.b	%00000000
     15  f449		       51		      .BYTE.b	%01010001
     16  f44a
     17  f44a		       60		      .BYTE.b	%01100000
     18  f44b		       dc		      .BYTE.b	%11011100
     19  f44c		       00		      .BYTE.b	%00000000
     20  f44d		       00		      .BYTE.b	%00000000
     21  f44e		       00		      .BYTE.b	%00000000
     22  f44f		       8e		      .BYTE.b	%10001110
     23  f450
     24  f450		       b0		      .BYTE.b	%10110000
     25  f451		       00		      .BYTE.b	%00000000
     26  f452		       00		      .BYTE.b	%00000000
     27  f453		       00		      .BYTE.b	%00000000
     28  f454		       00		      .BYTE.b	%00000000
     29  f455		       51		      .BYTE.b	%01010001
     30  f456
     31  f456		       40		      .BYTE.b	%01000000
     32  f457		       80		      .BYTE.b	%10000000
     33  f458		       00		      .BYTE.b	%00000000
     34  f459		       00		      .BYTE.b	%00000000
     35  f45a		       00		      .BYTE.b	%00000000
     36  f45b		       ad		      .BYTE.b	%10101101
     37  f45c
     38  f45c		       50		      .BYTE.b	%01010000
     39  f45d		       00		      .BYTE.b	%00000000
     40  f45e		       00		      .BYTE.b	%00000000
     41  f45f		       00		      .BYTE.b	%00000000
     42  f460		       01		      .BYTE.b	%00000001
     43  f461		       82		      .BYTE.b	%10000010
     44  f462
     45  f462		       20		      .BYTE.b	%00100000
     46  f463		       00		      .BYTE.b	%00000000
     47  f464		       00		      .BYTE.b	%00000000
     48  f465		       00		      .BYTE.b	%00000000
     49  f466		       02		      .BYTE.b	%00000010
     50  f467		       00		      .BYTE.b	%00000000
     51  f468
     52  f468		       c0		      .BYTE.b	%11000000
     53  f469		       77		      .BYTE.b	%01110111
     54  f46a		       66		      .BYTE.b	%01100110
     55  f46b		       30		      .BYTE.b	%00110000
     56  f46c		       22		      .BYTE.b	%00100010
     57  f46d		       1b		      .BYTE.b	%00011011
     58  f46e
     59  f46e		       40		      .BYTE.b	%01000000
     60  f46f		       52		      .BYTE.b	%01010010
     61  f470		       2a		      .BYTE.b	%00101010
     62  f471		       50		      .BYTE.b	%01010000
     63  f472		       22		      .BYTE.b	%00100010
     64  f473		       29		      .BYTE.b	%00101001
     65  f474
     66  f474		       c0		      .BYTE.b	%11000000
     67  f475		       72		      .BYTE.b	%01110010
     68  f476		       6a		      .BYTE.b	%01101010
     69  f477		       50		      .BYTE.b	%01010000
     70  f478		       22		      .BYTE.b	%00100010
     71  f479		       1b		      .BYTE.b	%00011011
     72  f47a
     73  f47a		       80		      .BYTE.b	%10000000
     74  f47b		       42		      .BYTE.b	%01000010
     75  f47c		       2a		      .BYTE.b	%00101010
     76  f47d		       30		      .BYTE.b	%00110000
     77  f47e		       2a		      .BYTE.b	%00101010
     78  f47f		       29		      .BYTE.b	%00101001
     79  f480
     80  f480		       c0		      .BYTE.b	%11000000
     81  f481		       47		      .BYTE.b	%01000111
     82  f482		       e6		      .BYTE.b	%11100110
     83  f483		       50		      .BYTE.b	%01010000
     84  f484		       14		      .BYTE.b	%00010100
     85  f485		       1b		      .BYTE.b	%00011011
------- FILE title.asm
------- FILE title_frame_bottom.asm LEVEL 3 PASS 2
      0  f486					      include	"title_frame_bottom.asm"
      1  f486				   TitleFrameBottom
      2  f486
      3  f486		       20		      .BYTE.b	%00100000
      4  f487		       00		      .BYTE.b	%00000000
      5  f488		       00		      .BYTE.b	%00000000
      6  f489		       00		      .BYTE.b	%00000000
      7  f48a		       00		      .BYTE.b	%00000000
      8  f48b		       64		      .BYTE.b	%01100100
      9  f48c
     10  f48c		       50		      .BYTE.b	%01010000
     11  f48d		       00		      .BYTE.b	%00000000
     12  f48e		       00		      .BYTE.b	%00000000
     13  f48f		       00		      .BYTE.b	%00000000
     14  f490		       00		      .BYTE.b	%00000000
     15  f491		       98		      .BYTE.b	%10011000
     16  f492
     17  f492		       90		      .BYTE.b	%10010000
     18  f493		       80		      .BYTE.b	%10000000
     19  f494		       00		      .BYTE.b	%00000000
     20  f495		       00		      .BYTE.b	%00000000
     21  f496		       00		      .BYTE.b	%00000000
     22  f497		       28		      .BYTE.b	%00101000
     23  f498
     24  f498		       60		      .BYTE.b	%01100000
     25  f499		       60		      .BYTE.b	%01100000
     26  f49a		       00		      .BYTE.b	%00000000
     27  f49b		       00		      .BYTE.b	%00000000
     28  f49c		       00		      .BYTE.b	%00000000
     29  f49d		       44		      .BYTE.b	%01000100
     30  f49e
     31  f49e		       d0		      .BYTE.b	%11010000
     32  f49f		       1c		      .BYTE.b	%00011100
     33  f4a0		       00		      .BYTE.b	%00000000
     34  f4a1		       00		      .BYTE.b	%00000000
     35  f4a2		       00		      .BYTE.b	%00000000
     36  f4a3		       ab		      .BYTE.b	%10101011
------- FILE title.asm
------- FILE title_spider.asm LEVEL 3 PASS 2
      0  f4a4					      include	"title_spider.asm"
      1  f4a4				   TitleSpider
      2  f4a4
      3  f4a4		       30		      .BYTE.b	%00110000
      4  f4a5		       67		      .BYTE.b	%01100111
      5  f4a6		       4f		      .BYTE.b	%01001111
      6  f4a7		       dd		      .BYTE.b	%11011101
      7  f4a8		       d8		      .BYTE.b	%11011000
      8  f4a9		       df		      .BYTE.b	%11011111
      9  f4aa		       4d		      .BYTE.b	%01001101
     10  f4ab		       6f		      .BYTE.b	%01101111
     11  f4ac		       3b		      .BYTE.b	%00111011
     12  f4ad
     13  f4ad		       37		      .BYTE.b	%00110111
     14  f4ae		       6d		      .BYTE.b	%01101101
     15  f4af		       d8		      .BYTE.b	%11011000
     16  f4b0		       df		      .BYTE.b	%11011111
     17  f4b1		       cd		      .BYTE.b	%11001101
     18  f4b2		       6f		      .BYTE.b	%01101111
     19  f4b3		       3b		      .BYTE.b	%00111011
     20  f4b4		       00		      .BYTE.b	%00000000
     21  f4b5		       00		      .BYTE.b	%00000000
------- FILE title.asm
    430  f4b6
    431  f4b6				   TitleAudio0
    432  f4b6
    433  f4b6		       0f		      .BYTE.b	#15	; B
    434  f4b7		       13		      .BYTE.b	#19	; G
    435  f4b8		       17		      .BYTE.b	#23	; E
    436  f4b9		       13		      .BYTE.b	#19	; G
    437  f4ba		       0e		      .BYTE.b	#14	; C
    438  f4bb		       13		      .BYTE.b	#19
    439  f4bc		       17		      .BYTE.b	#23
    440  f4bd		       13		      .BYTE.b	#19
    441  f4be		       0c		      .BYTE.b	#12	; D
    442  f4bf		       13		      .BYTE.b	#19
    443  f4c0		       17		      .BYTE.b	#23
    444  f4c1		       13		      .BYTE.b	#19
    445  f4c2		       0e		      .BYTE.b	#14	; C
    446  f4c3		       13		      .BYTE.b	#19
    447  f4c4		       17		      .BYTE.b	#23
    448  f4c5		       13		      .BYTE.b	#19
    449  f4c6
    450  f4c6				   TitleTone1
    451  f4c6
    452  f4c6		       0f		      .BYTE.b	#15	; Electronic Rumble
    453  f4c7		       ff		      .BYTE.b	#$FF
    454  f4c8		       01		      .BYTE.b	#1	; Low Pure Tone
    455  f4c9		       01		      .BYTE.b	#1
    456  f4ca		       08		      .BYTE.b	#8	; White Noise
    457  f4cb		       01		      .BYTE.b	#1
    458  f4cc		       01		      .BYTE.b	#1
    459  f4cd		       ff		      .BYTE.b	#$FF
    460  f4ce		       ff		      .BYTE.b	#$FF
    461  f4cf		       0f		      .BYTE.b	#15
    462  f4d0		       ff		      .BYTE.b	#$FF
    463  f4d1		       ff		      .BYTE.b	#$FF
    464  f4d2		       08		      .BYTE.b	#8
    465  f4d3		       ff		      .BYTE.b	#$FF
    466  f4d4		       01		      .BYTE.b	#1
    467  f4d5		       01		      .BYTE.b	#1
    468  f4d6
    469  f4d6				   TitleAudio1
    470  f4d6
    471  f4d6		       1d		      .BYTE.b	#29	; Kick
    472  f4d7		       ff		      .BYTE.b	#$FF
    473  f4d8		       1f		      .BYTE.b	#31	; C
    474  f4d9		       1f		      .BYTE.b	#31
    475  f4da		       07		      .BYTE.b	#7	; Snare
    476  f4db		       1f		      .BYTE.b	#31
    477  f4dc		       1f		      .BYTE.b	#31
    478  f4dd		       ff		      .BYTE.b	#$FF
    479  f4de		       ff		      .BYTE.b	#$FF
    480  f4df		       1d		      .BYTE.b	#29
    481  f4e0		       ff		      .BYTE.b	#$FF
    482  f4e1		       ff		      .BYTE.b	#$FF
    483  f4e2		       07		      .BYTE.b	#7
    484  f4e3		       ff		      .BYTE.b	#$FF
    485  f4e4		       17		      .BYTE.b	#23	; F
    486  f4e5		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4e6					      include	"game.asm"
      1  f4e6							;================
      2  f4e6							; Game
      3  f4e6							;================
      4  f4e6
      5  f4e6							; Constants
      6  f4e6
      7  f4e6		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f4e6		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4e6		       00 09	   GAME_AUDIO_STEP =	9
     10  f4e6		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4e6		       00 06	   GAME_AUDIO_TONE =	6
     12  f4e6
     13  f4e6							; Object Code
     14  f4e6
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f4e6					      include	"objects/level.asm"
      1  f4e6							;======================
      2  f4e6							; Level Logic
      3  f4e6							;======================
      4  f4e6
      5  f4e6							; Constants
      6  f4e6
      7  f4e6		       00 00	   LEVEL_MIN  =	0
      8  f4e6		       00 03	   LEVEL_MAX  =	3
      9  f4e6
     10  f4e6				   LevelInit
     11  f4e6
     12  f4e6							; Set beginning level by difficulty switches treated as binary
     13  f4e6		       ad 82 02 	      lda	SWCHB
     14  f4e9					      REPEAT	6
     15  f4e9		       4a		      lsr
     14  f4e9					      REPEND
     15  f4ea		       4a		      lsr
     14  f4ea					      REPEND
     15  f4eb		       4a		      lsr
     14  f4eb					      REPEND
     15  f4ec		       4a		      lsr
     14  f4ec					      REPEND
     15  f4ed		       4a		      lsr
     14  f4ed					      REPEND
     15  f4ee		       4a		      lsr
     16  f4ef					      REPEND
     17  f4ef		       29 03		      and	#%00000011
     18  f4f1		       85 9a		      sta	LevelCurrent
     19  f4f3
     20  f4f3		       20 0c f5 	      jsr	LevelLoad
     21  f4f6
     22  f4f6		       60		      rts
     23  f4f7
     24  f4f7				   LevelUpdate
     25  f4f7
     26  f4f7							; Check if score is high enough
     27  f4f7		       a4 9a		      ldy	LevelCurrent
     28  f4f9		       a5 93		      lda	ScoreValue+1
     29  f4fb		       d9 19 f5 	      cmp	LevelVars+0,y
     30  f4fe		       90 0b		      bcc	.level_update_return
     31  f500
     32  f500							; Check if we haven't reached the final level
     33  f500		       a5 9a		      lda	LevelCurrent
     34  f502		       c9 03		      cmp	#LEVEL_MAX
     35  f504		       b0 05		      bcs	.level_update_return
     36  f506
     37  f506		       e6 9a		      inc	LevelCurrent
     38  f508		       20 0c f5 	      jsr	LevelLoad
     39  f50b
     40  f50b				   .level_update_return
     41  f50b		       60		      rts
     42  f50c
     43  f50c				   LevelLoad
     44  f50c		       a4 9a		      ldy	LevelCurrent
     45  f50e
     46  f50e							; Background Color
     47  f50e		       b9 1d f5 	      lda	LevelVars+4,y
     48  f511		       85 9c		      sta	WebColor+0
     49  f513
     50  f513							; Web Color
     51  f513		       b9 21 f5 	      lda	LevelVars+8,y
     52  f516		       85 9d		      sta	WebColor+1
     53  f518
     54  f518		       60		      rts
     55  f519
     56  f519				   LevelVars
     57  f519
     58  f519							; Score needed
     59  f519		       10		      .BYTE.b	#$10
     60  f51a		       20		      .BYTE.b	#$20
     61  f51b		       40		      .BYTE.b	#$40
     62  f51c		       ff		      .BYTE.b	#$FF
     63  f51d
     64  f51d							; Background Color
     65  f51d		       00		      .BYTE.b	#$00
     66  f51e		       60		      .BYTE.b	#$60
     67  f51f		       50		      .BYTE.b	#$50
     68  f520		       30		      .BYTE.b	#$30
     69  f521
     70  f521							; Web Color
     71  f521		       06		      .BYTE.b	#$06
     72  f522		       64		      .BYTE.b	#$64
     73  f523		       54		      .BYTE.b	#$54
     74  f524		       34		      .BYTE.b	#$34
     75  f525
     76  f525							; Bug Speed
     77  f525
     78  f525							; Swatter Wait
     79  f525
     80  f525							; Swatter Damage
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f525					      include	"objects/score.asm"
      1  f525							;======================
      2  f525							; Score (playfield)
      3  f525							;======================
      4  f525
      5  f525							; Constants
      6  f525
      7  f525		       00 00	   SCORE_BG_COLOR =	#$00
      8  f525		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f525		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f525
     11  f525		       00 05	   SCORE_CHAR_SIZE =	5
     12  f525		       00 02	   SCORE_LINE_SIZE =	2
     13  f525		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f525
     15  f525							; Initialization
     16  f525
     17  f525				   ScoreInit
     18  f525
     19  f525							; Health Score
     20  f525		       a9 ff		      lda	#$FF
     21  f527		       85 92		      sta	ScoreValue+0
     22  f529
     23  f529							; Game Score
     24  f529		       a9 00		      lda	#0
     25  f52b		       85 93		      sta	ScoreValue+1
     26  f52d
     27  f52d		       60		      rts
     28  f52e
     29  f52e							; Frame Update
     30  f52e
     31  f52e				   ScoreUpdate
     32  f52e
     33  f52e		       a2 01		      ldx	#1
     34  f530				   .score_update_loop
     35  f530
     36  f530							; Ones Digit
     37  f530		       b5 92		      lda	ScoreValue,x
     38  f532		       29 0f		      and	#$0f
     39  f534		       85 83		      sta	Temp
     40  f536		       0a		      asl
     41  f537		       0a		      asl
     42  f538		       65 83		      adc	Temp
     43  f53a		       95 94		      sta	ScoreDigitOnes,x
     44  f53c
     45  f53c							; Tens Digit
     46  f53c		       b5 92		      lda	ScoreValue,x
     47  f53e		       29 f0		      and	#$f0
     48  f540		       4a		      lsr
     49  f541		       4a		      lsr
     50  f542		       85 83		      sta	Temp
     51  f544		       4a		      lsr
     52  f545		       4a		      lsr
     53  f546		       65 83		      adc	Temp
     54  f548		       95 96		      sta	ScoreDigitTens,x
     55  f54a
     56  f54a		       ca		      dex
     57  f54b		       10 e3		      bpl	.score_update_loop
     58  f54d
     59  f54d				   .score_update_end
     60  f54d		       60		      rts
     61  f54e
     62  f54e							; Draw loop (uses SCORE_LINES scanlines)
     63  f54e
     64  f54e				   ScoreDraw
     65  f54e
     66  f54e							; Load Colors
     67  f54e		       a9 00		      lda	#SCORE_BG_COLOR
     68  f550		       85 09		      sta	COLUBK
     69  f552		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f554		       85 08		      sta	COLUPF
     71  f556		       85 06		      sta	COLUP0
     72  f558		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f55a		       85 07		      sta	COLUP1
     74  f55c
     75  f55c							; Set Non-Mirror and p0/p1 color
     76  f55c		       a5 80		      lda	CtrlPf
     77  f55e		       29 fc		      and	#%11111100
     78  f560		       09 02		      ora	#%00000010
     79  f562		       85 80		      sta	CtrlPf
     80  f564		       85 0a		      sta	CTRLPF
     81  f566
     82  f566							;sta WSYNC
     83  f566
     84  f566		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f568
     86  f568				   .score_draw_line
     87  f568
     88  f568							; 1st Value
     89  f568		       a4 96		      ldy	ScoreDigitTens
     90  f56a		       b9 be f5 	      lda	ScoreDigits,y
     91  f56d		       29 f0		      and	#$f0
     92  f56f		       85 98		      sta	ScoreGfx
     93  f571		       a4 94		      ldy	ScoreDigitOnes
     94  f573		       b9 be f5 	      lda	ScoreDigits,y
     95  f576		       29 0f		      and	#$0f
     96  f578		       05 98		      ora	ScoreGfx
     97  f57a		       85 98		      sta	ScoreGfx
     98  f57c
     99  f57c		       85 02		      sta	WSYNC
    100  f57e		       85 0e		      sta	PF1
    101  f580
    102  f580							; 2nd Value
    103  f580		       a4 97		      ldy	ScoreDigitTens+1
    104  f582		       b9 be f5 	      lda	ScoreDigits,y
    105  f585		       29 f0		      and	#$f0
    106  f587		       85 99		      sta	ScoreGfx+1
    107  f589		       a4 95		      ldy	ScoreDigitOnes+1
    108  f58b		       b9 be f5 	      lda	ScoreDigits,y
    109  f58e		       29 0f		      and	#$0f
    110  f590		       05 99		      ora	ScoreGfx+1
    111  f592		       85 99		      sta	ScoreGfx+1
    112  f594
      0  f594					      sleep	12
      1  f594				   .CYCLES    SET	12
      2  f594
      3  f594				  -	      IF	.CYCLES < 2
      4  f594				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f594				  -	      ERR
      6  f594					      ENDIF
      7  f594
      8  f594				  -	      IF	.CYCLES & 1
      9  f594				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f594				  -	      nop	0
     11  f594				  -	      ELSE
     12  f594				  -	      bit	VSYNC
     13  f594				  -	      ENDIF
     14  f594				  -.CYCLES    SET	.CYCLES - 3
     15  f594					      ENDIF
     16  f594
     17  f594					      REPEAT	.CYCLES / 2
     18  f594		       ea		      nop
     17  f594					      REPEND
     18  f595		       ea		      nop
     17  f595					      REPEND
     18  f596		       ea		      nop
     17  f596					      REPEND
     18  f597		       ea		      nop
     17  f597					      REPEND
     18  f598		       ea		      nop
     17  f598					      REPEND
     18  f599		       ea		      nop
     19  f59a					      REPEND
    114  f59a		       85 0e		      sta	PF1
    115  f59c
    116  f59c		       a4 98		      ldy	ScoreGfx
    117  f59e		       85 02		      sta	WSYNC
    118  f5a0
    119  f5a0		       84 0e		      sty	PF1
    120  f5a2
    121  f5a2		       e6 94		      inc	ScoreDigitOnes
    122  f5a4		       e6 95		      inc	ScoreDigitOnes+1
    123  f5a6		       e6 96		      inc	ScoreDigitTens
    124  f5a8		       e6 97		      inc	ScoreDigitTens+1
    125  f5aa
      0  f5aa					      sleep	12
      1  f5aa				   .CYCLES    SET	12
      2  f5aa
      3  f5aa				  -	      IF	.CYCLES < 2
      4  f5aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5aa				  -	      ERR
      6  f5aa					      ENDIF
      7  f5aa
      8  f5aa				  -	      IF	.CYCLES & 1
      9  f5aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5aa				  -	      nop	0
     11  f5aa				  -	      ELSE
     12  f5aa				  -	      bit	VSYNC
     13  f5aa				  -	      ENDIF
     14  f5aa				  -.CYCLES    SET	.CYCLES - 3
     15  f5aa					      ENDIF
     16  f5aa
     17  f5aa					      REPEAT	.CYCLES / 2
     18  f5aa		       ea		      nop
     17  f5aa					      REPEND
     18  f5ab		       ea		      nop
     17  f5ab					      REPEND
     18  f5ac		       ea		      nop
     17  f5ac					      REPEND
     18  f5ad		       ea		      nop
     17  f5ad					      REPEND
     18  f5ae		       ea		      nop
     17  f5ae					      REPEND
     18  f5af		       ea		      nop
     19  f5b0					      REPEND
    127  f5b0		       ca		      dex
    128  f5b1		       85 0e		      sta	PF1
    129  f5b3
    130  f5b3		       d0 b3		      bne	.score_draw_line
    131  f5b5		       85 02		      sta	WSYNC
    132  f5b7
    133  f5b7							; Clear
    134  f5b7		       a9 00		      lda	#0
    135  f5b9		       85 0e		      sta	PF1
    136  f5bb
    137  f5bb		       85 02		      sta	WSYNC
    138  f5bd
    139  f5bd		       60		      rts
    140  f5be
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f5be					      include	"objects/score_digits.asm"
      1  f5be				   ScoreDigits
      2  f5be
      3  f5be		       77		      .BYTE.b	%01110111
      4  f5bf		       55		      .BYTE.b	%01010101
      5  f5c0		       55		      .BYTE.b	%01010101
      6  f5c1		       55		      .BYTE.b	%01010101
      7  f5c2		       77		      .BYTE.b	%01110111
      8  f5c3
      9  f5c3		       11		      .BYTE.b	%00010001
     10  f5c4		       11		      .BYTE.b	%00010001
     11  f5c5		       11		      .BYTE.b	%00010001
     12  f5c6		       11		      .BYTE.b	%00010001
     13  f5c7		       11		      .BYTE.b	%00010001
     14  f5c8
     15  f5c8		       77		      .BYTE.b	%01110111
     16  f5c9		       11		      .BYTE.b	%00010001
     17  f5ca		       77		      .BYTE.b	%01110111
     18  f5cb		       44		      .BYTE.b	%01000100
     19  f5cc		       77		      .BYTE.b	%01110111
     20  f5cd
     21  f5cd		       77		      .BYTE.b	%01110111
     22  f5ce		       11		      .BYTE.b	%00010001
     23  f5cf		       33		      .BYTE.b	%00110011
     24  f5d0		       11		      .BYTE.b	%00010001
     25  f5d1		       77		      .BYTE.b	%01110111
     26  f5d2
     27  f5d2		       55		      .BYTE.b	%01010101
     28  f5d3		       55		      .BYTE.b	%01010101
     29  f5d4		       77		      .BYTE.b	%01110111
     30  f5d5		       11		      .BYTE.b	%00010001
     31  f5d6		       11		      .BYTE.b	%00010001
     32  f5d7
     33  f5d7		       77		      .BYTE.b	%01110111
     34  f5d8		       44		      .BYTE.b	%01000100
     35  f5d9		       77		      .BYTE.b	%01110111
     36  f5da		       11		      .BYTE.b	%00010001
     37  f5db		       77		      .BYTE.b	%01110111
     38  f5dc
     39  f5dc		       77		      .BYTE.b	%01110111
     40  f5dd		       44		      .BYTE.b	%01000100
     41  f5de		       77		      .BYTE.b	%01110111
     42  f5df		       55		      .BYTE.b	%01010101
     43  f5e0		       77		      .BYTE.b	%01110111
     44  f5e1
     45  f5e1		       77		      .BYTE.b	%01110111
     46  f5e2		       11		      .BYTE.b	%00010001
     47  f5e3		       22		      .BYTE.b	%00100010
     48  f5e4		       22		      .BYTE.b	%00100010
     49  f5e5		       22		      .BYTE.b	%00100010
     50  f5e6
     51  f5e6		       77		      .BYTE.b	%01110111
     52  f5e7		       55		      .BYTE.b	%01010101
     53  f5e8		       77		      .BYTE.b	%01110111
     54  f5e9		       55		      .BYTE.b	%01010101
     55  f5ea		       77		      .BYTE.b	%01110111
     56  f5eb
     57  f5eb		       77		      .BYTE.b	%01110111
     58  f5ec		       55		      .BYTE.b	%01010101
     59  f5ed		       77		      .BYTE.b	%01110111
     60  f5ee		       11		      .BYTE.b	%00010001
     61  f5ef		       11		      .BYTE.b	%00010001
     62  f5f0
     63  f5f0		       77		      .BYTE.b	%01110111
     64  f5f1		       55		      .BYTE.b	%01010101
     65  f5f2		       77		      .BYTE.b	%01110111
     66  f5f3		       55		      .BYTE.b	%01010101
     67  f5f4		       55		      .BYTE.b	%01010101
     68  f5f5
     69  f5f5		       66		      .BYTE.b	%01100110
     70  f5f6		       55		      .BYTE.b	%01010101
     71  f5f7		       66		      .BYTE.b	%01100110
     72  f5f8		       55		      .BYTE.b	%01010101
     73  f5f9		       66		      .BYTE.b	%01100110
     74  f5fa
     75  f5fa		       77		      .BYTE.b	%01110111
     76  f5fb		       44		      .BYTE.b	%01000100
     77  f5fc		       44		      .BYTE.b	%01000100
     78  f5fd		       44		      .BYTE.b	%01000100
     79  f5fe		       77		      .BYTE.b	%01110111
     80  f5ff
     81  f5ff		       66		      .BYTE.b	%01100110
     82  f600		       55		      .BYTE.b	%01010101
     83  f601		       55		      .BYTE.b	%01010101
     84  f602		       55		      .BYTE.b	%01010101
     85  f603		       66		      .BYTE.b	%01100110
     86  f604
     87  f604		       77		      .BYTE.b	%01110111
     88  f605		       44		      .BYTE.b	%01000100
     89  f606		       66		      .BYTE.b	%01100110
     90  f607		       44		      .BYTE.b	%01000100
     91  f608		       77		      .BYTE.b	%01110111
     92  f609
     93  f609		       77		      .BYTE.b	%01110111
     94  f60a		       44		      .BYTE.b	%01000100
     95  f60b		       66		      .BYTE.b	%01100110
     96  f60c		       44		      .BYTE.b	%01000100
     97  f60d		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f60e					      include	"objects/web.asm"
      1  f60e							;================
      2  f60e							; Web (Playfield)
      3  f60e							;================
      4  f60e
      5  f60e							; Constants
      6  f60e
      7  f60e		       00 00	   WEB_BG_COLOR =	#$00
      8  f60e		       00 06	   WEB_FG_COLOR =	#$06
      9  f60e
     10  f60e		       00 1e	   WEB_SIZE   =	30
     11  f60e		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f60e		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f60e
     14  f60e							; Scanline Draw
     15  f60e
     16  f60e				   WebDrawStart
     17  f60e
     18  f60e							; Load Colors
     19  f60e		       a5 9c		      lda	WebColor+0
     20  f610		       85 09		      sta	COLUBK
     21  f612		       a5 9d		      lda	WebColor+1
     22  f614		       85 08		      sta	COLUPF
     23  f616
     24  f616							; Mirror playfield and use standard playfield color
     25  f616		       a5 80		      lda	CtrlPf
     26  f618		       29 fc		      and	#%11111100
     27  f61a		       09 01		      ora	#%00000001
     28  f61c		       85 80		      sta	CtrlPf
     29  f61e		       85 0a		      sta	CTRLPF
     30  f620
     31  f620							; Initialize image index
     32  f620		       a9 00		      lda	#0
     33  f622		       85 9b		      sta	WebIndex
     34  f624
     35  f624		       60		      rts
     36  f625
     37  f625				   WebClean
     38  f625
     39  f625							; Clear out playfield
     40  f625		       a9 00		      lda	#0
     41  f627		       85 0d		      sta	PF0
     42  f629		       85 0e		      sta	PF1
     43  f62b		       85 0f		      sta	PF2
     44  f62d
     45  f62d		       60		      rts
     46  f62e
     47  f62e							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f62e					      include	"objects/web_image.asm"
      1  f62e				   WebImagePF0
      2  f62e		       00		      .BYTE.b	%00000000
      3  f62f		       00		      .BYTE.b	%00000000
      4  f630		       00		      .BYTE.b	%00000000
      5  f631		       00		      .BYTE.b	%00000000
      6  f632		       00		      .BYTE.b	%00000000
      7  f633		       00		      .BYTE.b	%00000000
      8  f634		       00		      .BYTE.b	%00000000
      9  f635		       00		      .BYTE.b	%00000000
     10  f636		       00		      .BYTE.b	%00000000
     11  f637		       30		      .BYTE.b	%00110000
     12  f638		       e0		      .BYTE.b	%11100000
     13  f639		       20		      .BYTE.b	%00100000
     14  f63a		       40		      .BYTE.b	%01000000
     15  f63b		       40		      .BYTE.b	%01000000
     16  f63c		       80		      .BYTE.b	%10000000
     17  f63d		       80		      .BYTE.b	%10000000
     18  f63e		       40		      .BYTE.b	%01000000
     19  f63f		       40		      .BYTE.b	%01000000
     20  f640		       20		      .BYTE.b	%00100000
     21  f641		       e0		      .BYTE.b	%11100000
     22  f642		       30		      .BYTE.b	%00110000
     23  f643		       00		      .BYTE.b	%00000000
     24  f644		       00		      .BYTE.b	%00000000
     25  f645		       00		      .BYTE.b	%00000000
     26  f646		       00		      .BYTE.b	%00000000
     27  f647		       00		      .BYTE.b	%00000000
     28  f648		       00		      .BYTE.b	%00000000
     29  f649		       00		      .BYTE.b	%00000000
     30  f64a		       00		      .BYTE.b	%00000000
     31  f64b		       00		      .BYTE.b	%00000000
     32  f64c
     33  f64c				   WebImagePF1
     34  f64c		       08		      .BYTE.b	%00001000
     35  f64d		       06		      .BYTE.b	%00000110
     36  f64e		       01		      .BYTE.b	%00000001
     37  f64f		       00		      .BYTE.b	%00000000
     38  f650		       00		      .BYTE.b	%00000000
     39  f651		       01		      .BYTE.b	%00000001
     40  f652		       01		      .BYTE.b	%00000001
     41  f653		       02		      .BYTE.b	%00000010
     42  f654		       0c		      .BYTE.b	%00001100
     43  f655		       30		      .BYTE.b	%00110000
     44  f656		       c0		      .BYTE.b	%11000000
     45  f657		       38		      .BYTE.b	%00111000
     46  f658		       07		      .BYTE.b	%00000111
     47  f659		       00		      .BYTE.b	%00000000
     48  f65a		       00		      .BYTE.b	%00000000
     49  f65b		       00		      .BYTE.b	%00000000
     50  f65c		       00		      .BYTE.b	%00000000
     51  f65d		       07		      .BYTE.b	%00000111
     52  f65e		       38		      .BYTE.b	%00111000
     53  f65f		       c0		      .BYTE.b	%11000000
     54  f660		       30		      .BYTE.b	%00110000
     55  f661		       0c		      .BYTE.b	%00001100
     56  f662		       02		      .BYTE.b	%00000010
     57  f663		       01		      .BYTE.b	%00000001
     58  f664		       01		      .BYTE.b	%00000001
     59  f665		       00		      .BYTE.b	%00000000
     60  f666		       00		      .BYTE.b	%00000000
     61  f667		       01		      .BYTE.b	%00000001
     62  f668		       06		      .BYTE.b	%00000110
     63  f669		       08		      .BYTE.b	%00001000
     64  f66a
     65  f66a				   WebImagePF2
     66  f66a		       20		      .BYTE.b	%00100000
     67  f66b		       18		      .BYTE.b	%00011000
     68  f66c		       04		      .BYTE.b	%00000100
     69  f66d		       03		      .BYTE.b	%00000011
     70  f66e		       3f		      .BYTE.b	%00111111
     71  f66f		       c2		      .BYTE.b	%11000010
     72  f670		       04		      .BYTE.b	%00000100
     73  f671		       08		      .BYTE.b	%00001000
     74  f672		       08		      .BYTE.b	%00001000
     75  f673		       10		      .BYTE.b	%00010000
     76  f674		       20		      .BYTE.b	%00100000
     77  f675		       20		      .BYTE.b	%00100000
     78  f676		       41		      .BYTE.b	%01000001
     79  f677		       8e		      .BYTE.b	%10001110
     80  f678		       f0		      .BYTE.b	%11110000
     81  f679		       f0		      .BYTE.b	%11110000
     82  f67a		       8e		      .BYTE.b	%10001110
     83  f67b		       41		      .BYTE.b	%01000001
     84  f67c		       20		      .BYTE.b	%00100000
     85  f67d		       20		      .BYTE.b	%00100000
     86  f67e		       10		      .BYTE.b	%00010000
     87  f67f		       08		      .BYTE.b	%00001000
     88  f680		       08		      .BYTE.b	%00001000
     89  f681		       04		      .BYTE.b	%00000100
     90  f682		       c2		      .BYTE.b	%11000010
     91  f683		       3f		      .BYTE.b	%00111111
     92  f684		       03		      .BYTE.b	%00000011
     93  f685		       04		      .BYTE.b	%00000100
     94  f686		       18		      .BYTE.b	%00011000
     95  f687		       20		      .BYTE.b	%00100000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f688					      include	"objects/spider.asm"
      1  f688							;=================
      2  f688							; Spider (player0)
      3  f688							;=================
      4  f688
      5  f688							; Constants
      6  f688
      7  f688		       00 56	   SPIDER_COLOR =	#$56
      8  f688		       00 10	   SPIDER_SPRITE_SIZE =	16
      9  f688		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     10  f688		       00 02	   SPIDER_VEL_X =	2
     11  f688		       00 02	   SPIDER_VEL_Y =	2
     12  f688
     13  f688		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f688
     15  f688							; Initialization
     16  f688
     17  f688				   SpiderInit
     18  f688
     19  f688							; Initialize Position in center of screen
     20  f688		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f68a		       85 a0		      sta	SpiderPos
     22  f68c		       a9 48		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f68e		       85 a1		      sta	SpiderPos+1
     24  f690
     25  f690							; Setup Sprite
      0  f690					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f690				   .POINTER   SET	SpiderPtr
      2  f690				   .ADDRESS   SET	SpiderSprite
      3  f690
      4  f690		       a9 d9		      LDA	#<.ADDRESS
      5  f692		       85 9e		      STA	.POINTER
      6  f694		       a9 f7		      LDA	#>.ADDRESS
      7  f696		       85 9f		      STA	.POINTER+1
      8  f698
     27  f698
     28  f698							;    lda #SPIDER_COLOR
     29  f698							;    sta SpiderColor
     30  f698
     31  f698		       60		      rts
     32  f699
     33  f699							; Frame Update
     34  f699
     35  f699				   SpiderUpdate
     36  f699		       20 a0 f6 	      jsr	SpiderControl
     37  f69c		       20 86 f7 	      jsr	SpiderCollision
     38  f69f		       60		      rts
     39  f6a0
     40  f6a0				   SpiderControl
     41  f6a0
     42  f6a0							; Control Position
     43  f6a0		       a6 a0		      ldx	SpiderPos
     44  f6a2		       a4 a1		      ldy	SpiderPos+1
     45  f6a4		       ad 80 02 	      lda	SWCHA
     46  f6a7
     47  f6a7				   .spider_control_check_right
     48  f6a7		       30 02		      bmi	.spider_control_check_left
     49  f6a9
     50  f6a9					      REPEAT	#SPIDER_VEL_X
     51  f6a9		       e8		      inx
     50  f6a9					      REPEND
     51  f6aa		       e8		      inx
     52  f6ab					      REPEND
     53  f6ab
     54  f6ab				   .spider_control_check_left
     55  f6ab		       2a		      rol
     56  f6ac		       30 02		      bmi	.spider_control_check_down
     57  f6ae
     58  f6ae					      REPEAT	#SPIDER_VEL_X
     59  f6ae		       ca		      dex
     58  f6ae					      REPEND
     59  f6af		       ca		      dex
     60  f6b0					      REPEND
     61  f6b0
     62  f6b0				   .spider_control_check_down
     63  f6b0		       2a		      rol
     64  f6b1		       30 02		      bmi	.spider_control_check_up
     65  f6b3
     66  f6b3					      REPEAT	#SPIDER_VEL_Y
     67  f6b3		       88		      dey
     66  f6b3					      REPEND
     67  f6b4		       88		      dey
     68  f6b5					      REPEND
     69  f6b5
     70  f6b5				   .spider_control_check_up
     71  f6b5		       2a		      rol
     72  f6b6		       30 02		      bmi	.spider_control_sprite
     73  f6b8
     74  f6b8					      REPEAT	#SPIDER_VEL_Y
     75  f6b8		       c8		      iny
     74  f6b8					      REPEND
     75  f6b9		       c8		      iny
     76  f6ba					      REPEND
     77  f6ba
     78  f6ba				   .spider_control_sprite
     79  f6ba							; Control Sprite
     80  f6ba		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f6bc
     82  f6bc				   .spider_control_sprite_x
     83  f6bc		       e4 a0		      cpx	SpiderPos
     84  f6be		       90 04		      bcc	.spider_control_sprite_left
     85  f6c0		       f0 09		      beq	.spider_control_sprite_y
     86  f6c2		       b0 05		      bcs	.spider_control_sprite_right
     87  f6c4
     88  f6c4				   .spider_control_sprite_left
     89  f6c4		       09 80		      ora	#%10000000
     90  f6c6		       4c cb f6 	      jmp	.spider_control_sprite_y
     91  f6c9
     92  f6c9				   .spider_control_sprite_right
     93  f6c9		       09 40		      ora	#%01000000
     94  f6cb
     95  f6cb				   .spider_control_sprite_y
     96  f6cb		       c4 a1		      cpy	SpiderPos+1
     97  f6cd		       90 04		      bcc	.spider_control_sprite_down
     98  f6cf		       f0 09		      beq	.spider_control_sprite_store
     99  f6d1		       b0 05		      bcs	.spider_control_sprite_up
    100  f6d3
    101  f6d3				   .spider_control_sprite_down
    102  f6d3		       09 10		      ora	#%00010000
    103  f6d5		       4c da f6 	      jmp	.spider_control_sprite_store
    104  f6d8
    105  f6d8				   .spider_control_sprite_up
    106  f6d8		       09 20		      ora	#%00100000
    107  f6da
    108  f6da				   .spider_control_sprite_store
    109  f6da		       c9 00		      cmp	#%00000000
    110  f6dc		       f0 02		      beq	.spider_control_boundary
    111  f6de		       85 a2		      sta	SpiderCtrl
    112  f6e0
    113  f6e0				   .spider_control_boundary
    114  f6e0							; Check Playfield Boundaries
    115  f6e0
    116  f6e0				   .spider_control_boundary_left
    117  f6e0		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f6e2		       b0 05		      bcs	.spider_control_boundary_right
    119  f6e4		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f6e6		       4c ef f6 	      jmp	.spider_control_boundary_top
    121  f6e9
    122  f6e9				   .spider_control_boundary_right
    123  f6e9		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    124  f6eb		       90 02		      bcc	.spider_control_boundary_top
    125  f6ed		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    126  f6ef
    127  f6ef				   .spider_control_boundary_top
    128  f6ef		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    129  f6f1		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f6f3		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    131  f6f5		       4c fe f6 	      jmp	.spider_control_store
    132  f6f8
    133  f6f8				   .spider_control_boundary_bottom
    134  f6f8		       c0 90		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    135  f6fa		       90 02		      bcc	.spider_control_store
    136  f6fc		       a0 90		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    137  f6fe
    138  f6fe				   .spider_control_store
    139  f6fe							; Store new position
    140  f6fe		       86 a0		      stx	SpiderPos
    141  f700		       84 a1		      sty	SpiderPos+1
    142  f702
    143  f702							; TODO: Optimize this somehow?
    144  f702				   .spider_control_sprite_assign
    145  f702							; Skip if no change
    146  f702		       c9 00		      cmp	#%00000000
    147  f704		       f0 7f		      beq	.spider_control_return
    148  f706
    149  f706		       a2 00		      ldx	#%00000000	; For reflection
    150  f708
    151  f708				   .spider_control_sprite_assign_left
    152  f708		       c9 80		      cmp	#%10000000
    153  f70a		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f70c					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f70c				   .POINTER   SET	SpiderPtr
      2  f70c				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f70c
      4  f70c		       a9 f9		      LDA	#<.ADDRESS
      5  f70e		       85 9e		      STA	.POINTER
      6  f710		       a9 f7		      LDA	#>.ADDRESS
      7  f712		       85 9f		      STA	.POINTER+1
      8  f714
    155  f714		       a2 08		      ldx	#%00001000
    156  f716		       4c 83 f7 	      jmp	.spider_control_reflect
    157  f719
    158  f719				   .spider_control_sprite_assign_right
    159  f719		       c9 40		      cmp	#%01000000
    160  f71b		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f71d					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f71d				   .POINTER   SET	SpiderPtr
      2  f71d				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f71d
      4  f71d		       a9 f9		      LDA	#<.ADDRESS
      5  f71f		       85 9e		      STA	.POINTER
      6  f721		       a9 f7		      LDA	#>.ADDRESS
      7  f723		       85 9f		      STA	.POINTER+1
      8  f725
    162  f725		       4c 83 f7 	      jmp	.spider_control_reflect
    163  f728
    164  f728				   .spider_control_sprite_assign_top
    165  f728		       c9 20		      cmp	#%00100000
    166  f72a		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f72c					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f72c				   .POINTER   SET	SpiderPtr
      2  f72c				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f72c
      4  f72c		       a9 d9		      LDA	#<.ADDRESS
      5  f72e		       85 9e		      STA	.POINTER
      6  f730		       a9 f7		      LDA	#>.ADDRESS
      7  f732		       85 9f		      STA	.POINTER+1
      8  f734
    168  f734		       4c 83 f7 	      jmp	.spider_control_reflect
    169  f737
    170  f737				   .spider_control_sprite_assign_bottom
    171  f737		       c9 10		      cmp	#%00010000
    172  f739		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f73b					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f73b				   .POINTER   SET	SpiderPtr
      2  f73b				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f73b
      4  f73b		       a9 19		      LDA	#<.ADDRESS
      5  f73d		       85 9e		      STA	.POINTER
      6  f73f		       a9 f8		      LDA	#>.ADDRESS
      7  f741		       85 9f		      STA	.POINTER+1
      8  f743
    174  f743		       4c 83 f7 	      jmp	.spider_control_reflect
    175  f746
    176  f746				   .spider_control_sprite_assign_top_right
    177  f746		       c9 60		      cmp	#%01100000
    178  f748		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f74a					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f74a				   .POINTER   SET	SpiderPtr
      2  f74a				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f74a
      4  f74a		       a9 e9		      LDA	#<.ADDRESS
      5  f74c		       85 9e		      STA	.POINTER
      6  f74e		       a9 f7		      LDA	#>.ADDRESS
      7  f750		       85 9f		      STA	.POINTER+1
      8  f752
    180  f752		       4c 83 f7 	      jmp	.spider_control_reflect
    181  f755
    182  f755				   .spider_control_sprite_assign_bottom_right
    183  f755		       c9 50		      cmp	#%01010000
    184  f757		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f759					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f759				   .POINTER   SET	SpiderPtr
      2  f759				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f759
      4  f759		       a9 09		      LDA	#<.ADDRESS
      5  f75b		       85 9e		      STA	.POINTER
      6  f75d		       a9 f8		      LDA	#>.ADDRESS
      7  f75f		       85 9f		      STA	.POINTER+1
      8  f761
    186  f761		       4c 83 f7 	      jmp	.spider_control_reflect
    187  f764
    188  f764				   .spider_control_sprite_assign_bottom_left
    189  f764		       c9 90		      cmp	#%10010000
    190  f766		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f768					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f768				   .POINTER   SET	SpiderPtr
      2  f768				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f768
      4  f768		       a9 09		      LDA	#<.ADDRESS
      5  f76a		       85 9e		      STA	.POINTER
      6  f76c		       a9 f8		      LDA	#>.ADDRESS
      7  f76e		       85 9f		      STA	.POINTER+1
      8  f770
    192  f770		       a2 08		      ldx	#%00001000
    193  f772		       4c 83 f7 	      jmp	.spider_control_reflect
    194  f775
    195  f775				   .spider_control_sprite_assign_top_left
    196  f775		       c9 a0		      cmp	#%10100000
    197  f777		       d0 0a		      bne	.spider_control_reflect
      0  f779					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f779				   .POINTER   SET	SpiderPtr
      2  f779				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f779
      4  f779		       a9 e9		      LDA	#<.ADDRESS
      5  f77b		       85 9e		      STA	.POINTER
      6  f77d		       a9 f7		      LDA	#>.ADDRESS
      7  f77f		       85 9f		      STA	.POINTER+1
      8  f781
    199  f781		       a2 08		      ldx	#%00001000
    200  f783
    201  f783				   .spider_control_reflect
    202  f783		       86 0b		      stx	REFP0
    203  f785
    204  f785				   .spider_control_return
    205  f785		       60		      rts
    206  f786
    207  f786				   SpiderCollision
    208  f786		       a9 56		      lda	#SPIDER_COLOR
    209  f788
    210  f788				   .spider_collision_m0
    211  f788							; Check stun status
    212  f788		       a6 b2		      ldx	BugStunned
    213  f78a		       e0 00		      cpx	#0
    214  f78c		       d0 04		      bne	.spider_collision_m1
    215  f78e
    216  f78e							; Collision for M0 (V set)
    217  f78e		       24 00		      bit	CXM0P
    218  f790		       70 0d		      bvs	.spider_collision_active
    219  f792
    220  f792				   .spider_collision_m1
    221  f792							; Check stun status
    222  f792		       a6 b3		      ldx	BugStunned+1
    223  f794		       e0 00		      cpx	#0
    224  f796		       d0 09		      bne	.spider_collision_return
    225  f798
    226  f798							; Collision for M1 (N set)
    227  f798		       24 01		      bit	CXM1P
    228  f79a		       30 03		      bmi	.spider_collision_active
    229  f79c
    230  f79c		       4c a1 f7 	      jmp	.spider_collision_return
    231  f79f
    232  f79f				   .spider_collision_active
    233  f79f		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f7a1
    235  f7a1				   .spider_collision_return
    236  f7a1		       85 a3		      sta	SpiderColor
    237  f7a3		       60		      rts
    238  f7a4
    239  f7a4				   SpiderPosition
    240  f7a4
    241  f7a4							; Set Position
    242  f7a4		       a2 00		      ldx	#0	; Object (player0)
    243  f7a6		       a5 a0		      lda	SpiderPos	; X Position
    244  f7a8		       20 00 f0 	      jsr	PosObject
    245  f7ab
    246  f7ab		       60		      rts
    247  f7ac
    248  f7ac							; Scanline Draw
    249  f7ac
    250  f7ac				   SpiderDrawStart
    251  f7ac
    252  f7ac							; Set player 0 to be quad size
    253  f7ac		       a5 81		      lda	NuSiz0
    254  f7ae		       29 f8		      and	#%11111000
    255  f7b0		       09 05		      ora	#%00000101
    256  f7b2		       85 81		      sta	NuSiz0
    257  f7b4		       85 04		      sta	NUSIZ0
    258  f7b6
    259  f7b6							; Set sprite color
    260  f7b6		       a5 a3		      lda	SpiderColor
    261  f7b8		       85 06		      sta	COLUP0
    262  f7ba
    263  f7ba							; Determine if we need to use vertical delay (odd line)
    264  f7ba		       a5 a1		      lda	SpiderPos+1	; Y Position
    265  f7bc		       4a		      lsr
    266  f7bd		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f7bf
    268  f7bf		       a0 01		      ldy	#1
    269  f7c1		       4c c6 f7 	      jmp	.spider_draw_start_set_delay
    270  f7c4
    271  f7c4				   .spider_draw_start_nodelay
    272  f7c4		       a0 00		      ldy	#0
    273  f7c6
    274  f7c6				   .spider_draw_start_set_delay
    275  f7c6		       84 25		      sty	VDELP0
    276  f7c8
    277  f7c8				   .spider_draw_start_pos
    278  f7c8							; Calculate starting position
    279  f7c8		       18		      clc
    280  f7c9		       69 10		      adc	#SPIDER_SIZE
    281  f7cb		       85 a5		      sta	SpiderDrawPos
    282  f7cd
    283  f7cd							; Initialize sprite index and line buffer
    284  f7cd		       a9 00		      lda	#0
    285  f7cf		       85 a4		      sta	SpiderIndex
    286  f7d1		       85 a6		      sta	SpiderLine
    287  f7d3
    288  f7d3		       60		      rts
    289  f7d4
    290  f7d4				   SpiderClean
    291  f7d4
    292  f7d4							; Clear out Player0 sprite
    293  f7d4		       a9 00		      lda	#0
    294  f7d6		       85 1b		      sta	GRP0
    295  f7d8
    296  f7d8		       60		      rts
    297  f7d9
    298  f7d9							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f7d9					      include	"objects/spider_sprite.asm"
      1  f7d9				   SpiderSprite
      2  f7d9
      3  f7d9		       99		      .BYTE.b	%10011001
      4  f7da		       99		      .BYTE.b	%10011001
      5  f7db		       bd		      .BYTE.b	%10111101
      6  f7dc		       bd		      .BYTE.b	%10111101
      7  f7dd		       99		      .BYTE.b	%10011001
      8  f7de		       99		      .BYTE.b	%10011001
      9  f7df		       7e		      .BYTE.b	%01111110
     10  f7e0		       3c		      .BYTE.b	%00111100
     11  f7e1		       3c		      .BYTE.b	%00111100
     12  f7e2		       18		      .BYTE.b	%00011000
     13  f7e3		       3c		      .BYTE.b	%00111100
     14  f7e4		       7e		      .BYTE.b	%01111110
     15  f7e5		       bd		      .BYTE.b	%10111101
     16  f7e6		       bd		      .BYTE.b	%10111101
     17  f7e7		       bd		      .BYTE.b	%10111101
     18  f7e8		       99		      .BYTE.b	%10011001
     19  f7e9
     20  f7e9		       0b		      .BYTE.b	%00001011
     21  f7ea		       0b		      .BYTE.b	%00001011
     22  f7eb		       13		      .BYTE.b	%00010011
     23  f7ec		       13		      .BYTE.b	%00010011
     24  f7ed		       1c		      .BYTE.b	%00011100
     25  f7ee		       1c		      .BYTE.b	%00011100
     26  f7ef		       3d		      .BYTE.b	%00111101
     27  f7f0		       3d		      .BYTE.b	%00111101
     28  f7f1		       7e		      .BYTE.b	%01111110
     29  f7f2		       fe		      .BYTE.b	%11111110
     30  f7f3		       b8		      .BYTE.b	%10111000
     31  f7f4		       b8		      .BYTE.b	%10111000
     32  f7f5		       10		      .BYTE.b	%00010000
     33  f7f6		       10		      .BYTE.b	%00010000
     34  f7f7		       30		      .BYTE.b	%00110000
     35  f7f8		       20		      .BYTE.b	%00100000
     36  f7f9
     37  f7f9		       c7		      .BYTE.b	%11000111
     38  f7fa		       c7		      .BYTE.b	%11000111
     39  f7fb		       28		      .BYTE.b	%00101000
     40  f7fc		       28		      .BYTE.b	%00101000
     41  f7fd		       3a		      .BYTE.b	%00111010
     42  f7fe		       7a		      .BYTE.b	%01111010
     43  f7ff		       fd		      .BYTE.b	%11111101
     44  f800		       ff		      .BYTE.b	%11111111
     45  f801		       ff		      .BYTE.b	%11111111
     46  f802		       fd		      .BYTE.b	%11111101
     47  f803		       7a		      .BYTE.b	%01111010
     48  f804		       3a		      .BYTE.b	%00111010
     49  f805		       28		      .BYTE.b	%00101000
     50  f806		       28		      .BYTE.b	%00101000
     51  f807		       c7		      .BYTE.b	%11000111
     52  f808		       c7		      .BYTE.b	%11000111
     53  f809
     54  f809		       20		      .BYTE.b	%00100000
     55  f80a		       30		      .BYTE.b	%00110000
     56  f80b		       10		      .BYTE.b	%00010000
     57  f80c		       10		      .BYTE.b	%00010000
     58  f80d		       b8		      .BYTE.b	%10111000
     59  f80e		       bc		      .BYTE.b	%10111100
     60  f80f		       fc		      .BYTE.b	%11111100
     61  f810		       7e		      .BYTE.b	%01111110
     62  f811		       3f		      .BYTE.b	%00111111
     63  f812		       1d		      .BYTE.b	%00011101
     64  f813		       0c		      .BYTE.b	%00001100
     65  f814		       1c		      .BYTE.b	%00011100
     66  f815		       13		      .BYTE.b	%00010011
     67  f816		       13		      .BYTE.b	%00010011
     68  f817		       0b		      .BYTE.b	%00001011
     69  f818		       0b		      .BYTE.b	%00001011
     70  f819
     71  f819		       99		      .BYTE.b	%10011001
     72  f81a		       bd		      .BYTE.b	%10111101
     73  f81b		       bd		      .BYTE.b	%10111101
     74  f81c		       bd		      .BYTE.b	%10111101
     75  f81d		       7e		      .BYTE.b	%01111110
     76  f81e		       3c		      .BYTE.b	%00111100
     77  f81f		       18		      .BYTE.b	%00011000
     78  f820		       3c		      .BYTE.b	%00111100
     79  f821		       3c		      .BYTE.b	%00111100
     80  f822		       7e		      .BYTE.b	%01111110
     81  f823		       99		      .BYTE.b	%10011001
     82  f824		       99		      .BYTE.b	%10011001
     83  f825		       bd		      .BYTE.b	%10111101
     84  f826		       bd		      .BYTE.b	%10111101
     85  f827		       99		      .BYTE.b	%10011001
     86  f828		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f829					      include	"objects/line.asm"
      1  f829							;================
      2  f829							; Line (ball)
      3  f829							;================
      4  f829
      5  f829							; Constants
      6  f829
      7  f829		       00 08	   LINE_SIZE  =	8
      8  f829		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f829		       00 04	   LINE_VEL_X =	4
     10  f829		       00 04	   LINE_VEL_Y =	4
     11  f829
     12  f829		       00 08	   LINE_AUDIO_C =	8
     13  f829		       00 01	   LINE_AUDIO_F =	1
     14  f829		       00 04	   LINE_AUDIO_V =	4
     15  f829
     16  f829		       00 08	   LINE_SAMPLE_LEN =	8
     17  f829		       00 03	   LINE_SAMPLE_C =	3
     18  f829		       00 01	   LINE_SAMPLE_F =	1
     19  f829		       00 04	   LINE_SAMPLE_V =	4
     20  f829
     21  f829							; Initialization
     22  f829
     23  f829				   LineInit
     24  f829
     25  f829							; Initial Line Control
     26  f829		       a9 00		      lda	#0
     27  f82b		       85 a9		      sta	LineEnabled
     28  f82d		       85 aa		      sta	LinePos+0
     29  f82f		       85 ab		      sta	LinePos+1
     30  f831		       85 ac		      sta	LineVelocity+0
     31  f833		       85 ad		      sta	LineVelocity+1
     32  f835		       85 ae		      sta	LineStartPos+0
     33  f837		       85 af		      sta	LineStartPos+1
     34  f839		       85 b0		      sta	LineDrawPos+0
     35  f83b		       85 b1		      sta	LineDrawPos+1
     36  f83d
     37  f83d		       60		      rts
     38  f83e
     39  f83e							; Frame Update
     40  f83e
     41  f83e				   LineUpdate
     42  f83e		       20 48 f8 	      jsr	LineControl
     43  f841		       20 00 f9 	      jsr	LineObject
     44  f844		       20 47 f9 	      jsr	LineCollision
     45  f847		       60		      rts
     46  f848
     47  f848				   LineControl
     48  f848
     49  f848							; Check if Fire Button on controller 1 is pressed
     50  f848		       a5 0c		      lda	INPT4
     51  f84a		       30 0a		      bmi	.line_control_skip
     52  f84c
     53  f84c		       24 a9		      bit	LineEnabled
     54  f84e		       30 06		      bmi	.line_control_skip
     55  f850
     56  f850		       a5 a2		      lda	SpiderCtrl
     57  f852		       c9 00		      cmp	#0
     58  f854		       d0 03		      bne	.line_control_fire
     59  f856
     60  f856				   .line_control_skip
     61  f856		       4c ff f8 	      jmp	.line_control_return
     62  f859
     63  f859				   .line_control_fire
     64  f859		       20 8f f9 	      jsr	LineEnable
     65  f85c
     66  f85c				   .line_control_x
     67  f85c		       a5 a2		      lda	SpiderCtrl
     68  f85e		       29 c0		      and	#%11000000
     69  f860		       f0 0e		      beq	.line_control_x_none
     70  f862				   .line_control_x_left
     71  f862		       c9 80		      cmp	#%10000000
     72  f864		       d0 05		      bne	.line_control_x_right
     73  f866
     74  f866		       a9 fc		      lda	#-LINE_VEL_X
     75  f868		       4c 72 f8 	      jmp	.line_control_x_store
     76  f86b				   .line_control_x_right
     77  f86b		       a9 04		      lda	#LINE_VEL_X
     78  f86d		       4c 72 f8 	      jmp	.line_control_x_store
     79  f870				   .line_control_x_none
     80  f870		       a9 00		      lda	#0
     81  f872				   .line_control_x_store
     82  f872		       85 ac		      sta	LineVelocity
     83  f874
     84  f874				   .line_control_y
     85  f874		       a5 a2		      lda	SpiderCtrl
     86  f876		       29 30		      and	#%00110000
     87  f878		       f0 0e		      beq	.line_control_y_none
     88  f87a				   .line_control_y_up
     89  f87a		       c9 20		      cmp	#%00100000
     90  f87c		       d0 05		      bne	.line_control_y_down
     91  f87e
     92  f87e		       a9 04		      lda	#LINE_VEL_Y
     93  f880		       4c 8a f8 	      jmp	.line_control_y_store
     94  f883				   .line_control_y_down
     95  f883		       a9 fc		      lda	#-LINE_VEL_Y
     96  f885		       4c 8a f8 	      jmp	.line_control_y_store
     97  f888				   .line_control_y_none
     98  f888		       a9 00		      lda	#0
     99  f88a				   .line_control_y_store
    100  f88a		       85 ad		      sta	LineVelocity+1
    101  f88c
    102  f88c				   .line_control_position
    103  f88c
    104  f88c		       a2 00		      ldx	#0	; offsetX
    105  f88e		       a0 00		      ldy	#0	; offsetY
    106  f890
    107  f890		       a5 a2		      lda	SpiderCtrl
    108  f892		       29 f0		      and	#%11110000
    109  f894
    110  f894				   .line_control_position_left
    111  f894		       c9 80		      cmp	#%10000000
    112  f896		       d0 07		      bne	.line_control_position_right
    113  f898
    114  f898		       a2 00		      ldx	#0
    115  f89a		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    116  f89c		       4c e7 f8 	      jmp	.line_control_position_store
    117  f89f
    118  f89f				   .line_control_position_right
    119  f89f		       c9 40		      cmp	#%01000000
    120  f8a1		       d0 07		      bne	.line_control_position_top
    121  f8a3
    122  f8a3		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    123  f8a5		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    124  f8a7		       4c e7 f8 	      jmp	.line_control_position_store
    125  f8aa
    126  f8aa				   .line_control_position_top
    127  f8aa		       c9 20		      cmp	#%00100000
    128  f8ac		       d0 07		      bne	.line_control_position_bottom
    129  f8ae
    130  f8ae		       a2 08		      ldx	#SPIDER_SIZE/2
    131  f8b0		       a0 10		      ldy	#SPIDER_SIZE
    132  f8b2		       4c e7 f8 	      jmp	.line_control_position_store
    133  f8b5
    134  f8b5				   .line_control_position_bottom
    135  f8b5		       c9 10		      cmp	#%00010000
    136  f8b7		       d0 05		      bne	.line_control_position_top_right
    137  f8b9
    138  f8b9		       a2 08		      ldx	#SPIDER_SIZE/2
    139  f8bb		       4c e7 f8 	      jmp	.line_control_position_store
    140  f8be
    141  f8be				   .line_control_position_top_right
    142  f8be		       c9 60		      cmp	#%01100000
    143  f8c0		       d0 07		      bne	.line_control_position_bottom_right
    144  f8c2
    145  f8c2		       a2 10		      ldx	#SPIDER_SIZE
    146  f8c4		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    147  f8c6		       4c e7 f8 	      jmp	.line_control_position_store
    148  f8c9
    149  f8c9				   .line_control_position_bottom_right
    150  f8c9		       c9 50		      cmp	#%01010000
    151  f8cb		       d0 07		      bne	.line_control_position_bottom_left
    152  f8cd
    153  f8cd		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    154  f8cf		       a0 00		      ldy	#0
    155  f8d1		       4c e7 f8 	      jmp	.line_control_position_store
    156  f8d4
    157  f8d4				   .line_control_position_bottom_left
    158  f8d4		       c9 90		      cmp	#%10010000
    159  f8d6		       d0 07		      bne	.line_control_position_top_left
    160  f8d8
    161  f8d8							; No Offset
    162  f8d8		       a2 04		      ldx	#LINE_SIZE/2
    163  f8da		       a0 04		      ldy	#LINE_SIZE/2
    164  f8dc		       4c e7 f8 	      jmp	.line_control_position_store
    165  f8df
    166  f8df				   .line_control_position_top_left
    167  f8df		       c9 a0		      cmp	#%10100000
    168  f8e1		       d0 04		      bne	.line_control_position_store
    169  f8e3
    170  f8e3		       a2 00		      ldx	#0
    171  f8e5		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    172  f8e7
    173  f8e7				   .line_control_position_store
    174  f8e7
    175  f8e7							; Apply offsetX to playerX
    176  f8e7		       a5 a0		      lda	SpiderPos
    177  f8e9		       86 83		      stx	Temp
    178  f8eb		       18		      clc
    179  f8ec		       65 83		      adc	Temp
    180  f8ee		       aa		      tax
    181  f8ef
    182  f8ef							; Apply offsetY to playerY
    183  f8ef		       a5 a1		      lda	SpiderPos+1
    184  f8f1		       84 83		      sty	Temp
    185  f8f3		       18		      clc
    186  f8f4		       65 83		      adc	Temp
    187  f8f6		       a8		      tay
    188  f8f7
    189  f8f7		       86 aa		      stx	LinePos
    190  f8f9		       84 ab		      sty	LinePos+1
    191  f8fb		       86 ae		      stx	LineStartPos
    192  f8fd		       84 af		      sty	LineStartPos+1
    193  f8ff
    194  f8ff				   .line_control_return
    195  f8ff		       60		      rts
    196  f900
    197  f900				   LineObject
    198  f900
    199  f900							; Check if line is enabled
    200  f900		       24 a9		      bit	LineEnabled
    201  f902		       10 42		      bpl	.line_object_return
    202  f904
    203  f904							; Load position
    204  f904		       a6 aa		      ldx	LinePos
    205  f906		       a4 ab		      ldy	LinePos+1
    206  f908
    207  f908				   .line_object_distance
    208  f908
    209  f908							; Check distance from player with absolute value differences
    210  f908
    211  f908				   .line_object_distance_x
    212  f908		       8a		      txa
    213  f909		       18		      clc
    214  f90a		       e5 ae		      sbc	LineStartPos
    215  f90c		       b0 04		      bcs	.line_object_distance_x_check
    216  f90e		       49 ff		      eor	#$FF	; C flag is clear here
    217  f910		       69 01		      adc	#$01	; form two's complement
    218  f912				   .line_object_distance_x_check		; Jumps to if positive
    219  f912		       c9 40		      cmp	#LINE_DISTANCE
    220  f914		       b0 2d		      bcs	.line_object_disable
    221  f916
    222  f916				   .line_object_distance_y
    223  f916		       98		      tya
    224  f917		       18		      clc
    225  f918		       e5 af		      sbc	LineStartPos+1
    226  f91a		       b0 04		      bcs	.line_object_distance_y_check
    227  f91c		       49 ff		      eor	#$FF	; C flag is clear here
    228  f91e		       69 01		      adc	#$01	; form two's complement
    229  f920				   .line_object_distance_y_check		; Jumps to if positive
    230  f920		       c9 40		      cmp	#LINE_DISTANCE
    231  f922		       b0 1f		      bcs	.line_object_disable
    232  f924
    233  f924				   .line_object_boundary
    234  f924				   .line_object_boundary_left
    235  f924		       e0 04		      cpx	#LINE_VEL_X
    236  f926		       90 1b		      bcc	.line_object_disable
    237  f928				   .line_object_boundary_right
    238  f928		       e0 9c		      cpx	#160-LINE_VEL_X
    239  f92a		       b0 17		      bcs	.line_object_disable
    240  f92c				   .line_object_boundary_bottom
    241  f92c		       c0 04		      cpy	#LINE_VEL_Y
    242  f92e		       90 13		      bcc	.line_object_disable
    243  f930				   .line_object_boundary_top
    244  f930		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    245  f932		       b0 0f		      bcs	.line_object_disable
    246  f934
    247  f934				   .line_object_velocity
    248  f934
    249  f934							; Apply Velocity
    250  f934		       8a		      txa
    251  f935		       18		      clc
    252  f936		       65 ac		      adc	LineVelocity
    253  f938		       85 aa		      sta	LinePos
    254  f93a
    255  f93a		       98		      tya
    256  f93b		       18		      clc
    257  f93c		       65 ad		      adc	LineVelocity+1
    258  f93e		       85 ab		      sta	LinePos+1
    259  f940
    260  f940		       4c 46 f9 	      jmp	.line_object_return
    261  f943
    262  f943				   .line_object_disable
    263  f943		       20 9d f9 	      jsr	LineDisable
    264  f946
    265  f946				   .line_object_return
    266  f946		       60		      rts
    267  f947
    268  f947				   LineCollision
    269  f947
    270  f947		       a9 78		      lda	#BUG_STUN_LENGTH
    271  f949
    272  f949				   .line_collision_m0
    273  f949		       24 04		      bit	CXM0FB
    274  f94b		       50 08		      bvc	.line_collision_m1
    275  f94d
    276  f94d							; Set stun timer
    277  f94d		       85 b2		      sta	BugStunned+0
    278  f94f
    279  f94f							; Disable line
    280  f94f		       20 9d f9 	      jsr	LineDisable
    281  f952		       4c 5e f9 	      jmp	.line_collision_sample
    282  f955
    283  f955				   .line_collision_m1
    284  f955		       24 05		      bit	CXM1FB
    285  f957		       50 08		      bvc	.line_collision_return
    286  f959
    287  f959							; Set stun timer
    288  f959		       85 b3		      sta	BugStunned+1
    289  f95b
    290  f95b							; Disable line
    291  f95b		       20 9d f9 	      jsr	LineDisable
    292  f95e
    293  f95e				   .line_collision_sample
    294  f95e		       20 c1 f9 	      jsr	LineSample
    295  f961
    296  f961				   .line_collision_return
    297  f961		       60		      rts
    298  f962
    299  f962				   LinePosition
    300  f962
    301  f962							; Set Line Position
    302  f962		       a2 04		      ldx	#4	; Object (ball)
    303  f964		       a5 aa		      lda	LinePos	; X Position
    304  f966		       20 00 f0 	      jsr	PosObject
    305  f969
    306  f969		       60		      rts
    307  f96a
    308  f96a							; Scanline Draw
    309  f96a
    310  f96a				   LineDrawStart
    311  f96a
    312  f96a							; Set ball size to be 4 clocks (4/5 bits)
    313  f96a		       a5 80		      lda	CtrlPf
    314  f96c		       29 cf		      and	#%11001111
    315  f96e		       09 20		      ora	#%00100000
    316  f970		       85 80		      sta	CtrlPf
    317  f972		       85 0a		      sta	CTRLPF
    318  f974
    319  f974							; Determine if we need to use vertical delay (oven line)
    320  f974		       a5 ab		      lda	LinePos+1
    321  f976		       4a		      lsr
    322  f977		       90 05		      bcc	.line_draw_start_nodelay
    323  f979
    324  f979		       a0 01		      ldy	#1
    325  f97b		       4c 80 f9 	      jmp	.line_draw_start_set_delay
    326  f97e
    327  f97e				   .line_draw_start_nodelay
    328  f97e		       a0 00		      ldy	#0
    329  f980
    330  f980				   .line_draw_start_set_delay
    331  f980		       84 27		      sty	VDELBL
    332  f982
    333  f982				   .line_draw_start_pos
    334  f982							; Calculate starting position
    335  f982		       18		      clc
    336  f983		       85 b0		      sta	LineDrawPos+0
    337  f985		       69 04		      adc	#LINE_SIZE/2
    338  f987		       85 b1		      sta	LineDrawPos+1
    339  f989
    340  f989		       60		      rts
    341  f98a
    342  f98a				   LineClean
    343  f98a
    344  f98a							; Clear out Line
    345  f98a		       a9 00		      lda	#0
    346  f98c		       85 1f		      sta	ENABL
    347  f98e
    348  f98e		       60		      rts
    349  f98f
    350  f98f				   LineEnable
    351  f98f		       a9 80		      lda	#%10000000
    352  f991		       85 a9		      sta	LineEnabled
    353  f993
    354  f993		       a5 91		      lda	SampleStep
    355  f995		       c9 00		      cmp	#0
    356  f997		       d0 03		      bne	.line_enable_return
    357  f999
    358  f999		       20 ab f9 	      jsr	LineAudioPlay
    359  f99c
    360  f99c				   .line_enable_return
    361  f99c		       60		      rts
    362  f99d
    363  f99d				   LineDisable
    364  f99d		       a9 00		      lda	#0
    365  f99f		       85 a9		      sta	LineEnabled
    366  f9a1
    367  f9a1		       a5 91		      lda	SampleStep
    368  f9a3		       c9 00		      cmp	#0
    369  f9a5		       d0 03		      bne	.line_disable_return
    370  f9a7
    371  f9a7		       20 b8 f9 	      jsr	LineAudioMute
    372  f9aa
    373  f9aa				   .line_disable_return
    374  f9aa		       60		      rts
    375  f9ab
    376  f9ab				   LineAudioPlay
    377  f9ab		       a9 08		      lda	#LINE_AUDIO_C
    378  f9ad		       85 16		      sta	AUDC1
    379  f9af		       a9 01		      lda	#LINE_AUDIO_F
    380  f9b1		       85 18		      sta	AUDF1
    381  f9b3		       a9 04		      lda	#LINE_AUDIO_V
    382  f9b5		       85 1a		      sta	AUDV1
    383  f9b7		       60		      rts
    384  f9b8
    385  f9b8				   LineAudioMute
    386  f9b8		       a9 00		      lda	#0
    387  f9ba		       85 1a		      sta	AUDV1
    388  f9bc		       85 18		      sta	AUDF1
    389  f9be		       85 16		      sta	AUDC1
    390  f9c0		       60		      rts
    391  f9c1
    392  f9c1				   LineSample
    393  f9c1		       a9 08		      lda	#LINE_SAMPLE_LEN
    394  f9c3		       85 91		      sta	SampleStep
    395  f9c5		       a9 03		      lda	#LINE_SAMPLE_C
    396  f9c7		       85 16		      sta	AUDC1
    397  f9c9		       a9 01		      lda	#LINE_SAMPLE_F
    398  f9cb		       85 18		      sta	AUDF1
    399  f9cd		       a9 04		      lda	#LINE_SAMPLE_V
    400  f9cf		       85 1a		      sta	AUDV1
    401  f9d1		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f9d2					      include	"objects/bug.asm"
      1  f9d2							;======================
      2  f9d2							; Bugs (missiles 0 & 1)
      3  f9d2							;======================
      4  f9d2
      5  f9d2							; Constants
      6  f9d2
      7  f9d2		       00 08	   BUG_SIZE   =	8
      8  f9d2		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f9d2		       00 02	   BUG_SPEED  =	2
     10  f9d2		       00 78	   BUG_STUN_LENGTH =	120
     11  f9d2		       00 04	   BUG_POINTS =	4
     12  f9d2
     13  f9d2		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f9d2		       00 38	   BUG_COLOR_STUN =	#$38
     15  f9d2
     16  f9d2		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f9d2		       00 03	   BUG_SAMPLE_C =	3
     18  f9d2		       00 14	   BUG_SAMPLE_F =	20
     19  f9d2		       00 04	   BUG_SAMPLE_V =	4
     20  f9d2
     21  f9d2		       00 01	   BUG_COL_SAMPLE_LEN =	1
     22  f9d2		       00 08	   BUG_COL_SAMPLE_C =	8
     23  f9d2		       00 08	   BUG_COL_SAMPLE_F =	8
     24  f9d2		       00 03	   BUG_COL_SAMPLE_V =	3
     25  f9d2
     26  f9d2							; Initialization
     27  f9d2
     28  f9d2				   BugInit
     29  f9d2
     30  f9d2							; Initialize Bugs
     31  f9d2		       a2 01		      ldx	#1
     32  f9d4
     33  f9d4				   .bug_init_loop
     34  f9d4		       20 db f9 	      jsr	BugReset
     35  f9d7
     36  f9d7		       ca		      dex
     37  f9d8		       10 fa		      bpl	.bug_init_loop
     38  f9da
     39  f9da		       60		      rts
     40  f9db
     41  f9db				   BugReset		; x = bug (0 or 1)
     42  f9db
     43  f9db							; Set random position
     44  f9db		       20 13 f0 	      jsr	Random
     45  f9de
     46  f9de		       a5 85		      lda	Rand8
     47  f9e0		       29 7f		      and	#$7f
     48  f9e2		       95 b4		      sta	BugPosX,x
     49  f9e4
     50  f9e4		       a5 86		      lda	Rand16
     51  f9e6		       29 7f		      and	#$7f
     52  f9e8		       95 b6		      sta	BugPosY,x
     53  f9ea
     54  f9ea							; Set as active
     55  f9ea		       a9 00		      lda	#0
     56  f9ec		       95 b2		      sta	BugStunned,x
     57  f9ee
     58  f9ee							; Reset Color
     59  f9ee		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     60  f9f0		       95 b8		      sta	BugColor,x
     61  f9f2
     62  f9f2		       60		      rts
     63  f9f3
     64  f9f3							; Frame Update
     65  f9f3
     66  f9f3				   BugUpdate
     67  f9f3
     68  f9f3		       a2 01		      ldx	#1
     69  f9f5				   .bug_update_loop
     70  f9f5		       86 83		      stx	Temp+0
     71  f9f7
     72  f9f7		       b5 b2		      lda	BugStunned,x
     73  f9f9		       c9 00		      cmp	#0
     74  f9fb		       f0 08		      beq	.bug_update_active
     75  f9fd
     76  f9fd				   .bug_update_stunned
     77  f9fd		       d6 b2		      dec	BugStunned,x
     78  f9ff		       20 7e fa 	      jsr	BugStunCollision
     79  fa02		       4c 0b fa 	      jmp	.bug_update_next
     80  fa05
     81  fa05				   .bug_update_active
     82  fa05		       20 11 fa 	      jsr	BugMovement
     83  fa08		       20 64 fa 	      jsr	BugCollision
     84  fa0b
     85  fa0b				   .bug_update_next
     86  fa0b		       a6 83		      ldx	Temp+0
     87  fa0d		       ca		      dex
     88  fa0e		       10 e5		      bpl	.bug_update_loop
     89  fa10
     90  fa10		       60		      rts
     91  fa11
     92  fa11				   BugMovement
     93  fa11
     94  fa11				   .bug_movement_random
     95  fa11		       20 13 f0 	      jsr	Random
     96  fa14		       29 03		      and	#%00000011
     97  fa16		       85 84		      sta	Temp+1
     98  fa18
     99  fa18				   .bug_movement_load
    100  fa18							; Load x and y values
    101  fa18		       a6 83		      ldx	Temp+0
    102  fa1a		       b5 b4		      lda	BugPosX,x
    103  fa1c		       b4 b6		      ldy	BugPosY,x
    104  fa1e		       aa		      tax
    105  fa1f
    106  fa1f				   .bug_movement_x
    107  fa1f							; Alter X Position
    108  fa1f		       a5 84		      lda	Temp+1
    109  fa21		       29 01		      and	#%00000001
    110  fa23
    111  fa23				   .bug_movement_x_left
    112  fa23		       c9 01		      cmp	#1
    113  fa25		       d0 05		      bne	.bug_movement_x_right
    114  fa27					      REPEAT	#BUG_SPEED
    115  fa27		       ca		      dex
    114  fa27					      REPEND
    115  fa28		       ca		      dex
    116  fa29					      REPEND
    117  fa29		       4c 2e fa 	      jmp	.bug_movement_y
    118  fa2c
    119  fa2c				   .bug_movement_x_right
    120  fa2c					      REPEAT	#BUG_SPEED
    121  fa2c		       e8		      inx
    120  fa2c					      REPEND
    121  fa2d		       e8		      inx
    122  fa2e					      REPEND
    123  fa2e
    124  fa2e				   .bug_movement_y
    125  fa2e							; Alter Y Position
    126  fa2e		       a5 84		      lda	Temp+1
    127  fa30		       29 02		      and	#%00000010
    128  fa32		       4a		      lsr
    129  fa33
    130  fa33				   .bug_movement_y_up
    131  fa33		       c9 01		      cmp	#1
    132  fa35		       d0 05		      bne	.bug_movement_y_down
    133  fa37					      REPEAT	#BUG_SPEED
    134  fa37		       c8		      iny
    133  fa37					      REPEND
    134  fa38		       c8		      iny
    135  fa39					      REPEND
    136  fa39		       4c 3e fa 	      jmp	.bug_movement_boundary
    137  fa3c
    138  fa3c				   .bug_movement_y_down
    139  fa3c					      REPEAT	#BUG_SPEED
    140  fa3c		       88		      dey
    139  fa3c					      REPEND
    140  fa3d		       88		      dey
    141  fa3e					      REPEND
    142  fa3e
    143  fa3e				   .bug_movement_boundary
    144  fa3e
    145  fa3e				   .bug_movement_boundary_left
    146  fa3e		       e0 08		      cpx	#BUG_BOUNDARY
    147  fa40		       b0 05		      bcs	.bug_movement_boundary_right
    148  fa42		       a2 08		      ldx	#BUG_BOUNDARY
    149  fa44		       4c 4d fa 	      jmp	.bug_movement_boundary_top
    150  fa47
    151  fa47				   .bug_movement_boundary_right
    152  fa47		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    153  fa49		       90 02		      bcc	.bug_movement_boundary_top
    154  fa4b		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    155  fa4d
    156  fa4d				   .bug_movement_boundary_top
    157  fa4d		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    158  fa4f		       b0 05		      bcs	.bug_movement_boundary_bottom
    159  fa51		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    160  fa53		       4c 5c fa 	      jmp	.bug_movement_store
    161  fa56
    162  fa56				   .bug_movement_boundary_bottom
    163  fa56		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    164  fa58		       90 02		      bcc	.bug_movement_store
    165  fa5a		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    166  fa5c
    167  fa5c				   .bug_movement_store
    168  fa5c		       8a		      txa
    169  fa5d		       a6 83		      ldx	Temp+0
    170  fa5f		       95 b4		      sta	BugPosX,x
    171  fa61		       94 b6		      sty	BugPosY,x
    172  fa63
    173  fa63				   .bug_movement_return
    174  fa63		       60		      rts
    175  fa64
    176  fa64				   BugCollision
    177  fa64
    178  fa64		       e0 01		      cpx	#1
    179  fa66		       f0 05		      beq	.bug_collision_m1
    180  fa68
    181  fa68				   .bug_collision_m0
    182  fa68							; Collision for M0 (V set)
    183  fa68		       24 00		      bit	CXM0P
    184  fa6a		       70 06		      bvs	.bug_collision_active
    185  fa6c		       60		      rts
    186  fa6d
    187  fa6d				   .bug_collision_m1
    188  fa6d							; Collision for M1 (N set)
    189  fa6d		       24 01		      bit	CXM1P
    190  fa6f		       30 01		      bmi	.bug_collision_active
    191  fa71		       60		      rts
    192  fa72
    193  fa72				   .bug_collision_active
    194  fa72
    195  fa72							; Reduce players score
    196  fa72		       a5 92		      lda	ScoreValue
    197  fa74		       c9 00		      cmp	#0
    198  fa76		       f0 02		      beq	.bug_collision_score_skip
    199  fa78		       c6 92		      dec	ScoreValue
    200  fa7a				   .bug_collision_score_skip
    201  fa7a
    202  fa7a							; Play sound
    203  fa7a		       20 de fa 	      jsr	BugColSample
    204  fa7d
    205  fa7d		       60		      rts
    206  fa7e
    207  fa7e				   BugStunCollision
    208  fa7e
    209  fa7e		       e0 01		      cpx	#1
    210  fa80		       f0 05		      beq	.bug_stun_collision_m1
    211  fa82
    212  fa82				   .bug_stun_collision_m0
    213  fa82							; Collision for M0 (V set)
    214  fa82		       24 00		      bit	CXM0P
    215  fa84		       70 06		      bvs	.bug_stun_collision_active
    216  fa86		       60		      rts
    217  fa87
    218  fa87				   .bug_stun_collision_m1
    219  fa87							; Collision for M1 (N set)
    220  fa87		       24 01		      bit	CXM1P
    221  fa89		       30 01		      bmi	.bug_stun_collision_active
    222  fa8b		       60		      rts
    223  fa8c
    224  fa8c				   .bug_stun_collision_active
    225  fa8c							; Add points to score
    226  fa8c		       18		      clc
    227  fa8d		       a5 93		      lda	ScoreValue+1
    228  fa8f		       69 04		      adc	#BUG_POINTS
    229  fa91		       85 93		      sta	ScoreValue+1
    230  fa93
    231  fa93							; Reset bug
    232  fa93		       20 db f9 	      jsr	BugReset
    233  fa96
    234  fa96							; Play sample
    235  fa96		       20 cd fa 	      jsr	BugSample
    236  fa99
    237  fa99		       60		      rts
    238  fa9a
    239  fa9a							; Horizontal Positioning
    240  fa9a
    241  fa9a				   BugPosition
    242  fa9a
    243  fa9a		       a2 02		      ldx	#2
    244  fa9c		       a5 b4		      lda	BugPosX+0
    245  fa9e		       20 00 f0 	      jsr	PosObject
    246  faa1
    247  faa1		       a2 03		      ldx	#3
    248  faa3		       a5 b5		      lda	BugPosX+1
    249  faa5		       20 00 f0 	      jsr	PosObject
    250  faa8
    251  faa8		       60		      rts
    252  faa9
    253  faa9							; Scanline Draw
    254  faa9
    255  faa9				   BugDrawStart
    256  faa9
    257  faa9		       a0 01		      ldy	#1
    258  faab				   .bug_draw_start_loop
    259  faab
    260  faab							; Set missile 0 & 1 to be 8 clock size
    261  faab		       b9 81 00 	      lda	NuSiz0,y
    262  faae		       09 30		      ora	#%00110000
    263  fab0		       99 81 00 	      sta	NuSiz0,y
    264  fab3		       99 04 00 	      sta	NUSIZ0,y
    265  fab6
    266  fab6							; Setup half scanline positions
    267  fab6		       b9 b6 00 	      lda	BugPosY,y
    268  fab9		       4a		      lsr
    269  faba		       99 ba 00 	      sta	BugDrawPosBottom,y
    270  fabd
    271  fabd		       69 04		      adc	#BUG_SIZE/2
    272  fabf		       99 bc 00 	      sta	BugDrawPosTop,y
    273  fac2
    274  fac2		       88		      dey
    275  fac3		       10 e6		      bpl	.bug_draw_start_loop
    276  fac5
    277  fac5		       60		      rts
    278  fac6
    279  fac6				   BugClean
    280  fac6		       a9 00		      lda	#0
    281  fac8		       85 1d		      sta	ENAM0
    282  faca		       85 1e		      sta	ENAM1
    283  facc		       60		      rts
    284  facd
    285  facd				   BugSample
    286  facd		       a9 1e		      lda	#BUG_SAMPLE_LEN
    287  facf		       85 91		      sta	SampleStep
    288  fad1		       a9 03		      lda	#BUG_SAMPLE_C
    289  fad3		       85 16		      sta	AUDC1
    290  fad5		       a9 14		      lda	#BUG_SAMPLE_F
    291  fad7		       85 18		      sta	AUDF1
    292  fad9		       a9 04		      lda	#BUG_SAMPLE_V
    293  fadb		       85 1a		      sta	AUDV1
    294  fadd		       60		      rts
    295  fade
    296  fade				   BugColSample
    297  fade		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    298  fae0		       85 91		      sta	SampleStep
    299  fae2		       a9 08		      lda	#BUG_COL_SAMPLE_C
    300  fae4		       85 16		      sta	AUDC1
    301  fae6		       a9 08		      lda	#BUG_COL_SAMPLE_F
    302  fae8		       85 18		      sta	AUDF1
    303  faea		       a9 03		      lda	#BUG_COL_SAMPLE_V
    304  faec		       85 1a		      sta	AUDV1
    305  faee		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  faef					      include	"objects/swatter.asm"
      1  faef							;==================
      2  faef							; Swatter (player1)
      3  faef							;==================
      4  faef
      5  faef							; Constants
      6  faef
      7  faef		       00 36	   SWATTER_COLOR =	#$36
      8  faef		       00 30	   SWATTER_HOLD_COLOR =	#$30
      9  faef		       00 14	   SWATTER_SPRITE_SIZE =	#20
     10  faef		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     11  faef
     12  faef		       00 b4	   SWATTER_WAIT_TIME =	60*3	; 60 frames per second
     13  faef		       00 3c	   SWATTER_HOLD_TIME =	60
     14  faef		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     15  faef
     16  faef		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     17  faef		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     18  faef		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     19  faef
     20  faef		       00 10	   SWATTER_HIT_DAMAGE =	#$10
     21  faef
     22  faef		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  faef		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  faef		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  faef		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  faef		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  faef
     28  faef		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  faef		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  faef		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  faef		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  faef
     33  faef		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  faef		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  faef		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  faef		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  faef
     38  faef							; Initialization
     39  faef
     40  faef				   SwatterInit
     41  faef
     42  faef		       20 b4 fb 	      jsr	SwatterReset
     43  faf2
     44  faf2		       60		      rts
     45  faf3
     46  faf3							; Frame Update
     47  faf3
     48  faf3				   SwatterUpdate
     49  faf3
     50  faf3				   .swatter_update_color
     51  faf3		       a5 c0		      lda	SwatterState
     52  faf5		       c9 80		      cmp	#SWATTER_STATE_HOLD
     53  faf7		       d0 05		      bne	.swatter_update_color_active
     54  faf9				   .swatter_update_color_hold
     55  faf9		       a9 30		      lda	#SWATTER_HOLD_COLOR
     56  fafb		       4c 00 fb 	      jmp	.swatter_update_color_set
     57  fafe				   .swatter_update_color_active
     58  fafe		       a9 36		      lda	#SWATTER_COLOR
     59  fb00				   .swatter_update_color_set
     60  fb00		       85 c1		      sta	SwatterColor
     61  fb02
     62  fb02				   .swatter_update_hold_sample
     63  fb02		       a4 c0		      ldy	SwatterState
     64  fb04		       c0 80		      cpy	#SWATTER_STATE_HOLD
     65  fb06		       d0 0f		      bne	.swatter_update_state
     66  fb08
     67  fb08		       c6 c5		      dec	SwatterSampleCount
     68  fb0a		       d0 0b		      bne	.swatter_update_state
     69  fb0c
     70  fb0c		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     71  fb0e		       85 c5		      sta	SwatterSampleCount
     72  fb10
     73  fb10		       c6 c6		      dec	SwatterSampleF
     74  fb12		       a4 c6		      ldy	SwatterSampleF
     75  fb14		       20 d4 fb 	      jsr	SwatterHoldSample
     76  fb17
     77  fb17				   .swatter_update_state
     78  fb17		       a6 8f		      ldx	FrameTimer+1
     79  fb19		       e0 00		      cpx	#0
     80  fb1b		       d0 2d		      bne	.swatter_update_collision
     81  fb1d
     82  fb1d		       a4 c0		      ldy	SwatterState
     83  fb1f		       c0 00		      cpy	#SWATTER_STATE_WAIT
     84  fb21		       f0 0a		      beq	.swatter_update_state_wait
     85  fb23
     86  fb23		       c0 80		      cpy	#SWATTER_STATE_HOLD
     87  fb25		       f0 18		      beq	.swatter_update_state_hold
     88  fb27
     89  fb27							; Else we're at the end of the active state
     90  fb27		       20 b4 fb 	      jsr	SwatterReset
     91  fb2a		       4c 59 fb 	      jmp	.swatter_update_return
     92  fb2d
     93  fb2d				   .swatter_update_state_wait
     94  fb2d		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
     95  fb2f		       84 c6		      sty	SwatterSampleF
     96  fb31		       20 d4 fb 	      jsr	SwatterHoldSample
     97  fb34
     98  fb34		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     99  fb36		       85 c5		      sta	SwatterSampleCount
    100  fb38
    101  fb38		       a9 80		      lda	#SWATTER_STATE_HOLD
    102  fb3a		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    103  fb3c		       4c 46 fb 	      jmp	.swatter_update_state_set
    104  fb3f
    105  fb3f				   .swatter_update_state_hold
    106  fb3f		       20 e3 fb 	      jsr	SwatterActiveSample
    107  fb42
    108  fb42		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    109  fb44		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    110  fb46
    111  fb46				   .swatter_update_state_set
    112  fb46		       85 c0		      sta	SwatterState
    113  fb48		       86 8f		      stx	FrameTimer+1
    114  fb4a
    115  fb4a				   .swatter_update_collision
    116  fb4a							; Check 1 frame after active
    117  fb4a		       a5 c0		      lda	SwatterState
    118  fb4c		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    119  fb4e		       d0 09		      bne	.swatter_update_return
    120  fb50		       a6 8f		      ldx	FrameTimer+1
    121  fb52		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    122  fb54		       d0 03		      bne	.swatter_update_return
    123  fb56
    124  fb56		       20 5a fb 	      jsr	SwatterCollision
    125  fb59
    126  fb59				   .swatter_update_return
    127  fb59		       60		      rts
    128  fb5a
    129  fb5a				   SwatterCollision
    130  fb5a		       24 00		      bit	CXM0P
    131  fb5c		       30 09		      bmi	.swatter_collision_m0
    132  fb5e
    133  fb5e		       24 01		      bit	CXM1P
    134  fb60		       70 0a		      bvs	.swatter_collision_m1
    135  fb62
    136  fb62		       24 07		      bit	CXPPMM
    137  fb64		       30 0e		      bmi	.swatter_collision_p0
    138  fb66
    139  fb66		       60		      rts
    140  fb67
    141  fb67				   .swatter_collision_m0
    142  fb67		       a2 00		      ldx	#0
    143  fb69		       4c 6e fb 	      jmp	.swatter_collision_bug_reset
    144  fb6c
    145  fb6c				   .swatter_collision_m1
    146  fb6c		       a2 01		      ldx	#1
    147  fb6e
    148  fb6e				   .swatter_collision_bug_reset
    149  fb6e		       20 db f9 	      jsr	BugReset
    150  fb71		       4c 86 fb 	      jmp	.swatter_collision_active
    151  fb74
    152  fb74				   .swatter_collision_p0
    153  fb74
    154  fb74		       a5 92		      lda	ScoreValue
    155  fb76		       c9 10		      cmp	#SWATTER_HIT_DAMAGE
    156  fb78		       90 08		      bcc	.swatter_collision_p0_zero
    157  fb7a		       f0 06		      beq	.swatter_collision_p0_zero
    158  fb7c
    159  fb7c		       18		      clc
    160  fb7d		       e9 10		      sbc	#SWATTER_HIT_DAMAGE
    161  fb7f		       4c 84 fb 	      jmp	.swatter_collision_p0_set
    162  fb82
    163  fb82				   .swatter_collision_p0_zero
    164  fb82		       a9 00		      lda	#0
    165  fb84
    166  fb84				   .swatter_collision_p0_set
    167  fb84		       85 92		      sta	ScoreValue
    168  fb86
    169  fb86				   .swatter_collision_active
    170  fb86		       20 f4 fb 	      jsr	SwatterHitSample
    171  fb89
    172  fb89		       60		      rts
    173  fb8a
    174  fb8a				   SwatterPosition
    175  fb8a
    176  fb8a							; Set Position
    177  fb8a		       a2 01		      ldx	#1	; Object (player1)
    178  fb8c		       a5 be		      lda	SwatterPos	; X Position
    179  fb8e		       20 00 f0 	      jsr	PosObject
    180  fb91
    181  fb91		       60		      rts
    182  fb92
    183  fb92							; Scanline Draw
    184  fb92
    185  fb92				   SwatterDrawStart
    186  fb92
    187  fb92							; Set player 1 to be quad size
    188  fb92		       a5 82		      lda	NuSiz1
    189  fb94		       29 f8		      and	#%11111000
    190  fb96		       09 07		      ora	#%00000111
    191  fb98		       85 82		      sta	NuSiz1
    192  fb9a		       85 05		      sta	NUSIZ1
    193  fb9c
    194  fb9c							; Set sprite color
    195  fb9c		       a5 c1		      lda	SwatterColor
    196  fb9e		       85 07		      sta	COLUP1
    197  fba0
    198  fba0							; Note: Doesn't need vertical delay
    199  fba0
    200  fba0							; Calculate starting position
    201  fba0		       a5 bf		      lda	SwatterPos+1	; Y Position
    202  fba2		       4a		      lsr
    203  fba3		       18		      clc
    204  fba4		       69 14		      adc	#SWATTER_SPRITE_SIZE
    205  fba6		       85 c3		      sta	SwatterDrawPos
    206  fba8
    207  fba8							; Initialize sprite index
    208  fba8		       a9 00		      lda	#0
    209  fbaa		       85 c2		      sta	SwatterIndex
    210  fbac		       85 c4		      sta	SwatterLine
    211  fbae
    212  fbae		       60		      rts
    213  fbaf
    214  fbaf				   SwatterClean
    215  fbaf
    216  fbaf							; Clear out Player1 sprite
    217  fbaf		       a9 00		      lda	#0
    218  fbb1		       85 1c		      sta	GRP1
    219  fbb3
    220  fbb3		       60		      rts
    221  fbb4
    222  fbb4				   SwatterReset
    223  fbb4							; Initialize Swatter State
    224  fbb4		       a9 00		      lda	#SWATTER_STATE_WAIT
    225  fbb6		       85 c0		      sta	SwatterState
    226  fbb8
    227  fbb8							; Set Wait Timer
    228  fbb8		       20 13 f0 	      jsr	Random
    229  fbbb		       a5 85		      lda	Rand8
    230  fbbd		       29 3f		      and	#$3f
    231  fbbf		       18		      clc
    232  fbc0		       69 b4		      adc	#SWATTER_WAIT_TIME
    233  fbc2		       85 8f		      sta	FrameTimer+1
    234  fbc4
    235  fbc4							; Set Random Position
    236  fbc4		       20 13 f0 	      jsr	Random
    237  fbc7		       a5 85		      lda	Rand8	; X Position
    238  fbc9		       29 7f		      and	#$7f
    239  fbcb		       85 be		      sta	SwatterPos+0
    240  fbcd		       a5 86		      lda	Rand16	; Y Position
    241  fbcf		       29 7e		      and	#$7e	; Ensure that Y position is even
    242  fbd1		       85 bf		      sta	SwatterPos+1
    243  fbd3
    244  fbd3		       60		      rts
    245  fbd4
    246  fbd4				   SwatterHoldSample
    247  fbd4		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    248  fbd6		       85 91		      sta	SampleStep
    249  fbd8		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    250  fbda		       85 16		      sta	AUDC1
    251  fbdc		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    252  fbde		       85 1a		      sta	AUDV1
    253  fbe0
    254  fbe0		       84 18		      sty	AUDF1	; Store value of y as frequency
    255  fbe2
    256  fbe2		       60		      rts
    257  fbe3
    258  fbe3				   SwatterActiveSample
    259  fbe3		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    260  fbe5		       85 91		      sta	SampleStep
    261  fbe7		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    262  fbe9		       85 16		      sta	AUDC1
    263  fbeb		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    264  fbed		       85 18		      sta	AUDF1
    265  fbef		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    266  fbf1		       85 1a		      sta	AUDV1
    267  fbf3		       60		      rts
    268  fbf4
    269  fbf4				   SwatterHitSample
    270  fbf4		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    271  fbf6		       85 91		      sta	SampleStep
    272  fbf8		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    273  fbfa		       85 16		      sta	AUDC1
    274  fbfc		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    275  fbfe		       85 18		      sta	AUDF1
    276  fc00		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    277  fc02		       85 1a		      sta	AUDV1
    278  fc04		       60		      rts
    279  fc05
    280  fc05							; Swatter Sprites
------- FILE objects/swatter_sprite.asm LEVEL 4 PASS 2
      0  fc05					      include	"objects/swatter_sprite.asm"
      1  fc05				   SwatterSprite
      2  fc05
      3  fc05		       3c		      .BYTE.b	%00111100
      4  fc06		       3c		      .BYTE.b	%00111100
      5  fc07		       56		      .BYTE.b	%01010110
      6  fc08		       6a		      .BYTE.b	%01101010
      7  fc09		       d5		      .BYTE.b	%11010101
      8  fc0a		       ab		      .BYTE.b	%10101011
      9  fc0b		       d5		      .BYTE.b	%11010101
     10  fc0c		       ab		      .BYTE.b	%10101011
     11  fc0d		       d5		      .BYTE.b	%11010101
     12  fc0e		       ab		      .BYTE.b	%10101011
     13  fc0f		       d5		      .BYTE.b	%11010101
     14  fc10		       ab		      .BYTE.b	%10101011
     15  fc11		       56		      .BYTE.b	%01010110
     16  fc12		       6a		      .BYTE.b	%01101010
     17  fc13		       56		      .BYTE.b	%01010110
     18  fc14		       6a		      .BYTE.b	%01101010
     19  fc15		       34		      .BYTE.b	%00110100
     20  fc16		       2c		      .BYTE.b	%00101100
     21  fc17		       34		      .BYTE.b	%00110100
     22  fc18		       18		      .BYTE.b	%00011000
------- FILE objects/swatter.asm
------- FILE game.asm
     22  fc19
     23  fc19							; Initialization
     24  fc19
     25  fc19				   GameInit
     26  fc19
     27  fc19							; Setup logic and kernel
      0  fc19					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fc19				   .POINTER   SET	VBlankPtr
      2  fc19				   .ADDRESS   SET	GameVerticalBlank
      3  fc19
      4  fc19		       a9 6a		      LDA	#<.ADDRESS
      5  fc1b		       85 87		      STA	.POINTER
      6  fc1d		       a9 fc		      LDA	#>.ADDRESS
      7  fc1f		       85 88		      STA	.POINTER+1
      8  fc21
      0  fc21					      SET_POINTER	KernelPtr, GameKernel
      1  fc21				   .POINTER   SET	KernelPtr
      2  fc21				   .ADDRESS   SET	GameKernel
      3  fc21
      4  fc21		       a9 f0		      LDA	#<.ADDRESS
      5  fc23		       85 89		      STA	.POINTER
      6  fc25		       a9 fc		      LDA	#>.ADDRESS
      7  fc27		       85 8a		      STA	.POINTER+1
      8  fc29
      0  fc29					      SET_POINTER	OverScanPtr, GameOverScan
      1  fc29				   .POINTER   SET	OverScanPtr
      2  fc29				   .ADDRESS   SET	GameOverScan
      3  fc29
      4  fc29		       a9 94		      LDA	#<.ADDRESS
      5  fc2b		       85 8b		      STA	.POINTER
      6  fc2d		       a9 fc		      LDA	#>.ADDRESS
      7  fc2f		       85 8c		      STA	.POINTER+1
      8  fc31
     31  fc31
     32  fc31							; Mute Audio
     33  fc31		       a9 00		      lda	#0
     34  fc33		       85 15		      sta	AUDC0
     35  fc35		       85 19		      sta	AUDV0
     36  fc37		       85 17		      sta	AUDF0
     37  fc39		       85 16		      sta	AUDC1
     38  fc3b		       85 1a		      sta	AUDV1
     39  fc3d		       85 18		      sta	AUDF1
     40  fc3f		       85 91		      sta	SampleStep
     41  fc41
     42  fc41							; Load Audio Settings
     43  fc41		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fc43		       85 19		      sta	AUDV0
     45  fc45
     46  fc45							; Make it so that we play the first note immediately
     47  fc45		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fc47		       85 90		      sta	AudioStep
     49  fc49		       a9 02		      lda	#2
     50  fc4b		       85 8e		      sta	FrameTimer
     51  fc4d
     52  fc4d							; Reset NuSiz
     53  fc4d		       a9 00		      lda	#0
     54  fc4f		       85 81		      sta	NuSiz0
     55  fc51		       85 04		      sta	NUSIZ0
     56  fc53		       85 82		      sta	NuSiz1
     57  fc55		       85 05		      sta	NUSIZ1
     58  fc57
     59  fc57							; Initialize Objects
     60  fc57		       20 e6 f4 	      jsr	LevelInit
     61  fc5a		       20 25 f5 	      jsr	ScoreInit
     62  fc5d		       20 88 f6 	      jsr	SpiderInit
     63  fc60		       20 29 f8 	      jsr	LineInit
     64  fc63		       20 d2 f9 	      jsr	BugInit
     65  fc66		       20 ef fa 	      jsr	SwatterInit
     66  fc69
     67  fc69		       60		      rts
     68  fc6a
     69  fc6a				   GameVerticalBlank
     70  fc6a
     71  fc6a							; Refresh random values
     72  fc6a		       20 13 f0 	      jsr	Random
     73  fc6d
     74  fc6d							; Update Objects
     75  fc6d		       20 f7 f4 	      jsr	LevelUpdate
     76  fc70		       20 99 f6 	      jsr	SpiderUpdate
     77  fc73		       20 3e f8 	      jsr	LineUpdate
     78  fc76		       20 f3 f9 	      jsr	BugUpdate
     79  fc79		       20 f3 fa 	      jsr	SwatterUpdate
     80  fc7c		       20 2e f5 	      jsr	ScoreUpdate
     81  fc7f
     82  fc7f							; Reset Collisions
     83  fc7f		       85 2c		      sta	CXCLR
     84  fc81
     85  fc81							; Clear horizontal movement
     86  fc81		       85 2b		      sta	HMCLR
     87  fc83
     88  fc83							; Update Positions
     89  fc83		       20 a4 f7 	      jsr	SpiderPosition
     90  fc86		       20 62 f9 	      jsr	LinePosition
     91  fc89		       20 9a fa 	      jsr	BugPosition
     92  fc8c		       20 8a fb 	      jsr	SwatterPosition
     93  fc8f
     94  fc8f							; Set final x positions
     95  fc8f		       85 02		      sta	WSYNC
     96  fc91		       85 2a		      sta	HMOVE
     97  fc93
     98  fc93		       60		      rts
     99  fc94
    100  fc94				   GameOverScan
    101  fc94
    102  fc94							; Audio Routines
    103  fc94		       20 b2 fc 	      jsr	GameAudio
    104  fc97		       20 9e fc 	      jsr	GameSample
    105  fc9a
    106  fc9a							; State Routines
    107  fc9a		       20 e6 fc 	      jsr	GameDeath
    108  fc9d
    109  fc9d		       60		      rts
    110  fc9e
    111  fc9e				   GameSample
    112  fc9e
    113  fc9e		       a6 91		      ldx	SampleStep
    114  fca0		       e0 00		      cpx	#0
    115  fca2		       f0 0b		      beq	.game_sample_return
    116  fca4
    117  fca4		       ca		      dex
    118  fca5		       d0 08		      bne	.game_sample_return
    119  fca7
    120  fca7				   .game_sample_mute
    121  fca7		       a9 00		      lda	#0
    122  fca9		       85 1a		      sta	AUDV1
    123  fcab		       85 18		      sta	AUDF1
    124  fcad		       85 16		      sta	AUDC1
    125  fcaf
    126  fcaf				   .game_sample_return
    127  fcaf		       86 91		      stx	SampleStep
    128  fcb1		       60		      rts
    129  fcb2
    130  fcb2				   GameAudio
    131  fcb2
    132  fcb2		       a6 8e		      ldx	FrameTimer
    133  fcb4		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    134  fcb6		       f0 25		      beq	.game_audio_mute_note
    135  fcb8		       e0 00		      cpx	#0
    136  fcba		       d0 29		      bne	.game_audio_return
    137  fcbc
    138  fcbc							; Reset Timer
    139  fcbc		       a2 09		      ldx	#GAME_AUDIO_STEP
    140  fcbe		       86 8e		      stx	FrameTimer
    141  fcc0
    142  fcc0				   .game_audio_play
    143  fcc0
    144  fcc0							; Increment melody position
    145  fcc0		       a4 90		      ldy	AudioStep
    146  fcc2		       c8		      iny
    147  fcc3
    148  fcc3		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    149  fcc5		       d0 02		      bne	.game_audio_play_note
    150  fcc7
    151  fcc7							; Loop our audio step
    152  fcc7		       a0 00		      ldy	#0
    153  fcc9
    154  fcc9				   .game_audio_play_note
    155  fcc9
    156  fcc9							; Save current position
    157  fcc9		       84 90		      sty	AudioStep
    158  fccb
    159  fccb							; Melody Line
    160  fccb		       b9 91 fe 	      lda	GameAudio0,y
    161  fcce		       c9 ff		      cmp	#$FF
    162  fcd0		       f0 0b		      beq	.game_audio_mute_note
    163  fcd2		       85 17		      sta	AUDF0
    164  fcd4		       a9 06		      lda	#GAME_AUDIO_TONE
    165  fcd6		       85 15		      sta	AUDC0
    166  fcd8		       a9 02		      lda	#GAME_AUDIO_VOLUME
    167  fcda		       85 19		      sta	AUDV0
    168  fcdc
    169  fcdc		       60		      rts
    170  fcdd
    171  fcdd				   .game_audio_mute_note
    172  fcdd
    173  fcdd		       a9 00		      lda	#0
    174  fcdf		       85 17		      sta	AUDF0
    175  fce1		       85 15		      sta	AUDC0
    176  fce3		       85 19		      sta	AUDV0
    177  fce5
    178  fce5				   .game_audio_return
    179  fce5		       60		      rts
    180  fce6
    181  fce6				   GameDeath
    182  fce6		       a5 92		      lda	ScoreValue+0
    183  fce8		       c9 00		      cmp	#0
    184  fcea		       d0 03		      bne	.game_death_return
    185  fcec
    186  fcec							; Show Game Over Screen
    187  fcec		       20 b1 fe 	      jsr	OverInit
    188  fcef
    189  fcef				   .game_death_return
    190  fcef		       60		      rts
    191  fcf0
    192  fcf0				   GameKernel
    193  fcf0
    194  fcf0							; Turn on display
    195  fcf0		       a9 00		      lda	#0
    196  fcf2		       85 01		      sta	VBLANK
    197  fcf4
    198  fcf4				   .game_kernel_score
    199  fcf4
    200  fcf4							; Draw Score on top first
    201  fcf4		       20 4e f5 	      jsr	ScoreDraw
    202  fcf7
    203  fcf7				   .game_kernel_objects_start
    204  fcf7
    205  fcf7							; Setup Drawing Objects
    206  fcf7		       20 0e f6 	      jsr	WebDrawStart
    207  fcfa		       20 ac f7 	      jsr	SpiderDrawStart
    208  fcfd		       20 92 fb 	      jsr	SwatterDrawStart
    209  fd00		       20 6a f9 	      jsr	LineDrawStart
    210  fd03		       20 a9 fa 	      jsr	BugDrawStart
    211  fd06
    212  fd06							; Start Scanline Counter
    213  fd06		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    214  fd08							; The extra 5 is for processing overflow
    215  fd08
    216  fd08							; Half scanline counter in Temp+1
    217  fd08		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    218  fd0a		       85 84		      sta	Temp+1
    219  fd0c
    220  fd0c				   .game_kernel_objects
    221  fd0c
    222  fd0c		       85 02		      sta	WSYNC
    223  fd0e
    224  fd0e				   .game_kernel_web
    225  fd0e
    226  fd0e							; Web
    227  fd0e		       a4 9b		      ldy	WebIndex
    228  fd10
    229  fd10							; Load Image
    230  fd10		       b9 2e f6 	      lda	WebImagePF0,y
    231  fd13		       85 0d		      sta	PF0
    232  fd15		       b9 4c f6 	      lda	WebImagePF1,y
    233  fd18		       85 0e		      sta	PF1
    234  fd1a		       b9 6a f6 	      lda	WebImagePF2,y
    235  fd1d		       85 0f		      sta	PF2
    236  fd1f
    237  fd1f		       e6 9b		      inc	WebIndex
    238  fd21
    239  fd21				   .game_kernel_line_1
    240  fd21							; Line (1st time)
    241  fd21
    242  fd21		       24 a9		      bit	LineEnabled
    243  fd23		       10 10		      bpl	.game_kernel_line_1_skip
    244  fd25
    245  fd25							; Load half-line
    246  fd25		       a5 84		      lda	Temp+1
    247  fd27
    248  fd27		       a0 00		      ldy	#%00000000
    249  fd29
    250  fd29							; Top
    251  fd29		       c5 b1		      cmp	LineDrawPos+1
    252  fd2b		       b0 06		      bcs	.game_kernel_line_1_off
    253  fd2d
    254  fd2d							; Bottom
    255  fd2d		       c5 b0		      cmp	LineDrawPos+0
    256  fd2f		       90 02		      bcc	.game_kernel_line_1_off
    257  fd31
    258  fd31				   .game_kernel_line_1_on
    259  fd31		       a0 02		      ldy	#%00000010
    260  fd33
    261  fd33				   .game_kernel_line_1_off
    262  fd33		       84 1f		      sty	ENABL
    263  fd35
    264  fd35				   .game_kernel_line_1_skip
    265  fd35
    266  fd35		       ca		      dex
    267  fd36		       85 02		      sta	WSYNC
    268  fd38
    269  fd38				   .game_kernel_spider_1
    270  fd38							; Spider (1st time)
    271  fd38
    272  fd38		       a4 a4		      ldy	SpiderIndex
    273  fd3a		       30 1a		      bmi	.game_kernel_spider_1_load	; At end of sprite
    274  fd3c		       d0 06		      bne	.game_kernel_spider_1_draw	; Currently drawing (not zero)
    275  fd3e
    276  fd3e							; Check y position to see if we should start
    277  fd3e		       a5 84		      lda	Temp+1	; Use half scanline
    278  fd40		       e5 a5		      sbc	SpiderDrawPos
    279  fd42		       10 12		      bpl	.game_kernel_spider_1_load
    280  fd44
    281  fd44				   .game_kernel_spider_1_draw
    282  fd44		       b1 9e		      lda	(SpiderPtr),y
    283  fd46		       85 a6		      sta	SpiderLine
    284  fd48
    285  fd48							; Increment sprite index
    286  fd48		       e6 a4		      inc	SpiderIndex
    287  fd4a
    288  fd4a							; See if we're at the end
    289  fd4a		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    290  fd4c		       d0 0a		      bne	.game_kernel_spider_1_line
    291  fd4e		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    292  fd50		       84 a4		      sty	SpiderIndex
    293  fd52		       a9 00		      lda	#0
    294  fd54		       85 a6		      sta	SpiderLine
    295  fd56
    296  fd56				   .game_kernel_spider_1_load
    297  fd56		       a5 a6		      lda	SpiderLine
    298  fd58				   .game_kernel_spider_1_line
    299  fd58		       85 1b		      sta	GRP0
    300  fd5a
    301  fd5a				   .game_kernel_swatter_1
    302  fd5a							; Swatter (1st time)
    303  fd5a
    304  fd5a							; Check if wait state
    305  fd5a		       24 c0		      bit	SwatterState
    306  fd5c		       10 1b		      bpl	.game_kernel_swatter_1_load
    307  fd5e
    308  fd5e		       a4 c2		      ldy	SwatterIndex
    309  fd60		       30 17		      bmi	.game_kernel_swatter_1_load	; At end of sprite
    310  fd62		       d0 06		      bne	.game_kernel_swatter_1_draw	; Currently drawing (not zero)
    311  fd64
    312  fd64							; Check y position to see if we should start
    313  fd64		       a5 84		      lda	Temp+1	; Use half scanline
    314  fd66		       e5 c3		      sbc	SwatterDrawPos
    315  fd68		       10 0f		      bpl	.game_kernel_swatter_1_load
    316  fd6a
    317  fd6a				   .game_kernel_swatter_1_draw
    318  fd6a		       b9 05 fc 	      lda	SwatterSprite,y
    319  fd6d		       85 c4		      sta	SwatterLine
    320  fd6f
    321  fd6f							; Increment index
    322  fd6f		       e6 c2		      inc	SwatterIndex
    323  fd71
    324  fd71							; See if we're at the end
    325  fd71		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    326  fd73		       d0 06		      bne	.game_kernel_swatter_1_line
    327  fd75		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    328  fd77		       84 c2		      sty	SwatterIndex
    329  fd79
    330  fd79				   .game_kernel_swatter_1_load
    331  fd79		       a5 c4		      lda	SwatterLine
    332  fd7b				   .game_kernel_swatter_1_line
    333  fd7b		       85 1c		      sta	GRP1
    334  fd7d
    335  fd7d							; New line and decrement half scanline
    336  fd7d		       c6 84		      dec	Temp+1
    337  fd7f		       ca		      dex
    338  fd80		       85 02		      sta	WSYNC
    339  fd82
    340  fd82							; Preload half-line
    341  fd82		       a5 84		      lda	Temp+1
    342  fd84
    343  fd84				   .game_kernel_line_2
    344  fd84							; Line (2nd time)
    345  fd84
    346  fd84		       24 a9		      bit	LineEnabled
    347  fd86		       10 0e		      bpl	.game_kernel_line_2_skip
    348  fd88
    349  fd88		       a0 00		      ldy	#%00000000
    350  fd8a
    351  fd8a							; Top
    352  fd8a		       c5 b1		      cmp	LineDrawPos+1
    353  fd8c		       b0 06		      bcs	.game_kernel_line_2_off
    354  fd8e
    355  fd8e							; Bottom
    356  fd8e		       c5 b0		      cmp	LineDrawPos+0
    357  fd90		       90 02		      bcc	.game_kernel_line_2_off
    358  fd92
    359  fd92				   .game_kernel_line_2_on
    360  fd92		       a0 02		      ldy	#%00000010
    361  fd94
    362  fd94				   .game_kernel_line_2_off
    363  fd94		       84 1f		      sty	ENABL
    364  fd96
    365  fd96				   .game_kernel_line_2_skip
    366  fd96
    367  fd96				   .game_kernel_bug_1_0
    368  fd96							; First Bug (1st time)
    369  fd96
    370  fd96		       a0 00		      ldy	#%00000000
    371  fd98
    372  fd98							; Top
    373  fd98		       c5 bc		      cmp	BugDrawPosTop+0
    374  fd9a		       b0 06		      bcs	.game_kernel_bug_1_0_off
    375  fd9c
    376  fd9c							; Bottom
    377  fd9c		       c5 ba		      cmp	BugDrawPosBottom+0
    378  fd9e		       90 02		      bcc	.game_kernel_bug_1_0_off
    379  fda0
    380  fda0				   .game_kernel_bug_1_0_on
    381  fda0		       a0 02		      ldy	#%00000010
    382  fda2
    383  fda2				   .game_kernel_bug_1_0_off
    384  fda2		       84 1d		      sty	ENAM0
    385  fda4
    386  fda4				   .game_kernel_bug_1_1
    387  fda4							; Second Bug (1st time)
    388  fda4
    389  fda4		       a0 00		      ldy	#%00000000
    390  fda6
    391  fda6							; Top
    392  fda6		       c5 bd		      cmp	BugDrawPosTop+1
    393  fda8		       b0 06		      bcs	.game_kernel_bug_1_1_off
    394  fdaa
    395  fdaa							; Bottom
    396  fdaa		       c5 bb		      cmp	BugDrawPosBottom+1
    397  fdac		       90 02		      bcc	.game_kernel_bug_1_1_off
    398  fdae
    399  fdae				   .game_kernel_bug_1_1_on
    400  fdae		       a0 02		      ldy	#%00000010
    401  fdb0
    402  fdb0				   .game_kernel_bug_1_1_off
    403  fdb0		       84 1e		      sty	ENAM1
    404  fdb2
    405  fdb2							; Next Line
    406  fdb2		       ca		      dex
    407  fdb3		       85 02		      sta	WSYNC
    408  fdb5
    409  fdb5				   .game_kernel_spider_2
    410  fdb5							; Spider (2nd time)
    411  fdb5
    412  fdb5		       a4 a4		      ldy	SpiderIndex
    413  fdb7		       30 1a		      bmi	.game_kernel_spider_2_load	; At end of sprite
    414  fdb9		       d0 06		      bne	.game_kernel_spider_2_draw	; Currently drawing (not zero)
    415  fdbb
    416  fdbb							; Check y position to see if we should start
    417  fdbb		       a5 84		      lda	Temp+1	; Use half scanline
    418  fdbd		       e5 a5		      sbc	SpiderDrawPos
    419  fdbf		       10 12		      bpl	.game_kernel_spider_2_load
    420  fdc1
    421  fdc1				   .game_kernel_spider_2_draw
    422  fdc1		       b1 9e		      lda	(SpiderPtr),y
    423  fdc3		       85 a6		      sta	SpiderLine
    424  fdc5
    425  fdc5							; Increment sprite index
    426  fdc5		       e6 a4		      inc	SpiderIndex
    427  fdc7
    428  fdc7							; See if we're at the end
    429  fdc7		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    430  fdc9		       d0 0a		      bne	.game_kernel_spider_2_line
    431  fdcb		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    432  fdcd		       84 a4		      sty	SpiderIndex
    433  fdcf		       a9 00		      lda	#0
    434  fdd1		       85 a6		      sta	SpiderLine
    435  fdd3
    436  fdd3				   .game_kernel_spider_2_load
    437  fdd3		       a5 a6		      lda	SpiderLine
    438  fdd5				   .game_kernel_spider_2_line
    439  fdd5		       85 1b		      sta	GRP0
    440  fdd7
    441  fdd7				   .game_kernel_swatter_2
    442  fdd7							; Swatter (2nd time)
    443  fdd7
    444  fdd7							; Check if wait state
    445  fdd7		       24 c0		      bit	SwatterState
    446  fdd9		       10 1b		      bpl	.game_kernel_swatter_2_load
    447  fddb
    448  fddb		       a4 c2		      ldy	SwatterIndex
    449  fddd		       30 17		      bmi	.game_kernel_swatter_2_load	; At end of sprite
    450  fddf		       d0 06		      bne	.game_kernel_swatter_2_draw	; Currently drawing (not zero)
    451  fde1
    452  fde1							; Check y position to see if we should start
    453  fde1		       a5 84		      lda	Temp+1	; Use half scanline
    454  fde3		       e5 c3		      sbc	SwatterDrawPos
    455  fde5		       10 0f		      bpl	.game_kernel_swatter_2_load
    456  fde7
    457  fde7				   .game_kernel_swatter_2_draw
    458  fde7		       b9 05 fc 	      lda	SwatterSprite,y
    459  fdea		       85 c4		      sta	SwatterLine
    460  fdec
    461  fdec							; Increment index
    462  fdec		       e6 c2		      inc	SwatterIndex
    463  fdee
    464  fdee							; See if we're at the end
    465  fdee		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    466  fdf0		       d0 06		      bne	.game_kernel_swatter_2_line
    467  fdf2		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    468  fdf4		       84 c2		      sty	SwatterIndex
    469  fdf6
    470  fdf6				   .game_kernel_swatter_2_load
    471  fdf6		       a5 c4		      lda	SwatterLine
    472  fdf8				   .game_kernel_swatter_2_line
    473  fdf8		       85 1c		      sta	GRP1
    474  fdfa
    475  fdfa							; Next Line and half-line
    476  fdfa		       c6 84		      dec	Temp+1
    477  fdfc		       ca		      dex
    478  fdfd		       85 02		      sta	WSYNC
    479  fdff
    480  fdff							; Preload half-line
    481  fdff		       a5 84		      lda	Temp+1
    482  fe01
    483  fe01				   .game_kernel_line_3
    484  fe01							; Line (3rd time)
    485  fe01
    486  fe01		       24 a9		      bit	LineEnabled
    487  fe03		       10 0e		      bpl	.game_kernel_line_3_skip
    488  fe05
    489  fe05		       a0 00		      ldy	#%00000000
    490  fe07
    491  fe07							; Top
    492  fe07		       c5 b1		      cmp	LineDrawPos+1
    493  fe09		       b0 06		      bcs	.game_kernel_line_3_off
    494  fe0b
    495  fe0b							; Bottom
    496  fe0b		       c5 b0		      cmp	LineDrawPos+0
    497  fe0d		       90 02		      bcc	.game_kernel_line_3_off
    498  fe0f
    499  fe0f				   .game_kernel_line_3_on
    500  fe0f		       a0 02		      ldy	#%00000010
    501  fe11
    502  fe11				   .game_kernel_line_3_off
    503  fe11		       84 1f		      sty	ENABL
    504  fe13
    505  fe13				   .game_kernel_line_3_skip
    506  fe13
    507  fe13				   .game_kernel_bug_2_0
    508  fe13							; First Bug (2nd time)
    509  fe13
    510  fe13		       a0 00		      ldy	#%00000000
    511  fe15
    512  fe15							; Top
    513  fe15		       c5 bc		      cmp	BugDrawPosTop+0
    514  fe17		       b0 06		      bcs	.game_kernel_bug_2_0_off
    515  fe19
    516  fe19							; Bottom
    517  fe19		       c5 ba		      cmp	BugDrawPosBottom+0
    518  fe1b		       90 02		      bcc	.game_kernel_bug_2_0_off
    519  fe1d
    520  fe1d				   .game_kernel_bug_2_0_on
    521  fe1d		       a0 02		      ldy	#%00000010
    522  fe1f
    523  fe1f				   .game_kernel_bug_2_0_off
    524  fe1f		       84 1d		      sty	ENAM0
    525  fe21
    526  fe21				   .game_kernel_bug_2_1
    527  fe21							; Second Bug (2nd time)
    528  fe21
    529  fe21		       a0 00		      ldy	#%00000000
    530  fe23
    531  fe23							; Top
    532  fe23		       c5 bd		      cmp	BugDrawPosTop+1
    533  fe25		       b0 06		      bcs	.game_kernel_bug_2_1_off
    534  fe27
    535  fe27							; Bottom
    536  fe27		       c5 bb		      cmp	BugDrawPosBottom+1
    537  fe29		       90 02		      bcc	.game_kernel_bug_2_1_off
    538  fe2b
    539  fe2b				   .game_kernel_bug_2_1_on
    540  fe2b		       a0 02		      ldy	#%00000010
    541  fe2d
    542  fe2d				   .game_kernel_bug_2_1_off
    543  fe2d		       84 1e		      sty	ENAM1
    544  fe2f
    545  fe2f							; Next Line
    546  fe2f		       ca		      dex
    547  fe30		       85 02		      sta	WSYNC
    548  fe32
    549  fe32				   .game_kernel_spider_3
    550  fe32							; Spider (3rd time)
    551  fe32
    552  fe32		       a4 a4		      ldy	SpiderIndex
    553  fe34		       30 1a		      bmi	.game_kernel_spider_3_load	; At end of sprite
    554  fe36		       d0 06		      bne	.game_kernel_spider_3_draw	; Currently drawing (not zero)
    555  fe38
    556  fe38							; Check y position to see if we should start
    557  fe38		       a5 84		      lda	Temp+1	; Use half scanline
    558  fe3a		       e5 a5		      sbc	SpiderDrawPos
    559  fe3c		       10 12		      bpl	.game_kernel_spider_3_load
    560  fe3e
    561  fe3e				   .game_kernel_spider_3_draw
    562  fe3e		       b1 9e		      lda	(SpiderPtr),y
    563  fe40		       85 a6		      sta	SpiderLine
    564  fe42
    565  fe42							; Increment sprite index
    566  fe42		       e6 a4		      inc	SpiderIndex
    567  fe44
    568  fe44							; See if we're at the end
    569  fe44		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    570  fe46		       d0 0a		      bne	.game_kernel_spider_3_line
    571  fe48		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    572  fe4a		       84 a4		      sty	SpiderIndex
    573  fe4c		       a9 00		      lda	#0
    574  fe4e		       85 a6		      sta	SpiderLine
    575  fe50
    576  fe50				   .game_kernel_spider_3_load
    577  fe50		       a5 a6		      lda	SpiderLine
    578  fe52				   .game_kernel_spider_3_line
    579  fe52		       85 1b		      sta	GRP0
    580  fe54
    581  fe54				   .game_kernel_spider_3_skip
    582  fe54
    583  fe54				   .game_kernel_swatter_3
    584  fe54							; Swatter (3rd time)
    585  fe54
    586  fe54							; Check if wait state
    587  fe54		       24 c0		      bit	SwatterState
    588  fe56		       10 1b		      bpl	.game_kernel_swatter_3_load
    589  fe58
    590  fe58		       a4 c2		      ldy	SwatterIndex
    591  fe5a		       30 17		      bmi	.game_kernel_swatter_3_load	; At end of sprite
    592  fe5c		       d0 06		      bne	.game_kernel_swatter_3_draw	; Currently drawing (not zero)
    593  fe5e
    594  fe5e							; Check y position to see if we should start
    595  fe5e		       a5 84		      lda	Temp+1	; Use half scanline
    596  fe60		       e5 c3		      sbc	SwatterDrawPos
    597  fe62		       10 0f		      bpl	.game_kernel_swatter_3_load
    598  fe64
    599  fe64				   .game_kernel_swatter_3_draw
    600  fe64		       b9 05 fc 	      lda	SwatterSprite,y
    601  fe67		       85 c4		      sta	SwatterLine
    602  fe69
    603  fe69							; Increment index
    604  fe69		       e6 c2		      inc	SwatterIndex
    605  fe6b
    606  fe6b							; See if we're at the end
    607  fe6b		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    608  fe6d		       d0 06		      bne	.game_kernel_swatter_3_line
    609  fe6f		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    610  fe71		       84 c2		      sty	SwatterIndex
    611  fe73
    612  fe73				   .game_kernel_swatter_3_load
    613  fe73		       a5 c4		      lda	SwatterLine
    614  fe75				   .game_kernel_swatter_3_line
    615  fe75		       85 1c		      sta	GRP1
    616  fe77
    617  fe77				   .game_kernel_swatter_3_skip
    618  fe77
    619  fe77							; New line and decrement half scanline
    620  fe77		       c6 84		      dec	Temp+1
    621  fe79		       ca		      dex
    622  fe7a		       f0 03		      beq	.game_kernel_clean
    623  fe7c		       4c 0c fd 	      jmp	.game_kernel_objects
    624  fe7f
    625  fe7f				   .game_kernel_clean
    626  fe7f
    627  fe7f		       20 25 f6 	      jsr	WebClean
    628  fe82		       20 d4 f7 	      jsr	SpiderClean
    629  fe85		       20 8a f9 	      jsr	LineClean
    630  fe88		       20 c6 fa 	      jsr	BugClean
    631  fe8b		       20 af fb 	      jsr	SwatterClean
    632  fe8e
    633  fe8e		       85 02		      sta	WSYNC
    634  fe90
    635  fe90				   .game_kernel_return
    636  fe90		       60		      rts
    637  fe91
    638  fe91				   GameAudio0
    639  fe91		       0d		      .byte.b	#13	; D
    640  fe92		       ff		      .byte.b	#$FF
    641  fe93		       0f		      .byte.b	#15	; B
    642  fe94		       ff		      .byte.b	#$FF
    643  fe95		       0d		      .byte.b	#13	; D
    644  fe96		       ff		      .byte.b	#$FF
    645  fe97		       0f		      .byte.b	#15	; B
    646  fe98		       ff		      .byte.b	#$FF
    647  fe99		       0d		      .byte.b	#13	; D
    648  fe9a		       0d		      .byte.b	#13	; D
    649  fe9b		       0f		      .byte.b	#15	; B
    650  fe9c		       ff		      .byte.b	#$FF
    651  fe9d		       0c		      .byte.b	#12	; D#
    652  fe9e		       ff		      .byte.b	#$FF
    653  fe9f		       0f		      .byte.b	#15	; B
    654  fea0		       ff		      .byte.b	#$FF
    655  fea1		       0b		      .byte.b	#11	; E
    656  fea2		       ff		      .byte.b	#$FF
    657  fea3		       0e		      .byte.b	#14	; C#
    658  fea4		       ff		      .byte.b	#$FF
    659  fea5		       0b		      .byte.b	#11
    660  fea6		       ff		      .byte.b	#$FF
    661  fea7		       0e		      .byte.b	#14
    662  fea8		       ff		      .byte.b	#$FF
    663  fea9		       0b		      .byte.b	#11
    664  feaa		       0b		      .byte.b	#11
    665  feab		       0e		      .byte.b	#14
    666  feac		       ff		      .byte.b	#$FF
    667  fead		       0b		      .byte.b	#11
    668  feae		       ff		      .byte.b	#$FF
    669  feaf		       0e		      .byte.b	#14
    670  feb0		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  feb1					      include	"over.asm"
      1  feb1							;================
      2  feb1							; Constants
      3  feb1							;================
      4  feb1
      5  feb1		       00 dc	   OVER_FRAMES =	220
      6  feb1
      7  feb1		       00 00	   OVER_BG_COLOR =	#$00
      8  feb1		       00 44	   OVER_FG_COLOR =	#$44
      9  feb1
     10  feb1		       00 07	   OVER_AUDIO_TONE =	7
     11  feb1		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  feb1		       00 06	   OVER_AUDIO_LENGTH =	6
     13  feb1		       00 10	   OVER_AUDIO_STEP =	16
     14  feb1
     15  feb1		       00 09	   OVER_IMAGE_SIZE =	9
     16  feb1		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  feb1		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  feb1		       00 35	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  feb1
     20  feb1				   OverInit
     21  feb1
     22  feb1							; Setup logic and kernel
      0  feb1					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  feb1				   .POINTER   SET	VBlankPtr
      2  feb1				   .ADDRESS   SET	OverVerticalBlank
      3  feb1
      4  feb1		       a9 f3		      LDA	#<.ADDRESS
      5  feb3		       85 87		      STA	.POINTER
      6  feb5		       a9 fe		      LDA	#>.ADDRESS
      7  feb7		       85 88		      STA	.POINTER+1
      8  feb9
      0  feb9					      SET_POINTER	KernelPtr, OverKernel
      1  feb9				   .POINTER   SET	KernelPtr
      2  feb9				   .ADDRESS   SET	OverKernel
      3  feb9
      4  feb9		       a9 31		      LDA	#<.ADDRESS
      5  febb		       85 89		      STA	.POINTER
      6  febd		       a9 ff		      LDA	#>.ADDRESS
      7  febf		       85 8a		      STA	.POINTER+1
      8  fec1
      0  fec1					      SET_POINTER	OverScanPtr, OverOverScan
      1  fec1				   .POINTER   SET	OverScanPtr
      2  fec1				   .ADDRESS   SET	OverOverScan
      3  fec1
      4  fec1		       a9 f7		      LDA	#<.ADDRESS
      5  fec3		       85 8b		      STA	.POINTER
      6  fec5		       a9 fe		      LDA	#>.ADDRESS
      7  fec7		       85 8c		      STA	.POINTER+1
      8  fec9
     26  fec9
     27  fec9							; Load Colors
     28  fec9		       a9 00		      lda	#OVER_BG_COLOR
     29  fecb		       85 09		      sta	COLUBK
     30  fecd		       a9 44		      lda	#OVER_FG_COLOR
     31  fecf		       85 08		      sta	COLUPF
     32  fed1
     33  fed1							; Load audio settings
     34  fed1		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fed3		       85 15		      sta	AUDC0
     36  fed5		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fed7		       85 19		      sta	AUDV0
     38  fed9		       a9 00		      lda	#0
     39  fedb		       85 16		      sta	AUDC1
     40  fedd		       85 1a		      sta	AUDV1
     41  fedf		       a9 00		      lda	#0
     42  fee1		       85 90		      sta	AudioStep
     43  fee3
     44  fee3							; Play first note
     45  fee3		       ad 83 ff 	      lda	OverAudio0,AudioStep
     46  fee6		       85 17		      sta	AUDF0
     47  fee8
     48  fee8							; Setup frame counters
     49  fee8		       a9 00		      lda	#0
     50  feea		       85 8d		      sta	Frame
     51  feec		       a9 10		      lda	#OVER_AUDIO_STEP
     52  feee		       85 8e		      sta	FrameTimer
     53  fef0		       85 84		      sta	Temp+1
     54  fef2
     55  fef2		       60		      rts
     56  fef3
     57  fef3				   OverVerticalBlank
     58  fef3		       20 2e f5 	      jsr	ScoreUpdate
     59  fef6		       60		      rts
     60  fef7
     61  fef7				   OverOverScan
     62  fef7		       20 fe fe 	      jsr	OverAudio
     63  fefa		       20 27 ff 	      jsr	OverState
     64  fefd		       60		      rts
     65  fefe
     66  fefe				   OverAudio
     67  fefe
     68  fefe		       a6 8e		      ldx	FrameTimer
     69  ff00		       e0 00		      cpx	#0
     70  ff02		       d0 22		      bne	.over_audio_return
     71  ff04
     72  ff04							; Reset Timer
     73  ff04		       a6 84		      ldx	Temp+1
     74  ff06					      REPEAT	3
     75  ff06		       e8		      inx
     74  ff06					      REPEND
     75  ff07		       e8		      inx
     74  ff07					      REPEND
     75  ff08		       e8		      inx
     76  ff09					      REPEND
     77  ff09		       86 8e		      stx	FrameTimer
     78  ff0b		       86 84		      stx	Temp+1
     79  ff0d
     80  ff0d				   .over_audio_play
     81  ff0d
     82  ff0d							; Increment melody position
     83  ff0d		       a4 90		      ldy	AudioStep
     84  ff0f		       c8		      iny
     85  ff10
     86  ff10		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  ff12		       f0 0c		      beq	.over_audio_mute_note
     88  ff14
     89  ff14				   .over_audio_play_note
     90  ff14
     91  ff14							; Save current position
     92  ff14		       84 90		      sty	AudioStep
     93  ff16
     94  ff16							; Melody Line
     95  ff16		       b9 83 ff 	      lda	OverAudio0,y
     96  ff19		       85 17		      sta	AUDF0
     97  ff1b		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  ff1d		       85 19		      sta	AUDV0
     99  ff1f
    100  ff1f		       60		      rts
    101  ff20
    102  ff20				   .over_audio_mute_note
    103  ff20		       a9 00		      lda	#0
    104  ff22		       85 17		      sta	AUDF0
    105  ff24		       85 19		      sta	AUDV0
    106  ff26
    107  ff26				   .over_audio_return
    108  ff26		       60		      rts
    109  ff27
    110  ff27				   OverState
    111  ff27		       a5 8d		      lda	Frame
    112  ff29		       c9 dc		      cmp	#OVER_FRAMES
    113  ff2b		       d0 03		      bne	.over_state_return
    114  ff2d
    115  ff2d		       20 5f f2 	      jsr	TitleInit
    116  ff30
    117  ff30				   .over_state_return
    118  ff30		       60		      rts
    119  ff31
    120  ff31				   OverKernel
    121  ff31
    122  ff31							; Turn on display
    123  ff31		       a9 00		      lda	#0
    124  ff33		       85 01		      sta	VBLANK
    125  ff35
    126  ff35				   .over_kernel_score
    127  ff35
    128  ff35							; Draw Score on top first (no update)
    129  ff35		       20 4e f5 	      jsr	ScoreDraw
    130  ff38
    131  ff38				   .over_kernel_init
    132  ff38							; Playfield Control
    133  ff38		       a5 80		      lda	CtrlPf
    134  ff3a		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  ff3c		       09 01		      ora	#%00000001	; Set mirroring
    136  ff3e		       85 80		      sta	CtrlPf
    137  ff40		       85 0a		      sta	CTRLPF
    138  ff42
    139  ff42				   .over_kernel_top_padding
    140  ff42							; Top Padding
    141  ff42		       20 61 ff 	      jsr	OverPadding
    142  ff45
    143  ff45				   .over_kernel_image
    144  ff45		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  ff47
    146  ff47				   .over_kernel_image_next
    147  ff47		       bd 7a ff 	      lda	OverImagePF2,x
    148  ff4a		       85 0f		      sta	PF2
    149  ff4c		       bd 71 ff 	      lda	OverImagePF1,x
    150  ff4f		       85 0e		      sta	PF1
    151  ff51							;    lda OverImagePF0,x
    152  ff51							;    sta PF0
    153  ff51
    154  ff51		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  ff53				   .over_kernel_image_loop
    156  ff53		       85 02		      sta	WSYNC
    157  ff55		       88		      dey
    158  ff56		       d0 fb		      bne	.over_kernel_image_loop
    159  ff58
    160  ff58		       ca		      dex
    161  ff59		       10 ec		      bpl	.over_kernel_image_next
    162  ff5b
    163  ff5b				   .over_kernel_bottom_padding
    164  ff5b							; Bottom Padding
    165  ff5b		       20 61 ff 	      jsr	OverPadding
    166  ff5e
    167  ff5e				   .over_kernel_return
    168  ff5e		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  ff60		       60		      rts
    170  ff61
    171  ff61				   OverPadding
    172  ff61		       a9 00		      lda	#0
    173  ff63		       85 0d		      sta	PF0
    174  ff65		       85 0e		      sta	PF1
    175  ff67		       85 0f		      sta	PF2
    176  ff69
    177  ff69		       a2 35		      ldx	#OVER_IMAGE_PADDING
    178  ff6b				   .over_padding_loop
    179  ff6b		       85 02		      sta	WSYNC
    180  ff6d		       ca		      dex
    181  ff6e		       d0 fb		      bne	.over_padding_loop
    182  ff70
    183  ff70		       60		      rts
    184  ff71
    185  ff71				   OverAssets
    186  ff71
    187  ff71							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ff71					      include	"over_image.asm"
      1  ff71							;OverImagePF0:
      2  ff71							;    .BYTE %00000000
      3  ff71							;    .BYTE %00000000
      4  ff71							;    .BYTE %00000000
      5  ff71							;    .BYTE %00000000
      6  ff71							;    .BYTE %00000000
      7  ff71							;    .BYTE %00000000
      8  ff71							;    .BYTE %00000000
      9  ff71							;    .BYTE %00000000
     10  ff71							;    .BYTE %00000000
     11  ff71
     12  ff71				   OverImagePF1
     13  ff71		       0c		      .BYTE.b	%00001100
     14  ff72		       13		      .BYTE.b	%00010011
     15  ff73		       20		      .BYTE.b	%00100000
     16  ff74		       23		      .BYTE.b	%00100011
     17  ff75		       24		      .BYTE.b	%00100100
     18  ff76		       24		      .BYTE.b	%00100100
     19  ff77		       12		      .BYTE.b	%00010010
     20  ff78		       10		      .BYTE.b	%00010000
     21  ff79		       08		      .BYTE.b	%00001000
     22  ff7a
     23  ff7a				   OverImagePF2
     24  ff7a		       e0		      .BYTE.b	%11100000
     25  ff7b		       18		      .BYTE.b	%00011000
     26  ff7c		       05		      .BYTE.b	%00000101
     27  ff7d		       52		      .BYTE.b	%01010010
     28  ff7e		       23		      .BYTE.b	%00100011
     29  ff7f		       52		      .BYTE.b	%01010010
     30  ff80		       04		      .BYTE.b	%00000100
     31  ff81		       18		      .BYTE.b	%00011000
     32  ff82		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  ff83
    190  ff83				   OverAudio0
    191  ff83
    192  ff83		       0c		      .BYTE.b	#12	; D#2
    193  ff84		       0d		      .BYTE.b	#13	; D2
    194  ff85		       11		      .BYTE.b	#17	; A1
    195  ff86		       16		      .BYTE.b	#22	; F1
    196  ff87		       1a		      .BYTE.b	#26	; D1
    197  ff88		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    306  ff89
    307  ff89							;================
    308  ff89							; End of cart
    309  ff89							;================
    310  ff89
    311  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    312  fffa
    313  fffa				   InterruptVectors
    314  fffa
    315  fffa		       21 f0		      .word.w	InitSystem	; NMI
    316  fffc		       21 f0		      .word.w	InitSystem	; RESET
    317  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    318  10000
    319  10000					       END
