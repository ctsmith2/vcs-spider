------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 11th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00cc ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00 00    Temp       ds	3
     61 U0086		       00	   Rand8      ds	1
     62 U0087		       00	   Rand16     ds	1
     63 U0088
     64 U0088		       00 00	   VBlankPtr  ds	2
     65 U008a		       00 00	   KernelPtr  ds	2
     66 U008c		       00 00	   OverScanPtr ds	2
     67 U008e
     68 U008e		       00	   Frame      ds	1
     69 U008f		       00 00	   FrameTimer ds	2
     70 U0091		       00	   InputState ds	1
     71 U0092
     72 U0092		       00	   AudioStep  ds	1
     73 U0093
     74 U0093		       00	   SampleStep ds	1
     75 U0094
     76 U0094							; Score
     77 U0094
     78 U0094		       00 00	   ScoreValue ds	2
     79 U0096		       00 00	   ScoreDigitOnes ds	2
     80 U0098		       00 00	   ScoreDigitTens ds	2
     81 U009a		       00 00 00    ScoreDigitGfx ds	3
     82 U009d		       00 00	   ScoreBarGfx ds	2
     83 U009f
     84 U009f							; Level
     85 U009f		       00	   LevelCurrent ds	1
     86 U00a0
     87 U00a0							; Web
     88 U00a0
     89 U00a0		       00	   WebIndex   ds	1
     90 U00a1		       00 00	   WebColor   ds	2
     91 U00a3
     92 U00a3							; Spider
     93 U00a3
     94 U00a3		       00 00	   SpiderPtr  ds	2
     95 U00a5		       00 00	   SpiderPos  ds	2
     96 U00a7		       00	   SpiderCtrl ds	1
     97 U00a8		       00	   SpiderColor ds	1
     98 U00a9
     99 U00a9		       00	   SpiderIndex ds	1
    100 U00aa		       00	   SpiderDrawPos ds	1
    101 U00ab		       00	   SpiderLine ds	1
    102 U00ac
    103 U00ac		       00 00	   SpiderPtr2 ds	2
    104 U00ae
    105 U00ae							; Line
    106 U00ae
    107 U00ae		       00	   LineEnabled ds	1
    108 U00af		       00 00	   LinePos    ds	2
    109 U00b1		       00 00	   LineVelocity ds	2
    110 U00b3		       00 00	   LineDrawPos ds	2
    111 U00b5
    112 U00b5							; Bug
    113 U00b5
    114 U00b5		       00	   BugSpeed   ds	1
    115 U00b6
    116 U00b6		       00 00	   BugStunned ds	2
    117 U00b8		       00 00	   BugPosX    ds	2
    118 U00ba		       00 00	   BugPosY    ds	2
    119 U00bc
    120 U00bc		       00 00	   BugDrawPosBottom ds	2
    121 U00be		       00 00	   BugDrawPosTop ds	2
    122 U00c0
    123 U00c0							; Swatter
    124 U00c0
    125 U00c0		       00 00	   SwatterPos ds	2
    126 U00c2		       00	   SwatterState ds	1
    127 U00c3		       00	   SwatterColor ds	1
    128 U00c4
    129 U00c4		       00	   SwatterWaitTime ds	1
    130 U00c5		       00	   SwatterHoldTime ds	1
    131 U00c6		       00	   SwatterHitDamage ds	1
    132 U00c7
    133 U00c7		       00	   SwatterIndex ds	1
    134 U00c8		       00	   SwatterDrawPos ds	1
    135 U00c9		       00	   SwatterLine ds	1
    136 U00ca
    137 U00ca		       00	   SwatterSampleCount ds	1
    138 U00cb		       00	   SwatterSampleF ds	1
    139 U00cc
    140  10000 ????				       SEG
    141  f000					      org	$F000	; Start of cart area
    142  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 86		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 87		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 86		      sta	Rand8
     49  f01e		       45 87		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 83		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 84		      sta	Temp+1
     70  f029		       85 85		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 83		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 84		      lda	Temp+1	; And add into result
     77  f031		       65 84		      adc	Temp+1
     78  f033		       85 84		      sta	Temp+1
     79  f035
     80  f035		       a5 85		      lda	Temp+2	; Propagating any carry
     81  f037		       65 85		      adc	Temp+2
     82  f039		       85 85		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 84		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 85		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    144  f044
    145  f044							; Assets
    146  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    150  f0bc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0bc					      include	"objects/score_digits.asm"
      1  f0bc				   ScoreDigits
      2  f0bc
      3  f0bc		       77		      .BYTE.b	%01110111
      4  f0bd		       55		      .BYTE.b	%01010101
      5  f0be		       55		      .BYTE.b	%01010101
      6  f0bf		       55		      .BYTE.b	%01010101
      7  f0c0		       77		      .BYTE.b	%01110111
      8  f0c1
      9  f0c1		       11		      .BYTE.b	%00010001
     10  f0c2		       11		      .BYTE.b	%00010001
     11  f0c3		       11		      .BYTE.b	%00010001
     12  f0c4		       11		      .BYTE.b	%00010001
     13  f0c5		       11		      .BYTE.b	%00010001
     14  f0c6
     15  f0c6		       77		      .BYTE.b	%01110111
     16  f0c7		       11		      .BYTE.b	%00010001
     17  f0c8		       77		      .BYTE.b	%01110111
     18  f0c9		       44		      .BYTE.b	%01000100
     19  f0ca		       77		      .BYTE.b	%01110111
     20  f0cb
     21  f0cb		       77		      .BYTE.b	%01110111
     22  f0cc		       11		      .BYTE.b	%00010001
     23  f0cd		       33		      .BYTE.b	%00110011
     24  f0ce		       11		      .BYTE.b	%00010001
     25  f0cf		       77		      .BYTE.b	%01110111
     26  f0d0
     27  f0d0		       55		      .BYTE.b	%01010101
     28  f0d1		       55		      .BYTE.b	%01010101
     29  f0d2		       77		      .BYTE.b	%01110111
     30  f0d3		       11		      .BYTE.b	%00010001
     31  f0d4		       11		      .BYTE.b	%00010001
     32  f0d5
     33  f0d5		       77		      .BYTE.b	%01110111
     34  f0d6		       44		      .BYTE.b	%01000100
     35  f0d7		       77		      .BYTE.b	%01110111
     36  f0d8		       11		      .BYTE.b	%00010001
     37  f0d9		       77		      .BYTE.b	%01110111
     38  f0da
     39  f0da		       77		      .BYTE.b	%01110111
     40  f0db		       44		      .BYTE.b	%01000100
     41  f0dc		       77		      .BYTE.b	%01110111
     42  f0dd		       55		      .BYTE.b	%01010101
     43  f0de		       77		      .BYTE.b	%01110111
     44  f0df
     45  f0df		       77		      .BYTE.b	%01110111
     46  f0e0		       11		      .BYTE.b	%00010001
     47  f0e1		       22		      .BYTE.b	%00100010
     48  f0e2		       22		      .BYTE.b	%00100010
     49  f0e3		       22		      .BYTE.b	%00100010
     50  f0e4
     51  f0e4		       77		      .BYTE.b	%01110111
     52  f0e5		       55		      .BYTE.b	%01010101
     53  f0e6		       77		      .BYTE.b	%01110111
     54  f0e7		       55		      .BYTE.b	%01010101
     55  f0e8		       77		      .BYTE.b	%01110111
     56  f0e9
     57  f0e9		       77		      .BYTE.b	%01110111
     58  f0ea		       55		      .BYTE.b	%01010101
     59  f0eb		       77		      .BYTE.b	%01110111
     60  f0ec		       11		      .BYTE.b	%00010001
     61  f0ed		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f0ee					      include	"objects/score_digits_flip.asm"
      1  f0ee				   ScoreDigitsFlip
      2  f0ee
      3  f0ee		       ee		      .BYTE.b	%11101110
      4  f0ef		       aa		      .BYTE.b	%10101010
      5  f0f0		       aa		      .BYTE.b	%10101010
      6  f0f1		       aa		      .BYTE.b	%10101010
      7  f0f2		       ee		      .BYTE.b	%11101110
      8  f0f3
      9  f0f3		       88		      .BYTE.b	%10001000
     10  f0f4		       88		      .BYTE.b	%10001000
     11  f0f5		       88		      .BYTE.b	%10001000
     12  f0f6		       88		      .BYTE.b	%10001000
     13  f0f7		       88		      .BYTE.b	%10001000
     14  f0f8
     15  f0f8		       ee		      .BYTE.b	%11101110
     16  f0f9		       88		      .BYTE.b	%10001000
     17  f0fa		       ee		      .BYTE.b	%11101110
     18  f0fb		       22		      .BYTE.b	%00100010
     19  f0fc		       ee		      .BYTE.b	%11101110
     20  f0fd
     21  f0fd		       ee		      .BYTE.b	%11101110
     22  f0fe		       88		      .BYTE.b	%10001000
     23  f0ff		       cc		      .BYTE.b	%11001100
     24  f100		       88		      .BYTE.b	%10001000
     25  f101		       ee		      .BYTE.b	%11101110
     26  f102
     27  f102		       aa		      .BYTE.b	%10101010
     28  f103		       aa		      .BYTE.b	%10101010
     29  f104		       ee		      .BYTE.b	%11101110
     30  f105		       88		      .BYTE.b	%10001000
     31  f106		       88		      .BYTE.b	%10001000
     32  f107
     33  f107		       ee		      .BYTE.b	%11101110
     34  f108		       22		      .BYTE.b	%00100010
     35  f109		       ee		      .BYTE.b	%11101110
     36  f10a		       88		      .BYTE.b	%10001000
     37  f10b		       ee		      .BYTE.b	%11101110
     38  f10c
     39  f10c		       ee		      .BYTE.b	%11101110
     40  f10d		       22		      .BYTE.b	%00100010
     41  f10e		       ee		      .BYTE.b	%11101110
     42  f10f		       aa		      .BYTE.b	%10101010
     43  f110		       ee		      .BYTE.b	%11101110
     44  f111
     45  f111		       ee		      .BYTE.b	%11101110
     46  f112		       88		      .BYTE.b	%10001000
     47  f113		       44		      .BYTE.b	%01000100
     48  f114		       44		      .BYTE.b	%01000100
     49  f115		       44		      .BYTE.b	%01000100
     50  f116
     51  f116		       ee		      .BYTE.b	%11101110
     52  f117		       aa		      .BYTE.b	%10101010
     53  f118		       ee		      .BYTE.b	%11101110
     54  f119		       aa		      .BYTE.b	%10101010
     55  f11a		       ee		      .BYTE.b	%11101110
     56  f11b
     57  f11b		       ee		      .BYTE.b	%11101110
     58  f11c		       aa		      .BYTE.b	%10101010
     59  f11d		       ee		      .BYTE.b	%11101110
     60  f11e		       88		      .BYTE.b	%10001000
     61  f11f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f120					      include	"objects/score_label.asm"
      1  f120				   ScoreLabel
      2  f120
      3  f120		       20		      .BYTE.b	%00100000
      4  f121		       50		      .BYTE.b	%01010000
      5  f122		       ee		      .BYTE.b	%11101110
      6  f123		       00		      .BYTE.b	%00000000
      7  f124		       57		      .BYTE.b	%01010111
      8  f125		       00		      .BYTE.b	%00000000
      9  f126
     10  f126		       20		      .BYTE.b	%00100000
     11  f127		       50		      .BYTE.b	%01010000
     12  f128		       4a		      .BYTE.b	%01001010
     13  f129		       00		      .BYTE.b	%00000000
     14  f12a		       55		      .BYTE.b	%01010101
     15  f12b		       00		      .BYTE.b	%00000000
     16  f12c
     17  f12c		       20		      .BYTE.b	%00100000
     18  f12d		       50		      .BYTE.b	%01010000
     19  f12e		       4e		      .BYTE.b	%01001110
     20  f12f		       00		      .BYTE.b	%00000000
     21  f130		       77		      .BYTE.b	%01110111
     22  f131		       00		      .BYTE.b	%00000000
     23  f132
     24  f132		       20		      .BYTE.b	%00100000
     25  f133		       50		      .BYTE.b	%01010000
     26  f134		       42		      .BYTE.b	%01000010
     27  f135		       00		      .BYTE.b	%00000000
     28  f136		       54		      .BYTE.b	%01010100
     29  f137		       00		      .BYTE.b	%00000000
     30  f138
     31  f138		       e0		      .BYTE.b	%11100000
     32  f139		       20		      .BYTE.b	%00100000
     33  f13a		       42		      .BYTE.b	%01000010
     34  f13b		       00		      .BYTE.b	%00000000
     35  f13c		       54		      .BYTE.b	%01010100
     36  f13d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    154  f13e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f13e					      include	"objects/web_image.asm"
      1  f13e				   WebImagePF0
      2  f13e		       00		      .BYTE.b	%00000000
      3  f13f		       00		      .BYTE.b	%00000000
      4  f140		       00		      .BYTE.b	%00000000
      5  f141		       00		      .BYTE.b	%00000000
      6  f142		       00		      .BYTE.b	%00000000
      7  f143		       00		      .BYTE.b	%00000000
      8  f144		       00		      .BYTE.b	%00000000
      9  f145		       00		      .BYTE.b	%00000000
     10  f146		       30		      .BYTE.b	%00110000
     11  f147		       e0		      .BYTE.b	%11100000
     12  f148		       20		      .BYTE.b	%00100000
     13  f149		       40		      .BYTE.b	%01000000
     14  f14a		       40		      .BYTE.b	%01000000
     15  f14b		       80		      .BYTE.b	%10000000
     16  f14c		       80		      .BYTE.b	%10000000
     17  f14d		       40		      .BYTE.b	%01000000
     18  f14e		       40		      .BYTE.b	%01000000
     19  f14f		       20		      .BYTE.b	%00100000
     20  f150		       e0		      .BYTE.b	%11100000
     21  f151		       30		      .BYTE.b	%00110000
     22  f152		       00		      .BYTE.b	%00000000
     23  f153		       00		      .BYTE.b	%00000000
     24  f154		       00		      .BYTE.b	%00000000
     25  f155		       00		      .BYTE.b	%00000000
     26  f156		       00		      .BYTE.b	%00000000
     27  f157		       00		      .BYTE.b	%00000000
     28  f158		       00		      .BYTE.b	%00000000
     29  f159		       00		      .BYTE.b	%00000000
     30  f15a
     31  f15a				   WebImagePF1
     32  f15a		       02		      .BYTE.b	%00000010
     33  f15b		       01		      .BYTE.b	%00000001
     34  f15c		       00		      .BYTE.b	%00000000
     35  f15d		       00		      .BYTE.b	%00000000
     36  f15e		       01		      .BYTE.b	%00000001
     37  f15f		       01		      .BYTE.b	%00000001
     38  f160		       02		      .BYTE.b	%00000010
     39  f161		       0c		      .BYTE.b	%00001100
     40  f162		       30		      .BYTE.b	%00110000
     41  f163		       c0		      .BYTE.b	%11000000
     42  f164		       38		      .BYTE.b	%00111000
     43  f165		       07		      .BYTE.b	%00000111
     44  f166		       00		      .BYTE.b	%00000000
     45  f167		       00		      .BYTE.b	%00000000
     46  f168		       00		      .BYTE.b	%00000000
     47  f169		       00		      .BYTE.b	%00000000
     48  f16a		       07		      .BYTE.b	%00000111
     49  f16b		       38		      .BYTE.b	%00111000
     50  f16c		       c0		      .BYTE.b	%11000000
     51  f16d		       30		      .BYTE.b	%00110000
     52  f16e		       0c		      .BYTE.b	%00001100
     53  f16f		       02		      .BYTE.b	%00000010
     54  f170		       01		      .BYTE.b	%00000001
     55  f171		       01		      .BYTE.b	%00000001
     56  f172		       00		      .BYTE.b	%00000000
     57  f173		       00		      .BYTE.b	%00000000
     58  f174		       01		      .BYTE.b	%00000001
     59  f175		       02		      .BYTE.b	%00000010
     60  f176
     61  f176				   WebImagePF2
     62  f176		       08		      .BYTE.b	%00001000
     63  f177		       04		      .BYTE.b	%00000100
     64  f178		       03		      .BYTE.b	%00000011
     65  f179		       3f		      .BYTE.b	%00111111
     66  f17a		       c2		      .BYTE.b	%11000010
     67  f17b		       04		      .BYTE.b	%00000100
     68  f17c		       08		      .BYTE.b	%00001000
     69  f17d		       08		      .BYTE.b	%00001000
     70  f17e		       10		      .BYTE.b	%00010000
     71  f17f		       20		      .BYTE.b	%00100000
     72  f180		       20		      .BYTE.b	%00100000
     73  f181		       41		      .BYTE.b	%01000001
     74  f182		       8e		      .BYTE.b	%10001110
     75  f183		       f0		      .BYTE.b	%11110000
     76  f184		       f0		      .BYTE.b	%11110000
     77  f185		       8e		      .BYTE.b	%10001110
     78  f186		       41		      .BYTE.b	%01000001
     79  f187		       20		      .BYTE.b	%00100000
     80  f188		       20		      .BYTE.b	%00100000
     81  f189		       10		      .BYTE.b	%00010000
     82  f18a		       08		      .BYTE.b	%00001000
     83  f18b		       08		      .BYTE.b	%00001000
     84  f18c		       04		      .BYTE.b	%00000100
     85  f18d		       c2		      .BYTE.b	%11000010
     86  f18e		       3f		      .BYTE.b	%00111111
     87  f18f		       03		      .BYTE.b	%00000011
     88  f190		       04		      .BYTE.b	%00000100
     89  f191		       08		      .BYTE.b	%00001000
------- FILE kernel.asm
    156  f192
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f192					      include	"objects/spider_sprite.asm"
      1  f192				   SpiderSprite
      2  f192
      3  f192		       99		      .BYTE.b	%10011001
      4  f193		       bd		      .BYTE.b	%10111101
      5  f194		       db		      .BYTE.b	%11011011
      6  f195		       bd		      .BYTE.b	%10111101
      7  f196		       99		      .BYTE.b	%10011001
      8  f197		       99		      .BYTE.b	%10011001
      9  f198		       7e		      .BYTE.b	%01111110
     10  f199		       3c		      .BYTE.b	%00111100
     11  f19a		       3c		      .BYTE.b	%00111100
     12  f19b		       18		      .BYTE.b	%00011000
     13  f19c		       3c		      .BYTE.b	%00111100
     14  f19d		       7e		      .BYTE.b	%01111110
     15  f19e		       bd		      .BYTE.b	%10111101
     16  f19f		       bd		      .BYTE.b	%10111101
     17  f1a0		       bd		      .BYTE.b	%10111101
     18  f1a1		       99		      .BYTE.b	%10011001
     19  f1a2
     20  f1a2		       c7		      .BYTE.b	%11000111
     21  f1a3		       c7		      .BYTE.b	%11000111
     22  f1a4		       28		      .BYTE.b	%00101000
     23  f1a5		       28		      .BYTE.b	%00101000
     24  f1a6		       3a		      .BYTE.b	%00111010
     25  f1a7		       7a		      .BYTE.b	%01111010
     26  f1a8		       fd		      .BYTE.b	%11111101
     27  f1a9		       ff		      .BYTE.b	%11111111
     28  f1aa		       ff		      .BYTE.b	%11111111
     29  f1ab		       fd		      .BYTE.b	%11111101
     30  f1ac		       7a		      .BYTE.b	%01111010
     31  f1ad		       3a		      .BYTE.b	%00111010
     32  f1ae		       28		      .BYTE.b	%00101000
     33  f1af		       28		      .BYTE.b	%00101000
     34  f1b0		       c7		      .BYTE.b	%11000111
     35  f1b1		       c7		      .BYTE.b	%11000111
     36  f1b2
     37  f1b2		       99		      .BYTE.b	%10011001
     38  f1b3		       bd		      .BYTE.b	%10111101
     39  f1b4		       bd		      .BYTE.b	%10111101
     40  f1b5		       bd		      .BYTE.b	%10111101
     41  f1b6		       7e		      .BYTE.b	%01111110
     42  f1b7		       3c		      .BYTE.b	%00111100
     43  f1b8		       18		      .BYTE.b	%00011000
     44  f1b9		       3c		      .BYTE.b	%00111100
     45  f1ba		       3c		      .BYTE.b	%00111100
     46  f1bb		       7e		      .BYTE.b	%01111110
     47  f1bc		       99		      .BYTE.b	%10011001
     48  f1bd		       99		      .BYTE.b	%10011001
     49  f1be		       bd		      .BYTE.b	%10111101
     50  f1bf		       db		      .BYTE.b	%11011011
     51  f1c0		       bd		      .BYTE.b	%10111101
     52  f1c1		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    158  f1c2
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1c2					      include	"objects/swatter_sprite.asm"
      1  f1c2				   SwatterSprite
      2  f1c2
      3  f1c2		       3c		      .BYTE.b	%00111100
      4  f1c3		       3c		      .BYTE.b	%00111100
      5  f1c4		       56		      .BYTE.b	%01010110
      6  f1c5		       6a		      .BYTE.b	%01101010
      7  f1c6		       d5		      .BYTE.b	%11010101
      8  f1c7		       ab		      .BYTE.b	%10101011
      9  f1c8		       d5		      .BYTE.b	%11010101
     10  f1c9		       ab		      .BYTE.b	%10101011
     11  f1ca		       d5		      .BYTE.b	%11010101
     12  f1cb		       ab		      .BYTE.b	%10101011
     13  f1cc		       d5		      .BYTE.b	%11010101
     14  f1cd		       ab		      .BYTE.b	%10101011
     15  f1ce		       56		      .BYTE.b	%01010110
     16  f1cf		       6a		      .BYTE.b	%01101010
     17  f1d0		       56		      .BYTE.b	%01010110
     18  f1d1		       6a		      .BYTE.b	%01101010
     19  f1d2		       34		      .BYTE.b	%00110100
     20  f1d3		       2c		      .BYTE.b	%00101100
     21  f1d4		       34		      .BYTE.b	%00110100
     22  f1d5		       18		      .BYTE.b	%00011000
------- FILE kernel.asm
    160  f1d6
------- FILE logo_image.asm LEVEL 2 PASS 2
      0  f1d6					      include	"logo_image.asm"
      1  f1d6				   LogoImage1
      2  f1d6		       03		      .BYTE.b	%00000011
      3  f1d7		       03		      .BYTE.b	%00000011
      4  f1d8		       13		      .BYTE.b	%00010011
      5  f1d9		       33		      .BYTE.b	%00110011
      6  f1da		       63		      .BYTE.b	%01100011
      7  f1db		       c3		      .BYTE.b	%11000011
      8  f1dc		       c3		      .BYTE.b	%11000011
      9  f1dd		       63		      .BYTE.b	%01100011
     10  f1de		       33		      .BYTE.b	%00110011
     11  f1df		       13		      .BYTE.b	%00010011
     12  f1e0		       03		      .BYTE.b	%00000011
     13  f1e1		       03		      .BYTE.b	%00000011
     14  f1e2
     15  f1e2				   LogoImage2
     16  f1e2		       83		      .BYTE.b	%10000011
     17  f1e3		       c7		      .BYTE.b	%11000111
     18  f1e4		       ef		      .BYTE.b	%11101111
     19  f1e5		       6e		      .BYTE.b	%01101110
     20  f1e6		       6c		      .BYTE.b	%01101100
     21  f1e7		       6c		      .BYTE.b	%01101100
     22  f1e8		       6c		      .BYTE.b	%01101100
     23  f1e9		       6c		      .BYTE.b	%01101100
     24  f1ea		       6e		      .BYTE.b	%01101110
     25  f1eb		       ef		      .BYTE.b	%11101111
     26  f1ec		       c7		      .BYTE.b	%11000111
     27  f1ed		       83		      .BYTE.b	%10000011
     28  f1ee
     29  f1ee				   LogoImage3
     30  f1ee		       8f		      .BYTE.b	%10001111
     31  f1ef		       cf		      .BYTE.b	%11001111
     32  f1f0		       ef		      .BYTE.b	%11101111
     33  f1f1		       6d		      .BYTE.b	%01101101
     34  f1f2		       2c		      .BYTE.b	%00101100
     35  f1f3		       0c		      .BYTE.b	%00001100
     36  f1f4		       0c		      .BYTE.b	%00001100
     37  f1f5		       4c		      .BYTE.b	%01001100
     38  f1f6		       6d		      .BYTE.b	%01101101
     39  f1f7		       ef		      .BYTE.b	%11101111
     40  f1f8		       cf		      .BYTE.b	%11001111
     41  f1f9		       8f		      .BYTE.b	%10001111
     42  f1fa
     43  f1fa				   LogoImage4
     44  f1fa		       00		      .BYTE.b	%00000000
     45  f1fb		       01		      .BYTE.b	%00000001
     46  f1fc		       13		      .BYTE.b	%00010011
     47  f1fd		       33		      .BYTE.b	%00110011
     48  f1fe		       63		      .BYTE.b	%01100011
     49  f1ff		       c3		      .BYTE.b	%11000011
     50  f200		       c3		      .BYTE.b	%11000011
     51  f201		       63		      .BYTE.b	%01100011
     52  f202		       33		      .BYTE.b	%00110011
     53  f203		       13		      .BYTE.b	%00010011
     54  f204		       01		      .BYTE.b	%00000001
     55  f205		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    162  f206
    163  f206				   InitSystem
    164  f206
    165  f206				   .init_clean
    166  f206							; Resets RAM, TIA registers, and CPU registers
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
    168  f211
    169  f211				   .init_tia
    170  f211							; Define default TIA register values
    171  f211
    172  f211							; Initialize copies
    173  f211							;    lda #0
    174  f211							;    sta CtrlPf
    175  f211							;    sta NuSiz0
    176  f211							;    sta NuSiz1
    177  f211
    178  f211							; Set background color
    179  f211							;    lda #$00	      ; Black
    180  f211							;    sta COLUBK
    181  f211
    182  f211							; Set the playfield and player color
    183  f211							;    lda #$0E	      ; White
    184  f211							;    sta COLUPF
    185  f211							;    sta COLUP0
    186  f211							;    sta COLUP1
    187  f211
    188  f211							; Playfield Control
    189  f211							;    lda #%00000001  ; 1 for mirroring
    190  f211							;    sta CtrlPf
    191  f211							;    sta CTRLPF
    192  f211
    193  f211							; Disable Game Elements
    194  f211							;    lda #$00
    195  f211							;    sta ENABL       ; Turn off ball
    196  f211							;    sta ENAM0       ; Turn off player 1 missile
    197  f211							;    sta ENAM1       ; Turn off player 2 missile
    198  f211							;    sta GRP0	      ; Turn off player 1
    199  f211							;    sta GRP1	      ; Turn off player 2
    200  f211
    201  f211							; Empty playfield
    202  f211							;    lda #%00000000
    203  f211							;    sta PF0
    204  f211							;    sta PF1
    205  f211							;    sta PF2
    206  f211
    207  f211				   .init_seed
    208  f211							; Seed the random number generator
    209  f211		       ad 84 02 	      lda	INTIM	; Unknown value
    210  f214		       85 86		      sta	Rand8	; Use as seed
    211  f216		       49 ff		      eor	#$FF	; Flip bits
    212  f218		       85 87		      sta	Rand16	; Just in case INTIM was 0
    213  f21a
    214  f21a				   .init_game
    215  f21a
    216  f21a		       20 82 f2 	      jsr	LogoInit
    217  f21d
    218  f21d							;=======================================
    219  f21d							; Game Kernel
    220  f21d							;=======================================
    221  f21d
    222  f21d				   Main
    223  f21d
    224  f21d		       20 2c f2 	      jsr	VerticalSync
    225  f220		       20 45 f2 	      jsr	VerticalBlank
    226  f223		       20 58 f2 	      jsr	Kernel
    227  f226		       20 5f f2 	      jsr	OverScan
    228  f229		       4c 1d f2 	      jmp	Main
    229  f22c
    230  f22c				   VerticalSync
    231  f22c
    232  f22c		       a9 00		      lda	#0
    233  f22e		       85 01		      sta	VBLANK
    234  f230
    235  f230							; Turn on Vertical Sync signal and setup timer
    236  f230		       a9 02		      lda	#2
    237  f232		       85 00		      sta	VSYNC
    238  f234
    239  f234							; Increment frame count and reduce frame counter
    240  f234		       e6 8e		      inc	Frame
    241  f236		       c6 8f		      dec	FrameTimer
    242  f238		       c6 90		      dec	FrameTimer+1
    243  f23a
    244  f23a							; VSYNCH signal scanlines
    245  f23a					      REPEAT	#KERNEL_VSYNC
    246  f23a		       85 02		      sta	WSYNC
    245  f23a					      REPEND
    246  f23c		       85 02		      sta	WSYNC
    245  f23c					      REPEND
    246  f23e		       85 02		      sta	WSYNC
    247  f240					      REPEND
    248  f240
    249  f240							; Turn off Vertical Sync signal
    250  f240		       a9 00		      lda	#0
    251  f242		       85 00		      sta	VSYNC
    252  f244
    253  f244				   .vsync_return
    254  f244		       60		      rts
    255  f245
    256  f245				   VerticalBlank
    257  f245							; Setup Timer
    258  f245		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    259  f247		       8d 96 02 	      sta	TIM64T
    260  f24a
    261  f24a				   .vblank_logic
    262  f24a							; Perform Game Logic
    263  f24a		       20 55 f2 	      jsr	.vblank_logic_call_ptr
    264  f24d
    265  f24d				   .vblank_loop
    266  f24d							; WSYNC until Timer is complete
    267  f24d		       85 02		      sta	WSYNC
    268  f24f		       ad 84 02 	      lda	INTIM
    269  f252		       d0 f9		      bne	.vblank_loop
    270  f254
    271  f254				   .vblank_return
    272  f254		       60		      rts
    273  f255
    274  f255				   .vblank_logic_call_ptr
    275  f255		       6c 88 00 	      jmp	(VBlankPtr)
    276  f258
    277  f258				   Kernel
    278  f258
    279  f258							; Perform Selected Kernel
    280  f258		       20 5c f2 	      jsr	.kernel_call_ptr
    281  f25b		       60		      rts
    282  f25c
    283  f25c				   .kernel_call_ptr
    284  f25c		       6c 8a 00 	      jmp	(KernelPtr)
    285  f25f
    286  f25f				   OverScan
    287  f25f
    288  f25f							; End of screen, enter blanking
    289  f25f		       a9 42		      lda	#%01000010
    290  f261		       85 01		      sta	VBLANK
    291  f263
    292  f263							; Setup Timer
    293  f263		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    294  f265		       8d 96 02 	      sta	TIM64T
    295  f268
    296  f268							;.overscan_reset:
    297  f268							; Check for reset switch
    298  f268		       ad 82 02 	      lda	SWCHB
    299  f26b		       4a		      lsr		; Push D0 to carry (C)
    300  f26c		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    301  f26e
    302  f26e							; Perform reset
    303  f26e		       20 82 f2 	      jsr	LogoInit	; No need for logic
    304  f271		       4c 77 f2 	      jmp	.overscan_loop
    305  f274
    306  f274				   .overscan_logic
    307  f274							; Perform OverScan Logic
    308  f274		       20 7f f2 	      jsr	.overscan_logic_call_ptr
    309  f277
    310  f277				   .overscan_loop
    311  f277							; WSYNC until Timer is complete
    312  f277		       85 02		      sta	WSYNC
    313  f279		       ad 84 02 	      lda	INTIM
    314  f27c		       d0 f9		      bne	.overscan_loop
    315  f27e
    316  f27e				   .overscan_return
    317  f27e		       60		      rts
    318  f27f
    319  f27f				   .overscan_logic_call_ptr
    320  f27f		       6c 8c 00 	      jmp	(OverScanPtr)
    321  f282
    322  f282							;================
    323  f282							; State Code
    324  f282							;================
    325  f282
------- FILE logo.asm LEVEL 2 PASS 2
      0  f282					      include	"logo.asm"
      1  f282							;================
      2  f282							; Constants
      3  f282							;================
      4  f282
      5  f282		       00 8c	   LOGO_FRAMES =	140
      6  f282
      7  f282		       00 00	   LOGO_BG_COLOR =	#$00
      8  f282		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f282		       00 00	   LOGO_BG_BW_COLOR =	#$00
     10  f282		       00 0e	   LOGO_FG_BW_COLOR =	#$0E
     11  f282
     12  f282		       00 0c	   LOGO_IMAGE_SIZE =	12
     13  f282		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     14  f282		       00 3c	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     15  f282		       00 42	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     16  f282		       00 38	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-10	; The extra 10 is for processing overflow
     17  f282		       00 06	   LOGO_IMAGE_ANIM_SPEED =	#6
     18  f282
     19  f282				   LogoInit
     20  f282
     21  f282							; Setup logic and kernel
      0  f282					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f282				   .POINTER   SET	VBlankPtr
      2  f282				   .ADDRESS   SET	LogoVerticalBlank
      3  f282
      4  f282		       a9 ad		      LDA	#<.ADDRESS
      5  f284		       85 88		      STA	.POINTER
      6  f286		       a9 f2		      LDA	#>.ADDRESS
      7  f288		       85 89		      STA	.POINTER+1
      8  f28a
      0  f28a					      SET_POINTER	KernelPtr, LogoKernel
      1  f28a				   .POINTER   SET	KernelPtr
      2  f28a				   .ADDRESS   SET	LogoKernel
      3  f28a
      4  f28a		       a9 db		      LDA	#<.ADDRESS
      5  f28c		       85 8a		      STA	.POINTER
      6  f28e		       a9 f2		      LDA	#>.ADDRESS
      7  f290		       85 8b		      STA	.POINTER+1
      8  f292
      0  f292					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f292				   .POINTER   SET	OverScanPtr
      2  f292				   .ADDRESS   SET	LogoOverScan
      3  f292
      4  f292		       a9 b1		      LDA	#<.ADDRESS
      5  f294		       85 8c		      STA	.POINTER
      6  f296		       a9 f2		      LDA	#>.ADDRESS
      7  f298		       85 8d		      STA	.POINTER+1
      8  f29a
     25  f29a
     26  f29a							; Clean audio
     27  f29a		       a9 00		      lda	#0
     28  f29c		       85 19		      sta	AUDV0
     29  f29e		       85 1a		      sta	AUDV1
     30  f2a0
     31  f2a0							; Set initial button state
     32  f2a0							;    lda #0
     33  f2a0		       85 91		      sta	InputState
     34  f2a2
     35  f2a2							; Setup frame counters
     36  f2a2							;    lda #0
     37  f2a2		       85 8e		      sta	Frame
     38  f2a4		       a9 8c		      lda	#LOGO_FRAMES
     39  f2a6		       85 8f		      sta	FrameTimer
     40  f2a8
     41  f2a8							; Setup Image Animation
     42  f2a8		       a9 0b		      lda	#LOGO_IMAGE_SIZE-1
     43  f2aa		       85 a0		      sta	WebIndex
     44  f2ac
     45  f2ac		       60		      rts
     46  f2ad
     47  f2ad				   LogoVerticalBlank
     48  f2ad		       20 b5 f2 	      jsr	LogoAnimation
     49  f2b0		       60		      rts
     50  f2b1
     51  f2b1				   LogoOverScan
     52  f2b1		       20 c6 f2 	      jsr	LogoState
     53  f2b4		       60		      rts
     54  f2b5
     55  f2b5				   LogoAnimation
     56  f2b5		       a5 8e		      lda	Frame
     57  f2b7		       c9 06		      cmp	#LOGO_IMAGE_ANIM_SPEED
     58  f2b9		       d0 0a		      bne	.logo_animation_return
     59  f2bb
     60  f2bb		       a9 00		      lda	#0
     61  f2bd		       85 8e		      sta	Frame
     62  f2bf
     63  f2bf		       a6 a0		      ldx	WebIndex
     64  f2c1		       f0 02		      beq	.logo_animation_return
     65  f2c3
     66  f2c3							; Add another visible line
     67  f2c3		       c6 a0		      dec	WebIndex
     68  f2c5
     69  f2c5				   .logo_animation_return
     70  f2c5		       60		      rts
     71  f2c6
     72  f2c6				   LogoState
     73  f2c6		       a5 8f		      lda	FrameTimer
     74  f2c8		       f0 0d		      beq	.logo_state_next
     75  f2ca
     76  f2ca							; Check if Fire Button on controller 1 is released
     77  f2ca		       a5 0c		      lda	INPT4
     78  f2cc		       30 05		      bmi	.logo_state_check
     79  f2ce
     80  f2ce				   .logo_state_on
     81  f2ce		       a9 01		      lda	#1
     82  f2d0		       85 91		      sta	InputState
     83  f2d2		       60		      rts
     84  f2d3
     85  f2d3				   .logo_state_check
     86  f2d3		       a6 91		      ldx	InputState
     87  f2d5		       f0 03		      beq	.logo_state_return
     88  f2d7
     89  f2d7				   .logo_state_next
     90  f2d7							; Button is released or timer runs out, load title screen
     91  f2d7		       20 6a f3 	      jsr	TitleInit
     92  f2da
     93  f2da				   .logo_state_return
     94  f2da		       60		      rts
     95  f2db
     96  f2db				   LogoKernel
     97  f2db
     98  f2db							; Playfield Control
     99  f2db		       a9 01		      lda	#%00000001	; Mirror
    100  f2dd							;sta CtrlPf
    101  f2dd		       85 0a		      sta	CTRLPF
    102  f2df
    103  f2df							; Load Colors
    104  f2df		       ad 82 02 	      lda	SWCHB
    105  f2e2					      REPEAT	4
    106  f2e2		       4a		      lsr
    105  f2e2					      REPEND
    106  f2e3		       4a		      lsr
    105  f2e3					      REPEND
    106  f2e4		       4a		      lsr
    105  f2e4					      REPEND
    106  f2e5		       4a		      lsr
    107  f2e6					      REPEND
    108  f2e6		       90 07		      bcc	.logo_kernel_bw
    109  f2e8
    110  f2e8				   .logo_kernel_color
    111  f2e8		       a2 00		      ldx	#LOGO_BG_COLOR
    112  f2ea		       a0 c6		      ldy	#LOGO_FG_COLOR
    113  f2ec		       4c f3 f2 	      jmp	.logo_kernel_set
    114  f2ef
    115  f2ef				   .logo_kernel_bw
    116  f2ef		       a9 00		      lda	#LOGO_BG_BW_COLOR
    117  f2f1		       a9 0e		      lda	#LOGO_FG_BW_COLOR
    118  f2f3
    119  f2f3				   .logo_kernel_set
    120  f2f3		       86 09		      stx	COLUBK
    121  f2f5		       84 08		      sty	COLUPF
    122  f2f7
    123  f2f7				   .logo_kernel_start
    124  f2f7
    125  f2f7							; Turn on display
    126  f2f7		       a9 00		      lda	#0
    127  f2f9		       85 01		      sta	VBLANK
    128  f2fb
    129  f2fb		       a4 a0		      ldy	WebIndex
    130  f2fd		       d0 06		      bne	.logo_kernel_top_anim_padding
    131  f2ff
    132  f2ff				   .logo_kernel_top_padding
    133  f2ff							; Top Padding
    134  f2ff		       20 4d f3 	      jsr	LogoPadding
    135  f302		       4c 12 f3 	      jmp	.logo_kernel_image
    136  f305
    137  f305				   .logo_kernel_top_anim_padding
    138  f305		       20 5d f3 	      jsr	LogoAnimPadding
    139  f308
    140  f308				   .logo_kernel_image_animation_start
    141  f308		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    142  f30a
    143  f30a				   .logo_kernel_image_animation_loop
    144  f30a		       85 02		      sta	WSYNC
    145  f30c		       ca		      dex
    146  f30d		       d0 fb		      bne	.logo_kernel_image_animation_loop
    147  f30f
    148  f30f		       88		      dey
    149  f310		       10 f6		      bpl	.logo_kernel_image_animation_start
    150  f312
    151  f312				   .logo_kernel_image
    152  f312
    153  f312		       a2 0b		      ldx	#LOGO_IMAGE_SIZE-1
    154  f314		       a0 03		      ldy	#LOGO_IMAGE_LINE_SIZE-2
    155  f316							; The extra 2 on line size is for processing overflow
    156  f316
    157  f316							;dex
    158  f316		       e4 a0		      cpx	WebIndex
    159  f318		       90 2f		      bcc	.logo_kernel_bottom_padding
    160  f31a
    161  f31a				   .logo_kernel_image_line
    162  f31a		       85 02		      sta	WSYNC
    163  f31c
    164  f31c		       bd d6 f1 	      lda	LogoImage1,x
    165  f31f		       85 0e		      sta	PF1
    166  f321		       bd e2 f1 	      lda	LogoImage2,x
    167  f324		       85 0f		      sta	PF2
    168  f326
      0  f326					      sleep	26
      1  f326				   .CYCLES    SET	26
      2  f326
      3  f326				  -	      IF	.CYCLES < 2
      4  f326				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f326				  -	      ERR
      6  f326					      ENDIF
      7  f326
      8  f326				  -	      IF	.CYCLES & 1
      9  f326				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f326				  -	      nop	0
     11  f326				  -	      ELSE
     12  f326				  -	      bit	VSYNC
     13  f326				  -	      ENDIF
     14  f326				  -.CYCLES    SET	.CYCLES - 3
     15  f326					      ENDIF
     16  f326
     17  f326					      REPEAT	.CYCLES / 2
     18  f326		       ea		      nop
     17  f326					      REPEND
     18  f327		       ea		      nop
     17  f327					      REPEND
     18  f328		       ea		      nop
     17  f328					      REPEND
     18  f329		       ea		      nop
     17  f329					      REPEND
     18  f32a		       ea		      nop
     17  f32a					      REPEND
     18  f32b		       ea		      nop
     17  f32b					      REPEND
     18  f32c		       ea		      nop
     17  f32c					      REPEND
     18  f32d		       ea		      nop
     17  f32d					      REPEND
     18  f32e		       ea		      nop
     17  f32e					      REPEND
     18  f32f		       ea		      nop
     17  f32f					      REPEND
     18  f330		       ea		      nop
     17  f330					      REPEND
     18  f331		       ea		      nop
     17  f331					      REPEND
     18  f332		       ea		      nop
     19  f333					      REPEND
    170  f333
    171  f333		       bd ee f1 	      lda	LogoImage3,x
    172  f336		       85 0f		      sta	PF2
    173  f338		       bd fa f1 	      lda	LogoImage4,x
    174  f33b		       85 0e		      sta	PF1
    175  f33d
    176  f33d		       88		      dey
    177  f33e		       d0 da		      bne	.logo_kernel_image_line
    178  f340
    179  f340		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    180  f342
    181  f342		       e4 a0		      cpx	WebIndex
    182  f344		       90 03		      bcc	.logo_kernel_bottom_padding
    183  f346
    184  f346		       ca		      dex
    185  f347		       10 d1		      bpl	.logo_kernel_image_line
    186  f349
    187  f349				   .logo_kernel_bottom_padding
    188  f349							; Bottom Padding
    189  f349		       20 4d f3 	      jsr	LogoPadding
    190  f34c
    191  f34c				   .logo_kernel_image_return
    192  f34c		       60		      rts
    193  f34d
    194  f34d				   LogoPadding
    195  f34d		       a9 00		      lda	#0
    196  f34f		       85 0d		      sta	PF0
    197  f351		       85 0e		      sta	PF1
    198  f353		       85 0f		      sta	PF2
    199  f355
    200  f355		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    201  f357				   .logo_padding_loop
    202  f357		       85 02		      sta	WSYNC
    203  f359		       ca		      dex
    204  f35a		       d0 fb		      bne	.logo_padding_loop
    205  f35c
    206  f35c		       60		      rts
    207  f35d
    208  f35d				   LogoAnimPadding
    209  f35d		       a9 00		      lda	#0
    210  f35f		       85 0d		      sta	PF0
    211  f361		       85 0e		      sta	PF1
    212  f363		       85 0f		      sta	PF2
    213  f365
    214  f365		       a2 38		      ldx	#LOGO_IMAGE_ANIM_PADDING
    215  f367		       4c 57 f3 	      jmp	.logo_padding_loop
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f36a					      include	"title.asm"
      1  f36a							;================
      2  f36a							; Constants
      3  f36a							;================
      4  f36a
      5  f36a		       00 00	   TITLE_BG_COLOR =	#$00
      6  f36a		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f36a		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f36a		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f36a		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f36a
     11  f36a		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f36a		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f36a		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f36a		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f36a		       00 09	   TITLE_AUDIO_STEP =	9
     16  f36a
     17  f36a		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f36a		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f36a		       00 07	   TITLE_LABEL_LINE =	7
     20  f36a
     21  f36a		       00 10	   TITLE_GAP_SIZE =	#16
     22  f36a
     23  f36a		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f36a		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f36a		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f36a
     27  f36a				   TitleInit
     28  f36a
     29  f36a							; Setup logic and kernel
      0  f36a					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f36a				   .POINTER   SET	VBlankPtr
      2  f36a				   .ADDRESS   SET	TitleVerticalBlank
      3  f36a
      4  f36a		       a9 cb		      LDA	#<.ADDRESS
      5  f36c		       85 88		      STA	.POINTER
      6  f36e		       a9 f3		      LDA	#>.ADDRESS
      7  f370		       85 89		      STA	.POINTER+1
      8  f372
      0  f372					      SET_POINTER	KernelPtr, TitleKernel
      1  f372				   .POINTER   SET	KernelPtr
      2  f372				   .ADDRESS   SET	TitleKernel
      3  f372
      4  f372		       a9 8a		      LDA	#<.ADDRESS
      5  f374		       85 8a		      STA	.POINTER
      6  f376		       a9 f4		      LDA	#>.ADDRESS
      7  f378		       85 8b		      STA	.POINTER+1
      8  f37a
      0  f37a					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f37a				   .POINTER   SET	OverScanPtr
      2  f37a				   .ADDRESS   SET	TitleOverScan
      3  f37a
      4  f37a		       a9 3c		      LDA	#<.ADDRESS
      5  f37c		       85 8c		      STA	.POINTER
      6  f37e		       a9 f4		      LDA	#>.ADDRESS
      7  f380		       85 8d		      STA	.POINTER+1
      8  f382
     33  f382
     34  f382							; Load audio settings
     35  f382
     36  f382							; Melody Line
     37  f382		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f384		       85 15		      sta	AUDC0
     39  f386		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f388		       85 19		      sta	AUDV0
     41  f38a
     42  f38a							; Drums and Bass
     43  f38a		       a9 00		      lda	#0
     44  f38c		       85 16		      sta	AUDC1
     45  f38e		       85 1a		      sta	AUDV1
     46  f390
     47  f390							; Make it so that we play the first note immediately
     48  f390		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f392		       85 92		      sta	AudioStep
     50  f394		       a9 01		      lda	#1
     51  f396		       85 8f		      sta	FrameTimer
     52  f398
     53  f398							; Setup Spider Sprite
      0  f398					      SET_POINTER	SpiderPtr, TitleSpider
      1  f398				   .POINTER   SET	SpiderPtr
      2  f398				   .ADDRESS   SET	TitleSpider
      3  f398
      4  f398		       a9 aa		      LDA	#<.ADDRESS
      5  f39a		       85 a3		      STA	.POINTER
      6  f39c		       a9 f0		      LDA	#>.ADDRESS
      7  f39e		       85 a4		      STA	.POINTER+1
      8  f3a0
     55  f3a0
     56  f3a0		       a5 81		      lda	NuSiz0
     57  f3a2		       29 f8		      and	#%11111000
     58  f3a4		       09 06		      ora	#%00000110	; Triple Sprite
     59  f3a6		       85 81		      sta	NuSiz0
     60  f3a8		       85 04		      sta	NUSIZ0
     61  f3aa		       85 82		      sta	NuSiz1
     62  f3ac		       85 05		      sta	NUSIZ1
     63  f3ae
     64  f3ae		       a9 00		      lda	#0	; No reflect
     65  f3b0		       85 0b		      sta	REFP0
     66  f3b2		       a9 ff		      lda	#$FF	; Reflect P1
     67  f3b4		       85 0c		      sta	REFP1
     68  f3b6
     69  f3b6		       a9 00		      lda	#0
     70  f3b8		       85 aa		      sta	SpiderDrawPos	; Initialize animation state
     71  f3ba
     72  f3ba							; Setup Web Line
     73  f3ba							; Missle0 (2 clock size)
     74  f3ba		       a5 81		      lda	NuSiz0
     75  f3bc		       29 cf		      and	#%11001111
     76  f3be		       09 10		      ora	#%00010000
     77  f3c0		       85 81		      sta	NuSiz0
     78  f3c2		       85 04		      sta	NUSIZ0
     79  f3c4
     80  f3c4							; Disable at start
     81  f3c4		       a9 00		      lda	#0
     82  f3c6		       85 1d		      sta	ENAM0
     83  f3c8
     84  f3c8							; Set initial button state
     85  f3c8							;lda #0
     86  f3c8		       85 91		      sta	InputState
     87  f3ca
     88  f3ca		       60		      rts
     89  f3cb
     90  f3cb				   TitleVerticalBlank
     91  f3cb
     92  f3cb							; Refresh random values
     93  f3cb		       20 13 f0 	      jsr	Random
     94  f3ce
     95  f3ce		       20 d8 f3 	      jsr	TitlePosition
     96  f3d1		       20 f2 f3 	      jsr	TitleAnimation
     97  f3d4		       20 1d f4 	      jsr	TitleColor
     98  f3d7
     99  f3d7		       60		      rts
    100  f3d8
    101  f3d8				   TitlePosition
    102  f3d8
    103  f3d8							; Position Spider
    104  f3d8		       a2 00		      ldx	#0	; Object (player0)
    105  f3da		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    106  f3dc		       20 00 f0 	      jsr	PosObject
    107  f3df
    108  f3df		       a2 01		      ldx	#1	; Object (player1)
    109  f3e1		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    110  f3e3		       20 00 f0 	      jsr	PosObject
    111  f3e6
    112  f3e6							; Position Web Line
    113  f3e6		       a2 02		      ldx	#2	; Object (missle0)
    114  f3e8		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    115  f3ea		       20 00 f0 	      jsr	PosObject
    116  f3ed
    117  f3ed		       85 02		      sta	WSYNC
    118  f3ef		       85 2a		      sta	HMOVE
    119  f3f1
    120  f3f1		       60		      rts
    121  f3f2
    122  f3f2				   TitleAnimation
    123  f3f2
    124  f3f2		       a5 92		      lda	AudioStep
    125  f3f4							;cmp #0
    126  f3f4		       f0 0d		      beq	.title_animation_1
    127  f3f6		       c9 04		      cmp	#4
    128  f3f8		       f0 16		      beq	.title_animation_2
    129  f3fa		       c9 09		      cmp	#9
    130  f3fc		       f0 05		      beq	.title_animation_1
    131  f3fe		       c9 0c		      cmp	#12
    132  f400		       f0 0e		      beq	.title_animation_2
    133  f402		       60		      rts
    134  f403
    135  f403				   .title_animation_1
      0  f403					      SET_POINTER	SpiderPtr, TitleSpider
      1  f403				   .POINTER   SET	SpiderPtr
      2  f403				   .ADDRESS   SET	TitleSpider
      3  f403
      4  f403		       a9 aa		      LDA	#<.ADDRESS
      5  f405		       85 a3		      STA	.POINTER
      6  f407		       a9 f0		      LDA	#>.ADDRESS
      7  f409		       85 a4		      STA	.POINTER+1
      8  f40b
    137  f40b		       a9 00		      lda	#0
    138  f40d		       85 aa		      sta	SpiderDrawPos
    139  f40f		       60		      rts
    140  f410
    141  f410				   .title_animation_2
      0  f410					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f410				   .POINTER   SET	SpiderPtr
      2  f410				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f410
      4  f410		       a9 b3		      LDA	#<.ADDRESS
      5  f412		       85 a3		      STA	.POINTER
      6  f414		       a9 f0		      LDA	#>.ADDRESS
      7  f416		       85 a4		      STA	.POINTER+1
      8  f418
    143  f418		       a9 01		      lda	#1
    144  f41a		       85 aa		      sta	SpiderDrawPos
    145  f41c		       60		      rts
    146  f41d
    147  f41d				   TitleColor
    148  f41d
    149  f41d							; Load Colors
    150  f41d		       a9 00		      lda	#TITLE_BG_COLOR
    151  f41f		       85 09		      sta	COLUBK
    152  f421		       a9 06		      lda	#TITLE_WEB_COLOR
    153  f423		       85 08		      sta	COLUPF
    154  f425
    155  f425							; Check b/w
    156  f425		       ad 82 02 	      lda	SWCHB
    157  f428					      REPEAT	4
    158  f428		       4a		      lsr
    157  f428					      REPEND
    158  f429		       4a		      lsr
    157  f429					      REPEND
    158  f42a		       4a		      lsr
    157  f42a					      REPEND
    158  f42b		       4a		      lsr
    159  f42c					      REPEND
    160  f42c		       90 07		      bcc	.title_bw
    161  f42e
    162  f42e				   .title_color
    163  f42e		       a9 56		      lda	#TITLE_SPIDER_COLOR
    164  f430		       85 06		      sta	COLUP0
    165  f432		       85 07		      sta	COLUP1
    166  f434
    167  f434		       60		      rts
    168  f435
    169  f435				   .title_bw
    170  f435							; Load B/W Colors
    171  f435		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    172  f437		       85 06		      sta	COLUP0
    173  f439		       85 07		      sta	COLUP1
    174  f43b
    175  f43b		       60		      rts
    176  f43c
    177  f43c				   TitleOverScan
    178  f43c		       20 43 f4 	      jsr	TitleAudio
    179  f43f		       20 79 f4 	      jsr	TitleState
    180  f442		       60		      rts
    181  f443
    182  f443				   TitleAudio
    183  f443
    184  f443		       a6 8f		      ldx	FrameTimer
    185  f445		       d0 31		      bne	.title_audio_return
    186  f447
    187  f447							; Reset Timer
    188  f447		       a2 09		      ldx	#TITLE_AUDIO_STEP
    189  f449		       86 8f		      stx	FrameTimer
    190  f44b
    191  f44b				   .title_audio_play
    192  f44b
    193  f44b							; Increment melody position
    194  f44b		       a4 92		      ldy	AudioStep
    195  f44d		       c8		      iny
    196  f44e
    197  f44e							; Check if we're at the end of the melody
    198  f44e		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    199  f450		       d0 02		      bne	.title_audio_play_note
    200  f452
    201  f452							; Loop our audio step
    202  f452		       a0 00		      ldy	#0
    203  f454
    204  f454				   .title_audio_play_note
    205  f454
    206  f454							; Save current position
    207  f454		       84 92		      sty	AudioStep
    208  f456
    209  f456							; Basic Melody Line
    210  f456		       b9 76 f5 	      lda	TitleAudio0,y
    211  f459		       85 17		      sta	AUDF0
    212  f45b
    213  f45b							; Drums and Bass
    214  f45b		       b9 86 f5 	      lda	TitleTone1,y
    215  f45e		       c9 ff		      cmp	#$FF
    216  f460		       f0 0e		      beq	.title_audio_play_note_1_mute
    217  f462
    218  f462		       85 16		      sta	AUDC1
    219  f464		       b9 96 f5 	      lda	TitleAudio1,y
    220  f467		       85 18		      sta	AUDF1
    221  f469		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    222  f46b		       85 1a		      sta	AUDV1
    223  f46d
    224  f46d		       4c 78 f4 	      jmp	.title_audio_return
    225  f470
    226  f470				   .title_audio_play_note_1_mute
    227  f470
    228  f470		       a9 00		      lda	#0
    229  f472		       85 18		      sta	AUDF1
    230  f474		       85 16		      sta	AUDC1
    231  f476		       85 1a		      sta	AUDV1
    232  f478
    233  f478				   .title_audio_return
    234  f478		       60		      rts
    235  f479
    236  f479				   TitleState
    237  f479
    238  f479							; Check if Fire Button on controller 1 is released
    239  f479		       a5 0c		      lda	INPT4
    240  f47b		       30 05		      bmi	.title_state_check
    241  f47d
    242  f47d				   .title_state_on
    243  f47d		       a9 01		      lda	#1
    244  f47f		       85 91		      sta	InputState
    245  f481		       60		      rts
    246  f482
    247  f482				   .title_state_check
    248  f482		       a5 91		      lda	InputState
    249  f484		       f0 03		      beq	.title_state_return
    250  f486
    251  f486				   .title_state_next
    252  f486							; Button is released, load up game
    253  f486		       20 1c fd 	      jsr	GameInit
    254  f489
    255  f489				   .title_state_return
    256  f489		       60		      rts
    257  f48a
    258  f48a				   TitleKernel
    259  f48a
    260  f48a							; Playfield Control
    261  f48a		       a5 80		      lda	CtrlPf
    262  f48c		       29 fe		      and	#%11111110	; No mirroring
    263  f48e		       85 80		      sta	CtrlPf
    264  f490		       85 0a		      sta	CTRLPF
    265  f492
    266  f492							; Turn on display
    267  f492		       a9 00		      lda	#0
    268  f494		       85 01		      sta	VBLANK
    269  f496
    270  f496		       85 02		      sta	WSYNC
    271  f498
    272  f498				   TitleFrameTopDraw
    273  f498
    274  f498							; Start Counters
    275  f498		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    276  f49a		       a0 00		      ldy	#0	; Image Counter
    277  f49c
    278  f49c				   .title_frame_top
    279  f49c
    280  f49c							; 76 machine cycles per scanline
    281  f49c		       85 02		      sta	WSYNC
    282  f49e
    283  f49e				   .title_frame_top_load		; 66 cycles
    284  f49e
    285  f49e							; First half of image
    286  f49e		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    287  f4a1		       85 0d		      sta	PF0	; 4
    288  f4a3		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    289  f4a6		       85 0e		      sta	PF1	; 4
    290  f4a8		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    291  f4ab		       85 0f		      sta	PF2	; 4
    292  f4ad
      0  f4ad					      sleep	6
      1  f4ad				   .CYCLES    SET	6
      2  f4ad
      3  f4ad				  -	      IF	.CYCLES < 2
      4  f4ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4ad				  -	      ERR
      6  f4ad					      ENDIF
      7  f4ad
      8  f4ad				  -	      IF	.CYCLES & 1
      9  f4ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4ad				  -	      nop	0
     11  f4ad				  -	      ELSE
     12  f4ad				  -	      bit	VSYNC
     13  f4ad				  -	      ENDIF
     14  f4ad				  -.CYCLES    SET	.CYCLES - 3
     15  f4ad					      ENDIF
     16  f4ad
     17  f4ad					      REPEAT	.CYCLES / 2
     18  f4ad		       ea		      nop
     17  f4ad					      REPEND
     18  f4ae		       ea		      nop
     17  f4ae					      REPEND
     18  f4af		       ea		      nop
     19  f4b0					      REPEND
    294  f4b0
    295  f4b0							; Second half of image
    296  f4b0		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    297  f4b3		       85 0d		      sta	PF0	; 4
    298  f4b5		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    299  f4b8		       85 0e		      sta	PF1	; 4
    300  f4ba		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    301  f4bd		       85 0f		      sta	PF2	; 4
    302  f4bf
    303  f4bf				   .title_frame_top_index		; 4 cycles
    304  f4bf
    305  f4bf		       ca		      dex		; 2
    306  f4c0		       d0 da		      bne	.title_frame_top	; 2
    307  f4c2
    308  f4c2				   .title_frame_top_index_next		; 6 cycles
    309  f4c2
    310  f4c2							; Restore scanline counter
    311  f4c2		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    312  f4c4
    313  f4c4		       98		      tya		; 2
    314  f4c5		       18		      clc		; 2
    315  f4c6		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    316  f4c8		       a8		      tay		; 2
    317  f4c9
    318  f4c9		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    319  f4cb		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    320  f4cd		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    321  f4cf		       85 08		      sta	COLUPF	; 4
    322  f4d1		       ea		      nop		; 2
    323  f4d2		       4c 9e f4 	      jmp	.title_frame_top_load	; 3
    324  f4d5
    325  f4d5				   .title_frame_top_label_color_skip
    326  f4d5
    327  f4d5		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    328  f4d7		       d0 c3		      bne	.title_frame_top	; 2
    329  f4d9
    330  f4d9				   .title_frame_top_clean
    331  f4d9
    332  f4d9							; Clear out playfield
    333  f4d9		       a9 00		      lda	#0
    334  f4db		       85 0d		      sta	PF0
    335  f4dd		       85 0e		      sta	PF1
    336  f4df		       85 0f		      sta	PF2
    337  f4e1
    338  f4e1				   TitleWebDraw
    339  f4e1		       a9 02		      lda	#%00000010
    340  f4e3		       85 1d		      sta	ENAM0
    341  f4e5
    342  f4e5		       a9 06		      lda	#TITLE_WEB_COLOR
    343  f4e7		       85 06		      sta	COLUP0
    344  f4e9
    345  f4e9		       a2 10		      ldx	#TITLE_GAP_SIZE
    346  f4eb				   .title_web_gap
    347  f4eb		       ca		      dex
    348  f4ec		       85 02		      sta	WSYNC
    349  f4ee		       d0 fb		      bne	.title_web_gap
    350  f4f0
    351  f4f0				   TitleSpiderDraw
    352  f4f0
    353  f4f0		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    354  f4f2
    355  f4f2		       a5 aa		      lda	SpiderDrawPos
    356  f4f4		       c9 01		      cmp	#1
    357  f4f6		       d0 0c		      bne	.title_spider_extra_web_disable
    358  f4f8
    359  f4f8				   .title_spider_extra_web_start
    360  f4f8		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    361  f4fa				   .title_spider_extra_web_loop
    362  f4fa		       85 02		      sta	WSYNC
    363  f4fc		       ca		      dex
    364  f4fd		       d0 fb		      bne	.title_spider_extra_web_loop
    365  f4ff
    366  f4ff		       88		      dey
    367  f500		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    368  f502		       d0 f4		      bne	.title_spider_extra_web_start
    369  f504
    370  f504				   .title_spider_extra_web_disable
    371  f504		       a9 00		      lda	#0
    372  f506		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    373  f508
    374  f508		       85 02		      sta	WSYNC
    375  f50a
    376  f50a		       85 1d		      sta	ENAM0
    377  f50c
    378  f50c							; Check b/w
    379  f50c		       ad 82 02 	      lda	SWCHB
    380  f50f					      REPEAT	4
    381  f50f		       4a		      lsr
    380  f50f					      REPEND
    381  f510		       4a		      lsr
    380  f510					      REPEND
    381  f511		       4a		      lsr
    380  f511					      REPEND
    381  f512		       4a		      lsr
    382  f513					      REPEND
    383  f513		       90 05		      bcc	.title_spider_bw
    384  f515
    385  f515				   .title_spider_color
    386  f515		       a9 56		      lda	#TITLE_SPIDER_COLOR
    387  f517		       4c 1c f5 	      jmp	.title_spider_color_set
    388  f51a				   .title_spider_bw
    389  f51a		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    390  f51c				   .title_spider_color_set
    391  f51c		       85 06		      sta	COLUP0
    392  f51e
    393  f51e				   .title_spider
    394  f51e		       b1 a3		      lda	(SpiderPtr),y
    395  f520		       85 1b		      sta	GRP0
    396  f522		       85 1c		      sta	GRP1
    397  f524
    398  f524				   .title_spider_delay
    399  f524		       ca		      dex
    400  f525		       85 02		      sta	WSYNC
    401  f527		       d0 fb		      bne	.title_spider_delay
    402  f529
    403  f529				   .title_spider_index
    404  f529		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    405  f52b		       88		      dey
    406  f52c		       10 f0		      bpl	.title_spider
    407  f52e
    408  f52e				   .title_spider_clean
    409  f52e
    410  f52e							; Clear sprites
    411  f52e		       a9 00		      lda	#0
    412  f530		       85 1b		      sta	GRP0
    413  f532		       85 1c		      sta	GRP1
    414  f534
    415  f534				   TitleFrameBottomDraw
    416  f534
    417  f534							; Load Frame Color
    418  f534		       a9 06		      lda	#TITLE_WEB_COLOR
    419  f536		       85 08		      sta	COLUPF
    420  f538
    421  f538							; Start Counters
    422  f538		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    423  f53a		       a0 00		      ldy	#0	; Image Counter
    424  f53c
    425  f53c				   .title_frame_bottom
    426  f53c
    427  f53c							; 76 machine cycles per scanline
    428  f53c		       85 02		      sta	WSYNC
    429  f53e
    430  f53e				   .title_frame_bottom_load		; 66 cycles
    431  f53e
    432  f53e							; First half of image
    433  f53e		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    434  f541		       85 0d		      sta	PF0	; 4
    435  f543		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    436  f546		       85 0e		      sta	PF1	; 4
    437  f548		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    438  f54b		       85 0f		      sta	PF2	; 4
    439  f54d
      0  f54d					      sleep	6
      1  f54d				   .CYCLES    SET	6
      2  f54d
      3  f54d				  -	      IF	.CYCLES < 2
      4  f54d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f54d				  -	      ERR
      6  f54d					      ENDIF
      7  f54d
      8  f54d				  -	      IF	.CYCLES & 1
      9  f54d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f54d				  -	      nop	0
     11  f54d				  -	      ELSE
     12  f54d				  -	      bit	VSYNC
     13  f54d				  -	      ENDIF
     14  f54d				  -.CYCLES    SET	.CYCLES - 3
     15  f54d					      ENDIF
     16  f54d
     17  f54d					      REPEAT	.CYCLES / 2
     18  f54d		       ea		      nop
     17  f54d					      REPEND
     18  f54e		       ea		      nop
     17  f54e					      REPEND
     18  f54f		       ea		      nop
     19  f550					      REPEND
    441  f550
    442  f550							; Second half of image
    443  f550		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    444  f553		       85 0d		      sta	PF0	; 4
    445  f555		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    446  f558		       85 0e		      sta	PF1	; 4
    447  f55a		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    448  f55d		       85 0f		      sta	PF2	; 4
    449  f55f
    450  f55f				   .title_frame_bottom_index		; 4 cycles
    451  f55f
    452  f55f		       ca		      dex		; 2
    453  f560		       d0 da		      bne	.title_frame_bottom	; 2
    454  f562
    455  f562				   .title_frame_bottom_index_next		; 6 cycles
    456  f562
    457  f562							; Restore scanline counter
    458  f562		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    459  f564
    460  f564		       98		      tya		; 2
    461  f565		       18		      clc		; 2
    462  f566		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    463  f568		       a8		      tay		; 2
    464  f569		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    465  f56b		       d0 cf		      bne	.title_frame_bottom	; 2
    466  f56d
    467  f56d				   .title_frame_bottom_clean
    468  f56d
    469  f56d							; Clear out playfield
    470  f56d		       a9 00		      lda	#0
    471  f56f		       85 0d		      sta	PF0
    472  f571		       85 0e		      sta	PF1
    473  f573		       85 0f		      sta	PF2
    474  f575
    475  f575				   .title_kernel_return
    476  f575		       60		      rts
    477  f576
    478  f576				   TitleAudio0
    479  f576
    480  f576		       0f		      .BYTE.b	#15	; B
    481  f577		       13		      .BYTE.b	#19	; G
    482  f578		       17		      .BYTE.b	#23	; E
    483  f579		       13		      .BYTE.b	#19	; G
    484  f57a		       0e		      .BYTE.b	#14	; C
    485  f57b		       13		      .BYTE.b	#19
    486  f57c		       17		      .BYTE.b	#23
    487  f57d		       13		      .BYTE.b	#19
    488  f57e		       0c		      .BYTE.b	#12	; D
    489  f57f		       13		      .BYTE.b	#19
    490  f580		       17		      .BYTE.b	#23
    491  f581		       13		      .BYTE.b	#19
    492  f582		       0e		      .BYTE.b	#14	; C
    493  f583		       13		      .BYTE.b	#19
    494  f584		       17		      .BYTE.b	#23
    495  f585		       13		      .BYTE.b	#19
    496  f586
    497  f586				   TitleTone1
    498  f586
    499  f586		       0f		      .BYTE.b	#15	; Electronic Rumble
    500  f587		       ff		      .BYTE.b	#$FF
    501  f588		       01		      .BYTE.b	#1	; Low Pure Tone
    502  f589		       01		      .BYTE.b	#1
    503  f58a		       08		      .BYTE.b	#8	; White Noise
    504  f58b		       01		      .BYTE.b	#1
    505  f58c		       01		      .BYTE.b	#1
    506  f58d		       ff		      .BYTE.b	#$FF
    507  f58e		       ff		      .BYTE.b	#$FF
    508  f58f		       0f		      .BYTE.b	#15
    509  f590		       ff		      .BYTE.b	#$FF
    510  f591		       ff		      .BYTE.b	#$FF
    511  f592		       08		      .BYTE.b	#8
    512  f593		       ff		      .BYTE.b	#$FF
    513  f594		       01		      .BYTE.b	#1
    514  f595		       01		      .BYTE.b	#1
    515  f596
    516  f596				   TitleAudio1
    517  f596
    518  f596		       1d		      .BYTE.b	#29	; Kick
    519  f597		       ff		      .BYTE.b	#$FF
    520  f598		       1f		      .BYTE.b	#31	; C
    521  f599		       1f		      .BYTE.b	#31
    522  f59a		       07		      .BYTE.b	#7	; Snare
    523  f59b		       1f		      .BYTE.b	#31
    524  f59c		       1f		      .BYTE.b	#31
    525  f59d		       ff		      .BYTE.b	#$FF
    526  f59e		       ff		      .BYTE.b	#$FF
    527  f59f		       1d		      .BYTE.b	#29
    528  f5a0		       ff		      .BYTE.b	#$FF
    529  f5a1		       ff		      .BYTE.b	#$FF
    530  f5a2		       07		      .BYTE.b	#7
    531  f5a3		       ff		      .BYTE.b	#$FF
    532  f5a4		       17		      .BYTE.b	#23	; F
    533  f5a5		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f5a6					      include	"game.asm"
      1  f5a6							;================
      2  f5a6							; Game
      3  f5a6							;================
      4  f5a6
      5  f5a6							; Constants
      6  f5a6
      7  f5a6		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f5a6		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f5a6		       00 09	   GAME_AUDIO_STEP =	9
     10  f5a6		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f5a6		       00 06	   GAME_AUDIO_TONE =	6
     12  f5a6
     13  f5a6							; Object Code
     14  f5a6
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f5a6					      include	"objects/level.asm"
      1  f5a6							;======================
      2  f5a6							; Level Logic
      3  f5a6							;======================
      4  f5a6
      5  f5a6							; Constants
      6  f5a6
      7  f5a6		       00 14	   LEVELS     =	20
      8  f5a6
      9  f5a6				   LevelInit
     10  f5a6
     11  f5a6							; Set beginning level by difficulty switches treated as binary
     12  f5a6		       ad 82 02 	      lda	SWCHB
     13  f5a9					      REPEAT	6	; shift to 0-3
     14  f5a9		       4a		      lsr
     13  f5a9					      REPEND
     14  f5aa		       4a		      lsr
     13  f5aa					      REPEND
     14  f5ab		       4a		      lsr
     13  f5ab					      REPEND
     14  f5ac		       4a		      lsr
     13  f5ac					      REPEND
     14  f5ad		       4a		      lsr
     13  f5ad					      REPEND
     14  f5ae		       4a		      lsr
     15  f5af					      REPEND
     16  f5af		       18		      clc		; multiply by 5
     17  f5b0		       85 83		      sta	Temp
     18  f5b2		       0a		      asl
     19  f5b3		       0a		      asl
     20  f5b4		       65 83		      adc	Temp
     21  f5b6		       85 9f		      sta	LevelCurrent
     22  f5b8
     23  f5b8		       20 de f5 	      jsr	LevelLoad
     24  f5bb
     25  f5bb		       60		      rts
     26  f5bc
     27  f5bc				   LevelUpdate
     28  f5bc
     29  f5bc							; Calculate Desired score: (level+2)*5
     30  f5bc		       a5 9f		      lda	LevelCurrent
     31  f5be		       18		      clc
     32  f5bf		       69 02		      adc	#2	; +2
     33  f5c1		       85 83		      sta	Temp
     34  f5c3		       0a		      asl		; x2
     35  f5c4		       0a		      asl		; x2
     36  f5c5		       65 83		      adc	Temp	; x1
     37  f5c7
     38  f5c7							; Check if score is high enough
     39  f5c7		       c5 95		      cmp	ScoreValue+1
     40  f5c9		       b0 0f		      bcs	.level_update_return
     41  f5cb
     42  f5cb							; Reset score
     43  f5cb		       a9 00		      lda	#0
     44  f5cd		       85 95		      sta	ScoreValue+1
     45  f5cf
     46  f5cf							; Check if we haven't reached the final level
     47  f5cf		       a5 9f		      lda	LevelCurrent
     48  f5d1		       c9 13		      cmp	#LEVELS-1
     49  f5d3		       b0 05		      bcs	.level_update_return
     50  f5d5
     51  f5d5		       e6 9f		      inc	LevelCurrent
     52  f5d7		       20 de f5 	      jsr	LevelLoad
     53  f5da
     54  f5da				   .level_update_return
     55  f5da
     56  f5da		       20 0d f6 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     57  f5dd
     58  f5dd		       60		      rts
     59  f5de
     60  f5de				   LevelLoad
     61  f5de
     62  f5de							; Bug Speed: level/4+2
     63  f5de		       a5 9f		      lda	LevelCurrent
     64  f5e0		       4a		      lsr		; /2
     65  f5e1		       4a		      lsr		; /2
     66  f5e2		       69 02		      adc	#2
     67  f5e4		       85 b5		      sta	BugSpeed
     68  f5e6
     69  f5e6							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     70  f5e6		       a9 14		      lda	#20
     71  f5e8		       18		      clc
     72  f5e9		       e5 9f		      sbc	LevelCurrent
     73  f5eb		       0a		      asl		; x2
     74  f5ec		       85 83		      sta	Temp
     75  f5ee		       0a		      asl		; x2
     76  f5ef		       0a		      asl		; x2
     77  f5f0		       65 83		      adc	Temp
     78  f5f2		       85 c4		      sta	SwatterWaitTime
     79  f5f4
     80  f5f4							; Swatter Hold Time: 60-(level*2)
     81  f5f4
     82  f5f4		       a5 9f		      lda	LevelCurrent
     83  f5f6		       0a		      asl		; x2
     84  f5f7		       85 83		      sta	Temp
     85  f5f9		       a9 3c		      lda	#60
     86  f5fb		       18		      clc
     87  f5fc		       e5 83		      sbc	Temp
     88  f5fe		       85 c5		      sta	SwatterHoldTime
     89  f600
     90  f600							; Swatter Hit Damage: level*3+$10
     91  f600		       a5 9f		      lda	LevelCurrent
     92  f602		       18		      clc
     93  f603		       85 83		      sta	Temp
     94  f605		       0a		      asl		; x2
     95  f606		       65 83		      adc	Temp
     96  f608		       69 10		      adc	#$10
     97  f60a		       85 c6		      sta	SwatterHitDamage
     98  f60c
     99  f60c		       60		      rts
    100  f60d
    101  f60d				   LevelLoadColor
    102  f60d		       a4 9f		      ldy	LevelCurrent
    103  f60f
    104  f60f							; check b/w
    105  f60f		       ad 82 02 	      lda	SWCHB
    106  f612					      REPEAT	4
    107  f612		       4a		      lsr
    106  f612					      REPEND
    107  f613		       4a		      lsr
    106  f613					      REPEND
    107  f614		       4a		      lsr
    106  f614					      REPEND
    107  f615		       4a		      lsr
    108  f616					      REPEND
    109  f616		       90 0b		      bcc	.level_load_bw
    110  f618
    111  f618				   .level_load_color
    112  f618
    113  f618							; Background Color
    114  f618		       b9 2c f6 	      lda	LevelDataBk,y
    115  f61b		       85 a1		      sta	WebColor+0
    116  f61d
    117  f61d							; Web Color
    118  f61d		       b9 40 f6 	      lda	LevelDataPf,y
    119  f620		       85 a2		      sta	WebColor+1
    120  f622
    121  f622		       60		      rts
    122  f623
    123  f623				   .level_load_bw
    124  f623
    125  f623							; Background Color
    126  f623		       a9 00		      lda	#WEB_BG_COLOR
    127  f625		       85 a1		      sta	WebColor+0
    128  f627
    129  f627							; Web Color
    130  f627		       a9 02		      lda	#WEB_FG_COLOR
    131  f629		       85 a2		      sta	WebColor+1
    132  f62b
    133  f62b		       60		      rts
    134  f62c
    135  f62c							; Easy: 1-5
    136  f62c							; Medium: 6-9
    137  f62c							; Hard: 10-15
    138  f62c							; Extreme: 16-19
    139  f62c
    140  f62c				   LevelDataBk		; Background Color
    141  f62c		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    142  f62d		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    143  f62e		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    144  f62f		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    145  f630		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    146  f631		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    147  f632		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    148  f633		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    149  f634		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    150  f635		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    151  f636		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    152  f637		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    153  f638		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    154  f639		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    155  f63a		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    156  f63b		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    157  f63c		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    158  f63d		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    159  f63e		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    160  f63f		       0c		      .BYTE.b	#$0C	; rgb(199, 199, 199)
    161  f640
    162  f640				   LevelDataPf		; Web Color
    163  f640		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    164  f641		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    165  f642		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    166  f643		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    167  f644		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    168  f645		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    169  f646		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    170  f647		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    171  f648		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    172  f649		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    173  f64a		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    174  f64b		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    175  f64c		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    176  f64d		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    177  f64e		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    178  f64f		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    179  f650		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    180  f651		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    181  f652		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    182  f653		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f654					      include	"objects/score.asm"
      1  f654							;======================
      2  f654							; Score (playfield)
      3  f654							;======================
      4  f654
      5  f654							; Constants
      6  f654
      7  f654		       00 00	   SCORE_BG_COLOR =	#$00
      8  f654		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f654		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f654		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f654		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f654		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f654
     14  f654		       00 05	   SCORE_LABEL_SIZE =	5
     15  f654		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f654		       00 02	   SCORE_LINE_SIZE =	2
     17  f654		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f654
     19  f654							; Initialization
     20  f654
     21  f654				   ScoreInit
     22  f654
     23  f654							; Health Score
     24  f654		       a9 ff		      lda	#$ff
     25  f656		       85 94		      sta	ScoreValue+0
     26  f658
     27  f658							; Game Score
     28  f658		       a9 00		      lda	#0
     29  f65a		       85 95		      sta	ScoreValue+1
     30  f65c
     31  f65c		       60		      rts
     32  f65d
     33  f65d							; Frame Update
     34  f65d
     35  f65d				   ScoreUpdate
     36  f65d
     37  f65d							; Current Level Digits
     38  f65d		       a5 9f		      lda	LevelCurrent
     39  f65f		       18		      clc
     40  f660		       69 01		      adc	#1
     41  f662
     42  f662		       20 21 f0 	      jsr	BinBcdConvert
     43  f665
     44  f665							; Only use first byte
     45  f665		       8a		      txa
     46  f666		       29 0f		      and	#$0f
     47  f668		       a8		      tay
     48  f669		       8a		      txa
     49  f66a		       29 f0		      and	#$f0
     50  f66c					      REPEAT	4
     51  f66c		       4a		      lsr
     50  f66c					      REPEND
     51  f66d		       4a		      lsr
     50  f66d					      REPEND
     51  f66e		       4a		      lsr
     50  f66e					      REPEND
     51  f66f		       4a		      lsr
     52  f670					      REPEND
     53  f670		       aa		      tax
     54  f671
     55  f671							; Adjust index positions by multiplying by 5
     56  f671		       8a		      txa
     57  f672		       85 83		      sta	Temp
     58  f674		       0a		      asl
     59  f675		       0a		      asl
     60  f676		       65 83		      adc	Temp
     61  f678		       85 98		      sta	ScoreDigitTens
     62  f67a
     63  f67a		       98		      tya
     64  f67b		       85 83		      sta	Temp
     65  f67d		       0a		      asl
     66  f67e		       0a		      asl
     67  f67f		       65 83		      adc	Temp
     68  f681		       85 96		      sta	ScoreDigitOnes
     69  f683
     70  f683							; Score Digits
     71  f683		       a5 95		      lda	ScoreValue+1
     72  f685
     73  f685		       20 21 f0 	      jsr	BinBcdConvert
     74  f688
     75  f688							; Only use first byte
     76  f688		       8a		      txa
     77  f689		       29 0f		      and	#$0f
     78  f68b		       a8		      tay
     79  f68c		       8a		      txa
     80  f68d		       29 f0		      and	#$f0
     81  f68f					      REPEAT	4
     82  f68f		       4a		      lsr
     81  f68f					      REPEND
     82  f690		       4a		      lsr
     81  f690					      REPEND
     82  f691		       4a		      lsr
     81  f691					      REPEND
     82  f692		       4a		      lsr
     83  f693					      REPEND
     84  f693		       aa		      tax
     85  f694
     86  f694							; Adjust index positions by multiplying by 5
     87  f694		       8a		      txa
     88  f695		       85 83		      sta	Temp
     89  f697		       0a		      asl
     90  f698		       0a		      asl
     91  f699		       65 83		      adc	Temp
     92  f69b		       85 99		      sta	ScoreDigitTens+1
     93  f69d
     94  f69d		       98		      tya
     95  f69e		       85 83		      sta	Temp
     96  f6a0		       0a		      asl
     97  f6a1		       0a		      asl
     98  f6a2		       65 83		      adc	Temp
     99  f6a4		       85 97		      sta	ScoreDigitOnes+1
    100  f6a6
    101  f6a6							; Health Bar
    102  f6a6		       a5 94		      lda	ScoreValue+0
    103  f6a8		       f0 1c		      beq	.score_update_bar_empty
    104  f6aa
    105  f6aa					      REPEAT	4
    106  f6aa		       4a		      lsr
    105  f6aa					      REPEND
    106  f6ab		       4a		      lsr
    105  f6ab					      REPEND
    106  f6ac		       4a		      lsr
    105  f6ac					      REPEND
    106  f6ad		       4a		      lsr
    107  f6ae					      REPEND
    108  f6ae		       c9 08		      cmp	#8
    109  f6b0		       b0 09		      bcs	.score_update_bar_top
    110  f6b2
    111  f6b2				   .score_update_bar_bottom
    112  f6b2		       aa		      tax
    113  f6b3		       bd d9 f7 	      lda	ScoreBar,x
    114  f6b6		       a0 00		      ldy	#$00
    115  f6b8		       4c ca f6 	      jmp	.score_update_bar_store
    116  f6bb
    117  f6bb				   .score_update_bar_top
    118  f6bb		       29 07		      and	#%00000111
    119  f6bd		       aa		      tax
    120  f6be		       a9 7f		      lda	#$7f
    121  f6c0		       bc e1 f7 	      ldy	ScoreBarFlip,x
    122  f6c3		       4c ca f6 	      jmp	.score_update_bar_store
    123  f6c6
    124  f6c6				   .score_update_bar_empty
    125  f6c6		       a9 00		      lda	#0
    126  f6c8		       a0 00		      ldy	#0
    127  f6ca
    128  f6ca				   .score_update_bar_store
    129  f6ca		       85 9d		      sta	ScoreBarGfx+0
    130  f6cc		       84 9e		      sty	ScoreBarGfx+1
    131  f6ce
    132  f6ce				   .score_update_end
    133  f6ce		       60		      rts
    134  f6cf
    135  f6cf							; Draw loop (uses SCORE_LINES scanlines)
    136  f6cf
    137  f6cf				   ScoreDraw
    138  f6cf
    139  f6cf							; Load Colors
    140  f6cf		       a9 00		      lda	#SCORE_BG_COLOR
    141  f6d1		       85 09		      sta	COLUBK
    142  f6d3		       a9 06		      lda	#SCORE_LABEL_COLOR
    143  f6d5		       85 08		      sta	COLUPF
    144  f6d7		       85 06		      sta	COLUP0
    145  f6d9		       85 07		      sta	COLUP1
    146  f6db
    147  f6db							; Set Non-Mirror
    148  f6db		       a5 80		      lda	CtrlPf
    149  f6dd		       29 fc		      and	#%11111100
    150  f6df		       09 02		      ora	#%00000010
    151  f6e1		       85 80		      sta	CtrlPf
    152  f6e3		       85 0a		      sta	CTRLPF
    153  f6e5
    154  f6e5		       a2 00		      ldx	#0
    155  f6e7				   .score_draw_label
    156  f6e7
    157  f6e7		       85 02		      sta	WSYNC
    158  f6e9
    159  f6e9							; First half of image
    160  f6e9		       bd 20 f1 	      lda	ScoreLabel+0,x	; 4
    161  f6ec		       85 0d		      sta	PF0	; 3
    162  f6ee		       bd 21 f1 	      lda	ScoreLabel+1,x
    163  f6f1		       85 0e		      sta	PF1
    164  f6f3		       bd 22 f1 	      lda	ScoreLabel+2,x
    165  f6f6		       85 0f		      sta	PF2
    166  f6f8
      0  f6f8					      sleep	8
      1  f6f8				   .CYCLES    SET	8
      2  f6f8
      3  f6f8				  -	      IF	.CYCLES < 2
      4  f6f8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6f8				  -	      ERR
      6  f6f8					      ENDIF
      7  f6f8
      8  f6f8				  -	      IF	.CYCLES & 1
      9  f6f8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6f8				  -	      nop	0
     11  f6f8				  -	      ELSE
     12  f6f8				  -	      bit	VSYNC
     13  f6f8				  -	      ENDIF
     14  f6f8				  -.CYCLES    SET	.CYCLES - 3
     15  f6f8					      ENDIF
     16  f6f8
     17  f6f8					      REPEAT	.CYCLES / 2
     18  f6f8		       ea		      nop
     17  f6f8					      REPEND
     18  f6f9		       ea		      nop
     17  f6f9					      REPEND
     18  f6fa		       ea		      nop
     17  f6fa					      REPEND
     18  f6fb		       ea		      nop
     19  f6fc					      REPEND
    168  f6fc
    169  f6fc							; Second half of image
    170  f6fc							;lda ScoreLabel+3,x ; 4
    171  f6fc		       a9 00		      lda	#0	; 2
    172  f6fe		       85 0d		      sta	PF0	; 3
    173  f700		       bd 24 f1 	      lda	ScoreLabel+4,x
    174  f703		       85 0e		      sta	PF1
    175  f705		       bd 25 f1 	      lda	ScoreLabel+5,x
    176  f708		       85 0f		      sta	PF2
    177  f70a
    178  f70a		       8a		      txa
    179  f70b		       18		      clc
    180  f70c		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    181  f70e		       aa		      tax
    182  f70f		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    183  f711		       d0 d4		      bne	.score_draw_label
    184  f713
    185  f713							; Clear labels and setup color
    186  f713		       a9 00		      lda	#0
    187  f715		       85 0d		      sta	PF0
    188  f717		       85 0e		      sta	PF1
    189  f719		       85 0f		      sta	PF2
    190  f71b
    191  f71b		       85 02		      sta	WSYNC
    192  f71d
    193  f71d							; Load Colors
    194  f71d		       ad 82 02 	      lda	SWCHB
    195  f720					      REPEAT	4
    196  f720		       4a		      lsr
    195  f720					      REPEND
    196  f721		       4a		      lsr
    195  f721					      REPEND
    196  f722		       4a		      lsr
    195  f722					      REPEND
    196  f723		       4a		      lsr
    197  f724					      REPEND
    198  f724		       90 0d		      bcc	.score_draw_bw
    199  f726
    200  f726				   .score_draw_color
    201  f726		       a9 44		      lda	#SCORE_LEVEL_COLOR
    202  f728		       85 08		      sta	COLUPF
    203  f72a		       85 06		      sta	COLUP0
    204  f72c		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    205  f72e		       85 07		      sta	COLUP1
    206  f730
    207  f730		       4c 3d f7 	      jmp	.score_draw_digit_start
    208  f733
    209  f733				   .score_draw_bw
    210  f733		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    211  f735		       85 08		      sta	COLUPF
    212  f737		       85 06		      sta	COLUP0
    213  f739		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    214  f73b		       85 07		      sta	COLUP1
    215  f73d
    216  f73d				   .score_draw_digit_start
    217  f73d
    218  f73d		       85 02		      sta	WSYNC
    219  f73f
    220  f73f							; Prepare initial line
    221  f73f
    222  f73f							; Level
    223  f73f		       a4 98		      ldy	ScoreDigitTens
    224  f741		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    225  f744		       29 f0		      and	#$f0
    226  f746		       85 9a		      sta	ScoreDigitGfx
    227  f748
    228  f748		       a4 96		      ldy	ScoreDigitOnes
    229  f74a		       b9 bc f0 	      lda	ScoreDigits,y
    230  f74d		       29 f0		      and	#$f0
    231  f74f		       85 9b		      sta	ScoreDigitGfx+1
    232  f751
    233  f751							; Score
    234  f751		       a4 99		      ldy	ScoreDigitTens+1
    235  f753		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    236  f756		       29 0f		      and	#$0f
    237  f758		       85 9c		      sta	ScoreDigitGfx+2
    238  f75a
    239  f75a		       a4 97		      ldy	ScoreDigitOnes+1
    240  f75c		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    241  f75f		       29 f0		      and	#$f0
    242  f761		       05 9c		      ora	ScoreDigitGfx+2
    243  f763		       85 9c		      sta	ScoreDigitGfx+2
    244  f765
    245  f765		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    246  f767		       a5 9a		      lda	ScoreDigitGfx
    247  f769		       85 02		      sta	WSYNC
    248  f76b				   .score_draw_digit
    249  f76b
    250  f76b							;lda ScoreDigitGfx
    251  f76b		       85 0d		      sta	PF0
    252  f76d		       a5 9b		      lda	ScoreDigitGfx+1
    253  f76f		       85 0e		      sta	PF1
    254  f771		       a5 9c		      lda	ScoreDigitGfx+2
    255  f773		       85 0f		      sta	PF2
    256  f775
    257  f775							; Begin preparing next line
    258  f775		       e6 96		      inc	ScoreDigitOnes
    259  f777		       e6 98		      inc	ScoreDigitTens
    260  f779		       e6 97		      inc	ScoreDigitOnes+1
    261  f77b		       e6 99		      inc	ScoreDigitTens+1
    262  f77d
    263  f77d		       a9 00		      lda	#0
    264  f77f		       85 0d		      sta	PF0
    265  f781		       a5 9d		      lda	ScoreBarGfx+0
    266  f783		       85 0e		      sta	PF1
    267  f785		       a5 9e		      lda	ScoreBarGfx+1
    268  f787		       85 0f		      sta	PF2
    269  f789
    270  f789							; Level 1st Digit
    271  f789		       a4 98		      ldy	ScoreDigitTens
    272  f78b		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    273  f78e		       29 f0		      and	#$f0
    274  f790		       85 83		      sta	Temp
    275  f792
    276  f792							; Score 1st Digit
    277  f792		       a4 99		      ldy	ScoreDigitTens+1
    278  f794		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    279  f797		       29 0f		      and	#$0f
    280  f799		       85 84		      sta	Temp+1
    281  f79b
    282  f79b		       a5 9a		      lda	ScoreDigitGfx
    283  f79d		       85 0d		      sta	PF0
    284  f79f		       a5 9b		      lda	ScoreDigitGfx+1
    285  f7a1		       85 0e		      sta	PF1
    286  f7a3		       a5 9c		      lda	ScoreDigitGfx+2
    287  f7a5		       85 0f		      sta	PF2
    288  f7a7
    289  f7a7							; Level 2nd Digit (and transfer)
    290  f7a7		       a4 96		      ldy	ScoreDigitOnes
    291  f7a9		       b9 bc f0 	      lda	ScoreDigits,y
    292  f7ac		       29 f0		      and	#$f0
    293  f7ae		       85 9b		      sta	ScoreDigitGfx+1
    294  f7b0
      0  f7b0					      sleep	3
      1  f7b0				   .CYCLES    SET	3
      2  f7b0
      3  f7b0				  -	      IF	.CYCLES < 2
      4  f7b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7b0				  -	      ERR
      6  f7b0					      ENDIF
      7  f7b0
      8  f7b0					      IF	.CYCLES & 1
      9  f7b0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7b0		       04 00		      nop	0
     11  f7b2				  -	      ELSE
     12  f7b2				  -	      bit	VSYNC
     13  f7b2					      ENDIF
     14  f7b2				   .CYCLES    SET	.CYCLES - 3
     15  f7b2					      ENDIF
     16  f7b2
     17  f7b2				  -	      REPEAT	.CYCLES / 2
     18  f7b2				  -	      nop
     19  f7b2					      REPEND
    296  f7b2
    297  f7b2		       a9 00		      lda	#0
    298  f7b4		       85 0d		      sta	PF0
    299  f7b6		       a5 9d		      lda	ScoreBarGfx+0
    300  f7b8		       85 0e		      sta	PF1
    301  f7ba		       a4 9e		      ldy	ScoreBarGfx+1
    302  f7bc		       84 0f		      sty	PF2
    303  f7be
    304  f7be							; Score 2nd Digit (and transfer)
    305  f7be		       a4 97		      ldy	ScoreDigitOnes+1
    306  f7c0		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    307  f7c3		       29 f0		      and	#$f0
    308  f7c5		       05 84		      ora	Temp+1
    309  f7c7		       85 9c		      sta	ScoreDigitGfx+2
    310  f7c9
    311  f7c9							; Transfer Level 1st Digit
    312  f7c9		       a5 83		      lda	Temp
    313  f7cb		       85 9a		      sta	ScoreDigitGfx
    314  f7cd
    315  f7cd		       ca		      dex
    316  f7ce		       d0 9b		      bne	.score_draw_digit
    317  f7d0
    318  f7d0		       a9 00		      lda	#0
    319  f7d2		       85 0d		      sta	PF0
    320  f7d4		       85 0e		      sta	PF1
    321  f7d6		       85 0f		      sta	PF2
    322  f7d8
    323  f7d8		       60		      rts
    324  f7d9
    325  f7d9				   ScoreBar
    326  f7d9		       40		      .BYTE.b	#%01000000
    327  f7da		       40		      .BYTE.b	#%01000000
    328  f7db		       60		      .BYTE.b	#%01100000
    329  f7dc		       70		      .BYTE.b	#%01110000
    330  f7dd		       78		      .BYTE.b	#%01111000
    331  f7de		       7c		      .BYTE.b	#%01111100
    332  f7df		       7e		      .BYTE.b	#%01111110
    333  f7e0		       7f		      .BYTE.b	#%01111111
    334  f7e1
    335  f7e1				   ScoreBarFlip
    336  f7e1		       01		      .BYTE.b	#%00000001
    337  f7e2		       03		      .BYTE.b	#%00000011
    338  f7e3		       07		      .BYTE.b	#%00000111
    339  f7e4		       0f		      .BYTE.b	#%00001111
    340  f7e5		       1f		      .BYTE.b	#%00011111
    341  f7e6		       3f		      .BYTE.b	#%00111111
    342  f7e7		       7f		      .BYTE.b	#%01111111
    343  f7e8		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f7e9					      include	"objects/web.asm"
      1  f7e9							;================
      2  f7e9							; Web (Playfield)
      3  f7e9							;================
      4  f7e9
      5  f7e9							; Constants
      6  f7e9
      7  f7e9		       00 00	   WEB_BG_COLOR =	#$00
      8  f7e9		       00 02	   WEB_FG_COLOR =	#$02
      9  f7e9
     10  f7e9		       00 1c	   WEB_SIZE   =	28
     11  f7e9		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f7e9		       00 06	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f7e9
     14  f7e9							; Scanline Draw
     15  f7e9
     16  f7e9				   WebDrawStart
     17  f7e9
     18  f7e9							; Load Colors
     19  f7e9		       a5 a2		      lda	WebColor+1
     20  f7eb		       85 08		      sta	COLUPF
     21  f7ed
     22  f7ed							; Mirror playfield and use standard playfield color
     23  f7ed		       a5 80		      lda	CtrlPf
     24  f7ef		       29 fc		      and	#%11111100
     25  f7f1		       09 01		      ora	#%00000001
     26  f7f3		       85 80		      sta	CtrlPf
     27  f7f5		       85 0a		      sta	CTRLPF
     28  f7f7
     29  f7f7							; Initialize image index
     30  f7f7		       a9 00		      lda	#0
     31  f7f9		       85 a0		      sta	WebIndex
     32  f7fb
     33  f7fb		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f7fc					      include	"objects/spider.asm"
      1  f7fc							;=================
      2  f7fc							; Spider (player0)
      3  f7fc							;=================
      4  f7fc
      5  f7fc							; Constants
      6  f7fc
      7  f7fc		       00 56	   SPIDER_COLOR =	#$56
      8  f7fc		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f7fc		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f7fc		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f7fc
     12  f7fc		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f7fc		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f7fc		       00 02	   SPIDER_VEL_X =	2
     15  f7fc		       00 02	   SPIDER_VEL_Y =	2
     16  f7fc
     17  f7fc							; Initialization
     18  f7fc
     19  f7fc				   SpiderInit
     20  f7fc
     21  f7fc							; Initialize Position in center of screen
     22  f7fc		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f7fe		       85 a5		      sta	SpiderPos
     24  f800		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f802		       85 a6		      sta	SpiderPos+1
     26  f804
     27  f804							; Initial direction
     28  f804		       a9 20		      lda	#%00100000
     29  f806		       85 a7		      sta	SpiderCtrl
     30  f808
     31  f808							; Setup Sprite
      0  f808					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f808				   .POINTER   SET	SpiderPtr
      2  f808				   .ADDRESS   SET	SpiderSprite
      3  f808
      4  f808		       a9 92		      LDA	#<.ADDRESS
      5  f80a		       85 a3		      STA	.POINTER
      6  f80c		       a9 f1		      LDA	#>.ADDRESS
      7  f80e		       85 a4		      STA	.POINTER+1
      8  f810
     33  f810
     34  f810		       60		      rts
     35  f811
     36  f811							; Frame Update
     37  f811
     38  f811				   SpiderUpdate
     39  f811		       20 18 f8 	      jsr	SpiderControl
     40  f814		       20 fe f8 	      jsr	SpiderCollision
     41  f817		       60		      rts
     42  f818
     43  f818				   SpiderControl
     44  f818
     45  f818							; Control Position
     46  f818		       a6 a5		      ldx	SpiderPos
     47  f81a		       a4 a6		      ldy	SpiderPos+1
     48  f81c		       ad 80 02 	      lda	SWCHA
     49  f81f
     50  f81f				   .spider_control_check_right
     51  f81f		       30 02		      bmi	.spider_control_check_left
     52  f821
     53  f821					      REPEAT	#SPIDER_VEL_X
     54  f821		       e8		      inx
     53  f821					      REPEND
     54  f822		       e8		      inx
     55  f823					      REPEND
     56  f823
     57  f823				   .spider_control_check_left
     58  f823		       2a		      rol
     59  f824		       30 02		      bmi	.spider_control_check_down
     60  f826
     61  f826					      REPEAT	#SPIDER_VEL_X
     62  f826		       ca		      dex
     61  f826					      REPEND
     62  f827		       ca		      dex
     63  f828					      REPEND
     64  f828
     65  f828				   .spider_control_check_down
     66  f828		       2a		      rol
     67  f829		       30 02		      bmi	.spider_control_check_up
     68  f82b
     69  f82b					      REPEAT	#SPIDER_VEL_Y
     70  f82b		       88		      dey
     69  f82b					      REPEND
     70  f82c		       88		      dey
     71  f82d					      REPEND
     72  f82d
     73  f82d				   .spider_control_check_up
     74  f82d		       2a		      rol
     75  f82e		       30 02		      bmi	.spider_control_sprite
     76  f830
     77  f830					      REPEAT	#SPIDER_VEL_Y
     78  f830		       c8		      iny
     77  f830					      REPEND
     78  f831		       c8		      iny
     79  f832					      REPEND
     80  f832
     81  f832				   .spider_control_sprite
     82  f832							; Control Sprite
     83  f832		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     84  f834
     85  f834				   .spider_control_sprite_x
     86  f834		       e4 a5		      cpx	SpiderPos
     87  f836		       90 04		      bcc	.spider_control_sprite_left
     88  f838		       f0 09		      beq	.spider_control_sprite_y
     89  f83a		       b0 05		      bcs	.spider_control_sprite_right
     90  f83c
     91  f83c				   .spider_control_sprite_left
     92  f83c		       09 80		      ora	#%10000000
     93  f83e		       4c 43 f8 	      jmp	.spider_control_sprite_y
     94  f841
     95  f841				   .spider_control_sprite_right
     96  f841		       09 40		      ora	#%01000000
     97  f843
     98  f843				   .spider_control_sprite_y
     99  f843		       c4 a6		      cpy	SpiderPos+1
    100  f845		       90 04		      bcc	.spider_control_sprite_down
    101  f847		       f0 09		      beq	.spider_control_sprite_store
    102  f849		       b0 05		      bcs	.spider_control_sprite_up
    103  f84b
    104  f84b				   .spider_control_sprite_down
    105  f84b		       09 10		      ora	#%00010000
    106  f84d		       4c 52 f8 	      jmp	.spider_control_sprite_store
    107  f850
    108  f850				   .spider_control_sprite_up
    109  f850		       09 20		      ora	#%00100000
    110  f852
    111  f852				   .spider_control_sprite_store
    112  f852		       c9 00		      cmp	#%00000000
    113  f854		       f0 02		      beq	.spider_control_boundary
    114  f856		       85 a7		      sta	SpiderCtrl
    115  f858
    116  f858				   .spider_control_boundary
    117  f858							; Check Playfield Boundaries
    118  f858
    119  f858				   .spider_control_boundary_left
    120  f858		       e0 03		      cpx	#SPIDER_VEL_X+1
    121  f85a		       b0 05		      bcs	.spider_control_boundary_right
    122  f85c		       a2 03		      ldx	#SPIDER_VEL_X+1
    123  f85e		       4c 67 f8 	      jmp	.spider_control_boundary_top
    124  f861
    125  f861				   .spider_control_boundary_right
    126  f861		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    127  f863		       90 02		      bcc	.spider_control_boundary_top
    128  f865		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    129  f867
    130  f867				   .spider_control_boundary_top
    131  f867		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    132  f869		       b0 05		      bcs	.spider_control_boundary_bottom
    133  f86b		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    134  f86d		       4c 76 f8 	      jmp	.spider_control_store
    135  f870
    136  f870				   .spider_control_boundary_bottom
    137  f870		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    138  f872		       90 02		      bcc	.spider_control_store
    139  f874		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    140  f876
    141  f876				   .spider_control_store
    142  f876							; Store new position
    143  f876		       86 a5		      stx	SpiderPos
    144  f878		       84 a6		      sty	SpiderPos+1
    145  f87a
    146  f87a							; TODO: Optimize this somehow?
    147  f87a				   .spider_control_sprite_assign
    148  f87a							; Skip if no change
    149  f87a		       c9 00		      cmp	#%00000000
    150  f87c		       f0 7f		      beq	.spider_control_return
    151  f87e
    152  f87e		       a2 00		      ldx	#%00000000	; For reflection
    153  f880
    154  f880				   .spider_control_sprite_assign_left
    155  f880		       c9 80		      cmp	#%10000000
    156  f882		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f884					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f884				   .POINTER   SET	SpiderPtr
      2  f884				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f884
      4  f884		       a9 a2		      LDA	#<.ADDRESS
      5  f886		       85 a3		      STA	.POINTER
      6  f888		       a9 f1		      LDA	#>.ADDRESS
      7  f88a		       85 a4		      STA	.POINTER+1
      8  f88c
    158  f88c		       a2 08		      ldx	#%00001000
    159  f88e		       4c fb f8 	      jmp	.spider_control_reflect
    160  f891
    161  f891				   .spider_control_sprite_assign_right
    162  f891		       c9 40		      cmp	#%01000000
    163  f893		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f895					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f895				   .POINTER   SET	SpiderPtr
      2  f895				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f895
      4  f895		       a9 a2		      LDA	#<.ADDRESS
      5  f897		       85 a3		      STA	.POINTER
      6  f899		       a9 f1		      LDA	#>.ADDRESS
      7  f89b		       85 a4		      STA	.POINTER+1
      8  f89d
    165  f89d		       4c fb f8 	      jmp	.spider_control_reflect
    166  f8a0
    167  f8a0				   .spider_control_sprite_assign_top
    168  f8a0		       c9 20		      cmp	#%00100000
    169  f8a2		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f8a4					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f8a4				   .POINTER   SET	SpiderPtr
      2  f8a4				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f8a4
      4  f8a4		       a9 92		      LDA	#<.ADDRESS
      5  f8a6		       85 a3		      STA	.POINTER
      6  f8a8		       a9 f1		      LDA	#>.ADDRESS
      7  f8aa		       85 a4		      STA	.POINTER+1
      8  f8ac
    171  f8ac		       4c fb f8 	      jmp	.spider_control_reflect
    172  f8af
    173  f8af				   .spider_control_sprite_assign_bottom
    174  f8af		       c9 10		      cmp	#%00010000
    175  f8b1		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f8b3					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f8b3				   .POINTER   SET	SpiderPtr
      2  f8b3				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f8b3
      4  f8b3		       a9 b2		      LDA	#<.ADDRESS
      5  f8b5		       85 a3		      STA	.POINTER
      6  f8b7		       a9 f1		      LDA	#>.ADDRESS
      7  f8b9		       85 a4		      STA	.POINTER+1
      8  f8bb
    177  f8bb		       4c fb f8 	      jmp	.spider_control_reflect
    178  f8be
    179  f8be				   .spider_control_sprite_assign_top_right
    180  f8be		       c9 60		      cmp	#%01100000
    181  f8c0		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f8c2					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8c2				   .POINTER   SET	SpiderPtr
      2  f8c2				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8c2
      4  f8c2		       a9 a2		      LDA	#<.ADDRESS
      5  f8c4		       85 a3		      STA	.POINTER
      6  f8c6		       a9 f1		      LDA	#>.ADDRESS
      7  f8c8		       85 a4		      STA	.POINTER+1
      8  f8ca
    183  f8ca		       4c fb f8 	      jmp	.spider_control_reflect
    184  f8cd
    185  f8cd				   .spider_control_sprite_assign_bottom_right
    186  f8cd		       c9 50		      cmp	#%01010000
    187  f8cf		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f8d1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8d1				   .POINTER   SET	SpiderPtr
      2  f8d1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8d1
      4  f8d1		       a9 a2		      LDA	#<.ADDRESS
      5  f8d3		       85 a3		      STA	.POINTER
      6  f8d5		       a9 f1		      LDA	#>.ADDRESS
      7  f8d7		       85 a4		      STA	.POINTER+1
      8  f8d9
    189  f8d9		       4c fb f8 	      jmp	.spider_control_reflect
    190  f8dc
    191  f8dc				   .spider_control_sprite_assign_bottom_left
    192  f8dc		       c9 90		      cmp	#%10010000
    193  f8de		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f8e0					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8e0				   .POINTER   SET	SpiderPtr
      2  f8e0				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8e0
      4  f8e0		       a9 a2		      LDA	#<.ADDRESS
      5  f8e2		       85 a3		      STA	.POINTER
      6  f8e4		       a9 f1		      LDA	#>.ADDRESS
      7  f8e6		       85 a4		      STA	.POINTER+1
      8  f8e8
    195  f8e8		       a2 08		      ldx	#%00001000
    196  f8ea		       4c fb f8 	      jmp	.spider_control_reflect
    197  f8ed
    198  f8ed				   .spider_control_sprite_assign_top_left
    199  f8ed		       c9 a0		      cmp	#%10100000
    200  f8ef		       d0 0a		      bne	.spider_control_reflect
      0  f8f1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8f1				   .POINTER   SET	SpiderPtr
      2  f8f1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8f1
      4  f8f1		       a9 a2		      LDA	#<.ADDRESS
      5  f8f3		       85 a3		      STA	.POINTER
      6  f8f5		       a9 f1		      LDA	#>.ADDRESS
      7  f8f7		       85 a4		      STA	.POINTER+1
      8  f8f9
    202  f8f9		       a2 08		      ldx	#%00001000
    203  f8fb
    204  f8fb				   .spider_control_reflect
    205  f8fb		       86 0b		      stx	REFP0
    206  f8fd
    207  f8fd				   .spider_control_return
    208  f8fd		       60		      rts
    209  f8fe
    210  f8fe				   SpiderCollision
    211  f8fe		       a0 56		      ldy	#SPIDER_COLOR
    212  f900
    213  f900							; Check b/w
    214  f900		       ad 82 02 	      lda	SWCHB
    215  f903					      REPEAT	4
    216  f903		       4a		      lsr
    215  f903					      REPEND
    216  f904		       4a		      lsr
    215  f904					      REPEND
    216  f905		       4a		      lsr
    215  f905					      REPEND
    216  f906		       4a		      lsr
    217  f907					      REPEND
    218  f907		       b0 02		      bcs	.spider_collision_m0
    219  f909
    220  f909		       a0 0e		      ldy	#SPIDER_BW_COLOR
    221  f90b
    222  f90b				   .spider_collision_m0
    223  f90b							; Check stun status
    224  f90b		       a6 b6		      ldx	BugStunned
    225  f90d		       d0 04		      bne	.spider_collision_m1
    226  f90f
    227  f90f							; Collision for M0 (V set)
    228  f90f		       24 00		      bit	CXM0P
    229  f911		       70 0b		      bvs	.spider_collision_active
    230  f913
    231  f913				   .spider_collision_m1
    232  f913							; Check stun status
    233  f913		       a6 b7		      ldx	BugStunned+1
    234  f915		       d0 14		      bne	.spider_collision_return
    235  f917
    236  f917							; Collision for M1 (N set)
    237  f917		       24 01		      bit	CXM1P
    238  f919		       30 03		      bmi	.spider_collision_active
    239  f91b
    240  f91b		       4c 2b f9 	      jmp	.spider_collision_return
    241  f91e
    242  f91e				   .spider_collision_active
    243  f91e		       a0 44		      ldy	#SPIDER_COL_COLOR
    244  f920
    245  f920							; Check b/w
    246  f920		       ad 82 02 	      lda	SWCHB
    247  f923					      REPEAT	4
    248  f923		       4a		      lsr
    247  f923					      REPEND
    248  f924		       4a		      lsr
    247  f924					      REPEND
    248  f925		       4a		      lsr
    247  f925					      REPEND
    248  f926		       4a		      lsr
    249  f927					      REPEND
    250  f927		       b0 02		      bcs	.spider_collision_return
    251  f929
    252  f929		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    253  f92b
    254  f92b				   .spider_collision_return
    255  f92b		       84 a8		      sty	SpiderColor
    256  f92d		       60		      rts
    257  f92e
    258  f92e				   SpiderPosition
    259  f92e
    260  f92e							; Set Position
    261  f92e		       a2 00		      ldx	#0	; Object (player0)
    262  f930		       a5 a5		      lda	SpiderPos	; X Position
    263  f932		       20 00 f0 	      jsr	PosObject
    264  f935
    265  f935		       60		      rts
    266  f936
    267  f936							; Scanline Draw
    268  f936
    269  f936				   SpiderDrawStart
    270  f936
    271  f936							; Set player 0 to be quad size
    272  f936		       a5 81		      lda	NuSiz0
    273  f938		       29 f8		      and	#%11111000
    274  f93a		       09 05		      ora	#%00000101
    275  f93c		       85 81		      sta	NuSiz0
    276  f93e		       85 04		      sta	NUSIZ0
    277  f940
    278  f940							; Set sprite color
    279  f940		       a5 a8		      lda	SpiderColor
    280  f942		       85 06		      sta	COLUP0
    281  f944
    282  f944							; Determine if we need to use vertical delay (odd line)
    283  f944		       a5 a6		      lda	SpiderPos+1	; Y Position
    284  f946		       4a		      lsr
    285  f947		       b0 05		      bcs	.spider_draw_start_nodelay
    286  f949
    287  f949		       a0 01		      ldy	#1
    288  f94b		       4c 50 f9 	      jmp	.spider_draw_start_set_delay
    289  f94e
    290  f94e				   .spider_draw_start_nodelay
    291  f94e		       a0 00		      ldy	#0
    292  f950
    293  f950				   .spider_draw_start_set_delay
    294  f950		       84 25		      sty	VDELP0
    295  f952
    296  f952				   .spider_draw_start_pos
    297  f952							; Calculate starting position
    298  f952		       18		      clc
    299  f953		       69 10		      adc	#SPIDER_SIZE
    300  f955		       85 aa		      sta	SpiderDrawPos
    301  f957
    302  f957							; Initialize sprite index and line buffer
    303  f957		       a9 00		      lda	#0
    304  f959		       85 a9		      sta	SpiderIndex
    305  f95b		       85 ab		      sta	SpiderLine
    306  f95d
    307  f95d		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f95e					      include	"objects/line.asm"
      1  f95e							;================
      2  f95e							; Line (ball)
      3  f95e							;================
      4  f95e
      5  f95e							; Constants
      6  f95e
      7  f95e		       00 08	   LINE_SIZE  =	8
      8  f95e		       00 04	   LINE_VEL_X =	4
      9  f95e		       00 04	   LINE_VEL_Y =	4
     10  f95e
     11  f95e		       00 08	   LINE_AUDIO_C =	8
     12  f95e		       00 01	   LINE_AUDIO_F =	1
     13  f95e		       00 04	   LINE_AUDIO_V =	4
     14  f95e
     15  f95e		       00 08	   LINE_SAMPLE_LEN =	8
     16  f95e		       00 03	   LINE_SAMPLE_C =	3
     17  f95e		       00 01	   LINE_SAMPLE_F =	1
     18  f95e		       00 04	   LINE_SAMPLE_V =	4
     19  f95e
     20  f95e							; Initialization
     21  f95e
     22  f95e				   LineInit
     23  f95e
     24  f95e							; Initial Line Control
     25  f95e		       a9 00		      lda	#0
     26  f960		       85 ae		      sta	LineEnabled
     27  f962		       85 af		      sta	LinePos+0
     28  f964		       85 b0		      sta	LinePos+1
     29  f966		       85 b3		      sta	LineDrawPos+0
     30  f968		       85 b4		      sta	LineDrawPos+1
     31  f96a
     32  f96a							; Initial direction
     33  f96a							;lda #0
     34  f96a		       85 b1		      sta	LineVelocity+0
     35  f96c		       a9 04		      lda	#LINE_VEL_Y
     36  f96e		       85 b2		      sta	LineVelocity+1
     37  f970
     38  f970		       60		      rts
     39  f971
     40  f971							; Frame Update
     41  f971
     42  f971				   LineUpdate
     43  f971		       20 7b f9 	      jsr	LineControl
     44  f974		       20 2d fa 	      jsr	LineObject
     45  f977		       20 58 fa 	      jsr	LineCollision
     46  f97a		       60		      rts
     47  f97b
     48  f97b				   LineControl
     49  f97b
     50  f97b							; Check if Fire Button on controller 1 is pressed
     51  f97b		       a5 0c		      lda	INPT4
     52  f97d		       30 08		      bmi	.line_control_skip
     53  f97f
     54  f97f		       24 ae		      bit	LineEnabled
     55  f981		       30 04		      bmi	.line_control_skip
     56  f983
     57  f983		       a5 a7		      lda	SpiderCtrl
     58  f985		       d0 03		      bne	.line_control_fire
     59  f987
     60  f987				   .line_control_skip
     61  f987		       4c 2c fa 	      jmp	.line_control_return
     62  f98a
     63  f98a				   .line_control_fire
     64  f98a		       20 9b fa 	      jsr	LineEnable
     65  f98d
     66  f98d				   .line_control_x
     67  f98d		       a5 a7		      lda	SpiderCtrl
     68  f98f		       29 c0		      and	#%11000000
     69  f991		       f0 0e		      beq	.line_control_x_none
     70  f993				   .line_control_x_left
     71  f993		       c9 80		      cmp	#%10000000
     72  f995		       d0 05		      bne	.line_control_x_right
     73  f997
     74  f997		       a9 fc		      lda	#-LINE_VEL_X
     75  f999		       4c a3 f9 	      jmp	.line_control_x_store
     76  f99c				   .line_control_x_right
     77  f99c		       a9 04		      lda	#LINE_VEL_X
     78  f99e		       4c a3 f9 	      jmp	.line_control_x_store
     79  f9a1				   .line_control_x_none
     80  f9a1		       a9 00		      lda	#0
     81  f9a3				   .line_control_x_store
     82  f9a3		       85 b1		      sta	LineVelocity
     83  f9a5
     84  f9a5				   .line_control_y
     85  f9a5		       a5 a7		      lda	SpiderCtrl
     86  f9a7		       29 30		      and	#%00110000
     87  f9a9		       f0 0e		      beq	.line_control_y_none
     88  f9ab				   .line_control_y_up
     89  f9ab		       c9 20		      cmp	#%00100000
     90  f9ad		       d0 05		      bne	.line_control_y_down
     91  f9af
     92  f9af		       a9 04		      lda	#LINE_VEL_Y
     93  f9b1		       4c bb f9 	      jmp	.line_control_y_store
     94  f9b4				   .line_control_y_down
     95  f9b4		       a9 fc		      lda	#-LINE_VEL_Y
     96  f9b6		       4c bb f9 	      jmp	.line_control_y_store
     97  f9b9				   .line_control_y_none
     98  f9b9		       a9 00		      lda	#0
     99  f9bb				   .line_control_y_store
    100  f9bb		       85 b2		      sta	LineVelocity+1
    101  f9bd
    102  f9bd				   .line_control_position
    103  f9bd
    104  f9bd		       a2 00		      ldx	#0	; offsetX
    105  f9bf		       a0 00		      ldy	#0	; offsetY
    106  f9c1
    107  f9c1		       a5 a7		      lda	SpiderCtrl
    108  f9c3		       29 f0		      and	#%11110000
    109  f9c5
    110  f9c5				   .line_control_position_left
    111  f9c5		       c9 80		      cmp	#%10000000
    112  f9c7		       d0 07		      bne	.line_control_position_right
    113  f9c9
    114  f9c9		       a2 00		      ldx	#0
    115  f9cb		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    116  f9cd		       4c 18 fa 	      jmp	.line_control_position_store
    117  f9d0
    118  f9d0				   .line_control_position_right
    119  f9d0		       c9 40		      cmp	#%01000000
    120  f9d2		       d0 07		      bne	.line_control_position_top
    121  f9d4
    122  f9d4		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    123  f9d6		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    124  f9d8		       4c 18 fa 	      jmp	.line_control_position_store
    125  f9db
    126  f9db				   .line_control_position_top
    127  f9db		       c9 20		      cmp	#%00100000
    128  f9dd		       d0 07		      bne	.line_control_position_bottom
    129  f9df
    130  f9df		       a2 08		      ldx	#SPIDER_SIZE/2
    131  f9e1		       a0 10		      ldy	#SPIDER_SIZE
    132  f9e3		       4c 18 fa 	      jmp	.line_control_position_store
    133  f9e6
    134  f9e6				   .line_control_position_bottom
    135  f9e6		       c9 10		      cmp	#%00010000
    136  f9e8		       d0 05		      bne	.line_control_position_top_right
    137  f9ea
    138  f9ea		       a2 08		      ldx	#SPIDER_SIZE/2
    139  f9ec		       4c 18 fa 	      jmp	.line_control_position_store
    140  f9ef
    141  f9ef				   .line_control_position_top_right
    142  f9ef		       c9 60		      cmp	#%01100000
    143  f9f1		       d0 07		      bne	.line_control_position_bottom_right
    144  f9f3
    145  f9f3		       a2 10		      ldx	#SPIDER_SIZE
    146  f9f5		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    147  f9f7		       4c 18 fa 	      jmp	.line_control_position_store
    148  f9fa
    149  f9fa				   .line_control_position_bottom_right
    150  f9fa		       c9 50		      cmp	#%01010000
    151  f9fc		       d0 07		      bne	.line_control_position_bottom_left
    152  f9fe
    153  f9fe		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    154  fa00		       a0 00		      ldy	#0
    155  fa02		       4c 18 fa 	      jmp	.line_control_position_store
    156  fa05
    157  fa05				   .line_control_position_bottom_left
    158  fa05		       c9 90		      cmp	#%10010000
    159  fa07		       d0 07		      bne	.line_control_position_top_left
    160  fa09
    161  fa09							; No Offset
    162  fa09		       a2 04		      ldx	#LINE_SIZE/2
    163  fa0b		       a0 04		      ldy	#LINE_SIZE/2
    164  fa0d		       4c 18 fa 	      jmp	.line_control_position_store
    165  fa10
    166  fa10				   .line_control_position_top_left
    167  fa10		       c9 a0		      cmp	#%10100000
    168  fa12		       d0 04		      bne	.line_control_position_store
    169  fa14
    170  fa14		       a2 00		      ldx	#0
    171  fa16		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    172  fa18
    173  fa18				   .line_control_position_store
    174  fa18
    175  fa18							; Apply offsetX to playerX
    176  fa18		       a5 a5		      lda	SpiderPos
    177  fa1a		       86 83		      stx	Temp
    178  fa1c		       18		      clc
    179  fa1d		       65 83		      adc	Temp
    180  fa1f		       aa		      tax
    181  fa20
    182  fa20							; Apply offsetY to playerY
    183  fa20		       a5 a6		      lda	SpiderPos+1
    184  fa22		       84 83		      sty	Temp
    185  fa24		       18		      clc
    186  fa25		       65 83		      adc	Temp
    187  fa27		       a8		      tay
    188  fa28
    189  fa28		       86 af		      stx	LinePos
    190  fa2a		       84 b0		      sty	LinePos+1
    191  fa2c
    192  fa2c				   .line_control_return
    193  fa2c		       60		      rts
    194  fa2d
    195  fa2d				   LineObject
    196  fa2d
    197  fa2d							; Check if line is enabled
    198  fa2d		       24 ae		      bit	LineEnabled
    199  fa2f		       10 26		      bpl	.line_object_return
    200  fa31
    201  fa31							; Load position
    202  fa31		       a6 af		      ldx	LinePos
    203  fa33		       a4 b0		      ldy	LinePos+1
    204  fa35
    205  fa35				   .line_object_boundary
    206  fa35				   .line_object_boundary_left
    207  fa35		       e0 04		      cpx	#LINE_VEL_X
    208  fa37		       90 1b		      bcc	.line_object_disable
    209  fa39				   .line_object_boundary_right
    210  fa39		       e0 9b		      cpx	#160-LINE_VEL_X-1
    211  fa3b		       b0 17		      bcs	.line_object_disable
    212  fa3d				   .line_object_boundary_bottom
    213  fa3d		       c0 04		      cpy	#LINE_VEL_Y
    214  fa3f		       90 13		      bcc	.line_object_disable
    215  fa41				   .line_object_boundary_top
    216  fa41		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    217  fa43		       b0 0f		      bcs	.line_object_disable
    218  fa45
    219  fa45				   .line_object_velocity
    220  fa45
    221  fa45							; Apply Velocity
    222  fa45		       8a		      txa
    223  fa46		       18		      clc
    224  fa47		       65 b1		      adc	LineVelocity
    225  fa49		       85 af		      sta	LinePos
    226  fa4b
    227  fa4b		       98		      tya
    228  fa4c		       18		      clc
    229  fa4d		       65 b2		      adc	LineVelocity+1
    230  fa4f		       85 b0		      sta	LinePos+1
    231  fa51
    232  fa51		       4c 57 fa 	      jmp	.line_object_return
    233  fa54
    234  fa54				   .line_object_disable
    235  fa54		       20 a7 fa 	      jsr	LineDisable
    236  fa57
    237  fa57				   .line_object_return
    238  fa57		       60		      rts
    239  fa58
    240  fa58				   LineCollision
    241  fa58
    242  fa58		       a9 78		      lda	#BUG_STUN_LENGTH
    243  fa5a
    244  fa5a				   .line_collision_m0
    245  fa5a		       24 04		      bit	CXM0FB
    246  fa5c		       50 08		      bvc	.line_collision_m1
    247  fa5e
    248  fa5e							; Set stun timer
    249  fa5e		       85 b6		      sta	BugStunned+0
    250  fa60
    251  fa60							; Disable line
    252  fa60		       20 a7 fa 	      jsr	LineDisable
    253  fa63		       4c 6f fa 	      jmp	.line_collision_sample
    254  fa66
    255  fa66				   .line_collision_m1
    256  fa66		       24 05		      bit	CXM1FB
    257  fa68		       50 08		      bvc	.line_collision_return
    258  fa6a
    259  fa6a							; Set stun timer
    260  fa6a		       85 b7		      sta	BugStunned+1
    261  fa6c
    262  fa6c							; Disable line
    263  fa6c		       20 a7 fa 	      jsr	LineDisable
    264  fa6f
    265  fa6f				   .line_collision_sample
    266  fa6f		       20 c9 fa 	      jsr	LineSample
    267  fa72
    268  fa72				   .line_collision_return
    269  fa72		       60		      rts
    270  fa73
    271  fa73				   LinePosition
    272  fa73
    273  fa73							; Set Line Position
    274  fa73		       a2 04		      ldx	#4	; Object (ball)
    275  fa75		       a5 af		      lda	LinePos	; X Position
    276  fa77		       20 00 f0 	      jsr	PosObject
    277  fa7a
    278  fa7a		       60		      rts
    279  fa7b
    280  fa7b							; Scanline Draw
    281  fa7b
    282  fa7b				   LineDrawStart
    283  fa7b
    284  fa7b							; Set ball size to be 4 clocks (4/5 bits)
    285  fa7b		       a5 80		      lda	CtrlPf
    286  fa7d		       29 cf		      and	#%11001111
    287  fa7f		       09 20		      ora	#%00100000
    288  fa81		       85 80		      sta	CtrlPf
    289  fa83		       85 0a		      sta	CTRLPF
    290  fa85
    291  fa85							; Determine if we need to use vertical delay (oven line)
    292  fa85		       a5 b0		      lda	LinePos+1
    293  fa87		       4a		      lsr
    294  fa88		       90 05		      bcc	.line_draw_start_nodelay
    295  fa8a
    296  fa8a		       a0 01		      ldy	#1
    297  fa8c		       4c 91 fa 	      jmp	.line_draw_start_set_delay
    298  fa8f
    299  fa8f				   .line_draw_start_nodelay
    300  fa8f		       a0 00		      ldy	#0
    301  fa91
    302  fa91				   .line_draw_start_set_delay
    303  fa91		       84 27		      sty	VDELBL
    304  fa93
    305  fa93				   .line_draw_start_pos
    306  fa93							; Calculate starting position
    307  fa93		       18		      clc
    308  fa94		       85 b3		      sta	LineDrawPos+0
    309  fa96		       69 04		      adc	#LINE_SIZE/2
    310  fa98		       85 b4		      sta	LineDrawPos+1
    311  fa9a
    312  fa9a		       60		      rts
    313  fa9b
    314  fa9b				   LineEnable
    315  fa9b		       a9 80		      lda	#%10000000
    316  fa9d		       85 ae		      sta	LineEnabled
    317  fa9f
    318  fa9f		       a5 93		      lda	SampleStep
    319  faa1		       d0 03		      bne	.line_enable_return
    320  faa3
    321  faa3		       20 b3 fa 	      jsr	LineAudioPlay
    322  faa6
    323  faa6				   .line_enable_return
    324  faa6		       60		      rts
    325  faa7
    326  faa7				   LineDisable
    327  faa7		       a9 00		      lda	#0
    328  faa9		       85 ae		      sta	LineEnabled
    329  faab
    330  faab		       a5 93		      lda	SampleStep
    331  faad		       d0 03		      bne	.line_disable_return
    332  faaf
    333  faaf		       20 c0 fa 	      jsr	LineAudioMute
    334  fab2
    335  fab2				   .line_disable_return
    336  fab2		       60		      rts
    337  fab3
    338  fab3				   LineAudioPlay
    339  fab3		       a9 08		      lda	#LINE_AUDIO_C
    340  fab5		       85 16		      sta	AUDC1
    341  fab7		       a9 01		      lda	#LINE_AUDIO_F
    342  fab9		       85 18		      sta	AUDF1
    343  fabb		       a9 04		      lda	#LINE_AUDIO_V
    344  fabd		       85 1a		      sta	AUDV1
    345  fabf		       60		      rts
    346  fac0
    347  fac0				   LineAudioMute
    348  fac0		       a9 00		      lda	#0
    349  fac2		       85 1a		      sta	AUDV1
    350  fac4		       85 18		      sta	AUDF1
    351  fac6		       85 16		      sta	AUDC1
    352  fac8		       60		      rts
    353  fac9
    354  fac9				   LineSample
    355  fac9		       a9 08		      lda	#LINE_SAMPLE_LEN
    356  facb		       85 93		      sta	SampleStep
    357  facd		       a9 03		      lda	#LINE_SAMPLE_C
    358  facf		       85 16		      sta	AUDC1
    359  fad1		       a9 01		      lda	#LINE_SAMPLE_F
    360  fad3		       85 18		      sta	AUDF1
    361  fad5		       a9 04		      lda	#LINE_SAMPLE_V
    362  fad7		       85 1a		      sta	AUDV1
    363  fad9		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  fada					      include	"objects/bug.asm"
      1  fada							;======================
      2  fada							; Bugs (missiles 0 & 1)
      3  fada							;======================
      4  fada
      5  fada							; Constants
      6  fada
      7  fada		       00 08	   BUG_SIZE   =	8
      8  fada		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  fada		       00 78	   BUG_STUN_LENGTH =	120
     10  fada		       00 04	   BUG_POINTS =	4
     11  fada
     12  fada		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  fada		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  fada		       00 38	   BUG_STUN_COLOR =	#$38
     15  fada		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  fada
     17  fada		       00 1e	   BUG_SAMPLE_LEN =	30
     18  fada		       00 03	   BUG_SAMPLE_C =	3
     19  fada		       00 14	   BUG_SAMPLE_F =	20
     20  fada		       00 04	   BUG_SAMPLE_V =	4
     21  fada
     22  fada		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  fada		       00 08	   BUG_COL_SAMPLE_C =	8
     24  fada		       00 08	   BUG_COL_SAMPLE_F =	8
     25  fada		       00 03	   BUG_COL_SAMPLE_V =	3
     26  fada
     27  fada							; Initialization
     28  fada
     29  fada				   BugInit
     30  fada
     31  fada							; Initialize Bugs
     32  fada		       a2 01		      ldx	#1
     33  fadc
     34  fadc				   .bug_init_loop
     35  fadc		       20 e3 fa 	      jsr	BugReset
     36  fadf
     37  fadf		       ca		      dex
     38  fae0		       10 fa		      bpl	.bug_init_loop
     39  fae2
     40  fae2		       60		      rts
     41  fae3
     42  fae3				   BugReset		; x = bug (0 or 1)
     43  fae3
     44  fae3							; Set random position
     45  fae3		       20 13 f0 	      jsr	Random
     46  fae6
     47  fae6		       a5 86		      lda	Rand8
     48  fae8		       29 7f		      and	#$7f
     49  faea		       95 b8		      sta	BugPosX,x
     50  faec
     51  faec		       a5 87		      lda	Rand16
     52  faee		       29 7f		      and	#$7f
     53  faf0		       95 ba		      sta	BugPosY,x
     54  faf2
     55  faf2							; Set as active
     56  faf2		       a9 00		      lda	#0
     57  faf4		       95 b6		      sta	BugStunned,x
     58  faf6
     59  faf6		       60		      rts
     60  faf7
     61  faf7							; Frame Update
     62  faf7
     63  faf7				   BugUpdate
     64  faf7
     65  faf7		       a2 01		      ldx	#1
     66  faf9				   .bug_update_loop
     67  faf9		       86 83		      stx	Temp+0
     68  fafb
     69  fafb		       b5 b6		      lda	BugStunned,x
     70  fafd		       f0 08		      beq	.bug_update_active
     71  faff
     72  faff				   .bug_update_stunned
     73  faff		       d6 b6		      dec	BugStunned,x
     74  fb01		       20 8a fb 	      jsr	BugStunCollision
     75  fb04		       4c 0d fb 	      jmp	.bug_update_next
     76  fb07
     77  fb07				   .bug_update_active
     78  fb07		       20 13 fb 	      jsr	BugMovement
     79  fb0a		       20 72 fb 	      jsr	BugCollision
     80  fb0d
     81  fb0d				   .bug_update_next
     82  fb0d		       a6 83		      ldx	Temp+0
     83  fb0f		       ca		      dex
     84  fb10		       10 e7		      bpl	.bug_update_loop
     85  fb12
     86  fb12		       60		      rts
     87  fb13
     88  fb13				   BugMovement
     89  fb13
     90  fb13				   .bug_movement_random
     91  fb13		       20 13 f0 	      jsr	Random
     92  fb16		       29 03		      and	#%00000011
     93  fb18		       85 84		      sta	Temp+1
     94  fb1a
     95  fb1a				   .bug_movement_load
     96  fb1a		       a6 83		      ldx	Temp+0
     97  fb1c
     98  fb1c				   .bug_movement_x
     99  fb1c		       a4 b5		      ldy	BugSpeed
    100  fb1e
    101  fb1e							; Alter X Position
    102  fb1e		       a5 84		      lda	Temp+1
    103  fb20		       29 01		      and	#%00000001
    104  fb22
    105  fb22				   .bug_movement_x_check
    106  fb22		       c9 01		      cmp	#1
    107  fb24		       d0 08		      bne	.bug_movement_x_right
    108  fb26
    109  fb26				   .bug_movement_x_left
    110  fb26		       d6 b8		      dec	BugPosX,x
    111  fb28		       88		      dey
    112  fb29		       d0 fb		      bne	.bug_movement_x_left
    113  fb2b
    114  fb2b		       4c 33 fb 	      jmp	.bug_movement_y
    115  fb2e
    116  fb2e				   .bug_movement_x_right
    117  fb2e		       f6 b8		      inc	BugPosX,x
    118  fb30		       88		      dey
    119  fb31		       d0 fb		      bne	.bug_movement_x_right
    120  fb33
    121  fb33				   .bug_movement_y
    122  fb33		       a4 b5		      ldy	BugSpeed
    123  fb35
    124  fb35							; Alter Y Position
    125  fb35		       a5 84		      lda	Temp+1
    126  fb37		       29 02		      and	#%00000010
    127  fb39		       4a		      lsr
    128  fb3a
    129  fb3a				   .bug_movement_y_check
    130  fb3a		       c9 01		      cmp	#1
    131  fb3c		       d0 08		      bne	.bug_movement_y_down
    132  fb3e
    133  fb3e				   .bug_movement_y_up
    134  fb3e		       f6 ba		      inc	BugPosY,x
    135  fb40		       88		      dey
    136  fb41		       d0 fb		      bne	.bug_movement_y_up
    137  fb43
    138  fb43		       4c 4b fb 	      jmp	.bug_movement_boundary
    139  fb46
    140  fb46				   .bug_movement_y_down
    141  fb46		       d6 ba		      dec	BugPosY,x
    142  fb48		       88		      dey
    143  fb49		       d0 fb		      bne	.bug_movement_y_down
    144  fb4b
    145  fb4b				   .bug_movement_boundary
    146  fb4b		       b5 b8		      lda	BugPosX,x
    147  fb4d		       b4 ba		      ldy	BugPosY,x
    148  fb4f
    149  fb4f				   .bug_movement_boundary_left
    150  fb4f		       c9 18		      cmp	#BUG_BOUNDARY
    151  fb51		       b0 05		      bcs	.bug_movement_boundary_right
    152  fb53		       a9 18		      lda	#BUG_BOUNDARY
    153  fb55		       4c 5e fb 	      jmp	.bug_movement_boundary_top
    154  fb58
    155  fb58				   .bug_movement_boundary_right
    156  fb58		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    157  fb5a		       90 02		      bcc	.bug_movement_boundary_top
    158  fb5c		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    159  fb5e
    160  fb5e				   .bug_movement_boundary_top
    161  fb5e		       c0 18		      cpy	#BUG_BOUNDARY
    162  fb60		       b0 05		      bcs	.bug_movement_boundary_bottom
    163  fb62		       a0 18		      ldy	#BUG_BOUNDARY
    164  fb64		       4c 6d fb 	      jmp	.bug_movement_store
    165  fb67
    166  fb67				   .bug_movement_boundary_bottom
    167  fb67		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    168  fb69		       90 02		      bcc	.bug_movement_store
    169  fb6b		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    170  fb6d
    171  fb6d				   .bug_movement_store
    172  fb6d		       95 b8		      sta	BugPosX,x
    173  fb6f		       94 ba		      sty	BugPosY,x
    174  fb71
    175  fb71				   .bug_movement_return
    176  fb71		       60		      rts
    177  fb72
    178  fb72				   BugCollision
    179  fb72
    180  fb72		       e0 01		      cpx	#1
    181  fb74		       f0 05		      beq	.bug_collision_m1
    182  fb76
    183  fb76				   .bug_collision_m0
    184  fb76							; Collision for M0 (V set)
    185  fb76		       24 00		      bit	CXM0P
    186  fb78		       70 06		      bvs	.bug_collision_active
    187  fb7a		       60		      rts
    188  fb7b
    189  fb7b				   .bug_collision_m1
    190  fb7b							; Collision for M1 (N set)
    191  fb7b		       24 01		      bit	CXM1P
    192  fb7d		       30 01		      bmi	.bug_collision_active
    193  fb7f		       60		      rts
    194  fb80
    195  fb80				   .bug_collision_active
    196  fb80
    197  fb80							; Reduce players score
    198  fb80		       a5 94		      lda	ScoreValue
    199  fb82		       f0 02		      beq	.bug_collision_score_skip
    200  fb84		       c6 94		      dec	ScoreValue
    201  fb86				   .bug_collision_score_skip
    202  fb86
    203  fb86							; Play sound
    204  fb86		       20 e3 fb 	      jsr	BugColSample
    205  fb89
    206  fb89		       60		      rts
    207  fb8a
    208  fb8a				   BugStunCollision
    209  fb8a
    210  fb8a		       e0 01		      cpx	#1
    211  fb8c		       f0 05		      beq	.bug_stun_collision_m1
    212  fb8e
    213  fb8e				   .bug_stun_collision_m0
    214  fb8e							; Collision for M0 (V set)
    215  fb8e		       24 00		      bit	CXM0P
    216  fb90		       70 06		      bvs	.bug_stun_collision_active
    217  fb92		       60		      rts
    218  fb93
    219  fb93				   .bug_stun_collision_m1
    220  fb93							; Collision for M1 (N set)
    221  fb93		       24 01		      bit	CXM1P
    222  fb95		       30 01		      bmi	.bug_stun_collision_active
    223  fb97		       60		      rts
    224  fb98
    225  fb98				   .bug_stun_collision_active
    226  fb98							; Add points to score
    227  fb98		       18		      clc
    228  fb99		       a5 95		      lda	ScoreValue+1
    229  fb9b		       69 04		      adc	#BUG_POINTS
    230  fb9d		       85 95		      sta	ScoreValue+1
    231  fb9f
    232  fb9f							; Reset bug
    233  fb9f		       20 e3 fa 	      jsr	BugReset
    234  fba2
    235  fba2							; Play sample
    236  fba2		       20 d2 fb 	      jsr	BugSample
    237  fba5
    238  fba5		       60		      rts
    239  fba6
    240  fba6							; Horizontal Positioning
    241  fba6
    242  fba6				   BugPosition
    243  fba6
    244  fba6		       a2 02		      ldx	#2
    245  fba8		       a5 b8		      lda	BugPosX+0
    246  fbaa		       20 00 f0 	      jsr	PosObject
    247  fbad
    248  fbad		       a2 03		      ldx	#3
    249  fbaf		       a5 b9		      lda	BugPosX+1
    250  fbb1		       20 00 f0 	      jsr	PosObject
    251  fbb4
    252  fbb4		       60		      rts
    253  fbb5
    254  fbb5							; Scanline Draw
    255  fbb5
    256  fbb5				   BugDrawStart
    257  fbb5
    258  fbb5		       a0 01		      ldy	#1
    259  fbb7				   .bug_draw_start_loop
    260  fbb7
    261  fbb7							; Set missile 0 & 1 to be 8 clock size
    262  fbb7		       b9 81 00 	      lda	NuSiz0,y
    263  fbba		       09 30		      ora	#%00110000
    264  fbbc		       99 81 00 	      sta	NuSiz0,y
    265  fbbf		       99 04 00 	      sta	NUSIZ0,y
    266  fbc2
    267  fbc2							; Setup half scanline positions
    268  fbc2		       b9 ba 00 	      lda	BugPosY,y
    269  fbc5		       4a		      lsr
    270  fbc6		       99 bc 00 	      sta	BugDrawPosBottom,y
    271  fbc9
    272  fbc9		       69 04		      adc	#BUG_SIZE/2
    273  fbcb		       99 be 00 	      sta	BugDrawPosTop,y
    274  fbce
    275  fbce		       88		      dey
    276  fbcf		       10 e6		      bpl	.bug_draw_start_loop
    277  fbd1
    278  fbd1		       60		      rts
    279  fbd2
    280  fbd2				   BugSample
    281  fbd2		       a9 1e		      lda	#BUG_SAMPLE_LEN
    282  fbd4		       85 93		      sta	SampleStep
    283  fbd6		       a9 03		      lda	#BUG_SAMPLE_C
    284  fbd8		       85 16		      sta	AUDC1
    285  fbda		       a9 14		      lda	#BUG_SAMPLE_F
    286  fbdc		       85 18		      sta	AUDF1
    287  fbde		       a9 04		      lda	#BUG_SAMPLE_V
    288  fbe0		       85 1a		      sta	AUDV1
    289  fbe2		       60		      rts
    290  fbe3
    291  fbe3				   BugColSample
    292  fbe3		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    293  fbe5		       85 93		      sta	SampleStep
    294  fbe7		       a9 08		      lda	#BUG_COL_SAMPLE_C
    295  fbe9		       85 16		      sta	AUDC1
    296  fbeb		       a9 08		      lda	#BUG_COL_SAMPLE_F
    297  fbed		       85 18		      sta	AUDF1
    298  fbef		       a9 03		      lda	#BUG_COL_SAMPLE_V
    299  fbf1		       85 1a		      sta	AUDV1
    300  fbf3		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fbf4					      include	"objects/swatter.asm"
      1  fbf4							;==================
      2  fbf4							; Swatter (player1)
      3  fbf4							;==================
      4  fbf4
      5  fbf4							; Constants
      6  fbf4
      7  fbf4		       00 30	   SWATTER_COLOR =	#$30
      8  fbf4		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fbf4		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fbf4		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fbf4
     12  fbf4		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fbf4		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fbf4
     15  fbf4		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fbf4		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fbf4
     18  fbf4		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fbf4		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fbf4		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fbf4
     22  fbf4		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fbf4		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fbf4		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fbf4		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fbf4		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fbf4
     28  fbf4		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fbf4		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fbf4		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fbf4		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fbf4
     33  fbf4		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fbf4		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fbf4		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fbf4		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fbf4
     38  fbf4							; Initialization
     39  fbf4
     40  fbf4				   SwatterInit
     41  fbf4
     42  fbf4		       20 cb fc 	      jsr	SwatterReset
     43  fbf7
     44  fbf7		       60		      rts
     45  fbf8
     46  fbf8							; Frame Update
     47  fbf8
     48  fbf8				   SwatterUpdate
     49  fbf8
     50  fbf8							; Check b/w
     51  fbf8		       ad 82 02 	      lda	SWCHB
     52  fbfb					      REPEAT	4
     53  fbfb		       4a		      lsr
     52  fbfb					      REPEND
     53  fbfc		       4a		      lsr
     52  fbfc					      REPEND
     53  fbfd		       4a		      lsr
     52  fbfd					      REPEND
     53  fbfe		       4a		      lsr
     54  fbff					      REPEND
     55  fbff		       90 10		      bcc	.swatter_update_bw
     56  fc01
     57  fc01				   .swatter_update_color
     58  fc01		       a5 c2		      lda	SwatterState
     59  fc03		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     60  fc05		       d0 05		      bne	.swatter_update_color_hold
     61  fc07				   .swatter_update_color_active
     62  fc07		       a9 30		      lda	#SWATTER_COLOR
     63  fc09		       4c 1e fc 	      jmp	.swatter_update_color_set
     64  fc0c				   .swatter_update_color_hold
     65  fc0c		       a9 36		      lda	#SWATTER_HOLD_COLOR
     66  fc0e		       4c 1e fc 	      jmp	.swatter_update_color_set
     67  fc11
     68  fc11				   .swatter_update_bw
     69  fc11		       a5 c2		      lda	SwatterState
     70  fc13		       c9 80		      cmp	#SWATTER_STATE_HOLD
     71  fc15		       d0 05		      bne	.swatter_update_bw_active
     72  fc17				   .swatter_update_bw_hold
     73  fc17		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     74  fc19		       4c 1e fc 	      jmp	.swatter_update_color_set
     75  fc1c				   .swatter_update_bw_active
     76  fc1c		       a9 0e		      lda	#SWATTER_BW_COLOR
     77  fc1e
     78  fc1e				   .swatter_update_color_set
     79  fc1e		       85 c3		      sta	SwatterColor
     80  fc20
     81  fc20				   .swatter_update_hold_sample
     82  fc20		       a4 c2		      ldy	SwatterState
     83  fc22		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fc24		       d0 0f		      bne	.swatter_update_state
     85  fc26
     86  fc26		       c6 ca		      dec	SwatterSampleCount
     87  fc28		       d0 0b		      bne	.swatter_update_state
     88  fc2a
     89  fc2a		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     90  fc2c		       85 ca		      sta	SwatterSampleCount
     91  fc2e
     92  fc2e		       c6 cb		      dec	SwatterSampleF
     93  fc30		       a4 cb		      ldy	SwatterSampleF
     94  fc32		       20 eb fc 	      jsr	SwatterHoldSample
     95  fc35
     96  fc35				   .swatter_update_state
     97  fc35		       a6 90		      ldx	FrameTimer+1
     98  fc37		       d0 2d		      bne	.swatter_update_collision
     99  fc39
    100  fc39		       a4 c2		      ldy	SwatterState
    101  fc3b		       c0 00		      cpy	#SWATTER_STATE_WAIT
    102  fc3d		       f0 0a		      beq	.swatter_update_state_wait
    103  fc3f
    104  fc3f		       c0 80		      cpy	#SWATTER_STATE_HOLD
    105  fc41		       f0 18		      beq	.swatter_update_state_hold
    106  fc43
    107  fc43							; Else we're at the end of the active state
    108  fc43		       20 cb fc 	      jsr	SwatterReset
    109  fc46		       4c 75 fc 	      jmp	.swatter_update_return
    110  fc49
    111  fc49				   .swatter_update_state_wait
    112  fc49		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    113  fc4b		       84 cb		      sty	SwatterSampleF
    114  fc4d		       20 eb fc 	      jsr	SwatterHoldSample
    115  fc50
    116  fc50		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    117  fc52		       85 ca		      sta	SwatterSampleCount
    118  fc54
    119  fc54		       a9 80		      lda	#SWATTER_STATE_HOLD
    120  fc56		       a6 c5		      ldx	SwatterHoldTime
    121  fc58		       4c 62 fc 	      jmp	.swatter_update_state_set
    122  fc5b
    123  fc5b				   .swatter_update_state_hold
    124  fc5b		       20 fa fc 	      jsr	SwatterActiveSample
    125  fc5e
    126  fc5e		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    127  fc60		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    128  fc62
    129  fc62				   .swatter_update_state_set
    130  fc62		       85 c2		      sta	SwatterState
    131  fc64		       86 90		      stx	FrameTimer+1
    132  fc66
    133  fc66				   .swatter_update_collision
    134  fc66							; Check 1 frame after active
    135  fc66		       a5 c2		      lda	SwatterState
    136  fc68		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    137  fc6a		       d0 09		      bne	.swatter_update_return
    138  fc6c		       a6 90		      ldx	FrameTimer+1
    139  fc6e		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    140  fc70		       d0 03		      bne	.swatter_update_return
    141  fc72
    142  fc72		       20 76 fc 	      jsr	SwatterCollision
    143  fc75
    144  fc75				   .swatter_update_return
    145  fc75		       60		      rts
    146  fc76
    147  fc76				   SwatterCollision
    148  fc76		       24 00		      bit	CXM0P
    149  fc78		       30 09		      bmi	.swatter_collision_m0
    150  fc7a
    151  fc7a		       24 01		      bit	CXM1P
    152  fc7c		       70 0a		      bvs	.swatter_collision_m1
    153  fc7e
    154  fc7e		       24 07		      bit	CXPPMM
    155  fc80		       30 0e		      bmi	.swatter_collision_p0
    156  fc82
    157  fc82		       60		      rts
    158  fc83
    159  fc83				   .swatter_collision_m0
    160  fc83		       a2 00		      ldx	#0
    161  fc85		       4c 8a fc 	      jmp	.swatter_collision_bug_reset
    162  fc88
    163  fc88				   .swatter_collision_m1
    164  fc88		       a2 01		      ldx	#1
    165  fc8a
    166  fc8a				   .swatter_collision_bug_reset
    167  fc8a		       20 e3 fa 	      jsr	BugReset
    168  fc8d		       4c a2 fc 	      jmp	.swatter_collision_active
    169  fc90
    170  fc90				   .swatter_collision_p0
    171  fc90
    172  fc90		       a5 94		      lda	ScoreValue
    173  fc92		       c5 c6		      cmp	SwatterHitDamage
    174  fc94		       90 08		      bcc	.swatter_collision_p0_zero
    175  fc96		       f0 06		      beq	.swatter_collision_p0_zero
    176  fc98
    177  fc98		       18		      clc
    178  fc99		       e5 c6		      sbc	SwatterHitDamage
    179  fc9b		       4c a0 fc 	      jmp	.swatter_collision_p0_set
    180  fc9e
    181  fc9e				   .swatter_collision_p0_zero
    182  fc9e		       a9 00		      lda	#0
    183  fca0
    184  fca0				   .swatter_collision_p0_set
    185  fca0		       85 94		      sta	ScoreValue
    186  fca2
    187  fca2				   .swatter_collision_active
    188  fca2		       20 0b fd 	      jsr	SwatterHitSample
    189  fca5
    190  fca5		       60		      rts
    191  fca6
    192  fca6				   SwatterPosition
    193  fca6
    194  fca6							; Set Position
    195  fca6		       a2 01		      ldx	#1	; Object (player1)
    196  fca8		       a5 c0		      lda	SwatterPos	; X Position
    197  fcaa		       20 00 f0 	      jsr	PosObject
    198  fcad
    199  fcad		       60		      rts
    200  fcae
    201  fcae							; Scanline Draw
    202  fcae
    203  fcae				   SwatterDrawStart
    204  fcae
    205  fcae							; Set player 1 to be quad size
    206  fcae		       a5 82		      lda	NuSiz1
    207  fcb0		       29 f8		      and	#%11111000
    208  fcb2		       09 07		      ora	#%00000111
    209  fcb4		       85 82		      sta	NuSiz1
    210  fcb6		       85 05		      sta	NUSIZ1
    211  fcb8
    212  fcb8							; Set sprite color
    213  fcb8		       a5 c3		      lda	SwatterColor
    214  fcba		       85 07		      sta	COLUP1
    215  fcbc
    216  fcbc							; Note: Doesn't need vertical delay
    217  fcbc
    218  fcbc							; Calculate starting position
    219  fcbc		       a5 c1		      lda	SwatterPos+1	; Y Position
    220  fcbe		       4a		      lsr
    221  fcbf		       18		      clc
    222  fcc0		       69 14		      adc	#SWATTER_SPRITE_SIZE
    223  fcc2		       85 c8		      sta	SwatterDrawPos
    224  fcc4
    225  fcc4							; Initialize sprite index
    226  fcc4		       a9 00		      lda	#0
    227  fcc6		       85 c7		      sta	SwatterIndex
    228  fcc8		       85 c9		      sta	SwatterLine
    229  fcca
    230  fcca		       60		      rts
    231  fccb
    232  fccb				   SwatterReset
    233  fccb							; Initialize Swatter State
    234  fccb		       a9 00		      lda	#SWATTER_STATE_WAIT
    235  fccd		       85 c2		      sta	SwatterState
    236  fccf
    237  fccf							; Set Wait Timer
    238  fccf		       20 13 f0 	      jsr	Random
    239  fcd2		       a5 86		      lda	Rand8
    240  fcd4		       29 3f		      and	#$3f
    241  fcd6		       18		      clc
    242  fcd7		       65 c4		      adc	SwatterWaitTime
    243  fcd9		       85 90		      sta	FrameTimer+1
    244  fcdb
    245  fcdb							; Set Random Position
    246  fcdb		       20 13 f0 	      jsr	Random
    247  fcde		       a5 86		      lda	Rand8	; X Position
    248  fce0		       29 7f		      and	#$7f
    249  fce2		       85 c0		      sta	SwatterPos+0
    250  fce4		       a5 87		      lda	Rand16	; Y Position
    251  fce6		       29 7e		      and	#$7e	; Ensure that Y position is even
    252  fce8		       85 c1		      sta	SwatterPos+1
    253  fcea
    254  fcea		       60		      rts
    255  fceb
    256  fceb				   SwatterHoldSample
    257  fceb		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    258  fced		       85 93		      sta	SampleStep
    259  fcef		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    260  fcf1		       85 16		      sta	AUDC1
    261  fcf3		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    262  fcf5		       85 1a		      sta	AUDV1
    263  fcf7
    264  fcf7		       84 18		      sty	AUDF1	; Store value of y as frequency
    265  fcf9
    266  fcf9		       60		      rts
    267  fcfa
    268  fcfa				   SwatterActiveSample
    269  fcfa		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    270  fcfc		       85 93		      sta	SampleStep
    271  fcfe		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    272  fd00		       85 16		      sta	AUDC1
    273  fd02		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    274  fd04		       85 18		      sta	AUDF1
    275  fd06		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    276  fd08		       85 1a		      sta	AUDV1
    277  fd0a		       60		      rts
    278  fd0b
    279  fd0b				   SwatterHitSample
    280  fd0b		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    281  fd0d		       85 93		      sta	SampleStep
    282  fd0f		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    283  fd11		       85 16		      sta	AUDC1
    284  fd13		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    285  fd15		       85 18		      sta	AUDF1
    286  fd17		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    287  fd19		       85 1a		      sta	AUDV1
    288  fd1b		       60		      rts
------- FILE game.asm
     22  fd1c
     23  fd1c							; Initialization
     24  fd1c
     25  fd1c				   GameInit
     26  fd1c
     27  fd1c							; Setup logic and kernel
      0  fd1c					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fd1c				   .POINTER   SET	VBlankPtr
      2  fd1c				   .ADDRESS   SET	GameVerticalBlank
      3  fd1c
      4  fd1c		       a9 5d		      LDA	#<.ADDRESS
      5  fd1e		       85 88		      STA	.POINTER
      6  fd20		       a9 fd		      LDA	#>.ADDRESS
      7  fd22		       85 89		      STA	.POINTER+1
      8  fd24
      0  fd24					      SET_POINTER	KernelPtr, GameKernel
      1  fd24				   .POINTER   SET	KernelPtr
      2  fd24				   .ADDRESS   SET	GameKernel
      3  fd24
      4  fd24		       a9 df		      LDA	#<.ADDRESS
      5  fd26		       85 8a		      STA	.POINTER
      6  fd28		       a9 fd		      LDA	#>.ADDRESS
      7  fd2a		       85 8b		      STA	.POINTER+1
      8  fd2c
      0  fd2c					      SET_POINTER	OverScanPtr, GameOverScan
      1  fd2c				   .POINTER   SET	OverScanPtr
      2  fd2c				   .ADDRESS   SET	GameOverScan
      3  fd2c
      4  fd2c		       a9 87		      LDA	#<.ADDRESS
      5  fd2e		       85 8c		      STA	.POINTER
      6  fd30		       a9 fd		      LDA	#>.ADDRESS
      7  fd32		       85 8d		      STA	.POINTER+1
      8  fd34
     31  fd34
     32  fd34							; Mute Audio
     33  fd34		       a9 00		      lda	#0
     34  fd36							;    sta AUDC0
     35  fd36							;    sta AUDV0
     36  fd36							;    sta AUDF0
     37  fd36		       85 16		      sta	AUDC1
     38  fd38		       85 1a		      sta	AUDV1
     39  fd3a		       85 18		      sta	AUDF1
     40  fd3c		       85 93		      sta	SampleStep
     41  fd3e
     42  fd3e							; Load Audio Settings
     43  fd3e		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fd40		       85 19		      sta	AUDV0
     45  fd42
     46  fd42							; Make it so that we play the first note immediately
     47  fd42		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fd44		       85 92		      sta	AudioStep
     49  fd46		       a9 02		      lda	#2
     50  fd48		       85 8f		      sta	FrameTimer
     51  fd4a
     52  fd4a							; Reset NuSiz
     53  fd4a							;    lda #0
     54  fd4a							;    sta NuSiz0
     55  fd4a							;    sta NUSIZ0
     56  fd4a							;    sta NuSiz1
     57  fd4a							;    sta NUSIZ1
     58  fd4a
     59  fd4a							; Initialize Objects
     60  fd4a		       20 a6 f5 	      jsr	LevelInit
     61  fd4d		       20 54 f6 	      jsr	ScoreInit
     62  fd50		       20 fc f7 	      jsr	SpiderInit
     63  fd53		       20 5e f9 	      jsr	LineInit
     64  fd56		       20 da fa 	      jsr	BugInit
     65  fd59		       20 f4 fb 	      jsr	SwatterInit
     66  fd5c
     67  fd5c		       60		      rts
     68  fd5d
     69  fd5d				   GameVerticalBlank
     70  fd5d
     71  fd5d							; Refresh random values
     72  fd5d		       20 13 f0 	      jsr	Random
     73  fd60
     74  fd60							; Update Objects
     75  fd60		       20 bc f5 	      jsr	LevelUpdate
     76  fd63		       20 11 f8 	      jsr	SpiderUpdate
     77  fd66		       20 71 f9 	      jsr	LineUpdate
     78  fd69		       20 f7 fa 	      jsr	BugUpdate
     79  fd6c		       20 f8 fb 	      jsr	SwatterUpdate
     80  fd6f		       20 5d f6 	      jsr	ScoreUpdate
     81  fd72
     82  fd72							; Reset Collisions
     83  fd72		       85 2c		      sta	CXCLR
     84  fd74
     85  fd74							; Clear horizontal movement
     86  fd74		       85 2b		      sta	HMCLR
     87  fd76
     88  fd76							; Update Positions
     89  fd76		       20 2e f9 	      jsr	SpiderPosition
     90  fd79		       20 73 fa 	      jsr	LinePosition
     91  fd7c		       20 a6 fb 	      jsr	BugPosition
     92  fd7f		       20 a6 fc 	      jsr	SwatterPosition
     93  fd82
     94  fd82							; Set final x positions
     95  fd82		       85 02		      sta	WSYNC
     96  fd84		       85 2a		      sta	HMOVE
     97  fd86
     98  fd86		       60		      rts
     99  fd87
    100  fd87				   GameOverScan
    101  fd87
    102  fd87							; Audio Routines
    103  fd87		       20 a3 fd 	      jsr	GameAudio
    104  fd8a		       20 91 fd 	      jsr	GameSample
    105  fd8d
    106  fd8d							; State Routines
    107  fd8d		       20 d7 fd 	      jsr	GameDeath
    108  fd90
    109  fd90		       60		      rts
    110  fd91
    111  fd91				   GameSample
    112  fd91
    113  fd91		       a6 93		      ldx	SampleStep
    114  fd93		       f0 0b		      beq	.game_sample_return
    115  fd95
    116  fd95		       ca		      dex
    117  fd96		       d0 08		      bne	.game_sample_return
    118  fd98
    119  fd98				   .game_sample_mute
    120  fd98		       a9 00		      lda	#0
    121  fd9a		       85 1a		      sta	AUDV1
    122  fd9c		       85 18		      sta	AUDF1
    123  fd9e		       85 16		      sta	AUDC1
    124  fda0
    125  fda0				   .game_sample_return
    126  fda0		       86 93		      stx	SampleStep
    127  fda2		       60		      rts
    128  fda3
    129  fda3				   GameAudio
    130  fda3
    131  fda3		       a6 8f		      ldx	FrameTimer
    132  fda5		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    133  fda7		       f0 25		      beq	.game_audio_mute_note
    134  fda9		       e0 00		      cpx	#0
    135  fdab		       d0 29		      bne	.game_audio_return
    136  fdad
    137  fdad							; Reset Timer
    138  fdad		       a2 09		      ldx	#GAME_AUDIO_STEP
    139  fdaf		       86 8f		      stx	FrameTimer
    140  fdb1
    141  fdb1				   .game_audio_play
    142  fdb1
    143  fdb1							; Increment melody position
    144  fdb1		       a4 92		      ldy	AudioStep
    145  fdb3		       c8		      iny
    146  fdb4
    147  fdb4		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    148  fdb6		       d0 02		      bne	.game_audio_play_note
    149  fdb8
    150  fdb8							; Loop our audio step
    151  fdb8		       a0 00		      ldy	#0
    152  fdba
    153  fdba				   .game_audio_play_note
    154  fdba
    155  fdba							; Save current position
    156  fdba		       84 92		      sty	AudioStep
    157  fdbc
    158  fdbc							; Melody Line
    159  fdbc		       b9 c4 fe 	      lda	GameAudio0,y
    160  fdbf		       c9 ff		      cmp	#$FF
    161  fdc1		       f0 0b		      beq	.game_audio_mute_note
    162  fdc3		       85 17		      sta	AUDF0
    163  fdc5		       a9 06		      lda	#GAME_AUDIO_TONE
    164  fdc7		       85 15		      sta	AUDC0
    165  fdc9		       a9 02		      lda	#GAME_AUDIO_VOLUME
    166  fdcb		       85 19		      sta	AUDV0
    167  fdcd
    168  fdcd		       60		      rts
    169  fdce
    170  fdce				   .game_audio_mute_note
    171  fdce
    172  fdce		       a9 00		      lda	#0
    173  fdd0		       85 17		      sta	AUDF0
    174  fdd2		       85 15		      sta	AUDC0
    175  fdd4		       85 19		      sta	AUDV0
    176  fdd6
    177  fdd6				   .game_audio_return
    178  fdd6		       60		      rts
    179  fdd7
    180  fdd7				   GameDeath
    181  fdd7		       a5 94		      lda	ScoreValue+0
    182  fdd9		       d0 03		      bne	.game_death_return
    183  fddb
    184  fddb							; Show Game Over Screen
    185  fddb		       20 e4 fe 	      jsr	OverInit
    186  fdde
    187  fdde				   .game_death_return
    188  fdde		       60		      rts
    189  fddf
    190  fddf				   GameKernel
    191  fddf
    192  fddf							; Turn on display
    193  fddf		       a9 00		      lda	#0
    194  fde1		       85 01		      sta	VBLANK
    195  fde3
    196  fde3				   .game_kernel_score
    197  fde3
    198  fde3							; Draw Score on top first
    199  fde3		       20 cf f6 	      jsr	ScoreDraw
    200  fde6
    201  fde6				   .game_kernel_objects_start
    202  fde6
    203  fde6							; Setup Drawing Objects
    204  fde6		       20 e9 f7 	      jsr	WebDrawStart
    205  fde9		       20 36 f9 	      jsr	SpiderDrawStart
    206  fdec		       20 ae fc 	      jsr	SwatterDrawStart
    207  fdef		       20 7b fa 	      jsr	LineDrawStart
    208  fdf2		       20 b5 fb 	      jsr	BugDrawStart
    209  fdf5
    210  fdf5							; Start Scanline Counter
    211  fdf5		       a2 a8		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    212  fdf7							; The extra 5 is for processing overflow
    213  fdf7
    214  fdf7							; Half scanline counter in Temp+1
    215  fdf7		       a9 56		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    216  fdf9		       85 84		      sta	Temp+1
    217  fdfb
    218  fdfb							; 6 line counter
    219  fdfb		       a9 00		      lda	#0
    220  fdfd		       85 85		      sta	Temp+2
    221  fdff
    222  fdff							; Load background color
    223  fdff		       a5 a1		      lda	WebColor+0
    224  fe01		       85 09		      sta	COLUBK
    225  fe03
    226  fe03							;sta WSYNC
    227  fe03
    228  fe03				   .game_kernel_objects
    229  fe03
    230  fe03		       a5 85		      lda	Temp+2
    231  fe05		       d0 1a		      bne	.game_kernel_missle
    232  fe07
    233  fe07		       a9 03		      lda	#3
    234  fe09		       85 85		      sta	Temp+2
    235  fe0b
    236  fe0b				   .game_kernel_web
    237  fe0b
    238  fe0b				   .game_kernel_web_pf
    239  fe0b							; Web
    240  fe0b
    241  fe0b		       a4 a0		      ldy	WebIndex
    242  fe0d
    243  fe0d							; Load Image
    244  fe0d		       b9 3e f1 	      lda	WebImagePF0,y
    245  fe10		       85 0d		      sta	PF0
    246  fe12		       b9 5a f1 	      lda	WebImagePF1,y
    247  fe15		       85 0e		      sta	PF1
    248  fe17		       b9 76 f1 	      lda	WebImagePF2,y
    249  fe1a		       85 0f		      sta	PF2
    250  fe1c
    251  fe1c		       e6 a0		      inc	WebIndex
    252  fe1e
    253  fe1e		       4c 3f fe 	      jmp	.game_kernel_line
    254  fe21
    255  fe21				   .game_kernel_missle
    256  fe21
    257  fe21							; Preload half-line
    258  fe21		       a5 84		      lda	Temp+1
    259  fe23
    260  fe23				   .game_kernel_missle_bug_0
    261  fe23							; First Bug
    262  fe23
    263  fe23		       a0 00		      ldy	#%00000000
    264  fe25
    265  fe25							; Top
    266  fe25		       c5 be		      cmp	BugDrawPosTop+0
    267  fe27		       b0 06		      bcs	.game_kernel_missle_bug_0_off
    268  fe29
    269  fe29							; Bottom
    270  fe29		       c5 bc		      cmp	BugDrawPosBottom+0
    271  fe2b		       90 02		      bcc	.game_kernel_missle_bug_0_off
    272  fe2d
    273  fe2d				   .game_kernel_missle_bug_0_on
    274  fe2d		       a0 02		      ldy	#%00000010
    275  fe2f
    276  fe2f				   .game_kernel_missle_bug_0_off
    277  fe2f		       84 1d		      sty	ENAM0
    278  fe31
    279  fe31				   .game_kernel_missle_bug_1
    280  fe31							; Second Bug
    281  fe31
    282  fe31		       a0 00		      ldy	#%00000000
    283  fe33
    284  fe33							; Top
    285  fe33		       c5 bf		      cmp	BugDrawPosTop+1
    286  fe35		       b0 06		      bcs	.game_kernel_missle_bug_1_off
    287  fe37
    288  fe37							; Bottom
    289  fe37		       c5 bd		      cmp	BugDrawPosBottom+1
    290  fe39		       90 02		      bcc	.game_kernel_missle_bug_1_off
    291  fe3b
    292  fe3b				   .game_kernel_missle_bug_1_on
    293  fe3b		       a0 02		      ldy	#%00000010
    294  fe3d
    295  fe3d				   .game_kernel_missle_bug_1_off
    296  fe3d		       84 1e		      sty	ENAM1
    297  fe3f
    298  fe3f							;jmp .game_kernel_line_skip
    299  fe3f
    300  fe3f				   .game_kernel_line
    301  fe3f							; Line
    302  fe3f
    303  fe3f		       24 ae		      bit	LineEnabled
    304  fe41		       10 10		      bpl	.game_kernel_line_skip
    305  fe43
    306  fe43							; Load half-line
    307  fe43		       a5 84		      lda	Temp+1
    308  fe45
    309  fe45		       a0 00		      ldy	#%00000000
    310  fe47
    311  fe47							; Top
    312  fe47		       c5 b4		      cmp	LineDrawPos+1
    313  fe49		       b0 06		      bcs	.game_kernel_line_set
    314  fe4b
    315  fe4b							; Bottom
    316  fe4b		       c5 b3		      cmp	LineDrawPos+0
    317  fe4d		       90 02		      bcc	.game_kernel_line_set
    318  fe4f
    319  fe4f		       a0 02		      ldy	#%00000010
    320  fe51				   .game_kernel_line_set
    321  fe51		       84 1f		      sty	ENABL
    322  fe53
    323  fe53				   .game_kernel_line_skip
    324  fe53
    325  fe53							; Next Line
    326  fe53		       ca		      dex
    327  fe54							;sta WSYNC
    328  fe54
    329  fe54				   .game_kernel_sprite
    330  fe54
    331  fe54				   .game_kernel_sprite_spider
    332  fe54							; Spider
    333  fe54
    334  fe54		       a4 a9		      ldy	SpiderIndex
    335  fe56		       30 1a		      bmi	.game_kernel_sprite_spider_load	; At end of sprite
    336  fe58		       d0 06		      bne	.game_kernel_sprite_spider_draw	; Currently drawing (not zero)
    337  fe5a
    338  fe5a							; Check y position to see if we should start
    339  fe5a		       a5 84		      lda	Temp+1	; Use half scanline
    340  fe5c		       e5 aa		      sbc	SpiderDrawPos
    341  fe5e		       10 12		      bpl	.game_kernel_sprite_spider_load
    342  fe60
    343  fe60				   .game_kernel_sprite_spider_draw
    344  fe60		       b1 a3		      lda	(SpiderPtr),y
    345  fe62		       85 ab		      sta	SpiderLine
    346  fe64
    347  fe64							; Increment sprite index
    348  fe64		       e6 a9		      inc	SpiderIndex
    349  fe66
    350  fe66							; See if we're at the end
    351  fe66		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    352  fe68		       d0 0a		      bne	.game_kernel_sprite_spider_line
    353  fe6a		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    354  fe6c		       84 a9		      sty	SpiderIndex
    355  fe6e		       a9 00		      lda	#0
    356  fe70		       85 ab		      sta	SpiderLine
    357  fe72
    358  fe72				   .game_kernel_sprite_spider_load
    359  fe72		       a5 ab		      lda	SpiderLine
    360  fe74				   .game_kernel_sprite_spider_line
    361  fe74		       85 1b		      sta	GRP0
    362  fe76
    363  fe76				   .game_kernel_sprite_swatter
    364  fe76							; Swatter
    365  fe76
    366  fe76							; Check if wait state
    367  fe76		       24 c2		      bit	SwatterState
    368  fe78		       10 1b		      bpl	.game_kernel_sprite_swatter_load
    369  fe7a
    370  fe7a		       a4 c7		      ldy	SwatterIndex
    371  fe7c		       30 17		      bmi	.game_kernel_sprite_swatter_load	; At end of sprite
    372  fe7e		       d0 06		      bne	.game_kernel_sprite_swatter_draw	; Currently drawing (not zero)
    373  fe80
    374  fe80							; Check y position to see if we should start
    375  fe80		       a5 84		      lda	Temp+1	; Use half scanline
    376  fe82		       e5 c8		      sbc	SwatterDrawPos
    377  fe84		       10 0f		      bpl	.game_kernel_sprite_swatter_load
    378  fe86
    379  fe86				   .game_kernel_sprite_swatter_draw
    380  fe86		       b9 c2 f1 	      lda	SwatterSprite,y
    381  fe89		       85 c9		      sta	SwatterLine
    382  fe8b
    383  fe8b							; Increment index
    384  fe8b		       e6 c7		      inc	SwatterIndex
    385  fe8d
    386  fe8d							; See if we're at the end
    387  fe8d		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    388  fe8f		       d0 06		      bne	.game_kernel_sprite_swatter_line
    389  fe91		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    390  fe93		       84 c7		      sty	SwatterIndex
    391  fe95
    392  fe95				   .game_kernel_sprite_swatter_load
    393  fe95		       a5 c9		      lda	SwatterLine
    394  fe97				   .game_kernel_sprite_swatter_line
    395  fe97		       85 1c		      sta	GRP1
    396  fe99
    397  fe99		       85 02		      sta	WSYNC
    398  fe9b
    399  fe9b				   .game_kernel_sprite_end
    400  fe9b
    401  fe9b							; New line, decrement half scanline, and increment 3 line counter
    402  fe9b		       c6 84		      dec	Temp+1
    403  fe9d		       c6 85		      dec	Temp+2
    404  fe9f		       ca		      dex
    405  fea0		       f0 03		      beq	.game_kernel_clean
    406  fea2		       4c 03 fe 	      jmp	.game_kernel_objects
    407  fea5
    408  fea5				   .game_kernel_clean
    409  fea5
    410  fea5		       85 02		      sta	WSYNC
    411  fea7
    412  fea7		       a9 00		      lda	#0
    413  fea9		       85 09		      sta	COLUBK
    414  feab		       85 08		      sta	COLUPF
    415  fead		       85 06		      sta	COLUP0
    416  feaf		       85 07		      sta	COLUP1
    417  feb1		       85 0d		      sta	PF0
    418  feb3		       85 0e		      sta	PF1
    419  feb5		       85 0f		      sta	PF2
    420  feb7		       85 1b		      sta	GRP0
    421  feb9		       85 1c		      sta	GRP1
    422  febb		       85 1d		      sta	ENAM0
    423  febd		       85 1e		      sta	ENAM1
    424  febf		       85 1f		      sta	ENABL
    425  fec1
    426  fec1		       85 02		      sta	WSYNC
    427  fec3
    428  fec3				   .game_kernel_return
    429  fec3		       60		      rts
    430  fec4
    431  fec4				   GameAudio0
    432  fec4		       0d		      .byte.b	#13	; D
    433  fec5		       ff		      .byte.b	#$FF
    434  fec6		       0f		      .byte.b	#15	; B
    435  fec7		       ff		      .byte.b	#$FF
    436  fec8		       0d		      .byte.b	#13	; D
    437  fec9		       ff		      .byte.b	#$FF
    438  feca		       0f		      .byte.b	#15	; B
    439  fecb		       ff		      .byte.b	#$FF
    440  fecc		       0d		      .byte.b	#13	; D
    441  fecd		       0d		      .byte.b	#13	; D
    442  fece		       0f		      .byte.b	#15	; B
    443  fecf		       ff		      .byte.b	#$FF
    444  fed0		       0c		      .byte.b	#12	; D#
    445  fed1		       ff		      .byte.b	#$FF
    446  fed2		       0f		      .byte.b	#15	; B
    447  fed3		       ff		      .byte.b	#$FF
    448  fed4		       0b		      .byte.b	#11	; E
    449  fed5		       ff		      .byte.b	#$FF
    450  fed6		       0e		      .byte.b	#14	; C#
    451  fed7		       ff		      .byte.b	#$FF
    452  fed8		       0b		      .byte.b	#11
    453  fed9		       ff		      .byte.b	#$FF
    454  feda		       0e		      .byte.b	#14
    455  fedb		       ff		      .byte.b	#$FF
    456  fedc		       0b		      .byte.b	#11
    457  fedd		       0b		      .byte.b	#11
    458  fede		       0e		      .byte.b	#14
    459  fedf		       ff		      .byte.b	#$FF
    460  fee0		       0b		      .byte.b	#11
    461  fee1		       ff		      .byte.b	#$FF
    462  fee2		       0e		      .byte.b	#14
    463  fee3		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fee4					      include	"over.asm"
      1  fee4							;================
      2  fee4							; Constants
      3  fee4							;================
      4  fee4
      5  fee4		       00 00	   OVER_BG_COLOR =	#$00
      6  fee4		       00 44	   OVER_FG_COLOR =	#$44
      7  fee4		       00 06	   OVER_FG_BW_COLOR =	#$06
      8  fee4
      9  fee4		       00 07	   OVER_AUDIO_TONE =	7
     10  fee4		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     11  fee4		       00 06	   OVER_AUDIO_LENGTH =	6
     12  fee4		       00 10	   OVER_AUDIO_STEP =	16
     13  fee4
     14  fee4		       00 09	   OVER_IMAGE_SIZE =	9
     15  fee4		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     16  fee4		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     17  fee4		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     18  fee4
     19  fee4				   OverInit
     20  fee4
     21  fee4							; Setup logic and kernel
      0  fee4					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fee4				   .POINTER   SET	VBlankPtr
      2  fee4				   .ADDRESS   SET	OverVerticalBlank
      3  fee4
      4  fee4		       a9 15		      LDA	#<.ADDRESS
      5  fee6		       85 88		      STA	.POINTER
      6  fee8		       a9 ff		      LDA	#>.ADDRESS
      7  feea		       85 89		      STA	.POINTER+1
      8  feec
      0  feec					      SET_POINTER	KernelPtr, OverKernel
      1  feec				   .POINTER   SET	KernelPtr
      2  feec				   .ADDRESS   SET	OverKernel
      3  feec
      4  feec		       a9 71		      LDA	#<.ADDRESS
      5  feee		       85 8a		      STA	.POINTER
      6  fef0		       a9 ff		      LDA	#>.ADDRESS
      7  fef2		       85 8b		      STA	.POINTER+1
      8  fef4
      0  fef4					      SET_POINTER	OverScanPtr, OverOverScan
      1  fef4				   .POINTER   SET	OverScanPtr
      2  fef4				   .ADDRESS   SET	OverOverScan
      3  fef4
      4  fef4		       a9 2f		      LDA	#<.ADDRESS
      5  fef6		       85 8c		      STA	.POINTER
      6  fef8		       a9 ff		      LDA	#>.ADDRESS
      7  fefa		       85 8d		      STA	.POINTER+1
      8  fefc
     25  fefc
     26  fefc							; Load audio settings
     27  fefc		       a9 07		      lda	#OVER_AUDIO_TONE
     28  fefe		       85 15		      sta	AUDC0
     29  ff00							;lda #OVER_AUDIO_VOLUME
     30  ff00							;sta AUDV0
     31  ff00		       a9 00		      lda	#0
     32  ff02		       85 16		      sta	AUDC1
     33  ff04		       85 1a		      sta	AUDV1
     34  ff06
     35  ff06							; Set initial button state
     36  ff06							;lda #0
     37  ff06		       85 91		      sta	InputState
     38  ff08
     39  ff08							; Setup frame counters
     40  ff08		       a9 01		      lda	#1
     41  ff0a		       85 8f		      sta	FrameTimer
     42  ff0c		       a9 10		      lda	#OVER_AUDIO_STEP
     43  ff0e		       85 93		      sta	SampleStep
     44  ff10		       a9 06		      lda	#OVER_AUDIO_LENGTH
     45  ff12		       85 92		      sta	AudioStep
     46  ff14
     47  ff14		       60		      rts
     48  ff15
     49  ff15				   OverVerticalBlank
     50  ff15		       20 5d f6 	      jsr	ScoreUpdate
     51  ff18
     52  ff18							; Load Colors
     53  ff18		       a9 00		      lda	#OVER_BG_COLOR
     54  ff1a		       85 09		      sta	COLUBK
     55  ff1c
     56  ff1c							; Check b/w
     57  ff1c		       ad 82 02 	      lda	SWCHB
     58  ff1f					      REPEAT	4
     59  ff1f		       4a		      lsr
     58  ff1f					      REPEND
     59  ff20		       4a		      lsr
     58  ff20					      REPEND
     59  ff21		       4a		      lsr
     58  ff21					      REPEND
     59  ff22		       4a		      lsr
     60  ff23					      REPEND
     61  ff23		       90 05		      bcc	.over_bw
     62  ff25
     63  ff25				   .over_color
     64  ff25		       a9 44		      lda	#OVER_FG_COLOR
     65  ff27		       85 08		      sta	COLUPF
     66  ff29
     67  ff29		       60		      rts
     68  ff2a
     69  ff2a				   .over_bw
     70  ff2a							; Load b/w Colors
     71  ff2a		       a9 06		      lda	#OVER_FG_BW_COLOR
     72  ff2c		       85 08		      sta	COLUPF
     73  ff2e
     74  ff2e		       60		      rts
     75  ff2f
     76  ff2f				   OverOverScan
     77  ff2f		       20 36 ff 	      jsr	OverAudio
     78  ff32		       20 5c ff 	      jsr	OverState
     79  ff35		       60		      rts
     80  ff36
     81  ff36				   OverAudio
     82  ff36
     83  ff36		       a5 8f		      lda	FrameTimer
     84  ff38		       d0 21		      bne	.over_audio_return
     85  ff3a
     86  ff3a							; Reset Timer
     87  ff3a					      REPEAT	3
     88  ff3a		       e6 93		      inc	SampleStep
     87  ff3a					      REPEND
     88  ff3c		       e6 93		      inc	SampleStep
     87  ff3c					      REPEND
     88  ff3e		       e6 93		      inc	SampleStep
     89  ff40					      REPEND
     90  ff40		       a5 93		      lda	SampleStep
     91  ff42		       85 8f		      sta	FrameTimer
     92  ff44
     93  ff44				   .over_audio_play
     94  ff44
     95  ff44							; Increment melody position
     96  ff44		       a4 92		      ldy	AudioStep
     97  ff46		       f0 0d		      beq	.over_audio_mute_note
     98  ff48		       c6 92		      dec	AudioStep
     99  ff4a		       88		      dey
    100  ff4b
    101  ff4b				   .over_audio_play_note
    102  ff4b
    103  ff4b							; Melody Line
    104  ff4b		       b9 c3 ff 	      lda	OverAudio0,y
    105  ff4e		       85 17		      sta	AUDF0
    106  ff50		       a9 06		      lda	#OVER_AUDIO_VOLUME
    107  ff52		       85 19		      sta	AUDV0
    108  ff54
    109  ff54		       60		      rts
    110  ff55
    111  ff55				   .over_audio_mute_note
    112  ff55		       a9 00		      lda	#0
    113  ff57		       85 17		      sta	AUDF0
    114  ff59		       85 19		      sta	AUDV0
    115  ff5b
    116  ff5b				   .over_audio_return
    117  ff5b		       60		      rts
    118  ff5c
    119  ff5c				   OverState
    120  ff5c
    121  ff5c							; Check to see if audio has finished
    122  ff5c		       a5 92		      lda	AudioStep
    123  ff5e		       d0 10		      bne	.over_state_return
    124  ff60
    125  ff60							; Check if Fire Button on controller 1 is released
    126  ff60		       a5 0c		      lda	INPT4
    127  ff62		       30 05		      bmi	.over_state_check
    128  ff64
    129  ff64				   .over_state_on
    130  ff64		       a9 01		      lda	#1
    131  ff66		       85 91		      sta	InputState
    132  ff68		       60		      rts
    133  ff69
    134  ff69				   .over_state_check
    135  ff69		       a5 91		      lda	InputState
    136  ff6b		       f0 03		      beq	.over_state_return
    137  ff6d
    138  ff6d				   .over_state_next
    139  ff6d							; Button is released, load title screen
    140  ff6d		       20 6a f3 	      jsr	TitleInit
    141  ff70
    142  ff70				   .over_state_return
    143  ff70		       60		      rts
    144  ff71
    145  ff71				   OverKernel
    146  ff71
    147  ff71							; Turn on display
    148  ff71		       a9 00		      lda	#0
    149  ff73		       85 01		      sta	VBLANK
    150  ff75
    151  ff75				   .over_kernel_score
    152  ff75
    153  ff75							; Draw Score on top first (no update)
    154  ff75		       20 cf f6 	      jsr	ScoreDraw
    155  ff78
    156  ff78				   .over_kernel_init
    157  ff78							; Playfield Control
    158  ff78		       a5 80		      lda	CtrlPf
    159  ff7a		       29 fd		      and	#%11111101	; Use playfield foreground color
    160  ff7c		       09 01		      ora	#%00000001	; Set mirroring
    161  ff7e		       85 80		      sta	CtrlPf
    162  ff80		       85 0a		      sta	CTRLPF
    163  ff82
    164  ff82				   .over_kernel_top_padding
    165  ff82							; Top Padding
    166  ff82		       20 a1 ff 	      jsr	OverPadding
    167  ff85
    168  ff85				   .over_kernel_image
    169  ff85		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    170  ff87
    171  ff87				   .over_kernel_image_next
    172  ff87		       bd ba ff 	      lda	OverImagePF2,x
    173  ff8a		       85 0f		      sta	PF2
    174  ff8c		       bd b1 ff 	      lda	OverImagePF1,x
    175  ff8f		       85 0e		      sta	PF1
    176  ff91							;    lda OverImagePF0,x
    177  ff91							;    sta PF0
    178  ff91
    179  ff91		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    180  ff93				   .over_kernel_image_loop
    181  ff93		       85 02		      sta	WSYNC
    182  ff95		       88		      dey
    183  ff96		       d0 fb		      bne	.over_kernel_image_loop
    184  ff98
    185  ff98		       ca		      dex
    186  ff99		       10 ec		      bpl	.over_kernel_image_next
    187  ff9b
    188  ff9b				   .over_kernel_bottom_padding
    189  ff9b							; Bottom Padding
    190  ff9b		       20 a1 ff 	      jsr	OverPadding
    191  ff9e
    192  ff9e				   .over_kernel_return
    193  ff9e		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    194  ffa0		       60		      rts
    195  ffa1
    196  ffa1				   OverPadding
    197  ffa1		       a9 00		      lda	#0
    198  ffa3		       85 0d		      sta	PF0
    199  ffa5		       85 0e		      sta	PF1
    200  ffa7		       85 0f		      sta	PF2
    201  ffa9
    202  ffa9		       a2 32		      ldx	#OVER_IMAGE_PADDING
    203  ffab				   .over_padding_loop
    204  ffab		       85 02		      sta	WSYNC
    205  ffad		       ca		      dex
    206  ffae		       d0 fb		      bne	.over_padding_loop
    207  ffb0
    208  ffb0		       60		      rts
    209  ffb1
    210  ffb1				   OverAssets
    211  ffb1
    212  ffb1							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ffb1					      include	"over_image.asm"
      1  ffb1							;OverImagePF0:
      2  ffb1							;    .BYTE %00000000
      3  ffb1							;    .BYTE %00000000
      4  ffb1							;    .BYTE %00000000
      5  ffb1							;    .BYTE %00000000
      6  ffb1							;    .BYTE %00000000
      7  ffb1							;    .BYTE %00000000
      8  ffb1							;    .BYTE %00000000
      9  ffb1							;    .BYTE %00000000
     10  ffb1							;    .BYTE %00000000
     11  ffb1
     12  ffb1				   OverImagePF1
     13  ffb1		       0c		      .BYTE.b	%00001100
     14  ffb2		       13		      .BYTE.b	%00010011
     15  ffb3		       20		      .BYTE.b	%00100000
     16  ffb4		       23		      .BYTE.b	%00100011
     17  ffb5		       24		      .BYTE.b	%00100100
     18  ffb6		       24		      .BYTE.b	%00100100
     19  ffb7		       12		      .BYTE.b	%00010010
     20  ffb8		       10		      .BYTE.b	%00010000
     21  ffb9		       08		      .BYTE.b	%00001000
     22  ffba
     23  ffba				   OverImagePF2
     24  ffba		       e0		      .BYTE.b	%11100000
     25  ffbb		       18		      .BYTE.b	%00011000
     26  ffbc		       05		      .BYTE.b	%00000101
     27  ffbd		       52		      .BYTE.b	%01010010
     28  ffbe		       23		      .BYTE.b	%00100011
     29  ffbf		       52		      .BYTE.b	%01010010
     30  ffc0		       04		      .BYTE.b	%00000100
     31  ffc1		       18		      .BYTE.b	%00011000
     32  ffc2		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    214  ffc3
    215  ffc3				   OverAudio0
    216  ffc3
    217  ffc3		       1a		      .BYTE.b	#26	; D1
    218  ffc4		       1a		      .BYTE.b	#26
    219  ffc5		       16		      .BYTE.b	#22	; F1
    220  ffc6		       11		      .BYTE.b	#17	; A1
    221  ffc7		       0d		      .BYTE.b	#13	; D2
    222  ffc8		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    330  ffc9
    331  ffc9							;================
    332  ffc9							; End of cart
    333  ffc9							;================
    334  ffc9
    335  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    336  fffa
    337  fffa				   InterruptVectors
    338  fffa
    339  fffa		       06 f2		      .word.w	InitSystem	; NMI
    340  fffc		       06 f2		      .word.w	InitSystem	; RESET
    341  fffe		       06 f2		      .word.w	InitSystem	; IRQ
    342  10000
    343  10000					       END
