------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00c5 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00 00	   FrameTimer ds	2
     70 U0090
     71 U0090		       00	   AudioStep  ds	1
     72 U0091
     73 U0091		       00	   SampleStep ds	1
     74 U0092
     75 U0092							; Score
     76 U0092
     77 U0092		       00 00	   ScoreValue ds	2
     78 U0094		       00 00	   ScoreDigitOnes ds	2
     79 U0096		       00 00	   ScoreDigitTens ds	2
     80 U0098		       00 00	   ScoreGfx   ds	2
     81 U009a
     82 U009a							; Web
     83 U009a
     84 U009a		       00	   WebIndex   ds	1
     85 U009b		       00	   WebDir     ds	1
     86 U009c
     87 U009c							; Spider
     88 U009c
     89 U009c		       00 00	   SpiderPtr  ds	2
     90 U009e		       00 00	   SpiderPos  ds	2
     91 U00a0		       00	   SpiderCtrl ds	1
     92 U00a1		       00	   SpiderColor ds	1
     93 U00a2
     94 U00a2		       00	   SpiderIndex ds	1
     95 U00a3		       00	   SpiderDrawPos ds	1
     96 U00a4		       00	   SpiderLine ds	1
     97 U00a5
     98 U00a5		       00 00	   SpiderPtr2 ds	2
     99 U00a7
    100 U00a7							; Line
    101 U00a7
    102 U00a7		       00	   LineEnabled ds	1
    103 U00a8		       00 00	   LinePos    ds	2
    104 U00aa		       00 00	   LineVelocity ds	2
    105 U00ac		       00 00	   LineStartPos ds	2
    106 U00ae		       00 00	   LineDrawPos ds	2
    107 U00b0
    108 U00b0							; Bug
    109 U00b0
    110 U00b0		       00 00	   BugStunned ds	2
    111 U00b2		       00 00	   BugPosX    ds	2
    112 U00b4		       00 00	   BugPosY    ds	2
    113 U00b6		       00 00	   BugColor   ds	2
    114 U00b8
    115 U00b8		       00 00	   BugDrawPosBottom ds	2
    116 U00ba		       00 00	   BugDrawPosTop ds	2
    117 U00bc
    118 U00bc							; Swatter
    119 U00bc
    120 U00bc		       00 00	   SwatterPos ds	2
    121 U00be		       00	   SwatterState ds	1
    122 U00bf		       00	   SwatterColor ds	1
    123 U00c0
    124 U00c0		       00	   SwatterIndex ds	1
    125 U00c1		       00	   SwatterDrawPos ds	1
    126 U00c2		       00	   SwatterLine ds	1
    127 U00c3
    128 U00c3		       00	   SwatterSampleCount ds	1
    129 U00c4		       00	   SwatterSampleF ds	1
    130 U00c5
    131  10000 ????				       SEG
    132  f000					      org	$F000	; Start of cart area
    133  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    135  f021
    136  f021				   InitSystem
    137  f021
    138  f021				   .init_clean
    139  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    141  f02c
    142  f02c				   .init_tia
    143  f02c							; Define default TIA register values
    144  f02c
    145  f02c							; Initialize copies
    146  f02c		       a9 00		      lda	#0
    147  f02e		       85 80		      sta	CtrlPf
    148  f030		       85 81		      sta	NuSiz0
    149  f032		       85 82		      sta	NuSiz1
    150  f034
    151  f034							; Set background color
    152  f034		       a9 00		      lda	#$00	; Black
    153  f036		       85 09		      sta	COLUBK
    154  f038
    155  f038							; Set the playfield and player color
    156  f038		       a9 0e		      lda	#$0E	; White
    157  f03a		       85 08		      sta	COLUPF
    158  f03c		       85 06		      sta	COLUP0
    159  f03e		       85 07		      sta	COLUP1
    160  f040
    161  f040							; Playfield Control
    162  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    163  f042		       85 80		      sta	CtrlPf
    164  f044		       85 0a		      sta	CTRLPF
    165  f046
    166  f046							; Disable Game Elements
    167  f046		       a9 00		      lda	#$00
    168  f048		       85 1f		      sta	ENABL	; Turn off ball
    169  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    170  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    171  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    172  f050		       85 1c		      sta	GRP1	; Turn off player 2
    173  f052
    174  f052							; Empty playfield
    175  f052		       a9 00		      lda	#%00000000
    176  f054		       85 0d		      sta	PF0
    177  f056		       85 0e		      sta	PF1
    178  f058		       85 0f		      sta	PF2
    179  f05a
    180  f05a				   .init_seed
    181  f05a							; Seed the random number generator
    182  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    183  f05d		       85 85		      sta	Rand8	; Use as seed
    184  f05f		       49 ff		      eor	#$FF	; Flip bits
    185  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    186  f063
    187  f063				   .init_game
    188  f063
    189  f063		       20 cb f0 	      jsr	LogoInit
    190  f066
    191  f066							;=======================================
    192  f066							; Game Kernel
    193  f066							;=======================================
    194  f066
    195  f066				   Main
    196  f066
    197  f066		       20 75 f0 	      jsr	VerticalSync
    198  f069		       20 8e f0 	      jsr	VerticalBlank
    199  f06c		       20 a1 f0 	      jsr	Kernel
    200  f06f		       20 a8 f0 	      jsr	OverScan
    201  f072		       4c 66 f0 	      jmp	Main
    202  f075
    203  f075				   VerticalSync
    204  f075
    205  f075		       a9 00		      lda	#0
    206  f077		       85 01		      sta	VBLANK
    207  f079
    208  f079							; Turn on Vertical Sync signal and setup timer
    209  f079		       a9 02		      lda	#2
    210  f07b		       85 00		      sta	VSYNC
    211  f07d
    212  f07d							; Increment frame count and reduce frame counter
    213  f07d		       e6 8d		      inc	Frame
    214  f07f		       c6 8e		      dec	FrameTimer
    215  f081		       c6 8f		      dec	FrameTimer+1
    216  f083
    217  f083							; VSYNCH signal scanlines
    218  f083					      REPEAT	#KERNEL_VSYNC
    219  f083		       85 02		      sta	WSYNC
    218  f083					      REPEND
    219  f085		       85 02		      sta	WSYNC
    218  f085					      REPEND
    219  f087		       85 02		      sta	WSYNC
    220  f089					      REPEND
    221  f089
    222  f089							; Turn off Vertical Sync signal
    223  f089		       a9 00		      lda	#0
    224  f08b		       85 00		      sta	VSYNC
    225  f08d
    226  f08d				   .vsync_return
    227  f08d		       60		      rts
    228  f08e
    229  f08e				   VerticalBlank
    230  f08e							; Setup Timer
    231  f08e		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    232  f090		       8d 96 02 	      sta	TIM64T
    233  f093
    234  f093				   .vblank_logic
    235  f093							; Perform Game Logic
    236  f093		       20 9e f0 	      jsr	.vblank_logic_call_ptr
    237  f096
    238  f096				   .vblank_loop
    239  f096							; WSYNC until Timer is complete
    240  f096		       85 02		      sta	WSYNC
    241  f098		       ad 84 02 	      lda	INTIM
    242  f09b		       d0 f9		      bne	.vblank_loop
    243  f09d
    244  f09d				   .vblank_return
    245  f09d		       60		      rts
    246  f09e
    247  f09e				   .vblank_logic_call_ptr
    248  f09e		       6c 87 00 	      jmp	(VBlankPtr)
    249  f0a1
    250  f0a1				   Kernel
    251  f0a1
    252  f0a1							; Perform Selected Kernel
    253  f0a1		       20 a5 f0 	      jsr	.kernel_call_ptr
    254  f0a4		       60		      rts
    255  f0a5
    256  f0a5				   .kernel_call_ptr
    257  f0a5		       6c 89 00 	      jmp	(KernelPtr)
    258  f0a8
    259  f0a8				   OverScan
    260  f0a8
    261  f0a8							; End of screen, enter blanking
    262  f0a8		       a9 42		      lda	#%01000010
    263  f0aa		       85 01		      sta	VBLANK
    264  f0ac
    265  f0ac							; Setup Timer
    266  f0ac		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    267  f0ae		       8d 96 02 	      sta	TIM64T
    268  f0b1
    269  f0b1							;.overscan_reset:
    270  f0b1							; Check for reset switch
    271  f0b1		       ad 82 02 	      lda	SWCHB
    272  f0b4		       4a		      lsr		; Push D0 to carry (C)
    273  f0b5		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    274  f0b7
    275  f0b7							; Perform reset
    276  f0b7		       20 cb f0 	      jsr	LogoInit	; No need for logic
    277  f0ba		       4c c0 f0 	      jmp	.overscan_loop
    278  f0bd
    279  f0bd				   .overscan_logic
    280  f0bd							; Perform OverScan Logic
    281  f0bd		       20 c8 f0 	      jsr	.overscan_logic_call_ptr
    282  f0c0
    283  f0c0				   .overscan_loop
    284  f0c0							; WSYNC until Timer is complete
    285  f0c0		       85 02		      sta	WSYNC
    286  f0c2		       ad 84 02 	      lda	INTIM
    287  f0c5		       d0 f9		      bne	.overscan_loop
    288  f0c7
    289  f0c7				   .overscan_return
    290  f0c7		       60		      rts
    291  f0c8
    292  f0c8				   .overscan_logic_call_ptr
    293  f0c8		       6c 8b 00 	      jmp	(OverScanPtr)
    294  f0cb
    295  f0cb							;================
    296  f0cb							; State Code
    297  f0cb							;================
    298  f0cb
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0cb					      include	"logo.asm"
      1  f0cb							;================
      2  f0cb							; Constants
      3  f0cb							;================
      4  f0cb
      5  f0cb		       00 b4	   LOGO_FRAMES =	180
      6  f0cb
      7  f0cb		       00 00	   LOGO_BG_COLOR =	#$00
      8  f0cb		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f0cb
     10  f0cb		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0cb		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0cb		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0cb		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0cb		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0cb		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0cb
     17  f0cb		       00 10	   LOGO_IMAGE_SIZE =	16
     18  f0cb		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     19  f0cb		       00 50	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     20  f0cb		       00 38	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     21  f0cb		       00 32	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-6	; The extra 6 is for processing overflow
     22  f0cb
     23  f0cb				   LogoInit
     24  f0cb
     25  f0cb							; Setup logic and kernel
      0  f0cb					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0cb				   .POINTER   SET	VBlankPtr
      2  f0cb				   .ADDRESS   SET	LogoVerticalBlank
      3  f0cb
      4  f0cb		       a9 16		      LDA	#<.ADDRESS
      5  f0cd		       85 87		      STA	.POINTER
      6  f0cf		       a9 f1		      LDA	#>.ADDRESS
      7  f0d1		       85 88		      STA	.POINTER+1
      8  f0d3
      0  f0d3					      SET_POINTER	KernelPtr, LogoKernel
      1  f0d3				   .POINTER   SET	KernelPtr
      2  f0d3				   .ADDRESS   SET	LogoKernel
      3  f0d3
      4  f0d3		       a9 67		      LDA	#<.ADDRESS
      5  f0d5		       85 89		      STA	.POINTER
      6  f0d7		       a9 f1		      LDA	#>.ADDRESS
      7  f0d9		       85 8a		      STA	.POINTER+1
      8  f0db
      0  f0db					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0db				   .POINTER   SET	OverScanPtr
      2  f0db				   .ADDRESS   SET	LogoOverScan
      3  f0db
      4  f0db		       a9 1a		      LDA	#<.ADDRESS
      5  f0dd		       85 8b		      STA	.POINTER
      6  f0df		       a9 f1		      LDA	#>.ADDRESS
      7  f0e1		       85 8c		      STA	.POINTER+1
      8  f0e3
     29  f0e3
     30  f0e3							; Load Colors
     31  f0e3		       a9 00		      lda	#LOGO_BG_COLOR
     32  f0e5		       85 09		      sta	COLUBK
     33  f0e7		       a9 c6		      lda	#LOGO_FG_COLOR
     34  f0e9		       85 08		      sta	COLUPF
     35  f0eb
     36  f0eb							; Load audio settings
     37  f0eb		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     38  f0ed		       85 15		      sta	AUDC0
     39  f0ef		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     40  f0f1		       85 19		      sta	AUDV0
     41  f0f3		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     42  f0f5		       85 16		      sta	AUDC1
     43  f0f7		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     44  f0f9		       85 1a		      sta	AUDV1
     45  f0fb		       a9 00		      lda	#0
     46  f0fd		       85 90		      sta	AudioStep
     47  f0ff
     48  f0ff							; Play first note
     49  f0ff		       ad 47 f2 	      lda	LogoAudio0,AudioStep
     50  f102		       85 17		      sta	AUDF0
     51  f104		       ad 53 f2 	      lda	LogoAudio1,AudioStep
     52  f107		       85 18		      sta	AUDF1
     53  f109
     54  f109							; Setup frame counters
     55  f109		       a9 00		      lda	#0
     56  f10b		       85 8d		      sta	Frame
     57  f10d		       a9 b4		      lda	#LOGO_FRAMES
     58  f10f		       85 8e		      sta	FrameTimer
     59  f111
     60  f111							; Setup Image Animation
     61  f111		       a9 22		      lda	#(LOGO_IMAGE_SIZE+1)*2
     62  f113		       85 9a		      sta	WebIndex
     63  f115
     64  f115		       60		      rts
     65  f116
     66  f116				   LogoVerticalBlank
     67  f116		       20 21 f1 	      jsr	LogoAnimation
     68  f119		       60		      rts
     69  f11a
     70  f11a				   LogoOverScan
     71  f11a		       20 32 f1 	      jsr	LogoAudio
     72  f11d		       20 5d f1 	      jsr	LogoState
     73  f120		       60		      rts
     74  f121
     75  f121				   LogoAnimation
     76  f121		       a5 8d		      lda	Frame
     77  f123		       29 03		      and	#%00000011	; Every 4 when bits are 00
     78  f125		       d0 0a		      bne	.logo_animation_return
     79  f127
     80  f127		       a6 9a		      ldx	WebIndex
     81  f129		       e0 00		      cpx	#0
     82  f12b		       f0 04		      beq	.logo_animation_return
     83  f12d
     84  f12d							; Add another visible line
     85  f12d		       ca		      dex
     86  f12e		       ca		      dex
     87  f12f		       86 9a		      stx	WebIndex
     88  f131
     89  f131				   .logo_animation_return
     90  f131		       60		      rts
     91  f132
     92  f132				   LogoAudio
     93  f132
     94  f132		       a5 8d		      lda	Frame
     95  f134		       29 07		      and	#%00000111	; Every 8 when bits are 000
     96  f136		       d0 24		      bne	.logo_audio_return
     97  f138
     98  f138				   .logo_audio_play
     99  f138
    100  f138							; Check if we're at the end of the melody
    101  f138		       a4 90		      ldy	AudioStep
    102  f13a		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
    103  f13c		       f0 10		      beq	.logo_audio_mute
    104  f13e
    105  f13e				   .logo_audio_play_note
    106  f13e							; Increment audio position
    107  f13e		       c8		      iny
    108  f13f		       84 90		      sty	AudioStep
    109  f141
    110  f141							; Logo note and play
    111  f141		       b9 47 f2 	      lda	LogoAudio0,y
    112  f144		       85 17		      sta	AUDF0
    113  f146		       b9 53 f2 	      lda	LogoAudio1,y
    114  f149		       85 18		      sta	AUDF1
    115  f14b		       4c 5c f1 	      jmp	.logo_audio_mute_skip
    116  f14e
    117  f14e				   .logo_audio_mute
    118  f14e
    119  f14e							; Mute audio
    120  f14e		       a9 00		      lda	#0
    121  f150		       85 15		      sta	AUDC0
    122  f152		       85 19		      sta	AUDV0
    123  f154		       85 17		      sta	AUDF0
    124  f156		       85 16		      sta	AUDC1
    125  f158		       85 1a		      sta	AUDV1
    126  f15a		       85 18		      sta	AUDF1
    127  f15c
    128  f15c				   .logo_audio_mute_skip
    129  f15c				   .logo_audio_return
    130  f15c		       60		      rts
    131  f15d
    132  f15d				   LogoState
    133  f15d		       a5 8e		      lda	FrameTimer
    134  f15f		       c9 00		      cmp	#0
    135  f161		       d0 03		      bne	.logo_state_return
    136  f163
    137  f163		       20 5f f2 	      jsr	TitleInit
    138  f166
    139  f166				   .logo_state_return
    140  f166		       60		      rts
    141  f167
    142  f167				   LogoKernel
    143  f167
    144  f167							; Playfield Control
    145  f167		       a5 80		      lda	CtrlPf
    146  f169		       29 fe		      and	#%11111110	; No mirroring
    147  f16b		       85 80		      sta	CtrlPf
    148  f16d		       85 0a		      sta	CTRLPF
    149  f16f
    150  f16f							; Turn on display
    151  f16f		       a9 00		      lda	#0
    152  f171		       85 01		      sta	VBLANK
    153  f173
    154  f173		       a4 9a		      ldy	WebIndex
    155  f175		       c0 00		      cpy	#0
    156  f177		       d0 06		      bne	.logo_kernel_top_anim_padding
    157  f179
    158  f179				   .logo_kernel_top_padding
    159  f179							; Top Padding
    160  f179		       20 ca f1 	      jsr	LogoPadding
    161  f17c		       4c 8d f1 	      jmp	.logo_kernel_image
    162  f17f
    163  f17f				   .logo_kernel_top_anim_padding
    164  f17f		       20 da f1 	      jsr	LogoAnimPadding
    165  f182
    166  f182				   .logo_kernel_image_animation_start
    167  f182		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    168  f184
    169  f184				   .logo_kernel_image_animation_loop
    170  f184		       85 02		      sta	WSYNC
    171  f186		       ca		      dex
    172  f187		       d0 fb		      bne	.logo_kernel_image_animation_loop
    173  f189
    174  f189		       88		      dey
    175  f18a		       88		      dey
    176  f18b		       d0 f5		      bne	.logo_kernel_image_animation_start
    177  f18d
    178  f18d				   .logo_kernel_image
    179  f18d
    180  f18d		       a2 20		      ldx	#(LOGO_IMAGE_SIZE*2)
    181  f18f		       a0 04		      ldy	#LOGO_IMAGE_LINE_SIZE-1
    182  f191							; The extra 1 on line size is for processing overflow
    183  f191
    184  f191		       ca		      dex
    185  f192		       e4 9a		      cpx	WebIndex
    186  f194		       90 30		      bcc	.logo_kernel_bottom_padding
    187  f196
    188  f196				   .logo_kernel_image_line
    189  f196		       85 02		      sta	WSYNC
    190  f198
    191  f198		       bd e6 f1 	      lda	LogoImagePF0-1,x
    192  f19b		       85 0d		      sta	PF0
    193  f19d		       bd 06 f2 	      lda	LogoImagePF1-1,x
    194  f1a0		       85 0e		      sta	PF1
    195  f1a2		       bd 26 f2 	      lda	LogoImagePF2-1,x
    196  f1a5		       85 0f		      sta	PF2
    197  f1a7
      0  f1a7					      sleep	6
      1  f1a7				   .CYCLES    SET	6
      2  f1a7
      3  f1a7				  -	      IF	.CYCLES < 2
      4  f1a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1a7				  -	      ERR
      6  f1a7					      ENDIF
      7  f1a7
      8  f1a7				  -	      IF	.CYCLES & 1
      9  f1a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1a7				  -	      nop	0
     11  f1a7				  -	      ELSE
     12  f1a7				  -	      bit	VSYNC
     13  f1a7				  -	      ENDIF
     14  f1a7				  -.CYCLES    SET	.CYCLES - 3
     15  f1a7					      ENDIF
     16  f1a7
     17  f1a7					      REPEAT	.CYCLES / 2
     18  f1a7		       ea		      nop
     17  f1a7					      REPEND
     18  f1a8		       ea		      nop
     17  f1a8					      REPEND
     18  f1a9		       ea		      nop
     19  f1aa					      REPEND
    199  f1aa
    200  f1aa		       bd e7 f1 	      lda	LogoImagePF0,x
    201  f1ad		       85 0d		      sta	PF0
    202  f1af		       bd 07 f2 	      lda	LogoImagePF1,x
    203  f1b2		       85 0e		      sta	PF1
    204  f1b4		       bd 27 f2 	      lda	LogoImagePF2,x
    205  f1b7		       85 0f		      sta	PF2
    206  f1b9
    207  f1b9		       88		      dey
    208  f1ba		       d0 da		      bne	.logo_kernel_image_line
    209  f1bc
    210  f1bc		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    211  f1be
    212  f1be		       ca		      dex
    213  f1bf		       e4 9a		      cpx	WebIndex
    214  f1c1		       90 03		      bcc	.logo_kernel_bottom_padding
    215  f1c3
    216  f1c3		       ca		      dex
    217  f1c4		       10 d0		      bpl	.logo_kernel_image_line
    218  f1c6
    219  f1c6				   .logo_kernel_bottom_padding
    220  f1c6							; Bottom Padding
    221  f1c6		       20 ca f1 	      jsr	LogoPadding
    222  f1c9
    223  f1c9				   .logo_kernel_image_return
    224  f1c9		       60		      rts
    225  f1ca
    226  f1ca				   LogoPadding
    227  f1ca		       a9 00		      lda	#0
    228  f1cc		       85 0d		      sta	PF0
    229  f1ce		       85 0e		      sta	PF1
    230  f1d0		       85 0f		      sta	PF2
    231  f1d2
    232  f1d2		       a2 38		      ldx	#LOGO_IMAGE_PADDING
    233  f1d4				   .logo_padding_loop
    234  f1d4		       85 02		      sta	WSYNC
    235  f1d6		       ca		      dex
    236  f1d7		       d0 fb		      bne	.logo_padding_loop
    237  f1d9
    238  f1d9		       60		      rts
    239  f1da
    240  f1da				   LogoAnimPadding
    241  f1da		       a9 00		      lda	#0
    242  f1dc		       85 0d		      sta	PF0
    243  f1de		       85 0e		      sta	PF1
    244  f1e0		       85 0f		      sta	PF2
    245  f1e2
    246  f1e2		       a2 32		      ldx	#LOGO_IMAGE_ANIM_PADDING
    247  f1e4		       4c d4 f1 	      jmp	.logo_padding_loop
    248  f1e7
    249  f1e7				   LogoAssets
    250  f1e7
    251  f1e7							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f1e7					      include	"logo_image.asm"
      1  f1e7				   LogoImagePF0
      2  f1e7		       00		      .BYTE.b	%00000000
      3  f1e8		       10		      .BYTE.b	%00010000
      4  f1e9		       00		      .BYTE.b	%00000000
      5  f1ea		       30		      .BYTE.b	%00110000
      6  f1eb		       00		      .BYTE.b	%00000000
      7  f1ec		       70		      .BYTE.b	%01110000
      8  f1ed		       00		      .BYTE.b	%00000000
      9  f1ee		       60		      .BYTE.b	%01100000
     10  f1ef		       00		      .BYTE.b	%00000000
     11  f1f0		       60		      .BYTE.b	%01100000
     12  f1f1		       00		      .BYTE.b	%00000000
     13  f1f2		       20		      .BYTE.b	%00100000
     14  f1f3		       80		      .BYTE.b	%10000000
     15  f1f4		       00		      .BYTE.b	%00000000
     16  f1f5		       c0		      .BYTE.b	%11000000
     17  f1f6		       00		      .BYTE.b	%00000000
     18  f1f7		       c0		      .BYTE.b	%11000000
     19  f1f8		       00		      .BYTE.b	%00000000
     20  f1f9		       80		      .BYTE.b	%10000000
     21  f1fa		       00		      .BYTE.b	%00000000
     22  f1fb		       00		      .BYTE.b	%00000000
     23  f1fc		       40		      .BYTE.b	%01000000
     24  f1fd		       00		      .BYTE.b	%00000000
     25  f1fe		       60		      .BYTE.b	%01100000
     26  f1ff		       00		      .BYTE.b	%00000000
     27  f200		       60		      .BYTE.b	%01100000
     28  f201		       00		      .BYTE.b	%00000000
     29  f202		       70		      .BYTE.b	%01110000
     30  f203		       00		      .BYTE.b	%00000000
     31  f204		       30		      .BYTE.b	%00110000
     32  f205		       00		      .BYTE.b	%00000000
     33  f206		       10		      .BYTE.b	%00010000
     34  f207
     35  f207				   LogoImagePF1
     36  f207		       03		      .BYTE.b	%00000011
     37  f208		       f0		      .BYTE.b	%11110000
     38  f209		       03		      .BYTE.b	%00000011
     39  f20a		       f8		      .BYTE.b	%11111000
     40  f20b		       13		      .BYTE.b	%00010011
     41  f20c		       fc		      .BYTE.b	%11111100
     42  f20d		       33		      .BYTE.b	%00110011
     43  f20e		       dc		      .BYTE.b	%11011100
     44  f20f		       63		      .BYTE.b	%01100011
     45  f210		       cc		      .BYTE.b	%11001100
     46  f211		       c3		      .BYTE.b	%11000011
     47  f212		       cc		      .BYTE.b	%11001100
     48  f213		       83		      .BYTE.b	%10000011
     49  f214		       cc		      .BYTE.b	%11001100
     50  f215		       03		      .BYTE.b	%00000011
     51  f216		       cc		      .BYTE.b	%11001100
     52  f217		       03		      .BYTE.b	%00000011
     53  f218		       cc		      .BYTE.b	%11001100
     54  f219		       83		      .BYTE.b	%10000011
     55  f21a		       cc		      .BYTE.b	%11001100
     56  f21b		       c3		      .BYTE.b	%11000011
     57  f21c		       cc		      .BYTE.b	%11001100
     58  f21d		       63		      .BYTE.b	%01100011
     59  f21e		       cc		      .BYTE.b	%11001100
     60  f21f		       33		      .BYTE.b	%00110011
     61  f220		       dc		      .BYTE.b	%11011100
     62  f221		       13		      .BYTE.b	%00010011
     63  f222		       fc		      .BYTE.b	%11111100
     64  f223		       03		      .BYTE.b	%00000011
     65  f224		       f8		      .BYTE.b	%11111000
     66  f225		       03		      .BYTE.b	%00000011
     67  f226		       f0		      .BYTE.b	%11110000
     68  f227
     69  f227				   LogoImagePF2
     70  f227		       83		      .BYTE.b	%10000011
     71  f228		       00		      .BYTE.b	%00000000
     72  f229		       c7		      .BYTE.b	%11000111
     73  f22a		       00		      .BYTE.b	%00000000
     74  f22b		       ef		      .BYTE.b	%11101111
     75  f22c		       01		      .BYTE.b	%00000001
     76  f22d		       6e		      .BYTE.b	%01101110
     77  f22e		       03		      .BYTE.b	%00000011
     78  f22f		       6c		      .BYTE.b	%01101100
     79  f230		       06		      .BYTE.b	%00000110
     80  f231		       6c		      .BYTE.b	%01101100
     81  f232		       0c		      .BYTE.b	%00001100
     82  f233		       6c		      .BYTE.b	%01101100
     83  f234		       18		      .BYTE.b	%00011000
     84  f235		       6c		      .BYTE.b	%01101100
     85  f236		       30		      .BYTE.b	%00110000
     86  f237		       6c		      .BYTE.b	%01101100
     87  f238		       30		      .BYTE.b	%00110000
     88  f239		       6c		      .BYTE.b	%01101100
     89  f23a		       18		      .BYTE.b	%00011000
     90  f23b		       6c		      .BYTE.b	%01101100
     91  f23c		       0c		      .BYTE.b	%00001100
     92  f23d		       6c		      .BYTE.b	%01101100
     93  f23e		       06		      .BYTE.b	%00000110
     94  f23f		       6e		      .BYTE.b	%01101110
     95  f240		       03		      .BYTE.b	%00000011
     96  f241		       ef		      .BYTE.b	%11101111
     97  f242		       01		      .BYTE.b	%00000001
     98  f243		       c7		      .BYTE.b	%11000111
     99  f244		       00		      .BYTE.b	%00000000
    100  f245		       83		      .BYTE.b	%10000011
    101  f246		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    253  f247
    254  f247				   LogoAudio0
    255  f247
    256  f247		       1d		      .BYTE.b	#29	; C
    257  f248		       17		      .BYTE.b	#23	; E
    258  f249		       13		      .BYTE.b	#19	; G
    259  f24a		       0f		      .BYTE.b	#15	; A
    260  f24b		       17		      .BYTE.b	#23	; E
    261  f24c		       13		      .BYTE.b	#19	; G
    262  f24d		       0f		      .BYTE.b	#15	; B
    263  f24e		       0e		      .BYTE.b	#14	; C
    264  f24f		       0b		      .BYTE.b	#11	; E
    265  f250		       0b		      .BYTE.b	#11
    266  f251		       0b		      .BYTE.b	#11
    267  f252		       0b		      .BYTE.b	#11
    268  f253
    269  f253				   LogoAudio1
    270  f253
    271  f253		       1f		      .BYTE.b	#31	; C
    272  f254		       1f		      .BYTE.b	#31
    273  f255		       1f		      .BYTE.b	#31
    274  f256		       1f		      .BYTE.b	#31
    275  f257		       19		      .BYTE.b	#25	; E
    276  f258		       19		      .BYTE.b	#25
    277  f259		       19		      .BYTE.b	#25
    278  f25a		       19		      .BYTE.b	#25
    279  f25b		       14		      .BYTE.b	#20	; G
    280  f25c		       14		      .BYTE.b	#20
    281  f25d		       14		      .BYTE.b	#20
    282  f25e		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f25f					      include	"title.asm"
      1  f25f							;================
      2  f25f							; Constants
      3  f25f							;================
      4  f25f
      5  f25f		       00 00	   TITLE_BG_COLOR =	#$00
      6  f25f		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f25f		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f25f		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f25f
     10  f25f		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f25f		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f25f		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f25f		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f25f		       00 09	   TITLE_AUDIO_STEP =	9
     15  f25f
     16  f25f		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     17  f25f		       00 05	   TITLE_FRAME_BOT_LINES =	5
     18  f25f		       00 07	   TITLE_LABEL_LINE =	7
     19  f25f
     20  f25f		       00 0f	   TITLE_GAP_SIZE =	#15
     21  f25f
     22  f25f		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     23  f25f		       00 09	   TITLE_SPIDER_SIZE =	#9
     24  f25f		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f25f
     26  f25f				   TitleInit
     27  f25f
     28  f25f							; Setup logic and kernel
      0  f25f					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f25f				   .POINTER   SET	VBlankPtr
      2  f25f				   .ADDRESS   SET	TitleVerticalBlank
      3  f25f
      4  f25f		       a9 cc		      LDA	#<.ADDRESS
      5  f261		       85 87		      STA	.POINTER
      6  f263		       a9 f2		      LDA	#>.ADDRESS
      7  f265		       85 88		      STA	.POINTER+1
      8  f267
      0  f267					      SET_POINTER	KernelPtr, TitleKernel
      1  f267				   .POINTER   SET	KernelPtr
      2  f267				   .ADDRESS   SET	TitleKernel
      3  f267
      4  f267		       a9 64		      LDA	#<.ADDRESS
      5  f269		       85 89		      STA	.POINTER
      6  f26b		       a9 f3		      LDA	#>.ADDRESS
      7  f26d		       85 8a		      STA	.POINTER+1
      8  f26f
      0  f26f					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f26f				   .POINTER   SET	OverScanPtr
      2  f26f				   .ADDRESS   SET	TitleOverScan
      3  f26f
      4  f26f		       a9 1d		      LDA	#<.ADDRESS
      5  f271		       85 8b		      STA	.POINTER
      6  f273		       a9 f3		      LDA	#>.ADDRESS
      7  f275		       85 8c		      STA	.POINTER+1
      8  f277
     32  f277
     33  f277							; Load Colors
     34  f277		       a9 00		      lda	#TITLE_BG_COLOR
     35  f279		       85 09		      sta	COLUBK
     36  f27b		       a9 06		      lda	#TITLE_WEB_COLOR
     37  f27d		       85 08		      sta	COLUPF
     38  f27f		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f281		       85 06		      sta	COLUP0
     40  f283		       85 07		      sta	COLUP1
     41  f285
     42  f285							; Load audio settings
     43  f285
     44  f285							; Melody Line
     45  f285		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f287		       85 15		      sta	AUDC0
     47  f289		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f28b		       85 19		      sta	AUDV0
     49  f28d
     50  f28d							; Drums and Bass
     51  f28d		       a9 00		      lda	#0
     52  f28f		       85 16		      sta	AUDC1
     53  f291		       85 1a		      sta	AUDV1
     54  f293
     55  f293							; Make it so that we play the first note immediately
     56  f293		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f295		       85 90		      sta	AudioStep
     58  f297		       a9 01		      lda	#1
     59  f299		       85 8e		      sta	FrameTimer
     60  f29b
     61  f29b							; Setup Spider Sprite
      0  f29b					      SET_POINTER	SpiderPtr, TitleSpider
      1  f29b				   .POINTER   SET	SpiderPtr
      2  f29b				   .ADDRESS   SET	TitleSpider
      3  f29b
      4  f29b		       a9 a4		      LDA	#<.ADDRESS
      5  f29d		       85 9c		      STA	.POINTER
      6  f29f		       a9 f4		      LDA	#>.ADDRESS
      7  f2a1		       85 9d		      STA	.POINTER+1
      8  f2a3
     63  f2a3
     64  f2a3		       a5 81		      lda	NuSiz0
     65  f2a5		       29 f8		      and	#%11111000
     66  f2a7		       09 06		      ora	#%00000110	; Triple Sprite
     67  f2a9		       85 81		      sta	NuSiz0
     68  f2ab		       85 04		      sta	NUSIZ0
     69  f2ad		       85 82		      sta	NuSiz1
     70  f2af		       85 05		      sta	NUSIZ1
     71  f2b1
     72  f2b1		       a9 00		      lda	#0	; No reflect
     73  f2b3		       85 0b		      sta	REFP0
     74  f2b5		       a9 ff		      lda	#$FF	; Reflect P1
     75  f2b7		       85 0c		      sta	REFP1
     76  f2b9
     77  f2b9		       a9 00		      lda	#0
     78  f2bb		       85 a3		      sta	SpiderDrawPos	; Initialize animation state
     79  f2bd
     80  f2bd							; Setup Web Line
     81  f2bd							; Missle0 (2 clock size)
     82  f2bd		       a5 81		      lda	NuSiz0
     83  f2bf		       29 cf		      and	#%11001111
     84  f2c1		       09 10		      ora	#%00010000
     85  f2c3		       85 81		      sta	NuSiz0
     86  f2c5		       85 04		      sta	NUSIZ0
     87  f2c7
     88  f2c7							; Disable at start
     89  f2c7		       a9 00		      lda	#0
     90  f2c9		       85 1d		      sta	ENAM0
     91  f2cb
     92  f2cb		       60		      rts
     93  f2cc
     94  f2cc				   TitleVerticalBlank
     95  f2cc
     96  f2cc							; Refresh random values
     97  f2cc		       20 13 f0 	      jsr	Random
     98  f2cf
     99  f2cf		       20 d6 f2 	      jsr	TitlePosition
    100  f2d2		       20 f0 f2 	      jsr	TitleAnimation
    101  f2d5
    102  f2d5		       60		      rts
    103  f2d6
    104  f2d6				   TitlePosition
    105  f2d6
    106  f2d6							; Position Spider
    107  f2d6		       a2 00		      ldx	#0	; Object (player0)
    108  f2d8		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    109  f2da		       20 00 f0 	      jsr	PosObject
    110  f2dd
    111  f2dd		       a2 01		      ldx	#1	; Object (player1)
    112  f2df		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    113  f2e1		       20 00 f0 	      jsr	PosObject
    114  f2e4
    115  f2e4							; Position Web Line
    116  f2e4		       a2 02		      ldx	#2	; Object (missle0)
    117  f2e6		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    118  f2e8		       20 00 f0 	      jsr	PosObject
    119  f2eb
    120  f2eb		       85 02		      sta	WSYNC
    121  f2ed		       85 2a		      sta	HMOVE
    122  f2ef
    123  f2ef		       60		      rts
    124  f2f0
    125  f2f0				   TitleAnimation
    126  f2f0
    127  f2f0		       a5 90		      lda	AudioStep
    128  f2f2		       c9 00		      cmp	#0
    129  f2f4		       f0 0d		      beq	.title_animation_1
    130  f2f6		       c9 04		      cmp	#4
    131  f2f8		       f0 16		      beq	.title_animation_2
    132  f2fa		       c9 09		      cmp	#9
    133  f2fc		       f0 05		      beq	.title_animation_1
    134  f2fe		       c9 0c		      cmp	#12
    135  f300		       f0 0e		      beq	.title_animation_2
    136  f302		       60		      rts
    137  f303
    138  f303				   .title_animation_1
      0  f303					      SET_POINTER	SpiderPtr, TitleSpider
      1  f303				   .POINTER   SET	SpiderPtr
      2  f303				   .ADDRESS   SET	TitleSpider
      3  f303
      4  f303		       a9 a4		      LDA	#<.ADDRESS
      5  f305		       85 9c		      STA	.POINTER
      6  f307		       a9 f4		      LDA	#>.ADDRESS
      7  f309		       85 9d		      STA	.POINTER+1
      8  f30b
    140  f30b		       a9 00		      lda	#0
    141  f30d		       85 a3		      sta	SpiderDrawPos
    142  f30f		       60		      rts
    143  f310
    144  f310				   .title_animation_2
      0  f310					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f310				   .POINTER   SET	SpiderPtr
      2  f310				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f310
      4  f310		       a9 ad		      LDA	#<.ADDRESS
      5  f312		       85 9c		      STA	.POINTER
      6  f314		       a9 f4		      LDA	#>.ADDRESS
      7  f316		       85 9d		      STA	.POINTER+1
      8  f318
    146  f318		       a9 01		      lda	#1
    147  f31a		       85 a3		      sta	SpiderDrawPos
    148  f31c		       60		      rts
    149  f31d
    150  f31d				   TitleOverScan
    151  f31d		       20 24 f3 	      jsr	TitleAudio
    152  f320		       20 5c f3 	      jsr	TitleState
    153  f323		       60		      rts
    154  f324
    155  f324				   TitleAudio
    156  f324
    157  f324		       a6 8e		      ldx	FrameTimer
    158  f326		       e0 00		      cpx	#0
    159  f328		       d0 31		      bne	.title_audio_return
    160  f32a
    161  f32a							; Reset Timer
    162  f32a		       a2 09		      ldx	#TITLE_AUDIO_STEP
    163  f32c		       86 8e		      stx	FrameTimer
    164  f32e
    165  f32e				   .title_audio_play
    166  f32e
    167  f32e							; Increment melody position
    168  f32e		       a4 90		      ldy	AudioStep
    169  f330		       c8		      iny
    170  f331
    171  f331							; Check if we're at the end of the melody
    172  f331		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    173  f333		       d0 02		      bne	.title_audio_play_note
    174  f335
    175  f335							; Loop our audio step
    176  f335		       a0 00		      ldy	#0
    177  f337
    178  f337				   .title_audio_play_note
    179  f337
    180  f337							; Save current position
    181  f337		       84 90		      sty	AudioStep
    182  f339
    183  f339							; Basic Melody Line
    184  f339		       b9 b6 f4 	      lda	TitleAudio0,y
    185  f33c		       85 17		      sta	AUDF0
    186  f33e
    187  f33e							; Drums and Bass
    188  f33e		       b9 c6 f4 	      lda	TitleTone1,y
    189  f341		       c9 ff		      cmp	#$FF
    190  f343		       f0 0e		      beq	.title_audio_play_note_1_mute
    191  f345
    192  f345		       85 16		      sta	AUDC1
    193  f347		       b9 d6 f4 	      lda	TitleAudio1,y
    194  f34a		       85 18		      sta	AUDF1
    195  f34c		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    196  f34e		       85 1a		      sta	AUDV1
    197  f350
    198  f350		       4c 5b f3 	      jmp	.title_audio_return
    199  f353
    200  f353				   .title_audio_play_note_1_mute
    201  f353
    202  f353		       a9 00		      lda	#0
    203  f355		       85 18		      sta	AUDF1
    204  f357		       85 16		      sta	AUDC1
    205  f359		       85 1a		      sta	AUDV1
    206  f35b
    207  f35b				   .title_audio_return
    208  f35b		       60		      rts
    209  f35c
    210  f35c				   TitleState
    211  f35c							; Check if Fire Button on controller 1 is pressed
    212  f35c		       a5 0c		      lda	INPT4
    213  f35e		       30 03		      bmi	.title_state_return
    214  f360
    215  f360		       20 de fb 	      jsr	GameInit
    216  f363
    217  f363				   .title_state_return
    218  f363		       60		      rts
    219  f364
    220  f364				   TitleKernel
    221  f364
    222  f364							; Playfield Control
    223  f364		       a5 80		      lda	CtrlPf
    224  f366		       29 fe		      and	#%11111110	; No mirroring
    225  f368		       85 80		      sta	CtrlPf
    226  f36a		       85 0a		      sta	CTRLPF
    227  f36c
    228  f36c							; Turn on display
    229  f36c		       a9 00		      lda	#0
    230  f36e		       85 01		      sta	VBLANK
    231  f370
    232  f370		       85 02		      sta	WSYNC
    233  f372
    234  f372				   TitleFrameTopDraw
    235  f372
    236  f372							; Start Counters
    237  f372		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    238  f374		       a0 00		      ldy	#0	; Image Counter
    239  f376
    240  f376				   .title_frame_top
    241  f376
    242  f376							; 76 machine cycles per scanline
    243  f376		       85 02		      sta	WSYNC
    244  f378
    245  f378				   .title_frame_top_load		; 66 cycles
    246  f378
    247  f378							; First half of image
    248  f378		       b9 3e f4 	      lda	TitleFrameTop,y	; 5
    249  f37b		       85 0d		      sta	PF0	; 4
    250  f37d		       b9 3f f4 	      lda	TitleFrameTop+1,y	; 5
    251  f380		       85 0e		      sta	PF1	; 4
    252  f382		       b9 40 f4 	      lda	TitleFrameTop+2,y	; 5
    253  f385		       85 0f		      sta	PF2	; 4
    254  f387
      0  f387					      sleep	6
      1  f387				   .CYCLES    SET	6
      2  f387
      3  f387				  -	      IF	.CYCLES < 2
      4  f387				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f387				  -	      ERR
      6  f387					      ENDIF
      7  f387
      8  f387				  -	      IF	.CYCLES & 1
      9  f387				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f387				  -	      nop	0
     11  f387				  -	      ELSE
     12  f387				  -	      bit	VSYNC
     13  f387				  -	      ENDIF
     14  f387				  -.CYCLES    SET	.CYCLES - 3
     15  f387					      ENDIF
     16  f387
     17  f387					      REPEAT	.CYCLES / 2
     18  f387		       ea		      nop
     17  f387					      REPEND
     18  f388		       ea		      nop
     17  f388					      REPEND
     18  f389		       ea		      nop
     19  f38a					      REPEND
    256  f38a
    257  f38a							; Second half of image
    258  f38a		       b9 41 f4 	      lda	TitleFrameTop+3,y	; 5
    259  f38d		       85 0d		      sta	PF0	; 4
    260  f38f		       b9 42 f4 	      lda	TitleFrameTop+4,y	; 5
    261  f392		       85 0e		      sta	PF1	; 4
    262  f394		       b9 43 f4 	      lda	TitleFrameTop+5,y	; 5
    263  f397		       85 0f		      sta	PF2	; 4
    264  f399
    265  f399				   .title_frame_top_index		; 4 cycles
    266  f399
    267  f399		       ca		      dex		; 2
    268  f39a		       d0 da		      bne	.title_frame_top	; 2
    269  f39c
    270  f39c				   .title_frame_top_index_next		; 6 cycles
    271  f39c
    272  f39c							; Restore scanline counter
    273  f39c		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    274  f39e
    275  f39e		       98		      tya		; 2
    276  f39f		       18		      clc		; 2
    277  f3a0		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    278  f3a2		       a8		      tay		; 2
    279  f3a3
    280  f3a3		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA
    281  f3a5		       d0 04		      bne	.title_frame_top_label_color_skip
    282  f3a7		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    283  f3a9		       85 08		      sta	COLUPF	; 4
    284  f3ab				   .title_frame_top_label_color_skip
    285  f3ab
    286  f3ab		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA
    287  f3ad		       d0 c7		      bne	.title_frame_top	; 2
    288  f3af
    289  f3af				   .title_frame_top_clean
    290  f3af
    291  f3af							; Clear out playfield
    292  f3af		       a9 00		      lda	#0
    293  f3b1		       85 0d		      sta	PF0
    294  f3b3		       85 0e		      sta	PF1
    295  f3b5		       85 0f		      sta	PF2
    296  f3b7
    297  f3b7				   TitleWebDraw
    298  f3b7		       a9 02		      lda	#%00000010
    299  f3b9		       85 1d		      sta	ENAM0
    300  f3bb
    301  f3bb		       a9 06		      lda	#TITLE_WEB_COLOR
    302  f3bd		       85 06		      sta	COLUP0
    303  f3bf
    304  f3bf		       a2 0f		      ldx	#TITLE_GAP_SIZE
    305  f3c1				   .title_web_gap
    306  f3c1		       ca		      dex
    307  f3c2		       85 02		      sta	WSYNC
    308  f3c4		       d0 fb		      bne	.title_web_gap
    309  f3c6
    310  f3c6				   TitleSpiderDraw
    311  f3c6
    312  f3c6		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    313  f3c8
    314  f3c8		       a5 a3		      lda	SpiderDrawPos
    315  f3ca		       c9 01		      cmp	#1
    316  f3cc		       d0 0c		      bne	.title_spider_extra_web_disable
    317  f3ce
    318  f3ce				   .title_spider_extra_web_start
    319  f3ce		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    320  f3d0				   .title_spider_extra_web_loop
    321  f3d0		       85 02		      sta	WSYNC
    322  f3d2		       ca		      dex
    323  f3d3		       d0 fb		      bne	.title_spider_extra_web_loop
    324  f3d5
    325  f3d5		       88		      dey
    326  f3d6		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    327  f3d8		       d0 f4		      bne	.title_spider_extra_web_start
    328  f3da
    329  f3da				   .title_spider_extra_web_disable
    330  f3da		       a9 00		      lda	#0
    331  f3dc		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    332  f3de
    333  f3de		       85 02		      sta	WSYNC
    334  f3e0
    335  f3e0		       85 1d		      sta	ENAM0
    336  f3e2		       a9 56		      lda	#TITLE_SPIDER_COLOR
    337  f3e4		       85 06		      sta	COLUP0
    338  f3e6
    339  f3e6				   .title_spider
    340  f3e6		       b1 9c		      lda	(SpiderPtr),y
    341  f3e8		       85 1b		      sta	GRP0
    342  f3ea		       85 1c		      sta	GRP1
    343  f3ec
    344  f3ec				   .title_spider_delay
    345  f3ec		       ca		      dex
    346  f3ed		       85 02		      sta	WSYNC
    347  f3ef		       d0 fb		      bne	.title_spider_delay
    348  f3f1
    349  f3f1				   .title_spider_index
    350  f3f1		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    351  f3f3		       88		      dey
    352  f3f4		       10 f0		      bpl	.title_spider
    353  f3f6
    354  f3f6				   .title_spider_clean
    355  f3f6
    356  f3f6							; Clear sprites
    357  f3f6		       a9 00		      lda	#0
    358  f3f8		       85 1b		      sta	GRP0
    359  f3fa		       85 1c		      sta	GRP1
    360  f3fc
    361  f3fc				   TitleFrameBottomDraw
    362  f3fc
    363  f3fc							; Load Frame Color
    364  f3fc		       a9 06		      lda	#TITLE_WEB_COLOR
    365  f3fe		       85 08		      sta	COLUPF
    366  f400
    367  f400							; Start Counters
    368  f400		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    369  f402		       a0 00		      ldy	#0	; Image Counter
    370  f404
    371  f404				   .title_frame_bottom
    372  f404
    373  f404							; 76 machine cycles per scanline
    374  f404		       85 02		      sta	WSYNC
    375  f406
    376  f406				   .title_frame_bottom_load		; 66 cycles
    377  f406
    378  f406							; First half of image
    379  f406		       b9 86 f4 	      lda	TitleFrameBottom,y	; 5
    380  f409		       85 0d		      sta	PF0	; 4
    381  f40b		       b9 87 f4 	      lda	TitleFrameBottom+1,y	; 5
    382  f40e		       85 0e		      sta	PF1	; 4
    383  f410		       b9 88 f4 	      lda	TitleFrameBottom+2,y	; 5
    384  f413		       85 0f		      sta	PF2	; 4
    385  f415
      0  f415					      sleep	6
      1  f415				   .CYCLES    SET	6
      2  f415
      3  f415				  -	      IF	.CYCLES < 2
      4  f415				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f415				  -	      ERR
      6  f415					      ENDIF
      7  f415
      8  f415				  -	      IF	.CYCLES & 1
      9  f415				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f415				  -	      nop	0
     11  f415				  -	      ELSE
     12  f415				  -	      bit	VSYNC
     13  f415				  -	      ENDIF
     14  f415				  -.CYCLES    SET	.CYCLES - 3
     15  f415					      ENDIF
     16  f415
     17  f415					      REPEAT	.CYCLES / 2
     18  f415		       ea		      nop
     17  f415					      REPEND
     18  f416		       ea		      nop
     17  f416					      REPEND
     18  f417		       ea		      nop
     19  f418					      REPEND
    387  f418
    388  f418							; Second half of image
    389  f418		       b9 89 f4 	      lda	TitleFrameBottom+3,y	; 5
    390  f41b		       85 0d		      sta	PF0	; 4
    391  f41d		       b9 8a f4 	      lda	TitleFrameBottom+4,y	; 5
    392  f420		       85 0e		      sta	PF1	; 4
    393  f422		       b9 8b f4 	      lda	TitleFrameBottom+5,y	; 5
    394  f425		       85 0f		      sta	PF2	; 4
    395  f427
    396  f427				   .title_frame_bottom_index		; 4 cycles
    397  f427
    398  f427		       ca		      dex		; 2
    399  f428		       d0 da		      bne	.title_frame_bottom	; 2
    400  f42a
    401  f42a				   .title_frame_bottom_index_next		; 6 cycles
    402  f42a
    403  f42a							; Restore scanline counter
    404  f42a		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    405  f42c
    406  f42c		       98		      tya		; 2
    407  f42d		       18		      clc		; 2
    408  f42e		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    409  f430		       a8		      tay		; 2
    410  f431		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    411  f433		       d0 cf		      bne	.title_frame_bottom	; 2
    412  f435
    413  f435				   .title_frame_bottom_clean
    414  f435
    415  f435							; Clear out playfield
    416  f435		       a9 00		      lda	#0
    417  f437		       85 0d		      sta	PF0
    418  f439		       85 0e		      sta	PF1
    419  f43b		       85 0f		      sta	PF2
    420  f43d
    421  f43d				   .title_kernel_return
    422  f43d		       60		      rts
    423  f43e
    424  f43e				   TitleAssets
    425  f43e
    426  f43e							; Assets
------- FILE title_frame_top.asm LEVEL 3 PASS 2
      0  f43e					      include	"title_frame_top.asm"
      1  f43e				   TitleFrameTop
      2  f43e
      3  f43e		       a0		      .BYTE.b	%10100000
      4  f43f		       54		      .BYTE.b	%01010100
      5  f440		       01		      .BYTE.b	%00000001
      6  f441		       00		      .BYTE.b	%00000000
      7  f442		       03		      .BYTE.b	%00000011
      8  f443		       2c		      .BYTE.b	%00101100
      9  f444
     10  f444		       d0		      .BYTE.b	%11010000
     11  f445		       23		      .BYTE.b	%00100011
     12  f446		       00		      .BYTE.b	%00000000
     13  f447		       00		      .BYTE.b	%00000000
     14  f448		       00		      .BYTE.b	%00000000
     15  f449		       51		      .BYTE.b	%01010001
     16  f44a
     17  f44a		       60		      .BYTE.b	%01100000
     18  f44b		       dc		      .BYTE.b	%11011100
     19  f44c		       00		      .BYTE.b	%00000000
     20  f44d		       00		      .BYTE.b	%00000000
     21  f44e		       00		      .BYTE.b	%00000000
     22  f44f		       8e		      .BYTE.b	%10001110
     23  f450
     24  f450		       b0		      .BYTE.b	%10110000
     25  f451		       00		      .BYTE.b	%00000000
     26  f452		       00		      .BYTE.b	%00000000
     27  f453		       00		      .BYTE.b	%00000000
     28  f454		       00		      .BYTE.b	%00000000
     29  f455		       51		      .BYTE.b	%01010001
     30  f456
     31  f456		       40		      .BYTE.b	%01000000
     32  f457		       80		      .BYTE.b	%10000000
     33  f458		       00		      .BYTE.b	%00000000
     34  f459		       00		      .BYTE.b	%00000000
     35  f45a		       00		      .BYTE.b	%00000000
     36  f45b		       ad		      .BYTE.b	%10101101
     37  f45c
     38  f45c		       50		      .BYTE.b	%01010000
     39  f45d		       00		      .BYTE.b	%00000000
     40  f45e		       00		      .BYTE.b	%00000000
     41  f45f		       00		      .BYTE.b	%00000000
     42  f460		       01		      .BYTE.b	%00000001
     43  f461		       82		      .BYTE.b	%10000010
     44  f462
     45  f462		       20		      .BYTE.b	%00100000
     46  f463		       00		      .BYTE.b	%00000000
     47  f464		       00		      .BYTE.b	%00000000
     48  f465		       00		      .BYTE.b	%00000000
     49  f466		       02		      .BYTE.b	%00000010
     50  f467		       00		      .BYTE.b	%00000000
     51  f468
     52  f468		       c0		      .BYTE.b	%11000000
     53  f469		       77		      .BYTE.b	%01110111
     54  f46a		       66		      .BYTE.b	%01100110
     55  f46b		       30		      .BYTE.b	%00110000
     56  f46c		       22		      .BYTE.b	%00100010
     57  f46d		       1b		      .BYTE.b	%00011011
     58  f46e
     59  f46e		       40		      .BYTE.b	%01000000
     60  f46f		       52		      .BYTE.b	%01010010
     61  f470		       2a		      .BYTE.b	%00101010
     62  f471		       50		      .BYTE.b	%01010000
     63  f472		       22		      .BYTE.b	%00100010
     64  f473		       29		      .BYTE.b	%00101001
     65  f474
     66  f474		       c0		      .BYTE.b	%11000000
     67  f475		       72		      .BYTE.b	%01110010
     68  f476		       6a		      .BYTE.b	%01101010
     69  f477		       50		      .BYTE.b	%01010000
     70  f478		       22		      .BYTE.b	%00100010
     71  f479		       1b		      .BYTE.b	%00011011
     72  f47a
     73  f47a		       80		      .BYTE.b	%10000000
     74  f47b		       42		      .BYTE.b	%01000010
     75  f47c		       2a		      .BYTE.b	%00101010
     76  f47d		       30		      .BYTE.b	%00110000
     77  f47e		       2a		      .BYTE.b	%00101010
     78  f47f		       29		      .BYTE.b	%00101001
     79  f480
     80  f480		       c0		      .BYTE.b	%11000000
     81  f481		       47		      .BYTE.b	%01000111
     82  f482		       e6		      .BYTE.b	%11100110
     83  f483		       50		      .BYTE.b	%01010000
     84  f484		       14		      .BYTE.b	%00010100
     85  f485		       1b		      .BYTE.b	%00011011
------- FILE title.asm
------- FILE title_frame_bottom.asm LEVEL 3 PASS 2
      0  f486					      include	"title_frame_bottom.asm"
      1  f486				   TitleFrameBottom
      2  f486
      3  f486		       20		      .BYTE.b	%00100000
      4  f487		       00		      .BYTE.b	%00000000
      5  f488		       00		      .BYTE.b	%00000000
      6  f489		       00		      .BYTE.b	%00000000
      7  f48a		       00		      .BYTE.b	%00000000
      8  f48b		       64		      .BYTE.b	%01100100
      9  f48c
     10  f48c		       50		      .BYTE.b	%01010000
     11  f48d		       00		      .BYTE.b	%00000000
     12  f48e		       00		      .BYTE.b	%00000000
     13  f48f		       00		      .BYTE.b	%00000000
     14  f490		       00		      .BYTE.b	%00000000
     15  f491		       98		      .BYTE.b	%10011000
     16  f492
     17  f492		       90		      .BYTE.b	%10010000
     18  f493		       80		      .BYTE.b	%10000000
     19  f494		       00		      .BYTE.b	%00000000
     20  f495		       00		      .BYTE.b	%00000000
     21  f496		       00		      .BYTE.b	%00000000
     22  f497		       28		      .BYTE.b	%00101000
     23  f498
     24  f498		       60		      .BYTE.b	%01100000
     25  f499		       60		      .BYTE.b	%01100000
     26  f49a		       00		      .BYTE.b	%00000000
     27  f49b		       00		      .BYTE.b	%00000000
     28  f49c		       00		      .BYTE.b	%00000000
     29  f49d		       44		      .BYTE.b	%01000100
     30  f49e
     31  f49e		       d0		      .BYTE.b	%11010000
     32  f49f		       1c		      .BYTE.b	%00011100
     33  f4a0		       00		      .BYTE.b	%00000000
     34  f4a1		       00		      .BYTE.b	%00000000
     35  f4a2		       00		      .BYTE.b	%00000000
     36  f4a3		       ab		      .BYTE.b	%10101011
------- FILE title.asm
------- FILE title_spider.asm LEVEL 3 PASS 2
      0  f4a4					      include	"title_spider.asm"
      1  f4a4				   TitleSpider
      2  f4a4
      3  f4a4		       30		      .BYTE.b	%00110000
      4  f4a5		       67		      .BYTE.b	%01100111
      5  f4a6		       4f		      .BYTE.b	%01001111
      6  f4a7		       dd		      .BYTE.b	%11011101
      7  f4a8		       d8		      .BYTE.b	%11011000
      8  f4a9		       df		      .BYTE.b	%11011111
      9  f4aa		       4d		      .BYTE.b	%01001101
     10  f4ab		       6f		      .BYTE.b	%01101111
     11  f4ac		       3b		      .BYTE.b	%00111011
     12  f4ad
     13  f4ad		       37		      .BYTE.b	%00110111
     14  f4ae		       6d		      .BYTE.b	%01101101
     15  f4af		       d8		      .BYTE.b	%11011000
     16  f4b0		       df		      .BYTE.b	%11011111
     17  f4b1		       cd		      .BYTE.b	%11001101
     18  f4b2		       6f		      .BYTE.b	%01101111
     19  f4b3		       3b		      .BYTE.b	%00111011
     20  f4b4		       00		      .BYTE.b	%00000000
     21  f4b5		       00		      .BYTE.b	%00000000
------- FILE title.asm
    430  f4b6
    431  f4b6				   TitleAudio0
    432  f4b6
    433  f4b6		       0f		      .BYTE.b	#15	; B
    434  f4b7		       13		      .BYTE.b	#19	; G
    435  f4b8		       17		      .BYTE.b	#23	; E
    436  f4b9		       13		      .BYTE.b	#19	; G
    437  f4ba		       0e		      .BYTE.b	#14	; C
    438  f4bb		       13		      .BYTE.b	#19
    439  f4bc		       17		      .BYTE.b	#23
    440  f4bd		       13		      .BYTE.b	#19
    441  f4be		       0c		      .BYTE.b	#12	; D
    442  f4bf		       13		      .BYTE.b	#19
    443  f4c0		       17		      .BYTE.b	#23
    444  f4c1		       13		      .BYTE.b	#19
    445  f4c2		       0e		      .BYTE.b	#14	; C
    446  f4c3		       13		      .BYTE.b	#19
    447  f4c4		       17		      .BYTE.b	#23
    448  f4c5		       13		      .BYTE.b	#19
    449  f4c6
    450  f4c6				   TitleTone1
    451  f4c6
    452  f4c6		       0f		      .BYTE.b	#15	; Electronic Rumble
    453  f4c7		       ff		      .BYTE.b	#$FF
    454  f4c8		       01		      .BYTE.b	#1	; Low Pure Tone
    455  f4c9		       01		      .BYTE.b	#1
    456  f4ca		       08		      .BYTE.b	#8	; White Noise
    457  f4cb		       01		      .BYTE.b	#1
    458  f4cc		       01		      .BYTE.b	#1
    459  f4cd		       ff		      .BYTE.b	#$FF
    460  f4ce		       ff		      .BYTE.b	#$FF
    461  f4cf		       0f		      .BYTE.b	#15
    462  f4d0		       ff		      .BYTE.b	#$FF
    463  f4d1		       ff		      .BYTE.b	#$FF
    464  f4d2		       08		      .BYTE.b	#8
    465  f4d3		       ff		      .BYTE.b	#$FF
    466  f4d4		       01		      .BYTE.b	#1
    467  f4d5		       01		      .BYTE.b	#1
    468  f4d6
    469  f4d6				   TitleAudio1
    470  f4d6
    471  f4d6		       1d		      .BYTE.b	#29	; Kick
    472  f4d7		       ff		      .BYTE.b	#$FF
    473  f4d8		       1f		      .BYTE.b	#31	; C
    474  f4d9		       1f		      .BYTE.b	#31
    475  f4da		       07		      .BYTE.b	#7	; Snare
    476  f4db		       1f		      .BYTE.b	#31
    477  f4dc		       1f		      .BYTE.b	#31
    478  f4dd		       ff		      .BYTE.b	#$FF
    479  f4de		       ff		      .BYTE.b	#$FF
    480  f4df		       1d		      .BYTE.b	#29
    481  f4e0		       ff		      .BYTE.b	#$FF
    482  f4e1		       ff		      .BYTE.b	#$FF
    483  f4e2		       07		      .BYTE.b	#7
    484  f4e3		       ff		      .BYTE.b	#$FF
    485  f4e4		       17		      .BYTE.b	#23	; F
    486  f4e5		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4e6					      include	"game.asm"
      1  f4e6							;================
      2  f4e6							; Game
      3  f4e6							;================
      4  f4e6
      5  f4e6							; Constants
      6  f4e6
      7  f4e6		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f4e6		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4e6		       00 09	   GAME_AUDIO_STEP =	9
     10  f4e6		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4e6		       00 06	   GAME_AUDIO_TONE =	6
     12  f4e6
     13  f4e6							; Object Code
     14  f4e6
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f4e6					      include	"objects/score.asm"
      1  f4e6							;======================
      2  f4e6							; Score (playfield)
      3  f4e6							;======================
      4  f4e6
      5  f4e6							; Constants
      6  f4e6
      7  f4e6		       00 00	   SCORE_BG_COLOR =	#$00
      8  f4e6		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f4e6		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f4e6
     11  f4e6		       00 05	   SCORE_CHAR_SIZE =	5
     12  f4e6		       00 02	   SCORE_LINE_SIZE =	2
     13  f4e6		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f4e6
     15  f4e6							; Initialization
     16  f4e6
     17  f4e6				   ScoreInit
     18  f4e6
     19  f4e6							; Health Score
     20  f4e6		       a9 ff		      lda	#$FF
     21  f4e8		       85 92		      sta	ScoreValue+0
     22  f4ea
     23  f4ea							; Game Score
     24  f4ea		       a9 00		      lda	#0
     25  f4ec		       85 93		      sta	ScoreValue+1
     26  f4ee
     27  f4ee		       60		      rts
     28  f4ef
     29  f4ef							; Frame Update
     30  f4ef
     31  f4ef				   ScoreUpdate
     32  f4ef
     33  f4ef		       a2 01		      ldx	#1
     34  f4f1				   .score_update_loop
     35  f4f1
     36  f4f1							; Ones Digit
     37  f4f1		       b5 92		      lda	ScoreValue,x
     38  f4f3		       29 0f		      and	#$0f
     39  f4f5		       85 83		      sta	Temp
     40  f4f7		       0a		      asl
     41  f4f8		       0a		      asl
     42  f4f9		       65 83		      adc	Temp
     43  f4fb		       95 94		      sta	ScoreDigitOnes,x
     44  f4fd
     45  f4fd							; Tens Digit
     46  f4fd		       b5 92		      lda	ScoreValue,x
     47  f4ff		       29 f0		      and	#$f0
     48  f501		       4a		      lsr
     49  f502		       4a		      lsr
     50  f503		       85 83		      sta	Temp
     51  f505		       4a		      lsr
     52  f506		       4a		      lsr
     53  f507		       65 83		      adc	Temp
     54  f509		       95 96		      sta	ScoreDigitTens,x
     55  f50b
     56  f50b		       ca		      dex
     57  f50c		       10 e3		      bpl	.score_update_loop
     58  f50e
     59  f50e				   .score_update_end
     60  f50e		       60		      rts
     61  f50f
     62  f50f							; Draw loop (uses SCORE_LINES scanlines)
     63  f50f
     64  f50f				   ScoreDraw
     65  f50f
     66  f50f							; Load Colors
     67  f50f		       a9 00		      lda	#SCORE_BG_COLOR
     68  f511		       85 09		      sta	COLUBK
     69  f513		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f515		       85 08		      sta	COLUPF
     71  f517		       85 06		      sta	COLUP0
     72  f519		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f51b		       85 07		      sta	COLUP1
     74  f51d
     75  f51d							; Set Non-Mirror and p0/p1 color
     76  f51d		       a5 80		      lda	CtrlPf
     77  f51f		       29 fc		      and	#%11111100
     78  f521		       09 02		      ora	#%00000010
     79  f523		       85 80		      sta	CtrlPf
     80  f525		       85 0a		      sta	CTRLPF
     81  f527
     82  f527							;sta WSYNC
     83  f527
     84  f527		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f529
     86  f529				   .score_draw_line
     87  f529
     88  f529							; 1st Value
     89  f529		       a4 96		      ldy	ScoreDigitTens
     90  f52b		       b9 7f f5 	      lda	ScoreDigits,y
     91  f52e		       29 f0		      and	#$f0
     92  f530		       85 98		      sta	ScoreGfx
     93  f532		       a4 94		      ldy	ScoreDigitOnes
     94  f534		       b9 7f f5 	      lda	ScoreDigits,y
     95  f537		       29 0f		      and	#$0f
     96  f539		       05 98		      ora	ScoreGfx
     97  f53b		       85 98		      sta	ScoreGfx
     98  f53d
     99  f53d		       85 02		      sta	WSYNC
    100  f53f		       85 0e		      sta	PF1
    101  f541
    102  f541							; 2nd Value
    103  f541		       a4 97		      ldy	ScoreDigitTens+1
    104  f543		       b9 7f f5 	      lda	ScoreDigits,y
    105  f546		       29 f0		      and	#$f0
    106  f548		       85 99		      sta	ScoreGfx+1
    107  f54a		       a4 95		      ldy	ScoreDigitOnes+1
    108  f54c		       b9 7f f5 	      lda	ScoreDigits,y
    109  f54f		       29 0f		      and	#$0f
    110  f551		       05 99		      ora	ScoreGfx+1
    111  f553		       85 99		      sta	ScoreGfx+1
    112  f555
      0  f555					      sleep	12
      1  f555				   .CYCLES    SET	12
      2  f555
      3  f555				  -	      IF	.CYCLES < 2
      4  f555				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f555				  -	      ERR
      6  f555					      ENDIF
      7  f555
      8  f555				  -	      IF	.CYCLES & 1
      9  f555				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f555				  -	      nop	0
     11  f555				  -	      ELSE
     12  f555				  -	      bit	VSYNC
     13  f555				  -	      ENDIF
     14  f555				  -.CYCLES    SET	.CYCLES - 3
     15  f555					      ENDIF
     16  f555
     17  f555					      REPEAT	.CYCLES / 2
     18  f555		       ea		      nop
     17  f555					      REPEND
     18  f556		       ea		      nop
     17  f556					      REPEND
     18  f557		       ea		      nop
     17  f557					      REPEND
     18  f558		       ea		      nop
     17  f558					      REPEND
     18  f559		       ea		      nop
     17  f559					      REPEND
     18  f55a		       ea		      nop
     19  f55b					      REPEND
    114  f55b		       85 0e		      sta	PF1
    115  f55d
    116  f55d		       a4 98		      ldy	ScoreGfx
    117  f55f		       85 02		      sta	WSYNC
    118  f561
    119  f561		       84 0e		      sty	PF1
    120  f563
    121  f563		       e6 94		      inc	ScoreDigitOnes
    122  f565		       e6 95		      inc	ScoreDigitOnes+1
    123  f567		       e6 96		      inc	ScoreDigitTens
    124  f569		       e6 97		      inc	ScoreDigitTens+1
    125  f56b
      0  f56b					      sleep	12
      1  f56b				   .CYCLES    SET	12
      2  f56b
      3  f56b				  -	      IF	.CYCLES < 2
      4  f56b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f56b				  -	      ERR
      6  f56b					      ENDIF
      7  f56b
      8  f56b				  -	      IF	.CYCLES & 1
      9  f56b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f56b				  -	      nop	0
     11  f56b				  -	      ELSE
     12  f56b				  -	      bit	VSYNC
     13  f56b				  -	      ENDIF
     14  f56b				  -.CYCLES    SET	.CYCLES - 3
     15  f56b					      ENDIF
     16  f56b
     17  f56b					      REPEAT	.CYCLES / 2
     18  f56b		       ea		      nop
     17  f56b					      REPEND
     18  f56c		       ea		      nop
     17  f56c					      REPEND
     18  f56d		       ea		      nop
     17  f56d					      REPEND
     18  f56e		       ea		      nop
     17  f56e					      REPEND
     18  f56f		       ea		      nop
     17  f56f					      REPEND
     18  f570		       ea		      nop
     19  f571					      REPEND
    127  f571		       ca		      dex
    128  f572		       85 0e		      sta	PF1
    129  f574
    130  f574		       d0 b3		      bne	.score_draw_line
    131  f576		       85 02		      sta	WSYNC
    132  f578
    133  f578							; Clear
    134  f578		       a9 00		      lda	#0
    135  f57a		       85 0e		      sta	PF1
    136  f57c
    137  f57c		       85 02		      sta	WSYNC
    138  f57e
    139  f57e		       60		      rts
    140  f57f
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f57f					      include	"objects/score_digits.asm"
      1  f57f				   ScoreDigits
      2  f57f
      3  f57f		       77		      .BYTE.b	%01110111
      4  f580		       55		      .BYTE.b	%01010101
      5  f581		       55		      .BYTE.b	%01010101
      6  f582		       55		      .BYTE.b	%01010101
      7  f583		       77		      .BYTE.b	%01110111
      8  f584
      9  f584		       11		      .BYTE.b	%00010001
     10  f585		       11		      .BYTE.b	%00010001
     11  f586		       11		      .BYTE.b	%00010001
     12  f587		       11		      .BYTE.b	%00010001
     13  f588		       11		      .BYTE.b	%00010001
     14  f589
     15  f589		       77		      .BYTE.b	%01110111
     16  f58a		       11		      .BYTE.b	%00010001
     17  f58b		       77		      .BYTE.b	%01110111
     18  f58c		       44		      .BYTE.b	%01000100
     19  f58d		       77		      .BYTE.b	%01110111
     20  f58e
     21  f58e		       77		      .BYTE.b	%01110111
     22  f58f		       11		      .BYTE.b	%00010001
     23  f590		       33		      .BYTE.b	%00110011
     24  f591		       11		      .BYTE.b	%00010001
     25  f592		       77		      .BYTE.b	%01110111
     26  f593
     27  f593		       55		      .BYTE.b	%01010101
     28  f594		       55		      .BYTE.b	%01010101
     29  f595		       77		      .BYTE.b	%01110111
     30  f596		       11		      .BYTE.b	%00010001
     31  f597		       11		      .BYTE.b	%00010001
     32  f598
     33  f598		       77		      .BYTE.b	%01110111
     34  f599		       44		      .BYTE.b	%01000100
     35  f59a		       77		      .BYTE.b	%01110111
     36  f59b		       11		      .BYTE.b	%00010001
     37  f59c		       77		      .BYTE.b	%01110111
     38  f59d
     39  f59d		       77		      .BYTE.b	%01110111
     40  f59e		       44		      .BYTE.b	%01000100
     41  f59f		       77		      .BYTE.b	%01110111
     42  f5a0		       55		      .BYTE.b	%01010101
     43  f5a1		       77		      .BYTE.b	%01110111
     44  f5a2
     45  f5a2		       77		      .BYTE.b	%01110111
     46  f5a3		       11		      .BYTE.b	%00010001
     47  f5a4		       22		      .BYTE.b	%00100010
     48  f5a5		       22		      .BYTE.b	%00100010
     49  f5a6		       22		      .BYTE.b	%00100010
     50  f5a7
     51  f5a7		       77		      .BYTE.b	%01110111
     52  f5a8		       55		      .BYTE.b	%01010101
     53  f5a9		       77		      .BYTE.b	%01110111
     54  f5aa		       55		      .BYTE.b	%01010101
     55  f5ab		       77		      .BYTE.b	%01110111
     56  f5ac
     57  f5ac		       77		      .BYTE.b	%01110111
     58  f5ad		       55		      .BYTE.b	%01010101
     59  f5ae		       77		      .BYTE.b	%01110111
     60  f5af		       11		      .BYTE.b	%00010001
     61  f5b0		       11		      .BYTE.b	%00010001
     62  f5b1
     63  f5b1		       77		      .BYTE.b	%01110111
     64  f5b2		       55		      .BYTE.b	%01010101
     65  f5b3		       77		      .BYTE.b	%01110111
     66  f5b4		       55		      .BYTE.b	%01010101
     67  f5b5		       55		      .BYTE.b	%01010101
     68  f5b6
     69  f5b6		       66		      .BYTE.b	%01100110
     70  f5b7		       55		      .BYTE.b	%01010101
     71  f5b8		       66		      .BYTE.b	%01100110
     72  f5b9		       55		      .BYTE.b	%01010101
     73  f5ba		       66		      .BYTE.b	%01100110
     74  f5bb
     75  f5bb		       77		      .BYTE.b	%01110111
     76  f5bc		       44		      .BYTE.b	%01000100
     77  f5bd		       44		      .BYTE.b	%01000100
     78  f5be		       44		      .BYTE.b	%01000100
     79  f5bf		       77		      .BYTE.b	%01110111
     80  f5c0
     81  f5c0		       66		      .BYTE.b	%01100110
     82  f5c1		       55		      .BYTE.b	%01010101
     83  f5c2		       55		      .BYTE.b	%01010101
     84  f5c3		       55		      .BYTE.b	%01010101
     85  f5c4		       66		      .BYTE.b	%01100110
     86  f5c5
     87  f5c5		       77		      .BYTE.b	%01110111
     88  f5c6		       44		      .BYTE.b	%01000100
     89  f5c7		       66		      .BYTE.b	%01100110
     90  f5c8		       44		      .BYTE.b	%01000100
     91  f5c9		       77		      .BYTE.b	%01110111
     92  f5ca
     93  f5ca		       77		      .BYTE.b	%01110111
     94  f5cb		       44		      .BYTE.b	%01000100
     95  f5cc		       66		      .BYTE.b	%01100110
     96  f5cd		       44		      .BYTE.b	%01000100
     97  f5ce		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f5cf					      include	"objects/web.asm"
      1  f5cf							;================
      2  f5cf							; Web (Playfield)
      3  f5cf							;================
      4  f5cf
      5  f5cf							; Constants
      6  f5cf
      7  f5cf		       00 00	   WEB_BG_COLOR =	#$00
      8  f5cf		       00 06	   WEB_FG_COLOR =	#$06
      9  f5cf
     10  f5cf		       00 1e	   WEB_SIZE   =	30
     11  f5cf		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f5cf		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f5cf
     14  f5cf							; Scanline Draw
     15  f5cf
     16  f5cf				   WebDrawStart
     17  f5cf
     18  f5cf							; Load Colors
     19  f5cf		       a9 00		      lda	#WEB_BG_COLOR
     20  f5d1		       85 09		      sta	COLUBK
     21  f5d3		       a9 06		      lda	#WEB_FG_COLOR
     22  f5d5		       85 08		      sta	COLUPF
     23  f5d7
     24  f5d7							; Mirror playfield and use standard playfield color
     25  f5d7		       a5 80		      lda	CtrlPf
     26  f5d9		       29 fc		      and	#%11111100
     27  f5db		       09 01		      ora	#%00000001
     28  f5dd		       85 80		      sta	CtrlPf
     29  f5df		       85 0a		      sta	CTRLPF
     30  f5e1
     31  f5e1							; Initialize image index
     32  f5e1		       a9 00		      lda	#0
     33  f5e3		       85 9a		      sta	WebIndex
     34  f5e5		       a9 01		      lda	#1
     35  f5e7		       85 9b		      sta	WebDir
     36  f5e9
     37  f5e9		       60		      rts
     38  f5ea
     39  f5ea				   WebClean
     40  f5ea
     41  f5ea							; Clear out playfield
     42  f5ea		       a9 00		      lda	#0
     43  f5ec		       85 0d		      sta	PF0
     44  f5ee		       85 0e		      sta	PF1
     45  f5f0		       85 0f		      sta	PF2
     46  f5f2
     47  f5f2		       60		      rts
     48  f5f3
     49  f5f3							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f5f3					      include	"objects/web_image.asm"
      1  f5f3				   WebImagePF0
      2  f5f3		       00		      .BYTE.b	%00000000
      3  f5f4		       00		      .BYTE.b	%00000000
      4  f5f5		       00		      .BYTE.b	%00000000
      5  f5f6		       00		      .BYTE.b	%00000000
      6  f5f7		       00		      .BYTE.b	%00000000
      7  f5f8		       00		      .BYTE.b	%00000000
      8  f5f9		       00		      .BYTE.b	%00000000
      9  f5fa		       00		      .BYTE.b	%00000000
     10  f5fb		       00		      .BYTE.b	%00000000
     11  f5fc		       30		      .BYTE.b	%00110000
     12  f5fd		       e0		      .BYTE.b	%11100000
     13  f5fe		       20		      .BYTE.b	%00100000
     14  f5ff		       40		      .BYTE.b	%01000000
     15  f600		       40		      .BYTE.b	%01000000
     16  f601		       80		      .BYTE.b	%10000000
     17  f602		       80		      .BYTE.b	%10000000
     18  f603		       40		      .BYTE.b	%01000000
     19  f604		       40		      .BYTE.b	%01000000
     20  f605		       20		      .BYTE.b	%00100000
     21  f606		       e0		      .BYTE.b	%11100000
     22  f607		       30		      .BYTE.b	%00110000
     23  f608		       00		      .BYTE.b	%00000000
     24  f609		       00		      .BYTE.b	%00000000
     25  f60a		       00		      .BYTE.b	%00000000
     26  f60b		       00		      .BYTE.b	%00000000
     27  f60c		       00		      .BYTE.b	%00000000
     28  f60d		       00		      .BYTE.b	%00000000
     29  f60e		       00		      .BYTE.b	%00000000
     30  f60f		       00		      .BYTE.b	%00000000
     31  f610		       00		      .BYTE.b	%00000000
     32  f611
     33  f611				   WebImagePF1
     34  f611		       08		      .BYTE.b	%00001000
     35  f612		       06		      .BYTE.b	%00000110
     36  f613		       01		      .BYTE.b	%00000001
     37  f614		       00		      .BYTE.b	%00000000
     38  f615		       00		      .BYTE.b	%00000000
     39  f616		       01		      .BYTE.b	%00000001
     40  f617		       01		      .BYTE.b	%00000001
     41  f618		       02		      .BYTE.b	%00000010
     42  f619		       0c		      .BYTE.b	%00001100
     43  f61a		       30		      .BYTE.b	%00110000
     44  f61b		       c0		      .BYTE.b	%11000000
     45  f61c		       38		      .BYTE.b	%00111000
     46  f61d		       07		      .BYTE.b	%00000111
     47  f61e		       00		      .BYTE.b	%00000000
     48  f61f		       00		      .BYTE.b	%00000000
     49  f620		       00		      .BYTE.b	%00000000
     50  f621		       00		      .BYTE.b	%00000000
     51  f622		       07		      .BYTE.b	%00000111
     52  f623		       38		      .BYTE.b	%00111000
     53  f624		       c0		      .BYTE.b	%11000000
     54  f625		       30		      .BYTE.b	%00110000
     55  f626		       0c		      .BYTE.b	%00001100
     56  f627		       02		      .BYTE.b	%00000010
     57  f628		       01		      .BYTE.b	%00000001
     58  f629		       01		      .BYTE.b	%00000001
     59  f62a		       00		      .BYTE.b	%00000000
     60  f62b		       00		      .BYTE.b	%00000000
     61  f62c		       01		      .BYTE.b	%00000001
     62  f62d		       06		      .BYTE.b	%00000110
     63  f62e		       08		      .BYTE.b	%00001000
     64  f62f
     65  f62f				   WebImagePF2
     66  f62f		       20		      .BYTE.b	%00100000
     67  f630		       18		      .BYTE.b	%00011000
     68  f631		       04		      .BYTE.b	%00000100
     69  f632		       03		      .BYTE.b	%00000011
     70  f633		       3f		      .BYTE.b	%00111111
     71  f634		       c2		      .BYTE.b	%11000010
     72  f635		       04		      .BYTE.b	%00000100
     73  f636		       08		      .BYTE.b	%00001000
     74  f637		       08		      .BYTE.b	%00001000
     75  f638		       10		      .BYTE.b	%00010000
     76  f639		       20		      .BYTE.b	%00100000
     77  f63a		       20		      .BYTE.b	%00100000
     78  f63b		       41		      .BYTE.b	%01000001
     79  f63c		       8e		      .BYTE.b	%10001110
     80  f63d		       f0		      .BYTE.b	%11110000
     81  f63e		       f0		      .BYTE.b	%11110000
     82  f63f		       8e		      .BYTE.b	%10001110
     83  f640		       41		      .BYTE.b	%01000001
     84  f641		       20		      .BYTE.b	%00100000
     85  f642		       20		      .BYTE.b	%00100000
     86  f643		       10		      .BYTE.b	%00010000
     87  f644		       08		      .BYTE.b	%00001000
     88  f645		       08		      .BYTE.b	%00001000
     89  f646		       04		      .BYTE.b	%00000100
     90  f647		       c2		      .BYTE.b	%11000010
     91  f648		       3f		      .BYTE.b	%00111111
     92  f649		       03		      .BYTE.b	%00000011
     93  f64a		       04		      .BYTE.b	%00000100
     94  f64b		       18		      .BYTE.b	%00011000
     95  f64c		       20		      .BYTE.b	%00100000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f64d					      include	"objects/spider.asm"
      1  f64d							;=================
      2  f64d							; Spider (player0)
      3  f64d							;=================
      4  f64d
      5  f64d							; Constants
      6  f64d
      7  f64d		       00 56	   SPIDER_COLOR =	#$56
      8  f64d		       00 10	   SPIDER_SPRITE_SIZE =	16
      9  f64d		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     10  f64d		       00 02	   SPIDER_VEL_X =	2
     11  f64d		       00 02	   SPIDER_VEL_Y =	2
     12  f64d
     13  f64d		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f64d
     15  f64d							; Initialization
     16  f64d
     17  f64d				   SpiderInit
     18  f64d
     19  f64d							; Initialize Position in center of screen
     20  f64d		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f64f		       85 9e		      sta	SpiderPos
     22  f651		       a9 48		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f653		       85 9f		      sta	SpiderPos+1
     24  f655
     25  f655							; Setup Sprite
      0  f655					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f655				   .POINTER   SET	SpiderPtr
      2  f655				   .ADDRESS   SET	SpiderSprite
      3  f655
      4  f655		       a9 9e		      LDA	#<.ADDRESS
      5  f657		       85 9c		      STA	.POINTER
      6  f659		       a9 f7		      LDA	#>.ADDRESS
      7  f65b		       85 9d		      STA	.POINTER+1
      8  f65d
     27  f65d
     28  f65d							;    lda #SPIDER_COLOR
     29  f65d							;    sta SpiderColor
     30  f65d
     31  f65d		       60		      rts
     32  f65e
     33  f65e							; Frame Update
     34  f65e
     35  f65e				   SpiderUpdate
     36  f65e		       20 65 f6 	      jsr	SpiderControl
     37  f661		       20 4b f7 	      jsr	SpiderCollision
     38  f664		       60		      rts
     39  f665
     40  f665				   SpiderControl
     41  f665
     42  f665							; Control Position
     43  f665		       a6 9e		      ldx	SpiderPos
     44  f667		       a4 9f		      ldy	SpiderPos+1
     45  f669		       ad 80 02 	      lda	SWCHA
     46  f66c
     47  f66c				   .spider_control_check_right
     48  f66c		       30 02		      bmi	.spider_control_check_left
     49  f66e
     50  f66e					      REPEAT	#SPIDER_VEL_X
     51  f66e		       e8		      inx
     50  f66e					      REPEND
     51  f66f		       e8		      inx
     52  f670					      REPEND
     53  f670
     54  f670				   .spider_control_check_left
     55  f670		       2a		      rol
     56  f671		       30 02		      bmi	.spider_control_check_down
     57  f673
     58  f673					      REPEAT	#SPIDER_VEL_X
     59  f673		       ca		      dex
     58  f673					      REPEND
     59  f674		       ca		      dex
     60  f675					      REPEND
     61  f675
     62  f675				   .spider_control_check_down
     63  f675		       2a		      rol
     64  f676		       30 02		      bmi	.spider_control_check_up
     65  f678
     66  f678					      REPEAT	#SPIDER_VEL_Y
     67  f678		       88		      dey
     66  f678					      REPEND
     67  f679		       88		      dey
     68  f67a					      REPEND
     69  f67a
     70  f67a				   .spider_control_check_up
     71  f67a		       2a		      rol
     72  f67b		       30 02		      bmi	.spider_control_sprite
     73  f67d
     74  f67d					      REPEAT	#SPIDER_VEL_Y
     75  f67d		       c8		      iny
     74  f67d					      REPEND
     75  f67e		       c8		      iny
     76  f67f					      REPEND
     77  f67f
     78  f67f				   .spider_control_sprite
     79  f67f							; Control Sprite
     80  f67f		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f681
     82  f681				   .spider_control_sprite_x
     83  f681		       e4 9e		      cpx	SpiderPos
     84  f683		       90 04		      bcc	.spider_control_sprite_left
     85  f685		       f0 09		      beq	.spider_control_sprite_y
     86  f687		       b0 05		      bcs	.spider_control_sprite_right
     87  f689
     88  f689				   .spider_control_sprite_left
     89  f689		       09 80		      ora	#%10000000
     90  f68b		       4c 90 f6 	      jmp	.spider_control_sprite_y
     91  f68e
     92  f68e				   .spider_control_sprite_right
     93  f68e		       09 40		      ora	#%01000000
     94  f690
     95  f690				   .spider_control_sprite_y
     96  f690		       c4 9f		      cpy	SpiderPos+1
     97  f692		       90 04		      bcc	.spider_control_sprite_down
     98  f694		       f0 09		      beq	.spider_control_sprite_store
     99  f696		       b0 05		      bcs	.spider_control_sprite_up
    100  f698
    101  f698				   .spider_control_sprite_down
    102  f698		       09 10		      ora	#%00010000
    103  f69a		       4c 9f f6 	      jmp	.spider_control_sprite_store
    104  f69d
    105  f69d				   .spider_control_sprite_up
    106  f69d		       09 20		      ora	#%00100000
    107  f69f
    108  f69f				   .spider_control_sprite_store
    109  f69f		       c9 00		      cmp	#%00000000
    110  f6a1		       f0 02		      beq	.spider_control_boundary
    111  f6a3		       85 a0		      sta	SpiderCtrl
    112  f6a5
    113  f6a5				   .spider_control_boundary
    114  f6a5							; Check Playfield Boundaries
    115  f6a5
    116  f6a5				   .spider_control_boundary_left
    117  f6a5		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f6a7		       b0 05		      bcs	.spider_control_boundary_right
    119  f6a9		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f6ab		       4c b4 f6 	      jmp	.spider_control_boundary_top
    121  f6ae
    122  f6ae				   .spider_control_boundary_right
    123  f6ae		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    124  f6b0		       90 02		      bcc	.spider_control_boundary_top
    125  f6b2		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    126  f6b4
    127  f6b4				   .spider_control_boundary_top
    128  f6b4		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    129  f6b6		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f6b8		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    131  f6ba		       4c c3 f6 	      jmp	.spider_control_store
    132  f6bd
    133  f6bd				   .spider_control_boundary_bottom
    134  f6bd		       c0 90		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    135  f6bf		       90 02		      bcc	.spider_control_store
    136  f6c1		       a0 90		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    137  f6c3
    138  f6c3				   .spider_control_store
    139  f6c3							; Store new position
    140  f6c3		       86 9e		      stx	SpiderPos
    141  f6c5		       84 9f		      sty	SpiderPos+1
    142  f6c7
    143  f6c7							; TODO: Optimize this somehow?
    144  f6c7				   .spider_control_sprite_assign
    145  f6c7							; Skip if no change
    146  f6c7		       c9 00		      cmp	#%00000000
    147  f6c9		       f0 7f		      beq	.spider_control_return
    148  f6cb
    149  f6cb		       a2 00		      ldx	#%00000000	; For reflection
    150  f6cd
    151  f6cd				   .spider_control_sprite_assign_left
    152  f6cd		       c9 80		      cmp	#%10000000
    153  f6cf		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f6d1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f6d1				   .POINTER   SET	SpiderPtr
      2  f6d1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f6d1
      4  f6d1		       a9 be		      LDA	#<.ADDRESS
      5  f6d3		       85 9c		      STA	.POINTER
      6  f6d5		       a9 f7		      LDA	#>.ADDRESS
      7  f6d7		       85 9d		      STA	.POINTER+1
      8  f6d9
    155  f6d9		       a2 08		      ldx	#%00001000
    156  f6db		       4c 48 f7 	      jmp	.spider_control_reflect
    157  f6de
    158  f6de				   .spider_control_sprite_assign_right
    159  f6de		       c9 40		      cmp	#%01000000
    160  f6e0		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f6e2					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f6e2				   .POINTER   SET	SpiderPtr
      2  f6e2				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f6e2
      4  f6e2		       a9 be		      LDA	#<.ADDRESS
      5  f6e4		       85 9c		      STA	.POINTER
      6  f6e6		       a9 f7		      LDA	#>.ADDRESS
      7  f6e8		       85 9d		      STA	.POINTER+1
      8  f6ea
    162  f6ea		       4c 48 f7 	      jmp	.spider_control_reflect
    163  f6ed
    164  f6ed				   .spider_control_sprite_assign_top
    165  f6ed		       c9 20		      cmp	#%00100000
    166  f6ef		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f6f1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f6f1				   .POINTER   SET	SpiderPtr
      2  f6f1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f6f1
      4  f6f1		       a9 9e		      LDA	#<.ADDRESS
      5  f6f3		       85 9c		      STA	.POINTER
      6  f6f5		       a9 f7		      LDA	#>.ADDRESS
      7  f6f7		       85 9d		      STA	.POINTER+1
      8  f6f9
    168  f6f9		       4c 48 f7 	      jmp	.spider_control_reflect
    169  f6fc
    170  f6fc				   .spider_control_sprite_assign_bottom
    171  f6fc		       c9 10		      cmp	#%00010000
    172  f6fe		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f700					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f700				   .POINTER   SET	SpiderPtr
      2  f700				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f700
      4  f700		       a9 de		      LDA	#<.ADDRESS
      5  f702		       85 9c		      STA	.POINTER
      6  f704		       a9 f7		      LDA	#>.ADDRESS
      7  f706		       85 9d		      STA	.POINTER+1
      8  f708
    174  f708		       4c 48 f7 	      jmp	.spider_control_reflect
    175  f70b
    176  f70b				   .spider_control_sprite_assign_top_right
    177  f70b		       c9 60		      cmp	#%01100000
    178  f70d		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f70f					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f70f				   .POINTER   SET	SpiderPtr
      2  f70f				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f70f
      4  f70f		       a9 ae		      LDA	#<.ADDRESS
      5  f711		       85 9c		      STA	.POINTER
      6  f713		       a9 f7		      LDA	#>.ADDRESS
      7  f715		       85 9d		      STA	.POINTER+1
      8  f717
    180  f717		       4c 48 f7 	      jmp	.spider_control_reflect
    181  f71a
    182  f71a				   .spider_control_sprite_assign_bottom_right
    183  f71a		       c9 50		      cmp	#%01010000
    184  f71c		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f71e					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f71e				   .POINTER   SET	SpiderPtr
      2  f71e				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f71e
      4  f71e		       a9 ce		      LDA	#<.ADDRESS
      5  f720		       85 9c		      STA	.POINTER
      6  f722		       a9 f7		      LDA	#>.ADDRESS
      7  f724		       85 9d		      STA	.POINTER+1
      8  f726
    186  f726		       4c 48 f7 	      jmp	.spider_control_reflect
    187  f729
    188  f729				   .spider_control_sprite_assign_bottom_left
    189  f729		       c9 90		      cmp	#%10010000
    190  f72b		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f72d					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f72d				   .POINTER   SET	SpiderPtr
      2  f72d				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f72d
      4  f72d		       a9 ce		      LDA	#<.ADDRESS
      5  f72f		       85 9c		      STA	.POINTER
      6  f731		       a9 f7		      LDA	#>.ADDRESS
      7  f733		       85 9d		      STA	.POINTER+1
      8  f735
    192  f735		       a2 08		      ldx	#%00001000
    193  f737		       4c 48 f7 	      jmp	.spider_control_reflect
    194  f73a
    195  f73a				   .spider_control_sprite_assign_top_left
    196  f73a		       c9 a0		      cmp	#%10100000
    197  f73c		       d0 0a		      bne	.spider_control_reflect
      0  f73e					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f73e				   .POINTER   SET	SpiderPtr
      2  f73e				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f73e
      4  f73e		       a9 ae		      LDA	#<.ADDRESS
      5  f740		       85 9c		      STA	.POINTER
      6  f742		       a9 f7		      LDA	#>.ADDRESS
      7  f744		       85 9d		      STA	.POINTER+1
      8  f746
    199  f746		       a2 08		      ldx	#%00001000
    200  f748
    201  f748				   .spider_control_reflect
    202  f748		       86 0b		      stx	REFP0
    203  f74a
    204  f74a				   .spider_control_return
    205  f74a		       60		      rts
    206  f74b
    207  f74b				   SpiderCollision
    208  f74b		       a9 56		      lda	#SPIDER_COLOR
    209  f74d
    210  f74d				   .spider_collision_m0
    211  f74d							; Check stun status
    212  f74d		       a6 b0		      ldx	BugStunned
    213  f74f		       e0 00		      cpx	#0
    214  f751		       d0 04		      bne	.spider_collision_m1
    215  f753
    216  f753							; Collision for M0 (V set)
    217  f753		       24 00		      bit	CXM0P
    218  f755		       70 0d		      bvs	.spider_collision_active
    219  f757
    220  f757				   .spider_collision_m1
    221  f757							; Check stun status
    222  f757		       a6 b1		      ldx	BugStunned+1
    223  f759		       e0 00		      cpx	#0
    224  f75b		       d0 09		      bne	.spider_collision_return
    225  f75d
    226  f75d							; Collision for M1 (N set)
    227  f75d		       24 01		      bit	CXM1P
    228  f75f		       30 03		      bmi	.spider_collision_active
    229  f761
    230  f761		       4c 66 f7 	      jmp	.spider_collision_return
    231  f764
    232  f764				   .spider_collision_active
    233  f764		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f766
    235  f766				   .spider_collision_return
    236  f766		       85 a1		      sta	SpiderColor
    237  f768		       60		      rts
    238  f769
    239  f769				   SpiderPosition
    240  f769
    241  f769							; Set Position
    242  f769		       a2 00		      ldx	#0	; Object (player0)
    243  f76b		       a5 9e		      lda	SpiderPos	; X Position
    244  f76d		       20 00 f0 	      jsr	PosObject
    245  f770
    246  f770		       60		      rts
    247  f771
    248  f771							; Scanline Draw
    249  f771
    250  f771				   SpiderDrawStart
    251  f771
    252  f771							; Set player 0 to be quad size
    253  f771		       a5 81		      lda	NuSiz0
    254  f773		       29 f8		      and	#%11111000
    255  f775		       09 05		      ora	#%00000101
    256  f777		       85 81		      sta	NuSiz0
    257  f779		       85 04		      sta	NUSIZ0
    258  f77b
    259  f77b							; Set sprite color
    260  f77b		       a5 a1		      lda	SpiderColor
    261  f77d		       85 06		      sta	COLUP0
    262  f77f
    263  f77f							; Determine if we need to use vertical delay (odd line)
    264  f77f		       a5 9f		      lda	SpiderPos+1	; Y Position
    265  f781		       4a		      lsr
    266  f782		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f784
    268  f784		       a0 01		      ldy	#1
    269  f786		       4c 8b f7 	      jmp	.spider_draw_start_set_delay
    270  f789
    271  f789				   .spider_draw_start_nodelay
    272  f789		       a0 00		      ldy	#0
    273  f78b
    274  f78b				   .spider_draw_start_set_delay
    275  f78b		       84 25		      sty	VDELP0
    276  f78d
    277  f78d				   .spider_draw_start_pos
    278  f78d							; Calculate starting position
    279  f78d		       18		      clc
    280  f78e		       69 10		      adc	#SPIDER_SIZE
    281  f790		       85 a3		      sta	SpiderDrawPos
    282  f792
    283  f792							; Initialize sprite index and line buffer
    284  f792		       a9 00		      lda	#0
    285  f794		       85 a2		      sta	SpiderIndex
    286  f796		       85 a4		      sta	SpiderLine
    287  f798
    288  f798		       60		      rts
    289  f799
    290  f799				   SpiderClean
    291  f799
    292  f799							; Clear out Player0 sprite
    293  f799		       a9 00		      lda	#0
    294  f79b		       85 1b		      sta	GRP0
    295  f79d
    296  f79d		       60		      rts
    297  f79e
    298  f79e							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f79e					      include	"objects/spider_sprite.asm"
      1  f79e				   SpiderSprite
      2  f79e
      3  f79e		       99		      .BYTE.b	%10011001
      4  f79f		       99		      .BYTE.b	%10011001
      5  f7a0		       bd		      .BYTE.b	%10111101
      6  f7a1		       bd		      .BYTE.b	%10111101
      7  f7a2		       99		      .BYTE.b	%10011001
      8  f7a3		       99		      .BYTE.b	%10011001
      9  f7a4		       7e		      .BYTE.b	%01111110
     10  f7a5		       3c		      .BYTE.b	%00111100
     11  f7a6		       3c		      .BYTE.b	%00111100
     12  f7a7		       18		      .BYTE.b	%00011000
     13  f7a8		       3c		      .BYTE.b	%00111100
     14  f7a9		       7e		      .BYTE.b	%01111110
     15  f7aa		       bd		      .BYTE.b	%10111101
     16  f7ab		       bd		      .BYTE.b	%10111101
     17  f7ac		       bd		      .BYTE.b	%10111101
     18  f7ad		       99		      .BYTE.b	%10011001
     19  f7ae
     20  f7ae		       0b		      .BYTE.b	%00001011
     21  f7af		       0b		      .BYTE.b	%00001011
     22  f7b0		       13		      .BYTE.b	%00010011
     23  f7b1		       13		      .BYTE.b	%00010011
     24  f7b2		       1c		      .BYTE.b	%00011100
     25  f7b3		       1c		      .BYTE.b	%00011100
     26  f7b4		       3d		      .BYTE.b	%00111101
     27  f7b5		       3d		      .BYTE.b	%00111101
     28  f7b6		       7e		      .BYTE.b	%01111110
     29  f7b7		       fe		      .BYTE.b	%11111110
     30  f7b8		       b8		      .BYTE.b	%10111000
     31  f7b9		       b8		      .BYTE.b	%10111000
     32  f7ba		       10		      .BYTE.b	%00010000
     33  f7bb		       10		      .BYTE.b	%00010000
     34  f7bc		       30		      .BYTE.b	%00110000
     35  f7bd		       20		      .BYTE.b	%00100000
     36  f7be
     37  f7be		       c7		      .BYTE.b	%11000111
     38  f7bf		       c7		      .BYTE.b	%11000111
     39  f7c0		       28		      .BYTE.b	%00101000
     40  f7c1		       28		      .BYTE.b	%00101000
     41  f7c2		       3a		      .BYTE.b	%00111010
     42  f7c3		       7a		      .BYTE.b	%01111010
     43  f7c4		       fd		      .BYTE.b	%11111101
     44  f7c5		       ff		      .BYTE.b	%11111111
     45  f7c6		       ff		      .BYTE.b	%11111111
     46  f7c7		       fd		      .BYTE.b	%11111101
     47  f7c8		       7a		      .BYTE.b	%01111010
     48  f7c9		       3a		      .BYTE.b	%00111010
     49  f7ca		       28		      .BYTE.b	%00101000
     50  f7cb		       28		      .BYTE.b	%00101000
     51  f7cc		       c7		      .BYTE.b	%11000111
     52  f7cd		       c7		      .BYTE.b	%11000111
     53  f7ce
     54  f7ce		       20		      .BYTE.b	%00100000
     55  f7cf		       30		      .BYTE.b	%00110000
     56  f7d0		       10		      .BYTE.b	%00010000
     57  f7d1		       10		      .BYTE.b	%00010000
     58  f7d2		       b8		      .BYTE.b	%10111000
     59  f7d3		       bc		      .BYTE.b	%10111100
     60  f7d4		       fc		      .BYTE.b	%11111100
     61  f7d5		       7e		      .BYTE.b	%01111110
     62  f7d6		       3f		      .BYTE.b	%00111111
     63  f7d7		       1d		      .BYTE.b	%00011101
     64  f7d8		       0c		      .BYTE.b	%00001100
     65  f7d9		       1c		      .BYTE.b	%00011100
     66  f7da		       13		      .BYTE.b	%00010011
     67  f7db		       13		      .BYTE.b	%00010011
     68  f7dc		       0b		      .BYTE.b	%00001011
     69  f7dd		       0b		      .BYTE.b	%00001011
     70  f7de
     71  f7de		       99		      .BYTE.b	%10011001
     72  f7df		       bd		      .BYTE.b	%10111101
     73  f7e0		       bd		      .BYTE.b	%10111101
     74  f7e1		       bd		      .BYTE.b	%10111101
     75  f7e2		       7e		      .BYTE.b	%01111110
     76  f7e3		       3c		      .BYTE.b	%00111100
     77  f7e4		       18		      .BYTE.b	%00011000
     78  f7e5		       3c		      .BYTE.b	%00111100
     79  f7e6		       3c		      .BYTE.b	%00111100
     80  f7e7		       7e		      .BYTE.b	%01111110
     81  f7e8		       99		      .BYTE.b	%10011001
     82  f7e9		       99		      .BYTE.b	%10011001
     83  f7ea		       bd		      .BYTE.b	%10111101
     84  f7eb		       bd		      .BYTE.b	%10111101
     85  f7ec		       99		      .BYTE.b	%10011001
     86  f7ed		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f7ee					      include	"objects/line.asm"
      1  f7ee							;================
      2  f7ee							; Line (ball)
      3  f7ee							;================
      4  f7ee
      5  f7ee							; Constants
      6  f7ee
      7  f7ee		       00 08	   LINE_SIZE  =	8
      8  f7ee		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f7ee		       00 04	   LINE_VEL_X =	4
     10  f7ee		       00 04	   LINE_VEL_Y =	4
     11  f7ee
     12  f7ee		       00 08	   LINE_AUDIO_C =	8
     13  f7ee		       00 01	   LINE_AUDIO_F =	1
     14  f7ee		       00 04	   LINE_AUDIO_V =	4
     15  f7ee
     16  f7ee		       00 08	   LINE_SAMPLE_LEN =	8
     17  f7ee		       00 03	   LINE_SAMPLE_C =	3
     18  f7ee		       00 01	   LINE_SAMPLE_F =	1
     19  f7ee		       00 04	   LINE_SAMPLE_V =	4
     20  f7ee
     21  f7ee							; Initialization
     22  f7ee
     23  f7ee				   LineInit
     24  f7ee
     25  f7ee							; Initial Line Control
     26  f7ee		       a9 00		      lda	#0
     27  f7f0		       85 a7		      sta	LineEnabled
     28  f7f2		       85 a8		      sta	LinePos+0
     29  f7f4		       85 a9		      sta	LinePos+1
     30  f7f6		       85 aa		      sta	LineVelocity+0
     31  f7f8		       85 ab		      sta	LineVelocity+1
     32  f7fa		       85 ac		      sta	LineStartPos+0
     33  f7fc		       85 ad		      sta	LineStartPos+1
     34  f7fe		       85 ae		      sta	LineDrawPos+0
     35  f800		       85 af		      sta	LineDrawPos+1
     36  f802
     37  f802		       60		      rts
     38  f803
     39  f803							; Frame Update
     40  f803
     41  f803				   LineUpdate
     42  f803		       20 0d f8 	      jsr	LineControl
     43  f806		       20 c5 f8 	      jsr	LineObject
     44  f809		       20 0c f9 	      jsr	LineCollision
     45  f80c		       60		      rts
     46  f80d
     47  f80d				   LineControl
     48  f80d
     49  f80d							; Check if Fire Button on controller 1 is pressed
     50  f80d		       a5 0c		      lda	INPT4
     51  f80f		       30 0a		      bmi	.line_control_skip
     52  f811
     53  f811		       24 a7		      bit	LineEnabled
     54  f813		       30 06		      bmi	.line_control_skip
     55  f815
     56  f815		       a5 a0		      lda	SpiderCtrl
     57  f817		       c9 00		      cmp	#0
     58  f819		       d0 03		      bne	.line_control_fire
     59  f81b
     60  f81b				   .line_control_skip
     61  f81b		       4c c4 f8 	      jmp	.line_control_return
     62  f81e
     63  f81e				   .line_control_fire
     64  f81e		       20 54 f9 	      jsr	LineEnable
     65  f821
     66  f821				   .line_control_x
     67  f821		       a5 a0		      lda	SpiderCtrl
     68  f823		       29 c0		      and	#%11000000
     69  f825		       f0 0e		      beq	.line_control_x_none
     70  f827				   .line_control_x_left
     71  f827		       c9 80		      cmp	#%10000000
     72  f829		       d0 05		      bne	.line_control_x_right
     73  f82b
     74  f82b		       a9 fc		      lda	#-LINE_VEL_X
     75  f82d		       4c 37 f8 	      jmp	.line_control_x_store
     76  f830				   .line_control_x_right
     77  f830		       a9 04		      lda	#LINE_VEL_X
     78  f832		       4c 37 f8 	      jmp	.line_control_x_store
     79  f835				   .line_control_x_none
     80  f835		       a9 00		      lda	#0
     81  f837				   .line_control_x_store
     82  f837		       85 aa		      sta	LineVelocity
     83  f839
     84  f839				   .line_control_y
     85  f839		       a5 a0		      lda	SpiderCtrl
     86  f83b		       29 30		      and	#%00110000
     87  f83d		       f0 0e		      beq	.line_control_y_none
     88  f83f				   .line_control_y_up
     89  f83f		       c9 20		      cmp	#%00100000
     90  f841		       d0 05		      bne	.line_control_y_down
     91  f843
     92  f843		       a9 04		      lda	#LINE_VEL_Y
     93  f845		       4c 4f f8 	      jmp	.line_control_y_store
     94  f848				   .line_control_y_down
     95  f848		       a9 fc		      lda	#-LINE_VEL_Y
     96  f84a		       4c 4f f8 	      jmp	.line_control_y_store
     97  f84d				   .line_control_y_none
     98  f84d		       a9 00		      lda	#0
     99  f84f				   .line_control_y_store
    100  f84f		       85 ab		      sta	LineVelocity+1
    101  f851
    102  f851				   .line_control_position
    103  f851
    104  f851		       a2 00		      ldx	#0	; offsetX
    105  f853		       a0 00		      ldy	#0	; offsetY
    106  f855
    107  f855		       a5 a0		      lda	SpiderCtrl
    108  f857		       29 f0		      and	#%11110000
    109  f859
    110  f859				   .line_control_position_left
    111  f859		       c9 80		      cmp	#%10000000
    112  f85b		       d0 07		      bne	.line_control_position_right
    113  f85d
    114  f85d		       a2 00		      ldx	#0
    115  f85f		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    116  f861		       4c ac f8 	      jmp	.line_control_position_store
    117  f864
    118  f864				   .line_control_position_right
    119  f864		       c9 40		      cmp	#%01000000
    120  f866		       d0 07		      bne	.line_control_position_top
    121  f868
    122  f868		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    123  f86a		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    124  f86c		       4c ac f8 	      jmp	.line_control_position_store
    125  f86f
    126  f86f				   .line_control_position_top
    127  f86f		       c9 20		      cmp	#%00100000
    128  f871		       d0 07		      bne	.line_control_position_bottom
    129  f873
    130  f873		       a2 08		      ldx	#SPIDER_SIZE/2
    131  f875		       a0 10		      ldy	#SPIDER_SIZE
    132  f877		       4c ac f8 	      jmp	.line_control_position_store
    133  f87a
    134  f87a				   .line_control_position_bottom
    135  f87a		       c9 10		      cmp	#%00010000
    136  f87c		       d0 05		      bne	.line_control_position_top_right
    137  f87e
    138  f87e		       a2 08		      ldx	#SPIDER_SIZE/2
    139  f880		       4c ac f8 	      jmp	.line_control_position_store
    140  f883
    141  f883				   .line_control_position_top_right
    142  f883		       c9 60		      cmp	#%01100000
    143  f885		       d0 07		      bne	.line_control_position_bottom_right
    144  f887
    145  f887		       a2 10		      ldx	#SPIDER_SIZE
    146  f889		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    147  f88b		       4c ac f8 	      jmp	.line_control_position_store
    148  f88e
    149  f88e				   .line_control_position_bottom_right
    150  f88e		       c9 50		      cmp	#%01010000
    151  f890		       d0 07		      bne	.line_control_position_bottom_left
    152  f892
    153  f892		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    154  f894		       a0 00		      ldy	#0
    155  f896		       4c ac f8 	      jmp	.line_control_position_store
    156  f899
    157  f899				   .line_control_position_bottom_left
    158  f899		       c9 90		      cmp	#%10010000
    159  f89b		       d0 07		      bne	.line_control_position_top_left
    160  f89d
    161  f89d							; No Offset
    162  f89d		       a2 04		      ldx	#LINE_SIZE/2
    163  f89f		       a0 04		      ldy	#LINE_SIZE/2
    164  f8a1		       4c ac f8 	      jmp	.line_control_position_store
    165  f8a4
    166  f8a4				   .line_control_position_top_left
    167  f8a4		       c9 a0		      cmp	#%10100000
    168  f8a6		       d0 04		      bne	.line_control_position_store
    169  f8a8
    170  f8a8		       a2 00		      ldx	#0
    171  f8aa		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    172  f8ac
    173  f8ac				   .line_control_position_store
    174  f8ac
    175  f8ac							; Apply offsetX to playerX
    176  f8ac		       a5 9e		      lda	SpiderPos
    177  f8ae		       86 83		      stx	Temp
    178  f8b0		       18		      clc
    179  f8b1		       65 83		      adc	Temp
    180  f8b3		       aa		      tax
    181  f8b4
    182  f8b4							; Apply offsetY to playerY
    183  f8b4		       a5 9f		      lda	SpiderPos+1
    184  f8b6		       84 83		      sty	Temp
    185  f8b8		       18		      clc
    186  f8b9		       65 83		      adc	Temp
    187  f8bb		       a8		      tay
    188  f8bc
    189  f8bc		       86 a8		      stx	LinePos
    190  f8be		       84 a9		      sty	LinePos+1
    191  f8c0		       86 ac		      stx	LineStartPos
    192  f8c2		       84 ad		      sty	LineStartPos+1
    193  f8c4
    194  f8c4				   .line_control_return
    195  f8c4		       60		      rts
    196  f8c5
    197  f8c5				   LineObject
    198  f8c5
    199  f8c5							; Check if line is enabled
    200  f8c5		       24 a7		      bit	LineEnabled
    201  f8c7		       10 42		      bpl	.line_object_return
    202  f8c9
    203  f8c9							; Load position
    204  f8c9		       a6 a8		      ldx	LinePos
    205  f8cb		       a4 a9		      ldy	LinePos+1
    206  f8cd
    207  f8cd				   .line_object_distance
    208  f8cd
    209  f8cd							; Check distance from player with absolute value differences
    210  f8cd
    211  f8cd				   .line_object_distance_x
    212  f8cd		       8a		      txa
    213  f8ce		       18		      clc
    214  f8cf		       e5 ac		      sbc	LineStartPos
    215  f8d1		       b0 04		      bcs	.line_object_distance_x_check
    216  f8d3		       49 ff		      eor	#$FF	; C flag is clear here
    217  f8d5		       69 01		      adc	#$01	; form two's complement
    218  f8d7				   .line_object_distance_x_check		; Jumps to if positive
    219  f8d7		       c9 40		      cmp	#LINE_DISTANCE
    220  f8d9		       b0 2d		      bcs	.line_object_disable
    221  f8db
    222  f8db				   .line_object_distance_y
    223  f8db		       98		      tya
    224  f8dc		       18		      clc
    225  f8dd		       e5 ad		      sbc	LineStartPos+1
    226  f8df		       b0 04		      bcs	.line_object_distance_y_check
    227  f8e1		       49 ff		      eor	#$FF	; C flag is clear here
    228  f8e3		       69 01		      adc	#$01	; form two's complement
    229  f8e5				   .line_object_distance_y_check		; Jumps to if positive
    230  f8e5		       c9 40		      cmp	#LINE_DISTANCE
    231  f8e7		       b0 1f		      bcs	.line_object_disable
    232  f8e9
    233  f8e9				   .line_object_boundary
    234  f8e9				   .line_object_boundary_left
    235  f8e9		       e0 04		      cpx	#LINE_VEL_X
    236  f8eb		       90 1b		      bcc	.line_object_disable
    237  f8ed				   .line_object_boundary_right
    238  f8ed		       e0 9c		      cpx	#160-LINE_VEL_X
    239  f8ef		       b0 17		      bcs	.line_object_disable
    240  f8f1				   .line_object_boundary_bottom
    241  f8f1		       c0 04		      cpy	#LINE_VEL_Y
    242  f8f3		       90 13		      bcc	.line_object_disable
    243  f8f5				   .line_object_boundary_top
    244  f8f5		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    245  f8f7		       b0 0f		      bcs	.line_object_disable
    246  f8f9
    247  f8f9				   .line_object_velocity
    248  f8f9
    249  f8f9							; Apply Velocity
    250  f8f9		       8a		      txa
    251  f8fa		       18		      clc
    252  f8fb		       65 aa		      adc	LineVelocity
    253  f8fd		       85 a8		      sta	LinePos
    254  f8ff
    255  f8ff		       98		      tya
    256  f900		       18		      clc
    257  f901		       65 ab		      adc	LineVelocity+1
    258  f903		       85 a9		      sta	LinePos+1
    259  f905
    260  f905		       4c 0b f9 	      jmp	.line_object_return
    261  f908
    262  f908				   .line_object_disable
    263  f908		       20 62 f9 	      jsr	LineDisable
    264  f90b
    265  f90b				   .line_object_return
    266  f90b		       60		      rts
    267  f90c
    268  f90c				   LineCollision
    269  f90c
    270  f90c		       a9 78		      lda	#BUG_STUN_LENGTH
    271  f90e
    272  f90e				   .line_collision_m0
    273  f90e		       24 04		      bit	CXM0FB
    274  f910		       50 08		      bvc	.line_collision_m1
    275  f912
    276  f912							; Set stun timer
    277  f912		       85 b0		      sta	BugStunned+0
    278  f914
    279  f914							; Disable line
    280  f914		       20 62 f9 	      jsr	LineDisable
    281  f917		       4c 23 f9 	      jmp	.line_collision_sample
    282  f91a
    283  f91a				   .line_collision_m1
    284  f91a		       24 05		      bit	CXM1FB
    285  f91c		       50 08		      bvc	.line_collision_return
    286  f91e
    287  f91e							; Set stun timer
    288  f91e		       85 b1		      sta	BugStunned+1
    289  f920
    290  f920							; Disable line
    291  f920		       20 62 f9 	      jsr	LineDisable
    292  f923
    293  f923				   .line_collision_sample
    294  f923		       20 86 f9 	      jsr	LineSample
    295  f926
    296  f926				   .line_collision_return
    297  f926		       60		      rts
    298  f927
    299  f927				   LinePosition
    300  f927
    301  f927							; Set Line Position
    302  f927		       a2 04		      ldx	#4	; Object (ball)
    303  f929		       a5 a8		      lda	LinePos	; X Position
    304  f92b		       20 00 f0 	      jsr	PosObject
    305  f92e
    306  f92e		       60		      rts
    307  f92f
    308  f92f							; Scanline Draw
    309  f92f
    310  f92f				   LineDrawStart
    311  f92f
    312  f92f							; Set ball size to be 4 clocks (4/5 bits)
    313  f92f		       a5 80		      lda	CtrlPf
    314  f931		       29 cf		      and	#%11001111
    315  f933		       09 20		      ora	#%00100000
    316  f935		       85 80		      sta	CtrlPf
    317  f937		       85 0a		      sta	CTRLPF
    318  f939
    319  f939							; Determine if we need to use vertical delay (oven line)
    320  f939		       a5 a9		      lda	LinePos+1
    321  f93b		       4a		      lsr
    322  f93c		       90 05		      bcc	.line_draw_start_nodelay
    323  f93e
    324  f93e		       a0 01		      ldy	#1
    325  f940		       4c 45 f9 	      jmp	.line_draw_start_set_delay
    326  f943
    327  f943				   .line_draw_start_nodelay
    328  f943		       a0 00		      ldy	#0
    329  f945
    330  f945				   .line_draw_start_set_delay
    331  f945		       84 27		      sty	VDELBL
    332  f947
    333  f947				   .line_draw_start_pos
    334  f947							; Calculate starting position
    335  f947		       18		      clc
    336  f948		       85 ae		      sta	LineDrawPos+0
    337  f94a		       69 04		      adc	#LINE_SIZE/2
    338  f94c		       85 af		      sta	LineDrawPos+1
    339  f94e
    340  f94e		       60		      rts
    341  f94f
    342  f94f				   LineClean
    343  f94f
    344  f94f							; Clear out Line
    345  f94f		       a9 00		      lda	#0
    346  f951		       85 1f		      sta	ENABL
    347  f953
    348  f953		       60		      rts
    349  f954
    350  f954				   LineEnable
    351  f954		       a9 80		      lda	#%10000000
    352  f956		       85 a7		      sta	LineEnabled
    353  f958
    354  f958		       a5 91		      lda	SampleStep
    355  f95a		       c9 00		      cmp	#0
    356  f95c		       d0 03		      bne	.line_enable_return
    357  f95e
    358  f95e		       20 70 f9 	      jsr	LineAudioPlay
    359  f961
    360  f961				   .line_enable_return
    361  f961		       60		      rts
    362  f962
    363  f962				   LineDisable
    364  f962		       a9 00		      lda	#0
    365  f964		       85 a7		      sta	LineEnabled
    366  f966
    367  f966		       a5 91		      lda	SampleStep
    368  f968		       c9 00		      cmp	#0
    369  f96a		       d0 03		      bne	.line_disable_return
    370  f96c
    371  f96c		       20 7d f9 	      jsr	LineAudioMute
    372  f96f
    373  f96f				   .line_disable_return
    374  f96f		       60		      rts
    375  f970
    376  f970				   LineAudioPlay
    377  f970		       a9 08		      lda	#LINE_AUDIO_C
    378  f972		       85 16		      sta	AUDC1
    379  f974		       a9 01		      lda	#LINE_AUDIO_F
    380  f976		       85 18		      sta	AUDF1
    381  f978		       a9 04		      lda	#LINE_AUDIO_V
    382  f97a		       85 1a		      sta	AUDV1
    383  f97c		       60		      rts
    384  f97d
    385  f97d				   LineAudioMute
    386  f97d		       a9 00		      lda	#0
    387  f97f		       85 1a		      sta	AUDV1
    388  f981		       85 18		      sta	AUDF1
    389  f983		       85 16		      sta	AUDC1
    390  f985		       60		      rts
    391  f986
    392  f986				   LineSample
    393  f986		       a9 08		      lda	#LINE_SAMPLE_LEN
    394  f988		       85 91		      sta	SampleStep
    395  f98a		       a9 03		      lda	#LINE_SAMPLE_C
    396  f98c		       85 16		      sta	AUDC1
    397  f98e		       a9 01		      lda	#LINE_SAMPLE_F
    398  f990		       85 18		      sta	AUDF1
    399  f992		       a9 04		      lda	#LINE_SAMPLE_V
    400  f994		       85 1a		      sta	AUDV1
    401  f996		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f997					      include	"objects/bug.asm"
      1  f997							;======================
      2  f997							; Bugs (missiles 0 & 1)
      3  f997							;======================
      4  f997
      5  f997							; Constants
      6  f997
      7  f997		       00 08	   BUG_SIZE   =	8
      8  f997		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f997		       00 02	   BUG_SPEED  =	2
     10  f997		       00 78	   BUG_STUN_LENGTH =	120
     11  f997		       00 04	   BUG_POINTS =	4
     12  f997
     13  f997		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f997		       00 38	   BUG_COLOR_STUN =	#$38
     15  f997
     16  f997		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f997		       00 03	   BUG_SAMPLE_C =	3
     18  f997		       00 14	   BUG_SAMPLE_F =	20
     19  f997		       00 04	   BUG_SAMPLE_V =	4
     20  f997
     21  f997		       00 01	   BUG_COL_SAMPLE_LEN =	1
     22  f997		       00 08	   BUG_COL_SAMPLE_C =	8
     23  f997		       00 08	   BUG_COL_SAMPLE_F =	8
     24  f997		       00 03	   BUG_COL_SAMPLE_V =	3
     25  f997
     26  f997							; Initialization
     27  f997
     28  f997				   BugInit
     29  f997
     30  f997							; Initialize Bugs
     31  f997		       a2 01		      ldx	#1
     32  f999
     33  f999				   .bug_init_loop
     34  f999		       20 a0 f9 	      jsr	BugReset
     35  f99c
     36  f99c		       ca		      dex
     37  f99d		       10 fa		      bpl	.bug_init_loop
     38  f99f
     39  f99f		       60		      rts
     40  f9a0
     41  f9a0				   BugReset		; x = bug (0 or 1)
     42  f9a0
     43  f9a0							; Set random position
     44  f9a0		       20 13 f0 	      jsr	Random
     45  f9a3
     46  f9a3		       a5 85		      lda	Rand8
     47  f9a5		       29 7f		      and	#$7f
     48  f9a7		       95 b2		      sta	BugPosX,x
     49  f9a9
     50  f9a9		       a5 86		      lda	Rand16
     51  f9ab		       29 7f		      and	#$7f
     52  f9ad		       95 b4		      sta	BugPosY,x
     53  f9af
     54  f9af							; Set as active
     55  f9af		       a9 00		      lda	#0
     56  f9b1		       95 b0		      sta	BugStunned,x
     57  f9b3
     58  f9b3							; Reset Color
     59  f9b3		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     60  f9b5		       95 b6		      sta	BugColor,x
     61  f9b7
     62  f9b7		       60		      rts
     63  f9b8
     64  f9b8							; Frame Update
     65  f9b8
     66  f9b8				   BugUpdate
     67  f9b8
     68  f9b8		       a2 01		      ldx	#1
     69  f9ba				   .bug_update_loop
     70  f9ba		       86 83		      stx	Temp+0
     71  f9bc
     72  f9bc		       b5 b0		      lda	BugStunned,x
     73  f9be		       c9 00		      cmp	#0
     74  f9c0		       f0 08		      beq	.bug_update_active
     75  f9c2
     76  f9c2				   .bug_update_stunned
     77  f9c2		       d6 b0		      dec	BugStunned,x
     78  f9c4		       20 43 fa 	      jsr	BugStunCollision
     79  f9c7		       4c d0 f9 	      jmp	.bug_update_next
     80  f9ca
     81  f9ca				   .bug_update_active
     82  f9ca		       20 d6 f9 	      jsr	BugMovement
     83  f9cd		       20 29 fa 	      jsr	BugCollision
     84  f9d0
     85  f9d0				   .bug_update_next
     86  f9d0		       a6 83		      ldx	Temp+0
     87  f9d2		       ca		      dex
     88  f9d3		       10 e5		      bpl	.bug_update_loop
     89  f9d5
     90  f9d5		       60		      rts
     91  f9d6
     92  f9d6				   BugMovement
     93  f9d6
     94  f9d6				   .bug_movement_random
     95  f9d6		       20 13 f0 	      jsr	Random
     96  f9d9		       29 03		      and	#%00000011
     97  f9db		       85 84		      sta	Temp+1
     98  f9dd
     99  f9dd				   .bug_movement_load
    100  f9dd							; Load x and y values
    101  f9dd		       a6 83		      ldx	Temp+0
    102  f9df		       b5 b2		      lda	BugPosX,x
    103  f9e1		       b4 b4		      ldy	BugPosY,x
    104  f9e3		       aa		      tax
    105  f9e4
    106  f9e4				   .bug_movement_x
    107  f9e4							; Alter X Position
    108  f9e4		       a5 84		      lda	Temp+1
    109  f9e6		       29 01		      and	#%00000001
    110  f9e8
    111  f9e8				   .bug_movement_x_left
    112  f9e8		       c9 01		      cmp	#1
    113  f9ea		       d0 05		      bne	.bug_movement_x_right
    114  f9ec					      REPEAT	#BUG_SPEED
    115  f9ec		       ca		      dex
    114  f9ec					      REPEND
    115  f9ed		       ca		      dex
    116  f9ee					      REPEND
    117  f9ee		       4c f3 f9 	      jmp	.bug_movement_y
    118  f9f1
    119  f9f1				   .bug_movement_x_right
    120  f9f1					      REPEAT	#BUG_SPEED
    121  f9f1		       e8		      inx
    120  f9f1					      REPEND
    121  f9f2		       e8		      inx
    122  f9f3					      REPEND
    123  f9f3
    124  f9f3				   .bug_movement_y
    125  f9f3							; Alter Y Position
    126  f9f3		       a5 84		      lda	Temp+1
    127  f9f5		       29 02		      and	#%00000010
    128  f9f7		       4a		      lsr
    129  f9f8
    130  f9f8				   .bug_movement_y_up
    131  f9f8		       c9 01		      cmp	#1
    132  f9fa		       d0 05		      bne	.bug_movement_y_down
    133  f9fc					      REPEAT	#BUG_SPEED
    134  f9fc		       c8		      iny
    133  f9fc					      REPEND
    134  f9fd		       c8		      iny
    135  f9fe					      REPEND
    136  f9fe		       4c 03 fa 	      jmp	.bug_movement_boundary
    137  fa01
    138  fa01				   .bug_movement_y_down
    139  fa01					      REPEAT	#BUG_SPEED
    140  fa01		       88		      dey
    139  fa01					      REPEND
    140  fa02		       88		      dey
    141  fa03					      REPEND
    142  fa03
    143  fa03				   .bug_movement_boundary
    144  fa03
    145  fa03				   .bug_movement_boundary_left
    146  fa03		       e0 08		      cpx	#BUG_BOUNDARY
    147  fa05		       b0 05		      bcs	.bug_movement_boundary_right
    148  fa07		       a2 08		      ldx	#BUG_BOUNDARY
    149  fa09		       4c 12 fa 	      jmp	.bug_movement_boundary_top
    150  fa0c
    151  fa0c				   .bug_movement_boundary_right
    152  fa0c		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    153  fa0e		       90 02		      bcc	.bug_movement_boundary_top
    154  fa10		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    155  fa12
    156  fa12				   .bug_movement_boundary_top
    157  fa12		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    158  fa14		       b0 05		      bcs	.bug_movement_boundary_bottom
    159  fa16		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    160  fa18		       4c 21 fa 	      jmp	.bug_movement_store
    161  fa1b
    162  fa1b				   .bug_movement_boundary_bottom
    163  fa1b		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    164  fa1d		       90 02		      bcc	.bug_movement_store
    165  fa1f		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    166  fa21
    167  fa21				   .bug_movement_store
    168  fa21		       8a		      txa
    169  fa22		       a6 83		      ldx	Temp+0
    170  fa24		       95 b2		      sta	BugPosX,x
    171  fa26		       94 b4		      sty	BugPosY,x
    172  fa28
    173  fa28				   .bug_movement_return
    174  fa28		       60		      rts
    175  fa29
    176  fa29				   BugCollision
    177  fa29
    178  fa29		       e0 01		      cpx	#1
    179  fa2b		       f0 05		      beq	.bug_collision_m1
    180  fa2d
    181  fa2d				   .bug_collision_m0
    182  fa2d							; Collision for M0 (V set)
    183  fa2d		       24 00		      bit	CXM0P
    184  fa2f		       70 06		      bvs	.bug_collision_active
    185  fa31		       60		      rts
    186  fa32
    187  fa32				   .bug_collision_m1
    188  fa32							; Collision for M1 (N set)
    189  fa32		       24 01		      bit	CXM1P
    190  fa34		       30 01		      bmi	.bug_collision_active
    191  fa36		       60		      rts
    192  fa37
    193  fa37				   .bug_collision_active
    194  fa37
    195  fa37							; Reduce players score
    196  fa37		       a5 92		      lda	ScoreValue
    197  fa39		       c9 00		      cmp	#0
    198  fa3b		       f0 02		      beq	.bug_collision_score_skip
    199  fa3d		       c6 92		      dec	ScoreValue
    200  fa3f				   .bug_collision_score_skip
    201  fa3f
    202  fa3f							; Play sound
    203  fa3f		       20 a3 fa 	      jsr	BugColSample
    204  fa42
    205  fa42		       60		      rts
    206  fa43
    207  fa43				   BugStunCollision
    208  fa43
    209  fa43		       e0 01		      cpx	#1
    210  fa45		       f0 05		      beq	.bug_stun_collision_m1
    211  fa47
    212  fa47				   .bug_stun_collision_m0
    213  fa47							; Collision for M0 (V set)
    214  fa47		       24 00		      bit	CXM0P
    215  fa49		       70 06		      bvs	.bug_stun_collision_active
    216  fa4b		       60		      rts
    217  fa4c
    218  fa4c				   .bug_stun_collision_m1
    219  fa4c							; Collision for M1 (N set)
    220  fa4c		       24 01		      bit	CXM1P
    221  fa4e		       30 01		      bmi	.bug_stun_collision_active
    222  fa50		       60		      rts
    223  fa51
    224  fa51				   .bug_stun_collision_active
    225  fa51							; Add points to score
    226  fa51		       18		      clc
    227  fa52		       a5 93		      lda	ScoreValue+1
    228  fa54		       69 04		      adc	#BUG_POINTS
    229  fa56		       85 93		      sta	ScoreValue+1
    230  fa58
    231  fa58							; Reset bug
    232  fa58		       20 a0 f9 	      jsr	BugReset
    233  fa5b
    234  fa5b							; Play sample
    235  fa5b		       20 92 fa 	      jsr	BugSample
    236  fa5e
    237  fa5e		       60		      rts
    238  fa5f
    239  fa5f							; Horizontal Positioning
    240  fa5f
    241  fa5f				   BugPosition
    242  fa5f
    243  fa5f		       a2 02		      ldx	#2
    244  fa61		       a5 b2		      lda	BugPosX+0
    245  fa63		       20 00 f0 	      jsr	PosObject
    246  fa66
    247  fa66		       a2 03		      ldx	#3
    248  fa68		       a5 b3		      lda	BugPosX+1
    249  fa6a		       20 00 f0 	      jsr	PosObject
    250  fa6d
    251  fa6d		       60		      rts
    252  fa6e
    253  fa6e							; Scanline Draw
    254  fa6e
    255  fa6e				   BugDrawStart
    256  fa6e
    257  fa6e		       a0 01		      ldy	#1
    258  fa70				   .bug_draw_start_loop
    259  fa70
    260  fa70							; Set missile 0 & 1 to be 8 clock size
    261  fa70		       b9 81 00 	      lda	NuSiz0,y
    262  fa73		       09 30		      ora	#%00110000
    263  fa75		       99 81 00 	      sta	NuSiz0,y
    264  fa78		       99 04 00 	      sta	NUSIZ0,y
    265  fa7b
    266  fa7b							; Setup half scanline positions
    267  fa7b		       b9 b4 00 	      lda	BugPosY,y
    268  fa7e		       4a		      lsr
    269  fa7f		       99 b8 00 	      sta	BugDrawPosBottom,y
    270  fa82
    271  fa82		       69 04		      adc	#BUG_SIZE/2
    272  fa84		       99 ba 00 	      sta	BugDrawPosTop,y
    273  fa87
    274  fa87		       88		      dey
    275  fa88		       10 e6		      bpl	.bug_draw_start_loop
    276  fa8a
    277  fa8a		       60		      rts
    278  fa8b
    279  fa8b				   BugClean
    280  fa8b		       a9 00		      lda	#0
    281  fa8d		       85 1d		      sta	ENAM0
    282  fa8f		       85 1e		      sta	ENAM1
    283  fa91		       60		      rts
    284  fa92
    285  fa92				   BugSample
    286  fa92		       a9 1e		      lda	#BUG_SAMPLE_LEN
    287  fa94		       85 91		      sta	SampleStep
    288  fa96		       a9 03		      lda	#BUG_SAMPLE_C
    289  fa98		       85 16		      sta	AUDC1
    290  fa9a		       a9 14		      lda	#BUG_SAMPLE_F
    291  fa9c		       85 18		      sta	AUDF1
    292  fa9e		       a9 04		      lda	#BUG_SAMPLE_V
    293  faa0		       85 1a		      sta	AUDV1
    294  faa2		       60		      rts
    295  faa3
    296  faa3				   BugColSample
    297  faa3		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    298  faa5		       85 91		      sta	SampleStep
    299  faa7		       a9 08		      lda	#BUG_COL_SAMPLE_C
    300  faa9		       85 16		      sta	AUDC1
    301  faab		       a9 08		      lda	#BUG_COL_SAMPLE_F
    302  faad		       85 18		      sta	AUDF1
    303  faaf		       a9 03		      lda	#BUG_COL_SAMPLE_V
    304  fab1		       85 1a		      sta	AUDV1
    305  fab3		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fab4					      include	"objects/swatter.asm"
      1  fab4							;==================
      2  fab4							; Swatter (player1)
      3  fab4							;==================
      4  fab4
      5  fab4							; Constants
      6  fab4
      7  fab4		       00 36	   SWATTER_COLOR =	#$36
      8  fab4		       00 30	   SWATTER_HOLD_COLOR =	#$30
      9  fab4		       00 14	   SWATTER_SPRITE_SIZE =	#20
     10  fab4		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     11  fab4
     12  fab4		       00 b4	   SWATTER_WAIT_TIME =	60*3	; 60 frames per second
     13  fab4		       00 3c	   SWATTER_HOLD_TIME =	60
     14  fab4		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     15  fab4
     16  fab4		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     17  fab4		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     18  fab4		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     19  fab4
     20  fab4		       00 10	   SWATTER_HIT_DAMAGE =	#$10
     21  fab4
     22  fab4		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fab4		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fab4		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fab4		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fab4		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fab4
     28  fab4		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fab4		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fab4		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fab4		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fab4
     33  fab4		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fab4		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fab4		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fab4		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fab4
     38  fab4							; Initialization
     39  fab4
     40  fab4				   SwatterInit
     41  fab4
     42  fab4		       20 79 fb 	      jsr	SwatterReset
     43  fab7
     44  fab7		       60		      rts
     45  fab8
     46  fab8							; Frame Update
     47  fab8
     48  fab8				   SwatterUpdate
     49  fab8
     50  fab8				   .swatter_update_color
     51  fab8		       a5 be		      lda	SwatterState
     52  faba		       c9 80		      cmp	#SWATTER_STATE_HOLD
     53  fabc		       d0 05		      bne	.swatter_update_color_active
     54  fabe				   .swatter_update_color_hold
     55  fabe		       a9 30		      lda	#SWATTER_HOLD_COLOR
     56  fac0		       4c c5 fa 	      jmp	.swatter_update_color_set
     57  fac3				   .swatter_update_color_active
     58  fac3		       a9 36		      lda	#SWATTER_COLOR
     59  fac5				   .swatter_update_color_set
     60  fac5		       85 bf		      sta	SwatterColor
     61  fac7
     62  fac7				   .swatter_update_hold_sample
     63  fac7		       a4 be		      ldy	SwatterState
     64  fac9		       c0 80		      cpy	#SWATTER_STATE_HOLD
     65  facb		       d0 0f		      bne	.swatter_update_state
     66  facd
     67  facd		       c6 c3		      dec	SwatterSampleCount
     68  facf		       d0 0b		      bne	.swatter_update_state
     69  fad1
     70  fad1		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     71  fad3		       85 c3		      sta	SwatterSampleCount
     72  fad5
     73  fad5		       c6 c4		      dec	SwatterSampleF
     74  fad7		       a4 c4		      ldy	SwatterSampleF
     75  fad9		       20 99 fb 	      jsr	SwatterHoldSample
     76  fadc
     77  fadc				   .swatter_update_state
     78  fadc		       a6 8f		      ldx	FrameTimer+1
     79  fade		       e0 00		      cpx	#0
     80  fae0		       d0 2d		      bne	.swatter_update_collision
     81  fae2
     82  fae2		       a4 be		      ldy	SwatterState
     83  fae4		       c0 00		      cpy	#SWATTER_STATE_WAIT
     84  fae6		       f0 0a		      beq	.swatter_update_state_wait
     85  fae8
     86  fae8		       c0 80		      cpy	#SWATTER_STATE_HOLD
     87  faea		       f0 18		      beq	.swatter_update_state_hold
     88  faec
     89  faec							; Else we're at the end of the active state
     90  faec		       20 79 fb 	      jsr	SwatterReset
     91  faef		       4c 1e fb 	      jmp	.swatter_update_return
     92  faf2
     93  faf2				   .swatter_update_state_wait
     94  faf2		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
     95  faf4		       84 c4		      sty	SwatterSampleF
     96  faf6		       20 99 fb 	      jsr	SwatterHoldSample
     97  faf9
     98  faf9		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     99  fafb		       85 c3		      sta	SwatterSampleCount
    100  fafd
    101  fafd		       a9 80		      lda	#SWATTER_STATE_HOLD
    102  faff		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    103  fb01		       4c 0b fb 	      jmp	.swatter_update_state_set
    104  fb04
    105  fb04				   .swatter_update_state_hold
    106  fb04		       20 a8 fb 	      jsr	SwatterActiveSample
    107  fb07
    108  fb07		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    109  fb09		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    110  fb0b
    111  fb0b				   .swatter_update_state_set
    112  fb0b		       85 be		      sta	SwatterState
    113  fb0d		       86 8f		      stx	FrameTimer+1
    114  fb0f
    115  fb0f				   .swatter_update_collision
    116  fb0f							; Check 1 frame after active
    117  fb0f		       a5 be		      lda	SwatterState
    118  fb11		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    119  fb13		       d0 09		      bne	.swatter_update_return
    120  fb15		       a6 8f		      ldx	FrameTimer+1
    121  fb17		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    122  fb19		       d0 03		      bne	.swatter_update_return
    123  fb1b
    124  fb1b		       20 1f fb 	      jsr	SwatterCollision
    125  fb1e
    126  fb1e				   .swatter_update_return
    127  fb1e		       60		      rts
    128  fb1f
    129  fb1f				   SwatterCollision
    130  fb1f		       24 00		      bit	CXM0P
    131  fb21		       30 09		      bmi	.swatter_collision_m0
    132  fb23
    133  fb23		       24 01		      bit	CXM1P
    134  fb25		       70 0a		      bvs	.swatter_collision_m1
    135  fb27
    136  fb27		       24 07		      bit	CXPPMM
    137  fb29		       30 0e		      bmi	.swatter_collision_p0
    138  fb2b
    139  fb2b		       60		      rts
    140  fb2c
    141  fb2c				   .swatter_collision_m0
    142  fb2c		       a2 00		      ldx	#0
    143  fb2e		       4c 33 fb 	      jmp	.swatter_collision_bug_reset
    144  fb31
    145  fb31				   .swatter_collision_m1
    146  fb31		       a2 01		      ldx	#1
    147  fb33
    148  fb33				   .swatter_collision_bug_reset
    149  fb33		       20 a0 f9 	      jsr	BugReset
    150  fb36		       4c 4b fb 	      jmp	.swatter_collision_active
    151  fb39
    152  fb39				   .swatter_collision_p0
    153  fb39
    154  fb39		       a5 92		      lda	ScoreValue
    155  fb3b		       c9 10		      cmp	#SWATTER_HIT_DAMAGE
    156  fb3d		       90 08		      bcc	.swatter_collision_p0_zero
    157  fb3f		       f0 06		      beq	.swatter_collision_p0_zero
    158  fb41
    159  fb41		       18		      clc
    160  fb42		       e9 10		      sbc	#SWATTER_HIT_DAMAGE
    161  fb44		       4c 49 fb 	      jmp	.swatter_collision_p0_set
    162  fb47
    163  fb47				   .swatter_collision_p0_zero
    164  fb47		       a9 00		      lda	#0
    165  fb49
    166  fb49				   .swatter_collision_p0_set
    167  fb49		       85 92		      sta	ScoreValue
    168  fb4b
    169  fb4b				   .swatter_collision_active
    170  fb4b		       20 b9 fb 	      jsr	SwatterHitSample
    171  fb4e
    172  fb4e		       60		      rts
    173  fb4f
    174  fb4f				   SwatterPosition
    175  fb4f
    176  fb4f							; Set Position
    177  fb4f		       a2 01		      ldx	#1	; Object (player1)
    178  fb51		       a5 bc		      lda	SwatterPos	; X Position
    179  fb53		       20 00 f0 	      jsr	PosObject
    180  fb56
    181  fb56		       60		      rts
    182  fb57
    183  fb57							; Scanline Draw
    184  fb57
    185  fb57				   SwatterDrawStart
    186  fb57
    187  fb57							; Set player 1 to be quad size
    188  fb57		       a5 82		      lda	NuSiz1
    189  fb59		       29 f8		      and	#%11111000
    190  fb5b		       09 07		      ora	#%00000111
    191  fb5d		       85 82		      sta	NuSiz1
    192  fb5f		       85 05		      sta	NUSIZ1
    193  fb61
    194  fb61							; Set sprite color
    195  fb61		       a5 bf		      lda	SwatterColor
    196  fb63		       85 07		      sta	COLUP1
    197  fb65
    198  fb65							; Note: Doesn't need vertical delay
    199  fb65
    200  fb65							; Calculate starting position
    201  fb65		       a5 bd		      lda	SwatterPos+1	; Y Position
    202  fb67		       4a		      lsr
    203  fb68		       18		      clc
    204  fb69		       69 14		      adc	#SWATTER_SPRITE_SIZE
    205  fb6b		       85 c1		      sta	SwatterDrawPos
    206  fb6d
    207  fb6d							; Initialize sprite index
    208  fb6d		       a9 00		      lda	#0
    209  fb6f		       85 c0		      sta	SwatterIndex
    210  fb71		       85 c2		      sta	SwatterLine
    211  fb73
    212  fb73		       60		      rts
    213  fb74
    214  fb74				   SwatterClean
    215  fb74
    216  fb74							; Clear out Player1 sprite
    217  fb74		       a9 00		      lda	#0
    218  fb76		       85 1c		      sta	GRP1
    219  fb78
    220  fb78		       60		      rts
    221  fb79
    222  fb79				   SwatterReset
    223  fb79							; Initialize Swatter State
    224  fb79		       a9 00		      lda	#SWATTER_STATE_WAIT
    225  fb7b		       85 be		      sta	SwatterState
    226  fb7d
    227  fb7d							; Set Wait Timer
    228  fb7d		       20 13 f0 	      jsr	Random
    229  fb80		       a5 85		      lda	Rand8
    230  fb82		       29 3f		      and	#$3f
    231  fb84		       18		      clc
    232  fb85		       69 b4		      adc	#SWATTER_WAIT_TIME
    233  fb87		       85 8f		      sta	FrameTimer+1
    234  fb89
    235  fb89							; Set Random Position
    236  fb89		       20 13 f0 	      jsr	Random
    237  fb8c		       a5 85		      lda	Rand8	; X Position
    238  fb8e		       29 7f		      and	#$7f
    239  fb90		       85 bc		      sta	SwatterPos+0
    240  fb92		       a5 86		      lda	Rand16	; Y Position
    241  fb94		       29 7e		      and	#$7e	; Ensure that Y position is even
    242  fb96		       85 bd		      sta	SwatterPos+1
    243  fb98
    244  fb98		       60		      rts
    245  fb99
    246  fb99				   SwatterHoldSample
    247  fb99		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    248  fb9b		       85 91		      sta	SampleStep
    249  fb9d		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    250  fb9f		       85 16		      sta	AUDC1
    251  fba1		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    252  fba3		       85 1a		      sta	AUDV1
    253  fba5
    254  fba5		       84 18		      sty	AUDF1	; Store value of y as frequency
    255  fba7
    256  fba7		       60		      rts
    257  fba8
    258  fba8				   SwatterActiveSample
    259  fba8		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    260  fbaa		       85 91		      sta	SampleStep
    261  fbac		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    262  fbae		       85 16		      sta	AUDC1
    263  fbb0		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    264  fbb2		       85 18		      sta	AUDF1
    265  fbb4		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    266  fbb6		       85 1a		      sta	AUDV1
    267  fbb8		       60		      rts
    268  fbb9
    269  fbb9				   SwatterHitSample
    270  fbb9		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    271  fbbb		       85 91		      sta	SampleStep
    272  fbbd		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    273  fbbf		       85 16		      sta	AUDC1
    274  fbc1		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    275  fbc3		       85 18		      sta	AUDF1
    276  fbc5		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    277  fbc7		       85 1a		      sta	AUDV1
    278  fbc9		       60		      rts
    279  fbca
    280  fbca							; Swatter Sprites
------- FILE objects/swatter_sprite.asm LEVEL 4 PASS 2
      0  fbca					      include	"objects/swatter_sprite.asm"
      1  fbca				   SwatterSprite
      2  fbca
      3  fbca		       3c		      .BYTE.b	%00111100
      4  fbcb		       3c		      .BYTE.b	%00111100
      5  fbcc		       56		      .BYTE.b	%01010110
      6  fbcd		       6a		      .BYTE.b	%01101010
      7  fbce		       d5		      .BYTE.b	%11010101
      8  fbcf		       ab		      .BYTE.b	%10101011
      9  fbd0		       d5		      .BYTE.b	%11010101
     10  fbd1		       ab		      .BYTE.b	%10101011
     11  fbd2		       d5		      .BYTE.b	%11010101
     12  fbd3		       ab		      .BYTE.b	%10101011
     13  fbd4		       d5		      .BYTE.b	%11010101
     14  fbd5		       ab		      .BYTE.b	%10101011
     15  fbd6		       56		      .BYTE.b	%01010110
     16  fbd7		       6a		      .BYTE.b	%01101010
     17  fbd8		       56		      .BYTE.b	%01010110
     18  fbd9		       6a		      .BYTE.b	%01101010
     19  fbda		       34		      .BYTE.b	%00110100
     20  fbdb		       2c		      .BYTE.b	%00101100
     21  fbdc		       34		      .BYTE.b	%00110100
     22  fbdd		       18		      .BYTE.b	%00011000
------- FILE objects/swatter.asm
------- FILE game.asm
     21  fbde
     22  fbde							; Initialization
     23  fbde
     24  fbde				   GameInit
     25  fbde
     26  fbde							; Setup logic and kernel
      0  fbde					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fbde				   .POINTER   SET	VBlankPtr
      2  fbde				   .ADDRESS   SET	GameVerticalBlank
      3  fbde
      4  fbde		       a9 2c		      LDA	#<.ADDRESS
      5  fbe0		       85 87		      STA	.POINTER
      6  fbe2		       a9 fc		      LDA	#>.ADDRESS
      7  fbe4		       85 88		      STA	.POINTER+1
      8  fbe6
      0  fbe6					      SET_POINTER	KernelPtr, GameKernel
      1  fbe6				   .POINTER   SET	KernelPtr
      2  fbe6				   .ADDRESS   SET	GameKernel
      3  fbe6
      4  fbe6		       a9 af		      LDA	#<.ADDRESS
      5  fbe8		       85 89		      STA	.POINTER
      6  fbea		       a9 fc		      LDA	#>.ADDRESS
      7  fbec		       85 8a		      STA	.POINTER+1
      8  fbee
      0  fbee					      SET_POINTER	OverScanPtr, GameOverScan
      1  fbee				   .POINTER   SET	OverScanPtr
      2  fbee				   .ADDRESS   SET	GameOverScan
      3  fbee
      4  fbee		       a9 53		      LDA	#<.ADDRESS
      5  fbf0		       85 8b		      STA	.POINTER
      6  fbf2		       a9 fc		      LDA	#>.ADDRESS
      7  fbf4		       85 8c		      STA	.POINTER+1
      8  fbf6
     30  fbf6
     31  fbf6							; Mute Audio
     32  fbf6		       a9 00		      lda	#0
     33  fbf8		       85 15		      sta	AUDC0
     34  fbfa		       85 19		      sta	AUDV0
     35  fbfc		       85 17		      sta	AUDF0
     36  fbfe		       85 16		      sta	AUDC1
     37  fc00		       85 1a		      sta	AUDV1
     38  fc02		       85 18		      sta	AUDF1
     39  fc04		       85 91		      sta	SampleStep
     40  fc06
     41  fc06							; Load Audio Settings
     42  fc06		       a9 02		      lda	#GAME_AUDIO_VOLUME
     43  fc08		       85 19		      sta	AUDV0
     44  fc0a
     45  fc0a							; Make it so that we play the first note immediately
     46  fc0a		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     47  fc0c		       85 90		      sta	AudioStep
     48  fc0e		       a9 02		      lda	#2
     49  fc10		       85 8e		      sta	FrameTimer
     50  fc12
     51  fc12							; Reset NuSiz
     52  fc12		       a9 00		      lda	#0
     53  fc14		       85 81		      sta	NuSiz0
     54  fc16		       85 04		      sta	NUSIZ0
     55  fc18		       85 82		      sta	NuSiz1
     56  fc1a		       85 05		      sta	NUSIZ1
     57  fc1c
     58  fc1c							; Initialize Objects
     59  fc1c		       20 e6 f4 	      jsr	ScoreInit
     60  fc1f		       20 4d f6 	      jsr	SpiderInit
     61  fc22		       20 ee f7 	      jsr	LineInit
     62  fc25		       20 97 f9 	      jsr	BugInit
     63  fc28		       20 b4 fa 	      jsr	SwatterInit
     64  fc2b
     65  fc2b		       60		      rts
     66  fc2c
     67  fc2c				   GameVerticalBlank
     68  fc2c
     69  fc2c							; Refresh random values
     70  fc2c		       20 13 f0 	      jsr	Random
     71  fc2f
     72  fc2f							; Update Objects
     73  fc2f		       20 5e f6 	      jsr	SpiderUpdate
     74  fc32		       20 03 f8 	      jsr	LineUpdate
     75  fc35		       20 b8 f9 	      jsr	BugUpdate
     76  fc38		       20 b8 fa 	      jsr	SwatterUpdate
     77  fc3b		       20 ef f4 	      jsr	ScoreUpdate
     78  fc3e
     79  fc3e							; Reset Collisions
     80  fc3e		       85 2c		      sta	CXCLR
     81  fc40
     82  fc40							; Clear horizontal movement
     83  fc40		       85 2b		      sta	HMCLR
     84  fc42
     85  fc42							; Update Positions
     86  fc42		       20 69 f7 	      jsr	SpiderPosition
     87  fc45		       20 27 f9 	      jsr	LinePosition
     88  fc48		       20 5f fa 	      jsr	BugPosition
     89  fc4b		       20 4f fb 	      jsr	SwatterPosition
     90  fc4e
     91  fc4e							; Set final x positions
     92  fc4e		       85 02		      sta	WSYNC
     93  fc50		       85 2a		      sta	HMOVE
     94  fc52
     95  fc52		       60		      rts
     96  fc53
     97  fc53				   GameOverScan
     98  fc53
     99  fc53							; Audio Routines
    100  fc53		       20 71 fc 	      jsr	GameAudio
    101  fc56		       20 5d fc 	      jsr	GameSample
    102  fc59
    103  fc59							; State Routines
    104  fc59		       20 a5 fc 	      jsr	GameDeath
    105  fc5c
    106  fc5c		       60		      rts
    107  fc5d
    108  fc5d				   GameSample
    109  fc5d
    110  fc5d		       a6 91		      ldx	SampleStep
    111  fc5f		       e0 00		      cpx	#0
    112  fc61		       f0 0b		      beq	.game_sample_return
    113  fc63
    114  fc63		       ca		      dex
    115  fc64		       d0 08		      bne	.game_sample_return
    116  fc66
    117  fc66				   .game_sample_mute
    118  fc66		       a9 00		      lda	#0
    119  fc68		       85 1a		      sta	AUDV1
    120  fc6a		       85 18		      sta	AUDF1
    121  fc6c		       85 16		      sta	AUDC1
    122  fc6e
    123  fc6e				   .game_sample_return
    124  fc6e		       86 91		      stx	SampleStep
    125  fc70		       60		      rts
    126  fc71
    127  fc71				   GameAudio
    128  fc71
    129  fc71		       a6 8e		      ldx	FrameTimer
    130  fc73		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    131  fc75		       f0 25		      beq	.game_audio_mute_note
    132  fc77		       e0 00		      cpx	#0
    133  fc79		       d0 29		      bne	.game_audio_return
    134  fc7b
    135  fc7b							; Reset Timer
    136  fc7b		       a2 09		      ldx	#GAME_AUDIO_STEP
    137  fc7d		       86 8e		      stx	FrameTimer
    138  fc7f
    139  fc7f				   .game_audio_play
    140  fc7f
    141  fc7f							; Increment melody position
    142  fc7f		       a4 90		      ldy	AudioStep
    143  fc81		       c8		      iny
    144  fc82
    145  fc82		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    146  fc84		       d0 02		      bne	.game_audio_play_note
    147  fc86
    148  fc86							; Loop our audio step
    149  fc86		       a0 00		      ldy	#0
    150  fc88
    151  fc88				   .game_audio_play_note
    152  fc88
    153  fc88							; Save current position
    154  fc88		       84 90		      sty	AudioStep
    155  fc8a
    156  fc8a							; Melody Line
    157  fc8a		       b9 50 fe 	      lda	GameAudio0,y
    158  fc8d		       c9 ff		      cmp	#$FF
    159  fc8f		       f0 0b		      beq	.game_audio_mute_note
    160  fc91		       85 17		      sta	AUDF0
    161  fc93		       a9 06		      lda	#GAME_AUDIO_TONE
    162  fc95		       85 15		      sta	AUDC0
    163  fc97		       a9 02		      lda	#GAME_AUDIO_VOLUME
    164  fc99		       85 19		      sta	AUDV0
    165  fc9b
    166  fc9b		       60		      rts
    167  fc9c
    168  fc9c				   .game_audio_mute_note
    169  fc9c
    170  fc9c		       a9 00		      lda	#0
    171  fc9e		       85 17		      sta	AUDF0
    172  fca0		       85 15		      sta	AUDC0
    173  fca2		       85 19		      sta	AUDV0
    174  fca4
    175  fca4				   .game_audio_return
    176  fca4		       60		      rts
    177  fca5
    178  fca5				   GameDeath
    179  fca5		       a5 92		      lda	ScoreValue+0
    180  fca7		       c9 00		      cmp	#0
    181  fca9		       d0 03		      bne	.game_death_return
    182  fcab
    183  fcab							; Show Game Over Screen
    184  fcab		       20 70 fe 	      jsr	OverInit
    185  fcae
    186  fcae				   .game_death_return
    187  fcae		       60		      rts
    188  fcaf
    189  fcaf				   GameKernel
    190  fcaf
    191  fcaf							; Turn on display
    192  fcaf		       a9 00		      lda	#0
    193  fcb1		       85 01		      sta	VBLANK
    194  fcb3
    195  fcb3				   .game_kernel_score
    196  fcb3
    197  fcb3							; Draw Score on top first
    198  fcb3		       20 0f f5 	      jsr	ScoreDraw
    199  fcb6
    200  fcb6				   .game_kernel_objects_start
    201  fcb6
    202  fcb6							; Setup Drawing Objects
    203  fcb6		       20 cf f5 	      jsr	WebDrawStart
    204  fcb9		       20 71 f7 	      jsr	SpiderDrawStart
    205  fcbc		       20 57 fb 	      jsr	SwatterDrawStart
    206  fcbf		       20 2f f9 	      jsr	LineDrawStart
    207  fcc2		       20 6e fa 	      jsr	BugDrawStart
    208  fcc5
    209  fcc5							; Start Scanline Counter
    210  fcc5		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    211  fcc7							; The extra 5 is for processing overflow
    212  fcc7
    213  fcc7							; Half scanline counter in Temp+1
    214  fcc7		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    215  fcc9		       85 84		      sta	Temp+1
    216  fccb
    217  fccb				   .game_kernel_objects
    218  fccb
    219  fccb		       85 02		      sta	WSYNC
    220  fccd
    221  fccd				   .game_kernel_web
    222  fccd
    223  fccd							; Web
    224  fccd		       a4 9a		      ldy	WebIndex
    225  fccf
    226  fccf							; Load Image
    227  fccf		       b9 f3 f5 	      lda	WebImagePF0,y
    228  fcd2		       85 0d		      sta	PF0
    229  fcd4		       b9 11 f6 	      lda	WebImagePF1,y
    230  fcd7		       85 0e		      sta	PF1
    231  fcd9		       b9 2f f6 	      lda	WebImagePF2,y
    232  fcdc		       85 0f		      sta	PF2
    233  fcde
    234  fcde		       e6 9a		      inc	WebIndex
    235  fce0
    236  fce0				   .game_kernel_line_1
    237  fce0							; Line (1st time)
    238  fce0
    239  fce0		       24 a7		      bit	LineEnabled
    240  fce2		       10 10		      bpl	.game_kernel_line_1_skip
    241  fce4
    242  fce4							; Load half-line
    243  fce4		       a5 84		      lda	Temp+1
    244  fce6
    245  fce6		       a0 00		      ldy	#%00000000
    246  fce8
    247  fce8							; Top
    248  fce8		       c5 af		      cmp	LineDrawPos+1
    249  fcea		       b0 06		      bcs	.game_kernel_line_1_off
    250  fcec
    251  fcec							; Bottom
    252  fcec		       c5 ae		      cmp	LineDrawPos+0
    253  fcee		       90 02		      bcc	.game_kernel_line_1_off
    254  fcf0
    255  fcf0				   .game_kernel_line_1_on
    256  fcf0		       a0 02		      ldy	#%00000010
    257  fcf2
    258  fcf2				   .game_kernel_line_1_off
    259  fcf2		       84 1f		      sty	ENABL
    260  fcf4
    261  fcf4				   .game_kernel_line_1_skip
    262  fcf4
    263  fcf4		       ca		      dex
    264  fcf5		       85 02		      sta	WSYNC
    265  fcf7
    266  fcf7				   .game_kernel_spider_1
    267  fcf7							; Spider (1st time)
    268  fcf7
    269  fcf7		       a4 a2		      ldy	SpiderIndex
    270  fcf9		       30 1a		      bmi	.game_kernel_spider_1_load	; At end of sprite
    271  fcfb		       d0 06		      bne	.game_kernel_spider_1_draw	; Currently drawing (not zero)
    272  fcfd
    273  fcfd							; Check y position to see if we should start
    274  fcfd		       a5 84		      lda	Temp+1	; Use half scanline
    275  fcff		       e5 a3		      sbc	SpiderDrawPos
    276  fd01		       10 12		      bpl	.game_kernel_spider_1_load
    277  fd03
    278  fd03				   .game_kernel_spider_1_draw
    279  fd03		       b1 9c		      lda	(SpiderPtr),y
    280  fd05		       85 a4		      sta	SpiderLine
    281  fd07
    282  fd07							; Increment sprite index
    283  fd07		       e6 a2		      inc	SpiderIndex
    284  fd09
    285  fd09							; See if we're at the end
    286  fd09		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    287  fd0b		       d0 0a		      bne	.game_kernel_spider_1_line
    288  fd0d		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    289  fd0f		       84 a2		      sty	SpiderIndex
    290  fd11		       a9 00		      lda	#0
    291  fd13		       85 a4		      sta	SpiderLine
    292  fd15
    293  fd15				   .game_kernel_spider_1_load
    294  fd15		       a5 a4		      lda	SpiderLine
    295  fd17				   .game_kernel_spider_1_line
    296  fd17		       85 1b		      sta	GRP0
    297  fd19
    298  fd19				   .game_kernel_swatter_1
    299  fd19							; Swatter (1st time)
    300  fd19
    301  fd19							; Check if wait state
    302  fd19		       24 be		      bit	SwatterState
    303  fd1b		       10 1b		      bpl	.game_kernel_swatter_1_load
    304  fd1d
    305  fd1d		       a4 c0		      ldy	SwatterIndex
    306  fd1f		       30 17		      bmi	.game_kernel_swatter_1_load	; At end of sprite
    307  fd21		       d0 06		      bne	.game_kernel_swatter_1_draw	; Currently drawing (not zero)
    308  fd23
    309  fd23							; Check y position to see if we should start
    310  fd23		       a5 84		      lda	Temp+1	; Use half scanline
    311  fd25		       e5 c1		      sbc	SwatterDrawPos
    312  fd27		       10 0f		      bpl	.game_kernel_swatter_1_load
    313  fd29
    314  fd29				   .game_kernel_swatter_1_draw
    315  fd29		       b9 ca fb 	      lda	SwatterSprite,y
    316  fd2c		       85 c2		      sta	SwatterLine
    317  fd2e
    318  fd2e							; Increment index
    319  fd2e		       e6 c0		      inc	SwatterIndex
    320  fd30
    321  fd30							; See if we're at the end
    322  fd30		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    323  fd32		       d0 06		      bne	.game_kernel_swatter_1_line
    324  fd34		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    325  fd36		       84 c0		      sty	SwatterIndex
    326  fd38
    327  fd38				   .game_kernel_swatter_1_load
    328  fd38		       a5 c2		      lda	SwatterLine
    329  fd3a				   .game_kernel_swatter_1_line
    330  fd3a		       85 1c		      sta	GRP1
    331  fd3c
    332  fd3c							; New line and decrement half scanline
    333  fd3c		       c6 84		      dec	Temp+1
    334  fd3e		       ca		      dex
    335  fd3f		       85 02		      sta	WSYNC
    336  fd41
    337  fd41							; Preload half-line
    338  fd41		       a5 84		      lda	Temp+1
    339  fd43
    340  fd43				   .game_kernel_line_2
    341  fd43							; Line (2nd time)
    342  fd43
    343  fd43		       24 a7		      bit	LineEnabled
    344  fd45		       10 0e		      bpl	.game_kernel_line_2_skip
    345  fd47
    346  fd47		       a0 00		      ldy	#%00000000
    347  fd49
    348  fd49							; Top
    349  fd49		       c5 af		      cmp	LineDrawPos+1
    350  fd4b		       b0 06		      bcs	.game_kernel_line_2_off
    351  fd4d
    352  fd4d							; Bottom
    353  fd4d		       c5 ae		      cmp	LineDrawPos+0
    354  fd4f		       90 02		      bcc	.game_kernel_line_2_off
    355  fd51
    356  fd51				   .game_kernel_line_2_on
    357  fd51		       a0 02		      ldy	#%00000010
    358  fd53
    359  fd53				   .game_kernel_line_2_off
    360  fd53		       84 1f		      sty	ENABL
    361  fd55
    362  fd55				   .game_kernel_line_2_skip
    363  fd55
    364  fd55				   .game_kernel_bug_1_0
    365  fd55							; First Bug (1st time)
    366  fd55
    367  fd55		       a0 00		      ldy	#%00000000
    368  fd57
    369  fd57							; Top
    370  fd57		       c5 ba		      cmp	BugDrawPosTop+0
    371  fd59		       b0 06		      bcs	.game_kernel_bug_1_0_off
    372  fd5b
    373  fd5b							; Bottom
    374  fd5b		       c5 b8		      cmp	BugDrawPosBottom+0
    375  fd5d		       90 02		      bcc	.game_kernel_bug_1_0_off
    376  fd5f
    377  fd5f				   .game_kernel_bug_1_0_on
    378  fd5f		       a0 02		      ldy	#%00000010
    379  fd61
    380  fd61				   .game_kernel_bug_1_0_off
    381  fd61		       84 1d		      sty	ENAM0
    382  fd63
    383  fd63				   .game_kernel_bug_1_1
    384  fd63							; Second Bug (1st time)
    385  fd63
    386  fd63		       a0 00		      ldy	#%00000000
    387  fd65
    388  fd65							; Top
    389  fd65		       c5 bb		      cmp	BugDrawPosTop+1
    390  fd67		       b0 06		      bcs	.game_kernel_bug_1_1_off
    391  fd69
    392  fd69							; Bottom
    393  fd69		       c5 b9		      cmp	BugDrawPosBottom+1
    394  fd6b		       90 02		      bcc	.game_kernel_bug_1_1_off
    395  fd6d
    396  fd6d				   .game_kernel_bug_1_1_on
    397  fd6d		       a0 02		      ldy	#%00000010
    398  fd6f
    399  fd6f				   .game_kernel_bug_1_1_off
    400  fd6f		       84 1e		      sty	ENAM1
    401  fd71
    402  fd71							; Next Line
    403  fd71		       ca		      dex
    404  fd72		       85 02		      sta	WSYNC
    405  fd74
    406  fd74				   .game_kernel_spider_2
    407  fd74							; Spider (2nd time)
    408  fd74
    409  fd74		       a4 a2		      ldy	SpiderIndex
    410  fd76		       30 1a		      bmi	.game_kernel_spider_2_load	; At end of sprite
    411  fd78		       d0 06		      bne	.game_kernel_spider_2_draw	; Currently drawing (not zero)
    412  fd7a
    413  fd7a							; Check y position to see if we should start
    414  fd7a		       a5 84		      lda	Temp+1	; Use half scanline
    415  fd7c		       e5 a3		      sbc	SpiderDrawPos
    416  fd7e		       10 12		      bpl	.game_kernel_spider_2_load
    417  fd80
    418  fd80				   .game_kernel_spider_2_draw
    419  fd80		       b1 9c		      lda	(SpiderPtr),y
    420  fd82		       85 a4		      sta	SpiderLine
    421  fd84
    422  fd84							; Increment sprite index
    423  fd84		       e6 a2		      inc	SpiderIndex
    424  fd86
    425  fd86							; See if we're at the end
    426  fd86		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    427  fd88		       d0 0a		      bne	.game_kernel_spider_2_line
    428  fd8a		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    429  fd8c		       84 a2		      sty	SpiderIndex
    430  fd8e		       a9 00		      lda	#0
    431  fd90		       85 a4		      sta	SpiderLine
    432  fd92
    433  fd92				   .game_kernel_spider_2_load
    434  fd92		       a5 a4		      lda	SpiderLine
    435  fd94				   .game_kernel_spider_2_line
    436  fd94		       85 1b		      sta	GRP0
    437  fd96
    438  fd96				   .game_kernel_swatter_2
    439  fd96							; Swatter (2nd time)
    440  fd96
    441  fd96							; Check if wait state
    442  fd96		       24 be		      bit	SwatterState
    443  fd98		       10 1b		      bpl	.game_kernel_swatter_2_load
    444  fd9a
    445  fd9a		       a4 c0		      ldy	SwatterIndex
    446  fd9c		       30 17		      bmi	.game_kernel_swatter_2_load	; At end of sprite
    447  fd9e		       d0 06		      bne	.game_kernel_swatter_2_draw	; Currently drawing (not zero)
    448  fda0
    449  fda0							; Check y position to see if we should start
    450  fda0		       a5 84		      lda	Temp+1	; Use half scanline
    451  fda2		       e5 c1		      sbc	SwatterDrawPos
    452  fda4		       10 0f		      bpl	.game_kernel_swatter_2_load
    453  fda6
    454  fda6				   .game_kernel_swatter_2_draw
    455  fda6		       b9 ca fb 	      lda	SwatterSprite,y
    456  fda9		       85 c2		      sta	SwatterLine
    457  fdab
    458  fdab							; Increment index
    459  fdab		       e6 c0		      inc	SwatterIndex
    460  fdad
    461  fdad							; See if we're at the end
    462  fdad		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    463  fdaf		       d0 06		      bne	.game_kernel_swatter_2_line
    464  fdb1		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    465  fdb3		       84 c0		      sty	SwatterIndex
    466  fdb5
    467  fdb5				   .game_kernel_swatter_2_load
    468  fdb5		       a5 c2		      lda	SwatterLine
    469  fdb7				   .game_kernel_swatter_2_line
    470  fdb7		       85 1c		      sta	GRP1
    471  fdb9
    472  fdb9							; Next Line and half-line
    473  fdb9		       c6 84		      dec	Temp+1
    474  fdbb		       ca		      dex
    475  fdbc		       85 02		      sta	WSYNC
    476  fdbe
    477  fdbe							; Preload half-line
    478  fdbe		       a5 84		      lda	Temp+1
    479  fdc0
    480  fdc0				   .game_kernel_line_3
    481  fdc0							; Line (3rd time)
    482  fdc0
    483  fdc0		       24 a7		      bit	LineEnabled
    484  fdc2		       10 0e		      bpl	.game_kernel_line_3_skip
    485  fdc4
    486  fdc4		       a0 00		      ldy	#%00000000
    487  fdc6
    488  fdc6							; Top
    489  fdc6		       c5 af		      cmp	LineDrawPos+1
    490  fdc8		       b0 06		      bcs	.game_kernel_line_3_off
    491  fdca
    492  fdca							; Bottom
    493  fdca		       c5 ae		      cmp	LineDrawPos+0
    494  fdcc		       90 02		      bcc	.game_kernel_line_3_off
    495  fdce
    496  fdce				   .game_kernel_line_3_on
    497  fdce		       a0 02		      ldy	#%00000010
    498  fdd0
    499  fdd0				   .game_kernel_line_3_off
    500  fdd0		       84 1f		      sty	ENABL
    501  fdd2
    502  fdd2				   .game_kernel_line_3_skip
    503  fdd2
    504  fdd2				   .game_kernel_bug_2_0
    505  fdd2							; First Bug (2nd time)
    506  fdd2
    507  fdd2		       a0 00		      ldy	#%00000000
    508  fdd4
    509  fdd4							; Top
    510  fdd4		       c5 ba		      cmp	BugDrawPosTop+0
    511  fdd6		       b0 06		      bcs	.game_kernel_bug_2_0_off
    512  fdd8
    513  fdd8							; Bottom
    514  fdd8		       c5 b8		      cmp	BugDrawPosBottom+0
    515  fdda		       90 02		      bcc	.game_kernel_bug_2_0_off
    516  fddc
    517  fddc				   .game_kernel_bug_2_0_on
    518  fddc		       a0 02		      ldy	#%00000010
    519  fdde
    520  fdde				   .game_kernel_bug_2_0_off
    521  fdde		       84 1d		      sty	ENAM0
    522  fde0
    523  fde0				   .game_kernel_bug_2_1
    524  fde0							; Second Bug (2nd time)
    525  fde0
    526  fde0		       a0 00		      ldy	#%00000000
    527  fde2
    528  fde2							; Top
    529  fde2		       c5 bb		      cmp	BugDrawPosTop+1
    530  fde4		       b0 06		      bcs	.game_kernel_bug_2_1_off
    531  fde6
    532  fde6							; Bottom
    533  fde6		       c5 b9		      cmp	BugDrawPosBottom+1
    534  fde8		       90 02		      bcc	.game_kernel_bug_2_1_off
    535  fdea
    536  fdea				   .game_kernel_bug_2_1_on
    537  fdea		       a0 02		      ldy	#%00000010
    538  fdec
    539  fdec				   .game_kernel_bug_2_1_off
    540  fdec		       84 1e		      sty	ENAM1
    541  fdee
    542  fdee							; Next Line
    543  fdee		       ca		      dex
    544  fdef		       85 02		      sta	WSYNC
    545  fdf1
    546  fdf1				   .game_kernel_spider_3
    547  fdf1							; Spider (3rd time)
    548  fdf1
    549  fdf1		       a4 a2		      ldy	SpiderIndex
    550  fdf3		       30 1a		      bmi	.game_kernel_spider_3_load	; At end of sprite
    551  fdf5		       d0 06		      bne	.game_kernel_spider_3_draw	; Currently drawing (not zero)
    552  fdf7
    553  fdf7							; Check y position to see if we should start
    554  fdf7		       a5 84		      lda	Temp+1	; Use half scanline
    555  fdf9		       e5 a3		      sbc	SpiderDrawPos
    556  fdfb		       10 12		      bpl	.game_kernel_spider_3_load
    557  fdfd
    558  fdfd				   .game_kernel_spider_3_draw
    559  fdfd		       b1 9c		      lda	(SpiderPtr),y
    560  fdff		       85 a4		      sta	SpiderLine
    561  fe01
    562  fe01							; Increment sprite index
    563  fe01		       e6 a2		      inc	SpiderIndex
    564  fe03
    565  fe03							; See if we're at the end
    566  fe03		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    567  fe05		       d0 0a		      bne	.game_kernel_spider_3_line
    568  fe07		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    569  fe09		       84 a2		      sty	SpiderIndex
    570  fe0b		       a9 00		      lda	#0
    571  fe0d		       85 a4		      sta	SpiderLine
    572  fe0f
    573  fe0f				   .game_kernel_spider_3_load
    574  fe0f		       a5 a4		      lda	SpiderLine
    575  fe11				   .game_kernel_spider_3_line
    576  fe11		       85 1b		      sta	GRP0
    577  fe13
    578  fe13				   .game_kernel_spider_3_skip
    579  fe13
    580  fe13				   .game_kernel_swatter_3
    581  fe13							; Swatter (3rd time)
    582  fe13
    583  fe13							; Check if wait state
    584  fe13		       24 be		      bit	SwatterState
    585  fe15		       10 1b		      bpl	.game_kernel_swatter_3_load
    586  fe17
    587  fe17		       a4 c0		      ldy	SwatterIndex
    588  fe19		       30 17		      bmi	.game_kernel_swatter_3_load	; At end of sprite
    589  fe1b		       d0 06		      bne	.game_kernel_swatter_3_draw	; Currently drawing (not zero)
    590  fe1d
    591  fe1d							; Check y position to see if we should start
    592  fe1d		       a5 84		      lda	Temp+1	; Use half scanline
    593  fe1f		       e5 c1		      sbc	SwatterDrawPos
    594  fe21		       10 0f		      bpl	.game_kernel_swatter_3_load
    595  fe23
    596  fe23				   .game_kernel_swatter_3_draw
    597  fe23		       b9 ca fb 	      lda	SwatterSprite,y
    598  fe26		       85 c2		      sta	SwatterLine
    599  fe28
    600  fe28							; Increment index
    601  fe28		       e6 c0		      inc	SwatterIndex
    602  fe2a
    603  fe2a							; See if we're at the end
    604  fe2a		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    605  fe2c		       d0 06		      bne	.game_kernel_swatter_3_line
    606  fe2e		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    607  fe30		       84 c0		      sty	SwatterIndex
    608  fe32
    609  fe32				   .game_kernel_swatter_3_load
    610  fe32		       a5 c2		      lda	SwatterLine
    611  fe34				   .game_kernel_swatter_3_line
    612  fe34		       85 1c		      sta	GRP1
    613  fe36
    614  fe36				   .game_kernel_swatter_3_skip
    615  fe36
    616  fe36							; New line and decrement half scanline
    617  fe36		       c6 84		      dec	Temp+1
    618  fe38		       ca		      dex
    619  fe39		       f0 03		      beq	.game_kernel_clean
    620  fe3b		       4c cb fc 	      jmp	.game_kernel_objects
    621  fe3e
    622  fe3e				   .game_kernel_clean
    623  fe3e
    624  fe3e		       20 ea f5 	      jsr	WebClean
    625  fe41		       20 99 f7 	      jsr	SpiderClean
    626  fe44		       20 4f f9 	      jsr	LineClean
    627  fe47		       20 8b fa 	      jsr	BugClean
    628  fe4a		       20 74 fb 	      jsr	SwatterClean
    629  fe4d
    630  fe4d		       85 02		      sta	WSYNC
    631  fe4f
    632  fe4f				   .game_kernel_return
    633  fe4f		       60		      rts
    634  fe50
    635  fe50				   GameAudio0
    636  fe50		       0d		      .byte.b	#13	; D
    637  fe51		       ff		      .byte.b	#$FF
    638  fe52		       0f		      .byte.b	#15	; B
    639  fe53		       ff		      .byte.b	#$FF
    640  fe54		       0d		      .byte.b	#13	; D
    641  fe55		       ff		      .byte.b	#$FF
    642  fe56		       0f		      .byte.b	#15	; B
    643  fe57		       ff		      .byte.b	#$FF
    644  fe58		       0d		      .byte.b	#13	; D
    645  fe59		       0d		      .byte.b	#13	; D
    646  fe5a		       0f		      .byte.b	#15	; B
    647  fe5b		       ff		      .byte.b	#$FF
    648  fe5c		       0c		      .byte.b	#12	; D#
    649  fe5d		       ff		      .byte.b	#$FF
    650  fe5e		       0f		      .byte.b	#15	; B
    651  fe5f		       ff		      .byte.b	#$FF
    652  fe60		       0b		      .byte.b	#11	; E
    653  fe61		       ff		      .byte.b	#$FF
    654  fe62		       0e		      .byte.b	#14	; C#
    655  fe63		       ff		      .byte.b	#$FF
    656  fe64		       0b		      .byte.b	#11
    657  fe65		       ff		      .byte.b	#$FF
    658  fe66		       0e		      .byte.b	#14
    659  fe67		       ff		      .byte.b	#$FF
    660  fe68		       0b		      .byte.b	#11
    661  fe69		       0b		      .byte.b	#11
    662  fe6a		       0e		      .byte.b	#14
    663  fe6b		       ff		      .byte.b	#$FF
    664  fe6c		       0b		      .byte.b	#11
    665  fe6d		       ff		      .byte.b	#$FF
    666  fe6e		       0e		      .byte.b	#14
    667  fe6f		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fe70					      include	"over.asm"
      1  fe70							;================
      2  fe70							; Constants
      3  fe70							;================
      4  fe70
      5  fe70		       00 dc	   OVER_FRAMES =	220
      6  fe70
      7  fe70		       00 00	   OVER_BG_COLOR =	#$00
      8  fe70		       00 44	   OVER_FG_COLOR =	#$44
      9  fe70
     10  fe70		       00 07	   OVER_AUDIO_TONE =	7
     11  fe70		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fe70		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fe70		       00 10	   OVER_AUDIO_STEP =	16
     14  fe70
     15  fe70		       00 09	   OVER_IMAGE_SIZE =	9
     16  fe70		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fe70		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fe70		       00 35	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fe70
     20  fe70				   OverInit
     21  fe70
     22  fe70							; Setup logic and kernel
      0  fe70					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fe70				   .POINTER   SET	VBlankPtr
      2  fe70				   .ADDRESS   SET	OverVerticalBlank
      3  fe70
      4  fe70		       a9 b2		      LDA	#<.ADDRESS
      5  fe72		       85 87		      STA	.POINTER
      6  fe74		       a9 fe		      LDA	#>.ADDRESS
      7  fe76		       85 88		      STA	.POINTER+1
      8  fe78
      0  fe78					      SET_POINTER	KernelPtr, OverKernel
      1  fe78				   .POINTER   SET	KernelPtr
      2  fe78				   .ADDRESS   SET	OverKernel
      3  fe78
      4  fe78		       a9 f0		      LDA	#<.ADDRESS
      5  fe7a		       85 89		      STA	.POINTER
      6  fe7c		       a9 fe		      LDA	#>.ADDRESS
      7  fe7e		       85 8a		      STA	.POINTER+1
      8  fe80
      0  fe80					      SET_POINTER	OverScanPtr, OverOverScan
      1  fe80				   .POINTER   SET	OverScanPtr
      2  fe80				   .ADDRESS   SET	OverOverScan
      3  fe80
      4  fe80		       a9 b6		      LDA	#<.ADDRESS
      5  fe82		       85 8b		      STA	.POINTER
      6  fe84		       a9 fe		      LDA	#>.ADDRESS
      7  fe86		       85 8c		      STA	.POINTER+1
      8  fe88
     26  fe88
     27  fe88							; Load Colors
     28  fe88		       a9 00		      lda	#OVER_BG_COLOR
     29  fe8a		       85 09		      sta	COLUBK
     30  fe8c		       a9 44		      lda	#OVER_FG_COLOR
     31  fe8e		       85 08		      sta	COLUPF
     32  fe90
     33  fe90							; Load audio settings
     34  fe90		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fe92		       85 15		      sta	AUDC0
     36  fe94		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fe96		       85 19		      sta	AUDV0
     38  fe98		       a9 00		      lda	#0
     39  fe9a		       85 16		      sta	AUDC1
     40  fe9c		       85 1a		      sta	AUDV1
     41  fe9e		       a9 00		      lda	#0
     42  fea0		       85 90		      sta	AudioStep
     43  fea2
     44  fea2							; Play first note
     45  fea2		       ad 42 ff 	      lda	OverAudio0,AudioStep
     46  fea5		       85 17		      sta	AUDF0
     47  fea7
     48  fea7							; Setup frame counters
     49  fea7		       a9 00		      lda	#0
     50  fea9		       85 8d		      sta	Frame
     51  feab		       a9 10		      lda	#OVER_AUDIO_STEP
     52  fead		       85 8e		      sta	FrameTimer
     53  feaf		       85 84		      sta	Temp+1
     54  feb1
     55  feb1		       60		      rts
     56  feb2
     57  feb2				   OverVerticalBlank
     58  feb2		       20 ef f4 	      jsr	ScoreUpdate
     59  feb5		       60		      rts
     60  feb6
     61  feb6				   OverOverScan
     62  feb6		       20 bd fe 	      jsr	OverAudio
     63  feb9		       20 e6 fe 	      jsr	OverState
     64  febc		       60		      rts
     65  febd
     66  febd				   OverAudio
     67  febd
     68  febd		       a6 8e		      ldx	FrameTimer
     69  febf		       e0 00		      cpx	#0
     70  fec1		       d0 22		      bne	.over_audio_return
     71  fec3
     72  fec3							; Reset Timer
     73  fec3		       a6 84		      ldx	Temp+1
     74  fec5					      REPEAT	3
     75  fec5		       e8		      inx
     74  fec5					      REPEND
     75  fec6		       e8		      inx
     74  fec6					      REPEND
     75  fec7		       e8		      inx
     76  fec8					      REPEND
     77  fec8		       86 8e		      stx	FrameTimer
     78  feca		       86 84		      stx	Temp+1
     79  fecc
     80  fecc				   .over_audio_play
     81  fecc
     82  fecc							; Increment melody position
     83  fecc		       a4 90		      ldy	AudioStep
     84  fece		       c8		      iny
     85  fecf
     86  fecf		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  fed1		       f0 0c		      beq	.over_audio_mute_note
     88  fed3
     89  fed3				   .over_audio_play_note
     90  fed3
     91  fed3							; Save current position
     92  fed3		       84 90		      sty	AudioStep
     93  fed5
     94  fed5							; Melody Line
     95  fed5		       b9 42 ff 	      lda	OverAudio0,y
     96  fed8		       85 17		      sta	AUDF0
     97  feda		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  fedc		       85 19		      sta	AUDV0
     99  fede
    100  fede		       60		      rts
    101  fedf
    102  fedf				   .over_audio_mute_note
    103  fedf		       a9 00		      lda	#0
    104  fee1		       85 17		      sta	AUDF0
    105  fee3		       85 19		      sta	AUDV0
    106  fee5
    107  fee5				   .over_audio_return
    108  fee5		       60		      rts
    109  fee6
    110  fee6				   OverState
    111  fee6		       a5 8d		      lda	Frame
    112  fee8		       c9 dc		      cmp	#OVER_FRAMES
    113  feea		       d0 03		      bne	.over_state_return
    114  feec
    115  feec		       20 5f f2 	      jsr	TitleInit
    116  feef
    117  feef				   .over_state_return
    118  feef		       60		      rts
    119  fef0
    120  fef0				   OverKernel
    121  fef0
    122  fef0							; Turn on display
    123  fef0		       a9 00		      lda	#0
    124  fef2		       85 01		      sta	VBLANK
    125  fef4
    126  fef4				   .over_kernel_score
    127  fef4
    128  fef4							; Draw Score on top first (no update)
    129  fef4		       20 0f f5 	      jsr	ScoreDraw
    130  fef7
    131  fef7				   .over_kernel_init
    132  fef7							; Playfield Control
    133  fef7		       a5 80		      lda	CtrlPf
    134  fef9		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  fefb		       09 01		      ora	#%00000001	; Set mirroring
    136  fefd		       85 80		      sta	CtrlPf
    137  feff		       85 0a		      sta	CTRLPF
    138  ff01
    139  ff01				   .over_kernel_top_padding
    140  ff01							; Top Padding
    141  ff01		       20 20 ff 	      jsr	OverPadding
    142  ff04
    143  ff04				   .over_kernel_image
    144  ff04		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  ff06
    146  ff06				   .over_kernel_image_next
    147  ff06		       bd 39 ff 	      lda	OverImagePF2,x
    148  ff09		       85 0f		      sta	PF2
    149  ff0b		       bd 30 ff 	      lda	OverImagePF1,x
    150  ff0e		       85 0e		      sta	PF1
    151  ff10							;    lda OverImagePF0,x
    152  ff10							;    sta PF0
    153  ff10
    154  ff10		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  ff12				   .over_kernel_image_loop
    156  ff12		       85 02		      sta	WSYNC
    157  ff14		       88		      dey
    158  ff15		       d0 fb		      bne	.over_kernel_image_loop
    159  ff17
    160  ff17		       ca		      dex
    161  ff18		       10 ec		      bpl	.over_kernel_image_next
    162  ff1a
    163  ff1a				   .over_kernel_bottom_padding
    164  ff1a							; Bottom Padding
    165  ff1a		       20 20 ff 	      jsr	OverPadding
    166  ff1d
    167  ff1d				   .over_kernel_return
    168  ff1d		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  ff1f		       60		      rts
    170  ff20
    171  ff20				   OverPadding
    172  ff20		       a9 00		      lda	#0
    173  ff22		       85 0d		      sta	PF0
    174  ff24		       85 0e		      sta	PF1
    175  ff26		       85 0f		      sta	PF2
    176  ff28
    177  ff28		       a2 35		      ldx	#OVER_IMAGE_PADDING
    178  ff2a				   .over_padding_loop
    179  ff2a		       85 02		      sta	WSYNC
    180  ff2c		       ca		      dex
    181  ff2d		       d0 fb		      bne	.over_padding_loop
    182  ff2f
    183  ff2f		       60		      rts
    184  ff30
    185  ff30				   OverAssets
    186  ff30
    187  ff30							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ff30					      include	"over_image.asm"
      1  ff30							;OverImagePF0:
      2  ff30							;    .BYTE %00000000
      3  ff30							;    .BYTE %00000000
      4  ff30							;    .BYTE %00000000
      5  ff30							;    .BYTE %00000000
      6  ff30							;    .BYTE %00000000
      7  ff30							;    .BYTE %00000000
      8  ff30							;    .BYTE %00000000
      9  ff30							;    .BYTE %00000000
     10  ff30							;    .BYTE %00000000
     11  ff30
     12  ff30				   OverImagePF1
     13  ff30		       0c		      .BYTE.b	%00001100
     14  ff31		       13		      .BYTE.b	%00010011
     15  ff32		       20		      .BYTE.b	%00100000
     16  ff33		       23		      .BYTE.b	%00100011
     17  ff34		       24		      .BYTE.b	%00100100
     18  ff35		       24		      .BYTE.b	%00100100
     19  ff36		       12		      .BYTE.b	%00010010
     20  ff37		       10		      .BYTE.b	%00010000
     21  ff38		       08		      .BYTE.b	%00001000
     22  ff39
     23  ff39				   OverImagePF2
     24  ff39		       e0		      .BYTE.b	%11100000
     25  ff3a		       18		      .BYTE.b	%00011000
     26  ff3b		       05		      .BYTE.b	%00000101
     27  ff3c		       52		      .BYTE.b	%01010010
     28  ff3d		       23		      .BYTE.b	%00100011
     29  ff3e		       52		      .BYTE.b	%01010010
     30  ff3f		       04		      .BYTE.b	%00000100
     31  ff40		       18		      .BYTE.b	%00011000
     32  ff41		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  ff42
    190  ff42				   OverAudio0
    191  ff42
    192  ff42		       0c		      .BYTE.b	#12	; D#2
    193  ff43		       0d		      .BYTE.b	#13	; D2
    194  ff44		       11		      .BYTE.b	#17	; A1
    195  ff45		       16		      .BYTE.b	#22	; F1
    196  ff46		       1a		      .BYTE.b	#26	; D1
    197  ff47		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    303  ff48
    304  ff48							;================
    305  ff48							; End of cart
    306  ff48							;================
    307  ff48
    308  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    309  fffa
    310  fffa				   InterruptVectors
    311  fffa
    312  fffa		       21 f0		      .word.w	InitSystem	; NMI
    313  fffc		       21 f0		      .word.w	InitSystem	; RESET
    314  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    315  10000
    316  10000					       END
