------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00cd ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00 00    Temp       ds	3
     61 U0086		       00	   Rand8      ds	1
     62 U0087		       00	   Rand16     ds	1
     63 U0088
     64 U0088		       00 00	   VBlankPtr  ds	2
     65 U008a		       00 00	   KernelPtr  ds	2
     66 U008c		       00 00	   OverScanPtr ds	2
     67 U008e
     68 U008e		       00	   Frame      ds	1
     69 U008f		       00 00	   FrameTimer ds	2
     70 U0091
     71 U0091		       00	   AudioStep  ds	1
     72 U0092
     73 U0092		       00	   SampleStep ds	1
     74 U0093
     75 U0093							; Score
     76 U0093
     77 U0093		       00 00	   ScoreValue ds	2
     78 U0095		       00 00	   ScoreDigitOnes ds	2
     79 U0097		       00 00	   ScoreDigitTens ds	2
     80 U0099		       00 00	   ScoreDigitGfx ds	2
     81 U009b		       00 00	   ScoreBarGfx ds	2
     82 U009d
     83 U009d							; Level
     84 U009d		       00	   LevelCurrent ds	1
     85 U009e
     86 U009e							; Web
     87 U009e
     88 U009e		       00	   WebIndex   ds	1
     89 U009f		       00 00	   WebColor   ds	2
     90 U00a1
     91 U00a1							; Spider
     92 U00a1
     93 U00a1		       00 00	   SpiderPtr  ds	2
     94 U00a3		       00 00	   SpiderPos  ds	2
     95 U00a5		       00	   SpiderCtrl ds	1
     96 U00a6		       00	   SpiderColor ds	1
     97 U00a7
     98 U00a7		       00	   SpiderIndex ds	1
     99 U00a8		       00	   SpiderDrawPos ds	1
    100 U00a9		       00	   SpiderLine ds	1
    101 U00aa
    102 U00aa		       00 00	   SpiderPtr2 ds	2
    103 U00ac
    104 U00ac							; Line
    105 U00ac
    106 U00ac		       00	   LineEnabled ds	1
    107 U00ad		       00 00	   LinePos    ds	2
    108 U00af		       00 00	   LineVelocity ds	2
    109 U00b1		       00 00	   LineStartPos ds	2
    110 U00b3		       00 00	   LineDrawPos ds	2
    111 U00b5
    112 U00b5							; Bug
    113 U00b5
    114 U00b5		       00	   BugSpeed   ds	1
    115 U00b6
    116 U00b6		       00 00	   BugStunned ds	2
    117 U00b8		       00 00	   BugPosX    ds	2
    118 U00ba		       00 00	   BugPosY    ds	2
    119 U00bc		       00 00	   BugColor   ds	2
    120 U00be
    121 U00be		       00 00	   BugDrawPosBottom ds	2
    122 U00c0		       00 00	   BugDrawPosTop ds	2
    123 U00c2
    124 U00c2							; Swatter
    125 U00c2
    126 U00c2		       00 00	   SwatterPos ds	2
    127 U00c4		       00	   SwatterState ds	1
    128 U00c5		       00	   SwatterColor ds	1
    129 U00c6
    130 U00c6		       00	   SwatterWaitTime ds	1
    131 U00c7		       00	   SwatterHitDamage ds	1
    132 U00c8
    133 U00c8		       00	   SwatterIndex ds	1
    134 U00c9		       00	   SwatterDrawPos ds	1
    135 U00ca		       00	   SwatterLine ds	1
    136 U00cb
    137 U00cb		       00	   SwatterSampleCount ds	1
    138 U00cc		       00	   SwatterSampleF ds	1
    139 U00cd
    140  10000 ????				       SEG
    141  f000					      org	$F000	; Start of cart area
    142  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 86		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 87		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 86		      sta	Rand8
     49  f01e		       45 87		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 83		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 84		      sta	Temp+1
     70  f029		       85 85		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 83		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 84		      lda	Temp+1	; And add into result
     77  f031		       65 84		      adc	Temp+1
     78  f033		       85 84		      sta	Temp+1
     79  f035
     80  f035		       a5 85		      lda	Temp+2	; Propagating any carry
     81  f037		       65 85		      adc	Temp+2
     82  f039		       85 85		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 84		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 85		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    144  f044
    145  f044							; Assets
    146  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    150  f0bc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0bc					      include	"objects/score_digits.asm"
      1  f0bc				   ScoreDigits
      2  f0bc
      3  f0bc		       ee		      .BYTE.b	%11101110
      4  f0bd		       aa		      .BYTE.b	%10101010
      5  f0be		       aa		      .BYTE.b	%10101010
      6  f0bf		       aa		      .BYTE.b	%10101010
      7  f0c0		       ee		      .BYTE.b	%11101110
      8  f0c1
      9  f0c1		       22		      .BYTE.b	%00100010
     10  f0c2		       22		      .BYTE.b	%00100010
     11  f0c3		       22		      .BYTE.b	%00100010
     12  f0c4		       22		      .BYTE.b	%00100010
     13  f0c5		       22		      .BYTE.b	%00100010
     14  f0c6
     15  f0c6		       ee		      .BYTE.b	%11101110
     16  f0c7		       22		      .BYTE.b	%00100010
     17  f0c8		       ee		      .BYTE.b	%11101110
     18  f0c9		       88		      .BYTE.b	%10001000
     19  f0ca		       ee		      .BYTE.b	%11101110
     20  f0cb
     21  f0cb		       ee		      .BYTE.b	%11101110
     22  f0cc		       22		      .BYTE.b	%00100010
     23  f0cd		       66		      .BYTE.b	%01100110
     24  f0ce		       22		      .BYTE.b	%00100010
     25  f0cf		       ee		      .BYTE.b	%11101110
     26  f0d0
     27  f0d0		       aa		      .BYTE.b	%10101010
     28  f0d1		       aa		      .BYTE.b	%10101010
     29  f0d2		       ee		      .BYTE.b	%11101110
     30  f0d3		       22		      .BYTE.b	%00100010
     31  f0d4		       22		      .BYTE.b	%00100010
     32  f0d5
     33  f0d5		       ee		      .BYTE.b	%11101110
     34  f0d6		       88		      .BYTE.b	%10001000
     35  f0d7		       ee		      .BYTE.b	%11101110
     36  f0d8		       22		      .BYTE.b	%00100010
     37  f0d9		       ee		      .BYTE.b	%11101110
     38  f0da
     39  f0da		       ee		      .BYTE.b	%11101110
     40  f0db		       88		      .BYTE.b	%10001000
     41  f0dc		       ee		      .BYTE.b	%11101110
     42  f0dd		       aa		      .BYTE.b	%10101010
     43  f0de		       ee		      .BYTE.b	%11101110
     44  f0df
     45  f0df		       ee		      .BYTE.b	%11101110
     46  f0e0		       22		      .BYTE.b	%00100010
     47  f0e1		       44		      .BYTE.b	%01000100
     48  f0e2		       44		      .BYTE.b	%01000100
     49  f0e3		       44		      .BYTE.b	%01000100
     50  f0e4
     51  f0e4		       ee		      .BYTE.b	%11101110
     52  f0e5		       aa		      .BYTE.b	%10101010
     53  f0e6		       ee		      .BYTE.b	%11101110
     54  f0e7		       aa		      .BYTE.b	%10101010
     55  f0e8		       ee		      .BYTE.b	%11101110
     56  f0e9
     57  f0e9		       ee		      .BYTE.b	%11101110
     58  f0ea		       aa		      .BYTE.b	%10101010
     59  f0eb		       ee		      .BYTE.b	%11101110
     60  f0ec		       22		      .BYTE.b	%00100010
     61  f0ed		       22		      .BYTE.b	%00100010
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f0ee					      include	"objects/score_digits_flip.asm"
      1  f0ee				   ScoreDigitsFlip
      2  f0ee
      3  f0ee		       ee		      .BYTE.b	%11101110
      4  f0ef		       aa		      .BYTE.b	%10101010
      5  f0f0		       aa		      .BYTE.b	%10101010
      6  f0f1		       aa		      .BYTE.b	%10101010
      7  f0f2		       ee		      .BYTE.b	%11101110
      8  f0f3
      9  f0f3		       88		      .BYTE.b	%10001000
     10  f0f4		       88		      .BYTE.b	%10001000
     11  f0f5		       88		      .BYTE.b	%10001000
     12  f0f6		       88		      .BYTE.b	%10001000
     13  f0f7		       88		      .BYTE.b	%10001000
     14  f0f8
     15  f0f8		       ee		      .BYTE.b	%11101110
     16  f0f9		       88		      .BYTE.b	%10001000
     17  f0fa		       ee		      .BYTE.b	%11101110
     18  f0fb		       22		      .BYTE.b	%00100010
     19  f0fc		       ee		      .BYTE.b	%11101110
     20  f0fd
     21  f0fd		       ee		      .BYTE.b	%11101110
     22  f0fe		       88		      .BYTE.b	%10001000
     23  f0ff		       cc		      .BYTE.b	%11001100
     24  f100		       88		      .BYTE.b	%10001000
     25  f101		       ee		      .BYTE.b	%11101110
     26  f102
     27  f102		       aa		      .BYTE.b	%10101010
     28  f103		       aa		      .BYTE.b	%10101010
     29  f104		       ee		      .BYTE.b	%11101110
     30  f105		       88		      .BYTE.b	%10001000
     31  f106		       88		      .BYTE.b	%10001000
     32  f107
     33  f107		       ee		      .BYTE.b	%11101110
     34  f108		       22		      .BYTE.b	%00100010
     35  f109		       ee		      .BYTE.b	%11101110
     36  f10a		       88		      .BYTE.b	%10001000
     37  f10b		       ee		      .BYTE.b	%11101110
     38  f10c
     39  f10c		       ee		      .BYTE.b	%11101110
     40  f10d		       22		      .BYTE.b	%00100010
     41  f10e		       ee		      .BYTE.b	%11101110
     42  f10f		       aa		      .BYTE.b	%10101010
     43  f110		       ee		      .BYTE.b	%11101110
     44  f111
     45  f111		       ee		      .BYTE.b	%11101110
     46  f112		       88		      .BYTE.b	%10001000
     47  f113		       44		      .BYTE.b	%01000100
     48  f114		       44		      .BYTE.b	%01000100
     49  f115		       44		      .BYTE.b	%01000100
     50  f116
     51  f116		       ee		      .BYTE.b	%11101110
     52  f117		       aa		      .BYTE.b	%10101010
     53  f118		       ee		      .BYTE.b	%11101110
     54  f119		       aa		      .BYTE.b	%10101010
     55  f11a		       ee		      .BYTE.b	%11101110
     56  f11b
     57  f11b		       ee		      .BYTE.b	%11101110
     58  f11c		       aa		      .BYTE.b	%10101010
     59  f11d		       ee		      .BYTE.b	%11101110
     60  f11e		       88		      .BYTE.b	%10001000
     61  f11f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f120					      include	"objects/score_label.asm"
      1  f120				   ScoreLabel
      2  f120
      3  f120		       00		      .BYTE.b	%00000000
      4  f121		       8a		      .BYTE.b	%10001010
      5  f122		       ee		      .BYTE.b	%11101110
      6  f123		       00		      .BYTE.b	%00000000
      7  f124		       ae		      .BYTE.b	%10101110
      8  f125		       00		      .BYTE.b	%00000000
      9  f126
     10  f126		       00		      .BYTE.b	%00000000
     11  f127		       8a		      .BYTE.b	%10001010
     12  f128		       4a		      .BYTE.b	%01001010
     13  f129		       00		      .BYTE.b	%00000000
     14  f12a		       aa		      .BYTE.b	%10101010
     15  f12b		       00		      .BYTE.b	%00000000
     16  f12c
     17  f12c		       00		      .BYTE.b	%00000000
     18  f12d		       8a		      .BYTE.b	%10001010
     19  f12e		       4e		      .BYTE.b	%01001110
     20  f12f		       00		      .BYTE.b	%00000000
     21  f130		       ee		      .BYTE.b	%11101110
     22  f131		       00		      .BYTE.b	%00000000
     23  f132
     24  f132		       00		      .BYTE.b	%00000000
     25  f133		       8a		      .BYTE.b	%10001010
     26  f134		       42		      .BYTE.b	%01000010
     27  f135		       00		      .BYTE.b	%00000000
     28  f136		       a8		      .BYTE.b	%10101000
     29  f137		       00		      .BYTE.b	%00000000
     30  f138
     31  f138		       00		      .BYTE.b	%00000000
     32  f139		       e4		      .BYTE.b	%11100100
     33  f13a		       42		      .BYTE.b	%01000010
     34  f13b		       00		      .BYTE.b	%00000000
     35  f13c		       a8		      .BYTE.b	%10101000
     36  f13d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    154  f13e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f13e					      include	"objects/web_image.asm"
      1  f13e				   WebImagePF0
      2  f13e		       00		      .BYTE.b	%00000000
      3  f13f		       00		      .BYTE.b	%00000000
      4  f140		       00		      .BYTE.b	%00000000
      5  f141		       00		      .BYTE.b	%00000000
      6  f142		       00		      .BYTE.b	%00000000
      7  f143		       00		      .BYTE.b	%00000000
      8  f144		       00		      .BYTE.b	%00000000
      9  f145		       00		      .BYTE.b	%00000000
     10  f146		       00		      .BYTE.b	%00000000
     11  f147		       30		      .BYTE.b	%00110000
     12  f148		       e0		      .BYTE.b	%11100000
     13  f149		       20		      .BYTE.b	%00100000
     14  f14a		       40		      .BYTE.b	%01000000
     15  f14b		       40		      .BYTE.b	%01000000
     16  f14c		       80		      .BYTE.b	%10000000
     17  f14d		       80		      .BYTE.b	%10000000
     18  f14e		       40		      .BYTE.b	%01000000
     19  f14f		       40		      .BYTE.b	%01000000
     20  f150		       20		      .BYTE.b	%00100000
     21  f151		       e0		      .BYTE.b	%11100000
     22  f152		       30		      .BYTE.b	%00110000
     23  f153		       00		      .BYTE.b	%00000000
     24  f154		       00		      .BYTE.b	%00000000
     25  f155		       00		      .BYTE.b	%00000000
     26  f156		       00		      .BYTE.b	%00000000
     27  f157		       00		      .BYTE.b	%00000000
     28  f158		       00		      .BYTE.b	%00000000
     29  f159		       00		      .BYTE.b	%00000000
     30  f15a		       00		      .BYTE.b	%00000000
     31  f15b		       00		      .BYTE.b	%00000000
     32  f15c
     33  f15c				   WebImagePF1
     34  f15c		       08		      .BYTE.b	%00001000
     35  f15d		       06		      .BYTE.b	%00000110
     36  f15e		       01		      .BYTE.b	%00000001
     37  f15f		       00		      .BYTE.b	%00000000
     38  f160		       00		      .BYTE.b	%00000000
     39  f161		       01		      .BYTE.b	%00000001
     40  f162		       01		      .BYTE.b	%00000001
     41  f163		       02		      .BYTE.b	%00000010
     42  f164		       0c		      .BYTE.b	%00001100
     43  f165		       30		      .BYTE.b	%00110000
     44  f166		       c0		      .BYTE.b	%11000000
     45  f167		       38		      .BYTE.b	%00111000
     46  f168		       07		      .BYTE.b	%00000111
     47  f169		       00		      .BYTE.b	%00000000
     48  f16a		       00		      .BYTE.b	%00000000
     49  f16b		       00		      .BYTE.b	%00000000
     50  f16c		       00		      .BYTE.b	%00000000
     51  f16d		       07		      .BYTE.b	%00000111
     52  f16e		       38		      .BYTE.b	%00111000
     53  f16f		       c0		      .BYTE.b	%11000000
     54  f170		       30		      .BYTE.b	%00110000
     55  f171		       0c		      .BYTE.b	%00001100
     56  f172		       02		      .BYTE.b	%00000010
     57  f173		       01		      .BYTE.b	%00000001
     58  f174		       01		      .BYTE.b	%00000001
     59  f175		       00		      .BYTE.b	%00000000
     60  f176		       00		      .BYTE.b	%00000000
     61  f177		       01		      .BYTE.b	%00000001
     62  f178		       06		      .BYTE.b	%00000110
     63  f179		       08		      .BYTE.b	%00001000
     64  f17a
     65  f17a				   WebImagePF2
     66  f17a		       20		      .BYTE.b	%00100000
     67  f17b		       18		      .BYTE.b	%00011000
     68  f17c		       04		      .BYTE.b	%00000100
     69  f17d		       03		      .BYTE.b	%00000011
     70  f17e		       3f		      .BYTE.b	%00111111
     71  f17f		       c2		      .BYTE.b	%11000010
     72  f180		       04		      .BYTE.b	%00000100
     73  f181		       08		      .BYTE.b	%00001000
     74  f182		       08		      .BYTE.b	%00001000
     75  f183		       10		      .BYTE.b	%00010000
     76  f184		       20		      .BYTE.b	%00100000
     77  f185		       20		      .BYTE.b	%00100000
     78  f186		       41		      .BYTE.b	%01000001
     79  f187		       8e		      .BYTE.b	%10001110
     80  f188		       f0		      .BYTE.b	%11110000
     81  f189		       f0		      .BYTE.b	%11110000
     82  f18a		       8e		      .BYTE.b	%10001110
     83  f18b		       41		      .BYTE.b	%01000001
     84  f18c		       20		      .BYTE.b	%00100000
     85  f18d		       20		      .BYTE.b	%00100000
     86  f18e		       10		      .BYTE.b	%00010000
     87  f18f		       08		      .BYTE.b	%00001000
     88  f190		       08		      .BYTE.b	%00001000
     89  f191		       04		      .BYTE.b	%00000100
     90  f192		       c2		      .BYTE.b	%11000010
     91  f193		       3f		      .BYTE.b	%00111111
     92  f194		       03		      .BYTE.b	%00000011
     93  f195		       04		      .BYTE.b	%00000100
     94  f196		       18		      .BYTE.b	%00011000
     95  f197		       20		      .BYTE.b	%00100000
------- FILE kernel.asm
    156  f198
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f198					      include	"objects/spider_sprite.asm"
      1  f198				   SpiderSprite
      2  f198
      3  f198		       99		      .BYTE.b	%10011001
      4  f199		       99		      .BYTE.b	%10011001
      5  f19a		       bd		      .BYTE.b	%10111101
      6  f19b		       bd		      .BYTE.b	%10111101
      7  f19c		       99		      .BYTE.b	%10011001
      8  f19d		       99		      .BYTE.b	%10011001
      9  f19e		       7e		      .BYTE.b	%01111110
     10  f19f		       3c		      .BYTE.b	%00111100
     11  f1a0		       3c		      .BYTE.b	%00111100
     12  f1a1		       18		      .BYTE.b	%00011000
     13  f1a2		       3c		      .BYTE.b	%00111100
     14  f1a3		       7e		      .BYTE.b	%01111110
     15  f1a4		       bd		      .BYTE.b	%10111101
     16  f1a5		       bd		      .BYTE.b	%10111101
     17  f1a6		       bd		      .BYTE.b	%10111101
     18  f1a7		       99		      .BYTE.b	%10011001
     19  f1a8
     20  f1a8		       0b		      .BYTE.b	%00001011
     21  f1a9		       0b		      .BYTE.b	%00001011
     22  f1aa		       13		      .BYTE.b	%00010011
     23  f1ab		       13		      .BYTE.b	%00010011
     24  f1ac		       1c		      .BYTE.b	%00011100
     25  f1ad		       1c		      .BYTE.b	%00011100
     26  f1ae		       3d		      .BYTE.b	%00111101
     27  f1af		       3d		      .BYTE.b	%00111101
     28  f1b0		       7e		      .BYTE.b	%01111110
     29  f1b1		       fe		      .BYTE.b	%11111110
     30  f1b2		       b8		      .BYTE.b	%10111000
     31  f1b3		       b8		      .BYTE.b	%10111000
     32  f1b4		       10		      .BYTE.b	%00010000
     33  f1b5		       10		      .BYTE.b	%00010000
     34  f1b6		       30		      .BYTE.b	%00110000
     35  f1b7		       20		      .BYTE.b	%00100000
     36  f1b8
     37  f1b8		       c7		      .BYTE.b	%11000111
     38  f1b9		       c7		      .BYTE.b	%11000111
     39  f1ba		       28		      .BYTE.b	%00101000
     40  f1bb		       28		      .BYTE.b	%00101000
     41  f1bc		       3a		      .BYTE.b	%00111010
     42  f1bd		       7a		      .BYTE.b	%01111010
     43  f1be		       fd		      .BYTE.b	%11111101
     44  f1bf		       ff		      .BYTE.b	%11111111
     45  f1c0		       ff		      .BYTE.b	%11111111
     46  f1c1		       fd		      .BYTE.b	%11111101
     47  f1c2		       7a		      .BYTE.b	%01111010
     48  f1c3		       3a		      .BYTE.b	%00111010
     49  f1c4		       28		      .BYTE.b	%00101000
     50  f1c5		       28		      .BYTE.b	%00101000
     51  f1c6		       c7		      .BYTE.b	%11000111
     52  f1c7		       c7		      .BYTE.b	%11000111
     53  f1c8
     54  f1c8		       20		      .BYTE.b	%00100000
     55  f1c9		       30		      .BYTE.b	%00110000
     56  f1ca		       10		      .BYTE.b	%00010000
     57  f1cb		       10		      .BYTE.b	%00010000
     58  f1cc		       b8		      .BYTE.b	%10111000
     59  f1cd		       bc		      .BYTE.b	%10111100
     60  f1ce		       fc		      .BYTE.b	%11111100
     61  f1cf		       7e		      .BYTE.b	%01111110
     62  f1d0		       3f		      .BYTE.b	%00111111
     63  f1d1		       1d		      .BYTE.b	%00011101
     64  f1d2		       0c		      .BYTE.b	%00001100
     65  f1d3		       1c		      .BYTE.b	%00011100
     66  f1d4		       13		      .BYTE.b	%00010011
     67  f1d5		       13		      .BYTE.b	%00010011
     68  f1d6		       0b		      .BYTE.b	%00001011
     69  f1d7		       0b		      .BYTE.b	%00001011
     70  f1d8
     71  f1d8		       99		      .BYTE.b	%10011001
     72  f1d9		       bd		      .BYTE.b	%10111101
     73  f1da		       bd		      .BYTE.b	%10111101
     74  f1db		       bd		      .BYTE.b	%10111101
     75  f1dc		       7e		      .BYTE.b	%01111110
     76  f1dd		       3c		      .BYTE.b	%00111100
     77  f1de		       18		      .BYTE.b	%00011000
     78  f1df		       3c		      .BYTE.b	%00111100
     79  f1e0		       3c		      .BYTE.b	%00111100
     80  f1e1		       7e		      .BYTE.b	%01111110
     81  f1e2		       99		      .BYTE.b	%10011001
     82  f1e3		       99		      .BYTE.b	%10011001
     83  f1e4		       bd		      .BYTE.b	%10111101
     84  f1e5		       bd		      .BYTE.b	%10111101
     85  f1e6		       99		      .BYTE.b	%10011001
     86  f1e7		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    158  f1e8
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1e8					      include	"objects/swatter_sprite.asm"
      1  f1e8				   SwatterSprite
      2  f1e8
      3  f1e8		       3c		      .BYTE.b	%00111100
      4  f1e9		       3c		      .BYTE.b	%00111100
      5  f1ea		       56		      .BYTE.b	%01010110
      6  f1eb		       6a		      .BYTE.b	%01101010
      7  f1ec		       d5		      .BYTE.b	%11010101
      8  f1ed		       ab		      .BYTE.b	%10101011
      9  f1ee		       d5		      .BYTE.b	%11010101
     10  f1ef		       ab		      .BYTE.b	%10101011
     11  f1f0		       d5		      .BYTE.b	%11010101
     12  f1f1		       ab		      .BYTE.b	%10101011
     13  f1f2		       d5		      .BYTE.b	%11010101
     14  f1f3		       ab		      .BYTE.b	%10101011
     15  f1f4		       56		      .BYTE.b	%01010110
     16  f1f5		       6a		      .BYTE.b	%01101010
     17  f1f6		       56		      .BYTE.b	%01010110
     18  f1f7		       6a		      .BYTE.b	%01101010
     19  f1f8		       34		      .BYTE.b	%00110100
     20  f1f9		       2c		      .BYTE.b	%00101100
     21  f1fa		       34		      .BYTE.b	%00110100
     22  f1fb		       18		      .BYTE.b	%00011000
------- FILE kernel.asm
    160  f1fc
    161  f1fc				   InitSystem
    162  f1fc
    163  f1fc				   .init_clean
    164  f1fc							; Resets RAM, TIA registers, and CPU registers
      0  f1fc					      CLEAN_START
      1  f1fc		       78		      sei
      2  f1fd		       d8		      cld
      3  f1fe
      4  f1fe		       a2 00		      ldx	#0
      5  f200		       8a		      txa
      6  f201		       a8		      tay
      7  f202		       ca	   .CLEAR_STACK dex
      8  f203		       9a		      txs
      9  f204		       48		      pha
     10  f205		       d0 fb		      bne	.CLEAR_STACK
     11  f207
    166  f207
    167  f207				   .init_tia
    168  f207							; Define default TIA register values
    169  f207
    170  f207							; Initialize copies
    171  f207		       a9 00		      lda	#0
    172  f209		       85 80		      sta	CtrlPf
    173  f20b		       85 81		      sta	NuSiz0
    174  f20d		       85 82		      sta	NuSiz1
    175  f20f
    176  f20f							; Set background color
    177  f20f		       a9 00		      lda	#$00	; Black
    178  f211		       85 09		      sta	COLUBK
    179  f213
    180  f213							; Set the playfield and player color
    181  f213		       a9 0e		      lda	#$0E	; White
    182  f215		       85 08		      sta	COLUPF
    183  f217		       85 06		      sta	COLUP0
    184  f219		       85 07		      sta	COLUP1
    185  f21b
    186  f21b							; Playfield Control
    187  f21b		       a9 01		      lda	#%00000001	; 1 for mirroring
    188  f21d		       85 80		      sta	CtrlPf
    189  f21f		       85 0a		      sta	CTRLPF
    190  f221
    191  f221							; Disable Game Elements
    192  f221		       a9 00		      lda	#$00
    193  f223		       85 1f		      sta	ENABL	; Turn off ball
    194  f225		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    195  f227		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    196  f229		       85 1b		      sta	GRP0	; Turn off player 1
    197  f22b		       85 1c		      sta	GRP1	; Turn off player 2
    198  f22d
    199  f22d							; Empty playfield
    200  f22d		       a9 00		      lda	#%00000000
    201  f22f		       85 0d		      sta	PF0
    202  f231		       85 0e		      sta	PF1
    203  f233		       85 0f		      sta	PF2
    204  f235
    205  f235				   .init_seed
    206  f235							; Seed the random number generator
    207  f235		       ad 84 02 	      lda	INTIM	; Unknown value
    208  f238		       85 86		      sta	Rand8	; Use as seed
    209  f23a		       49 ff		      eor	#$FF	; Flip bits
    210  f23c		       85 87		      sta	Rand16	; Just in case INTIM was 0
    211  f23e
    212  f23e				   .init_game
    213  f23e
    214  f23e							;   jsr LogoInit
    215  f23e		       20 a6 f2 	      jsr	TitleInit
    216  f241
    217  f241							;=======================================
    218  f241							; Game Kernel
    219  f241							;=======================================
    220  f241
    221  f241				   Main
    222  f241
    223  f241		       20 50 f2 	      jsr	VerticalSync
    224  f244		       20 69 f2 	      jsr	VerticalBlank
    225  f247		       20 7c f2 	      jsr	Kernel
    226  f24a		       20 83 f2 	      jsr	OverScan
    227  f24d		       4c 41 f2 	      jmp	Main
    228  f250
    229  f250				   VerticalSync
    230  f250
    231  f250		       a9 00		      lda	#0
    232  f252		       85 01		      sta	VBLANK
    233  f254
    234  f254							; Turn on Vertical Sync signal and setup timer
    235  f254		       a9 02		      lda	#2
    236  f256		       85 00		      sta	VSYNC
    237  f258
    238  f258							; Increment frame count and reduce frame counter
    239  f258		       e6 8e		      inc	Frame
    240  f25a		       c6 8f		      dec	FrameTimer
    241  f25c		       c6 90		      dec	FrameTimer+1
    242  f25e
    243  f25e							; VSYNCH signal scanlines
    244  f25e					      REPEAT	#KERNEL_VSYNC
    245  f25e		       85 02		      sta	WSYNC
    244  f25e					      REPEND
    245  f260		       85 02		      sta	WSYNC
    244  f260					      REPEND
    245  f262		       85 02		      sta	WSYNC
    246  f264					      REPEND
    247  f264
    248  f264							; Turn off Vertical Sync signal
    249  f264		       a9 00		      lda	#0
    250  f266		       85 00		      sta	VSYNC
    251  f268
    252  f268				   .vsync_return
    253  f268		       60		      rts
    254  f269
    255  f269				   VerticalBlank
    256  f269							; Setup Timer
    257  f269		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    258  f26b		       8d 96 02 	      sta	TIM64T
    259  f26e
    260  f26e				   .vblank_logic
    261  f26e							; Perform Game Logic
    262  f26e		       20 79 f2 	      jsr	.vblank_logic_call_ptr
    263  f271
    264  f271				   .vblank_loop
    265  f271							; WSYNC until Timer is complete
    266  f271		       85 02		      sta	WSYNC
    267  f273		       ad 84 02 	      lda	INTIM
    268  f276		       d0 f9		      bne	.vblank_loop
    269  f278
    270  f278				   .vblank_return
    271  f278		       60		      rts
    272  f279
    273  f279				   .vblank_logic_call_ptr
    274  f279		       6c 88 00 	      jmp	(VBlankPtr)
    275  f27c
    276  f27c				   Kernel
    277  f27c
    278  f27c							; Perform Selected Kernel
    279  f27c		       20 80 f2 	      jsr	.kernel_call_ptr
    280  f27f		       60		      rts
    281  f280
    282  f280				   .kernel_call_ptr
    283  f280		       6c 8a 00 	      jmp	(KernelPtr)
    284  f283
    285  f283				   OverScan
    286  f283
    287  f283							; End of screen, enter blanking
    288  f283		       a9 42		      lda	#%01000010
    289  f285		       85 01		      sta	VBLANK
    290  f287
    291  f287							; Setup Timer
    292  f287		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    293  f289		       8d 96 02 	      sta	TIM64T
    294  f28c
    295  f28c							;.overscan_reset:
    296  f28c							; Check for reset switch
    297  f28c		       ad 82 02 	      lda	SWCHB
    298  f28f		       4a		      lsr		; Push D0 to carry (C)
    299  f290		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    300  f292
    301  f292							; Perform reset
    302  f292							;    jsr LogoInit	      ; No need for logic
    303  f292		       20 a6 f2 	      jsr	TitleInit
    304  f295		       4c 9b f2 	      jmp	.overscan_loop
    305  f298
    306  f298				   .overscan_logic
    307  f298							; Perform OverScan Logic
    308  f298		       20 a3 f2 	      jsr	.overscan_logic_call_ptr
    309  f29b
    310  f29b				   .overscan_loop
    311  f29b							; WSYNC until Timer is complete
    312  f29b		       85 02		      sta	WSYNC
    313  f29d		       ad 84 02 	      lda	INTIM
    314  f2a0		       d0 f9		      bne	.overscan_loop
    315  f2a2
    316  f2a2				   .overscan_return
    317  f2a2		       60		      rts
    318  f2a3
    319  f2a3				   .overscan_logic_call_ptr
    320  f2a3		       6c 8c 00 	      jmp	(OverScanPtr)
    321  f2a6
    322  f2a6							;================
    323  f2a6							; State Code
    324  f2a6							;================
    325  f2a6
    326  f2a6							;    include "logo.asm"
------- FILE title.asm LEVEL 2 PASS 2
      0  f2a6					      include	"title.asm"
      1  f2a6							;================
      2  f2a6							; Constants
      3  f2a6							;================
      4  f2a6
      5  f2a6		       00 00	   TITLE_BG_COLOR =	#$00
      6  f2a6		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f2a6		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f2a6		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f2a6
     10  f2a6		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f2a6		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f2a6		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f2a6		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f2a6		       00 09	   TITLE_AUDIO_STEP =	9
     15  f2a6
     16  f2a6		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     17  f2a6		       00 05	   TITLE_FRAME_BOT_LINES =	5
     18  f2a6		       00 07	   TITLE_LABEL_LINE =	7
     19  f2a6
     20  f2a6		       00 0f	   TITLE_GAP_SIZE =	#15
     21  f2a6
     22  f2a6		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     23  f2a6		       00 09	   TITLE_SPIDER_SIZE =	#9
     24  f2a6		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f2a6
     26  f2a6				   TitleInit
     27  f2a6
     28  f2a6							; Setup logic and kernel
      0  f2a6					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f2a6				   .POINTER   SET	VBlankPtr
      2  f2a6				   .ADDRESS   SET	TitleVerticalBlank
      3  f2a6
      4  f2a6		       a9 13		      LDA	#<.ADDRESS
      5  f2a8		       85 88		      STA	.POINTER
      6  f2aa		       a9 f3		      LDA	#>.ADDRESS
      7  f2ac		       85 89		      STA	.POINTER+1
      8  f2ae
      0  f2ae					      SET_POINTER	KernelPtr, TitleKernel
      1  f2ae				   .POINTER   SET	KernelPtr
      2  f2ae				   .ADDRESS   SET	TitleKernel
      3  f2ae
      4  f2ae		       a9 ab		      LDA	#<.ADDRESS
      5  f2b0		       85 8a		      STA	.POINTER
      6  f2b2		       a9 f3		      LDA	#>.ADDRESS
      7  f2b4		       85 8b		      STA	.POINTER+1
      8  f2b6
      0  f2b6					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f2b6				   .POINTER   SET	OverScanPtr
      2  f2b6				   .ADDRESS   SET	TitleOverScan
      3  f2b6
      4  f2b6		       a9 64		      LDA	#<.ADDRESS
      5  f2b8		       85 8c		      STA	.POINTER
      6  f2ba		       a9 f3		      LDA	#>.ADDRESS
      7  f2bc		       85 8d		      STA	.POINTER+1
      8  f2be
     32  f2be
     33  f2be							; Load Colors
     34  f2be		       a9 00		      lda	#TITLE_BG_COLOR
     35  f2c0		       85 09		      sta	COLUBK
     36  f2c2		       a9 06		      lda	#TITLE_WEB_COLOR
     37  f2c4		       85 08		      sta	COLUPF
     38  f2c6		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f2c8		       85 06		      sta	COLUP0
     40  f2ca		       85 07		      sta	COLUP1
     41  f2cc
     42  f2cc							; Load audio settings
     43  f2cc
     44  f2cc							; Melody Line
     45  f2cc		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f2ce		       85 15		      sta	AUDC0
     47  f2d0		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f2d2		       85 19		      sta	AUDV0
     49  f2d4
     50  f2d4							; Drums and Bass
     51  f2d4		       a9 00		      lda	#0
     52  f2d6		       85 16		      sta	AUDC1
     53  f2d8		       85 1a		      sta	AUDV1
     54  f2da
     55  f2da							; Make it so that we play the first note immediately
     56  f2da		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f2dc		       85 91		      sta	AudioStep
     58  f2de		       a9 01		      lda	#1
     59  f2e0		       85 8f		      sta	FrameTimer
     60  f2e2
     61  f2e2							; Setup Spider Sprite
      0  f2e2					      SET_POINTER	SpiderPtr, TitleSpider
      1  f2e2				   .POINTER   SET	SpiderPtr
      2  f2e2				   .ADDRESS   SET	TitleSpider
      3  f2e2
      4  f2e2		       a9 aa		      LDA	#<.ADDRESS
      5  f2e4		       85 a1		      STA	.POINTER
      6  f2e6		       a9 f0		      LDA	#>.ADDRESS
      7  f2e8		       85 a2		      STA	.POINTER+1
      8  f2ea
     63  f2ea
     64  f2ea		       a5 81		      lda	NuSiz0
     65  f2ec		       29 f8		      and	#%11111000
     66  f2ee		       09 06		      ora	#%00000110	; Triple Sprite
     67  f2f0		       85 81		      sta	NuSiz0
     68  f2f2		       85 04		      sta	NUSIZ0
     69  f2f4		       85 82		      sta	NuSiz1
     70  f2f6		       85 05		      sta	NUSIZ1
     71  f2f8
     72  f2f8		       a9 00		      lda	#0	; No reflect
     73  f2fa		       85 0b		      sta	REFP0
     74  f2fc		       a9 ff		      lda	#$FF	; Reflect P1
     75  f2fe		       85 0c		      sta	REFP1
     76  f300
     77  f300		       a9 00		      lda	#0
     78  f302		       85 a8		      sta	SpiderDrawPos	; Initialize animation state
     79  f304
     80  f304							; Setup Web Line
     81  f304							; Missle0 (2 clock size)
     82  f304		       a5 81		      lda	NuSiz0
     83  f306		       29 cf		      and	#%11001111
     84  f308		       09 10		      ora	#%00010000
     85  f30a		       85 81		      sta	NuSiz0
     86  f30c		       85 04		      sta	NUSIZ0
     87  f30e
     88  f30e							; Disable at start
     89  f30e		       a9 00		      lda	#0
     90  f310		       85 1d		      sta	ENAM0
     91  f312
     92  f312		       60		      rts
     93  f313
     94  f313				   TitleVerticalBlank
     95  f313
     96  f313							; Refresh random values
     97  f313		       20 13 f0 	      jsr	Random
     98  f316
     99  f316		       20 1d f3 	      jsr	TitlePosition
    100  f319		       20 37 f3 	      jsr	TitleAnimation
    101  f31c
    102  f31c		       60		      rts
    103  f31d
    104  f31d				   TitlePosition
    105  f31d
    106  f31d							; Position Spider
    107  f31d		       a2 00		      ldx	#0	; Object (player0)
    108  f31f		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    109  f321		       20 00 f0 	      jsr	PosObject
    110  f324
    111  f324		       a2 01		      ldx	#1	; Object (player1)
    112  f326		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    113  f328		       20 00 f0 	      jsr	PosObject
    114  f32b
    115  f32b							; Position Web Line
    116  f32b		       a2 02		      ldx	#2	; Object (missle0)
    117  f32d		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    118  f32f		       20 00 f0 	      jsr	PosObject
    119  f332
    120  f332		       85 02		      sta	WSYNC
    121  f334		       85 2a		      sta	HMOVE
    122  f336
    123  f336		       60		      rts
    124  f337
    125  f337				   TitleAnimation
    126  f337
    127  f337		       a5 91		      lda	AudioStep
    128  f339		       c9 00		      cmp	#0
    129  f33b		       f0 0d		      beq	.title_animation_1
    130  f33d		       c9 04		      cmp	#4
    131  f33f		       f0 16		      beq	.title_animation_2
    132  f341		       c9 09		      cmp	#9
    133  f343		       f0 05		      beq	.title_animation_1
    134  f345		       c9 0c		      cmp	#12
    135  f347		       f0 0e		      beq	.title_animation_2
    136  f349		       60		      rts
    137  f34a
    138  f34a				   .title_animation_1
      0  f34a					      SET_POINTER	SpiderPtr, TitleSpider
      1  f34a				   .POINTER   SET	SpiderPtr
      2  f34a				   .ADDRESS   SET	TitleSpider
      3  f34a
      4  f34a		       a9 aa		      LDA	#<.ADDRESS
      5  f34c		       85 a1		      STA	.POINTER
      6  f34e		       a9 f0		      LDA	#>.ADDRESS
      7  f350		       85 a2		      STA	.POINTER+1
      8  f352
    140  f352		       a9 00		      lda	#0
    141  f354		       85 a8		      sta	SpiderDrawPos
    142  f356		       60		      rts
    143  f357
    144  f357				   .title_animation_2
      0  f357					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f357				   .POINTER   SET	SpiderPtr
      2  f357				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f357
      4  f357		       a9 b3		      LDA	#<.ADDRESS
      5  f359		       85 a1		      STA	.POINTER
      6  f35b		       a9 f0		      LDA	#>.ADDRESS
      7  f35d		       85 a2		      STA	.POINTER+1
      8  f35f
    146  f35f		       a9 01		      lda	#1
    147  f361		       85 a8		      sta	SpiderDrawPos
    148  f363		       60		      rts
    149  f364
    150  f364				   TitleOverScan
    151  f364		       20 6b f3 	      jsr	TitleAudio
    152  f367		       20 a3 f3 	      jsr	TitleState
    153  f36a		       60		      rts
    154  f36b
    155  f36b				   TitleAudio
    156  f36b
    157  f36b		       a6 8f		      ldx	FrameTimer
    158  f36d		       e0 00		      cpx	#0
    159  f36f		       d0 31		      bne	.title_audio_return
    160  f371
    161  f371							; Reset Timer
    162  f371		       a2 09		      ldx	#TITLE_AUDIO_STEP
    163  f373		       86 8f		      stx	FrameTimer
    164  f375
    165  f375				   .title_audio_play
    166  f375
    167  f375							; Increment melody position
    168  f375		       a4 91		      ldy	AudioStep
    169  f377		       c8		      iny
    170  f378
    171  f378							; Check if we're at the end of the melody
    172  f378		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    173  f37a		       d0 02		      bne	.title_audio_play_note
    174  f37c
    175  f37c							; Loop our audio step
    176  f37c		       a0 00		      ldy	#0
    177  f37e
    178  f37e				   .title_audio_play_note
    179  f37e
    180  f37e							; Save current position
    181  f37e		       84 91		      sty	AudioStep
    182  f380
    183  f380							; Basic Melody Line
    184  f380		       b9 89 f4 	      lda	TitleAudio0,y
    185  f383		       85 17		      sta	AUDF0
    186  f385
    187  f385							; Drums and Bass
    188  f385		       b9 99 f4 	      lda	TitleTone1,y
    189  f388		       c9 ff		      cmp	#$FF
    190  f38a		       f0 0e		      beq	.title_audio_play_note_1_mute
    191  f38c
    192  f38c		       85 16		      sta	AUDC1
    193  f38e		       b9 a9 f4 	      lda	TitleAudio1,y
    194  f391		       85 18		      sta	AUDF1
    195  f393		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    196  f395		       85 1a		      sta	AUDV1
    197  f397
    198  f397		       4c a2 f3 	      jmp	.title_audio_return
    199  f39a
    200  f39a				   .title_audio_play_note_1_mute
    201  f39a
    202  f39a		       a9 00		      lda	#0
    203  f39c		       85 18		      sta	AUDF1
    204  f39e		       85 16		      sta	AUDC1
    205  f3a0		       85 1a		      sta	AUDV1
    206  f3a2
    207  f3a2				   .title_audio_return
    208  f3a2		       60		      rts
    209  f3a3
    210  f3a3				   TitleState
    211  f3a3							; Check if Fire Button on controller 1 is pressed
    212  f3a3		       a5 0c		      lda	INPT4
    213  f3a5		       30 03		      bmi	.title_state_return
    214  f3a7
    215  f3a7		       20 dc fb 	      jsr	GameInit
    216  f3aa
    217  f3aa				   .title_state_return
    218  f3aa		       60		      rts
    219  f3ab
    220  f3ab				   TitleKernel
    221  f3ab
    222  f3ab							; Playfield Control
    223  f3ab		       a5 80		      lda	CtrlPf
    224  f3ad		       29 fe		      and	#%11111110	; No mirroring
    225  f3af		       85 80		      sta	CtrlPf
    226  f3b1		       85 0a		      sta	CTRLPF
    227  f3b3
    228  f3b3							; Turn on display
    229  f3b3		       a9 00		      lda	#0
    230  f3b5		       85 01		      sta	VBLANK
    231  f3b7
    232  f3b7		       85 02		      sta	WSYNC
    233  f3b9
    234  f3b9				   TitleFrameTopDraw
    235  f3b9
    236  f3b9							; Start Counters
    237  f3b9		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    238  f3bb		       a0 00		      ldy	#0	; Image Counter
    239  f3bd
    240  f3bd				   .title_frame_top
    241  f3bd
    242  f3bd							; 76 machine cycles per scanline
    243  f3bd		       85 02		      sta	WSYNC
    244  f3bf
    245  f3bf				   .title_frame_top_load		; 66 cycles
    246  f3bf
    247  f3bf							; First half of image
    248  f3bf		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    249  f3c2		       85 0d		      sta	PF0	; 4
    250  f3c4		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    251  f3c7		       85 0e		      sta	PF1	; 4
    252  f3c9		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    253  f3cc		       85 0f		      sta	PF2	; 4
    254  f3ce
      0  f3ce					      sleep	6
      1  f3ce				   .CYCLES    SET	6
      2  f3ce
      3  f3ce				  -	      IF	.CYCLES < 2
      4  f3ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3ce				  -	      ERR
      6  f3ce					      ENDIF
      7  f3ce
      8  f3ce				  -	      IF	.CYCLES & 1
      9  f3ce				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3ce				  -	      nop	0
     11  f3ce				  -	      ELSE
     12  f3ce				  -	      bit	VSYNC
     13  f3ce				  -	      ENDIF
     14  f3ce				  -.CYCLES    SET	.CYCLES - 3
     15  f3ce					      ENDIF
     16  f3ce
     17  f3ce					      REPEAT	.CYCLES / 2
     18  f3ce		       ea		      nop
     17  f3ce					      REPEND
     18  f3cf		       ea		      nop
     17  f3cf					      REPEND
     18  f3d0		       ea		      nop
     19  f3d1					      REPEND
    256  f3d1
    257  f3d1							; Second half of image
    258  f3d1		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    259  f3d4		       85 0d		      sta	PF0	; 4
    260  f3d6		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    261  f3d9		       85 0e		      sta	PF1	; 4
    262  f3db		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    263  f3de		       85 0f		      sta	PF2	; 4
    264  f3e0
    265  f3e0				   .title_frame_top_index		; 4 cycles
    266  f3e0
    267  f3e0		       ca		      dex		; 2
    268  f3e1		       d0 da		      bne	.title_frame_top	; 2
    269  f3e3
    270  f3e3				   .title_frame_top_index_next		; 6 cycles
    271  f3e3
    272  f3e3							; Restore scanline counter
    273  f3e3		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    274  f3e5
    275  f3e5		       98		      tya		; 2
    276  f3e6		       18		      clc		; 2
    277  f3e7		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    278  f3e9		       a8		      tay		; 2
    279  f3ea
    280  f3ea		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    281  f3ec		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    282  f3ee		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    283  f3f0		       85 08		      sta	COLUPF	; 4
    284  f3f2							;jmp .title_frame_top ; 3
    285  f3f2		       ea		      nop		; 2
    286  f3f3		       4c bf f3 	      jmp	.title_frame_top_load	; 3
    287  f3f6
    288  f3f6				   .title_frame_top_label_color_skip
    289  f3f6
    290  f3f6		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    291  f3f8		       d0 c3		      bne	.title_frame_top	; 2
    292  f3fa
    293  f3fa				   .title_frame_top_clean
    294  f3fa
    295  f3fa							; Clear out playfield
    296  f3fa		       a9 00		      lda	#0
    297  f3fc		       85 0d		      sta	PF0
    298  f3fe		       85 0e		      sta	PF1
    299  f400		       85 0f		      sta	PF2
    300  f402
    301  f402				   TitleWebDraw
    302  f402		       a9 02		      lda	#%00000010
    303  f404		       85 1d		      sta	ENAM0
    304  f406
    305  f406		       a9 06		      lda	#TITLE_WEB_COLOR
    306  f408		       85 06		      sta	COLUP0
    307  f40a
    308  f40a		       a2 0f		      ldx	#TITLE_GAP_SIZE
    309  f40c				   .title_web_gap
    310  f40c		       ca		      dex
    311  f40d		       85 02		      sta	WSYNC
    312  f40f		       d0 fb		      bne	.title_web_gap
    313  f411
    314  f411				   TitleSpiderDraw
    315  f411
    316  f411		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    317  f413
    318  f413		       a5 a8		      lda	SpiderDrawPos
    319  f415		       c9 01		      cmp	#1
    320  f417		       d0 0c		      bne	.title_spider_extra_web_disable
    321  f419
    322  f419				   .title_spider_extra_web_start
    323  f419		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    324  f41b				   .title_spider_extra_web_loop
    325  f41b		       85 02		      sta	WSYNC
    326  f41d		       ca		      dex
    327  f41e		       d0 fb		      bne	.title_spider_extra_web_loop
    328  f420
    329  f420		       88		      dey
    330  f421		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    331  f423		       d0 f4		      bne	.title_spider_extra_web_start
    332  f425
    333  f425				   .title_spider_extra_web_disable
    334  f425		       a9 00		      lda	#0
    335  f427		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    336  f429
    337  f429		       85 02		      sta	WSYNC
    338  f42b
    339  f42b		       85 1d		      sta	ENAM0
    340  f42d		       a9 56		      lda	#TITLE_SPIDER_COLOR
    341  f42f		       85 06		      sta	COLUP0
    342  f431
    343  f431				   .title_spider
    344  f431		       b1 a1		      lda	(SpiderPtr),y
    345  f433		       85 1b		      sta	GRP0
    346  f435		       85 1c		      sta	GRP1
    347  f437
    348  f437				   .title_spider_delay
    349  f437		       ca		      dex
    350  f438		       85 02		      sta	WSYNC
    351  f43a		       d0 fb		      bne	.title_spider_delay
    352  f43c
    353  f43c				   .title_spider_index
    354  f43c		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    355  f43e		       88		      dey
    356  f43f		       10 f0		      bpl	.title_spider
    357  f441
    358  f441				   .title_spider_clean
    359  f441
    360  f441							; Clear sprites
    361  f441		       a9 00		      lda	#0
    362  f443		       85 1b		      sta	GRP0
    363  f445		       85 1c		      sta	GRP1
    364  f447
    365  f447				   TitleFrameBottomDraw
    366  f447
    367  f447							; Load Frame Color
    368  f447		       a9 06		      lda	#TITLE_WEB_COLOR
    369  f449		       85 08		      sta	COLUPF
    370  f44b
    371  f44b							; Start Counters
    372  f44b		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    373  f44d		       a0 00		      ldy	#0	; Image Counter
    374  f44f
    375  f44f				   .title_frame_bottom
    376  f44f
    377  f44f							; 76 machine cycles per scanline
    378  f44f		       85 02		      sta	WSYNC
    379  f451
    380  f451				   .title_frame_bottom_load		; 66 cycles
    381  f451
    382  f451							; First half of image
    383  f451		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    384  f454		       85 0d		      sta	PF0	; 4
    385  f456		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    386  f459		       85 0e		      sta	PF1	; 4
    387  f45b		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    388  f45e		       85 0f		      sta	PF2	; 4
    389  f460
      0  f460					      sleep	6
      1  f460				   .CYCLES    SET	6
      2  f460
      3  f460				  -	      IF	.CYCLES < 2
      4  f460				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f460				  -	      ERR
      6  f460					      ENDIF
      7  f460
      8  f460				  -	      IF	.CYCLES & 1
      9  f460				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f460				  -	      nop	0
     11  f460				  -	      ELSE
     12  f460				  -	      bit	VSYNC
     13  f460				  -	      ENDIF
     14  f460				  -.CYCLES    SET	.CYCLES - 3
     15  f460					      ENDIF
     16  f460
     17  f460					      REPEAT	.CYCLES / 2
     18  f460		       ea		      nop
     17  f460					      REPEND
     18  f461		       ea		      nop
     17  f461					      REPEND
     18  f462		       ea		      nop
     19  f463					      REPEND
    391  f463
    392  f463							; Second half of image
    393  f463		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    394  f466		       85 0d		      sta	PF0	; 4
    395  f468		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    396  f46b		       85 0e		      sta	PF1	; 4
    397  f46d		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    398  f470		       85 0f		      sta	PF2	; 4
    399  f472
    400  f472				   .title_frame_bottom_index		; 4 cycles
    401  f472
    402  f472		       ca		      dex		; 2
    403  f473		       d0 da		      bne	.title_frame_bottom	; 2
    404  f475
    405  f475				   .title_frame_bottom_index_next		; 6 cycles
    406  f475
    407  f475							; Restore scanline counter
    408  f475		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    409  f477
    410  f477		       98		      tya		; 2
    411  f478		       18		      clc		; 2
    412  f479		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    413  f47b		       a8		      tay		; 2
    414  f47c		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    415  f47e		       d0 cf		      bne	.title_frame_bottom	; 2
    416  f480
    417  f480				   .title_frame_bottom_clean
    418  f480
    419  f480							; Clear out playfield
    420  f480		       a9 00		      lda	#0
    421  f482		       85 0d		      sta	PF0
    422  f484		       85 0e		      sta	PF1
    423  f486		       85 0f		      sta	PF2
    424  f488
    425  f488				   .title_kernel_return
    426  f488		       60		      rts
    427  f489
    428  f489				   TitleAudio0
    429  f489
    430  f489		       0f		      .BYTE.b	#15	; B
    431  f48a		       13		      .BYTE.b	#19	; G
    432  f48b		       17		      .BYTE.b	#23	; E
    433  f48c		       13		      .BYTE.b	#19	; G
    434  f48d		       0e		      .BYTE.b	#14	; C
    435  f48e		       13		      .BYTE.b	#19
    436  f48f		       17		      .BYTE.b	#23
    437  f490		       13		      .BYTE.b	#19
    438  f491		       0c		      .BYTE.b	#12	; D
    439  f492		       13		      .BYTE.b	#19
    440  f493		       17		      .BYTE.b	#23
    441  f494		       13		      .BYTE.b	#19
    442  f495		       0e		      .BYTE.b	#14	; C
    443  f496		       13		      .BYTE.b	#19
    444  f497		       17		      .BYTE.b	#23
    445  f498		       13		      .BYTE.b	#19
    446  f499
    447  f499				   TitleTone1
    448  f499
    449  f499		       0f		      .BYTE.b	#15	; Electronic Rumble
    450  f49a		       ff		      .BYTE.b	#$FF
    451  f49b		       01		      .BYTE.b	#1	; Low Pure Tone
    452  f49c		       01		      .BYTE.b	#1
    453  f49d		       08		      .BYTE.b	#8	; White Noise
    454  f49e		       01		      .BYTE.b	#1
    455  f49f		       01		      .BYTE.b	#1
    456  f4a0		       ff		      .BYTE.b	#$FF
    457  f4a1		       ff		      .BYTE.b	#$FF
    458  f4a2		       0f		      .BYTE.b	#15
    459  f4a3		       ff		      .BYTE.b	#$FF
    460  f4a4		       ff		      .BYTE.b	#$FF
    461  f4a5		       08		      .BYTE.b	#8
    462  f4a6		       ff		      .BYTE.b	#$FF
    463  f4a7		       01		      .BYTE.b	#1
    464  f4a8		       01		      .BYTE.b	#1
    465  f4a9
    466  f4a9				   TitleAudio1
    467  f4a9
    468  f4a9		       1d		      .BYTE.b	#29	; Kick
    469  f4aa		       ff		      .BYTE.b	#$FF
    470  f4ab		       1f		      .BYTE.b	#31	; C
    471  f4ac		       1f		      .BYTE.b	#31
    472  f4ad		       07		      .BYTE.b	#7	; Snare
    473  f4ae		       1f		      .BYTE.b	#31
    474  f4af		       1f		      .BYTE.b	#31
    475  f4b0		       ff		      .BYTE.b	#$FF
    476  f4b1		       ff		      .BYTE.b	#$FF
    477  f4b2		       1d		      .BYTE.b	#29
    478  f4b3		       ff		      .BYTE.b	#$FF
    479  f4b4		       ff		      .BYTE.b	#$FF
    480  f4b5		       07		      .BYTE.b	#7
    481  f4b6		       ff		      .BYTE.b	#$FF
    482  f4b7		       17		      .BYTE.b	#23	; F
    483  f4b8		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4b9					      include	"game.asm"
      1  f4b9							;================
      2  f4b9							; Game
      3  f4b9							;================
      4  f4b9
      5  f4b9							; Constants
      6  f4b9
      7  f4b9		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f4b9		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4b9		       00 09	   GAME_AUDIO_STEP =	9
     10  f4b9		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4b9		       00 06	   GAME_AUDIO_TONE =	6
     12  f4b9
     13  f4b9							; Object Code
     14  f4b9
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f4b9					      include	"objects/level.asm"
      1  f4b9							;======================
      2  f4b9							; Level Logic
      3  f4b9							;======================
      4  f4b9
      5  f4b9							; Constants
      6  f4b9
      7  f4b9		       00 04	   LEVELS     =	4
      8  f4b9
      9  f4b9				   LevelInit
     10  f4b9
     11  f4b9							; Set beginning level by difficulty switches treated as binary
     12  f4b9		       ad 82 02 	      lda	SWCHB
     13  f4bc					      REPEAT	6
     14  f4bc		       4a		      lsr
     13  f4bc					      REPEND
     14  f4bd		       4a		      lsr
     13  f4bd					      REPEND
     14  f4be		       4a		      lsr
     13  f4be					      REPEND
     14  f4bf		       4a		      lsr
     13  f4bf					      REPEND
     14  f4c0		       4a		      lsr
     13  f4c0					      REPEND
     14  f4c1		       4a		      lsr
     15  f4c2					      REPEND
     16  f4c2		       29 03		      and	#%00000011
     17  f4c4		       85 9d		      sta	LevelCurrent
     18  f4c6
     19  f4c6		       20 e3 f4 	      jsr	LevelLoad
     20  f4c9
     21  f4c9		       60		      rts
     22  f4ca
     23  f4ca				   LevelUpdate
     24  f4ca
     25  f4ca							; Check if score is high enough
     26  f4ca		       a4 9d		      ldy	LevelCurrent
     27  f4cc		       a5 94		      lda	ScoreValue+1
     28  f4ce		       d9 ff f4 	      cmp	LevelDataScore,y
     29  f4d1		       90 0f		      bcc	.level_update_return
     30  f4d3
     31  f4d3							; Reset score
     32  f4d3		       a9 00		      lda	#0
     33  f4d5		       85 94		      sta	ScoreValue+1
     34  f4d7
     35  f4d7							; Check if we haven't reached the final level
     36  f4d7		       a5 9d		      lda	LevelCurrent
     37  f4d9		       c9 03		      cmp	#LEVELS-1
     38  f4db		       b0 05		      bcs	.level_update_return
     39  f4dd
     40  f4dd		       e6 9d		      inc	LevelCurrent
     41  f4df		       20 e3 f4 	      jsr	LevelLoad
     42  f4e2
     43  f4e2				   .level_update_return
     44  f4e2		       60		      rts
     45  f4e3
     46  f4e3				   LevelLoad
     47  f4e3		       a4 9d		      ldy	LevelCurrent
     48  f4e5
     49  f4e5							; Background Color
     50  f4e5		       b9 03 f5 	      lda	LevelDataBk,y
     51  f4e8		       85 9f		      sta	WebColor+0
     52  f4ea
     53  f4ea							; Web Color
     54  f4ea		       b9 07 f5 	      lda	LevelDataPf,y
     55  f4ed		       85 a0		      sta	WebColor+1
     56  f4ef
     57  f4ef							; Bug Speed
     58  f4ef		       b9 0b f5 	      lda	LevelDataBug,y
     59  f4f2		       85 b5		      sta	BugSpeed
     60  f4f4
     61  f4f4							; Swatter Wait Time
     62  f4f4		       b9 0f f5 	      lda	LevelDataSwatterWait,y
     63  f4f7		       85 c6		      sta	SwatterWaitTime
     64  f4f9
     65  f4f9							; Swatter Hit Damage
     66  f4f9		       b9 13 f5 	      lda	LevelDataSwatterDamage,y
     67  f4fc		       85 c7		      sta	SwatterHitDamage
     68  f4fe
     69  f4fe		       60		      rts
     70  f4ff
     71  f4ff				   LevelDataScore		; Score needed
     72  f4ff		       0a		      .BYTE.b	#10
     73  f500		       14		      .BYTE.b	#20
     74  f501		       28		      .BYTE.b	#40
     75  f502		       63		      .BYTE.b	#99
     76  f503
     77  f503				   LevelDataBk		; Background Color
     78  f503		       00		      .BYTE.b	#$00
     79  f504		       60		      .BYTE.b	#$60
     80  f505		       50		      .BYTE.b	#$50
     81  f506		       30		      .BYTE.b	#$30
     82  f507
     83  f507				   LevelDataPf		; Web Color
     84  f507		       06		      .BYTE.b	#$06
     85  f508		       64		      .BYTE.b	#$64
     86  f509		       54		      .BYTE.b	#$54
     87  f50a		       34		      .BYTE.b	#$34
     88  f50b
     89  f50b				   LevelDataBug 		; Bug Speed
     90  f50b		       02		      .BYTE.b	#2
     91  f50c		       03		      .BYTE.b	#3
     92  f50d		       04		      .BYTE.b	#4
     93  f50e		       05		      .BYTE.b	#5
     94  f50f
     95  f50f				   LevelDataSwatterWait 		; Swatter Wait Time Min (adds random 0-128)
     96  f50f		       b4		      .BYTE.b	#180
     97  f510		       96		      .BYTE.b	#150
     98  f511		       78		      .BYTE.b	#120
     99  f512		       3c		      .BYTE.b	#60
    100  f513
    101  f513				   LevelDataSwatterDamage		; Swatter Damage
    102  f513		       10		      .BYTE.b	#$10
    103  f514		       18		      .BYTE.b	#$18
    104  f515		       20		      .BYTE.b	#$20
    105  f516		       40		      .BYTE.b	#$40
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f517					      include	"objects/score.asm"
      1  f517							;======================
      2  f517							; Score (playfield)
      3  f517							;======================
      4  f517
      5  f517							; Constants
      6  f517
      7  f517		       00 00	   SCORE_BG_COLOR =	#$00
      8  f517		       00 0f	   SCORE_LABEL_COLOR =	#$0f
      9  f517		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f517		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f517
     12  f517		       00 05	   SCORE_LABEL_SIZE =	5
     13  f517		       00 05	   SCORE_DIGIT_SIZE =	5
     14  f517		       00 02	   SCORE_LINE_SIZE =	2
     15  f517		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     16  f517
     17  f517							; Initialization
     18  f517
     19  f517				   ScoreInit
     20  f517
     21  f517							; Health Score
     22  f517		       a9 ff		      lda	#$ff
     23  f519		       85 93		      sta	ScoreValue+0
     24  f51b
     25  f51b							; Game Score
     26  f51b		       a9 00		      lda	#0
     27  f51d		       85 94		      sta	ScoreValue+1
     28  f51f
     29  f51f		       60		      rts
     30  f520
     31  f520							; Frame Update
     32  f520
     33  f520				   ScoreUpdate
     34  f520
     35  f520							; Current Level Digits
     36  f520		       a5 9d		      lda	LevelCurrent
     37  f522		       18		      clc
     38  f523		       69 01		      adc	#1
     39  f525
     40  f525		       20 21 f0 	      jsr	BinBcdConvert
     41  f528
     42  f528							; Only use first byte
     43  f528		       8a		      txa
     44  f529		       29 0f		      and	#$0f
     45  f52b		       a8		      tay
     46  f52c		       8a		      txa
     47  f52d		       29 f0		      and	#$f0
     48  f52f					      REPEAT	4
     49  f52f		       4a		      lsr
     48  f52f					      REPEND
     49  f530		       4a		      lsr
     48  f530					      REPEND
     49  f531		       4a		      lsr
     48  f531					      REPEND
     49  f532		       4a		      lsr
     50  f533					      REPEND
     51  f533		       aa		      tax
     52  f534
     53  f534							; Adjust index positions by multiplying by 5
     54  f534		       8a		      txa
     55  f535		       85 83		      sta	Temp
     56  f537		       0a		      asl
     57  f538		       0a		      asl
     58  f539		       65 83		      adc	Temp
     59  f53b		       85 97		      sta	ScoreDigitTens
     60  f53d
     61  f53d		       98		      tya
     62  f53e		       85 83		      sta	Temp
     63  f540		       0a		      asl
     64  f541		       0a		      asl
     65  f542		       65 83		      adc	Temp
     66  f544		       85 95		      sta	ScoreDigitOnes
     67  f546
     68  f546							; Score Digits
     69  f546		       a5 94		      lda	ScoreValue+1
     70  f548
     71  f548		       20 21 f0 	      jsr	BinBcdConvert
     72  f54b
     73  f54b							; Only use first byte
     74  f54b		       8a		      txa
     75  f54c		       29 0f		      and	#$0f
     76  f54e		       a8		      tay
     77  f54f		       8a		      txa
     78  f550		       29 f0		      and	#$f0
     79  f552					      REPEAT	4
     80  f552		       4a		      lsr
     79  f552					      REPEND
     80  f553		       4a		      lsr
     79  f553					      REPEND
     80  f554		       4a		      lsr
     79  f554					      REPEND
     80  f555		       4a		      lsr
     81  f556					      REPEND
     82  f556		       aa		      tax
     83  f557
     84  f557							; Adjust index positions by multiplying by 5
     85  f557		       8a		      txa
     86  f558		       85 83		      sta	Temp
     87  f55a		       0a		      asl
     88  f55b		       0a		      asl
     89  f55c		       65 83		      adc	Temp
     90  f55e		       85 98		      sta	ScoreDigitTens+1
     91  f560
     92  f560		       98		      tya
     93  f561		       85 83		      sta	Temp
     94  f563		       0a		      asl
     95  f564		       0a		      asl
     96  f565		       65 83		      adc	Temp
     97  f567		       85 96		      sta	ScoreDigitOnes+1
     98  f569
     99  f569							; Health Bar
    100  f569		       a5 93		      lda	ScoreValue+0
    101  f56b		       f0 1c		      beq	.score_update_bar_empty
    102  f56d
    103  f56d					      REPEAT	4
    104  f56d		       4a		      lsr
    103  f56d					      REPEND
    104  f56e		       4a		      lsr
    103  f56e					      REPEND
    104  f56f		       4a		      lsr
    103  f56f					      REPEND
    104  f570		       4a		      lsr
    105  f571					      REPEND
    106  f571		       c9 08		      cmp	#8
    107  f573		       b0 09		      bcs	.score_update_bar_top
    108  f575
    109  f575				   .score_update_bar_bottom
    110  f575		       aa		      tax
    111  f576		       bd 73 f6 	      lda	ScoreBar,x
    112  f579		       a0 00		      ldy	#$00
    113  f57b		       4c 8d f5 	      jmp	.score_update_bar_store
    114  f57e
    115  f57e				   .score_update_bar_top
    116  f57e		       29 07		      and	#%00000111
    117  f580		       aa		      tax
    118  f581		       a9 ff		      lda	#$ff
    119  f583		       bc 7b f6 	      ldy	ScoreBarFlip,x
    120  f586		       4c 8d f5 	      jmp	.score_update_bar_store
    121  f589
    122  f589				   .score_update_bar_empty
    123  f589		       a9 00		      lda	#0
    124  f58b		       a0 00		      ldy	#0
    125  f58d
    126  f58d				   .score_update_bar_store
    127  f58d		       85 9b		      sta	ScoreBarGfx+0
    128  f58f		       84 9c		      sty	ScoreBarGfx+1
    129  f591
    130  f591				   .score_update_end
    131  f591		       60		      rts
    132  f592
    133  f592							; Draw loop (uses SCORE_LINES scanlines)
    134  f592
    135  f592				   ScoreDraw
    136  f592
    137  f592							; Load Colors
    138  f592		       a9 00		      lda	#SCORE_BG_COLOR
    139  f594		       85 09		      sta	COLUBK
    140  f596		       a9 0f		      lda	#SCORE_LABEL_COLOR
    141  f598		       85 08		      sta	COLUPF
    142  f59a		       85 06		      sta	COLUP0
    143  f59c		       85 07		      sta	COLUP1
    144  f59e
    145  f59e							; Set Non-Mirror
    146  f59e		       a5 80		      lda	CtrlPf
    147  f5a0		       29 fc		      and	#%11111100
    148  f5a2		       09 02		      ora	#%00000010
    149  f5a4		       85 80		      sta	CtrlPf
    150  f5a6		       85 0a		      sta	CTRLPF
    151  f5a8
    152  f5a8		       a2 00		      ldx	#0
    153  f5aa				   .score_draw_label
    154  f5aa
    155  f5aa		       85 02		      sta	WSYNC
    156  f5ac
    157  f5ac							; First half of image
    158  f5ac							;lda ScoreLabel+0,x ; 4
    159  f5ac							;sta PF0 ; 3
    160  f5ac		       bd 21 f1 	      lda	ScoreLabel+1,x
    161  f5af		       85 0e		      sta	PF1
    162  f5b1		       bd 22 f1 	      lda	ScoreLabel+2,x
    163  f5b4		       85 0f		      sta	PF2
    164  f5b6
      0  f5b6					      sleep	20
      1  f5b6				   .CYCLES    SET	20
      2  f5b6
      3  f5b6				  -	      IF	.CYCLES < 2
      4  f5b6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5b6				  -	      ERR
      6  f5b6					      ENDIF
      7  f5b6
      8  f5b6				  -	      IF	.CYCLES & 1
      9  f5b6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5b6				  -	      nop	0
     11  f5b6				  -	      ELSE
     12  f5b6				  -	      bit	VSYNC
     13  f5b6				  -	      ENDIF
     14  f5b6				  -.CYCLES    SET	.CYCLES - 3
     15  f5b6					      ENDIF
     16  f5b6
     17  f5b6					      REPEAT	.CYCLES / 2
     18  f5b6		       ea		      nop
     17  f5b6					      REPEND
     18  f5b7		       ea		      nop
     17  f5b7					      REPEND
     18  f5b8		       ea		      nop
     17  f5b8					      REPEND
     18  f5b9		       ea		      nop
     17  f5b9					      REPEND
     18  f5ba		       ea		      nop
     17  f5ba					      REPEND
     18  f5bb		       ea		      nop
     17  f5bb					      REPEND
     18  f5bc		       ea		      nop
     17  f5bc					      REPEND
     18  f5bd		       ea		      nop
     17  f5bd					      REPEND
     18  f5be		       ea		      nop
     17  f5be					      REPEND
     18  f5bf		       ea		      nop
     19  f5c0					      REPEND
    166  f5c0
    167  f5c0							; Second half of image
    168  f5c0							;lda ScoreLabel+3,x
    169  f5c0							;sta PF0
    170  f5c0		       bd 24 f1 	      lda	ScoreLabel+4,x
    171  f5c3		       85 0e		      sta	PF1
    172  f5c5		       bd 25 f1 	      lda	ScoreLabel+5,x
    173  f5c8		       85 0f		      sta	PF2
    174  f5ca
    175  f5ca		       8a		      txa
    176  f5cb		       18		      clc
    177  f5cc		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    178  f5ce		       aa		      tax
    179  f5cf		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    180  f5d1		       d0 d7		      bne	.score_draw_label
    181  f5d3
    182  f5d3							; Clear labels and setup color
    183  f5d3		       a9 00		      lda	#0
    184  f5d5		       85 0d		      sta	PF0
    185  f5d7		       85 0e		      sta	PF1
    186  f5d9		       85 0f		      sta	PF2
    187  f5db
    188  f5db		       85 02		      sta	WSYNC
    189  f5dd
    190  f5dd		       a9 44		      lda	#SCORE_LEVEL_COLOR
    191  f5df		       85 08		      sta	COLUPF
    192  f5e1		       85 06		      sta	COLUP0
    193  f5e3		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    194  f5e5		       85 07		      sta	COLUP1
    195  f5e7
    196  f5e7		       85 02		      sta	WSYNC
    197  f5e9
    198  f5e9							; Prepare initial line
    199  f5e9
    200  f5e9							; Level
    201  f5e9		       a4 97		      ldy	ScoreDigitTens
    202  f5eb		       b9 bc f0 	      lda	ScoreDigits,y
    203  f5ee		       29 f0		      and	#$f0
    204  f5f0		       85 99		      sta	ScoreDigitGfx
    205  f5f2
    206  f5f2		       a4 95		      ldy	ScoreDigitOnes
    207  f5f4		       b9 bc f0 	      lda	ScoreDigits,y
    208  f5f7		       29 0f		      and	#$0f
    209  f5f9		       05 99		      ora	ScoreDigitGfx
    210  f5fb		       85 99		      sta	ScoreDigitGfx
    211  f5fd
    212  f5fd							; Score
    213  f5fd		       a4 98		      ldy	ScoreDigitTens+1
    214  f5ff		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    215  f602		       29 0f		      and	#$0f
    216  f604		       85 9a		      sta	ScoreDigitGfx+1
    217  f606
    218  f606		       a4 96		      ldy	ScoreDigitOnes+1
    219  f608		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    220  f60b		       29 f0		      and	#$f0
    221  f60d		       05 9a		      ora	ScoreDigitGfx+1
    222  f60f		       85 9a		      sta	ScoreDigitGfx+1
    223  f611
    224  f611		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    225  f613				   .score_draw_digit
    226  f613
    227  f613		       85 02		      sta	WSYNC
    228  f615
    229  f615		       a5 99		      lda	ScoreDigitGfx
    230  f617		       85 0e		      sta	PF1
    231  f619		       a5 9a		      lda	ScoreDigitGfx+1
    232  f61b		       85 0f		      sta	PF2
    233  f61d
    234  f61d							; Begin preparing next line
    235  f61d		       e6 95		      inc	ScoreDigitOnes
    236  f61f		       e6 97		      inc	ScoreDigitTens
    237  f621		       e6 96		      inc	ScoreDigitOnes+1
    238  f623		       e6 98		      inc	ScoreDigitTens+1
    239  f625
    240  f625							; Level 1st Digit
    241  f625		       a4 97		      ldy	ScoreDigitTens
    242  f627		       b9 bc f0 	      lda	ScoreDigits,y
    243  f62a		       29 f0		      and	#$f0
    244  f62c		       85 83		      sta	Temp
    245  f62e
    246  f62e		       a5 9b		      lda	ScoreBarGfx+0
    247  f630		       85 0e		      sta	PF1
    248  f632		       a5 9c		      lda	ScoreBarGfx+1
    249  f634		       85 0f		      sta	PF2
    250  f636
    251  f636							; Score 1st Digit
    252  f636		       a4 98		      ldy	ScoreDigitTens+1
    253  f638		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    254  f63b		       29 0f		      and	#$0f
    255  f63d		       85 84		      sta	Temp+1
    256  f63f
    257  f63f		       85 02		      sta	WSYNC
    258  f641		       a5 99		      lda	ScoreDigitGfx
    259  f643		       85 0e		      sta	PF1
    260  f645		       a5 9a		      lda	ScoreDigitGfx+1
    261  f647		       85 0f		      sta	PF2
    262  f649
    263  f649							; Level 2nd Digit (and transfer)
    264  f649		       a4 95		      ldy	ScoreDigitOnes
    265  f64b		       b9 bc f0 	      lda	ScoreDigits,y
    266  f64e		       29 0f		      and	#$0f
    267  f650		       05 83		      ora	Temp
    268  f652		       85 99		      sta	ScoreDigitGfx
    269  f654
    270  f654							; Score 2nd Digit (and transfer)
    271  f654		       a4 96		      ldy	ScoreDigitOnes+1
    272  f656		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    273  f659		       29 f0		      and	#$f0
    274  f65b		       05 84		      ora	Temp+1
    275  f65d		       85 9a		      sta	ScoreDigitGfx+1
    276  f65f
    277  f65f		       a5 9b		      lda	ScoreBarGfx+0
    278  f661		       85 0e		      sta	PF1
    279  f663		       a4 9c		      ldy	ScoreBarGfx+1
    280  f665		       84 0f		      sty	PF2
    281  f667
    282  f667		       ca		      dex
    283  f668		       d0 a9		      bne	.score_draw_digit
    284  f66a
    285  f66a		       a9 00		      lda	#0
    286  f66c		       85 02		      sta	WSYNC
    287  f66e		       85 0e		      sta	PF1
    288  f670		       85 0f		      sta	PF2
    289  f672
    290  f672		       60		      rts
    291  f673
    292  f673				   ScoreBar
    293  f673		       80		      .BYTE.b	#%10000000
    294  f674		       c0		      .BYTE.b	#%11000000
    295  f675		       e0		      .BYTE.b	#%11100000
    296  f676		       f0		      .BYTE.b	#%11110000
    297  f677		       f8		      .BYTE.b	#%11111000
    298  f678		       fc		      .BYTE.b	#%11111100
    299  f679		       fe		      .BYTE.b	#%11111110
    300  f67a		       ff		      .BYTE.b	#%11111111
    301  f67b
    302  f67b				   ScoreBarFlip
    303  f67b		       01		      .BYTE.b	#%00000001
    304  f67c		       03		      .BYTE.b	#%00000011
    305  f67d		       07		      .BYTE.b	#%00000111
    306  f67e		       0f		      .BYTE.b	#%00001111
    307  f67f		       1f		      .BYTE.b	#%00011111
    308  f680		       3f		      .BYTE.b	#%00111111
    309  f681		       7f		      .BYTE.b	#%01111111
    310  f682		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f683					      include	"objects/web.asm"
      1  f683							;================
      2  f683							; Web (Playfield)
      3  f683							;================
      4  f683
      5  f683							; Constants
      6  f683
      7  f683		       00 00	   WEB_BG_COLOR =	#$00
      8  f683		       00 06	   WEB_FG_COLOR =	#$06
      9  f683
     10  f683		       00 1e	   WEB_SIZE   =	30
     11  f683		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f683		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f683
     14  f683							; Scanline Draw
     15  f683
     16  f683				   WebDrawStart
     17  f683
     18  f683							; Load Colors
     19  f683							;    lda WebColor+0
     20  f683							;    sta COLUBK
     21  f683		       a5 a0		      lda	WebColor+1
     22  f685		       85 08		      sta	COLUPF
     23  f687
     24  f687							; Mirror playfield and use standard playfield color
     25  f687		       a5 80		      lda	CtrlPf
     26  f689		       29 fc		      and	#%11111100
     27  f68b		       09 01		      ora	#%00000001
     28  f68d		       85 80		      sta	CtrlPf
     29  f68f		       85 0a		      sta	CTRLPF
     30  f691
     31  f691							; Initialize image index
     32  f691		       a9 00		      lda	#0
     33  f693		       85 9e		      sta	WebIndex
     34  f695
     35  f695		       60		      rts
     36  f696
     37  f696				   WebClean
     38  f696
     39  f696							; Clear out playfield
     40  f696		       a9 00		      lda	#0
     41  f698		       85 0d		      sta	PF0
     42  f69a		       85 0e		      sta	PF1
     43  f69c		       85 0f		      sta	PF2
     44  f69e
     45  f69e							; Clear colors
     46  f69e		       85 09		      sta	COLUBK
     47  f6a0		       85 08		      sta	COLUPF
     48  f6a2
     49  f6a2		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f6a3					      include	"objects/spider.asm"
      1  f6a3							;=================
      2  f6a3							; Spider (player0)
      3  f6a3							;=================
      4  f6a3
      5  f6a3							; Constants
      6  f6a3
      7  f6a3		       00 56	   SPIDER_COLOR =	#$56
      8  f6a3		       00 10	   SPIDER_SPRITE_SIZE =	16
      9  f6a3		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     10  f6a3		       00 02	   SPIDER_VEL_X =	2
     11  f6a3		       00 02	   SPIDER_VEL_Y =	2
     12  f6a3
     13  f6a3		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f6a3
     15  f6a3							; Initialization
     16  f6a3
     17  f6a3				   SpiderInit
     18  f6a3
     19  f6a3							; Initialize Position in center of screen
     20  f6a3		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f6a5		       85 a3		      sta	SpiderPos
     22  f6a7		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f6a9		       85 a4		      sta	SpiderPos+1
     24  f6ab
     25  f6ab							; Setup Sprite
      0  f6ab					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f6ab				   .POINTER   SET	SpiderPtr
      2  f6ab				   .ADDRESS   SET	SpiderSprite
      3  f6ab
      4  f6ab		       a9 98		      LDA	#<.ADDRESS
      5  f6ad		       85 a1		      STA	.POINTER
      6  f6af		       a9 f1		      LDA	#>.ADDRESS
      7  f6b1		       85 a2		      STA	.POINTER+1
      8  f6b3
     27  f6b3
     28  f6b3							;    lda #SPIDER_COLOR
     29  f6b3							;    sta SpiderColor
     30  f6b3
     31  f6b3		       60		      rts
     32  f6b4
     33  f6b4							; Frame Update
     34  f6b4
     35  f6b4				   SpiderUpdate
     36  f6b4		       20 bb f6 	      jsr	SpiderControl
     37  f6b7		       20 a1 f7 	      jsr	SpiderCollision
     38  f6ba		       60		      rts
     39  f6bb
     40  f6bb				   SpiderControl
     41  f6bb
     42  f6bb							; Control Position
     43  f6bb		       a6 a3		      ldx	SpiderPos
     44  f6bd		       a4 a4		      ldy	SpiderPos+1
     45  f6bf		       ad 80 02 	      lda	SWCHA
     46  f6c2
     47  f6c2				   .spider_control_check_right
     48  f6c2		       30 02		      bmi	.spider_control_check_left
     49  f6c4
     50  f6c4					      REPEAT	#SPIDER_VEL_X
     51  f6c4		       e8		      inx
     50  f6c4					      REPEND
     51  f6c5		       e8		      inx
     52  f6c6					      REPEND
     53  f6c6
     54  f6c6				   .spider_control_check_left
     55  f6c6		       2a		      rol
     56  f6c7		       30 02		      bmi	.spider_control_check_down
     57  f6c9
     58  f6c9					      REPEAT	#SPIDER_VEL_X
     59  f6c9		       ca		      dex
     58  f6c9					      REPEND
     59  f6ca		       ca		      dex
     60  f6cb					      REPEND
     61  f6cb
     62  f6cb				   .spider_control_check_down
     63  f6cb		       2a		      rol
     64  f6cc		       30 02		      bmi	.spider_control_check_up
     65  f6ce
     66  f6ce					      REPEAT	#SPIDER_VEL_Y
     67  f6ce		       88		      dey
     66  f6ce					      REPEND
     67  f6cf		       88		      dey
     68  f6d0					      REPEND
     69  f6d0
     70  f6d0				   .spider_control_check_up
     71  f6d0		       2a		      rol
     72  f6d1		       30 02		      bmi	.spider_control_sprite
     73  f6d3
     74  f6d3					      REPEAT	#SPIDER_VEL_Y
     75  f6d3		       c8		      iny
     74  f6d3					      REPEND
     75  f6d4		       c8		      iny
     76  f6d5					      REPEND
     77  f6d5
     78  f6d5				   .spider_control_sprite
     79  f6d5							; Control Sprite
     80  f6d5		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f6d7
     82  f6d7				   .spider_control_sprite_x
     83  f6d7		       e4 a3		      cpx	SpiderPos
     84  f6d9		       90 04		      bcc	.spider_control_sprite_left
     85  f6db		       f0 09		      beq	.spider_control_sprite_y
     86  f6dd		       b0 05		      bcs	.spider_control_sprite_right
     87  f6df
     88  f6df				   .spider_control_sprite_left
     89  f6df		       09 80		      ora	#%10000000
     90  f6e1		       4c e6 f6 	      jmp	.spider_control_sprite_y
     91  f6e4
     92  f6e4				   .spider_control_sprite_right
     93  f6e4		       09 40		      ora	#%01000000
     94  f6e6
     95  f6e6				   .spider_control_sprite_y
     96  f6e6		       c4 a4		      cpy	SpiderPos+1
     97  f6e8		       90 04		      bcc	.spider_control_sprite_down
     98  f6ea		       f0 09		      beq	.spider_control_sprite_store
     99  f6ec		       b0 05		      bcs	.spider_control_sprite_up
    100  f6ee
    101  f6ee				   .spider_control_sprite_down
    102  f6ee		       09 10		      ora	#%00010000
    103  f6f0		       4c f5 f6 	      jmp	.spider_control_sprite_store
    104  f6f3
    105  f6f3				   .spider_control_sprite_up
    106  f6f3		       09 20		      ora	#%00100000
    107  f6f5
    108  f6f5				   .spider_control_sprite_store
    109  f6f5		       c9 00		      cmp	#%00000000
    110  f6f7		       f0 02		      beq	.spider_control_boundary
    111  f6f9		       85 a5		      sta	SpiderCtrl
    112  f6fb
    113  f6fb				   .spider_control_boundary
    114  f6fb							; Check Playfield Boundaries
    115  f6fb
    116  f6fb				   .spider_control_boundary_left
    117  f6fb		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f6fd		       b0 05		      bcs	.spider_control_boundary_right
    119  f6ff		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f701		       4c 0a f7 	      jmp	.spider_control_boundary_top
    121  f704
    122  f704				   .spider_control_boundary_right
    123  f704		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    124  f706		       90 02		      bcc	.spider_control_boundary_top
    125  f708		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    126  f70a
    127  f70a				   .spider_control_boundary_top
    128  f70a		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    129  f70c		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f70e		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    131  f710		       4c 19 f7 	      jmp	.spider_control_store
    132  f713
    133  f713				   .spider_control_boundary_bottom
    134  f713		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    135  f715		       90 02		      bcc	.spider_control_store
    136  f717		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    137  f719
    138  f719				   .spider_control_store
    139  f719							; Store new position
    140  f719		       86 a3		      stx	SpiderPos
    141  f71b		       84 a4		      sty	SpiderPos+1
    142  f71d
    143  f71d							; TODO: Optimize this somehow?
    144  f71d				   .spider_control_sprite_assign
    145  f71d							; Skip if no change
    146  f71d		       c9 00		      cmp	#%00000000
    147  f71f		       f0 7f		      beq	.spider_control_return
    148  f721
    149  f721		       a2 00		      ldx	#%00000000	; For reflection
    150  f723
    151  f723				   .spider_control_sprite_assign_left
    152  f723		       c9 80		      cmp	#%10000000
    153  f725		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f727					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f727				   .POINTER   SET	SpiderPtr
      2  f727				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f727
      4  f727		       a9 b8		      LDA	#<.ADDRESS
      5  f729		       85 a1		      STA	.POINTER
      6  f72b		       a9 f1		      LDA	#>.ADDRESS
      7  f72d		       85 a2		      STA	.POINTER+1
      8  f72f
    155  f72f		       a2 08		      ldx	#%00001000
    156  f731		       4c 9e f7 	      jmp	.spider_control_reflect
    157  f734
    158  f734				   .spider_control_sprite_assign_right
    159  f734		       c9 40		      cmp	#%01000000
    160  f736		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f738					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f738				   .POINTER   SET	SpiderPtr
      2  f738				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f738
      4  f738		       a9 b8		      LDA	#<.ADDRESS
      5  f73a		       85 a1		      STA	.POINTER
      6  f73c		       a9 f1		      LDA	#>.ADDRESS
      7  f73e		       85 a2		      STA	.POINTER+1
      8  f740
    162  f740		       4c 9e f7 	      jmp	.spider_control_reflect
    163  f743
    164  f743				   .spider_control_sprite_assign_top
    165  f743		       c9 20		      cmp	#%00100000
    166  f745		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f747					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f747				   .POINTER   SET	SpiderPtr
      2  f747				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f747
      4  f747		       a9 98		      LDA	#<.ADDRESS
      5  f749		       85 a1		      STA	.POINTER
      6  f74b		       a9 f1		      LDA	#>.ADDRESS
      7  f74d		       85 a2		      STA	.POINTER+1
      8  f74f
    168  f74f		       4c 9e f7 	      jmp	.spider_control_reflect
    169  f752
    170  f752				   .spider_control_sprite_assign_bottom
    171  f752		       c9 10		      cmp	#%00010000
    172  f754		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f756					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f756				   .POINTER   SET	SpiderPtr
      2  f756				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f756
      4  f756		       a9 d8		      LDA	#<.ADDRESS
      5  f758		       85 a1		      STA	.POINTER
      6  f75a		       a9 f1		      LDA	#>.ADDRESS
      7  f75c		       85 a2		      STA	.POINTER+1
      8  f75e
    174  f75e		       4c 9e f7 	      jmp	.spider_control_reflect
    175  f761
    176  f761				   .spider_control_sprite_assign_top_right
    177  f761		       c9 60		      cmp	#%01100000
    178  f763		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f765					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f765				   .POINTER   SET	SpiderPtr
      2  f765				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f765
      4  f765		       a9 a8		      LDA	#<.ADDRESS
      5  f767		       85 a1		      STA	.POINTER
      6  f769		       a9 f1		      LDA	#>.ADDRESS
      7  f76b		       85 a2		      STA	.POINTER+1
      8  f76d
    180  f76d		       4c 9e f7 	      jmp	.spider_control_reflect
    181  f770
    182  f770				   .spider_control_sprite_assign_bottom_right
    183  f770		       c9 50		      cmp	#%01010000
    184  f772		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f774					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f774				   .POINTER   SET	SpiderPtr
      2  f774				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f774
      4  f774		       a9 c8		      LDA	#<.ADDRESS
      5  f776		       85 a1		      STA	.POINTER
      6  f778		       a9 f1		      LDA	#>.ADDRESS
      7  f77a		       85 a2		      STA	.POINTER+1
      8  f77c
    186  f77c		       4c 9e f7 	      jmp	.spider_control_reflect
    187  f77f
    188  f77f				   .spider_control_sprite_assign_bottom_left
    189  f77f		       c9 90		      cmp	#%10010000
    190  f781		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f783					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f783				   .POINTER   SET	SpiderPtr
      2  f783				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f783
      4  f783		       a9 c8		      LDA	#<.ADDRESS
      5  f785		       85 a1		      STA	.POINTER
      6  f787		       a9 f1		      LDA	#>.ADDRESS
      7  f789		       85 a2		      STA	.POINTER+1
      8  f78b
    192  f78b		       a2 08		      ldx	#%00001000
    193  f78d		       4c 9e f7 	      jmp	.spider_control_reflect
    194  f790
    195  f790				   .spider_control_sprite_assign_top_left
    196  f790		       c9 a0		      cmp	#%10100000
    197  f792		       d0 0a		      bne	.spider_control_reflect
      0  f794					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f794				   .POINTER   SET	SpiderPtr
      2  f794				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f794
      4  f794		       a9 a8		      LDA	#<.ADDRESS
      5  f796		       85 a1		      STA	.POINTER
      6  f798		       a9 f1		      LDA	#>.ADDRESS
      7  f79a		       85 a2		      STA	.POINTER+1
      8  f79c
    199  f79c		       a2 08		      ldx	#%00001000
    200  f79e
    201  f79e				   .spider_control_reflect
    202  f79e		       86 0b		      stx	REFP0
    203  f7a0
    204  f7a0				   .spider_control_return
    205  f7a0		       60		      rts
    206  f7a1
    207  f7a1				   SpiderCollision
    208  f7a1		       a9 56		      lda	#SPIDER_COLOR
    209  f7a3
    210  f7a3				   .spider_collision_m0
    211  f7a3							; Check stun status
    212  f7a3		       a6 b6		      ldx	BugStunned
    213  f7a5		       e0 00		      cpx	#0
    214  f7a7		       d0 04		      bne	.spider_collision_m1
    215  f7a9
    216  f7a9							; Collision for M0 (V set)
    217  f7a9		       24 00		      bit	CXM0P
    218  f7ab		       70 0d		      bvs	.spider_collision_active
    219  f7ad
    220  f7ad				   .spider_collision_m1
    221  f7ad							; Check stun status
    222  f7ad		       a6 b7		      ldx	BugStunned+1
    223  f7af		       e0 00		      cpx	#0
    224  f7b1		       d0 09		      bne	.spider_collision_return
    225  f7b3
    226  f7b3							; Collision for M1 (N set)
    227  f7b3		       24 01		      bit	CXM1P
    228  f7b5		       30 03		      bmi	.spider_collision_active
    229  f7b7
    230  f7b7		       4c bc f7 	      jmp	.spider_collision_return
    231  f7ba
    232  f7ba				   .spider_collision_active
    233  f7ba		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f7bc
    235  f7bc				   .spider_collision_return
    236  f7bc		       85 a6		      sta	SpiderColor
    237  f7be		       60		      rts
    238  f7bf
    239  f7bf				   SpiderPosition
    240  f7bf
    241  f7bf							; Set Position
    242  f7bf		       a2 00		      ldx	#0	; Object (player0)
    243  f7c1		       a5 a3		      lda	SpiderPos	; X Position
    244  f7c3		       20 00 f0 	      jsr	PosObject
    245  f7c6
    246  f7c6		       60		      rts
    247  f7c7
    248  f7c7							; Scanline Draw
    249  f7c7
    250  f7c7				   SpiderDrawStart
    251  f7c7
    252  f7c7							; Set player 0 to be quad size
    253  f7c7		       a5 81		      lda	NuSiz0
    254  f7c9		       29 f8		      and	#%11111000
    255  f7cb		       09 05		      ora	#%00000101
    256  f7cd		       85 81		      sta	NuSiz0
    257  f7cf		       85 04		      sta	NUSIZ0
    258  f7d1
    259  f7d1							; Set sprite color
    260  f7d1		       a5 a6		      lda	SpiderColor
    261  f7d3		       85 06		      sta	COLUP0
    262  f7d5
    263  f7d5							; Determine if we need to use vertical delay (odd line)
    264  f7d5		       a5 a4		      lda	SpiderPos+1	; Y Position
    265  f7d7		       4a		      lsr
    266  f7d8		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f7da
    268  f7da		       a0 01		      ldy	#1
    269  f7dc		       4c e1 f7 	      jmp	.spider_draw_start_set_delay
    270  f7df
    271  f7df				   .spider_draw_start_nodelay
    272  f7df		       a0 00		      ldy	#0
    273  f7e1
    274  f7e1				   .spider_draw_start_set_delay
    275  f7e1		       84 25		      sty	VDELP0
    276  f7e3
    277  f7e3				   .spider_draw_start_pos
    278  f7e3							; Calculate starting position
    279  f7e3		       18		      clc
    280  f7e4		       69 10		      adc	#SPIDER_SIZE
    281  f7e6		       85 a8		      sta	SpiderDrawPos
    282  f7e8
    283  f7e8							; Initialize sprite index and line buffer
    284  f7e8		       a9 00		      lda	#0
    285  f7ea		       85 a7		      sta	SpiderIndex
    286  f7ec		       85 a9		      sta	SpiderLine
    287  f7ee
    288  f7ee		       60		      rts
    289  f7ef
    290  f7ef				   SpiderClean
    291  f7ef
    292  f7ef							; Clear out Player0 sprite
    293  f7ef		       a9 00		      lda	#0
    294  f7f1		       85 1b		      sta	GRP0
    295  f7f3
    296  f7f3		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f7f4					      include	"objects/line.asm"
      1  f7f4							;================
      2  f7f4							; Line (ball)
      3  f7f4							;================
      4  f7f4
      5  f7f4							; Constants
      6  f7f4
      7  f7f4		       00 08	   LINE_SIZE  =	8
      8  f7f4		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f7f4		       00 04	   LINE_VEL_X =	4
     10  f7f4		       00 04	   LINE_VEL_Y =	4
     11  f7f4
     12  f7f4		       00 08	   LINE_AUDIO_C =	8
     13  f7f4		       00 01	   LINE_AUDIO_F =	1
     14  f7f4		       00 04	   LINE_AUDIO_V =	4
     15  f7f4
     16  f7f4		       00 08	   LINE_SAMPLE_LEN =	8
     17  f7f4		       00 03	   LINE_SAMPLE_C =	3
     18  f7f4		       00 01	   LINE_SAMPLE_F =	1
     19  f7f4		       00 04	   LINE_SAMPLE_V =	4
     20  f7f4
     21  f7f4							; Initialization
     22  f7f4
     23  f7f4				   LineInit
     24  f7f4
     25  f7f4							; Initial Line Control
     26  f7f4		       a9 00		      lda	#0
     27  f7f6		       85 ac		      sta	LineEnabled
     28  f7f8		       85 ad		      sta	LinePos+0
     29  f7fa		       85 ae		      sta	LinePos+1
     30  f7fc		       85 af		      sta	LineVelocity+0
     31  f7fe		       85 b0		      sta	LineVelocity+1
     32  f800		       85 b1		      sta	LineStartPos+0
     33  f802		       85 b2		      sta	LineStartPos+1
     34  f804		       85 b3		      sta	LineDrawPos+0
     35  f806		       85 b4		      sta	LineDrawPos+1
     36  f808
     37  f808		       60		      rts
     38  f809
     39  f809							; Frame Update
     40  f809
     41  f809				   LineUpdate
     42  f809		       20 13 f8 	      jsr	LineControl
     43  f80c		       20 cb f8 	      jsr	LineObject
     44  f80f		       20 12 f9 	      jsr	LineCollision
     45  f812		       60		      rts
     46  f813
     47  f813				   LineControl
     48  f813
     49  f813							; Check if Fire Button on controller 1 is pressed
     50  f813		       a5 0c		      lda	INPT4
     51  f815		       30 0a		      bmi	.line_control_skip
     52  f817
     53  f817		       24 ac		      bit	LineEnabled
     54  f819		       30 06		      bmi	.line_control_skip
     55  f81b
     56  f81b		       a5 a5		      lda	SpiderCtrl
     57  f81d		       c9 00		      cmp	#0
     58  f81f		       d0 03		      bne	.line_control_fire
     59  f821
     60  f821				   .line_control_skip
     61  f821		       4c ca f8 	      jmp	.line_control_return
     62  f824
     63  f824				   .line_control_fire
     64  f824		       20 5a f9 	      jsr	LineEnable
     65  f827
     66  f827				   .line_control_x
     67  f827		       a5 a5		      lda	SpiderCtrl
     68  f829		       29 c0		      and	#%11000000
     69  f82b		       f0 0e		      beq	.line_control_x_none
     70  f82d				   .line_control_x_left
     71  f82d		       c9 80		      cmp	#%10000000
     72  f82f		       d0 05		      bne	.line_control_x_right
     73  f831
     74  f831		       a9 fc		      lda	#-LINE_VEL_X
     75  f833		       4c 3d f8 	      jmp	.line_control_x_store
     76  f836				   .line_control_x_right
     77  f836		       a9 04		      lda	#LINE_VEL_X
     78  f838		       4c 3d f8 	      jmp	.line_control_x_store
     79  f83b				   .line_control_x_none
     80  f83b		       a9 00		      lda	#0
     81  f83d				   .line_control_x_store
     82  f83d		       85 af		      sta	LineVelocity
     83  f83f
     84  f83f				   .line_control_y
     85  f83f		       a5 a5		      lda	SpiderCtrl
     86  f841		       29 30		      and	#%00110000
     87  f843		       f0 0e		      beq	.line_control_y_none
     88  f845				   .line_control_y_up
     89  f845		       c9 20		      cmp	#%00100000
     90  f847		       d0 05		      bne	.line_control_y_down
     91  f849
     92  f849		       a9 04		      lda	#LINE_VEL_Y
     93  f84b		       4c 55 f8 	      jmp	.line_control_y_store
     94  f84e				   .line_control_y_down
     95  f84e		       a9 fc		      lda	#-LINE_VEL_Y
     96  f850		       4c 55 f8 	      jmp	.line_control_y_store
     97  f853				   .line_control_y_none
     98  f853		       a9 00		      lda	#0
     99  f855				   .line_control_y_store
    100  f855		       85 b0		      sta	LineVelocity+1
    101  f857
    102  f857				   .line_control_position
    103  f857
    104  f857		       a2 00		      ldx	#0	; offsetX
    105  f859		       a0 00		      ldy	#0	; offsetY
    106  f85b
    107  f85b		       a5 a5		      lda	SpiderCtrl
    108  f85d		       29 f0		      and	#%11110000
    109  f85f
    110  f85f				   .line_control_position_left
    111  f85f		       c9 80		      cmp	#%10000000
    112  f861		       d0 07		      bne	.line_control_position_right
    113  f863
    114  f863		       a2 00		      ldx	#0
    115  f865		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    116  f867		       4c b2 f8 	      jmp	.line_control_position_store
    117  f86a
    118  f86a				   .line_control_position_right
    119  f86a		       c9 40		      cmp	#%01000000
    120  f86c		       d0 07		      bne	.line_control_position_top
    121  f86e
    122  f86e		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    123  f870		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    124  f872		       4c b2 f8 	      jmp	.line_control_position_store
    125  f875
    126  f875				   .line_control_position_top
    127  f875		       c9 20		      cmp	#%00100000
    128  f877		       d0 07		      bne	.line_control_position_bottom
    129  f879
    130  f879		       a2 08		      ldx	#SPIDER_SIZE/2
    131  f87b		       a0 10		      ldy	#SPIDER_SIZE
    132  f87d		       4c b2 f8 	      jmp	.line_control_position_store
    133  f880
    134  f880				   .line_control_position_bottom
    135  f880		       c9 10		      cmp	#%00010000
    136  f882		       d0 05		      bne	.line_control_position_top_right
    137  f884
    138  f884		       a2 08		      ldx	#SPIDER_SIZE/2
    139  f886		       4c b2 f8 	      jmp	.line_control_position_store
    140  f889
    141  f889				   .line_control_position_top_right
    142  f889		       c9 60		      cmp	#%01100000
    143  f88b		       d0 07		      bne	.line_control_position_bottom_right
    144  f88d
    145  f88d		       a2 10		      ldx	#SPIDER_SIZE
    146  f88f		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    147  f891		       4c b2 f8 	      jmp	.line_control_position_store
    148  f894
    149  f894				   .line_control_position_bottom_right
    150  f894		       c9 50		      cmp	#%01010000
    151  f896		       d0 07		      bne	.line_control_position_bottom_left
    152  f898
    153  f898		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    154  f89a		       a0 00		      ldy	#0
    155  f89c		       4c b2 f8 	      jmp	.line_control_position_store
    156  f89f
    157  f89f				   .line_control_position_bottom_left
    158  f89f		       c9 90		      cmp	#%10010000
    159  f8a1		       d0 07		      bne	.line_control_position_top_left
    160  f8a3
    161  f8a3							; No Offset
    162  f8a3		       a2 04		      ldx	#LINE_SIZE/2
    163  f8a5		       a0 04		      ldy	#LINE_SIZE/2
    164  f8a7		       4c b2 f8 	      jmp	.line_control_position_store
    165  f8aa
    166  f8aa				   .line_control_position_top_left
    167  f8aa		       c9 a0		      cmp	#%10100000
    168  f8ac		       d0 04		      bne	.line_control_position_store
    169  f8ae
    170  f8ae		       a2 00		      ldx	#0
    171  f8b0		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    172  f8b2
    173  f8b2				   .line_control_position_store
    174  f8b2
    175  f8b2							; Apply offsetX to playerX
    176  f8b2		       a5 a3		      lda	SpiderPos
    177  f8b4		       86 83		      stx	Temp
    178  f8b6		       18		      clc
    179  f8b7		       65 83		      adc	Temp
    180  f8b9		       aa		      tax
    181  f8ba
    182  f8ba							; Apply offsetY to playerY
    183  f8ba		       a5 a4		      lda	SpiderPos+1
    184  f8bc		       84 83		      sty	Temp
    185  f8be		       18		      clc
    186  f8bf		       65 83		      adc	Temp
    187  f8c1		       a8		      tay
    188  f8c2
    189  f8c2		       86 ad		      stx	LinePos
    190  f8c4		       84 ae		      sty	LinePos+1
    191  f8c6		       86 b1		      stx	LineStartPos
    192  f8c8		       84 b2		      sty	LineStartPos+1
    193  f8ca
    194  f8ca				   .line_control_return
    195  f8ca		       60		      rts
    196  f8cb
    197  f8cb				   LineObject
    198  f8cb
    199  f8cb							; Check if line is enabled
    200  f8cb		       24 ac		      bit	LineEnabled
    201  f8cd		       10 42		      bpl	.line_object_return
    202  f8cf
    203  f8cf							; Load position
    204  f8cf		       a6 ad		      ldx	LinePos
    205  f8d1		       a4 ae		      ldy	LinePos+1
    206  f8d3
    207  f8d3				   .line_object_distance
    208  f8d3
    209  f8d3							; Check distance from player with absolute value differences
    210  f8d3
    211  f8d3				   .line_object_distance_x
    212  f8d3		       8a		      txa
    213  f8d4		       18		      clc
    214  f8d5		       e5 b1		      sbc	LineStartPos
    215  f8d7		       b0 04		      bcs	.line_object_distance_x_check
    216  f8d9		       49 ff		      eor	#$FF	; C flag is clear here
    217  f8db		       69 01		      adc	#$01	; form two's complement
    218  f8dd				   .line_object_distance_x_check		; Jumps to if positive
    219  f8dd		       c9 40		      cmp	#LINE_DISTANCE
    220  f8df		       b0 2d		      bcs	.line_object_disable
    221  f8e1
    222  f8e1				   .line_object_distance_y
    223  f8e1		       98		      tya
    224  f8e2		       18		      clc
    225  f8e3		       e5 b2		      sbc	LineStartPos+1
    226  f8e5		       b0 04		      bcs	.line_object_distance_y_check
    227  f8e7		       49 ff		      eor	#$FF	; C flag is clear here
    228  f8e9		       69 01		      adc	#$01	; form two's complement
    229  f8eb				   .line_object_distance_y_check		; Jumps to if positive
    230  f8eb		       c9 40		      cmp	#LINE_DISTANCE
    231  f8ed		       b0 1f		      bcs	.line_object_disable
    232  f8ef
    233  f8ef				   .line_object_boundary
    234  f8ef				   .line_object_boundary_left
    235  f8ef		       e0 04		      cpx	#LINE_VEL_X
    236  f8f1		       90 1b		      bcc	.line_object_disable
    237  f8f3				   .line_object_boundary_right
    238  f8f3		       e0 9c		      cpx	#160-LINE_VEL_X
    239  f8f5		       b0 17		      bcs	.line_object_disable
    240  f8f7				   .line_object_boundary_bottom
    241  f8f7		       c0 04		      cpy	#LINE_VEL_Y
    242  f8f9		       90 13		      bcc	.line_object_disable
    243  f8fb				   .line_object_boundary_top
    244  f8fb		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    245  f8fd		       b0 0f		      bcs	.line_object_disable
    246  f8ff
    247  f8ff				   .line_object_velocity
    248  f8ff
    249  f8ff							; Apply Velocity
    250  f8ff		       8a		      txa
    251  f900		       18		      clc
    252  f901		       65 af		      adc	LineVelocity
    253  f903		       85 ad		      sta	LinePos
    254  f905
    255  f905		       98		      tya
    256  f906		       18		      clc
    257  f907		       65 b0		      adc	LineVelocity+1
    258  f909		       85 ae		      sta	LinePos+1
    259  f90b
    260  f90b		       4c 11 f9 	      jmp	.line_object_return
    261  f90e
    262  f90e				   .line_object_disable
    263  f90e		       20 68 f9 	      jsr	LineDisable
    264  f911
    265  f911				   .line_object_return
    266  f911		       60		      rts
    267  f912
    268  f912				   LineCollision
    269  f912
    270  f912		       a9 78		      lda	#BUG_STUN_LENGTH
    271  f914
    272  f914				   .line_collision_m0
    273  f914		       24 04		      bit	CXM0FB
    274  f916		       50 08		      bvc	.line_collision_m1
    275  f918
    276  f918							; Set stun timer
    277  f918		       85 b6		      sta	BugStunned+0
    278  f91a
    279  f91a							; Disable line
    280  f91a		       20 68 f9 	      jsr	LineDisable
    281  f91d		       4c 29 f9 	      jmp	.line_collision_sample
    282  f920
    283  f920				   .line_collision_m1
    284  f920		       24 05		      bit	CXM1FB
    285  f922		       50 08		      bvc	.line_collision_return
    286  f924
    287  f924							; Set stun timer
    288  f924		       85 b7		      sta	BugStunned+1
    289  f926
    290  f926							; Disable line
    291  f926		       20 68 f9 	      jsr	LineDisable
    292  f929
    293  f929				   .line_collision_sample
    294  f929		       20 8c f9 	      jsr	LineSample
    295  f92c
    296  f92c				   .line_collision_return
    297  f92c		       60		      rts
    298  f92d
    299  f92d				   LinePosition
    300  f92d
    301  f92d							; Set Line Position
    302  f92d		       a2 04		      ldx	#4	; Object (ball)
    303  f92f		       a5 ad		      lda	LinePos	; X Position
    304  f931		       20 00 f0 	      jsr	PosObject
    305  f934
    306  f934		       60		      rts
    307  f935
    308  f935							; Scanline Draw
    309  f935
    310  f935				   LineDrawStart
    311  f935
    312  f935							; Set ball size to be 4 clocks (4/5 bits)
    313  f935		       a5 80		      lda	CtrlPf
    314  f937		       29 cf		      and	#%11001111
    315  f939		       09 20		      ora	#%00100000
    316  f93b		       85 80		      sta	CtrlPf
    317  f93d		       85 0a		      sta	CTRLPF
    318  f93f
    319  f93f							; Determine if we need to use vertical delay (oven line)
    320  f93f		       a5 ae		      lda	LinePos+1
    321  f941		       4a		      lsr
    322  f942		       90 05		      bcc	.line_draw_start_nodelay
    323  f944
    324  f944		       a0 01		      ldy	#1
    325  f946		       4c 4b f9 	      jmp	.line_draw_start_set_delay
    326  f949
    327  f949				   .line_draw_start_nodelay
    328  f949		       a0 00		      ldy	#0
    329  f94b
    330  f94b				   .line_draw_start_set_delay
    331  f94b		       84 27		      sty	VDELBL
    332  f94d
    333  f94d				   .line_draw_start_pos
    334  f94d							; Calculate starting position
    335  f94d		       18		      clc
    336  f94e		       85 b3		      sta	LineDrawPos+0
    337  f950		       69 04		      adc	#LINE_SIZE/2
    338  f952		       85 b4		      sta	LineDrawPos+1
    339  f954
    340  f954		       60		      rts
    341  f955
    342  f955				   LineClean
    343  f955
    344  f955							; Clear out Line
    345  f955		       a9 00		      lda	#0
    346  f957		       85 1f		      sta	ENABL
    347  f959
    348  f959		       60		      rts
    349  f95a
    350  f95a				   LineEnable
    351  f95a		       a9 80		      lda	#%10000000
    352  f95c		       85 ac		      sta	LineEnabled
    353  f95e
    354  f95e		       a5 92		      lda	SampleStep
    355  f960		       c9 00		      cmp	#0
    356  f962		       d0 03		      bne	.line_enable_return
    357  f964
    358  f964		       20 76 f9 	      jsr	LineAudioPlay
    359  f967
    360  f967				   .line_enable_return
    361  f967		       60		      rts
    362  f968
    363  f968				   LineDisable
    364  f968		       a9 00		      lda	#0
    365  f96a		       85 ac		      sta	LineEnabled
    366  f96c
    367  f96c		       a5 92		      lda	SampleStep
    368  f96e		       c9 00		      cmp	#0
    369  f970		       d0 03		      bne	.line_disable_return
    370  f972
    371  f972		       20 83 f9 	      jsr	LineAudioMute
    372  f975
    373  f975				   .line_disable_return
    374  f975		       60		      rts
    375  f976
    376  f976				   LineAudioPlay
    377  f976		       a9 08		      lda	#LINE_AUDIO_C
    378  f978		       85 16		      sta	AUDC1
    379  f97a		       a9 01		      lda	#LINE_AUDIO_F
    380  f97c		       85 18		      sta	AUDF1
    381  f97e		       a9 04		      lda	#LINE_AUDIO_V
    382  f980		       85 1a		      sta	AUDV1
    383  f982		       60		      rts
    384  f983
    385  f983				   LineAudioMute
    386  f983		       a9 00		      lda	#0
    387  f985		       85 1a		      sta	AUDV1
    388  f987		       85 18		      sta	AUDF1
    389  f989		       85 16		      sta	AUDC1
    390  f98b		       60		      rts
    391  f98c
    392  f98c				   LineSample
    393  f98c		       a9 08		      lda	#LINE_SAMPLE_LEN
    394  f98e		       85 92		      sta	SampleStep
    395  f990		       a9 03		      lda	#LINE_SAMPLE_C
    396  f992		       85 16		      sta	AUDC1
    397  f994		       a9 01		      lda	#LINE_SAMPLE_F
    398  f996		       85 18		      sta	AUDF1
    399  f998		       a9 04		      lda	#LINE_SAMPLE_V
    400  f99a		       85 1a		      sta	AUDV1
    401  f99c		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f99d					      include	"objects/bug.asm"
      1  f99d							;======================
      2  f99d							; Bugs (missiles 0 & 1)
      3  f99d							;======================
      4  f99d
      5  f99d							; Constants
      6  f99d
      7  f99d		       00 08	   BUG_SIZE   =	8
      8  f99d		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  f99d		       00 78	   BUG_STUN_LENGTH =	120
     10  f99d		       00 04	   BUG_POINTS =	4
     11  f99d
     12  f99d		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     13  f99d		       00 38	   BUG_COLOR_STUN =	#$38
     14  f99d
     15  f99d		       00 1e	   BUG_SAMPLE_LEN =	30
     16  f99d		       00 03	   BUG_SAMPLE_C =	3
     17  f99d		       00 14	   BUG_SAMPLE_F =	20
     18  f99d		       00 04	   BUG_SAMPLE_V =	4
     19  f99d
     20  f99d		       00 01	   BUG_COL_SAMPLE_LEN =	1
     21  f99d		       00 08	   BUG_COL_SAMPLE_C =	8
     22  f99d		       00 08	   BUG_COL_SAMPLE_F =	8
     23  f99d		       00 03	   BUG_COL_SAMPLE_V =	3
     24  f99d
     25  f99d							; Initialization
     26  f99d
     27  f99d				   BugInit
     28  f99d
     29  f99d							; Initialize Bugs
     30  f99d		       a2 01		      ldx	#1
     31  f99f
     32  f99f				   .bug_init_loop
     33  f99f		       20 a6 f9 	      jsr	BugReset
     34  f9a2
     35  f9a2		       ca		      dex
     36  f9a3		       10 fa		      bpl	.bug_init_loop
     37  f9a5
     38  f9a5		       60		      rts
     39  f9a6
     40  f9a6				   BugReset		; x = bug (0 or 1)
     41  f9a6
     42  f9a6							; Set random position
     43  f9a6		       20 13 f0 	      jsr	Random
     44  f9a9
     45  f9a9		       a5 86		      lda	Rand8
     46  f9ab		       29 7f		      and	#$7f
     47  f9ad		       95 b8		      sta	BugPosX,x
     48  f9af
     49  f9af		       a5 87		      lda	Rand16
     50  f9b1		       29 7f		      and	#$7f
     51  f9b3		       95 ba		      sta	BugPosY,x
     52  f9b5
     53  f9b5							; Set as active
     54  f9b5		       a9 00		      lda	#0
     55  f9b7		       95 b6		      sta	BugStunned,x
     56  f9b9
     57  f9b9							; Reset Color
     58  f9b9		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     59  f9bb		       95 bc		      sta	BugColor,x
     60  f9bd
     61  f9bd		       60		      rts
     62  f9be
     63  f9be							; Frame Update
     64  f9be
     65  f9be				   BugUpdate
     66  f9be
     67  f9be		       a2 01		      ldx	#1
     68  f9c0				   .bug_update_loop
     69  f9c0		       86 83		      stx	Temp+0
     70  f9c2
     71  f9c2		       b5 b6		      lda	BugStunned,x
     72  f9c4		       c9 00		      cmp	#0
     73  f9c6		       f0 08		      beq	.bug_update_active
     74  f9c8
     75  f9c8				   .bug_update_stunned
     76  f9c8		       d6 b6		      dec	BugStunned,x
     77  f9ca		       20 55 fa 	      jsr	BugStunCollision
     78  f9cd		       4c d6 f9 	      jmp	.bug_update_next
     79  f9d0
     80  f9d0				   .bug_update_active
     81  f9d0		       20 dc f9 	      jsr	BugMovement
     82  f9d3		       20 3b fa 	      jsr	BugCollision
     83  f9d6
     84  f9d6				   .bug_update_next
     85  f9d6		       a6 83		      ldx	Temp+0
     86  f9d8		       ca		      dex
     87  f9d9		       10 e5		      bpl	.bug_update_loop
     88  f9db
     89  f9db		       60		      rts
     90  f9dc
     91  f9dc				   BugMovement
     92  f9dc
     93  f9dc				   .bug_movement_random
     94  f9dc		       20 13 f0 	      jsr	Random
     95  f9df		       29 03		      and	#%00000011
     96  f9e1		       85 84		      sta	Temp+1
     97  f9e3
     98  f9e3				   .bug_movement_load
     99  f9e3		       a6 83		      ldx	Temp+0
    100  f9e5
    101  f9e5				   .bug_movement_x
    102  f9e5		       a4 b5		      ldy	BugSpeed
    103  f9e7
    104  f9e7							; Alter X Position
    105  f9e7		       a5 84		      lda	Temp+1
    106  f9e9		       29 01		      and	#%00000001
    107  f9eb
    108  f9eb				   .bug_movement_x_check
    109  f9eb		       c9 01		      cmp	#1
    110  f9ed		       d0 08		      bne	.bug_movement_x_right
    111  f9ef
    112  f9ef				   .bug_movement_x_left
    113  f9ef		       d6 b8		      dec	BugPosX,x
    114  f9f1		       88		      dey
    115  f9f2		       d0 fb		      bne	.bug_movement_x_left
    116  f9f4
    117  f9f4		       4c fc f9 	      jmp	.bug_movement_y
    118  f9f7
    119  f9f7				   .bug_movement_x_right
    120  f9f7		       f6 b8		      inc	BugPosX,x
    121  f9f9		       88		      dey
    122  f9fa		       d0 fb		      bne	.bug_movement_x_right
    123  f9fc
    124  f9fc				   .bug_movement_y
    125  f9fc		       a4 b5		      ldy	BugSpeed
    126  f9fe
    127  f9fe							; Alter Y Position
    128  f9fe		       a5 84		      lda	Temp+1
    129  fa00		       29 02		      and	#%00000010
    130  fa02		       4a		      lsr
    131  fa03
    132  fa03				   .bug_movement_y_check
    133  fa03		       c9 01		      cmp	#1
    134  fa05		       d0 08		      bne	.bug_movement_y_down
    135  fa07
    136  fa07				   .bug_movement_y_up
    137  fa07		       f6 ba		      inc	BugPosY,x
    138  fa09		       88		      dey
    139  fa0a		       d0 fb		      bne	.bug_movement_y_up
    140  fa0c
    141  fa0c		       4c 14 fa 	      jmp	.bug_movement_boundary
    142  fa0f
    143  fa0f				   .bug_movement_y_down
    144  fa0f		       d6 ba		      dec	BugPosY,x
    145  fa11		       88		      dey
    146  fa12		       d0 fb		      bne	.bug_movement_y_down
    147  fa14
    148  fa14				   .bug_movement_boundary
    149  fa14		       b5 b8		      lda	BugPosX,x
    150  fa16		       b4 ba		      ldy	BugPosY,x
    151  fa18
    152  fa18				   .bug_movement_boundary_left
    153  fa18		       c9 18		      cmp	#BUG_BOUNDARY
    154  fa1a		       b0 05		      bcs	.bug_movement_boundary_right
    155  fa1c		       a9 18		      lda	#BUG_BOUNDARY
    156  fa1e		       4c 27 fa 	      jmp	.bug_movement_boundary_top
    157  fa21
    158  fa21				   .bug_movement_boundary_right
    159  fa21		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    160  fa23		       90 02		      bcc	.bug_movement_boundary_top
    161  fa25		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    162  fa27
    163  fa27				   .bug_movement_boundary_top
    164  fa27		       c0 18		      cpy	#BUG_BOUNDARY
    165  fa29		       b0 05		      bcs	.bug_movement_boundary_bottom
    166  fa2b		       a0 18		      ldy	#BUG_BOUNDARY
    167  fa2d		       4c 36 fa 	      jmp	.bug_movement_store
    168  fa30
    169  fa30				   .bug_movement_boundary_bottom
    170  fa30		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    171  fa32		       90 02		      bcc	.bug_movement_store
    172  fa34		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    173  fa36
    174  fa36				   .bug_movement_store
    175  fa36		       95 b8		      sta	BugPosX,x
    176  fa38		       94 ba		      sty	BugPosY,x
    177  fa3a
    178  fa3a				   .bug_movement_return
    179  fa3a		       60		      rts
    180  fa3b
    181  fa3b				   BugCollision
    182  fa3b
    183  fa3b		       e0 01		      cpx	#1
    184  fa3d		       f0 05		      beq	.bug_collision_m1
    185  fa3f
    186  fa3f				   .bug_collision_m0
    187  fa3f							; Collision for M0 (V set)
    188  fa3f		       24 00		      bit	CXM0P
    189  fa41		       70 06		      bvs	.bug_collision_active
    190  fa43		       60		      rts
    191  fa44
    192  fa44				   .bug_collision_m1
    193  fa44							; Collision for M1 (N set)
    194  fa44		       24 01		      bit	CXM1P
    195  fa46		       30 01		      bmi	.bug_collision_active
    196  fa48		       60		      rts
    197  fa49
    198  fa49				   .bug_collision_active
    199  fa49
    200  fa49							; Reduce players score
    201  fa49		       a5 93		      lda	ScoreValue
    202  fa4b		       c9 00		      cmp	#0
    203  fa4d		       f0 02		      beq	.bug_collision_score_skip
    204  fa4f		       c6 93		      dec	ScoreValue
    205  fa51				   .bug_collision_score_skip
    206  fa51
    207  fa51							; Play sound
    208  fa51		       20 b5 fa 	      jsr	BugColSample
    209  fa54
    210  fa54		       60		      rts
    211  fa55
    212  fa55				   BugStunCollision
    213  fa55
    214  fa55		       e0 01		      cpx	#1
    215  fa57		       f0 05		      beq	.bug_stun_collision_m1
    216  fa59
    217  fa59				   .bug_stun_collision_m0
    218  fa59							; Collision for M0 (V set)
    219  fa59		       24 00		      bit	CXM0P
    220  fa5b		       70 06		      bvs	.bug_stun_collision_active
    221  fa5d		       60		      rts
    222  fa5e
    223  fa5e				   .bug_stun_collision_m1
    224  fa5e							; Collision for M1 (N set)
    225  fa5e		       24 01		      bit	CXM1P
    226  fa60		       30 01		      bmi	.bug_stun_collision_active
    227  fa62		       60		      rts
    228  fa63
    229  fa63				   .bug_stun_collision_active
    230  fa63							; Add points to score
    231  fa63		       18		      clc
    232  fa64		       a5 94		      lda	ScoreValue+1
    233  fa66		       69 04		      adc	#BUG_POINTS
    234  fa68		       85 94		      sta	ScoreValue+1
    235  fa6a
    236  fa6a							; Reset bug
    237  fa6a		       20 a6 f9 	      jsr	BugReset
    238  fa6d
    239  fa6d							; Play sample
    240  fa6d		       20 a4 fa 	      jsr	BugSample
    241  fa70
    242  fa70		       60		      rts
    243  fa71
    244  fa71							; Horizontal Positioning
    245  fa71
    246  fa71				   BugPosition
    247  fa71
    248  fa71		       a2 02		      ldx	#2
    249  fa73		       a5 b8		      lda	BugPosX+0
    250  fa75		       20 00 f0 	      jsr	PosObject
    251  fa78
    252  fa78		       a2 03		      ldx	#3
    253  fa7a		       a5 b9		      lda	BugPosX+1
    254  fa7c		       20 00 f0 	      jsr	PosObject
    255  fa7f
    256  fa7f		       60		      rts
    257  fa80
    258  fa80							; Scanline Draw
    259  fa80
    260  fa80				   BugDrawStart
    261  fa80
    262  fa80		       a0 01		      ldy	#1
    263  fa82				   .bug_draw_start_loop
    264  fa82
    265  fa82							; Set missile 0 & 1 to be 8 clock size
    266  fa82		       b9 81 00 	      lda	NuSiz0,y
    267  fa85		       09 30		      ora	#%00110000
    268  fa87		       99 81 00 	      sta	NuSiz0,y
    269  fa8a		       99 04 00 	      sta	NUSIZ0,y
    270  fa8d
    271  fa8d							; Setup half scanline positions
    272  fa8d		       b9 ba 00 	      lda	BugPosY,y
    273  fa90		       4a		      lsr
    274  fa91		       99 be 00 	      sta	BugDrawPosBottom,y
    275  fa94
    276  fa94		       69 04		      adc	#BUG_SIZE/2
    277  fa96		       99 c0 00 	      sta	BugDrawPosTop,y
    278  fa99
    279  fa99		       88		      dey
    280  fa9a		       10 e6		      bpl	.bug_draw_start_loop
    281  fa9c
    282  fa9c		       60		      rts
    283  fa9d
    284  fa9d				   BugClean
    285  fa9d		       a9 00		      lda	#0
    286  fa9f		       85 1d		      sta	ENAM0
    287  faa1		       85 1e		      sta	ENAM1
    288  faa3		       60		      rts
    289  faa4
    290  faa4				   BugSample
    291  faa4		       a9 1e		      lda	#BUG_SAMPLE_LEN
    292  faa6		       85 92		      sta	SampleStep
    293  faa8		       a9 03		      lda	#BUG_SAMPLE_C
    294  faaa		       85 16		      sta	AUDC1
    295  faac		       a9 14		      lda	#BUG_SAMPLE_F
    296  faae		       85 18		      sta	AUDF1
    297  fab0		       a9 04		      lda	#BUG_SAMPLE_V
    298  fab2		       85 1a		      sta	AUDV1
    299  fab4		       60		      rts
    300  fab5
    301  fab5				   BugColSample
    302  fab5		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    303  fab7		       85 92		      sta	SampleStep
    304  fab9		       a9 08		      lda	#BUG_COL_SAMPLE_C
    305  fabb		       85 16		      sta	AUDC1
    306  fabd		       a9 08		      lda	#BUG_COL_SAMPLE_F
    307  fabf		       85 18		      sta	AUDF1
    308  fac1		       a9 03		      lda	#BUG_COL_SAMPLE_V
    309  fac3		       85 1a		      sta	AUDV1
    310  fac5		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fac6					      include	"objects/swatter.asm"
      1  fac6							;==================
      2  fac6							; Swatter (player1)
      3  fac6							;==================
      4  fac6
      5  fac6							; Constants
      6  fac6
      7  fac6		       00 30	   SWATTER_COLOR =	#$30
      8  fac6		       00 36	   SWATTER_HOLD_COLOR =	#$36
      9  fac6		       00 14	   SWATTER_SPRITE_SIZE =	#20
     10  fac6		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     11  fac6
     12  fac6		       00 3c	   SWATTER_HOLD_TIME =	60
     13  fac6		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     14  fac6
     15  fac6		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     16  fac6		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     17  fac6		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     18  fac6
     19  fac6		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     20  fac6		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     21  fac6		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     22  fac6		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     23  fac6		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     24  fac6
     25  fac6		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     26  fac6		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     27  fac6		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     28  fac6		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     29  fac6
     30  fac6		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     31  fac6		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     32  fac6		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     33  fac6		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     34  fac6
     35  fac6							; Initialization
     36  fac6
     37  fac6				   SwatterInit
     38  fac6
     39  fac6		       20 8b fb 	      jsr	SwatterReset
     40  fac9
     41  fac9		       60		      rts
     42  faca
     43  faca							; Frame Update
     44  faca
     45  faca				   SwatterUpdate
     46  faca
     47  faca				   .swatter_update_color
     48  faca		       a5 c4		      lda	SwatterState
     49  facc		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     50  face		       d0 05		      bne	.swatter_update_color_hold
     51  fad0				   .swatter_update_color_active
     52  fad0		       a9 30		      lda	#SWATTER_COLOR
     53  fad2		       4c d7 fa 	      jmp	.swatter_update_color_set
     54  fad5				   .swatter_update_color_hold
     55  fad5		       a9 36		      lda	#SWATTER_HOLD_COLOR
     56  fad7				   .swatter_update_color_set
     57  fad7		       85 c5		      sta	SwatterColor
     58  fad9
     59  fad9				   .swatter_update_hold_sample
     60  fad9		       a4 c4		      ldy	SwatterState
     61  fadb		       c0 80		      cpy	#SWATTER_STATE_HOLD
     62  fadd		       d0 0f		      bne	.swatter_update_state
     63  fadf
     64  fadf		       c6 cb		      dec	SwatterSampleCount
     65  fae1		       d0 0b		      bne	.swatter_update_state
     66  fae3
     67  fae3		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     68  fae5		       85 cb		      sta	SwatterSampleCount
     69  fae7
     70  fae7		       c6 cc		      dec	SwatterSampleF
     71  fae9		       a4 cc		      ldy	SwatterSampleF
     72  faeb		       20 ab fb 	      jsr	SwatterHoldSample
     73  faee
     74  faee				   .swatter_update_state
     75  faee		       a6 90		      ldx	FrameTimer+1
     76  faf0		       e0 00		      cpx	#0
     77  faf2		       d0 2d		      bne	.swatter_update_collision
     78  faf4
     79  faf4		       a4 c4		      ldy	SwatterState
     80  faf6		       c0 00		      cpy	#SWATTER_STATE_WAIT
     81  faf8		       f0 0a		      beq	.swatter_update_state_wait
     82  fafa
     83  fafa		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fafc		       f0 18		      beq	.swatter_update_state_hold
     85  fafe
     86  fafe							; Else we're at the end of the active state
     87  fafe		       20 8b fb 	      jsr	SwatterReset
     88  fb01		       4c 30 fb 	      jmp	.swatter_update_return
     89  fb04
     90  fb04				   .swatter_update_state_wait
     91  fb04		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
     92  fb06		       84 cc		      sty	SwatterSampleF
     93  fb08		       20 ab fb 	      jsr	SwatterHoldSample
     94  fb0b
     95  fb0b		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     96  fb0d		       85 cb		      sta	SwatterSampleCount
     97  fb0f
     98  fb0f		       a9 80		      lda	#SWATTER_STATE_HOLD
     99  fb11		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    100  fb13		       4c 1d fb 	      jmp	.swatter_update_state_set
    101  fb16
    102  fb16				   .swatter_update_state_hold
    103  fb16		       20 ba fb 	      jsr	SwatterActiveSample
    104  fb19
    105  fb19		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    106  fb1b		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    107  fb1d
    108  fb1d				   .swatter_update_state_set
    109  fb1d		       85 c4		      sta	SwatterState
    110  fb1f		       86 90		      stx	FrameTimer+1
    111  fb21
    112  fb21				   .swatter_update_collision
    113  fb21							; Check 1 frame after active
    114  fb21		       a5 c4		      lda	SwatterState
    115  fb23		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    116  fb25		       d0 09		      bne	.swatter_update_return
    117  fb27		       a6 90		      ldx	FrameTimer+1
    118  fb29		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    119  fb2b		       d0 03		      bne	.swatter_update_return
    120  fb2d
    121  fb2d		       20 31 fb 	      jsr	SwatterCollision
    122  fb30
    123  fb30				   .swatter_update_return
    124  fb30		       60		      rts
    125  fb31
    126  fb31				   SwatterCollision
    127  fb31		       24 00		      bit	CXM0P
    128  fb33		       30 09		      bmi	.swatter_collision_m0
    129  fb35
    130  fb35		       24 01		      bit	CXM1P
    131  fb37		       70 0a		      bvs	.swatter_collision_m1
    132  fb39
    133  fb39		       24 07		      bit	CXPPMM
    134  fb3b		       30 0e		      bmi	.swatter_collision_p0
    135  fb3d
    136  fb3d		       60		      rts
    137  fb3e
    138  fb3e				   .swatter_collision_m0
    139  fb3e		       a2 00		      ldx	#0
    140  fb40		       4c 45 fb 	      jmp	.swatter_collision_bug_reset
    141  fb43
    142  fb43				   .swatter_collision_m1
    143  fb43		       a2 01		      ldx	#1
    144  fb45
    145  fb45				   .swatter_collision_bug_reset
    146  fb45		       20 a6 f9 	      jsr	BugReset
    147  fb48		       4c 5d fb 	      jmp	.swatter_collision_active
    148  fb4b
    149  fb4b				   .swatter_collision_p0
    150  fb4b
    151  fb4b		       a5 93		      lda	ScoreValue
    152  fb4d		       c5 c7		      cmp	SwatterHitDamage
    153  fb4f		       90 08		      bcc	.swatter_collision_p0_zero
    154  fb51		       f0 06		      beq	.swatter_collision_p0_zero
    155  fb53
    156  fb53		       18		      clc
    157  fb54		       e5 c7		      sbc	SwatterHitDamage
    158  fb56		       4c 5b fb 	      jmp	.swatter_collision_p0_set
    159  fb59
    160  fb59				   .swatter_collision_p0_zero
    161  fb59		       a9 00		      lda	#0
    162  fb5b
    163  fb5b				   .swatter_collision_p0_set
    164  fb5b		       85 93		      sta	ScoreValue
    165  fb5d
    166  fb5d				   .swatter_collision_active
    167  fb5d		       20 cb fb 	      jsr	SwatterHitSample
    168  fb60
    169  fb60		       60		      rts
    170  fb61
    171  fb61				   SwatterPosition
    172  fb61
    173  fb61							; Set Position
    174  fb61		       a2 01		      ldx	#1	; Object (player1)
    175  fb63		       a5 c2		      lda	SwatterPos	; X Position
    176  fb65		       20 00 f0 	      jsr	PosObject
    177  fb68
    178  fb68		       60		      rts
    179  fb69
    180  fb69							; Scanline Draw
    181  fb69
    182  fb69				   SwatterDrawStart
    183  fb69
    184  fb69							; Set player 1 to be quad size
    185  fb69		       a5 82		      lda	NuSiz1
    186  fb6b		       29 f8		      and	#%11111000
    187  fb6d		       09 07		      ora	#%00000111
    188  fb6f		       85 82		      sta	NuSiz1
    189  fb71		       85 05		      sta	NUSIZ1
    190  fb73
    191  fb73							; Set sprite color
    192  fb73		       a5 c5		      lda	SwatterColor
    193  fb75		       85 07		      sta	COLUP1
    194  fb77
    195  fb77							; Note: Doesn't need vertical delay
    196  fb77
    197  fb77							; Calculate starting position
    198  fb77		       a5 c3		      lda	SwatterPos+1	; Y Position
    199  fb79		       4a		      lsr
    200  fb7a		       18		      clc
    201  fb7b		       69 14		      adc	#SWATTER_SPRITE_SIZE
    202  fb7d		       85 c9		      sta	SwatterDrawPos
    203  fb7f
    204  fb7f							; Initialize sprite index
    205  fb7f		       a9 00		      lda	#0
    206  fb81		       85 c8		      sta	SwatterIndex
    207  fb83		       85 ca		      sta	SwatterLine
    208  fb85
    209  fb85		       60		      rts
    210  fb86
    211  fb86				   SwatterClean
    212  fb86
    213  fb86							; Clear out Player1 sprite
    214  fb86		       a9 00		      lda	#0
    215  fb88		       85 1c		      sta	GRP1
    216  fb8a
    217  fb8a		       60		      rts
    218  fb8b
    219  fb8b				   SwatterReset
    220  fb8b							; Initialize Swatter State
    221  fb8b		       a9 00		      lda	#SWATTER_STATE_WAIT
    222  fb8d		       85 c4		      sta	SwatterState
    223  fb8f
    224  fb8f							; Set Wait Timer
    225  fb8f		       20 13 f0 	      jsr	Random
    226  fb92		       a5 86		      lda	Rand8
    227  fb94		       29 3f		      and	#$3f
    228  fb96		       18		      clc
    229  fb97		       65 c6		      adc	SwatterWaitTime
    230  fb99		       85 90		      sta	FrameTimer+1
    231  fb9b
    232  fb9b							; Set Random Position
    233  fb9b		       20 13 f0 	      jsr	Random
    234  fb9e		       a5 86		      lda	Rand8	; X Position
    235  fba0		       29 7f		      and	#$7f
    236  fba2		       85 c2		      sta	SwatterPos+0
    237  fba4		       a5 87		      lda	Rand16	; Y Position
    238  fba6		       29 7e		      and	#$7e	; Ensure that Y position is even
    239  fba8		       85 c3		      sta	SwatterPos+1
    240  fbaa
    241  fbaa		       60		      rts
    242  fbab
    243  fbab				   SwatterHoldSample
    244  fbab		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    245  fbad		       85 92		      sta	SampleStep
    246  fbaf		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    247  fbb1		       85 16		      sta	AUDC1
    248  fbb3		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    249  fbb5		       85 1a		      sta	AUDV1
    250  fbb7
    251  fbb7		       84 18		      sty	AUDF1	; Store value of y as frequency
    252  fbb9
    253  fbb9		       60		      rts
    254  fbba
    255  fbba				   SwatterActiveSample
    256  fbba		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    257  fbbc		       85 92		      sta	SampleStep
    258  fbbe		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    259  fbc0		       85 16		      sta	AUDC1
    260  fbc2		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    261  fbc4		       85 18		      sta	AUDF1
    262  fbc6		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    263  fbc8		       85 1a		      sta	AUDV1
    264  fbca		       60		      rts
    265  fbcb
    266  fbcb				   SwatterHitSample
    267  fbcb		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    268  fbcd		       85 92		      sta	SampleStep
    269  fbcf		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    270  fbd1		       85 16		      sta	AUDC1
    271  fbd3		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    272  fbd5		       85 18		      sta	AUDF1
    273  fbd7		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    274  fbd9		       85 1a		      sta	AUDV1
    275  fbdb		       60		      rts
------- FILE game.asm
     22  fbdc
     23  fbdc							; Initialization
     24  fbdc
     25  fbdc				   GameInit
     26  fbdc
     27  fbdc							; Setup logic and kernel
      0  fbdc					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fbdc				   .POINTER   SET	VBlankPtr
      2  fbdc				   .ADDRESS   SET	GameVerticalBlank
      3  fbdc
      4  fbdc		       a9 2d		      LDA	#<.ADDRESS
      5  fbde		       85 88		      STA	.POINTER
      6  fbe0		       a9 fc		      LDA	#>.ADDRESS
      7  fbe2		       85 89		      STA	.POINTER+1
      8  fbe4
      0  fbe4					      SET_POINTER	KernelPtr, GameKernel
      1  fbe4				   .POINTER   SET	KernelPtr
      2  fbe4				   .ADDRESS   SET	GameKernel
      3  fbe4
      4  fbe4		       a9 b3		      LDA	#<.ADDRESS
      5  fbe6		       85 8a		      STA	.POINTER
      6  fbe8		       a9 fc		      LDA	#>.ADDRESS
      7  fbea		       85 8b		      STA	.POINTER+1
      8  fbec
      0  fbec					      SET_POINTER	OverScanPtr, GameOverScan
      1  fbec				   .POINTER   SET	OverScanPtr
      2  fbec				   .ADDRESS   SET	GameOverScan
      3  fbec
      4  fbec		       a9 57		      LDA	#<.ADDRESS
      5  fbee		       85 8c		      STA	.POINTER
      6  fbf0		       a9 fc		      LDA	#>.ADDRESS
      7  fbf2		       85 8d		      STA	.POINTER+1
      8  fbf4
     31  fbf4
     32  fbf4							; Mute Audio
     33  fbf4		       a9 00		      lda	#0
     34  fbf6		       85 15		      sta	AUDC0
     35  fbf8		       85 19		      sta	AUDV0
     36  fbfa		       85 17		      sta	AUDF0
     37  fbfc		       85 16		      sta	AUDC1
     38  fbfe		       85 1a		      sta	AUDV1
     39  fc00		       85 18		      sta	AUDF1
     40  fc02		       85 92		      sta	SampleStep
     41  fc04
     42  fc04							; Load Audio Settings
     43  fc04		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fc06		       85 19		      sta	AUDV0
     45  fc08
     46  fc08							; Make it so that we play the first note immediately
     47  fc08		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fc0a		       85 91		      sta	AudioStep
     49  fc0c		       a9 02		      lda	#2
     50  fc0e		       85 8f		      sta	FrameTimer
     51  fc10
     52  fc10							; Reset NuSiz
     53  fc10		       a9 00		      lda	#0
     54  fc12		       85 81		      sta	NuSiz0
     55  fc14		       85 04		      sta	NUSIZ0
     56  fc16		       85 82		      sta	NuSiz1
     57  fc18		       85 05		      sta	NUSIZ1
     58  fc1a
     59  fc1a							; Initialize Objects
     60  fc1a		       20 b9 f4 	      jsr	LevelInit
     61  fc1d		       20 17 f5 	      jsr	ScoreInit
     62  fc20		       20 a3 f6 	      jsr	SpiderInit
     63  fc23		       20 f4 f7 	      jsr	LineInit
     64  fc26		       20 9d f9 	      jsr	BugInit
     65  fc29		       20 c6 fa 	      jsr	SwatterInit
     66  fc2c
     67  fc2c		       60		      rts
     68  fc2d
     69  fc2d				   GameVerticalBlank
     70  fc2d
     71  fc2d							; Refresh random values
     72  fc2d		       20 13 f0 	      jsr	Random
     73  fc30
     74  fc30							; Update Objects
     75  fc30		       20 ca f4 	      jsr	LevelUpdate
     76  fc33		       20 b4 f6 	      jsr	SpiderUpdate
     77  fc36		       20 09 f8 	      jsr	LineUpdate
     78  fc39		       20 be f9 	      jsr	BugUpdate
     79  fc3c		       20 ca fa 	      jsr	SwatterUpdate
     80  fc3f		       20 20 f5 	      jsr	ScoreUpdate
     81  fc42
     82  fc42							; Reset Collisions
     83  fc42		       85 2c		      sta	CXCLR
     84  fc44
     85  fc44							; Clear horizontal movement
     86  fc44		       85 2b		      sta	HMCLR
     87  fc46
     88  fc46							; Update Positions
     89  fc46		       20 bf f7 	      jsr	SpiderPosition
     90  fc49		       20 2d f9 	      jsr	LinePosition
     91  fc4c		       20 71 fa 	      jsr	BugPosition
     92  fc4f		       20 61 fb 	      jsr	SwatterPosition
     93  fc52
     94  fc52							; Set final x positions
     95  fc52		       85 02		      sta	WSYNC
     96  fc54		       85 2a		      sta	HMOVE
     97  fc56
     98  fc56		       60		      rts
     99  fc57
    100  fc57				   GameOverScan
    101  fc57
    102  fc57							; Audio Routines
    103  fc57		       20 75 fc 	      jsr	GameAudio
    104  fc5a		       20 61 fc 	      jsr	GameSample
    105  fc5d
    106  fc5d							; State Routines
    107  fc5d		       20 a9 fc 	      jsr	GameDeath
    108  fc60
    109  fc60		       60		      rts
    110  fc61
    111  fc61				   GameSample
    112  fc61
    113  fc61		       a6 92		      ldx	SampleStep
    114  fc63		       e0 00		      cpx	#0
    115  fc65		       f0 0b		      beq	.game_sample_return
    116  fc67
    117  fc67		       ca		      dex
    118  fc68		       d0 08		      bne	.game_sample_return
    119  fc6a
    120  fc6a				   .game_sample_mute
    121  fc6a		       a9 00		      lda	#0
    122  fc6c		       85 1a		      sta	AUDV1
    123  fc6e		       85 18		      sta	AUDF1
    124  fc70		       85 16		      sta	AUDC1
    125  fc72
    126  fc72				   .game_sample_return
    127  fc72		       86 92		      stx	SampleStep
    128  fc74		       60		      rts
    129  fc75
    130  fc75				   GameAudio
    131  fc75
    132  fc75		       a6 8f		      ldx	FrameTimer
    133  fc77		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    134  fc79		       f0 25		      beq	.game_audio_mute_note
    135  fc7b		       e0 00		      cpx	#0
    136  fc7d		       d0 29		      bne	.game_audio_return
    137  fc7f
    138  fc7f							; Reset Timer
    139  fc7f		       a2 09		      ldx	#GAME_AUDIO_STEP
    140  fc81		       86 8f		      stx	FrameTimer
    141  fc83
    142  fc83				   .game_audio_play
    143  fc83
    144  fc83							; Increment melody position
    145  fc83		       a4 91		      ldy	AudioStep
    146  fc85		       c8		      iny
    147  fc86
    148  fc86		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    149  fc88		       d0 02		      bne	.game_audio_play_note
    150  fc8a
    151  fc8a							; Loop our audio step
    152  fc8a		       a0 00		      ldy	#0
    153  fc8c
    154  fc8c				   .game_audio_play_note
    155  fc8c
    156  fc8c							; Save current position
    157  fc8c		       84 91		      sty	AudioStep
    158  fc8e
    159  fc8e							; Melody Line
    160  fc8e		       b9 58 fe 	      lda	GameAudio0,y
    161  fc91		       c9 ff		      cmp	#$FF
    162  fc93		       f0 0b		      beq	.game_audio_mute_note
    163  fc95		       85 17		      sta	AUDF0
    164  fc97		       a9 06		      lda	#GAME_AUDIO_TONE
    165  fc99		       85 15		      sta	AUDC0
    166  fc9b		       a9 02		      lda	#GAME_AUDIO_VOLUME
    167  fc9d		       85 19		      sta	AUDV0
    168  fc9f
    169  fc9f		       60		      rts
    170  fca0
    171  fca0				   .game_audio_mute_note
    172  fca0
    173  fca0		       a9 00		      lda	#0
    174  fca2		       85 17		      sta	AUDF0
    175  fca4		       85 15		      sta	AUDC0
    176  fca6		       85 19		      sta	AUDV0
    177  fca8
    178  fca8				   .game_audio_return
    179  fca8		       60		      rts
    180  fca9
    181  fca9				   GameDeath
    182  fca9		       a5 93		      lda	ScoreValue+0
    183  fcab		       c9 00		      cmp	#0
    184  fcad		       d0 03		      bne	.game_death_return
    185  fcaf
    186  fcaf							; Show Game Over Screen
    187  fcaf		       20 78 fe 	      jsr	OverInit
    188  fcb2
    189  fcb2				   .game_death_return
    190  fcb2		       60		      rts
    191  fcb3
    192  fcb3				   GameKernel
    193  fcb3
    194  fcb3							; Turn on display
    195  fcb3		       a9 00		      lda	#0
    196  fcb5		       85 01		      sta	VBLANK
    197  fcb7
    198  fcb7				   .game_kernel_score
    199  fcb7
    200  fcb7							; Draw Score on top first
    201  fcb7		       20 92 f5 	      jsr	ScoreDraw
    202  fcba
    203  fcba				   .game_kernel_objects_start
    204  fcba
    205  fcba							; Setup Drawing Objects
    206  fcba		       20 83 f6 	      jsr	WebDrawStart
    207  fcbd		       20 c7 f7 	      jsr	SpiderDrawStart
    208  fcc0		       20 69 fb 	      jsr	SwatterDrawStart
    209  fcc3		       20 35 f9 	      jsr	LineDrawStart
    210  fcc6		       20 80 fa 	      jsr	BugDrawStart
    211  fcc9
    212  fcc9							; Start Scanline Counter
    213  fcc9		       a2 a8		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    214  fccb							; The extra 5 is for processing overflow
    215  fccb
    216  fccb							; Half scanline counter in Temp+1
    217  fccb		       a9 56		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    218  fccd		       85 84		      sta	Temp+1
    219  fccf
    220  fccf							; Load background color
    221  fccf		       a5 9f		      lda	WebColor+0
    222  fcd1		       85 09		      sta	COLUBK
    223  fcd3
    224  fcd3				   .game_kernel_objects
    225  fcd3
    226  fcd3		       85 02		      sta	WSYNC
    227  fcd5
    228  fcd5				   .game_kernel_web
    229  fcd5
    230  fcd5							; Web
    231  fcd5		       a4 9e		      ldy	WebIndex
    232  fcd7
    233  fcd7							; Load Image
    234  fcd7		       b9 3e f1 	      lda	WebImagePF0,y
    235  fcda		       85 0d		      sta	PF0
    236  fcdc		       b9 5c f1 	      lda	WebImagePF1,y
    237  fcdf		       85 0e		      sta	PF1
    238  fce1		       b9 7a f1 	      lda	WebImagePF2,y
    239  fce4		       85 0f		      sta	PF2
    240  fce6
    241  fce6		       e6 9e		      inc	WebIndex
    242  fce8
    243  fce8				   .game_kernel_line_1
    244  fce8							; Line (1st time)
    245  fce8
    246  fce8		       24 ac		      bit	LineEnabled
    247  fcea		       10 10		      bpl	.game_kernel_line_1_skip
    248  fcec
    249  fcec							; Load half-line
    250  fcec		       a5 84		      lda	Temp+1
    251  fcee
    252  fcee		       a0 00		      ldy	#%00000000
    253  fcf0
    254  fcf0							; Top
    255  fcf0		       c5 b4		      cmp	LineDrawPos+1
    256  fcf2		       b0 06		      bcs	.game_kernel_line_1_off
    257  fcf4
    258  fcf4							; Bottom
    259  fcf4		       c5 b3		      cmp	LineDrawPos+0
    260  fcf6		       90 02		      bcc	.game_kernel_line_1_off
    261  fcf8
    262  fcf8				   .game_kernel_line_1_on
    263  fcf8		       a0 02		      ldy	#%00000010
    264  fcfa
    265  fcfa				   .game_kernel_line_1_off
    266  fcfa		       84 1f		      sty	ENABL
    267  fcfc
    268  fcfc				   .game_kernel_line_1_skip
    269  fcfc
    270  fcfc		       ca		      dex
    271  fcfd		       85 02		      sta	WSYNC
    272  fcff
    273  fcff				   .game_kernel_spider_1
    274  fcff							; Spider (1st time)
    275  fcff
    276  fcff		       a4 a7		      ldy	SpiderIndex
    277  fd01		       30 1a		      bmi	.game_kernel_spider_1_load	; At end of sprite
    278  fd03		       d0 06		      bne	.game_kernel_spider_1_draw	; Currently drawing (not zero)
    279  fd05
    280  fd05							; Check y position to see if we should start
    281  fd05		       a5 84		      lda	Temp+1	; Use half scanline
    282  fd07		       e5 a8		      sbc	SpiderDrawPos
    283  fd09		       10 12		      bpl	.game_kernel_spider_1_load
    284  fd0b
    285  fd0b				   .game_kernel_spider_1_draw
    286  fd0b		       b1 a1		      lda	(SpiderPtr),y
    287  fd0d		       85 a9		      sta	SpiderLine
    288  fd0f
    289  fd0f							; Increment sprite index
    290  fd0f		       e6 a7		      inc	SpiderIndex
    291  fd11
    292  fd11							; See if we're at the end
    293  fd11		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    294  fd13		       d0 0a		      bne	.game_kernel_spider_1_line
    295  fd15		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    296  fd17		       84 a7		      sty	SpiderIndex
    297  fd19		       a9 00		      lda	#0
    298  fd1b		       85 a9		      sta	SpiderLine
    299  fd1d
    300  fd1d				   .game_kernel_spider_1_load
    301  fd1d		       a5 a9		      lda	SpiderLine
    302  fd1f				   .game_kernel_spider_1_line
    303  fd1f		       85 1b		      sta	GRP0
    304  fd21
    305  fd21				   .game_kernel_swatter_1
    306  fd21							; Swatter (1st time)
    307  fd21
    308  fd21							; Check if wait state
    309  fd21		       24 c4		      bit	SwatterState
    310  fd23		       10 1b		      bpl	.game_kernel_swatter_1_load
    311  fd25
    312  fd25		       a4 c8		      ldy	SwatterIndex
    313  fd27		       30 17		      bmi	.game_kernel_swatter_1_load	; At end of sprite
    314  fd29		       d0 06		      bne	.game_kernel_swatter_1_draw	; Currently drawing (not zero)
    315  fd2b
    316  fd2b							; Check y position to see if we should start
    317  fd2b		       a5 84		      lda	Temp+1	; Use half scanline
    318  fd2d		       e5 c9		      sbc	SwatterDrawPos
    319  fd2f		       10 0f		      bpl	.game_kernel_swatter_1_load
    320  fd31
    321  fd31				   .game_kernel_swatter_1_draw
    322  fd31		       b9 e8 f1 	      lda	SwatterSprite,y
    323  fd34		       85 ca		      sta	SwatterLine
    324  fd36
    325  fd36							; Increment index
    326  fd36		       e6 c8		      inc	SwatterIndex
    327  fd38
    328  fd38							; See if we're at the end
    329  fd38		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    330  fd3a		       d0 06		      bne	.game_kernel_swatter_1_line
    331  fd3c		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    332  fd3e		       84 c8		      sty	SwatterIndex
    333  fd40
    334  fd40				   .game_kernel_swatter_1_load
    335  fd40		       a5 ca		      lda	SwatterLine
    336  fd42				   .game_kernel_swatter_1_line
    337  fd42		       85 1c		      sta	GRP1
    338  fd44
    339  fd44							; New line and decrement half scanline
    340  fd44		       c6 84		      dec	Temp+1
    341  fd46		       ca		      dex
    342  fd47		       85 02		      sta	WSYNC
    343  fd49
    344  fd49							; Preload half-line
    345  fd49		       a5 84		      lda	Temp+1
    346  fd4b
    347  fd4b				   .game_kernel_line_2
    348  fd4b							; Line (2nd time)
    349  fd4b
    350  fd4b		       24 ac		      bit	LineEnabled
    351  fd4d		       10 0e		      bpl	.game_kernel_line_2_skip
    352  fd4f
    353  fd4f		       a0 00		      ldy	#%00000000
    354  fd51
    355  fd51							; Top
    356  fd51		       c5 b4		      cmp	LineDrawPos+1
    357  fd53		       b0 06		      bcs	.game_kernel_line_2_off
    358  fd55
    359  fd55							; Bottom
    360  fd55		       c5 b3		      cmp	LineDrawPos+0
    361  fd57		       90 02		      bcc	.game_kernel_line_2_off
    362  fd59
    363  fd59				   .game_kernel_line_2_on
    364  fd59		       a0 02		      ldy	#%00000010
    365  fd5b
    366  fd5b				   .game_kernel_line_2_off
    367  fd5b		       84 1f		      sty	ENABL
    368  fd5d
    369  fd5d				   .game_kernel_line_2_skip
    370  fd5d
    371  fd5d				   .game_kernel_bug_1_0
    372  fd5d							; First Bug (1st time)
    373  fd5d
    374  fd5d		       a0 00		      ldy	#%00000000
    375  fd5f
    376  fd5f							; Top
    377  fd5f		       c5 c0		      cmp	BugDrawPosTop+0
    378  fd61		       b0 06		      bcs	.game_kernel_bug_1_0_off
    379  fd63
    380  fd63							; Bottom
    381  fd63		       c5 be		      cmp	BugDrawPosBottom+0
    382  fd65		       90 02		      bcc	.game_kernel_bug_1_0_off
    383  fd67
    384  fd67				   .game_kernel_bug_1_0_on
    385  fd67		       a0 02		      ldy	#%00000010
    386  fd69
    387  fd69				   .game_kernel_bug_1_0_off
    388  fd69		       84 1d		      sty	ENAM0
    389  fd6b
    390  fd6b				   .game_kernel_bug_1_1
    391  fd6b							; Second Bug (1st time)
    392  fd6b
    393  fd6b		       a0 00		      ldy	#%00000000
    394  fd6d
    395  fd6d							; Top
    396  fd6d		       c5 c1		      cmp	BugDrawPosTop+1
    397  fd6f		       b0 06		      bcs	.game_kernel_bug_1_1_off
    398  fd71
    399  fd71							; Bottom
    400  fd71		       c5 bf		      cmp	BugDrawPosBottom+1
    401  fd73		       90 02		      bcc	.game_kernel_bug_1_1_off
    402  fd75
    403  fd75				   .game_kernel_bug_1_1_on
    404  fd75		       a0 02		      ldy	#%00000010
    405  fd77
    406  fd77				   .game_kernel_bug_1_1_off
    407  fd77		       84 1e		      sty	ENAM1
    408  fd79
    409  fd79							; Next Line
    410  fd79		       ca		      dex
    411  fd7a		       85 02		      sta	WSYNC
    412  fd7c
    413  fd7c				   .game_kernel_spider_2
    414  fd7c							; Spider (2nd time)
    415  fd7c
    416  fd7c		       a4 a7		      ldy	SpiderIndex
    417  fd7e		       30 1a		      bmi	.game_kernel_spider_2_load	; At end of sprite
    418  fd80		       d0 06		      bne	.game_kernel_spider_2_draw	; Currently drawing (not zero)
    419  fd82
    420  fd82							; Check y position to see if we should start
    421  fd82		       a5 84		      lda	Temp+1	; Use half scanline
    422  fd84		       e5 a8		      sbc	SpiderDrawPos
    423  fd86		       10 12		      bpl	.game_kernel_spider_2_load
    424  fd88
    425  fd88				   .game_kernel_spider_2_draw
    426  fd88		       b1 a1		      lda	(SpiderPtr),y
    427  fd8a		       85 a9		      sta	SpiderLine
    428  fd8c
    429  fd8c							; Increment sprite index
    430  fd8c		       e6 a7		      inc	SpiderIndex
    431  fd8e
    432  fd8e							; See if we're at the end
    433  fd8e		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    434  fd90		       d0 0a		      bne	.game_kernel_spider_2_line
    435  fd92		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    436  fd94		       84 a7		      sty	SpiderIndex
    437  fd96		       a9 00		      lda	#0
    438  fd98		       85 a9		      sta	SpiderLine
    439  fd9a
    440  fd9a				   .game_kernel_spider_2_load
    441  fd9a		       a5 a9		      lda	SpiderLine
    442  fd9c				   .game_kernel_spider_2_line
    443  fd9c		       85 1b		      sta	GRP0
    444  fd9e
    445  fd9e				   .game_kernel_swatter_2
    446  fd9e							; Swatter (2nd time)
    447  fd9e
    448  fd9e							; Check if wait state
    449  fd9e		       24 c4		      bit	SwatterState
    450  fda0		       10 1b		      bpl	.game_kernel_swatter_2_load
    451  fda2
    452  fda2		       a4 c8		      ldy	SwatterIndex
    453  fda4		       30 17		      bmi	.game_kernel_swatter_2_load	; At end of sprite
    454  fda6		       d0 06		      bne	.game_kernel_swatter_2_draw	; Currently drawing (not zero)
    455  fda8
    456  fda8							; Check y position to see if we should start
    457  fda8		       a5 84		      lda	Temp+1	; Use half scanline
    458  fdaa		       e5 c9		      sbc	SwatterDrawPos
    459  fdac		       10 0f		      bpl	.game_kernel_swatter_2_load
    460  fdae
    461  fdae				   .game_kernel_swatter_2_draw
    462  fdae		       b9 e8 f1 	      lda	SwatterSprite,y
    463  fdb1		       85 ca		      sta	SwatterLine
    464  fdb3
    465  fdb3							; Increment index
    466  fdb3		       e6 c8		      inc	SwatterIndex
    467  fdb5
    468  fdb5							; See if we're at the end
    469  fdb5		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    470  fdb7		       d0 06		      bne	.game_kernel_swatter_2_line
    471  fdb9		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    472  fdbb		       84 c8		      sty	SwatterIndex
    473  fdbd
    474  fdbd				   .game_kernel_swatter_2_load
    475  fdbd		       a5 ca		      lda	SwatterLine
    476  fdbf				   .game_kernel_swatter_2_line
    477  fdbf		       85 1c		      sta	GRP1
    478  fdc1
    479  fdc1							; Next Line and half-line
    480  fdc1		       c6 84		      dec	Temp+1
    481  fdc3		       ca		      dex
    482  fdc4		       85 02		      sta	WSYNC
    483  fdc6
    484  fdc6							; Preload half-line
    485  fdc6		       a5 84		      lda	Temp+1
    486  fdc8
    487  fdc8				   .game_kernel_line_3
    488  fdc8							; Line (3rd time)
    489  fdc8
    490  fdc8		       24 ac		      bit	LineEnabled
    491  fdca		       10 0e		      bpl	.game_kernel_line_3_skip
    492  fdcc
    493  fdcc		       a0 00		      ldy	#%00000000
    494  fdce
    495  fdce							; Top
    496  fdce		       c5 b4		      cmp	LineDrawPos+1
    497  fdd0		       b0 06		      bcs	.game_kernel_line_3_off
    498  fdd2
    499  fdd2							; Bottom
    500  fdd2		       c5 b3		      cmp	LineDrawPos+0
    501  fdd4		       90 02		      bcc	.game_kernel_line_3_off
    502  fdd6
    503  fdd6				   .game_kernel_line_3_on
    504  fdd6		       a0 02		      ldy	#%00000010
    505  fdd8
    506  fdd8				   .game_kernel_line_3_off
    507  fdd8		       84 1f		      sty	ENABL
    508  fdda
    509  fdda				   .game_kernel_line_3_skip
    510  fdda
    511  fdda				   .game_kernel_bug_2_0
    512  fdda							; First Bug (2nd time)
    513  fdda
    514  fdda		       a0 00		      ldy	#%00000000
    515  fddc
    516  fddc							; Top
    517  fddc		       c5 c0		      cmp	BugDrawPosTop+0
    518  fdde		       b0 06		      bcs	.game_kernel_bug_2_0_off
    519  fde0
    520  fde0							; Bottom
    521  fde0		       c5 be		      cmp	BugDrawPosBottom+0
    522  fde2		       90 02		      bcc	.game_kernel_bug_2_0_off
    523  fde4
    524  fde4				   .game_kernel_bug_2_0_on
    525  fde4		       a0 02		      ldy	#%00000010
    526  fde6
    527  fde6				   .game_kernel_bug_2_0_off
    528  fde6		       84 1d		      sty	ENAM0
    529  fde8
    530  fde8				   .game_kernel_bug_2_1
    531  fde8							; Second Bug (2nd time)
    532  fde8
    533  fde8		       a0 00		      ldy	#%00000000
    534  fdea
    535  fdea							; Top
    536  fdea		       c5 c1		      cmp	BugDrawPosTop+1
    537  fdec		       b0 06		      bcs	.game_kernel_bug_2_1_off
    538  fdee
    539  fdee							; Bottom
    540  fdee		       c5 bf		      cmp	BugDrawPosBottom+1
    541  fdf0		       90 02		      bcc	.game_kernel_bug_2_1_off
    542  fdf2
    543  fdf2				   .game_kernel_bug_2_1_on
    544  fdf2		       a0 02		      ldy	#%00000010
    545  fdf4
    546  fdf4				   .game_kernel_bug_2_1_off
    547  fdf4		       84 1e		      sty	ENAM1
    548  fdf6
    549  fdf6							; Next Line
    550  fdf6		       ca		      dex
    551  fdf7		       85 02		      sta	WSYNC
    552  fdf9
    553  fdf9				   .game_kernel_spider_3
    554  fdf9							; Spider (3rd time)
    555  fdf9
    556  fdf9		       a4 a7		      ldy	SpiderIndex
    557  fdfb		       30 1a		      bmi	.game_kernel_spider_3_load	; At end of sprite
    558  fdfd		       d0 06		      bne	.game_kernel_spider_3_draw	; Currently drawing (not zero)
    559  fdff
    560  fdff							; Check y position to see if we should start
    561  fdff		       a5 84		      lda	Temp+1	; Use half scanline
    562  fe01		       e5 a8		      sbc	SpiderDrawPos
    563  fe03		       10 12		      bpl	.game_kernel_spider_3_load
    564  fe05
    565  fe05				   .game_kernel_spider_3_draw
    566  fe05		       b1 a1		      lda	(SpiderPtr),y
    567  fe07		       85 a9		      sta	SpiderLine
    568  fe09
    569  fe09							; Increment sprite index
    570  fe09		       e6 a7		      inc	SpiderIndex
    571  fe0b
    572  fe0b							; See if we're at the end
    573  fe0b		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    574  fe0d		       d0 0a		      bne	.game_kernel_spider_3_line
    575  fe0f		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    576  fe11		       84 a7		      sty	SpiderIndex
    577  fe13		       a9 00		      lda	#0
    578  fe15		       85 a9		      sta	SpiderLine
    579  fe17
    580  fe17				   .game_kernel_spider_3_load
    581  fe17		       a5 a9		      lda	SpiderLine
    582  fe19				   .game_kernel_spider_3_line
    583  fe19		       85 1b		      sta	GRP0
    584  fe1b
    585  fe1b				   .game_kernel_spider_3_skip
    586  fe1b
    587  fe1b				   .game_kernel_swatter_3
    588  fe1b							; Swatter (3rd time)
    589  fe1b
    590  fe1b							; Check if wait state
    591  fe1b		       24 c4		      bit	SwatterState
    592  fe1d		       10 1b		      bpl	.game_kernel_swatter_3_load
    593  fe1f
    594  fe1f		       a4 c8		      ldy	SwatterIndex
    595  fe21		       30 17		      bmi	.game_kernel_swatter_3_load	; At end of sprite
    596  fe23		       d0 06		      bne	.game_kernel_swatter_3_draw	; Currently drawing (not zero)
    597  fe25
    598  fe25							; Check y position to see if we should start
    599  fe25		       a5 84		      lda	Temp+1	; Use half scanline
    600  fe27		       e5 c9		      sbc	SwatterDrawPos
    601  fe29		       10 0f		      bpl	.game_kernel_swatter_3_load
    602  fe2b
    603  fe2b				   .game_kernel_swatter_3_draw
    604  fe2b		       b9 e8 f1 	      lda	SwatterSprite,y
    605  fe2e		       85 ca		      sta	SwatterLine
    606  fe30
    607  fe30							; Increment index
    608  fe30		       e6 c8		      inc	SwatterIndex
    609  fe32
    610  fe32							; See if we're at the end
    611  fe32		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    612  fe34		       d0 06		      bne	.game_kernel_swatter_3_line
    613  fe36		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    614  fe38		       84 c8		      sty	SwatterIndex
    615  fe3a
    616  fe3a				   .game_kernel_swatter_3_load
    617  fe3a		       a5 ca		      lda	SwatterLine
    618  fe3c				   .game_kernel_swatter_3_line
    619  fe3c		       85 1c		      sta	GRP1
    620  fe3e
    621  fe3e				   .game_kernel_swatter_3_skip
    622  fe3e
    623  fe3e							; New line and decrement half scanline
    624  fe3e		       c6 84		      dec	Temp+1
    625  fe40		       ca		      dex
    626  fe41		       f0 03		      beq	.game_kernel_clean
    627  fe43		       4c d3 fc 	      jmp	.game_kernel_objects
    628  fe46
    629  fe46				   .game_kernel_clean
    630  fe46
    631  fe46		       20 96 f6 	      jsr	WebClean
    632  fe49		       20 ef f7 	      jsr	SpiderClean
    633  fe4c		       20 55 f9 	      jsr	LineClean
    634  fe4f		       20 9d fa 	      jsr	BugClean
    635  fe52		       20 86 fb 	      jsr	SwatterClean
    636  fe55
    637  fe55		       85 02		      sta	WSYNC
    638  fe57
    639  fe57				   .game_kernel_return
    640  fe57		       60		      rts
    641  fe58
    642  fe58				   GameAudio0
    643  fe58		       0d		      .byte.b	#13	; D
    644  fe59		       ff		      .byte.b	#$FF
    645  fe5a		       0f		      .byte.b	#15	; B
    646  fe5b		       ff		      .byte.b	#$FF
    647  fe5c		       0d		      .byte.b	#13	; D
    648  fe5d		       ff		      .byte.b	#$FF
    649  fe5e		       0f		      .byte.b	#15	; B
    650  fe5f		       ff		      .byte.b	#$FF
    651  fe60		       0d		      .byte.b	#13	; D
    652  fe61		       0d		      .byte.b	#13	; D
    653  fe62		       0f		      .byte.b	#15	; B
    654  fe63		       ff		      .byte.b	#$FF
    655  fe64		       0c		      .byte.b	#12	; D#
    656  fe65		       ff		      .byte.b	#$FF
    657  fe66		       0f		      .byte.b	#15	; B
    658  fe67		       ff		      .byte.b	#$FF
    659  fe68		       0b		      .byte.b	#11	; E
    660  fe69		       ff		      .byte.b	#$FF
    661  fe6a		       0e		      .byte.b	#14	; C#
    662  fe6b		       ff		      .byte.b	#$FF
    663  fe6c		       0b		      .byte.b	#11
    664  fe6d		       ff		      .byte.b	#$FF
    665  fe6e		       0e		      .byte.b	#14
    666  fe6f		       ff		      .byte.b	#$FF
    667  fe70		       0b		      .byte.b	#11
    668  fe71		       0b		      .byte.b	#11
    669  fe72		       0e		      .byte.b	#14
    670  fe73		       ff		      .byte.b	#$FF
    671  fe74		       0b		      .byte.b	#11
    672  fe75		       ff		      .byte.b	#$FF
    673  fe76		       0e		      .byte.b	#14
    674  fe77		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fe78					      include	"over.asm"
      1  fe78							;================
      2  fe78							; Constants
      3  fe78							;================
      4  fe78
      5  fe78		       00 dc	   OVER_FRAMES =	220
      6  fe78
      7  fe78		       00 00	   OVER_BG_COLOR =	#$00
      8  fe78		       00 44	   OVER_FG_COLOR =	#$44
      9  fe78
     10  fe78		       00 07	   OVER_AUDIO_TONE =	7
     11  fe78		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fe78		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fe78		       00 10	   OVER_AUDIO_STEP =	16
     14  fe78
     15  fe78		       00 09	   OVER_IMAGE_SIZE =	9
     16  fe78		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fe78		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fe78		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fe78
     20  fe78				   OverInit
     21  fe78
     22  fe78							; Setup logic and kernel
      0  fe78					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fe78				   .POINTER   SET	VBlankPtr
      2  fe78				   .ADDRESS   SET	OverVerticalBlank
      3  fe78
      4  fe78		       a9 ba		      LDA	#<.ADDRESS
      5  fe7a		       85 88		      STA	.POINTER
      6  fe7c		       a9 fe		      LDA	#>.ADDRESS
      7  fe7e		       85 89		      STA	.POINTER+1
      8  fe80
      0  fe80					      SET_POINTER	KernelPtr, OverKernel
      1  fe80				   .POINTER   SET	KernelPtr
      2  fe80				   .ADDRESS   SET	OverKernel
      3  fe80
      4  fe80		       a9 f8		      LDA	#<.ADDRESS
      5  fe82		       85 8a		      STA	.POINTER
      6  fe84		       a9 fe		      LDA	#>.ADDRESS
      7  fe86		       85 8b		      STA	.POINTER+1
      8  fe88
      0  fe88					      SET_POINTER	OverScanPtr, OverOverScan
      1  fe88				   .POINTER   SET	OverScanPtr
      2  fe88				   .ADDRESS   SET	OverOverScan
      3  fe88
      4  fe88		       a9 be		      LDA	#<.ADDRESS
      5  fe8a		       85 8c		      STA	.POINTER
      6  fe8c		       a9 fe		      LDA	#>.ADDRESS
      7  fe8e		       85 8d		      STA	.POINTER+1
      8  fe90
     26  fe90
     27  fe90							; Load Colors
     28  fe90		       a9 00		      lda	#OVER_BG_COLOR
     29  fe92		       85 09		      sta	COLUBK
     30  fe94		       a9 44		      lda	#OVER_FG_COLOR
     31  fe96		       85 08		      sta	COLUPF
     32  fe98
     33  fe98							; Load audio settings
     34  fe98		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fe9a		       85 15		      sta	AUDC0
     36  fe9c		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fe9e		       85 19		      sta	AUDV0
     38  fea0		       a9 00		      lda	#0
     39  fea2		       85 16		      sta	AUDC1
     40  fea4		       85 1a		      sta	AUDV1
     41  fea6		       a9 00		      lda	#0
     42  fea8		       85 91		      sta	AudioStep
     43  feaa
     44  feaa							; Play first note
     45  feaa		       ad 4a ff 	      lda	OverAudio0,AudioStep
     46  fead		       85 17		      sta	AUDF0
     47  feaf
     48  feaf							; Setup frame counters
     49  feaf		       a9 00		      lda	#0
     50  feb1		       85 8e		      sta	Frame
     51  feb3		       a9 10		      lda	#OVER_AUDIO_STEP
     52  feb5		       85 8f		      sta	FrameTimer
     53  feb7		       85 84		      sta	Temp+1
     54  feb9
     55  feb9		       60		      rts
     56  feba
     57  feba				   OverVerticalBlank
     58  feba		       20 20 f5 	      jsr	ScoreUpdate
     59  febd		       60		      rts
     60  febe
     61  febe				   OverOverScan
     62  febe		       20 c5 fe 	      jsr	OverAudio
     63  fec1		       20 ee fe 	      jsr	OverState
     64  fec4		       60		      rts
     65  fec5
     66  fec5				   OverAudio
     67  fec5
     68  fec5		       a6 8f		      ldx	FrameTimer
     69  fec7		       e0 00		      cpx	#0
     70  fec9		       d0 22		      bne	.over_audio_return
     71  fecb
     72  fecb							; Reset Timer
     73  fecb		       a6 84		      ldx	Temp+1
     74  fecd					      REPEAT	3
     75  fecd		       e8		      inx
     74  fecd					      REPEND
     75  fece		       e8		      inx
     74  fece					      REPEND
     75  fecf		       e8		      inx
     76  fed0					      REPEND
     77  fed0		       86 8f		      stx	FrameTimer
     78  fed2		       86 84		      stx	Temp+1
     79  fed4
     80  fed4				   .over_audio_play
     81  fed4
     82  fed4							; Increment melody position
     83  fed4		       a4 91		      ldy	AudioStep
     84  fed6		       c8		      iny
     85  fed7
     86  fed7		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  fed9		       f0 0c		      beq	.over_audio_mute_note
     88  fedb
     89  fedb				   .over_audio_play_note
     90  fedb
     91  fedb							; Save current position
     92  fedb		       84 91		      sty	AudioStep
     93  fedd
     94  fedd							; Melody Line
     95  fedd		       b9 4a ff 	      lda	OverAudio0,y
     96  fee0		       85 17		      sta	AUDF0
     97  fee2		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  fee4		       85 19		      sta	AUDV0
     99  fee6
    100  fee6		       60		      rts
    101  fee7
    102  fee7				   .over_audio_mute_note
    103  fee7		       a9 00		      lda	#0
    104  fee9		       85 17		      sta	AUDF0
    105  feeb		       85 19		      sta	AUDV0
    106  feed
    107  feed				   .over_audio_return
    108  feed		       60		      rts
    109  feee
    110  feee				   OverState
    111  feee		       a5 8e		      lda	Frame
    112  fef0		       c9 dc		      cmp	#OVER_FRAMES
    113  fef2		       d0 03		      bne	.over_state_return
    114  fef4
    115  fef4		       20 a6 f2 	      jsr	TitleInit
    116  fef7
    117  fef7				   .over_state_return
    118  fef7		       60		      rts
    119  fef8
    120  fef8				   OverKernel
    121  fef8
    122  fef8							; Turn on display
    123  fef8		       a9 00		      lda	#0
    124  fefa		       85 01		      sta	VBLANK
    125  fefc
    126  fefc				   .over_kernel_score
    127  fefc
    128  fefc							; Draw Score on top first (no update)
    129  fefc		       20 92 f5 	      jsr	ScoreDraw
    130  feff
    131  feff				   .over_kernel_init
    132  feff							; Playfield Control
    133  feff		       a5 80		      lda	CtrlPf
    134  ff01		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  ff03		       09 01		      ora	#%00000001	; Set mirroring
    136  ff05		       85 80		      sta	CtrlPf
    137  ff07		       85 0a		      sta	CTRLPF
    138  ff09
    139  ff09				   .over_kernel_top_padding
    140  ff09							; Top Padding
    141  ff09		       20 28 ff 	      jsr	OverPadding
    142  ff0c
    143  ff0c				   .over_kernel_image
    144  ff0c		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  ff0e
    146  ff0e				   .over_kernel_image_next
    147  ff0e		       bd 41 ff 	      lda	OverImagePF2,x
    148  ff11		       85 0f		      sta	PF2
    149  ff13		       bd 38 ff 	      lda	OverImagePF1,x
    150  ff16		       85 0e		      sta	PF1
    151  ff18							;    lda OverImagePF0,x
    152  ff18							;    sta PF0
    153  ff18
    154  ff18		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  ff1a				   .over_kernel_image_loop
    156  ff1a		       85 02		      sta	WSYNC
    157  ff1c		       88		      dey
    158  ff1d		       d0 fb		      bne	.over_kernel_image_loop
    159  ff1f
    160  ff1f		       ca		      dex
    161  ff20		       10 ec		      bpl	.over_kernel_image_next
    162  ff22
    163  ff22				   .over_kernel_bottom_padding
    164  ff22							; Bottom Padding
    165  ff22		       20 28 ff 	      jsr	OverPadding
    166  ff25
    167  ff25				   .over_kernel_return
    168  ff25		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  ff27		       60		      rts
    170  ff28
    171  ff28				   OverPadding
    172  ff28		       a9 00		      lda	#0
    173  ff2a		       85 0d		      sta	PF0
    174  ff2c		       85 0e		      sta	PF1
    175  ff2e		       85 0f		      sta	PF2
    176  ff30
    177  ff30		       a2 32		      ldx	#OVER_IMAGE_PADDING
    178  ff32				   .over_padding_loop
    179  ff32		       85 02		      sta	WSYNC
    180  ff34		       ca		      dex
    181  ff35		       d0 fb		      bne	.over_padding_loop
    182  ff37
    183  ff37		       60		      rts
    184  ff38
    185  ff38				   OverAssets
    186  ff38
    187  ff38							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ff38					      include	"over_image.asm"
      1  ff38							;OverImagePF0:
      2  ff38							;    .BYTE %00000000
      3  ff38							;    .BYTE %00000000
      4  ff38							;    .BYTE %00000000
      5  ff38							;    .BYTE %00000000
      6  ff38							;    .BYTE %00000000
      7  ff38							;    .BYTE %00000000
      8  ff38							;    .BYTE %00000000
      9  ff38							;    .BYTE %00000000
     10  ff38							;    .BYTE %00000000
     11  ff38
     12  ff38				   OverImagePF1
     13  ff38		       0c		      .BYTE.b	%00001100
     14  ff39		       13		      .BYTE.b	%00010011
     15  ff3a		       20		      .BYTE.b	%00100000
     16  ff3b		       23		      .BYTE.b	%00100011
     17  ff3c		       24		      .BYTE.b	%00100100
     18  ff3d		       24		      .BYTE.b	%00100100
     19  ff3e		       12		      .BYTE.b	%00010010
     20  ff3f		       10		      .BYTE.b	%00010000
     21  ff40		       08		      .BYTE.b	%00001000
     22  ff41
     23  ff41				   OverImagePF2
     24  ff41		       e0		      .BYTE.b	%11100000
     25  ff42		       18		      .BYTE.b	%00011000
     26  ff43		       05		      .BYTE.b	%00000101
     27  ff44		       52		      .BYTE.b	%01010010
     28  ff45		       23		      .BYTE.b	%00100011
     29  ff46		       52		      .BYTE.b	%01010010
     30  ff47		       04		      .BYTE.b	%00000100
     31  ff48		       18		      .BYTE.b	%00011000
     32  ff49		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  ff4a
    190  ff4a				   OverAudio0
    191  ff4a
    192  ff4a		       0c		      .BYTE.b	#12	; D#2
    193  ff4b		       0d		      .BYTE.b	#13	; D2
    194  ff4c		       11		      .BYTE.b	#17	; A1
    195  ff4d		       16		      .BYTE.b	#22	; F1
    196  ff4e		       1a		      .BYTE.b	#26	; D1
    197  ff4f		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    330  ff50
    331  ff50							;================
    332  ff50							; End of cart
    333  ff50							;================
    334  ff50
    335  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    336  fffa
    337  fffa				   InterruptVectors
    338  fffa
    339  fffa		       fc f1		      .word.w	InitSystem	; NMI
    340  fffc		       fc f1		      .word.w	InitSystem	; RESET
    341  fffe		       fc f1		      .word.w	InitSystem	; IRQ
    342  10000
    343  10000					       END
