------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 10th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00cd ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00 00    Temp       ds	3
     61 U0086		       00	   Rand8      ds	1
     62 U0087		       00	   Rand16     ds	1
     63 U0088
     64 U0088		       00 00	   VBlankPtr  ds	2
     65 U008a		       00 00	   KernelPtr  ds	2
     66 U008c		       00 00	   OverScanPtr ds	2
     67 U008e
     68 U008e		       00	   Frame      ds	1
     69 U008f		       00 00	   FrameTimer ds	2
     70 U0091		       00	   InputState ds	1
     71 U0092
     72 U0092		       00	   AudioStep  ds	1
     73 U0093
     74 U0093		       00	   SampleStep ds	1
     75 U0094
     76 U0094							; Score
     77 U0094
     78 U0094		       00 00	   ScoreValue ds	2
     79 U0096		       00 00	   ScoreDigitOnes ds	2
     80 U0098		       00 00	   ScoreDigitTens ds	2
     81 U009a		       00 00 00    ScoreDigitGfx ds	3
     82 U009d		       00 00	   ScoreBarGfx ds	2
     83 U009f
     84 U009f							; Level
     85 U009f		       00	   LevelCurrent ds	1
     86 U00a0
     87 U00a0							; Web
     88 U00a0
     89 U00a0		       00	   WebIndex   ds	1
     90 U00a1		       00 00	   WebColor   ds	2
     91 U00a3
     92 U00a3							; Spider
     93 U00a3
     94 U00a3		       00 00	   SpiderPtr  ds	2
     95 U00a5		       00 00	   SpiderPos  ds	2
     96 U00a7		       00	   SpiderCtrl ds	1
     97 U00a8		       00	   SpiderColor ds	1
     98 U00a9
     99 U00a9		       00	   SpiderIndex ds	1
    100 U00aa		       00	   SpiderDrawPos ds	1
    101 U00ab		       00	   SpiderLine ds	1
    102 U00ac
    103 U00ac		       00 00	   SpiderPtr2 ds	2
    104 U00ae
    105 U00ae							; Line
    106 U00ae
    107 U00ae		       00	   LineEnabled ds	1
    108 U00af		       00 00	   LinePos    ds	2
    109 U00b1		       00 00	   LineVelocity ds	2
    110 U00b3		       00 00	   LineStartPos ds	2
    111 U00b5		       00 00	   LineDrawPos ds	2
    112 U00b7
    113 U00b7							; Bug
    114 U00b7
    115 U00b7		       00	   BugSpeed   ds	1
    116 U00b8
    117 U00b8		       00 00	   BugStunned ds	2
    118 U00ba		       00 00	   BugPosX    ds	2
    119 U00bc		       00 00	   BugPosY    ds	2
    120 U00be
    121 U00be		       00 00	   BugDrawPosBottom ds	2
    122 U00c0		       00 00	   BugDrawPosTop ds	2
    123 U00c2
    124 U00c2							; Swatter
    125 U00c2
    126 U00c2		       00 00	   SwatterPos ds	2
    127 U00c4		       00	   SwatterState ds	1
    128 U00c5		       00	   SwatterColor ds	1
    129 U00c6
    130 U00c6		       00	   SwatterWaitTime ds	1
    131 U00c7		       00	   SwatterHitDamage ds	1
    132 U00c8
    133 U00c8		       00	   SwatterIndex ds	1
    134 U00c9		       00	   SwatterDrawPos ds	1
    135 U00ca		       00	   SwatterLine ds	1
    136 U00cb
    137 U00cb		       00	   SwatterSampleCount ds	1
    138 U00cc		       00	   SwatterSampleF ds	1
    139 U00cd
    140  10000 ????				       SEG
    141  f000					      org	$F000	; Start of cart area
    142  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 86		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 87		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 86		      sta	Rand8
     49  f01e		       45 87		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 83		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 84		      sta	Temp+1
     70  f029		       85 85		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 83		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 84		      lda	Temp+1	; And add into result
     77  f031		       65 84		      adc	Temp+1
     78  f033		       85 84		      sta	Temp+1
     79  f035
     80  f035		       a5 85		      lda	Temp+2	; Propagating any carry
     81  f037		       65 85		      adc	Temp+2
     82  f039		       85 85		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 84		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 85		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    144  f044
    145  f044							; Assets
    146  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    150  f0bc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0bc					      include	"objects/score_digits.asm"
      1  f0bc				   ScoreDigits
      2  f0bc
      3  f0bc		       77		      .BYTE.b	%01110111
      4  f0bd		       55		      .BYTE.b	%01010101
      5  f0be		       55		      .BYTE.b	%01010101
      6  f0bf		       55		      .BYTE.b	%01010101
      7  f0c0		       77		      .BYTE.b	%01110111
      8  f0c1
      9  f0c1		       11		      .BYTE.b	%00010001
     10  f0c2		       11		      .BYTE.b	%00010001
     11  f0c3		       11		      .BYTE.b	%00010001
     12  f0c4		       11		      .BYTE.b	%00010001
     13  f0c5		       11		      .BYTE.b	%00010001
     14  f0c6
     15  f0c6		       77		      .BYTE.b	%01110111
     16  f0c7		       11		      .BYTE.b	%00010001
     17  f0c8		       77		      .BYTE.b	%01110111
     18  f0c9		       44		      .BYTE.b	%01000100
     19  f0ca		       77		      .BYTE.b	%01110111
     20  f0cb
     21  f0cb		       77		      .BYTE.b	%01110111
     22  f0cc		       11		      .BYTE.b	%00010001
     23  f0cd		       33		      .BYTE.b	%00110011
     24  f0ce		       11		      .BYTE.b	%00010001
     25  f0cf		       77		      .BYTE.b	%01110111
     26  f0d0
     27  f0d0		       55		      .BYTE.b	%01010101
     28  f0d1		       55		      .BYTE.b	%01010101
     29  f0d2		       77		      .BYTE.b	%01110111
     30  f0d3		       11		      .BYTE.b	%00010001
     31  f0d4		       11		      .BYTE.b	%00010001
     32  f0d5
     33  f0d5		       77		      .BYTE.b	%01110111
     34  f0d6		       44		      .BYTE.b	%01000100
     35  f0d7		       77		      .BYTE.b	%01110111
     36  f0d8		       11		      .BYTE.b	%00010001
     37  f0d9		       77		      .BYTE.b	%01110111
     38  f0da
     39  f0da		       77		      .BYTE.b	%01110111
     40  f0db		       44		      .BYTE.b	%01000100
     41  f0dc		       77		      .BYTE.b	%01110111
     42  f0dd		       55		      .BYTE.b	%01010101
     43  f0de		       77		      .BYTE.b	%01110111
     44  f0df
     45  f0df		       77		      .BYTE.b	%01110111
     46  f0e0		       11		      .BYTE.b	%00010001
     47  f0e1		       22		      .BYTE.b	%00100010
     48  f0e2		       22		      .BYTE.b	%00100010
     49  f0e3		       22		      .BYTE.b	%00100010
     50  f0e4
     51  f0e4		       77		      .BYTE.b	%01110111
     52  f0e5		       55		      .BYTE.b	%01010101
     53  f0e6		       77		      .BYTE.b	%01110111
     54  f0e7		       55		      .BYTE.b	%01010101
     55  f0e8		       77		      .BYTE.b	%01110111
     56  f0e9
     57  f0e9		       77		      .BYTE.b	%01110111
     58  f0ea		       55		      .BYTE.b	%01010101
     59  f0eb		       77		      .BYTE.b	%01110111
     60  f0ec		       11		      .BYTE.b	%00010001
     61  f0ed		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f0ee					      include	"objects/score_digits_flip.asm"
      1  f0ee				   ScoreDigitsFlip
      2  f0ee
      3  f0ee		       ee		      .BYTE.b	%11101110
      4  f0ef		       aa		      .BYTE.b	%10101010
      5  f0f0		       aa		      .BYTE.b	%10101010
      6  f0f1		       aa		      .BYTE.b	%10101010
      7  f0f2		       ee		      .BYTE.b	%11101110
      8  f0f3
      9  f0f3		       88		      .BYTE.b	%10001000
     10  f0f4		       88		      .BYTE.b	%10001000
     11  f0f5		       88		      .BYTE.b	%10001000
     12  f0f6		       88		      .BYTE.b	%10001000
     13  f0f7		       88		      .BYTE.b	%10001000
     14  f0f8
     15  f0f8		       ee		      .BYTE.b	%11101110
     16  f0f9		       88		      .BYTE.b	%10001000
     17  f0fa		       ee		      .BYTE.b	%11101110
     18  f0fb		       22		      .BYTE.b	%00100010
     19  f0fc		       ee		      .BYTE.b	%11101110
     20  f0fd
     21  f0fd		       ee		      .BYTE.b	%11101110
     22  f0fe		       88		      .BYTE.b	%10001000
     23  f0ff		       cc		      .BYTE.b	%11001100
     24  f100		       88		      .BYTE.b	%10001000
     25  f101		       ee		      .BYTE.b	%11101110
     26  f102
     27  f102		       aa		      .BYTE.b	%10101010
     28  f103		       aa		      .BYTE.b	%10101010
     29  f104		       ee		      .BYTE.b	%11101110
     30  f105		       88		      .BYTE.b	%10001000
     31  f106		       88		      .BYTE.b	%10001000
     32  f107
     33  f107		       ee		      .BYTE.b	%11101110
     34  f108		       22		      .BYTE.b	%00100010
     35  f109		       ee		      .BYTE.b	%11101110
     36  f10a		       88		      .BYTE.b	%10001000
     37  f10b		       ee		      .BYTE.b	%11101110
     38  f10c
     39  f10c		       ee		      .BYTE.b	%11101110
     40  f10d		       22		      .BYTE.b	%00100010
     41  f10e		       ee		      .BYTE.b	%11101110
     42  f10f		       aa		      .BYTE.b	%10101010
     43  f110		       ee		      .BYTE.b	%11101110
     44  f111
     45  f111		       ee		      .BYTE.b	%11101110
     46  f112		       88		      .BYTE.b	%10001000
     47  f113		       44		      .BYTE.b	%01000100
     48  f114		       44		      .BYTE.b	%01000100
     49  f115		       44		      .BYTE.b	%01000100
     50  f116
     51  f116		       ee		      .BYTE.b	%11101110
     52  f117		       aa		      .BYTE.b	%10101010
     53  f118		       ee		      .BYTE.b	%11101110
     54  f119		       aa		      .BYTE.b	%10101010
     55  f11a		       ee		      .BYTE.b	%11101110
     56  f11b
     57  f11b		       ee		      .BYTE.b	%11101110
     58  f11c		       aa		      .BYTE.b	%10101010
     59  f11d		       ee		      .BYTE.b	%11101110
     60  f11e		       88		      .BYTE.b	%10001000
     61  f11f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f120					      include	"objects/score_label.asm"
      1  f120				   ScoreLabel
      2  f120
      3  f120		       20		      .BYTE.b	%00100000
      4  f121		       50		      .BYTE.b	%01010000
      5  f122		       ee		      .BYTE.b	%11101110
      6  f123		       00		      .BYTE.b	%00000000
      7  f124		       57		      .BYTE.b	%01010111
      8  f125		       00		      .BYTE.b	%00000000
      9  f126
     10  f126		       20		      .BYTE.b	%00100000
     11  f127		       50		      .BYTE.b	%01010000
     12  f128		       4a		      .BYTE.b	%01001010
     13  f129		       00		      .BYTE.b	%00000000
     14  f12a		       55		      .BYTE.b	%01010101
     15  f12b		       00		      .BYTE.b	%00000000
     16  f12c
     17  f12c		       20		      .BYTE.b	%00100000
     18  f12d		       50		      .BYTE.b	%01010000
     19  f12e		       4e		      .BYTE.b	%01001110
     20  f12f		       00		      .BYTE.b	%00000000
     21  f130		       77		      .BYTE.b	%01110111
     22  f131		       00		      .BYTE.b	%00000000
     23  f132
     24  f132		       20		      .BYTE.b	%00100000
     25  f133		       50		      .BYTE.b	%01010000
     26  f134		       42		      .BYTE.b	%01000010
     27  f135		       00		      .BYTE.b	%00000000
     28  f136		       54		      .BYTE.b	%01010100
     29  f137		       00		      .BYTE.b	%00000000
     30  f138
     31  f138		       e0		      .BYTE.b	%11100000
     32  f139		       20		      .BYTE.b	%00100000
     33  f13a		       42		      .BYTE.b	%01000010
     34  f13b		       00		      .BYTE.b	%00000000
     35  f13c		       54		      .BYTE.b	%01010100
     36  f13d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    154  f13e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f13e					      include	"objects/web_image.asm"
      1  f13e				   WebImagePF0
      2  f13e		       00		      .BYTE.b	%00000000
      3  f13f		       00		      .BYTE.b	%00000000
      4  f140		       00		      .BYTE.b	%00000000
      5  f141		       00		      .BYTE.b	%00000000
      6  f142		       00		      .BYTE.b	%00000000
      7  f143		       00		      .BYTE.b	%00000000
      8  f144		       00		      .BYTE.b	%00000000
      9  f145		       00		      .BYTE.b	%00000000
     10  f146		       00		      .BYTE.b	%00000000
     11  f147		       30		      .BYTE.b	%00110000
     12  f148		       e0		      .BYTE.b	%11100000
     13  f149		       20		      .BYTE.b	%00100000
     14  f14a		       40		      .BYTE.b	%01000000
     15  f14b		       40		      .BYTE.b	%01000000
     16  f14c		       80		      .BYTE.b	%10000000
     17  f14d		       80		      .BYTE.b	%10000000
     18  f14e		       40		      .BYTE.b	%01000000
     19  f14f		       40		      .BYTE.b	%01000000
     20  f150		       20		      .BYTE.b	%00100000
     21  f151		       e0		      .BYTE.b	%11100000
     22  f152		       30		      .BYTE.b	%00110000
     23  f153		       00		      .BYTE.b	%00000000
     24  f154		       00		      .BYTE.b	%00000000
     25  f155		       00		      .BYTE.b	%00000000
     26  f156		       00		      .BYTE.b	%00000000
     27  f157		       00		      .BYTE.b	%00000000
     28  f158		       00		      .BYTE.b	%00000000
     29  f159		       00		      .BYTE.b	%00000000
     30  f15a		       00		      .BYTE.b	%00000000
     31  f15b		       00		      .BYTE.b	%00000000
     32  f15c
     33  f15c				   WebImagePF1
     34  f15c		       08		      .BYTE.b	%00001000
     35  f15d		       06		      .BYTE.b	%00000110
     36  f15e		       01		      .BYTE.b	%00000001
     37  f15f		       00		      .BYTE.b	%00000000
     38  f160		       00		      .BYTE.b	%00000000
     39  f161		       01		      .BYTE.b	%00000001
     40  f162		       01		      .BYTE.b	%00000001
     41  f163		       02		      .BYTE.b	%00000010
     42  f164		       0c		      .BYTE.b	%00001100
     43  f165		       30		      .BYTE.b	%00110000
     44  f166		       c0		      .BYTE.b	%11000000
     45  f167		       38		      .BYTE.b	%00111000
     46  f168		       07		      .BYTE.b	%00000111
     47  f169		       00		      .BYTE.b	%00000000
     48  f16a		       00		      .BYTE.b	%00000000
     49  f16b		       00		      .BYTE.b	%00000000
     50  f16c		       00		      .BYTE.b	%00000000
     51  f16d		       07		      .BYTE.b	%00000111
     52  f16e		       38		      .BYTE.b	%00111000
     53  f16f		       c0		      .BYTE.b	%11000000
     54  f170		       30		      .BYTE.b	%00110000
     55  f171		       0c		      .BYTE.b	%00001100
     56  f172		       02		      .BYTE.b	%00000010
     57  f173		       01		      .BYTE.b	%00000001
     58  f174		       01		      .BYTE.b	%00000001
     59  f175		       00		      .BYTE.b	%00000000
     60  f176		       00		      .BYTE.b	%00000000
     61  f177		       01		      .BYTE.b	%00000001
     62  f178		       06		      .BYTE.b	%00000110
     63  f179		       08		      .BYTE.b	%00001000
     64  f17a
     65  f17a				   WebImagePF2
     66  f17a		       20		      .BYTE.b	%00100000
     67  f17b		       18		      .BYTE.b	%00011000
     68  f17c		       04		      .BYTE.b	%00000100
     69  f17d		       03		      .BYTE.b	%00000011
     70  f17e		       3f		      .BYTE.b	%00111111
     71  f17f		       c2		      .BYTE.b	%11000010
     72  f180		       04		      .BYTE.b	%00000100
     73  f181		       08		      .BYTE.b	%00001000
     74  f182		       08		      .BYTE.b	%00001000
     75  f183		       10		      .BYTE.b	%00010000
     76  f184		       20		      .BYTE.b	%00100000
     77  f185		       20		      .BYTE.b	%00100000
     78  f186		       41		      .BYTE.b	%01000001
     79  f187		       8e		      .BYTE.b	%10001110
     80  f188		       f0		      .BYTE.b	%11110000
     81  f189		       f0		      .BYTE.b	%11110000
     82  f18a		       8e		      .BYTE.b	%10001110
     83  f18b		       41		      .BYTE.b	%01000001
     84  f18c		       20		      .BYTE.b	%00100000
     85  f18d		       20		      .BYTE.b	%00100000
     86  f18e		       10		      .BYTE.b	%00010000
     87  f18f		       08		      .BYTE.b	%00001000
     88  f190		       08		      .BYTE.b	%00001000
     89  f191		       04		      .BYTE.b	%00000100
     90  f192		       c2		      .BYTE.b	%11000010
     91  f193		       3f		      .BYTE.b	%00111111
     92  f194		       03		      .BYTE.b	%00000011
     93  f195		       04		      .BYTE.b	%00000100
     94  f196		       18		      .BYTE.b	%00011000
     95  f197		       20		      .BYTE.b	%00100000
------- FILE kernel.asm
    156  f198
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f198					      include	"objects/spider_sprite.asm"
      1  f198				   SpiderSprite
      2  f198
      3  f198		       99		      .BYTE.b	%10011001
      4  f199		       99		      .BYTE.b	%10011001
      5  f19a		       bd		      .BYTE.b	%10111101
      6  f19b		       bd		      .BYTE.b	%10111101
      7  f19c		       99		      .BYTE.b	%10011001
      8  f19d		       99		      .BYTE.b	%10011001
      9  f19e		       7e		      .BYTE.b	%01111110
     10  f19f		       3c		      .BYTE.b	%00111100
     11  f1a0		       3c		      .BYTE.b	%00111100
     12  f1a1		       18		      .BYTE.b	%00011000
     13  f1a2		       3c		      .BYTE.b	%00111100
     14  f1a3		       7e		      .BYTE.b	%01111110
     15  f1a4		       bd		      .BYTE.b	%10111101
     16  f1a5		       bd		      .BYTE.b	%10111101
     17  f1a6		       bd		      .BYTE.b	%10111101
     18  f1a7		       99		      .BYTE.b	%10011001
     19  f1a8
     20  f1a8		       0b		      .BYTE.b	%00001011
     21  f1a9		       0b		      .BYTE.b	%00001011
     22  f1aa		       13		      .BYTE.b	%00010011
     23  f1ab		       13		      .BYTE.b	%00010011
     24  f1ac		       1c		      .BYTE.b	%00011100
     25  f1ad		       1c		      .BYTE.b	%00011100
     26  f1ae		       3d		      .BYTE.b	%00111101
     27  f1af		       3d		      .BYTE.b	%00111101
     28  f1b0		       7e		      .BYTE.b	%01111110
     29  f1b1		       fe		      .BYTE.b	%11111110
     30  f1b2		       b8		      .BYTE.b	%10111000
     31  f1b3		       b8		      .BYTE.b	%10111000
     32  f1b4		       10		      .BYTE.b	%00010000
     33  f1b5		       10		      .BYTE.b	%00010000
     34  f1b6		       30		      .BYTE.b	%00110000
     35  f1b7		       20		      .BYTE.b	%00100000
     36  f1b8
     37  f1b8		       c7		      .BYTE.b	%11000111
     38  f1b9		       c7		      .BYTE.b	%11000111
     39  f1ba		       28		      .BYTE.b	%00101000
     40  f1bb		       28		      .BYTE.b	%00101000
     41  f1bc		       3a		      .BYTE.b	%00111010
     42  f1bd		       7a		      .BYTE.b	%01111010
     43  f1be		       fd		      .BYTE.b	%11111101
     44  f1bf		       ff		      .BYTE.b	%11111111
     45  f1c0		       ff		      .BYTE.b	%11111111
     46  f1c1		       fd		      .BYTE.b	%11111101
     47  f1c2		       7a		      .BYTE.b	%01111010
     48  f1c3		       3a		      .BYTE.b	%00111010
     49  f1c4		       28		      .BYTE.b	%00101000
     50  f1c5		       28		      .BYTE.b	%00101000
     51  f1c6		       c7		      .BYTE.b	%11000111
     52  f1c7		       c7		      .BYTE.b	%11000111
     53  f1c8
     54  f1c8		       20		      .BYTE.b	%00100000
     55  f1c9		       30		      .BYTE.b	%00110000
     56  f1ca		       10		      .BYTE.b	%00010000
     57  f1cb		       10		      .BYTE.b	%00010000
     58  f1cc		       b8		      .BYTE.b	%10111000
     59  f1cd		       bc		      .BYTE.b	%10111100
     60  f1ce		       fc		      .BYTE.b	%11111100
     61  f1cf		       7e		      .BYTE.b	%01111110
     62  f1d0		       3f		      .BYTE.b	%00111111
     63  f1d1		       1d		      .BYTE.b	%00011101
     64  f1d2		       0c		      .BYTE.b	%00001100
     65  f1d3		       1c		      .BYTE.b	%00011100
     66  f1d4		       13		      .BYTE.b	%00010011
     67  f1d5		       13		      .BYTE.b	%00010011
     68  f1d6		       0b		      .BYTE.b	%00001011
     69  f1d7		       0b		      .BYTE.b	%00001011
     70  f1d8
     71  f1d8		       99		      .BYTE.b	%10011001
     72  f1d9		       bd		      .BYTE.b	%10111101
     73  f1da		       bd		      .BYTE.b	%10111101
     74  f1db		       bd		      .BYTE.b	%10111101
     75  f1dc		       7e		      .BYTE.b	%01111110
     76  f1dd		       3c		      .BYTE.b	%00111100
     77  f1de		       18		      .BYTE.b	%00011000
     78  f1df		       3c		      .BYTE.b	%00111100
     79  f1e0		       3c		      .BYTE.b	%00111100
     80  f1e1		       7e		      .BYTE.b	%01111110
     81  f1e2		       99		      .BYTE.b	%10011001
     82  f1e3		       99		      .BYTE.b	%10011001
     83  f1e4		       bd		      .BYTE.b	%10111101
     84  f1e5		       bd		      .BYTE.b	%10111101
     85  f1e6		       99		      .BYTE.b	%10011001
     86  f1e7		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    158  f1e8
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1e8					      include	"objects/swatter_sprite.asm"
      1  f1e8				   SwatterSprite
      2  f1e8
      3  f1e8		       3c		      .BYTE.b	%00111100
      4  f1e9		       3c		      .BYTE.b	%00111100
      5  f1ea		       56		      .BYTE.b	%01010110
      6  f1eb		       6a		      .BYTE.b	%01101010
      7  f1ec		       d5		      .BYTE.b	%11010101
      8  f1ed		       ab		      .BYTE.b	%10101011
      9  f1ee		       d5		      .BYTE.b	%11010101
     10  f1ef		       ab		      .BYTE.b	%10101011
     11  f1f0		       d5		      .BYTE.b	%11010101
     12  f1f1		       ab		      .BYTE.b	%10101011
     13  f1f2		       d5		      .BYTE.b	%11010101
     14  f1f3		       ab		      .BYTE.b	%10101011
     15  f1f4		       56		      .BYTE.b	%01010110
     16  f1f5		       6a		      .BYTE.b	%01101010
     17  f1f6		       56		      .BYTE.b	%01010110
     18  f1f7		       6a		      .BYTE.b	%01101010
     19  f1f8		       34		      .BYTE.b	%00110100
     20  f1f9		       2c		      .BYTE.b	%00101100
     21  f1fa		       34		      .BYTE.b	%00110100
     22  f1fb		       18		      .BYTE.b	%00011000
------- FILE kernel.asm
    160  f1fc
    161  f1fc				   InitSystem
    162  f1fc
    163  f1fc				   .init_clean
    164  f1fc							; Resets RAM, TIA registers, and CPU registers
      0  f1fc					      CLEAN_START
      1  f1fc		       78		      sei
      2  f1fd		       d8		      cld
      3  f1fe
      4  f1fe		       a2 00		      ldx	#0
      5  f200		       8a		      txa
      6  f201		       a8		      tay
      7  f202		       ca	   .CLEAR_STACK dex
      8  f203		       9a		      txs
      9  f204		       48		      pha
     10  f205		       d0 fb		      bne	.CLEAR_STACK
     11  f207
    166  f207
    167  f207				   .init_tia
    168  f207							; Define default TIA register values
    169  f207
    170  f207							; Initialize copies
    171  f207		       a9 00		      lda	#0
    172  f209		       85 80		      sta	CtrlPf
    173  f20b		       85 81		      sta	NuSiz0
    174  f20d		       85 82		      sta	NuSiz1
    175  f20f
    176  f20f							; Set background color
    177  f20f		       a9 00		      lda	#$00	; Black
    178  f211		       85 09		      sta	COLUBK
    179  f213
    180  f213							; Set the playfield and player color
    181  f213		       a9 0e		      lda	#$0E	; White
    182  f215		       85 08		      sta	COLUPF
    183  f217		       85 06		      sta	COLUP0
    184  f219		       85 07		      sta	COLUP1
    185  f21b
    186  f21b							; Playfield Control
    187  f21b		       a9 01		      lda	#%00000001	; 1 for mirroring
    188  f21d		       85 80		      sta	CtrlPf
    189  f21f		       85 0a		      sta	CTRLPF
    190  f221
    191  f221							; Disable Game Elements
    192  f221		       a9 00		      lda	#$00
    193  f223		       85 1f		      sta	ENABL	; Turn off ball
    194  f225		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    195  f227		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    196  f229		       85 1b		      sta	GRP0	; Turn off player 1
    197  f22b		       85 1c		      sta	GRP1	; Turn off player 2
    198  f22d
    199  f22d							; Empty playfield
    200  f22d		       a9 00		      lda	#%00000000
    201  f22f		       85 0d		      sta	PF0
    202  f231		       85 0e		      sta	PF1
    203  f233		       85 0f		      sta	PF2
    204  f235
    205  f235				   .init_seed
    206  f235							; Seed the random number generator
    207  f235		       ad 84 02 	      lda	INTIM	; Unknown value
    208  f238		       85 86		      sta	Rand8	; Use as seed
    209  f23a		       49 ff		      eor	#$FF	; Flip bits
    210  f23c		       85 87		      sta	Rand16	; Just in case INTIM was 0
    211  f23e
    212  f23e				   .init_game
    213  f23e
    214  f23e							;   jsr LogoInit
    215  f23e		       20 a6 f2 	      jsr	TitleInit
    216  f241
    217  f241							;=======================================
    218  f241							; Game Kernel
    219  f241							;=======================================
    220  f241
    221  f241				   Main
    222  f241
    223  f241		       20 50 f2 	      jsr	VerticalSync
    224  f244		       20 69 f2 	      jsr	VerticalBlank
    225  f247		       20 7c f2 	      jsr	Kernel
    226  f24a		       20 83 f2 	      jsr	OverScan
    227  f24d		       4c 41 f2 	      jmp	Main
    228  f250
    229  f250				   VerticalSync
    230  f250
    231  f250		       a9 00		      lda	#0
    232  f252		       85 01		      sta	VBLANK
    233  f254
    234  f254							; Turn on Vertical Sync signal and setup timer
    235  f254		       a9 02		      lda	#2
    236  f256		       85 00		      sta	VSYNC
    237  f258
    238  f258							; Increment frame count and reduce frame counter
    239  f258		       e6 8e		      inc	Frame
    240  f25a		       c6 8f		      dec	FrameTimer
    241  f25c		       c6 90		      dec	FrameTimer+1
    242  f25e
    243  f25e							; VSYNCH signal scanlines
    244  f25e					      REPEAT	#KERNEL_VSYNC
    245  f25e		       85 02		      sta	WSYNC
    244  f25e					      REPEND
    245  f260		       85 02		      sta	WSYNC
    244  f260					      REPEND
    245  f262		       85 02		      sta	WSYNC
    246  f264					      REPEND
    247  f264
    248  f264							; Turn off Vertical Sync signal
    249  f264		       a9 00		      lda	#0
    250  f266		       85 00		      sta	VSYNC
    251  f268
    252  f268				   .vsync_return
    253  f268		       60		      rts
    254  f269
    255  f269				   VerticalBlank
    256  f269							; Setup Timer
    257  f269		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    258  f26b		       8d 96 02 	      sta	TIM64T
    259  f26e
    260  f26e				   .vblank_logic
    261  f26e							; Perform Game Logic
    262  f26e		       20 79 f2 	      jsr	.vblank_logic_call_ptr
    263  f271
    264  f271				   .vblank_loop
    265  f271							; WSYNC until Timer is complete
    266  f271		       85 02		      sta	WSYNC
    267  f273		       ad 84 02 	      lda	INTIM
    268  f276		       d0 f9		      bne	.vblank_loop
    269  f278
    270  f278				   .vblank_return
    271  f278		       60		      rts
    272  f279
    273  f279				   .vblank_logic_call_ptr
    274  f279		       6c 88 00 	      jmp	(VBlankPtr)
    275  f27c
    276  f27c				   Kernel
    277  f27c
    278  f27c							; Perform Selected Kernel
    279  f27c		       20 80 f2 	      jsr	.kernel_call_ptr
    280  f27f		       60		      rts
    281  f280
    282  f280				   .kernel_call_ptr
    283  f280		       6c 8a 00 	      jmp	(KernelPtr)
    284  f283
    285  f283				   OverScan
    286  f283
    287  f283							; End of screen, enter blanking
    288  f283		       a9 42		      lda	#%01000010
    289  f285		       85 01		      sta	VBLANK
    290  f287
    291  f287							; Setup Timer
    292  f287		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    293  f289		       8d 96 02 	      sta	TIM64T
    294  f28c
    295  f28c							;.overscan_reset:
    296  f28c							; Check for reset switch
    297  f28c		       ad 82 02 	      lda	SWCHB
    298  f28f		       4a		      lsr		; Push D0 to carry (C)
    299  f290		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    300  f292
    301  f292							; Perform reset
    302  f292							;    jsr LogoInit	      ; No need for logic
    303  f292		       20 a6 f2 	      jsr	TitleInit
    304  f295		       4c 9b f2 	      jmp	.overscan_loop
    305  f298
    306  f298				   .overscan_logic
    307  f298							; Perform OverScan Logic
    308  f298		       20 a3 f2 	      jsr	.overscan_logic_call_ptr
    309  f29b
    310  f29b				   .overscan_loop
    311  f29b							; WSYNC until Timer is complete
    312  f29b		       85 02		      sta	WSYNC
    313  f29d		       ad 84 02 	      lda	INTIM
    314  f2a0		       d0 f9		      bne	.overscan_loop
    315  f2a2
    316  f2a2				   .overscan_return
    317  f2a2		       60		      rts
    318  f2a3
    319  f2a3				   .overscan_logic_call_ptr
    320  f2a3		       6c 8c 00 	      jmp	(OverScanPtr)
    321  f2a6
    322  f2a6							;================
    323  f2a6							; State Code
    324  f2a6							;================
    325  f2a6
    326  f2a6							;    include "logo.asm"
------- FILE title.asm LEVEL 2 PASS 2
      0  f2a6					      include	"title.asm"
      1  f2a6							;================
      2  f2a6							; Constants
      3  f2a6							;================
      4  f2a6
      5  f2a6		       00 00	   TITLE_BG_COLOR =	#$00
      6  f2a6		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f2a6		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f2a6		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f2a6		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f2a6
     11  f2a6		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f2a6		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f2a6		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f2a6		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f2a6		       00 09	   TITLE_AUDIO_STEP =	9
     16  f2a6
     17  f2a6		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f2a6		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f2a6		       00 07	   TITLE_LABEL_LINE =	7
     20  f2a6
     21  f2a6		       00 10	   TITLE_GAP_SIZE =	#16
     22  f2a6
     23  f2a6		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f2a6		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f2a6		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f2a6
     27  f2a6				   TitleInit
     28  f2a6
     29  f2a6							; Setup logic and kernel
      0  f2a6					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f2a6				   .POINTER   SET	VBlankPtr
      2  f2a6				   .ADDRESS   SET	TitleVerticalBlank
      3  f2a6
      4  f2a6		       a9 07		      LDA	#<.ADDRESS
      5  f2a8		       85 88		      STA	.POINTER
      6  f2aa		       a9 f3		      LDA	#>.ADDRESS
      7  f2ac		       85 89		      STA	.POINTER+1
      8  f2ae
      0  f2ae					      SET_POINTER	KernelPtr, TitleKernel
      1  f2ae				   .POINTER   SET	KernelPtr
      2  f2ae				   .ADDRESS   SET	TitleKernel
      3  f2ae
      4  f2ae		       a9 c8		      LDA	#<.ADDRESS
      5  f2b0		       85 8a		      STA	.POINTER
      6  f2b2		       a9 f3		      LDA	#>.ADDRESS
      7  f2b4		       85 8b		      STA	.POINTER+1
      8  f2b6
      0  f2b6					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f2b6				   .POINTER   SET	OverScanPtr
      2  f2b6				   .ADDRESS   SET	TitleOverScan
      3  f2b6
      4  f2b6		       a9 78		      LDA	#<.ADDRESS
      5  f2b8		       85 8c		      STA	.POINTER
      6  f2ba		       a9 f3		      LDA	#>.ADDRESS
      7  f2bc		       85 8d		      STA	.POINTER+1
      8  f2be
     33  f2be
     34  f2be							; Load audio settings
     35  f2be
     36  f2be							; Melody Line
     37  f2be		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f2c0		       85 15		      sta	AUDC0
     39  f2c2		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f2c4		       85 19		      sta	AUDV0
     41  f2c6
     42  f2c6							; Drums and Bass
     43  f2c6		       a9 00		      lda	#0
     44  f2c8		       85 16		      sta	AUDC1
     45  f2ca		       85 1a		      sta	AUDV1
     46  f2cc
     47  f2cc							; Make it so that we play the first note immediately
     48  f2cc		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f2ce		       85 92		      sta	AudioStep
     50  f2d0		       a9 01		      lda	#1
     51  f2d2		       85 8f		      sta	FrameTimer
     52  f2d4
     53  f2d4							; Setup Spider Sprite
      0  f2d4					      SET_POINTER	SpiderPtr, TitleSpider
      1  f2d4				   .POINTER   SET	SpiderPtr
      2  f2d4				   .ADDRESS   SET	TitleSpider
      3  f2d4
      4  f2d4		       a9 aa		      LDA	#<.ADDRESS
      5  f2d6		       85 a3		      STA	.POINTER
      6  f2d8		       a9 f0		      LDA	#>.ADDRESS
      7  f2da		       85 a4		      STA	.POINTER+1
      8  f2dc
     55  f2dc
     56  f2dc		       a5 81		      lda	NuSiz0
     57  f2de		       29 f8		      and	#%11111000
     58  f2e0		       09 06		      ora	#%00000110	; Triple Sprite
     59  f2e2		       85 81		      sta	NuSiz0
     60  f2e4		       85 04		      sta	NUSIZ0
     61  f2e6		       85 82		      sta	NuSiz1
     62  f2e8		       85 05		      sta	NUSIZ1
     63  f2ea
     64  f2ea		       a9 00		      lda	#0	; No reflect
     65  f2ec		       85 0b		      sta	REFP0
     66  f2ee		       a9 ff		      lda	#$FF	; Reflect P1
     67  f2f0		       85 0c		      sta	REFP1
     68  f2f2
     69  f2f2		       a9 00		      lda	#0
     70  f2f4		       85 aa		      sta	SpiderDrawPos	; Initialize animation state
     71  f2f6
     72  f2f6							; Setup Web Line
     73  f2f6							; Missle0 (2 clock size)
     74  f2f6		       a5 81		      lda	NuSiz0
     75  f2f8		       29 cf		      and	#%11001111
     76  f2fa		       09 10		      ora	#%00010000
     77  f2fc		       85 81		      sta	NuSiz0
     78  f2fe		       85 04		      sta	NUSIZ0
     79  f300
     80  f300							; Disable at start
     81  f300		       a9 00		      lda	#0
     82  f302		       85 1d		      sta	ENAM0
     83  f304
     84  f304							; Set initial button state
     85  f304							;lda #0
     86  f304		       85 91		      sta	InputState
     87  f306
     88  f306		       60		      rts
     89  f307
     90  f307				   TitleVerticalBlank
     91  f307
     92  f307							; Refresh random values
     93  f307		       20 13 f0 	      jsr	Random
     94  f30a
     95  f30a		       20 14 f3 	      jsr	TitlePosition
     96  f30d		       20 2e f3 	      jsr	TitleAnimation
     97  f310		       20 59 f3 	      jsr	TitleColor
     98  f313
     99  f313		       60		      rts
    100  f314
    101  f314				   TitlePosition
    102  f314
    103  f314							; Position Spider
    104  f314		       a2 00		      ldx	#0	; Object (player0)
    105  f316		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    106  f318		       20 00 f0 	      jsr	PosObject
    107  f31b
    108  f31b		       a2 01		      ldx	#1	; Object (player1)
    109  f31d		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    110  f31f		       20 00 f0 	      jsr	PosObject
    111  f322
    112  f322							; Position Web Line
    113  f322		       a2 02		      ldx	#2	; Object (missle0)
    114  f324		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    115  f326		       20 00 f0 	      jsr	PosObject
    116  f329
    117  f329		       85 02		      sta	WSYNC
    118  f32b		       85 2a		      sta	HMOVE
    119  f32d
    120  f32d		       60		      rts
    121  f32e
    122  f32e				   TitleAnimation
    123  f32e
    124  f32e		       a5 92		      lda	AudioStep
    125  f330							;cmp #0
    126  f330		       f0 0d		      beq	.title_animation_1
    127  f332		       c9 04		      cmp	#4
    128  f334		       f0 16		      beq	.title_animation_2
    129  f336		       c9 09		      cmp	#9
    130  f338		       f0 05		      beq	.title_animation_1
    131  f33a		       c9 0c		      cmp	#12
    132  f33c		       f0 0e		      beq	.title_animation_2
    133  f33e		       60		      rts
    134  f33f
    135  f33f				   .title_animation_1
      0  f33f					      SET_POINTER	SpiderPtr, TitleSpider
      1  f33f				   .POINTER   SET	SpiderPtr
      2  f33f				   .ADDRESS   SET	TitleSpider
      3  f33f
      4  f33f		       a9 aa		      LDA	#<.ADDRESS
      5  f341		       85 a3		      STA	.POINTER
      6  f343		       a9 f0		      LDA	#>.ADDRESS
      7  f345		       85 a4		      STA	.POINTER+1
      8  f347
    137  f347		       a9 00		      lda	#0
    138  f349		       85 aa		      sta	SpiderDrawPos
    139  f34b		       60		      rts
    140  f34c
    141  f34c				   .title_animation_2
      0  f34c					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f34c				   .POINTER   SET	SpiderPtr
      2  f34c				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f34c
      4  f34c		       a9 b3		      LDA	#<.ADDRESS
      5  f34e		       85 a3		      STA	.POINTER
      6  f350		       a9 f0		      LDA	#>.ADDRESS
      7  f352		       85 a4		      STA	.POINTER+1
      8  f354
    143  f354		       a9 01		      lda	#1
    144  f356		       85 aa		      sta	SpiderDrawPos
    145  f358		       60		      rts
    146  f359
    147  f359				   TitleColor
    148  f359
    149  f359							; Load Colors
    150  f359		       a9 00		      lda	#TITLE_BG_COLOR
    151  f35b		       85 09		      sta	COLUBK
    152  f35d		       a9 06		      lda	#TITLE_WEB_COLOR
    153  f35f		       85 08		      sta	COLUPF
    154  f361
    155  f361							; Check b/w
    156  f361		       ad 82 02 	      lda	SWCHB
    157  f364					      REPEAT	4
    158  f364		       4a		      lsr
    157  f364					      REPEND
    158  f365		       4a		      lsr
    157  f365					      REPEND
    158  f366		       4a		      lsr
    157  f366					      REPEND
    158  f367		       4a		      lsr
    159  f368					      REPEND
    160  f368		       90 07		      bcc	.title_bw
    161  f36a
    162  f36a				   .title_color
    163  f36a		       a9 56		      lda	#TITLE_SPIDER_COLOR
    164  f36c		       85 06		      sta	COLUP0
    165  f36e		       85 07		      sta	COLUP1
    166  f370
    167  f370		       60		      rts
    168  f371
    169  f371				   .title_bw
    170  f371							; Load B/W Colors
    171  f371		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    172  f373		       85 06		      sta	COLUP0
    173  f375		       85 07		      sta	COLUP1
    174  f377
    175  f377		       60		      rts
    176  f378
    177  f378				   TitleOverScan
    178  f378		       20 7f f3 	      jsr	TitleAudio
    179  f37b		       20 b7 f3 	      jsr	TitleState
    180  f37e		       60		      rts
    181  f37f
    182  f37f				   TitleAudio
    183  f37f
    184  f37f		       a6 8f		      ldx	FrameTimer
    185  f381		       e0 00		      cpx	#0
    186  f383		       d0 31		      bne	.title_audio_return
    187  f385
    188  f385							; Reset Timer
    189  f385		       a2 09		      ldx	#TITLE_AUDIO_STEP
    190  f387		       86 8f		      stx	FrameTimer
    191  f389
    192  f389				   .title_audio_play
    193  f389
    194  f389							; Increment melody position
    195  f389		       a4 92		      ldy	AudioStep
    196  f38b		       c8		      iny
    197  f38c
    198  f38c							; Check if we're at the end of the melody
    199  f38c		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    200  f38e		       d0 02		      bne	.title_audio_play_note
    201  f390
    202  f390							; Loop our audio step
    203  f390		       a0 00		      ldy	#0
    204  f392
    205  f392				   .title_audio_play_note
    206  f392
    207  f392							; Save current position
    208  f392		       84 92		      sty	AudioStep
    209  f394
    210  f394							; Basic Melody Line
    211  f394		       b9 b4 f4 	      lda	TitleAudio0,y
    212  f397		       85 17		      sta	AUDF0
    213  f399
    214  f399							; Drums and Bass
    215  f399		       b9 c4 f4 	      lda	TitleTone1,y
    216  f39c		       c9 ff		      cmp	#$FF
    217  f39e		       f0 0e		      beq	.title_audio_play_note_1_mute
    218  f3a0
    219  f3a0		       85 16		      sta	AUDC1
    220  f3a2		       b9 d4 f4 	      lda	TitleAudio1,y
    221  f3a5		       85 18		      sta	AUDF1
    222  f3a7		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    223  f3a9		       85 1a		      sta	AUDV1
    224  f3ab
    225  f3ab		       4c b6 f3 	      jmp	.title_audio_return
    226  f3ae
    227  f3ae				   .title_audio_play_note_1_mute
    228  f3ae
    229  f3ae		       a9 00		      lda	#0
    230  f3b0		       85 18		      sta	AUDF1
    231  f3b2		       85 16		      sta	AUDC1
    232  f3b4		       85 1a		      sta	AUDV1
    233  f3b6
    234  f3b6				   .title_audio_return
    235  f3b6		       60		      rts
    236  f3b7
    237  f3b7				   TitleState
    238  f3b7
    239  f3b7							; Check if Fire Button on controller 1 is released
    240  f3b7		       a5 0c		      lda	INPT4
    241  f3b9		       30 05		      bmi	.title_state_check
    242  f3bb
    243  f3bb				   .title_state_on
    244  f3bb		       a9 01		      lda	#1
    245  f3bd		       85 91		      sta	InputState
    246  f3bf		       60		      rts
    247  f3c0
    248  f3c0				   .title_state_check
    249  f3c0		       a5 91		      lda	InputState
    250  f3c2		       f0 03		      beq	.title_state_return
    251  f3c4
    252  f3c4				   .title_state_next
    253  f3c4							; Button is released, load up game
    254  f3c4		       20 69 fc 	      jsr	GameInit
    255  f3c7
    256  f3c7				   .title_state_return
    257  f3c7		       60		      rts
    258  f3c8
    259  f3c8				   TitleKernel
    260  f3c8
    261  f3c8							; Playfield Control
    262  f3c8		       a5 80		      lda	CtrlPf
    263  f3ca		       29 fe		      and	#%11111110	; No mirroring
    264  f3cc		       85 80		      sta	CtrlPf
    265  f3ce		       85 0a		      sta	CTRLPF
    266  f3d0
    267  f3d0							; Turn on display
    268  f3d0		       a9 00		      lda	#0
    269  f3d2		       85 01		      sta	VBLANK
    270  f3d4
    271  f3d4		       85 02		      sta	WSYNC
    272  f3d6
    273  f3d6				   TitleFrameTopDraw
    274  f3d6
    275  f3d6							; Start Counters
    276  f3d6		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    277  f3d8		       a0 00		      ldy	#0	; Image Counter
    278  f3da
    279  f3da				   .title_frame_top
    280  f3da
    281  f3da							; 76 machine cycles per scanline
    282  f3da		       85 02		      sta	WSYNC
    283  f3dc
    284  f3dc				   .title_frame_top_load		; 66 cycles
    285  f3dc
    286  f3dc							; First half of image
    287  f3dc		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    288  f3df		       85 0d		      sta	PF0	; 4
    289  f3e1		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    290  f3e4		       85 0e		      sta	PF1	; 4
    291  f3e6		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    292  f3e9		       85 0f		      sta	PF2	; 4
    293  f3eb
      0  f3eb					      sleep	6
      1  f3eb				   .CYCLES    SET	6
      2  f3eb
      3  f3eb				  -	      IF	.CYCLES < 2
      4  f3eb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3eb				  -	      ERR
      6  f3eb					      ENDIF
      7  f3eb
      8  f3eb				  -	      IF	.CYCLES & 1
      9  f3eb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3eb				  -	      nop	0
     11  f3eb				  -	      ELSE
     12  f3eb				  -	      bit	VSYNC
     13  f3eb				  -	      ENDIF
     14  f3eb				  -.CYCLES    SET	.CYCLES - 3
     15  f3eb					      ENDIF
     16  f3eb
     17  f3eb					      REPEAT	.CYCLES / 2
     18  f3eb		       ea		      nop
     17  f3eb					      REPEND
     18  f3ec		       ea		      nop
     17  f3ec					      REPEND
     18  f3ed		       ea		      nop
     19  f3ee					      REPEND
    295  f3ee
    296  f3ee							; Second half of image
    297  f3ee		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    298  f3f1		       85 0d		      sta	PF0	; 4
    299  f3f3		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    300  f3f6		       85 0e		      sta	PF1	; 4
    301  f3f8		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    302  f3fb		       85 0f		      sta	PF2	; 4
    303  f3fd
    304  f3fd				   .title_frame_top_index		; 4 cycles
    305  f3fd
    306  f3fd		       ca		      dex		; 2
    307  f3fe		       d0 da		      bne	.title_frame_top	; 2
    308  f400
    309  f400				   .title_frame_top_index_next		; 6 cycles
    310  f400
    311  f400							; Restore scanline counter
    312  f400		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    313  f402
    314  f402		       98		      tya		; 2
    315  f403		       18		      clc		; 2
    316  f404		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    317  f406		       a8		      tay		; 2
    318  f407
    319  f407		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    320  f409		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    321  f40b		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    322  f40d		       85 08		      sta	COLUPF	; 4
    323  f40f		       ea		      nop		; 2
    324  f410		       4c dc f3 	      jmp	.title_frame_top_load	; 3
    325  f413
    326  f413				   .title_frame_top_label_color_skip
    327  f413
    328  f413		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    329  f415		       d0 c3		      bne	.title_frame_top	; 2
    330  f417
    331  f417				   .title_frame_top_clean
    332  f417
    333  f417							; Clear out playfield
    334  f417		       a9 00		      lda	#0
    335  f419		       85 0d		      sta	PF0
    336  f41b		       85 0e		      sta	PF1
    337  f41d		       85 0f		      sta	PF2
    338  f41f
    339  f41f				   TitleWebDraw
    340  f41f		       a9 02		      lda	#%00000010
    341  f421		       85 1d		      sta	ENAM0
    342  f423
    343  f423		       a9 06		      lda	#TITLE_WEB_COLOR
    344  f425		       85 06		      sta	COLUP0
    345  f427
    346  f427		       a2 10		      ldx	#TITLE_GAP_SIZE
    347  f429				   .title_web_gap
    348  f429		       ca		      dex
    349  f42a		       85 02		      sta	WSYNC
    350  f42c		       d0 fb		      bne	.title_web_gap
    351  f42e
    352  f42e				   TitleSpiderDraw
    353  f42e
    354  f42e		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    355  f430
    356  f430		       a5 aa		      lda	SpiderDrawPos
    357  f432		       c9 01		      cmp	#1
    358  f434		       d0 0c		      bne	.title_spider_extra_web_disable
    359  f436
    360  f436				   .title_spider_extra_web_start
    361  f436		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    362  f438				   .title_spider_extra_web_loop
    363  f438		       85 02		      sta	WSYNC
    364  f43a		       ca		      dex
    365  f43b		       d0 fb		      bne	.title_spider_extra_web_loop
    366  f43d
    367  f43d		       88		      dey
    368  f43e		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    369  f440		       d0 f4		      bne	.title_spider_extra_web_start
    370  f442
    371  f442				   .title_spider_extra_web_disable
    372  f442		       a9 00		      lda	#0
    373  f444		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    374  f446
    375  f446		       85 02		      sta	WSYNC
    376  f448
    377  f448		       85 1d		      sta	ENAM0
    378  f44a
    379  f44a							; Check b/w
    380  f44a		       ad 82 02 	      lda	SWCHB
    381  f44d					      REPEAT	4
    382  f44d		       4a		      lsr
    381  f44d					      REPEND
    382  f44e		       4a		      lsr
    381  f44e					      REPEND
    382  f44f		       4a		      lsr
    381  f44f					      REPEND
    382  f450		       4a		      lsr
    383  f451					      REPEND
    384  f451		       90 05		      bcc	.title_spider_bw
    385  f453
    386  f453				   .title_spider_color
    387  f453		       a9 56		      lda	#TITLE_SPIDER_COLOR
    388  f455		       4c 5a f4 	      jmp	.title_spider_color_set
    389  f458				   .title_spider_bw
    390  f458		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    391  f45a				   .title_spider_color_set
    392  f45a		       85 06		      sta	COLUP0
    393  f45c
    394  f45c				   .title_spider
    395  f45c		       b1 a3		      lda	(SpiderPtr),y
    396  f45e		       85 1b		      sta	GRP0
    397  f460		       85 1c		      sta	GRP1
    398  f462
    399  f462				   .title_spider_delay
    400  f462		       ca		      dex
    401  f463		       85 02		      sta	WSYNC
    402  f465		       d0 fb		      bne	.title_spider_delay
    403  f467
    404  f467				   .title_spider_index
    405  f467		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    406  f469		       88		      dey
    407  f46a		       10 f0		      bpl	.title_spider
    408  f46c
    409  f46c				   .title_spider_clean
    410  f46c
    411  f46c							; Clear sprites
    412  f46c		       a9 00		      lda	#0
    413  f46e		       85 1b		      sta	GRP0
    414  f470		       85 1c		      sta	GRP1
    415  f472
    416  f472				   TitleFrameBottomDraw
    417  f472
    418  f472							; Load Frame Color
    419  f472		       a9 06		      lda	#TITLE_WEB_COLOR
    420  f474		       85 08		      sta	COLUPF
    421  f476
    422  f476							; Start Counters
    423  f476		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    424  f478		       a0 00		      ldy	#0	; Image Counter
    425  f47a
    426  f47a				   .title_frame_bottom
    427  f47a
    428  f47a							; 76 machine cycles per scanline
    429  f47a		       85 02		      sta	WSYNC
    430  f47c
    431  f47c				   .title_frame_bottom_load		; 66 cycles
    432  f47c
    433  f47c							; First half of image
    434  f47c		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    435  f47f		       85 0d		      sta	PF0	; 4
    436  f481		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    437  f484		       85 0e		      sta	PF1	; 4
    438  f486		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    439  f489		       85 0f		      sta	PF2	; 4
    440  f48b
      0  f48b					      sleep	6
      1  f48b				   .CYCLES    SET	6
      2  f48b
      3  f48b				  -	      IF	.CYCLES < 2
      4  f48b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f48b				  -	      ERR
      6  f48b					      ENDIF
      7  f48b
      8  f48b				  -	      IF	.CYCLES & 1
      9  f48b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f48b				  -	      nop	0
     11  f48b				  -	      ELSE
     12  f48b				  -	      bit	VSYNC
     13  f48b				  -	      ENDIF
     14  f48b				  -.CYCLES    SET	.CYCLES - 3
     15  f48b					      ENDIF
     16  f48b
     17  f48b					      REPEAT	.CYCLES / 2
     18  f48b		       ea		      nop
     17  f48b					      REPEND
     18  f48c		       ea		      nop
     17  f48c					      REPEND
     18  f48d		       ea		      nop
     19  f48e					      REPEND
    442  f48e
    443  f48e							; Second half of image
    444  f48e		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    445  f491		       85 0d		      sta	PF0	; 4
    446  f493		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    447  f496		       85 0e		      sta	PF1	; 4
    448  f498		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    449  f49b		       85 0f		      sta	PF2	; 4
    450  f49d
    451  f49d				   .title_frame_bottom_index		; 4 cycles
    452  f49d
    453  f49d		       ca		      dex		; 2
    454  f49e		       d0 da		      bne	.title_frame_bottom	; 2
    455  f4a0
    456  f4a0				   .title_frame_bottom_index_next		; 6 cycles
    457  f4a0
    458  f4a0							; Restore scanline counter
    459  f4a0		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    460  f4a2
    461  f4a2		       98		      tya		; 2
    462  f4a3		       18		      clc		; 2
    463  f4a4		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    464  f4a6		       a8		      tay		; 2
    465  f4a7		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    466  f4a9		       d0 cf		      bne	.title_frame_bottom	; 2
    467  f4ab
    468  f4ab				   .title_frame_bottom_clean
    469  f4ab
    470  f4ab							; Clear out playfield
    471  f4ab		       a9 00		      lda	#0
    472  f4ad		       85 0d		      sta	PF0
    473  f4af		       85 0e		      sta	PF1
    474  f4b1		       85 0f		      sta	PF2
    475  f4b3
    476  f4b3				   .title_kernel_return
    477  f4b3		       60		      rts
    478  f4b4
    479  f4b4				   TitleAudio0
    480  f4b4
    481  f4b4		       0f		      .BYTE.b	#15	; B
    482  f4b5		       13		      .BYTE.b	#19	; G
    483  f4b6		       17		      .BYTE.b	#23	; E
    484  f4b7		       13		      .BYTE.b	#19	; G
    485  f4b8		       0e		      .BYTE.b	#14	; C
    486  f4b9		       13		      .BYTE.b	#19
    487  f4ba		       17		      .BYTE.b	#23
    488  f4bb		       13		      .BYTE.b	#19
    489  f4bc		       0c		      .BYTE.b	#12	; D
    490  f4bd		       13		      .BYTE.b	#19
    491  f4be		       17		      .BYTE.b	#23
    492  f4bf		       13		      .BYTE.b	#19
    493  f4c0		       0e		      .BYTE.b	#14	; C
    494  f4c1		       13		      .BYTE.b	#19
    495  f4c2		       17		      .BYTE.b	#23
    496  f4c3		       13		      .BYTE.b	#19
    497  f4c4
    498  f4c4				   TitleTone1
    499  f4c4
    500  f4c4		       0f		      .BYTE.b	#15	; Electronic Rumble
    501  f4c5		       ff		      .BYTE.b	#$FF
    502  f4c6		       01		      .BYTE.b	#1	; Low Pure Tone
    503  f4c7		       01		      .BYTE.b	#1
    504  f4c8		       08		      .BYTE.b	#8	; White Noise
    505  f4c9		       01		      .BYTE.b	#1
    506  f4ca		       01		      .BYTE.b	#1
    507  f4cb		       ff		      .BYTE.b	#$FF
    508  f4cc		       ff		      .BYTE.b	#$FF
    509  f4cd		       0f		      .BYTE.b	#15
    510  f4ce		       ff		      .BYTE.b	#$FF
    511  f4cf		       ff		      .BYTE.b	#$FF
    512  f4d0		       08		      .BYTE.b	#8
    513  f4d1		       ff		      .BYTE.b	#$FF
    514  f4d2		       01		      .BYTE.b	#1
    515  f4d3		       01		      .BYTE.b	#1
    516  f4d4
    517  f4d4				   TitleAudio1
    518  f4d4
    519  f4d4		       1d		      .BYTE.b	#29	; Kick
    520  f4d5		       ff		      .BYTE.b	#$FF
    521  f4d6		       1f		      .BYTE.b	#31	; C
    522  f4d7		       1f		      .BYTE.b	#31
    523  f4d8		       07		      .BYTE.b	#7	; Snare
    524  f4d9		       1f		      .BYTE.b	#31
    525  f4da		       1f		      .BYTE.b	#31
    526  f4db		       ff		      .BYTE.b	#$FF
    527  f4dc		       ff		      .BYTE.b	#$FF
    528  f4dd		       1d		      .BYTE.b	#29
    529  f4de		       ff		      .BYTE.b	#$FF
    530  f4df		       ff		      .BYTE.b	#$FF
    531  f4e0		       07		      .BYTE.b	#7
    532  f4e1		       ff		      .BYTE.b	#$FF
    533  f4e2		       17		      .BYTE.b	#23	; F
    534  f4e3		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f4e4					      include	"game.asm"
      1  f4e4							;================
      2  f4e4							; Game
      3  f4e4							;================
      4  f4e4
      5  f4e4							; Constants
      6  f4e4
      7  f4e4		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f4e4		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f4e4		       00 09	   GAME_AUDIO_STEP =	9
     10  f4e4		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f4e4		       00 06	   GAME_AUDIO_TONE =	6
     12  f4e4
     13  f4e4							; Object Code
     14  f4e4
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f4e4					      include	"objects/level.asm"
      1  f4e4							;======================
      2  f4e4							; Level Logic
      3  f4e4							;======================
      4  f4e4
      5  f4e4							; Constants
      6  f4e4
      7  f4e4		       00 04	   LEVELS     =	4
      8  f4e4
      9  f4e4				   LevelInit
     10  f4e4
     11  f4e4							; Set beginning level by difficulty switches treated as binary
     12  f4e4		       ad 82 02 	      lda	SWCHB
     13  f4e7					      REPEAT	6
     14  f4e7		       4a		      lsr
     13  f4e7					      REPEND
     14  f4e8		       4a		      lsr
     13  f4e8					      REPEND
     14  f4e9		       4a		      lsr
     13  f4e9					      REPEND
     14  f4ea		       4a		      lsr
     13  f4ea					      REPEND
     14  f4eb		       4a		      lsr
     13  f4eb					      REPEND
     14  f4ec		       4a		      lsr
     15  f4ed					      REPEND
     16  f4ed		       29 03		      and	#%00000011
     17  f4ef		       85 9f		      sta	LevelCurrent
     18  f4f1
     19  f4f1		       20 11 f5 	      jsr	LevelLoad
     20  f4f4
     21  f4f4		       60		      rts
     22  f4f5
     23  f4f5				   LevelUpdate
     24  f4f5
     25  f4f5							; Check if score is high enough
     26  f4f5		       a4 9f		      ldy	LevelCurrent
     27  f4f7		       a5 95		      lda	ScoreValue+1
     28  f4f9		       d9 42 f5 	      cmp	LevelDataScore,y
     29  f4fc		       90 0f		      bcc	.level_update_return
     30  f4fe
     31  f4fe							; Reset score
     32  f4fe		       a9 00		      lda	#0
     33  f500		       85 95		      sta	ScoreValue+1
     34  f502
     35  f502							; Check if we haven't reached the final level
     36  f502		       a5 9f		      lda	LevelCurrent
     37  f504		       c9 03		      cmp	#LEVELS-1
     38  f506		       b0 05		      bcs	.level_update_return
     39  f508
     40  f508		       e6 9f		      inc	LevelCurrent
     41  f50a		       20 11 f5 	      jsr	LevelLoad
     42  f50d
     43  f50d				   .level_update_return
     44  f50d
     45  f50d		       20 23 f5 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     46  f510
     47  f510		       60		      rts
     48  f511
     49  f511				   LevelLoad
     50  f511		       a4 9f		      ldy	LevelCurrent
     51  f513
     52  f513							; Bug Speed
     53  f513		       b9 4e f5 	      lda	LevelDataBug,y
     54  f516		       85 b7		      sta	BugSpeed
     55  f518
     56  f518							; Swatter Wait Time
     57  f518		       b9 52 f5 	      lda	LevelDataSwatterWait,y
     58  f51b		       85 c6		      sta	SwatterWaitTime
     59  f51d
     60  f51d							; Swatter Hit Damage
     61  f51d		       b9 56 f5 	      lda	LevelDataSwatterDamage,y
     62  f520		       85 c7		      sta	SwatterHitDamage
     63  f522
     64  f522		       60		      rts
     65  f523
     66  f523				   LevelLoadColor
     67  f523		       a4 9f		      ldy	LevelCurrent
     68  f525
     69  f525							; check b/w
     70  f525		       ad 82 02 	      lda	SWCHB
     71  f528					      REPEAT	4
     72  f528		       4a		      lsr
     71  f528					      REPEND
     72  f529		       4a		      lsr
     71  f529					      REPEND
     72  f52a		       4a		      lsr
     71  f52a					      REPEND
     72  f52b		       4a		      lsr
     73  f52c					      REPEND
     74  f52c		       90 0b		      bcc	.level_load_bw
     75  f52e
     76  f52e				   .level_load_color
     77  f52e
     78  f52e							; Background Color
     79  f52e		       b9 46 f5 	      lda	LevelDataBk,y
     80  f531		       85 a1		      sta	WebColor+0
     81  f533
     82  f533							; Web Color
     83  f533		       b9 4a f5 	      lda	LevelDataPf,y
     84  f536		       85 a2		      sta	WebColor+1
     85  f538
     86  f538		       60		      rts
     87  f539
     88  f539				   .level_load_bw
     89  f539
     90  f539							; Background Color
     91  f539		       a9 00		      lda	#WEB_BG_COLOR
     92  f53b		       85 a1		      sta	WebColor+0
     93  f53d
     94  f53d							; Web Color
     95  f53d		       a9 02		      lda	#WEB_FG_COLOR
     96  f53f		       85 a2		      sta	WebColor+1
     97  f541
     98  f541		       60		      rts
     99  f542
    100  f542				   LevelDataScore		; Score needed
    101  f542		       0a		      .BYTE.b	#10
    102  f543		       14		      .BYTE.b	#20
    103  f544		       28		      .BYTE.b	#40
    104  f545		       63		      .BYTE.b	#99
    105  f546
    106  f546				   LevelDataBk		; Background Color
    107  f546		       00		      .BYTE.b	#$00
    108  f547		       60		      .BYTE.b	#$60
    109  f548		       50		      .BYTE.b	#$50
    110  f549		       30		      .BYTE.b	#$30
    111  f54a
    112  f54a				   LevelDataPf		; Web Color
    113  f54a		       06		      .BYTE.b	#$06
    114  f54b		       64		      .BYTE.b	#$64
    115  f54c		       54		      .BYTE.b	#$54
    116  f54d		       34		      .BYTE.b	#$34
    117  f54e
    118  f54e				   LevelDataBug 		; Bug Speed
    119  f54e		       02		      .BYTE.b	#2
    120  f54f		       03		      .BYTE.b	#3
    121  f550		       04		      .BYTE.b	#4
    122  f551		       05		      .BYTE.b	#5
    123  f552
    124  f552				   LevelDataSwatterWait 		; Swatter Wait Time Min (adds random 0-128)
    125  f552		       b4		      .BYTE.b	#180
    126  f553		       96		      .BYTE.b	#150
    127  f554		       78		      .BYTE.b	#120
    128  f555		       3c		      .BYTE.b	#60
    129  f556
    130  f556				   LevelDataSwatterDamage		; Swatter Damage
    131  f556		       10		      .BYTE.b	#$10
    132  f557		       18		      .BYTE.b	#$18
    133  f558		       20		      .BYTE.b	#$20
    134  f559		       40		      .BYTE.b	#$40
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f55a					      include	"objects/score.asm"
      1  f55a							;======================
      2  f55a							; Score (playfield)
      3  f55a							;======================
      4  f55a
      5  f55a							; Constants
      6  f55a
      7  f55a		       00 00	   SCORE_BG_COLOR =	#$00
      8  f55a		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f55a		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f55a		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f55a		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f55a		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f55a
     14  f55a		       00 05	   SCORE_LABEL_SIZE =	5
     15  f55a		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f55a		       00 02	   SCORE_LINE_SIZE =	2
     17  f55a		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f55a
     19  f55a							; Initialization
     20  f55a
     21  f55a				   ScoreInit
     22  f55a
     23  f55a							; Health Score
     24  f55a		       a9 ff		      lda	#$ff
     25  f55c		       85 94		      sta	ScoreValue+0
     26  f55e
     27  f55e							; Game Score
     28  f55e		       a9 00		      lda	#0
     29  f560		       85 95		      sta	ScoreValue+1
     30  f562
     31  f562		       60		      rts
     32  f563
     33  f563							; Frame Update
     34  f563
     35  f563				   ScoreUpdate
     36  f563
     37  f563							; Current Level Digits
     38  f563		       a5 9f		      lda	LevelCurrent
     39  f565		       18		      clc
     40  f566		       69 01		      adc	#1
     41  f568
     42  f568		       20 21 f0 	      jsr	BinBcdConvert
     43  f56b
     44  f56b							; Only use first byte
     45  f56b		       8a		      txa
     46  f56c		       29 0f		      and	#$0f
     47  f56e		       a8		      tay
     48  f56f		       8a		      txa
     49  f570		       29 f0		      and	#$f0
     50  f572					      REPEAT	4
     51  f572		       4a		      lsr
     50  f572					      REPEND
     51  f573		       4a		      lsr
     50  f573					      REPEND
     51  f574		       4a		      lsr
     50  f574					      REPEND
     51  f575		       4a		      lsr
     52  f576					      REPEND
     53  f576		       aa		      tax
     54  f577
     55  f577							; Adjust index positions by multiplying by 5
     56  f577		       8a		      txa
     57  f578		       85 83		      sta	Temp
     58  f57a		       0a		      asl
     59  f57b		       0a		      asl
     60  f57c		       65 83		      adc	Temp
     61  f57e		       85 98		      sta	ScoreDigitTens
     62  f580
     63  f580		       98		      tya
     64  f581		       85 83		      sta	Temp
     65  f583		       0a		      asl
     66  f584		       0a		      asl
     67  f585		       65 83		      adc	Temp
     68  f587		       85 96		      sta	ScoreDigitOnes
     69  f589
     70  f589							; Score Digits
     71  f589		       a5 95		      lda	ScoreValue+1
     72  f58b
     73  f58b		       20 21 f0 	      jsr	BinBcdConvert
     74  f58e
     75  f58e							; Only use first byte
     76  f58e		       8a		      txa
     77  f58f		       29 0f		      and	#$0f
     78  f591		       a8		      tay
     79  f592		       8a		      txa
     80  f593		       29 f0		      and	#$f0
     81  f595					      REPEAT	4
     82  f595		       4a		      lsr
     81  f595					      REPEND
     82  f596		       4a		      lsr
     81  f596					      REPEND
     82  f597		       4a		      lsr
     81  f597					      REPEND
     82  f598		       4a		      lsr
     83  f599					      REPEND
     84  f599		       aa		      tax
     85  f59a
     86  f59a							; Adjust index positions by multiplying by 5
     87  f59a		       8a		      txa
     88  f59b		       85 83		      sta	Temp
     89  f59d		       0a		      asl
     90  f59e		       0a		      asl
     91  f59f		       65 83		      adc	Temp
     92  f5a1		       85 99		      sta	ScoreDigitTens+1
     93  f5a3
     94  f5a3		       98		      tya
     95  f5a4		       85 83		      sta	Temp
     96  f5a6		       0a		      asl
     97  f5a7		       0a		      asl
     98  f5a8		       65 83		      adc	Temp
     99  f5aa		       85 97		      sta	ScoreDigitOnes+1
    100  f5ac
    101  f5ac							; Health Bar
    102  f5ac		       a5 94		      lda	ScoreValue+0
    103  f5ae		       f0 1c		      beq	.score_update_bar_empty
    104  f5b0
    105  f5b0					      REPEAT	4
    106  f5b0		       4a		      lsr
    105  f5b0					      REPEND
    106  f5b1		       4a		      lsr
    105  f5b1					      REPEND
    106  f5b2		       4a		      lsr
    105  f5b2					      REPEND
    106  f5b3		       4a		      lsr
    107  f5b4					      REPEND
    108  f5b4		       c9 08		      cmp	#8
    109  f5b6		       b0 09		      bcs	.score_update_bar_top
    110  f5b8
    111  f5b8				   .score_update_bar_bottom
    112  f5b8		       aa		      tax
    113  f5b9		       bd df f6 	      lda	ScoreBar,x
    114  f5bc		       a0 00		      ldy	#$00
    115  f5be		       4c d0 f5 	      jmp	.score_update_bar_store
    116  f5c1
    117  f5c1				   .score_update_bar_top
    118  f5c1		       29 07		      and	#%00000111
    119  f5c3		       aa		      tax
    120  f5c4		       a9 7f		      lda	#$7f
    121  f5c6		       bc e7 f6 	      ldy	ScoreBarFlip,x
    122  f5c9		       4c d0 f5 	      jmp	.score_update_bar_store
    123  f5cc
    124  f5cc				   .score_update_bar_empty
    125  f5cc		       a9 00		      lda	#0
    126  f5ce		       a0 00		      ldy	#0
    127  f5d0
    128  f5d0				   .score_update_bar_store
    129  f5d0		       85 9d		      sta	ScoreBarGfx+0
    130  f5d2		       84 9e		      sty	ScoreBarGfx+1
    131  f5d4
    132  f5d4				   .score_update_end
    133  f5d4		       60		      rts
    134  f5d5
    135  f5d5							; Draw loop (uses SCORE_LINES scanlines)
    136  f5d5
    137  f5d5				   ScoreDraw
    138  f5d5
    139  f5d5							; Load Colors
    140  f5d5		       a9 00		      lda	#SCORE_BG_COLOR
    141  f5d7		       85 09		      sta	COLUBK
    142  f5d9		       a9 06		      lda	#SCORE_LABEL_COLOR
    143  f5db		       85 08		      sta	COLUPF
    144  f5dd		       85 06		      sta	COLUP0
    145  f5df		       85 07		      sta	COLUP1
    146  f5e1
    147  f5e1							; Set Non-Mirror
    148  f5e1		       a5 80		      lda	CtrlPf
    149  f5e3		       29 fc		      and	#%11111100
    150  f5e5		       09 02		      ora	#%00000010
    151  f5e7		       85 80		      sta	CtrlPf
    152  f5e9		       85 0a		      sta	CTRLPF
    153  f5eb
    154  f5eb		       a2 00		      ldx	#0
    155  f5ed				   .score_draw_label
    156  f5ed
    157  f5ed		       85 02		      sta	WSYNC
    158  f5ef
    159  f5ef							; First half of image
    160  f5ef		       bd 20 f1 	      lda	ScoreLabel+0,x	; 4
    161  f5f2		       85 0d		      sta	PF0	; 3
    162  f5f4		       bd 21 f1 	      lda	ScoreLabel+1,x
    163  f5f7		       85 0e		      sta	PF1
    164  f5f9		       bd 22 f1 	      lda	ScoreLabel+2,x
    165  f5fc		       85 0f		      sta	PF2
    166  f5fe
      0  f5fe					      sleep	8
      1  f5fe				   .CYCLES    SET	8
      2  f5fe
      3  f5fe				  -	      IF	.CYCLES < 2
      4  f5fe				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5fe				  -	      ERR
      6  f5fe					      ENDIF
      7  f5fe
      8  f5fe				  -	      IF	.CYCLES & 1
      9  f5fe				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5fe				  -	      nop	0
     11  f5fe				  -	      ELSE
     12  f5fe				  -	      bit	VSYNC
     13  f5fe				  -	      ENDIF
     14  f5fe				  -.CYCLES    SET	.CYCLES - 3
     15  f5fe					      ENDIF
     16  f5fe
     17  f5fe					      REPEAT	.CYCLES / 2
     18  f5fe		       ea		      nop
     17  f5fe					      REPEND
     18  f5ff		       ea		      nop
     17  f5ff					      REPEND
     18  f600		       ea		      nop
     17  f600					      REPEND
     18  f601		       ea		      nop
     19  f602					      REPEND
    168  f602
    169  f602							; Second half of image
    170  f602							;lda ScoreLabel+3,x ; 4
    171  f602		       a9 00		      lda	#0	; 2
    172  f604		       85 0d		      sta	PF0	; 3
    173  f606		       bd 24 f1 	      lda	ScoreLabel+4,x
    174  f609		       85 0e		      sta	PF1
    175  f60b		       bd 25 f1 	      lda	ScoreLabel+5,x
    176  f60e		       85 0f		      sta	PF2
    177  f610
    178  f610		       8a		      txa
    179  f611		       18		      clc
    180  f612		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    181  f614		       aa		      tax
    182  f615		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    183  f617		       d0 d4		      bne	.score_draw_label
    184  f619
    185  f619							; Clear labels and setup color
    186  f619		       a9 00		      lda	#0
    187  f61b		       85 0d		      sta	PF0
    188  f61d		       85 0e		      sta	PF1
    189  f61f		       85 0f		      sta	PF2
    190  f621
    191  f621		       85 02		      sta	WSYNC
    192  f623
    193  f623							; Load Colors
    194  f623		       ad 82 02 	      lda	SWCHB
    195  f626					      REPEAT	4
    196  f626		       4a		      lsr
    195  f626					      REPEND
    196  f627		       4a		      lsr
    195  f627					      REPEND
    196  f628		       4a		      lsr
    195  f628					      REPEND
    196  f629		       4a		      lsr
    197  f62a					      REPEND
    198  f62a		       90 0d		      bcc	.score_draw_bw
    199  f62c
    200  f62c				   .score_draw_color
    201  f62c		       a9 44		      lda	#SCORE_LEVEL_COLOR
    202  f62e		       85 08		      sta	COLUPF
    203  f630		       85 06		      sta	COLUP0
    204  f632		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    205  f634		       85 07		      sta	COLUP1
    206  f636
    207  f636		       4c 43 f6 	      jmp	.score_draw_digit_start
    208  f639
    209  f639				   .score_draw_bw
    210  f639		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    211  f63b		       85 08		      sta	COLUPF
    212  f63d		       85 06		      sta	COLUP0
    213  f63f		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    214  f641		       85 07		      sta	COLUP1
    215  f643
    216  f643				   .score_draw_digit_start
    217  f643
    218  f643		       85 02		      sta	WSYNC
    219  f645
    220  f645							; Prepare initial line
    221  f645
    222  f645							; Level
    223  f645		       a4 98		      ldy	ScoreDigitTens
    224  f647		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    225  f64a		       29 f0		      and	#$f0
    226  f64c		       85 9a		      sta	ScoreDigitGfx
    227  f64e
    228  f64e		       a4 96		      ldy	ScoreDigitOnes
    229  f650		       b9 bc f0 	      lda	ScoreDigits,y
    230  f653		       29 f0		      and	#$f0
    231  f655		       85 9b		      sta	ScoreDigitGfx+1
    232  f657
    233  f657							; Score
    234  f657		       a4 99		      ldy	ScoreDigitTens+1
    235  f659		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    236  f65c		       29 0f		      and	#$0f
    237  f65e		       85 9c		      sta	ScoreDigitGfx+2
    238  f660
    239  f660		       a4 97		      ldy	ScoreDigitOnes+1
    240  f662		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    241  f665		       29 f0		      and	#$f0
    242  f667		       05 9c		      ora	ScoreDigitGfx+2
    243  f669		       85 9c		      sta	ScoreDigitGfx+2
    244  f66b
    245  f66b		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    246  f66d		       a5 9a		      lda	ScoreDigitGfx
    247  f66f		       85 02		      sta	WSYNC
    248  f671				   .score_draw_digit
    249  f671
    250  f671							;lda ScoreDigitGfx
    251  f671		       85 0d		      sta	PF0
    252  f673		       a5 9b		      lda	ScoreDigitGfx+1
    253  f675		       85 0e		      sta	PF1
    254  f677		       a5 9c		      lda	ScoreDigitGfx+2
    255  f679		       85 0f		      sta	PF2
    256  f67b
    257  f67b							; Begin preparing next line
    258  f67b		       e6 96		      inc	ScoreDigitOnes
    259  f67d		       e6 98		      inc	ScoreDigitTens
    260  f67f		       e6 97		      inc	ScoreDigitOnes+1
    261  f681		       e6 99		      inc	ScoreDigitTens+1
    262  f683
    263  f683		       a9 00		      lda	#0
    264  f685		       85 0d		      sta	PF0
    265  f687		       a5 9d		      lda	ScoreBarGfx+0
    266  f689		       85 0e		      sta	PF1
    267  f68b		       a5 9e		      lda	ScoreBarGfx+1
    268  f68d		       85 0f		      sta	PF2
    269  f68f
    270  f68f							; Level 1st Digit
    271  f68f		       a4 98		      ldy	ScoreDigitTens
    272  f691		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    273  f694		       29 f0		      and	#$f0
    274  f696		       85 83		      sta	Temp
    275  f698
    276  f698							; Score 1st Digit
    277  f698		       a4 99		      ldy	ScoreDigitTens+1
    278  f69a		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    279  f69d		       29 0f		      and	#$0f
    280  f69f		       85 84		      sta	Temp+1
    281  f6a1
    282  f6a1		       a5 9a		      lda	ScoreDigitGfx
    283  f6a3		       85 0d		      sta	PF0
    284  f6a5		       a5 9b		      lda	ScoreDigitGfx+1
    285  f6a7		       85 0e		      sta	PF1
    286  f6a9		       a5 9c		      lda	ScoreDigitGfx+2
    287  f6ab		       85 0f		      sta	PF2
    288  f6ad
    289  f6ad							; Level 2nd Digit (and transfer)
    290  f6ad		       a4 96		      ldy	ScoreDigitOnes
    291  f6af		       b9 bc f0 	      lda	ScoreDigits,y
    292  f6b2		       29 f0		      and	#$f0
    293  f6b4		       85 9b		      sta	ScoreDigitGfx+1
    294  f6b6
      0  f6b6					      sleep	3
      1  f6b6				   .CYCLES    SET	3
      2  f6b6
      3  f6b6				  -	      IF	.CYCLES < 2
      4  f6b6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6b6				  -	      ERR
      6  f6b6					      ENDIF
      7  f6b6
      8  f6b6					      IF	.CYCLES & 1
      9  f6b6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6b6		       04 00		      nop	0
     11  f6b8				  -	      ELSE
     12  f6b8				  -	      bit	VSYNC
     13  f6b8					      ENDIF
     14  f6b8				   .CYCLES    SET	.CYCLES - 3
     15  f6b8					      ENDIF
     16  f6b8
     17  f6b8				  -	      REPEAT	.CYCLES / 2
     18  f6b8				  -	      nop
     19  f6b8					      REPEND
    296  f6b8
    297  f6b8		       a9 00		      lda	#0
    298  f6ba		       85 0d		      sta	PF0
    299  f6bc		       a5 9d		      lda	ScoreBarGfx+0
    300  f6be		       85 0e		      sta	PF1
    301  f6c0		       a4 9e		      ldy	ScoreBarGfx+1
    302  f6c2		       84 0f		      sty	PF2
    303  f6c4
    304  f6c4							; Score 2nd Digit (and transfer)
    305  f6c4		       a4 97		      ldy	ScoreDigitOnes+1
    306  f6c6		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    307  f6c9		       29 f0		      and	#$f0
    308  f6cb		       05 84		      ora	Temp+1
    309  f6cd		       85 9c		      sta	ScoreDigitGfx+2
    310  f6cf
    311  f6cf							; Transfer Level 1st Digit
    312  f6cf		       a5 83		      lda	Temp
    313  f6d1		       85 9a		      sta	ScoreDigitGfx
    314  f6d3
    315  f6d3		       ca		      dex
    316  f6d4		       d0 9b		      bne	.score_draw_digit
    317  f6d6
    318  f6d6		       a9 00		      lda	#0
    319  f6d8		       85 0d		      sta	PF0
    320  f6da		       85 0e		      sta	PF1
    321  f6dc		       85 0f		      sta	PF2
    322  f6de
    323  f6de		       60		      rts
    324  f6df
    325  f6df				   ScoreBar
    326  f6df		       40		      .BYTE.b	#%01000000
    327  f6e0		       40		      .BYTE.b	#%01000000
    328  f6e1		       60		      .BYTE.b	#%01100000
    329  f6e2		       70		      .BYTE.b	#%01110000
    330  f6e3		       78		      .BYTE.b	#%01111000
    331  f6e4		       7c		      .BYTE.b	#%01111100
    332  f6e5		       7e		      .BYTE.b	#%01111110
    333  f6e6		       7f		      .BYTE.b	#%01111111
    334  f6e7
    335  f6e7				   ScoreBarFlip
    336  f6e7		       01		      .BYTE.b	#%00000001
    337  f6e8		       03		      .BYTE.b	#%00000011
    338  f6e9		       07		      .BYTE.b	#%00000111
    339  f6ea		       0f		      .BYTE.b	#%00001111
    340  f6eb		       1f		      .BYTE.b	#%00011111
    341  f6ec		       3f		      .BYTE.b	#%00111111
    342  f6ed		       7f		      .BYTE.b	#%01111111
    343  f6ee		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f6ef					      include	"objects/web.asm"
      1  f6ef							;================
      2  f6ef							; Web (Playfield)
      3  f6ef							;================
      4  f6ef
      5  f6ef							; Constants
      6  f6ef
      7  f6ef		       00 00	   WEB_BG_COLOR =	#$00
      8  f6ef		       00 02	   WEB_FG_COLOR =	#$02
      9  f6ef
     10  f6ef		       00 1e	   WEB_SIZE   =	30
     11  f6ef		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f6ef		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f6ef
     14  f6ef							; Scanline Draw
     15  f6ef
     16  f6ef				   WebDrawStart
     17  f6ef
     18  f6ef							; Load Colors
     19  f6ef		       a5 a2		      lda	WebColor+1
     20  f6f1		       85 08		      sta	COLUPF
     21  f6f3
     22  f6f3							; Mirror playfield and use standard playfield color
     23  f6f3		       a5 80		      lda	CtrlPf
     24  f6f5		       29 fc		      and	#%11111100
     25  f6f7		       09 01		      ora	#%00000001
     26  f6f9		       85 80		      sta	CtrlPf
     27  f6fb		       85 0a		      sta	CTRLPF
     28  f6fd
     29  f6fd							; Initialize image index
     30  f6fd		       a9 00		      lda	#0
     31  f6ff		       85 a0		      sta	WebIndex
     32  f701
     33  f701		       60		      rts
     34  f702
     35  f702				   WebClean
     36  f702
     37  f702							; Clear out playfield
     38  f702		       a9 00		      lda	#0
     39  f704		       85 0d		      sta	PF0
     40  f706		       85 0e		      sta	PF1
     41  f708		       85 0f		      sta	PF2
     42  f70a
     43  f70a							; Clear colors
     44  f70a		       85 09		      sta	COLUBK
     45  f70c		       85 08		      sta	COLUPF
     46  f70e
     47  f70e		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f70f					      include	"objects/spider.asm"
      1  f70f							;=================
      2  f70f							; Spider (player0)
      3  f70f							;=================
      4  f70f
      5  f70f							; Constants
      6  f70f
      7  f70f		       00 56	   SPIDER_COLOR =	#$56
      8  f70f		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f70f		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f70f		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f70f
     12  f70f		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f70f		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f70f		       00 02	   SPIDER_VEL_X =	2
     15  f70f		       00 02	   SPIDER_VEL_Y =	2
     16  f70f
     17  f70f							; Initialization
     18  f70f
     19  f70f				   SpiderInit
     20  f70f
     21  f70f							; Initialize Position in center of screen
     22  f70f		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f711		       85 a5		      sta	SpiderPos
     24  f713		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f715		       85 a6		      sta	SpiderPos+1
     26  f717
     27  f717							; Setup Sprite
      0  f717					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f717				   .POINTER   SET	SpiderPtr
      2  f717				   .ADDRESS   SET	SpiderSprite
      3  f717
      4  f717		       a9 98		      LDA	#<.ADDRESS
      5  f719		       85 a3		      STA	.POINTER
      6  f71b		       a9 f1		      LDA	#>.ADDRESS
      7  f71d		       85 a4		      STA	.POINTER+1
      8  f71f
     29  f71f
     30  f71f		       60		      rts
     31  f720
     32  f720							; Frame Update
     33  f720
     34  f720				   SpiderUpdate
     35  f720		       20 27 f7 	      jsr	SpiderControl
     36  f723		       20 0d f8 	      jsr	SpiderCollision
     37  f726		       60		      rts
     38  f727
     39  f727				   SpiderControl
     40  f727
     41  f727							; Control Position
     42  f727		       a6 a5		      ldx	SpiderPos
     43  f729		       a4 a6		      ldy	SpiderPos+1
     44  f72b		       ad 80 02 	      lda	SWCHA
     45  f72e
     46  f72e				   .spider_control_check_right
     47  f72e		       30 02		      bmi	.spider_control_check_left
     48  f730
     49  f730					      REPEAT	#SPIDER_VEL_X
     50  f730		       e8		      inx
     49  f730					      REPEND
     50  f731		       e8		      inx
     51  f732					      REPEND
     52  f732
     53  f732				   .spider_control_check_left
     54  f732		       2a		      rol
     55  f733		       30 02		      bmi	.spider_control_check_down
     56  f735
     57  f735					      REPEAT	#SPIDER_VEL_X
     58  f735		       ca		      dex
     57  f735					      REPEND
     58  f736		       ca		      dex
     59  f737					      REPEND
     60  f737
     61  f737				   .spider_control_check_down
     62  f737		       2a		      rol
     63  f738		       30 02		      bmi	.spider_control_check_up
     64  f73a
     65  f73a					      REPEAT	#SPIDER_VEL_Y
     66  f73a		       88		      dey
     65  f73a					      REPEND
     66  f73b		       88		      dey
     67  f73c					      REPEND
     68  f73c
     69  f73c				   .spider_control_check_up
     70  f73c		       2a		      rol
     71  f73d		       30 02		      bmi	.spider_control_sprite
     72  f73f
     73  f73f					      REPEAT	#SPIDER_VEL_Y
     74  f73f		       c8		      iny
     73  f73f					      REPEND
     74  f740		       c8		      iny
     75  f741					      REPEND
     76  f741
     77  f741				   .spider_control_sprite
     78  f741							; Control Sprite
     79  f741		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     80  f743
     81  f743				   .spider_control_sprite_x
     82  f743		       e4 a5		      cpx	SpiderPos
     83  f745		       90 04		      bcc	.spider_control_sprite_left
     84  f747		       f0 09		      beq	.spider_control_sprite_y
     85  f749		       b0 05		      bcs	.spider_control_sprite_right
     86  f74b
     87  f74b				   .spider_control_sprite_left
     88  f74b		       09 80		      ora	#%10000000
     89  f74d		       4c 52 f7 	      jmp	.spider_control_sprite_y
     90  f750
     91  f750				   .spider_control_sprite_right
     92  f750		       09 40		      ora	#%01000000
     93  f752
     94  f752				   .spider_control_sprite_y
     95  f752		       c4 a6		      cpy	SpiderPos+1
     96  f754		       90 04		      bcc	.spider_control_sprite_down
     97  f756		       f0 09		      beq	.spider_control_sprite_store
     98  f758		       b0 05		      bcs	.spider_control_sprite_up
     99  f75a
    100  f75a				   .spider_control_sprite_down
    101  f75a		       09 10		      ora	#%00010000
    102  f75c		       4c 61 f7 	      jmp	.spider_control_sprite_store
    103  f75f
    104  f75f				   .spider_control_sprite_up
    105  f75f		       09 20		      ora	#%00100000
    106  f761
    107  f761				   .spider_control_sprite_store
    108  f761		       c9 00		      cmp	#%00000000
    109  f763		       f0 02		      beq	.spider_control_boundary
    110  f765		       85 a7		      sta	SpiderCtrl
    111  f767
    112  f767				   .spider_control_boundary
    113  f767							; Check Playfield Boundaries
    114  f767
    115  f767				   .spider_control_boundary_left
    116  f767		       e0 03		      cpx	#SPIDER_VEL_X+1
    117  f769		       b0 05		      bcs	.spider_control_boundary_right
    118  f76b		       a2 03		      ldx	#SPIDER_VEL_X+1
    119  f76d		       4c 76 f7 	      jmp	.spider_control_boundary_top
    120  f770
    121  f770				   .spider_control_boundary_right
    122  f770		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    123  f772		       90 02		      bcc	.spider_control_boundary_top
    124  f774		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    125  f776
    126  f776				   .spider_control_boundary_top
    127  f776		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    128  f778		       b0 05		      bcs	.spider_control_boundary_bottom
    129  f77a		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    130  f77c		       4c 85 f7 	      jmp	.spider_control_store
    131  f77f
    132  f77f				   .spider_control_boundary_bottom
    133  f77f		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    134  f781		       90 02		      bcc	.spider_control_store
    135  f783		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    136  f785
    137  f785				   .spider_control_store
    138  f785							; Store new position
    139  f785		       86 a5		      stx	SpiderPos
    140  f787		       84 a6		      sty	SpiderPos+1
    141  f789
    142  f789							; TODO: Optimize this somehow?
    143  f789				   .spider_control_sprite_assign
    144  f789							; Skip if no change
    145  f789		       c9 00		      cmp	#%00000000
    146  f78b		       f0 7f		      beq	.spider_control_return
    147  f78d
    148  f78d		       a2 00		      ldx	#%00000000	; For reflection
    149  f78f
    150  f78f				   .spider_control_sprite_assign_left
    151  f78f		       c9 80		      cmp	#%10000000
    152  f791		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f793					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f793				   .POINTER   SET	SpiderPtr
      2  f793				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f793
      4  f793		       a9 b8		      LDA	#<.ADDRESS
      5  f795		       85 a3		      STA	.POINTER
      6  f797		       a9 f1		      LDA	#>.ADDRESS
      7  f799		       85 a4		      STA	.POINTER+1
      8  f79b
    154  f79b		       a2 08		      ldx	#%00001000
    155  f79d		       4c 0a f8 	      jmp	.spider_control_reflect
    156  f7a0
    157  f7a0				   .spider_control_sprite_assign_right
    158  f7a0		       c9 40		      cmp	#%01000000
    159  f7a2		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f7a4					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f7a4				   .POINTER   SET	SpiderPtr
      2  f7a4				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f7a4
      4  f7a4		       a9 b8		      LDA	#<.ADDRESS
      5  f7a6		       85 a3		      STA	.POINTER
      6  f7a8		       a9 f1		      LDA	#>.ADDRESS
      7  f7aa		       85 a4		      STA	.POINTER+1
      8  f7ac
    161  f7ac		       4c 0a f8 	      jmp	.spider_control_reflect
    162  f7af
    163  f7af				   .spider_control_sprite_assign_top
    164  f7af		       c9 20		      cmp	#%00100000
    165  f7b1		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f7b3					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f7b3				   .POINTER   SET	SpiderPtr
      2  f7b3				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f7b3
      4  f7b3		       a9 98		      LDA	#<.ADDRESS
      5  f7b5		       85 a3		      STA	.POINTER
      6  f7b7		       a9 f1		      LDA	#>.ADDRESS
      7  f7b9		       85 a4		      STA	.POINTER+1
      8  f7bb
    167  f7bb		       4c 0a f8 	      jmp	.spider_control_reflect
    168  f7be
    169  f7be				   .spider_control_sprite_assign_bottom
    170  f7be		       c9 10		      cmp	#%00010000
    171  f7c0		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f7c2					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f7c2				   .POINTER   SET	SpiderPtr
      2  f7c2				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f7c2
      4  f7c2		       a9 d8		      LDA	#<.ADDRESS
      5  f7c4		       85 a3		      STA	.POINTER
      6  f7c6		       a9 f1		      LDA	#>.ADDRESS
      7  f7c8		       85 a4		      STA	.POINTER+1
      8  f7ca
    173  f7ca		       4c 0a f8 	      jmp	.spider_control_reflect
    174  f7cd
    175  f7cd				   .spider_control_sprite_assign_top_right
    176  f7cd		       c9 60		      cmp	#%01100000
    177  f7cf		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f7d1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f7d1				   .POINTER   SET	SpiderPtr
      2  f7d1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f7d1
      4  f7d1		       a9 a8		      LDA	#<.ADDRESS
      5  f7d3		       85 a3		      STA	.POINTER
      6  f7d5		       a9 f1		      LDA	#>.ADDRESS
      7  f7d7		       85 a4		      STA	.POINTER+1
      8  f7d9
    179  f7d9		       4c 0a f8 	      jmp	.spider_control_reflect
    180  f7dc
    181  f7dc				   .spider_control_sprite_assign_bottom_right
    182  f7dc		       c9 50		      cmp	#%01010000
    183  f7de		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f7e0					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f7e0				   .POINTER   SET	SpiderPtr
      2  f7e0				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f7e0
      4  f7e0		       a9 c8		      LDA	#<.ADDRESS
      5  f7e2		       85 a3		      STA	.POINTER
      6  f7e4		       a9 f1		      LDA	#>.ADDRESS
      7  f7e6		       85 a4		      STA	.POINTER+1
      8  f7e8
    185  f7e8		       4c 0a f8 	      jmp	.spider_control_reflect
    186  f7eb
    187  f7eb				   .spider_control_sprite_assign_bottom_left
    188  f7eb		       c9 90		      cmp	#%10010000
    189  f7ed		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f7ef					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f7ef				   .POINTER   SET	SpiderPtr
      2  f7ef				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f7ef
      4  f7ef		       a9 c8		      LDA	#<.ADDRESS
      5  f7f1		       85 a3		      STA	.POINTER
      6  f7f3		       a9 f1		      LDA	#>.ADDRESS
      7  f7f5		       85 a4		      STA	.POINTER+1
      8  f7f7
    191  f7f7		       a2 08		      ldx	#%00001000
    192  f7f9		       4c 0a f8 	      jmp	.spider_control_reflect
    193  f7fc
    194  f7fc				   .spider_control_sprite_assign_top_left
    195  f7fc		       c9 a0		      cmp	#%10100000
    196  f7fe		       d0 0a		      bne	.spider_control_reflect
      0  f800					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f800				   .POINTER   SET	SpiderPtr
      2  f800				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f800
      4  f800		       a9 a8		      LDA	#<.ADDRESS
      5  f802		       85 a3		      STA	.POINTER
      6  f804		       a9 f1		      LDA	#>.ADDRESS
      7  f806		       85 a4		      STA	.POINTER+1
      8  f808
    198  f808		       a2 08		      ldx	#%00001000
    199  f80a
    200  f80a				   .spider_control_reflect
    201  f80a		       86 0b		      stx	REFP0
    202  f80c
    203  f80c				   .spider_control_return
    204  f80c		       60		      rts
    205  f80d
    206  f80d				   SpiderCollision
    207  f80d		       a0 56		      ldy	#SPIDER_COLOR
    208  f80f
    209  f80f							; Check b/w
    210  f80f		       ad 82 02 	      lda	SWCHB
    211  f812					      REPEAT	4
    212  f812		       4a		      lsr
    211  f812					      REPEND
    212  f813		       4a		      lsr
    211  f813					      REPEND
    212  f814		       4a		      lsr
    211  f814					      REPEND
    212  f815		       4a		      lsr
    213  f816					      REPEND
    214  f816		       b0 02		      bcs	.spider_collision_m0
    215  f818
    216  f818		       a0 0e		      ldy	#SPIDER_BW_COLOR
    217  f81a
    218  f81a				   .spider_collision_m0
    219  f81a							; Check stun status
    220  f81a		       a6 b8		      ldx	BugStunned
    221  f81c		       e0 00		      cpx	#0
    222  f81e		       d0 04		      bne	.spider_collision_m1
    223  f820
    224  f820							; Collision for M0 (V set)
    225  f820		       24 00		      bit	CXM0P
    226  f822		       70 0d		      bvs	.spider_collision_active
    227  f824
    228  f824				   .spider_collision_m1
    229  f824							; Check stun status
    230  f824		       a6 b9		      ldx	BugStunned+1
    231  f826		       e0 00		      cpx	#0
    232  f828		       d0 14		      bne	.spider_collision_return
    233  f82a
    234  f82a							; Collision for M1 (N set)
    235  f82a		       24 01		      bit	CXM1P
    236  f82c		       30 03		      bmi	.spider_collision_active
    237  f82e
    238  f82e		       4c 3e f8 	      jmp	.spider_collision_return
    239  f831
    240  f831				   .spider_collision_active
    241  f831		       a0 44		      ldy	#SPIDER_COL_COLOR
    242  f833
    243  f833							; Check b/w
    244  f833		       ad 82 02 	      lda	SWCHB
    245  f836					      REPEAT	4
    246  f836		       4a		      lsr
    245  f836					      REPEND
    246  f837		       4a		      lsr
    245  f837					      REPEND
    246  f838		       4a		      lsr
    245  f838					      REPEND
    246  f839		       4a		      lsr
    247  f83a					      REPEND
    248  f83a		       b0 02		      bcs	.spider_collision_return
    249  f83c
    250  f83c		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    251  f83e
    252  f83e				   .spider_collision_return
    253  f83e		       84 a8		      sty	SpiderColor
    254  f840		       60		      rts
    255  f841
    256  f841				   SpiderPosition
    257  f841
    258  f841							; Set Position
    259  f841		       a2 00		      ldx	#0	; Object (player0)
    260  f843		       a5 a5		      lda	SpiderPos	; X Position
    261  f845		       20 00 f0 	      jsr	PosObject
    262  f848
    263  f848		       60		      rts
    264  f849
    265  f849							; Scanline Draw
    266  f849
    267  f849				   SpiderDrawStart
    268  f849
    269  f849							; Set player 0 to be quad size
    270  f849		       a5 81		      lda	NuSiz0
    271  f84b		       29 f8		      and	#%11111000
    272  f84d		       09 05		      ora	#%00000101
    273  f84f		       85 81		      sta	NuSiz0
    274  f851		       85 04		      sta	NUSIZ0
    275  f853
    276  f853							; Set sprite color
    277  f853		       a5 a8		      lda	SpiderColor
    278  f855		       85 06		      sta	COLUP0
    279  f857
    280  f857							; Determine if we need to use vertical delay (odd line)
    281  f857		       a5 a6		      lda	SpiderPos+1	; Y Position
    282  f859		       4a		      lsr
    283  f85a		       b0 05		      bcs	.spider_draw_start_nodelay
    284  f85c
    285  f85c		       a0 01		      ldy	#1
    286  f85e		       4c 63 f8 	      jmp	.spider_draw_start_set_delay
    287  f861
    288  f861				   .spider_draw_start_nodelay
    289  f861		       a0 00		      ldy	#0
    290  f863
    291  f863				   .spider_draw_start_set_delay
    292  f863		       84 25		      sty	VDELP0
    293  f865
    294  f865				   .spider_draw_start_pos
    295  f865							; Calculate starting position
    296  f865		       18		      clc
    297  f866		       69 10		      adc	#SPIDER_SIZE
    298  f868		       85 aa		      sta	SpiderDrawPos
    299  f86a
    300  f86a							; Initialize sprite index and line buffer
    301  f86a		       a9 00		      lda	#0
    302  f86c		       85 a9		      sta	SpiderIndex
    303  f86e		       85 ab		      sta	SpiderLine
    304  f870
    305  f870		       60		      rts
    306  f871
    307  f871				   SpiderClean
    308  f871
    309  f871							; Clear out Player0 sprite
    310  f871		       a9 00		      lda	#0
    311  f873		       85 1b		      sta	GRP0
    312  f875
    313  f875		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f876					      include	"objects/line.asm"
      1  f876							;================
      2  f876							; Line (ball)
      3  f876							;================
      4  f876
      5  f876							; Constants
      6  f876
      7  f876		       00 08	   LINE_SIZE  =	8
      8  f876		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f876		       00 04	   LINE_VEL_X =	4
     10  f876		       00 04	   LINE_VEL_Y =	4
     11  f876
     12  f876		       00 08	   LINE_AUDIO_C =	8
     13  f876		       00 01	   LINE_AUDIO_F =	1
     14  f876		       00 04	   LINE_AUDIO_V =	4
     15  f876
     16  f876		       00 08	   LINE_SAMPLE_LEN =	8
     17  f876		       00 03	   LINE_SAMPLE_C =	3
     18  f876		       00 01	   LINE_SAMPLE_F =	1
     19  f876		       00 04	   LINE_SAMPLE_V =	4
     20  f876
     21  f876							; Initialization
     22  f876
     23  f876				   LineInit
     24  f876
     25  f876							; Initial Line Control
     26  f876		       a9 00		      lda	#0
     27  f878		       85 ae		      sta	LineEnabled
     28  f87a		       85 af		      sta	LinePos+0
     29  f87c		       85 b0		      sta	LinePos+1
     30  f87e		       85 b1		      sta	LineVelocity+0
     31  f880		       85 b2		      sta	LineVelocity+1
     32  f882		       85 b3		      sta	LineStartPos+0
     33  f884		       85 b4		      sta	LineStartPos+1
     34  f886		       85 b5		      sta	LineDrawPos+0
     35  f888		       85 b6		      sta	LineDrawPos+1
     36  f88a
     37  f88a		       60		      rts
     38  f88b
     39  f88b							; Frame Update
     40  f88b
     41  f88b				   LineUpdate
     42  f88b		       20 95 f8 	      jsr	LineControl
     43  f88e		       20 4b f9 	      jsr	LineObject
     44  f891		       20 92 f9 	      jsr	LineCollision
     45  f894		       60		      rts
     46  f895
     47  f895				   LineControl
     48  f895
     49  f895							; Check if Fire Button on controller 1 is pressed
     50  f895		       a5 0c		      lda	INPT4
     51  f897		       30 08		      bmi	.line_control_skip
     52  f899
     53  f899		       24 ae		      bit	LineEnabled
     54  f89b		       30 04		      bmi	.line_control_skip
     55  f89d
     56  f89d		       a5 a7		      lda	SpiderCtrl
     57  f89f		       d0 03		      bne	.line_control_fire
     58  f8a1
     59  f8a1				   .line_control_skip
     60  f8a1		       4c 4a f9 	      jmp	.line_control_return
     61  f8a4
     62  f8a4				   .line_control_fire
     63  f8a4		       20 da f9 	      jsr	LineEnable
     64  f8a7
     65  f8a7				   .line_control_x
     66  f8a7		       a5 a7		      lda	SpiderCtrl
     67  f8a9		       29 c0		      and	#%11000000
     68  f8ab		       f0 0e		      beq	.line_control_x_none
     69  f8ad				   .line_control_x_left
     70  f8ad		       c9 80		      cmp	#%10000000
     71  f8af		       d0 05		      bne	.line_control_x_right
     72  f8b1
     73  f8b1		       a9 fc		      lda	#-LINE_VEL_X
     74  f8b3		       4c bd f8 	      jmp	.line_control_x_store
     75  f8b6				   .line_control_x_right
     76  f8b6		       a9 04		      lda	#LINE_VEL_X
     77  f8b8		       4c bd f8 	      jmp	.line_control_x_store
     78  f8bb				   .line_control_x_none
     79  f8bb		       a9 00		      lda	#0
     80  f8bd				   .line_control_x_store
     81  f8bd		       85 b1		      sta	LineVelocity
     82  f8bf
     83  f8bf				   .line_control_y
     84  f8bf		       a5 a7		      lda	SpiderCtrl
     85  f8c1		       29 30		      and	#%00110000
     86  f8c3		       f0 0e		      beq	.line_control_y_none
     87  f8c5				   .line_control_y_up
     88  f8c5		       c9 20		      cmp	#%00100000
     89  f8c7		       d0 05		      bne	.line_control_y_down
     90  f8c9
     91  f8c9		       a9 04		      lda	#LINE_VEL_Y
     92  f8cb		       4c d5 f8 	      jmp	.line_control_y_store
     93  f8ce				   .line_control_y_down
     94  f8ce		       a9 fc		      lda	#-LINE_VEL_Y
     95  f8d0		       4c d5 f8 	      jmp	.line_control_y_store
     96  f8d3				   .line_control_y_none
     97  f8d3		       a9 00		      lda	#0
     98  f8d5				   .line_control_y_store
     99  f8d5		       85 b2		      sta	LineVelocity+1
    100  f8d7
    101  f8d7				   .line_control_position
    102  f8d7
    103  f8d7		       a2 00		      ldx	#0	; offsetX
    104  f8d9		       a0 00		      ldy	#0	; offsetY
    105  f8db
    106  f8db		       a5 a7		      lda	SpiderCtrl
    107  f8dd		       29 f0		      and	#%11110000
    108  f8df
    109  f8df				   .line_control_position_left
    110  f8df		       c9 80		      cmp	#%10000000
    111  f8e1		       d0 07		      bne	.line_control_position_right
    112  f8e3
    113  f8e3		       a2 00		      ldx	#0
    114  f8e5		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    115  f8e7		       4c 32 f9 	      jmp	.line_control_position_store
    116  f8ea
    117  f8ea				   .line_control_position_right
    118  f8ea		       c9 40		      cmp	#%01000000
    119  f8ec		       d0 07		      bne	.line_control_position_top
    120  f8ee
    121  f8ee		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    122  f8f0		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    123  f8f2		       4c 32 f9 	      jmp	.line_control_position_store
    124  f8f5
    125  f8f5				   .line_control_position_top
    126  f8f5		       c9 20		      cmp	#%00100000
    127  f8f7		       d0 07		      bne	.line_control_position_bottom
    128  f8f9
    129  f8f9		       a2 08		      ldx	#SPIDER_SIZE/2
    130  f8fb		       a0 10		      ldy	#SPIDER_SIZE
    131  f8fd		       4c 32 f9 	      jmp	.line_control_position_store
    132  f900
    133  f900				   .line_control_position_bottom
    134  f900		       c9 10		      cmp	#%00010000
    135  f902		       d0 05		      bne	.line_control_position_top_right
    136  f904
    137  f904		       a2 08		      ldx	#SPIDER_SIZE/2
    138  f906		       4c 32 f9 	      jmp	.line_control_position_store
    139  f909
    140  f909				   .line_control_position_top_right
    141  f909		       c9 60		      cmp	#%01100000
    142  f90b		       d0 07		      bne	.line_control_position_bottom_right
    143  f90d
    144  f90d		       a2 10		      ldx	#SPIDER_SIZE
    145  f90f		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    146  f911		       4c 32 f9 	      jmp	.line_control_position_store
    147  f914
    148  f914				   .line_control_position_bottom_right
    149  f914		       c9 50		      cmp	#%01010000
    150  f916		       d0 07		      bne	.line_control_position_bottom_left
    151  f918
    152  f918		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    153  f91a		       a0 00		      ldy	#0
    154  f91c		       4c 32 f9 	      jmp	.line_control_position_store
    155  f91f
    156  f91f				   .line_control_position_bottom_left
    157  f91f		       c9 90		      cmp	#%10010000
    158  f921		       d0 07		      bne	.line_control_position_top_left
    159  f923
    160  f923							; No Offset
    161  f923		       a2 04		      ldx	#LINE_SIZE/2
    162  f925		       a0 04		      ldy	#LINE_SIZE/2
    163  f927		       4c 32 f9 	      jmp	.line_control_position_store
    164  f92a
    165  f92a				   .line_control_position_top_left
    166  f92a		       c9 a0		      cmp	#%10100000
    167  f92c		       d0 04		      bne	.line_control_position_store
    168  f92e
    169  f92e		       a2 00		      ldx	#0
    170  f930		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    171  f932
    172  f932				   .line_control_position_store
    173  f932
    174  f932							; Apply offsetX to playerX
    175  f932		       a5 a5		      lda	SpiderPos
    176  f934		       86 83		      stx	Temp
    177  f936		       18		      clc
    178  f937		       65 83		      adc	Temp
    179  f939		       aa		      tax
    180  f93a
    181  f93a							; Apply offsetY to playerY
    182  f93a		       a5 a6		      lda	SpiderPos+1
    183  f93c		       84 83		      sty	Temp
    184  f93e		       18		      clc
    185  f93f		       65 83		      adc	Temp
    186  f941		       a8		      tay
    187  f942
    188  f942		       86 af		      stx	LinePos
    189  f944		       84 b0		      sty	LinePos+1
    190  f946		       86 b3		      stx	LineStartPos
    191  f948		       84 b4		      sty	LineStartPos+1
    192  f94a
    193  f94a				   .line_control_return
    194  f94a		       60		      rts
    195  f94b
    196  f94b				   LineObject
    197  f94b
    198  f94b							; Check if line is enabled
    199  f94b		       24 ae		      bit	LineEnabled
    200  f94d		       10 42		      bpl	.line_object_return
    201  f94f
    202  f94f							; Load position
    203  f94f		       a6 af		      ldx	LinePos
    204  f951		       a4 b0		      ldy	LinePos+1
    205  f953
    206  f953				   .line_object_distance
    207  f953
    208  f953							; Check distance from player with absolute value differences
    209  f953
    210  f953				   .line_object_distance_x
    211  f953		       8a		      txa
    212  f954		       18		      clc
    213  f955		       e5 b3		      sbc	LineStartPos
    214  f957		       b0 04		      bcs	.line_object_distance_x_check
    215  f959		       49 ff		      eor	#$FF	; C flag is clear here
    216  f95b		       69 01		      adc	#$01	; form two's complement
    217  f95d				   .line_object_distance_x_check		; Jumps to if positive
    218  f95d		       c9 40		      cmp	#LINE_DISTANCE
    219  f95f		       b0 2d		      bcs	.line_object_disable
    220  f961
    221  f961				   .line_object_distance_y
    222  f961		       98		      tya
    223  f962		       18		      clc
    224  f963		       e5 b4		      sbc	LineStartPos+1
    225  f965		       b0 04		      bcs	.line_object_distance_y_check
    226  f967		       49 ff		      eor	#$FF	; C flag is clear here
    227  f969		       69 01		      adc	#$01	; form two's complement
    228  f96b				   .line_object_distance_y_check		; Jumps to if positive
    229  f96b		       c9 40		      cmp	#LINE_DISTANCE
    230  f96d		       b0 1f		      bcs	.line_object_disable
    231  f96f
    232  f96f				   .line_object_boundary
    233  f96f				   .line_object_boundary_left
    234  f96f		       e0 04		      cpx	#LINE_VEL_X
    235  f971		       90 1b		      bcc	.line_object_disable
    236  f973				   .line_object_boundary_right
    237  f973		       e0 9c		      cpx	#160-LINE_VEL_X
    238  f975		       b0 17		      bcs	.line_object_disable
    239  f977				   .line_object_boundary_bottom
    240  f977		       c0 04		      cpy	#LINE_VEL_Y
    241  f979		       90 13		      bcc	.line_object_disable
    242  f97b				   .line_object_boundary_top
    243  f97b		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    244  f97d		       b0 0f		      bcs	.line_object_disable
    245  f97f
    246  f97f				   .line_object_velocity
    247  f97f
    248  f97f							; Apply Velocity
    249  f97f		       8a		      txa
    250  f980		       18		      clc
    251  f981		       65 b1		      adc	LineVelocity
    252  f983		       85 af		      sta	LinePos
    253  f985
    254  f985		       98		      tya
    255  f986		       18		      clc
    256  f987		       65 b2		      adc	LineVelocity+1
    257  f989		       85 b0		      sta	LinePos+1
    258  f98b
    259  f98b		       4c 91 f9 	      jmp	.line_object_return
    260  f98e
    261  f98e				   .line_object_disable
    262  f98e		       20 e6 f9 	      jsr	LineDisable
    263  f991
    264  f991				   .line_object_return
    265  f991		       60		      rts
    266  f992
    267  f992				   LineCollision
    268  f992
    269  f992		       a9 78		      lda	#BUG_STUN_LENGTH
    270  f994
    271  f994				   .line_collision_m0
    272  f994		       24 04		      bit	CXM0FB
    273  f996		       50 08		      bvc	.line_collision_m1
    274  f998
    275  f998							; Set stun timer
    276  f998		       85 b8		      sta	BugStunned+0
    277  f99a
    278  f99a							; Disable line
    279  f99a		       20 e6 f9 	      jsr	LineDisable
    280  f99d		       4c a9 f9 	      jmp	.line_collision_sample
    281  f9a0
    282  f9a0				   .line_collision_m1
    283  f9a0		       24 05		      bit	CXM1FB
    284  f9a2		       50 08		      bvc	.line_collision_return
    285  f9a4
    286  f9a4							; Set stun timer
    287  f9a4		       85 b9		      sta	BugStunned+1
    288  f9a6
    289  f9a6							; Disable line
    290  f9a6		       20 e6 f9 	      jsr	LineDisable
    291  f9a9
    292  f9a9				   .line_collision_sample
    293  f9a9		       20 08 fa 	      jsr	LineSample
    294  f9ac
    295  f9ac				   .line_collision_return
    296  f9ac		       60		      rts
    297  f9ad
    298  f9ad				   LinePosition
    299  f9ad
    300  f9ad							; Set Line Position
    301  f9ad		       a2 04		      ldx	#4	; Object (ball)
    302  f9af		       a5 af		      lda	LinePos	; X Position
    303  f9b1		       20 00 f0 	      jsr	PosObject
    304  f9b4
    305  f9b4		       60		      rts
    306  f9b5
    307  f9b5							; Scanline Draw
    308  f9b5
    309  f9b5				   LineDrawStart
    310  f9b5
    311  f9b5							; Set ball size to be 4 clocks (4/5 bits)
    312  f9b5		       a5 80		      lda	CtrlPf
    313  f9b7		       29 cf		      and	#%11001111
    314  f9b9		       09 20		      ora	#%00100000
    315  f9bb		       85 80		      sta	CtrlPf
    316  f9bd		       85 0a		      sta	CTRLPF
    317  f9bf
    318  f9bf							; Determine if we need to use vertical delay (oven line)
    319  f9bf		       a5 b0		      lda	LinePos+1
    320  f9c1		       4a		      lsr
    321  f9c2		       90 05		      bcc	.line_draw_start_nodelay
    322  f9c4
    323  f9c4		       a0 01		      ldy	#1
    324  f9c6		       4c cb f9 	      jmp	.line_draw_start_set_delay
    325  f9c9
    326  f9c9				   .line_draw_start_nodelay
    327  f9c9		       a0 00		      ldy	#0
    328  f9cb
    329  f9cb				   .line_draw_start_set_delay
    330  f9cb		       84 27		      sty	VDELBL
    331  f9cd
    332  f9cd				   .line_draw_start_pos
    333  f9cd							; Calculate starting position
    334  f9cd		       18		      clc
    335  f9ce		       85 b5		      sta	LineDrawPos+0
    336  f9d0		       69 04		      adc	#LINE_SIZE/2
    337  f9d2		       85 b6		      sta	LineDrawPos+1
    338  f9d4
    339  f9d4		       60		      rts
    340  f9d5
    341  f9d5				   LineClean
    342  f9d5
    343  f9d5							; Clear out Line
    344  f9d5		       a9 00		      lda	#0
    345  f9d7		       85 1f		      sta	ENABL
    346  f9d9
    347  f9d9		       60		      rts
    348  f9da
    349  f9da				   LineEnable
    350  f9da		       a9 80		      lda	#%10000000
    351  f9dc		       85 ae		      sta	LineEnabled
    352  f9de
    353  f9de		       a5 93		      lda	SampleStep
    354  f9e0		       d0 03		      bne	.line_enable_return
    355  f9e2
    356  f9e2		       20 f2 f9 	      jsr	LineAudioPlay
    357  f9e5
    358  f9e5				   .line_enable_return
    359  f9e5		       60		      rts
    360  f9e6
    361  f9e6				   LineDisable
    362  f9e6		       a9 00		      lda	#0
    363  f9e8		       85 ae		      sta	LineEnabled
    364  f9ea
    365  f9ea		       a5 93		      lda	SampleStep
    366  f9ec		       d0 03		      bne	.line_disable_return
    367  f9ee
    368  f9ee		       20 ff f9 	      jsr	LineAudioMute
    369  f9f1
    370  f9f1				   .line_disable_return
    371  f9f1		       60		      rts
    372  f9f2
    373  f9f2				   LineAudioPlay
    374  f9f2		       a9 08		      lda	#LINE_AUDIO_C
    375  f9f4		       85 16		      sta	AUDC1
    376  f9f6		       a9 01		      lda	#LINE_AUDIO_F
    377  f9f8		       85 18		      sta	AUDF1
    378  f9fa		       a9 04		      lda	#LINE_AUDIO_V
    379  f9fc		       85 1a		      sta	AUDV1
    380  f9fe		       60		      rts
    381  f9ff
    382  f9ff				   LineAudioMute
    383  f9ff		       a9 00		      lda	#0
    384  fa01		       85 1a		      sta	AUDV1
    385  fa03		       85 18		      sta	AUDF1
    386  fa05		       85 16		      sta	AUDC1
    387  fa07		       60		      rts
    388  fa08
    389  fa08				   LineSample
    390  fa08		       a9 08		      lda	#LINE_SAMPLE_LEN
    391  fa0a		       85 93		      sta	SampleStep
    392  fa0c		       a9 03		      lda	#LINE_SAMPLE_C
    393  fa0e		       85 16		      sta	AUDC1
    394  fa10		       a9 01		      lda	#LINE_SAMPLE_F
    395  fa12		       85 18		      sta	AUDF1
    396  fa14		       a9 04		      lda	#LINE_SAMPLE_V
    397  fa16		       85 1a		      sta	AUDV1
    398  fa18		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  fa19					      include	"objects/bug.asm"
      1  fa19							;======================
      2  fa19							; Bugs (missiles 0 & 1)
      3  fa19							;======================
      4  fa19
      5  fa19							; Constants
      6  fa19
      7  fa19		       00 08	   BUG_SIZE   =	8
      8  fa19		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  fa19		       00 78	   BUG_STUN_LENGTH =	120
     10  fa19		       00 04	   BUG_POINTS =	4
     11  fa19
     12  fa19		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  fa19		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  fa19		       00 38	   BUG_STUN_COLOR =	#$38
     15  fa19		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  fa19
     17  fa19		       00 1e	   BUG_SAMPLE_LEN =	30
     18  fa19		       00 03	   BUG_SAMPLE_C =	3
     19  fa19		       00 14	   BUG_SAMPLE_F =	20
     20  fa19		       00 04	   BUG_SAMPLE_V =	4
     21  fa19
     22  fa19		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  fa19		       00 08	   BUG_COL_SAMPLE_C =	8
     24  fa19		       00 08	   BUG_COL_SAMPLE_F =	8
     25  fa19		       00 03	   BUG_COL_SAMPLE_V =	3
     26  fa19
     27  fa19							; Initialization
     28  fa19
     29  fa19				   BugInit
     30  fa19
     31  fa19							; Initialize Bugs
     32  fa19		       a2 01		      ldx	#1
     33  fa1b
     34  fa1b				   .bug_init_loop
     35  fa1b		       20 22 fa 	      jsr	BugReset
     36  fa1e
     37  fa1e		       ca		      dex
     38  fa1f		       10 fa		      bpl	.bug_init_loop
     39  fa21
     40  fa21		       60		      rts
     41  fa22
     42  fa22				   BugReset		; x = bug (0 or 1)
     43  fa22
     44  fa22							; Set random position
     45  fa22		       20 13 f0 	      jsr	Random
     46  fa25
     47  fa25		       a5 86		      lda	Rand8
     48  fa27		       29 7f		      and	#$7f
     49  fa29		       95 ba		      sta	BugPosX,x
     50  fa2b
     51  fa2b		       a5 87		      lda	Rand16
     52  fa2d		       29 7f		      and	#$7f
     53  fa2f		       95 bc		      sta	BugPosY,x
     54  fa31
     55  fa31							; Set as active
     56  fa31		       a9 00		      lda	#0
     57  fa33		       95 b8		      sta	BugStunned,x
     58  fa35
     59  fa35		       60		      rts
     60  fa36
     61  fa36							; Frame Update
     62  fa36
     63  fa36				   BugUpdate
     64  fa36
     65  fa36		       a2 01		      ldx	#1
     66  fa38				   .bug_update_loop
     67  fa38		       86 83		      stx	Temp+0
     68  fa3a
     69  fa3a		       b5 b8		      lda	BugStunned,x
     70  fa3c		       f0 08		      beq	.bug_update_active
     71  fa3e
     72  fa3e				   .bug_update_stunned
     73  fa3e		       d6 b8		      dec	BugStunned,x
     74  fa40		       20 c9 fa 	      jsr	BugStunCollision
     75  fa43		       4c 4c fa 	      jmp	.bug_update_next
     76  fa46
     77  fa46				   .bug_update_active
     78  fa46		       20 52 fa 	      jsr	BugMovement
     79  fa49		       20 b1 fa 	      jsr	BugCollision
     80  fa4c
     81  fa4c				   .bug_update_next
     82  fa4c		       a6 83		      ldx	Temp+0
     83  fa4e		       ca		      dex
     84  fa4f		       10 e7		      bpl	.bug_update_loop
     85  fa51
     86  fa51		       60		      rts
     87  fa52
     88  fa52				   BugMovement
     89  fa52
     90  fa52				   .bug_movement_random
     91  fa52		       20 13 f0 	      jsr	Random
     92  fa55		       29 03		      and	#%00000011
     93  fa57		       85 84		      sta	Temp+1
     94  fa59
     95  fa59				   .bug_movement_load
     96  fa59		       a6 83		      ldx	Temp+0
     97  fa5b
     98  fa5b				   .bug_movement_x
     99  fa5b		       a4 b7		      ldy	BugSpeed
    100  fa5d
    101  fa5d							; Alter X Position
    102  fa5d		       a5 84		      lda	Temp+1
    103  fa5f		       29 01		      and	#%00000001
    104  fa61
    105  fa61				   .bug_movement_x_check
    106  fa61		       c9 01		      cmp	#1
    107  fa63		       d0 08		      bne	.bug_movement_x_right
    108  fa65
    109  fa65				   .bug_movement_x_left
    110  fa65		       d6 ba		      dec	BugPosX,x
    111  fa67		       88		      dey
    112  fa68		       d0 fb		      bne	.bug_movement_x_left
    113  fa6a
    114  fa6a		       4c 72 fa 	      jmp	.bug_movement_y
    115  fa6d
    116  fa6d				   .bug_movement_x_right
    117  fa6d		       f6 ba		      inc	BugPosX,x
    118  fa6f		       88		      dey
    119  fa70		       d0 fb		      bne	.bug_movement_x_right
    120  fa72
    121  fa72				   .bug_movement_y
    122  fa72		       a4 b7		      ldy	BugSpeed
    123  fa74
    124  fa74							; Alter Y Position
    125  fa74		       a5 84		      lda	Temp+1
    126  fa76		       29 02		      and	#%00000010
    127  fa78		       4a		      lsr
    128  fa79
    129  fa79				   .bug_movement_y_check
    130  fa79		       c9 01		      cmp	#1
    131  fa7b		       d0 08		      bne	.bug_movement_y_down
    132  fa7d
    133  fa7d				   .bug_movement_y_up
    134  fa7d		       f6 bc		      inc	BugPosY,x
    135  fa7f		       88		      dey
    136  fa80		       d0 fb		      bne	.bug_movement_y_up
    137  fa82
    138  fa82		       4c 8a fa 	      jmp	.bug_movement_boundary
    139  fa85
    140  fa85				   .bug_movement_y_down
    141  fa85		       d6 bc		      dec	BugPosY,x
    142  fa87		       88		      dey
    143  fa88		       d0 fb		      bne	.bug_movement_y_down
    144  fa8a
    145  fa8a				   .bug_movement_boundary
    146  fa8a		       b5 ba		      lda	BugPosX,x
    147  fa8c		       b4 bc		      ldy	BugPosY,x
    148  fa8e
    149  fa8e				   .bug_movement_boundary_left
    150  fa8e		       c9 18		      cmp	#BUG_BOUNDARY
    151  fa90		       b0 05		      bcs	.bug_movement_boundary_right
    152  fa92		       a9 18		      lda	#BUG_BOUNDARY
    153  fa94		       4c 9d fa 	      jmp	.bug_movement_boundary_top
    154  fa97
    155  fa97				   .bug_movement_boundary_right
    156  fa97		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    157  fa99		       90 02		      bcc	.bug_movement_boundary_top
    158  fa9b		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    159  fa9d
    160  fa9d				   .bug_movement_boundary_top
    161  fa9d		       c0 18		      cpy	#BUG_BOUNDARY
    162  fa9f		       b0 05		      bcs	.bug_movement_boundary_bottom
    163  faa1		       a0 18		      ldy	#BUG_BOUNDARY
    164  faa3		       4c ac fa 	      jmp	.bug_movement_store
    165  faa6
    166  faa6				   .bug_movement_boundary_bottom
    167  faa6		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    168  faa8		       90 02		      bcc	.bug_movement_store
    169  faaa		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    170  faac
    171  faac				   .bug_movement_store
    172  faac		       95 ba		      sta	BugPosX,x
    173  faae		       94 bc		      sty	BugPosY,x
    174  fab0
    175  fab0				   .bug_movement_return
    176  fab0		       60		      rts
    177  fab1
    178  fab1				   BugCollision
    179  fab1
    180  fab1		       e0 01		      cpx	#1
    181  fab3		       f0 05		      beq	.bug_collision_m1
    182  fab5
    183  fab5				   .bug_collision_m0
    184  fab5							; Collision for M0 (V set)
    185  fab5		       24 00		      bit	CXM0P
    186  fab7		       70 06		      bvs	.bug_collision_active
    187  fab9		       60		      rts
    188  faba
    189  faba				   .bug_collision_m1
    190  faba							; Collision for M1 (N set)
    191  faba		       24 01		      bit	CXM1P
    192  fabc		       30 01		      bmi	.bug_collision_active
    193  fabe		       60		      rts
    194  fabf
    195  fabf				   .bug_collision_active
    196  fabf
    197  fabf							; Reduce players score
    198  fabf		       a5 94		      lda	ScoreValue
    199  fac1		       f0 02		      beq	.bug_collision_score_skip
    200  fac3		       c6 94		      dec	ScoreValue
    201  fac5				   .bug_collision_score_skip
    202  fac5
    203  fac5							; Play sound
    204  fac5		       20 29 fb 	      jsr	BugColSample
    205  fac8
    206  fac8		       60		      rts
    207  fac9
    208  fac9				   BugStunCollision
    209  fac9
    210  fac9		       e0 01		      cpx	#1
    211  facb		       f0 05		      beq	.bug_stun_collision_m1
    212  facd
    213  facd				   .bug_stun_collision_m0
    214  facd							; Collision for M0 (V set)
    215  facd		       24 00		      bit	CXM0P
    216  facf		       70 06		      bvs	.bug_stun_collision_active
    217  fad1		       60		      rts
    218  fad2
    219  fad2				   .bug_stun_collision_m1
    220  fad2							; Collision for M1 (N set)
    221  fad2		       24 01		      bit	CXM1P
    222  fad4		       30 01		      bmi	.bug_stun_collision_active
    223  fad6		       60		      rts
    224  fad7
    225  fad7				   .bug_stun_collision_active
    226  fad7							; Add points to score
    227  fad7		       18		      clc
    228  fad8		       a5 95		      lda	ScoreValue+1
    229  fada		       69 04		      adc	#BUG_POINTS
    230  fadc		       85 95		      sta	ScoreValue+1
    231  fade
    232  fade							; Reset bug
    233  fade		       20 22 fa 	      jsr	BugReset
    234  fae1
    235  fae1							; Play sample
    236  fae1		       20 18 fb 	      jsr	BugSample
    237  fae4
    238  fae4		       60		      rts
    239  fae5
    240  fae5							; Horizontal Positioning
    241  fae5
    242  fae5				   BugPosition
    243  fae5
    244  fae5		       a2 02		      ldx	#2
    245  fae7		       a5 ba		      lda	BugPosX+0
    246  fae9		       20 00 f0 	      jsr	PosObject
    247  faec
    248  faec		       a2 03		      ldx	#3
    249  faee		       a5 bb		      lda	BugPosX+1
    250  faf0		       20 00 f0 	      jsr	PosObject
    251  faf3
    252  faf3		       60		      rts
    253  faf4
    254  faf4							; Scanline Draw
    255  faf4
    256  faf4				   BugDrawStart
    257  faf4
    258  faf4		       a0 01		      ldy	#1
    259  faf6				   .bug_draw_start_loop
    260  faf6
    261  faf6							; Set missile 0 & 1 to be 8 clock size
    262  faf6		       b9 81 00 	      lda	NuSiz0,y
    263  faf9		       09 30		      ora	#%00110000
    264  fafb		       99 81 00 	      sta	NuSiz0,y
    265  fafe		       99 04 00 	      sta	NUSIZ0,y
    266  fb01
    267  fb01							; Setup half scanline positions
    268  fb01		       b9 bc 00 	      lda	BugPosY,y
    269  fb04		       4a		      lsr
    270  fb05		       99 be 00 	      sta	BugDrawPosBottom,y
    271  fb08
    272  fb08		       69 04		      adc	#BUG_SIZE/2
    273  fb0a		       99 c0 00 	      sta	BugDrawPosTop,y
    274  fb0d
    275  fb0d		       88		      dey
    276  fb0e		       10 e6		      bpl	.bug_draw_start_loop
    277  fb10
    278  fb10		       60		      rts
    279  fb11
    280  fb11				   BugClean
    281  fb11		       a9 00		      lda	#0
    282  fb13		       85 1d		      sta	ENAM0
    283  fb15		       85 1e		      sta	ENAM1
    284  fb17		       60		      rts
    285  fb18
    286  fb18				   BugSample
    287  fb18		       a9 1e		      lda	#BUG_SAMPLE_LEN
    288  fb1a		       85 93		      sta	SampleStep
    289  fb1c		       a9 03		      lda	#BUG_SAMPLE_C
    290  fb1e		       85 16		      sta	AUDC1
    291  fb20		       a9 14		      lda	#BUG_SAMPLE_F
    292  fb22		       85 18		      sta	AUDF1
    293  fb24		       a9 04		      lda	#BUG_SAMPLE_V
    294  fb26		       85 1a		      sta	AUDV1
    295  fb28		       60		      rts
    296  fb29
    297  fb29				   BugColSample
    298  fb29		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    299  fb2b		       85 93		      sta	SampleStep
    300  fb2d		       a9 08		      lda	#BUG_COL_SAMPLE_C
    301  fb2f		       85 16		      sta	AUDC1
    302  fb31		       a9 08		      lda	#BUG_COL_SAMPLE_F
    303  fb33		       85 18		      sta	AUDF1
    304  fb35		       a9 03		      lda	#BUG_COL_SAMPLE_V
    305  fb37		       85 1a		      sta	AUDV1
    306  fb39		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fb3a					      include	"objects/swatter.asm"
      1  fb3a							;==================
      2  fb3a							; Swatter (player1)
      3  fb3a							;==================
      4  fb3a
      5  fb3a							; Constants
      6  fb3a
      7  fb3a		       00 30	   SWATTER_COLOR =	#$30
      8  fb3a		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fb3a		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fb3a		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fb3a
     12  fb3a		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fb3a		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fb3a
     15  fb3a		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fb3a		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fb3a
     18  fb3a		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fb3a		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fb3a		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fb3a
     22  fb3a		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fb3a		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fb3a		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fb3a		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fb3a		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fb3a
     28  fb3a		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fb3a		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fb3a		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fb3a		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fb3a
     33  fb3a		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fb3a		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fb3a		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fb3a		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fb3a
     38  fb3a							; Initialization
     39  fb3a
     40  fb3a				   SwatterInit
     41  fb3a
     42  fb3a		       20 18 fc 	      jsr	SwatterReset
     43  fb3d
     44  fb3d		       60		      rts
     45  fb3e
     46  fb3e							; Frame Update
     47  fb3e
     48  fb3e				   SwatterUpdate
     49  fb3e
     50  fb3e							; Check b/w
     51  fb3e		       ad 82 02 	      lda	SWCHB
     52  fb41					      REPEAT	4
     53  fb41		       4a		      lsr
     52  fb41					      REPEND
     53  fb42		       4a		      lsr
     52  fb42					      REPEND
     53  fb43		       4a		      lsr
     52  fb43					      REPEND
     53  fb44		       4a		      lsr
     54  fb45					      REPEND
     55  fb45		       90 10		      bcc	.swatter_update_bw
     56  fb47
     57  fb47				   .swatter_update_color
     58  fb47		       a5 c4		      lda	SwatterState
     59  fb49		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     60  fb4b		       d0 05		      bne	.swatter_update_color_hold
     61  fb4d				   .swatter_update_color_active
     62  fb4d		       a9 30		      lda	#SWATTER_COLOR
     63  fb4f		       4c 64 fb 	      jmp	.swatter_update_color_set
     64  fb52				   .swatter_update_color_hold
     65  fb52		       a9 36		      lda	#SWATTER_HOLD_COLOR
     66  fb54		       4c 64 fb 	      jmp	.swatter_update_color_set
     67  fb57
     68  fb57				   .swatter_update_bw
     69  fb57		       a5 c4		      lda	SwatterState
     70  fb59		       c9 80		      cmp	#SWATTER_STATE_HOLD
     71  fb5b		       d0 05		      bne	.swatter_update_bw_active
     72  fb5d				   .swatter_update_bw_hold
     73  fb5d		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     74  fb5f		       4c 64 fb 	      jmp	.swatter_update_color_set
     75  fb62				   .swatter_update_bw_active
     76  fb62		       a9 0e		      lda	#SWATTER_BW_COLOR
     77  fb64
     78  fb64				   .swatter_update_color_set
     79  fb64		       85 c5		      sta	SwatterColor
     80  fb66
     81  fb66				   .swatter_update_hold_sample
     82  fb66		       a4 c4		      ldy	SwatterState
     83  fb68		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fb6a		       d0 0f		      bne	.swatter_update_state
     85  fb6c
     86  fb6c		       c6 cb		      dec	SwatterSampleCount
     87  fb6e		       d0 0b		      bne	.swatter_update_state
     88  fb70
     89  fb70		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     90  fb72		       85 cb		      sta	SwatterSampleCount
     91  fb74
     92  fb74		       c6 cc		      dec	SwatterSampleF
     93  fb76		       a4 cc		      ldy	SwatterSampleF
     94  fb78		       20 38 fc 	      jsr	SwatterHoldSample
     95  fb7b
     96  fb7b				   .swatter_update_state
     97  fb7b		       a6 90		      ldx	FrameTimer+1
     98  fb7d		       e0 00		      cpx	#0
     99  fb7f		       d0 2d		      bne	.swatter_update_collision
    100  fb81
    101  fb81		       a4 c4		      ldy	SwatterState
    102  fb83		       c0 00		      cpy	#SWATTER_STATE_WAIT
    103  fb85		       f0 0a		      beq	.swatter_update_state_wait
    104  fb87
    105  fb87		       c0 80		      cpy	#SWATTER_STATE_HOLD
    106  fb89		       f0 18		      beq	.swatter_update_state_hold
    107  fb8b
    108  fb8b							; Else we're at the end of the active state
    109  fb8b		       20 18 fc 	      jsr	SwatterReset
    110  fb8e		       4c bd fb 	      jmp	.swatter_update_return
    111  fb91
    112  fb91				   .swatter_update_state_wait
    113  fb91		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    114  fb93		       84 cc		      sty	SwatterSampleF
    115  fb95		       20 38 fc 	      jsr	SwatterHoldSample
    116  fb98
    117  fb98		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    118  fb9a		       85 cb		      sta	SwatterSampleCount
    119  fb9c
    120  fb9c		       a9 80		      lda	#SWATTER_STATE_HOLD
    121  fb9e		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    122  fba0		       4c aa fb 	      jmp	.swatter_update_state_set
    123  fba3
    124  fba3				   .swatter_update_state_hold
    125  fba3		       20 47 fc 	      jsr	SwatterActiveSample
    126  fba6
    127  fba6		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    128  fba8		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    129  fbaa
    130  fbaa				   .swatter_update_state_set
    131  fbaa		       85 c4		      sta	SwatterState
    132  fbac		       86 90		      stx	FrameTimer+1
    133  fbae
    134  fbae				   .swatter_update_collision
    135  fbae							; Check 1 frame after active
    136  fbae		       a5 c4		      lda	SwatterState
    137  fbb0		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    138  fbb2		       d0 09		      bne	.swatter_update_return
    139  fbb4		       a6 90		      ldx	FrameTimer+1
    140  fbb6		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    141  fbb8		       d0 03		      bne	.swatter_update_return
    142  fbba
    143  fbba		       20 be fb 	      jsr	SwatterCollision
    144  fbbd
    145  fbbd				   .swatter_update_return
    146  fbbd		       60		      rts
    147  fbbe
    148  fbbe				   SwatterCollision
    149  fbbe		       24 00		      bit	CXM0P
    150  fbc0		       30 09		      bmi	.swatter_collision_m0
    151  fbc2
    152  fbc2		       24 01		      bit	CXM1P
    153  fbc4		       70 0a		      bvs	.swatter_collision_m1
    154  fbc6
    155  fbc6		       24 07		      bit	CXPPMM
    156  fbc8		       30 0e		      bmi	.swatter_collision_p0
    157  fbca
    158  fbca		       60		      rts
    159  fbcb
    160  fbcb				   .swatter_collision_m0
    161  fbcb		       a2 00		      ldx	#0
    162  fbcd		       4c d2 fb 	      jmp	.swatter_collision_bug_reset
    163  fbd0
    164  fbd0				   .swatter_collision_m1
    165  fbd0		       a2 01		      ldx	#1
    166  fbd2
    167  fbd2				   .swatter_collision_bug_reset
    168  fbd2		       20 22 fa 	      jsr	BugReset
    169  fbd5		       4c ea fb 	      jmp	.swatter_collision_active
    170  fbd8
    171  fbd8				   .swatter_collision_p0
    172  fbd8
    173  fbd8		       a5 94		      lda	ScoreValue
    174  fbda		       c5 c7		      cmp	SwatterHitDamage
    175  fbdc		       90 08		      bcc	.swatter_collision_p0_zero
    176  fbde		       f0 06		      beq	.swatter_collision_p0_zero
    177  fbe0
    178  fbe0		       18		      clc
    179  fbe1		       e5 c7		      sbc	SwatterHitDamage
    180  fbe3		       4c e8 fb 	      jmp	.swatter_collision_p0_set
    181  fbe6
    182  fbe6				   .swatter_collision_p0_zero
    183  fbe6		       a9 00		      lda	#0
    184  fbe8
    185  fbe8				   .swatter_collision_p0_set
    186  fbe8		       85 94		      sta	ScoreValue
    187  fbea
    188  fbea				   .swatter_collision_active
    189  fbea		       20 58 fc 	      jsr	SwatterHitSample
    190  fbed
    191  fbed		       60		      rts
    192  fbee
    193  fbee				   SwatterPosition
    194  fbee
    195  fbee							; Set Position
    196  fbee		       a2 01		      ldx	#1	; Object (player1)
    197  fbf0		       a5 c2		      lda	SwatterPos	; X Position
    198  fbf2		       20 00 f0 	      jsr	PosObject
    199  fbf5
    200  fbf5		       60		      rts
    201  fbf6
    202  fbf6							; Scanline Draw
    203  fbf6
    204  fbf6				   SwatterDrawStart
    205  fbf6
    206  fbf6							; Set player 1 to be quad size
    207  fbf6		       a5 82		      lda	NuSiz1
    208  fbf8		       29 f8		      and	#%11111000
    209  fbfa		       09 07		      ora	#%00000111
    210  fbfc		       85 82		      sta	NuSiz1
    211  fbfe		       85 05		      sta	NUSIZ1
    212  fc00
    213  fc00							; Set sprite color
    214  fc00		       a5 c5		      lda	SwatterColor
    215  fc02		       85 07		      sta	COLUP1
    216  fc04
    217  fc04							; Note: Doesn't need vertical delay
    218  fc04
    219  fc04							; Calculate starting position
    220  fc04		       a5 c3		      lda	SwatterPos+1	; Y Position
    221  fc06		       4a		      lsr
    222  fc07		       18		      clc
    223  fc08		       69 14		      adc	#SWATTER_SPRITE_SIZE
    224  fc0a		       85 c9		      sta	SwatterDrawPos
    225  fc0c
    226  fc0c							; Initialize sprite index
    227  fc0c		       a9 00		      lda	#0
    228  fc0e		       85 c8		      sta	SwatterIndex
    229  fc10		       85 ca		      sta	SwatterLine
    230  fc12
    231  fc12		       60		      rts
    232  fc13
    233  fc13				   SwatterClean
    234  fc13
    235  fc13							; Clear out Player1 sprite
    236  fc13		       a9 00		      lda	#0
    237  fc15		       85 1c		      sta	GRP1
    238  fc17
    239  fc17		       60		      rts
    240  fc18
    241  fc18				   SwatterReset
    242  fc18							; Initialize Swatter State
    243  fc18		       a9 00		      lda	#SWATTER_STATE_WAIT
    244  fc1a		       85 c4		      sta	SwatterState
    245  fc1c
    246  fc1c							; Set Wait Timer
    247  fc1c		       20 13 f0 	      jsr	Random
    248  fc1f		       a5 86		      lda	Rand8
    249  fc21		       29 3f		      and	#$3f
    250  fc23		       18		      clc
    251  fc24		       65 c6		      adc	SwatterWaitTime
    252  fc26		       85 90		      sta	FrameTimer+1
    253  fc28
    254  fc28							; Set Random Position
    255  fc28		       20 13 f0 	      jsr	Random
    256  fc2b		       a5 86		      lda	Rand8	; X Position
    257  fc2d		       29 7f		      and	#$7f
    258  fc2f		       85 c2		      sta	SwatterPos+0
    259  fc31		       a5 87		      lda	Rand16	; Y Position
    260  fc33		       29 7e		      and	#$7e	; Ensure that Y position is even
    261  fc35		       85 c3		      sta	SwatterPos+1
    262  fc37
    263  fc37		       60		      rts
    264  fc38
    265  fc38				   SwatterHoldSample
    266  fc38		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    267  fc3a		       85 93		      sta	SampleStep
    268  fc3c		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    269  fc3e		       85 16		      sta	AUDC1
    270  fc40		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    271  fc42		       85 1a		      sta	AUDV1
    272  fc44
    273  fc44		       84 18		      sty	AUDF1	; Store value of y as frequency
    274  fc46
    275  fc46		       60		      rts
    276  fc47
    277  fc47				   SwatterActiveSample
    278  fc47		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    279  fc49		       85 93		      sta	SampleStep
    280  fc4b		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    281  fc4d		       85 16		      sta	AUDC1
    282  fc4f		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    283  fc51		       85 18		      sta	AUDF1
    284  fc53		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    285  fc55		       85 1a		      sta	AUDV1
    286  fc57		       60		      rts
    287  fc58
    288  fc58				   SwatterHitSample
    289  fc58		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    290  fc5a		       85 93		      sta	SampleStep
    291  fc5c		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    292  fc5e		       85 16		      sta	AUDC1
    293  fc60		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    294  fc62		       85 18		      sta	AUDF1
    295  fc64		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    296  fc66		       85 1a		      sta	AUDV1
    297  fc68		       60		      rts
------- FILE game.asm
     22  fc69
     23  fc69							; Initialization
     24  fc69
     25  fc69				   GameInit
     26  fc69
     27  fc69							; Setup logic and kernel
      0  fc69					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fc69				   .POINTER   SET	VBlankPtr
      2  fc69				   .ADDRESS   SET	GameVerticalBlank
      3  fc69
      4  fc69		       a9 aa		      LDA	#<.ADDRESS
      5  fc6b		       85 88		      STA	.POINTER
      6  fc6d		       a9 fc		      LDA	#>.ADDRESS
      7  fc6f		       85 89		      STA	.POINTER+1
      8  fc71
      0  fc71					      SET_POINTER	KernelPtr, GameKernel
      1  fc71				   .POINTER   SET	KernelPtr
      2  fc71				   .ADDRESS   SET	GameKernel
      3  fc71
      4  fc71		       a9 2e		      LDA	#<.ADDRESS
      5  fc73		       85 8a		      STA	.POINTER
      6  fc75		       a9 fd		      LDA	#>.ADDRESS
      7  fc77		       85 8b		      STA	.POINTER+1
      8  fc79
      0  fc79					      SET_POINTER	OverScanPtr, GameOverScan
      1  fc79				   .POINTER   SET	OverScanPtr
      2  fc79				   .ADDRESS   SET	GameOverScan
      3  fc79
      4  fc79		       a9 d4		      LDA	#<.ADDRESS
      5  fc7b		       85 8c		      STA	.POINTER
      6  fc7d		       a9 fc		      LDA	#>.ADDRESS
      7  fc7f		       85 8d		      STA	.POINTER+1
      8  fc81
     31  fc81
     32  fc81							; Mute Audio
     33  fc81		       a9 00		      lda	#0
     34  fc83							;    sta AUDC0
     35  fc83							;    sta AUDV0
     36  fc83							;    sta AUDF0
     37  fc83		       85 16		      sta	AUDC1
     38  fc85		       85 1a		      sta	AUDV1
     39  fc87		       85 18		      sta	AUDF1
     40  fc89		       85 93		      sta	SampleStep
     41  fc8b
     42  fc8b							; Load Audio Settings
     43  fc8b		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fc8d		       85 19		      sta	AUDV0
     45  fc8f
     46  fc8f							; Make it so that we play the first note immediately
     47  fc8f		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fc91		       85 92		      sta	AudioStep
     49  fc93		       a9 02		      lda	#2
     50  fc95		       85 8f		      sta	FrameTimer
     51  fc97
     52  fc97							; Reset NuSiz
     53  fc97							;    lda #0
     54  fc97							;    sta NuSiz0
     55  fc97							;    sta NUSIZ0
     56  fc97							;    sta NuSiz1
     57  fc97							;    sta NUSIZ1
     58  fc97
     59  fc97							; Initialize Objects
     60  fc97		       20 e4 f4 	      jsr	LevelInit
     61  fc9a		       20 5a f5 	      jsr	ScoreInit
     62  fc9d		       20 0f f7 	      jsr	SpiderInit
     63  fca0		       20 76 f8 	      jsr	LineInit
     64  fca3		       20 19 fa 	      jsr	BugInit
     65  fca6		       20 3a fb 	      jsr	SwatterInit
     66  fca9
     67  fca9		       60		      rts
     68  fcaa
     69  fcaa				   GameVerticalBlank
     70  fcaa
     71  fcaa							; Refresh random values
     72  fcaa		       20 13 f0 	      jsr	Random
     73  fcad
     74  fcad							; Update Objects
     75  fcad		       20 f5 f4 	      jsr	LevelUpdate
     76  fcb0		       20 20 f7 	      jsr	SpiderUpdate
     77  fcb3		       20 8b f8 	      jsr	LineUpdate
     78  fcb6		       20 36 fa 	      jsr	BugUpdate
     79  fcb9		       20 3e fb 	      jsr	SwatterUpdate
     80  fcbc		       20 63 f5 	      jsr	ScoreUpdate
     81  fcbf
     82  fcbf							; Reset Collisions
     83  fcbf		       85 2c		      sta	CXCLR
     84  fcc1
     85  fcc1							; Clear horizontal movement
     86  fcc1		       85 2b		      sta	HMCLR
     87  fcc3
     88  fcc3							; Update Positions
     89  fcc3		       20 41 f8 	      jsr	SpiderPosition
     90  fcc6		       20 ad f9 	      jsr	LinePosition
     91  fcc9		       20 e5 fa 	      jsr	BugPosition
     92  fccc		       20 ee fb 	      jsr	SwatterPosition
     93  fccf
     94  fccf							; Set final x positions
     95  fccf		       85 02		      sta	WSYNC
     96  fcd1		       85 2a		      sta	HMOVE
     97  fcd3
     98  fcd3		       60		      rts
     99  fcd4
    100  fcd4				   GameOverScan
    101  fcd4
    102  fcd4							; Audio Routines
    103  fcd4		       20 f2 fc 	      jsr	GameAudio
    104  fcd7		       20 de fc 	      jsr	GameSample
    105  fcda
    106  fcda							; State Routines
    107  fcda		       20 26 fd 	      jsr	GameDeath
    108  fcdd
    109  fcdd		       60		      rts
    110  fcde
    111  fcde				   GameSample
    112  fcde
    113  fcde		       a6 93		      ldx	SampleStep
    114  fce0		       e0 00		      cpx	#0
    115  fce2		       f0 0b		      beq	.game_sample_return
    116  fce4
    117  fce4		       ca		      dex
    118  fce5		       d0 08		      bne	.game_sample_return
    119  fce7
    120  fce7				   .game_sample_mute
    121  fce7		       a9 00		      lda	#0
    122  fce9		       85 1a		      sta	AUDV1
    123  fceb		       85 18		      sta	AUDF1
    124  fced		       85 16		      sta	AUDC1
    125  fcef
    126  fcef				   .game_sample_return
    127  fcef		       86 93		      stx	SampleStep
    128  fcf1		       60		      rts
    129  fcf2
    130  fcf2				   GameAudio
    131  fcf2
    132  fcf2		       a6 8f		      ldx	FrameTimer
    133  fcf4		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    134  fcf6		       f0 25		      beq	.game_audio_mute_note
    135  fcf8		       e0 00		      cpx	#0
    136  fcfa		       d0 29		      bne	.game_audio_return
    137  fcfc
    138  fcfc							; Reset Timer
    139  fcfc		       a2 09		      ldx	#GAME_AUDIO_STEP
    140  fcfe		       86 8f		      stx	FrameTimer
    141  fd00
    142  fd00				   .game_audio_play
    143  fd00
    144  fd00							; Increment melody position
    145  fd00		       a4 92		      ldy	AudioStep
    146  fd02		       c8		      iny
    147  fd03
    148  fd03		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    149  fd05		       d0 02		      bne	.game_audio_play_note
    150  fd07
    151  fd07							; Loop our audio step
    152  fd07		       a0 00		      ldy	#0
    153  fd09
    154  fd09				   .game_audio_play_note
    155  fd09
    156  fd09							; Save current position
    157  fd09		       84 92		      sty	AudioStep
    158  fd0b
    159  fd0b							; Melody Line
    160  fd0b		       b9 d3 fe 	      lda	GameAudio0,y
    161  fd0e		       c9 ff		      cmp	#$FF
    162  fd10		       f0 0b		      beq	.game_audio_mute_note
    163  fd12		       85 17		      sta	AUDF0
    164  fd14		       a9 06		      lda	#GAME_AUDIO_TONE
    165  fd16		       85 15		      sta	AUDC0
    166  fd18		       a9 02		      lda	#GAME_AUDIO_VOLUME
    167  fd1a		       85 19		      sta	AUDV0
    168  fd1c
    169  fd1c		       60		      rts
    170  fd1d
    171  fd1d				   .game_audio_mute_note
    172  fd1d
    173  fd1d		       a9 00		      lda	#0
    174  fd1f		       85 17		      sta	AUDF0
    175  fd21		       85 15		      sta	AUDC0
    176  fd23		       85 19		      sta	AUDV0
    177  fd25
    178  fd25				   .game_audio_return
    179  fd25		       60		      rts
    180  fd26
    181  fd26				   GameDeath
    182  fd26		       a5 94		      lda	ScoreValue+0
    183  fd28		       d0 03		      bne	.game_death_return
    184  fd2a
    185  fd2a							; Show Game Over Screen
    186  fd2a		       20 f3 fe 	      jsr	OverInit
    187  fd2d
    188  fd2d				   .game_death_return
    189  fd2d		       60		      rts
    190  fd2e
    191  fd2e				   GameKernel
    192  fd2e
    193  fd2e							; Turn on display
    194  fd2e		       a9 00		      lda	#0
    195  fd30		       85 01		      sta	VBLANK
    196  fd32
    197  fd32				   .game_kernel_score
    198  fd32
    199  fd32							; Draw Score on top first
    200  fd32		       20 d5 f5 	      jsr	ScoreDraw
    201  fd35
    202  fd35				   .game_kernel_objects_start
    203  fd35
    204  fd35							; Setup Drawing Objects
    205  fd35		       20 ef f6 	      jsr	WebDrawStart
    206  fd38		       20 49 f8 	      jsr	SpiderDrawStart
    207  fd3b		       20 f6 fb 	      jsr	SwatterDrawStart
    208  fd3e		       20 b5 f9 	      jsr	LineDrawStart
    209  fd41		       20 f4 fa 	      jsr	BugDrawStart
    210  fd44
    211  fd44							; Start Scanline Counter
    212  fd44		       a2 a8		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    213  fd46							; The extra 5 is for processing overflow
    214  fd46
    215  fd46							; Half scanline counter in Temp+1
    216  fd46		       a9 56		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    217  fd48		       85 84		      sta	Temp+1
    218  fd4a
    219  fd4a							; Load background color
    220  fd4a		       a5 a1		      lda	WebColor+0
    221  fd4c		       85 09		      sta	COLUBK
    222  fd4e
    223  fd4e				   .game_kernel_objects
    224  fd4e
    225  fd4e		       85 02		      sta	WSYNC
    226  fd50
    227  fd50				   .game_kernel_web
    228  fd50
    229  fd50							; Web
    230  fd50		       a4 a0		      ldy	WebIndex
    231  fd52
    232  fd52							; Load Image
    233  fd52		       b9 3e f1 	      lda	WebImagePF0,y
    234  fd55		       85 0d		      sta	PF0
    235  fd57		       b9 5c f1 	      lda	WebImagePF1,y
    236  fd5a		       85 0e		      sta	PF1
    237  fd5c		       b9 7a f1 	      lda	WebImagePF2,y
    238  fd5f		       85 0f		      sta	PF2
    239  fd61
    240  fd61		       e6 a0		      inc	WebIndex
    241  fd63
    242  fd63				   .game_kernel_line_1
    243  fd63							; Line (1st time)
    244  fd63
    245  fd63		       24 ae		      bit	LineEnabled
    246  fd65		       10 10		      bpl	.game_kernel_line_1_skip
    247  fd67
    248  fd67							; Load half-line
    249  fd67		       a5 84		      lda	Temp+1
    250  fd69
    251  fd69		       a0 00		      ldy	#%00000000
    252  fd6b
    253  fd6b							; Top
    254  fd6b		       c5 b6		      cmp	LineDrawPos+1
    255  fd6d		       b0 06		      bcs	.game_kernel_line_1_off
    256  fd6f
    257  fd6f							; Bottom
    258  fd6f		       c5 b5		      cmp	LineDrawPos+0
    259  fd71		       90 02		      bcc	.game_kernel_line_1_off
    260  fd73
    261  fd73				   .game_kernel_line_1_on
    262  fd73		       a0 02		      ldy	#%00000010
    263  fd75
    264  fd75				   .game_kernel_line_1_off
    265  fd75		       84 1f		      sty	ENABL
    266  fd77
    267  fd77				   .game_kernel_line_1_skip
    268  fd77
    269  fd77		       ca		      dex
    270  fd78		       85 02		      sta	WSYNC
    271  fd7a
    272  fd7a				   .game_kernel_spider_1
    273  fd7a							; Spider (1st time)
    274  fd7a
    275  fd7a		       a4 a9		      ldy	SpiderIndex
    276  fd7c		       30 1a		      bmi	.game_kernel_spider_1_load	; At end of sprite
    277  fd7e		       d0 06		      bne	.game_kernel_spider_1_draw	; Currently drawing (not zero)
    278  fd80
    279  fd80							; Check y position to see if we should start
    280  fd80		       a5 84		      lda	Temp+1	; Use half scanline
    281  fd82		       e5 aa		      sbc	SpiderDrawPos
    282  fd84		       10 12		      bpl	.game_kernel_spider_1_load
    283  fd86
    284  fd86				   .game_kernel_spider_1_draw
    285  fd86		       b1 a3		      lda	(SpiderPtr),y
    286  fd88		       85 ab		      sta	SpiderLine
    287  fd8a
    288  fd8a							; Increment sprite index
    289  fd8a		       e6 a9		      inc	SpiderIndex
    290  fd8c
    291  fd8c							; See if we're at the end
    292  fd8c		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    293  fd8e		       d0 0a		      bne	.game_kernel_spider_1_line
    294  fd90		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    295  fd92		       84 a9		      sty	SpiderIndex
    296  fd94		       a9 00		      lda	#0
    297  fd96		       85 ab		      sta	SpiderLine
    298  fd98
    299  fd98				   .game_kernel_spider_1_load
    300  fd98		       a5 ab		      lda	SpiderLine
    301  fd9a				   .game_kernel_spider_1_line
    302  fd9a		       85 1b		      sta	GRP0
    303  fd9c
    304  fd9c				   .game_kernel_swatter_1
    305  fd9c							; Swatter (1st time)
    306  fd9c
    307  fd9c							; Check if wait state
    308  fd9c		       24 c4		      bit	SwatterState
    309  fd9e		       10 1b		      bpl	.game_kernel_swatter_1_load
    310  fda0
    311  fda0		       a4 c8		      ldy	SwatterIndex
    312  fda2		       30 17		      bmi	.game_kernel_swatter_1_load	; At end of sprite
    313  fda4		       d0 06		      bne	.game_kernel_swatter_1_draw	; Currently drawing (not zero)
    314  fda6
    315  fda6							; Check y position to see if we should start
    316  fda6		       a5 84		      lda	Temp+1	; Use half scanline
    317  fda8		       e5 c9		      sbc	SwatterDrawPos
    318  fdaa		       10 0f		      bpl	.game_kernel_swatter_1_load
    319  fdac
    320  fdac				   .game_kernel_swatter_1_draw
    321  fdac		       b9 e8 f1 	      lda	SwatterSprite,y
    322  fdaf		       85 ca		      sta	SwatterLine
    323  fdb1
    324  fdb1							; Increment index
    325  fdb1		       e6 c8		      inc	SwatterIndex
    326  fdb3
    327  fdb3							; See if we're at the end
    328  fdb3		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    329  fdb5		       d0 06		      bne	.game_kernel_swatter_1_line
    330  fdb7		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    331  fdb9		       84 c8		      sty	SwatterIndex
    332  fdbb
    333  fdbb				   .game_kernel_swatter_1_load
    334  fdbb		       a5 ca		      lda	SwatterLine
    335  fdbd				   .game_kernel_swatter_1_line
    336  fdbd		       85 1c		      sta	GRP1
    337  fdbf
    338  fdbf							; New line and decrement half scanline
    339  fdbf		       c6 84		      dec	Temp+1
    340  fdc1		       ca		      dex
    341  fdc2		       85 02		      sta	WSYNC
    342  fdc4
    343  fdc4							; Preload half-line
    344  fdc4		       a5 84		      lda	Temp+1
    345  fdc6
    346  fdc6				   .game_kernel_line_2
    347  fdc6							; Line (2nd time)
    348  fdc6
    349  fdc6		       24 ae		      bit	LineEnabled
    350  fdc8		       10 0e		      bpl	.game_kernel_line_2_skip
    351  fdca
    352  fdca		       a0 00		      ldy	#%00000000
    353  fdcc
    354  fdcc							; Top
    355  fdcc		       c5 b6		      cmp	LineDrawPos+1
    356  fdce		       b0 06		      bcs	.game_kernel_line_2_off
    357  fdd0
    358  fdd0							; Bottom
    359  fdd0		       c5 b5		      cmp	LineDrawPos+0
    360  fdd2		       90 02		      bcc	.game_kernel_line_2_off
    361  fdd4
    362  fdd4				   .game_kernel_line_2_on
    363  fdd4		       a0 02		      ldy	#%00000010
    364  fdd6
    365  fdd6				   .game_kernel_line_2_off
    366  fdd6		       84 1f		      sty	ENABL
    367  fdd8
    368  fdd8				   .game_kernel_line_2_skip
    369  fdd8
    370  fdd8				   .game_kernel_bug_1_0
    371  fdd8							; First Bug (1st time)
    372  fdd8
    373  fdd8		       a0 00		      ldy	#%00000000
    374  fdda
    375  fdda							; Top
    376  fdda		       c5 c0		      cmp	BugDrawPosTop+0
    377  fddc		       b0 06		      bcs	.game_kernel_bug_1_0_off
    378  fdde
    379  fdde							; Bottom
    380  fdde		       c5 be		      cmp	BugDrawPosBottom+0
    381  fde0		       90 02		      bcc	.game_kernel_bug_1_0_off
    382  fde2
    383  fde2				   .game_kernel_bug_1_0_on
    384  fde2		       a0 02		      ldy	#%00000010
    385  fde4
    386  fde4				   .game_kernel_bug_1_0_off
    387  fde4		       84 1d		      sty	ENAM0
    388  fde6
    389  fde6				   .game_kernel_bug_1_1
    390  fde6							; Second Bug (1st time)
    391  fde6
    392  fde6		       a0 00		      ldy	#%00000000
    393  fde8
    394  fde8							; Top
    395  fde8		       c5 c1		      cmp	BugDrawPosTop+1
    396  fdea		       b0 06		      bcs	.game_kernel_bug_1_1_off
    397  fdec
    398  fdec							; Bottom
    399  fdec		       c5 bf		      cmp	BugDrawPosBottom+1
    400  fdee		       90 02		      bcc	.game_kernel_bug_1_1_off
    401  fdf0
    402  fdf0				   .game_kernel_bug_1_1_on
    403  fdf0		       a0 02		      ldy	#%00000010
    404  fdf2
    405  fdf2				   .game_kernel_bug_1_1_off
    406  fdf2		       84 1e		      sty	ENAM1
    407  fdf4
    408  fdf4							; Next Line
    409  fdf4		       ca		      dex
    410  fdf5		       85 02		      sta	WSYNC
    411  fdf7
    412  fdf7				   .game_kernel_spider_2
    413  fdf7							; Spider (2nd time)
    414  fdf7
    415  fdf7		       a4 a9		      ldy	SpiderIndex
    416  fdf9		       30 1a		      bmi	.game_kernel_spider_2_load	; At end of sprite
    417  fdfb		       d0 06		      bne	.game_kernel_spider_2_draw	; Currently drawing (not zero)
    418  fdfd
    419  fdfd							; Check y position to see if we should start
    420  fdfd		       a5 84		      lda	Temp+1	; Use half scanline
    421  fdff		       e5 aa		      sbc	SpiderDrawPos
    422  fe01		       10 12		      bpl	.game_kernel_spider_2_load
    423  fe03
    424  fe03				   .game_kernel_spider_2_draw
    425  fe03		       b1 a3		      lda	(SpiderPtr),y
    426  fe05		       85 ab		      sta	SpiderLine
    427  fe07
    428  fe07							; Increment sprite index
    429  fe07		       e6 a9		      inc	SpiderIndex
    430  fe09
    431  fe09							; See if we're at the end
    432  fe09		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    433  fe0b		       d0 0a		      bne	.game_kernel_spider_2_line
    434  fe0d		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    435  fe0f		       84 a9		      sty	SpiderIndex
    436  fe11		       a9 00		      lda	#0
    437  fe13		       85 ab		      sta	SpiderLine
    438  fe15
    439  fe15				   .game_kernel_spider_2_load
    440  fe15		       a5 ab		      lda	SpiderLine
    441  fe17				   .game_kernel_spider_2_line
    442  fe17		       85 1b		      sta	GRP0
    443  fe19
    444  fe19				   .game_kernel_swatter_2
    445  fe19							; Swatter (2nd time)
    446  fe19
    447  fe19							; Check if wait state
    448  fe19		       24 c4		      bit	SwatterState
    449  fe1b		       10 1b		      bpl	.game_kernel_swatter_2_load
    450  fe1d
    451  fe1d		       a4 c8		      ldy	SwatterIndex
    452  fe1f		       30 17		      bmi	.game_kernel_swatter_2_load	; At end of sprite
    453  fe21		       d0 06		      bne	.game_kernel_swatter_2_draw	; Currently drawing (not zero)
    454  fe23
    455  fe23							; Check y position to see if we should start
    456  fe23		       a5 84		      lda	Temp+1	; Use half scanline
    457  fe25		       e5 c9		      sbc	SwatterDrawPos
    458  fe27		       10 0f		      bpl	.game_kernel_swatter_2_load
    459  fe29
    460  fe29				   .game_kernel_swatter_2_draw
    461  fe29		       b9 e8 f1 	      lda	SwatterSprite,y
    462  fe2c		       85 ca		      sta	SwatterLine
    463  fe2e
    464  fe2e							; Increment index
    465  fe2e		       e6 c8		      inc	SwatterIndex
    466  fe30
    467  fe30							; See if we're at the end
    468  fe30		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    469  fe32		       d0 06		      bne	.game_kernel_swatter_2_line
    470  fe34		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    471  fe36		       84 c8		      sty	SwatterIndex
    472  fe38
    473  fe38				   .game_kernel_swatter_2_load
    474  fe38		       a5 ca		      lda	SwatterLine
    475  fe3a				   .game_kernel_swatter_2_line
    476  fe3a		       85 1c		      sta	GRP1
    477  fe3c
    478  fe3c							; Next Line and half-line
    479  fe3c		       c6 84		      dec	Temp+1
    480  fe3e		       ca		      dex
    481  fe3f		       85 02		      sta	WSYNC
    482  fe41
    483  fe41							; Preload half-line
    484  fe41		       a5 84		      lda	Temp+1
    485  fe43
    486  fe43				   .game_kernel_line_3
    487  fe43							; Line (3rd time)
    488  fe43
    489  fe43		       24 ae		      bit	LineEnabled
    490  fe45		       10 0e		      bpl	.game_kernel_line_3_skip
    491  fe47
    492  fe47		       a0 00		      ldy	#%00000000
    493  fe49
    494  fe49							; Top
    495  fe49		       c5 b6		      cmp	LineDrawPos+1
    496  fe4b		       b0 06		      bcs	.game_kernel_line_3_off
    497  fe4d
    498  fe4d							; Bottom
    499  fe4d		       c5 b5		      cmp	LineDrawPos+0
    500  fe4f		       90 02		      bcc	.game_kernel_line_3_off
    501  fe51
    502  fe51				   .game_kernel_line_3_on
    503  fe51		       a0 02		      ldy	#%00000010
    504  fe53
    505  fe53				   .game_kernel_line_3_off
    506  fe53		       84 1f		      sty	ENABL
    507  fe55
    508  fe55				   .game_kernel_line_3_skip
    509  fe55
    510  fe55				   .game_kernel_bug_2_0
    511  fe55							; First Bug (2nd time)
    512  fe55
    513  fe55		       a0 00		      ldy	#%00000000
    514  fe57
    515  fe57							; Top
    516  fe57		       c5 c0		      cmp	BugDrawPosTop+0
    517  fe59		       b0 06		      bcs	.game_kernel_bug_2_0_off
    518  fe5b
    519  fe5b							; Bottom
    520  fe5b		       c5 be		      cmp	BugDrawPosBottom+0
    521  fe5d		       90 02		      bcc	.game_kernel_bug_2_0_off
    522  fe5f
    523  fe5f				   .game_kernel_bug_2_0_on
    524  fe5f		       a0 02		      ldy	#%00000010
    525  fe61
    526  fe61				   .game_kernel_bug_2_0_off
    527  fe61		       84 1d		      sty	ENAM0
    528  fe63
    529  fe63				   .game_kernel_bug_2_1
    530  fe63							; Second Bug (2nd time)
    531  fe63
    532  fe63		       a0 00		      ldy	#%00000000
    533  fe65
    534  fe65							; Top
    535  fe65		       c5 c1		      cmp	BugDrawPosTop+1
    536  fe67		       b0 06		      bcs	.game_kernel_bug_2_1_off
    537  fe69
    538  fe69							; Bottom
    539  fe69		       c5 bf		      cmp	BugDrawPosBottom+1
    540  fe6b		       90 02		      bcc	.game_kernel_bug_2_1_off
    541  fe6d
    542  fe6d				   .game_kernel_bug_2_1_on
    543  fe6d		       a0 02		      ldy	#%00000010
    544  fe6f
    545  fe6f				   .game_kernel_bug_2_1_off
    546  fe6f		       84 1e		      sty	ENAM1
    547  fe71
    548  fe71							; Next Line
    549  fe71		       ca		      dex
    550  fe72		       85 02		      sta	WSYNC
    551  fe74
    552  fe74				   .game_kernel_spider_3
    553  fe74							; Spider (3rd time)
    554  fe74
    555  fe74		       a4 a9		      ldy	SpiderIndex
    556  fe76		       30 1a		      bmi	.game_kernel_spider_3_load	; At end of sprite
    557  fe78		       d0 06		      bne	.game_kernel_spider_3_draw	; Currently drawing (not zero)
    558  fe7a
    559  fe7a							; Check y position to see if we should start
    560  fe7a		       a5 84		      lda	Temp+1	; Use half scanline
    561  fe7c		       e5 aa		      sbc	SpiderDrawPos
    562  fe7e		       10 12		      bpl	.game_kernel_spider_3_load
    563  fe80
    564  fe80				   .game_kernel_spider_3_draw
    565  fe80		       b1 a3		      lda	(SpiderPtr),y
    566  fe82		       85 ab		      sta	SpiderLine
    567  fe84
    568  fe84							; Increment sprite index
    569  fe84		       e6 a9		      inc	SpiderIndex
    570  fe86
    571  fe86							; See if we're at the end
    572  fe86		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    573  fe88		       d0 0a		      bne	.game_kernel_spider_3_line
    574  fe8a		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    575  fe8c		       84 a9		      sty	SpiderIndex
    576  fe8e		       a9 00		      lda	#0
    577  fe90		       85 ab		      sta	SpiderLine
    578  fe92
    579  fe92				   .game_kernel_spider_3_load
    580  fe92		       a5 ab		      lda	SpiderLine
    581  fe94				   .game_kernel_spider_3_line
    582  fe94		       85 1b		      sta	GRP0
    583  fe96
    584  fe96				   .game_kernel_spider_3_skip
    585  fe96
    586  fe96				   .game_kernel_swatter_3
    587  fe96							; Swatter (3rd time)
    588  fe96
    589  fe96							; Check if wait state
    590  fe96		       24 c4		      bit	SwatterState
    591  fe98		       10 1b		      bpl	.game_kernel_swatter_3_load
    592  fe9a
    593  fe9a		       a4 c8		      ldy	SwatterIndex
    594  fe9c		       30 17		      bmi	.game_kernel_swatter_3_load	; At end of sprite
    595  fe9e		       d0 06		      bne	.game_kernel_swatter_3_draw	; Currently drawing (not zero)
    596  fea0
    597  fea0							; Check y position to see if we should start
    598  fea0		       a5 84		      lda	Temp+1	; Use half scanline
    599  fea2		       e5 c9		      sbc	SwatterDrawPos
    600  fea4		       10 0f		      bpl	.game_kernel_swatter_3_load
    601  fea6
    602  fea6				   .game_kernel_swatter_3_draw
    603  fea6		       b9 e8 f1 	      lda	SwatterSprite,y
    604  fea9		       85 ca		      sta	SwatterLine
    605  feab
    606  feab							; Increment index
    607  feab		       e6 c8		      inc	SwatterIndex
    608  fead
    609  fead							; See if we're at the end
    610  fead		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    611  feaf		       d0 06		      bne	.game_kernel_swatter_3_line
    612  feb1		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    613  feb3		       84 c8		      sty	SwatterIndex
    614  feb5
    615  feb5				   .game_kernel_swatter_3_load
    616  feb5		       a5 ca		      lda	SwatterLine
    617  feb7				   .game_kernel_swatter_3_line
    618  feb7		       85 1c		      sta	GRP1
    619  feb9
    620  feb9				   .game_kernel_swatter_3_skip
    621  feb9
    622  feb9							; New line and decrement half scanline
    623  feb9		       c6 84		      dec	Temp+1
    624  febb		       ca		      dex
    625  febc		       f0 03		      beq	.game_kernel_clean
    626  febe		       4c 4e fd 	      jmp	.game_kernel_objects
    627  fec1
    628  fec1				   .game_kernel_clean
    629  fec1
    630  fec1		       20 02 f7 	      jsr	WebClean
    631  fec4		       20 71 f8 	      jsr	SpiderClean
    632  fec7		       20 d5 f9 	      jsr	LineClean
    633  feca		       20 11 fb 	      jsr	BugClean
    634  fecd		       20 13 fc 	      jsr	SwatterClean
    635  fed0
    636  fed0		       85 02		      sta	WSYNC
    637  fed2
    638  fed2				   .game_kernel_return
    639  fed2		       60		      rts
    640  fed3
    641  fed3				   GameAudio0
    642  fed3		       0d		      .byte.b	#13	; D
    643  fed4		       ff		      .byte.b	#$FF
    644  fed5		       0f		      .byte.b	#15	; B
    645  fed6		       ff		      .byte.b	#$FF
    646  fed7		       0d		      .byte.b	#13	; D
    647  fed8		       ff		      .byte.b	#$FF
    648  fed9		       0f		      .byte.b	#15	; B
    649  feda		       ff		      .byte.b	#$FF
    650  fedb		       0d		      .byte.b	#13	; D
    651  fedc		       0d		      .byte.b	#13	; D
    652  fedd		       0f		      .byte.b	#15	; B
    653  fede		       ff		      .byte.b	#$FF
    654  fedf		       0c		      .byte.b	#12	; D#
    655  fee0		       ff		      .byte.b	#$FF
    656  fee1		       0f		      .byte.b	#15	; B
    657  fee2		       ff		      .byte.b	#$FF
    658  fee3		       0b		      .byte.b	#11	; E
    659  fee4		       ff		      .byte.b	#$FF
    660  fee5		       0e		      .byte.b	#14	; C#
    661  fee6		       ff		      .byte.b	#$FF
    662  fee7		       0b		      .byte.b	#11
    663  fee8		       ff		      .byte.b	#$FF
    664  fee9		       0e		      .byte.b	#14
    665  feea		       ff		      .byte.b	#$FF
    666  feeb		       0b		      .byte.b	#11
    667  feec		       0b		      .byte.b	#11
    668  feed		       0e		      .byte.b	#14
    669  feee		       ff		      .byte.b	#$FF
    670  feef		       0b		      .byte.b	#11
    671  fef0		       ff		      .byte.b	#$FF
    672  fef1		       0e		      .byte.b	#14
    673  fef2		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fef3					      include	"over.asm"
      1  fef3							;================
      2  fef3							; Constants
      3  fef3							;================
      4  fef3
      5  fef3		       00 00	   OVER_BG_COLOR =	#$00
      6  fef3		       00 44	   OVER_FG_COLOR =	#$44
      7  fef3		       00 06	   OVER_FG_BW_COLOR =	#$06
      8  fef3
      9  fef3		       00 07	   OVER_AUDIO_TONE =	7
     10  fef3		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     11  fef3		       00 06	   OVER_AUDIO_LENGTH =	6
     12  fef3		       00 10	   OVER_AUDIO_STEP =	16
     13  fef3
     14  fef3		       00 09	   OVER_IMAGE_SIZE =	9
     15  fef3		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     16  fef3		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     17  fef3		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     18  fef3
     19  fef3				   OverInit
     20  fef3
     21  fef3							; Setup logic and kernel
      0  fef3					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fef3				   .POINTER   SET	VBlankPtr
      2  fef3				   .ADDRESS   SET	OverVerticalBlank
      3  fef3
      4  fef3		       a9 24		      LDA	#<.ADDRESS
      5  fef5		       85 88		      STA	.POINTER
      6  fef7		       a9 ff		      LDA	#>.ADDRESS
      7  fef9		       85 89		      STA	.POINTER+1
      8  fefb
      0  fefb					      SET_POINTER	KernelPtr, OverKernel
      1  fefb				   .POINTER   SET	KernelPtr
      2  fefb				   .ADDRESS   SET	OverKernel
      3  fefb
      4  fefb		       a9 7c		      LDA	#<.ADDRESS
      5  fefd		       85 8a		      STA	.POINTER
      6  feff		       a9 ff		      LDA	#>.ADDRESS
      7  ff01		       85 8b		      STA	.POINTER+1
      8  ff03
      0  ff03					      SET_POINTER	OverScanPtr, OverOverScan
      1  ff03				   .POINTER   SET	OverScanPtr
      2  ff03				   .ADDRESS   SET	OverOverScan
      3  ff03
      4  ff03		       a9 3e		      LDA	#<.ADDRESS
      5  ff05		       85 8c		      STA	.POINTER
      6  ff07		       a9 ff		      LDA	#>.ADDRESS
      7  ff09		       85 8d		      STA	.POINTER+1
      8  ff0b
     25  ff0b
     26  ff0b							; Load audio settings
     27  ff0b		       a9 07		      lda	#OVER_AUDIO_TONE
     28  ff0d		       85 15		      sta	AUDC0
     29  ff0f							;lda #OVER_AUDIO_VOLUME
     30  ff0f							;sta AUDV0
     31  ff0f		       a9 00		      lda	#0
     32  ff11		       85 16		      sta	AUDC1
     33  ff13		       85 1a		      sta	AUDV1
     34  ff15
     35  ff15							; Set initial button state
     36  ff15							;lda #0
     37  ff15		       85 91		      sta	InputState
     38  ff17
     39  ff17							; Setup frame counters
     40  ff17		       a9 01		      lda	#1
     41  ff19		       85 8f		      sta	FrameTimer
     42  ff1b		       a9 10		      lda	#OVER_AUDIO_STEP
     43  ff1d		       85 93		      sta	SampleStep
     44  ff1f		       a9 06		      lda	#OVER_AUDIO_LENGTH
     45  ff21		       85 92		      sta	AudioStep
     46  ff23
     47  ff23		       60		      rts
     48  ff24
     49  ff24				   OverVerticalBlank
     50  ff24		       20 63 f5 	      jsr	ScoreUpdate
     51  ff27
     52  ff27							; Load Colors
     53  ff27		       a9 00		      lda	#OVER_BG_COLOR
     54  ff29		       85 09		      sta	COLUBK
     55  ff2b
     56  ff2b							; Check b/w
     57  ff2b		       ad 82 02 	      lda	SWCHB
     58  ff2e					      REPEAT	4
     59  ff2e		       4a		      lsr
     58  ff2e					      REPEND
     59  ff2f		       4a		      lsr
     58  ff2f					      REPEND
     59  ff30		       4a		      lsr
     58  ff30					      REPEND
     59  ff31		       4a		      lsr
     60  ff32					      REPEND
     61  ff32		       90 05		      bcc	.over_bw
     62  ff34
     63  ff34				   .over_color
     64  ff34		       a9 44		      lda	#OVER_FG_COLOR
     65  ff36		       85 08		      sta	COLUPF
     66  ff38
     67  ff38		       60		      rts
     68  ff39
     69  ff39				   .over_bw
     70  ff39							; Load b/w Colors
     71  ff39		       a9 06		      lda	#OVER_FG_BW_COLOR
     72  ff3b		       85 08		      sta	COLUPF
     73  ff3d
     74  ff3d		       60		      rts
     75  ff3e
     76  ff3e				   OverOverScan
     77  ff3e		       20 45 ff 	      jsr	OverAudio
     78  ff41		       20 6b ff 	      jsr	OverState
     79  ff44		       60		      rts
     80  ff45
     81  ff45				   OverAudio
     82  ff45
     83  ff45		       a5 8f		      lda	FrameTimer
     84  ff47		       d0 21		      bne	.over_audio_return
     85  ff49
     86  ff49							; Reset Timer
     87  ff49					      REPEAT	3
     88  ff49		       e6 93		      inc	SampleStep
     87  ff49					      REPEND
     88  ff4b		       e6 93		      inc	SampleStep
     87  ff4b					      REPEND
     88  ff4d		       e6 93		      inc	SampleStep
     89  ff4f					      REPEND
     90  ff4f		       a5 93		      lda	SampleStep
     91  ff51		       85 8f		      sta	FrameTimer
     92  ff53
     93  ff53				   .over_audio_play
     94  ff53
     95  ff53							; Increment melody position
     96  ff53		       a4 92		      ldy	AudioStep
     97  ff55		       f0 0d		      beq	.over_audio_mute_note
     98  ff57		       c6 92		      dec	AudioStep
     99  ff59		       88		      dey
    100  ff5a
    101  ff5a				   .over_audio_play_note
    102  ff5a
    103  ff5a							; Melody Line
    104  ff5a		       b9 ce ff 	      lda	OverAudio0,y
    105  ff5d		       85 17		      sta	AUDF0
    106  ff5f		       a9 06		      lda	#OVER_AUDIO_VOLUME
    107  ff61		       85 19		      sta	AUDV0
    108  ff63
    109  ff63		       60		      rts
    110  ff64
    111  ff64				   .over_audio_mute_note
    112  ff64		       a9 00		      lda	#0
    113  ff66		       85 17		      sta	AUDF0
    114  ff68		       85 19		      sta	AUDV0
    115  ff6a
    116  ff6a				   .over_audio_return
    117  ff6a		       60		      rts
    118  ff6b
    119  ff6b				   OverState
    120  ff6b
    121  ff6b							; Check if Fire Button on controller 1 is released
    122  ff6b		       a5 0c		      lda	INPT4
    123  ff6d		       30 05		      bmi	.over_state_check
    124  ff6f
    125  ff6f				   .over_state_on
    126  ff6f		       a9 01		      lda	#1
    127  ff71		       85 91		      sta	InputState
    128  ff73		       60		      rts
    129  ff74
    130  ff74				   .over_state_check
    131  ff74		       a5 91		      lda	InputState
    132  ff76		       f0 03		      beq	.over_state_return
    133  ff78
    134  ff78				   .over_state_next
    135  ff78							; Button is released, load title screen
    136  ff78		       20 a6 f2 	      jsr	TitleInit
    137  ff7b
    138  ff7b				   .over_state_return
    139  ff7b		       60		      rts
    140  ff7c
    141  ff7c				   OverKernel
    142  ff7c
    143  ff7c							; Turn on display
    144  ff7c		       a9 00		      lda	#0
    145  ff7e		       85 01		      sta	VBLANK
    146  ff80
    147  ff80				   .over_kernel_score
    148  ff80
    149  ff80							; Draw Score on top first (no update)
    150  ff80		       20 d5 f5 	      jsr	ScoreDraw
    151  ff83
    152  ff83				   .over_kernel_init
    153  ff83							; Playfield Control
    154  ff83		       a5 80		      lda	CtrlPf
    155  ff85		       29 fd		      and	#%11111101	; Use playfield foreground color
    156  ff87		       09 01		      ora	#%00000001	; Set mirroring
    157  ff89		       85 80		      sta	CtrlPf
    158  ff8b		       85 0a		      sta	CTRLPF
    159  ff8d
    160  ff8d				   .over_kernel_top_padding
    161  ff8d							; Top Padding
    162  ff8d		       20 ac ff 	      jsr	OverPadding
    163  ff90
    164  ff90				   .over_kernel_image
    165  ff90		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    166  ff92
    167  ff92				   .over_kernel_image_next
    168  ff92		       bd c5 ff 	      lda	OverImagePF2,x
    169  ff95		       85 0f		      sta	PF2
    170  ff97		       bd bc ff 	      lda	OverImagePF1,x
    171  ff9a		       85 0e		      sta	PF1
    172  ff9c							;    lda OverImagePF0,x
    173  ff9c							;    sta PF0
    174  ff9c
    175  ff9c		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    176  ff9e				   .over_kernel_image_loop
    177  ff9e		       85 02		      sta	WSYNC
    178  ffa0		       88		      dey
    179  ffa1		       d0 fb		      bne	.over_kernel_image_loop
    180  ffa3
    181  ffa3		       ca		      dex
    182  ffa4		       10 ec		      bpl	.over_kernel_image_next
    183  ffa6
    184  ffa6				   .over_kernel_bottom_padding
    185  ffa6							; Bottom Padding
    186  ffa6		       20 ac ff 	      jsr	OverPadding
    187  ffa9
    188  ffa9				   .over_kernel_return
    189  ffa9		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    190  ffab		       60		      rts
    191  ffac
    192  ffac				   OverPadding
    193  ffac		       a9 00		      lda	#0
    194  ffae		       85 0d		      sta	PF0
    195  ffb0		       85 0e		      sta	PF1
    196  ffb2		       85 0f		      sta	PF2
    197  ffb4
    198  ffb4		       a2 32		      ldx	#OVER_IMAGE_PADDING
    199  ffb6				   .over_padding_loop
    200  ffb6		       85 02		      sta	WSYNC
    201  ffb8		       ca		      dex
    202  ffb9		       d0 fb		      bne	.over_padding_loop
    203  ffbb
    204  ffbb		       60		      rts
    205  ffbc
    206  ffbc				   OverAssets
    207  ffbc
    208  ffbc							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ffbc					      include	"over_image.asm"
      1  ffbc							;OverImagePF0:
      2  ffbc							;    .BYTE %00000000
      3  ffbc							;    .BYTE %00000000
      4  ffbc							;    .BYTE %00000000
      5  ffbc							;    .BYTE %00000000
      6  ffbc							;    .BYTE %00000000
      7  ffbc							;    .BYTE %00000000
      8  ffbc							;    .BYTE %00000000
      9  ffbc							;    .BYTE %00000000
     10  ffbc							;    .BYTE %00000000
     11  ffbc
     12  ffbc				   OverImagePF1
     13  ffbc		       0c		      .BYTE.b	%00001100
     14  ffbd		       13		      .BYTE.b	%00010011
     15  ffbe		       20		      .BYTE.b	%00100000
     16  ffbf		       23		      .BYTE.b	%00100011
     17  ffc0		       24		      .BYTE.b	%00100100
     18  ffc1		       24		      .BYTE.b	%00100100
     19  ffc2		       12		      .BYTE.b	%00010010
     20  ffc3		       10		      .BYTE.b	%00010000
     21  ffc4		       08		      .BYTE.b	%00001000
     22  ffc5
     23  ffc5				   OverImagePF2
     24  ffc5		       e0		      .BYTE.b	%11100000
     25  ffc6		       18		      .BYTE.b	%00011000
     26  ffc7		       05		      .BYTE.b	%00000101
     27  ffc8		       52		      .BYTE.b	%01010010
     28  ffc9		       23		      .BYTE.b	%00100011
     29  ffca		       52		      .BYTE.b	%01010010
     30  ffcb		       04		      .BYTE.b	%00000100
     31  ffcc		       18		      .BYTE.b	%00011000
     32  ffcd		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    210  ffce
    211  ffce				   OverAudio0
    212  ffce
    213  ffce		       1a		      .BYTE.b	#26	; D1
    214  ffcf		       1a		      .BYTE.b	#26
    215  ffd0		       16		      .BYTE.b	#22	; F1
    216  ffd1		       11		      .BYTE.b	#17	; A1
    217  ffd2		       0d		      .BYTE.b	#13	; D2
    218  ffd3		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    330  ffd4
    331  ffd4							;================
    332  ffd4							; End of cart
    333  ffd4							;================
    334  ffd4
    335  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    336  fffa
    337  fffa				   InterruptVectors
    338  fffa
    339  fffa		       fc f1		      .word.w	InitSystem	; NMI
    340  fffc		       fc f1		      .word.w	InitSystem	; RESET
    341  fffe		       fc f1		      .word.w	InitSystem	; IRQ
    342  10000
    343  10000					       END
