------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: March 1st, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00d4 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; Global
     53 U0080
     54 U0080		       00 00 00 00 Temp       ds	4
     55 U0084		       00	   Rand8      ds	1
     56 U0085		       00	   Rand16     ds	1
     57 U0086
     58 U0086		       00 00	   VBlankPtr  ds	2
     59 U0088		       00 00	   KernelPtr  ds	2
     60 U008a		       00 00	   OverScanPtr ds	2
     61 U008c
     62 U008c		       00	   Frame      ds	1
     63 U008d		       00 00	   FrameTimer ds	2
     64 U008f		       00 00	   InputState ds	2
     65 U0091
     66 U0091		       00	   AudioStep  ds	1
     67 U0092		       00	   SampleStep ds	1
     68 U0093
     69 U0093							; Game
     70 U0093
     71 U0093		       00	   GameType   ds	1
     72 U0094		       00	   GameAudioStep ds	1
     73 U0095
     74 U0095							; Score
     75 U0095
     76 U0095		       00 00	   ScoreValue ds	2
     77 U0097		       00 00	   ScoreDigitOnes ds	2
     78 U0099		       00 00	   ScoreDigitTens ds	2
     79 U009b		       00 00 00    ScoreDigitGfx ds	3
     80 U009e		       00 00	   ScoreBarGfx ds	2
     81 U00a0
     82 U00a0							; Level
     83 U00a0		       00	   LevelCurrent ds	1
     84 U00a1
     85 U00a1							; Web
     86 U00a1
     87 U00a1		       00	   WebIndex   ds	1
     88 U00a2		       00 00	   WebColor   ds	2
     89 U00a4
     90 U00a4							; Object X Positions
     91 U00a4
     92 U00a4				   XPositions
     93 U00a4		       00	   SpiderPosX ds	1	; 0
     94 U00a5		       00	   SwatterPosX ds	1	; 1
     95 U00a6		       00 00	   BugPosX    ds	2	; 2/3
     96 U00a8		       00	   LinePosX   ds	1	; 4
     97 U00a9
     98 U00a9							; Spider
     99 U00a9
    100 U00a9		       00 00	   SpiderPtr  ds	2
    101 U00ab		       00	   SpiderPosY ds	1
    102 U00ac		       00	   SpiderCtrl ds	1
    103 U00ad		       00	   SpiderColor ds	1
    104 U00ae
    105 U00ae		       00	   SpiderIndex ds	1
    106 U00af		       00	   SpiderDrawPos ds	1
    107 U00b0		       00	   SpiderLine ds	1
    108 U00b1
    109 U00b1		       00 00	   SpiderPtr2 ds	2
    110 U00b3
    111 U00b3							; Line
    112 U00b3
    113 U00b3		       00	   LineEnabled ds	1
    114 U00b4		       00	   LinePosY   ds	1
    115 U00b5		       00 00	   LineVelocity ds	2
    116 U00b7		       00 00	   LineDrawPos ds	2
    117 U00b9
    118 U00b9							; Bug
    119 U00b9
    120 U00b9		       00	   BugSpeed   ds	1
    121 U00ba
    122 U00ba		       00 00	   BugStunned ds	2
    123 U00bc		       00 00	   BugPosY    ds	2
    124 U00be
    125 U00be		       00 00	   BugDrawPosBottom ds	2
    126 U00c0		       00 00	   BugDrawPosTop ds	2
    127 U00c2
    128 U00c2							; Swatter
    129 U00c2
    130 U00c2		       00	   SwatterPosY ds	1
    131 U00c3		       00	   SwatterState ds	1
    132 U00c4		       00	   SwatterColor ds	1
    133 U00c5
    134 U00c5		       00	   SwatterWaitTime ds	1
    135 U00c6		       00	   SwatterHoldTime ds	1
    136 U00c7		       00	   SwatterHitDamage ds	1
    137 U00c8
    138 U00c8		       00	   SwatterIndex ds	1
    139 U00c9		       00	   SwatterDrawPos ds	1
    140 U00ca		       00	   SwatterLine ds	1
    141 U00cb
    142 U00cb		       00	   SwatterSampleCount ds	1
    143 U00cc		       00	   SwatterSampleF ds	1
    144 U00cd
    145 U00cd							; Over
    146 U00cd
    147 U00cd		       00 00	   OverImagePF1Ptr ds	2
    148 U00cf		       00 00	   OverImagePF2Ptr ds	2
    149 U00d1		       00 00	   OverAudio0Ptr ds	2
    150 U00d3		       00	   OverColor  ds	1
    151 U00d4
    152  10000 ????				       SEG
    153  f000					      org	$F000	; Start of cart area
    154  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 84		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 85		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 84		      sta	Rand8
     49  f01e		       45 85		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 80		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 81		      sta	Temp+1
     70  f029		       85 82		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 80		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 81		      lda	Temp+1	; And add into result
     77  f031		       65 81		      adc	Temp+1
     78  f033		       85 81		      sta	Temp+1
     79  f035
     80  f035		       a5 82		      lda	Temp+2	; Propagating any carry
     81  f037		       65 82		      adc	Temp+2
     82  f039		       85 82		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 81		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 82		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
     93  f044
     94  f044							;=======================================
     95  f044							; BlankLines
     96  f044							; ---------
     97  f044							; X - Number of lines to draw
     98  f044							;
     99  f044							; Uses: A,X
    100  f044							; Draws blank playfield lines
    101  f044							;=======================================
    102  f044
    103  f044				   BlankLines
    104  f044		       a9 00		      lda	#0
    105  f046		       85 0d		      sta	PF0
    106  f048		       85 0e		      sta	PF1
    107  f04a		       85 0f		      sta	PF2
    108  f04c
    109  f04c				   .blank_lines_loop
    110  f04c		       85 02		      sta	WSYNC
    111  f04e		       ca		      dex
    112  f04f		       d0 fb		      bne	.blank_lines_loop
    113  f051
    114  f051		       60		      rts
------- FILE kernel.asm
    156  f052
    157  f052							; Assets
    158  f052
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f052					      include	"title_frame_top.asm"
      1  f052				   TitleFrameTop
      2  f052
      3  f052		       a0		      .BYTE.b	%10100000
      4  f053		       54		      .BYTE.b	%01010100
      5  f054		       01		      .BYTE.b	%00000001
      6  f055		       00		      .BYTE.b	%00000000
      7  f056		       03		      .BYTE.b	%00000011
      8  f057		       2c		      .BYTE.b	%00101100
      9  f058
     10  f058		       d0		      .BYTE.b	%11010000
     11  f059		       23		      .BYTE.b	%00100011
     12  f05a		       00		      .BYTE.b	%00000000
     13  f05b		       00		      .BYTE.b	%00000000
     14  f05c		       00		      .BYTE.b	%00000000
     15  f05d		       51		      .BYTE.b	%01010001
     16  f05e
     17  f05e		       60		      .BYTE.b	%01100000
     18  f05f		       dc		      .BYTE.b	%11011100
     19  f060		       00		      .BYTE.b	%00000000
     20  f061		       00		      .BYTE.b	%00000000
     21  f062		       00		      .BYTE.b	%00000000
     22  f063		       8e		      .BYTE.b	%10001110
     23  f064
     24  f064		       b0		      .BYTE.b	%10110000
     25  f065		       00		      .BYTE.b	%00000000
     26  f066		       00		      .BYTE.b	%00000000
     27  f067		       00		      .BYTE.b	%00000000
     28  f068		       00		      .BYTE.b	%00000000
     29  f069		       51		      .BYTE.b	%01010001
     30  f06a
     31  f06a		       40		      .BYTE.b	%01000000
     32  f06b		       80		      .BYTE.b	%10000000
     33  f06c		       00		      .BYTE.b	%00000000
     34  f06d		       00		      .BYTE.b	%00000000
     35  f06e		       00		      .BYTE.b	%00000000
     36  f06f		       ad		      .BYTE.b	%10101101
     37  f070
     38  f070		       50		      .BYTE.b	%01010000
     39  f071		       00		      .BYTE.b	%00000000
     40  f072		       00		      .BYTE.b	%00000000
     41  f073		       00		      .BYTE.b	%00000000
     42  f074		       01		      .BYTE.b	%00000001
     43  f075		       82		      .BYTE.b	%10000010
     44  f076
     45  f076		       20		      .BYTE.b	%00100000
     46  f077		       00		      .BYTE.b	%00000000
     47  f078		       00		      .BYTE.b	%00000000
     48  f079		       00		      .BYTE.b	%00000000
     49  f07a		       02		      .BYTE.b	%00000010
     50  f07b		       00		      .BYTE.b	%00000000
     51  f07c
     52  f07c		       c0		      .BYTE.b	%11000000
     53  f07d		       77		      .BYTE.b	%01110111
     54  f07e		       66		      .BYTE.b	%01100110
     55  f07f		       30		      .BYTE.b	%00110000
     56  f080		       22		      .BYTE.b	%00100010
     57  f081		       1b		      .BYTE.b	%00011011
     58  f082
     59  f082		       40		      .BYTE.b	%01000000
     60  f083		       52		      .BYTE.b	%01010010
     61  f084		       2a		      .BYTE.b	%00101010
     62  f085		       50		      .BYTE.b	%01010000
     63  f086		       22		      .BYTE.b	%00100010
     64  f087		       29		      .BYTE.b	%00101001
     65  f088
     66  f088		       c0		      .BYTE.b	%11000000
     67  f089		       72		      .BYTE.b	%01110010
     68  f08a		       6a		      .BYTE.b	%01101010
     69  f08b		       50		      .BYTE.b	%01010000
     70  f08c		       22		      .BYTE.b	%00100010
     71  f08d		       1b		      .BYTE.b	%00011011
     72  f08e
     73  f08e		       80		      .BYTE.b	%10000000
     74  f08f		       42		      .BYTE.b	%01000010
     75  f090		       2a		      .BYTE.b	%00101010
     76  f091		       30		      .BYTE.b	%00110000
     77  f092		       2a		      .BYTE.b	%00101010
     78  f093		       29		      .BYTE.b	%00101001
     79  f094
     80  f094		       c0		      .BYTE.b	%11000000
     81  f095		       47		      .BYTE.b	%01000111
     82  f096		       e6		      .BYTE.b	%11100110
     83  f097		       50		      .BYTE.b	%01010000
     84  f098		       14		      .BYTE.b	%00010100
     85  f099		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f09a					      include	"title_frame_bottom.asm"
      1  f09a				   TitleFrameBottom
      2  f09a
      3  f09a		       20		      .BYTE.b	%00100000
      4  f09b		       00		      .BYTE.b	%00000000
      5  f09c		       00		      .BYTE.b	%00000000
      6  f09d		       00		      .BYTE.b	%00000000
      7  f09e		       00		      .BYTE.b	%00000000
      8  f09f		       64		      .BYTE.b	%01100100
      9  f0a0
     10  f0a0		       50		      .BYTE.b	%01010000
     11  f0a1		       00		      .BYTE.b	%00000000
     12  f0a2		       00		      .BYTE.b	%00000000
     13  f0a3		       00		      .BYTE.b	%00000000
     14  f0a4		       00		      .BYTE.b	%00000000
     15  f0a5		       98		      .BYTE.b	%10011000
     16  f0a6
     17  f0a6		       90		      .BYTE.b	%10010000
     18  f0a7		       80		      .BYTE.b	%10000000
     19  f0a8		       00		      .BYTE.b	%00000000
     20  f0a9		       00		      .BYTE.b	%00000000
     21  f0aa		       00		      .BYTE.b	%00000000
     22  f0ab		       28		      .BYTE.b	%00101000
     23  f0ac
     24  f0ac		       60		      .BYTE.b	%01100000
     25  f0ad		       60		      .BYTE.b	%01100000
     26  f0ae		       00		      .BYTE.b	%00000000
     27  f0af		       00		      .BYTE.b	%00000000
     28  f0b0		       00		      .BYTE.b	%00000000
     29  f0b1		       44		      .BYTE.b	%01000100
     30  f0b2
     31  f0b2		       d0		      .BYTE.b	%11010000
     32  f0b3		       1c		      .BYTE.b	%00011100
     33  f0b4		       00		      .BYTE.b	%00000000
     34  f0b5		       00		      .BYTE.b	%00000000
     35  f0b6		       00		      .BYTE.b	%00000000
     36  f0b7		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0b8					      include	"title_spider.asm"
      1  f0b8				   TitleSpider
      2  f0b8
      3  f0b8		       30		      .BYTE.b	%00110000
      4  f0b9		       67		      .BYTE.b	%01100111
      5  f0ba		       4f		      .BYTE.b	%01001111
      6  f0bb		       dd		      .BYTE.b	%11011101
      7  f0bc		       d8		      .BYTE.b	%11011000
      8  f0bd		       df		      .BYTE.b	%11011111
      9  f0be		       4d		      .BYTE.b	%01001101
     10  f0bf		       6f		      .BYTE.b	%01101111
     11  f0c0		       3b		      .BYTE.b	%00111011
     12  f0c1
     13  f0c1		       37		      .BYTE.b	%00110111
     14  f0c2		       6d		      .BYTE.b	%01101101
     15  f0c3		       d8		      .BYTE.b	%11011000
     16  f0c4		       df		      .BYTE.b	%11011111
     17  f0c5		       cd		      .BYTE.b	%11001101
     18  f0c6		       6f		      .BYTE.b	%01101111
     19  f0c7		       3b		      .BYTE.b	%00111011
     20  f0c8		       00		      .BYTE.b	%00000000
     21  f0c9		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
------- FILE title_bug.asm LEVEL 2 PASS 2
      0  f0ca					      include	"title_bug.asm"
      1  f0ca				   TitleBug
      2  f0ca
      3  f0ca		       10		      .BYTE.b	%00010000
      4  f0cb		       57		      .BYTE.b	%01010111
      5  f0cc		       4f		      .BYTE.b	%01001111
      6  f0cd		       3f		      .BYTE.b	%00111111
      7  f0ce		       19		      .BYTE.b	%00011001
      8  f0cf		       79		      .BYTE.b	%01111001
      9  f0d0		       8f		      .BYTE.b	%10001111
     10  f0d1		       97		      .BYTE.b	%10010111
     11  f0d2		       e0		      .BYTE.b	%11100000
     12  f0d3
     13  f0d3		       57		      .BYTE.b	%01010111
     14  f0d4		       4f		      .BYTE.b	%01001111
     15  f0d5		       3f		      .BYTE.b	%00111111
     16  f0d6		       19		      .BYTE.b	%00011001
     17  f0d7		       7d		      .BYTE.b	%01111101
     18  f0d8		       8f		      .BYTE.b	%10001111
     19  f0d9		       f7		      .BYTE.b	%11110111
     20  f0da		       00		      .BYTE.b	%00000000
     21  f0db		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    163  f0dc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0dc					      include	"objects/score_digits.asm"
      1  f0dc				   ScoreDigits
      2  f0dc
      3  f0dc		       77		      .BYTE.b	%01110111
      4  f0dd		       55		      .BYTE.b	%01010101
      5  f0de		       55		      .BYTE.b	%01010101
      6  f0df		       55		      .BYTE.b	%01010101
      7  f0e0		       77		      .BYTE.b	%01110111
      8  f0e1
      9  f0e1		       11		      .BYTE.b	%00010001
     10  f0e2		       11		      .BYTE.b	%00010001
     11  f0e3		       11		      .BYTE.b	%00010001
     12  f0e4		       11		      .BYTE.b	%00010001
     13  f0e5		       11		      .BYTE.b	%00010001
     14  f0e6
     15  f0e6		       77		      .BYTE.b	%01110111
     16  f0e7		       11		      .BYTE.b	%00010001
     17  f0e8		       77		      .BYTE.b	%01110111
     18  f0e9		       44		      .BYTE.b	%01000100
     19  f0ea		       77		      .BYTE.b	%01110111
     20  f0eb
     21  f0eb		       77		      .BYTE.b	%01110111
     22  f0ec		       11		      .BYTE.b	%00010001
     23  f0ed		       33		      .BYTE.b	%00110011
     24  f0ee		       11		      .BYTE.b	%00010001
     25  f0ef		       77		      .BYTE.b	%01110111
     26  f0f0
     27  f0f0		       55		      .BYTE.b	%01010101
     28  f0f1		       55		      .BYTE.b	%01010101
     29  f0f2		       77		      .BYTE.b	%01110111
     30  f0f3		       11		      .BYTE.b	%00010001
     31  f0f4		       11		      .BYTE.b	%00010001
     32  f0f5
     33  f0f5		       77		      .BYTE.b	%01110111
     34  f0f6		       44		      .BYTE.b	%01000100
     35  f0f7		       77		      .BYTE.b	%01110111
     36  f0f8		       11		      .BYTE.b	%00010001
     37  f0f9		       77		      .BYTE.b	%01110111
     38  f0fa
     39  f0fa		       77		      .BYTE.b	%01110111
     40  f0fb		       44		      .BYTE.b	%01000100
     41  f0fc		       77		      .BYTE.b	%01110111
     42  f0fd		       55		      .BYTE.b	%01010101
     43  f0fe		       77		      .BYTE.b	%01110111
     44  f0ff
     45  f0ff		       77		      .BYTE.b	%01110111
     46  f100		       11		      .BYTE.b	%00010001
     47  f101		       22		      .BYTE.b	%00100010
     48  f102		       22		      .BYTE.b	%00100010
     49  f103		       22		      .BYTE.b	%00100010
     50  f104
     51  f104		       77		      .BYTE.b	%01110111
     52  f105		       55		      .BYTE.b	%01010101
     53  f106		       77		      .BYTE.b	%01110111
     54  f107		       55		      .BYTE.b	%01010101
     55  f108		       77		      .BYTE.b	%01110111
     56  f109
     57  f109		       77		      .BYTE.b	%01110111
     58  f10a		       55		      .BYTE.b	%01010101
     59  f10b		       77		      .BYTE.b	%01110111
     60  f10c		       11		      .BYTE.b	%00010001
     61  f10d		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f10e					      include	"objects/score_digits_flip.asm"
      1  f10e				   ScoreDigitsFlip
      2  f10e
      3  f10e		       ee		      .BYTE.b	%11101110
      4  f10f		       aa		      .BYTE.b	%10101010
      5  f110		       aa		      .BYTE.b	%10101010
      6  f111		       aa		      .BYTE.b	%10101010
      7  f112		       ee		      .BYTE.b	%11101110
      8  f113
      9  f113		       88		      .BYTE.b	%10001000
     10  f114		       88		      .BYTE.b	%10001000
     11  f115		       88		      .BYTE.b	%10001000
     12  f116		       88		      .BYTE.b	%10001000
     13  f117		       88		      .BYTE.b	%10001000
     14  f118
     15  f118		       ee		      .BYTE.b	%11101110
     16  f119		       88		      .BYTE.b	%10001000
     17  f11a		       ee		      .BYTE.b	%11101110
     18  f11b		       22		      .BYTE.b	%00100010
     19  f11c		       ee		      .BYTE.b	%11101110
     20  f11d
     21  f11d		       ee		      .BYTE.b	%11101110
     22  f11e		       88		      .BYTE.b	%10001000
     23  f11f		       cc		      .BYTE.b	%11001100
     24  f120		       88		      .BYTE.b	%10001000
     25  f121		       ee		      .BYTE.b	%11101110
     26  f122
     27  f122		       aa		      .BYTE.b	%10101010
     28  f123		       aa		      .BYTE.b	%10101010
     29  f124		       ee		      .BYTE.b	%11101110
     30  f125		       88		      .BYTE.b	%10001000
     31  f126		       88		      .BYTE.b	%10001000
     32  f127
     33  f127		       ee		      .BYTE.b	%11101110
     34  f128		       22		      .BYTE.b	%00100010
     35  f129		       ee		      .BYTE.b	%11101110
     36  f12a		       88		      .BYTE.b	%10001000
     37  f12b		       ee		      .BYTE.b	%11101110
     38  f12c
     39  f12c		       ee		      .BYTE.b	%11101110
     40  f12d		       22		      .BYTE.b	%00100010
     41  f12e		       ee		      .BYTE.b	%11101110
     42  f12f		       aa		      .BYTE.b	%10101010
     43  f130		       ee		      .BYTE.b	%11101110
     44  f131
     45  f131		       ee		      .BYTE.b	%11101110
     46  f132		       88		      .BYTE.b	%10001000
     47  f133		       44		      .BYTE.b	%01000100
     48  f134		       44		      .BYTE.b	%01000100
     49  f135		       44		      .BYTE.b	%01000100
     50  f136
     51  f136		       ee		      .BYTE.b	%11101110
     52  f137		       aa		      .BYTE.b	%10101010
     53  f138		       ee		      .BYTE.b	%11101110
     54  f139		       aa		      .BYTE.b	%10101010
     55  f13a		       ee		      .BYTE.b	%11101110
     56  f13b
     57  f13b		       ee		      .BYTE.b	%11101110
     58  f13c		       aa		      .BYTE.b	%10101010
     59  f13d		       ee		      .BYTE.b	%11101110
     60  f13e		       88		      .BYTE.b	%10001000
     61  f13f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f140					      include	"objects/score_label.asm"
      1  f140				   ScoreLabel
      2  f140
      3  f140		       20		      .BYTE.b	%00100000
      4  f141		       50		      .BYTE.b	%01010000
      5  f142		       ee		      .BYTE.b	%11101110
      6  f143		       00		      .BYTE.b	%00000000
      7  f144		       57		      .BYTE.b	%01010111
      8  f145		       00		      .BYTE.b	%00000000
      9  f146
     10  f146		       20		      .BYTE.b	%00100000
     11  f147		       50		      .BYTE.b	%01010000
     12  f148		       4a		      .BYTE.b	%01001010
     13  f149		       00		      .BYTE.b	%00000000
     14  f14a		       55		      .BYTE.b	%01010101
     15  f14b		       00		      .BYTE.b	%00000000
     16  f14c
     17  f14c		       20		      .BYTE.b	%00100000
     18  f14d		       50		      .BYTE.b	%01010000
     19  f14e		       4e		      .BYTE.b	%01001110
     20  f14f		       00		      .BYTE.b	%00000000
     21  f150		       77		      .BYTE.b	%01110111
     22  f151		       00		      .BYTE.b	%00000000
     23  f152
     24  f152		       20		      .BYTE.b	%00100000
     25  f153		       50		      .BYTE.b	%01010000
     26  f154		       42		      .BYTE.b	%01000010
     27  f155		       00		      .BYTE.b	%00000000
     28  f156		       54		      .BYTE.b	%01010100
     29  f157		       00		      .BYTE.b	%00000000
     30  f158
     31  f158		       e0		      .BYTE.b	%11100000
     32  f159		       20		      .BYTE.b	%00100000
     33  f15a		       42		      .BYTE.b	%01000010
     34  f15b		       00		      .BYTE.b	%00000000
     35  f15c		       54		      .BYTE.b	%01010100
     36  f15d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    167  f15e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f15e					      include	"objects/web_image.asm"
      1  f15e				   WebImagePF0
      2  f15e		       00		      .BYTE.b	%00000000
      3  f15f		       00		      .BYTE.b	%00000000
      4  f160		       00		      .BYTE.b	%00000000
      5  f161		       00		      .BYTE.b	%00000000
      6  f162		       00		      .BYTE.b	%00000000
      7  f163		       00		      .BYTE.b	%00000000
      8  f164		       00		      .BYTE.b	%00000000
      9  f165		       00		      .BYTE.b	%00000000
     10  f166		       30		      .BYTE.b	%00110000
     11  f167		       e0		      .BYTE.b	%11100000
     12  f168		       20		      .BYTE.b	%00100000
     13  f169		       40		      .BYTE.b	%01000000
     14  f16a		       40		      .BYTE.b	%01000000
     15  f16b		       80		      .BYTE.b	%10000000
     16  f16c		       80		      .BYTE.b	%10000000
     17  f16d		       40		      .BYTE.b	%01000000
     18  f16e		       40		      .BYTE.b	%01000000
     19  f16f		       20		      .BYTE.b	%00100000
     20  f170		       e0		      .BYTE.b	%11100000
     21  f171		       30		      .BYTE.b	%00110000
     22  f172		       00		      .BYTE.b	%00000000
     23  f173		       00		      .BYTE.b	%00000000
     24  f174		       00		      .BYTE.b	%00000000
     25  f175		       00		      .BYTE.b	%00000000
     26  f176		       00		      .BYTE.b	%00000000
     27  f177		       00		      .BYTE.b	%00000000
     28  f178		       00		      .BYTE.b	%00000000
     29  f179		       00		      .BYTE.b	%00000000
     30  f17a
     31  f17a				   WebImagePF1
     32  f17a		       02		      .BYTE.b	%00000010
     33  f17b		       01		      .BYTE.b	%00000001
     34  f17c		       00		      .BYTE.b	%00000000
     35  f17d		       00		      .BYTE.b	%00000000
     36  f17e		       01		      .BYTE.b	%00000001
     37  f17f		       01		      .BYTE.b	%00000001
     38  f180		       02		      .BYTE.b	%00000010
     39  f181		       0c		      .BYTE.b	%00001100
     40  f182		       30		      .BYTE.b	%00110000
     41  f183		       c0		      .BYTE.b	%11000000
     42  f184		       38		      .BYTE.b	%00111000
     43  f185		       07		      .BYTE.b	%00000111
     44  f186		       00		      .BYTE.b	%00000000
     45  f187		       00		      .BYTE.b	%00000000
     46  f188		       00		      .BYTE.b	%00000000
     47  f189		       00		      .BYTE.b	%00000000
     48  f18a		       07		      .BYTE.b	%00000111
     49  f18b		       38		      .BYTE.b	%00111000
     50  f18c		       c0		      .BYTE.b	%11000000
     51  f18d		       30		      .BYTE.b	%00110000
     52  f18e		       0c		      .BYTE.b	%00001100
     53  f18f		       02		      .BYTE.b	%00000010
     54  f190		       01		      .BYTE.b	%00000001
     55  f191		       01		      .BYTE.b	%00000001
     56  f192		       00		      .BYTE.b	%00000000
     57  f193		       00		      .BYTE.b	%00000000
     58  f194		       01		      .BYTE.b	%00000001
     59  f195		       02		      .BYTE.b	%00000010
     60  f196
     61  f196				   WebImagePF2
     62  f196		       08		      .BYTE.b	%00001000
     63  f197		       04		      .BYTE.b	%00000100
     64  f198		       03		      .BYTE.b	%00000011
     65  f199		       3f		      .BYTE.b	%00111111
     66  f19a		       c2		      .BYTE.b	%11000010
     67  f19b		       04		      .BYTE.b	%00000100
     68  f19c		       08		      .BYTE.b	%00001000
     69  f19d		       08		      .BYTE.b	%00001000
     70  f19e		       10		      .BYTE.b	%00010000
     71  f19f		       20		      .BYTE.b	%00100000
     72  f1a0		       20		      .BYTE.b	%00100000
     73  f1a1		       41		      .BYTE.b	%01000001
     74  f1a2		       8e		      .BYTE.b	%10001110
     75  f1a3		       f0		      .BYTE.b	%11110000
     76  f1a4		       f0		      .BYTE.b	%11110000
     77  f1a5		       8e		      .BYTE.b	%10001110
     78  f1a6		       41		      .BYTE.b	%01000001
     79  f1a7		       20		      .BYTE.b	%00100000
     80  f1a8		       20		      .BYTE.b	%00100000
     81  f1a9		       10		      .BYTE.b	%00010000
     82  f1aa		       08		      .BYTE.b	%00001000
     83  f1ab		       08		      .BYTE.b	%00001000
     84  f1ac		       04		      .BYTE.b	%00000100
     85  f1ad		       c2		      .BYTE.b	%11000010
     86  f1ae		       3f		      .BYTE.b	%00111111
     87  f1af		       03		      .BYTE.b	%00000011
     88  f1b0		       04		      .BYTE.b	%00000100
     89  f1b1		       08		      .BYTE.b	%00001000
------- FILE kernel.asm
    169  f1b2
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f1b2					      include	"objects/spider_sprite.asm"
      1  f1b2				   SpiderSprite
      2  f1b2
      3  f1b2		       99		      .BYTE.b	%10011001
      4  f1b3		       bd		      .BYTE.b	%10111101
      5  f1b4		       bd		      .BYTE.b	%10111101
      6  f1b5		       bd		      .BYTE.b	%10111101
      7  f1b6		       7e		      .BYTE.b	%01111110
      8  f1b7		       3c		      .BYTE.b	%00111100
      9  f1b8		       18		      .BYTE.b	%00011000
     10  f1b9		       3c		      .BYTE.b	%00111100
     11  f1ba		       3c		      .BYTE.b	%00111100
     12  f1bb		       7e		      .BYTE.b	%01111110
     13  f1bc		       99		      .BYTE.b	%10011001
     14  f1bd		       99		      .BYTE.b	%10011001
     15  f1be		       bd		      .BYTE.b	%10111101
     16  f1bf		       db		      .BYTE.b	%11011011
     17  f1c0		       bd		      .BYTE.b	%10111101
     18  f1c1		       99		      .BYTE.b	%10011001
     19  f1c2
     20  f1c2		       c7		      .BYTE.b	%11000111
     21  f1c3		       c7		      .BYTE.b	%11000111
     22  f1c4		       28		      .BYTE.b	%00101000
     23  f1c5		       28		      .BYTE.b	%00101000
     24  f1c6		       3a		      .BYTE.b	%00111010
     25  f1c7		       7a		      .BYTE.b	%01111010
     26  f1c8		       fd		      .BYTE.b	%11111101
     27  f1c9		       ff		      .BYTE.b	%11111111
     28  f1ca		       ff		      .BYTE.b	%11111111
     29  f1cb		       fd		      .BYTE.b	%11111101
     30  f1cc		       7a		      .BYTE.b	%01111010
     31  f1cd		       3a		      .BYTE.b	%00111010
     32  f1ce		       28		      .BYTE.b	%00101000
     33  f1cf		       28		      .BYTE.b	%00101000
     34  f1d0		       c7		      .BYTE.b	%11000111
     35  f1d1		       c7		      .BYTE.b	%11000111
     36  f1d2
     37  f1d2		       99		      .BYTE.b	%10011001
     38  f1d3		       bd		      .BYTE.b	%10111101
     39  f1d4		       db		      .BYTE.b	%11011011
     40  f1d5		       bd		      .BYTE.b	%10111101
     41  f1d6		       99		      .BYTE.b	%10011001
     42  f1d7		       99		      .BYTE.b	%10011001
     43  f1d8		       7e		      .BYTE.b	%01111110
     44  f1d9		       3c		      .BYTE.b	%00111100
     45  f1da		       3c		      .BYTE.b	%00111100
     46  f1db		       18		      .BYTE.b	%00011000
     47  f1dc		       3c		      .BYTE.b	%00111100
     48  f1dd		       7e		      .BYTE.b	%01111110
     49  f1de		       bd		      .BYTE.b	%10111101
     50  f1df		       bd		      .BYTE.b	%10111101
     51  f1e0		       bd		      .BYTE.b	%10111101
     52  f1e1		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    171  f1e2
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1e2					      include	"objects/swatter_sprite.asm"
      1  f1e2				   SwatterSprite
      2  f1e2
      3  f1e2		       18		      .BYTE.b	%00011000
      4  f1e3		       34		      .BYTE.b	%00110100
      5  f1e4		       2c		      .BYTE.b	%00101100
      6  f1e5		       34		      .BYTE.b	%00110100
      7  f1e6		       6a		      .BYTE.b	%01101010
      8  f1e7		       56		      .BYTE.b	%01010110
      9  f1e8		       6a		      .BYTE.b	%01101010
     10  f1e9		       56		      .BYTE.b	%01010110
     11  f1ea		       ab		      .BYTE.b	%10101011
     12  f1eb		       d5		      .BYTE.b	%11010101
     13  f1ec		       ab		      .BYTE.b	%10101011
     14  f1ed		       d5		      .BYTE.b	%11010101
     15  f1ee		       ab		      .BYTE.b	%10101011
     16  f1ef		       d5		      .BYTE.b	%11010101
     17  f1f0		       ab		      .BYTE.b	%10101011
     18  f1f1		       d5		      .BYTE.b	%11010101
     19  f1f2		       6a		      .BYTE.b	%01101010
     20  f1f3		       56		      .BYTE.b	%01010110
     21  f1f4		       3c		      .BYTE.b	%00111100
     22  f1f5		       3c		      .BYTE.b	%00111100
------- FILE kernel.asm
    173  f1f6
------- FILE logo_image.asm LEVEL 2 PASS 2
      0  f1f6					      include	"logo_image.asm"
      1  f1f6				   LogoImage1
      2  f1f6		       03		      .BYTE.b	%00000011
      3  f1f7		       03		      .BYTE.b	%00000011
      4  f1f8		       13		      .BYTE.b	%00010011
      5  f1f9		       33		      .BYTE.b	%00110011
      6  f1fa		       63		      .BYTE.b	%01100011
      7  f1fb		       c3		      .BYTE.b	%11000011
      8  f1fc		       c3		      .BYTE.b	%11000011
      9  f1fd		       63		      .BYTE.b	%01100011
     10  f1fe		       33		      .BYTE.b	%00110011
     11  f1ff		       13		      .BYTE.b	%00010011
     12  f200		       03		      .BYTE.b	%00000011
     13  f201		       03		      .BYTE.b	%00000011
     14  f202
     15  f202				   LogoImage2
     16  f202		       83		      .BYTE.b	%10000011
     17  f203		       c7		      .BYTE.b	%11000111
     18  f204		       ef		      .BYTE.b	%11101111
     19  f205		       6e		      .BYTE.b	%01101110
     20  f206		       6c		      .BYTE.b	%01101100
     21  f207		       6c		      .BYTE.b	%01101100
     22  f208		       6c		      .BYTE.b	%01101100
     23  f209		       6c		      .BYTE.b	%01101100
     24  f20a		       6e		      .BYTE.b	%01101110
     25  f20b		       ef		      .BYTE.b	%11101111
     26  f20c		       c7		      .BYTE.b	%11000111
     27  f20d		       83		      .BYTE.b	%10000011
     28  f20e
     29  f20e				   LogoImage3
     30  f20e		       8f		      .BYTE.b	%10001111
     31  f20f		       cf		      .BYTE.b	%11001111
     32  f210		       ef		      .BYTE.b	%11101111
     33  f211		       6d		      .BYTE.b	%01101101
     34  f212		       2c		      .BYTE.b	%00101100
     35  f213		       0c		      .BYTE.b	%00001100
     36  f214		       0c		      .BYTE.b	%00001100
     37  f215		       4c		      .BYTE.b	%01001100
     38  f216		       6d		      .BYTE.b	%01101101
     39  f217		       ef		      .BYTE.b	%11101111
     40  f218		       cf		      .BYTE.b	%11001111
     41  f219		       8f		      .BYTE.b	%10001111
     42  f21a
     43  f21a				   LogoImage4
     44  f21a		       00		      .BYTE.b	%00000000
     45  f21b		       01		      .BYTE.b	%00000001
     46  f21c		       13		      .BYTE.b	%00010011
     47  f21d		       33		      .BYTE.b	%00110011
     48  f21e		       63		      .BYTE.b	%01100011
     49  f21f		       c3		      .BYTE.b	%11000011
     50  f220		       c3		      .BYTE.b	%11000011
     51  f221		       63		      .BYTE.b	%01100011
     52  f222		       33		      .BYTE.b	%00110011
     53  f223		       13		      .BYTE.b	%00010011
     54  f224		       01		      .BYTE.b	%00000001
     55  f225		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    175  f226
    176  f226				   InitSystem
    177  f226
    178  f226				   .init_clean
    179  f226							; Resets RAM, TIA registers, and CPU registers
      0  f226					      CLEAN_START
      1  f226		       78		      sei
      2  f227		       d8		      cld
      3  f228
      4  f228		       a2 00		      ldx	#0
      5  f22a		       8a		      txa
      6  f22b		       a8		      tay
      7  f22c		       ca	   .CLEAR_STACK dex
      8  f22d		       9a		      txs
      9  f22e		       48		      pha
     10  f22f		       d0 fb		      bne	.CLEAR_STACK
     11  f231
    181  f231
    182  f231				   .init_seed
    183  f231							; Seed the random number generator
    184  f231		       ad 84 02 	      lda	INTIM	; Unknown value
    185  f234		       85 84		      sta	Rand8	; Use as seed
    186  f236		       49 ff		      eor	#$FF	; Flip bits
    187  f238		       85 85		      sta	Rand16	; Just in case INTIM was 0
    188  f23a
    189  f23a				   .init_game
    190  f23a
    191  f23a		       20 a2 f2 	      jsr	LogoInit
    192  f23d
    193  f23d							;=======================================
    194  f23d							; Game Kernel
    195  f23d							;=======================================
    196  f23d
    197  f23d				   Main
    198  f23d
    199  f23d		       20 4c f2 	      jsr	VerticalSync
    200  f240		       20 65 f2 	      jsr	VerticalBlank
    201  f243		       20 78 f2 	      jsr	Kernel
    202  f246		       20 7f f2 	      jsr	OverScan
    203  f249		       4c 3d f2 	      jmp	Main
    204  f24c
    205  f24c				   VerticalSync
    206  f24c
    207  f24c		       a9 00		      lda	#0
    208  f24e		       85 01		      sta	VBLANK
    209  f250
    210  f250							; Turn on Vertical Sync signal and setup timer
    211  f250		       a9 02		      lda	#2
    212  f252		       85 00		      sta	VSYNC
    213  f254
    214  f254							; Increment frame count and reduce frame counter
    215  f254		       e6 8c		      inc	Frame
    216  f256		       c6 8d		      dec	FrameTimer
    217  f258		       c6 8e		      dec	FrameTimer+1
    218  f25a
    219  f25a							; VSYNCH signal scanlines
    220  f25a					      REPEAT	#KERNEL_VSYNC
    221  f25a		       85 02		      sta	WSYNC
    220  f25a					      REPEND
    221  f25c		       85 02		      sta	WSYNC
    220  f25c					      REPEND
    221  f25e		       85 02		      sta	WSYNC
    222  f260					      REPEND
    223  f260
    224  f260							; Turn off Vertical Sync signal
    225  f260		       a9 00		      lda	#0
    226  f262		       85 00		      sta	VSYNC
    227  f264
    228  f264				   .vsync_return
    229  f264		       60		      rts
    230  f265
    231  f265				   VerticalBlank
    232  f265							; Setup Timer
    233  f265		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    234  f267		       8d 96 02 	      sta	TIM64T
    235  f26a
    236  f26a				   .vblank_logic
    237  f26a							; Perform Game Logic
    238  f26a		       20 75 f2 	      jsr	.vblank_logic_call_ptr
    239  f26d
    240  f26d				   .vblank_loop
    241  f26d							; WSYNC until Timer is complete
    242  f26d		       85 02		      sta	WSYNC
    243  f26f		       ad 84 02 	      lda	INTIM
    244  f272		       d0 f9		      bne	.vblank_loop
    245  f274
    246  f274				   .vblank_return
    247  f274		       60		      rts
    248  f275
    249  f275				   .vblank_logic_call_ptr
    250  f275		       6c 86 00 	      jmp	(VBlankPtr)
    251  f278
    252  f278				   Kernel
    253  f278
    254  f278							; Perform Selected Kernel
    255  f278		       20 7c f2 	      jsr	.kernel_call_ptr
    256  f27b		       60		      rts
    257  f27c
    258  f27c				   .kernel_call_ptr
    259  f27c		       6c 88 00 	      jmp	(KernelPtr)
    260  f27f
    261  f27f				   OverScan
    262  f27f
    263  f27f							; End of screen, enter blanking
    264  f27f		       a9 42		      lda	#%01000010
    265  f281		       85 01		      sta	VBLANK
    266  f283
    267  f283							; Setup Timer
    268  f283		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    269  f285		       8d 96 02 	      sta	TIM64T
    270  f288
    271  f288				   .overscan_reset
    272  f288							; Check for reset switch
    273  f288		       ad 82 02 	      lda	SWCHB
    274  f28b		       4a		      lsr		; Push D0 to carry (C)
    275  f28c		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    276  f28e
    277  f28e							; Perform reset
    278  f28e		       20 a2 f2 	      jsr	LogoInit	; No need for logic
    279  f291		       4c 97 f2 	      jmp	.overscan_loop
    280  f294
    281  f294				   .overscan_logic
    282  f294							; Perform OverScan Logic
    283  f294		       20 9f f2 	      jsr	.overscan_logic_call_ptr
    284  f297
    285  f297				   .overscan_loop
    286  f297							; WSYNC until Timer is complete
    287  f297		       85 02		      sta	WSYNC
    288  f299		       ad 84 02 	      lda	INTIM
    289  f29c		       d0 f9		      bne	.overscan_loop
    290  f29e
    291  f29e				   .overscan_return
    292  f29e		       60		      rts
    293  f29f
    294  f29f				   .overscan_logic_call_ptr
    295  f29f		       6c 8a 00 	      jmp	(OverScanPtr)
    296  f2a2
    297  f2a2							;================
    298  f2a2							; State Code
    299  f2a2							;================
    300  f2a2
------- FILE logo.asm LEVEL 2 PASS 2
      0  f2a2					      include	"logo.asm"
      1  f2a2							;================
      2  f2a2							; Constants
      3  f2a2							;================
      4  f2a2
      5  f2a2		       00 8c	   LOGO_FRAMES =	140
      6  f2a2
      7  f2a2		       00 00	   LOGO_BG_COLOR =	#$00
      8  f2a2		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f2a2		       00 00	   LOGO_BG_BW_COLOR =	#$00
     10  f2a2		       00 0e	   LOGO_FG_BW_COLOR =	#$0E
     11  f2a2
     12  f2a2		       00 0c	   LOGO_IMAGE_SIZE =	12
     13  f2a2		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     14  f2a2		       00 3c	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     15  f2a2		       00 42	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     16  f2a2		       00 38	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-10	; The extra 10 is for processing overflow
     17  f2a2		       00 06	   LOGO_IMAGE_ANIM_SPEED =	#6
     18  f2a2
     19  f2a2				   LogoInit
     20  f2a2
     21  f2a2							; Setup logic and kernel
      0  f2a2					      SET_POINTER	VBlankPtr, LogoAnimation
      1  f2a2				   .POINTER   SET	VBlankPtr
      2  f2a2				   .ADDRESS   SET	LogoAnimation
      3  f2a2
      4  f2a2		       a9 cd		      LDA	#<.ADDRESS
      5  f2a4		       85 86		      STA	.POINTER
      6  f2a6		       a9 f2		      LDA	#>.ADDRESS
      7  f2a8		       85 87		      STA	.POINTER+1
      8  f2aa
      0  f2aa					      SET_POINTER	KernelPtr, LogoKernel
      1  f2aa				   .POINTER   SET	KernelPtr
      2  f2aa				   .ADDRESS   SET	LogoKernel
      3  f2aa
      4  f2aa		       a9 f9		      LDA	#<.ADDRESS
      5  f2ac		       85 88		      STA	.POINTER
      6  f2ae		       a9 f2		      LDA	#>.ADDRESS
      7  f2b0		       85 89		      STA	.POINTER+1
      8  f2b2
      0  f2b2					      SET_POINTER	OverScanPtr, LogoState
      1  f2b2				   .POINTER   SET	OverScanPtr
      2  f2b2				   .ADDRESS   SET	LogoState
      3  f2b2
      4  f2b2		       a9 de		      LDA	#<.ADDRESS
      5  f2b4		       85 8a		      STA	.POINTER
      6  f2b6		       a9 f2		      LDA	#>.ADDRESS
      7  f2b8		       85 8b		      STA	.POINTER+1
      8  f2ba
     25  f2ba
     26  f2ba							; Clean audio
     27  f2ba		       a9 00		      lda	#0
     28  f2bc		       85 19		      sta	AUDV0
     29  f2be		       85 1a		      sta	AUDV1
     30  f2c0
     31  f2c0							; Set initial button state
     32  f2c0							;    lda #0
     33  f2c0		       85 8f		      sta	InputState
     34  f2c2
     35  f2c2							; Setup frame counters
     36  f2c2							;    lda #0
     37  f2c2		       85 8c		      sta	Frame
     38  f2c4		       a9 8c		      lda	#LOGO_FRAMES
     39  f2c6		       85 8d		      sta	FrameTimer
     40  f2c8
     41  f2c8							; Setup Image Animation
     42  f2c8		       a9 0b		      lda	#LOGO_IMAGE_SIZE-1
     43  f2ca		       85 a1		      sta	WebIndex
     44  f2cc
     45  f2cc		       60		      rts
     46  f2cd
     47  f2cd				   LogoAnimation
     48  f2cd		       a5 8c		      lda	Frame
     49  f2cf		       c9 06		      cmp	#LOGO_IMAGE_ANIM_SPEED
     50  f2d1		       d0 0a		      bne	.logo_animation_return
     51  f2d3
     52  f2d3		       a9 00		      lda	#0
     53  f2d5		       85 8c		      sta	Frame
     54  f2d7
     55  f2d7		       a6 a1		      ldx	WebIndex
     56  f2d9		       f0 02		      beq	.logo_animation_return
     57  f2db
     58  f2db							; Add another visible line
     59  f2db		       c6 a1		      dec	WebIndex
     60  f2dd
     61  f2dd				   .logo_animation_return
     62  f2dd		       60		      rts
     63  f2de
     64  f2de				   LogoState
     65  f2de		       a5 8d		      lda	FrameTimer
     66  f2e0		       f0 13		      beq	.logo_state_next
     67  f2e2
     68  f2e2		       a2 01		      ldx	#1
     69  f2e4				   .logo_state
     70  f2e4							; Check if Fire Button on controller 0 or 1 is released
     71  f2e4		       b5 0c		      lda	INPT4,x
     72  f2e6		       30 05		      bmi	.logo_state_check
     73  f2e8
     74  f2e8				   .logo_state_on
     75  f2e8		       a9 01		      lda	#1
     76  f2ea		       95 8f		      sta	InputState,x
     77  f2ec		       60		      rts
     78  f2ed
     79  f2ed				   .logo_state_check
     80  f2ed		       b5 8f		      lda	InputState,x
     81  f2ef		       d0 04		      bne	.logo_state_next
     82  f2f1
     83  f2f1				   .logo_state_loop
     84  f2f1		       ca		      dex
     85  f2f2		       10 f0		      bpl	.logo_state
     86  f2f4		       60		      rts
     87  f2f5
     88  f2f5				   .logo_state_next
     89  f2f5							; Button is released or timer runs out, load title screen
     90  f2f5		       20 6f f3 	      jsr	TitleInit
     91  f2f8		       60		      rts
     92  f2f9
     93  f2f9				   LogoKernel
     94  f2f9
     95  f2f9							; Playfield Control
     96  f2f9		       a9 01		      lda	#%00000001	; Mirror
     97  f2fb							;sta CtrlPf
     98  f2fb		       85 0a		      sta	CTRLPF
     99  f2fd
    100  f2fd							; Load Colors
    101  f2fd		       ad 82 02 	      lda	SWCHB
    102  f300		       29 08		      and	#%00001000
    103  f302		       f0 07		      beq	.logo_kernel_bw
    104  f304
    105  f304				   .logo_kernel_color
    106  f304		       a2 00		      ldx	#LOGO_BG_COLOR
    107  f306		       a0 c6		      ldy	#LOGO_FG_COLOR
    108  f308		       4c 0f f3 	      jmp	.logo_kernel_set
    109  f30b
    110  f30b				   .logo_kernel_bw
    111  f30b		       a2 00		      ldx	#LOGO_BG_BW_COLOR
    112  f30d		       a0 0e		      ldy	#LOGO_FG_BW_COLOR
    113  f30f
    114  f30f				   .logo_kernel_set
    115  f30f		       86 09		      stx	COLUBK
    116  f311		       84 08		      sty	COLUPF
    117  f313
    118  f313				   .logo_kernel_start
    119  f313
    120  f313							; Turn on display
    121  f313		       a9 00		      lda	#0
    122  f315		       85 01		      sta	VBLANK
    123  f317
    124  f317		       a4 a1		      ldy	WebIndex
    125  f319		       d0 08		      bne	.logo_kernel_top_anim_padding
    126  f31b
    127  f31b				   .logo_kernel_top_padding
    128  f31b							; Top Padding
    129  f31b		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    130  f31d		       20 44 f0 	      jsr	BlankLines
    131  f320		       4c 32 f3 	      jmp	.logo_kernel_image
    132  f323
    133  f323				   .logo_kernel_top_anim_padding
    134  f323		       a2 38		      ldx	#LOGO_IMAGE_ANIM_PADDING
    135  f325		       20 44 f0 	      jsr	BlankLines
    136  f328
    137  f328				   .logo_kernel_image_animation_start
    138  f328		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    139  f32a
    140  f32a				   .logo_kernel_image_animation_loop
    141  f32a		       85 02		      sta	WSYNC
    142  f32c		       ca		      dex
    143  f32d		       d0 fb		      bne	.logo_kernel_image_animation_loop
    144  f32f
    145  f32f		       88		      dey
    146  f330		       10 f6		      bpl	.logo_kernel_image_animation_start
    147  f332
    148  f332				   .logo_kernel_image
    149  f332
    150  f332		       a2 0b		      ldx	#LOGO_IMAGE_SIZE-1
    151  f334		       a0 03		      ldy	#LOGO_IMAGE_LINE_SIZE-2
    152  f336							; The extra 2 on line size is for processing overflow
    153  f336
    154  f336							;dex
    155  f336		       e4 a1		      cpx	WebIndex
    156  f338		       90 2f		      bcc	.logo_kernel_bottom_padding
    157  f33a
    158  f33a				   .logo_kernel_image_line
    159  f33a		       85 02		      sta	WSYNC
    160  f33c
    161  f33c		       bd f6 f1 	      lda	LogoImage1,x
    162  f33f		       85 0e		      sta	PF1
    163  f341		       bd 02 f2 	      lda	LogoImage2,x
    164  f344		       85 0f		      sta	PF2
    165  f346
      0  f346					      sleep	26
      1  f346				   .CYCLES    SET	26
      2  f346
      3  f346				  -	      IF	.CYCLES < 2
      4  f346				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f346				  -	      ERR
      6  f346					      ENDIF
      7  f346
      8  f346				  -	      IF	.CYCLES & 1
      9  f346				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f346				  -	      nop	0
     11  f346				  -	      ELSE
     12  f346				  -	      bit	VSYNC
     13  f346				  -	      ENDIF
     14  f346				  -.CYCLES    SET	.CYCLES - 3
     15  f346					      ENDIF
     16  f346
     17  f346					      REPEAT	.CYCLES / 2
     18  f346		       ea		      nop
     17  f346					      REPEND
     18  f347		       ea		      nop
     17  f347					      REPEND
     18  f348		       ea		      nop
     17  f348					      REPEND
     18  f349		       ea		      nop
     17  f349					      REPEND
     18  f34a		       ea		      nop
     17  f34a					      REPEND
     18  f34b		       ea		      nop
     17  f34b					      REPEND
     18  f34c		       ea		      nop
     17  f34c					      REPEND
     18  f34d		       ea		      nop
     17  f34d					      REPEND
     18  f34e		       ea		      nop
     17  f34e					      REPEND
     18  f34f		       ea		      nop
     17  f34f					      REPEND
     18  f350		       ea		      nop
     17  f350					      REPEND
     18  f351		       ea		      nop
     17  f351					      REPEND
     18  f352		       ea		      nop
     19  f353					      REPEND
    167  f353
    168  f353		       bd 0e f2 	      lda	LogoImage3,x
    169  f356		       85 0f		      sta	PF2
    170  f358		       bd 1a f2 	      lda	LogoImage4,x
    171  f35b		       85 0e		      sta	PF1
    172  f35d
    173  f35d		       88		      dey
    174  f35e		       d0 da		      bne	.logo_kernel_image_line
    175  f360
    176  f360		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    177  f362
    178  f362		       e4 a1		      cpx	WebIndex
    179  f364		       90 03		      bcc	.logo_kernel_bottom_padding
    180  f366
    181  f366		       ca		      dex
    182  f367		       10 d1		      bpl	.logo_kernel_image_line
    183  f369
    184  f369				   .logo_kernel_bottom_padding
    185  f369							; Bottom Padding
    186  f369		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    187  f36b		       20 44 f0 	      jsr	BlankLines
    188  f36e
    189  f36e				   .logo_kernel_image_return
    190  f36e		       60		      rts
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f36f					      include	"title.asm"
      1  f36f							;================
      2  f36f							; Constants
      3  f36f							;================
      4  f36f
      5  f36f		       00 00	   TITLE_BG_COLOR =	#$00
      6  f36f		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f36f		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f36f		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f36f		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f36f
     11  f36f		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f36f		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f36f		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f36f		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f36f		       00 09	   TITLE_AUDIO_STEP =	9
     16  f36f
     17  f36f		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f36f		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f36f		       00 07	   TITLE_LABEL_LINE =	7
     20  f36f
     21  f36f		       00 10	   TITLE_GAP_SIZE =	#16
     22  f36f
     23  f36f		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f36f		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f36f		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f36f
     27  f36f				   TitleInit
     28  f36f
     29  f36f							; Setup logic and kernel
      0  f36f					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f36f				   .POINTER   SET	VBlankPtr
      2  f36f				   .ADDRESS   SET	TitleVerticalBlank
      3  f36f
      4  f36f		       a9 b6		      LDA	#<.ADDRESS
      5  f371		       85 86		      STA	.POINTER
      6  f373		       a9 f3		      LDA	#>.ADDRESS
      7  f375		       85 87		      STA	.POINTER+1
      8  f377
      0  f377					      SET_POINTER	KernelPtr, TitleKernel
      1  f377				   .POINTER   SET	KernelPtr
      2  f377				   .ADDRESS   SET	TitleKernel
      3  f377
      4  f377		       a9 ea		      LDA	#<.ADDRESS
      5  f379		       85 88		      STA	.POINTER
      6  f37b		       a9 f4		      LDA	#>.ADDRESS
      7  f37d		       85 89		      STA	.POINTER+1
      8  f37f
      0  f37f					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f37f				   .POINTER   SET	OverScanPtr
      2  f37f				   .ADDRESS   SET	TitleOverScan
      3  f37f
      4  f37f		       a9 77		      LDA	#<.ADDRESS
      5  f381		       85 8a		      STA	.POINTER
      6  f383		       a9 f4		      LDA	#>.ADDRESS
      7  f385		       85 8b		      STA	.POINTER+1
      8  f387
     33  f387
     34  f387							; Load audio settings
     35  f387
     36  f387							; Melody Line
     37  f387		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f389		       85 15		      sta	AUDC0
     39  f38b							;lda #TITLE_AUDIO_0_VOLUME
     40  f38b							;sta AUDV0
     41  f38b
     42  f38b							; Make it so that we play the first note immediately
     43  f38b		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     44  f38d		       85 91		      sta	AudioStep
     45  f38f		       a9 01		      lda	#1
     46  f391		       85 8d		      sta	FrameTimer
     47  f393
     48  f393							; Setup Spider Sprite
      0  f393					      SET_POINTER	SpiderPtr, TitleSpider
      1  f393				   .POINTER   SET	SpiderPtr
      2  f393				   .ADDRESS   SET	TitleSpider
      3  f393
      4  f393		       a9 b8		      LDA	#<.ADDRESS
      5  f395		       85 a9		      STA	.POINTER
      6  f397		       a9 f0		      LDA	#>.ADDRESS
      7  f399		       85 aa		      STA	.POINTER+1
      8  f39b
     50  f39b
     51  f39b		       a9 16		      lda	#%00010110	; Triple Sprite and 2 clock size missle0
     52  f39d		       85 04		      sta	NUSIZ0
     53  f39f		       a9 06		      lda	#%00000110	; Triple Sprite
     54  f3a1		       85 05		      sta	NUSIZ1
     55  f3a3
     56  f3a3		       a9 ff		      lda	#$FF	; Reflect P1
     57  f3a5		       85 0c		      sta	REFP1
     58  f3a7		       a9 00		      lda	#0	; No reflect
     59  f3a9		       85 0b		      sta	REFP0
     60  f3ab
     61  f3ab							; Drums and Bass
     62  f3ab							;lda #0
     63  f3ab							;sta AUDC1
     64  f3ab		       85 1a		      sta	AUDV1
     65  f3ad
     66  f3ad							;lda #0
     67  f3ad		       85 af		      sta	SpiderDrawPos	; Initialize animation state
     68  f3af
     69  f3af							; Disable at start
     70  f3af							;lda #0
     71  f3af		       85 1d		      sta	ENAM0
     72  f3b1
     73  f3b1							; Set initial button state
     74  f3b1							;lda #0
     75  f3b1		       85 8f		      sta	InputState
     76  f3b3
     77  f3b3							; Set initial select state
     78  f3b3		       85 82		      sta	Temp+2
     79  f3b5
     80  f3b5		       60		      rts
     81  f3b6
     82  f3b6				   TitleVerticalBlank
     83  f3b6
     84  f3b6							; Refresh random values
     85  f3b6		       20 13 f0 	      jsr	Random
     86  f3b9
     87  f3b9		       20 c3 f3 	      jsr	TitlePosition
     88  f3bc		       20 dd f3 	      jsr	TitleAnimation
     89  f3bf		       20 5a f4 	      jsr	TitleColor
     90  f3c2
     91  f3c2		       60		      rts
     92  f3c3
     93  f3c3				   TitlePosition
     94  f3c3
     95  f3c3							; Position Spider
     96  f3c3		       a2 00		      ldx	#0	; Object (player0)
     97  f3c5		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
     98  f3c7		       20 00 f0 	      jsr	PosObject
     99  f3ca
    100  f3ca		       a2 01		      ldx	#1	; Object (player1)
    101  f3cc		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    102  f3ce		       20 00 f0 	      jsr	PosObject
    103  f3d1
    104  f3d1							; Position Web Line
    105  f3d1		       a2 02		      ldx	#2	; Object (missle0)
    106  f3d3		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    107  f3d5		       20 00 f0 	      jsr	PosObject
    108  f3d8
    109  f3d8		       85 02		      sta	WSYNC
    110  f3da		       85 2a		      sta	HMOVE
    111  f3dc
    112  f3dc		       60		      rts
    113  f3dd
    114  f3dd				   TitleAnimation
    115  f3dd
    116  f3dd		       ad 82 02 	      lda	SWCHB
    117  f3e0		       29 02		      and	#%00000010
    118  f3e2		       d0 09		      bne	.title_animation_state_check
    119  f3e4
    120  f3e4		       a5 82		      lda	Temp+2
    121  f3e6
    122  f3e6				   .title_animation_state_on
    123  f3e6		       09 40		      ora	#%01000000
    124  f3e8		       85 82		      sta	Temp+2
    125  f3ea		       4c 00 f4 	      jmp	.title_animation_load
    126  f3ed
    127  f3ed				   .title_animation_state_check
    128  f3ed		       24 82		      bit	Temp+2
    129  f3ef		       50 0f		      bvc	.title_animation_load
    130  f3f1
    131  f3f1		       a5 82		      lda	Temp+2
    132  f3f3		       29 bf		      and	#%10111111
    133  f3f5
    134  f3f5				   .title_animation_state_swap
    135  f3f5		       10 05		      bpl	.title_animation_state_bug
    136  f3f7
    137  f3f7				   .title_animation_state_spider
    138  f3f7		       29 7f		      and	#%01111111
    139  f3f9		       4c fe f3 	      jmp	.title_animation_state_set
    140  f3fc
    141  f3fc				   .title_animation_state_bug
    142  f3fc		       09 80		      ora	#%10000000
    143  f3fe
    144  f3fe				   .title_animation_state_set
    145  f3fe		       85 82		      sta	Temp+2
    146  f400
    147  f400				   .title_animation_load
    148  f400
    149  f400		       24 82		      bit	Temp+2
    150  f402		       30 2b		      bmi	.title_animation_bug
    151  f404
    152  f404				   .title_animation_spider
    153  f404
    154  f404		       a5 91		      lda	AudioStep
    155  f406		       f0 0d		      beq	.title_animation_spider_1
    156  f408		       c9 04		      cmp	#4
    157  f40a		       f0 16		      beq	.title_animation_spider_2
    158  f40c		       c9 09		      cmp	#9
    159  f40e		       f0 05		      beq	.title_animation_spider_1
    160  f410		       c9 0c		      cmp	#12
    161  f412		       f0 0e		      beq	.title_animation_spider_2
    162  f414		       60		      rts
    163  f415
    164  f415				   .title_animation_spider_1
      0  f415					      SET_POINTER	SpiderPtr, TitleSpider
      1  f415				   .POINTER   SET	SpiderPtr
      2  f415				   .ADDRESS   SET	TitleSpider
      3  f415
      4  f415		       a9 b8		      LDA	#<.ADDRESS
      5  f417		       85 a9		      STA	.POINTER
      6  f419		       a9 f0		      LDA	#>.ADDRESS
      7  f41b		       85 aa		      STA	.POINTER+1
      8  f41d
    166  f41d		       a9 00		      lda	#0
    167  f41f		       4c 57 f4 	      jmp	.title_animation_return
    168  f422
    169  f422				   .title_animation_spider_2
      0  f422					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f422				   .POINTER   SET	SpiderPtr
      2  f422				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f422
      4  f422		       a9 c1		      LDA	#<.ADDRESS
      5  f424		       85 a9		      STA	.POINTER
      6  f426		       a9 f0		      LDA	#>.ADDRESS
      7  f428		       85 aa		      STA	.POINTER+1
      8  f42a
    171  f42a		       a9 01		      lda	#1
    172  f42c		       4c 57 f4 	      jmp	.title_animation_return
    173  f42f
    174  f42f				   .title_animation_bug
    175  f42f
    176  f42f		       a5 91		      lda	AudioStep
    177  f431		       f0 0d		      beq	.title_animation_bug_1
    178  f433		       c9 04		      cmp	#4
    179  f435		       f0 16		      beq	.title_animation_bug_2
    180  f437		       c9 09		      cmp	#9
    181  f439		       f0 05		      beq	.title_animation_bug_1
    182  f43b		       c9 0c		      cmp	#12
    183  f43d		       f0 0e		      beq	.title_animation_bug_2
    184  f43f		       60		      rts
    185  f440
    186  f440				   .title_animation_bug_1
      0  f440					      SET_POINTER	SpiderPtr, TitleBug
      1  f440				   .POINTER   SET	SpiderPtr
      2  f440				   .ADDRESS   SET	TitleBug
      3  f440
      4  f440		       a9 ca		      LDA	#<.ADDRESS
      5  f442		       85 a9		      STA	.POINTER
      6  f444		       a9 f0		      LDA	#>.ADDRESS
      7  f446		       85 aa		      STA	.POINTER+1
      8  f448
    188  f448		       a9 00		      lda	#0
    189  f44a		       4c 57 f4 	      jmp	.title_animation_return
    190  f44d
    191  f44d				   .title_animation_bug_2
      0  f44d					      SET_POINTER	SpiderPtr, TitleBug+#TITLE_SPIDER_SIZE
      1  f44d				   .POINTER   SET	SpiderPtr
      2  f44d				   .ADDRESS   SET	TitleBug+#TITLE_SPIDER_SIZE
      3  f44d
      4  f44d		       a9 d3		      LDA	#<.ADDRESS
      5  f44f		       85 a9		      STA	.POINTER
      6  f451		       a9 f0		      LDA	#>.ADDRESS
      7  f453		       85 aa		      STA	.POINTER+1
      8  f455
    193  f455		       a9 01		      lda	#1
    194  f457
    195  f457				   .title_animation_return
    196  f457		       85 af		      sta	SpiderDrawPos
    197  f459		       60		      rts
    198  f45a
    199  f45a				   TitleColor
    200  f45a
    201  f45a							; Load Colors
    202  f45a		       a9 00		      lda	#TITLE_BG_COLOR
    203  f45c		       85 09		      sta	COLUBK
    204  f45e		       a9 06		      lda	#TITLE_WEB_COLOR
    205  f460		       85 08		      sta	COLUPF
    206  f462
    207  f462							; Check b/w
    208  f462		       ad 82 02 	      lda	SWCHB
    209  f465		       29 08		      and	#%00001000
    210  f467		       f0 07		      beq	.title_bw
    211  f469
    212  f469				   .title_color
    213  f469		       a9 56		      lda	#TITLE_SPIDER_COLOR
    214  f46b		       85 06		      sta	COLUP0
    215  f46d		       85 07		      sta	COLUP1
    216  f46f
    217  f46f		       60		      rts
    218  f470
    219  f470				   .title_bw
    220  f470							; Load B/W Colors
    221  f470		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    222  f472		       85 06		      sta	COLUP0
    223  f474		       85 07		      sta	COLUP1
    224  f476
    225  f476		       60		      rts
    226  f477
    227  f477				   TitleOverScan
    228  f477		       20 7e f4 	      jsr	TitleAudio
    229  f47a		       20 b9 f4 	      jsr	TitleState
    230  f47d		       60		      rts
    231  f47e
    232  f47e				   TitleAudio
    233  f47e
    234  f47e		       a6 8d		      ldx	FrameTimer
    235  f480		       d0 36		      bne	.title_audio_return
    236  f482
    237  f482							; Reset Timer
    238  f482		       a2 09		      ldx	#TITLE_AUDIO_STEP
    239  f484		       86 8d		      stx	FrameTimer
    240  f486
    241  f486				   .title_audio_play
    242  f486
    243  f486							; Increment melody position
    244  f486		       a4 91		      ldy	AudioStep
    245  f488		       c8		      iny
    246  f489
    247  f489							; Check if we're at the end of the melody
    248  f489		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    249  f48b		       d0 02		      bne	.title_audio_play_note
    250  f48d
    251  f48d							; Loop our audio step
    252  f48d		       a0 00		      ldy	#0
    253  f48f
    254  f48f				   .title_audio_play_note
    255  f48f
    256  f48f							; Save current position
    257  f48f		       84 91		      sty	AudioStep
    258  f491
    259  f491				   .title_audio_play_melody
    260  f491							; Basic Melody Line
    261  f491		       b9 c6 f5 	      lda	TitleAudio0,y
    262  f494		       30 09		      bmi	.title_audio_play_melody_mute
    263  f496
    264  f496		       85 17		      sta	AUDF0
    265  f498		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
    266  f49a		       85 19		      sta	AUDV0
    267  f49c
    268  f49c		       4c a3 f4 	      jmp	.title_audio_play_rhythm
    269  f49f
    270  f49f				   .title_audio_play_melody_mute
    271  f49f
    272  f49f		       a9 00		      lda	#0
    273  f4a1		       85 19		      sta	AUDV0
    274  f4a3
    275  f4a3				   .title_audio_play_rhythm
    276  f4a3
    277  f4a3							; Drums and Bass
    278  f4a3		       b9 d6 f5 	      lda	TitleTone1,y
    279  f4a6		       30 0c		      bmi	.title_audio_play_rhythm_mute
    280  f4a8
    281  f4a8		       85 16		      sta	AUDC1
    282  f4aa		       b9 e6 f5 	      lda	TitleAudio1,y
    283  f4ad		       85 18		      sta	AUDF1
    284  f4af		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    285  f4b1		       85 1a		      sta	AUDV1
    286  f4b3
    287  f4b3		       60		      rts
    288  f4b4
    289  f4b4				   .title_audio_play_rhythm_mute
    290  f4b4
    291  f4b4		       a9 00		      lda	#0
    292  f4b6							;sta AUDF1
    293  f4b6							;sta AUDC1
    294  f4b6		       85 1a		      sta	AUDV1
    295  f4b8
    296  f4b8				   .title_audio_return
    297  f4b8		       60		      rts
    298  f4b9
    299  f4b9				   TitleState
    300  f4b9
    301  f4b9		       a2 01		      ldx	#1
    302  f4bb
    303  f4bb				   .title_state
    304  f4bb							; Check if fire button on controller is released
    305  f4bb		       b5 0c		      lda	INPT4,x
    306  f4bd		       30 0c		      bmi	.title_state_check
    307  f4bf
    308  f4bf				   .title_state_on
    309  f4bf		       a9 40		      lda	#%01000000
    310  f4c1		       e0 01		      cpx	#1
    311  f4c3		       d0 02		      bne	.title_state_on_set
    312  f4c5				   .title_state_on_1
    313  f4c5		       a9 80		      lda	#%10000000
    314  f4c7				   .title_state_on_set
    315  f4c7		       05 8f		      ora	InputState
    316  f4c9		       85 8f		      sta	InputState
    317  f4cb
    318  f4cb				   .title_state_check
    319  f4cb		       8a		      txa
    320  f4cc		       d0 07		      bne	.title_state_check_1
    321  f4ce				   .title_state_check_0
    322  f4ce		       24 8f		      bit	InputState
    323  f4d0		       70 0b		      bvs	.title_state_type_0
    324  f4d2		       4c d9 f4 	      jmp	.title_state_dec
    325  f4d5				   .title_state_check_1
    326  f4d5		       24 8f		      bit	InputState
    327  f4d7		       30 09		      bmi	.title_state_type_1
    328  f4d9
    329  f4d9				   .title_state_dec
    330  f4d9		       ca		      dex
    331  f4da		       10 df		      bpl	.title_state
    332  f4dc
    333  f4dc		       60		      rts
    334  f4dd
    335  f4dd				   .title_state_type_0
    336  f4dd		       a9 40		      lda	#%01000000
    337  f4df		       4c e4 f4 	      jmp	.title_state_type_set
    338  f4e2				   .title_state_type_1
    339  f4e2		       a9 80		      lda	#%10000000
    340  f4e4				   .title_state_type_set
    341  f4e4		       85 93		      sta	GameType
    342  f4e6				   .title_state_next
    343  f4e6							; Button is released, load up game
    344  f4e6		       20 d9 fc 	      jsr	GameInit
    345  f4e9
    346  f4e9				   .title_state_return
    347  f4e9		       60		      rts
    348  f4ea
    349  f4ea				   TitleKernel
    350  f4ea
    351  f4ea							; Playfield Control
    352  f4ea		       a9 00		      lda	#%00000000	; No mirroring
    353  f4ec		       85 0a		      sta	CTRLPF
    354  f4ee
    355  f4ee							; Turn on display
    356  f4ee							;lda #0
    357  f4ee		       85 01		      sta	VBLANK
    358  f4f0
    359  f4f0		       85 02		      sta	WSYNC
    360  f4f2
    361  f4f2				   TitleFrameTopDraw
    362  f4f2
    363  f4f2							; Start Counters
    364  f4f2		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    365  f4f4		       a0 00		      ldy	#0	; Image Counter
    366  f4f6
    367  f4f6				   .title_frame_top
    368  f4f6
    369  f4f6							; 76 machine cycles per scanline
    370  f4f6		       85 02		      sta	WSYNC
    371  f4f8
    372  f4f8				   .title_frame_top_load		; 66 cycles
    373  f4f8
    374  f4f8							; First half of image
    375  f4f8		       b9 52 f0 	      lda	TitleFrameTop,y	; 5
    376  f4fb		       85 0d		      sta	PF0	; 4
    377  f4fd		       b9 53 f0 	      lda	TitleFrameTop+1,y	; 5
    378  f500		       85 0e		      sta	PF1	; 4
    379  f502		       b9 54 f0 	      lda	TitleFrameTop+2,y	; 5
    380  f505		       85 0f		      sta	PF2	; 4
    381  f507
      0  f507					      sleep	6
      1  f507				   .CYCLES    SET	6
      2  f507
      3  f507				  -	      IF	.CYCLES < 2
      4  f507				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f507				  -	      ERR
      6  f507					      ENDIF
      7  f507
      8  f507				  -	      IF	.CYCLES & 1
      9  f507				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f507				  -	      nop	0
     11  f507				  -	      ELSE
     12  f507				  -	      bit	VSYNC
     13  f507				  -	      ENDIF
     14  f507				  -.CYCLES    SET	.CYCLES - 3
     15  f507					      ENDIF
     16  f507
     17  f507					      REPEAT	.CYCLES / 2
     18  f507		       ea		      nop
     17  f507					      REPEND
     18  f508		       ea		      nop
     17  f508					      REPEND
     18  f509		       ea		      nop
     19  f50a					      REPEND
    383  f50a
    384  f50a							; Second half of image
    385  f50a		       b9 55 f0 	      lda	TitleFrameTop+3,y	; 5
    386  f50d		       85 0d		      sta	PF0	; 4
    387  f50f		       b9 56 f0 	      lda	TitleFrameTop+4,y	; 5
    388  f512		       85 0e		      sta	PF1	; 4
    389  f514		       b9 57 f0 	      lda	TitleFrameTop+5,y	; 5
    390  f517		       85 0f		      sta	PF2	; 4
    391  f519
    392  f519				   .title_frame_top_index		; 4 cycles
    393  f519
    394  f519		       ca		      dex		; 2
    395  f51a		       d0 da		      bne	.title_frame_top	; 2
    396  f51c
    397  f51c				   .title_frame_top_index_next		; 6 cycles
    398  f51c
    399  f51c							; Restore scanline counter
    400  f51c		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    401  f51e
    402  f51e		       98		      tya		; 2
    403  f51f		       18		      clc		; 2
    404  f520		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    405  f522		       a8		      tay		; 2
    406  f523
    407  f523		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    408  f525		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    409  f527		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    410  f529		       85 08		      sta	COLUPF	; 4
    411  f52b		       ea		      nop		; 2
    412  f52c		       4c f8 f4 	      jmp	.title_frame_top_load	; 3
    413  f52f
    414  f52f				   .title_frame_top_label_color_skip
    415  f52f
    416  f52f		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    417  f531		       d0 c3		      bne	.title_frame_top	; 2
    418  f533
    419  f533				   .title_frame_top_clean
    420  f533
    421  f533							; Clear out playfield
    422  f533							;lda #0
    423  f533							;sta PF0
    424  f533							;sta PF1
    425  f533							;sta PF2
    426  f533
    427  f533				   TitleWebDraw
    428  f533
    429  f533		       a9 00		      lda	#%00000000
    430  f535		       24 82		      bit	Temp+2
    431  f537		       30 02		      bmi	.title_web_set
    432  f539				   .title_web_spider
    433  f539		       a9 02		      lda	#%00000010
    434  f53b				   .title_web_set
    435  f53b		       85 1d		      sta	ENAM0
    436  f53d
    437  f53d		       a9 06		      lda	#TITLE_WEB_COLOR
    438  f53f		       85 06		      sta	COLUP0
    439  f541
    440  f541		       a2 10		      ldx	#TITLE_GAP_SIZE
    441  f543		       20 44 f0 	      jsr	BlankLines
    442  f546
    443  f546				   TitleSpiderDraw
    444  f546
    445  f546		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    446  f548
    447  f548		       a5 af		      lda	SpiderDrawPos
    448  f54a		       f0 0c		      beq	.title_spider_extra_web_disable
    449  f54c
    450  f54c				   .title_spider_extra_web_start
    451  f54c		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    452  f54e				   .title_spider_extra_web_loop
    453  f54e		       85 02		      sta	WSYNC
    454  f550		       ca		      dex
    455  f551		       d0 fb		      bne	.title_spider_extra_web_loop
    456  f553
    457  f553		       88		      dey
    458  f554		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    459  f556		       d0 f4		      bne	.title_spider_extra_web_start
    460  f558
    461  f558				   .title_spider_extra_web_disable
    462  f558							;lda #0
    463  f558		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    464  f55a
    465  f55a		       85 02		      sta	WSYNC
    466  f55c
    467  f55c		       85 1d		      sta	ENAM0
    468  f55e
    469  f55e							; Check b/w
    470  f55e		       ad 82 02 	      lda	SWCHB
    471  f561		       29 08		      and	#%00001000
    472  f563		       f0 05		      beq	.title_spider_bw
    473  f565				   .title_spider_color
    474  f565		       a9 56		      lda	#TITLE_SPIDER_COLOR
    475  f567		       4c 6c f5 	      jmp	.title_spider_color_set
    476  f56a				   .title_spider_bw
    477  f56a		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    478  f56c				   .title_spider_color_set
    479  f56c		       85 06		      sta	COLUP0
    480  f56e
    481  f56e				   .title_spider
    482  f56e		       b1 a9		      lda	(SpiderPtr),y
    483  f570		       85 1b		      sta	GRP0
    484  f572		       85 1c		      sta	GRP1
    485  f574
    486  f574				   .title_spider_delay
    487  f574		       ca		      dex
    488  f575		       85 02		      sta	WSYNC
    489  f577		       d0 fb		      bne	.title_spider_delay
    490  f579
    491  f579				   .title_spider_index
    492  f579		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    493  f57b		       88		      dey
    494  f57c		       10 f0		      bpl	.title_spider
    495  f57e
    496  f57e				   .title_spider_clean
    497  f57e
    498  f57e							; Clear sprites
    499  f57e		       a9 00		      lda	#0
    500  f580		       85 1b		      sta	GRP0
    501  f582		       85 1c		      sta	GRP1
    502  f584
    503  f584				   TitleFrameBottomDraw
    504  f584
    505  f584							; Load Frame Color
    506  f584		       a9 06		      lda	#TITLE_WEB_COLOR
    507  f586		       85 08		      sta	COLUPF
    508  f588
    509  f588							; Start Counters
    510  f588		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    511  f58a		       a0 00		      ldy	#0	; Image Counter
    512  f58c
    513  f58c				   .title_frame_bottom
    514  f58c
    515  f58c							; 76 machine cycles per scanline
    516  f58c		       85 02		      sta	WSYNC
    517  f58e
    518  f58e				   .title_frame_bottom_load		; 66 cycles
    519  f58e
    520  f58e							; First half of image
    521  f58e		       b9 9a f0 	      lda	TitleFrameBottom,y	; 5
    522  f591		       85 0d		      sta	PF0	; 4
    523  f593		       b9 9b f0 	      lda	TitleFrameBottom+1,y	; 5
    524  f596		       85 0e		      sta	PF1	; 4
    525  f598		       b9 9c f0 	      lda	TitleFrameBottom+2,y	; 5
    526  f59b		       85 0f		      sta	PF2	; 4
    527  f59d
      0  f59d					      sleep	6
      1  f59d				   .CYCLES    SET	6
      2  f59d
      3  f59d				  -	      IF	.CYCLES < 2
      4  f59d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f59d				  -	      ERR
      6  f59d					      ENDIF
      7  f59d
      8  f59d				  -	      IF	.CYCLES & 1
      9  f59d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f59d				  -	      nop	0
     11  f59d				  -	      ELSE
     12  f59d				  -	      bit	VSYNC
     13  f59d				  -	      ENDIF
     14  f59d				  -.CYCLES    SET	.CYCLES - 3
     15  f59d					      ENDIF
     16  f59d
     17  f59d					      REPEAT	.CYCLES / 2
     18  f59d		       ea		      nop
     17  f59d					      REPEND
     18  f59e		       ea		      nop
     17  f59e					      REPEND
     18  f59f		       ea		      nop
     19  f5a0					      REPEND
    529  f5a0
    530  f5a0							; Second half of image
    531  f5a0		       b9 9d f0 	      lda	TitleFrameBottom+3,y	; 5
    532  f5a3		       85 0d		      sta	PF0	; 4
    533  f5a5		       b9 9e f0 	      lda	TitleFrameBottom+4,y	; 5
    534  f5a8		       85 0e		      sta	PF1	; 4
    535  f5aa		       b9 9f f0 	      lda	TitleFrameBottom+5,y	; 5
    536  f5ad		       85 0f		      sta	PF2	; 4
    537  f5af
    538  f5af				   .title_frame_bottom_index		; 4 cycles
    539  f5af
    540  f5af		       ca		      dex		; 2
    541  f5b0		       d0 da		      bne	.title_frame_bottom	; 2
    542  f5b2
    543  f5b2				   .title_frame_bottom_index_next		; 6 cycles
    544  f5b2
    545  f5b2							; Restore scanline counter
    546  f5b2		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    547  f5b4
    548  f5b4		       98		      tya		; 2
    549  f5b5		       18		      clc		; 2
    550  f5b6		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    551  f5b8		       a8		      tay		; 2
    552  f5b9		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    553  f5bb		       d0 cf		      bne	.title_frame_bottom	; 2
    554  f5bd
    555  f5bd				   .title_frame_bottom_clean
    556  f5bd
    557  f5bd							; Clear out playfield
    558  f5bd		       a9 00		      lda	#0
    559  f5bf		       85 0d		      sta	PF0
    560  f5c1		       85 0e		      sta	PF1
    561  f5c3		       85 0f		      sta	PF2
    562  f5c5
    563  f5c5				   .title_kernel_return
    564  f5c5		       60		      rts
    565  f5c6
    566  f5c6				   TitleAudio0
    567  f5c6
    568  f5c6		       0f		      .BYTE.b	#15	; B
    569  f5c7		       13		      .BYTE.b	#19	; G
    570  f5c8		       17		      .BYTE.b	#23	; E
    571  f5c9		       13		      .BYTE.b	#19	; G
    572  f5ca		       0e		      .BYTE.b	#14	; C
    573  f5cb		       0e		      .BYTE.b	#14
    574  f5cc		       ff		      .BYTE.b	#-1
    575  f5cd		       ff		      .BYTE.b	#-1
    576  f5ce		       0c		      .BYTE.b	#12	; D
    577  f5cf		       13		      .BYTE.b	#19
    578  f5d0		       17		      .BYTE.b	#23
    579  f5d1		       13		      .BYTE.b	#19
    580  f5d2		       0e		      .BYTE.b	#14	; C
    581  f5d3		       0e		      .BYTE.b	#14
    582  f5d4		       ff		      .BYTE.b	#-1
    583  f5d5		       ff		      .BYTE.b	#-1
    584  f5d6
    585  f5d6				   TitleTone1
    586  f5d6
    587  f5d6		       0f		      .BYTE.b	#15	; Electronic Rumble
    588  f5d7		       ff		      .BYTE.b	#-1
    589  f5d8		       01		      .BYTE.b	#1	; Low Pure Tone
    590  f5d9		       01		      .BYTE.b	#1
    591  f5da		       08		      .BYTE.b	#8	; White Noise
    592  f5db		       01		      .BYTE.b	#1
    593  f5dc		       01		      .BYTE.b	#1
    594  f5dd		       ff		      .BYTE.b	#-1
    595  f5de		       ff		      .BYTE.b	#-1
    596  f5df		       0f		      .BYTE.b	#15
    597  f5e0		       ff		      .BYTE.b	#-1
    598  f5e1		       ff		      .BYTE.b	#-1
    599  f5e2		       08		      .BYTE.b	#8
    600  f5e3		       ff		      .BYTE.b	#-1
    601  f5e4		       01		      .BYTE.b	#1
    602  f5e5		       01		      .BYTE.b	#1
    603  f5e6
    604  f5e6				   TitleAudio1
    605  f5e6
    606  f5e6		       1d		      .BYTE.b	#29	; Kick
    607  f5e7		       ff		      .BYTE.b	#-1
    608  f5e8		       1f		      .BYTE.b	#31	; C
    609  f5e9		       1f		      .BYTE.b	#31
    610  f5ea		       07		      .BYTE.b	#7	; Snare
    611  f5eb		       1f		      .BYTE.b	#31
    612  f5ec		       1f		      .BYTE.b	#31
    613  f5ed		       ff		      .BYTE.b	#-1
    614  f5ee		       ff		      .BYTE.b	#-1
    615  f5ef		       1d		      .BYTE.b	#29
    616  f5f0		       ff		      .BYTE.b	#-1
    617  f5f1		       ff		      .BYTE.b	#-1
    618  f5f2		       07		      .BYTE.b	#7
    619  f5f3		       ff		      .BYTE.b	#-1
    620  f5f4		       17		      .BYTE.b	#23	; F
    621  f5f5		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f5f6					      include	"game.asm"
      1  f5f6							;================
      2  f5f6							; Game
      3  f5f6							;================
      4  f5f6
      5  f5f6							; Constants
      6  f5f6
      7  f5f6		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f5f6		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f5f6		       00 09	   GAME_AUDIO_STEP =	9
     10  f5f6		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f5f6		       00 06	   GAME_AUDIO_TONE =	6
     12  f5f6
     13  f5f6							; Object Code
     14  f5f6
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f5f6					      include	"objects/level.asm"
      1  f5f6							;======================
      2  f5f6							; Level Logic
      3  f5f6							;======================
      4  f5f6
      5  f5f6							; Constants
      6  f5f6
      7  f5f6		       00 14	   LEVELS     =	20
      8  f5f6
      9  f5f6				   LevelInit
     10  f5f6
     11  f5f6							; Set beginning level by difficulty switches treated as binary
     12  f5f6		       ad 82 02 	      lda	SWCHB
     13  f5f9					      REPEAT	6	; shift to 0-3
     14  f5f9		       4a		      lsr
     13  f5f9					      REPEND
     14  f5fa		       4a		      lsr
     13  f5fa					      REPEND
     14  f5fb		       4a		      lsr
     13  f5fb					      REPEND
     14  f5fc		       4a		      lsr
     13  f5fc					      REPEND
     14  f5fd		       4a		      lsr
     13  f5fd					      REPEND
     14  f5fe		       4a		      lsr
     15  f5ff					      REPEND
     16  f5ff		       18		      clc		; multiply by 5
     17  f600		       85 80		      sta	Temp
     18  f602		       0a		      asl
     19  f603		       0a		      asl
     20  f604		       65 80		      adc	Temp
     21  f606		       85 a0		      sta	LevelCurrent
     22  f608
     23  f608		       20 32 f6 	      jsr	LevelLoad
     24  f60b
     25  f60b		       60		      rts
     26  f60c
     27  f60c				   LevelUpdate
     28  f60c
     29  f60c							; Calculate Desired score: level*4+23
     30  f60c		       a5 a0		      lda	LevelCurrent
     31  f60e		       0a		      asl		; x2
     32  f60f		       0a		      asl		; x2
     33  f610		       69 17		      adc	#23	; +23
     34  f612
     35  f612							; Check if score is high enough
     36  f612		       c5 96		      cmp	ScoreValue+1
     37  f614		       b0 18		      bcs	.level_update_return
     38  f616
     39  f616							; Check if we haven't reached the final level
     40  f616		       a5 a0		      lda	LevelCurrent
     41  f618		       c9 13		      cmp	#LEVELS-1
     42  f61a		       90 09		      bcc	.level_update_next
     43  f61c
     44  f61c							; Force score to 99
     45  f61c		       a9 63		      lda	#99
     46  f61e		       85 96		      sta	ScoreValue+1
     47  f620
     48  f620							; Show Win Screen
     49  f620		       38		      sec		; Define win
     50  f621		       20 aa fe 	      jsr	OverInit
     51  f624		       60		      rts
     52  f625
     53  f625				   .level_update_next
     54  f625
     55  f625							; Reset score
     56  f625		       a9 00		      lda	#0
     57  f627		       85 96		      sta	ScoreValue+1
     58  f629
     59  f629		       e6 a0		      inc	LevelCurrent
     60  f62b		       20 32 f6 	      jsr	LevelLoad
     61  f62e
     62  f62e				   .level_update_return
     63  f62e
     64  f62e		       20 6e f6 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     65  f631
     66  f631		       60		      rts
     67  f632
     68  f632				   LevelLoad
     69  f632
     70  f632							; Game Audio Step: 9-(level/4)
     71  f632		       a5 a0		      lda	LevelCurrent
     72  f634		       4a		      lsr		; /2
     73  f635		       4a		      lsr		; /2
     74  f636		       85 80		      sta	Temp
     75  f638		       a9 0a		      lda	#GAME_AUDIO_STEP+1
     76  f63a		       18		      clc
     77  f63b		       e5 80		      sbc	Temp
     78  f63d		       85 94		      sta	GameAudioStep
     79  f63f
     80  f63f							; Bug Speed: level/4+2
     81  f63f		       a5 a0		      lda	LevelCurrent
     82  f641		       4a		      lsr		; /2
     83  f642		       4a		      lsr		; /2
     84  f643		       69 02		      adc	#2
     85  f645		       85 b9		      sta	BugSpeed
     86  f647
     87  f647							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     88  f647		       a9 14		      lda	#20
     89  f649		       18		      clc
     90  f64a		       e5 a0		      sbc	LevelCurrent
     91  f64c		       0a		      asl		; x2
     92  f64d		       85 80		      sta	Temp
     93  f64f		       0a		      asl		; x2
     94  f650		       0a		      asl		; x2
     95  f651		       65 80		      adc	Temp
     96  f653		       85 c5		      sta	SwatterWaitTime
     97  f655
     98  f655							; Swatter Hold Time: 60-(level*2)
     99  f655
    100  f655		       a5 a0		      lda	LevelCurrent
    101  f657		       0a		      asl		; x2
    102  f658		       85 80		      sta	Temp
    103  f65a		       a9 3c		      lda	#60
    104  f65c		       18		      clc
    105  f65d		       e5 80		      sbc	Temp
    106  f65f		       85 c6		      sta	SwatterHoldTime
    107  f661
    108  f661							; Swatter Hit Damage: level*3+$10
    109  f661		       a5 a0		      lda	LevelCurrent
    110  f663		       18		      clc
    111  f664		       85 80		      sta	Temp
    112  f666		       0a		      asl		; x2
    113  f667		       65 80		      adc	Temp
    114  f669		       69 10		      adc	#$10
    115  f66b		       85 c7		      sta	SwatterHitDamage
    116  f66d
    117  f66d		       60		      rts
    118  f66e
    119  f66e				   LevelLoadColor
    120  f66e		       a4 a0		      ldy	LevelCurrent
    121  f670
    122  f670							; check b/w
    123  f670		       ad 82 02 	      lda	SWCHB
    124  f673		       29 08		      and	#%00001000
    125  f675		       f0 0b		      beq	.level_load_bw
    126  f677
    127  f677				   .level_load_color
    128  f677
    129  f677							; Background Color
    130  f677		       b9 8b f6 	      lda	LevelDataBk,y
    131  f67a		       85 a2		      sta	WebColor+0
    132  f67c
    133  f67c							; Web Color
    134  f67c		       b9 9f f6 	      lda	LevelDataPf,y
    135  f67f		       85 a3		      sta	WebColor+1
    136  f681
    137  f681		       60		      rts
    138  f682
    139  f682				   .level_load_bw
    140  f682
    141  f682							; Background Color
    142  f682		       a9 00		      lda	#WEB_BG_COLOR
    143  f684		       85 a2		      sta	WebColor+0
    144  f686
    145  f686							; Web Color
    146  f686		       a9 02		      lda	#WEB_FG_COLOR
    147  f688		       85 a3		      sta	WebColor+1
    148  f68a
    149  f68a		       60		      rts
    150  f68b
    151  f68b							; Easy: 1-5
    152  f68b							; Medium: 6-9
    153  f68b							; Hard: 10-15
    154  f68b							; Extreme: 16-19
    155  f68b
    156  f68b				   LevelDataBk		; Background Color
    157  f68b		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    158  f68c		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    159  f68d		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    160  f68e		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    161  f68f		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    162  f690		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    163  f691		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    164  f692		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    165  f693		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    166  f694		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    167  f695		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    168  f696		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    169  f697		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    170  f698		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    171  f699		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    172  f69a		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    173  f69b		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    174  f69c		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    175  f69d		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    176  f69e		       0c		      .BYTE.b	#$0C	; rgb(199, 199, 199)
    177  f69f
    178  f69f				   LevelDataPf		; Web Color
    179  f69f		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    180  f6a0		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    181  f6a1		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    182  f6a2		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    183  f6a3		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    184  f6a4		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    185  f6a5		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    186  f6a6		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    187  f6a7		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    188  f6a8		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    189  f6a9		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    190  f6aa		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    191  f6ab		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    192  f6ac		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    193  f6ad		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    194  f6ae		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    195  f6af		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    196  f6b0		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    197  f6b1		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    198  f6b2		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f6b3					      include	"objects/score.asm"
      1  f6b3							;======================
      2  f6b3							; Score (playfield)
      3  f6b3							;======================
      4  f6b3
      5  f6b3							; Constants
      6  f6b3
      7  f6b3		       00 00	   SCORE_BG_COLOR =	#$00
      8  f6b3		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f6b3		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f6b3		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f6b3		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f6b3		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f6b3
     14  f6b3		       00 05	   SCORE_LABEL_SIZE =	5
     15  f6b3		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f6b3		       00 02	   SCORE_LINE_SIZE =	2
     17  f6b3		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f6b3
     19  f6b3							; Initialization
     20  f6b3
     21  f6b3				   ScoreInit
     22  f6b3
     23  f6b3							; Health Score
     24  f6b3		       a9 ff		      lda	#$ff
     25  f6b5		       85 95		      sta	ScoreValue+0
     26  f6b7
     27  f6b7							; Game Score
     28  f6b7		       a9 00		      lda	#0
     29  f6b9		       85 96		      sta	ScoreValue+1
     30  f6bb
     31  f6bb		       60		      rts
     32  f6bc
     33  f6bc							; Frame Update
     34  f6bc
     35  f6bc				   ScoreUpdate
     36  f6bc
     37  f6bc							; Current Level Digits
     38  f6bc		       a5 a0		      lda	LevelCurrent
     39  f6be		       18		      clc
     40  f6bf		       69 01		      adc	#1
     41  f6c1		       a0 00		      ldy	#0
     42  f6c3		       20 f6 f6 	      jsr	ScoreUpdateDigits
     43  f6c6
     44  f6c6							; Score Digits
     45  f6c6		       a5 96		      lda	ScoreValue+1
     46  f6c8		       a0 01		      ldy	#1
     47  f6ca		       20 f6 f6 	      jsr	ScoreUpdateDigits
     48  f6cd
     49  f6cd							; Health Bar
     50  f6cd		       a5 95		      lda	ScoreValue+0
     51  f6cf		       f0 1c		      beq	.score_update_bar_empty
     52  f6d1
     53  f6d1					      REPEAT	4
     54  f6d1		       4a		      lsr
     53  f6d1					      REPEND
     54  f6d2		       4a		      lsr
     53  f6d2					      REPEND
     54  f6d3		       4a		      lsr
     53  f6d3					      REPEND
     54  f6d4		       4a		      lsr
     55  f6d5					      REPEND
     56  f6d5		       c9 08		      cmp	#8
     57  f6d7		       b0 09		      bcs	.score_update_bar_top
     58  f6d9
     59  f6d9				   .score_update_bar_bottom
     60  f6d9		       aa		      tax
     61  f6da		       bd 21 f8 	      lda	ScoreBar,x
     62  f6dd		       a0 00		      ldy	#$00
     63  f6df		       4c f1 f6 	      jmp	.score_update_bar_store
     64  f6e2
     65  f6e2				   .score_update_bar_top
     66  f6e2		       29 07		      and	#%00000111
     67  f6e4		       aa		      tax
     68  f6e5		       a9 7f		      lda	#$7f
     69  f6e7		       bc 29 f8 	      ldy	ScoreBarFlip,x
     70  f6ea		       4c f1 f6 	      jmp	.score_update_bar_store
     71  f6ed
     72  f6ed				   .score_update_bar_empty
     73  f6ed		       a9 00		      lda	#0
     74  f6ef		       a0 00		      ldy	#0
     75  f6f1
     76  f6f1				   .score_update_bar_store
     77  f6f1		       85 9e		      sta	ScoreBarGfx+0
     78  f6f3		       84 9f		      sty	ScoreBarGfx+1
     79  f6f5
     80  f6f5				   .score_update_end
     81  f6f5		       60		      rts
     82  f6f6
     83  f6f6				   ScoreUpdateDigits		; Value in A, ScoreDigit index in Y
     84  f6f6
     85  f6f6		       84 83		      sty	Temp+3
     86  f6f8
     87  f6f8		       20 21 f0 	      jsr	BinBcdConvert
     88  f6fb
     89  f6fb							; Only use first byte
     90  f6fb		       8a		      txa
     91  f6fc		       29 0f		      and	#$0f
     92  f6fe		       a8		      tay
     93  f6ff		       8a		      txa
     94  f700		       29 f0		      and	#$f0
     95  f702					      REPEAT	4
     96  f702		       4a		      lsr
     95  f702					      REPEND
     96  f703		       4a		      lsr
     95  f703					      REPEND
     96  f704		       4a		      lsr
     95  f704					      REPEND
     96  f705		       4a		      lsr
     97  f706					      REPEND
     98  f706		       aa		      tax
     99  f707
    100  f707							; Adjust index positions by multiplying by 5
    101  f707		       8a		      txa
    102  f708		       85 80		      sta	Temp
    103  f70a		       0a		      asl
    104  f70b		       0a		      asl
    105  f70c		       65 80		      adc	Temp
    106  f70e		       a6 83		      ldx	Temp+3
    107  f710		       95 99		      sta	ScoreDigitTens,x
    108  f712
    109  f712		       98		      tya
    110  f713		       85 80		      sta	Temp
    111  f715		       0a		      asl
    112  f716		       0a		      asl
    113  f717		       65 80		      adc	Temp
    114  f719		       a4 83		      ldy	Temp+3
    115  f71b		       99 97 00 	      sta	ScoreDigitOnes,y
    116  f71e
    117  f71e		       60		      rts
    118  f71f
    119  f71f							; Draw loop (uses SCORE_LINES scanlines)
    120  f71f
    121  f71f				   ScoreDraw
    122  f71f
    123  f71f							; Load Colors
    124  f71f		       a9 00		      lda	#SCORE_BG_COLOR
    125  f721		       85 09		      sta	COLUBK
    126  f723		       a9 06		      lda	#SCORE_LABEL_COLOR
    127  f725		       85 08		      sta	COLUPF
    128  f727		       85 06		      sta	COLUP0
    129  f729		       85 07		      sta	COLUP1
    130  f72b
    131  f72b							; Set Non-Mirror
    132  f72b		       a9 02		      lda	#%00000010
    133  f72d		       85 0a		      sta	CTRLPF
    134  f72f
    135  f72f		       a2 00		      ldx	#0
    136  f731				   .score_draw_label
    137  f731
    138  f731		       85 02		      sta	WSYNC
    139  f733
    140  f733							; First half of image
    141  f733		       bd 40 f1 	      lda	ScoreLabel+0,x	; 4
    142  f736		       85 0d		      sta	PF0	; 3
    143  f738		       bd 41 f1 	      lda	ScoreLabel+1,x
    144  f73b		       85 0e		      sta	PF1
    145  f73d		       bd 42 f1 	      lda	ScoreLabel+2,x
    146  f740		       85 0f		      sta	PF2
    147  f742
      0  f742					      sleep	8
      1  f742				   .CYCLES    SET	8
      2  f742
      3  f742				  -	      IF	.CYCLES < 2
      4  f742				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f742				  -	      ERR
      6  f742					      ENDIF
      7  f742
      8  f742				  -	      IF	.CYCLES & 1
      9  f742				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f742				  -	      nop	0
     11  f742				  -	      ELSE
     12  f742				  -	      bit	VSYNC
     13  f742				  -	      ENDIF
     14  f742				  -.CYCLES    SET	.CYCLES - 3
     15  f742					      ENDIF
     16  f742
     17  f742					      REPEAT	.CYCLES / 2
     18  f742		       ea		      nop
     17  f742					      REPEND
     18  f743		       ea		      nop
     17  f743					      REPEND
     18  f744		       ea		      nop
     17  f744					      REPEND
     18  f745		       ea		      nop
     19  f746					      REPEND
    149  f746
    150  f746							; Second half of image
    151  f746							;lda ScoreLabel+3,x ; 4
    152  f746		       a9 00		      lda	#0	; 2
    153  f748		       85 0d		      sta	PF0	; 3
    154  f74a		       bd 44 f1 	      lda	ScoreLabel+4,x
    155  f74d		       85 0e		      sta	PF1
    156  f74f		       bd 45 f1 	      lda	ScoreLabel+5,x
    157  f752		       85 0f		      sta	PF2
    158  f754
    159  f754		       8a		      txa
    160  f755		       18		      clc
    161  f756		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    162  f758		       aa		      tax
    163  f759		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    164  f75b		       d0 d4		      bne	.score_draw_label
    165  f75d
    166  f75d							; Clear labels and setup color
    167  f75d		       a9 00		      lda	#0
    168  f75f		       85 0d		      sta	PF0
    169  f761		       85 0e		      sta	PF1
    170  f763		       85 0f		      sta	PF2
    171  f765
    172  f765		       85 02		      sta	WSYNC
    173  f767
    174  f767							; Load Colors
    175  f767		       ad 82 02 	      lda	SWCHB
    176  f76a		       29 08		      and	#%00001000
    177  f76c		       f0 0d		      beq	.score_draw_bw
    178  f76e
    179  f76e				   .score_draw_color
    180  f76e		       a9 44		      lda	#SCORE_LEVEL_COLOR
    181  f770		       85 08		      sta	COLUPF
    182  f772		       85 06		      sta	COLUP0
    183  f774		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    184  f776		       85 07		      sta	COLUP1
    185  f778
    186  f778		       4c 85 f7 	      jmp	.score_draw_digit_start
    187  f77b
    188  f77b				   .score_draw_bw
    189  f77b		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    190  f77d		       85 08		      sta	COLUPF
    191  f77f		       85 06		      sta	COLUP0
    192  f781		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    193  f783		       85 07		      sta	COLUP1
    194  f785
    195  f785				   .score_draw_digit_start
    196  f785
    197  f785		       85 02		      sta	WSYNC
    198  f787
    199  f787							; Prepare initial line
    200  f787
    201  f787							; Level
    202  f787		       a4 99		      ldy	ScoreDigitTens
    203  f789		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    204  f78c		       29 f0		      and	#$f0
    205  f78e		       85 9b		      sta	ScoreDigitGfx
    206  f790
    207  f790		       a4 97		      ldy	ScoreDigitOnes
    208  f792		       b9 dc f0 	      lda	ScoreDigits,y
    209  f795		       29 f0		      and	#$f0
    210  f797		       85 9c		      sta	ScoreDigitGfx+1
    211  f799
    212  f799							; Score
    213  f799		       a4 9a		      ldy	ScoreDigitTens+1
    214  f79b		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    215  f79e		       29 0f		      and	#$0f
    216  f7a0		       85 9d		      sta	ScoreDigitGfx+2
    217  f7a2
    218  f7a2		       a4 98		      ldy	ScoreDigitOnes+1
    219  f7a4		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    220  f7a7		       29 f0		      and	#$f0
    221  f7a9		       05 9d		      ora	ScoreDigitGfx+2
    222  f7ab		       85 9d		      sta	ScoreDigitGfx+2
    223  f7ad
    224  f7ad		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    225  f7af		       a5 9b		      lda	ScoreDigitGfx
    226  f7b1		       85 02		      sta	WSYNC
    227  f7b3				   .score_draw_digit
    228  f7b3
    229  f7b3							;lda ScoreDigitGfx
    230  f7b3		       85 0d		      sta	PF0
    231  f7b5		       a5 9c		      lda	ScoreDigitGfx+1
    232  f7b7		       85 0e		      sta	PF1
    233  f7b9		       a5 9d		      lda	ScoreDigitGfx+2
    234  f7bb		       85 0f		      sta	PF2
    235  f7bd
    236  f7bd							; Begin preparing next line
    237  f7bd		       e6 97		      inc	ScoreDigitOnes
    238  f7bf		       e6 99		      inc	ScoreDigitTens
    239  f7c1		       e6 98		      inc	ScoreDigitOnes+1
    240  f7c3		       e6 9a		      inc	ScoreDigitTens+1
    241  f7c5
    242  f7c5		       a9 00		      lda	#0
    243  f7c7		       85 0d		      sta	PF0
    244  f7c9		       a5 9e		      lda	ScoreBarGfx+0
    245  f7cb		       85 0e		      sta	PF1
    246  f7cd		       a5 9f		      lda	ScoreBarGfx+1
    247  f7cf		       85 0f		      sta	PF2
    248  f7d1
    249  f7d1							; Level 1st Digit
    250  f7d1		       a4 99		      ldy	ScoreDigitTens
    251  f7d3		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    252  f7d6		       29 f0		      and	#$f0
    253  f7d8		       85 80		      sta	Temp
    254  f7da
    255  f7da							; Score 1st Digit
    256  f7da		       a4 9a		      ldy	ScoreDigitTens+1
    257  f7dc		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    258  f7df		       29 0f		      and	#$0f
    259  f7e1		       85 81		      sta	Temp+1
    260  f7e3
    261  f7e3		       a5 9b		      lda	ScoreDigitGfx
    262  f7e5		       85 0d		      sta	PF0
    263  f7e7		       a5 9c		      lda	ScoreDigitGfx+1
    264  f7e9		       85 0e		      sta	PF1
    265  f7eb		       a5 9d		      lda	ScoreDigitGfx+2
    266  f7ed		       85 0f		      sta	PF2
    267  f7ef
    268  f7ef							; Level 2nd Digit (and transfer)
    269  f7ef		       a4 97		      ldy	ScoreDigitOnes
    270  f7f1		       b9 dc f0 	      lda	ScoreDigits,y
    271  f7f4		       29 f0		      and	#$f0
    272  f7f6		       85 9c		      sta	ScoreDigitGfx+1
    273  f7f8
      0  f7f8					      sleep	3
      1  f7f8				   .CYCLES    SET	3
      2  f7f8
      3  f7f8				  -	      IF	.CYCLES < 2
      4  f7f8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7f8				  -	      ERR
      6  f7f8					      ENDIF
      7  f7f8
      8  f7f8					      IF	.CYCLES & 1
      9  f7f8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7f8		       04 00		      nop	0
     11  f7fa				  -	      ELSE
     12  f7fa				  -	      bit	VSYNC
     13  f7fa					      ENDIF
     14  f7fa				   .CYCLES    SET	.CYCLES - 3
     15  f7fa					      ENDIF
     16  f7fa
     17  f7fa				  -	      REPEAT	.CYCLES / 2
     18  f7fa				  -	      nop
     19  f7fa					      REPEND
    275  f7fa
    276  f7fa		       a9 00		      lda	#0
    277  f7fc		       85 0d		      sta	PF0
    278  f7fe		       a5 9e		      lda	ScoreBarGfx+0
    279  f800		       85 0e		      sta	PF1
    280  f802		       a4 9f		      ldy	ScoreBarGfx+1
    281  f804		       84 0f		      sty	PF2
    282  f806
    283  f806							; Score 2nd Digit (and transfer)
    284  f806		       a4 98		      ldy	ScoreDigitOnes+1
    285  f808		       b9 0e f1 	      lda	ScoreDigitsFlip,y
    286  f80b		       29 f0		      and	#$f0
    287  f80d		       05 81		      ora	Temp+1
    288  f80f		       85 9d		      sta	ScoreDigitGfx+2
    289  f811
    290  f811							; Transfer Level 1st Digit
    291  f811		       a5 80		      lda	Temp
    292  f813		       85 9b		      sta	ScoreDigitGfx
    293  f815
    294  f815		       ca		      dex
    295  f816		       d0 9b		      bne	.score_draw_digit
    296  f818
    297  f818		       a9 00		      lda	#0
    298  f81a		       85 0d		      sta	PF0
    299  f81c		       85 0e		      sta	PF1
    300  f81e		       85 0f		      sta	PF2
    301  f820
    302  f820		       60		      rts
    303  f821
    304  f821				   ScoreBar
    305  f821		       40		      .BYTE.b	#%01000000
    306  f822		       40		      .BYTE.b	#%01000000
    307  f823		       60		      .BYTE.b	#%01100000
    308  f824		       70		      .BYTE.b	#%01110000
    309  f825		       78		      .BYTE.b	#%01111000
    310  f826		       7c		      .BYTE.b	#%01111100
    311  f827		       7e		      .BYTE.b	#%01111110
    312  f828		       7f		      .BYTE.b	#%01111111
    313  f829
    314  f829				   ScoreBarFlip
    315  f829		       01		      .BYTE.b	#%00000001
    316  f82a		       03		      .BYTE.b	#%00000011
    317  f82b		       07		      .BYTE.b	#%00000111
    318  f82c		       0f		      .BYTE.b	#%00001111
    319  f82d		       1f		      .BYTE.b	#%00011111
    320  f82e		       3f		      .BYTE.b	#%00111111
    321  f82f		       7f		      .BYTE.b	#%01111111
    322  f830		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f831					      include	"objects/web.asm"
      1  f831							;================
      2  f831							; Web (Playfield)
      3  f831							;================
      4  f831
      5  f831							; Constants
      6  f831
      7  f831		       00 00	   WEB_BG_COLOR =	#$00
      8  f831		       00 02	   WEB_FG_COLOR =	#$02
      9  f831
     10  f831		       00 1c	   WEB_SIZE   =	28
     11  f831		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f831		       00 06	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f831
     14  f831							; Scanline Draw
     15  f831
     16  f831				   WebDrawStart
     17  f831
     18  f831							; Load Colors
     19  f831		       a5 a3		      lda	WebColor+1
     20  f833		       85 08		      sta	COLUPF
     21  f835
     22  f835							; Mirror playfield and use standard playfield color
     23  f835							;lda CtrlPf
     24  f835							;and #%11111100
     25  f835							;ora #%00000001
     26  f835							;sta CtrlPf
     27  f835							;sta CTRLPF
     28  f835
     29  f835							; Initialize image index
     30  f835		       a9 00		      lda	#0
     31  f837		       85 a1		      sta	WebIndex
     32  f839
     33  f839		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f83a					      include	"objects/spider.asm"
      1  f83a							;=================
      2  f83a							; Spider (player0)
      3  f83a							;=================
      4  f83a
      5  f83a							; Constants
      6  f83a
      7  f83a		       00 56	   SPIDER_COLOR =	#$56
      8  f83a		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f83a		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f83a		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f83a
     12  f83a		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f83a		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f83a		       00 02	   SPIDER_VEL_X =	2
     15  f83a		       00 02	   SPIDER_VEL_Y =	2
     16  f83a
     17  f83a							; Initialization
     18  f83a
     19  f83a				   SpiderInit
     20  f83a
     21  f83a							; Initialize Position in center of screen
     22  f83a		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f83c		       85 a4		      sta	SpiderPosX
     24  f83e		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f840		       85 ab		      sta	SpiderPosY
     26  f842
     27  f842							; Initial direction
     28  f842		       a9 10		      lda	#%00010000
     29  f844		       85 ac		      sta	SpiderCtrl
     30  f846
     31  f846							; Setup Sprite
      0  f846					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f846				   .POINTER   SET	SpiderPtr
      2  f846				   .ADDRESS   SET	SpiderSprite
      3  f846
      4  f846		       a9 b2		      LDA	#<.ADDRESS
      5  f848		       85 a9		      STA	.POINTER
      6  f84a		       a9 f1		      LDA	#>.ADDRESS
      7  f84c		       85 aa		      STA	.POINTER+1
      8  f84e
     33  f84e
     34  f84e		       60		      rts
     35  f84f
     36  f84f							; Frame Update
     37  f84f
     38  f84f				   SpiderUpdate
     39  f84f
     40  f84f				   SpiderControl
     41  f84f
     42  f84f							; Control Position
     43  f84f		       a6 a4		      ldx	SpiderPosX
     44  f851		       a4 ab		      ldy	SpiderPosY
     45  f853		       ad 80 02 	      lda	SWCHA
     46  f856
     47  f856				   .spider_control_check_right
     48  f856		       30 02		      bmi	.spider_control_check_left
     49  f858
     50  f858					      REPEAT	#SPIDER_VEL_X
     51  f858		       e8		      inx
     50  f858					      REPEND
     51  f859		       e8		      inx
     52  f85a					      REPEND
     53  f85a
     54  f85a				   .spider_control_check_left
     55  f85a		       2a		      rol
     56  f85b		       30 02		      bmi	.spider_control_check_down
     57  f85d
     58  f85d					      REPEAT	#SPIDER_VEL_X
     59  f85d		       ca		      dex
     58  f85d					      REPEND
     59  f85e		       ca		      dex
     60  f85f					      REPEND
     61  f85f
     62  f85f				   .spider_control_check_down
     63  f85f		       2a		      rol
     64  f860		       30 02		      bmi	.spider_control_check_up
     65  f862
     66  f862					      REPEAT	#SPIDER_VEL_Y
     67  f862		       88		      dey
     66  f862					      REPEND
     67  f863		       88		      dey
     68  f864					      REPEND
     69  f864
     70  f864				   .spider_control_check_up
     71  f864		       2a		      rol
     72  f865		       30 02		      bmi	.spider_control_sprite
     73  f867
     74  f867					      REPEAT	#SPIDER_VEL_Y
     75  f867		       c8		      iny
     74  f867					      REPEND
     75  f868		       c8		      iny
     76  f869					      REPEND
     77  f869
     78  f869				   .spider_control_sprite
     79  f869							; Control Sprite
     80  f869		       a9 00		      lda	#%00000000
     81  f86b							; 7th bit: right
     82  f86b							; 6th bit: left
     83  f86b							; 5th bit: down
     84  f86b							; 4th bit: up
     85  f86b
     86  f86b				   .spider_control_sprite_x
     87  f86b		       e4 a4		      cpx	SpiderPosX
     88  f86d		       90 04		      bcc	.spider_control_sprite_left
     89  f86f		       f0 09		      beq	.spider_control_sprite_y
     90  f871		       b0 05		      bcs	.spider_control_sprite_right
     91  f873
     92  f873				   .spider_control_sprite_left
     93  f873		       09 40		      ora	#%01000000
     94  f875		       4c 7a f8 	      jmp	.spider_control_sprite_y
     95  f878
     96  f878				   .spider_control_sprite_right
     97  f878		       09 80		      ora	#%10000000
     98  f87a
     99  f87a				   .spider_control_sprite_y
    100  f87a		       c4 ab		      cpy	SpiderPosY
    101  f87c		       90 04		      bcc	.spider_control_sprite_down
    102  f87e		       f0 09		      beq	.spider_control_sprite_store
    103  f880		       b0 05		      bcs	.spider_control_sprite_up
    104  f882
    105  f882				   .spider_control_sprite_down
    106  f882		       09 20		      ora	#%00100000
    107  f884		       4c 89 f8 	      jmp	.spider_control_sprite_store
    108  f887
    109  f887				   .spider_control_sprite_up
    110  f887		       09 10		      ora	#%00010000
    111  f889
    112  f889				   .spider_control_sprite_store
    113  f889		       c9 00		      cmp	#%00000000
    114  f88b		       f0 02		      beq	.spider_control_boundary
    115  f88d		       85 ac		      sta	SpiderCtrl
    116  f88f
    117  f88f				   .spider_control_boundary
    118  f88f							; Check Playfield Boundaries
    119  f88f
    120  f88f				   .spider_control_boundary_left
    121  f88f		       e0 02		      cpx	#SPIDER_VEL_X
    122  f891		       b0 05		      bcs	.spider_control_boundary_right
    123  f893		       a2 02		      ldx	#SPIDER_VEL_X
    124  f895		       4c 9e f8 	      jmp	.spider_control_boundary_top
    125  f898
    126  f898				   .spider_control_boundary_right
    127  f898		       e0 8e		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X
    128  f89a		       90 02		      bcc	.spider_control_boundary_top
    129  f89c		       a2 8e		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X
    130  f89e
    131  f89e				   .spider_control_boundary_top
    132  f89e		       c0 04		      cpy	#SPIDER_VEL_Y+2
    133  f8a0		       b0 05		      bcs	.spider_control_boundary_bottom
    134  f8a2		       a0 04		      ldy	#SPIDER_VEL_Y+2
    135  f8a4		       4c ad f8 	      jmp	.spider_control_store
    136  f8a7
    137  f8a7				   .spider_control_boundary_bottom
    138  f8a7		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    139  f8a9		       90 02		      bcc	.spider_control_store
    140  f8ab		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    141  f8ad
    142  f8ad				   .spider_control_store
    143  f8ad							; Store new position
    144  f8ad		       86 a4		      stx	SpiderPosX
    145  f8af		       84 ab		      sty	SpiderPosY
    146  f8b1
    147  f8b1				   .spider_control_sprite_assign
    148  f8b1							; Skip if no change
    149  f8b1		       c9 00		      cmp	#%00000000
    150  f8b3		       f0 3c		      beq	.spider_control_return
    151  f8b5
    152  f8b5		       a2 00		      ldx	#%00000000	; For reflection
    153  f8b7
    154  f8b7		       24 ac		      bit	SpiderCtrl
    155  f8b9		       30 0f		      bmi	.spider_control_sprite_assign_right
    156  f8bb		       50 18		      bvc	.spider_control_sprite_assign_top
    157  f8bd
    158  f8bd				   .spider_control_sprite_assign_left
      0  f8bd					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8bd				   .POINTER   SET	SpiderPtr
      2  f8bd				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8bd
      4  f8bd		       a9 c2		      LDA	#<.ADDRESS
      5  f8bf		       85 a9		      STA	.POINTER
      6  f8c1		       a9 f1		      LDA	#>.ADDRESS
      7  f8c3		       85 aa		      STA	.POINTER+1
      8  f8c5
    160  f8c5		       a2 08		      ldx	#%00001000
    161  f8c7		       4c ef f8 	      jmp	.spider_control_reflect
    162  f8ca
    163  f8ca				   .spider_control_sprite_assign_right
      0  f8ca					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8ca				   .POINTER   SET	SpiderPtr
      2  f8ca				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8ca
      4  f8ca		       a9 c2		      LDA	#<.ADDRESS
      5  f8cc		       85 a9		      STA	.POINTER
      6  f8ce		       a9 f1		      LDA	#>.ADDRESS
      7  f8d0		       85 aa		      STA	.POINTER+1
      8  f8d2
    165  f8d2		       4c ef f8 	      jmp	.spider_control_reflect
    166  f8d5
    167  f8d5				   .spider_control_sprite_assign_top
    168  f8d5		       c9 10		      cmp	#%00010000
    169  f8d7		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f8d9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f8d9				   .POINTER   SET	SpiderPtr
      2  f8d9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f8d9
      4  f8d9		       a9 b2		      LDA	#<.ADDRESS
      5  f8db		       85 a9		      STA	.POINTER
      6  f8dd		       a9 f1		      LDA	#>.ADDRESS
      7  f8df		       85 aa		      STA	.POINTER+1
      8  f8e1
    171  f8e1		       4c ef f8 	      jmp	.spider_control_reflect
    172  f8e4
    173  f8e4				   .spider_control_sprite_assign_bottom
      0  f8e4					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f8e4				   .POINTER   SET	SpiderPtr
      2  f8e4				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f8e4
      4  f8e4		       a9 d2		      LDA	#<.ADDRESS
      5  f8e6		       85 a9		      STA	.POINTER
      6  f8e8		       a9 f1		      LDA	#>.ADDRESS
      7  f8ea		       85 aa		      STA	.POINTER+1
      8  f8ec
    175  f8ec		       4c ef f8 	      jmp	.spider_control_reflect
    176  f8ef
    177  f8ef				   .spider_control_reflect
    178  f8ef		       86 0b		      stx	REFP0
    179  f8f1
    180  f8f1				   .spider_control_return
    181  f8f1							;    rts
    182  f8f1
    183  f8f1				   SpiderCollision
    184  f8f1		       a0 56		      ldy	#SPIDER_COLOR
    185  f8f3
    186  f8f3							; Check b/w
    187  f8f3		       ad 82 02 	      lda	SWCHB
    188  f8f6		       29 08		      and	#%00001000
    189  f8f8		       d0 02		      bne	.spider_collision_m0
    190  f8fa
    191  f8fa		       a0 0e		      ldy	#SPIDER_BW_COLOR
    192  f8fc
    193  f8fc				   .spider_collision_m0
    194  f8fc							; Check stun status
    195  f8fc		       a6 ba		      ldx	BugStunned
    196  f8fe		       d0 04		      bne	.spider_collision_m1
    197  f900
    198  f900							; Collision for M0 (V set)
    199  f900		       24 00		      bit	CXM0P
    200  f902		       70 0b		      bvs	.spider_collision_active
    201  f904
    202  f904				   .spider_collision_m1
    203  f904							; Check stun status
    204  f904		       a6 bb		      ldx	BugStunned+1
    205  f906		       d0 12		      bne	.spider_collision_return
    206  f908
    207  f908							; Collision for M1 (N set)
    208  f908		       24 01		      bit	CXM1P
    209  f90a		       30 03		      bmi	.spider_collision_active
    210  f90c
    211  f90c		       4c 1a f9 	      jmp	.spider_collision_return
    212  f90f
    213  f90f				   .spider_collision_active
    214  f90f		       a0 44		      ldy	#SPIDER_COL_COLOR
    215  f911
    216  f911							; Check b/w
    217  f911		       ad 82 02 	      lda	SWCHB
    218  f914		       29 08		      and	#%00001000
    219  f916		       d0 02		      bne	.spider_collision_return
    220  f918
    221  f918		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    222  f91a
    223  f91a				   .spider_collision_return
    224  f91a		       84 ad		      sty	SpiderColor
    225  f91c
    226  f91c				   .spider_update_return
    227  f91c		       60		      rts
    228  f91d
    229  f91d							; Scanline Draw
    230  f91d
    231  f91d				   SpiderDrawStart
    232  f91d
    233  f91d							; Set player 0 to be quad size
    234  f91d							;lda NuSiz0
    235  f91d							;and #%11111000
    236  f91d							;ora #%00000101
    237  f91d							;sta NuSiz0
    238  f91d							;sta NUSIZ0
    239  f91d
    240  f91d							; Set sprite color
    241  f91d		       a5 ad		      lda	SpiderColor
    242  f91f		       85 06		      sta	COLUP0
    243  f921
    244  f921							; Determine if we need to use vertical delay (odd line)
    245  f921		       a5 ab		      lda	SpiderPosY	; Y Position
    246  f923		       4a		      lsr
    247  f924		       b0 05		      bcs	.spider_draw_start_nodelay
    248  f926
    249  f926		       a0 01		      ldy	#1
    250  f928		       4c 2d f9 	      jmp	.spider_draw_start_set_delay
    251  f92b
    252  f92b				   .spider_draw_start_nodelay
    253  f92b		       a0 00		      ldy	#0
    254  f92d
    255  f92d				   .spider_draw_start_set_delay
    256  f92d		       84 25		      sty	VDELP0
    257  f92f
    258  f92f				   .spider_draw_start_pos
    259  f92f							; Calculate starting position
    260  f92f		       18		      clc
    261  f930		       69 10		      adc	#SPIDER_SIZE
    262  f932		       85 af		      sta	SpiderDrawPos
    263  f934
    264  f934							; Initialize sprite index and line buffer
    265  f934		       a9 10		      lda	#SPIDER_SPRITE_SIZE
    266  f936		       85 ae		      sta	SpiderIndex
    267  f938		       a9 00		      lda	#0
    268  f93a		       85 b0		      sta	SpiderLine
    269  f93c
    270  f93c		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f93d					      include	"objects/line.asm"
      1  f93d							;================
      2  f93d							; Line (ball)
      3  f93d							;================
      4  f93d
      5  f93d							; Constants
      6  f93d
      7  f93d		       00 08	   LINE_SIZE  =	8
      8  f93d		       00 04	   LINE_VEL_X =	4
      9  f93d		       00 04	   LINE_VEL_Y =	4
     10  f93d
     11  f93d		       00 08	   LINE_AUDIO_C =	8
     12  f93d		       00 01	   LINE_AUDIO_F =	1
     13  f93d		       00 04	   LINE_AUDIO_V =	4
     14  f93d
     15  f93d		       00 08	   LINE_SAMPLE_LEN =	8
     16  f93d		       00 03	   LINE_SAMPLE_C =	3
     17  f93d		       00 01	   LINE_SAMPLE_F =	1
     18  f93d		       00 04	   LINE_SAMPLE_V =	4
     19  f93d
     20  f93d							; Initialization
     21  f93d
     22  f93d				   LineInit
     23  f93d
     24  f93d							; Initial Line Control
     25  f93d		       a9 00		      lda	#0
     26  f93f		       85 b3		      sta	LineEnabled
     27  f941							;sta LinePosX
     28  f941							;sta LinePosY
     29  f941
     30  f941							; Initial direction
     31  f941							;lda #0
     32  f941							;sta LineVelocity+0
     33  f941							;lda #LINE_VEL_Y
     34  f941							;sta LineVelocity+1
     35  f941
     36  f941							; Disable line at start
     37  f941							;lda #-1
     38  f941							;sta LineDrawPos+0
     39  f941							;sta LineDrawPos+1
     40  f941
     41  f941		       60		      rts
     42  f942
     43  f942							; Frame Update
     44  f942
     45  f942				   LineUpdate
     46  f942		       20 4c f9 	      jsr	LineControl
     47  f945		       20 10 fa 	      jsr	LineObject
     48  f948		       20 3b fa 	      jsr	LineCollision
     49  f94b		       60		      rts
     50  f94c
     51  f94c				   LineControl
     52  f94c
     53  f94c							; If in two player mode, no fire is required
     54  f94c		       24 93		      bit	GameType
     55  f94e		       30 04		      bmi	.line_control_check_enabled
     56  f950
     57  f950				   .line_control_check_fire
     58  f950							; Check if Fire Button on controller 0 is pressed
     59  f950		       a5 0c		      lda	INPT4
     60  f952		       30 1c		      bmi	.line_control_skip
     61  f954
     62  f954				   .line_control_check_enabled
     63  f954		       24 b3		      bit	LineEnabled
     64  f956		       30 18		      bmi	.line_control_skip
     65  f958
     66  f958		       24 93		      bit	GameType
     67  f95a		       30 05		      bmi	.line_control_check_ctrl_1
     68  f95c
     69  f95c				   .line_control_check_ctrl_0
     70  f95c		       a5 ac		      lda	SpiderCtrl
     71  f95e		       4c 6c f9 	      jmp	.line_control_check_ctrl
     72  f961
     73  f961				   .line_control_check_ctrl_1
     74  f961		       ad 80 02 	      lda	SWCHA
     75  f964		       49 ff		      eor	#$ff	; invert bits
     76  f966					      REPEAT	4
     77  f966		       0a		      asl
     76  f966					      REPEND
     77  f967		       0a		      asl
     76  f967					      REPEND
     77  f968		       0a		      asl
     76  f968					      REPEND
     77  f969		       0a		      asl
     78  f96a					      REPEND
     79  f96a		       29 f0		      and	#%11110000
     80  f96c
     81  f96c				   .line_control_check_ctrl
     82  f96c		       85 83		      sta	Temp+3
     83  f96e		       d0 01		      bne	.line_control_fire
     84  f970
     85  f970				   .line_control_skip
     86  f970		       60		      rts
     87  f971
     88  f971				   .line_control_fire
     89  f971		       20 84 fa 	      jsr	LineEnable
     90  f974
     91  f974				   .line_control_x
     92  f974		       a9 c0		      lda	#%11000000
     93  f976		       24 83		      bit	Temp+3
     94  f978		       f0 0c		      beq	.line_control_x_none
     95  f97a				   .line_control_x_right
     96  f97a		       10 05		      bpl	.line_control_x_left
     97  f97c		       a9 04		      lda	#LINE_VEL_X
     98  f97e		       4c 88 f9 	      jmp	.line_control_x_store
     99  f981				   .line_control_x_left
    100  f981		       a9 fc		      lda	#-LINE_VEL_X
    101  f983		       4c 88 f9 	      jmp	.line_control_x_store
    102  f986				   .line_control_x_none
    103  f986		       a9 00		      lda	#0
    104  f988				   .line_control_x_store
    105  f988		       85 b5		      sta	LineVelocity
    106  f98a
    107  f98a				   .line_control_y
    108  f98a		       a5 83		      lda	Temp+3
    109  f98c		       29 30		      and	#%00110000
    110  f98e		       f0 0e		      beq	.line_control_y_none
    111  f990				   .line_control_y_down
    112  f990		       c9 20		      cmp	#%00100000
    113  f992		       d0 05		      bne	.line_control_y_up
    114  f994		       a9 fc		      lda	#-LINE_VEL_Y
    115  f996		       4c a0 f9 	      jmp	.line_control_y_store
    116  f999				   .line_control_y_up
    117  f999		       a9 04		      lda	#LINE_VEL_Y
    118  f99b		       4c a0 f9 	      jmp	.line_control_y_store
    119  f99e				   .line_control_y_none
    120  f99e		       a9 00		      lda	#0
    121  f9a0				   .line_control_y_store
    122  f9a0		       85 b6		      sta	LineVelocity+1
    123  f9a2
    124  f9a2				   .line_control_position
    125  f9a2
    126  f9a2		       a2 00		      ldx	#0	; offsetX
    127  f9a4		       a0 00		      ldy	#0	; offsetY
    128  f9a6
    129  f9a6		       a5 83		      lda	Temp+3
    130  f9a8
    131  f9a8				   .line_control_position_left
    132  f9a8		       c9 40		      cmp	#%01000000
    133  f9aa		       d0 07		      bne	.line_control_position_right
    134  f9ac
    135  f9ac		       a2 00		      ldx	#0
    136  f9ae		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    137  f9b0		       4c fb f9 	      jmp	.line_control_position_store
    138  f9b3
    139  f9b3				   .line_control_position_right
    140  f9b3		       c9 80		      cmp	#%10000000
    141  f9b5		       d0 07		      bne	.line_control_position_top
    142  f9b7
    143  f9b7		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    144  f9b9		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    145  f9bb		       4c fb f9 	      jmp	.line_control_position_store
    146  f9be
    147  f9be				   .line_control_position_top
    148  f9be		       c9 10		      cmp	#%00010000
    149  f9c0		       d0 07		      bne	.line_control_position_bottom
    150  f9c2
    151  f9c2		       a2 08		      ldx	#SPIDER_SIZE/2
    152  f9c4		       a0 10		      ldy	#SPIDER_SIZE
    153  f9c6		       4c fb f9 	      jmp	.line_control_position_store
    154  f9c9
    155  f9c9				   .line_control_position_bottom
    156  f9c9		       c9 20		      cmp	#%00100000
    157  f9cb		       d0 05		      bne	.line_control_position_top_right
    158  f9cd
    159  f9cd		       a2 08		      ldx	#SPIDER_SIZE/2
    160  f9cf		       4c fb f9 	      jmp	.line_control_position_store
    161  f9d2
    162  f9d2				   .line_control_position_top_right
    163  f9d2		       c9 90		      cmp	#%10010000
    164  f9d4		       d0 07		      bne	.line_control_position_bottom_right
    165  f9d6
    166  f9d6		       a2 10		      ldx	#SPIDER_SIZE
    167  f9d8		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    168  f9da		       4c fb f9 	      jmp	.line_control_position_store
    169  f9dd
    170  f9dd				   .line_control_position_bottom_right
    171  f9dd		       c9 a0		      cmp	#%10100000
    172  f9df		       d0 07		      bne	.line_control_position_bottom_left
    173  f9e1
    174  f9e1		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    175  f9e3		       a0 00		      ldy	#0
    176  f9e5		       4c fb f9 	      jmp	.line_control_position_store
    177  f9e8
    178  f9e8				   .line_control_position_bottom_left
    179  f9e8		       c9 60		      cmp	#%01100000
    180  f9ea		       d0 07		      bne	.line_control_position_top_left
    181  f9ec
    182  f9ec							; No Offset
    183  f9ec		       a2 04		      ldx	#LINE_SIZE/2
    184  f9ee		       a0 04		      ldy	#LINE_SIZE/2
    185  f9f0		       4c fb f9 	      jmp	.line_control_position_store
    186  f9f3
    187  f9f3				   .line_control_position_top_left
    188  f9f3		       c9 50		      cmp	#%01010000
    189  f9f5		       d0 04		      bne	.line_control_position_store
    190  f9f7
    191  f9f7		       a2 00		      ldx	#0
    192  f9f9		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    193  f9fb
    194  f9fb				   .line_control_position_store
    195  f9fb
    196  f9fb							; Apply offsetX to playerX
    197  f9fb		       a5 a4		      lda	SpiderPosX
    198  f9fd		       86 80		      stx	Temp
    199  f9ff		       18		      clc
    200  fa00		       65 80		      adc	Temp
    201  fa02		       aa		      tax
    202  fa03
    203  fa03							; Apply offsetY to playerY
    204  fa03		       a5 ab		      lda	SpiderPosY
    205  fa05		       84 80		      sty	Temp
    206  fa07		       18		      clc
    207  fa08		       65 80		      adc	Temp
    208  fa0a		       a8		      tay
    209  fa0b
    210  fa0b		       86 a8		      stx	LinePosX
    211  fa0d		       84 b4		      sty	LinePosY
    212  fa0f
    213  fa0f				   .line_control_return
    214  fa0f		       60		      rts
    215  fa10
    216  fa10				   LineObject
    217  fa10
    218  fa10							; Check if line is enabled
    219  fa10		       24 b3		      bit	LineEnabled
    220  fa12		       10 26		      bpl	.line_object_return
    221  fa14
    222  fa14							; Load position
    223  fa14		       a6 a8		      ldx	LinePosX
    224  fa16		       a4 b4		      ldy	LinePosY
    225  fa18
    226  fa18				   .line_object_boundary
    227  fa18				   .line_object_boundary_left
    228  fa18		       e0 04		      cpx	#LINE_VEL_X
    229  fa1a		       90 1b		      bcc	.line_object_disable
    230  fa1c				   .line_object_boundary_right
    231  fa1c		       e0 9b		      cpx	#160-LINE_VEL_X-1
    232  fa1e		       b0 17		      bcs	.line_object_disable
    233  fa20				   .line_object_boundary_bottom
    234  fa20		       c0 04		      cpy	#LINE_VEL_Y
    235  fa22		       90 13		      bcc	.line_object_disable
    236  fa24				   .line_object_boundary_top
    237  fa24		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    238  fa26		       b0 0f		      bcs	.line_object_disable
    239  fa28
    240  fa28				   .line_object_velocity
    241  fa28
    242  fa28							; Apply Velocity
    243  fa28		       8a		      txa
    244  fa29		       18		      clc
    245  fa2a		       65 b5		      adc	LineVelocity
    246  fa2c		       85 a8		      sta	LinePosX
    247  fa2e
    248  fa2e		       98		      tya
    249  fa2f		       18		      clc
    250  fa30		       65 b6		      adc	LineVelocity+1
    251  fa32		       85 b4		      sta	LinePosY
    252  fa34
    253  fa34		       4c 3a fa 	      jmp	.line_object_return
    254  fa37
    255  fa37				   .line_object_disable
    256  fa37		       20 99 fa 	      jsr	LineDisable
    257  fa3a
    258  fa3a				   .line_object_return
    259  fa3a		       60		      rts
    260  fa3b
    261  fa3b				   LineCollision
    262  fa3b
    263  fa3b		       a9 78		      lda	#BUG_STUN_LENGTH
    264  fa3d
    265  fa3d				   .line_collision_m0
    266  fa3d		       24 04		      bit	CXM0FB
    267  fa3f		       50 08		      bvc	.line_collision_m1
    268  fa41
    269  fa41							; Set stun timer
    270  fa41		       85 ba		      sta	BugStunned+0
    271  fa43
    272  fa43							; Disable line
    273  fa43		       20 99 fa 	      jsr	LineDisable
    274  fa46		       4c 52 fa 	      jmp	.line_collision_sample
    275  fa49
    276  fa49				   .line_collision_m1
    277  fa49		       24 05		      bit	CXM1FB
    278  fa4b		       50 15		      bvc	.line_collision_return
    279  fa4d
    280  fa4d							; Set stun timer
    281  fa4d		       85 bb		      sta	BugStunned+1
    282  fa4f
    283  fa4f							; Disable line
    284  fa4f		       20 99 fa 	      jsr	LineDisable
    285  fa52
    286  fa52				   .line_collision_sample
    287  fa52		       a9 08		      lda	#LINE_SAMPLE_LEN
    288  fa54		       85 92		      sta	SampleStep
    289  fa56		       a9 03		      lda	#LINE_SAMPLE_C
    290  fa58		       85 16		      sta	AUDC1
    291  fa5a		       a9 01		      lda	#LINE_SAMPLE_F
    292  fa5c		       85 18		      sta	AUDF1
    293  fa5e		       a9 04		      lda	#LINE_SAMPLE_V
    294  fa60		       85 1a		      sta	AUDV1
    295  fa62
    296  fa62				   .line_collision_return
    297  fa62		       60		      rts
    298  fa63
    299  fa63							; Scanline Draw
    300  fa63
    301  fa63				   LineDrawStart
    302  fa63
    303  fa63		       24 b3		      bit	LineEnabled
    304  fa65		       30 07		      bmi	.line_draw_start
    305  fa67
    306  fa67		       a9 ff		      lda	#-1
    307  fa69		       85 b7		      sta	LineDrawPos+0
    308  fa6b		       85 b8		      sta	LineDrawPos+1
    309  fa6d		       60		      rts
    310  fa6e
    311  fa6e				   .line_draw_start
    312  fa6e							; Determine if we need to use vertical delay (oven line)
    313  fa6e		       a5 b4		      lda	LinePosY
    314  fa70		       4a		      lsr
    315  fa71		       90 05		      bcc	.line_draw_start_nodelay
    316  fa73
    317  fa73		       a0 01		      ldy	#1
    318  fa75		       4c 7a fa 	      jmp	.line_draw_start_set_delay
    319  fa78
    320  fa78				   .line_draw_start_nodelay
    321  fa78		       a0 00		      ldy	#0
    322  fa7a
    323  fa7a				   .line_draw_start_set_delay
    324  fa7a		       84 27		      sty	VDELBL
    325  fa7c
    326  fa7c				   .line_draw_start_pos
    327  fa7c							; Calculate starting position
    328  fa7c		       18		      clc
    329  fa7d		       85 b7		      sta	LineDrawPos+0
    330  fa7f		       69 04		      adc	#LINE_SIZE/2
    331  fa81		       85 b8		      sta	LineDrawPos+1
    332  fa83
    333  fa83		       60		      rts
    334  fa84
    335  fa84				   LineEnable
    336  fa84		       a9 80		      lda	#%10000000
    337  fa86		       85 b3		      sta	LineEnabled
    338  fa88
    339  fa88		       a5 92		      lda	SampleStep
    340  fa8a		       d0 0c		      bne	.line_enable_return
    341  fa8c
    342  fa8c							; Play line audio
    343  fa8c		       a9 08		      lda	#LINE_AUDIO_C
    344  fa8e		       85 16		      sta	AUDC1
    345  fa90		       a9 01		      lda	#LINE_AUDIO_F
    346  fa92		       85 18		      sta	AUDF1
    347  fa94		       a9 04		      lda	#LINE_AUDIO_V
    348  fa96		       85 1a		      sta	AUDV1
    349  fa98
    350  fa98				   .line_enable_return
    351  fa98		       60		      rts
    352  fa99
    353  fa99				   LineDisable
    354  fa99		       a9 00		      lda	#0
    355  fa9b		       85 b3		      sta	LineEnabled
    356  fa9d
    357  fa9d		       a6 92		      ldx	SampleStep
    358  fa9f		       d0 02		      bne	.line_disable_return
    359  faa1
    360  faa1							; Mute audio
    361  faa1							;lda #0
    362  faa1		       85 1a		      sta	AUDV1
    363  faa3							;sta AUDF1
    364  faa3							;sta AUDC1
    365  faa3
    366  faa3				   .line_disable_return
    367  faa3		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  faa4					      include	"objects/bug.asm"
      1  faa4							;======================
      2  faa4							; Bugs (missiles 0 & 1)
      3  faa4							;======================
      4  faa4
      5  faa4							; Constants
      6  faa4
      7  faa4		       00 08	   BUG_SIZE   =	8
      8  faa4		       00 08	   BUG_BOUNDARY =	#(BUG_SIZE)
      9  faa4		       00 78	   BUG_STUN_LENGTH =	120
     10  faa4		       00 04	   BUG_POINTS =	4
     11  faa4		       00 03	   BUG_HP     =	3
     12  faa4
     13  faa4		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     14  faa4		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     15  faa4		       00 38	   BUG_STUN_COLOR =	#$38
     16  faa4		       00 08	   BUG_STUN_BW_COLOR =	#$08
     17  faa4
     18  faa4		       00 1e	   BUG_SAMPLE_LEN =	30
     19  faa4		       00 03	   BUG_SAMPLE_C =	3
     20  faa4		       00 14	   BUG_SAMPLE_F =	20
     21  faa4		       00 04	   BUG_SAMPLE_V =	4
     22  faa4
     23  faa4		       00 01	   BUG_COL_SAMPLE_LEN =	1
     24  faa4		       00 08	   BUG_COL_SAMPLE_C =	8
     25  faa4		       00 08	   BUG_COL_SAMPLE_F =	8
     26  faa4		       00 03	   BUG_COL_SAMPLE_V =	3
     27  faa4
     28  faa4							; Initialization
     29  faa4
     30  faa4				   BugInit
     31  faa4
     32  faa4							; Initialize Bugs
     33  faa4		       a2 01		      ldx	#1
     34  faa6
     35  faa6				   .bug_init_loop
     36  faa6		       20 ad fa 	      jsr	BugReset
     37  faa9
     38  faa9		       ca		      dex
     39  faaa		       10 fa		      bpl	.bug_init_loop
     40  faac
     41  faac		       60		      rts
     42  faad
     43  faad				   BugReset		; x = bug (0 or 1)
     44  faad
     45  faad							; Set random position
     46  faad		       20 13 f0 	      jsr	Random
     47  fab0
     48  fab0		       a5 84		      lda	Rand8
     49  fab2		       30 14		      bmi	.bug_reset_v
     50  fab4
     51  fab4				   .bug_reset_h
     52  fab4		       29 7f		      and	#$7f
     53  fab6		       95 a6		      sta	BugPosX,x
     54  fab8
     55  fab8		       a5 85		      lda	Rand16
     56  faba		       30 05		      bmi	.bug_reset_h_bottom
     57  fabc				   .bug_reset_h_top
     58  fabc		       a9 08		      lda	#BUG_BOUNDARY
     59  fabe		       4c c3 fa 	      jmp	.bug_reset_h_y
     60  fac1				   .bug_reset_h_bottom
     61  fac1		       a9 a5		      lda	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
     62  fac3				   .bug_reset_h_y
     63  fac3		       95 bc		      sta	BugPosY,x
     64  fac5		       4c d9 fa 	      jmp	.bug_reset_active
     65  fac8
     66  fac8				   .bug_reset_v
     67  fac8		       29 7f		      and	#$7f
     68  faca		       95 bc		      sta	BugPosY,x
     69  facc
     70  facc		       a5 85		      lda	Rand16
     71  face		       30 05		      bmi	.bug_reset_v_right
     72  fad0
     73  fad0				   .bug_reset_v_left
     74  fad0		       a9 08		      lda	#BUG_BOUNDARY
     75  fad2		       4c d7 fa 	      jmp	.bug_reset_v_x
     76  fad5				   .bug_reset_v_right
     77  fad5		       a9 98		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
     78  fad7				   .bug_reset_v_x
     79  fad7		       95 a6		      sta	BugPosX,x
     80  fad9
     81  fad9				   .bug_reset_active
     82  fad9							; Set as active
     83  fad9		       a9 00		      lda	#0
     84  fadb		       95 ba		      sta	BugStunned,x
     85  fadd
     86  fadd		       60		      rts
     87  fade
     88  fade							; Frame Update
     89  fade
     90  fade				   BugUpdate
     91  fade
     92  fade		       a2 01		      ldx	#1
     93  fae0				   .bug_update_loop
     94  fae0		       86 80		      stx	Temp+0
     95  fae2
     96  fae2		       b5 ba		      lda	BugStunned,x
     97  fae4		       f0 08		      beq	.bug_update_active
     98  fae6
     99  fae6				   .bug_update_stunned
    100  fae6		       d6 ba		      dec	BugStunned,x
    101  fae8		       20 7e fb 	      jsr	BugStunCollision
    102  faeb		       4c f4 fa 	      jmp	.bug_update_next
    103  faee
    104  faee				   .bug_update_active
    105  faee		       20 fa fa 	      jsr	BugMovement
    106  faf1		       20 59 fb 	      jsr	BugCollision
    107  faf4
    108  faf4				   .bug_update_next
    109  faf4		       a6 80		      ldx	Temp+0
    110  faf6		       ca		      dex
    111  faf7		       10 e7		      bpl	.bug_update_loop
    112  faf9
    113  faf9		       60		      rts
    114  fafa
    115  fafa				   BugMovement
    116  fafa
    117  fafa				   .bug_movement_random
    118  fafa		       20 13 f0 	      jsr	Random
    119  fafd		       29 03		      and	#%00000011
    120  faff		       85 81		      sta	Temp+1
    121  fb01
    122  fb01				   .bug_movement_load
    123  fb01		       a6 80		      ldx	Temp+0
    124  fb03
    125  fb03				   .bug_movement_x
    126  fb03		       a4 b9		      ldy	BugSpeed
    127  fb05
    128  fb05							; Alter X Position
    129  fb05		       a5 81		      lda	Temp+1
    130  fb07		       29 01		      and	#%00000001
    131  fb09
    132  fb09				   .bug_movement_x_check
    133  fb09		       c9 01		      cmp	#1
    134  fb0b		       d0 08		      bne	.bug_movement_x_right
    135  fb0d
    136  fb0d				   .bug_movement_x_left
    137  fb0d		       d6 a6		      dec	BugPosX,x
    138  fb0f		       88		      dey
    139  fb10		       d0 fb		      bne	.bug_movement_x_left
    140  fb12
    141  fb12		       4c 1a fb 	      jmp	.bug_movement_y
    142  fb15
    143  fb15				   .bug_movement_x_right
    144  fb15		       f6 a6		      inc	BugPosX,x
    145  fb17		       88		      dey
    146  fb18		       d0 fb		      bne	.bug_movement_x_right
    147  fb1a
    148  fb1a				   .bug_movement_y
    149  fb1a		       a4 b9		      ldy	BugSpeed
    150  fb1c
    151  fb1c							; Alter Y Position
    152  fb1c		       a5 81		      lda	Temp+1
    153  fb1e		       29 02		      and	#%00000010
    154  fb20		       4a		      lsr
    155  fb21
    156  fb21				   .bug_movement_y_check
    157  fb21		       c9 01		      cmp	#1
    158  fb23		       d0 08		      bne	.bug_movement_y_down
    159  fb25
    160  fb25				   .bug_movement_y_up
    161  fb25		       f6 bc		      inc	BugPosY,x
    162  fb27		       88		      dey
    163  fb28		       d0 fb		      bne	.bug_movement_y_up
    164  fb2a
    165  fb2a		       4c 32 fb 	      jmp	.bug_movement_boundary
    166  fb2d
    167  fb2d				   .bug_movement_y_down
    168  fb2d		       d6 bc		      dec	BugPosY,x
    169  fb2f		       88		      dey
    170  fb30		       d0 fb		      bne	.bug_movement_y_down
    171  fb32
    172  fb32				   .bug_movement_boundary
    173  fb32		       b5 a6		      lda	BugPosX,x
    174  fb34		       b4 bc		      ldy	BugPosY,x
    175  fb36
    176  fb36				   .bug_movement_boundary_left
    177  fb36		       c9 08		      cmp	#BUG_BOUNDARY
    178  fb38		       b0 05		      bcs	.bug_movement_boundary_right
    179  fb3a		       a9 08		      lda	#BUG_BOUNDARY
    180  fb3c		       4c 45 fb 	      jmp	.bug_movement_boundary_top
    181  fb3f
    182  fb3f				   .bug_movement_boundary_right
    183  fb3f		       c9 98		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    184  fb41		       90 02		      bcc	.bug_movement_boundary_top
    185  fb43		       a9 98		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    186  fb45
    187  fb45				   .bug_movement_boundary_top
    188  fb45		       c0 08		      cpy	#BUG_BOUNDARY
    189  fb47		       b0 05		      bcs	.bug_movement_boundary_bottom
    190  fb49		       a0 08		      ldy	#BUG_BOUNDARY
    191  fb4b		       4c 54 fb 	      jmp	.bug_movement_store
    192  fb4e
    193  fb4e				   .bug_movement_boundary_bottom
    194  fb4e		       c0 a5		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    195  fb50		       90 02		      bcc	.bug_movement_store
    196  fb52		       a0 a5		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    197  fb54
    198  fb54				   .bug_movement_store
    199  fb54		       95 a6		      sta	BugPosX,x
    200  fb56		       94 bc		      sty	BugPosY,x
    201  fb58
    202  fb58				   .bug_movement_return
    203  fb58		       60		      rts
    204  fb59
    205  fb59				   BugCollision
    206  fb59
    207  fb59		       e0 01		      cpx	#1
    208  fb5b		       f0 05		      beq	.bug_collision_m1
    209  fb5d
    210  fb5d				   .bug_collision_m0
    211  fb5d							; Collision for M0 (V set)
    212  fb5d		       24 00		      bit	CXM0P
    213  fb5f		       70 06		      bvs	.bug_collision_active
    214  fb61		       60		      rts
    215  fb62
    216  fb62				   .bug_collision_m1
    217  fb62							; Collision for M1 (N set)
    218  fb62		       24 01		      bit	CXM1P
    219  fb64		       30 01		      bmi	.bug_collision_active
    220  fb66		       60		      rts
    221  fb67
    222  fb67				   .bug_collision_active
    223  fb67
    224  fb67							; Reduce players score
    225  fb67		       a5 95		      lda	ScoreValue
    226  fb69		       f0 02		      beq	.bug_collision_score_skip
    227  fb6b		       c6 95		      dec	ScoreValue
    228  fb6d				   .bug_collision_score_skip
    229  fb6d
    230  fb6d							; Play collision sound
    231  fb6d		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    232  fb6f		       85 92		      sta	SampleStep
    233  fb71		       a9 08		      lda	#BUG_COL_SAMPLE_C
    234  fb73		       85 16		      sta	AUDC1
    235  fb75		       a9 08		      lda	#BUG_COL_SAMPLE_F
    236  fb77		       85 18		      sta	AUDF1
    237  fb79		       a9 03		      lda	#BUG_COL_SAMPLE_V
    238  fb7b		       85 1a		      sta	AUDV1
    239  fb7d
    240  fb7d		       60		      rts
    241  fb7e
    242  fb7e				   BugStunCollision
    243  fb7e
    244  fb7e		       e0 01		      cpx	#1
    245  fb80		       f0 05		      beq	.bug_stun_collision_m1
    246  fb82
    247  fb82				   .bug_stun_collision_m0
    248  fb82							; Collision for M0 (V set)
    249  fb82		       24 00		      bit	CXM0P
    250  fb84		       70 06		      bvs	.bug_stun_collision_active
    251  fb86		       60		      rts
    252  fb87
    253  fb87				   .bug_stun_collision_m1
    254  fb87							; Collision for M1 (N set)
    255  fb87		       24 01		      bit	CXM1P
    256  fb89		       30 01		      bmi	.bug_stun_collision_active
    257  fb8b		       60		      rts
    258  fb8c
    259  fb8c				   .bug_stun_collision_active
    260  fb8c							; Add health to player
    261  fb8c		       18		      clc
    262  fb8d		       a5 95		      lda	ScoreValue
    263  fb8f		       69 03		      adc	#BUG_HP
    264  fb91		       90 02		      bcc	.bug_stun_collision_active_hp_skip
    265  fb93		       a9 ff		      lda	#$ff
    266  fb95				   .bug_stun_collision_active_hp_skip
    267  fb95		       85 95		      sta	ScoreValue
    268  fb97
    269  fb97							; Add points to score
    270  fb97		       18		      clc
    271  fb98		       a5 96		      lda	ScoreValue+1
    272  fb9a		       69 04		      adc	#BUG_POINTS
    273  fb9c		       85 96		      sta	ScoreValue+1
    274  fb9e
    275  fb9e							; Reset bug
    276  fb9e		       20 ad fa 	      jsr	BugReset
    277  fba1
    278  fba1							; Play sample
    279  fba1		       a9 1e		      lda	#BUG_SAMPLE_LEN
    280  fba3		       85 92		      sta	SampleStep
    281  fba5		       a9 03		      lda	#BUG_SAMPLE_C
    282  fba7		       85 16		      sta	AUDC1
    283  fba9		       a9 14		      lda	#BUG_SAMPLE_F
    284  fbab		       85 18		      sta	AUDF1
    285  fbad		       a9 04		      lda	#BUG_SAMPLE_V
    286  fbaf		       85 1a		      sta	AUDV1
    287  fbb1
    288  fbb1		       60		      rts
    289  fbb2
    290  fbb2							; Scanline Draw
    291  fbb2
    292  fbb2				   BugDrawStart
    293  fbb2
    294  fbb2		       a0 01		      ldy	#1
    295  fbb4				   .bug_draw_start_loop
    296  fbb4
    297  fbb4							; Set missile 0 & 1 to be 8 clock size
    298  fbb4							;lda NuSiz0,y
    299  fbb4							;ora #%00110000
    300  fbb4							;sta NuSiz0,y
    301  fbb4							;sta NUSIZ0,y
    302  fbb4
    303  fbb4							; Setup half scanline positions
    304  fbb4		       b9 bc 00 	      lda	BugPosY,y
    305  fbb7		       4a		      lsr
    306  fbb8		       99 be 00 	      sta	BugDrawPosBottom,y
    307  fbbb
    308  fbbb		       69 04		      adc	#BUG_SIZE/2
    309  fbbd		       99 c0 00 	      sta	BugDrawPosTop,y
    310  fbc0
    311  fbc0		       88		      dey
    312  fbc1		       10 f1		      bpl	.bug_draw_start_loop
    313  fbc3
    314  fbc3		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fbc4					      include	"objects/swatter.asm"
      1  fbc4							;==================
      2  fbc4							; Swatter (player1)
      3  fbc4							;==================
      4  fbc4
      5  fbc4							; Constants
      6  fbc4
      7  fbc4		       00 30	   SWATTER_COLOR =	#$30
      8  fbc4		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fbc4		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fbc4		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fbc4
     12  fbc4		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fbc4		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fbc4
     15  fbc4		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fbc4		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fbc4
     18  fbc4		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fbc4		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fbc4		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fbc4
     22  fbc4		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fbc4		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fbc4		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fbc4		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fbc4		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fbc4
     28  fbc4		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fbc4		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fbc4		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fbc4		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fbc4
     33  fbc4		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fbc4		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fbc4		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fbc4		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fbc4
     38  fbc4							; Initialization
     39  fbc4
     40  fbc4							;SwatterInit:
     41  fbc4							;    jsr SwatterReset
     42  fbc4							;    rts
     43  fbc4
     44  fbc4							; Frame Update
     45  fbc4
     46  fbc4				   SwatterUpdate
     47  fbc4
     48  fbc4							; Check b/w
     49  fbc4		       ad 82 02 	      lda	SWCHB
     50  fbc7		       29 08		      and	#%00001000
     51  fbc9		       f0 10		      beq	.swatter_update_bw
     52  fbcb
     53  fbcb				   .swatter_update_color
     54  fbcb		       a5 c3		      lda	SwatterState
     55  fbcd		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     56  fbcf		       d0 05		      bne	.swatter_update_color_hold
     57  fbd1				   .swatter_update_color_active
     58  fbd1		       a9 30		      lda	#SWATTER_COLOR
     59  fbd3		       4c e8 fb 	      jmp	.swatter_update_color_set
     60  fbd6				   .swatter_update_color_hold
     61  fbd6		       a9 36		      lda	#SWATTER_HOLD_COLOR
     62  fbd8		       4c e8 fb 	      jmp	.swatter_update_color_set
     63  fbdb
     64  fbdb				   .swatter_update_bw
     65  fbdb		       a5 c3		      lda	SwatterState
     66  fbdd		       c9 80		      cmp	#SWATTER_STATE_HOLD
     67  fbdf		       d0 05		      bne	.swatter_update_bw_active
     68  fbe1				   .swatter_update_bw_hold
     69  fbe1		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     70  fbe3		       4c e8 fb 	      jmp	.swatter_update_color_set
     71  fbe6				   .swatter_update_bw_active
     72  fbe6		       a9 0e		      lda	#SWATTER_BW_COLOR
     73  fbe8
     74  fbe8				   .swatter_update_color_set
     75  fbe8		       85 c4		      sta	SwatterColor
     76  fbea
     77  fbea				   .swatter_update_hold_sample
     78  fbea		       a4 c3		      ldy	SwatterState
     79  fbec		       c0 80		      cpy	#SWATTER_STATE_HOLD
     80  fbee		       d0 0f		      bne	.swatter_update_state
     81  fbf0
     82  fbf0		       c6 cb		      dec	SwatterSampleCount
     83  fbf2		       d0 0b		      bne	.swatter_update_state
     84  fbf4
     85  fbf4		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     86  fbf6		       85 cb		      sta	SwatterSampleCount
     87  fbf8
     88  fbf8		       c6 cc		      dec	SwatterSampleF
     89  fbfa		       a4 cc		      ldy	SwatterSampleF
     90  fbfc		       20 ca fc 	      jsr	SwatterHoldSample
     91  fbff
     92  fbff				   .swatter_update_state
     93  fbff		       a6 8e		      ldx	FrameTimer+1
     94  fc01		       d0 3a		      bne	.swatter_update_collision
     95  fc03
     96  fc03		       a4 c3		      ldy	SwatterState
     97  fc05		       c0 00		      cpy	#SWATTER_STATE_WAIT
     98  fc07		       f0 0a		      beq	.swatter_update_state_wait
     99  fc09
    100  fc09		       c0 80		      cpy	#SWATTER_STATE_HOLD
    101  fc0b		       f0 18		      beq	.swatter_update_state_hold
    102  fc0d
    103  fc0d							; Else we're at the end of the active state
    104  fc0d		       20 aa fc 	      jsr	SwatterReset
    105  fc10		       4c 4c fc 	      jmp	.swatter_update_return
    106  fc13
    107  fc13				   .swatter_update_state_wait
    108  fc13		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    109  fc15		       84 cc		      sty	SwatterSampleF
    110  fc17		       20 ca fc 	      jsr	SwatterHoldSample
    111  fc1a
    112  fc1a		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    113  fc1c		       85 cb		      sta	SwatterSampleCount
    114  fc1e
    115  fc1e		       a9 80		      lda	#SWATTER_STATE_HOLD
    116  fc20		       a6 c6		      ldx	SwatterHoldTime
    117  fc22		       4c 39 fc 	      jmp	.swatter_update_state_set
    118  fc25
    119  fc25				   .swatter_update_state_hold
    120  fc25							; Play Swatter Active Sample
    121  fc25		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    122  fc27		       85 92		      sta	SampleStep
    123  fc29		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    124  fc2b		       85 16		      sta	AUDC1
    125  fc2d		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    126  fc2f		       85 18		      sta	AUDF1
    127  fc31		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    128  fc33		       85 1a		      sta	AUDV1
    129  fc35
    130  fc35		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    131  fc37		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    132  fc39
    133  fc39				   .swatter_update_state_set
    134  fc39		       85 c3		      sta	SwatterState
    135  fc3b		       86 8e		      stx	FrameTimer+1
    136  fc3d
    137  fc3d				   .swatter_update_collision
    138  fc3d							; Check 1 frame after active
    139  fc3d		       a5 c3		      lda	SwatterState
    140  fc3f		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    141  fc41		       d0 09		      bne	.swatter_update_return
    142  fc43		       a6 8e		      ldx	FrameTimer+1
    143  fc45		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    144  fc47		       d0 03		      bne	.swatter_update_return
    145  fc49
    146  fc49		       20 4d fc 	      jsr	SwatterCollision
    147  fc4c
    148  fc4c				   .swatter_update_return
    149  fc4c		       60		      rts
    150  fc4d
    151  fc4d				   SwatterCollision
    152  fc4d		       24 00		      bit	CXM0P
    153  fc4f		       30 09		      bmi	.swatter_collision_m0
    154  fc51
    155  fc51		       24 01		      bit	CXM1P
    156  fc53		       70 0a		      bvs	.swatter_collision_m1
    157  fc55
    158  fc55		       24 07		      bit	CXPPMM
    159  fc57		       30 0e		      bmi	.swatter_collision_p0
    160  fc59
    161  fc59		       60		      rts
    162  fc5a
    163  fc5a				   .swatter_collision_m0
    164  fc5a		       a2 00		      ldx	#0
    165  fc5c		       4c 61 fc 	      jmp	.swatter_collision_bug_reset
    166  fc5f
    167  fc5f				   .swatter_collision_m1
    168  fc5f		       a2 01		      ldx	#1
    169  fc61
    170  fc61				   .swatter_collision_bug_reset
    171  fc61		       20 ad fa 	      jsr	BugReset
    172  fc64		       4c 77 fc 	      jmp	.swatter_collision_active
    173  fc67
    174  fc67				   .swatter_collision_p0
    175  fc67
    176  fc67		       a5 95		      lda	ScoreValue
    177  fc69		       c5 c7		      cmp	SwatterHitDamage
    178  fc6b		       90 06		      bcc	.swatter_collision_p0_zero
    179  fc6d							;beq .swatter_collision_p0_zero
    180  fc6d
    181  fc6d		       18		      clc
    182  fc6e		       e5 c7		      sbc	SwatterHitDamage
    183  fc70		       4c 75 fc 	      jmp	.swatter_collision_p0_set
    184  fc73
    185  fc73				   .swatter_collision_p0_zero
    186  fc73		       a9 00		      lda	#0
    187  fc75
    188  fc75				   .swatter_collision_p0_set
    189  fc75		       85 95		      sta	ScoreValue
    190  fc77
    191  fc77				   .swatter_collision_active
    192  fc77							; Player swatter hit sample
    193  fc77		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    194  fc79		       85 92		      sta	SampleStep
    195  fc7b		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    196  fc7d		       85 16		      sta	AUDC1
    197  fc7f		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    198  fc81		       85 18		      sta	AUDF1
    199  fc83		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    200  fc85		       85 1a		      sta	AUDV1
    201  fc87
    202  fc87		       60		      rts
    203  fc88
    204  fc88							; Scanline Draw
    205  fc88
    206  fc88				   SwatterDrawStart
    207  fc88
    208  fc88							; Set sprite color
    209  fc88		       a5 c4		      lda	SwatterColor
    210  fc8a		       85 07		      sta	COLUP1
    211  fc8c
    212  fc8c							; Hide swatter if wait state
    213  fc8c		       24 c3		      bit	SwatterState
    214  fc8e		       30 09		      bmi	.swatter_draw_start
    215  fc90
    216  fc90		       a9 ff		      lda	#-1
    217  fc92		       85 c8		      sta	SwatterIndex
    218  fc94							;sta SwatterDrawPos
    219  fc94		       a9 00		      lda	#0
    220  fc96		       85 ca		      sta	SwatterLine
    221  fc98
    222  fc98		       60		      rts
    223  fc99
    224  fc99				   .swatter_draw_start
    225  fc99
    226  fc99							; Note: Doesn't need vertical delay
    227  fc99
    228  fc99							; Calculate starting position
    229  fc99		       a5 c2		      lda	SwatterPosY	; Y Position
    230  fc9b		       4a		      lsr
    231  fc9c		       18		      clc
    232  fc9d		       69 14		      adc	#SWATTER_SPRITE_SIZE
    233  fc9f		       85 c9		      sta	SwatterDrawPos
    234  fca1
    235  fca1							; Initialize sprite index
    236  fca1		       a9 13		      lda	#SWATTER_SPRITE_SIZE-1
    237  fca3		       85 c8		      sta	SwatterIndex
    238  fca5		       a9 00		      lda	#0
    239  fca7		       85 ca		      sta	SwatterLine
    240  fca9
    241  fca9		       60		      rts
    242  fcaa
    243  fcaa				   SwatterReset
    244  fcaa							; Initialize Swatter State
    245  fcaa		       a9 00		      lda	#SWATTER_STATE_WAIT
    246  fcac		       85 c3		      sta	SwatterState
    247  fcae
    248  fcae							; Set Wait Timer
    249  fcae		       20 13 f0 	      jsr	Random
    250  fcb1		       a5 84		      lda	Rand8
    251  fcb3		       29 3f		      and	#$3f
    252  fcb5		       18		      clc
    253  fcb6		       65 c5		      adc	SwatterWaitTime
    254  fcb8		       85 8e		      sta	FrameTimer+1
    255  fcba
    256  fcba							; Set Random Position
    257  fcba		       20 13 f0 	      jsr	Random
    258  fcbd		       a5 84		      lda	Rand8	; X Position
    259  fcbf		       29 7f		      and	#$7f
    260  fcc1		       85 a5		      sta	SwatterPosX
    261  fcc3		       a5 85		      lda	Rand16	; Y Position
    262  fcc5		       29 7e		      and	#$7e	; Ensure that Y position is even
    263  fcc7		       85 c2		      sta	SwatterPosY
    264  fcc9
    265  fcc9		       60		      rts
    266  fcca
    267  fcca				   SwatterHoldSample
    268  fcca		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    269  fccc		       85 92		      sta	SampleStep
    270  fcce		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    271  fcd0		       85 16		      sta	AUDC1
    272  fcd2		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    273  fcd4		       85 1a		      sta	AUDV1
    274  fcd6
    275  fcd6		       84 18		      sty	AUDF1	; Store value of y as frequency
    276  fcd8
    277  fcd8		       60		      rts
------- FILE game.asm
     22  fcd9
     23  fcd9							; Initialization
     24  fcd9
     25  fcd9				   GameInit
     26  fcd9
     27  fcd9							; Setup logic and kernel
      0  fcd9					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fcd9				   .POINTER   SET	VBlankPtr
      2  fcd9				   .ADDRESS   SET	GameVerticalBlank
      3  fcd9
      4  fcd9		       a9 16		      LDA	#<.ADDRESS
      5  fcdb		       85 86		      STA	.POINTER
      6  fcdd		       a9 fd		      LDA	#>.ADDRESS
      7  fcdf		       85 87		      STA	.POINTER+1
      8  fce1
      0  fce1					      SET_POINTER	KernelPtr, GameKernel
      1  fce1				   .POINTER   SET	KernelPtr
      2  fce1				   .ADDRESS   SET	GameKernel
      3  fce1
      4  fce1		       a9 8b		      LDA	#<.ADDRESS
      5  fce3		       85 88		      STA	.POINTER
      6  fce5		       a9 fd		      LDA	#>.ADDRESS
      7  fce7		       85 89		      STA	.POINTER+1
      8  fce9
      0  fce9					      SET_POINTER	OverScanPtr, GameOverScan
      1  fce9				   .POINTER   SET	OverScanPtr
      2  fce9				   .ADDRESS   SET	GameOverScan
      3  fce9
      4  fce9		       a9 3e		      LDA	#<.ADDRESS
      5  fceb		       85 8a		      STA	.POINTER
      6  fced		       a9 fd		      LDA	#>.ADDRESS
      7  fcef		       85 8b		      STA	.POINTER+1
      8  fcf1
     31  fcf1
     32  fcf1							; Mute Audio
     33  fcf1		       a9 00		      lda	#0
     34  fcf3							;    sta AUDC0
     35  fcf3							;    sta AUDV0
     36  fcf3							;    sta AUDF0
     37  fcf3							;sta AUDC1
     38  fcf3		       85 1a		      sta	AUDV1
     39  fcf5							;sta AUDF1
     40  fcf5		       85 92		      sta	SampleStep
     41  fcf7
     42  fcf7							; Load Audio Settings
     43  fcf7		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fcf9		       85 19		      sta	AUDV0
     45  fcfb
     46  fcfb							; Make it so that we play the first note immediately
     47  fcfb		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fcfd		       85 91		      sta	AudioStep
     49  fcff		       a9 02		      lda	#2
     50  fd01		       85 8d		      sta	FrameTimer
     51  fd03
     52  fd03							; Reset NuSiz
     53  fd03							;    lda #0
     54  fd03							;    sta NuSiz0
     55  fd03							;    sta NUSIZ0
     56  fd03							;    sta NuSiz1
     57  fd03							;    sta NUSIZ1
     58  fd03
     59  fd03							; Initialize Objects
     60  fd03		       20 f6 f5 	      jsr	LevelInit
     61  fd06		       20 b3 f6 	      jsr	ScoreInit
     62  fd09		       20 3a f8 	      jsr	SpiderInit
     63  fd0c		       20 3d f9 	      jsr	LineInit
     64  fd0f		       20 a4 fa 	      jsr	BugInit
     65  fd12							;jsr SwatterInit
     66  fd12		       20 aa fc 	      jsr	SwatterReset
     67  fd15
     68  fd15		       60		      rts
     69  fd16
     70  fd16				   GameVerticalBlank
     71  fd16
     72  fd16							; Refresh random values
     73  fd16		       20 13 f0 	      jsr	Random
     74  fd19
     75  fd19							; Update Objects
     76  fd19		       20 0c f6 	      jsr	LevelUpdate
     77  fd1c		       20 4f f8 	      jsr	SpiderUpdate
     78  fd1f		       20 42 f9 	      jsr	LineUpdate
     79  fd22		       20 de fa 	      jsr	BugUpdate
     80  fd25		       20 c4 fb 	      jsr	SwatterUpdate
     81  fd28		       20 bc f6 	      jsr	ScoreUpdate
     82  fd2b
     83  fd2b							; Reset Collisions
     84  fd2b		       85 2c		      sta	CXCLR
     85  fd2d
     86  fd2d							; Clear horizontal movement
     87  fd2d		       85 2b		      sta	HMCLR
     88  fd2f
     89  fd2f							; Update Positions
     90  fd2f		       a2 04		      ldx	#4
     91  fd31				   .game_positions_loop
     92  fd31		       b5 a4		      lda	XPositions,x
     93  fd33		       20 00 f0 	      jsr	PosObject
     94  fd36		       ca		      dex
     95  fd37		       10 f8		      bpl	.game_positions_loop
     96  fd39
     97  fd39							; Set final x positions
     98  fd39		       85 02		      sta	WSYNC
     99  fd3b		       85 2a		      sta	HMOVE
    100  fd3d
    101  fd3d		       60		      rts
    102  fd3e
    103  fd3e				   GameOverScan
    104  fd3e
    105  fd3e							; Audio Routines
    106  fd3e		       20 5b fd 	      jsr	GameAudio
    107  fd41		       20 4d fd 	      jsr	GameSample
    108  fd44
    109  fd44							; Check if player is dead
    110  fd44		       a5 95		      lda	ScoreValue+0
    111  fd46		       d0 04		      bne	.game_overscan_return
    112  fd48
    113  fd48							; Show Game Over Screen
    114  fd48		       18		      clc		; Define lose
    115  fd49		       20 aa fe 	      jsr	OverInit
    116  fd4c
    117  fd4c				   .game_overscan_return
    118  fd4c		       60		      rts
    119  fd4d
    120  fd4d				   GameSample
    121  fd4d
    122  fd4d		       a6 92		      ldx	SampleStep
    123  fd4f		       f0 07		      beq	.game_sample_return
    124  fd51
    125  fd51		       ca		      dex
    126  fd52		       d0 04		      bne	.game_sample_return
    127  fd54
    128  fd54				   .game_sample_mute
    129  fd54		       a9 00		      lda	#0
    130  fd56		       85 1a		      sta	AUDV1
    131  fd58							;sta AUDF1
    132  fd58							;sta AUDC1
    133  fd58
    134  fd58				   .game_sample_return
    135  fd58		       86 92		      stx	SampleStep
    136  fd5a		       60		      rts
    137  fd5b
    138  fd5b				   GameAudio
    139  fd5b
    140  fd5b		       a6 8d		      ldx	FrameTimer
    141  fd5d		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    142  fd5f		       f0 25		      beq	.game_audio_mute_note
    143  fd61		       e0 00		      cpx	#0
    144  fd63		       d0 25		      bne	.game_audio_return
    145  fd65
    146  fd65							; Reset Timer
    147  fd65		       a6 94		      ldx	GameAudioStep
    148  fd67		       86 8d		      stx	FrameTimer
    149  fd69
    150  fd69				   .game_audio_play
    151  fd69
    152  fd69							; Increment melody position
    153  fd69		       a4 91		      ldy	AudioStep
    154  fd6b		       c8		      iny
    155  fd6c
    156  fd6c		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    157  fd6e		       d0 02		      bne	.game_audio_play_note
    158  fd70
    159  fd70							; Loop our audio step
    160  fd70		       a0 00		      ldy	#0
    161  fd72
    162  fd72				   .game_audio_play_note
    163  fd72
    164  fd72							; Save current position
    165  fd72		       84 91		      sty	AudioStep
    166  fd74
    167  fd74							; Melody Line
    168  fd74		       b9 8a fe 	      lda	GameAudio0,y
    169  fd77		       c9 ff		      cmp	#$FF
    170  fd79		       f0 0b		      beq	.game_audio_mute_note
    171  fd7b		       85 17		      sta	AUDF0
    172  fd7d		       a9 06		      lda	#GAME_AUDIO_TONE
    173  fd7f		       85 15		      sta	AUDC0
    174  fd81		       a9 02		      lda	#GAME_AUDIO_VOLUME
    175  fd83		       85 19		      sta	AUDV0
    176  fd85
    177  fd85		       60		      rts
    178  fd86
    179  fd86				   .game_audio_mute_note
    180  fd86
    181  fd86		       a9 00		      lda	#0
    182  fd88							;sta AUDF0
    183  fd88							;sta AUDC0
    184  fd88		       85 19		      sta	AUDV0
    185  fd8a
    186  fd8a				   .game_audio_return
    187  fd8a		       60		      rts
    188  fd8b
    189  fd8b				   GameKernel
    190  fd8b
    191  fd8b							; Turn on display
    192  fd8b		       a9 00		      lda	#0
    193  fd8d		       85 01		      sta	VBLANK
    194  fd8f
    195  fd8f				   .game_kernel_score
    196  fd8f
    197  fd8f							; Draw Score on top first
    198  fd8f		       20 1f f7 	      jsr	ScoreDraw
    199  fd92
    200  fd92				   .game_kernel_objects_start
    201  fd92
    202  fd92							; Setup Drawing Objects
    203  fd92		       20 31 f8 	      jsr	WebDrawStart
    204  fd95		       20 1d f9 	      jsr	SpiderDrawStart
    205  fd98		       20 88 fc 	      jsr	SwatterDrawStart
    206  fd9b		       20 63 fa 	      jsr	LineDrawStart
    207  fd9e		       20 b2 fb 	      jsr	BugDrawStart
    208  fda1
    209  fda1							; Set missle and sprite sizes
    210  fda1		       a9 35		      lda	#%00110101
    211  fda3		       85 04		      sta	NUSIZ0
    212  fda5		       a9 37		      lda	#%00110111
    213  fda7		       85 05		      sta	NUSIZ1
    214  fda9
    215  fda9							; Set playfield settings and ball size
    216  fda9		       a9 21		      lda	#%00100001
    217  fdab		       85 0a		      sta	CTRLPF
    218  fdad
    219  fdad							; Half scanline counter
    220  fdad		       a2 54		      ldx	#(KERNEL_SCANLINES-SCORE_LINES)/2-2
    221  fdaf
    222  fdaf							; 6 line counter
    223  fdaf		       a9 00		      lda	#0
    224  fdb1		       85 82		      sta	Temp+2
    225  fdb3
    226  fdb3							; Load background color and start first line
    227  fdb3		       a5 a2		      lda	WebColor+0
    228  fdb5		       85 02		      sta	WSYNC
    229  fdb7		       85 09		      sta	COLUBK
    230  fdb9
    231  fdb9				   .game_kernel_objects 		; 5 or 10 cycles
    232  fdb9
    233  fdb9		       a5 82		      lda	Temp+2	; 3
    234  fdbb		       d0 1a		      bne	.game_kernel_missle	; 2*
    235  fdbd
    236  fdbd		       a9 03		      lda	#3	; 2
    237  fdbf		       85 82		      sta	Temp+2	; 3
    238  fdc1
    239  fdc1				   .game_kernel_web		; 32 cycles
    240  fdc1							; Web
    241  fdc1
    242  fdc1		       a4 a1		      ldy	WebIndex	; 3
    243  fdc3
    244  fdc3							; Load Image
    245  fdc3		       b9 5e f1 	      lda	WebImagePF0,y	; 4
    246  fdc6		       85 0d		      sta	PF0	; 3
    247  fdc8		       b9 7a f1 	      lda	WebImagePF1,y	; 4
    248  fdcb		       85 0e		      sta	PF1	; 3
    249  fdcd		       b9 96 f1 	      lda	WebImagePF2,y	; 4
    250  fdd0		       85 0f		      sta	PF2	; 3
    251  fdd2
    252  fdd2		       e6 a1		      inc	WebIndex	; 5
    253  fdd4
    254  fdd4		       4c 01 fe 	      jmp	.game_kernel_line	; 3
    255  fdd7
    256  fdd7				   .game_kernel_missle
    257  fdd7
    258  fdd7				   .game_kernel_missle_bug_0		; 18 cycles
    259  fdd7							; First Bug
    260  fdd7
    261  fdd7							; Top
    262  fdd7		       e4 c0		      cpx	BugDrawPosTop+0	; 3
    263  fdd9		       b0 09		      bcs	.game_kernel_missle_bug_0_off_1	; 2 or 3 if branching
    264  fddb
    265  fddb							; Bottom
    266  fddb		       e4 be		      cpx	BugDrawPosBottom+0	; 3
    267  fddd		       90 08		      bcc	.game_kernel_missle_bug_0_off_2	; 2 or 3 if branching
    268  fddf
    269  fddf				   .game_kernel_missle_bug_0_on
    270  fddf		       a0 02		      ldy	#%00000010	; 2
    271  fde1		       4c ea fd 	      jmp	.game_kernel_missle_bug_0_set	; 3
    272  fde4
    273  fde4				   .game_kernel_missle_bug_0_off_1
      0  fde4					      sleep	5
      1  fde4				   .CYCLES    SET	5
      2  fde4
      3  fde4				  -	      IF	.CYCLES < 2
      4  fde4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fde4				  -	      ERR
      6  fde4					      ENDIF
      7  fde4
      8  fde4					      IF	.CYCLES & 1
      9  fde4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fde4		       04 00		      nop	0
     11  fde6				  -	      ELSE
     12  fde6				  -	      bit	VSYNC
     13  fde6					      ENDIF
     14  fde6				   .CYCLES    SET	.CYCLES - 3
     15  fde6					      ENDIF
     16  fde6
     17  fde6					      REPEAT	.CYCLES / 2
     18  fde6		       ea		      nop
     19  fde7					      REPEND
    275  fde7				   .game_kernel_missle_bug_0_off_2
      0  fde7					      sleep	2
      1  fde7				   .CYCLES    SET	2
      2  fde7
      3  fde7				  -	      IF	.CYCLES < 2
      4  fde7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fde7				  -	      ERR
      6  fde7					      ENDIF
      7  fde7
      8  fde7				  -	      IF	.CYCLES & 1
      9  fde7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fde7				  -	      nop	0
     11  fde7				  -	      ELSE
     12  fde7				  -	      bit	VSYNC
     13  fde7				  -	      ENDIF
     14  fde7				  -.CYCLES    SET	.CYCLES - 3
     15  fde7					      ENDIF
     16  fde7
     17  fde7					      REPEAT	.CYCLES / 2
     18  fde7		       ea		      nop
     19  fde8					      REPEND
    277  fde8		       a0 00		      ldy	#%00000000	; 2
    278  fdea				   .game_kernel_missle_bug_0_set
    279  fdea		       84 1d		      sty	ENAM0	; 3
    280  fdec
    281  fdec				   .game_kernel_missle_bug_1		; 18 cycles
    282  fdec							; Second Bug
    283  fdec
    284  fdec							; Top
    285  fdec		       e4 c1		      cpx	BugDrawPosTop+1	; 3
    286  fdee		       b0 09		      bcs	.game_kernel_missle_bug_1_off_1	; 2 or 3 if branching
    287  fdf0
    288  fdf0							; Bottom
    289  fdf0		       e4 bf		      cpx	BugDrawPosBottom+1	; 3
    290  fdf2		       90 08		      bcc	.game_kernel_missle_bug_1_off_2	; 2 or 3 if branching
    291  fdf4
    292  fdf4				   .game_kernel_missle_bug_1_on
    293  fdf4		       a0 02		      ldy	#%00000010	; 2
    294  fdf6		       4c ff fd 	      jmp	.game_kernel_missle_bug_1_set	; 3
    295  fdf9
    296  fdf9				   .game_kernel_missle_bug_1_off_1
      0  fdf9					      sleep	5
      1  fdf9				   .CYCLES    SET	5
      2  fdf9
      3  fdf9				  -	      IF	.CYCLES < 2
      4  fdf9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fdf9				  -	      ERR
      6  fdf9					      ENDIF
      7  fdf9
      8  fdf9					      IF	.CYCLES & 1
      9  fdf9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fdf9		       04 00		      nop	0
     11  fdfb				  -	      ELSE
     12  fdfb				  -	      bit	VSYNC
     13  fdfb					      ENDIF
     14  fdfb				   .CYCLES    SET	.CYCLES - 3
     15  fdfb					      ENDIF
     16  fdfb
     17  fdfb					      REPEAT	.CYCLES / 2
     18  fdfb		       ea		      nop
     19  fdfc					      REPEND
    298  fdfc				   .game_kernel_missle_bug_1_off_2
      0  fdfc					      sleep	2
      1  fdfc				   .CYCLES    SET	2
      2  fdfc
      3  fdfc				  -	      IF	.CYCLES < 2
      4  fdfc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fdfc				  -	      ERR
      6  fdfc					      ENDIF
      7  fdfc
      8  fdfc				  -	      IF	.CYCLES & 1
      9  fdfc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fdfc				  -	      nop	0
     11  fdfc				  -	      ELSE
     12  fdfc				  -	      bit	VSYNC
     13  fdfc				  -	      ENDIF
     14  fdfc				  -.CYCLES    SET	.CYCLES - 3
     15  fdfc					      ENDIF
     16  fdfc
     17  fdfc					      REPEAT	.CYCLES / 2
     18  fdfc		       ea		      nop
     19  fdfd					      REPEND
    300  fdfd		       a0 00		      ldy	#%00000000	; 2
    301  fdff				   .game_kernel_missle_bug_1_set
    302  fdff		       84 1e		      sty	ENAM1	; 3
    303  fe01
    304  fe01				   .game_kernel_line		; 18 cycles
    305  fe01							; Line
    306  fe01
    307  fe01							; Top
    308  fe01		       e4 b8		      cpx	LineDrawPos+1	; 3
    309  fe03		       b0 09		      bcs	.game_kernel_line_set_off_1	; 2 or 3 if branching
    310  fe05
    311  fe05							; Bottom
    312  fe05		       e4 b7		      cpx	LineDrawPos+0	; 3
    313  fe07		       90 08		      bcc	.game_kernel_line_set_off_2	; 2 or 3 if branching
    314  fe09
    315  fe09				   .game_kernel_line_set_on
    316  fe09		       a0 02		      ldy	#%00000010	; 2
    317  fe0b		       4c 14 fe 	      jmp	.game_kernel_line_set	; 3
    318  fe0e
    319  fe0e				   .game_kernel_line_set_off_1
      0  fe0e					      sleep	5
      1  fe0e				   .CYCLES    SET	5
      2  fe0e
      3  fe0e				  -	      IF	.CYCLES < 2
      4  fe0e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe0e				  -	      ERR
      6  fe0e					      ENDIF
      7  fe0e
      8  fe0e					      IF	.CYCLES & 1
      9  fe0e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe0e		       04 00		      nop	0
     11  fe10				  -	      ELSE
     12  fe10				  -	      bit	VSYNC
     13  fe10					      ENDIF
     14  fe10				   .CYCLES    SET	.CYCLES - 3
     15  fe10					      ENDIF
     16  fe10
     17  fe10					      REPEAT	.CYCLES / 2
     18  fe10		       ea		      nop
     19  fe11					      REPEND
    321  fe11				   .game_kernel_line_set_off_2
      0  fe11					      sleep	2
      1  fe11				   .CYCLES    SET	2
      2  fe11
      3  fe11				  -	      IF	.CYCLES < 2
      4  fe11				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe11				  -	      ERR
      6  fe11					      ENDIF
      7  fe11
      8  fe11				  -	      IF	.CYCLES & 1
      9  fe11				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe11				  -	      nop	0
     11  fe11				  -	      ELSE
     12  fe11				  -	      bit	VSYNC
     13  fe11				  -	      ENDIF
     14  fe11				  -.CYCLES    SET	.CYCLES - 3
     15  fe11					      ENDIF
     16  fe11
     17  fe11					      REPEAT	.CYCLES / 2
     18  fe11		       ea		      nop
     19  fe12					      REPEND
    323  fe12		       a0 00		      ldy	#%00000000	; 2
    324  fe14				   .game_kernel_line_set
    325  fe14		       84 1f		      sty	ENABL	; 3
    326  fe16
    327  fe16							; Next Line
    328  fe16							;sleep 17 or 16
    329  fe16		       85 02		      sta	WSYNC
    330  fe18
    331  fe18				   .game_kernel_sprite
    332  fe18
    333  fe18				   .game_kernel_sprite_spider		; 34 cycles
    334  fe18							; Spider
    335  fe18
    336  fe18		       a4 ae		      ldy	SpiderIndex	; 3
    337  fe1a		       30 16		      bmi	.game_kernel_sprite_spider_load_1	; At end of sprite / 2 or 3 if branching
    338  fe1c
    339  fe1c							; Check y position to see if we should be drawing
    340  fe1c		       8a		      txa		; 2
    341  fe1d		       e5 af		      sbc	SpiderDrawPos	; 3
    342  fe1f		       10 15		      bpl	.game_kernel_sprite_spider_load_2	; 2 or 3 if branching
    343  fe21
    344  fe21				   .game_kernel_sprite_spider_draw
    345  fe21
    346  fe21							; Decrement sprite index
    347  fe21		       88		      dey		; 2
    348  fe22		       10 05		      bpl	.game_kernel_sprite_spider_grab	; 2 or 3 if branching
    349  fe24
    350  fe24		       a9 00		      lda	#0	; 2
    351  fe26							;sleep 1
    352  fe26		       4c 2b fe 	      jmp	.game_kernel_sprite_spider_store	; 3
    353  fe29
    354  fe29				   .game_kernel_sprite_spider_grab
    355  fe29		       b1 a9		      lda	(SpiderPtr),y	; 5
    356  fe2b				   .game_kernel_sprite_spider_store
    357  fe2b		       84 ae		      sty	SpiderIndex	; 3
    358  fe2d		       85 b0		      sta	SpiderLine	; 3
    359  fe2f
    360  fe2f		       4c 40 fe 	      jmp	.game_kernel_sprite_spider_load_3	; 3
    361  fe32
    362  fe32				   .game_kernel_sprite_spider_load_1
      0  fe32					      sleep	7
      1  fe32				   .CYCLES    SET	7
      2  fe32
      3  fe32				  -	      IF	.CYCLES < 2
      4  fe32				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe32				  -	      ERR
      6  fe32					      ENDIF
      7  fe32
      8  fe32					      IF	.CYCLES & 1
      9  fe32					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe32		       04 00		      nop	0
     11  fe34				  -	      ELSE
     12  fe34				  -	      bit	VSYNC
     13  fe34					      ENDIF
     14  fe34				   .CYCLES    SET	.CYCLES - 3
     15  fe34					      ENDIF
     16  fe34
     17  fe34					      REPEAT	.CYCLES / 2
     18  fe34		       ea		      nop
     17  fe34					      REPEND
     18  fe35		       ea		      nop
     19  fe36					      REPEND
    364  fe36				   .game_kernel_sprite_spider_load_2
      0  fe36					      sleep	15
      1  fe36				   .CYCLES    SET	15
      2  fe36
      3  fe36				  -	      IF	.CYCLES < 2
      4  fe36				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe36				  -	      ERR
      6  fe36					      ENDIF
      7  fe36
      8  fe36					      IF	.CYCLES & 1
      9  fe36					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe36		       04 00		      nop	0
     11  fe38				  -	      ELSE
     12  fe38				  -	      bit	VSYNC
     13  fe38					      ENDIF
     14  fe38				   .CYCLES    SET	.CYCLES - 3
     15  fe38					      ENDIF
     16  fe38
     17  fe38					      REPEAT	.CYCLES / 2
     18  fe38		       ea		      nop
     17  fe38					      REPEND
     18  fe39		       ea		      nop
     17  fe39					      REPEND
     18  fe3a		       ea		      nop
     17  fe3a					      REPEND
     18  fe3b		       ea		      nop
     17  fe3b					      REPEND
     18  fe3c		       ea		      nop
     17  fe3c					      REPEND
     18  fe3d		       ea		      nop
     19  fe3e					      REPEND
    366  fe3e		       a5 b0		      lda	SpiderLine	; 3
    367  fe40				   .game_kernel_sprite_spider_load_3
    368  fe40		       85 1b		      sta	GRP0	; 3
    369  fe42
    370  fe42				   .game_kernel_sprite_swatter		; 30 cycles
    371  fe42							; Swatter
    372  fe42
    373  fe42							; Check if wait state
    374  fe42							;bit SwatterState
    375  fe42							;bpl .game_kernel_sprite_swatter_load
    376  fe42
    377  fe42		       a4 c8		      ldy	SwatterIndex	; 3
    378  fe44		       30 0f		      bmi	.game_kernel_sprite_swatter_load_1	; At end of sprite / 2 or 3 if branching
    379  fe46
    380  fe46							; Check y position to see if we should be drawing
    381  fe46		       8a		      txa		; 2
    382  fe47		       e5 c9		      sbc	SwatterDrawPos	; 3
    383  fe49		       10 0e		      bpl	.game_kernel_sprite_swatter_load_2	; 2 or 3 if branching
    384  fe4b
    385  fe4b				   .game_kernel_sprite_swatter_draw
    386  fe4b		       b9 e2 f1 	      lda	SwatterSprite,y	; 4
    387  fe4e		       85 ca		      sta	SwatterLine	; 3
    388  fe50
    389  fe50							; Decrement sprite index
    390  fe50		       c6 c8		      dec	SwatterIndex	; 5
    391  fe52
    392  fe52		       4c 61 fe 	      jmp	.game_kernel_sprite_swatter_line	; 3
    393  fe55
    394  fe55				   .game_kernel_sprite_swatter_load_1
      0  fe55					      sleep	7
      1  fe55				   .CYCLES    SET	7
      2  fe55
      3  fe55				  -	      IF	.CYCLES < 2
      4  fe55				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe55				  -	      ERR
      6  fe55					      ENDIF
      7  fe55
      8  fe55					      IF	.CYCLES & 1
      9  fe55					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe55		       04 00		      nop	0
     11  fe57				  -	      ELSE
     12  fe57				  -	      bit	VSYNC
     13  fe57					      ENDIF
     14  fe57				   .CYCLES    SET	.CYCLES - 3
     15  fe57					      ENDIF
     16  fe57
     17  fe57					      REPEAT	.CYCLES / 2
     18  fe57		       ea		      nop
     17  fe57					      REPEND
     18  fe58		       ea		      nop
     19  fe59					      REPEND
    396  fe59				   .game_kernel_sprite_swatter_load_2
      0  fe59					      sleep	11
      1  fe59				   .CYCLES    SET	11
      2  fe59
      3  fe59				  -	      IF	.CYCLES < 2
      4  fe59				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe59				  -	      ERR
      6  fe59					      ENDIF
      7  fe59
      8  fe59					      IF	.CYCLES & 1
      9  fe59					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe59		       04 00		      nop	0
     11  fe5b				  -	      ELSE
     12  fe5b				  -	      bit	VSYNC
     13  fe5b					      ENDIF
     14  fe5b				   .CYCLES    SET	.CYCLES - 3
     15  fe5b					      ENDIF
     16  fe5b
     17  fe5b					      REPEAT	.CYCLES / 2
     18  fe5b		       ea		      nop
     17  fe5b					      REPEND
     18  fe5c		       ea		      nop
     17  fe5c					      REPEND
     18  fe5d		       ea		      nop
     17  fe5d					      REPEND
     18  fe5e		       ea		      nop
     19  fe5f					      REPEND
    398  fe5f		       a5 ca		      lda	SwatterLine	; 3
    399  fe61				   .game_kernel_sprite_swatter_line
    400  fe61		       85 1c		      sta	GRP1	; 3
    401  fe63
    402  fe63				   .game_kernel_sprite_end		; 12 or 11 cycles
    403  fe63
    404  fe63							;sta WSYNC
    405  fe63
    406  fe63							; New line, decrement half scanline, and increment 3 line counter
    407  fe63		       c6 82		      dec	Temp+2	; 5
    408  fe65		       ca		      dex		; 2
    409  fe66		       f0 03		      beq	.game_kernel_clean	; 2 or 3 if branching
    410  fe68		       4c b9 fd 	      jmp	.game_kernel_objects	; 3
    411  fe6b
    412  fe6b				   .game_kernel_clean
    413  fe6b
    414  fe6b		       85 02		      sta	WSYNC
    415  fe6d
    416  fe6d		       a9 00		      lda	#0
    417  fe6f		       85 09		      sta	COLUBK
    418  fe71		       85 08		      sta	COLUPF
    419  fe73		       85 06		      sta	COLUP0
    420  fe75		       85 07		      sta	COLUP1
    421  fe77		       85 0d		      sta	PF0
    422  fe79		       85 0e		      sta	PF1
    423  fe7b		       85 0f		      sta	PF2
    424  fe7d		       85 1b		      sta	GRP0
    425  fe7f		       85 1c		      sta	GRP1
    426  fe81		       85 1d		      sta	ENAM0
    427  fe83		       85 1e		      sta	ENAM1
    428  fe85		       85 1f		      sta	ENABL
    429  fe87
    430  fe87		       85 02		      sta	WSYNC
    431  fe89
    432  fe89				   .game_kernel_return
    433  fe89		       60		      rts
    434  fe8a
    435  fe8a				   GameAudio0
    436  fe8a		       0d		      .byte.b	#13	; D
    437  fe8b		       ff		      .byte.b	#$FF
    438  fe8c		       0f		      .byte.b	#15	; B
    439  fe8d		       ff		      .byte.b	#$FF
    440  fe8e		       0d		      .byte.b	#13	; D
    441  fe8f		       ff		      .byte.b	#$FF
    442  fe90		       0f		      .byte.b	#15	; B
    443  fe91		       ff		      .byte.b	#$FF
    444  fe92		       0d		      .byte.b	#13	; D
    445  fe93		       0d		      .byte.b	#13	; D
    446  fe94		       0f		      .byte.b	#15	; B
    447  fe95		       ff		      .byte.b	#$FF
    448  fe96		       0c		      .byte.b	#12	; D#
    449  fe97		       ff		      .byte.b	#$FF
    450  fe98		       0f		      .byte.b	#15	; B
    451  fe99		       ff		      .byte.b	#$FF
    452  fe9a		       0b		      .byte.b	#11	; E
    453  fe9b		       ff		      .byte.b	#$FF
    454  fe9c		       0e		      .byte.b	#14	; C#
    455  fe9d		       ff		      .byte.b	#$FF
    456  fe9e		       0b		      .byte.b	#11
    457  fe9f		       ff		      .byte.b	#$FF
    458  fea0		       0e		      .byte.b	#14
    459  fea1		       ff		      .byte.b	#$FF
    460  fea2		       0b		      .byte.b	#11
    461  fea3		       0b		      .byte.b	#11
    462  fea4		       0e		      .byte.b	#14
    463  fea5		       ff		      .byte.b	#$FF
    464  fea6		       0b		      .byte.b	#11
    465  fea7		       ff		      .byte.b	#$FF
    466  fea8		       0e		      .byte.b	#14
    467  fea9		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  feaa					      include	"over.asm"
      1  feaa							;================
      2  feaa							; Constants
      3  feaa							;================
      4  feaa
      5  feaa		       00 00	   OVER_BG_COLOR =	#$00
      6  feaa		       00 56	   OVER_FG_WIN_COLOR =	#SPIDER_COLOR
      7  feaa		       00 44	   OVER_FG_LOSE_COLOR =	#$44
      8  feaa		       00 06	   OVER_FG_BW_COLOR =	#$06
      9  feaa
     10  feaa		       00 07	   OVER_AUDIO_TONE =	7
     11  feaa		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  feaa		       00 06	   OVER_AUDIO_LENGTH =	6
     13  feaa		       00 10	   OVER_AUDIO_STEP =	16
     14  feaa
     15  feaa		       00 09	   OVER_IMAGE_SIZE =	9
     16  feaa		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  feaa		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  feaa		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  feaa
     20  feaa				   OverInit
     21  feaa
     22  feaa		       90 1f		      bcc	.over_init_lose
     23  feac
     24  feac				   .over_init_win
      0  feac					      SET_POINTER	OverImagePF1Ptr, OverWinImagePF1
      1  feac				   .POINTER   SET	OverImagePF1Ptr
      2  feac				   .ADDRESS   SET	OverWinImagePF1
      3  feac
      4  feac		       a9 9f		      LDA	#<.ADDRESS
      5  feae		       85 cd		      STA	.POINTER
      6  feb0		       a9 ff		      LDA	#>.ADDRESS
      7  feb2		       85 ce		      STA	.POINTER+1
      8  feb4
      0  feb4					      SET_POINTER	OverImagePF2Ptr, OverWinImagePF2
      1  feb4				   .POINTER   SET	OverImagePF2Ptr
      2  feb4				   .ADDRESS   SET	OverWinImagePF2
      3  feb4
      4  feb4		       a9 a8		      LDA	#<.ADDRESS
      5  feb6		       85 cf		      STA	.POINTER
      6  feb8		       a9 ff		      LDA	#>.ADDRESS
      7  feba		       85 d0		      STA	.POINTER+1
      8  febc
      0  febc					      SET_POINTER	OverAudio0Ptr, OverWinAudio0
      1  febc				   .POINTER   SET	OverAudio0Ptr
      2  febc				   .ADDRESS   SET	OverWinAudio0
      3  febc
      4  febc		       a9 c3		      LDA	#<.ADDRESS
      5  febe		       85 d1		      STA	.POINTER
      6  fec0		       a9 ff		      LDA	#>.ADDRESS
      7  fec2		       85 d2		      STA	.POINTER+1
      8  fec4
     28  fec4		       a9 56		      lda	#OVER_FG_WIN_COLOR
     29  fec6		       85 d3		      sta	OverColor
     30  fec8
     31  fec8		       4c e7 fe 	      jmp	.over_init_logic
     32  fecb
     33  fecb				   .over_init_lose
      0  fecb					      SET_POINTER	OverImagePF1Ptr, OverLoseImagePF1
      1  fecb				   .POINTER   SET	OverImagePF1Ptr
      2  fecb				   .ADDRESS   SET	OverLoseImagePF1
      3  fecb
      4  fecb		       a9 b1		      LDA	#<.ADDRESS
      5  fecd		       85 cd		      STA	.POINTER
      6  fecf		       a9 ff		      LDA	#>.ADDRESS
      7  fed1		       85 ce		      STA	.POINTER+1
      8  fed3
      0  fed3					      SET_POINTER	OverImagePF2Ptr, OverLoseImagePF2
      1  fed3				   .POINTER   SET	OverImagePF2Ptr
      2  fed3				   .ADDRESS   SET	OverLoseImagePF2
      3  fed3
      4  fed3		       a9 ba		      LDA	#<.ADDRESS
      5  fed5		       85 cf		      STA	.POINTER
      6  fed7		       a9 ff		      LDA	#>.ADDRESS
      7  fed9		       85 d0		      STA	.POINTER+1
      8  fedb
      0  fedb					      SET_POINTER	OverAudio0Ptr, OverLoseAudio0
      1  fedb				   .POINTER   SET	OverAudio0Ptr
      2  fedb				   .ADDRESS   SET	OverLoseAudio0
      3  fedb
      4  fedb		       a9 c9		      LDA	#<.ADDRESS
      5  fedd		       85 d1		      STA	.POINTER
      6  fedf		       a9 ff		      LDA	#>.ADDRESS
      7  fee1		       85 d2		      STA	.POINTER+1
      8  fee3
     37  fee3		       a9 44		      lda	#OVER_FG_LOSE_COLOR
     38  fee5		       85 d3		      sta	OverColor
     39  fee7
     40  fee7				   .over_init_logic
     41  fee7
     42  fee7							; Setup logic and kernel
      0  fee7					      SET_POINTER	VBlankPtr, ScoreUpdate
      1  fee7				   .POINTER   SET	VBlankPtr
      2  fee7				   .ADDRESS   SET	ScoreUpdate
      3  fee7
      4  fee7		       a9 bc		      LDA	#<.ADDRESS
      5  fee9		       85 86		      STA	.POINTER
      6  feeb		       a9 f6		      LDA	#>.ADDRESS
      7  feed		       85 87		      STA	.POINTER+1
      8  feef
      0  feef					      SET_POINTER	KernelPtr, OverKernel
      1  feef				   .POINTER   SET	KernelPtr
      2  feef				   .ADDRESS   SET	OverKernel
      3  feef
      4  feef		       a9 5b		      LDA	#<.ADDRESS
      5  fef1		       85 88		      STA	.POINTER
      6  fef3		       a9 ff		      LDA	#>.ADDRESS
      7  fef5		       85 89		      STA	.POINTER+1
      8  fef7
      0  fef7					      SET_POINTER	OverScanPtr, OverOverScan
      1  fef7				   .POINTER   SET	OverScanPtr
      2  fef7				   .ADDRESS   SET	OverOverScan
      3  fef7
      4  fef7		       a9 16		      LDA	#<.ADDRESS
      5  fef9		       85 8a		      STA	.POINTER
      6  fefb		       a9 ff		      LDA	#>.ADDRESS
      7  fefd		       85 8b		      STA	.POINTER+1
      8  feff
     46  feff
     47  feff							; Load audio settings
     48  feff		       a9 07		      lda	#OVER_AUDIO_TONE
     49  ff01		       85 15		      sta	AUDC0
     50  ff03							;lda #OVER_AUDIO_VOLUME
     51  ff03							;sta AUDV0
     52  ff03		       a9 00		      lda	#0
     53  ff05							;sta AUDC1
     54  ff05		       85 1a		      sta	AUDV1
     55  ff07
     56  ff07							; Set initial button state
     57  ff07							;lda #0
     58  ff07		       85 8f		      sta	InputState
     59  ff09
     60  ff09							; Setup frame counters
     61  ff09		       a9 01		      lda	#1
     62  ff0b		       85 8d		      sta	FrameTimer
     63  ff0d		       a9 10		      lda	#OVER_AUDIO_STEP
     64  ff0f		       85 92		      sta	SampleStep
     65  ff11		       a9 06		      lda	#OVER_AUDIO_LENGTH
     66  ff13		       85 91		      sta	AudioStep
     67  ff15
     68  ff15		       60		      rts
     69  ff16
     70  ff16				   OverOverScan
     71  ff16		       20 1d ff 	      jsr	OverAudio
     72  ff19		       20 40 ff 	      jsr	OverState
     73  ff1c		       60		      rts
     74  ff1d
     75  ff1d				   OverAudio
     76  ff1d
     77  ff1d		       a5 8d		      lda	FrameTimer
     78  ff1f		       d0 1e		      bne	.over_audio_return
     79  ff21
     80  ff21							; Reset Timer
     81  ff21					      REPEAT	3
     82  ff21		       e6 92		      inc	SampleStep
     81  ff21					      REPEND
     82  ff23		       e6 92		      inc	SampleStep
     81  ff23					      REPEND
     82  ff25		       e6 92		      inc	SampleStep
     83  ff27					      REPEND
     84  ff27		       a5 92		      lda	SampleStep
     85  ff29		       85 8d		      sta	FrameTimer
     86  ff2b
     87  ff2b				   .over_audio_play
     88  ff2b
     89  ff2b							; Increment melody position
     90  ff2b		       a4 91		      ldy	AudioStep
     91  ff2d		       f0 0c		      beq	.over_audio_mute_note
     92  ff2f		       c6 91		      dec	AudioStep
     93  ff31		       88		      dey
     94  ff32
     95  ff32				   .over_audio_play_note
     96  ff32
     97  ff32							; Melody Line
     98  ff32		       b1 d1		      lda	(OverAudio0Ptr),y
     99  ff34		       85 17		      sta	AUDF0
    100  ff36		       a9 06		      lda	#OVER_AUDIO_VOLUME
    101  ff38		       85 19		      sta	AUDV0
    102  ff3a
    103  ff3a		       60		      rts
    104  ff3b
    105  ff3b				   .over_audio_mute_note
    106  ff3b		       a9 00		      lda	#0
    107  ff3d							;sta AUDF0
    108  ff3d		       85 19		      sta	AUDV0
    109  ff3f
    110  ff3f				   .over_audio_return
    111  ff3f		       60		      rts
    112  ff40
    113  ff40				   OverState
    114  ff40
    115  ff40							; Check to see if audio has finished
    116  ff40		       a5 91		      lda	AudioStep
    117  ff42		       d0 16		      bne	.over_state_return
    118  ff44
    119  ff44		       a2 01		      ldx	#1
    120  ff46				   .over_state
    121  ff46							; Check if Fire Button on controller 1 is released
    122  ff46		       b5 0c		      lda	INPT4,x
    123  ff48		       30 05		      bmi	.over_state_check
    124  ff4a
    125  ff4a				   .over_state_on
    126  ff4a		       a9 01		      lda	#1
    127  ff4c		       95 8f		      sta	InputState,x
    128  ff4e		       60		      rts
    129  ff4f
    130  ff4f				   .over_state_check
    131  ff4f		       b5 8f		      lda	InputState,x
    132  ff51		       d0 04		      bne	.over_state_next
    133  ff53
    134  ff53				   .over_state_loop
    135  ff53		       ca		      dex
    136  ff54		       10 f0		      bpl	.over_state
    137  ff56		       60		      rts
    138  ff57
    139  ff57				   .over_state_next
    140  ff57							; Button is released, load title screen
    141  ff57		       20 6f f3 	      jsr	TitleInit
    142  ff5a
    143  ff5a				   .over_state_return
    144  ff5a		       60		      rts
    145  ff5b
    146  ff5b				   OverKernel
    147  ff5b
    148  ff5b							; Turn on display
    149  ff5b		       a9 00		      lda	#0
    150  ff5d		       85 01		      sta	VBLANK
    151  ff5f
    152  ff5f				   .over_kernel_score
    153  ff5f
    154  ff5f							; Draw Score on top first (no update)
    155  ff5f		       20 1f f7 	      jsr	ScoreDraw
    156  ff62
    157  ff62				   .over_kernel_color
    158  ff62							; Load Colors
    159  ff62		       a9 00		      lda	#OVER_BG_COLOR
    160  ff64		       85 09		      sta	COLUBK
    161  ff66
    162  ff66							; Check b/w
    163  ff66		       ad 82 02 	      lda	SWCHB
    164  ff69		       29 08		      and	#%00001000
    165  ff6b		       f0 07		      beq	.over_kernel_color_bw
    166  ff6d
    167  ff6d				   .over_kernel_color_color
    168  ff6d		       a5 d3		      lda	OverColor
    169  ff6f		       85 08		      sta	COLUPF
    170  ff71
    171  ff71		       4c 78 ff 	      jmp	.over_kernel_init
    172  ff74
    173  ff74				   .over_kernel_color_bw
    174  ff74							; Load b/w Colors
    175  ff74		       a9 06		      lda	#OVER_FG_BW_COLOR
    176  ff76		       85 08		      sta	COLUPF
    177  ff78
    178  ff78				   .over_kernel_init
    179  ff78							; Playfield Control
    180  ff78							;lda CtrlPf
    181  ff78							;and #%11111101 ; Use playfield foreground color
    182  ff78							;ora #%00000001 ; Set mirroring
    183  ff78							;sta CtrlPf
    184  ff78		       a9 01		      lda	#%00000001
    185  ff7a		       85 0a		      sta	CTRLPF
    186  ff7c
    187  ff7c				   .over_kernel_top_padding
    188  ff7c							; Top Padding
    189  ff7c		       a2 32		      ldx	#OVER_IMAGE_PADDING
    190  ff7e		       20 44 f0 	      jsr	BlankLines
    191  ff81
    192  ff81				   .over_kernel_image
    193  ff81		       a0 08		      ldy	#OVER_IMAGE_SIZE-1
    194  ff83
    195  ff83				   .over_kernel_image_next
    196  ff83		       b1 cf		      lda	(OverImagePF2Ptr),y
    197  ff85		       85 0f		      sta	PF2
    198  ff87		       b1 cd		      lda	(OverImagePF1Ptr),y
    199  ff89		       85 0e		      sta	PF1
    200  ff8b							;    lda (OverImagePF0Ptr),y
    201  ff8b							;    sta PF0
    202  ff8b
    203  ff8b		       a2 08		      ldx	#OVER_IMAGE_LINE_SIZE
    204  ff8d				   .over_kernel_image_loop
    205  ff8d		       85 02		      sta	WSYNC
    206  ff8f		       ca		      dex
    207  ff90		       d0 fb		      bne	.over_kernel_image_loop
    208  ff92
    209  ff92		       88		      dey
    210  ff93		       10 ee		      bpl	.over_kernel_image_next
    211  ff95
    212  ff95				   .over_kernel_bottom_padding
    213  ff95							; Bottom Padding
    214  ff95		       85 02		      sta	WSYNC	; Add extra line to get to 262
    215  ff97		       a2 32		      ldx	#OVER_IMAGE_PADDING
    216  ff99		       20 44 f0 	      jsr	BlankLines
    217  ff9c
    218  ff9c				   .over_kernel_return
    219  ff9c		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    220  ff9e		       60		      rts
    221  ff9f
    222  ff9f				   OverAssets
    223  ff9f
    224  ff9f							; Assets
------- FILE over_win_image.asm LEVEL 3 PASS 2
      0  ff9f					      include	"over_win_image.asm"
      1  ff9f							;OverWinImagePF0:
      2  ff9f							;    .BYTE %00000000
      3  ff9f							;    .BYTE %00000000
      4  ff9f							;    .BYTE %00000000
      5  ff9f							;    .BYTE %00000000
      6  ff9f							;    .BYTE %00000000
      7  ff9f							;    .BYTE %00000000
      8  ff9f							;    .BYTE %00000000
      9  ff9f							;    .BYTE %00000000
     10  ff9f							;    .BYTE %00000000
     11  ff9f
     12  ff9f				   OverWinImagePF1
     13  ff9f		       08		      .BYTE.b	%00001000
     14  ffa0		       10		      .BYTE.b	%00010000
     15  ffa1		       12		      .BYTE.b	%00010010
     16  ffa2		       24		      .BYTE.b	%00100100
     17  ffa3		       24		      .BYTE.b	%00100100
     18  ffa4		       23		      .BYTE.b	%00100011
     19  ffa5		       20		      .BYTE.b	%00100000
     20  ffa6		       13		      .BYTE.b	%00010011
     21  ffa7		       0c		      .BYTE.b	%00001100
     22  ffa8
     23  ffa8				   OverWinImagePF2
     24  ffa8		       e0		      .BYTE.b	%11100000
     25  ffa9		       f8		      .BYTE.b	%11111000
     26  ffaa		       bc		      .BYTE.b	%10111100
     27  ffab		       0e		      .BYTE.b	%00001110
     28  ffac		       f7		      .BYTE.b	%11110111
     29  ffad		       9e		      .BYTE.b	%10011110
     30  ffae		       fd		      .BYTE.b	%11111101
     31  ffaf		       f8		      .BYTE.b	%11111000
     32  ffb0		       e0		      .BYTE.b	%11100000
------- FILE over.asm
------- FILE over_lose_image.asm LEVEL 3 PASS 2
      0  ffb1					      include	"over_lose_image.asm"
      1  ffb1							;OverLoseImagePF0:
      2  ffb1							;    .BYTE %00000000
      3  ffb1							;    .BYTE %00000000
      4  ffb1							;    .BYTE %00000000
      5  ffb1							;    .BYTE %00000000
      6  ffb1							;    .BYTE %00000000
      7  ffb1							;    .BYTE %00000000
      8  ffb1							;    .BYTE %00000000
      9  ffb1							;    .BYTE %00000000
     10  ffb1							;    .BYTE %00000000
     11  ffb1
     12  ffb1				   OverLoseImagePF1
     13  ffb1		       0c		      .BYTE.b	%00001100
     14  ffb2		       13		      .BYTE.b	%00010011
     15  ffb3		       20		      .BYTE.b	%00100000
     16  ffb4		       23		      .BYTE.b	%00100011
     17  ffb5		       24		      .BYTE.b	%00100100
     18  ffb6		       24		      .BYTE.b	%00100100
     19  ffb7		       12		      .BYTE.b	%00010010
     20  ffb8		       10		      .BYTE.b	%00010000
     21  ffb9		       08		      .BYTE.b	%00001000
     22  ffba
     23  ffba				   OverLoseImagePF2
     24  ffba		       e0		      .BYTE.b	%11100000
     25  ffbb		       f8		      .BYTE.b	%11111000
     26  ffbc		       fd		      .BYTE.b	%11111101
     27  ffbd		       ae		      .BYTE.b	%10101110
     28  ffbe		       df		      .BYTE.b	%11011111
     29  ffbf		       ae		      .BYTE.b	%10101110
     30  ffc0		       fc		      .BYTE.b	%11111100
     31  ffc1		       f8		      .BYTE.b	%11111000
     32  ffc2		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    227  ffc3
    228  ffc3				   OverWinAudio0
    229  ffc3		       0c		      .BYTE.b	#12
    230  ffc4		       0c		      .BYTE.b	#12
    231  ffc5		       0d		      .BYTE.b	#13
    232  ffc6		       0e		      .BYTE.b	#14
    233  ffc7		       10		      .BYTE.b	#16
    234  ffc8		       12		      .BYTE.b	#18
    235  ffc9
    236  ffc9				   OverLoseAudio0
    237  ffc9
    238  ffc9		       1a		      .BYTE.b	#26	; D1
    239  ffca		       1a		      .BYTE.b	#26
    240  ffcb		       16		      .BYTE.b	#22	; F1
    241  ffcc		       11		      .BYTE.b	#17	; A1
    242  ffcd		       0d		      .BYTE.b	#13	; D2
    243  ffce		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    305  ffcf
    306  ffcf							;================
    307  ffcf							; End of cart
    308  ffcf							;================
    309  ffcf
    310  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    311  fffa
    312  fffa				   InterruptVectors
    313  fffa
    314  fffa		       26 f2		      .word.w	InitSystem	; NMI
    315  fffc		       26 f2		      .word.w	InitSystem	; RESET
    316  fffe		       26 f2		      .word.w	InitSystem	; IRQ
    317  10000
    318  10000					       END
