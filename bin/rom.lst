------- FILE kernel.asm LEVEL 1 PASS 2
      1  f800 ????						; Spider Web game for Atari VCS/2600
      2  f800 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  f800 ????						; Licensed under GNU LGPL V3.0
      4  f800 ????						; Last revision: September 5th, 2019
      5  f800 ????
      6  f800 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  f800 ????				      include	"vcs.h"
      1  f800 ????						; VCS.H
      2  f800 ????						; Version 1.05, 13/November/2003
      3  f800 ????
      4  f800 ????	       00 69	   VERSION_VCS =	105
      5  f800 ????
      6  f800 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  f800 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  f800 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  f800 ????						;
     10  f800 ????						; This file defines hardware registers and memory mapping for the
     11  f800 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  f800 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  f800 ????						; available at at http://www.atari2600.org/dasm
     14  f800 ????						;
     15  f800 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  f800 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  f800 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  f800 ????						; with your views.  Please contribute, if you think you can improve this
     19  f800 ????						; file!
     20  f800 ????						;
     21  f800 ????						; Latest Revisions...
     22  f800 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  f800 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  f800 ????						;			    This will allow conditional code to verify VCS.H being
     25  f800 ????						;			    used for code assembly.
     26  f800 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  f800 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  f800 ????						;			 mirrored reading/writing differences.	This is more a
     29  f800 ????						;			 readability issue, and binary compatibility with disassembled
     30  f800 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  f800 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  f800 ????						;			 which was broken by the use of segments in this file, as
     33  f800 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  f800 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  f800 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  f800 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  f800 ????						;						   it is safe to leave it undefined, and the base address will
     38  f800 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  f800 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  f800 ????						;			  - register definitions are now generated through assignment
     41  f800 ????						;			    in uninitialised segments.	This allows a changeable base
     42  f800 ????						;			    address architecture.
     43  f800 ????						; 1.0	22/MAR/2003		Initial release
     44  f800 ????
     45  f800 ????
     46  f800 ????						;-------------------------------------------------------------------------------
     47  f800 ????
     48  f800 ????						; TIA_BASE_ADDRESS
     49  f800 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  f800 ????						; Normally 0, the base address should (externally, before including this file)
     51  f800 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  f800 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  f800 ????						; < $40 as a bankswitch.
     54  f800 ????
     55  f800 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  f800 ????			  -TIA_BASE_ADDRESS =	0
     57  f800 ????				      ENDIF
     58  f800 ????
     59  f800 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  f800 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  f800 ????						; *OR* by declaring the label before including this file, eg:
     62  f800 ????						; TIA_BASE_ADDRESS = $40
     63  f800 ????						;   include "vcs.h"
     64  f800 ????
     65  f800 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  f800 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  f800 ????						; for the mirrored ROM hardware registers.
     68  f800 ????
     69  f800 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  f800 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  f800 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  f800 ????
     73  f800 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  f800 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  f800 ????				      ENDIF
     76  f800 ????
     77  f800 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  f800 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  f800 ????				      ENDIF
     80  f800 ????
     81  f800 ????						;-------------------------------------------------------------------------------
     82  f800 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  f800 ????				      SEG
    199  f800 ????
    200  f800 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  f800 ????				      include	"macro.h"
      1  f800 ????						; MACRO.H
      2  f800 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  f800 ????
      4  f800 ????	       00 6a	   VERSION_MACRO =	106
      5  f800 ????
      6  f800 ????						;
      7  f800 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  f800 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  f800 ????						;
     10  f800 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  f800 ????						; It is distributed as a companion machine-specific support package
     12  f800 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  f800 ????						; available at at http://www.atari2600.org/dasm
     14  f800 ????						;
     15  f800 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  f800 ????						; contents, or would like to add something, please write to me
     17  f800 ????						; (atari2600@taswegian.com) with your contribution.
     18  f800 ????						;
     19  f800 ????						; Latest Revisions...
     20  f800 ????						;
     21  f800 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  f800 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  f800 ????						;			   This will allow conditional code to verify MACRO.H being
     24  f800 ????						;			   used for code assembly.
     25  f800 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  f800 ????						;
     27  f800 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  f800 ????						;
     29  f800 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  f800 ????						;			   (standardised macro for vertical synch code)
     31  f800 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  f800 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  f800 ????						; 1.0	22/MAR/2003		Initial release
     34  f800 ????
     35  f800 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  f800 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  f800 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  f800 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  f800 ????						;   registers and require them to be defined first).
     40  f800 ????
     41  f800 ????						; Available macros...
     42  f800 ????						;   SLEEP n		 - sleep for n cycles
     43  f800 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  f800 ????						;   CLEAN_START	 - set machine to known state on startup
     45  f800 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  f800 ????
     47  f800 ????						;-------------------------------------------------------------------------------
     48  f800 ????						; SLEEP duration
     49  f800 ????						; Original author: Thomas Jentzsch
     50  f800 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  f800 ????						; useful for code where precise timing is required.
     52  f800 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  f800 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  f800 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  f800 ????
     56  f800 ????				      MAC	sleep
     57  f800 ????			   .CYCLES    SET	{1}
     58  f800 ????
     59  f800 ????				      IF	.CYCLES < 2
     60  f800 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  f800 ????				      ERR
     62  f800 ????				      ENDIF
     63  f800 ????
     64  f800 ????				      IF	.CYCLES & 1
     65  f800 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  f800 ????				      nop	0
     67  f800 ????				      ELSE
     68  f800 ????				      bit	VSYNC
     69  f800 ????				      ENDIF
     70  f800 ????			   .CYCLES    SET	.CYCLES - 3
     71  f800 ????				      ENDIF
     72  f800 ????
     73  f800 ????				      REPEAT	.CYCLES / 2
     74  f800 ????				      nop
     75  f800 ????				      REPEND
     76  f800 ????				      ENDM		;usage: SLEEP n (n>1)
     77  f800 ????
     78  f800 ????						;-------------------------------------------------------------------------------
     79  f800 ????						; VERTICAL_SYNC
     80  f800 ????						; revised version by Edwin Blink -- saves bytes!
     81  f800 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  f800 ????						; Note: Alters the accumulator
     83  f800 ????
     84  f800 ????						; OUT: A = 0
     85  f800 ????
     86  f800 ????				      MAC	vertical_sync
     87  f800 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  f800 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  f800 ????				      sta	VSYNC
     90  f800 ????				      lsr
     91  f800 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  f800 ????				      ENDM
     93  f800 ????
     94  f800 ????						;-------------------------------------------------------------------------------
     95  f800 ????						; CLEAN_START
     96  f800 ????						; Original author: Andrew Davie
     97  f800 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  f800 ????						; Sets stack pointer to $FF, and all registers to 0
     99  f800 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  f800 ????						; Use as very first section of code on boot (ie: at reset)
    101  f800 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  f800 ????
    103  f800 ????				      MAC	clean_start
    104  f800 ????				      sei
    105  f800 ????				      cld
    106  f800 ????
    107  f800 ????				      ldx	#0
    108  f800 ????				      txa
    109  f800 ????				      tay
    110  f800 ????			   .CLEAR_STACK dex
    111  f800 ????				      txs
    112  f800 ????				      pha
    113  f800 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  f800 ????
    115  f800 ????				      ENDM
    116  f800 ????
    117  f800 ????						;-------------------------------------------------------
    118  f800 ????						; SET_POINTER
    119  f800 ????						; Original author: Manuel Rotschkar
    120  f800 ????						;
    121  f800 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  f800 ????						;
    123  f800 ????						; Usage: SET_POINTER pointer, address
    124  f800 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  f800 ????						;
    126  f800 ????						; Note: Alters the accumulator, NZ flags
    127  f800 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  f800 ????						; IN 2: absolute address
    129  f800 ????
    130  f800 ????				      MAC	set_pointer
    131  f800 ????			   .POINTER   SET	{1}
    132  f800 ????			   .ADDRESS   SET	{2}
    133  f800 ????
    134  f800 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  f800 ????				      STA	.POINTER	; Store in pointer
    136  f800 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  f800 ????				      STA	.POINTER+1	; Store in pointer+1
    138  f800 ????
    139  f800 ????				      ENDM
    140  f800 ????
    141  f800 ????						;-------------------------------------------------------
    142  f800 ????						; BOUNDARY byte#
    143  f800 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  f800 ????						;
    145  f800 ????						; Push data to a certain position inside a page and keep count of how
    146  f800 ????						; many free bytes the programmer will have.
    147  f800 ????						;
    148  f800 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  f800 ????
    150  f800 ????			   .FREE_BYTES SET	0
    151  f800 ????				      MAC	boundary
    152  f800 ????				      REPEAT	256
    153  f800 ????				      IF	<. % {1} = 0
    154  f800 ????				      MEXIT
    155  f800 ????				      ELSE
    156  f800 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  f800 ????				      .byte	$00
    158  f800 ????				      ENDIF
    159  f800 ????				      REPEND
    160  f800 ????				      ENDM
    161  f800 ????
    162  f800 ????
    163  f800 ????						; EOF
------- FILE kernel.asm
      9  f800 ????
     10  f800 ????						;================
     11  f800 ????						; Constants
     12  f800 ????						;================
     13  f800 ????
     14  f800 ????						; PAL Region
     15  f800 ????	       00 00	   PAL	      =	0
     16  f800 ????	       00 f2	   PAL_SCANLINES =	242
     17  f800 ????	       01 38	   PAL_TOTAL  =	312
     18  f800 ????
     19  f800 ????						; NTSC Region
     20  f800 ????	       00 01	   NTSC       =	1
     21  f800 ????	       00 c0	   NTSC_SCANLINES =	192
     22  f800 ????	       01 06	   NTSC_TOTAL =	262
     23  f800 ????
     24  f800 ????						; Kernel
     25  f800 ????	       00 01	   SYSTEM     =	NTSC
     26  f800 ????				      if	SYSTEM = NTSC
     27  f800 ????	       00 c0	   KERNEL_SCANLINES =	NTSC_SCANLINES
     28  f800 ????	       01 06	   KERNEL_TOTAL =	NTSC_TOTAL
     29  f800 ????				      endif
     30  f800 ????			  -	      if	SYSTEM = PAL
     31  f800 ????			  -KERNEL_SCANLINES =	PAL_SCANLINES
     32  f800 ????			  -KERNEL_TOTAL =	PAL_TOTAL
     33  f800 ????				      endif
     34  f800 ????	       00 03	   KERNEL_VSYNC =	3
     35  f800 ????	       00 25	   KERNEL_VBLANK =	37
     36  f800 ????	       00 1e	   KERNEL_OVERSCAN =	30
     37  f800 ????	       01 40	   KERNEL_WIDTH =	40*8
     38  f800 ????
     39  f800 ????	       00 03	   KERNEL_IMAGE_MIRROR_DATA =	#3
     40  f800 ????	       00 06	   KERNEL_IMAGE_FULL_DATA =	#6
     41  f800 ????	       00 08	   KERNEL_IMAGE_LINE =	#8
     42  f800 ????	       00 18	   KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     43  f800 ????
     44  f800 ????						;================
     45  f800 ????						; Variables
     46  f800 ????						;================
     47  f800 ????
     48 U0093 ????				      SEG.U	vars
     49 U0080					      org	$80
     50 U0080
     51 U0080		       00 00	   VBlankPtr  ds	2
     52 U0082		       00 00	   KernelPtr  ds	2
     53 U0084		       00 00	   OverScanPtr ds	2
     54 U0086
     55 U0086		       00	   Frame      ds	1
     56 U0087		       00	   FrameTimer ds	1
     57 U0088
     58 U0088		       00	   AudioStep  ds	1
     59 U0089
     60 U0089		       00	   ImageIndex ds	1
     61 U008a
     62 U008a		       00 00	   PlayerPtr  ds	2
     63 U008c		       00 00	   PlayerPosition ds	2
     64 U008e
     65 U008e		       00	   MissileEnabled ds	1
     66 U008f		       00 00	   MissilePosition ds	2
     67 U0091		       00 00	   MissileVelocity ds	2
     68 U0093
     69  f800 ????				      SEG
     70  f800 ????
     71  f000					      ORG	$F000	; Start of cart area
     72  f000
     73  f000							;=======================================
     74  f000							; Global Kernel Subroutines
     75  f000							;=======================================
     76  f000
     77  f000							;=======================================
     78  f000							; PosObject
     79  f000							; ---------
     80  f000							; A - holds the X position of the object
     81  f000							; X - holds which object to position
     82  f000							;   0 = player0
     83  f000							;   1 = player1
     84  f000							;   2 = missile0
     85  f000							;   3 = missile1
     86  f000							;   4 = Ball
     87  f000							;=======================================
     88  f000
     89  f000				   PosObject
     90  f000		       38		      sec
     91  f001		       85 02		      sta	WSYNC
     92  f003				   .posobject_divide_loop
     93  f003		       e9 0f		      sbc	#15
     94  f005		       b0 fc		      bcs	.posobject_divide_loop
     95  f007		       49 07		      eor	#7
     96  f009					      REPEAT	4
     97  f009		       0a		      asl
     96  f009					      REPEND
     97  f00a		       0a		      asl
     96  f00a					      REPEND
     97  f00b		       0a		      asl
     96  f00b					      REPEND
     97  f00c		       0a		      asl
     98  f00d					      REPEND
     99  f00d		       9d 20 00 	      sta.wx	HMP0,x
    100  f010		       95 10		      sta	RESP0,x
    101  f012		       60		      rts
    102  f013
    103  f013				   PosMissile
    104  f013		       38		      sec
    105  f014		       85 02		      sta	WSYNC
    106  f016				   .posmissle_divide_loop
    107  f016		       e9 0f		      sbc	#15
    108  f018		       b0 fc		      bcs	.posmissle_divide_loop
    109  f01a		       49 07		      eor	#7
    110  f01c					      REPEAT	4
    111  f01c		       0a		      asl
    110  f01c					      REPEND
    111  f01d		       0a		      asl
    110  f01d					      REPEND
    111  f01e		       0a		      asl
    110  f01e					      REPEND
    111  f01f		       0a		      asl
    112  f020					      REPEND
    113  f020		       9d 22 00 	      sta.wx	HMM0,x
    114  f023		       95 12		      sta	RESM0,x
    115  f025		       60		      rts
    116  f026
    117  f026				   InitSystem
    118  f026
    119  f026				   .init_clean
    120  f026							; Resets RAM, TIA registers, and CPU registers
      0  f026					      CLEAN_START
      1  f026		       78		      sei
      2  f027		       d8		      cld
      3  f028
      4  f028		       a2 00		      ldx	#0
      5  f02a		       8a		      txa
      6  f02b		       a8		      tay
      7  f02c		       ca	   .CLEAR_STACK dex
      8  f02d		       9a		      txs
      9  f02e		       48		      pha
     10  f02f		       d0 fb		      bne	.CLEAR_STACK
     11  f031
    122  f031
    123  f031				   .init_tia
    124  f031							; Define default TIA register values
    125  f031
    126  f031							; Set background color
    127  f031		       a9 00		      lda	#$00	; Black
    128  f033		       85 09		      sta	COLUBK
    129  f035
    130  f035							; Set the playfield and player color
    131  f035		       a9 0e		      lda	#$0E	; White
    132  f037		       85 08		      sta	COLUPF
    133  f039		       85 06		      sta	COLUP0
    134  f03b		       85 07		      sta	COLUP1
    135  f03d
    136  f03d							; Playfield Control
    137  f03d		       a9 01		      lda	#%00000001	; 1 for mirroring
    138  f03f		       85 0a		      sta	CTRLPF
    139  f041
    140  f041							; Disable Game Elements
    141  f041		       a9 00		      lda	#$00
    142  f043		       85 1f		      sta	ENABL	; Turn off ball
    143  f045		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    144  f047		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    145  f049		       85 1b		      sta	GRP0	; Turn off player 1
    146  f04b		       85 1c		      sta	GRP1	; Turn off player 2
    147  f04d
    148  f04d							; Empty playfield
    149  f04d		       a9 00		      lda	#%00000000
    150  f04f		       85 0d		      sta	PF0
    151  f051		       85 0e		      sta	PF1
    152  f053		       85 0f		      sta	PF2
    153  f055
    154  f055				   .init_game
    155  f055
    156  f055		       20 af f0 	      jsr	LogoInit
    157  f058							;jsr GameInit
    158  f058
    159  f058							;=======================================
    160  f058							; Game Kernel
    161  f058							;=======================================
    162  f058
    163  f058				   Main
    164  f058
    165  f058		       20 67 f0 	      jsr	VerticalSync
    166  f05b		       20 7e f0 	      jsr	VerticalBlank
    167  f05e		       20 91 f0 	      jsr	Kernel
    168  f061		       20 98 f0 	      jsr	OverScan
    169  f064		       4c 58 f0 	      jmp	Main
    170  f067
    171  f067				   VerticalSync
    172  f067
    173  f067		       a9 00		      lda	#0
    174  f069		       85 01		      sta	VBLANK
    175  f06b
    176  f06b							; Turn on Vertical Sync signal and setup timer
    177  f06b		       a9 02		      lda	#2
    178  f06d		       85 00		      sta	VSYNC
    179  f06f
    180  f06f							; Increment frame count and reduce frame counter
    181  f06f		       e6 86		      inc	Frame
    182  f071		       c6 87		      dec	FrameTimer
    183  f073
    184  f073							; VSYNCH signal scanlines
    185  f073					      REPEAT	#KERNEL_VSYNC
    186  f073		       85 02		      sta	WSYNC
    185  f073					      REPEND
    186  f075		       85 02		      sta	WSYNC
    185  f075					      REPEND
    186  f077		       85 02		      sta	WSYNC
    187  f079					      REPEND
    188  f079
    189  f079							; Turn off Vertical Sync signal
    190  f079		       a9 00		      lda	#0
    191  f07b		       85 00		      sta	VSYNC
    192  f07d
    193  f07d				   .vsync_return
    194  f07d		       60		      rts
    195  f07e
    196  f07e				   VerticalBlank
    197  f07e							; Setup Timer
    198  f07e		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    199  f080		       8d 96 02 	      sta	TIM64T
    200  f083
    201  f083				   .vblank_logic
    202  f083							; Perform Game Logic
    203  f083							;jsr (VBlankPtr)
    204  f083		       20 8e f0 	      jsr	.vblank_logic_call_ptr
    205  f086
    206  f086				   .vblank_loop
    207  f086							; WSYNC until Timer is complete
    208  f086		       85 02		      sta	WSYNC
    209  f088		       ad 84 02 	      lda	INTIM
    210  f08b		       d0 f9		      bne	.vblank_loop
    211  f08d
    212  f08d				   .vblank_return
    213  f08d		       60		      rts
    214  f08e
    215  f08e				   .vblank_logic_call_ptr
    216  f08e		       6c 80 00 	      jmp	(VBlankPtr)
    217  f091
    218  f091				   Kernel
    219  f091
    220  f091							; Perform Selected Kernel
    221  f091							;jsr (KernelPtr)
    222  f091		       20 95 f0 	      jsr	.kernel_call_ptr
    223  f094		       60		      rts
    224  f095
    225  f095				   .kernel_call_ptr
    226  f095		       6c 82 00 	      jmp	(KernelPtr)
    227  f098
    228  f098				   OverScan
    229  f098
    230  f098							; End of screen, enter blanking
    231  f098		       a9 42		      lda	#%01000010
    232  f09a		       85 01		      sta	VBLANK
    233  f09c
    234  f09c							; Setup Timer
    235  f09c		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    236  f09e		       8d 96 02 	      sta	TIM64T
    237  f0a1
    238  f0a1				   .overscan_logic
    239  f0a1							; Perform OverScan Logic
    240  f0a1							;jsr (OverScanPtr)
    241  f0a1		       20 ac f0 	      jsr	.overscan_logic_call_ptr
    242  f0a4
    243  f0a4				   .overscan_loop
    244  f0a4							; WSYNC until Timer is complete
    245  f0a4		       85 02		      sta	WSYNC
    246  f0a6		       ad 84 02 	      lda	INTIM
    247  f0a9		       d0 f9		      bne	.overscan_loop
    248  f0ab
    249  f0ab				   .overscan_return
    250  f0ab		       60		      rts
    251  f0ac
    252  f0ac				   .overscan_logic_call_ptr
    253  f0ac		       6c 84 00 	      jmp	(OverScanPtr)
    254  f0af
    255  f0af							;================
    256  f0af							; State Code
    257  f0af							;================
    258  f0af
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0af					      include	"logo.asm"
      1  f0af							;================
      2  f0af							; Constants
      3  f0af							;================
      4  f0af
      5  f0af		       00 b4	   LOGO_FRAMES =	180
      6  f0af
      7  f0af		       00 a2	   LOGO_BG_COLOR =	#$A2
      8  f0af		       00 5e	   LOGO_FG_COLOR =	#$5E
      9  f0af
     10  f0af		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0af		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0af		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0af		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0af		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0af		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0af
     17  f0af				   LogoInit
     18  f0af
     19  f0af							; Setup logic and kernel
      0  f0af					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0af				   .POINTER   SET	VBlankPtr
      2  f0af				   .ADDRESS   SET	LogoVerticalBlank
      3  f0af
      4  f0af		       a9 f6		      LDA	#<.ADDRESS
      5  f0b1		       85 80		      STA	.POINTER
      6  f0b3		       a9 f0		      LDA	#>.ADDRESS
      7  f0b5		       85 81		      STA	.POINTER+1
      8  f0b7
      0  f0b7					      SET_POINTER	KernelPtr, LogoKernel
      1  f0b7				   .POINTER   SET	KernelPtr
      2  f0b7				   .ADDRESS   SET	LogoKernel
      3  f0b7
      4  f0b7		       a9 3a		      LDA	#<.ADDRESS
      5  f0b9		       85 82		      STA	.POINTER
      6  f0bb		       a9 f1		      LDA	#>.ADDRESS
      7  f0bd		       85 83		      STA	.POINTER+1
      8  f0bf
      0  f0bf					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0bf				   .POINTER   SET	OverScanPtr
      2  f0bf				   .ADDRESS   SET	LogoOverScan
      3  f0bf
      4  f0bf		       a9 f7		      LDA	#<.ADDRESS
      5  f0c1		       85 84		      STA	.POINTER
      6  f0c3		       a9 f0		      LDA	#>.ADDRESS
      7  f0c5		       85 85		      STA	.POINTER+1
      8  f0c7
     23  f0c7
     24  f0c7							; Load Colors
     25  f0c7		       a9 a2		      lda	#LOGO_BG_COLOR
     26  f0c9		       85 09		      sta	COLUBK
     27  f0cb		       a9 5e		      lda	#LOGO_FG_COLOR
     28  f0cd		       85 08		      sta	COLUPF
     29  f0cf
     30  f0cf							; Load audio settings
     31  f0cf		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     32  f0d1		       85 15		      sta	AUDC0
     33  f0d3		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     34  f0d5		       85 19		      sta	AUDV0
     35  f0d7		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     36  f0d9		       85 16		      sta	AUDC1
     37  f0db		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     38  f0dd		       85 1a		      sta	AUDV1
     39  f0df		       a9 00		      lda	#0
     40  f0e1		       85 88		      sta	AudioStep
     41  f0e3
     42  f0e3							; Play first note
     43  f0e3		       ad 12 f2 	      lda	LogoAudio0,AudioStep
     44  f0e6		       85 17		      sta	AUDF0
     45  f0e8		       ad 1e f2 	      lda	LogoAudio1,AudioStep
     46  f0eb		       85 18		      sta	AUDF1
     47  f0ed
     48  f0ed							; Setup frame counters
     49  f0ed		       a9 00		      lda	#0
     50  f0ef		       85 86		      sta	Frame
     51  f0f1		       a9 b4		      lda	#LOGO_FRAMES
     52  f0f3		       85 87		      sta	FrameTimer
     53  f0f5
     54  f0f5							; Setup Image Animation
     55  f0f5							;lda #KERNEL_IMAGE_SIZE
     56  f0f5							;sta ImageVisible
     57  f0f5
     58  f0f5		       60		      rts
     59  f0f6
     60  f0f6				   LogoVerticalBlank
     61  f0f6							;jsr LogoAnimation
     62  f0f6		       60		      rts
     63  f0f7
     64  f0f7				   LogoOverScan
     65  f0f7		       20 05 f1 	      jsr	LogoAudio
     66  f0fa		       20 30 f1 	      jsr	LogoState
     67  f0fd		       60		      rts
     68  f0fe
     69  f0fe				   LogoAnimation
     70  f0fe		       a5 86		      lda	Frame
     71  f100		       29 03		      and	#%00000011	; Every 4 when bits are 00
     72  f102		       d0 00		      bne	.logo_animation_return
     73  f104
     74  f104							;ldx ImageVisible
     75  f104							;cpx #0
     76  f104							;beq .logo_animation_return
     77  f104
     78  f104							; Add another visible line
     79  f104							;dex
     80  f104							;stx ImageVisible
     81  f104
     82  f104				   .logo_animation_return
     83  f104		       60		      rts
     84  f105
     85  f105				   LogoAudio
     86  f105
     87  f105		       a5 86		      lda	Frame
     88  f107		       29 07		      and	#%00000111	; Every 8 when bits are 000
     89  f109		       d0 24		      bne	.logo_audio_return
     90  f10b
     91  f10b				   .logo_audio_play
     92  f10b
     93  f10b							; Check if we're at the end of the melody
     94  f10b		       a4 88		      ldy	AudioStep
     95  f10d		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
     96  f10f		       f0 10		      beq	.logo_audio_mute
     97  f111
     98  f111				   .logo_audio_play_note
     99  f111							; Increment audio position
    100  f111		       c8		      iny
    101  f112		       84 88		      sty	AudioStep
    102  f114
    103  f114							; Logo note and play
    104  f114		       b9 12 f2 	      lda	LogoAudio0,y
    105  f117		       85 17		      sta	AUDF0
    106  f119		       b9 1e f2 	      lda	LogoAudio1,y
    107  f11c		       85 18		      sta	AUDF1
    108  f11e		       4c 2f f1 	      jmp	.logo_audio_mute_skip
    109  f121
    110  f121				   .logo_audio_mute
    111  f121
    112  f121							; Mute audio
    113  f121		       a9 00		      lda	#0
    114  f123		       85 15		      sta	AUDC0
    115  f125		       85 19		      sta	AUDV0
    116  f127		       85 17		      sta	AUDF0
    117  f129		       85 16		      sta	AUDC1
    118  f12b		       85 1a		      sta	AUDV1
    119  f12d		       85 18		      sta	AUDF1
    120  f12f
    121  f12f				   .logo_audio_mute_skip
    122  f12f				   .logo_audio_return
    123  f12f		       60		      rts
    124  f130
    125  f130				   LogoState
    126  f130		       a5 87		      lda	FrameTimer
    127  f132		       c9 00		      cmp	#0
    128  f134		       d0 03		      bne	.logo_state_return
    129  f136
    130  f136		       20 2a f2 	      jsr	TitleInit
    131  f139
    132  f139				   .logo_state_return
    133  f139		       60		      rts
    134  f13a
    135  f13a				   LogoKernel
    136  f13a
    137  f13a							; Playfield Control
    138  f13a		       a9 00		      lda	#%00000000	; No mirroring
    139  f13c		       85 0a		      sta	CTRLPF
    140  f13e
    141  f13e							; Start Counters
    142  f13e		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    143  f140		       a0 00		      ldy	#0	; Image Counter
    144  f142
    145  f142							; Turn on display
    146  f142		       a9 00		      lda	#0
    147  f144		       85 01		      sta	VBLANK
    148  f146
    149  f146		       85 02		      sta	WSYNC
    150  f148
    151  f148				   .logo_kernel_image
    152  f148
    153  f148							; 76 machine cycles per scanline
    154  f148		       85 02		      sta	WSYNC
    155  f14a
    156  f14a				   .logo_kernel_image_load		; 66 cycles
    157  f14a
    158  f14a							; First half of image
    159  f14a		       b9 82 f1 	      lda	LogoImage,y	; 5
    160  f14d		       85 0d		      sta	PF0	; 4
    161  f14f		       b9 83 f1 	      lda	LogoImage+1,y	; 5
    162  f152		       85 0e		      sta	PF1	; 4
    163  f154		       b9 84 f1 	      lda	LogoImage+2,y	; 5
    164  f157		       85 0f		      sta	PF2	; 4
    165  f159
      0  f159					      sleep	6
      1  f159				   .CYCLES    SET	6
      2  f159
      3  f159				  -	      IF	.CYCLES < 2
      4  f159				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f159				  -	      ERR
      6  f159					      ENDIF
      7  f159
      8  f159				  -	      IF	.CYCLES & 1
      9  f159				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f159				  -	      nop	0
     11  f159				  -	      ELSE
     12  f159				  -	      bit	VSYNC
     13  f159				  -	      ENDIF
     14  f159				  -.CYCLES    SET	.CYCLES - 3
     15  f159					      ENDIF
     16  f159
     17  f159					      REPEAT	.CYCLES / 2
     18  f159		       ea		      nop
     17  f159					      REPEND
     18  f15a		       ea		      nop
     17  f15a					      REPEND
     18  f15b		       ea		      nop
     19  f15c					      REPEND
    167  f15c
    168  f15c							; Second half of image
    169  f15c		       b9 85 f1 	      lda	LogoImage+3,y	; 5
    170  f15f		       85 0d		      sta	PF0	; 4
    171  f161		       b9 86 f1 	      lda	LogoImage+4,y	; 5
    172  f164		       85 0e		      sta	PF1	; 4
    173  f166		       b9 87 f1 	      lda	LogoImage+5,y	; 5
    174  f169		       85 0f		      sta	PF2	; 4
    175  f16b
    176  f16b				   .logo_kernel_image_index		; 4 cycles
    177  f16b
    178  f16b		       ca		      dex		; 2
    179  f16c		       d0 da		      bne	.logo_kernel_image	; 2
    180  f16e
    181  f16e				   .logo_kernel_image_index_next		; 6 cycles
    182  f16e
    183  f16e							; Restore scanline counter
    184  f16e		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    185  f170
    186  f170		       98		      tya		; 2
    187  f171		       18		      clc		; 2
    188  f172		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    189  f174		       a8		      tay		; 2
    190  f175		       c0 90		      cpy	#KERNEL_IMAGE_SIZE*KERNEL_IMAGE_FULL_DATA
    191  f177		       d0 cf		      bne	.logo_kernel_image	; 2
    192  f179
    193  f179				   .logo_kernel_image_clean
    194  f179
    195  f179							; Clear out playfield
    196  f179		       a9 00		      lda	#0
    197  f17b		       85 0d		      sta	PF0
    198  f17d		       85 0e		      sta	PF1
    199  f17f		       85 0f		      sta	PF2
    200  f181
    201  f181				   .logo_kernel_image_return
    202  f181		       60		      rts
    203  f182
    204  f182				   LogoAssets
    205  f182
    206  f182							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f182					      include	"logo_image.asm"
      1  f182				   LogoImage
      2  f182
      3  f182		       00		      .BYTE.b	%00000000
      4  f183		       00		      .BYTE.b	%00000000
      5  f184		       00		      .BYTE.b	%00000000
      6  f185		       00		      .BYTE.b	%00000000
      7  f186		       00		      .BYTE.b	%00000000
      8  f187		       00		      .BYTE.b	%00000000
      9  f188
     10  f188		       00		      .BYTE.b	%00000000
     11  f189		       00		      .BYTE.b	%00000000
     12  f18a		       00		      .BYTE.b	%00000000
     13  f18b		       00		      .BYTE.b	%00000000
     14  f18c		       00		      .BYTE.b	%00000000
     15  f18d		       00		      .BYTE.b	%00000000
     16  f18e
     17  f18e		       00		      .BYTE.b	%00000000
     18  f18f		       00		      .BYTE.b	%00000000
     19  f190		       00		      .BYTE.b	%00000000
     20  f191		       00		      .BYTE.b	%00000000
     21  f192		       00		      .BYTE.b	%00000000
     22  f193		       00		      .BYTE.b	%00000000
     23  f194
     24  f194		       00		      .BYTE.b	%00000000
     25  f195		       00		      .BYTE.b	%00000000
     26  f196		       00		      .BYTE.b	%00000000
     27  f197		       00		      .BYTE.b	%00000000
     28  f198		       00		      .BYTE.b	%00000000
     29  f199		       00		      .BYTE.b	%00000000
     30  f19a
     31  f19a		       00		      .BYTE.b	%00000000
     32  f19b		       00		      .BYTE.b	%00000000
     33  f19c		       00		      .BYTE.b	%00000000
     34  f19d		       00		      .BYTE.b	%00000000
     35  f19e		       00		      .BYTE.b	%00000000
     36  f19f		       00		      .BYTE.b	%00000000
     37  f1a0
     38  f1a0		       00		      .BYTE.b	%00000000
     39  f1a1		       00		      .BYTE.b	%00000000
     40  f1a2		       00		      .BYTE.b	%00000000
     41  f1a3		       00		      .BYTE.b	%00000000
     42  f1a4		       00		      .BYTE.b	%00000000
     43  f1a5		       00		      .BYTE.b	%00000000
     44  f1a6
     45  f1a6		       00		      .BYTE.b	%00000000
     46  f1a7		       00		      .BYTE.b	%00000000
     47  f1a8		       00		      .BYTE.b	%00000000
     48  f1a9		       00		      .BYTE.b	%00000000
     49  f1aa		       00		      .BYTE.b	%00000000
     50  f1ab		       00		      .BYTE.b	%00000000
     51  f1ac
     52  f1ac		       00		      .BYTE.b	%00000000
     53  f1ad		       00		      .BYTE.b	%00000000
     54  f1ae		       8c		      .BYTE.b	%10001100
     55  f1af		       c0		      .BYTE.b	%11000000
     56  f1b0		       00		      .BYTE.b	%00000000
     57  f1b1		       00		      .BYTE.b	%00000000
     58  f1b2
     59  f1b2		       00		      .BYTE.b	%00000000
     60  f1b3		       00		      .BYTE.b	%00000000
     61  f1b4		       54		      .BYTE.b	%01010100
     62  f1b5		       50		      .BYTE.b	%01010000
     63  f1b6		       80		      .BYTE.b	%10000000
     64  f1b7		       00		      .BYTE.b	%00000000
     65  f1b8
     66  f1b8		       00		      .BYTE.b	%00000000
     67  f1b9		       00		      .BYTE.b	%00000000
     68  f1ba		       54		      .BYTE.b	%01010100
     69  f1bb		       40		      .BYTE.b	%01000000
     70  f1bc		       80		      .BYTE.b	%10000000
     71  f1bd		       00		      .BYTE.b	%00000000
     72  f1be
     73  f1be		       00		      .BYTE.b	%00000000
     74  f1bf		       00		      .BYTE.b	%00000000
     75  f1c0		       54		      .BYTE.b	%01010100
     76  f1c1		       50		      .BYTE.b	%01010000
     77  f1c2		       80		      .BYTE.b	%10000000
     78  f1c3		       00		      .BYTE.b	%00000000
     79  f1c4
     80  f1c4		       00		      .BYTE.b	%00000000
     81  f1c5		       00		      .BYTE.b	%00000000
     82  f1c6		       8c		      .BYTE.b	%10001100
     83  f1c7		       c0		      .BYTE.b	%11000000
     84  f1c8		       00		      .BYTE.b	%00000000
     85  f1c9		       00		      .BYTE.b	%00000000
     86  f1ca
     87  f1ca		       00		      .BYTE.b	%00000000
     88  f1cb		       00		      .BYTE.b	%00000000
     89  f1cc		       00		      .BYTE.b	%00000000
     90  f1cd		       00		      .BYTE.b	%00000000
     91  f1ce		       00		      .BYTE.b	%00000000
     92  f1cf		       00		      .BYTE.b	%00000000
     93  f1d0
     94  f1d0		       00		      .BYTE.b	%00000000
     95  f1d1		       00		      .BYTE.b	%00000000
     96  f1d2		       10		      .BYTE.b	%00010000
     97  f1d3		       10		      .BYTE.b	%00010000
     98  f1d4		       80		      .BYTE.b	%10000000
     99  f1d5		       00		      .BYTE.b	%00000000
    100  f1d6
    101  f1d6		       00		      .BYTE.b	%00000000
    102  f1d7		       00		      .BYTE.b	%00000000
    103  f1d8		       a8		      .BYTE.b	%10101000
    104  f1d9		       a0		      .BYTE.b	%10100000
    105  f1da		       00		      .BYTE.b	%00000000
    106  f1db		       00		      .BYTE.b	%00000000
    107  f1dc
    108  f1dc		       00		      .BYTE.b	%00000000
    109  f1dd		       00		      .BYTE.b	%00000000
    110  f1de		       44		      .BYTE.b	%01000100
    111  f1df		       40		      .BYTE.b	%01000000
    112  f1e0		       00		      .BYTE.b	%00000000
    113  f1e1		       00		      .BYTE.b	%00000000
    114  f1e2
    115  f1e2		       00		      .BYTE.b	%00000000
    116  f1e3		       00		      .BYTE.b	%00000000
    117  f1e4		       00		      .BYTE.b	%00000000
    118  f1e5		       00		      .BYTE.b	%00000000
    119  f1e6		       00		      .BYTE.b	%00000000
    120  f1e7		       00		      .BYTE.b	%00000000
    121  f1e8
    122  f1e8		       00		      .BYTE.b	%00000000
    123  f1e9		       00		      .BYTE.b	%00000000
    124  f1ea		       00		      .BYTE.b	%00000000
    125  f1eb		       00		      .BYTE.b	%00000000
    126  f1ec		       00		      .BYTE.b	%00000000
    127  f1ed		       00		      .BYTE.b	%00000000
    128  f1ee
    129  f1ee		       00		      .BYTE.b	%00000000
    130  f1ef		       00		      .BYTE.b	%00000000
    131  f1f0		       00		      .BYTE.b	%00000000
    132  f1f1		       00		      .BYTE.b	%00000000
    133  f1f2		       00		      .BYTE.b	%00000000
    134  f1f3		       00		      .BYTE.b	%00000000
    135  f1f4
    136  f1f4		       00		      .BYTE.b	%00000000
    137  f1f5		       00		      .BYTE.b	%00000000
    138  f1f6		       00		      .BYTE.b	%00000000
    139  f1f7		       00		      .BYTE.b	%00000000
    140  f1f8		       00		      .BYTE.b	%00000000
    141  f1f9		       00		      .BYTE.b	%00000000
    142  f1fa
    143  f1fa		       00		      .BYTE.b	%00000000
    144  f1fb		       00		      .BYTE.b	%00000000
    145  f1fc		       00		      .BYTE.b	%00000000
    146  f1fd		       00		      .BYTE.b	%00000000
    147  f1fe		       00		      .BYTE.b	%00000000
    148  f1ff		       00		      .BYTE.b	%00000000
    149  f200
    150  f200		       00		      .BYTE.b	%00000000
    151  f201		       00		      .BYTE.b	%00000000
    152  f202		       00		      .BYTE.b	%00000000
    153  f203		       00		      .BYTE.b	%00000000
    154  f204		       00		      .BYTE.b	%00000000
    155  f205		       00		      .BYTE.b	%00000000
    156  f206
    157  f206		       00		      .BYTE.b	%00000000
    158  f207		       00		      .BYTE.b	%00000000
    159  f208		       00		      .BYTE.b	%00000000
    160  f209		       00		      .BYTE.b	%00000000
    161  f20a		       00		      .BYTE.b	%00000000
    162  f20b		       00		      .BYTE.b	%00000000
    163  f20c
    164  f20c		       00		      .BYTE.b	%00000000
    165  f20d		       00		      .BYTE.b	%00000000
    166  f20e		       00		      .BYTE.b	%00000000
    167  f20f		       00		      .BYTE.b	%00000000
    168  f210		       00		      .BYTE.b	%00000000
    169  f211		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    208  f212
    209  f212				   LogoAudio0
    210  f212
    211  f212		       1d		      .BYTE.b	#29	; C
    212  f213		       17		      .BYTE.b	#23	; E
    213  f214		       13		      .BYTE.b	#19	; G
    214  f215		       0f		      .BYTE.b	#15	; A
    215  f216		       17		      .BYTE.b	#23	; E
    216  f217		       13		      .BYTE.b	#19	; G
    217  f218		       0f		      .BYTE.b	#15	; B
    218  f219		       0e		      .BYTE.b	#14	; C
    219  f21a		       0b		      .BYTE.b	#11	; E
    220  f21b		       0b		      .BYTE.b	#11
    221  f21c		       0b		      .BYTE.b	#11
    222  f21d		       0b		      .BYTE.b	#11
    223  f21e
    224  f21e				   LogoAudio1
    225  f21e
    226  f21e		       1f		      .BYTE.b	#31	; C
    227  f21f		       1f		      .BYTE.b	#31
    228  f220		       1f		      .BYTE.b	#31
    229  f221		       1f		      .BYTE.b	#31
    230  f222		       19		      .BYTE.b	#25	; E
    231  f223		       19		      .BYTE.b	#25
    232  f224		       19		      .BYTE.b	#25
    233  f225		       19		      .BYTE.b	#25
    234  f226		       14		      .BYTE.b	#20	; G
    235  f227		       14		      .BYTE.b	#20
    236  f228		       14		      .BYTE.b	#20
    237  f229		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f22a					      include	"title.asm"
      1  f22a							;================
      2  f22a							; Constants
      3  f22a							;================
      4  f22a
      5  f22a		       00 08	   TITLE_LINE_SIZE =	8
      6  f22a		       00 04	   TITLE_DATA_SIZE =	%00000100
      7  f22a		       00 01	   TITLE_BORDER =	1
      8  f22a		       00 04	   TITLE_PAD  =	4
      9  f22a		       00 06	   TITLE_IMAGE =	6
     10  f22a		       00 02	   TITLE_GAP  =	2
     11  f22a
     12  f22a		       00 70	   TITLE_BG_COLOR =	#$70
     13  f22a		       00 7e	   TITLE_BD_COLOR =	#$7E
     14  f22a		       00 0e	   TITLE_FG_COLOR =	#$0E
     15  f22a
     16  f22a		       00 04	   TITLE_AUDIO_0_TONE =	4
     17  f22a		       00 04	   TITLE_AUDIO_0_VOLUME =	4
     18  f22a		       00 07	   TITLE_AUDIO_1_VOLUME =	7
     19  f22a		       00 10	   TITLE_AUDIO_LENGTH =	16
     20  f22a		       00 09	   TITLE_AUDIO_STEP =	9
     21  f22a
     22  f22a				   TitleInit
     23  f22a
     24  f22a							; Setup logic and kernel
      0  f22a					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f22a				   .POINTER   SET	VBlankPtr
      2  f22a				   .ADDRESS   SET	TitleVerticalBlank
      3  f22a
      4  f22a		       a9 61		      LDA	#<.ADDRESS
      5  f22c		       85 80		      STA	.POINTER
      6  f22e		       a9 f2		      LDA	#>.ADDRESS
      7  f230		       85 81		      STA	.POINTER+1
      8  f232
      0  f232					      SET_POINTER	KernelPtr, TitleKernel
      1  f232				   .POINTER   SET	KernelPtr
      2  f232				   .ADDRESS   SET	TitleKernel
      3  f232
      4  f232		       a9 a9		      LDA	#<.ADDRESS
      5  f234		       85 82		      STA	.POINTER
      6  f236		       a9 f2		      LDA	#>.ADDRESS
      7  f238		       85 83		      STA	.POINTER+1
      8  f23a
      0  f23a					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f23a				   .POINTER   SET	OverScanPtr
      2  f23a				   .ADDRESS   SET	TitleOverScan
      3  f23a
      4  f23a		       a9 62		      LDA	#<.ADDRESS
      5  f23c		       85 84		      STA	.POINTER
      6  f23e		       a9 f2		      LDA	#>.ADDRESS
      7  f240		       85 85		      STA	.POINTER+1
      8  f242
     28  f242
     29  f242							; Load Colors
     30  f242		       a9 70		      lda	#TITLE_BG_COLOR
     31  f244		       85 09		      sta	COLUBK
     32  f246		       a9 0e		      lda	#TITLE_FG_COLOR
     33  f248		       85 08		      sta	COLUPF
     34  f24a
     35  f24a							; Load audio settings
     36  f24a
     37  f24a							; Melody Line
     38  f24a		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     39  f24c		       85 15		      sta	AUDC0
     40  f24e		       a9 04		      lda	#TITLE_AUDIO_0_VOLUME
     41  f250		       85 19		      sta	AUDV0
     42  f252
     43  f252							; Drums and Bass
     44  f252		       a9 00		      lda	#0
     45  f254		       85 16		      sta	AUDC1
     46  f256		       85 1a		      sta	AUDV1
     47  f258
     48  f258							; Make it so that we play the first note immediately
     49  f258		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     50  f25a		       85 88		      sta	AudioStep
     51  f25c		       a9 01		      lda	#1
     52  f25e		       85 87		      sta	FrameTimer
     53  f260
     54  f260		       60		      rts
     55  f261
     56  f261				   TitleVerticalBlank
     57  f261		       60		      rts
     58  f262
     59  f262				   TitleOverScan
     60  f262		       20 69 f2 	      jsr	TitleAudio
     61  f265		       20 a1 f2 	      jsr	TitleState
     62  f268		       60		      rts
     63  f269
     64  f269				   TitleAudio
     65  f269
     66  f269		       a6 87		      ldx	FrameTimer
     67  f26b		       e0 00		      cpx	#0
     68  f26d		       d0 31		      bne	.title_audio_return
     69  f26f
     70  f26f							; Reset Timer
     71  f26f		       a2 09		      ldx	#TITLE_AUDIO_STEP
     72  f271		       86 87		      stx	FrameTimer
     73  f273
     74  f273				   .title_audio_play
     75  f273
     76  f273							; Increment melody position
     77  f273		       a4 88		      ldy	AudioStep
     78  f275		       c8		      iny
     79  f276
     80  f276							; Check if we're at the end of the melody
     81  f276		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
     82  f278		       d0 02		      bne	.title_audio_play_note
     83  f27a
     84  f27a							; Loop our audio step
     85  f27a		       a0 00		      ldy	#0
     86  f27c
     87  f27c				   .title_audio_play_note
     88  f27c
     89  f27c							; Save current position
     90  f27c		       84 88		      sty	AudioStep
     91  f27e
     92  f27e							; Basic Melody Line
     93  f27e		       b9 81 f3 	      lda	TitleAudio0,y
     94  f281		       85 17		      sta	AUDF0
     95  f283
     96  f283							; Drums and Bass
     97  f283		       b9 91 f3 	      lda	TitleTone1,y
     98  f286		       c9 ff		      cmp	#$FF
     99  f288		       f0 0e		      beq	.title_audio_play_note_1_mute
    100  f28a
    101  f28a		       85 16		      sta	AUDC1
    102  f28c		       b9 a1 f3 	      lda	TitleAudio1,y
    103  f28f		       85 18		      sta	AUDF1
    104  f291		       a9 07		      lda	#TITLE_AUDIO_1_VOLUME
    105  f293		       85 1a		      sta	AUDV1
    106  f295
    107  f295		       4c a0 f2 	      jmp	.title_audio_return
    108  f298
    109  f298				   .title_audio_play_note_1_mute
    110  f298
    111  f298		       a9 00		      lda	#0
    112  f29a		       85 18		      sta	AUDF1
    113  f29c		       85 16		      sta	AUDC1
    114  f29e		       85 1a		      sta	AUDV1
    115  f2a0
    116  f2a0				   .title_audio_return
    117  f2a0		       60		      rts
    118  f2a1
    119  f2a1				   TitleState
    120  f2a1							; Check if Fire Button on controller 1 is pressed
    121  f2a1		       a5 0c		      lda	INPT4
    122  f2a3		       30 03		      bmi	.title_state_return
    123  f2a5
    124  f2a5		       20 b1 f3 	      jsr	GameInit
    125  f2a8
    126  f2a8				   .title_state_return
    127  f2a8		       60		      rts
    128  f2a9
    129  f2a9				   TitleKernel
    130  f2a9
    131  f2a9							; Playfield Control
    132  f2a9		       a9 00		      lda	#%00000000	; No mirroring
    133  f2ab		       85 0a		      sta	CTRLPF
    134  f2ad
    135  f2ad							; Start Counters
    136  f2ad		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    137  f2af		       a0 00		      ldy	#0	; Image Counter
    138  f2b1
    139  f2b1							; Turn on display
    140  f2b1		       a9 00		      lda	#0
    141  f2b3		       85 01		      sta	VBLANK
    142  f2b5
    143  f2b5		       85 02		      sta	WSYNC
    144  f2b7
    145  f2b7				   .title_kernel_image
    146  f2b7
    147  f2b7							; 76 machine cycles per scanline
    148  f2b7		       85 02		      sta	WSYNC
    149  f2b9
    150  f2b9				   .title_kernel_image_load		; 66 cycles
    151  f2b9
    152  f2b9							; First half of image
    153  f2b9		       b9 f1 f2 	      lda	TitleImage,y	; 5
    154  f2bc		       85 0d		      sta	PF0	; 4
    155  f2be		       b9 f2 f2 	      lda	TitleImage+1,y	; 5
    156  f2c1		       85 0e		      sta	PF1	; 4
    157  f2c3		       b9 f3 f2 	      lda	TitleImage+2,y	; 5
    158  f2c6		       85 0f		      sta	PF2	; 4
    159  f2c8
      0  f2c8					      sleep	6
      1  f2c8				   .CYCLES    SET	6
      2  f2c8
      3  f2c8				  -	      IF	.CYCLES < 2
      4  f2c8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2c8				  -	      ERR
      6  f2c8					      ENDIF
      7  f2c8
      8  f2c8				  -	      IF	.CYCLES & 1
      9  f2c8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2c8				  -	      nop	0
     11  f2c8				  -	      ELSE
     12  f2c8				  -	      bit	VSYNC
     13  f2c8				  -	      ENDIF
     14  f2c8				  -.CYCLES    SET	.CYCLES - 3
     15  f2c8					      ENDIF
     16  f2c8
     17  f2c8					      REPEAT	.CYCLES / 2
     18  f2c8		       ea		      nop
     17  f2c8					      REPEND
     18  f2c9		       ea		      nop
     17  f2c9					      REPEND
     18  f2ca		       ea		      nop
     19  f2cb					      REPEND
    161  f2cb
    162  f2cb							; Second half of image
    163  f2cb		       b9 f4 f2 	      lda	TitleImage+3,y	; 5
    164  f2ce		       85 0d		      sta	PF0	; 4
    165  f2d0		       b9 f5 f2 	      lda	TitleImage+4,y	; 5
    166  f2d3		       85 0e		      sta	PF1	; 4
    167  f2d5		       b9 f6 f2 	      lda	TitleImage+5,y	; 5
    168  f2d8		       85 0f		      sta	PF2	; 4
    169  f2da
    170  f2da				   .title_kernel_image_index		; 4 cycles
    171  f2da
    172  f2da		       ca		      dex		; 2
    173  f2db		       d0 da		      bne	.title_kernel_image	; 2
    174  f2dd
    175  f2dd				   .title_kernel_image_index_next		; 6 cycles
    176  f2dd
    177  f2dd							; Restore scanline counter
    178  f2dd		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    179  f2df
    180  f2df		       98		      tya		; 2
    181  f2e0		       18		      clc		; 2
    182  f2e1		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    183  f2e3		       a8		      tay		; 2
    184  f2e4		       c0 90		      cpy	#KERNEL_IMAGE_SIZE*KERNEL_IMAGE_FULL_DATA
    185  f2e6		       d0 cf		      bne	.title_kernel_image	; 2
    186  f2e8
    187  f2e8				   .title_kernel_image_clean
    188  f2e8
    189  f2e8							; Clear out playfield
    190  f2e8		       a9 00		      lda	#0
    191  f2ea		       85 0d		      sta	PF0
    192  f2ec		       85 0e		      sta	PF1
    193  f2ee		       85 0f		      sta	PF2
    194  f2f0
    195  f2f0				   .title_kernel_image_return
    196  f2f0		       60		      rts
    197  f2f1
    198  f2f1				   TitleAssets
    199  f2f1
    200  f2f1							; Assets
------- FILE title_image.asm LEVEL 3 PASS 2
      0  f2f1					      include	"title_image.asm"
      1  f2f1				   TitleImage
      2  f2f1
      3  f2f1		       f0		      .BYTE.b	%11110000
      4  f2f2		       ff		      .BYTE.b	%11111111
      5  f2f3		       ff		      .BYTE.b	%11111111
      6  f2f4		       f0		      .BYTE.b	%11110000
      7  f2f5		       ff		      .BYTE.b	%11111111
      8  f2f6		       ff		      .BYTE.b	%11111111
      9  f2f7
     10  f2f7		       10		      .BYTE.b	%00010000
     11  f2f8		       00		      .BYTE.b	%00000000
     12  f2f9		       00		      .BYTE.b	%00000000
     13  f2fa		       00		      .BYTE.b	%00000000
     14  f2fb		       00		      .BYTE.b	%00000000
     15  f2fc		       80		      .BYTE.b	%10000000
     16  f2fd
     17  f2fd		       10		      .BYTE.b	%00010000
     18  f2fe		       00		      .BYTE.b	%00000000
     19  f2ff		       00		      .BYTE.b	%00000000
     20  f300		       00		      .BYTE.b	%00000000
     21  f301		       00		      .BYTE.b	%00000000
     22  f302		       80		      .BYTE.b	%10000000
     23  f303
     24  f303		       10		      .BYTE.b	%00010000
     25  f304		       00		      .BYTE.b	%00000000
     26  f305		       00		      .BYTE.b	%00000000
     27  f306		       00		      .BYTE.b	%00000000
     28  f307		       00		      .BYTE.b	%00000000
     29  f308		       80		      .BYTE.b	%10000000
     30  f309
     31  f309		       10		      .BYTE.b	%00010000
     32  f30a		       00		      .BYTE.b	%00000000
     33  f30b		       00		      .BYTE.b	%00000000
     34  f30c		       00		      .BYTE.b	%00000000
     35  f30d		       00		      .BYTE.b	%00000000
     36  f30e		       80		      .BYTE.b	%10000000
     37  f30f
     38  f30f		       10		      .BYTE.b	%00010000
     39  f310		       77		      .BYTE.b	%01110111
     40  f311		       ee		      .BYTE.b	%11101110
     41  f312		       c0		      .BYTE.b	%11000000
     42  f313		       b8		      .BYTE.b	%10111000
     43  f314		       80		      .BYTE.b	%10000000
     44  f315
     45  f315		       10		      .BYTE.b	%00010000
     46  f316		       45		      .BYTE.b	%01000101
     47  f317		       24		      .BYTE.b	%00100100
     48  f318		       50		      .BYTE.b	%01010000
     49  f319		       24		      .BYTE.b	%00100100
     50  f31a		       80		      .BYTE.b	%10000000
     51  f31b
     52  f31b		       10		      .BYTE.b	%00010000
     53  f31c		       47		      .BYTE.b	%01000111
     54  f31d		       24		      .BYTE.b	%00100100
     55  f31e		       d0		      .BYTE.b	%11010000
     56  f31f		       24		      .BYTE.b	%00100100
     57  f320		       80		      .BYTE.b	%10000000
     58  f321
     59  f321		       10		      .BYTE.b	%00010000
     60  f322		       74		      .BYTE.b	%01110100
     61  f323		       24		      .BYTE.b	%00100100
     62  f324		       50		      .BYTE.b	%01010000
     63  f325		       38		      .BYTE.b	%00111000
     64  f326		       80		      .BYTE.b	%10000000
     65  f327
     66  f327		       10		      .BYTE.b	%00010000
     67  f328		       14		      .BYTE.b	%00010100
     68  f329		       24		      .BYTE.b	%00100100
     69  f32a		       50		      .BYTE.b	%01010000
     70  f32b		       24		      .BYTE.b	%00100100
     71  f32c		       80		      .BYTE.b	%10000000
     72  f32d
     73  f32d		       10		      .BYTE.b	%00010000
     74  f32e		       74		      .BYTE.b	%01110100
     75  f32f		       ee		      .BYTE.b	%11101110
     76  f330		       c0		      .BYTE.b	%11000000
     77  f331		       a4		      .BYTE.b	%10100100
     78  f332		       80		      .BYTE.b	%10000000
     79  f333
     80  f333		       10		      .BYTE.b	%00010000
     81  f334		       00		      .BYTE.b	%00000000
     82  f335		       00		      .BYTE.b	%00000000
     83  f336		       00		      .BYTE.b	%00000000
     84  f337		       00		      .BYTE.b	%00000000
     85  f338		       80		      .BYTE.b	%10000000
     86  f339
     87  f339		       10		      .BYTE.b	%00010000
     88  f33a		       00		      .BYTE.b	%00000000
     89  f33b		       00		      .BYTE.b	%00000000
     90  f33c		       00		      .BYTE.b	%00000000
     91  f33d		       00		      .BYTE.b	%00000000
     92  f33e		       80		      .BYTE.b	%10000000
     93  f33f
     94  f33f		       10		      .BYTE.b	%00010000
     95  f340		       01		      .BYTE.b	%00000001
     96  f341		       03		      .BYTE.b	%00000011
     97  f342		       20		      .BYTE.b	%00100000
     98  f343		       5d		      .BYTE.b	%01011101
     99  f344		       83		      .BYTE.b	%10000011
    100  f345
    101  f345		       10		      .BYTE.b	%00010000
    102  f346		       0a		      .BYTE.b	%00001010
    103  f347		       14		      .BYTE.b	%00010100
    104  f348		       20		      .BYTE.b	%00100000
    105  f349		       51		      .BYTE.b	%01010001
    106  f34a		       84		      .BYTE.b	%10000100
    107  f34b
    108  f34b		       10		      .BYTE.b	%00010000
    109  f34c		       15		      .BYTE.b	%00010101
    110  f34d		       2a		      .BYTE.b	%00101010
    111  f34e		       20		      .BYTE.b	%00100000
    112  f34f		       59		      .BYTE.b	%01011001
    113  f350		       83		      .BYTE.b	%10000011
    114  f351
    115  f351		       10		      .BYTE.b	%00010000
    116  f352		       24		      .BYTE.b	%00100100
    117  f353		       49		      .BYTE.b	%01001001
    118  f354		       20		      .BYTE.b	%00100000
    119  f355		       51		      .BYTE.b	%01010001
    120  f356		       84		      .BYTE.b	%10000100
    121  f357
    122  f357		       10		      .BYTE.b	%00010000
    123  f358		       22		      .BYTE.b	%00100010
    124  f359		       44		      .BYTE.b	%01000100
    125  f35a		       a0		      .BYTE.b	%10100000
    126  f35b		       51		      .BYTE.b	%01010001
    127  f35c		       84		      .BYTE.b	%10000100
    128  f35d
    129  f35d		       10		      .BYTE.b	%00010000
    130  f35e		       11		      .BYTE.b	%00010001
    131  f35f		       23		      .BYTE.b	%00100011
    132  f360		       40		      .BYTE.b	%01000000
    133  f361		       9d		      .BYTE.b	%10011101
    134  f362		       83		      .BYTE.b	%10000011
    135  f363
    136  f363		       10		      .BYTE.b	%00010000
    137  f364		       00		      .BYTE.b	%00000000
    138  f365		       00		      .BYTE.b	%00000000
    139  f366		       00		      .BYTE.b	%00000000
    140  f367		       00		      .BYTE.b	%00000000
    141  f368		       80		      .BYTE.b	%10000000
    142  f369
    143  f369		       10		      .BYTE.b	%00010000
    144  f36a		       00		      .BYTE.b	%00000000
    145  f36b		       00		      .BYTE.b	%00000000
    146  f36c		       00		      .BYTE.b	%00000000
    147  f36d		       00		      .BYTE.b	%00000000
    148  f36e		       80		      .BYTE.b	%10000000
    149  f36f
    150  f36f		       10		      .BYTE.b	%00010000
    151  f370		       00		      .BYTE.b	%00000000
    152  f371		       00		      .BYTE.b	%00000000
    153  f372		       00		      .BYTE.b	%00000000
    154  f373		       00		      .BYTE.b	%00000000
    155  f374		       80		      .BYTE.b	%10000000
    156  f375
    157  f375		       10		      .BYTE.b	%00010000
    158  f376		       00		      .BYTE.b	%00000000
    159  f377		       00		      .BYTE.b	%00000000
    160  f378		       00		      .BYTE.b	%00000000
    161  f379		       00		      .BYTE.b	%00000000
    162  f37a		       80		      .BYTE.b	%10000000
    163  f37b
    164  f37b		       f0		      .BYTE.b	%11110000
    165  f37c		       ff		      .BYTE.b	%11111111
    166  f37d		       ff		      .BYTE.b	%11111111
    167  f37e		       f0		      .BYTE.b	%11110000
    168  f37f		       ff		      .BYTE.b	%11111111
    169  f380		       ff		      .BYTE.b	%11111111
------- FILE title.asm
    202  f381
    203  f381				   TitleAudio0
    204  f381
    205  f381		       0f		      .BYTE.b	#15	; B
    206  f382		       13		      .BYTE.b	#19	; G
    207  f383		       17		      .BYTE.b	#23	; E
    208  f384		       13		      .BYTE.b	#19	; G
    209  f385		       0e		      .BYTE.b	#14	; C
    210  f386		       13		      .BYTE.b	#19
    211  f387		       17		      .BYTE.b	#23
    212  f388		       13		      .BYTE.b	#19
    213  f389		       0c		      .BYTE.b	#12	; D
    214  f38a		       13		      .BYTE.b	#19
    215  f38b		       17		      .BYTE.b	#23
    216  f38c		       13		      .BYTE.b	#19
    217  f38d		       0e		      .BYTE.b	#14	; C
    218  f38e		       13		      .BYTE.b	#19
    219  f38f		       17		      .BYTE.b	#23
    220  f390		       13		      .BYTE.b	#19
    221  f391
    222  f391				   TitleTone1
    223  f391
    224  f391		       0f		      .BYTE.b	#15	; Electronic Rumble
    225  f392		       ff		      .BYTE.b	#$FF
    226  f393		       01		      .BYTE.b	#1	; Low Pure Tone
    227  f394		       01		      .BYTE.b	#1
    228  f395		       08		      .BYTE.b	#8	; White Noise
    229  f396		       01		      .BYTE.b	#1
    230  f397		       01		      .BYTE.b	#1
    231  f398		       ff		      .BYTE.b	#$FF
    232  f399		       ff		      .BYTE.b	#$FF
    233  f39a		       0f		      .BYTE.b	#15
    234  f39b		       ff		      .BYTE.b	#$FF
    235  f39c		       ff		      .BYTE.b	#$FF
    236  f39d		       08		      .BYTE.b	#8
    237  f39e		       ff		      .BYTE.b	#$FF
    238  f39f		       01		      .BYTE.b	#1
    239  f3a0		       01		      .BYTE.b	#1
    240  f3a1
    241  f3a1				   TitleAudio1
    242  f3a1
    243  f3a1		       1d		      .BYTE.b	#29	; Kick
    244  f3a2		       ff		      .BYTE.b	#$FF
    245  f3a3		       1f		      .BYTE.b	#31	; C
    246  f3a4		       1f		      .BYTE.b	#31
    247  f3a5		       07		      .BYTE.b	#7	; Snare
    248  f3a6		       1f		      .BYTE.b	#31
    249  f3a7		       1f		      .BYTE.b	#31
    250  f3a8		       ff		      .BYTE.b	#$FF
    251  f3a9		       ff		      .BYTE.b	#$FF
    252  f3aa		       1d		      .BYTE.b	#29
    253  f3ab		       ff		      .BYTE.b	#$FF
    254  f3ac		       ff		      .BYTE.b	#$FF
    255  f3ad		       07		      .BYTE.b	#7
    256  f3ae		       ff		      .BYTE.b	#$FF
    257  f3af		       17		      .BYTE.b	#23	; F
    258  f3b0		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f3b1					      include	"game.asm"
      1  f3b1							;================
      2  f3b1							; Constants
      3  f3b1							;================
      4  f3b1
      5  f3b1		       00 00	   GAME_BG_COLOR =	#$00
      6  f3b1		       00 0c	   GAME_FG_COLOR =	#$0C
      7  f3b1
      8  f3b1		       00 56	   GAME_P0_COLOR =	#$56
      9  f3b1		       00 08	   GAME_P0_SIZE =	8
     10  f3b1		       00 08	   GAME_P0_BOUNDARY =	GAME_P0_SIZE
     11  f3b1
     12  f3b1		       00 0e	   GAME_M1_COLOR =	#$0E
     13  f3b1		       00 02	   GAME_M1_SIZE =	2
     14  f3b1
     15  f3b1				   GameInit
     16  f3b1
     17  f3b1							; Setup logic and kernel
      0  f3b1					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  f3b1				   .POINTER   SET	VBlankPtr
      2  f3b1				   .ADDRESS   SET	GameVerticalBlank
      3  f3b1
      4  f3b1		       a9 06		      LDA	#<.ADDRESS
      5  f3b3		       85 80		      STA	.POINTER
      6  f3b5		       a9 f4		      LDA	#>.ADDRESS
      7  f3b7		       85 81		      STA	.POINTER+1
      8  f3b9
      0  f3b9					      SET_POINTER	KernelPtr, GameKernel
      1  f3b9				   .POINTER   SET	KernelPtr
      2  f3b9				   .ADDRESS   SET	GameKernel
      3  f3b9
      4  f3b9		       a9 f9		      LDA	#<.ADDRESS
      5  f3bb		       85 82		      STA	.POINTER
      6  f3bd		       a9 f4		      LDA	#>.ADDRESS
      7  f3bf		       85 83		      STA	.POINTER+1
      8  f3c1
      0  f3c1					      SET_POINTER	OverScanPtr, GameOverScan
      1  f3c1				   .POINTER   SET	OverScanPtr
      2  f3c1				   .ADDRESS   SET	GameOverScan
      3  f3c1
      4  f3c1		       a9 0d		      LDA	#<.ADDRESS
      5  f3c3		       85 84		      STA	.POINTER
      6  f3c5		       a9 f4		      LDA	#>.ADDRESS
      7  f3c7		       85 85		      STA	.POINTER+1
      8  f3c9
     21  f3c9
     22  f3c9							; Load Colors
     23  f3c9		       a9 00		      lda	#GAME_BG_COLOR
     24  f3cb		       85 09		      sta	COLUBK
     25  f3cd		       a9 0c		      lda	#GAME_FG_COLOR
     26  f3cf		       85 08		      sta	COLUPF
     27  f3d1		       a9 56		      lda	#GAME_P0_COLOR
     28  f3d3		       85 06		      sta	COLUP0
     29  f3d5		       a9 0e		      lda	#GAME_M1_COLOR
     30  f3d7		       85 07		      sta	COLUP1
     31  f3d9
     32  f3d9							; Mute Audio
     33  f3d9		       a9 00		      lda	#0
     34  f3db		       85 15		      sta	AUDC0
     35  f3dd		       85 19		      sta	AUDV0
     36  f3df		       85 17		      sta	AUDF0
     37  f3e1		       85 16		      sta	AUDC1
     38  f3e3		       85 1a		      sta	AUDV1
     39  f3e5		       85 18		      sta	AUDF1
     40  f3e7
     41  f3e7							; Initial Player Control
     42  f3e7		       a9 32		      lda	#50
     43  f3e9		       85 8c		      sta	PlayerPosition
     44  f3eb		       85 8d		      sta	PlayerPosition+1
     45  f3ed
     46  f3ed							; Setup Player Sprite
      0  f3ed					      SET_POINTER	PlayerPtr, GamePlayerSprite
      1  f3ed				   .POINTER   SET	PlayerPtr
      2  f3ed				   .ADDRESS   SET	GamePlayerSprite
      3  f3ed
      4  f3ed		       a9 b6		      LDA	#<.ADDRESS
      5  f3ef		       85 8a		      STA	.POINTER
      6  f3f1		       a9 f5		      LDA	#>.ADDRESS
      7  f3f3		       85 8b		      STA	.POINTER+1
      8  f3f5
     48  f3f5
     49  f3f5							; Initial Missile Control
     50  f3f5		       a9 01		      lda	#1
     51  f3f7		       85 8e		      sta	MissileEnabled
     52  f3f9
     53  f3f9		       a9 32		      lda	#50
     54  f3fb		       85 8f		      sta	MissilePosition
     55  f3fd		       85 90		      sta	MissilePosition+1
     56  f3ff
     57  f3ff		       a9 01		      lda	#1
     58  f401		       85 91		      sta	MissileVelocity
     59  f403		       85 92		      sta	MissileVelocity+1
     60  f405
     61  f405		       60		      rts
     62  f406
     63  f406				   GameVerticalBlank
     64  f406		       20 0e f4 	      jsr	GameControl
     65  f409		       20 d4 f4 	      jsr	GameObjects
     66  f40c		       60		      rts
     67  f40d
     68  f40d				   GameOverScan
     69  f40d		       60		      rts
     70  f40e
     71  f40e				   GameControl
     72  f40e		       a6 8c		      ldx	PlayerPosition
     73  f410		       a4 8d		      ldy	PlayerPosition+1
     74  f412		       ad 80 02 	      lda	SWCHA
     75  f415
     76  f415				   .game_control_check_right
     77  f415		       30 01		      bmi	.game_control_check_left
     78  f417		       e8		      inx
     79  f418
     80  f418				   .game_control_check_left
     81  f418		       2a		      rol
     82  f419		       30 01		      bmi	.game_control_check_down
     83  f41b		       ca		      dex
     84  f41c
     85  f41c				   .game_control_check_down
     86  f41c		       2a		      rol
     87  f41d		       30 01		      bmi	.game_control_check_up
     88  f41f		       88		      dey
     89  f420
     90  f420				   .game_control_check_up
     91  f420		       2a		      rol
     92  f421		       30 01		      bmi	.game_control_sprite
     93  f423		       c8		      iny
     94  f424
     95  f424				   .game_control_sprite
     96  f424		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     97  f426
     98  f426				   .game_control_sprite_x
     99  f426		       e4 8c		      cpx	PlayerPosition
    100  f428		       90 04		      bcc	.game_control_sprite_left
    101  f42a		       f0 09		      beq	.game_control_sprite_y
    102  f42c		       b0 05		      bcs	.game_control_sprite_right
    103  f42e
    104  f42e				   .game_control_sprite_left
    105  f42e		       09 80		      ora	#%10000000
    106  f430		       4c 35 f4 	      jmp	.game_control_sprite_y
    107  f433
    108  f433				   .game_control_sprite_right
    109  f433		       09 40		      ora	#%01000000
    110  f435
    111  f435				   .game_control_sprite_y
    112  f435		       c4 8d		      cpy	PlayerPosition+1
    113  f437		       90 04		      bcc	.game_control_sprite_down
    114  f439		       f0 09		      beq	.game_control_boundary
    115  f43b		       b0 05		      bcs	.game_control_sprite_up
    116  f43d
    117  f43d				   .game_control_sprite_down
    118  f43d		       09 10		      ora	#%00010000
    119  f43f		       4c 44 f4 	      jmp	.game_control_boundary
    120  f442
    121  f442				   .game_control_sprite_up
    122  f442		       09 20		      ora	#%00100000
    123  f444
    124  f444				   .game_control_boundary
    125  f444							; Check Playfield Boundaries
    126  f444
    127  f444				   .game_control_boundary_left
    128  f444		       e0 08		      cpx	#GAME_P0_BOUNDARY
    129  f446		       b0 02		      bcs	.game_control_boundary_right
    130  f448		       a2 08		      ldx	#GAME_P0_BOUNDARY
    131  f44a
    132  f44a				   .game_control_boundary_right
    133  f44a							;cpx #KERNEL_WIDTH-GAME_P0_BOUNDARY-GAME_P0_SIZE
    134  f44a							;bcc .game_control_boundary_top
    135  f44a							;ldx #KERNEL_WIDTH-GAME_P0_BOUNDARY-GAME_P0_SIZE
    136  f44a
    137  f44a				   .game_control_boundary_top
    138  f44a		       c0 08		      cpy	#GAME_P0_BOUNDARY
    139  f44c		       b0 02		      bcs	.game_control_boundary_bottom
    140  f44e		       a0 08		      ldy	#GAME_P0_BOUNDARY
    141  f450
    142  f450				   .game_control_boundary_bottom
    143  f450		       c0 b0		      cpy	#KERNEL_SCANLINES-GAME_P0_BOUNDARY-GAME_P0_SIZE
    144  f452		       90 02		      bcc	.game_control_store
    145  f454		       a0 b0		      ldy	#KERNEL_SCANLINES-GAME_P0_BOUNDARY-GAME_P0_SIZE
    146  f456
    147  f456				   .game_control_store
    148  f456							; Store new position
    149  f456		       86 8c		      stx	PlayerPosition
    150  f458		       84 8d		      sty	PlayerPosition+1
    151  f45a
    152  f45a				   .game_control_sprite_assign
    153  f45a							; Skip if no change
    154  f45a		       c9 00		      cmp	#%00000000
    155  f45c		       f0 75		      beq	.game_control_return
    156  f45e
    157  f45e				   .game_control_sprite_assign_left
    158  f45e		       c9 80		      cmp	#%10000000
    159  f460		       d0 0b		      bne	.game_control_sprite_assign_right
      0  f462					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*6
      1  f462				   .POINTER   SET	PlayerPtr
      2  f462				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*6
      3  f462
      4  f462		       a9 e6		      LDA	#<.ADDRESS
      5  f464		       85 8a		      STA	.POINTER
      6  f466		       a9 f5		      LDA	#>.ADDRESS
      7  f468		       85 8b		      STA	.POINTER+1
      8  f46a
    161  f46a		       4c d3 f4 	      jmp	.game_control_return
    162  f46d
    163  f46d				   .game_control_sprite_assign_right
    164  f46d		       c9 40		      cmp	#%01000000
    165  f46f		       d0 0b		      bne	.game_control_sprite_assign_top
      0  f471					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*2
      1  f471				   .POINTER   SET	PlayerPtr
      2  f471				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*2
      3  f471
      4  f471		       a9 c6		      LDA	#<.ADDRESS
      5  f473		       85 8a		      STA	.POINTER
      6  f475		       a9 f5		      LDA	#>.ADDRESS
      7  f477		       85 8b		      STA	.POINTER+1
      8  f479
    167  f479		       4c d3 f4 	      jmp	.game_control_return
    168  f47c
    169  f47c				   .game_control_sprite_assign_top
    170  f47c		       c9 20		      cmp	#%00100000
    171  f47e		       d0 0b		      bne	.game_control_sprite_assign_bottom
      0  f480					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*0
      1  f480				   .POINTER   SET	PlayerPtr
      2  f480				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*0
      3  f480
      4  f480		       a9 b6		      LDA	#<.ADDRESS
      5  f482		       85 8a		      STA	.POINTER
      6  f484		       a9 f5		      LDA	#>.ADDRESS
      7  f486		       85 8b		      STA	.POINTER+1
      8  f488
    173  f488		       4c d3 f4 	      jmp	.game_control_return
    174  f48b
    175  f48b				   .game_control_sprite_assign_bottom
    176  f48b		       c9 10		      cmp	#%00010000
    177  f48d		       d0 0b		      bne	.game_control_sprite_assign_top_right
      0  f48f					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*4
      1  f48f				   .POINTER   SET	PlayerPtr
      2  f48f				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*4
      3  f48f
      4  f48f		       a9 d6		      LDA	#<.ADDRESS
      5  f491		       85 8a		      STA	.POINTER
      6  f493		       a9 f5		      LDA	#>.ADDRESS
      7  f495		       85 8b		      STA	.POINTER+1
      8  f497
    179  f497		       4c d3 f4 	      jmp	.game_control_return
    180  f49a
    181  f49a				   .game_control_sprite_assign_top_right
    182  f49a		       c9 60		      cmp	#%01100000
    183  f49c		       d0 0b		      bne	.game_control_sprite_assign_bottom_right
      0  f49e					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*1
      1  f49e				   .POINTER   SET	PlayerPtr
      2  f49e				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*1
      3  f49e
      4  f49e		       a9 be		      LDA	#<.ADDRESS
      5  f4a0		       85 8a		      STA	.POINTER
      6  f4a2		       a9 f5		      LDA	#>.ADDRESS
      7  f4a4		       85 8b		      STA	.POINTER+1
      8  f4a6
    185  f4a6		       4c d3 f4 	      jmp	.game_control_return
    186  f4a9
    187  f4a9				   .game_control_sprite_assign_bottom_right
    188  f4a9		       c9 50		      cmp	#%01010000
    189  f4ab		       d0 0b		      bne	.game_control_sprite_assign_bottom_left
      0  f4ad					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*3
      1  f4ad				   .POINTER   SET	PlayerPtr
      2  f4ad				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*3
      3  f4ad
      4  f4ad		       a9 ce		      LDA	#<.ADDRESS
      5  f4af		       85 8a		      STA	.POINTER
      6  f4b1		       a9 f5		      LDA	#>.ADDRESS
      7  f4b3		       85 8b		      STA	.POINTER+1
      8  f4b5
    191  f4b5		       4c d3 f4 	      jmp	.game_control_return
    192  f4b8
    193  f4b8				   .game_control_sprite_assign_bottom_left
    194  f4b8		       c9 90		      cmp	#%10010000
    195  f4ba		       d0 0b		      bne	.game_control_sprite_assign_top_left
      0  f4bc					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*5
      1  f4bc				   .POINTER   SET	PlayerPtr
      2  f4bc				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*5
      3  f4bc
      4  f4bc		       a9 de		      LDA	#<.ADDRESS
      5  f4be		       85 8a		      STA	.POINTER
      6  f4c0		       a9 f5		      LDA	#>.ADDRESS
      7  f4c2		       85 8b		      STA	.POINTER+1
      8  f4c4
    197  f4c4		       4c d3 f4 	      jmp	.game_control_return
    198  f4c7
    199  f4c7				   .game_control_sprite_assign_top_left
    200  f4c7		       c9 a0		      cmp	#%10100000
    201  f4c9		       d0 08		      bne	.game_control_return
      0  f4cb					      SET_POINTER	PlayerPtr, GamePlayerSprite+#GAME_P0_SIZE*7
      1  f4cb				   .POINTER   SET	PlayerPtr
      2  f4cb				   .ADDRESS   SET	GamePlayerSprite+#GAME_P0_SIZE*7
      3  f4cb
      4  f4cb		       a9 ee		      LDA	#<.ADDRESS
      5  f4cd		       85 8a		      STA	.POINTER
      6  f4cf		       a9 f5		      LDA	#>.ADDRESS
      7  f4d1		       85 8b		      STA	.POINTER+1
      8  f4d3
    203  f4d3
    204  f4d3				   .game_control_return
    205  f4d3		       60		      rts
    206  f4d4
    207  f4d4				   GameObjects
    208  f4d4
    209  f4d4				   .game_objects_player
    210  f4d4
    211  f4d4							; Set Player Position
    212  f4d4		       a2 00		      ldx	#0	; Object (player0)
    213  f4d6		       a5 8c		      lda	PlayerPosition	; X Position
    214  f4d8		       20 00 f0 	      jsr	PosObject
    215  f4db
    216  f4db							; Set final x position
    217  f4db		       85 02		      sta	WSYNC
    218  f4dd		       85 2a		      sta	HMOVE
    219  f4df
    220  f4df				   .game_objects_missile
    221  f4df
    222  f4df							; Apply Velocity
    223  f4df		       18		      clc
    224  f4e0		       a5 8f		      lda	MissilePosition	; x
    225  f4e2		       65 91		      adc	MissileVelocity
    226  f4e4		       85 8f		      sta	MissilePosition
    227  f4e6
    228  f4e6		       18		      clc
    229  f4e7		       a5 90		      lda	MissilePosition+1	; y
    230  f4e9		       65 92		      adc	MissileVelocity+1
    231  f4eb		       85 90		      sta	MissilePosition+1
    232  f4ed
    233  f4ed							; Set Missile Position
    234  f4ed		       a2 01		      ldx	#1	; Object (missile1)
    235  f4ef		       a5 8f		      lda	MissilePosition	; X Position
    236  f4f1		       20 13 f0 	      jsr	PosMissile
    237  f4f4
    238  f4f4		       85 02		      sta	WSYNC
    239  f4f6		       85 2a		      sta	HMOVE
    240  f4f8
    241  f4f8				   .game_objects_return
    242  f4f8
    243  f4f8		       60		      rts
    244  f4f9
    245  f4f9				   GameKernel
    246  f4f9
    247  f4f9							; Playfield Control
    248  f4f9		       a9 01		      lda	#%00000001	; Mirrored
    249  f4fb		       85 0a		      sta	CTRLPF
    250  f4fd
    251  f4fd							; Set player 0 to be double size and missile 0 to be 2 clock size (4/5 bits)
    252  f4fd		       a5 04		      lda	NUSIZ0
    253  f4ff		       29 f8		      and	#%11111000
    254  f501		       09 05		      ora	#%00000101
    255  f503		       85 04		      sta	NUSIZ0
    256  f505
    257  f505							; Set missile 0 to be 2 clock size (4/5 bits)
    258  f505		       a5 05		      lda	NUSIZ1
    259  f507		       29 cf		      and	#%11001111
    260  f509		       09 15		      ora	#%00010101
    261  f50b		       85 05		      sta	NUSIZ1
    262  f50d
    263  f50d							; Turn on display
    264  f50d		       a9 00		      lda	#0
    265  f50f		       85 01		      sta	VBLANK
    266  f511
    267  f511							; Setup Image Index
    268  f511		       a9 00		      lda	#0
    269  f513		       85 89		      sta	ImageIndex
    270  f515
    271  f515							; Start Counters
    272  f515		       a2 c0		      ldx	#KERNEL_SCANLINES	; Scanline Counter
    273  f517							;    ldy #0 ; Image Counter
    274  f517
    275  f517				   .game_kernel
    276  f517
    277  f517				   .game_kernel_player
    278  f517
    279  f517		       8a		      txa
    280  f518		       e5 8d		      sbc	PlayerPosition+1
    281  f51a
    282  f51a							; Sync up to horizontal line
    283  f51a		       85 02		      sta	WSYNC
    284  f51c
    285  f51c		       c9 10		      cmp	#GAME_P0_SIZE*2
    286  f51e		       90 07		      bcc	.game_kernel_player_draw
    287  f520
    288  f520				   .game_kernel_player_blank
    289  f520
    290  f520							; Draw empty sprite
    291  f520		       a9 00		      lda	#0
    292  f522		       85 1b		      sta	GRP0
    293  f524		       4c 2f f5 	      jmp	.game_kernel_image
    294  f527
    295  f527				   .game_kernel_player_draw
    296  f527
    297  f527							; Load sprite line
    298  f527		       29 fe		      and	#%11111110
    299  f529		       4a		      lsr		; Divide by 2
    300  f52a		       a8		      tay
    301  f52b		       b1 8a		      lda	(PlayerPtr),y
    302  f52d		       85 1b		      sta	GRP0
    303  f52f
    304  f52f				   .game_kernel_image
    305  f52f
    306  f52f							; Check to see if new playfield needs to be loaded
    307  f52f		       8a		      txa
    308  f530		       29 07		      and	#%00000111
    309  f532		       d0 14		      bne	.game_kernel_missile
    310  f534
    311  f534				   .game_kernel_image_load
    312  f534
    313  f534		       a4 89		      ldy	ImageIndex
    314  f536
    315  f536							; Draw Image
    316  f536		       b9 6e f5 	      lda	GameImagePF0,y	; 3
    317  f539		       85 0d		      sta	PF0	; 1
    318  f53b		       b9 86 f5 	      lda	GameImagePF1,y	; 3
    319  f53e		       85 0e		      sta	PF1	; 1
    320  f540		       b9 9e f5 	      lda	GameImagePF2,y	; 3
    321  f543		       85 0f		      sta	PF2	; 1
    322  f545
    323  f545		       c8		      iny		; 2
    324  f546		       84 89		      sty	ImageIndex
    325  f548
    326  f548				   .game_kernel_missile
    327  f548
    328  f548							; Check if visible
    329  f548		       a5 8e		      lda	MissileEnabled
    330  f54a		       c9 01		      cmp	#1
    331  f54c		       d0 07		      bne	.game_kernel_missile_off
    332  f54e
    333  f54e							; Check y position
    334  f54e		       8a		      txa
    335  f54f		       e5 90		      sbc	MissilePosition+1
    336  f551		       c9 04		      cmp	#GAME_M1_SIZE*2
    337  f553		       90 05		      bcc	.game_kernel_missile_on
    338  f555
    339  f555				   .game_kernel_missile_off
    340  f555		       a9 00		      lda	#%00000000
    341  f557		       4c 5c f5 	      jmp	.game_kernel_missile_write
    342  f55a
    343  f55a				   .game_kernel_missile_on
    344  f55a		       a9 02		      lda	#%00000010
    345  f55c
    346  f55c				   .game_kernel_missile_write
    347  f55c		       85 1e		      sta	ENAM1
    348  f55e
    349  f55e				   .game_kernel_line
    350  f55e		       ca		      dex
    351  f55f		       d0 b6		      bne	.game_kernel
    352  f561
    353  f561				   .game_kernel_clean
    354  f561		       85 02		      sta	WSYNC
    355  f563
    356  f563							; Clear out playfield
    357  f563		       a9 00		      lda	#0
    358  f565		       85 0d		      sta	PF0
    359  f567		       85 0e		      sta	PF1
    360  f569		       85 0f		      sta	PF2
    361  f56b
    362  f56b							; Clear out Player sprite
    363  f56b		       85 1b		      sta	GRP0
    364  f56d
    365  f56d				   .game_kernel_return
    366  f56d		       60		      rts
    367  f56e
    368  f56e				   GameAssets
    369  f56e
    370  f56e							; Game Background
------- FILE game_image.asm LEVEL 3 PASS 2
      0  f56e					      include	"game_image.asm"
      1  f56e				   GameImagePF0
      2  f56e		       00		      .BYTE.b	%00000000
      3  f56f		       00		      .BYTE.b	%00000000
      4  f570		       00		      .BYTE.b	%00000000
      5  f571		       00		      .BYTE.b	%00000000
      6  f572		       00		      .BYTE.b	%00000000
      7  f573		       00		      .BYTE.b	%00000000
      8  f574		       30		      .BYTE.b	%00110000
      9  f575		       e0		      .BYTE.b	%11100000
     10  f576		       20		      .BYTE.b	%00100000
     11  f577		       40		      .BYTE.b	%01000000
     12  f578		       40		      .BYTE.b	%01000000
     13  f579		       80		      .BYTE.b	%10000000
     14  f57a		       80		      .BYTE.b	%10000000
     15  f57b		       40		      .BYTE.b	%01000000
     16  f57c		       40		      .BYTE.b	%01000000
     17  f57d		       20		      .BYTE.b	%00100000
     18  f57e		       e0		      .BYTE.b	%11100000
     19  f57f		       30		      .BYTE.b	%00110000
     20  f580		       00		      .BYTE.b	%00000000
     21  f581		       00		      .BYTE.b	%00000000
     22  f582		       00		      .BYTE.b	%00000000
     23  f583		       00		      .BYTE.b	%00000000
     24  f584		       00		      .BYTE.b	%00000000
     25  f585		       00		      .BYTE.b	%00000000
     26  f586
     27  f586				   GameImagePF1
     28  f586		       00		      .BYTE.b	%00000000
     29  f587		       00		      .BYTE.b	%00000000
     30  f588		       01		      .BYTE.b	%00000001
     31  f589		       01		      .BYTE.b	%00000001
     32  f58a		       02		      .BYTE.b	%00000010
     33  f58b		       0c		      .BYTE.b	%00001100
     34  f58c		       30		      .BYTE.b	%00110000
     35  f58d		       c0		      .BYTE.b	%11000000
     36  f58e		       38		      .BYTE.b	%00111000
     37  f58f		       07		      .BYTE.b	%00000111
     38  f590		       00		      .BYTE.b	%00000000
     39  f591		       00		      .BYTE.b	%00000000
     40  f592		       00		      .BYTE.b	%00000000
     41  f593		       00		      .BYTE.b	%00000000
     42  f594		       07		      .BYTE.b	%00000111
     43  f595		       38		      .BYTE.b	%00111000
     44  f596		       c0		      .BYTE.b	%11000000
     45  f597		       30		      .BYTE.b	%00110000
     46  f598		       0c		      .BYTE.b	%00001100
     47  f599		       02		      .BYTE.b	%00000010
     48  f59a		       01		      .BYTE.b	%00000001
     49  f59b		       01		      .BYTE.b	%00000001
     50  f59c		       00		      .BYTE.b	%00000000
     51  f59d		       00		      .BYTE.b	%00000000
     52  f59e
     53  f59e				   GameImagePF2
     54  f59e		       03		      .BYTE.b	%00000011
     55  f59f		       3f		      .BYTE.b	%00111111
     56  f5a0		       c2		      .BYTE.b	%11000010
     57  f5a1		       04		      .BYTE.b	%00000100
     58  f5a2		       08		      .BYTE.b	%00001000
     59  f5a3		       08		      .BYTE.b	%00001000
     60  f5a4		       10		      .BYTE.b	%00010000
     61  f5a5		       20		      .BYTE.b	%00100000
     62  f5a6		       20		      .BYTE.b	%00100000
     63  f5a7		       41		      .BYTE.b	%01000001
     64  f5a8		       8e		      .BYTE.b	%10001110
     65  f5a9		       f0		      .BYTE.b	%11110000
     66  f5aa		       f0		      .BYTE.b	%11110000
     67  f5ab		       8e		      .BYTE.b	%10001110
     68  f5ac		       41		      .BYTE.b	%01000001
     69  f5ad		       20		      .BYTE.b	%00100000
     70  f5ae		       20		      .BYTE.b	%00100000
     71  f5af		       10		      .BYTE.b	%00010000
     72  f5b0		       08		      .BYTE.b	%00001000
     73  f5b1		       08		      .BYTE.b	%00001000
     74  f5b2		       04		      .BYTE.b	%00000100
     75  f5b3		       c2		      .BYTE.b	%11000010
     76  f5b4		       3f		      .BYTE.b	%00111111
     77  f5b5		       03		      .BYTE.b	%00000011
------- FILE game.asm
    372  f5b6
    373  f5b6							; Game Player Sprites
------- FILE game_player.asm LEVEL 3 PASS 2
      0  f5b6					      include	"game_player.asm"
      1  f5b6				   GamePlayerSprite
      2  f5b6
      3  f5b6		       99		      .BYTE.b	%10011001
      4  f5b7		       bd		      .BYTE.b	%10111101
      5  f5b8		       7e		      .BYTE.b	%01111110
      6  f5b9		       3c		      .BYTE.b	%00111100
      7  f5ba		       7e		      .BYTE.b	%01111110
      8  f5bb		       99		      .BYTE.b	%10011001
      9  f5bc		       bd		      .BYTE.b	%10111101
     10  f5bd		       99		      .BYTE.b	%10011001
     11  f5be
     12  f5be		       30		      .BYTE.b	%00110000
     13  f5bf		       10		      .BYTE.b	%00010000
     14  f5c0		       b8		      .BYTE.b	%10111000
     15  f5c1		       f6		      .BYTE.b	%11110110
     16  f5c2		       2d		      .BYTE.b	%00101101
     17  f5c3		       1c		      .BYTE.b	%00011100
     18  f5c4		       13		      .BYTE.b	%00010011
     19  f5c5		       0b		      .BYTE.b	%00001011
     20  f5c6
     21  f5c6		       c7		      .BYTE.b	%11000111
     22  f5c7		       28		      .BYTE.b	%00101000
     23  f5c8		       7a		      .BYTE.b	%01111010
     24  f5c9		       ff		      .BYTE.b	%11111111
     25  f5ca		       ff		      .BYTE.b	%11111111
     26  f5cb		       7a		      .BYTE.b	%01111010
     27  f5cc		       28		      .BYTE.b	%00101000
     28  f5cd		       c7		      .BYTE.b	%11000111
     29  f5ce
     30  f5ce		       0b		      .BYTE.b	%00001011
     31  f5cf		       13		      .BYTE.b	%00010011
     32  f5d0		       1c		      .BYTE.b	%00011100
     33  f5d1		       2d		      .BYTE.b	%00101101
     34  f5d2		       f6		      .BYTE.b	%11110110
     35  f5d3		       b8		      .BYTE.b	%10111000
     36  f5d4		       10		      .BYTE.b	%00010000
     37  f5d5		       30		      .BYTE.b	%00110000
     38  f5d6
     39  f5d6		       99		      .BYTE.b	%10011001
     40  f5d7		       bd		      .BYTE.b	%10111101
     41  f5d8		       99		      .BYTE.b	%10011001
     42  f5d9		       7e		      .BYTE.b	%01111110
     43  f5da		       3c		      .BYTE.b	%00111100
     44  f5db		       7e		      .BYTE.b	%01111110
     45  f5dc		       bd		      .BYTE.b	%10111101
     46  f5dd		       99		      .BYTE.b	%10011001
     47  f5de
     48  f5de		       d0		      .BYTE.b	%11010000
     49  f5df		       c8		      .BYTE.b	%11001000
     50  f5e0		       38		      .BYTE.b	%00111000
     51  f5e1		       b4		      .BYTE.b	%10110100
     52  f5e2		       6f		      .BYTE.b	%01101111
     53  f5e3		       1d		      .BYTE.b	%00011101
     54  f5e4		       08		      .BYTE.b	%00001000
     55  f5e5		       0c		      .BYTE.b	%00001100
     56  f5e6
     57  f5e6		       e3		      .BYTE.b	%11100011
     58  f5e7		       14		      .BYTE.b	%00010100
     59  f5e8		       5e		      .BYTE.b	%01011110
     60  f5e9		       ff		      .BYTE.b	%11111111
     61  f5ea		       ff		      .BYTE.b	%11111111
     62  f5eb		       5e		      .BYTE.b	%01011110
     63  f5ec		       14		      .BYTE.b	%00010100
     64  f5ed		       e3		      .BYTE.b	%11100011
     65  f5ee
     66  f5ee		       0c		      .BYTE.b	%00001100
     67  f5ef		       08		      .BYTE.b	%00001000
     68  f5f0		       1d		      .BYTE.b	%00011101
     69  f5f1		       6f		      .BYTE.b	%01101111
     70  f5f2		       b4		      .BYTE.b	%10110100
     71  f5f3		       38		      .BYTE.b	%00111000
     72  f5f4		       c8		      .BYTE.b	%11001000
     73  f5f5		       d0		      .BYTE.b	%11010000
------- FILE game.asm
------- FILE kernel.asm
    262  f5f6
    263  f5f6							;================
    264  f5f6							; End of cart
    265  f5f6							;================
    266  f5f6
    267  f7fa					      ORG	$F7FA	; 2k = $F7FA, 4k = $FFFA
    268  f7fa
    269  f7fa				   InterruptVectors
    270  f7fa
    271  f7fa		       26 f0		      .word.w	InitSystem	; NMI
    272  f7fc		       26 f0		      .word.w	InitSystem	; RESET
    273  f7fe		       26 f0		      .word.w	InitSystem	; IRQ
    274  f800
    275  f800					      END
