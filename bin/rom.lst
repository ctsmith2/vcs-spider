------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00b0 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; Global
     53 U0080
     54 U0080		       00 00	   Temp       ds	2
     55 U0082		       00	   Rand8      ds	1
     56 U0083		       00	   Rand16     ds	1
     57 U0084
     58 U0084		       00 00	   VBlankPtr  ds	2
     59 U0086		       00 00	   KernelPtr  ds	2
     60 U0088		       00 00	   OverScanPtr ds	2
     61 U008a
     62 U008a		       00	   Frame      ds	1
     63 U008b		       00	   FrameTimer ds	1
     64 U008c
     65 U008c		       00	   AudioStep  ds	1
     66 U008d
     67 U008d							; Score
     68 U008d
     69 U008d		       00 00	   ScoreValue ds	2
     70 U008f		       00 00	   ScoreDigitOnes ds	2
     71 U0091		       00 00	   ScoreDigitTens ds	2
     72 U0093		       00 00	   ScoreGfx   ds	2
     73 U0095
     74 U0095							; Web
     75 U0095
     76 U0095		       00	   WebIndex   ds	1
     77 U0096
     78 U0096							; Spider
     79 U0096
     80 U0096		       00 00	   SpiderPtr  ds	2
     81 U0098		       00 00	   SpiderPos  ds	2
     82 U009a		       00	   SpiderCtrl ds	1
     83 U009b
     84 U009b		       00	   SpiderIndex ds	1
     85 U009c		       00	   SpiderDrawPos ds	1
     86 U009d
     87 U009d							; Line
     88 U009d
     89 U009d		       00	   LineEnabled ds	1
     90 U009e		       00 00	   LinePosition ds	2
     91 U00a0		       00 00	   LineVelocity ds	2
     92 U00a2		       00 00	   LineStartPos ds	2
     93 U00a4
     94 U00a4							; Bug
     95 U00a4
     96 U00a4		       00 00	   BugEnabled ds	2
     97 U00a6		       00 00	   BugPosX    ds	2
     98 U00a8		       00 00	   BugPosY    ds	2
     99 U00aa		       00 00	   BugColor   ds	2
    100 U00ac
    101 U00ac		       00 00	   BugDrawPosBottom ds	2
    102 U00ae		       00 00	   BugDrawPosTop ds	2
    103 U00b0
    104  10000 ????				       SEG
    105  f000					      org	$F000	; Start of cart area
    106  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 82		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 83		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 82		      sta	Rand8
     49  f01e		       45 83		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    108  f021
    109  f021				   InitSystem
    110  f021
    111  f021				   .init_clean
    112  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    114  f02c
    115  f02c				   .init_tia
    116  f02c							; Define default TIA register values
    117  f02c
    118  f02c							; Set background color
    119  f02c		       a9 00		      lda	#$00	; Black
    120  f02e		       85 09		      sta	COLUBK
    121  f030
    122  f030							; Set the playfield and player color
    123  f030		       a9 0e		      lda	#$0E	; White
    124  f032		       85 08		      sta	COLUPF
    125  f034		       85 06		      sta	COLUP0
    126  f036		       85 07		      sta	COLUP1
    127  f038
    128  f038							; Playfield Control
    129  f038		       a9 01		      lda	#%00000001	; 1 for mirroring
    130  f03a		       85 0a		      sta	CTRLPF
    131  f03c
    132  f03c							; Disable Game Elements
    133  f03c		       a9 00		      lda	#$00
    134  f03e		       85 1f		      sta	ENABL	; Turn off ball
    135  f040		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    136  f042		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    137  f044		       85 1b		      sta	GRP0	; Turn off player 1
    138  f046		       85 1c		      sta	GRP1	; Turn off player 2
    139  f048
    140  f048							; Empty playfield
    141  f048		       a9 00		      lda	#%00000000
    142  f04a		       85 0d		      sta	PF0
    143  f04c		       85 0e		      sta	PF1
    144  f04e		       85 0f		      sta	PF2
    145  f050
    146  f050				   .init_seed
    147  f050							; Seed the random number generator
    148  f050		       ad 84 02 	      lda	INTIM	; Unknown value
    149  f053		       85 82		      sta	Rand8	; Use as seed
    150  f055		       49 ff		      eor	#$FF	; Flip bits
    151  f057		       85 83		      sta	Rand16	; Just in case INTIM was 0
    152  f059
    153  f059				   .init_game
    154  f059
    155  f059		       20 b3 f0 	      jsr	LogoInit
    156  f05c							;jsr GameInit
    157  f05c
    158  f05c							;=======================================
    159  f05c							; Game Kernel
    160  f05c							;=======================================
    161  f05c
    162  f05c				   Main
    163  f05c
    164  f05c		       20 6b f0 	      jsr	VerticalSync
    165  f05f		       20 82 f0 	      jsr	VerticalBlank
    166  f062		       20 95 f0 	      jsr	Kernel
    167  f065		       20 9c f0 	      jsr	OverScan
    168  f068		       4c 5c f0 	      jmp	Main
    169  f06b
    170  f06b				   VerticalSync
    171  f06b
    172  f06b		       a9 00		      lda	#0
    173  f06d		       85 01		      sta	VBLANK
    174  f06f
    175  f06f							; Turn on Vertical Sync signal and setup timer
    176  f06f		       a9 02		      lda	#2
    177  f071		       85 00		      sta	VSYNC
    178  f073
    179  f073							; Increment frame count and reduce frame counter
    180  f073		       e6 8a		      inc	Frame
    181  f075		       c6 8b		      dec	FrameTimer
    182  f077
    183  f077							; VSYNCH signal scanlines
    184  f077					      REPEAT	#KERNEL_VSYNC
    185  f077		       85 02		      sta	WSYNC
    184  f077					      REPEND
    185  f079		       85 02		      sta	WSYNC
    184  f079					      REPEND
    185  f07b		       85 02		      sta	WSYNC
    186  f07d					      REPEND
    187  f07d
    188  f07d							; Turn off Vertical Sync signal
    189  f07d		       a9 00		      lda	#0
    190  f07f		       85 00		      sta	VSYNC
    191  f081
    192  f081				   .vsync_return
    193  f081		       60		      rts
    194  f082
    195  f082				   VerticalBlank
    196  f082							; Setup Timer
    197  f082		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    198  f084		       8d 96 02 	      sta	TIM64T
    199  f087
    200  f087				   .vblank_logic
    201  f087							; Perform Game Logic
    202  f087							;jsr (VBlankPtr)
    203  f087		       20 92 f0 	      jsr	.vblank_logic_call_ptr
    204  f08a
    205  f08a				   .vblank_loop
    206  f08a							; WSYNC until Timer is complete
    207  f08a		       85 02		      sta	WSYNC
    208  f08c		       ad 84 02 	      lda	INTIM
    209  f08f		       d0 f9		      bne	.vblank_loop
    210  f091
    211  f091				   .vblank_return
    212  f091		       60		      rts
    213  f092
    214  f092				   .vblank_logic_call_ptr
    215  f092		       6c 84 00 	      jmp	(VBlankPtr)
    216  f095
    217  f095				   Kernel
    218  f095
    219  f095							; Perform Selected Kernel
    220  f095							;jsr (KernelPtr)
    221  f095		       20 99 f0 	      jsr	.kernel_call_ptr
    222  f098		       60		      rts
    223  f099
    224  f099				   .kernel_call_ptr
    225  f099		       6c 86 00 	      jmp	(KernelPtr)
    226  f09c
    227  f09c				   OverScan
    228  f09c
    229  f09c							; End of screen, enter blanking
    230  f09c		       a9 42		      lda	#%01000010
    231  f09e		       85 01		      sta	VBLANK
    232  f0a0
    233  f0a0							; Setup Timer
    234  f0a0		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    235  f0a2		       8d 96 02 	      sta	TIM64T
    236  f0a5
    237  f0a5				   .overscan_logic
    238  f0a5							; Perform OverScan Logic
    239  f0a5							;jsr (OverScanPtr)
    240  f0a5		       20 b0 f0 	      jsr	.overscan_logic_call_ptr
    241  f0a8
    242  f0a8				   .overscan_loop
    243  f0a8							; WSYNC until Timer is complete
    244  f0a8		       85 02		      sta	WSYNC
    245  f0aa		       ad 84 02 	      lda	INTIM
    246  f0ad		       d0 f9		      bne	.overscan_loop
    247  f0af
    248  f0af				   .overscan_return
    249  f0af		       60		      rts
    250  f0b0
    251  f0b0				   .overscan_logic_call_ptr
    252  f0b0		       6c 88 00 	      jmp	(OverScanPtr)
    253  f0b3
    254  f0b3							;================
    255  f0b3							; State Code
    256  f0b3							;================
    257  f0b3
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0b3					      include	"logo.asm"
      1  f0b3							;================
      2  f0b3							; Constants
      3  f0b3							;================
      4  f0b3
      5  f0b3		       00 b4	   LOGO_FRAMES =	180
      6  f0b3
      7  f0b3		       00 a2	   LOGO_BG_COLOR =	#$A2
      8  f0b3		       00 5e	   LOGO_FG_COLOR =	#$5E
      9  f0b3
     10  f0b3		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0b3		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0b3		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0b3		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0b3		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0b3		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0b3
     17  f0b3				   LogoInit
     18  f0b3
     19  f0b3							; Setup logic and kernel
      0  f0b3					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0b3				   .POINTER   SET	VBlankPtr
      2  f0b3				   .ADDRESS   SET	LogoVerticalBlank
      3  f0b3
      4  f0b3		       a9 fa		      LDA	#<.ADDRESS
      5  f0b5		       85 84		      STA	.POINTER
      6  f0b7		       a9 f0		      LDA	#>.ADDRESS
      7  f0b9		       85 85		      STA	.POINTER+1
      8  f0bb
      0  f0bb					      SET_POINTER	KernelPtr, LogoKernel
      1  f0bb				   .POINTER   SET	KernelPtr
      2  f0bb				   .ADDRESS   SET	LogoKernel
      3  f0bb
      4  f0bb		       a9 3e		      LDA	#<.ADDRESS
      5  f0bd		       85 86		      STA	.POINTER
      6  f0bf		       a9 f1		      LDA	#>.ADDRESS
      7  f0c1		       85 87		      STA	.POINTER+1
      8  f0c3
      0  f0c3					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0c3				   .POINTER   SET	OverScanPtr
      2  f0c3				   .ADDRESS   SET	LogoOverScan
      3  f0c3
      4  f0c3		       a9 fb		      LDA	#<.ADDRESS
      5  f0c5		       85 88		      STA	.POINTER
      6  f0c7		       a9 f0		      LDA	#>.ADDRESS
      7  f0c9		       85 89		      STA	.POINTER+1
      8  f0cb
     23  f0cb
     24  f0cb							; Load Colors
     25  f0cb		       a9 a2		      lda	#LOGO_BG_COLOR
     26  f0cd		       85 09		      sta	COLUBK
     27  f0cf		       a9 5e		      lda	#LOGO_FG_COLOR
     28  f0d1		       85 08		      sta	COLUPF
     29  f0d3
     30  f0d3							; Load audio settings
     31  f0d3		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     32  f0d5		       85 15		      sta	AUDC0
     33  f0d7		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     34  f0d9		       85 19		      sta	AUDV0
     35  f0db		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     36  f0dd		       85 16		      sta	AUDC1
     37  f0df		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     38  f0e1		       85 1a		      sta	AUDV1
     39  f0e3		       a9 00		      lda	#0
     40  f0e5		       85 8c		      sta	AudioStep
     41  f0e7
     42  f0e7							; Play first note
     43  f0e7		       ad 16 f2 	      lda	LogoAudio0,AudioStep
     44  f0ea		       85 17		      sta	AUDF0
     45  f0ec		       ad 22 f2 	      lda	LogoAudio1,AudioStep
     46  f0ef		       85 18		      sta	AUDF1
     47  f0f1
     48  f0f1							; Setup frame counters
     49  f0f1		       a9 00		      lda	#0
     50  f0f3		       85 8a		      sta	Frame
     51  f0f5		       a9 b4		      lda	#LOGO_FRAMES
     52  f0f7		       85 8b		      sta	FrameTimer
     53  f0f9
     54  f0f9							; Setup Image Animation
     55  f0f9							;lda #KERNEL_IMAGE_SIZE
     56  f0f9							;sta ImageVisible
     57  f0f9
     58  f0f9		       60		      rts
     59  f0fa
     60  f0fa				   LogoVerticalBlank
     61  f0fa							;jsr LogoAnimation
     62  f0fa		       60		      rts
     63  f0fb
     64  f0fb				   LogoOverScan
     65  f0fb		       20 09 f1 	      jsr	LogoAudio
     66  f0fe		       20 34 f1 	      jsr	LogoState
     67  f101		       60		      rts
     68  f102
     69  f102				   LogoAnimation
     70  f102		       a5 8a		      lda	Frame
     71  f104		       29 03		      and	#%00000011	; Every 4 when bits are 00
     72  f106		       d0 00		      bne	.logo_animation_return
     73  f108
     74  f108							;ldx ImageVisible
     75  f108							;cpx #0
     76  f108							;beq .logo_animation_return
     77  f108
     78  f108							; Add another visible line
     79  f108							;dex
     80  f108							;stx ImageVisible
     81  f108
     82  f108				   .logo_animation_return
     83  f108		       60		      rts
     84  f109
     85  f109				   LogoAudio
     86  f109
     87  f109		       a5 8a		      lda	Frame
     88  f10b		       29 07		      and	#%00000111	; Every 8 when bits are 000
     89  f10d		       d0 24		      bne	.logo_audio_return
     90  f10f
     91  f10f				   .logo_audio_play
     92  f10f
     93  f10f							; Check if we're at the end of the melody
     94  f10f		       a4 8c		      ldy	AudioStep
     95  f111		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
     96  f113		       f0 10		      beq	.logo_audio_mute
     97  f115
     98  f115				   .logo_audio_play_note
     99  f115							; Increment audio position
    100  f115		       c8		      iny
    101  f116		       84 8c		      sty	AudioStep
    102  f118
    103  f118							; Logo note and play
    104  f118		       b9 16 f2 	      lda	LogoAudio0,y
    105  f11b		       85 17		      sta	AUDF0
    106  f11d		       b9 22 f2 	      lda	LogoAudio1,y
    107  f120		       85 18		      sta	AUDF1
    108  f122		       4c 33 f1 	      jmp	.logo_audio_mute_skip
    109  f125
    110  f125				   .logo_audio_mute
    111  f125
    112  f125							; Mute audio
    113  f125		       a9 00		      lda	#0
    114  f127		       85 15		      sta	AUDC0
    115  f129		       85 19		      sta	AUDV0
    116  f12b		       85 17		      sta	AUDF0
    117  f12d		       85 16		      sta	AUDC1
    118  f12f		       85 1a		      sta	AUDV1
    119  f131		       85 18		      sta	AUDF1
    120  f133
    121  f133				   .logo_audio_mute_skip
    122  f133				   .logo_audio_return
    123  f133		       60		      rts
    124  f134
    125  f134				   LogoState
    126  f134		       a5 8b		      lda	FrameTimer
    127  f136		       c9 00		      cmp	#0
    128  f138		       d0 03		      bne	.logo_state_return
    129  f13a
    130  f13a		       20 2e f2 	      jsr	TitleInit
    131  f13d
    132  f13d				   .logo_state_return
    133  f13d		       60		      rts
    134  f13e
    135  f13e				   LogoKernel
    136  f13e
    137  f13e							; Playfield Control
    138  f13e		       a9 00		      lda	#%00000000	; No mirroring
    139  f140		       85 0a		      sta	CTRLPF
    140  f142
    141  f142							; Start Counters
    142  f142		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    143  f144		       a0 00		      ldy	#0	; Image Counter
    144  f146
    145  f146							; Turn on display
    146  f146		       a9 00		      lda	#0
    147  f148		       85 01		      sta	VBLANK
    148  f14a
    149  f14a		       85 02		      sta	WSYNC
    150  f14c
    151  f14c				   .logo_kernel_image
    152  f14c
    153  f14c							; 76 machine cycles per scanline
    154  f14c		       85 02		      sta	WSYNC
    155  f14e
    156  f14e				   .logo_kernel_image_load		; 66 cycles
    157  f14e
    158  f14e							; First half of image
    159  f14e		       b9 86 f1 	      lda	LogoImage,y	; 5
    160  f151		       85 0d		      sta	PF0	; 4
    161  f153		       b9 87 f1 	      lda	LogoImage+1,y	; 5
    162  f156		       85 0e		      sta	PF1	; 4
    163  f158		       b9 88 f1 	      lda	LogoImage+2,y	; 5
    164  f15b		       85 0f		      sta	PF2	; 4
    165  f15d
      0  f15d					      sleep	6
      1  f15d				   .CYCLES    SET	6
      2  f15d
      3  f15d				  -	      IF	.CYCLES < 2
      4  f15d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f15d				  -	      ERR
      6  f15d					      ENDIF
      7  f15d
      8  f15d				  -	      IF	.CYCLES & 1
      9  f15d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f15d				  -	      nop	0
     11  f15d				  -	      ELSE
     12  f15d				  -	      bit	VSYNC
     13  f15d				  -	      ENDIF
     14  f15d				  -.CYCLES    SET	.CYCLES - 3
     15  f15d					      ENDIF
     16  f15d
     17  f15d					      REPEAT	.CYCLES / 2
     18  f15d		       ea		      nop
     17  f15d					      REPEND
     18  f15e		       ea		      nop
     17  f15e					      REPEND
     18  f15f		       ea		      nop
     19  f160					      REPEND
    167  f160
    168  f160							; Second half of image
    169  f160		       b9 89 f1 	      lda	LogoImage+3,y	; 5
    170  f163		       85 0d		      sta	PF0	; 4
    171  f165		       b9 8a f1 	      lda	LogoImage+4,y	; 5
    172  f168		       85 0e		      sta	PF1	; 4
    173  f16a		       b9 8b f1 	      lda	LogoImage+5,y	; 5
    174  f16d		       85 0f		      sta	PF2	; 4
    175  f16f
    176  f16f				   .logo_kernel_image_index		; 4 cycles
    177  f16f
    178  f16f		       ca		      dex		; 2
    179  f170		       d0 da		      bne	.logo_kernel_image	; 2
    180  f172
    181  f172				   .logo_kernel_image_index_next		; 6 cycles
    182  f172
    183  f172							; Restore scanline counter
    184  f172		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    185  f174
    186  f174		       98		      tya		; 2
    187  f175		       18		      clc		; 2
    188  f176		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    189  f178		       a8		      tay		; 2
    190  f179		       c0 90		      cpy	#KERNEL_IMAGE_SIZE*KERNEL_IMAGE_FULL_DATA
    191  f17b		       d0 cf		      bne	.logo_kernel_image	; 2
    192  f17d
    193  f17d				   .logo_kernel_image_clean
    194  f17d
    195  f17d							; Clear out playfield
    196  f17d		       a9 00		      lda	#0
    197  f17f		       85 0d		      sta	PF0
    198  f181		       85 0e		      sta	PF1
    199  f183		       85 0f		      sta	PF2
    200  f185
    201  f185				   .logo_kernel_image_return
    202  f185		       60		      rts
    203  f186
    204  f186				   LogoAssets
    205  f186
    206  f186							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f186					      include	"logo_image.asm"
      1  f186				   LogoImage
      2  f186
      3  f186		       00		      .BYTE.b	%00000000
      4  f187		       00		      .BYTE.b	%00000000
      5  f188		       00		      .BYTE.b	%00000000
      6  f189		       00		      .BYTE.b	%00000000
      7  f18a		       00		      .BYTE.b	%00000000
      8  f18b		       00		      .BYTE.b	%00000000
      9  f18c
     10  f18c		       00		      .BYTE.b	%00000000
     11  f18d		       00		      .BYTE.b	%00000000
     12  f18e		       00		      .BYTE.b	%00000000
     13  f18f		       00		      .BYTE.b	%00000000
     14  f190		       00		      .BYTE.b	%00000000
     15  f191		       00		      .BYTE.b	%00000000
     16  f192
     17  f192		       00		      .BYTE.b	%00000000
     18  f193		       00		      .BYTE.b	%00000000
     19  f194		       00		      .BYTE.b	%00000000
     20  f195		       00		      .BYTE.b	%00000000
     21  f196		       00		      .BYTE.b	%00000000
     22  f197		       00		      .BYTE.b	%00000000
     23  f198
     24  f198		       00		      .BYTE.b	%00000000
     25  f199		       00		      .BYTE.b	%00000000
     26  f19a		       00		      .BYTE.b	%00000000
     27  f19b		       00		      .BYTE.b	%00000000
     28  f19c		       00		      .BYTE.b	%00000000
     29  f19d		       00		      .BYTE.b	%00000000
     30  f19e
     31  f19e		       00		      .BYTE.b	%00000000
     32  f19f		       00		      .BYTE.b	%00000000
     33  f1a0		       00		      .BYTE.b	%00000000
     34  f1a1		       00		      .BYTE.b	%00000000
     35  f1a2		       00		      .BYTE.b	%00000000
     36  f1a3		       00		      .BYTE.b	%00000000
     37  f1a4
     38  f1a4		       00		      .BYTE.b	%00000000
     39  f1a5		       00		      .BYTE.b	%00000000
     40  f1a6		       00		      .BYTE.b	%00000000
     41  f1a7		       00		      .BYTE.b	%00000000
     42  f1a8		       00		      .BYTE.b	%00000000
     43  f1a9		       00		      .BYTE.b	%00000000
     44  f1aa
     45  f1aa		       00		      .BYTE.b	%00000000
     46  f1ab		       00		      .BYTE.b	%00000000
     47  f1ac		       00		      .BYTE.b	%00000000
     48  f1ad		       00		      .BYTE.b	%00000000
     49  f1ae		       00		      .BYTE.b	%00000000
     50  f1af		       00		      .BYTE.b	%00000000
     51  f1b0
     52  f1b0		       00		      .BYTE.b	%00000000
     53  f1b1		       00		      .BYTE.b	%00000000
     54  f1b2		       8c		      .BYTE.b	%10001100
     55  f1b3		       c0		      .BYTE.b	%11000000
     56  f1b4		       00		      .BYTE.b	%00000000
     57  f1b5		       00		      .BYTE.b	%00000000
     58  f1b6
     59  f1b6		       00		      .BYTE.b	%00000000
     60  f1b7		       00		      .BYTE.b	%00000000
     61  f1b8		       54		      .BYTE.b	%01010100
     62  f1b9		       50		      .BYTE.b	%01010000
     63  f1ba		       80		      .BYTE.b	%10000000
     64  f1bb		       00		      .BYTE.b	%00000000
     65  f1bc
     66  f1bc		       00		      .BYTE.b	%00000000
     67  f1bd		       00		      .BYTE.b	%00000000
     68  f1be		       54		      .BYTE.b	%01010100
     69  f1bf		       40		      .BYTE.b	%01000000
     70  f1c0		       80		      .BYTE.b	%10000000
     71  f1c1		       00		      .BYTE.b	%00000000
     72  f1c2
     73  f1c2		       00		      .BYTE.b	%00000000
     74  f1c3		       00		      .BYTE.b	%00000000
     75  f1c4		       54		      .BYTE.b	%01010100
     76  f1c5		       50		      .BYTE.b	%01010000
     77  f1c6		       80		      .BYTE.b	%10000000
     78  f1c7		       00		      .BYTE.b	%00000000
     79  f1c8
     80  f1c8		       00		      .BYTE.b	%00000000
     81  f1c9		       00		      .BYTE.b	%00000000
     82  f1ca		       8c		      .BYTE.b	%10001100
     83  f1cb		       c0		      .BYTE.b	%11000000
     84  f1cc		       00		      .BYTE.b	%00000000
     85  f1cd		       00		      .BYTE.b	%00000000
     86  f1ce
     87  f1ce		       00		      .BYTE.b	%00000000
     88  f1cf		       00		      .BYTE.b	%00000000
     89  f1d0		       00		      .BYTE.b	%00000000
     90  f1d1		       00		      .BYTE.b	%00000000
     91  f1d2		       00		      .BYTE.b	%00000000
     92  f1d3		       00		      .BYTE.b	%00000000
     93  f1d4
     94  f1d4		       00		      .BYTE.b	%00000000
     95  f1d5		       00		      .BYTE.b	%00000000
     96  f1d6		       10		      .BYTE.b	%00010000
     97  f1d7		       10		      .BYTE.b	%00010000
     98  f1d8		       80		      .BYTE.b	%10000000
     99  f1d9		       00		      .BYTE.b	%00000000
    100  f1da
    101  f1da		       00		      .BYTE.b	%00000000
    102  f1db		       00		      .BYTE.b	%00000000
    103  f1dc		       a8		      .BYTE.b	%10101000
    104  f1dd		       a0		      .BYTE.b	%10100000
    105  f1de		       00		      .BYTE.b	%00000000
    106  f1df		       00		      .BYTE.b	%00000000
    107  f1e0
    108  f1e0		       00		      .BYTE.b	%00000000
    109  f1e1		       00		      .BYTE.b	%00000000
    110  f1e2		       44		      .BYTE.b	%01000100
    111  f1e3		       40		      .BYTE.b	%01000000
    112  f1e4		       00		      .BYTE.b	%00000000
    113  f1e5		       00		      .BYTE.b	%00000000
    114  f1e6
    115  f1e6		       00		      .BYTE.b	%00000000
    116  f1e7		       00		      .BYTE.b	%00000000
    117  f1e8		       00		      .BYTE.b	%00000000
    118  f1e9		       00		      .BYTE.b	%00000000
    119  f1ea		       00		      .BYTE.b	%00000000
    120  f1eb		       00		      .BYTE.b	%00000000
    121  f1ec
    122  f1ec		       00		      .BYTE.b	%00000000
    123  f1ed		       00		      .BYTE.b	%00000000
    124  f1ee		       00		      .BYTE.b	%00000000
    125  f1ef		       00		      .BYTE.b	%00000000
    126  f1f0		       00		      .BYTE.b	%00000000
    127  f1f1		       00		      .BYTE.b	%00000000
    128  f1f2
    129  f1f2		       00		      .BYTE.b	%00000000
    130  f1f3		       00		      .BYTE.b	%00000000
    131  f1f4		       00		      .BYTE.b	%00000000
    132  f1f5		       00		      .BYTE.b	%00000000
    133  f1f6		       00		      .BYTE.b	%00000000
    134  f1f7		       00		      .BYTE.b	%00000000
    135  f1f8
    136  f1f8		       00		      .BYTE.b	%00000000
    137  f1f9		       00		      .BYTE.b	%00000000
    138  f1fa		       00		      .BYTE.b	%00000000
    139  f1fb		       00		      .BYTE.b	%00000000
    140  f1fc		       00		      .BYTE.b	%00000000
    141  f1fd		       00		      .BYTE.b	%00000000
    142  f1fe
    143  f1fe		       00		      .BYTE.b	%00000000
    144  f1ff		       00		      .BYTE.b	%00000000
    145  f200		       00		      .BYTE.b	%00000000
    146  f201		       00		      .BYTE.b	%00000000
    147  f202		       00		      .BYTE.b	%00000000
    148  f203		       00		      .BYTE.b	%00000000
    149  f204
    150  f204		       00		      .BYTE.b	%00000000
    151  f205		       00		      .BYTE.b	%00000000
    152  f206		       00		      .BYTE.b	%00000000
    153  f207		       00		      .BYTE.b	%00000000
    154  f208		       00		      .BYTE.b	%00000000
    155  f209		       00		      .BYTE.b	%00000000
    156  f20a
    157  f20a		       00		      .BYTE.b	%00000000
    158  f20b		       00		      .BYTE.b	%00000000
    159  f20c		       00		      .BYTE.b	%00000000
    160  f20d		       00		      .BYTE.b	%00000000
    161  f20e		       00		      .BYTE.b	%00000000
    162  f20f		       00		      .BYTE.b	%00000000
    163  f210
    164  f210		       00		      .BYTE.b	%00000000
    165  f211		       00		      .BYTE.b	%00000000
    166  f212		       00		      .BYTE.b	%00000000
    167  f213		       00		      .BYTE.b	%00000000
    168  f214		       00		      .BYTE.b	%00000000
    169  f215		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    208  f216
    209  f216				   LogoAudio0
    210  f216
    211  f216		       1d		      .BYTE.b	#29	; C
    212  f217		       17		      .BYTE.b	#23	; E
    213  f218		       13		      .BYTE.b	#19	; G
    214  f219		       0f		      .BYTE.b	#15	; A
    215  f21a		       17		      .BYTE.b	#23	; E
    216  f21b		       13		      .BYTE.b	#19	; G
    217  f21c		       0f		      .BYTE.b	#15	; B
    218  f21d		       0e		      .BYTE.b	#14	; C
    219  f21e		       0b		      .BYTE.b	#11	; E
    220  f21f		       0b		      .BYTE.b	#11
    221  f220		       0b		      .BYTE.b	#11
    222  f221		       0b		      .BYTE.b	#11
    223  f222
    224  f222				   LogoAudio1
    225  f222
    226  f222		       1f		      .BYTE.b	#31	; C
    227  f223		       1f		      .BYTE.b	#31
    228  f224		       1f		      .BYTE.b	#31
    229  f225		       1f		      .BYTE.b	#31
    230  f226		       19		      .BYTE.b	#25	; E
    231  f227		       19		      .BYTE.b	#25
    232  f228		       19		      .BYTE.b	#25
    233  f229		       19		      .BYTE.b	#25
    234  f22a		       14		      .BYTE.b	#20	; G
    235  f22b		       14		      .BYTE.b	#20
    236  f22c		       14		      .BYTE.b	#20
    237  f22d		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f22e					      include	"title.asm"
      1  f22e							;================
      2  f22e							; Constants
      3  f22e							;================
      4  f22e
      5  f22e		       00 08	   TITLE_LINE_SIZE =	8
      6  f22e		       00 04	   TITLE_DATA_SIZE =	%00000100
      7  f22e		       00 01	   TITLE_BORDER =	1
      8  f22e		       00 04	   TITLE_PAD  =	4
      9  f22e		       00 06	   TITLE_IMAGE =	6
     10  f22e		       00 02	   TITLE_GAP  =	2
     11  f22e
     12  f22e		       00 70	   TITLE_BG_COLOR =	#$70
     13  f22e		       00 7e	   TITLE_BD_COLOR =	#$7E
     14  f22e		       00 0e	   TITLE_FG_COLOR =	#$0E
     15  f22e
     16  f22e		       00 04	   TITLE_AUDIO_0_TONE =	4
     17  f22e		       00 04	   TITLE_AUDIO_0_VOLUME =	4
     18  f22e		       00 07	   TITLE_AUDIO_1_VOLUME =	7
     19  f22e		       00 10	   TITLE_AUDIO_LENGTH =	16
     20  f22e		       00 09	   TITLE_AUDIO_STEP =	9
     21  f22e
     22  f22e				   TitleInit
     23  f22e
     24  f22e							; Setup logic and kernel
      0  f22e					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f22e				   .POINTER   SET	VBlankPtr
      2  f22e				   .ADDRESS   SET	TitleVerticalBlank
      3  f22e
      4  f22e		       a9 65		      LDA	#<.ADDRESS
      5  f230		       85 84		      STA	.POINTER
      6  f232		       a9 f2		      LDA	#>.ADDRESS
      7  f234		       85 85		      STA	.POINTER+1
      8  f236
      0  f236					      SET_POINTER	KernelPtr, TitleKernel
      1  f236				   .POINTER   SET	KernelPtr
      2  f236				   .ADDRESS   SET	TitleKernel
      3  f236
      4  f236		       a9 b0		      LDA	#<.ADDRESS
      5  f238		       85 86		      STA	.POINTER
      6  f23a		       a9 f2		      LDA	#>.ADDRESS
      7  f23c		       85 87		      STA	.POINTER+1
      8  f23e
      0  f23e					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f23e				   .POINTER   SET	OverScanPtr
      2  f23e				   .ADDRESS   SET	TitleOverScan
      3  f23e
      4  f23e		       a9 69		      LDA	#<.ADDRESS
      5  f240		       85 88		      STA	.POINTER
      6  f242		       a9 f2		      LDA	#>.ADDRESS
      7  f244		       85 89		      STA	.POINTER+1
      8  f246
     28  f246
     29  f246							; Load Colors
     30  f246		       a9 70		      lda	#TITLE_BG_COLOR
     31  f248		       85 09		      sta	COLUBK
     32  f24a		       a9 0e		      lda	#TITLE_FG_COLOR
     33  f24c		       85 08		      sta	COLUPF
     34  f24e
     35  f24e							; Load audio settings
     36  f24e
     37  f24e							; Melody Line
     38  f24e		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     39  f250		       85 15		      sta	AUDC0
     40  f252		       a9 04		      lda	#TITLE_AUDIO_0_VOLUME
     41  f254		       85 19		      sta	AUDV0
     42  f256
     43  f256							; Drums and Bass
     44  f256		       a9 00		      lda	#0
     45  f258		       85 16		      sta	AUDC1
     46  f25a		       85 1a		      sta	AUDV1
     47  f25c
     48  f25c							; Make it so that we play the first note immediately
     49  f25c		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     50  f25e		       85 8c		      sta	AudioStep
     51  f260		       a9 01		      lda	#1
     52  f262		       85 8b		      sta	FrameTimer
     53  f264
     54  f264		       60		      rts
     55  f265
     56  f265				   TitleVerticalBlank
     57  f265
     58  f265							; Refresh random values
     59  f265		       20 13 f0 	      jsr	Random
     60  f268
     61  f268		       60		      rts
     62  f269
     63  f269				   TitleOverScan
     64  f269		       20 70 f2 	      jsr	TitleAudio
     65  f26c		       20 a8 f2 	      jsr	TitleState
     66  f26f		       60		      rts
     67  f270
     68  f270				   TitleAudio
     69  f270
     70  f270		       a6 8b		      ldx	FrameTimer
     71  f272		       e0 00		      cpx	#0
     72  f274		       d0 31		      bne	.title_audio_return
     73  f276
     74  f276							; Reset Timer
     75  f276		       a2 09		      ldx	#TITLE_AUDIO_STEP
     76  f278		       86 8b		      stx	FrameTimer
     77  f27a
     78  f27a				   .title_audio_play
     79  f27a
     80  f27a							; Increment melody position
     81  f27a		       a4 8c		      ldy	AudioStep
     82  f27c		       c8		      iny
     83  f27d
     84  f27d							; Check if we're at the end of the melody
     85  f27d		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
     86  f27f		       d0 02		      bne	.title_audio_play_note
     87  f281
     88  f281							; Loop our audio step
     89  f281		       a0 00		      ldy	#0
     90  f283
     91  f283				   .title_audio_play_note
     92  f283
     93  f283							; Save current position
     94  f283		       84 8c		      sty	AudioStep
     95  f285
     96  f285							; Basic Melody Line
     97  f285		       b9 88 f3 	      lda	TitleAudio0,y
     98  f288		       85 17		      sta	AUDF0
     99  f28a
    100  f28a							; Drums and Bass
    101  f28a		       b9 98 f3 	      lda	TitleTone1,y
    102  f28d		       c9 ff		      cmp	#$FF
    103  f28f		       f0 0e		      beq	.title_audio_play_note_1_mute
    104  f291
    105  f291		       85 16		      sta	AUDC1
    106  f293		       b9 a8 f3 	      lda	TitleAudio1,y
    107  f296		       85 18		      sta	AUDF1
    108  f298		       a9 07		      lda	#TITLE_AUDIO_1_VOLUME
    109  f29a		       85 1a		      sta	AUDV1
    110  f29c
    111  f29c		       4c a7 f2 	      jmp	.title_audio_return
    112  f29f
    113  f29f				   .title_audio_play_note_1_mute
    114  f29f
    115  f29f		       a9 00		      lda	#0
    116  f2a1		       85 18		      sta	AUDF1
    117  f2a3		       85 16		      sta	AUDC1
    118  f2a5		       85 1a		      sta	AUDV1
    119  f2a7
    120  f2a7				   .title_audio_return
    121  f2a7		       60		      rts
    122  f2a8
    123  f2a8				   TitleState
    124  f2a8							; Check if Fire Button on controller 1 is pressed
    125  f2a8		       a5 0c		      lda	INPT4
    126  f2aa		       30 03		      bmi	.title_state_return
    127  f2ac
    128  f2ac		       20 a8 f7 	      jsr	GameInit
    129  f2af
    130  f2af				   .title_state_return
    131  f2af		       60		      rts
    132  f2b0
    133  f2b0				   TitleKernel
    134  f2b0
    135  f2b0							; Playfield Control
    136  f2b0		       a9 00		      lda	#%00000000	; No mirroring
    137  f2b2		       85 0a		      sta	CTRLPF
    138  f2b4
    139  f2b4							; Start Counters
    140  f2b4		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    141  f2b6		       a0 00		      ldy	#0	; Image Counter
    142  f2b8
    143  f2b8							; Turn on display
    144  f2b8		       a9 00		      lda	#0
    145  f2ba		       85 01		      sta	VBLANK
    146  f2bc
    147  f2bc		       85 02		      sta	WSYNC
    148  f2be
    149  f2be				   .title_kernel_image
    150  f2be
    151  f2be							; 76 machine cycles per scanline
    152  f2be		       85 02		      sta	WSYNC
    153  f2c0
    154  f2c0				   .title_kernel_image_load		; 66 cycles
    155  f2c0
    156  f2c0							; First half of image
    157  f2c0		       b9 f8 f2 	      lda	TitleImage,y	; 5
    158  f2c3		       85 0d		      sta	PF0	; 4
    159  f2c5		       b9 f9 f2 	      lda	TitleImage+1,y	; 5
    160  f2c8		       85 0e		      sta	PF1	; 4
    161  f2ca		       b9 fa f2 	      lda	TitleImage+2,y	; 5
    162  f2cd		       85 0f		      sta	PF2	; 4
    163  f2cf
      0  f2cf					      sleep	6
      1  f2cf				   .CYCLES    SET	6
      2  f2cf
      3  f2cf				  -	      IF	.CYCLES < 2
      4  f2cf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2cf				  -	      ERR
      6  f2cf					      ENDIF
      7  f2cf
      8  f2cf				  -	      IF	.CYCLES & 1
      9  f2cf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2cf				  -	      nop	0
     11  f2cf				  -	      ELSE
     12  f2cf				  -	      bit	VSYNC
     13  f2cf				  -	      ENDIF
     14  f2cf				  -.CYCLES    SET	.CYCLES - 3
     15  f2cf					      ENDIF
     16  f2cf
     17  f2cf					      REPEAT	.CYCLES / 2
     18  f2cf		       ea		      nop
     17  f2cf					      REPEND
     18  f2d0		       ea		      nop
     17  f2d0					      REPEND
     18  f2d1		       ea		      nop
     19  f2d2					      REPEND
    165  f2d2
    166  f2d2							; Second half of image
    167  f2d2		       b9 fb f2 	      lda	TitleImage+3,y	; 5
    168  f2d5		       85 0d		      sta	PF0	; 4
    169  f2d7		       b9 fc f2 	      lda	TitleImage+4,y	; 5
    170  f2da		       85 0e		      sta	PF1	; 4
    171  f2dc		       b9 fd f2 	      lda	TitleImage+5,y	; 5
    172  f2df		       85 0f		      sta	PF2	; 4
    173  f2e1
    174  f2e1				   .title_kernel_image_index		; 4 cycles
    175  f2e1
    176  f2e1		       ca		      dex		; 2
    177  f2e2		       d0 da		      bne	.title_kernel_image	; 2
    178  f2e4
    179  f2e4				   .title_kernel_image_index_next		; 6 cycles
    180  f2e4
    181  f2e4							; Restore scanline counter
    182  f2e4		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    183  f2e6
    184  f2e6		       98		      tya		; 2
    185  f2e7		       18		      clc		; 2
    186  f2e8		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    187  f2ea		       a8		      tay		; 2
    188  f2eb		       c0 90		      cpy	#KERNEL_IMAGE_SIZE*KERNEL_IMAGE_FULL_DATA
    189  f2ed		       d0 cf		      bne	.title_kernel_image	; 2
    190  f2ef
    191  f2ef				   .title_kernel_image_clean
    192  f2ef
    193  f2ef							; Clear out playfield
    194  f2ef		       a9 00		      lda	#0
    195  f2f1		       85 0d		      sta	PF0
    196  f2f3		       85 0e		      sta	PF1
    197  f2f5		       85 0f		      sta	PF2
    198  f2f7
    199  f2f7				   .title_kernel_image_return
    200  f2f7		       60		      rts
    201  f2f8
    202  f2f8				   TitleAssets
    203  f2f8
    204  f2f8							; Assets
------- FILE title_image.asm LEVEL 3 PASS 2
      0  f2f8					      include	"title_image.asm"
      1  f2f8				   TitleImage
      2  f2f8
      3  f2f8		       f0		      .BYTE.b	%11110000
      4  f2f9		       ff		      .BYTE.b	%11111111
      5  f2fa		       ff		      .BYTE.b	%11111111
      6  f2fb		       f0		      .BYTE.b	%11110000
      7  f2fc		       ff		      .BYTE.b	%11111111
      8  f2fd		       ff		      .BYTE.b	%11111111
      9  f2fe
     10  f2fe		       10		      .BYTE.b	%00010000
     11  f2ff		       00		      .BYTE.b	%00000000
     12  f300		       00		      .BYTE.b	%00000000
     13  f301		       00		      .BYTE.b	%00000000
     14  f302		       00		      .BYTE.b	%00000000
     15  f303		       80		      .BYTE.b	%10000000
     16  f304
     17  f304		       10		      .BYTE.b	%00010000
     18  f305		       00		      .BYTE.b	%00000000
     19  f306		       00		      .BYTE.b	%00000000
     20  f307		       00		      .BYTE.b	%00000000
     21  f308		       00		      .BYTE.b	%00000000
     22  f309		       80		      .BYTE.b	%10000000
     23  f30a
     24  f30a		       10		      .BYTE.b	%00010000
     25  f30b		       00		      .BYTE.b	%00000000
     26  f30c		       00		      .BYTE.b	%00000000
     27  f30d		       00		      .BYTE.b	%00000000
     28  f30e		       00		      .BYTE.b	%00000000
     29  f30f		       80		      .BYTE.b	%10000000
     30  f310
     31  f310		       10		      .BYTE.b	%00010000
     32  f311		       00		      .BYTE.b	%00000000
     33  f312		       00		      .BYTE.b	%00000000
     34  f313		       00		      .BYTE.b	%00000000
     35  f314		       00		      .BYTE.b	%00000000
     36  f315		       80		      .BYTE.b	%10000000
     37  f316
     38  f316		       10		      .BYTE.b	%00010000
     39  f317		       77		      .BYTE.b	%01110111
     40  f318		       ee		      .BYTE.b	%11101110
     41  f319		       c0		      .BYTE.b	%11000000
     42  f31a		       b8		      .BYTE.b	%10111000
     43  f31b		       80		      .BYTE.b	%10000000
     44  f31c
     45  f31c		       10		      .BYTE.b	%00010000
     46  f31d		       45		      .BYTE.b	%01000101
     47  f31e		       24		      .BYTE.b	%00100100
     48  f31f		       50		      .BYTE.b	%01010000
     49  f320		       24		      .BYTE.b	%00100100
     50  f321		       80		      .BYTE.b	%10000000
     51  f322
     52  f322		       10		      .BYTE.b	%00010000
     53  f323		       47		      .BYTE.b	%01000111
     54  f324		       24		      .BYTE.b	%00100100
     55  f325		       d0		      .BYTE.b	%11010000
     56  f326		       24		      .BYTE.b	%00100100
     57  f327		       80		      .BYTE.b	%10000000
     58  f328
     59  f328		       10		      .BYTE.b	%00010000
     60  f329		       74		      .BYTE.b	%01110100
     61  f32a		       24		      .BYTE.b	%00100100
     62  f32b		       50		      .BYTE.b	%01010000
     63  f32c		       38		      .BYTE.b	%00111000
     64  f32d		       80		      .BYTE.b	%10000000
     65  f32e
     66  f32e		       10		      .BYTE.b	%00010000
     67  f32f		       14		      .BYTE.b	%00010100
     68  f330		       24		      .BYTE.b	%00100100
     69  f331		       50		      .BYTE.b	%01010000
     70  f332		       24		      .BYTE.b	%00100100
     71  f333		       80		      .BYTE.b	%10000000
     72  f334
     73  f334		       10		      .BYTE.b	%00010000
     74  f335		       74		      .BYTE.b	%01110100
     75  f336		       ee		      .BYTE.b	%11101110
     76  f337		       c0		      .BYTE.b	%11000000
     77  f338		       a4		      .BYTE.b	%10100100
     78  f339		       80		      .BYTE.b	%10000000
     79  f33a
     80  f33a		       10		      .BYTE.b	%00010000
     81  f33b		       00		      .BYTE.b	%00000000
     82  f33c		       00		      .BYTE.b	%00000000
     83  f33d		       00		      .BYTE.b	%00000000
     84  f33e		       00		      .BYTE.b	%00000000
     85  f33f		       80		      .BYTE.b	%10000000
     86  f340
     87  f340		       10		      .BYTE.b	%00010000
     88  f341		       00		      .BYTE.b	%00000000
     89  f342		       00		      .BYTE.b	%00000000
     90  f343		       00		      .BYTE.b	%00000000
     91  f344		       00		      .BYTE.b	%00000000
     92  f345		       80		      .BYTE.b	%10000000
     93  f346
     94  f346		       10		      .BYTE.b	%00010000
     95  f347		       01		      .BYTE.b	%00000001
     96  f348		       03		      .BYTE.b	%00000011
     97  f349		       20		      .BYTE.b	%00100000
     98  f34a		       5d		      .BYTE.b	%01011101
     99  f34b		       83		      .BYTE.b	%10000011
    100  f34c
    101  f34c		       10		      .BYTE.b	%00010000
    102  f34d		       0a		      .BYTE.b	%00001010
    103  f34e		       14		      .BYTE.b	%00010100
    104  f34f		       20		      .BYTE.b	%00100000
    105  f350		       51		      .BYTE.b	%01010001
    106  f351		       84		      .BYTE.b	%10000100
    107  f352
    108  f352		       10		      .BYTE.b	%00010000
    109  f353		       15		      .BYTE.b	%00010101
    110  f354		       2a		      .BYTE.b	%00101010
    111  f355		       20		      .BYTE.b	%00100000
    112  f356		       59		      .BYTE.b	%01011001
    113  f357		       83		      .BYTE.b	%10000011
    114  f358
    115  f358		       10		      .BYTE.b	%00010000
    116  f359		       24		      .BYTE.b	%00100100
    117  f35a		       49		      .BYTE.b	%01001001
    118  f35b		       20		      .BYTE.b	%00100000
    119  f35c		       51		      .BYTE.b	%01010001
    120  f35d		       84		      .BYTE.b	%10000100
    121  f35e
    122  f35e		       10		      .BYTE.b	%00010000
    123  f35f		       22		      .BYTE.b	%00100010
    124  f360		       44		      .BYTE.b	%01000100
    125  f361		       a0		      .BYTE.b	%10100000
    126  f362		       51		      .BYTE.b	%01010001
    127  f363		       84		      .BYTE.b	%10000100
    128  f364
    129  f364		       10		      .BYTE.b	%00010000
    130  f365		       11		      .BYTE.b	%00010001
    131  f366		       23		      .BYTE.b	%00100011
    132  f367		       40		      .BYTE.b	%01000000
    133  f368		       9d		      .BYTE.b	%10011101
    134  f369		       83		      .BYTE.b	%10000011
    135  f36a
    136  f36a		       10		      .BYTE.b	%00010000
    137  f36b		       00		      .BYTE.b	%00000000
    138  f36c		       00		      .BYTE.b	%00000000
    139  f36d		       00		      .BYTE.b	%00000000
    140  f36e		       00		      .BYTE.b	%00000000
    141  f36f		       80		      .BYTE.b	%10000000
    142  f370
    143  f370		       10		      .BYTE.b	%00010000
    144  f371		       00		      .BYTE.b	%00000000
    145  f372		       00		      .BYTE.b	%00000000
    146  f373		       00		      .BYTE.b	%00000000
    147  f374		       00		      .BYTE.b	%00000000
    148  f375		       80		      .BYTE.b	%10000000
    149  f376
    150  f376		       10		      .BYTE.b	%00010000
    151  f377		       00		      .BYTE.b	%00000000
    152  f378		       00		      .BYTE.b	%00000000
    153  f379		       00		      .BYTE.b	%00000000
    154  f37a		       00		      .BYTE.b	%00000000
    155  f37b		       80		      .BYTE.b	%10000000
    156  f37c
    157  f37c		       10		      .BYTE.b	%00010000
    158  f37d		       00		      .BYTE.b	%00000000
    159  f37e		       00		      .BYTE.b	%00000000
    160  f37f		       00		      .BYTE.b	%00000000
    161  f380		       00		      .BYTE.b	%00000000
    162  f381		       80		      .BYTE.b	%10000000
    163  f382
    164  f382		       f0		      .BYTE.b	%11110000
    165  f383		       ff		      .BYTE.b	%11111111
    166  f384		       ff		      .BYTE.b	%11111111
    167  f385		       f0		      .BYTE.b	%11110000
    168  f386		       ff		      .BYTE.b	%11111111
    169  f387		       ff		      .BYTE.b	%11111111
------- FILE title.asm
    206  f388
    207  f388				   TitleAudio0
    208  f388
    209  f388		       0f		      .BYTE.b	#15	; B
    210  f389		       13		      .BYTE.b	#19	; G
    211  f38a		       17		      .BYTE.b	#23	; E
    212  f38b		       13		      .BYTE.b	#19	; G
    213  f38c		       0e		      .BYTE.b	#14	; C
    214  f38d		       13		      .BYTE.b	#19
    215  f38e		       17		      .BYTE.b	#23
    216  f38f		       13		      .BYTE.b	#19
    217  f390		       0c		      .BYTE.b	#12	; D
    218  f391		       13		      .BYTE.b	#19
    219  f392		       17		      .BYTE.b	#23
    220  f393		       13		      .BYTE.b	#19
    221  f394		       0e		      .BYTE.b	#14	; C
    222  f395		       13		      .BYTE.b	#19
    223  f396		       17		      .BYTE.b	#23
    224  f397		       13		      .BYTE.b	#19
    225  f398
    226  f398				   TitleTone1
    227  f398
    228  f398		       0f		      .BYTE.b	#15	; Electronic Rumble
    229  f399		       ff		      .BYTE.b	#$FF
    230  f39a		       01		      .BYTE.b	#1	; Low Pure Tone
    231  f39b		       01		      .BYTE.b	#1
    232  f39c		       08		      .BYTE.b	#8	; White Noise
    233  f39d		       01		      .BYTE.b	#1
    234  f39e		       01		      .BYTE.b	#1
    235  f39f		       ff		      .BYTE.b	#$FF
    236  f3a0		       ff		      .BYTE.b	#$FF
    237  f3a1		       0f		      .BYTE.b	#15
    238  f3a2		       ff		      .BYTE.b	#$FF
    239  f3a3		       ff		      .BYTE.b	#$FF
    240  f3a4		       08		      .BYTE.b	#8
    241  f3a5		       ff		      .BYTE.b	#$FF
    242  f3a6		       01		      .BYTE.b	#1
    243  f3a7		       01		      .BYTE.b	#1
    244  f3a8
    245  f3a8				   TitleAudio1
    246  f3a8
    247  f3a8		       1d		      .BYTE.b	#29	; Kick
    248  f3a9		       ff		      .BYTE.b	#$FF
    249  f3aa		       1f		      .BYTE.b	#31	; C
    250  f3ab		       1f		      .BYTE.b	#31
    251  f3ac		       07		      .BYTE.b	#7	; Snare
    252  f3ad		       1f		      .BYTE.b	#31
    253  f3ae		       1f		      .BYTE.b	#31
    254  f3af		       ff		      .BYTE.b	#$FF
    255  f3b0		       ff		      .BYTE.b	#$FF
    256  f3b1		       1d		      .BYTE.b	#29
    257  f3b2		       ff		      .BYTE.b	#$FF
    258  f3b3		       ff		      .BYTE.b	#$FF
    259  f3b4		       07		      .BYTE.b	#7
    260  f3b5		       ff		      .BYTE.b	#$FF
    261  f3b6		       17		      .BYTE.b	#23	; F
    262  f3b7		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f3b8					      include	"game.asm"
      1  f3b8							;================
      2  f3b8							; Game
      3  f3b8							;================
      4  f3b8
      5  f3b8							; Object Code
      6  f3b8
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f3b8					      include	"objects/score.asm"
      1  f3b8							;======================
      2  f3b8							; Score (playfield)
      3  f3b8							;======================
      4  f3b8
      5  f3b8							; Constants
      6  f3b8
      7  f3b8		       00 00	   SCORE_BG_COLOR =	#$00
      8  f3b8		       00 0f	   SCORE_FG_COLOR =	#$0f
      9  f3b8
     10  f3b8		       00 05	   SCORE_CHAR_SIZE =	5
     11  f3b8		       00 02	   SCORE_LINE_SIZE =	2
     12  f3b8		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     13  f3b8
     14  f3b8							; Initialization
     15  f3b8
     16  f3b8				   ScoreInit
     17  f3b8
     18  f3b8							; Reset Scores
     19  f3b8		       a9 00		      lda	#0
     20  f3ba		       85 8d		      sta	ScoreValue
     21  f3bc		       85 8e		      sta	ScoreValue+1
     22  f3be
     23  f3be							; Setup frame counters
     24  f3be		       a9 ff		      lda	#$ff
     25  f3c0		       85 8b		      sta	FrameTimer
     26  f3c2
     27  f3c2		       60		      rts
     28  f3c3
     29  f3c3							; Frame Update
     30  f3c3
     31  f3c3				   ScoreUpdate
     32  f3c3
     33  f3c3		       a6 8b		      ldx	FrameTimer
     34  f3c5		       ca		      dex
     35  f3c6		       e0 01		      cpx	#1
     36  f3c8		       d0 07		      bne	.score_update_timer_skip
     37  f3ca
     38  f3ca		       a4 8d		      ldy	ScoreValue
     39  f3cc		       c8		      iny
     40  f3cd		       84 8d		      sty	ScoreValue
     41  f3cf
     42  f3cf		       a2 ff		      ldx	#$ff
     43  f3d1
     44  f3d1				   .score_update_timer_skip
     45  f3d1		       86 8b		      stx	FrameTimer
     46  f3d3		       86 8e		      stx	ScoreValue+1
     47  f3d5
     48  f3d5		       a2 01		      ldx	#1
     49  f3d7				   .score_update_loop
     50  f3d7
     51  f3d7							; Ones Digit
     52  f3d7		       b5 8d		      lda	ScoreValue,x
     53  f3d9		       29 0f		      and	#$0f
     54  f3db		       85 80		      sta	Temp
     55  f3dd		       0a		      asl
     56  f3de		       0a		      asl
     57  f3df		       65 80		      adc	Temp
     58  f3e1		       95 8f		      sta	ScoreDigitOnes,x
     59  f3e3
     60  f3e3							; Tens Digit
     61  f3e3		       b5 8d		      lda	ScoreValue,x
     62  f3e5		       29 f0		      and	#$f0
     63  f3e7		       4a		      lsr
     64  f3e8		       4a		      lsr
     65  f3e9		       85 80		      sta	Temp
     66  f3eb		       4a		      lsr
     67  f3ec		       4a		      lsr
     68  f3ed		       65 80		      adc	Temp
     69  f3ef		       95 91		      sta	ScoreDigitTens,x
     70  f3f1
     71  f3f1		       ca		      dex
     72  f3f2		       10 e3		      bpl	.score_update_loop
     73  f3f4
     74  f3f4				   .score_update_end
     75  f3f4		       60		      rts
     76  f3f5
     77  f3f5							; Draw loop (uses SCORE_LINES scanlines)
     78  f3f5
     79  f3f5				   ScoreDraw
     80  f3f5
     81  f3f5							; Load Colors
     82  f3f5		       a9 00		      lda	#SCORE_BG_COLOR
     83  f3f7		       85 09		      sta	COLUBK
     84  f3f9		       a9 0f		      lda	#SCORE_FG_COLOR
     85  f3fb		       85 08		      sta	COLUPF
     86  f3fd
     87  f3fd							; Set Non-Mirror
     88  f3fd		       a9 00		      lda	#%00000000	; Last digit to 0
     89  f3ff		       85 0a		      sta	CTRLPF
     90  f401
     91  f401							;sta WSYNC
     92  f401
     93  f401		       a2 05		      ldx	#SCORE_CHAR_SIZE
     94  f403
     95  f403				   .score_draw_line
     96  f403
     97  f403							; 1st Value
     98  f403		       a4 91		      ldy	ScoreDigitTens
     99  f405		       b9 59 f4 	      lda	ScoreDigits,y
    100  f408		       29 f0		      and	#$f0
    101  f40a		       85 93		      sta	ScoreGfx
    102  f40c		       a4 8f		      ldy	ScoreDigitOnes
    103  f40e		       b9 59 f4 	      lda	ScoreDigits,y
    104  f411		       29 0f		      and	#$0f
    105  f413		       05 93		      ora	ScoreGfx
    106  f415		       85 93		      sta	ScoreGfx
    107  f417
    108  f417		       85 02		      sta	WSYNC
    109  f419		       85 0e		      sta	PF1
    110  f41b
    111  f41b							; 2nd Value
    112  f41b		       a4 92		      ldy	ScoreDigitTens+1
    113  f41d		       b9 59 f4 	      lda	ScoreDigits,y
    114  f420		       29 f0		      and	#$f0
    115  f422		       85 94		      sta	ScoreGfx+1
    116  f424		       a4 90		      ldy	ScoreDigitOnes+1
    117  f426		       b9 59 f4 	      lda	ScoreDigits,y
    118  f429		       29 0f		      and	#$0f
    119  f42b		       05 94		      ora	ScoreGfx+1
    120  f42d		       85 94		      sta	ScoreGfx+1
    121  f42f
      0  f42f					      sleep	12
      1  f42f				   .CYCLES    SET	12
      2  f42f
      3  f42f				  -	      IF	.CYCLES < 2
      4  f42f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f42f				  -	      ERR
      6  f42f					      ENDIF
      7  f42f
      8  f42f				  -	      IF	.CYCLES & 1
      9  f42f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f42f				  -	      nop	0
     11  f42f				  -	      ELSE
     12  f42f				  -	      bit	VSYNC
     13  f42f				  -	      ENDIF
     14  f42f				  -.CYCLES    SET	.CYCLES - 3
     15  f42f					      ENDIF
     16  f42f
     17  f42f					      REPEAT	.CYCLES / 2
     18  f42f		       ea		      nop
     17  f42f					      REPEND
     18  f430		       ea		      nop
     17  f430					      REPEND
     18  f431		       ea		      nop
     17  f431					      REPEND
     18  f432		       ea		      nop
     17  f432					      REPEND
     18  f433		       ea		      nop
     17  f433					      REPEND
     18  f434		       ea		      nop
     19  f435					      REPEND
    123  f435		       85 0e		      sta	PF1
    124  f437
    125  f437		       a4 93		      ldy	ScoreGfx
    126  f439		       85 02		      sta	WSYNC
    127  f43b
    128  f43b		       84 0e		      sty	PF1
    129  f43d
    130  f43d		       e6 8f		      inc	ScoreDigitOnes
    131  f43f		       e6 90		      inc	ScoreDigitOnes+1
    132  f441		       e6 91		      inc	ScoreDigitTens
    133  f443		       e6 92		      inc	ScoreDigitTens+1
    134  f445
      0  f445					      sleep	12
      1  f445				   .CYCLES    SET	12
      2  f445
      3  f445				  -	      IF	.CYCLES < 2
      4  f445				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f445				  -	      ERR
      6  f445					      ENDIF
      7  f445
      8  f445				  -	      IF	.CYCLES & 1
      9  f445				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f445				  -	      nop	0
     11  f445				  -	      ELSE
     12  f445				  -	      bit	VSYNC
     13  f445				  -	      ENDIF
     14  f445				  -.CYCLES    SET	.CYCLES - 3
     15  f445					      ENDIF
     16  f445
     17  f445					      REPEAT	.CYCLES / 2
     18  f445		       ea		      nop
     17  f445					      REPEND
     18  f446		       ea		      nop
     17  f446					      REPEND
     18  f447		       ea		      nop
     17  f447					      REPEND
     18  f448		       ea		      nop
     17  f448					      REPEND
     18  f449		       ea		      nop
     17  f449					      REPEND
     18  f44a		       ea		      nop
     19  f44b					      REPEND
    136  f44b		       ca		      dex
    137  f44c		       85 0e		      sta	PF1
    138  f44e
    139  f44e		       d0 b3		      bne	.score_draw_line
    140  f450		       85 02		      sta	WSYNC
    141  f452
    142  f452							; Clear
    143  f452		       a9 00		      lda	#0
    144  f454		       85 0e		      sta	PF1
    145  f456
    146  f456		       85 02		      sta	WSYNC
    147  f458
    148  f458		       60		      rts
    149  f459
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f459					      include	"objects/score_digits.asm"
      1  f459				   ScoreDigits
      2  f459
      3  f459		       77		      .BYTE.b	%01110111
      4  f45a		       55		      .BYTE.b	%01010101
      5  f45b		       55		      .BYTE.b	%01010101
      6  f45c		       55		      .BYTE.b	%01010101
      7  f45d		       77		      .BYTE.b	%01110111
      8  f45e
      9  f45e		       11		      .BYTE.b	%00010001
     10  f45f		       11		      .BYTE.b	%00010001
     11  f460		       11		      .BYTE.b	%00010001
     12  f461		       11		      .BYTE.b	%00010001
     13  f462		       11		      .BYTE.b	%00010001
     14  f463
     15  f463		       77		      .BYTE.b	%01110111
     16  f464		       11		      .BYTE.b	%00010001
     17  f465		       77		      .BYTE.b	%01110111
     18  f466		       44		      .BYTE.b	%01000100
     19  f467		       77		      .BYTE.b	%01110111
     20  f468
     21  f468		       77		      .BYTE.b	%01110111
     22  f469		       11		      .BYTE.b	%00010001
     23  f46a		       33		      .BYTE.b	%00110011
     24  f46b		       11		      .BYTE.b	%00010001
     25  f46c		       77		      .BYTE.b	%01110111
     26  f46d
     27  f46d		       55		      .BYTE.b	%01010101
     28  f46e		       55		      .BYTE.b	%01010101
     29  f46f		       77		      .BYTE.b	%01110111
     30  f470		       11		      .BYTE.b	%00010001
     31  f471		       11		      .BYTE.b	%00010001
     32  f472
     33  f472		       77		      .BYTE.b	%01110111
     34  f473		       44		      .BYTE.b	%01000100
     35  f474		       77		      .BYTE.b	%01110111
     36  f475		       11		      .BYTE.b	%00010001
     37  f476		       77		      .BYTE.b	%01110111
     38  f477
     39  f477		       77		      .BYTE.b	%01110111
     40  f478		       44		      .BYTE.b	%01000100
     41  f479		       77		      .BYTE.b	%01110111
     42  f47a		       55		      .BYTE.b	%01010101
     43  f47b		       77		      .BYTE.b	%01110111
     44  f47c
     45  f47c		       77		      .BYTE.b	%01110111
     46  f47d		       11		      .BYTE.b	%00010001
     47  f47e		       22		      .BYTE.b	%00100010
     48  f47f		       22		      .BYTE.b	%00100010
     49  f480		       22		      .BYTE.b	%00100010
     50  f481
     51  f481		       77		      .BYTE.b	%01110111
     52  f482		       55		      .BYTE.b	%01010101
     53  f483		       77		      .BYTE.b	%01110111
     54  f484		       55		      .BYTE.b	%01010101
     55  f485		       77		      .BYTE.b	%01110111
     56  f486
     57  f486		       77		      .BYTE.b	%01110111
     58  f487		       55		      .BYTE.b	%01010101
     59  f488		       77		      .BYTE.b	%01110111
     60  f489		       11		      .BYTE.b	%00010001
     61  f48a		       11		      .BYTE.b	%00010001
     62  f48b
     63  f48b		       77		      .BYTE.b	%01110111
     64  f48c		       55		      .BYTE.b	%01010101
     65  f48d		       77		      .BYTE.b	%01110111
     66  f48e		       55		      .BYTE.b	%01010101
     67  f48f		       55		      .BYTE.b	%01010101
     68  f490
     69  f490		       66		      .BYTE.b	%01100110
     70  f491		       55		      .BYTE.b	%01010101
     71  f492		       66		      .BYTE.b	%01100110
     72  f493		       55		      .BYTE.b	%01010101
     73  f494		       66		      .BYTE.b	%01100110
     74  f495
     75  f495		       77		      .BYTE.b	%01110111
     76  f496		       44		      .BYTE.b	%01000100
     77  f497		       44		      .BYTE.b	%01000100
     78  f498		       44		      .BYTE.b	%01000100
     79  f499		       77		      .BYTE.b	%01110111
     80  f49a
     81  f49a		       66		      .BYTE.b	%01100110
     82  f49b		       55		      .BYTE.b	%01010101
     83  f49c		       55		      .BYTE.b	%01010101
     84  f49d		       55		      .BYTE.b	%01010101
     85  f49e		       66		      .BYTE.b	%01100110
     86  f49f
     87  f49f		       77		      .BYTE.b	%01110111
     88  f4a0		       44		      .BYTE.b	%01000100
     89  f4a1		       66		      .BYTE.b	%01100110
     90  f4a2		       44		      .BYTE.b	%01000100
     91  f4a3		       77		      .BYTE.b	%01110111
     92  f4a4
     93  f4a4		       77		      .BYTE.b	%01110111
     94  f4a5		       44		      .BYTE.b	%01000100
     95  f4a6		       66		      .BYTE.b	%01100110
     96  f4a7		       44		      .BYTE.b	%01000100
     97  f4a8		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f4a9					      include	"objects/web.asm"
      1  f4a9							;================
      2  f4a9							; Web (Playfield)
      3  f4a9							;================
      4  f4a9
      5  f4a9							; Constants
      6  f4a9
      7  f4a9		       00 00	   WEB_BG_COLOR =	#$00
      8  f4a9		       00 06	   WEB_FG_COLOR =	#$06
      9  f4a9
     10  f4a9		       00 b3	   WEB_SIZE   =	KERNEL_SCANLINES-SCORE_LINES
     11  f4a9		       00 05	   WEB_LINE   =	WEB_SIZE/30
     12  f4a9
     13  f4a9							; Scanline Draw
     14  f4a9
     15  f4a9				   WebDrawStart
     16  f4a9
     17  f4a9							; Load Colors
     18  f4a9		       a9 00		      lda	#WEB_BG_COLOR
     19  f4ab		       85 09		      sta	COLUBK
     20  f4ad		       a9 06		      lda	#WEB_FG_COLOR
     21  f4af		       85 08		      sta	COLUPF
     22  f4b1
     23  f4b1							; Mirror playfield
     24  f4b1		       a9 01		      lda	#%00000001	; Mirrored
     25  f4b3		       85 0a		      sta	CTRLPF
     26  f4b5
     27  f4b5							; Initialize image index
     28  f4b5		       a9 00		      lda	#0
     29  f4b7		       85 95		      sta	WebIndex
     30  f4b9
     31  f4b9		       60		      rts
     32  f4ba
     33  f4ba				   WebDraw
     34  f4ba
     35  f4ba		       a4 95		      ldy	WebIndex
     36  f4bc
     37  f4bc							; Draw Image
     38  f4bc		       b9 d8 f4 	      lda	WebImagePF0,y
     39  f4bf		       85 0d		      sta	PF0
     40  f4c1		       b9 f6 f4 	      lda	WebImagePF1,y
     41  f4c4		       85 0e		      sta	PF1
     42  f4c6		       b9 14 f5 	      lda	WebImagePF2,y
     43  f4c9		       85 0f		      sta	PF2
     44  f4cb
     45  f4cb							; Increment and store image index
     46  f4cb		       c8		      iny
     47  f4cc		       84 95		      sty	WebIndex
     48  f4ce
     49  f4ce		       60		      rts
     50  f4cf
     51  f4cf				   WebClean
     52  f4cf
     53  f4cf							; Clear out playfield
     54  f4cf		       a9 00		      lda	#0
     55  f4d1		       85 0d		      sta	PF0
     56  f4d3		       85 0e		      sta	PF1
     57  f4d5		       85 0f		      sta	PF2
     58  f4d7
     59  f4d7		       60		      rts
     60  f4d8
     61  f4d8							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f4d8					      include	"objects/web_image.asm"
      1  f4d8				   WebImagePF0
      2  f4d8		       00		      .BYTE.b	%00000000
      3  f4d9		       00		      .BYTE.b	%00000000
      4  f4da		       00		      .BYTE.b	%00000000
      5  f4db		       00		      .BYTE.b	%00000000
      6  f4dc		       00		      .BYTE.b	%00000000
      7  f4dd		       00		      .BYTE.b	%00000000
      8  f4de		       00		      .BYTE.b	%00000000
      9  f4df		       00		      .BYTE.b	%00000000
     10  f4e0		       00		      .BYTE.b	%00000000
     11  f4e1		       30		      .BYTE.b	%00110000
     12  f4e2		       e0		      .BYTE.b	%11100000
     13  f4e3		       20		      .BYTE.b	%00100000
     14  f4e4		       40		      .BYTE.b	%01000000
     15  f4e5		       40		      .BYTE.b	%01000000
     16  f4e6		       80		      .BYTE.b	%10000000
     17  f4e7		       80		      .BYTE.b	%10000000
     18  f4e8		       40		      .BYTE.b	%01000000
     19  f4e9		       40		      .BYTE.b	%01000000
     20  f4ea		       20		      .BYTE.b	%00100000
     21  f4eb		       e0		      .BYTE.b	%11100000
     22  f4ec		       30		      .BYTE.b	%00110000
     23  f4ed		       00		      .BYTE.b	%00000000
     24  f4ee		       00		      .BYTE.b	%00000000
     25  f4ef		       00		      .BYTE.b	%00000000
     26  f4f0		       00		      .BYTE.b	%00000000
     27  f4f1		       00		      .BYTE.b	%00000000
     28  f4f2		       00		      .BYTE.b	%00000000
     29  f4f3		       00		      .BYTE.b	%00000000
     30  f4f4		       00		      .BYTE.b	%00000000
     31  f4f5		       00		      .BYTE.b	%00000000
     32  f4f6
     33  f4f6				   WebImagePF1
     34  f4f6		       08		      .BYTE.b	%00001000
     35  f4f7		       06		      .BYTE.b	%00000110
     36  f4f8		       01		      .BYTE.b	%00000001
     37  f4f9		       00		      .BYTE.b	%00000000
     38  f4fa		       00		      .BYTE.b	%00000000
     39  f4fb		       01		      .BYTE.b	%00000001
     40  f4fc		       01		      .BYTE.b	%00000001
     41  f4fd		       02		      .BYTE.b	%00000010
     42  f4fe		       0c		      .BYTE.b	%00001100
     43  f4ff		       30		      .BYTE.b	%00110000
     44  f500		       c0		      .BYTE.b	%11000000
     45  f501		       38		      .BYTE.b	%00111000
     46  f502		       07		      .BYTE.b	%00000111
     47  f503		       00		      .BYTE.b	%00000000
     48  f504		       00		      .BYTE.b	%00000000
     49  f505		       00		      .BYTE.b	%00000000
     50  f506		       00		      .BYTE.b	%00000000
     51  f507		       07		      .BYTE.b	%00000111
     52  f508		       38		      .BYTE.b	%00111000
     53  f509		       c0		      .BYTE.b	%11000000
     54  f50a		       30		      .BYTE.b	%00110000
     55  f50b		       0c		      .BYTE.b	%00001100
     56  f50c		       02		      .BYTE.b	%00000010
     57  f50d		       01		      .BYTE.b	%00000001
     58  f50e		       01		      .BYTE.b	%00000001
     59  f50f		       00		      .BYTE.b	%00000000
     60  f510		       00		      .BYTE.b	%00000000
     61  f511		       01		      .BYTE.b	%00000001
     62  f512		       06		      .BYTE.b	%00000110
     63  f513		       08		      .BYTE.b	%00001000
     64  f514
     65  f514				   WebImagePF2
     66  f514		       20		      .BYTE.b	%00100000
     67  f515		       18		      .BYTE.b	%00011000
     68  f516		       04		      .BYTE.b	%00000100
     69  f517		       03		      .BYTE.b	%00000011
     70  f518		       3f		      .BYTE.b	%00111111
     71  f519		       c2		      .BYTE.b	%11000010
     72  f51a		       04		      .BYTE.b	%00000100
     73  f51b		       08		      .BYTE.b	%00001000
     74  f51c		       08		      .BYTE.b	%00001000
     75  f51d		       10		      .BYTE.b	%00010000
     76  f51e		       20		      .BYTE.b	%00100000
     77  f51f		       20		      .BYTE.b	%00100000
     78  f520		       41		      .BYTE.b	%01000001
     79  f521		       8e		      .BYTE.b	%10001110
     80  f522		       f0		      .BYTE.b	%11110000
     81  f523		       f0		      .BYTE.b	%11110000
     82  f524		       8e		      .BYTE.b	%10001110
     83  f525		       41		      .BYTE.b	%01000001
     84  f526		       20		      .BYTE.b	%00100000
     85  f527		       20		      .BYTE.b	%00100000
     86  f528		       10		      .BYTE.b	%00010000
     87  f529		       08		      .BYTE.b	%00001000
     88  f52a		       08		      .BYTE.b	%00001000
     89  f52b		       04		      .BYTE.b	%00000100
     90  f52c		       c2		      .BYTE.b	%11000010
     91  f52d		       3f		      .BYTE.b	%00111111
     92  f52e		       03		      .BYTE.b	%00000011
     93  f52f		       04		      .BYTE.b	%00000100
     94  f530		       18		      .BYTE.b	%00011000
     95  f531		       20		      .BYTE.b	%00100000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f532					      include	"objects/spider.asm"
      1  f532							;=================
      2  f532							; Spider (player0)
      3  f532							;=================
      4  f532
      5  f532							; Constants
      6  f532
      7  f532		       00 56	   SPIDER_COLOR =	#$56
      8  f532		       00 10	   SPIDER_SIZE =	16
      9  f532		       00 08	   SPIDER_SPRITE_SIZE =	8
     10  f532
     11  f532							; Initialization
     12  f532
     13  f532				   SpiderInit
     14  f532
     15  f532							; Initial Control
     16  f532		       a9 32		      lda	#50
     17  f534		       85 98		      sta	SpiderPos
     18  f536		       85 99		      sta	SpiderPos+1
     19  f538
     20  f538							; Setup Sprite
      0  f538					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f538				   .POINTER   SET	SpiderPtr
      2  f538				   .ADDRESS   SET	SpiderSprite
      3  f538
      4  f538		       a9 7e		      LDA	#<.ADDRESS
      5  f53a		       85 96		      STA	.POINTER
      6  f53c		       a9 f6		      LDA	#>.ADDRESS
      7  f53e		       85 97		      STA	.POINTER+1
      8  f540
     22  f540
     23  f540		       60		      rts
     24  f541
     25  f541							; Frame Update
     26  f541
     27  f541				   SpiderUpdate
     28  f541		       20 45 f5 	      jsr	SpiderControl
     29  f544		       60		      rts
     30  f545
     31  f545				   SpiderControl
     32  f545
     33  f545							; Control Position
     34  f545		       a6 98		      ldx	SpiderPos
     35  f547		       a4 99		      ldy	SpiderPos+1
     36  f549		       ad 80 02 	      lda	SWCHA
     37  f54c
     38  f54c				   .spider_control_check_right
     39  f54c		       30 01		      bmi	.spider_control_check_left
     40  f54e		       e8		      inx
     41  f54f
     42  f54f				   .spider_control_check_left
     43  f54f		       2a		      rol
     44  f550		       30 01		      bmi	.spider_control_check_down
     45  f552		       ca		      dex
     46  f553
     47  f553				   .spider_control_check_down
     48  f553		       2a		      rol
     49  f554		       30 01		      bmi	.spider_control_check_up
     50  f556		       88		      dey
     51  f557
     52  f557				   .spider_control_check_up
     53  f557		       2a		      rol
     54  f558		       30 01		      bmi	.spider_control_sprite
     55  f55a		       c8		      iny
     56  f55b
     57  f55b				   .spider_control_sprite
     58  f55b							; Control Sprite
     59  f55b		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     60  f55d
     61  f55d				   .spider_control_sprite_x
     62  f55d		       e4 98		      cpx	SpiderPos
     63  f55f		       90 04		      bcc	.spider_control_sprite_left
     64  f561		       f0 09		      beq	.spider_control_sprite_y
     65  f563		       b0 05		      bcs	.spider_control_sprite_right
     66  f565
     67  f565				   .spider_control_sprite_left
     68  f565		       09 80		      ora	#%10000000
     69  f567		       4c 6c f5 	      jmp	.spider_control_sprite_y
     70  f56a
     71  f56a				   .spider_control_sprite_right
     72  f56a		       09 40		      ora	#%01000000
     73  f56c
     74  f56c				   .spider_control_sprite_y
     75  f56c		       c4 99		      cpy	SpiderPos+1
     76  f56e		       90 04		      bcc	.spider_control_sprite_down
     77  f570		       f0 09		      beq	.spider_control_sprite_store
     78  f572		       b0 05		      bcs	.spider_control_sprite_up
     79  f574
     80  f574				   .spider_control_sprite_down
     81  f574		       09 10		      ora	#%00010000
     82  f576		       4c 7b f5 	      jmp	.spider_control_sprite_store
     83  f579
     84  f579				   .spider_control_sprite_up
     85  f579		       09 20		      ora	#%00100000
     86  f57b
     87  f57b				   .spider_control_sprite_store
     88  f57b		       c9 00		      cmp	#%00000000
     89  f57d		       f0 02		      beq	.spider_control_boundary
     90  f57f		       85 9a		      sta	SpiderCtrl
     91  f581
     92  f581				   .spider_control_boundary
     93  f581							; Check Playfield Boundaries
     94  f581
     95  f581				   .spider_control_boundary_left
     96  f581		       e0 01		      cpx	#1
     97  f583		       b0 05		      bcs	.spider_control_boundary_right
     98  f585		       a2 01		      ldx	#1
     99  f587		       4c 90 f5 	      jmp	.spider_control_boundary_top
    100  f58a
    101  f58a				   .spider_control_boundary_right
    102  f58a		       e0 7f		      cpx	#KERNEL_WIDTH/2-(SPIDER_SIZE*2)-1
    103  f58c		       90 02		      bcc	.spider_control_boundary_top
    104  f58e		       a2 7f		      ldx	#KERNEL_WIDTH/2-(SPIDER_SIZE*2)-1
    105  f590
    106  f590				   .spider_control_boundary_top
    107  f590		       c0 0d		      cpy	#SCORE_LINES
    108  f592		       b0 05		      bcs	.spider_control_boundary_bottom
    109  f594		       a0 0d		      ldy	#SCORE_LINES
    110  f596		       4c 9f f5 	      jmp	.spider_control_store
    111  f599
    112  f599				   .spider_control_boundary_bottom
    113  f599		       c0 a0		      cpy	#KERNEL_SCANLINES-(SPIDER_SIZE*2)
    114  f59b		       90 02		      bcc	.spider_control_store
    115  f59d		       a0 a0		      ldy	#KERNEL_SCANLINES-(SPIDER_SIZE*2)
    116  f59f
    117  f59f				   .spider_control_store
    118  f59f							; Store new position
    119  f59f		       86 98		      stx	SpiderPos
    120  f5a1		       84 99		      sty	SpiderPos+1
    121  f5a3
    122  f5a3				   .spider_control_sprite_assign
    123  f5a3							; Skip if no change
    124  f5a3		       c9 00		      cmp	#%00000000
    125  f5a5		       f0 75		      beq	.spider_control_return
    126  f5a7
    127  f5a7				   .spider_control_sprite_assign_left
    128  f5a7		       c9 80		      cmp	#%10000000
    129  f5a9		       d0 0b		      bne	.spider_control_sprite_assign_right
      0  f5ab					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*6
      1  f5ab				   .POINTER   SET	SpiderPtr
      2  f5ab				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*6
      3  f5ab
      4  f5ab		       a9 ae		      LDA	#<.ADDRESS
      5  f5ad		       85 96		      STA	.POINTER
      6  f5af		       a9 f6		      LDA	#>.ADDRESS
      7  f5b1		       85 97		      STA	.POINTER+1
      8  f5b3
    131  f5b3		       4c 1c f6 	      jmp	.spider_control_return
    132  f5b6
    133  f5b6				   .spider_control_sprite_assign_right
    134  f5b6		       c9 40		      cmp	#%01000000
    135  f5b8		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f5ba					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f5ba				   .POINTER   SET	SpiderPtr
      2  f5ba				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f5ba
      4  f5ba		       a9 8e		      LDA	#<.ADDRESS
      5  f5bc		       85 96		      STA	.POINTER
      6  f5be		       a9 f6		      LDA	#>.ADDRESS
      7  f5c0		       85 97		      STA	.POINTER+1
      8  f5c2
    137  f5c2		       4c 1c f6 	      jmp	.spider_control_return
    138  f5c5
    139  f5c5				   .spider_control_sprite_assign_top
    140  f5c5		       c9 20		      cmp	#%00100000
    141  f5c7		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f5c9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f5c9				   .POINTER   SET	SpiderPtr
      2  f5c9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f5c9
      4  f5c9		       a9 7e		      LDA	#<.ADDRESS
      5  f5cb		       85 96		      STA	.POINTER
      6  f5cd		       a9 f6		      LDA	#>.ADDRESS
      7  f5cf		       85 97		      STA	.POINTER+1
      8  f5d1
    143  f5d1		       4c 1c f6 	      jmp	.spider_control_return
    144  f5d4
    145  f5d4				   .spider_control_sprite_assign_bottom
    146  f5d4		       c9 10		      cmp	#%00010000
    147  f5d6		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f5d8					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f5d8				   .POINTER   SET	SpiderPtr
      2  f5d8				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f5d8
      4  f5d8		       a9 9e		      LDA	#<.ADDRESS
      5  f5da		       85 96		      STA	.POINTER
      6  f5dc		       a9 f6		      LDA	#>.ADDRESS
      7  f5de		       85 97		      STA	.POINTER+1
      8  f5e0
    149  f5e0		       4c 1c f6 	      jmp	.spider_control_return
    150  f5e3
    151  f5e3				   .spider_control_sprite_assign_top_right
    152  f5e3		       c9 60		      cmp	#%01100000
    153  f5e5		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f5e7					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f5e7				   .POINTER   SET	SpiderPtr
      2  f5e7				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f5e7
      4  f5e7		       a9 86		      LDA	#<.ADDRESS
      5  f5e9		       85 96		      STA	.POINTER
      6  f5eb		       a9 f6		      LDA	#>.ADDRESS
      7  f5ed		       85 97		      STA	.POINTER+1
      8  f5ef
    155  f5ef		       4c 1c f6 	      jmp	.spider_control_return
    156  f5f2
    157  f5f2				   .spider_control_sprite_assign_bottom_right
    158  f5f2		       c9 50		      cmp	#%01010000
    159  f5f4		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f5f6					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f5f6				   .POINTER   SET	SpiderPtr
      2  f5f6				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f5f6
      4  f5f6		       a9 96		      LDA	#<.ADDRESS
      5  f5f8		       85 96		      STA	.POINTER
      6  f5fa		       a9 f6		      LDA	#>.ADDRESS
      7  f5fc		       85 97		      STA	.POINTER+1
      8  f5fe
    161  f5fe		       4c 1c f6 	      jmp	.spider_control_return
    162  f601
    163  f601				   .spider_control_sprite_assign_bottom_left
    164  f601		       c9 90		      cmp	#%10010000
    165  f603		       d0 0b		      bne	.spider_control_sprite_assign_top_left
      0  f605					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*5
      1  f605				   .POINTER   SET	SpiderPtr
      2  f605				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*5
      3  f605
      4  f605		       a9 a6		      LDA	#<.ADDRESS
      5  f607		       85 96		      STA	.POINTER
      6  f609		       a9 f6		      LDA	#>.ADDRESS
      7  f60b		       85 97		      STA	.POINTER+1
      8  f60d
    167  f60d		       4c 1c f6 	      jmp	.spider_control_return
    168  f610
    169  f610				   .spider_control_sprite_assign_top_left
    170  f610		       c9 a0		      cmp	#%10100000
    171  f612		       d0 08		      bne	.spider_control_return
      0  f614					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*7
      1  f614				   .POINTER   SET	SpiderPtr
      2  f614				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*7
      3  f614
      4  f614		       a9 b6		      LDA	#<.ADDRESS
      5  f616		       85 96		      STA	.POINTER
      6  f618		       a9 f6		      LDA	#>.ADDRESS
      7  f61a		       85 97		      STA	.POINTER+1
      8  f61c
    173  f61c
    174  f61c				   .spider_control_return
    175  f61c		       60		      rts
    176  f61d
    177  f61d				   SpiderPosition
    178  f61d
    179  f61d							; Set Position
    180  f61d		       a2 00		      ldx	#0	; Object (player0)
    181  f61f		       a5 98		      lda	SpiderPos	; X Position
    182  f621		       20 00 f0 	      jsr	PosObject
    183  f624
    184  f624		       60		      rts
    185  f625
    186  f625							; Scanline Draw
    187  f625
    188  f625				   SpiderDrawStart
    189  f625
    190  f625							; Set player 0 to be double size
    191  f625							; and missile 0 to be 4 clock size
    192  f625		       18		      clc
    193  f626		       a5 04		      lda	NUSIZ0
    194  f628							;    and #%11001000
    195  f628		       09 37		      ora	#%00110111
    196  f62a		       85 04		      sta	NUSIZ0
    197  f62c
    198  f62c							; Set sprite color
    199  f62c		       a9 56		      lda	#SPIDER_COLOR
    200  f62e		       85 06		      sta	COLUP0
    201  f630
    202  f630							; Determine if we need to use vertical delay (odd line)
    203  f630		       a5 99		      lda	SpiderPos+1	; Y Position
    204  f632		       4a		      lsr
    205  f633		       b0 05		      bcs	.spider_draw_start_nodelay
    206  f635
    207  f635		       a0 01		      ldy	#1
    208  f637		       4c 3c f6 	      jmp	.spider_draw_start_set_delay
    209  f63a
    210  f63a				   .spider_draw_start_nodelay
    211  f63a		       a0 00		      ldy	#0
    212  f63c
    213  f63c				   .spider_draw_start_set_delay
    214  f63c		       84 25		      sty	VDELP0
    215  f63e
    216  f63e				   .spider_draw_start_pos
    217  f63e							; Calculate starting position
    218  f63e		       18		      clc
    219  f63f		       69 10		      adc	#SPIDER_SIZE
    220  f641		       85 9c		      sta	SpiderDrawPos
    221  f643
    222  f643							; Initialize sprite index
    223  f643		       a9 00		      lda	#0
    224  f645		       85 9b		      sta	SpiderIndex
    225  f647
    226  f647		       60		      rts
    227  f648
    228  f648				   SpiderDraw
    229  f648
    230  f648		       a4 9b		      ldy	SpiderIndex
    231  f64a		       c0 10		      cpy	#(SPIDER_SPRITE_SIZE*2)
    232  f64c		       f0 1f		      beq	.spider_draw_blank	; At end of sprite
    233  f64e		       b0 28		      bcs	.spider_draw_return	; Completed drawing sprite
    234  f650		       c0 00		      cpy	#0
    235  f652		       d0 06		      bne	.spider_draw_line
    236  f654
    237  f654							; Divide y in half
    238  f654		       8a		      txa
    239  f655		       4a		      lsr
    240  f656
    241  f656		       e5 9c		      sbc	SpiderDrawPos
    242  f658		       10 1e		      bpl	.spider_draw_return	; Not yet to draw sprite
    243  f65a
    244  f65a				   .spider_draw_line
    245  f65a		       98		      tya
    246  f65b		       4a		      lsr
    247  f65c		       b0 09		      bcs	.spider_draw_skip
    248  f65e		       a8		      tay
    249  f65f
    250  f65f		       b1 96		      lda	(SpiderPtr),y
    251  f661		       85 1b		      sta	GRP0
    252  f663
    253  f663							; Using this for now until we have another sprite
    254  f663		       a9 00		      lda	#0
    255  f665		       85 1c		      sta	GRP1
    256  f667
    257  f667				   .spider_draw_skip
    258  f667		       a4 9b		      ldy	SpiderIndex
    259  f669		       c8		      iny
    260  f66a		       84 9b		      sty	SpiderIndex
    261  f66c		       60		      rts		; Early return
    262  f66d
    263  f66d				   .spider_draw_blank
    264  f66d		       a9 00		      lda	#0
    265  f66f		       85 1b		      sta	GRP0
    266  f671
    267  f671							; Using this for now until we have another sprite
    268  f671		       a9 00		      lda	#0
    269  f673		       85 1c		      sta	GRP1
    270  f675
    271  f675							; Push index to be one above
    272  f675		       c8		      iny
    273  f676		       84 9b		      sty	SpiderIndex
    274  f678
    275  f678				   .spider_draw_return
    276  f678		       60		      rts
    277  f679
    278  f679				   SpiderClean
    279  f679
    280  f679							; Clear out Player0 sprite
    281  f679		       a9 00		      lda	#0
    282  f67b		       85 1b		      sta	GRP0
    283  f67d
    284  f67d		       60		      rts
    285  f67e
    286  f67e							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f67e					      include	"objects/spider_sprite.asm"
      1  f67e				   SpiderSprite
      2  f67e
      3  f67e		       99		      .BYTE.b	%10011001
      4  f67f		       bd		      .BYTE.b	%10111101
      5  f680		       99		      .BYTE.b	%10011001
      6  f681		       7e		      .BYTE.b	%01111110
      7  f682		       3c		      .BYTE.b	%00111100
      8  f683		       7e		      .BYTE.b	%01111110
      9  f684		       bd		      .BYTE.b	%10111101
     10  f685		       99		      .BYTE.b	%10011001
     11  f686
     12  f686		       0b		      .BYTE.b	%00001011
     13  f687		       13		      .BYTE.b	%00010011
     14  f688		       1c		      .BYTE.b	%00011100
     15  f689		       2d		      .BYTE.b	%00101101
     16  f68a		       f6		      .BYTE.b	%11110110
     17  f68b		       b8		      .BYTE.b	%10111000
     18  f68c		       10		      .BYTE.b	%00010000
     19  f68d		       30		      .BYTE.b	%00110000
     20  f68e
     21  f68e		       c7		      .BYTE.b	%11000111
     22  f68f		       28		      .BYTE.b	%00101000
     23  f690		       7a		      .BYTE.b	%01111010
     24  f691		       ff		      .BYTE.b	%11111111
     25  f692		       ff		      .BYTE.b	%11111111
     26  f693		       7a		      .BYTE.b	%01111010
     27  f694		       28		      .BYTE.b	%00101000
     28  f695		       c7		      .BYTE.b	%11000111
     29  f696
     30  f696		       30		      .BYTE.b	%00110000
     31  f697		       10		      .BYTE.b	%00010000
     32  f698		       b8		      .BYTE.b	%10111000
     33  f699		       f6		      .BYTE.b	%11110110
     34  f69a		       2d		      .BYTE.b	%00101101
     35  f69b		       1c		      .BYTE.b	%00011100
     36  f69c		       13		      .BYTE.b	%00010011
     37  f69d		       0b		      .BYTE.b	%00001011
     38  f69e
     39  f69e		       99		      .BYTE.b	%10011001
     40  f69f		       bd		      .BYTE.b	%10111101
     41  f6a0		       7e		      .BYTE.b	%01111110
     42  f6a1		       3c		      .BYTE.b	%00111100
     43  f6a2		       7e		      .BYTE.b	%01111110
     44  f6a3		       99		      .BYTE.b	%10011001
     45  f6a4		       bd		      .BYTE.b	%10111101
     46  f6a5		       99		      .BYTE.b	%10011001
     47  f6a6
     48  f6a6		       0c		      .BYTE.b	%00001100
     49  f6a7		       08		      .BYTE.b	%00001000
     50  f6a8		       1d		      .BYTE.b	%00011101
     51  f6a9		       6f		      .BYTE.b	%01101111
     52  f6aa		       b4		      .BYTE.b	%10110100
     53  f6ab		       38		      .BYTE.b	%00111000
     54  f6ac		       c8		      .BYTE.b	%11001000
     55  f6ad		       d0		      .BYTE.b	%11010000
     56  f6ae
     57  f6ae		       e3		      .BYTE.b	%11100011
     58  f6af		       14		      .BYTE.b	%00010100
     59  f6b0		       5e		      .BYTE.b	%01011110
     60  f6b1		       ff		      .BYTE.b	%11111111
     61  f6b2		       ff		      .BYTE.b	%11111111
     62  f6b3		       5e		      .BYTE.b	%01011110
     63  f6b4		       14		      .BYTE.b	%00010100
     64  f6b5		       e3		      .BYTE.b	%11100011
     65  f6b6
     66  f6b6		       d0		      .BYTE.b	%11010000
     67  f6b7		       c8		      .BYTE.b	%11001000
     68  f6b8		       38		      .BYTE.b	%00111000
     69  f6b9		       b4		      .BYTE.b	%10110100
     70  f6ba		       6f		      .BYTE.b	%01101111
     71  f6bb		       1d		      .BYTE.b	%00011101
     72  f6bc		       08		      .BYTE.b	%00001000
     73  f6bd		       0c		      .BYTE.b	%00001100
------- FILE objects/spider.asm
------- FILE game.asm
     10  f6be							;    include "objects/line.asm"
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f6be					      include	"objects/bug.asm"
      1  f6be							;======================
      2  f6be							; Bugs (missiles 0 & 1)
      3  f6be							;======================
      4  f6be
      5  f6be							; Constants
      6  f6be
      7  f6be		       00 08	   BUG_SIZE   =	8
      8  f6be		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f6be		       00 02	   BUG_SPEED  =	2
     10  f6be
     11  f6be		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     12  f6be		       00 38	   BUG_COLOR_CAPTURE =	#$38
     13  f6be
     14  f6be							; Initialization
     15  f6be
     16  f6be				   BugInit
     17  f6be
     18  f6be							; Initialize Position
     19  f6be		       a2 01		      ldx	#1
     20  f6c0
     21  f6c0				   .bug_init_pos
     22  f6c0		       20 13 f0 	      jsr	Random
     23  f6c3
     24  f6c3		       a5 82		      lda	Rand8
     25  f6c5		       29 7f		      and	#$7f
     26  f6c7		       95 a6		      sta	BugPosX,x
     27  f6c9
     28  f6c9		       a5 83		      lda	Rand16
     29  f6cb		       29 7f		      and	#$7f
     30  f6cd		       95 a8		      sta	BugPosY,x
     31  f6cf
     32  f6cf		       ca		      dex
     33  f6d0		       10 ee		      bpl	.bug_init_pos
     34  f6d2
     35  f6d2		       a9 01		      lda	#1
     36  f6d4		       85 a4		      sta	BugEnabled+0
     37  f6d6		       85 a5		      sta	BugEnabled+1
     38  f6d8
     39  f6d8		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     40  f6da		       85 aa		      sta	BugColor+0
     41  f6dc		       85 ab		      sta	BugColor+1
     42  f6de
     43  f6de		       60		      rts
     44  f6df
     45  f6df							; Frame Update
     46  f6df
     47  f6df				   BugUpdate
     48  f6df
     49  f6df		       a2 01		      ldx	#1
     50  f6e1				   .bug_update
     51  f6e1		       86 80		      stx	Temp+0
     52  f6e3
     53  f6e3		       20 ec f6 	      jsr	BugMovement
     54  f6e6
     55  f6e6		       a6 80		      ldx	Temp+0
     56  f6e8		       ca		      dex
     57  f6e9		       10 f6		      bpl	.bug_update
     58  f6eb
     59  f6eb		       60		      rts
     60  f6ec
     61  f6ec				   BugMovement
     62  f6ec
     63  f6ec		       a6 80		      ldx	Temp+0
     64  f6ee		       b5 a4		      lda	BugEnabled,x
     65  f6f0		       c9 01		      cmp	#1
     66  f6f2		       d0 52		      bne	.bug_movement_return
     67  f6f4
     68  f6f4				   .bug_movement_random
     69  f6f4		       20 13 f0 	      jsr	Random
     70  f6f7		       29 03		      and	#%00000011
     71  f6f9		       85 81		      sta	Temp+1
     72  f6fb
     73  f6fb				   .bug_movement_load
     74  f6fb							; Load x and y values
     75  f6fb		       a6 80		      ldx	Temp+0
     76  f6fd		       b5 a6		      lda	BugPosX,x
     77  f6ff		       b4 a8		      ldy	BugPosY,x
     78  f701		       aa		      tax
     79  f702
     80  f702				   .bug_movement_x
     81  f702							; Alter X Position
     82  f702		       a5 81		      lda	Temp+1
     83  f704		       29 01		      and	#%00000001
     84  f706
     85  f706				   .bug_movement_x_left
     86  f706		       c9 01		      cmp	#1
     87  f708		       d0 05		      bne	.bug_movement_x_right
     88  f70a		       ca		      dex
     89  f70b		       ca		      dex
     90  f70c		       4c 11 f7 	      jmp	.bug_movement_y
     91  f70f
     92  f70f				   .bug_movement_x_right
     93  f70f		       e8		      inx
     94  f710		       e8		      inx
     95  f711
     96  f711				   .bug_movement_y
     97  f711							; Alter Y Position
     98  f711		       a5 81		      lda	Temp+1
     99  f713		       29 02		      and	#%00000010
    100  f715		       4a		      lsr
    101  f716
    102  f716				   .bug_movement_y_up
    103  f716		       c9 01		      cmp	#1
    104  f718		       d0 05		      bne	.bug_movement_y_down
    105  f71a		       c8		      iny
    106  f71b		       c8		      iny
    107  f71c		       4c 21 f7 	      jmp	.bug_movement_boundary
    108  f71f
    109  f71f				   .bug_movement_y_down
    110  f71f		       88		      dey
    111  f720		       88		      dey
    112  f721
    113  f721				   .bug_movement_boundary
    114  f721
    115  f721				   .bug_movement_boundary_left
    116  f721		       e0 08		      cpx	#BUG_BOUNDARY
    117  f723		       b0 05		      bcs	.bug_movement_boundary_right
    118  f725		       a2 08		      ldx	#BUG_BOUNDARY
    119  f727		       4c 30 f7 	      jmp	.bug_movement_boundary_top
    120  f72a
    121  f72a				   .bug_movement_boundary_right
    122  f72a		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    123  f72c		       90 02		      bcc	.bug_movement_boundary_top
    124  f72e		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    125  f730
    126  f730				   .bug_movement_boundary_top
    127  f730		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    128  f732		       b0 05		      bcs	.bug_movement_boundary_bottom
    129  f734		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    130  f736		       4c 3f f7 	      jmp	.bug_movement_store
    131  f739
    132  f739				   .bug_movement_boundary_bottom
    133  f739		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    134  f73b		       90 02		      bcc	.bug_movement_store
    135  f73d		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    136  f73f
    137  f73f				   .bug_movement_store
    138  f73f		       8a		      txa
    139  f740		       a6 80		      ldx	Temp+0
    140  f742		       95 a6		      sta	BugPosX,x
    141  f744		       94 a8		      sty	BugPosY,x
    142  f746
    143  f746				   .bug_movement_return
    144  f746		       60		      rts
    145  f747
    146  f747							; Horizontal Positioning
    147  f747
    148  f747				   BugPosition
    149  f747
    150  f747							; Set Position of each missile
    151  f747		       a0 01		      ldy	#1
    152  f749				   .bug_position
    153  f749
    154  f749							; Determine missile index
    155  f749		       18		      clc
    156  f74a		       a2 02		      ldx	#2	; Missile 0/1
    157  f74c		       98		      tya
    158  f74d		       85 80		      sta	Temp
    159  f74f		       8a		      txa
    160  f750		       65 80		      adc	Temp
    161  f752		       aa		      tax
    162  f753
    163  f753		       b9 a6 00 	      lda	BugPosX,y
    164  f756		       20 00 f0 	      jsr	PosObject
    165  f759
    166  f759		       88		      dey
    167  f75a		       10 ed		      bpl	.bug_position
    168  f75c
    169  f75c		       60		      rts
    170  f75d
    171  f75d							; Scanline Draw
    172  f75d
    173  f75d				   BugDrawStart
    174  f75d
    175  f75d							; Setup half scanline positions
    176  f75d		       a0 01		      ldy	#1
    177  f75f				   .bug_draw_start_pos
    178  f75f		       b9 a8 00 	      lda	BugPosY,y
    179  f762		       4a		      lsr
    180  f763		       99 ac 00 	      sta	BugDrawPosBottom,y
    181  f766
    182  f766		       69 04		      adc	#BUG_SIZE/2
    183  f768		       99 ae 00 	      sta	BugDrawPosTop,y
    184  f76b
    185  f76b		       88		      dey
    186  f76c		       10 f1		      bpl	.bug_draw_start_pos
    187  f76e
    188  f76e		       60		      rts
    189  f76f
    190  f76f				   BugDraw
    191  f76f
    192  f76f		       a0 00		      ldy	#0
    193  f771				   .bug_draw
    194  f771		       b9 a4 00 	      lda	BugEnabled,y
    195  f774		       c9 01		      cmp	#1
    196  f776		       d0 27		      bne	.bug_draw_return
    197  f778
    198  f778							; Divide scanline in half
    199  f778		       8a		      txa
    200  f779		       4a		      lsr
    201  f77a
    202  f77a		       d9 ae 00 	      cmp	BugDrawPosTop,y
    203  f77d		       f0 08		      beq	.bug_draw_start
    204  f77f
    205  f77f		       d9 ac 00 	      cmp	BugDrawPosBottom,y
    206  f782		       f0 11		      beq	.bug_draw_end
    207  f784
    208  f784		       4c 9f f7 	      jmp	.bug_draw_return
    209  f787
    210  f787				   .bug_draw_start
    211  f787		       b9 aa 00 	      lda	BugColor,y
    212  f78a		       99 06 00 	      sta	COLUP0,y
    213  f78d
    214  f78d		       a9 02		      lda	#%00000010
    215  f78f		       99 1d 00 	      sta	ENAM0,y
    216  f792		       4c 9f f7 	      jmp	.bug_draw_return
    217  f795
    218  f795				   .bug_draw_end
    219  f795		       a9 00		      lda	#%00000000
    220  f797		       99 1d 00 	      sta	ENAM0,y
    221  f79a
    222  f79a		       a9 56		      lda	#SPIDER_COLOR
    223  f79c		       99 06 00 	      sta	COLUP0,y
    224  f79f
    225  f79f				   .bug_draw_return
    226  f79f		       88		      dey
    227  f7a0		       10 cf		      bpl	.bug_draw
    228  f7a2
    229  f7a2		       60		      rts
    230  f7a3
    231  f7a3				   BugClean
    232  f7a3		       a9 00		      lda	#0
    233  f7a5		       85 1d		      sta	ENAM0
    234  f7a7		       60		      rts
------- FILE game.asm
     12  f7a8							;    include "objects/swatter.asm"
     13  f7a8
     14  f7a8							; Initialization
     15  f7a8
     16  f7a8				   GameInit
     17  f7a8
     18  f7a8							; Setup logic and kernel
      0  f7a8					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  f7a8				   .POINTER   SET	VBlankPtr
      2  f7a8				   .ADDRESS   SET	GameVerticalBlank
      3  f7a8
      4  f7a8		       a9 d5		      LDA	#<.ADDRESS
      5  f7aa		       85 84		      STA	.POINTER
      6  f7ac		       a9 f7		      LDA	#>.ADDRESS
      7  f7ae		       85 85		      STA	.POINTER+1
      8  f7b0
      0  f7b0					      SET_POINTER	KernelPtr, GameKernel
      1  f7b0				   .POINTER   SET	KernelPtr
      2  f7b0				   .ADDRESS   SET	GameKernel
      3  f7b0
      4  f7b0		       a9 ef		      LDA	#<.ADDRESS
      5  f7b2		       85 86		      STA	.POINTER
      6  f7b4		       a9 f7		      LDA	#>.ADDRESS
      7  f7b6		       85 87		      STA	.POINTER+1
      8  f7b8
      0  f7b8					      SET_POINTER	OverScanPtr, GameOverScan
      1  f7b8				   .POINTER   SET	OverScanPtr
      2  f7b8				   .ADDRESS   SET	GameOverScan
      3  f7b8
      4  f7b8		       a9 ee		      LDA	#<.ADDRESS
      5  f7ba		       85 88		      STA	.POINTER
      6  f7bc		       a9 f7		      LDA	#>.ADDRESS
      7  f7be		       85 89		      STA	.POINTER+1
      8  f7c0
     22  f7c0
     23  f7c0							; Mute Audio
     24  f7c0		       a9 00		      lda	#0
     25  f7c2		       85 15		      sta	AUDC0
     26  f7c4		       85 19		      sta	AUDV0
     27  f7c6		       85 17		      sta	AUDF0
     28  f7c8		       85 16		      sta	AUDC1
     29  f7ca		       85 1a		      sta	AUDV1
     30  f7cc		       85 18		      sta	AUDF1
     31  f7ce
     32  f7ce							; Initialize Objects
     33  f7ce		       20 32 f5 	      jsr	SpiderInit
     34  f7d1							;    jsr LineInit
     35  f7d1		       20 be f6 	      jsr	BugInit
     36  f7d4							;    jsr SwatterInit
     37  f7d4
     38  f7d4		       60		      rts
     39  f7d5
     40  f7d5				   GameVerticalBlank
     41  f7d5
     42  f7d5							; Refresh random values
     43  f7d5		       20 13 f0 	      jsr	Random
     44  f7d8
     45  f7d8							; Update Objects
     46  f7d8		       20 41 f5 	      jsr	SpiderUpdate
     47  f7db							;    jsr LineUpdate
     48  f7db		       20 df f6 	      jsr	BugUpdate
     49  f7de							;    jsr SwatterUpdate
     50  f7de		       20 c3 f3 	      jsr	ScoreUpdate
     51  f7e1
     52  f7e1							; Clear horizontal movement
     53  f7e1		       85 2b		      sta	HMCLR
     54  f7e3
     55  f7e3							; Update Positions
     56  f7e3		       20 1d f6 	      jsr	SpiderPosition
     57  f7e6							;    jsr LinePosition
     58  f7e6		       20 47 f7 	      jsr	BugPosition
     59  f7e9
     60  f7e9							; Set final x positions
     61  f7e9		       85 02		      sta	WSYNC
     62  f7eb		       85 2a		      sta	HMOVE
     63  f7ed
     64  f7ed		       60		      rts
     65  f7ee
     66  f7ee				   GameOverScan
     67  f7ee							; Do nothing at the moment
     68  f7ee							; Room for some updating...
     69  f7ee		       60		      rts
     70  f7ef
     71  f7ef				   GameKernel
     72  f7ef
     73  f7ef							; Turn on display
     74  f7ef		       a9 00		      lda	#0
     75  f7f1		       85 01		      sta	VBLANK
     76  f7f3
     77  f7f3				   .game_kernel_score
     78  f7f3
     79  f7f3							; Draw Score on top first
     80  f7f3		       20 f5 f3 	      jsr	ScoreDraw
     81  f7f6
     82  f7f6				   .game_kernel_objects_start
     83  f7f6
     84  f7f6							; Start Scanline Counter
     85  f7f6		       a2 b3		      ldx	#KERNEL_SCANLINES-SCORE_LINES
     86  f7f8
     87  f7f8							; Setup Drawing Objects
     88  f7f8		       20 a9 f4 	      jsr	WebDrawStart
     89  f7fb		       20 25 f6 	      jsr	SpiderDrawStart
     90  f7fe							;    jsr LineDrawStart
     91  f7fe		       20 5d f7 	      jsr	BugDrawStart
     92  f801
     93  f801				   .game_kernel_objects
     94  f801
     95  f801							; Draw Objects in order
     96  f801
     97  f801		       20 ba f4 	      jsr	WebDraw	; Every 6 lines
     98  f804							;    jsr LineDraw
     99  f804		       20 6f f7 	      jsr	BugDraw
    100  f807
    101  f807		       85 02		      sta	WSYNC
    102  f809		       ca		      dex
    103  f80a		       f0 28		      beq	.game_kernel_clean
    104  f80c
    105  f80c		       20 48 f6 	      jsr	SpiderDraw	; Every odd scanline
    106  f80f
    107  f80f		       85 02		      sta	WSYNC
    108  f811		       ca		      dex
    109  f812		       f0 20		      beq	.game_kernel_clean
    110  f814
    111  f814							;    jsr LineDraw
    112  f814		       20 6f f7 	      jsr	BugDraw
    113  f817
    114  f817		       85 02		      sta	WSYNC
    115  f819		       ca		      dex
    116  f81a		       f0 18		      beq	.game_kernel_clean
    117  f81c
    118  f81c		       20 48 f6 	      jsr	SpiderDraw
    119  f81f
    120  f81f		       85 02		      sta	WSYNC
    121  f821		       ca		      dex
    122  f822		       f0 10		      beq	.game_kernel_clean
    123  f824
    124  f824							;    jsr LineDraw
    125  f824		       20 6f f7 	      jsr	BugDraw
    126  f827
    127  f827		       85 02		      sta	WSYNC
    128  f829		       ca		      dex
    129  f82a		       f0 08		      beq	.game_kernel_clean
    130  f82c
    131  f82c		       20 48 f6 	      jsr	SpiderDraw
    132  f82f
    133  f82f		       85 02		      sta	WSYNC
    134  f831		       ca		      dex
    135  f832		       d0 cd		      bne	.game_kernel_objects
    136  f834
    137  f834				   .game_kernel_clean
    138  f834
    139  f834		       20 cf f4 	      jsr	WebClean
    140  f837		       20 79 f6 	      jsr	SpiderClean
    141  f83a							;    jsr LineClean
    142  f83a		       20 a3 f7 	      jsr	BugClean
    143  f83d
    144  f83d		       85 02		      sta	WSYNC
    145  f83f
    146  f83f				   .game_kernel_return
    147  f83f		       60		      rts
------- FILE kernel.asm
    261  f840
    262  f840							;================
    263  f840							; End of cart
    264  f840							;================
    265  f840
    266  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    267  fffa
    268  fffa				   InterruptVectors
    269  fffa
    270  fffa		       21 f0		      .word.w	InitSystem	; NMI
    271  fffc		       21 f0		      .word.w	InitSystem	; RESET
    272  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    273  10000
    274  10000					       END
