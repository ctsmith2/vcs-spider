------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 11th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00cd ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00 00    Temp       ds	3
     61 U0086		       00	   Rand8      ds	1
     62 U0087		       00	   Rand16     ds	1
     63 U0088
     64 U0088		       00 00	   VBlankPtr  ds	2
     65 U008a		       00 00	   KernelPtr  ds	2
     66 U008c		       00 00	   OverScanPtr ds	2
     67 U008e
     68 U008e		       00	   Frame      ds	1
     69 U008f		       00 00	   FrameTimer ds	2
     70 U0091		       00	   InputState ds	1
     71 U0092
     72 U0092		       00	   AudioStep  ds	1
     73 U0093
     74 U0093		       00	   SampleStep ds	1
     75 U0094
     76 U0094							; Score
     77 U0094
     78 U0094		       00 00	   ScoreValue ds	2
     79 U0096		       00 00	   ScoreDigitOnes ds	2
     80 U0098		       00 00	   ScoreDigitTens ds	2
     81 U009a		       00 00 00    ScoreDigitGfx ds	3
     82 U009d		       00 00	   ScoreBarGfx ds	2
     83 U009f
     84 U009f							; Level
     85 U009f		       00	   LevelCurrent ds	1
     86 U00a0
     87 U00a0							; Web
     88 U00a0
     89 U00a0		       00	   WebIndex   ds	1
     90 U00a1		       00 00	   WebColor   ds	2
     91 U00a3
     92 U00a3							; Spider
     93 U00a3
     94 U00a3		       00 00	   SpiderPtr  ds	2
     95 U00a5		       00 00	   SpiderPos  ds	2
     96 U00a7		       00	   SpiderCtrl ds	1
     97 U00a8		       00	   SpiderColor ds	1
     98 U00a9
     99 U00a9		       00	   SpiderIndex ds	1
    100 U00aa		       00	   SpiderDrawPos ds	1
    101 U00ab		       00	   SpiderLine ds	1
    102 U00ac
    103 U00ac		       00 00	   SpiderPtr2 ds	2
    104 U00ae
    105 U00ae							; Line
    106 U00ae
    107 U00ae		       00	   LineEnabled ds	1
    108 U00af		       00 00	   LinePos    ds	2
    109 U00b1		       00 00	   LineVelocity ds	2
    110 U00b3		       00 00	   LineStartPos ds	2
    111 U00b5		       00 00	   LineDrawPos ds	2
    112 U00b7
    113 U00b7							; Bug
    114 U00b7
    115 U00b7		       00	   BugSpeed   ds	1
    116 U00b8
    117 U00b8		       00 00	   BugStunned ds	2
    118 U00ba		       00 00	   BugPosX    ds	2
    119 U00bc		       00 00	   BugPosY    ds	2
    120 U00be
    121 U00be		       00 00	   BugDrawPosBottom ds	2
    122 U00c0		       00 00	   BugDrawPosTop ds	2
    123 U00c2
    124 U00c2							; Swatter
    125 U00c2
    126 U00c2		       00 00	   SwatterPos ds	2
    127 U00c4		       00	   SwatterState ds	1
    128 U00c5		       00	   SwatterColor ds	1
    129 U00c6
    130 U00c6		       00	   SwatterWaitTime ds	1
    131 U00c7		       00	   SwatterHitDamage ds	1
    132 U00c8
    133 U00c8		       00	   SwatterIndex ds	1
    134 U00c9		       00	   SwatterDrawPos ds	1
    135 U00ca		       00	   SwatterLine ds	1
    136 U00cb
    137 U00cb		       00	   SwatterSampleCount ds	1
    138 U00cc		       00	   SwatterSampleF ds	1
    139 U00cd
    140  10000 ????				       SEG
    141  f000					      org	$F000	; Start of cart area
    142  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 86		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 87		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 86		      sta	Rand8
     49  f01e		       45 87		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 83		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 84		      sta	Temp+1
     70  f029		       85 85		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 83		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 84		      lda	Temp+1	; And add into result
     77  f031		       65 84		      adc	Temp+1
     78  f033		       85 84		      sta	Temp+1
     79  f035
     80  f035		       a5 85		      lda	Temp+2	; Propagating any carry
     81  f037		       65 85		      adc	Temp+2
     82  f039		       85 85		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 84		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 85		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    144  f044
    145  f044							; Assets
    146  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    150  f0bc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0bc					      include	"objects/score_digits.asm"
      1  f0bc				   ScoreDigits
      2  f0bc
      3  f0bc		       77		      .BYTE.b	%01110111
      4  f0bd		       55		      .BYTE.b	%01010101
      5  f0be		       55		      .BYTE.b	%01010101
      6  f0bf		       55		      .BYTE.b	%01010101
      7  f0c0		       77		      .BYTE.b	%01110111
      8  f0c1
      9  f0c1		       11		      .BYTE.b	%00010001
     10  f0c2		       11		      .BYTE.b	%00010001
     11  f0c3		       11		      .BYTE.b	%00010001
     12  f0c4		       11		      .BYTE.b	%00010001
     13  f0c5		       11		      .BYTE.b	%00010001
     14  f0c6
     15  f0c6		       77		      .BYTE.b	%01110111
     16  f0c7		       11		      .BYTE.b	%00010001
     17  f0c8		       77		      .BYTE.b	%01110111
     18  f0c9		       44		      .BYTE.b	%01000100
     19  f0ca		       77		      .BYTE.b	%01110111
     20  f0cb
     21  f0cb		       77		      .BYTE.b	%01110111
     22  f0cc		       11		      .BYTE.b	%00010001
     23  f0cd		       33		      .BYTE.b	%00110011
     24  f0ce		       11		      .BYTE.b	%00010001
     25  f0cf		       77		      .BYTE.b	%01110111
     26  f0d0
     27  f0d0		       55		      .BYTE.b	%01010101
     28  f0d1		       55		      .BYTE.b	%01010101
     29  f0d2		       77		      .BYTE.b	%01110111
     30  f0d3		       11		      .BYTE.b	%00010001
     31  f0d4		       11		      .BYTE.b	%00010001
     32  f0d5
     33  f0d5		       77		      .BYTE.b	%01110111
     34  f0d6		       44		      .BYTE.b	%01000100
     35  f0d7		       77		      .BYTE.b	%01110111
     36  f0d8		       11		      .BYTE.b	%00010001
     37  f0d9		       77		      .BYTE.b	%01110111
     38  f0da
     39  f0da		       77		      .BYTE.b	%01110111
     40  f0db		       44		      .BYTE.b	%01000100
     41  f0dc		       77		      .BYTE.b	%01110111
     42  f0dd		       55		      .BYTE.b	%01010101
     43  f0de		       77		      .BYTE.b	%01110111
     44  f0df
     45  f0df		       77		      .BYTE.b	%01110111
     46  f0e0		       11		      .BYTE.b	%00010001
     47  f0e1		       22		      .BYTE.b	%00100010
     48  f0e2		       22		      .BYTE.b	%00100010
     49  f0e3		       22		      .BYTE.b	%00100010
     50  f0e4
     51  f0e4		       77		      .BYTE.b	%01110111
     52  f0e5		       55		      .BYTE.b	%01010101
     53  f0e6		       77		      .BYTE.b	%01110111
     54  f0e7		       55		      .BYTE.b	%01010101
     55  f0e8		       77		      .BYTE.b	%01110111
     56  f0e9
     57  f0e9		       77		      .BYTE.b	%01110111
     58  f0ea		       55		      .BYTE.b	%01010101
     59  f0eb		       77		      .BYTE.b	%01110111
     60  f0ec		       11		      .BYTE.b	%00010001
     61  f0ed		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f0ee					      include	"objects/score_digits_flip.asm"
      1  f0ee				   ScoreDigitsFlip
      2  f0ee
      3  f0ee		       ee		      .BYTE.b	%11101110
      4  f0ef		       aa		      .BYTE.b	%10101010
      5  f0f0		       aa		      .BYTE.b	%10101010
      6  f0f1		       aa		      .BYTE.b	%10101010
      7  f0f2		       ee		      .BYTE.b	%11101110
      8  f0f3
      9  f0f3		       88		      .BYTE.b	%10001000
     10  f0f4		       88		      .BYTE.b	%10001000
     11  f0f5		       88		      .BYTE.b	%10001000
     12  f0f6		       88		      .BYTE.b	%10001000
     13  f0f7		       88		      .BYTE.b	%10001000
     14  f0f8
     15  f0f8		       ee		      .BYTE.b	%11101110
     16  f0f9		       88		      .BYTE.b	%10001000
     17  f0fa		       ee		      .BYTE.b	%11101110
     18  f0fb		       22		      .BYTE.b	%00100010
     19  f0fc		       ee		      .BYTE.b	%11101110
     20  f0fd
     21  f0fd		       ee		      .BYTE.b	%11101110
     22  f0fe		       88		      .BYTE.b	%10001000
     23  f0ff		       cc		      .BYTE.b	%11001100
     24  f100		       88		      .BYTE.b	%10001000
     25  f101		       ee		      .BYTE.b	%11101110
     26  f102
     27  f102		       aa		      .BYTE.b	%10101010
     28  f103		       aa		      .BYTE.b	%10101010
     29  f104		       ee		      .BYTE.b	%11101110
     30  f105		       88		      .BYTE.b	%10001000
     31  f106		       88		      .BYTE.b	%10001000
     32  f107
     33  f107		       ee		      .BYTE.b	%11101110
     34  f108		       22		      .BYTE.b	%00100010
     35  f109		       ee		      .BYTE.b	%11101110
     36  f10a		       88		      .BYTE.b	%10001000
     37  f10b		       ee		      .BYTE.b	%11101110
     38  f10c
     39  f10c		       ee		      .BYTE.b	%11101110
     40  f10d		       22		      .BYTE.b	%00100010
     41  f10e		       ee		      .BYTE.b	%11101110
     42  f10f		       aa		      .BYTE.b	%10101010
     43  f110		       ee		      .BYTE.b	%11101110
     44  f111
     45  f111		       ee		      .BYTE.b	%11101110
     46  f112		       88		      .BYTE.b	%10001000
     47  f113		       44		      .BYTE.b	%01000100
     48  f114		       44		      .BYTE.b	%01000100
     49  f115		       44		      .BYTE.b	%01000100
     50  f116
     51  f116		       ee		      .BYTE.b	%11101110
     52  f117		       aa		      .BYTE.b	%10101010
     53  f118		       ee		      .BYTE.b	%11101110
     54  f119		       aa		      .BYTE.b	%10101010
     55  f11a		       ee		      .BYTE.b	%11101110
     56  f11b
     57  f11b		       ee		      .BYTE.b	%11101110
     58  f11c		       aa		      .BYTE.b	%10101010
     59  f11d		       ee		      .BYTE.b	%11101110
     60  f11e		       88		      .BYTE.b	%10001000
     61  f11f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f120					      include	"objects/score_label.asm"
      1  f120				   ScoreLabel
      2  f120
      3  f120		       20		      .BYTE.b	%00100000
      4  f121		       50		      .BYTE.b	%01010000
      5  f122		       ee		      .BYTE.b	%11101110
      6  f123		       00		      .BYTE.b	%00000000
      7  f124		       57		      .BYTE.b	%01010111
      8  f125		       00		      .BYTE.b	%00000000
      9  f126
     10  f126		       20		      .BYTE.b	%00100000
     11  f127		       50		      .BYTE.b	%01010000
     12  f128		       4a		      .BYTE.b	%01001010
     13  f129		       00		      .BYTE.b	%00000000
     14  f12a		       55		      .BYTE.b	%01010101
     15  f12b		       00		      .BYTE.b	%00000000
     16  f12c
     17  f12c		       20		      .BYTE.b	%00100000
     18  f12d		       50		      .BYTE.b	%01010000
     19  f12e		       4e		      .BYTE.b	%01001110
     20  f12f		       00		      .BYTE.b	%00000000
     21  f130		       77		      .BYTE.b	%01110111
     22  f131		       00		      .BYTE.b	%00000000
     23  f132
     24  f132		       20		      .BYTE.b	%00100000
     25  f133		       50		      .BYTE.b	%01010000
     26  f134		       42		      .BYTE.b	%01000010
     27  f135		       00		      .BYTE.b	%00000000
     28  f136		       54		      .BYTE.b	%01010100
     29  f137		       00		      .BYTE.b	%00000000
     30  f138
     31  f138		       e0		      .BYTE.b	%11100000
     32  f139		       20		      .BYTE.b	%00100000
     33  f13a		       42		      .BYTE.b	%01000010
     34  f13b		       00		      .BYTE.b	%00000000
     35  f13c		       54		      .BYTE.b	%01010100
     36  f13d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    154  f13e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f13e					      include	"objects/web_image.asm"
      1  f13e				   WebImagePF0
      2  f13e		       00		      .BYTE.b	%00000000
      3  f13f		       00		      .BYTE.b	%00000000
      4  f140		       00		      .BYTE.b	%00000000
      5  f141		       00		      .BYTE.b	%00000000
      6  f142		       00		      .BYTE.b	%00000000
      7  f143		       00		      .BYTE.b	%00000000
      8  f144		       00		      .BYTE.b	%00000000
      9  f145		       00		      .BYTE.b	%00000000
     10  f146		       30		      .BYTE.b	%00110000
     11  f147		       e0		      .BYTE.b	%11100000
     12  f148		       20		      .BYTE.b	%00100000
     13  f149		       40		      .BYTE.b	%01000000
     14  f14a		       40		      .BYTE.b	%01000000
     15  f14b		       80		      .BYTE.b	%10000000
     16  f14c		       80		      .BYTE.b	%10000000
     17  f14d		       40		      .BYTE.b	%01000000
     18  f14e		       40		      .BYTE.b	%01000000
     19  f14f		       20		      .BYTE.b	%00100000
     20  f150		       e0		      .BYTE.b	%11100000
     21  f151		       30		      .BYTE.b	%00110000
     22  f152		       00		      .BYTE.b	%00000000
     23  f153		       00		      .BYTE.b	%00000000
     24  f154		       00		      .BYTE.b	%00000000
     25  f155		       00		      .BYTE.b	%00000000
     26  f156		       00		      .BYTE.b	%00000000
     27  f157		       00		      .BYTE.b	%00000000
     28  f158		       00		      .BYTE.b	%00000000
     29  f159		       00		      .BYTE.b	%00000000
     30  f15a
     31  f15a				   WebImagePF1
     32  f15a		       02		      .BYTE.b	%00000010
     33  f15b		       01		      .BYTE.b	%00000001
     34  f15c		       00		      .BYTE.b	%00000000
     35  f15d		       00		      .BYTE.b	%00000000
     36  f15e		       01		      .BYTE.b	%00000001
     37  f15f		       01		      .BYTE.b	%00000001
     38  f160		       02		      .BYTE.b	%00000010
     39  f161		       0c		      .BYTE.b	%00001100
     40  f162		       30		      .BYTE.b	%00110000
     41  f163		       c0		      .BYTE.b	%11000000
     42  f164		       38		      .BYTE.b	%00111000
     43  f165		       07		      .BYTE.b	%00000111
     44  f166		       00		      .BYTE.b	%00000000
     45  f167		       00		      .BYTE.b	%00000000
     46  f168		       00		      .BYTE.b	%00000000
     47  f169		       00		      .BYTE.b	%00000000
     48  f16a		       07		      .BYTE.b	%00000111
     49  f16b		       38		      .BYTE.b	%00111000
     50  f16c		       c0		      .BYTE.b	%11000000
     51  f16d		       30		      .BYTE.b	%00110000
     52  f16e		       0c		      .BYTE.b	%00001100
     53  f16f		       02		      .BYTE.b	%00000010
     54  f170		       01		      .BYTE.b	%00000001
     55  f171		       01		      .BYTE.b	%00000001
     56  f172		       00		      .BYTE.b	%00000000
     57  f173		       00		      .BYTE.b	%00000000
     58  f174		       01		      .BYTE.b	%00000001
     59  f175		       02		      .BYTE.b	%00000010
     60  f176
     61  f176				   WebImagePF2
     62  f176		       08		      .BYTE.b	%00001000
     63  f177		       04		      .BYTE.b	%00000100
     64  f178		       03		      .BYTE.b	%00000011
     65  f179		       3f		      .BYTE.b	%00111111
     66  f17a		       c2		      .BYTE.b	%11000010
     67  f17b		       04		      .BYTE.b	%00000100
     68  f17c		       08		      .BYTE.b	%00001000
     69  f17d		       08		      .BYTE.b	%00001000
     70  f17e		       10		      .BYTE.b	%00010000
     71  f17f		       20		      .BYTE.b	%00100000
     72  f180		       20		      .BYTE.b	%00100000
     73  f181		       41		      .BYTE.b	%01000001
     74  f182		       8e		      .BYTE.b	%10001110
     75  f183		       f0		      .BYTE.b	%11110000
     76  f184		       f0		      .BYTE.b	%11110000
     77  f185		       8e		      .BYTE.b	%10001110
     78  f186		       41		      .BYTE.b	%01000001
     79  f187		       20		      .BYTE.b	%00100000
     80  f188		       20		      .BYTE.b	%00100000
     81  f189		       10		      .BYTE.b	%00010000
     82  f18a		       08		      .BYTE.b	%00001000
     83  f18b		       08		      .BYTE.b	%00001000
     84  f18c		       04		      .BYTE.b	%00000100
     85  f18d		       c2		      .BYTE.b	%11000010
     86  f18e		       3f		      .BYTE.b	%00111111
     87  f18f		       03		      .BYTE.b	%00000011
     88  f190		       04		      .BYTE.b	%00000100
     89  f191		       08		      .BYTE.b	%00001000
------- FILE kernel.asm
    156  f192
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f192					      include	"objects/spider_sprite.asm"
      1  f192				   SpiderSprite
      2  f192
      3  f192		       99		      .BYTE.b	%10011001
      4  f193		       bd		      .BYTE.b	%10111101
      5  f194		       db		      .BYTE.b	%11011011
      6  f195		       bd		      .BYTE.b	%10111101
      7  f196		       99		      .BYTE.b	%10011001
      8  f197		       99		      .BYTE.b	%10011001
      9  f198		       7e		      .BYTE.b	%01111110
     10  f199		       3c		      .BYTE.b	%00111100
     11  f19a		       3c		      .BYTE.b	%00111100
     12  f19b		       18		      .BYTE.b	%00011000
     13  f19c		       3c		      .BYTE.b	%00111100
     14  f19d		       7e		      .BYTE.b	%01111110
     15  f19e		       bd		      .BYTE.b	%10111101
     16  f19f		       bd		      .BYTE.b	%10111101
     17  f1a0		       bd		      .BYTE.b	%10111101
     18  f1a1		       99		      .BYTE.b	%10011001
     19  f1a2
     20  f1a2		       c7		      .BYTE.b	%11000111
     21  f1a3		       c7		      .BYTE.b	%11000111
     22  f1a4		       28		      .BYTE.b	%00101000
     23  f1a5		       28		      .BYTE.b	%00101000
     24  f1a6		       3a		      .BYTE.b	%00111010
     25  f1a7		       7a		      .BYTE.b	%01111010
     26  f1a8		       fd		      .BYTE.b	%11111101
     27  f1a9		       ff		      .BYTE.b	%11111111
     28  f1aa		       ff		      .BYTE.b	%11111111
     29  f1ab		       fd		      .BYTE.b	%11111101
     30  f1ac		       7a		      .BYTE.b	%01111010
     31  f1ad		       3a		      .BYTE.b	%00111010
     32  f1ae		       28		      .BYTE.b	%00101000
     33  f1af		       28		      .BYTE.b	%00101000
     34  f1b0		       c7		      .BYTE.b	%11000111
     35  f1b1		       c7		      .BYTE.b	%11000111
     36  f1b2
     37  f1b2		       99		      .BYTE.b	%10011001
     38  f1b3		       bd		      .BYTE.b	%10111101
     39  f1b4		       bd		      .BYTE.b	%10111101
     40  f1b5		       bd		      .BYTE.b	%10111101
     41  f1b6		       7e		      .BYTE.b	%01111110
     42  f1b7		       3c		      .BYTE.b	%00111100
     43  f1b8		       18		      .BYTE.b	%00011000
     44  f1b9		       3c		      .BYTE.b	%00111100
     45  f1ba		       3c		      .BYTE.b	%00111100
     46  f1bb		       7e		      .BYTE.b	%01111110
     47  f1bc		       99		      .BYTE.b	%10011001
     48  f1bd		       99		      .BYTE.b	%10011001
     49  f1be		       bd		      .BYTE.b	%10111101
     50  f1bf		       db		      .BYTE.b	%11011011
     51  f1c0		       bd		      .BYTE.b	%10111101
     52  f1c1		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    158  f1c2
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1c2					      include	"objects/swatter_sprite.asm"
      1  f1c2				   SwatterSprite
      2  f1c2
      3  f1c2		       3c		      .BYTE.b	%00111100
      4  f1c3		       3c		      .BYTE.b	%00111100
      5  f1c4		       56		      .BYTE.b	%01010110
      6  f1c5		       6a		      .BYTE.b	%01101010
      7  f1c6		       d5		      .BYTE.b	%11010101
      8  f1c7		       ab		      .BYTE.b	%10101011
      9  f1c8		       d5		      .BYTE.b	%11010101
     10  f1c9		       ab		      .BYTE.b	%10101011
     11  f1ca		       d5		      .BYTE.b	%11010101
     12  f1cb		       ab		      .BYTE.b	%10101011
     13  f1cc		       d5		      .BYTE.b	%11010101
     14  f1cd		       ab		      .BYTE.b	%10101011
     15  f1ce		       56		      .BYTE.b	%01010110
     16  f1cf		       6a		      .BYTE.b	%01101010
     17  f1d0		       56		      .BYTE.b	%01010110
     18  f1d1		       6a		      .BYTE.b	%01101010
     19  f1d2		       34		      .BYTE.b	%00110100
     20  f1d3		       2c		      .BYTE.b	%00101100
     21  f1d4		       34		      .BYTE.b	%00110100
     22  f1d5		       18		      .BYTE.b	%00011000
------- FILE kernel.asm
    160  f1d6
------- FILE logo_image.asm LEVEL 2 PASS 2
      0  f1d6					      include	"logo_image.asm"
      1  f1d6				   LogoImage1
      2  f1d6		       03		      .BYTE.b	%00000011
      3  f1d7		       03		      .BYTE.b	%00000011
      4  f1d8		       13		      .BYTE.b	%00010011
      5  f1d9		       33		      .BYTE.b	%00110011
      6  f1da		       63		      .BYTE.b	%01100011
      7  f1db		       c3		      .BYTE.b	%11000011
      8  f1dc		       c3		      .BYTE.b	%11000011
      9  f1dd		       63		      .BYTE.b	%01100011
     10  f1de		       33		      .BYTE.b	%00110011
     11  f1df		       13		      .BYTE.b	%00010011
     12  f1e0		       03		      .BYTE.b	%00000011
     13  f1e1		       03		      .BYTE.b	%00000011
     14  f1e2
     15  f1e2				   LogoImage2
     16  f1e2		       83		      .BYTE.b	%10000011
     17  f1e3		       c7		      .BYTE.b	%11000111
     18  f1e4		       ef		      .BYTE.b	%11101111
     19  f1e5		       6e		      .BYTE.b	%01101110
     20  f1e6		       6c		      .BYTE.b	%01101100
     21  f1e7		       6c		      .BYTE.b	%01101100
     22  f1e8		       6c		      .BYTE.b	%01101100
     23  f1e9		       6c		      .BYTE.b	%01101100
     24  f1ea		       6e		      .BYTE.b	%01101110
     25  f1eb		       ef		      .BYTE.b	%11101111
     26  f1ec		       c7		      .BYTE.b	%11000111
     27  f1ed		       83		      .BYTE.b	%10000011
     28  f1ee
     29  f1ee				   LogoImage3
     30  f1ee		       8f		      .BYTE.b	%10001111
     31  f1ef		       cf		      .BYTE.b	%11001111
     32  f1f0		       ef		      .BYTE.b	%11101111
     33  f1f1		       6d		      .BYTE.b	%01101101
     34  f1f2		       2c		      .BYTE.b	%00101100
     35  f1f3		       0c		      .BYTE.b	%00001100
     36  f1f4		       0c		      .BYTE.b	%00001100
     37  f1f5		       4c		      .BYTE.b	%01001100
     38  f1f6		       6d		      .BYTE.b	%01101101
     39  f1f7		       ef		      .BYTE.b	%11101111
     40  f1f8		       cf		      .BYTE.b	%11001111
     41  f1f9		       8f		      .BYTE.b	%10001111
     42  f1fa
     43  f1fa				   LogoImage4
     44  f1fa		       00		      .BYTE.b	%00000000
     45  f1fb		       01		      .BYTE.b	%00000001
     46  f1fc		       13		      .BYTE.b	%00010011
     47  f1fd		       33		      .BYTE.b	%00110011
     48  f1fe		       63		      .BYTE.b	%01100011
     49  f1ff		       c3		      .BYTE.b	%11000011
     50  f200		       c3		      .BYTE.b	%11000011
     51  f201		       63		      .BYTE.b	%01100011
     52  f202		       33		      .BYTE.b	%00110011
     53  f203		       13		      .BYTE.b	%00010011
     54  f204		       01		      .BYTE.b	%00000001
     55  f205		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    162  f206
    163  f206				   InitSystem
    164  f206
    165  f206				   .init_clean
    166  f206							; Resets RAM, TIA registers, and CPU registers
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
    168  f211
    169  f211				   .init_tia
    170  f211							; Define default TIA register values
    171  f211
    172  f211							; Initialize copies
    173  f211							;    lda #0
    174  f211							;    sta CtrlPf
    175  f211							;    sta NuSiz0
    176  f211							;    sta NuSiz1
    177  f211
    178  f211							; Set background color
    179  f211							;    lda #$00	      ; Black
    180  f211							;    sta COLUBK
    181  f211
    182  f211							; Set the playfield and player color
    183  f211							;    lda #$0E	      ; White
    184  f211							;    sta COLUPF
    185  f211							;    sta COLUP0
    186  f211							;    sta COLUP1
    187  f211
    188  f211							; Playfield Control
    189  f211							;    lda #%00000001  ; 1 for mirroring
    190  f211							;    sta CtrlPf
    191  f211							;    sta CTRLPF
    192  f211
    193  f211							; Disable Game Elements
    194  f211							;    lda #$00
    195  f211							;    sta ENABL       ; Turn off ball
    196  f211							;    sta ENAM0       ; Turn off player 1 missile
    197  f211							;    sta ENAM1       ; Turn off player 2 missile
    198  f211							;    sta GRP0	      ; Turn off player 1
    199  f211							;    sta GRP1	      ; Turn off player 2
    200  f211
    201  f211							; Empty playfield
    202  f211							;    lda #%00000000
    203  f211							;    sta PF0
    204  f211							;    sta PF1
    205  f211							;    sta PF2
    206  f211
    207  f211				   .init_seed
    208  f211							; Seed the random number generator
    209  f211		       ad 84 02 	      lda	INTIM	; Unknown value
    210  f214		       85 86		      sta	Rand8	; Use as seed
    211  f216		       49 ff		      eor	#$FF	; Flip bits
    212  f218		       85 87		      sta	Rand16	; Just in case INTIM was 0
    213  f21a
    214  f21a				   .init_game
    215  f21a
    216  f21a		       20 82 f2 	      jsr	LogoInit
    217  f21d
    218  f21d							;=======================================
    219  f21d							; Game Kernel
    220  f21d							;=======================================
    221  f21d
    222  f21d				   Main
    223  f21d
    224  f21d		       20 2c f2 	      jsr	VerticalSync
    225  f220		       20 45 f2 	      jsr	VerticalBlank
    226  f223		       20 58 f2 	      jsr	Kernel
    227  f226		       20 5f f2 	      jsr	OverScan
    228  f229		       4c 1d f2 	      jmp	Main
    229  f22c
    230  f22c				   VerticalSync
    231  f22c
    232  f22c		       a9 00		      lda	#0
    233  f22e		       85 01		      sta	VBLANK
    234  f230
    235  f230							; Turn on Vertical Sync signal and setup timer
    236  f230		       a9 02		      lda	#2
    237  f232		       85 00		      sta	VSYNC
    238  f234
    239  f234							; Increment frame count and reduce frame counter
    240  f234		       e6 8e		      inc	Frame
    241  f236		       c6 8f		      dec	FrameTimer
    242  f238		       c6 90		      dec	FrameTimer+1
    243  f23a
    244  f23a							; VSYNCH signal scanlines
    245  f23a					      REPEAT	#KERNEL_VSYNC
    246  f23a		       85 02		      sta	WSYNC
    245  f23a					      REPEND
    246  f23c		       85 02		      sta	WSYNC
    245  f23c					      REPEND
    246  f23e		       85 02		      sta	WSYNC
    247  f240					      REPEND
    248  f240
    249  f240							; Turn off Vertical Sync signal
    250  f240		       a9 00		      lda	#0
    251  f242		       85 00		      sta	VSYNC
    252  f244
    253  f244				   .vsync_return
    254  f244		       60		      rts
    255  f245
    256  f245				   VerticalBlank
    257  f245							; Setup Timer
    258  f245		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    259  f247		       8d 96 02 	      sta	TIM64T
    260  f24a
    261  f24a				   .vblank_logic
    262  f24a							; Perform Game Logic
    263  f24a		       20 55 f2 	      jsr	.vblank_logic_call_ptr
    264  f24d
    265  f24d				   .vblank_loop
    266  f24d							; WSYNC until Timer is complete
    267  f24d		       85 02		      sta	WSYNC
    268  f24f		       ad 84 02 	      lda	INTIM
    269  f252		       d0 f9		      bne	.vblank_loop
    270  f254
    271  f254				   .vblank_return
    272  f254		       60		      rts
    273  f255
    274  f255				   .vblank_logic_call_ptr
    275  f255		       6c 88 00 	      jmp	(VBlankPtr)
    276  f258
    277  f258				   Kernel
    278  f258
    279  f258							; Perform Selected Kernel
    280  f258		       20 5c f2 	      jsr	.kernel_call_ptr
    281  f25b		       60		      rts
    282  f25c
    283  f25c				   .kernel_call_ptr
    284  f25c		       6c 8a 00 	      jmp	(KernelPtr)
    285  f25f
    286  f25f				   OverScan
    287  f25f
    288  f25f							; End of screen, enter blanking
    289  f25f		       a9 42		      lda	#%01000010
    290  f261		       85 01		      sta	VBLANK
    291  f263
    292  f263							; Setup Timer
    293  f263		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    294  f265		       8d 96 02 	      sta	TIM64T
    295  f268
    296  f268							;.overscan_reset:
    297  f268							; Check for reset switch
    298  f268		       ad 82 02 	      lda	SWCHB
    299  f26b		       4a		      lsr		; Push D0 to carry (C)
    300  f26c		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    301  f26e
    302  f26e							; Perform reset
    303  f26e		       20 82 f2 	      jsr	LogoInit	; No need for logic
    304  f271		       4c 77 f2 	      jmp	.overscan_loop
    305  f274
    306  f274				   .overscan_logic
    307  f274							; Perform OverScan Logic
    308  f274		       20 7f f2 	      jsr	.overscan_logic_call_ptr
    309  f277
    310  f277				   .overscan_loop
    311  f277							; WSYNC until Timer is complete
    312  f277		       85 02		      sta	WSYNC
    313  f279		       ad 84 02 	      lda	INTIM
    314  f27c		       d0 f9		      bne	.overscan_loop
    315  f27e
    316  f27e				   .overscan_return
    317  f27e		       60		      rts
    318  f27f
    319  f27f				   .overscan_logic_call_ptr
    320  f27f		       6c 8c 00 	      jmp	(OverScanPtr)
    321  f282
    322  f282							;================
    323  f282							; State Code
    324  f282							;================
    325  f282
------- FILE logo.asm LEVEL 2 PASS 2
      0  f282					      include	"logo.asm"
      1  f282							;================
      2  f282							; Constants
      3  f282							;================
      4  f282
      5  f282		       00 8c	   LOGO_FRAMES =	140
      6  f282
      7  f282		       00 00	   LOGO_BG_COLOR =	#$00
      8  f282		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f282		       00 00	   LOGO_BG_BW_COLOR =	#$00
     10  f282		       00 0e	   LOGO_FG_BW_COLOR =	#$0E
     11  f282
     12  f282		       00 0c	   LOGO_IMAGE_SIZE =	12
     13  f282		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     14  f282		       00 3c	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     15  f282		       00 42	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     16  f282		       00 38	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-10	; The extra 10 is for processing overflow
     17  f282		       00 06	   LOGO_IMAGE_ANIM_SPEED =	#6
     18  f282
     19  f282				   LogoInit
     20  f282
     21  f282							; Setup logic and kernel
      0  f282					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f282				   .POINTER   SET	VBlankPtr
      2  f282				   .ADDRESS   SET	LogoVerticalBlank
      3  f282
      4  f282		       a9 ad		      LDA	#<.ADDRESS
      5  f284		       85 88		      STA	.POINTER
      6  f286		       a9 f2		      LDA	#>.ADDRESS
      7  f288		       85 89		      STA	.POINTER+1
      8  f28a
      0  f28a					      SET_POINTER	KernelPtr, LogoKernel
      1  f28a				   .POINTER   SET	KernelPtr
      2  f28a				   .ADDRESS   SET	LogoKernel
      3  f28a
      4  f28a		       a9 db		      LDA	#<.ADDRESS
      5  f28c		       85 8a		      STA	.POINTER
      6  f28e		       a9 f2		      LDA	#>.ADDRESS
      7  f290		       85 8b		      STA	.POINTER+1
      8  f292
      0  f292					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f292				   .POINTER   SET	OverScanPtr
      2  f292				   .ADDRESS   SET	LogoOverScan
      3  f292
      4  f292		       a9 b1		      LDA	#<.ADDRESS
      5  f294		       85 8c		      STA	.POINTER
      6  f296		       a9 f2		      LDA	#>.ADDRESS
      7  f298		       85 8d		      STA	.POINTER+1
      8  f29a
     25  f29a
     26  f29a							; Clean audio
     27  f29a		       a9 00		      lda	#0
     28  f29c		       85 19		      sta	AUDV0
     29  f29e		       85 1a		      sta	AUDV1
     30  f2a0
     31  f2a0							; Set initial button state
     32  f2a0							;    lda #0
     33  f2a0		       85 91		      sta	InputState
     34  f2a2
     35  f2a2							; Setup frame counters
     36  f2a2							;    lda #0
     37  f2a2		       85 8e		      sta	Frame
     38  f2a4		       a9 8c		      lda	#LOGO_FRAMES
     39  f2a6		       85 8f		      sta	FrameTimer
     40  f2a8
     41  f2a8							; Setup Image Animation
     42  f2a8		       a9 0b		      lda	#LOGO_IMAGE_SIZE-1
     43  f2aa		       85 a0		      sta	WebIndex
     44  f2ac
     45  f2ac		       60		      rts
     46  f2ad
     47  f2ad				   LogoVerticalBlank
     48  f2ad		       20 b5 f2 	      jsr	LogoAnimation
     49  f2b0		       60		      rts
     50  f2b1
     51  f2b1				   LogoOverScan
     52  f2b1		       20 c6 f2 	      jsr	LogoState
     53  f2b4		       60		      rts
     54  f2b5
     55  f2b5				   LogoAnimation
     56  f2b5		       a5 8e		      lda	Frame
     57  f2b7		       c9 06		      cmp	#LOGO_IMAGE_ANIM_SPEED
     58  f2b9		       d0 0a		      bne	.logo_animation_return
     59  f2bb
     60  f2bb		       a9 00		      lda	#0
     61  f2bd		       85 8e		      sta	Frame
     62  f2bf
     63  f2bf		       a6 a0		      ldx	WebIndex
     64  f2c1		       f0 02		      beq	.logo_animation_return
     65  f2c3
     66  f2c3							; Add another visible line
     67  f2c3		       c6 a0		      dec	WebIndex
     68  f2c5
     69  f2c5				   .logo_animation_return
     70  f2c5		       60		      rts
     71  f2c6
     72  f2c6				   LogoState
     73  f2c6		       a5 8f		      lda	FrameTimer
     74  f2c8		       f0 0d		      beq	.logo_state_next
     75  f2ca
     76  f2ca							; Check if Fire Button on controller 1 is released
     77  f2ca		       a5 0c		      lda	INPT4
     78  f2cc		       30 05		      bmi	.logo_state_check
     79  f2ce
     80  f2ce				   .logo_state_on
     81  f2ce		       a9 01		      lda	#1
     82  f2d0		       85 91		      sta	InputState
     83  f2d2		       60		      rts
     84  f2d3
     85  f2d3				   .logo_state_check
     86  f2d3		       a6 91		      ldx	InputState
     87  f2d5		       f0 03		      beq	.logo_state_return
     88  f2d7
     89  f2d7				   .logo_state_next
     90  f2d7							; Button is released or timer runs out, load title screen
     91  f2d7		       20 6a f3 	      jsr	TitleInit
     92  f2da
     93  f2da				   .logo_state_return
     94  f2da		       60		      rts
     95  f2db
     96  f2db				   LogoKernel
     97  f2db
     98  f2db							; Playfield Control
     99  f2db		       a9 01		      lda	#%00000001	; Mirror
    100  f2dd							;sta CtrlPf
    101  f2dd		       85 0a		      sta	CTRLPF
    102  f2df
    103  f2df							; Load Colors
    104  f2df		       ad 82 02 	      lda	SWCHB
    105  f2e2					      REPEAT	4
    106  f2e2		       4a		      lsr
    105  f2e2					      REPEND
    106  f2e3		       4a		      lsr
    105  f2e3					      REPEND
    106  f2e4		       4a		      lsr
    105  f2e4					      REPEND
    106  f2e5		       4a		      lsr
    107  f2e6					      REPEND
    108  f2e6		       90 07		      bcc	.logo_kernel_bw
    109  f2e8
    110  f2e8				   .logo_kernel_color
    111  f2e8		       a2 00		      ldx	#LOGO_BG_COLOR
    112  f2ea		       a0 c6		      ldy	#LOGO_FG_COLOR
    113  f2ec		       4c f3 f2 	      jmp	.logo_kernel_set
    114  f2ef
    115  f2ef				   .logo_kernel_bw
    116  f2ef		       a9 00		      lda	#LOGO_BG_BW_COLOR
    117  f2f1		       a9 0e		      lda	#LOGO_FG_BW_COLOR
    118  f2f3
    119  f2f3				   .logo_kernel_set
    120  f2f3		       86 09		      stx	COLUBK
    121  f2f5		       84 08		      sty	COLUPF
    122  f2f7
    123  f2f7				   .logo_kernel_start
    124  f2f7
    125  f2f7							; Turn on display
    126  f2f7		       a9 00		      lda	#0
    127  f2f9		       85 01		      sta	VBLANK
    128  f2fb
    129  f2fb		       a4 a0		      ldy	WebIndex
    130  f2fd		       d0 06		      bne	.logo_kernel_top_anim_padding
    131  f2ff
    132  f2ff				   .logo_kernel_top_padding
    133  f2ff							; Top Padding
    134  f2ff		       20 4d f3 	      jsr	LogoPadding
    135  f302		       4c 12 f3 	      jmp	.logo_kernel_image
    136  f305
    137  f305				   .logo_kernel_top_anim_padding
    138  f305		       20 5d f3 	      jsr	LogoAnimPadding
    139  f308
    140  f308				   .logo_kernel_image_animation_start
    141  f308		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    142  f30a
    143  f30a				   .logo_kernel_image_animation_loop
    144  f30a		       85 02		      sta	WSYNC
    145  f30c		       ca		      dex
    146  f30d		       d0 fb		      bne	.logo_kernel_image_animation_loop
    147  f30f
    148  f30f		       88		      dey
    149  f310		       10 f6		      bpl	.logo_kernel_image_animation_start
    150  f312
    151  f312				   .logo_kernel_image
    152  f312
    153  f312		       a2 0b		      ldx	#LOGO_IMAGE_SIZE-1
    154  f314		       a0 03		      ldy	#LOGO_IMAGE_LINE_SIZE-2
    155  f316							; The extra 2 on line size is for processing overflow
    156  f316
    157  f316							;dex
    158  f316		       e4 a0		      cpx	WebIndex
    159  f318		       90 2f		      bcc	.logo_kernel_bottom_padding
    160  f31a
    161  f31a				   .logo_kernel_image_line
    162  f31a		       85 02		      sta	WSYNC
    163  f31c
    164  f31c		       bd d6 f1 	      lda	LogoImage1,x
    165  f31f		       85 0e		      sta	PF1
    166  f321		       bd e2 f1 	      lda	LogoImage2,x
    167  f324		       85 0f		      sta	PF2
    168  f326
      0  f326					      sleep	26
      1  f326				   .CYCLES    SET	26
      2  f326
      3  f326				  -	      IF	.CYCLES < 2
      4  f326				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f326				  -	      ERR
      6  f326					      ENDIF
      7  f326
      8  f326				  -	      IF	.CYCLES & 1
      9  f326				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f326				  -	      nop	0
     11  f326				  -	      ELSE
     12  f326				  -	      bit	VSYNC
     13  f326				  -	      ENDIF
     14  f326				  -.CYCLES    SET	.CYCLES - 3
     15  f326					      ENDIF
     16  f326
     17  f326					      REPEAT	.CYCLES / 2
     18  f326		       ea		      nop
     17  f326					      REPEND
     18  f327		       ea		      nop
     17  f327					      REPEND
     18  f328		       ea		      nop
     17  f328					      REPEND
     18  f329		       ea		      nop
     17  f329					      REPEND
     18  f32a		       ea		      nop
     17  f32a					      REPEND
     18  f32b		       ea		      nop
     17  f32b					      REPEND
     18  f32c		       ea		      nop
     17  f32c					      REPEND
     18  f32d		       ea		      nop
     17  f32d					      REPEND
     18  f32e		       ea		      nop
     17  f32e					      REPEND
     18  f32f		       ea		      nop
     17  f32f					      REPEND
     18  f330		       ea		      nop
     17  f330					      REPEND
     18  f331		       ea		      nop
     17  f331					      REPEND
     18  f332		       ea		      nop
     19  f333					      REPEND
    170  f333
    171  f333		       bd ee f1 	      lda	LogoImage3,x
    172  f336		       85 0f		      sta	PF2
    173  f338		       bd fa f1 	      lda	LogoImage4,x
    174  f33b		       85 0e		      sta	PF1
    175  f33d
    176  f33d		       88		      dey
    177  f33e		       d0 da		      bne	.logo_kernel_image_line
    178  f340
    179  f340		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    180  f342
    181  f342		       e4 a0		      cpx	WebIndex
    182  f344		       90 03		      bcc	.logo_kernel_bottom_padding
    183  f346
    184  f346		       ca		      dex
    185  f347		       10 d1		      bpl	.logo_kernel_image_line
    186  f349
    187  f349				   .logo_kernel_bottom_padding
    188  f349							; Bottom Padding
    189  f349		       20 4d f3 	      jsr	LogoPadding
    190  f34c
    191  f34c				   .logo_kernel_image_return
    192  f34c		       60		      rts
    193  f34d
    194  f34d				   LogoPadding
    195  f34d		       a9 00		      lda	#0
    196  f34f		       85 0d		      sta	PF0
    197  f351		       85 0e		      sta	PF1
    198  f353		       85 0f		      sta	PF2
    199  f355
    200  f355		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    201  f357				   .logo_padding_loop
    202  f357		       85 02		      sta	WSYNC
    203  f359		       ca		      dex
    204  f35a		       d0 fb		      bne	.logo_padding_loop
    205  f35c
    206  f35c		       60		      rts
    207  f35d
    208  f35d				   LogoAnimPadding
    209  f35d		       a9 00		      lda	#0
    210  f35f		       85 0d		      sta	PF0
    211  f361		       85 0e		      sta	PF1
    212  f363		       85 0f		      sta	PF2
    213  f365
    214  f365		       a2 38		      ldx	#LOGO_IMAGE_ANIM_PADDING
    215  f367		       4c 57 f3 	      jmp	.logo_padding_loop
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f36a					      include	"title.asm"
      1  f36a							;================
      2  f36a							; Constants
      3  f36a							;================
      4  f36a
      5  f36a		       00 00	   TITLE_BG_COLOR =	#$00
      6  f36a		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f36a		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f36a		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f36a		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f36a
     11  f36a		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f36a		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f36a		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f36a		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f36a		       00 09	   TITLE_AUDIO_STEP =	9
     16  f36a
     17  f36a		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f36a		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f36a		       00 07	   TITLE_LABEL_LINE =	7
     20  f36a
     21  f36a		       00 10	   TITLE_GAP_SIZE =	#16
     22  f36a
     23  f36a		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f36a		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f36a		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f36a
     27  f36a				   TitleInit
     28  f36a
     29  f36a							; Setup logic and kernel
      0  f36a					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f36a				   .POINTER   SET	VBlankPtr
      2  f36a				   .ADDRESS   SET	TitleVerticalBlank
      3  f36a
      4  f36a		       a9 cb		      LDA	#<.ADDRESS
      5  f36c		       85 88		      STA	.POINTER
      6  f36e		       a9 f3		      LDA	#>.ADDRESS
      7  f370		       85 89		      STA	.POINTER+1
      8  f372
      0  f372					      SET_POINTER	KernelPtr, TitleKernel
      1  f372				   .POINTER   SET	KernelPtr
      2  f372				   .ADDRESS   SET	TitleKernel
      3  f372
      4  f372		       a9 8a		      LDA	#<.ADDRESS
      5  f374		       85 8a		      STA	.POINTER
      6  f376		       a9 f4		      LDA	#>.ADDRESS
      7  f378		       85 8b		      STA	.POINTER+1
      8  f37a
      0  f37a					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f37a				   .POINTER   SET	OverScanPtr
      2  f37a				   .ADDRESS   SET	TitleOverScan
      3  f37a
      4  f37a		       a9 3c		      LDA	#<.ADDRESS
      5  f37c		       85 8c		      STA	.POINTER
      6  f37e		       a9 f4		      LDA	#>.ADDRESS
      7  f380		       85 8d		      STA	.POINTER+1
      8  f382
     33  f382
     34  f382							; Load audio settings
     35  f382
     36  f382							; Melody Line
     37  f382		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f384		       85 15		      sta	AUDC0
     39  f386		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f388		       85 19		      sta	AUDV0
     41  f38a
     42  f38a							; Drums and Bass
     43  f38a		       a9 00		      lda	#0
     44  f38c		       85 16		      sta	AUDC1
     45  f38e		       85 1a		      sta	AUDV1
     46  f390
     47  f390							; Make it so that we play the first note immediately
     48  f390		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f392		       85 92		      sta	AudioStep
     50  f394		       a9 01		      lda	#1
     51  f396		       85 8f		      sta	FrameTimer
     52  f398
     53  f398							; Setup Spider Sprite
      0  f398					      SET_POINTER	SpiderPtr, TitleSpider
      1  f398				   .POINTER   SET	SpiderPtr
      2  f398				   .ADDRESS   SET	TitleSpider
      3  f398
      4  f398		       a9 aa		      LDA	#<.ADDRESS
      5  f39a		       85 a3		      STA	.POINTER
      6  f39c		       a9 f0		      LDA	#>.ADDRESS
      7  f39e		       85 a4		      STA	.POINTER+1
      8  f3a0
     55  f3a0
     56  f3a0		       a5 81		      lda	NuSiz0
     57  f3a2		       29 f8		      and	#%11111000
     58  f3a4		       09 06		      ora	#%00000110	; Triple Sprite
     59  f3a6		       85 81		      sta	NuSiz0
     60  f3a8		       85 04		      sta	NUSIZ0
     61  f3aa		       85 82		      sta	NuSiz1
     62  f3ac		       85 05		      sta	NUSIZ1
     63  f3ae
     64  f3ae		       a9 00		      lda	#0	; No reflect
     65  f3b0		       85 0b		      sta	REFP0
     66  f3b2		       a9 ff		      lda	#$FF	; Reflect P1
     67  f3b4		       85 0c		      sta	REFP1
     68  f3b6
     69  f3b6		       a9 00		      lda	#0
     70  f3b8		       85 aa		      sta	SpiderDrawPos	; Initialize animation state
     71  f3ba
     72  f3ba							; Setup Web Line
     73  f3ba							; Missle0 (2 clock size)
     74  f3ba		       a5 81		      lda	NuSiz0
     75  f3bc		       29 cf		      and	#%11001111
     76  f3be		       09 10		      ora	#%00010000
     77  f3c0		       85 81		      sta	NuSiz0
     78  f3c2		       85 04		      sta	NUSIZ0
     79  f3c4
     80  f3c4							; Disable at start
     81  f3c4		       a9 00		      lda	#0
     82  f3c6		       85 1d		      sta	ENAM0
     83  f3c8
     84  f3c8							; Set initial button state
     85  f3c8							;lda #0
     86  f3c8		       85 91		      sta	InputState
     87  f3ca
     88  f3ca		       60		      rts
     89  f3cb
     90  f3cb				   TitleVerticalBlank
     91  f3cb
     92  f3cb							; Refresh random values
     93  f3cb		       20 13 f0 	      jsr	Random
     94  f3ce
     95  f3ce		       20 d8 f3 	      jsr	TitlePosition
     96  f3d1		       20 f2 f3 	      jsr	TitleAnimation
     97  f3d4		       20 1d f4 	      jsr	TitleColor
     98  f3d7
     99  f3d7		       60		      rts
    100  f3d8
    101  f3d8				   TitlePosition
    102  f3d8
    103  f3d8							; Position Spider
    104  f3d8		       a2 00		      ldx	#0	; Object (player0)
    105  f3da		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    106  f3dc		       20 00 f0 	      jsr	PosObject
    107  f3df
    108  f3df		       a2 01		      ldx	#1	; Object (player1)
    109  f3e1		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    110  f3e3		       20 00 f0 	      jsr	PosObject
    111  f3e6
    112  f3e6							; Position Web Line
    113  f3e6		       a2 02		      ldx	#2	; Object (missle0)
    114  f3e8		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    115  f3ea		       20 00 f0 	      jsr	PosObject
    116  f3ed
    117  f3ed		       85 02		      sta	WSYNC
    118  f3ef		       85 2a		      sta	HMOVE
    119  f3f1
    120  f3f1		       60		      rts
    121  f3f2
    122  f3f2				   TitleAnimation
    123  f3f2
    124  f3f2		       a5 92		      lda	AudioStep
    125  f3f4							;cmp #0
    126  f3f4		       f0 0d		      beq	.title_animation_1
    127  f3f6		       c9 04		      cmp	#4
    128  f3f8		       f0 16		      beq	.title_animation_2
    129  f3fa		       c9 09		      cmp	#9
    130  f3fc		       f0 05		      beq	.title_animation_1
    131  f3fe		       c9 0c		      cmp	#12
    132  f400		       f0 0e		      beq	.title_animation_2
    133  f402		       60		      rts
    134  f403
    135  f403				   .title_animation_1
      0  f403					      SET_POINTER	SpiderPtr, TitleSpider
      1  f403				   .POINTER   SET	SpiderPtr
      2  f403				   .ADDRESS   SET	TitleSpider
      3  f403
      4  f403		       a9 aa		      LDA	#<.ADDRESS
      5  f405		       85 a3		      STA	.POINTER
      6  f407		       a9 f0		      LDA	#>.ADDRESS
      7  f409		       85 a4		      STA	.POINTER+1
      8  f40b
    137  f40b		       a9 00		      lda	#0
    138  f40d		       85 aa		      sta	SpiderDrawPos
    139  f40f		       60		      rts
    140  f410
    141  f410				   .title_animation_2
      0  f410					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f410				   .POINTER   SET	SpiderPtr
      2  f410				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f410
      4  f410		       a9 b3		      LDA	#<.ADDRESS
      5  f412		       85 a3		      STA	.POINTER
      6  f414		       a9 f0		      LDA	#>.ADDRESS
      7  f416		       85 a4		      STA	.POINTER+1
      8  f418
    143  f418		       a9 01		      lda	#1
    144  f41a		       85 aa		      sta	SpiderDrawPos
    145  f41c		       60		      rts
    146  f41d
    147  f41d				   TitleColor
    148  f41d
    149  f41d							; Load Colors
    150  f41d		       a9 00		      lda	#TITLE_BG_COLOR
    151  f41f		       85 09		      sta	COLUBK
    152  f421		       a9 06		      lda	#TITLE_WEB_COLOR
    153  f423		       85 08		      sta	COLUPF
    154  f425
    155  f425							; Check b/w
    156  f425		       ad 82 02 	      lda	SWCHB
    157  f428					      REPEAT	4
    158  f428		       4a		      lsr
    157  f428					      REPEND
    158  f429		       4a		      lsr
    157  f429					      REPEND
    158  f42a		       4a		      lsr
    157  f42a					      REPEND
    158  f42b		       4a		      lsr
    159  f42c					      REPEND
    160  f42c		       90 07		      bcc	.title_bw
    161  f42e
    162  f42e				   .title_color
    163  f42e		       a9 56		      lda	#TITLE_SPIDER_COLOR
    164  f430		       85 06		      sta	COLUP0
    165  f432		       85 07		      sta	COLUP1
    166  f434
    167  f434		       60		      rts
    168  f435
    169  f435				   .title_bw
    170  f435							; Load B/W Colors
    171  f435		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    172  f437		       85 06		      sta	COLUP0
    173  f439		       85 07		      sta	COLUP1
    174  f43b
    175  f43b		       60		      rts
    176  f43c
    177  f43c				   TitleOverScan
    178  f43c		       20 43 f4 	      jsr	TitleAudio
    179  f43f		       20 79 f4 	      jsr	TitleState
    180  f442		       60		      rts
    181  f443
    182  f443				   TitleAudio
    183  f443
    184  f443		       a6 8f		      ldx	FrameTimer
    185  f445		       d0 31		      bne	.title_audio_return
    186  f447
    187  f447							; Reset Timer
    188  f447		       a2 09		      ldx	#TITLE_AUDIO_STEP
    189  f449		       86 8f		      stx	FrameTimer
    190  f44b
    191  f44b				   .title_audio_play
    192  f44b
    193  f44b							; Increment melody position
    194  f44b		       a4 92		      ldy	AudioStep
    195  f44d		       c8		      iny
    196  f44e
    197  f44e							; Check if we're at the end of the melody
    198  f44e		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    199  f450		       d0 02		      bne	.title_audio_play_note
    200  f452
    201  f452							; Loop our audio step
    202  f452		       a0 00		      ldy	#0
    203  f454
    204  f454				   .title_audio_play_note
    205  f454
    206  f454							; Save current position
    207  f454		       84 92		      sty	AudioStep
    208  f456
    209  f456							; Basic Melody Line
    210  f456		       b9 76 f5 	      lda	TitleAudio0,y
    211  f459		       85 17		      sta	AUDF0
    212  f45b
    213  f45b							; Drums and Bass
    214  f45b		       b9 86 f5 	      lda	TitleTone1,y
    215  f45e		       c9 ff		      cmp	#$FF
    216  f460		       f0 0e		      beq	.title_audio_play_note_1_mute
    217  f462
    218  f462		       85 16		      sta	AUDC1
    219  f464		       b9 96 f5 	      lda	TitleAudio1,y
    220  f467		       85 18		      sta	AUDF1
    221  f469		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    222  f46b		       85 1a		      sta	AUDV1
    223  f46d
    224  f46d		       4c 78 f4 	      jmp	.title_audio_return
    225  f470
    226  f470				   .title_audio_play_note_1_mute
    227  f470
    228  f470		       a9 00		      lda	#0
    229  f472		       85 18		      sta	AUDF1
    230  f474		       85 16		      sta	AUDC1
    231  f476		       85 1a		      sta	AUDV1
    232  f478
    233  f478				   .title_audio_return
    234  f478		       60		      rts
    235  f479
    236  f479				   TitleState
    237  f479
    238  f479							; Check if Fire Button on controller 1 is released
    239  f479		       a5 0c		      lda	INPT4
    240  f47b		       30 05		      bmi	.title_state_check
    241  f47d
    242  f47d				   .title_state_on
    243  f47d		       a9 01		      lda	#1
    244  f47f		       85 91		      sta	InputState
    245  f481		       60		      rts
    246  f482
    247  f482				   .title_state_check
    248  f482		       a5 91		      lda	InputState
    249  f484		       f0 03		      beq	.title_state_return
    250  f486
    251  f486				   .title_state_next
    252  f486							; Button is released, load up game
    253  f486		       20 27 fd 	      jsr	GameInit
    254  f489
    255  f489				   .title_state_return
    256  f489		       60		      rts
    257  f48a
    258  f48a				   TitleKernel
    259  f48a
    260  f48a							; Playfield Control
    261  f48a		       a5 80		      lda	CtrlPf
    262  f48c		       29 fe		      and	#%11111110	; No mirroring
    263  f48e		       85 80		      sta	CtrlPf
    264  f490		       85 0a		      sta	CTRLPF
    265  f492
    266  f492							; Turn on display
    267  f492		       a9 00		      lda	#0
    268  f494		       85 01		      sta	VBLANK
    269  f496
    270  f496		       85 02		      sta	WSYNC
    271  f498
    272  f498				   TitleFrameTopDraw
    273  f498
    274  f498							; Start Counters
    275  f498		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    276  f49a		       a0 00		      ldy	#0	; Image Counter
    277  f49c
    278  f49c				   .title_frame_top
    279  f49c
    280  f49c							; 76 machine cycles per scanline
    281  f49c		       85 02		      sta	WSYNC
    282  f49e
    283  f49e				   .title_frame_top_load		; 66 cycles
    284  f49e
    285  f49e							; First half of image
    286  f49e		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    287  f4a1		       85 0d		      sta	PF0	; 4
    288  f4a3		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    289  f4a6		       85 0e		      sta	PF1	; 4
    290  f4a8		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    291  f4ab		       85 0f		      sta	PF2	; 4
    292  f4ad
      0  f4ad					      sleep	6
      1  f4ad				   .CYCLES    SET	6
      2  f4ad
      3  f4ad				  -	      IF	.CYCLES < 2
      4  f4ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4ad				  -	      ERR
      6  f4ad					      ENDIF
      7  f4ad
      8  f4ad				  -	      IF	.CYCLES & 1
      9  f4ad				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4ad				  -	      nop	0
     11  f4ad				  -	      ELSE
     12  f4ad				  -	      bit	VSYNC
     13  f4ad				  -	      ENDIF
     14  f4ad				  -.CYCLES    SET	.CYCLES - 3
     15  f4ad					      ENDIF
     16  f4ad
     17  f4ad					      REPEAT	.CYCLES / 2
     18  f4ad		       ea		      nop
     17  f4ad					      REPEND
     18  f4ae		       ea		      nop
     17  f4ae					      REPEND
     18  f4af		       ea		      nop
     19  f4b0					      REPEND
    294  f4b0
    295  f4b0							; Second half of image
    296  f4b0		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    297  f4b3		       85 0d		      sta	PF0	; 4
    298  f4b5		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    299  f4b8		       85 0e		      sta	PF1	; 4
    300  f4ba		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    301  f4bd		       85 0f		      sta	PF2	; 4
    302  f4bf
    303  f4bf				   .title_frame_top_index		; 4 cycles
    304  f4bf
    305  f4bf		       ca		      dex		; 2
    306  f4c0		       d0 da		      bne	.title_frame_top	; 2
    307  f4c2
    308  f4c2				   .title_frame_top_index_next		; 6 cycles
    309  f4c2
    310  f4c2							; Restore scanline counter
    311  f4c2		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    312  f4c4
    313  f4c4		       98		      tya		; 2
    314  f4c5		       18		      clc		; 2
    315  f4c6		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    316  f4c8		       a8		      tay		; 2
    317  f4c9
    318  f4c9		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    319  f4cb		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    320  f4cd		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    321  f4cf		       85 08		      sta	COLUPF	; 4
    322  f4d1		       ea		      nop		; 2
    323  f4d2		       4c 9e f4 	      jmp	.title_frame_top_load	; 3
    324  f4d5
    325  f4d5				   .title_frame_top_label_color_skip
    326  f4d5
    327  f4d5		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    328  f4d7		       d0 c3		      bne	.title_frame_top	; 2
    329  f4d9
    330  f4d9				   .title_frame_top_clean
    331  f4d9
    332  f4d9							; Clear out playfield
    333  f4d9		       a9 00		      lda	#0
    334  f4db		       85 0d		      sta	PF0
    335  f4dd		       85 0e		      sta	PF1
    336  f4df		       85 0f		      sta	PF2
    337  f4e1
    338  f4e1				   TitleWebDraw
    339  f4e1		       a9 02		      lda	#%00000010
    340  f4e3		       85 1d		      sta	ENAM0
    341  f4e5
    342  f4e5		       a9 06		      lda	#TITLE_WEB_COLOR
    343  f4e7		       85 06		      sta	COLUP0
    344  f4e9
    345  f4e9		       a2 10		      ldx	#TITLE_GAP_SIZE
    346  f4eb				   .title_web_gap
    347  f4eb		       ca		      dex
    348  f4ec		       85 02		      sta	WSYNC
    349  f4ee		       d0 fb		      bne	.title_web_gap
    350  f4f0
    351  f4f0				   TitleSpiderDraw
    352  f4f0
    353  f4f0		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    354  f4f2
    355  f4f2		       a5 aa		      lda	SpiderDrawPos
    356  f4f4		       c9 01		      cmp	#1
    357  f4f6		       d0 0c		      bne	.title_spider_extra_web_disable
    358  f4f8
    359  f4f8				   .title_spider_extra_web_start
    360  f4f8		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    361  f4fa				   .title_spider_extra_web_loop
    362  f4fa		       85 02		      sta	WSYNC
    363  f4fc		       ca		      dex
    364  f4fd		       d0 fb		      bne	.title_spider_extra_web_loop
    365  f4ff
    366  f4ff		       88		      dey
    367  f500		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    368  f502		       d0 f4		      bne	.title_spider_extra_web_start
    369  f504
    370  f504				   .title_spider_extra_web_disable
    371  f504		       a9 00		      lda	#0
    372  f506		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    373  f508
    374  f508		       85 02		      sta	WSYNC
    375  f50a
    376  f50a		       85 1d		      sta	ENAM0
    377  f50c
    378  f50c							; Check b/w
    379  f50c		       ad 82 02 	      lda	SWCHB
    380  f50f					      REPEAT	4
    381  f50f		       4a		      lsr
    380  f50f					      REPEND
    381  f510		       4a		      lsr
    380  f510					      REPEND
    381  f511		       4a		      lsr
    380  f511					      REPEND
    381  f512		       4a		      lsr
    382  f513					      REPEND
    383  f513		       90 05		      bcc	.title_spider_bw
    384  f515
    385  f515				   .title_spider_color
    386  f515		       a9 56		      lda	#TITLE_SPIDER_COLOR
    387  f517		       4c 1c f5 	      jmp	.title_spider_color_set
    388  f51a				   .title_spider_bw
    389  f51a		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    390  f51c				   .title_spider_color_set
    391  f51c		       85 06		      sta	COLUP0
    392  f51e
    393  f51e				   .title_spider
    394  f51e		       b1 a3		      lda	(SpiderPtr),y
    395  f520		       85 1b		      sta	GRP0
    396  f522		       85 1c		      sta	GRP1
    397  f524
    398  f524				   .title_spider_delay
    399  f524		       ca		      dex
    400  f525		       85 02		      sta	WSYNC
    401  f527		       d0 fb		      bne	.title_spider_delay
    402  f529
    403  f529				   .title_spider_index
    404  f529		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    405  f52b		       88		      dey
    406  f52c		       10 f0		      bpl	.title_spider
    407  f52e
    408  f52e				   .title_spider_clean
    409  f52e
    410  f52e							; Clear sprites
    411  f52e		       a9 00		      lda	#0
    412  f530		       85 1b		      sta	GRP0
    413  f532		       85 1c		      sta	GRP1
    414  f534
    415  f534				   TitleFrameBottomDraw
    416  f534
    417  f534							; Load Frame Color
    418  f534		       a9 06		      lda	#TITLE_WEB_COLOR
    419  f536		       85 08		      sta	COLUPF
    420  f538
    421  f538							; Start Counters
    422  f538		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    423  f53a		       a0 00		      ldy	#0	; Image Counter
    424  f53c
    425  f53c				   .title_frame_bottom
    426  f53c
    427  f53c							; 76 machine cycles per scanline
    428  f53c		       85 02		      sta	WSYNC
    429  f53e
    430  f53e				   .title_frame_bottom_load		; 66 cycles
    431  f53e
    432  f53e							; First half of image
    433  f53e		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    434  f541		       85 0d		      sta	PF0	; 4
    435  f543		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    436  f546		       85 0e		      sta	PF1	; 4
    437  f548		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    438  f54b		       85 0f		      sta	PF2	; 4
    439  f54d
      0  f54d					      sleep	6
      1  f54d				   .CYCLES    SET	6
      2  f54d
      3  f54d				  -	      IF	.CYCLES < 2
      4  f54d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f54d				  -	      ERR
      6  f54d					      ENDIF
      7  f54d
      8  f54d				  -	      IF	.CYCLES & 1
      9  f54d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f54d				  -	      nop	0
     11  f54d				  -	      ELSE
     12  f54d				  -	      bit	VSYNC
     13  f54d				  -	      ENDIF
     14  f54d				  -.CYCLES    SET	.CYCLES - 3
     15  f54d					      ENDIF
     16  f54d
     17  f54d					      REPEAT	.CYCLES / 2
     18  f54d		       ea		      nop
     17  f54d					      REPEND
     18  f54e		       ea		      nop
     17  f54e					      REPEND
     18  f54f		       ea		      nop
     19  f550					      REPEND
    441  f550
    442  f550							; Second half of image
    443  f550		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    444  f553		       85 0d		      sta	PF0	; 4
    445  f555		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    446  f558		       85 0e		      sta	PF1	; 4
    447  f55a		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    448  f55d		       85 0f		      sta	PF2	; 4
    449  f55f
    450  f55f				   .title_frame_bottom_index		; 4 cycles
    451  f55f
    452  f55f		       ca		      dex		; 2
    453  f560		       d0 da		      bne	.title_frame_bottom	; 2
    454  f562
    455  f562				   .title_frame_bottom_index_next		; 6 cycles
    456  f562
    457  f562							; Restore scanline counter
    458  f562		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    459  f564
    460  f564		       98		      tya		; 2
    461  f565		       18		      clc		; 2
    462  f566		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    463  f568		       a8		      tay		; 2
    464  f569		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    465  f56b		       d0 cf		      bne	.title_frame_bottom	; 2
    466  f56d
    467  f56d				   .title_frame_bottom_clean
    468  f56d
    469  f56d							; Clear out playfield
    470  f56d		       a9 00		      lda	#0
    471  f56f		       85 0d		      sta	PF0
    472  f571		       85 0e		      sta	PF1
    473  f573		       85 0f		      sta	PF2
    474  f575
    475  f575				   .title_kernel_return
    476  f575		       60		      rts
    477  f576
    478  f576				   TitleAudio0
    479  f576
    480  f576		       0f		      .BYTE.b	#15	; B
    481  f577		       13		      .BYTE.b	#19	; G
    482  f578		       17		      .BYTE.b	#23	; E
    483  f579		       13		      .BYTE.b	#19	; G
    484  f57a		       0e		      .BYTE.b	#14	; C
    485  f57b		       13		      .BYTE.b	#19
    486  f57c		       17		      .BYTE.b	#23
    487  f57d		       13		      .BYTE.b	#19
    488  f57e		       0c		      .BYTE.b	#12	; D
    489  f57f		       13		      .BYTE.b	#19
    490  f580		       17		      .BYTE.b	#23
    491  f581		       13		      .BYTE.b	#19
    492  f582		       0e		      .BYTE.b	#14	; C
    493  f583		       13		      .BYTE.b	#19
    494  f584		       17		      .BYTE.b	#23
    495  f585		       13		      .BYTE.b	#19
    496  f586
    497  f586				   TitleTone1
    498  f586
    499  f586		       0f		      .BYTE.b	#15	; Electronic Rumble
    500  f587		       ff		      .BYTE.b	#$FF
    501  f588		       01		      .BYTE.b	#1	; Low Pure Tone
    502  f589		       01		      .BYTE.b	#1
    503  f58a		       08		      .BYTE.b	#8	; White Noise
    504  f58b		       01		      .BYTE.b	#1
    505  f58c		       01		      .BYTE.b	#1
    506  f58d		       ff		      .BYTE.b	#$FF
    507  f58e		       ff		      .BYTE.b	#$FF
    508  f58f		       0f		      .BYTE.b	#15
    509  f590		       ff		      .BYTE.b	#$FF
    510  f591		       ff		      .BYTE.b	#$FF
    511  f592		       08		      .BYTE.b	#8
    512  f593		       ff		      .BYTE.b	#$FF
    513  f594		       01		      .BYTE.b	#1
    514  f595		       01		      .BYTE.b	#1
    515  f596
    516  f596				   TitleAudio1
    517  f596
    518  f596		       1d		      .BYTE.b	#29	; Kick
    519  f597		       ff		      .BYTE.b	#$FF
    520  f598		       1f		      .BYTE.b	#31	; C
    521  f599		       1f		      .BYTE.b	#31
    522  f59a		       07		      .BYTE.b	#7	; Snare
    523  f59b		       1f		      .BYTE.b	#31
    524  f59c		       1f		      .BYTE.b	#31
    525  f59d		       ff		      .BYTE.b	#$FF
    526  f59e		       ff		      .BYTE.b	#$FF
    527  f59f		       1d		      .BYTE.b	#29
    528  f5a0		       ff		      .BYTE.b	#$FF
    529  f5a1		       ff		      .BYTE.b	#$FF
    530  f5a2		       07		      .BYTE.b	#7
    531  f5a3		       ff		      .BYTE.b	#$FF
    532  f5a4		       17		      .BYTE.b	#23	; F
    533  f5a5		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f5a6					      include	"game.asm"
      1  f5a6							;================
      2  f5a6							; Game
      3  f5a6							;================
      4  f5a6
      5  f5a6							; Constants
      6  f5a6
      7  f5a6		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f5a6		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f5a6		       00 09	   GAME_AUDIO_STEP =	9
     10  f5a6		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f5a6		       00 06	   GAME_AUDIO_TONE =	6
     12  f5a6
     13  f5a6							; Object Code
     14  f5a6
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f5a6					      include	"objects/level.asm"
      1  f5a6							;======================
      2  f5a6							; Level Logic
      3  f5a6							;======================
      4  f5a6
      5  f5a6							; Constants
      6  f5a6
      7  f5a6		       00 13	   LEVELS     =	19
      8  f5a6
      9  f5a6				   LevelInit
     10  f5a6
     11  f5a6							; Set beginning level by difficulty switches treated as binary
     12  f5a6		       ad 82 02 	      lda	SWCHB
     13  f5a9					      REPEAT	6
     14  f5a9		       4a		      lsr
     13  f5a9					      REPEND
     14  f5aa		       4a		      lsr
     13  f5aa					      REPEND
     14  f5ab		       4a		      lsr
     13  f5ab					      REPEND
     14  f5ac		       4a		      lsr
     13  f5ac					      REPEND
     14  f5ad		       4a		      lsr
     13  f5ad					      REPEND
     14  f5ae		       4a		      lsr
     15  f5af					      REPEND
     16  f5af		       29 03		      and	#%00000011
     17  f5b1		       85 9f		      sta	LevelCurrent
     18  f5b3
     19  f5b3		       20 d9 f5 	      jsr	LevelLoad
     20  f5b6
     21  f5b6		       60		      rts
     22  f5b7
     23  f5b7				   LevelUpdate
     24  f5b7
     25  f5b7							; Calculate Desired score: (level+2)*5
     26  f5b7		       a5 9f		      lda	LevelCurrent
     27  f5b9		       18		      clc
     28  f5ba		       69 02		      adc	#2	; +2
     29  f5bc		       85 83		      sta	Temp
     30  f5be		       0a		      asl		; x2
     31  f5bf		       0a		      asl		; x2
     32  f5c0		       65 83		      adc	Temp	; x1
     33  f5c2
     34  f5c2							; Check if score is high enough
     35  f5c2		       c5 95		      cmp	ScoreValue+1
     36  f5c4		       b0 0f		      bcs	.level_update_return
     37  f5c6
     38  f5c6							; Reset score
     39  f5c6		       a9 00		      lda	#0
     40  f5c8		       85 95		      sta	ScoreValue+1
     41  f5ca
     42  f5ca							; Check if we haven't reached the final level
     43  f5ca		       a5 9f		      lda	LevelCurrent
     44  f5cc		       c9 12		      cmp	#LEVELS-1
     45  f5ce		       b0 05		      bcs	.level_update_return
     46  f5d0
     47  f5d0		       e6 9f		      inc	LevelCurrent
     48  f5d2		       20 d9 f5 	      jsr	LevelLoad
     49  f5d5
     50  f5d5				   .level_update_return
     51  f5d5
     52  f5d5		       20 fc f5 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     53  f5d8
     54  f5d8		       60		      rts
     55  f5d9
     56  f5d9				   LevelLoad
     57  f5d9
     58  f5d9							; Bug Speed: level/4+2
     59  f5d9		       a5 9f		      lda	LevelCurrent
     60  f5db		       4a		      lsr		; /2
     61  f5dc		       4a		      lsr		; /2
     62  f5dd		       69 02		      adc	#2
     63  f5df		       85 b7		      sta	BugSpeed
     64  f5e1
     65  f5e1							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     66  f5e1		       a9 14		      lda	#20
     67  f5e3		       18		      clc
     68  f5e4		       e5 9f		      sbc	LevelCurrent
     69  f5e6		       0a		      asl		; x2
     70  f5e7		       85 83		      sta	Temp
     71  f5e9		       0a		      asl		; x2
     72  f5ea		       0a		      asl		; x2
     73  f5eb		       65 83		      adc	Temp
     74  f5ed		       85 c6		      sta	SwatterWaitTime
     75  f5ef
     76  f5ef							; Swatter Hit Damage: level*3+$10
     77  f5ef		       a5 9f		      lda	LevelCurrent
     78  f5f1		       18		      clc
     79  f5f2		       85 83		      sta	Temp
     80  f5f4		       0a		      asl		; x2
     81  f5f5		       65 83		      adc	Temp
     82  f5f7		       69 10		      adc	#$10
     83  f5f9		       85 c7		      sta	SwatterHitDamage
     84  f5fb
     85  f5fb		       60		      rts
     86  f5fc
     87  f5fc				   LevelLoadColor
     88  f5fc		       a4 9f		      ldy	LevelCurrent
     89  f5fe
     90  f5fe							; check b/w
     91  f5fe		       ad 82 02 	      lda	SWCHB
     92  f601					      REPEAT	4
     93  f601		       4a		      lsr
     92  f601					      REPEND
     93  f602		       4a		      lsr
     92  f602					      REPEND
     93  f603		       4a		      lsr
     92  f603					      REPEND
     93  f604		       4a		      lsr
     94  f605					      REPEND
     95  f605		       90 0b		      bcc	.level_load_bw
     96  f607
     97  f607				   .level_load_color
     98  f607
     99  f607							; Background Color
    100  f607		       b9 1b f6 	      lda	LevelDataBk,y
    101  f60a		       85 a1		      sta	WebColor+0
    102  f60c
    103  f60c							; Web Color
    104  f60c		       b9 2e f6 	      lda	LevelDataPf,y
    105  f60f		       85 a2		      sta	WebColor+1
    106  f611
    107  f611		       60		      rts
    108  f612
    109  f612				   .level_load_bw
    110  f612
    111  f612							; Background Color
    112  f612		       a9 00		      lda	#WEB_BG_COLOR
    113  f614		       85 a1		      sta	WebColor+0
    114  f616
    115  f616							; Web Color
    116  f616		       a9 02		      lda	#WEB_FG_COLOR
    117  f618		       85 a2		      sta	WebColor+1
    118  f61a
    119  f61a		       60		      rts
    120  f61b
    121  f61b							; Easy: 1-5
    122  f61b							; Medium: 6-9
    123  f61b							; Hard: 10-15
    124  f61b							; Extreme: 16-19
    125  f61b
    126  f61b				   LevelDataBk		; Background Color
    127  f61b		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    128  f61c		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    129  f61d		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    130  f61e		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    131  f61f		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    132  f620		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    133  f621		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    134  f622		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    135  f623		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    136  f624		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    137  f625		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    138  f626		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    139  f627		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    140  f628		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    141  f629		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    142  f62a		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    143  f62b		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    144  f62c		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    145  f62d		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    146  f62e
    147  f62e				   LevelDataPf		; Web Color
    148  f62e		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    149  f62f		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    150  f630		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    151  f631		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    152  f632		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    153  f633		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    154  f634		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    155  f635		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    156  f636		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    157  f637		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    158  f638		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    159  f639		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    160  f63a		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    161  f63b		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    162  f63c		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    163  f63d		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    164  f63e		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    165  f63f		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    166  f640		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f641					      include	"objects/score.asm"
      1  f641							;======================
      2  f641							; Score (playfield)
      3  f641							;======================
      4  f641
      5  f641							; Constants
      6  f641
      7  f641		       00 00	   SCORE_BG_COLOR =	#$00
      8  f641		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f641		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f641		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f641		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f641		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f641
     14  f641		       00 05	   SCORE_LABEL_SIZE =	5
     15  f641		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f641		       00 02	   SCORE_LINE_SIZE =	2
     17  f641		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f641
     19  f641							; Initialization
     20  f641
     21  f641				   ScoreInit
     22  f641
     23  f641							; Health Score
     24  f641		       a9 ff		      lda	#$ff
     25  f643		       85 94		      sta	ScoreValue+0
     26  f645
     27  f645							; Game Score
     28  f645		       a9 00		      lda	#0
     29  f647		       85 95		      sta	ScoreValue+1
     30  f649
     31  f649		       60		      rts
     32  f64a
     33  f64a							; Frame Update
     34  f64a
     35  f64a				   ScoreUpdate
     36  f64a
     37  f64a							; Current Level Digits
     38  f64a		       a5 9f		      lda	LevelCurrent
     39  f64c		       18		      clc
     40  f64d		       69 01		      adc	#1
     41  f64f
     42  f64f		       20 21 f0 	      jsr	BinBcdConvert
     43  f652
     44  f652							; Only use first byte
     45  f652		       8a		      txa
     46  f653		       29 0f		      and	#$0f
     47  f655		       a8		      tay
     48  f656		       8a		      txa
     49  f657		       29 f0		      and	#$f0
     50  f659					      REPEAT	4
     51  f659		       4a		      lsr
     50  f659					      REPEND
     51  f65a		       4a		      lsr
     50  f65a					      REPEND
     51  f65b		       4a		      lsr
     50  f65b					      REPEND
     51  f65c		       4a		      lsr
     52  f65d					      REPEND
     53  f65d		       aa		      tax
     54  f65e
     55  f65e							; Adjust index positions by multiplying by 5
     56  f65e		       8a		      txa
     57  f65f		       85 83		      sta	Temp
     58  f661		       0a		      asl
     59  f662		       0a		      asl
     60  f663		       65 83		      adc	Temp
     61  f665		       85 98		      sta	ScoreDigitTens
     62  f667
     63  f667		       98		      tya
     64  f668		       85 83		      sta	Temp
     65  f66a		       0a		      asl
     66  f66b		       0a		      asl
     67  f66c		       65 83		      adc	Temp
     68  f66e		       85 96		      sta	ScoreDigitOnes
     69  f670
     70  f670							; Score Digits
     71  f670		       a5 95		      lda	ScoreValue+1
     72  f672
     73  f672		       20 21 f0 	      jsr	BinBcdConvert
     74  f675
     75  f675							; Only use first byte
     76  f675		       8a		      txa
     77  f676		       29 0f		      and	#$0f
     78  f678		       a8		      tay
     79  f679		       8a		      txa
     80  f67a		       29 f0		      and	#$f0
     81  f67c					      REPEAT	4
     82  f67c		       4a		      lsr
     81  f67c					      REPEND
     82  f67d		       4a		      lsr
     81  f67d					      REPEND
     82  f67e		       4a		      lsr
     81  f67e					      REPEND
     82  f67f		       4a		      lsr
     83  f680					      REPEND
     84  f680		       aa		      tax
     85  f681
     86  f681							; Adjust index positions by multiplying by 5
     87  f681		       8a		      txa
     88  f682		       85 83		      sta	Temp
     89  f684		       0a		      asl
     90  f685		       0a		      asl
     91  f686		       65 83		      adc	Temp
     92  f688		       85 99		      sta	ScoreDigitTens+1
     93  f68a
     94  f68a		       98		      tya
     95  f68b		       85 83		      sta	Temp
     96  f68d		       0a		      asl
     97  f68e		       0a		      asl
     98  f68f		       65 83		      adc	Temp
     99  f691		       85 97		      sta	ScoreDigitOnes+1
    100  f693
    101  f693							; Health Bar
    102  f693		       a5 94		      lda	ScoreValue+0
    103  f695		       f0 1c		      beq	.score_update_bar_empty
    104  f697
    105  f697					      REPEAT	4
    106  f697		       4a		      lsr
    105  f697					      REPEND
    106  f698		       4a		      lsr
    105  f698					      REPEND
    106  f699		       4a		      lsr
    105  f699					      REPEND
    106  f69a		       4a		      lsr
    107  f69b					      REPEND
    108  f69b		       c9 08		      cmp	#8
    109  f69d		       b0 09		      bcs	.score_update_bar_top
    110  f69f
    111  f69f				   .score_update_bar_bottom
    112  f69f		       aa		      tax
    113  f6a0		       bd c6 f7 	      lda	ScoreBar,x
    114  f6a3		       a0 00		      ldy	#$00
    115  f6a5		       4c b7 f6 	      jmp	.score_update_bar_store
    116  f6a8
    117  f6a8				   .score_update_bar_top
    118  f6a8		       29 07		      and	#%00000111
    119  f6aa		       aa		      tax
    120  f6ab		       a9 7f		      lda	#$7f
    121  f6ad		       bc ce f7 	      ldy	ScoreBarFlip,x
    122  f6b0		       4c b7 f6 	      jmp	.score_update_bar_store
    123  f6b3
    124  f6b3				   .score_update_bar_empty
    125  f6b3		       a9 00		      lda	#0
    126  f6b5		       a0 00		      ldy	#0
    127  f6b7
    128  f6b7				   .score_update_bar_store
    129  f6b7		       85 9d		      sta	ScoreBarGfx+0
    130  f6b9		       84 9e		      sty	ScoreBarGfx+1
    131  f6bb
    132  f6bb				   .score_update_end
    133  f6bb		       60		      rts
    134  f6bc
    135  f6bc							; Draw loop (uses SCORE_LINES scanlines)
    136  f6bc
    137  f6bc				   ScoreDraw
    138  f6bc
    139  f6bc							; Load Colors
    140  f6bc		       a9 00		      lda	#SCORE_BG_COLOR
    141  f6be		       85 09		      sta	COLUBK
    142  f6c0		       a9 06		      lda	#SCORE_LABEL_COLOR
    143  f6c2		       85 08		      sta	COLUPF
    144  f6c4		       85 06		      sta	COLUP0
    145  f6c6		       85 07		      sta	COLUP1
    146  f6c8
    147  f6c8							; Set Non-Mirror
    148  f6c8		       a5 80		      lda	CtrlPf
    149  f6ca		       29 fc		      and	#%11111100
    150  f6cc		       09 02		      ora	#%00000010
    151  f6ce		       85 80		      sta	CtrlPf
    152  f6d0		       85 0a		      sta	CTRLPF
    153  f6d2
    154  f6d2		       a2 00		      ldx	#0
    155  f6d4				   .score_draw_label
    156  f6d4
    157  f6d4		       85 02		      sta	WSYNC
    158  f6d6
    159  f6d6							; First half of image
    160  f6d6		       bd 20 f1 	      lda	ScoreLabel+0,x	; 4
    161  f6d9		       85 0d		      sta	PF0	; 3
    162  f6db		       bd 21 f1 	      lda	ScoreLabel+1,x
    163  f6de		       85 0e		      sta	PF1
    164  f6e0		       bd 22 f1 	      lda	ScoreLabel+2,x
    165  f6e3		       85 0f		      sta	PF2
    166  f6e5
      0  f6e5					      sleep	8
      1  f6e5				   .CYCLES    SET	8
      2  f6e5
      3  f6e5				  -	      IF	.CYCLES < 2
      4  f6e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6e5				  -	      ERR
      6  f6e5					      ENDIF
      7  f6e5
      8  f6e5				  -	      IF	.CYCLES & 1
      9  f6e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6e5				  -	      nop	0
     11  f6e5				  -	      ELSE
     12  f6e5				  -	      bit	VSYNC
     13  f6e5				  -	      ENDIF
     14  f6e5				  -.CYCLES    SET	.CYCLES - 3
     15  f6e5					      ENDIF
     16  f6e5
     17  f6e5					      REPEAT	.CYCLES / 2
     18  f6e5		       ea		      nop
     17  f6e5					      REPEND
     18  f6e6		       ea		      nop
     17  f6e6					      REPEND
     18  f6e7		       ea		      nop
     17  f6e7					      REPEND
     18  f6e8		       ea		      nop
     19  f6e9					      REPEND
    168  f6e9
    169  f6e9							; Second half of image
    170  f6e9							;lda ScoreLabel+3,x ; 4
    171  f6e9		       a9 00		      lda	#0	; 2
    172  f6eb		       85 0d		      sta	PF0	; 3
    173  f6ed		       bd 24 f1 	      lda	ScoreLabel+4,x
    174  f6f0		       85 0e		      sta	PF1
    175  f6f2		       bd 25 f1 	      lda	ScoreLabel+5,x
    176  f6f5		       85 0f		      sta	PF2
    177  f6f7
    178  f6f7		       8a		      txa
    179  f6f8		       18		      clc
    180  f6f9		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    181  f6fb		       aa		      tax
    182  f6fc		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    183  f6fe		       d0 d4		      bne	.score_draw_label
    184  f700
    185  f700							; Clear labels and setup color
    186  f700		       a9 00		      lda	#0
    187  f702		       85 0d		      sta	PF0
    188  f704		       85 0e		      sta	PF1
    189  f706		       85 0f		      sta	PF2
    190  f708
    191  f708		       85 02		      sta	WSYNC
    192  f70a
    193  f70a							; Load Colors
    194  f70a		       ad 82 02 	      lda	SWCHB
    195  f70d					      REPEAT	4
    196  f70d		       4a		      lsr
    195  f70d					      REPEND
    196  f70e		       4a		      lsr
    195  f70e					      REPEND
    196  f70f		       4a		      lsr
    195  f70f					      REPEND
    196  f710		       4a		      lsr
    197  f711					      REPEND
    198  f711		       90 0d		      bcc	.score_draw_bw
    199  f713
    200  f713				   .score_draw_color
    201  f713		       a9 44		      lda	#SCORE_LEVEL_COLOR
    202  f715		       85 08		      sta	COLUPF
    203  f717		       85 06		      sta	COLUP0
    204  f719		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    205  f71b		       85 07		      sta	COLUP1
    206  f71d
    207  f71d		       4c 2a f7 	      jmp	.score_draw_digit_start
    208  f720
    209  f720				   .score_draw_bw
    210  f720		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    211  f722		       85 08		      sta	COLUPF
    212  f724		       85 06		      sta	COLUP0
    213  f726		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    214  f728		       85 07		      sta	COLUP1
    215  f72a
    216  f72a				   .score_draw_digit_start
    217  f72a
    218  f72a		       85 02		      sta	WSYNC
    219  f72c
    220  f72c							; Prepare initial line
    221  f72c
    222  f72c							; Level
    223  f72c		       a4 98		      ldy	ScoreDigitTens
    224  f72e		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    225  f731		       29 f0		      and	#$f0
    226  f733		       85 9a		      sta	ScoreDigitGfx
    227  f735
    228  f735		       a4 96		      ldy	ScoreDigitOnes
    229  f737		       b9 bc f0 	      lda	ScoreDigits,y
    230  f73a		       29 f0		      and	#$f0
    231  f73c		       85 9b		      sta	ScoreDigitGfx+1
    232  f73e
    233  f73e							; Score
    234  f73e		       a4 99		      ldy	ScoreDigitTens+1
    235  f740		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    236  f743		       29 0f		      and	#$0f
    237  f745		       85 9c		      sta	ScoreDigitGfx+2
    238  f747
    239  f747		       a4 97		      ldy	ScoreDigitOnes+1
    240  f749		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    241  f74c		       29 f0		      and	#$f0
    242  f74e		       05 9c		      ora	ScoreDigitGfx+2
    243  f750		       85 9c		      sta	ScoreDigitGfx+2
    244  f752
    245  f752		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    246  f754		       a5 9a		      lda	ScoreDigitGfx
    247  f756		       85 02		      sta	WSYNC
    248  f758				   .score_draw_digit
    249  f758
    250  f758							;lda ScoreDigitGfx
    251  f758		       85 0d		      sta	PF0
    252  f75a		       a5 9b		      lda	ScoreDigitGfx+1
    253  f75c		       85 0e		      sta	PF1
    254  f75e		       a5 9c		      lda	ScoreDigitGfx+2
    255  f760		       85 0f		      sta	PF2
    256  f762
    257  f762							; Begin preparing next line
    258  f762		       e6 96		      inc	ScoreDigitOnes
    259  f764		       e6 98		      inc	ScoreDigitTens
    260  f766		       e6 97		      inc	ScoreDigitOnes+1
    261  f768		       e6 99		      inc	ScoreDigitTens+1
    262  f76a
    263  f76a		       a9 00		      lda	#0
    264  f76c		       85 0d		      sta	PF0
    265  f76e		       a5 9d		      lda	ScoreBarGfx+0
    266  f770		       85 0e		      sta	PF1
    267  f772		       a5 9e		      lda	ScoreBarGfx+1
    268  f774		       85 0f		      sta	PF2
    269  f776
    270  f776							; Level 1st Digit
    271  f776		       a4 98		      ldy	ScoreDigitTens
    272  f778		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    273  f77b		       29 f0		      and	#$f0
    274  f77d		       85 83		      sta	Temp
    275  f77f
    276  f77f							; Score 1st Digit
    277  f77f		       a4 99		      ldy	ScoreDigitTens+1
    278  f781		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    279  f784		       29 0f		      and	#$0f
    280  f786		       85 84		      sta	Temp+1
    281  f788
    282  f788		       a5 9a		      lda	ScoreDigitGfx
    283  f78a		       85 0d		      sta	PF0
    284  f78c		       a5 9b		      lda	ScoreDigitGfx+1
    285  f78e		       85 0e		      sta	PF1
    286  f790		       a5 9c		      lda	ScoreDigitGfx+2
    287  f792		       85 0f		      sta	PF2
    288  f794
    289  f794							; Level 2nd Digit (and transfer)
    290  f794		       a4 96		      ldy	ScoreDigitOnes
    291  f796		       b9 bc f0 	      lda	ScoreDigits,y
    292  f799		       29 f0		      and	#$f0
    293  f79b		       85 9b		      sta	ScoreDigitGfx+1
    294  f79d
      0  f79d					      sleep	3
      1  f79d				   .CYCLES    SET	3
      2  f79d
      3  f79d				  -	      IF	.CYCLES < 2
      4  f79d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f79d				  -	      ERR
      6  f79d					      ENDIF
      7  f79d
      8  f79d					      IF	.CYCLES & 1
      9  f79d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f79d		       04 00		      nop	0
     11  f79f				  -	      ELSE
     12  f79f				  -	      bit	VSYNC
     13  f79f					      ENDIF
     14  f79f				   .CYCLES    SET	.CYCLES - 3
     15  f79f					      ENDIF
     16  f79f
     17  f79f				  -	      REPEAT	.CYCLES / 2
     18  f79f				  -	      nop
     19  f79f					      REPEND
    296  f79f
    297  f79f		       a9 00		      lda	#0
    298  f7a1		       85 0d		      sta	PF0
    299  f7a3		       a5 9d		      lda	ScoreBarGfx+0
    300  f7a5		       85 0e		      sta	PF1
    301  f7a7		       a4 9e		      ldy	ScoreBarGfx+1
    302  f7a9		       84 0f		      sty	PF2
    303  f7ab
    304  f7ab							; Score 2nd Digit (and transfer)
    305  f7ab		       a4 97		      ldy	ScoreDigitOnes+1
    306  f7ad		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    307  f7b0		       29 f0		      and	#$f0
    308  f7b2		       05 84		      ora	Temp+1
    309  f7b4		       85 9c		      sta	ScoreDigitGfx+2
    310  f7b6
    311  f7b6							; Transfer Level 1st Digit
    312  f7b6		       a5 83		      lda	Temp
    313  f7b8		       85 9a		      sta	ScoreDigitGfx
    314  f7ba
    315  f7ba		       ca		      dex
    316  f7bb		       d0 9b		      bne	.score_draw_digit
    317  f7bd
    318  f7bd		       a9 00		      lda	#0
    319  f7bf		       85 0d		      sta	PF0
    320  f7c1		       85 0e		      sta	PF1
    321  f7c3		       85 0f		      sta	PF2
    322  f7c5
    323  f7c5		       60		      rts
    324  f7c6
    325  f7c6				   ScoreBar
    326  f7c6		       40		      .BYTE.b	#%01000000
    327  f7c7		       40		      .BYTE.b	#%01000000
    328  f7c8		       60		      .BYTE.b	#%01100000
    329  f7c9		       70		      .BYTE.b	#%01110000
    330  f7ca		       78		      .BYTE.b	#%01111000
    331  f7cb		       7c		      .BYTE.b	#%01111100
    332  f7cc		       7e		      .BYTE.b	#%01111110
    333  f7cd		       7f		      .BYTE.b	#%01111111
    334  f7ce
    335  f7ce				   ScoreBarFlip
    336  f7ce		       01		      .BYTE.b	#%00000001
    337  f7cf		       03		      .BYTE.b	#%00000011
    338  f7d0		       07		      .BYTE.b	#%00000111
    339  f7d1		       0f		      .BYTE.b	#%00001111
    340  f7d2		       1f		      .BYTE.b	#%00011111
    341  f7d3		       3f		      .BYTE.b	#%00111111
    342  f7d4		       7f		      .BYTE.b	#%01111111
    343  f7d5		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f7d6					      include	"objects/web.asm"
      1  f7d6							;================
      2  f7d6							; Web (Playfield)
      3  f7d6							;================
      4  f7d6
      5  f7d6							; Constants
      6  f7d6
      7  f7d6		       00 00	   WEB_BG_COLOR =	#$00
      8  f7d6		       00 02	   WEB_FG_COLOR =	#$02
      9  f7d6
     10  f7d6		       00 1c	   WEB_SIZE   =	28
     11  f7d6		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f7d6		       00 06	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f7d6
     14  f7d6							; Scanline Draw
     15  f7d6
     16  f7d6				   WebDrawStart
     17  f7d6
     18  f7d6							; Load Colors
     19  f7d6		       a5 a2		      lda	WebColor+1
     20  f7d8		       85 08		      sta	COLUPF
     21  f7da
     22  f7da							; Mirror playfield and use standard playfield color
     23  f7da		       a5 80		      lda	CtrlPf
     24  f7dc		       29 fc		      and	#%11111100
     25  f7de		       09 01		      ora	#%00000001
     26  f7e0		       85 80		      sta	CtrlPf
     27  f7e2		       85 0a		      sta	CTRLPF
     28  f7e4
     29  f7e4							; Initialize image index
     30  f7e4		       a9 00		      lda	#0
     31  f7e6		       85 a0		      sta	WebIndex
     32  f7e8
     33  f7e8		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f7e9					      include	"objects/spider.asm"
      1  f7e9							;=================
      2  f7e9							; Spider (player0)
      3  f7e9							;=================
      4  f7e9
      5  f7e9							; Constants
      6  f7e9
      7  f7e9		       00 56	   SPIDER_COLOR =	#$56
      8  f7e9		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f7e9		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f7e9		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f7e9
     12  f7e9		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f7e9		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f7e9		       00 02	   SPIDER_VEL_X =	2
     15  f7e9		       00 02	   SPIDER_VEL_Y =	2
     16  f7e9
     17  f7e9							; Initialization
     18  f7e9
     19  f7e9				   SpiderInit
     20  f7e9
     21  f7e9							; Initialize Position in center of screen
     22  f7e9		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f7eb		       85 a5		      sta	SpiderPos
     24  f7ed		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f7ef		       85 a6		      sta	SpiderPos+1
     26  f7f1
     27  f7f1							; Setup Sprite
      0  f7f1					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f7f1				   .POINTER   SET	SpiderPtr
      2  f7f1				   .ADDRESS   SET	SpiderSprite
      3  f7f1
      4  f7f1		       a9 92		      LDA	#<.ADDRESS
      5  f7f3		       85 a3		      STA	.POINTER
      6  f7f5		       a9 f1		      LDA	#>.ADDRESS
      7  f7f7		       85 a4		      STA	.POINTER+1
      8  f7f9
     29  f7f9
     30  f7f9		       60		      rts
     31  f7fa
     32  f7fa							; Frame Update
     33  f7fa
     34  f7fa				   SpiderUpdate
     35  f7fa		       20 01 f8 	      jsr	SpiderControl
     36  f7fd		       20 e7 f8 	      jsr	SpiderCollision
     37  f800		       60		      rts
     38  f801
     39  f801				   SpiderControl
     40  f801
     41  f801							; Control Position
     42  f801		       a6 a5		      ldx	SpiderPos
     43  f803		       a4 a6		      ldy	SpiderPos+1
     44  f805		       ad 80 02 	      lda	SWCHA
     45  f808
     46  f808				   .spider_control_check_right
     47  f808		       30 02		      bmi	.spider_control_check_left
     48  f80a
     49  f80a					      REPEAT	#SPIDER_VEL_X
     50  f80a		       e8		      inx
     49  f80a					      REPEND
     50  f80b		       e8		      inx
     51  f80c					      REPEND
     52  f80c
     53  f80c				   .spider_control_check_left
     54  f80c		       2a		      rol
     55  f80d		       30 02		      bmi	.spider_control_check_down
     56  f80f
     57  f80f					      REPEAT	#SPIDER_VEL_X
     58  f80f		       ca		      dex
     57  f80f					      REPEND
     58  f810		       ca		      dex
     59  f811					      REPEND
     60  f811
     61  f811				   .spider_control_check_down
     62  f811		       2a		      rol
     63  f812		       30 02		      bmi	.spider_control_check_up
     64  f814
     65  f814					      REPEAT	#SPIDER_VEL_Y
     66  f814		       88		      dey
     65  f814					      REPEND
     66  f815		       88		      dey
     67  f816					      REPEND
     68  f816
     69  f816				   .spider_control_check_up
     70  f816		       2a		      rol
     71  f817		       30 02		      bmi	.spider_control_sprite
     72  f819
     73  f819					      REPEAT	#SPIDER_VEL_Y
     74  f819		       c8		      iny
     73  f819					      REPEND
     74  f81a		       c8		      iny
     75  f81b					      REPEND
     76  f81b
     77  f81b				   .spider_control_sprite
     78  f81b							; Control Sprite
     79  f81b		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     80  f81d
     81  f81d				   .spider_control_sprite_x
     82  f81d		       e4 a5		      cpx	SpiderPos
     83  f81f		       90 04		      bcc	.spider_control_sprite_left
     84  f821		       f0 09		      beq	.spider_control_sprite_y
     85  f823		       b0 05		      bcs	.spider_control_sprite_right
     86  f825
     87  f825				   .spider_control_sprite_left
     88  f825		       09 80		      ora	#%10000000
     89  f827		       4c 2c f8 	      jmp	.spider_control_sprite_y
     90  f82a
     91  f82a				   .spider_control_sprite_right
     92  f82a		       09 40		      ora	#%01000000
     93  f82c
     94  f82c				   .spider_control_sprite_y
     95  f82c		       c4 a6		      cpy	SpiderPos+1
     96  f82e		       90 04		      bcc	.spider_control_sprite_down
     97  f830		       f0 09		      beq	.spider_control_sprite_store
     98  f832		       b0 05		      bcs	.spider_control_sprite_up
     99  f834
    100  f834				   .spider_control_sprite_down
    101  f834		       09 10		      ora	#%00010000
    102  f836		       4c 3b f8 	      jmp	.spider_control_sprite_store
    103  f839
    104  f839				   .spider_control_sprite_up
    105  f839		       09 20		      ora	#%00100000
    106  f83b
    107  f83b				   .spider_control_sprite_store
    108  f83b		       c9 00		      cmp	#%00000000
    109  f83d		       f0 02		      beq	.spider_control_boundary
    110  f83f		       85 a7		      sta	SpiderCtrl
    111  f841
    112  f841				   .spider_control_boundary
    113  f841							; Check Playfield Boundaries
    114  f841
    115  f841				   .spider_control_boundary_left
    116  f841		       e0 03		      cpx	#SPIDER_VEL_X+1
    117  f843		       b0 05		      bcs	.spider_control_boundary_right
    118  f845		       a2 03		      ldx	#SPIDER_VEL_X+1
    119  f847		       4c 50 f8 	      jmp	.spider_control_boundary_top
    120  f84a
    121  f84a				   .spider_control_boundary_right
    122  f84a		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    123  f84c		       90 02		      bcc	.spider_control_boundary_top
    124  f84e		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    125  f850
    126  f850				   .spider_control_boundary_top
    127  f850		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    128  f852		       b0 05		      bcs	.spider_control_boundary_bottom
    129  f854		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    130  f856		       4c 5f f8 	      jmp	.spider_control_store
    131  f859
    132  f859				   .spider_control_boundary_bottom
    133  f859		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    134  f85b		       90 02		      bcc	.spider_control_store
    135  f85d		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    136  f85f
    137  f85f				   .spider_control_store
    138  f85f							; Store new position
    139  f85f		       86 a5		      stx	SpiderPos
    140  f861		       84 a6		      sty	SpiderPos+1
    141  f863
    142  f863							; TODO: Optimize this somehow?
    143  f863				   .spider_control_sprite_assign
    144  f863							; Skip if no change
    145  f863		       c9 00		      cmp	#%00000000
    146  f865		       f0 7f		      beq	.spider_control_return
    147  f867
    148  f867		       a2 00		      ldx	#%00000000	; For reflection
    149  f869
    150  f869				   .spider_control_sprite_assign_left
    151  f869		       c9 80		      cmp	#%10000000
    152  f86b		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f86d					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f86d				   .POINTER   SET	SpiderPtr
      2  f86d				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f86d
      4  f86d		       a9 a2		      LDA	#<.ADDRESS
      5  f86f		       85 a3		      STA	.POINTER
      6  f871		       a9 f1		      LDA	#>.ADDRESS
      7  f873		       85 a4		      STA	.POINTER+1
      8  f875
    154  f875		       a2 08		      ldx	#%00001000
    155  f877		       4c e4 f8 	      jmp	.spider_control_reflect
    156  f87a
    157  f87a				   .spider_control_sprite_assign_right
    158  f87a		       c9 40		      cmp	#%01000000
    159  f87c		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f87e					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f87e				   .POINTER   SET	SpiderPtr
      2  f87e				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f87e
      4  f87e		       a9 a2		      LDA	#<.ADDRESS
      5  f880		       85 a3		      STA	.POINTER
      6  f882		       a9 f1		      LDA	#>.ADDRESS
      7  f884		       85 a4		      STA	.POINTER+1
      8  f886
    161  f886		       4c e4 f8 	      jmp	.spider_control_reflect
    162  f889
    163  f889				   .spider_control_sprite_assign_top
    164  f889		       c9 20		      cmp	#%00100000
    165  f88b		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f88d					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f88d				   .POINTER   SET	SpiderPtr
      2  f88d				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f88d
      4  f88d		       a9 92		      LDA	#<.ADDRESS
      5  f88f		       85 a3		      STA	.POINTER
      6  f891		       a9 f1		      LDA	#>.ADDRESS
      7  f893		       85 a4		      STA	.POINTER+1
      8  f895
    167  f895		       4c e4 f8 	      jmp	.spider_control_reflect
    168  f898
    169  f898				   .spider_control_sprite_assign_bottom
    170  f898		       c9 10		      cmp	#%00010000
    171  f89a		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f89c					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f89c				   .POINTER   SET	SpiderPtr
      2  f89c				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f89c
      4  f89c		       a9 b2		      LDA	#<.ADDRESS
      5  f89e		       85 a3		      STA	.POINTER
      6  f8a0		       a9 f1		      LDA	#>.ADDRESS
      7  f8a2		       85 a4		      STA	.POINTER+1
      8  f8a4
    173  f8a4		       4c e4 f8 	      jmp	.spider_control_reflect
    174  f8a7
    175  f8a7				   .spider_control_sprite_assign_top_right
    176  f8a7		       c9 60		      cmp	#%01100000
    177  f8a9		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f8ab					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8ab				   .POINTER   SET	SpiderPtr
      2  f8ab				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8ab
      4  f8ab		       a9 a2		      LDA	#<.ADDRESS
      5  f8ad		       85 a3		      STA	.POINTER
      6  f8af		       a9 f1		      LDA	#>.ADDRESS
      7  f8b1		       85 a4		      STA	.POINTER+1
      8  f8b3
    179  f8b3		       4c e4 f8 	      jmp	.spider_control_reflect
    180  f8b6
    181  f8b6				   .spider_control_sprite_assign_bottom_right
    182  f8b6		       c9 50		      cmp	#%01010000
    183  f8b8		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f8ba					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8ba				   .POINTER   SET	SpiderPtr
      2  f8ba				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8ba
      4  f8ba		       a9 a2		      LDA	#<.ADDRESS
      5  f8bc		       85 a3		      STA	.POINTER
      6  f8be		       a9 f1		      LDA	#>.ADDRESS
      7  f8c0		       85 a4		      STA	.POINTER+1
      8  f8c2
    185  f8c2		       4c e4 f8 	      jmp	.spider_control_reflect
    186  f8c5
    187  f8c5				   .spider_control_sprite_assign_bottom_left
    188  f8c5		       c9 90		      cmp	#%10010000
    189  f8c7		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f8c9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8c9				   .POINTER   SET	SpiderPtr
      2  f8c9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8c9
      4  f8c9		       a9 a2		      LDA	#<.ADDRESS
      5  f8cb		       85 a3		      STA	.POINTER
      6  f8cd		       a9 f1		      LDA	#>.ADDRESS
      7  f8cf		       85 a4		      STA	.POINTER+1
      8  f8d1
    191  f8d1		       a2 08		      ldx	#%00001000
    192  f8d3		       4c e4 f8 	      jmp	.spider_control_reflect
    193  f8d6
    194  f8d6				   .spider_control_sprite_assign_top_left
    195  f8d6		       c9 a0		      cmp	#%10100000
    196  f8d8		       d0 0a		      bne	.spider_control_reflect
      0  f8da					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8da				   .POINTER   SET	SpiderPtr
      2  f8da				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8da
      4  f8da		       a9 a2		      LDA	#<.ADDRESS
      5  f8dc		       85 a3		      STA	.POINTER
      6  f8de		       a9 f1		      LDA	#>.ADDRESS
      7  f8e0		       85 a4		      STA	.POINTER+1
      8  f8e2
    198  f8e2		       a2 08		      ldx	#%00001000
    199  f8e4
    200  f8e4				   .spider_control_reflect
    201  f8e4		       86 0b		      stx	REFP0
    202  f8e6
    203  f8e6				   .spider_control_return
    204  f8e6		       60		      rts
    205  f8e7
    206  f8e7				   SpiderCollision
    207  f8e7		       a0 56		      ldy	#SPIDER_COLOR
    208  f8e9
    209  f8e9							; Check b/w
    210  f8e9		       ad 82 02 	      lda	SWCHB
    211  f8ec					      REPEAT	4
    212  f8ec		       4a		      lsr
    211  f8ec					      REPEND
    212  f8ed		       4a		      lsr
    211  f8ed					      REPEND
    212  f8ee		       4a		      lsr
    211  f8ee					      REPEND
    212  f8ef		       4a		      lsr
    213  f8f0					      REPEND
    214  f8f0		       b0 02		      bcs	.spider_collision_m0
    215  f8f2
    216  f8f2		       a0 0e		      ldy	#SPIDER_BW_COLOR
    217  f8f4
    218  f8f4				   .spider_collision_m0
    219  f8f4							; Check stun status
    220  f8f4		       a6 b8		      ldx	BugStunned
    221  f8f6		       d0 04		      bne	.spider_collision_m1
    222  f8f8
    223  f8f8							; Collision for M0 (V set)
    224  f8f8		       24 00		      bit	CXM0P
    225  f8fa		       70 0b		      bvs	.spider_collision_active
    226  f8fc
    227  f8fc				   .spider_collision_m1
    228  f8fc							; Check stun status
    229  f8fc		       a6 b9		      ldx	BugStunned+1
    230  f8fe		       d0 14		      bne	.spider_collision_return
    231  f900
    232  f900							; Collision for M1 (N set)
    233  f900		       24 01		      bit	CXM1P
    234  f902		       30 03		      bmi	.spider_collision_active
    235  f904
    236  f904		       4c 14 f9 	      jmp	.spider_collision_return
    237  f907
    238  f907				   .spider_collision_active
    239  f907		       a0 44		      ldy	#SPIDER_COL_COLOR
    240  f909
    241  f909							; Check b/w
    242  f909		       ad 82 02 	      lda	SWCHB
    243  f90c					      REPEAT	4
    244  f90c		       4a		      lsr
    243  f90c					      REPEND
    244  f90d		       4a		      lsr
    243  f90d					      REPEND
    244  f90e		       4a		      lsr
    243  f90e					      REPEND
    244  f90f		       4a		      lsr
    245  f910					      REPEND
    246  f910		       b0 02		      bcs	.spider_collision_return
    247  f912
    248  f912		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    249  f914
    250  f914				   .spider_collision_return
    251  f914		       84 a8		      sty	SpiderColor
    252  f916		       60		      rts
    253  f917
    254  f917				   SpiderPosition
    255  f917
    256  f917							; Set Position
    257  f917		       a2 00		      ldx	#0	; Object (player0)
    258  f919		       a5 a5		      lda	SpiderPos	; X Position
    259  f91b		       20 00 f0 	      jsr	PosObject
    260  f91e
    261  f91e		       60		      rts
    262  f91f
    263  f91f							; Scanline Draw
    264  f91f
    265  f91f				   SpiderDrawStart
    266  f91f
    267  f91f							; Set player 0 to be quad size
    268  f91f		       a5 81		      lda	NuSiz0
    269  f921		       29 f8		      and	#%11111000
    270  f923		       09 05		      ora	#%00000101
    271  f925		       85 81		      sta	NuSiz0
    272  f927		       85 04		      sta	NUSIZ0
    273  f929
    274  f929							; Set sprite color
    275  f929		       a5 a8		      lda	SpiderColor
    276  f92b		       85 06		      sta	COLUP0
    277  f92d
    278  f92d							; Determine if we need to use vertical delay (odd line)
    279  f92d		       a5 a6		      lda	SpiderPos+1	; Y Position
    280  f92f		       4a		      lsr
    281  f930		       b0 05		      bcs	.spider_draw_start_nodelay
    282  f932
    283  f932		       a0 01		      ldy	#1
    284  f934		       4c 39 f9 	      jmp	.spider_draw_start_set_delay
    285  f937
    286  f937				   .spider_draw_start_nodelay
    287  f937		       a0 00		      ldy	#0
    288  f939
    289  f939				   .spider_draw_start_set_delay
    290  f939		       84 25		      sty	VDELP0
    291  f93b
    292  f93b				   .spider_draw_start_pos
    293  f93b							; Calculate starting position
    294  f93b		       18		      clc
    295  f93c		       69 10		      adc	#SPIDER_SIZE
    296  f93e		       85 aa		      sta	SpiderDrawPos
    297  f940
    298  f940							; Initialize sprite index and line buffer
    299  f940		       a9 00		      lda	#0
    300  f942		       85 a9		      sta	SpiderIndex
    301  f944		       85 ab		      sta	SpiderLine
    302  f946
    303  f946		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f947					      include	"objects/line.asm"
      1  f947							;================
      2  f947							; Line (ball)
      3  f947							;================
      4  f947
      5  f947							; Constants
      6  f947
      7  f947		       00 08	   LINE_SIZE  =	8
      8  f947		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f947		       00 04	   LINE_VEL_X =	4
     10  f947		       00 04	   LINE_VEL_Y =	4
     11  f947
     12  f947		       00 08	   LINE_AUDIO_C =	8
     13  f947		       00 01	   LINE_AUDIO_F =	1
     14  f947		       00 04	   LINE_AUDIO_V =	4
     15  f947
     16  f947		       00 08	   LINE_SAMPLE_LEN =	8
     17  f947		       00 03	   LINE_SAMPLE_C =	3
     18  f947		       00 01	   LINE_SAMPLE_F =	1
     19  f947		       00 04	   LINE_SAMPLE_V =	4
     20  f947
     21  f947							; Initialization
     22  f947
     23  f947				   LineInit
     24  f947
     25  f947							; Initial Line Control
     26  f947		       a9 00		      lda	#0
     27  f949		       85 ae		      sta	LineEnabled
     28  f94b		       85 af		      sta	LinePos+0
     29  f94d		       85 b0		      sta	LinePos+1
     30  f94f		       85 b1		      sta	LineVelocity+0
     31  f951		       85 b2		      sta	LineVelocity+1
     32  f953		       85 b3		      sta	LineStartPos+0
     33  f955		       85 b4		      sta	LineStartPos+1
     34  f957		       85 b5		      sta	LineDrawPos+0
     35  f959		       85 b6		      sta	LineDrawPos+1
     36  f95b
     37  f95b		       60		      rts
     38  f95c
     39  f95c							; Frame Update
     40  f95c
     41  f95c				   LineUpdate
     42  f95c		       20 66 f9 	      jsr	LineControl
     43  f95f		       20 1c fa 	      jsr	LineObject
     44  f962		       20 63 fa 	      jsr	LineCollision
     45  f965		       60		      rts
     46  f966
     47  f966				   LineControl
     48  f966
     49  f966							; Check if Fire Button on controller 1 is pressed
     50  f966		       a5 0c		      lda	INPT4
     51  f968		       30 08		      bmi	.line_control_skip
     52  f96a
     53  f96a		       24 ae		      bit	LineEnabled
     54  f96c		       30 04		      bmi	.line_control_skip
     55  f96e
     56  f96e		       a5 a7		      lda	SpiderCtrl
     57  f970		       d0 03		      bne	.line_control_fire
     58  f972
     59  f972				   .line_control_skip
     60  f972		       4c 1b fa 	      jmp	.line_control_return
     61  f975
     62  f975				   .line_control_fire
     63  f975		       20 a6 fa 	      jsr	LineEnable
     64  f978
     65  f978				   .line_control_x
     66  f978		       a5 a7		      lda	SpiderCtrl
     67  f97a		       29 c0		      and	#%11000000
     68  f97c		       f0 0e		      beq	.line_control_x_none
     69  f97e				   .line_control_x_left
     70  f97e		       c9 80		      cmp	#%10000000
     71  f980		       d0 05		      bne	.line_control_x_right
     72  f982
     73  f982		       a9 fc		      lda	#-LINE_VEL_X
     74  f984		       4c 8e f9 	      jmp	.line_control_x_store
     75  f987				   .line_control_x_right
     76  f987		       a9 04		      lda	#LINE_VEL_X
     77  f989		       4c 8e f9 	      jmp	.line_control_x_store
     78  f98c				   .line_control_x_none
     79  f98c		       a9 00		      lda	#0
     80  f98e				   .line_control_x_store
     81  f98e		       85 b1		      sta	LineVelocity
     82  f990
     83  f990				   .line_control_y
     84  f990		       a5 a7		      lda	SpiderCtrl
     85  f992		       29 30		      and	#%00110000
     86  f994		       f0 0e		      beq	.line_control_y_none
     87  f996				   .line_control_y_up
     88  f996		       c9 20		      cmp	#%00100000
     89  f998		       d0 05		      bne	.line_control_y_down
     90  f99a
     91  f99a		       a9 04		      lda	#LINE_VEL_Y
     92  f99c		       4c a6 f9 	      jmp	.line_control_y_store
     93  f99f				   .line_control_y_down
     94  f99f		       a9 fc		      lda	#-LINE_VEL_Y
     95  f9a1		       4c a6 f9 	      jmp	.line_control_y_store
     96  f9a4				   .line_control_y_none
     97  f9a4		       a9 00		      lda	#0
     98  f9a6				   .line_control_y_store
     99  f9a6		       85 b2		      sta	LineVelocity+1
    100  f9a8
    101  f9a8				   .line_control_position
    102  f9a8
    103  f9a8		       a2 00		      ldx	#0	; offsetX
    104  f9aa		       a0 00		      ldy	#0	; offsetY
    105  f9ac
    106  f9ac		       a5 a7		      lda	SpiderCtrl
    107  f9ae		       29 f0		      and	#%11110000
    108  f9b0
    109  f9b0				   .line_control_position_left
    110  f9b0		       c9 80		      cmp	#%10000000
    111  f9b2		       d0 07		      bne	.line_control_position_right
    112  f9b4
    113  f9b4		       a2 00		      ldx	#0
    114  f9b6		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    115  f9b8		       4c 03 fa 	      jmp	.line_control_position_store
    116  f9bb
    117  f9bb				   .line_control_position_right
    118  f9bb		       c9 40		      cmp	#%01000000
    119  f9bd		       d0 07		      bne	.line_control_position_top
    120  f9bf
    121  f9bf		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    122  f9c1		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    123  f9c3		       4c 03 fa 	      jmp	.line_control_position_store
    124  f9c6
    125  f9c6				   .line_control_position_top
    126  f9c6		       c9 20		      cmp	#%00100000
    127  f9c8		       d0 07		      bne	.line_control_position_bottom
    128  f9ca
    129  f9ca		       a2 08		      ldx	#SPIDER_SIZE/2
    130  f9cc		       a0 10		      ldy	#SPIDER_SIZE
    131  f9ce		       4c 03 fa 	      jmp	.line_control_position_store
    132  f9d1
    133  f9d1				   .line_control_position_bottom
    134  f9d1		       c9 10		      cmp	#%00010000
    135  f9d3		       d0 05		      bne	.line_control_position_top_right
    136  f9d5
    137  f9d5		       a2 08		      ldx	#SPIDER_SIZE/2
    138  f9d7		       4c 03 fa 	      jmp	.line_control_position_store
    139  f9da
    140  f9da				   .line_control_position_top_right
    141  f9da		       c9 60		      cmp	#%01100000
    142  f9dc		       d0 07		      bne	.line_control_position_bottom_right
    143  f9de
    144  f9de		       a2 10		      ldx	#SPIDER_SIZE
    145  f9e0		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    146  f9e2		       4c 03 fa 	      jmp	.line_control_position_store
    147  f9e5
    148  f9e5				   .line_control_position_bottom_right
    149  f9e5		       c9 50		      cmp	#%01010000
    150  f9e7		       d0 07		      bne	.line_control_position_bottom_left
    151  f9e9
    152  f9e9		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    153  f9eb		       a0 00		      ldy	#0
    154  f9ed		       4c 03 fa 	      jmp	.line_control_position_store
    155  f9f0
    156  f9f0				   .line_control_position_bottom_left
    157  f9f0		       c9 90		      cmp	#%10010000
    158  f9f2		       d0 07		      bne	.line_control_position_top_left
    159  f9f4
    160  f9f4							; No Offset
    161  f9f4		       a2 04		      ldx	#LINE_SIZE/2
    162  f9f6		       a0 04		      ldy	#LINE_SIZE/2
    163  f9f8		       4c 03 fa 	      jmp	.line_control_position_store
    164  f9fb
    165  f9fb				   .line_control_position_top_left
    166  f9fb		       c9 a0		      cmp	#%10100000
    167  f9fd		       d0 04		      bne	.line_control_position_store
    168  f9ff
    169  f9ff		       a2 00		      ldx	#0
    170  fa01		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    171  fa03
    172  fa03				   .line_control_position_store
    173  fa03
    174  fa03							; Apply offsetX to playerX
    175  fa03		       a5 a5		      lda	SpiderPos
    176  fa05		       86 83		      stx	Temp
    177  fa07		       18		      clc
    178  fa08		       65 83		      adc	Temp
    179  fa0a		       aa		      tax
    180  fa0b
    181  fa0b							; Apply offsetY to playerY
    182  fa0b		       a5 a6		      lda	SpiderPos+1
    183  fa0d		       84 83		      sty	Temp
    184  fa0f		       18		      clc
    185  fa10		       65 83		      adc	Temp
    186  fa12		       a8		      tay
    187  fa13
    188  fa13		       86 af		      stx	LinePos
    189  fa15		       84 b0		      sty	LinePos+1
    190  fa17		       86 b3		      stx	LineStartPos
    191  fa19		       84 b4		      sty	LineStartPos+1
    192  fa1b
    193  fa1b				   .line_control_return
    194  fa1b		       60		      rts
    195  fa1c
    196  fa1c				   LineObject
    197  fa1c
    198  fa1c							; Check if line is enabled
    199  fa1c		       24 ae		      bit	LineEnabled
    200  fa1e		       10 42		      bpl	.line_object_return
    201  fa20
    202  fa20							; Load position
    203  fa20		       a6 af		      ldx	LinePos
    204  fa22		       a4 b0		      ldy	LinePos+1
    205  fa24
    206  fa24				   .line_object_distance
    207  fa24
    208  fa24							; Check distance from player with absolute value differences
    209  fa24
    210  fa24				   .line_object_distance_x
    211  fa24		       8a		      txa
    212  fa25		       18		      clc
    213  fa26		       e5 b3		      sbc	LineStartPos
    214  fa28		       b0 04		      bcs	.line_object_distance_x_check
    215  fa2a		       49 ff		      eor	#$FF	; C flag is clear here
    216  fa2c		       69 01		      adc	#$01	; form two's complement
    217  fa2e				   .line_object_distance_x_check		; Jumps to if positive
    218  fa2e		       c9 40		      cmp	#LINE_DISTANCE
    219  fa30		       b0 2d		      bcs	.line_object_disable
    220  fa32
    221  fa32				   .line_object_distance_y
    222  fa32		       98		      tya
    223  fa33		       18		      clc
    224  fa34		       e5 b4		      sbc	LineStartPos+1
    225  fa36		       b0 04		      bcs	.line_object_distance_y_check
    226  fa38		       49 ff		      eor	#$FF	; C flag is clear here
    227  fa3a		       69 01		      adc	#$01	; form two's complement
    228  fa3c				   .line_object_distance_y_check		; Jumps to if positive
    229  fa3c		       c9 40		      cmp	#LINE_DISTANCE
    230  fa3e		       b0 1f		      bcs	.line_object_disable
    231  fa40
    232  fa40				   .line_object_boundary
    233  fa40				   .line_object_boundary_left
    234  fa40		       e0 04		      cpx	#LINE_VEL_X
    235  fa42		       90 1b		      bcc	.line_object_disable
    236  fa44				   .line_object_boundary_right
    237  fa44		       e0 9c		      cpx	#160-LINE_VEL_X
    238  fa46		       b0 17		      bcs	.line_object_disable
    239  fa48				   .line_object_boundary_bottom
    240  fa48		       c0 04		      cpy	#LINE_VEL_Y
    241  fa4a		       90 13		      bcc	.line_object_disable
    242  fa4c				   .line_object_boundary_top
    243  fa4c		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    244  fa4e		       b0 0f		      bcs	.line_object_disable
    245  fa50
    246  fa50				   .line_object_velocity
    247  fa50
    248  fa50							; Apply Velocity
    249  fa50		       8a		      txa
    250  fa51		       18		      clc
    251  fa52		       65 b1		      adc	LineVelocity
    252  fa54		       85 af		      sta	LinePos
    253  fa56
    254  fa56		       98		      tya
    255  fa57		       18		      clc
    256  fa58		       65 b2		      adc	LineVelocity+1
    257  fa5a		       85 b0		      sta	LinePos+1
    258  fa5c
    259  fa5c		       4c 62 fa 	      jmp	.line_object_return
    260  fa5f
    261  fa5f				   .line_object_disable
    262  fa5f		       20 b2 fa 	      jsr	LineDisable
    263  fa62
    264  fa62				   .line_object_return
    265  fa62		       60		      rts
    266  fa63
    267  fa63				   LineCollision
    268  fa63
    269  fa63		       a9 78		      lda	#BUG_STUN_LENGTH
    270  fa65
    271  fa65				   .line_collision_m0
    272  fa65		       24 04		      bit	CXM0FB
    273  fa67		       50 08		      bvc	.line_collision_m1
    274  fa69
    275  fa69							; Set stun timer
    276  fa69		       85 b8		      sta	BugStunned+0
    277  fa6b
    278  fa6b							; Disable line
    279  fa6b		       20 b2 fa 	      jsr	LineDisable
    280  fa6e		       4c 7a fa 	      jmp	.line_collision_sample
    281  fa71
    282  fa71				   .line_collision_m1
    283  fa71		       24 05		      bit	CXM1FB
    284  fa73		       50 08		      bvc	.line_collision_return
    285  fa75
    286  fa75							; Set stun timer
    287  fa75		       85 b9		      sta	BugStunned+1
    288  fa77
    289  fa77							; Disable line
    290  fa77		       20 b2 fa 	      jsr	LineDisable
    291  fa7a
    292  fa7a				   .line_collision_sample
    293  fa7a		       20 d4 fa 	      jsr	LineSample
    294  fa7d
    295  fa7d				   .line_collision_return
    296  fa7d		       60		      rts
    297  fa7e
    298  fa7e				   LinePosition
    299  fa7e
    300  fa7e							; Set Line Position
    301  fa7e		       a2 04		      ldx	#4	; Object (ball)
    302  fa80		       a5 af		      lda	LinePos	; X Position
    303  fa82		       20 00 f0 	      jsr	PosObject
    304  fa85
    305  fa85		       60		      rts
    306  fa86
    307  fa86							; Scanline Draw
    308  fa86
    309  fa86				   LineDrawStart
    310  fa86
    311  fa86							; Set ball size to be 4 clocks (4/5 bits)
    312  fa86		       a5 80		      lda	CtrlPf
    313  fa88		       29 cf		      and	#%11001111
    314  fa8a		       09 20		      ora	#%00100000
    315  fa8c		       85 80		      sta	CtrlPf
    316  fa8e		       85 0a		      sta	CTRLPF
    317  fa90
    318  fa90							; Determine if we need to use vertical delay (oven line)
    319  fa90		       a5 b0		      lda	LinePos+1
    320  fa92		       4a		      lsr
    321  fa93		       90 05		      bcc	.line_draw_start_nodelay
    322  fa95
    323  fa95		       a0 01		      ldy	#1
    324  fa97		       4c 9c fa 	      jmp	.line_draw_start_set_delay
    325  fa9a
    326  fa9a				   .line_draw_start_nodelay
    327  fa9a		       a0 00		      ldy	#0
    328  fa9c
    329  fa9c				   .line_draw_start_set_delay
    330  fa9c		       84 27		      sty	VDELBL
    331  fa9e
    332  fa9e				   .line_draw_start_pos
    333  fa9e							; Calculate starting position
    334  fa9e		       18		      clc
    335  fa9f		       85 b5		      sta	LineDrawPos+0
    336  faa1		       69 04		      adc	#LINE_SIZE/2
    337  faa3		       85 b6		      sta	LineDrawPos+1
    338  faa5
    339  faa5		       60		      rts
    340  faa6
    341  faa6				   LineEnable
    342  faa6		       a9 80		      lda	#%10000000
    343  faa8		       85 ae		      sta	LineEnabled
    344  faaa
    345  faaa		       a5 93		      lda	SampleStep
    346  faac		       d0 03		      bne	.line_enable_return
    347  faae
    348  faae		       20 be fa 	      jsr	LineAudioPlay
    349  fab1
    350  fab1				   .line_enable_return
    351  fab1		       60		      rts
    352  fab2
    353  fab2				   LineDisable
    354  fab2		       a9 00		      lda	#0
    355  fab4		       85 ae		      sta	LineEnabled
    356  fab6
    357  fab6		       a5 93		      lda	SampleStep
    358  fab8		       d0 03		      bne	.line_disable_return
    359  faba
    360  faba		       20 cb fa 	      jsr	LineAudioMute
    361  fabd
    362  fabd				   .line_disable_return
    363  fabd		       60		      rts
    364  fabe
    365  fabe				   LineAudioPlay
    366  fabe		       a9 08		      lda	#LINE_AUDIO_C
    367  fac0		       85 16		      sta	AUDC1
    368  fac2		       a9 01		      lda	#LINE_AUDIO_F
    369  fac4		       85 18		      sta	AUDF1
    370  fac6		       a9 04		      lda	#LINE_AUDIO_V
    371  fac8		       85 1a		      sta	AUDV1
    372  faca		       60		      rts
    373  facb
    374  facb				   LineAudioMute
    375  facb		       a9 00		      lda	#0
    376  facd		       85 1a		      sta	AUDV1
    377  facf		       85 18		      sta	AUDF1
    378  fad1		       85 16		      sta	AUDC1
    379  fad3		       60		      rts
    380  fad4
    381  fad4				   LineSample
    382  fad4		       a9 08		      lda	#LINE_SAMPLE_LEN
    383  fad6		       85 93		      sta	SampleStep
    384  fad8		       a9 03		      lda	#LINE_SAMPLE_C
    385  fada		       85 16		      sta	AUDC1
    386  fadc		       a9 01		      lda	#LINE_SAMPLE_F
    387  fade		       85 18		      sta	AUDF1
    388  fae0		       a9 04		      lda	#LINE_SAMPLE_V
    389  fae2		       85 1a		      sta	AUDV1
    390  fae4		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  fae5					      include	"objects/bug.asm"
      1  fae5							;======================
      2  fae5							; Bugs (missiles 0 & 1)
      3  fae5							;======================
      4  fae5
      5  fae5							; Constants
      6  fae5
      7  fae5		       00 08	   BUG_SIZE   =	8
      8  fae5		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  fae5		       00 78	   BUG_STUN_LENGTH =	120
     10  fae5		       00 04	   BUG_POINTS =	4
     11  fae5
     12  fae5		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  fae5		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  fae5		       00 38	   BUG_STUN_COLOR =	#$38
     15  fae5		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  fae5
     17  fae5		       00 1e	   BUG_SAMPLE_LEN =	30
     18  fae5		       00 03	   BUG_SAMPLE_C =	3
     19  fae5		       00 14	   BUG_SAMPLE_F =	20
     20  fae5		       00 04	   BUG_SAMPLE_V =	4
     21  fae5
     22  fae5		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  fae5		       00 08	   BUG_COL_SAMPLE_C =	8
     24  fae5		       00 08	   BUG_COL_SAMPLE_F =	8
     25  fae5		       00 03	   BUG_COL_SAMPLE_V =	3
     26  fae5
     27  fae5							; Initialization
     28  fae5
     29  fae5				   BugInit
     30  fae5
     31  fae5							; Initialize Bugs
     32  fae5		       a2 01		      ldx	#1
     33  fae7
     34  fae7				   .bug_init_loop
     35  fae7		       20 ee fa 	      jsr	BugReset
     36  faea
     37  faea		       ca		      dex
     38  faeb		       10 fa		      bpl	.bug_init_loop
     39  faed
     40  faed		       60		      rts
     41  faee
     42  faee				   BugReset		; x = bug (0 or 1)
     43  faee
     44  faee							; Set random position
     45  faee		       20 13 f0 	      jsr	Random
     46  faf1
     47  faf1		       a5 86		      lda	Rand8
     48  faf3		       29 7f		      and	#$7f
     49  faf5		       95 ba		      sta	BugPosX,x
     50  faf7
     51  faf7		       a5 87		      lda	Rand16
     52  faf9		       29 7f		      and	#$7f
     53  fafb		       95 bc		      sta	BugPosY,x
     54  fafd
     55  fafd							; Set as active
     56  fafd		       a9 00		      lda	#0
     57  faff		       95 b8		      sta	BugStunned,x
     58  fb01
     59  fb01		       60		      rts
     60  fb02
     61  fb02							; Frame Update
     62  fb02
     63  fb02				   BugUpdate
     64  fb02
     65  fb02		       a2 01		      ldx	#1
     66  fb04				   .bug_update_loop
     67  fb04		       86 83		      stx	Temp+0
     68  fb06
     69  fb06		       b5 b8		      lda	BugStunned,x
     70  fb08		       f0 08		      beq	.bug_update_active
     71  fb0a
     72  fb0a				   .bug_update_stunned
     73  fb0a		       d6 b8		      dec	BugStunned,x
     74  fb0c		       20 95 fb 	      jsr	BugStunCollision
     75  fb0f		       4c 18 fb 	      jmp	.bug_update_next
     76  fb12
     77  fb12				   .bug_update_active
     78  fb12		       20 1e fb 	      jsr	BugMovement
     79  fb15		       20 7d fb 	      jsr	BugCollision
     80  fb18
     81  fb18				   .bug_update_next
     82  fb18		       a6 83		      ldx	Temp+0
     83  fb1a		       ca		      dex
     84  fb1b		       10 e7		      bpl	.bug_update_loop
     85  fb1d
     86  fb1d		       60		      rts
     87  fb1e
     88  fb1e				   BugMovement
     89  fb1e
     90  fb1e				   .bug_movement_random
     91  fb1e		       20 13 f0 	      jsr	Random
     92  fb21		       29 03		      and	#%00000011
     93  fb23		       85 84		      sta	Temp+1
     94  fb25
     95  fb25				   .bug_movement_load
     96  fb25		       a6 83		      ldx	Temp+0
     97  fb27
     98  fb27				   .bug_movement_x
     99  fb27		       a4 b7		      ldy	BugSpeed
    100  fb29
    101  fb29							; Alter X Position
    102  fb29		       a5 84		      lda	Temp+1
    103  fb2b		       29 01		      and	#%00000001
    104  fb2d
    105  fb2d				   .bug_movement_x_check
    106  fb2d		       c9 01		      cmp	#1
    107  fb2f		       d0 08		      bne	.bug_movement_x_right
    108  fb31
    109  fb31				   .bug_movement_x_left
    110  fb31		       d6 ba		      dec	BugPosX,x
    111  fb33		       88		      dey
    112  fb34		       d0 fb		      bne	.bug_movement_x_left
    113  fb36
    114  fb36		       4c 3e fb 	      jmp	.bug_movement_y
    115  fb39
    116  fb39				   .bug_movement_x_right
    117  fb39		       f6 ba		      inc	BugPosX,x
    118  fb3b		       88		      dey
    119  fb3c		       d0 fb		      bne	.bug_movement_x_right
    120  fb3e
    121  fb3e				   .bug_movement_y
    122  fb3e		       a4 b7		      ldy	BugSpeed
    123  fb40
    124  fb40							; Alter Y Position
    125  fb40		       a5 84		      lda	Temp+1
    126  fb42		       29 02		      and	#%00000010
    127  fb44		       4a		      lsr
    128  fb45
    129  fb45				   .bug_movement_y_check
    130  fb45		       c9 01		      cmp	#1
    131  fb47		       d0 08		      bne	.bug_movement_y_down
    132  fb49
    133  fb49				   .bug_movement_y_up
    134  fb49		       f6 bc		      inc	BugPosY,x
    135  fb4b		       88		      dey
    136  fb4c		       d0 fb		      bne	.bug_movement_y_up
    137  fb4e
    138  fb4e		       4c 56 fb 	      jmp	.bug_movement_boundary
    139  fb51
    140  fb51				   .bug_movement_y_down
    141  fb51		       d6 bc		      dec	BugPosY,x
    142  fb53		       88		      dey
    143  fb54		       d0 fb		      bne	.bug_movement_y_down
    144  fb56
    145  fb56				   .bug_movement_boundary
    146  fb56		       b5 ba		      lda	BugPosX,x
    147  fb58		       b4 bc		      ldy	BugPosY,x
    148  fb5a
    149  fb5a				   .bug_movement_boundary_left
    150  fb5a		       c9 18		      cmp	#BUG_BOUNDARY
    151  fb5c		       b0 05		      bcs	.bug_movement_boundary_right
    152  fb5e		       a9 18		      lda	#BUG_BOUNDARY
    153  fb60		       4c 69 fb 	      jmp	.bug_movement_boundary_top
    154  fb63
    155  fb63				   .bug_movement_boundary_right
    156  fb63		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    157  fb65		       90 02		      bcc	.bug_movement_boundary_top
    158  fb67		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    159  fb69
    160  fb69				   .bug_movement_boundary_top
    161  fb69		       c0 18		      cpy	#BUG_BOUNDARY
    162  fb6b		       b0 05		      bcs	.bug_movement_boundary_bottom
    163  fb6d		       a0 18		      ldy	#BUG_BOUNDARY
    164  fb6f		       4c 78 fb 	      jmp	.bug_movement_store
    165  fb72
    166  fb72				   .bug_movement_boundary_bottom
    167  fb72		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    168  fb74		       90 02		      bcc	.bug_movement_store
    169  fb76		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    170  fb78
    171  fb78				   .bug_movement_store
    172  fb78		       95 ba		      sta	BugPosX,x
    173  fb7a		       94 bc		      sty	BugPosY,x
    174  fb7c
    175  fb7c				   .bug_movement_return
    176  fb7c		       60		      rts
    177  fb7d
    178  fb7d				   BugCollision
    179  fb7d
    180  fb7d		       e0 01		      cpx	#1
    181  fb7f		       f0 05		      beq	.bug_collision_m1
    182  fb81
    183  fb81				   .bug_collision_m0
    184  fb81							; Collision for M0 (V set)
    185  fb81		       24 00		      bit	CXM0P
    186  fb83		       70 06		      bvs	.bug_collision_active
    187  fb85		       60		      rts
    188  fb86
    189  fb86				   .bug_collision_m1
    190  fb86							; Collision for M1 (N set)
    191  fb86		       24 01		      bit	CXM1P
    192  fb88		       30 01		      bmi	.bug_collision_active
    193  fb8a		       60		      rts
    194  fb8b
    195  fb8b				   .bug_collision_active
    196  fb8b
    197  fb8b							; Reduce players score
    198  fb8b		       a5 94		      lda	ScoreValue
    199  fb8d		       f0 02		      beq	.bug_collision_score_skip
    200  fb8f		       c6 94		      dec	ScoreValue
    201  fb91				   .bug_collision_score_skip
    202  fb91
    203  fb91							; Play sound
    204  fb91		       20 ee fb 	      jsr	BugColSample
    205  fb94
    206  fb94		       60		      rts
    207  fb95
    208  fb95				   BugStunCollision
    209  fb95
    210  fb95		       e0 01		      cpx	#1
    211  fb97		       f0 05		      beq	.bug_stun_collision_m1
    212  fb99
    213  fb99				   .bug_stun_collision_m0
    214  fb99							; Collision for M0 (V set)
    215  fb99		       24 00		      bit	CXM0P
    216  fb9b		       70 06		      bvs	.bug_stun_collision_active
    217  fb9d		       60		      rts
    218  fb9e
    219  fb9e				   .bug_stun_collision_m1
    220  fb9e							; Collision for M1 (N set)
    221  fb9e		       24 01		      bit	CXM1P
    222  fba0		       30 01		      bmi	.bug_stun_collision_active
    223  fba2		       60		      rts
    224  fba3
    225  fba3				   .bug_stun_collision_active
    226  fba3							; Add points to score
    227  fba3		       18		      clc
    228  fba4		       a5 95		      lda	ScoreValue+1
    229  fba6		       69 04		      adc	#BUG_POINTS
    230  fba8		       85 95		      sta	ScoreValue+1
    231  fbaa
    232  fbaa							; Reset bug
    233  fbaa		       20 ee fa 	      jsr	BugReset
    234  fbad
    235  fbad							; Play sample
    236  fbad		       20 dd fb 	      jsr	BugSample
    237  fbb0
    238  fbb0		       60		      rts
    239  fbb1
    240  fbb1							; Horizontal Positioning
    241  fbb1
    242  fbb1				   BugPosition
    243  fbb1
    244  fbb1		       a2 02		      ldx	#2
    245  fbb3		       a5 ba		      lda	BugPosX+0
    246  fbb5		       20 00 f0 	      jsr	PosObject
    247  fbb8
    248  fbb8		       a2 03		      ldx	#3
    249  fbba		       a5 bb		      lda	BugPosX+1
    250  fbbc		       20 00 f0 	      jsr	PosObject
    251  fbbf
    252  fbbf		       60		      rts
    253  fbc0
    254  fbc0							; Scanline Draw
    255  fbc0
    256  fbc0				   BugDrawStart
    257  fbc0
    258  fbc0		       a0 01		      ldy	#1
    259  fbc2				   .bug_draw_start_loop
    260  fbc2
    261  fbc2							; Set missile 0 & 1 to be 8 clock size
    262  fbc2		       b9 81 00 	      lda	NuSiz0,y
    263  fbc5		       09 30		      ora	#%00110000
    264  fbc7		       99 81 00 	      sta	NuSiz0,y
    265  fbca		       99 04 00 	      sta	NUSIZ0,y
    266  fbcd
    267  fbcd							; Setup half scanline positions
    268  fbcd		       b9 bc 00 	      lda	BugPosY,y
    269  fbd0		       4a		      lsr
    270  fbd1		       99 be 00 	      sta	BugDrawPosBottom,y
    271  fbd4
    272  fbd4		       69 04		      adc	#BUG_SIZE/2
    273  fbd6		       99 c0 00 	      sta	BugDrawPosTop,y
    274  fbd9
    275  fbd9		       88		      dey
    276  fbda		       10 e6		      bpl	.bug_draw_start_loop
    277  fbdc
    278  fbdc		       60		      rts
    279  fbdd
    280  fbdd				   BugSample
    281  fbdd		       a9 1e		      lda	#BUG_SAMPLE_LEN
    282  fbdf		       85 93		      sta	SampleStep
    283  fbe1		       a9 03		      lda	#BUG_SAMPLE_C
    284  fbe3		       85 16		      sta	AUDC1
    285  fbe5		       a9 14		      lda	#BUG_SAMPLE_F
    286  fbe7		       85 18		      sta	AUDF1
    287  fbe9		       a9 04		      lda	#BUG_SAMPLE_V
    288  fbeb		       85 1a		      sta	AUDV1
    289  fbed		       60		      rts
    290  fbee
    291  fbee				   BugColSample
    292  fbee		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    293  fbf0		       85 93		      sta	SampleStep
    294  fbf2		       a9 08		      lda	#BUG_COL_SAMPLE_C
    295  fbf4		       85 16		      sta	AUDC1
    296  fbf6		       a9 08		      lda	#BUG_COL_SAMPLE_F
    297  fbf8		       85 18		      sta	AUDF1
    298  fbfa		       a9 03		      lda	#BUG_COL_SAMPLE_V
    299  fbfc		       85 1a		      sta	AUDV1
    300  fbfe		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fbff					      include	"objects/swatter.asm"
      1  fbff							;==================
      2  fbff							; Swatter (player1)
      3  fbff							;==================
      4  fbff
      5  fbff							; Constants
      6  fbff
      7  fbff		       00 30	   SWATTER_COLOR =	#$30
      8  fbff		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fbff		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fbff		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fbff
     12  fbff		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fbff		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fbff
     15  fbff		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fbff		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fbff
     18  fbff		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fbff		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fbff		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fbff
     22  fbff		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fbff		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fbff		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fbff		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fbff		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fbff
     28  fbff		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fbff		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fbff		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fbff		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fbff
     33  fbff		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fbff		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fbff		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fbff		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fbff
     38  fbff							; Initialization
     39  fbff
     40  fbff				   SwatterInit
     41  fbff
     42  fbff		       20 d6 fc 	      jsr	SwatterReset
     43  fc02
     44  fc02		       60		      rts
     45  fc03
     46  fc03							; Frame Update
     47  fc03
     48  fc03				   SwatterUpdate
     49  fc03
     50  fc03							; Check b/w
     51  fc03		       ad 82 02 	      lda	SWCHB
     52  fc06					      REPEAT	4
     53  fc06		       4a		      lsr
     52  fc06					      REPEND
     53  fc07		       4a		      lsr
     52  fc07					      REPEND
     53  fc08		       4a		      lsr
     52  fc08					      REPEND
     53  fc09		       4a		      lsr
     54  fc0a					      REPEND
     55  fc0a		       90 10		      bcc	.swatter_update_bw
     56  fc0c
     57  fc0c				   .swatter_update_color
     58  fc0c		       a5 c4		      lda	SwatterState
     59  fc0e		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     60  fc10		       d0 05		      bne	.swatter_update_color_hold
     61  fc12				   .swatter_update_color_active
     62  fc12		       a9 30		      lda	#SWATTER_COLOR
     63  fc14		       4c 29 fc 	      jmp	.swatter_update_color_set
     64  fc17				   .swatter_update_color_hold
     65  fc17		       a9 36		      lda	#SWATTER_HOLD_COLOR
     66  fc19		       4c 29 fc 	      jmp	.swatter_update_color_set
     67  fc1c
     68  fc1c				   .swatter_update_bw
     69  fc1c		       a5 c4		      lda	SwatterState
     70  fc1e		       c9 80		      cmp	#SWATTER_STATE_HOLD
     71  fc20		       d0 05		      bne	.swatter_update_bw_active
     72  fc22				   .swatter_update_bw_hold
     73  fc22		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     74  fc24		       4c 29 fc 	      jmp	.swatter_update_color_set
     75  fc27				   .swatter_update_bw_active
     76  fc27		       a9 0e		      lda	#SWATTER_BW_COLOR
     77  fc29
     78  fc29				   .swatter_update_color_set
     79  fc29		       85 c5		      sta	SwatterColor
     80  fc2b
     81  fc2b				   .swatter_update_hold_sample
     82  fc2b		       a4 c4		      ldy	SwatterState
     83  fc2d		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fc2f		       d0 0f		      bne	.swatter_update_state
     85  fc31
     86  fc31		       c6 cb		      dec	SwatterSampleCount
     87  fc33		       d0 0b		      bne	.swatter_update_state
     88  fc35
     89  fc35		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     90  fc37		       85 cb		      sta	SwatterSampleCount
     91  fc39
     92  fc39		       c6 cc		      dec	SwatterSampleF
     93  fc3b		       a4 cc		      ldy	SwatterSampleF
     94  fc3d		       20 f6 fc 	      jsr	SwatterHoldSample
     95  fc40
     96  fc40				   .swatter_update_state
     97  fc40		       a6 90		      ldx	FrameTimer+1
     98  fc42		       d0 2d		      bne	.swatter_update_collision
     99  fc44
    100  fc44		       a4 c4		      ldy	SwatterState
    101  fc46		       c0 00		      cpy	#SWATTER_STATE_WAIT
    102  fc48		       f0 0a		      beq	.swatter_update_state_wait
    103  fc4a
    104  fc4a		       c0 80		      cpy	#SWATTER_STATE_HOLD
    105  fc4c		       f0 18		      beq	.swatter_update_state_hold
    106  fc4e
    107  fc4e							; Else we're at the end of the active state
    108  fc4e		       20 d6 fc 	      jsr	SwatterReset
    109  fc51		       4c 80 fc 	      jmp	.swatter_update_return
    110  fc54
    111  fc54				   .swatter_update_state_wait
    112  fc54		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    113  fc56		       84 cc		      sty	SwatterSampleF
    114  fc58		       20 f6 fc 	      jsr	SwatterHoldSample
    115  fc5b
    116  fc5b		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    117  fc5d		       85 cb		      sta	SwatterSampleCount
    118  fc5f
    119  fc5f		       a9 80		      lda	#SWATTER_STATE_HOLD
    120  fc61		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    121  fc63		       4c 6d fc 	      jmp	.swatter_update_state_set
    122  fc66
    123  fc66				   .swatter_update_state_hold
    124  fc66		       20 05 fd 	      jsr	SwatterActiveSample
    125  fc69
    126  fc69		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    127  fc6b		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    128  fc6d
    129  fc6d				   .swatter_update_state_set
    130  fc6d		       85 c4		      sta	SwatterState
    131  fc6f		       86 90		      stx	FrameTimer+1
    132  fc71
    133  fc71				   .swatter_update_collision
    134  fc71							; Check 1 frame after active
    135  fc71		       a5 c4		      lda	SwatterState
    136  fc73		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    137  fc75		       d0 09		      bne	.swatter_update_return
    138  fc77		       a6 90		      ldx	FrameTimer+1
    139  fc79		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    140  fc7b		       d0 03		      bne	.swatter_update_return
    141  fc7d
    142  fc7d		       20 81 fc 	      jsr	SwatterCollision
    143  fc80
    144  fc80				   .swatter_update_return
    145  fc80		       60		      rts
    146  fc81
    147  fc81				   SwatterCollision
    148  fc81		       24 00		      bit	CXM0P
    149  fc83		       30 09		      bmi	.swatter_collision_m0
    150  fc85
    151  fc85		       24 01		      bit	CXM1P
    152  fc87		       70 0a		      bvs	.swatter_collision_m1
    153  fc89
    154  fc89		       24 07		      bit	CXPPMM
    155  fc8b		       30 0e		      bmi	.swatter_collision_p0
    156  fc8d
    157  fc8d		       60		      rts
    158  fc8e
    159  fc8e				   .swatter_collision_m0
    160  fc8e		       a2 00		      ldx	#0
    161  fc90		       4c 95 fc 	      jmp	.swatter_collision_bug_reset
    162  fc93
    163  fc93				   .swatter_collision_m1
    164  fc93		       a2 01		      ldx	#1
    165  fc95
    166  fc95				   .swatter_collision_bug_reset
    167  fc95		       20 ee fa 	      jsr	BugReset
    168  fc98		       4c ad fc 	      jmp	.swatter_collision_active
    169  fc9b
    170  fc9b				   .swatter_collision_p0
    171  fc9b
    172  fc9b		       a5 94		      lda	ScoreValue
    173  fc9d		       c5 c7		      cmp	SwatterHitDamage
    174  fc9f		       90 08		      bcc	.swatter_collision_p0_zero
    175  fca1		       f0 06		      beq	.swatter_collision_p0_zero
    176  fca3
    177  fca3		       18		      clc
    178  fca4		       e5 c7		      sbc	SwatterHitDamage
    179  fca6		       4c ab fc 	      jmp	.swatter_collision_p0_set
    180  fca9
    181  fca9				   .swatter_collision_p0_zero
    182  fca9		       a9 00		      lda	#0
    183  fcab
    184  fcab				   .swatter_collision_p0_set
    185  fcab		       85 94		      sta	ScoreValue
    186  fcad
    187  fcad				   .swatter_collision_active
    188  fcad		       20 16 fd 	      jsr	SwatterHitSample
    189  fcb0
    190  fcb0		       60		      rts
    191  fcb1
    192  fcb1				   SwatterPosition
    193  fcb1
    194  fcb1							; Set Position
    195  fcb1		       a2 01		      ldx	#1	; Object (player1)
    196  fcb3		       a5 c2		      lda	SwatterPos	; X Position
    197  fcb5		       20 00 f0 	      jsr	PosObject
    198  fcb8
    199  fcb8		       60		      rts
    200  fcb9
    201  fcb9							; Scanline Draw
    202  fcb9
    203  fcb9				   SwatterDrawStart
    204  fcb9
    205  fcb9							; Set player 1 to be quad size
    206  fcb9		       a5 82		      lda	NuSiz1
    207  fcbb		       29 f8		      and	#%11111000
    208  fcbd		       09 07		      ora	#%00000111
    209  fcbf		       85 82		      sta	NuSiz1
    210  fcc1		       85 05		      sta	NUSIZ1
    211  fcc3
    212  fcc3							; Set sprite color
    213  fcc3		       a5 c5		      lda	SwatterColor
    214  fcc5		       85 07		      sta	COLUP1
    215  fcc7
    216  fcc7							; Note: Doesn't need vertical delay
    217  fcc7
    218  fcc7							; Calculate starting position
    219  fcc7		       a5 c3		      lda	SwatterPos+1	; Y Position
    220  fcc9		       4a		      lsr
    221  fcca		       18		      clc
    222  fccb		       69 14		      adc	#SWATTER_SPRITE_SIZE
    223  fccd		       85 c9		      sta	SwatterDrawPos
    224  fccf
    225  fccf							; Initialize sprite index
    226  fccf		       a9 00		      lda	#0
    227  fcd1		       85 c8		      sta	SwatterIndex
    228  fcd3		       85 ca		      sta	SwatterLine
    229  fcd5
    230  fcd5		       60		      rts
    231  fcd6
    232  fcd6				   SwatterReset
    233  fcd6							; Initialize Swatter State
    234  fcd6		       a9 00		      lda	#SWATTER_STATE_WAIT
    235  fcd8		       85 c4		      sta	SwatterState
    236  fcda
    237  fcda							; Set Wait Timer
    238  fcda		       20 13 f0 	      jsr	Random
    239  fcdd		       a5 86		      lda	Rand8
    240  fcdf		       29 3f		      and	#$3f
    241  fce1		       18		      clc
    242  fce2		       65 c6		      adc	SwatterWaitTime
    243  fce4		       85 90		      sta	FrameTimer+1
    244  fce6
    245  fce6							; Set Random Position
    246  fce6		       20 13 f0 	      jsr	Random
    247  fce9		       a5 86		      lda	Rand8	; X Position
    248  fceb		       29 7f		      and	#$7f
    249  fced		       85 c2		      sta	SwatterPos+0
    250  fcef		       a5 87		      lda	Rand16	; Y Position
    251  fcf1		       29 7e		      and	#$7e	; Ensure that Y position is even
    252  fcf3		       85 c3		      sta	SwatterPos+1
    253  fcf5
    254  fcf5		       60		      rts
    255  fcf6
    256  fcf6				   SwatterHoldSample
    257  fcf6		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    258  fcf8		       85 93		      sta	SampleStep
    259  fcfa		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    260  fcfc		       85 16		      sta	AUDC1
    261  fcfe		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    262  fd00		       85 1a		      sta	AUDV1
    263  fd02
    264  fd02		       84 18		      sty	AUDF1	; Store value of y as frequency
    265  fd04
    266  fd04		       60		      rts
    267  fd05
    268  fd05				   SwatterActiveSample
    269  fd05		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    270  fd07		       85 93		      sta	SampleStep
    271  fd09		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    272  fd0b		       85 16		      sta	AUDC1
    273  fd0d		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    274  fd0f		       85 18		      sta	AUDF1
    275  fd11		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    276  fd13		       85 1a		      sta	AUDV1
    277  fd15		       60		      rts
    278  fd16
    279  fd16				   SwatterHitSample
    280  fd16		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    281  fd18		       85 93		      sta	SampleStep
    282  fd1a		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    283  fd1c		       85 16		      sta	AUDC1
    284  fd1e		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    285  fd20		       85 18		      sta	AUDF1
    286  fd22		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    287  fd24		       85 1a		      sta	AUDV1
    288  fd26		       60		      rts
------- FILE game.asm
     22  fd27
     23  fd27							; Initialization
     24  fd27
     25  fd27				   GameInit
     26  fd27
     27  fd27							; Setup logic and kernel
      0  fd27					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fd27				   .POINTER   SET	VBlankPtr
      2  fd27				   .ADDRESS   SET	GameVerticalBlank
      3  fd27
      4  fd27		       a9 68		      LDA	#<.ADDRESS
      5  fd29		       85 88		      STA	.POINTER
      6  fd2b		       a9 fd		      LDA	#>.ADDRESS
      7  fd2d		       85 89		      STA	.POINTER+1
      8  fd2f
      0  fd2f					      SET_POINTER	KernelPtr, GameKernel
      1  fd2f				   .POINTER   SET	KernelPtr
      2  fd2f				   .ADDRESS   SET	GameKernel
      3  fd2f
      4  fd2f		       a9 ea		      LDA	#<.ADDRESS
      5  fd31		       85 8a		      STA	.POINTER
      6  fd33		       a9 fd		      LDA	#>.ADDRESS
      7  fd35		       85 8b		      STA	.POINTER+1
      8  fd37
      0  fd37					      SET_POINTER	OverScanPtr, GameOverScan
      1  fd37				   .POINTER   SET	OverScanPtr
      2  fd37				   .ADDRESS   SET	GameOverScan
      3  fd37
      4  fd37		       a9 92		      LDA	#<.ADDRESS
      5  fd39		       85 8c		      STA	.POINTER
      6  fd3b		       a9 fd		      LDA	#>.ADDRESS
      7  fd3d		       85 8d		      STA	.POINTER+1
      8  fd3f
     31  fd3f
     32  fd3f							; Mute Audio
     33  fd3f		       a9 00		      lda	#0
     34  fd41							;    sta AUDC0
     35  fd41							;    sta AUDV0
     36  fd41							;    sta AUDF0
     37  fd41		       85 16		      sta	AUDC1
     38  fd43		       85 1a		      sta	AUDV1
     39  fd45		       85 18		      sta	AUDF1
     40  fd47		       85 93		      sta	SampleStep
     41  fd49
     42  fd49							; Load Audio Settings
     43  fd49		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fd4b		       85 19		      sta	AUDV0
     45  fd4d
     46  fd4d							; Make it so that we play the first note immediately
     47  fd4d		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fd4f		       85 92		      sta	AudioStep
     49  fd51		       a9 02		      lda	#2
     50  fd53		       85 8f		      sta	FrameTimer
     51  fd55
     52  fd55							; Reset NuSiz
     53  fd55							;    lda #0
     54  fd55							;    sta NuSiz0
     55  fd55							;    sta NUSIZ0
     56  fd55							;    sta NuSiz1
     57  fd55							;    sta NUSIZ1
     58  fd55
     59  fd55							; Initialize Objects
     60  fd55		       20 a6 f5 	      jsr	LevelInit
     61  fd58		       20 41 f6 	      jsr	ScoreInit
     62  fd5b		       20 e9 f7 	      jsr	SpiderInit
     63  fd5e		       20 47 f9 	      jsr	LineInit
     64  fd61		       20 e5 fa 	      jsr	BugInit
     65  fd64		       20 ff fb 	      jsr	SwatterInit
     66  fd67
     67  fd67		       60		      rts
     68  fd68
     69  fd68				   GameVerticalBlank
     70  fd68
     71  fd68							; Refresh random values
     72  fd68		       20 13 f0 	      jsr	Random
     73  fd6b
     74  fd6b							; Update Objects
     75  fd6b		       20 b7 f5 	      jsr	LevelUpdate
     76  fd6e		       20 fa f7 	      jsr	SpiderUpdate
     77  fd71		       20 5c f9 	      jsr	LineUpdate
     78  fd74		       20 02 fb 	      jsr	BugUpdate
     79  fd77		       20 03 fc 	      jsr	SwatterUpdate
     80  fd7a		       20 4a f6 	      jsr	ScoreUpdate
     81  fd7d
     82  fd7d							; Reset Collisions
     83  fd7d		       85 2c		      sta	CXCLR
     84  fd7f
     85  fd7f							; Clear horizontal movement
     86  fd7f		       85 2b		      sta	HMCLR
     87  fd81
     88  fd81							; Update Positions
     89  fd81		       20 17 f9 	      jsr	SpiderPosition
     90  fd84		       20 7e fa 	      jsr	LinePosition
     91  fd87		       20 b1 fb 	      jsr	BugPosition
     92  fd8a		       20 b1 fc 	      jsr	SwatterPosition
     93  fd8d
     94  fd8d							; Set final x positions
     95  fd8d		       85 02		      sta	WSYNC
     96  fd8f		       85 2a		      sta	HMOVE
     97  fd91
     98  fd91		       60		      rts
     99  fd92
    100  fd92				   GameOverScan
    101  fd92
    102  fd92							; Audio Routines
    103  fd92		       20 ae fd 	      jsr	GameAudio
    104  fd95		       20 9c fd 	      jsr	GameSample
    105  fd98
    106  fd98							; State Routines
    107  fd98		       20 e2 fd 	      jsr	GameDeath
    108  fd9b
    109  fd9b		       60		      rts
    110  fd9c
    111  fd9c				   GameSample
    112  fd9c
    113  fd9c		       a6 93		      ldx	SampleStep
    114  fd9e		       f0 0b		      beq	.game_sample_return
    115  fda0
    116  fda0		       ca		      dex
    117  fda1		       d0 08		      bne	.game_sample_return
    118  fda3
    119  fda3				   .game_sample_mute
    120  fda3		       a9 00		      lda	#0
    121  fda5		       85 1a		      sta	AUDV1
    122  fda7		       85 18		      sta	AUDF1
    123  fda9		       85 16		      sta	AUDC1
    124  fdab
    125  fdab				   .game_sample_return
    126  fdab		       86 93		      stx	SampleStep
    127  fdad		       60		      rts
    128  fdae
    129  fdae				   GameAudio
    130  fdae
    131  fdae		       a6 8f		      ldx	FrameTimer
    132  fdb0		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    133  fdb2		       f0 25		      beq	.game_audio_mute_note
    134  fdb4		       e0 00		      cpx	#0
    135  fdb6		       d0 29		      bne	.game_audio_return
    136  fdb8
    137  fdb8							; Reset Timer
    138  fdb8		       a2 09		      ldx	#GAME_AUDIO_STEP
    139  fdba		       86 8f		      stx	FrameTimer
    140  fdbc
    141  fdbc				   .game_audio_play
    142  fdbc
    143  fdbc							; Increment melody position
    144  fdbc		       a4 92		      ldy	AudioStep
    145  fdbe		       c8		      iny
    146  fdbf
    147  fdbf		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    148  fdc1		       d0 02		      bne	.game_audio_play_note
    149  fdc3
    150  fdc3							; Loop our audio step
    151  fdc3		       a0 00		      ldy	#0
    152  fdc5
    153  fdc5				   .game_audio_play_note
    154  fdc5
    155  fdc5							; Save current position
    156  fdc5		       84 92		      sty	AudioStep
    157  fdc7
    158  fdc7							; Melody Line
    159  fdc7		       b9 cf fe 	      lda	GameAudio0,y
    160  fdca		       c9 ff		      cmp	#$FF
    161  fdcc		       f0 0b		      beq	.game_audio_mute_note
    162  fdce		       85 17		      sta	AUDF0
    163  fdd0		       a9 06		      lda	#GAME_AUDIO_TONE
    164  fdd2		       85 15		      sta	AUDC0
    165  fdd4		       a9 02		      lda	#GAME_AUDIO_VOLUME
    166  fdd6		       85 19		      sta	AUDV0
    167  fdd8
    168  fdd8		       60		      rts
    169  fdd9
    170  fdd9				   .game_audio_mute_note
    171  fdd9
    172  fdd9		       a9 00		      lda	#0
    173  fddb		       85 17		      sta	AUDF0
    174  fddd		       85 15		      sta	AUDC0
    175  fddf		       85 19		      sta	AUDV0
    176  fde1
    177  fde1				   .game_audio_return
    178  fde1		       60		      rts
    179  fde2
    180  fde2				   GameDeath
    181  fde2		       a5 94		      lda	ScoreValue+0
    182  fde4		       d0 03		      bne	.game_death_return
    183  fde6
    184  fde6							; Show Game Over Screen
    185  fde6		       20 ef fe 	      jsr	OverInit
    186  fde9
    187  fde9				   .game_death_return
    188  fde9		       60		      rts
    189  fdea
    190  fdea				   GameKernel
    191  fdea
    192  fdea							; Turn on display
    193  fdea		       a9 00		      lda	#0
    194  fdec		       85 01		      sta	VBLANK
    195  fdee
    196  fdee				   .game_kernel_score
    197  fdee
    198  fdee							; Draw Score on top first
    199  fdee		       20 bc f6 	      jsr	ScoreDraw
    200  fdf1
    201  fdf1				   .game_kernel_objects_start
    202  fdf1
    203  fdf1							; Setup Drawing Objects
    204  fdf1		       20 d6 f7 	      jsr	WebDrawStart
    205  fdf4		       20 1f f9 	      jsr	SpiderDrawStart
    206  fdf7		       20 b9 fc 	      jsr	SwatterDrawStart
    207  fdfa		       20 86 fa 	      jsr	LineDrawStart
    208  fdfd		       20 c0 fb 	      jsr	BugDrawStart
    209  fe00
    210  fe00							; Start Scanline Counter
    211  fe00		       a2 a8		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    212  fe02							; The extra 5 is for processing overflow
    213  fe02
    214  fe02							; Half scanline counter in Temp+1
    215  fe02		       a9 56		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    216  fe04		       85 84		      sta	Temp+1
    217  fe06
    218  fe06							; 6 line counter
    219  fe06		       a9 00		      lda	#0
    220  fe08		       85 85		      sta	Temp+2
    221  fe0a
    222  fe0a							; Load background color
    223  fe0a		       a5 a1		      lda	WebColor+0
    224  fe0c		       85 09		      sta	COLUBK
    225  fe0e
    226  fe0e							;sta WSYNC
    227  fe0e
    228  fe0e				   .game_kernel_objects
    229  fe0e
    230  fe0e		       a5 85		      lda	Temp+2
    231  fe10		       d0 1a		      bne	.game_kernel_missle
    232  fe12
    233  fe12		       a9 03		      lda	#3
    234  fe14		       85 85		      sta	Temp+2
    235  fe16
    236  fe16				   .game_kernel_web
    237  fe16
    238  fe16				   .game_kernel_web_pf
    239  fe16							; Web
    240  fe16
    241  fe16		       a4 a0		      ldy	WebIndex
    242  fe18
    243  fe18							; Load Image
    244  fe18		       b9 3e f1 	      lda	WebImagePF0,y
    245  fe1b		       85 0d		      sta	PF0
    246  fe1d		       b9 5a f1 	      lda	WebImagePF1,y
    247  fe20		       85 0e		      sta	PF1
    248  fe22		       b9 76 f1 	      lda	WebImagePF2,y
    249  fe25		       85 0f		      sta	PF2
    250  fe27
    251  fe27		       e6 a0		      inc	WebIndex
    252  fe29
    253  fe29		       4c 4a fe 	      jmp	.game_kernel_line
    254  fe2c
    255  fe2c				   .game_kernel_missle
    256  fe2c
    257  fe2c							; Preload half-line
    258  fe2c		       a5 84		      lda	Temp+1
    259  fe2e
    260  fe2e				   .game_kernel_missle_bug_0
    261  fe2e							; First Bug
    262  fe2e
    263  fe2e		       a0 00		      ldy	#%00000000
    264  fe30
    265  fe30							; Top
    266  fe30		       c5 c0		      cmp	BugDrawPosTop+0
    267  fe32		       b0 06		      bcs	.game_kernel_missle_bug_0_off
    268  fe34
    269  fe34							; Bottom
    270  fe34		       c5 be		      cmp	BugDrawPosBottom+0
    271  fe36		       90 02		      bcc	.game_kernel_missle_bug_0_off
    272  fe38
    273  fe38				   .game_kernel_missle_bug_0_on
    274  fe38		       a0 02		      ldy	#%00000010
    275  fe3a
    276  fe3a				   .game_kernel_missle_bug_0_off
    277  fe3a		       84 1d		      sty	ENAM0
    278  fe3c
    279  fe3c				   .game_kernel_missle_bug_1
    280  fe3c							; Second Bug
    281  fe3c
    282  fe3c		       a0 00		      ldy	#%00000000
    283  fe3e
    284  fe3e							; Top
    285  fe3e		       c5 c1		      cmp	BugDrawPosTop+1
    286  fe40		       b0 06		      bcs	.game_kernel_missle_bug_1_off
    287  fe42
    288  fe42							; Bottom
    289  fe42		       c5 bf		      cmp	BugDrawPosBottom+1
    290  fe44		       90 02		      bcc	.game_kernel_missle_bug_1_off
    291  fe46
    292  fe46				   .game_kernel_missle_bug_1_on
    293  fe46		       a0 02		      ldy	#%00000010
    294  fe48
    295  fe48				   .game_kernel_missle_bug_1_off
    296  fe48		       84 1e		      sty	ENAM1
    297  fe4a
    298  fe4a							;jmp .game_kernel_line_skip
    299  fe4a
    300  fe4a				   .game_kernel_line
    301  fe4a							; Line
    302  fe4a
    303  fe4a		       24 ae		      bit	LineEnabled
    304  fe4c		       10 10		      bpl	.game_kernel_line_skip
    305  fe4e
    306  fe4e							; Load half-line
    307  fe4e		       a5 84		      lda	Temp+1
    308  fe50
    309  fe50		       a0 00		      ldy	#%00000000
    310  fe52
    311  fe52							; Top
    312  fe52		       c5 b6		      cmp	LineDrawPos+1
    313  fe54		       b0 06		      bcs	.game_kernel_line_set
    314  fe56
    315  fe56							; Bottom
    316  fe56		       c5 b5		      cmp	LineDrawPos+0
    317  fe58		       90 02		      bcc	.game_kernel_line_set
    318  fe5a
    319  fe5a		       a0 02		      ldy	#%00000010
    320  fe5c				   .game_kernel_line_set
    321  fe5c		       84 1f		      sty	ENABL
    322  fe5e
    323  fe5e				   .game_kernel_line_skip
    324  fe5e
    325  fe5e							; Next Line
    326  fe5e		       ca		      dex
    327  fe5f							;sta WSYNC
    328  fe5f
    329  fe5f				   .game_kernel_sprite
    330  fe5f
    331  fe5f				   .game_kernel_sprite_spider
    332  fe5f							; Spider
    333  fe5f
    334  fe5f		       a4 a9		      ldy	SpiderIndex
    335  fe61		       30 1a		      bmi	.game_kernel_sprite_spider_load	; At end of sprite
    336  fe63		       d0 06		      bne	.game_kernel_sprite_spider_draw	; Currently drawing (not zero)
    337  fe65
    338  fe65							; Check y position to see if we should start
    339  fe65		       a5 84		      lda	Temp+1	; Use half scanline
    340  fe67		       e5 aa		      sbc	SpiderDrawPos
    341  fe69		       10 12		      bpl	.game_kernel_sprite_spider_load
    342  fe6b
    343  fe6b				   .game_kernel_sprite_spider_draw
    344  fe6b		       b1 a3		      lda	(SpiderPtr),y
    345  fe6d		       85 ab		      sta	SpiderLine
    346  fe6f
    347  fe6f							; Increment sprite index
    348  fe6f		       e6 a9		      inc	SpiderIndex
    349  fe71
    350  fe71							; See if we're at the end
    351  fe71		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    352  fe73		       d0 0a		      bne	.game_kernel_sprite_spider_line
    353  fe75		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    354  fe77		       84 a9		      sty	SpiderIndex
    355  fe79		       a9 00		      lda	#0
    356  fe7b		       85 ab		      sta	SpiderLine
    357  fe7d
    358  fe7d				   .game_kernel_sprite_spider_load
    359  fe7d		       a5 ab		      lda	SpiderLine
    360  fe7f				   .game_kernel_sprite_spider_line
    361  fe7f		       85 1b		      sta	GRP0
    362  fe81
    363  fe81				   .game_kernel_sprite_swatter
    364  fe81							; Swatter
    365  fe81
    366  fe81							; Check if wait state
    367  fe81		       24 c4		      bit	SwatterState
    368  fe83		       10 1b		      bpl	.game_kernel_sprite_swatter_load
    369  fe85
    370  fe85		       a4 c8		      ldy	SwatterIndex
    371  fe87		       30 17		      bmi	.game_kernel_sprite_swatter_load	; At end of sprite
    372  fe89		       d0 06		      bne	.game_kernel_sprite_swatter_draw	; Currently drawing (not zero)
    373  fe8b
    374  fe8b							; Check y position to see if we should start
    375  fe8b		       a5 84		      lda	Temp+1	; Use half scanline
    376  fe8d		       e5 c9		      sbc	SwatterDrawPos
    377  fe8f		       10 0f		      bpl	.game_kernel_sprite_swatter_load
    378  fe91
    379  fe91				   .game_kernel_sprite_swatter_draw
    380  fe91		       b9 c2 f1 	      lda	SwatterSprite,y
    381  fe94		       85 ca		      sta	SwatterLine
    382  fe96
    383  fe96							; Increment index
    384  fe96		       e6 c8		      inc	SwatterIndex
    385  fe98
    386  fe98							; See if we're at the end
    387  fe98		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    388  fe9a		       d0 06		      bne	.game_kernel_sprite_swatter_line
    389  fe9c		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    390  fe9e		       84 c8		      sty	SwatterIndex
    391  fea0
    392  fea0				   .game_kernel_sprite_swatter_load
    393  fea0		       a5 ca		      lda	SwatterLine
    394  fea2				   .game_kernel_sprite_swatter_line
    395  fea2		       85 1c		      sta	GRP1
    396  fea4
    397  fea4		       85 02		      sta	WSYNC
    398  fea6
    399  fea6				   .game_kernel_sprite_end
    400  fea6
    401  fea6							; New line, decrement half scanline, and increment 3 line counter
    402  fea6		       c6 84		      dec	Temp+1
    403  fea8		       c6 85		      dec	Temp+2
    404  feaa		       ca		      dex
    405  feab		       f0 03		      beq	.game_kernel_clean
    406  fead		       4c 0e fe 	      jmp	.game_kernel_objects
    407  feb0
    408  feb0				   .game_kernel_clean
    409  feb0
    410  feb0		       85 02		      sta	WSYNC
    411  feb2
    412  feb2		       a9 00		      lda	#0
    413  feb4		       85 09		      sta	COLUBK
    414  feb6		       85 08		      sta	COLUPF
    415  feb8		       85 06		      sta	COLUP0
    416  feba		       85 07		      sta	COLUP1
    417  febc		       85 0d		      sta	PF0
    418  febe		       85 0e		      sta	PF1
    419  fec0		       85 0f		      sta	PF2
    420  fec2		       85 1b		      sta	GRP0
    421  fec4		       85 1c		      sta	GRP1
    422  fec6		       85 1d		      sta	ENAM0
    423  fec8		       85 1e		      sta	ENAM1
    424  feca		       85 1f		      sta	ENABL
    425  fecc
    426  fecc		       85 02		      sta	WSYNC
    427  fece
    428  fece				   .game_kernel_return
    429  fece		       60		      rts
    430  fecf
    431  fecf				   GameAudio0
    432  fecf		       0d		      .byte.b	#13	; D
    433  fed0		       ff		      .byte.b	#$FF
    434  fed1		       0f		      .byte.b	#15	; B
    435  fed2		       ff		      .byte.b	#$FF
    436  fed3		       0d		      .byte.b	#13	; D
    437  fed4		       ff		      .byte.b	#$FF
    438  fed5		       0f		      .byte.b	#15	; B
    439  fed6		       ff		      .byte.b	#$FF
    440  fed7		       0d		      .byte.b	#13	; D
    441  fed8		       0d		      .byte.b	#13	; D
    442  fed9		       0f		      .byte.b	#15	; B
    443  feda		       ff		      .byte.b	#$FF
    444  fedb		       0c		      .byte.b	#12	; D#
    445  fedc		       ff		      .byte.b	#$FF
    446  fedd		       0f		      .byte.b	#15	; B
    447  fede		       ff		      .byte.b	#$FF
    448  fedf		       0b		      .byte.b	#11	; E
    449  fee0		       ff		      .byte.b	#$FF
    450  fee1		       0e		      .byte.b	#14	; C#
    451  fee2		       ff		      .byte.b	#$FF
    452  fee3		       0b		      .byte.b	#11
    453  fee4		       ff		      .byte.b	#$FF
    454  fee5		       0e		      .byte.b	#14
    455  fee6		       ff		      .byte.b	#$FF
    456  fee7		       0b		      .byte.b	#11
    457  fee8		       0b		      .byte.b	#11
    458  fee9		       0e		      .byte.b	#14
    459  feea		       ff		      .byte.b	#$FF
    460  feeb		       0b		      .byte.b	#11
    461  feec		       ff		      .byte.b	#$FF
    462  feed		       0e		      .byte.b	#14
    463  feee		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  feef					      include	"over.asm"
      1  feef							;================
      2  feef							; Constants
      3  feef							;================
      4  feef
      5  feef		       00 00	   OVER_BG_COLOR =	#$00
      6  feef		       00 44	   OVER_FG_COLOR =	#$44
      7  feef		       00 06	   OVER_FG_BW_COLOR =	#$06
      8  feef
      9  feef		       00 07	   OVER_AUDIO_TONE =	7
     10  feef		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     11  feef		       00 06	   OVER_AUDIO_LENGTH =	6
     12  feef		       00 10	   OVER_AUDIO_STEP =	16
     13  feef
     14  feef		       00 09	   OVER_IMAGE_SIZE =	9
     15  feef		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     16  feef		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     17  feef		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     18  feef
     19  feef				   OverInit
     20  feef
     21  feef							; Setup logic and kernel
      0  feef					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  feef				   .POINTER   SET	VBlankPtr
      2  feef				   .ADDRESS   SET	OverVerticalBlank
      3  feef
      4  feef		       a9 20		      LDA	#<.ADDRESS
      5  fef1		       85 88		      STA	.POINTER
      6  fef3		       a9 ff		      LDA	#>.ADDRESS
      7  fef5		       85 89		      STA	.POINTER+1
      8  fef7
      0  fef7					      SET_POINTER	KernelPtr, OverKernel
      1  fef7				   .POINTER   SET	KernelPtr
      2  fef7				   .ADDRESS   SET	OverKernel
      3  fef7
      4  fef7		       a9 78		      LDA	#<.ADDRESS
      5  fef9		       85 8a		      STA	.POINTER
      6  fefb		       a9 ff		      LDA	#>.ADDRESS
      7  fefd		       85 8b		      STA	.POINTER+1
      8  feff
      0  feff					      SET_POINTER	OverScanPtr, OverOverScan
      1  feff				   .POINTER   SET	OverScanPtr
      2  feff				   .ADDRESS   SET	OverOverScan
      3  feff
      4  feff		       a9 3a		      LDA	#<.ADDRESS
      5  ff01		       85 8c		      STA	.POINTER
      6  ff03		       a9 ff		      LDA	#>.ADDRESS
      7  ff05		       85 8d		      STA	.POINTER+1
      8  ff07
     25  ff07
     26  ff07							; Load audio settings
     27  ff07		       a9 07		      lda	#OVER_AUDIO_TONE
     28  ff09		       85 15		      sta	AUDC0
     29  ff0b							;lda #OVER_AUDIO_VOLUME
     30  ff0b							;sta AUDV0
     31  ff0b		       a9 00		      lda	#0
     32  ff0d		       85 16		      sta	AUDC1
     33  ff0f		       85 1a		      sta	AUDV1
     34  ff11
     35  ff11							; Set initial button state
     36  ff11							;lda #0
     37  ff11		       85 91		      sta	InputState
     38  ff13
     39  ff13							; Setup frame counters
     40  ff13		       a9 01		      lda	#1
     41  ff15		       85 8f		      sta	FrameTimer
     42  ff17		       a9 10		      lda	#OVER_AUDIO_STEP
     43  ff19		       85 93		      sta	SampleStep
     44  ff1b		       a9 06		      lda	#OVER_AUDIO_LENGTH
     45  ff1d		       85 92		      sta	AudioStep
     46  ff1f
     47  ff1f		       60		      rts
     48  ff20
     49  ff20				   OverVerticalBlank
     50  ff20		       20 4a f6 	      jsr	ScoreUpdate
     51  ff23
     52  ff23							; Load Colors
     53  ff23		       a9 00		      lda	#OVER_BG_COLOR
     54  ff25		       85 09		      sta	COLUBK
     55  ff27
     56  ff27							; Check b/w
     57  ff27		       ad 82 02 	      lda	SWCHB
     58  ff2a					      REPEAT	4
     59  ff2a		       4a		      lsr
     58  ff2a					      REPEND
     59  ff2b		       4a		      lsr
     58  ff2b					      REPEND
     59  ff2c		       4a		      lsr
     58  ff2c					      REPEND
     59  ff2d		       4a		      lsr
     60  ff2e					      REPEND
     61  ff2e		       90 05		      bcc	.over_bw
     62  ff30
     63  ff30				   .over_color
     64  ff30		       a9 44		      lda	#OVER_FG_COLOR
     65  ff32		       85 08		      sta	COLUPF
     66  ff34
     67  ff34		       60		      rts
     68  ff35
     69  ff35				   .over_bw
     70  ff35							; Load b/w Colors
     71  ff35		       a9 06		      lda	#OVER_FG_BW_COLOR
     72  ff37		       85 08		      sta	COLUPF
     73  ff39
     74  ff39		       60		      rts
     75  ff3a
     76  ff3a				   OverOverScan
     77  ff3a		       20 41 ff 	      jsr	OverAudio
     78  ff3d		       20 67 ff 	      jsr	OverState
     79  ff40		       60		      rts
     80  ff41
     81  ff41				   OverAudio
     82  ff41
     83  ff41		       a5 8f		      lda	FrameTimer
     84  ff43		       d0 21		      bne	.over_audio_return
     85  ff45
     86  ff45							; Reset Timer
     87  ff45					      REPEAT	3
     88  ff45		       e6 93		      inc	SampleStep
     87  ff45					      REPEND
     88  ff47		       e6 93		      inc	SampleStep
     87  ff47					      REPEND
     88  ff49		       e6 93		      inc	SampleStep
     89  ff4b					      REPEND
     90  ff4b		       a5 93		      lda	SampleStep
     91  ff4d		       85 8f		      sta	FrameTimer
     92  ff4f
     93  ff4f				   .over_audio_play
     94  ff4f
     95  ff4f							; Increment melody position
     96  ff4f		       a4 92		      ldy	AudioStep
     97  ff51		       f0 0d		      beq	.over_audio_mute_note
     98  ff53		       c6 92		      dec	AudioStep
     99  ff55		       88		      dey
    100  ff56
    101  ff56				   .over_audio_play_note
    102  ff56
    103  ff56							; Melody Line
    104  ff56		       b9 ca ff 	      lda	OverAudio0,y
    105  ff59		       85 17		      sta	AUDF0
    106  ff5b		       a9 06		      lda	#OVER_AUDIO_VOLUME
    107  ff5d		       85 19		      sta	AUDV0
    108  ff5f
    109  ff5f		       60		      rts
    110  ff60
    111  ff60				   .over_audio_mute_note
    112  ff60		       a9 00		      lda	#0
    113  ff62		       85 17		      sta	AUDF0
    114  ff64		       85 19		      sta	AUDV0
    115  ff66
    116  ff66				   .over_audio_return
    117  ff66		       60		      rts
    118  ff67
    119  ff67				   OverState
    120  ff67
    121  ff67							; Check if Fire Button on controller 1 is released
    122  ff67		       a5 0c		      lda	INPT4
    123  ff69		       30 05		      bmi	.over_state_check
    124  ff6b
    125  ff6b				   .over_state_on
    126  ff6b		       a9 01		      lda	#1
    127  ff6d		       85 91		      sta	InputState
    128  ff6f		       60		      rts
    129  ff70
    130  ff70				   .over_state_check
    131  ff70		       a5 91		      lda	InputState
    132  ff72		       f0 03		      beq	.over_state_return
    133  ff74
    134  ff74				   .over_state_next
    135  ff74							; Button is released, load title screen
    136  ff74		       20 6a f3 	      jsr	TitleInit
    137  ff77
    138  ff77				   .over_state_return
    139  ff77		       60		      rts
    140  ff78
    141  ff78				   OverKernel
    142  ff78
    143  ff78							; Turn on display
    144  ff78		       a9 00		      lda	#0
    145  ff7a		       85 01		      sta	VBLANK
    146  ff7c
    147  ff7c				   .over_kernel_score
    148  ff7c
    149  ff7c							; Draw Score on top first (no update)
    150  ff7c		       20 bc f6 	      jsr	ScoreDraw
    151  ff7f
    152  ff7f				   .over_kernel_init
    153  ff7f							; Playfield Control
    154  ff7f		       a5 80		      lda	CtrlPf
    155  ff81		       29 fd		      and	#%11111101	; Use playfield foreground color
    156  ff83		       09 01		      ora	#%00000001	; Set mirroring
    157  ff85		       85 80		      sta	CtrlPf
    158  ff87		       85 0a		      sta	CTRLPF
    159  ff89
    160  ff89				   .over_kernel_top_padding
    161  ff89							; Top Padding
    162  ff89		       20 a8 ff 	      jsr	OverPadding
    163  ff8c
    164  ff8c				   .over_kernel_image
    165  ff8c		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    166  ff8e
    167  ff8e				   .over_kernel_image_next
    168  ff8e		       bd c1 ff 	      lda	OverImagePF2,x
    169  ff91		       85 0f		      sta	PF2
    170  ff93		       bd b8 ff 	      lda	OverImagePF1,x
    171  ff96		       85 0e		      sta	PF1
    172  ff98							;    lda OverImagePF0,x
    173  ff98							;    sta PF0
    174  ff98
    175  ff98		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    176  ff9a				   .over_kernel_image_loop
    177  ff9a		       85 02		      sta	WSYNC
    178  ff9c		       88		      dey
    179  ff9d		       d0 fb		      bne	.over_kernel_image_loop
    180  ff9f
    181  ff9f		       ca		      dex
    182  ffa0		       10 ec		      bpl	.over_kernel_image_next
    183  ffa2
    184  ffa2				   .over_kernel_bottom_padding
    185  ffa2							; Bottom Padding
    186  ffa2		       20 a8 ff 	      jsr	OverPadding
    187  ffa5
    188  ffa5				   .over_kernel_return
    189  ffa5		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    190  ffa7		       60		      rts
    191  ffa8
    192  ffa8				   OverPadding
    193  ffa8		       a9 00		      lda	#0
    194  ffaa		       85 0d		      sta	PF0
    195  ffac		       85 0e		      sta	PF1
    196  ffae		       85 0f		      sta	PF2
    197  ffb0
    198  ffb0		       a2 32		      ldx	#OVER_IMAGE_PADDING
    199  ffb2				   .over_padding_loop
    200  ffb2		       85 02		      sta	WSYNC
    201  ffb4		       ca		      dex
    202  ffb5		       d0 fb		      bne	.over_padding_loop
    203  ffb7
    204  ffb7		       60		      rts
    205  ffb8
    206  ffb8				   OverAssets
    207  ffb8
    208  ffb8							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ffb8					      include	"over_image.asm"
      1  ffb8							;OverImagePF0:
      2  ffb8							;    .BYTE %00000000
      3  ffb8							;    .BYTE %00000000
      4  ffb8							;    .BYTE %00000000
      5  ffb8							;    .BYTE %00000000
      6  ffb8							;    .BYTE %00000000
      7  ffb8							;    .BYTE %00000000
      8  ffb8							;    .BYTE %00000000
      9  ffb8							;    .BYTE %00000000
     10  ffb8							;    .BYTE %00000000
     11  ffb8
     12  ffb8				   OverImagePF1
     13  ffb8		       0c		      .BYTE.b	%00001100
     14  ffb9		       13		      .BYTE.b	%00010011
     15  ffba		       20		      .BYTE.b	%00100000
     16  ffbb		       23		      .BYTE.b	%00100011
     17  ffbc		       24		      .BYTE.b	%00100100
     18  ffbd		       24		      .BYTE.b	%00100100
     19  ffbe		       12		      .BYTE.b	%00010010
     20  ffbf		       10		      .BYTE.b	%00010000
     21  ffc0		       08		      .BYTE.b	%00001000
     22  ffc1
     23  ffc1				   OverImagePF2
     24  ffc1		       e0		      .BYTE.b	%11100000
     25  ffc2		       18		      .BYTE.b	%00011000
     26  ffc3		       05		      .BYTE.b	%00000101
     27  ffc4		       52		      .BYTE.b	%01010010
     28  ffc5		       23		      .BYTE.b	%00100011
     29  ffc6		       52		      .BYTE.b	%01010010
     30  ffc7		       04		      .BYTE.b	%00000100
     31  ffc8		       18		      .BYTE.b	%00011000
     32  ffc9		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    210  ffca
    211  ffca				   OverAudio0
    212  ffca
    213  ffca		       1a		      .BYTE.b	#26	; D1
    214  ffcb		       1a		      .BYTE.b	#26
    215  ffcc		       16		      .BYTE.b	#22	; F1
    216  ffcd		       11		      .BYTE.b	#17	; A1
    217  ffce		       0d		      .BYTE.b	#13	; D2
    218  ffcf		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    330  ffd0
    331  ffd0							;================
    332  ffd0							; End of cart
    333  ffd0							;================
    334  ffd0
    335  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    336  fffa
    337  fffa				   InterruptVectors
    338  fffa
    339  fffa		       06 f2		      .word.w	InitSystem	; NMI
    340  fffc		       06 f2		      .word.w	InitSystem	; RESET
    341  fffe		       06 f2		      .word.w	InitSystem	; IRQ
    342  10000
    343  10000					       END
