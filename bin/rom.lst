------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 11th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00cd ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00 00    Temp       ds	3
     61 U0086		       00	   Rand8      ds	1
     62 U0087		       00	   Rand16     ds	1
     63 U0088
     64 U0088		       00 00	   VBlankPtr  ds	2
     65 U008a		       00 00	   KernelPtr  ds	2
     66 U008c		       00 00	   OverScanPtr ds	2
     67 U008e
     68 U008e		       00	   Frame      ds	1
     69 U008f		       00 00	   FrameTimer ds	2
     70 U0091		       00	   InputState ds	1
     71 U0092
     72 U0092		       00	   AudioStep  ds	1
     73 U0093
     74 U0093		       00	   SampleStep ds	1
     75 U0094
     76 U0094							; Score
     77 U0094
     78 U0094		       00 00	   ScoreValue ds	2
     79 U0096		       00 00	   ScoreDigitOnes ds	2
     80 U0098		       00 00	   ScoreDigitTens ds	2
     81 U009a		       00 00 00    ScoreDigitGfx ds	3
     82 U009d		       00 00	   ScoreBarGfx ds	2
     83 U009f
     84 U009f							; Level
     85 U009f		       00	   LevelCurrent ds	1
     86 U00a0
     87 U00a0							; Web
     88 U00a0
     89 U00a0		       00	   WebIndex   ds	1
     90 U00a1		       00 00	   WebColor   ds	2
     91 U00a3
     92 U00a3							; Spider
     93 U00a3
     94 U00a3		       00 00	   SpiderPtr  ds	2
     95 U00a5		       00 00	   SpiderPos  ds	2
     96 U00a7		       00	   SpiderCtrl ds	1
     97 U00a8		       00	   SpiderColor ds	1
     98 U00a9
     99 U00a9		       00	   SpiderIndex ds	1
    100 U00aa		       00	   SpiderDrawPos ds	1
    101 U00ab		       00	   SpiderLine ds	1
    102 U00ac
    103 U00ac		       00 00	   SpiderPtr2 ds	2
    104 U00ae
    105 U00ae							; Line
    106 U00ae
    107 U00ae		       00	   LineEnabled ds	1
    108 U00af		       00 00	   LinePos    ds	2
    109 U00b1		       00 00	   LineVelocity ds	2
    110 U00b3		       00 00	   LineStartPos ds	2
    111 U00b5		       00 00	   LineDrawPos ds	2
    112 U00b7
    113 U00b7							; Bug
    114 U00b7
    115 U00b7		       00	   BugSpeed   ds	1
    116 U00b8
    117 U00b8		       00 00	   BugStunned ds	2
    118 U00ba		       00 00	   BugPosX    ds	2
    119 U00bc		       00 00	   BugPosY    ds	2
    120 U00be
    121 U00be		       00 00	   BugDrawPosBottom ds	2
    122 U00c0		       00 00	   BugDrawPosTop ds	2
    123 U00c2
    124 U00c2							; Swatter
    125 U00c2
    126 U00c2		       00 00	   SwatterPos ds	2
    127 U00c4		       00	   SwatterState ds	1
    128 U00c5		       00	   SwatterColor ds	1
    129 U00c6
    130 U00c6		       00	   SwatterWaitTime ds	1
    131 U00c7		       00	   SwatterHitDamage ds	1
    132 U00c8
    133 U00c8		       00	   SwatterIndex ds	1
    134 U00c9		       00	   SwatterDrawPos ds	1
    135 U00ca		       00	   SwatterLine ds	1
    136 U00cb
    137 U00cb		       00	   SwatterSampleCount ds	1
    138 U00cc		       00	   SwatterSampleF ds	1
    139 U00cd
    140  10000 ????				       SEG
    141  f000					      org	$F000	; Start of cart area
    142  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 86		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 87		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 86		      sta	Rand8
     49  f01e		       45 87		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 83		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 84		      sta	Temp+1
     70  f029		       85 85		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 83		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 84		      lda	Temp+1	; And add into result
     77  f031		       65 84		      adc	Temp+1
     78  f033		       85 84		      sta	Temp+1
     79  f035
     80  f035		       a5 85		      lda	Temp+2	; Propagating any carry
     81  f037		       65 85		      adc	Temp+2
     82  f039		       85 85		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 84		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 85		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    144  f044
    145  f044							; Assets
    146  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    150  f0bc
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0bc					      include	"objects/score_digits.asm"
      1  f0bc				   ScoreDigits
      2  f0bc
      3  f0bc		       77		      .BYTE.b	%01110111
      4  f0bd		       55		      .BYTE.b	%01010101
      5  f0be		       55		      .BYTE.b	%01010101
      6  f0bf		       55		      .BYTE.b	%01010101
      7  f0c0		       77		      .BYTE.b	%01110111
      8  f0c1
      9  f0c1		       11		      .BYTE.b	%00010001
     10  f0c2		       11		      .BYTE.b	%00010001
     11  f0c3		       11		      .BYTE.b	%00010001
     12  f0c4		       11		      .BYTE.b	%00010001
     13  f0c5		       11		      .BYTE.b	%00010001
     14  f0c6
     15  f0c6		       77		      .BYTE.b	%01110111
     16  f0c7		       11		      .BYTE.b	%00010001
     17  f0c8		       77		      .BYTE.b	%01110111
     18  f0c9		       44		      .BYTE.b	%01000100
     19  f0ca		       77		      .BYTE.b	%01110111
     20  f0cb
     21  f0cb		       77		      .BYTE.b	%01110111
     22  f0cc		       11		      .BYTE.b	%00010001
     23  f0cd		       33		      .BYTE.b	%00110011
     24  f0ce		       11		      .BYTE.b	%00010001
     25  f0cf		       77		      .BYTE.b	%01110111
     26  f0d0
     27  f0d0		       55		      .BYTE.b	%01010101
     28  f0d1		       55		      .BYTE.b	%01010101
     29  f0d2		       77		      .BYTE.b	%01110111
     30  f0d3		       11		      .BYTE.b	%00010001
     31  f0d4		       11		      .BYTE.b	%00010001
     32  f0d5
     33  f0d5		       77		      .BYTE.b	%01110111
     34  f0d6		       44		      .BYTE.b	%01000100
     35  f0d7		       77		      .BYTE.b	%01110111
     36  f0d8		       11		      .BYTE.b	%00010001
     37  f0d9		       77		      .BYTE.b	%01110111
     38  f0da
     39  f0da		       77		      .BYTE.b	%01110111
     40  f0db		       44		      .BYTE.b	%01000100
     41  f0dc		       77		      .BYTE.b	%01110111
     42  f0dd		       55		      .BYTE.b	%01010101
     43  f0de		       77		      .BYTE.b	%01110111
     44  f0df
     45  f0df		       77		      .BYTE.b	%01110111
     46  f0e0		       11		      .BYTE.b	%00010001
     47  f0e1		       22		      .BYTE.b	%00100010
     48  f0e2		       22		      .BYTE.b	%00100010
     49  f0e3		       22		      .BYTE.b	%00100010
     50  f0e4
     51  f0e4		       77		      .BYTE.b	%01110111
     52  f0e5		       55		      .BYTE.b	%01010101
     53  f0e6		       77		      .BYTE.b	%01110111
     54  f0e7		       55		      .BYTE.b	%01010101
     55  f0e8		       77		      .BYTE.b	%01110111
     56  f0e9
     57  f0e9		       77		      .BYTE.b	%01110111
     58  f0ea		       55		      .BYTE.b	%01010101
     59  f0eb		       77		      .BYTE.b	%01110111
     60  f0ec		       11		      .BYTE.b	%00010001
     61  f0ed		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f0ee					      include	"objects/score_digits_flip.asm"
      1  f0ee				   ScoreDigitsFlip
      2  f0ee
      3  f0ee		       ee		      .BYTE.b	%11101110
      4  f0ef		       aa		      .BYTE.b	%10101010
      5  f0f0		       aa		      .BYTE.b	%10101010
      6  f0f1		       aa		      .BYTE.b	%10101010
      7  f0f2		       ee		      .BYTE.b	%11101110
      8  f0f3
      9  f0f3		       88		      .BYTE.b	%10001000
     10  f0f4		       88		      .BYTE.b	%10001000
     11  f0f5		       88		      .BYTE.b	%10001000
     12  f0f6		       88		      .BYTE.b	%10001000
     13  f0f7		       88		      .BYTE.b	%10001000
     14  f0f8
     15  f0f8		       ee		      .BYTE.b	%11101110
     16  f0f9		       88		      .BYTE.b	%10001000
     17  f0fa		       ee		      .BYTE.b	%11101110
     18  f0fb		       22		      .BYTE.b	%00100010
     19  f0fc		       ee		      .BYTE.b	%11101110
     20  f0fd
     21  f0fd		       ee		      .BYTE.b	%11101110
     22  f0fe		       88		      .BYTE.b	%10001000
     23  f0ff		       cc		      .BYTE.b	%11001100
     24  f100		       88		      .BYTE.b	%10001000
     25  f101		       ee		      .BYTE.b	%11101110
     26  f102
     27  f102		       aa		      .BYTE.b	%10101010
     28  f103		       aa		      .BYTE.b	%10101010
     29  f104		       ee		      .BYTE.b	%11101110
     30  f105		       88		      .BYTE.b	%10001000
     31  f106		       88		      .BYTE.b	%10001000
     32  f107
     33  f107		       ee		      .BYTE.b	%11101110
     34  f108		       22		      .BYTE.b	%00100010
     35  f109		       ee		      .BYTE.b	%11101110
     36  f10a		       88		      .BYTE.b	%10001000
     37  f10b		       ee		      .BYTE.b	%11101110
     38  f10c
     39  f10c		       ee		      .BYTE.b	%11101110
     40  f10d		       22		      .BYTE.b	%00100010
     41  f10e		       ee		      .BYTE.b	%11101110
     42  f10f		       aa		      .BYTE.b	%10101010
     43  f110		       ee		      .BYTE.b	%11101110
     44  f111
     45  f111		       ee		      .BYTE.b	%11101110
     46  f112		       88		      .BYTE.b	%10001000
     47  f113		       44		      .BYTE.b	%01000100
     48  f114		       44		      .BYTE.b	%01000100
     49  f115		       44		      .BYTE.b	%01000100
     50  f116
     51  f116		       ee		      .BYTE.b	%11101110
     52  f117		       aa		      .BYTE.b	%10101010
     53  f118		       ee		      .BYTE.b	%11101110
     54  f119		       aa		      .BYTE.b	%10101010
     55  f11a		       ee		      .BYTE.b	%11101110
     56  f11b
     57  f11b		       ee		      .BYTE.b	%11101110
     58  f11c		       aa		      .BYTE.b	%10101010
     59  f11d		       ee		      .BYTE.b	%11101110
     60  f11e		       88		      .BYTE.b	%10001000
     61  f11f		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f120					      include	"objects/score_label.asm"
      1  f120				   ScoreLabel
      2  f120
      3  f120		       20		      .BYTE.b	%00100000
      4  f121		       50		      .BYTE.b	%01010000
      5  f122		       ee		      .BYTE.b	%11101110
      6  f123		       00		      .BYTE.b	%00000000
      7  f124		       57		      .BYTE.b	%01010111
      8  f125		       00		      .BYTE.b	%00000000
      9  f126
     10  f126		       20		      .BYTE.b	%00100000
     11  f127		       50		      .BYTE.b	%01010000
     12  f128		       4a		      .BYTE.b	%01001010
     13  f129		       00		      .BYTE.b	%00000000
     14  f12a		       55		      .BYTE.b	%01010101
     15  f12b		       00		      .BYTE.b	%00000000
     16  f12c
     17  f12c		       20		      .BYTE.b	%00100000
     18  f12d		       50		      .BYTE.b	%01010000
     19  f12e		       4e		      .BYTE.b	%01001110
     20  f12f		       00		      .BYTE.b	%00000000
     21  f130		       77		      .BYTE.b	%01110111
     22  f131		       00		      .BYTE.b	%00000000
     23  f132
     24  f132		       20		      .BYTE.b	%00100000
     25  f133		       50		      .BYTE.b	%01010000
     26  f134		       42		      .BYTE.b	%01000010
     27  f135		       00		      .BYTE.b	%00000000
     28  f136		       54		      .BYTE.b	%01010100
     29  f137		       00		      .BYTE.b	%00000000
     30  f138
     31  f138		       e0		      .BYTE.b	%11100000
     32  f139		       20		      .BYTE.b	%00100000
     33  f13a		       42		      .BYTE.b	%01000010
     34  f13b		       00		      .BYTE.b	%00000000
     35  f13c		       54		      .BYTE.b	%01010100
     36  f13d		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    154  f13e
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f13e					      include	"objects/web_image.asm"
      1  f13e				   WebImagePF0
      2  f13e		       00		      .BYTE.b	%00000000
      3  f13f		       00		      .BYTE.b	%00000000
      4  f140		       00		      .BYTE.b	%00000000
      5  f141		       00		      .BYTE.b	%00000000
      6  f142		       00		      .BYTE.b	%00000000
      7  f143		       00		      .BYTE.b	%00000000
      8  f144		       00		      .BYTE.b	%00000000
      9  f145		       00		      .BYTE.b	%00000000
     10  f146		       00		      .BYTE.b	%00000000
     11  f147		       30		      .BYTE.b	%00110000
     12  f148		       e0		      .BYTE.b	%11100000
     13  f149		       20		      .BYTE.b	%00100000
     14  f14a		       40		      .BYTE.b	%01000000
     15  f14b		       40		      .BYTE.b	%01000000
     16  f14c		       80		      .BYTE.b	%10000000
     17  f14d		       80		      .BYTE.b	%10000000
     18  f14e		       40		      .BYTE.b	%01000000
     19  f14f		       40		      .BYTE.b	%01000000
     20  f150		       20		      .BYTE.b	%00100000
     21  f151		       e0		      .BYTE.b	%11100000
     22  f152		       30		      .BYTE.b	%00110000
     23  f153		       00		      .BYTE.b	%00000000
     24  f154		       00		      .BYTE.b	%00000000
     25  f155		       00		      .BYTE.b	%00000000
     26  f156		       00		      .BYTE.b	%00000000
     27  f157		       00		      .BYTE.b	%00000000
     28  f158		       00		      .BYTE.b	%00000000
     29  f159		       00		      .BYTE.b	%00000000
     30  f15a		       00		      .BYTE.b	%00000000
     31  f15b		       00		      .BYTE.b	%00000000
     32  f15c
     33  f15c				   WebImagePF1
     34  f15c		       08		      .BYTE.b	%00001000
     35  f15d		       06		      .BYTE.b	%00000110
     36  f15e		       01		      .BYTE.b	%00000001
     37  f15f		       00		      .BYTE.b	%00000000
     38  f160		       00		      .BYTE.b	%00000000
     39  f161		       01		      .BYTE.b	%00000001
     40  f162		       01		      .BYTE.b	%00000001
     41  f163		       02		      .BYTE.b	%00000010
     42  f164		       0c		      .BYTE.b	%00001100
     43  f165		       30		      .BYTE.b	%00110000
     44  f166		       c0		      .BYTE.b	%11000000
     45  f167		       38		      .BYTE.b	%00111000
     46  f168		       07		      .BYTE.b	%00000111
     47  f169		       00		      .BYTE.b	%00000000
     48  f16a		       00		      .BYTE.b	%00000000
     49  f16b		       00		      .BYTE.b	%00000000
     50  f16c		       00		      .BYTE.b	%00000000
     51  f16d		       07		      .BYTE.b	%00000111
     52  f16e		       38		      .BYTE.b	%00111000
     53  f16f		       c0		      .BYTE.b	%11000000
     54  f170		       30		      .BYTE.b	%00110000
     55  f171		       0c		      .BYTE.b	%00001100
     56  f172		       02		      .BYTE.b	%00000010
     57  f173		       01		      .BYTE.b	%00000001
     58  f174		       01		      .BYTE.b	%00000001
     59  f175		       00		      .BYTE.b	%00000000
     60  f176		       00		      .BYTE.b	%00000000
     61  f177		       01		      .BYTE.b	%00000001
     62  f178		       06		      .BYTE.b	%00000110
     63  f179		       08		      .BYTE.b	%00001000
     64  f17a
     65  f17a				   WebImagePF2
     66  f17a		       20		      .BYTE.b	%00100000
     67  f17b		       18		      .BYTE.b	%00011000
     68  f17c		       04		      .BYTE.b	%00000100
     69  f17d		       03		      .BYTE.b	%00000011
     70  f17e		       3f		      .BYTE.b	%00111111
     71  f17f		       c2		      .BYTE.b	%11000010
     72  f180		       04		      .BYTE.b	%00000100
     73  f181		       08		      .BYTE.b	%00001000
     74  f182		       08		      .BYTE.b	%00001000
     75  f183		       10		      .BYTE.b	%00010000
     76  f184		       20		      .BYTE.b	%00100000
     77  f185		       20		      .BYTE.b	%00100000
     78  f186		       41		      .BYTE.b	%01000001
     79  f187		       8e		      .BYTE.b	%10001110
     80  f188		       f0		      .BYTE.b	%11110000
     81  f189		       f0		      .BYTE.b	%11110000
     82  f18a		       8e		      .BYTE.b	%10001110
     83  f18b		       41		      .BYTE.b	%01000001
     84  f18c		       20		      .BYTE.b	%00100000
     85  f18d		       20		      .BYTE.b	%00100000
     86  f18e		       10		      .BYTE.b	%00010000
     87  f18f		       08		      .BYTE.b	%00001000
     88  f190		       08		      .BYTE.b	%00001000
     89  f191		       04		      .BYTE.b	%00000100
     90  f192		       c2		      .BYTE.b	%11000010
     91  f193		       3f		      .BYTE.b	%00111111
     92  f194		       03		      .BYTE.b	%00000011
     93  f195		       04		      .BYTE.b	%00000100
     94  f196		       18		      .BYTE.b	%00011000
     95  f197		       20		      .BYTE.b	%00100000
------- FILE kernel.asm
    156  f198
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f198					      include	"objects/spider_sprite.asm"
      1  f198				   SpiderSprite
      2  f198
      3  f198		       99		      .BYTE.b	%10011001
      4  f199		       bd		      .BYTE.b	%10111101
      5  f19a		       db		      .BYTE.b	%11011011
      6  f19b		       bd		      .BYTE.b	%10111101
      7  f19c		       99		      .BYTE.b	%10011001
      8  f19d		       99		      .BYTE.b	%10011001
      9  f19e		       7e		      .BYTE.b	%01111110
     10  f19f		       3c		      .BYTE.b	%00111100
     11  f1a0		       3c		      .BYTE.b	%00111100
     12  f1a1		       18		      .BYTE.b	%00011000
     13  f1a2		       3c		      .BYTE.b	%00111100
     14  f1a3		       7e		      .BYTE.b	%01111110
     15  f1a4		       bd		      .BYTE.b	%10111101
     16  f1a5		       bd		      .BYTE.b	%10111101
     17  f1a6		       bd		      .BYTE.b	%10111101
     18  f1a7		       99		      .BYTE.b	%10011001
     19  f1a8
     20  f1a8		       c7		      .BYTE.b	%11000111
     21  f1a9		       c7		      .BYTE.b	%11000111
     22  f1aa		       28		      .BYTE.b	%00101000
     23  f1ab		       28		      .BYTE.b	%00101000
     24  f1ac		       3a		      .BYTE.b	%00111010
     25  f1ad		       7a		      .BYTE.b	%01111010
     26  f1ae		       fd		      .BYTE.b	%11111101
     27  f1af		       ff		      .BYTE.b	%11111111
     28  f1b0		       ff		      .BYTE.b	%11111111
     29  f1b1		       fd		      .BYTE.b	%11111101
     30  f1b2		       7a		      .BYTE.b	%01111010
     31  f1b3		       3a		      .BYTE.b	%00111010
     32  f1b4		       28		      .BYTE.b	%00101000
     33  f1b5		       28		      .BYTE.b	%00101000
     34  f1b6		       c7		      .BYTE.b	%11000111
     35  f1b7		       c7		      .BYTE.b	%11000111
     36  f1b8
     37  f1b8		       99		      .BYTE.b	%10011001
     38  f1b9		       bd		      .BYTE.b	%10111101
     39  f1ba		       bd		      .BYTE.b	%10111101
     40  f1bb		       bd		      .BYTE.b	%10111101
     41  f1bc		       7e		      .BYTE.b	%01111110
     42  f1bd		       3c		      .BYTE.b	%00111100
     43  f1be		       18		      .BYTE.b	%00011000
     44  f1bf		       3c		      .BYTE.b	%00111100
     45  f1c0		       3c		      .BYTE.b	%00111100
     46  f1c1		       7e		      .BYTE.b	%01111110
     47  f1c2		       99		      .BYTE.b	%10011001
     48  f1c3		       99		      .BYTE.b	%10011001
     49  f1c4		       bd		      .BYTE.b	%10111101
     50  f1c5		       db		      .BYTE.b	%11011011
     51  f1c6		       bd		      .BYTE.b	%10111101
     52  f1c7		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    158  f1c8
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1c8					      include	"objects/swatter_sprite.asm"
      1  f1c8				   SwatterSprite
      2  f1c8
      3  f1c8		       3c		      .BYTE.b	%00111100
      4  f1c9		       3c		      .BYTE.b	%00111100
      5  f1ca		       56		      .BYTE.b	%01010110
      6  f1cb		       6a		      .BYTE.b	%01101010
      7  f1cc		       d5		      .BYTE.b	%11010101
      8  f1cd		       ab		      .BYTE.b	%10101011
      9  f1ce		       d5		      .BYTE.b	%11010101
     10  f1cf		       ab		      .BYTE.b	%10101011
     11  f1d0		       d5		      .BYTE.b	%11010101
     12  f1d1		       ab		      .BYTE.b	%10101011
     13  f1d2		       d5		      .BYTE.b	%11010101
     14  f1d3		       ab		      .BYTE.b	%10101011
     15  f1d4		       56		      .BYTE.b	%01010110
     16  f1d5		       6a		      .BYTE.b	%01101010
     17  f1d6		       56		      .BYTE.b	%01010110
     18  f1d7		       6a		      .BYTE.b	%01101010
     19  f1d8		       34		      .BYTE.b	%00110100
     20  f1d9		       2c		      .BYTE.b	%00101100
     21  f1da		       34		      .BYTE.b	%00110100
     22  f1db		       18		      .BYTE.b	%00011000
------- FILE kernel.asm
    160  f1dc
------- FILE logo_image.asm LEVEL 2 PASS 2
      0  f1dc					      include	"logo_image.asm"
      1  f1dc				   LogoImage1
      2  f1dc		       03		      .BYTE.b	%00000011
      3  f1dd		       03		      .BYTE.b	%00000011
      4  f1de		       13		      .BYTE.b	%00010011
      5  f1df		       33		      .BYTE.b	%00110011
      6  f1e0		       63		      .BYTE.b	%01100011
      7  f1e1		       c3		      .BYTE.b	%11000011
      8  f1e2		       c3		      .BYTE.b	%11000011
      9  f1e3		       63		      .BYTE.b	%01100011
     10  f1e4		       33		      .BYTE.b	%00110011
     11  f1e5		       13		      .BYTE.b	%00010011
     12  f1e6		       03		      .BYTE.b	%00000011
     13  f1e7		       03		      .BYTE.b	%00000011
     14  f1e8
     15  f1e8				   LogoImage2
     16  f1e8		       83		      .BYTE.b	%10000011
     17  f1e9		       c7		      .BYTE.b	%11000111
     18  f1ea		       ef		      .BYTE.b	%11101111
     19  f1eb		       6e		      .BYTE.b	%01101110
     20  f1ec		       6c		      .BYTE.b	%01101100
     21  f1ed		       6c		      .BYTE.b	%01101100
     22  f1ee		       6c		      .BYTE.b	%01101100
     23  f1ef		       6c		      .BYTE.b	%01101100
     24  f1f0		       6e		      .BYTE.b	%01101110
     25  f1f1		       ef		      .BYTE.b	%11101111
     26  f1f2		       c7		      .BYTE.b	%11000111
     27  f1f3		       83		      .BYTE.b	%10000011
     28  f1f4
     29  f1f4				   LogoImage3
     30  f1f4		       8f		      .BYTE.b	%10001111
     31  f1f5		       cf		      .BYTE.b	%11001111
     32  f1f6		       ef		      .BYTE.b	%11101111
     33  f1f7		       6d		      .BYTE.b	%01101101
     34  f1f8		       2c		      .BYTE.b	%00101100
     35  f1f9		       0c		      .BYTE.b	%00001100
     36  f1fa		       0c		      .BYTE.b	%00001100
     37  f1fb		       4c		      .BYTE.b	%01001100
     38  f1fc		       6d		      .BYTE.b	%01101101
     39  f1fd		       ef		      .BYTE.b	%11101111
     40  f1fe		       cf		      .BYTE.b	%11001111
     41  f1ff		       8f		      .BYTE.b	%10001111
     42  f200
     43  f200				   LogoImage4
     44  f200		       00		      .BYTE.b	%00000000
     45  f201		       01		      .BYTE.b	%00000001
     46  f202		       13		      .BYTE.b	%00010011
     47  f203		       33		      .BYTE.b	%00110011
     48  f204		       63		      .BYTE.b	%01100011
     49  f205		       c3		      .BYTE.b	%11000011
     50  f206		       c3		      .BYTE.b	%11000011
     51  f207		       63		      .BYTE.b	%01100011
     52  f208		       33		      .BYTE.b	%00110011
     53  f209		       13		      .BYTE.b	%00010011
     54  f20a		       01		      .BYTE.b	%00000001
     55  f20b		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    162  f20c
    163  f20c				   InitSystem
    164  f20c
    165  f20c				   .init_clean
    166  f20c							; Resets RAM, TIA registers, and CPU registers
      0  f20c					      CLEAN_START
      1  f20c		       78		      sei
      2  f20d		       d8		      cld
      3  f20e
      4  f20e		       a2 00		      ldx	#0
      5  f210		       8a		      txa
      6  f211		       a8		      tay
      7  f212		       ca	   .CLEAR_STACK dex
      8  f213		       9a		      txs
      9  f214		       48		      pha
     10  f215		       d0 fb		      bne	.CLEAR_STACK
     11  f217
    168  f217
    169  f217				   .init_tia
    170  f217							; Define default TIA register values
    171  f217
    172  f217							; Initialize copies
    173  f217							;    lda #0
    174  f217							;    sta CtrlPf
    175  f217							;    sta NuSiz0
    176  f217							;    sta NuSiz1
    177  f217
    178  f217							; Set background color
    179  f217							;    lda #$00	      ; Black
    180  f217							;    sta COLUBK
    181  f217
    182  f217							; Set the playfield and player color
    183  f217							;    lda #$0E	      ; White
    184  f217							;    sta COLUPF
    185  f217							;    sta COLUP0
    186  f217							;    sta COLUP1
    187  f217
    188  f217							; Playfield Control
    189  f217							;    lda #%00000001  ; 1 for mirroring
    190  f217							;    sta CtrlPf
    191  f217							;    sta CTRLPF
    192  f217
    193  f217							; Disable Game Elements
    194  f217							;    lda #$00
    195  f217							;    sta ENABL       ; Turn off ball
    196  f217							;    sta ENAM0       ; Turn off player 1 missile
    197  f217							;    sta ENAM1       ; Turn off player 2 missile
    198  f217							;    sta GRP0	      ; Turn off player 1
    199  f217							;    sta GRP1	      ; Turn off player 2
    200  f217
    201  f217							; Empty playfield
    202  f217							;    lda #%00000000
    203  f217							;    sta PF0
    204  f217							;    sta PF1
    205  f217							;    sta PF2
    206  f217
    207  f217				   .init_seed
    208  f217							; Seed the random number generator
    209  f217		       ad 84 02 	      lda	INTIM	; Unknown value
    210  f21a		       85 86		      sta	Rand8	; Use as seed
    211  f21c		       49 ff		      eor	#$FF	; Flip bits
    212  f21e		       85 87		      sta	Rand16	; Just in case INTIM was 0
    213  f220
    214  f220				   .init_game
    215  f220
    216  f220		       20 88 f2 	      jsr	LogoInit
    217  f223							;    jsr TitleInit
    218  f223
    219  f223							;=======================================
    220  f223							; Game Kernel
    221  f223							;=======================================
    222  f223
    223  f223				   Main
    224  f223
    225  f223		       20 32 f2 	      jsr	VerticalSync
    226  f226		       20 4b f2 	      jsr	VerticalBlank
    227  f229		       20 5e f2 	      jsr	Kernel
    228  f22c		       20 65 f2 	      jsr	OverScan
    229  f22f		       4c 23 f2 	      jmp	Main
    230  f232
    231  f232				   VerticalSync
    232  f232
    233  f232		       a9 00		      lda	#0
    234  f234		       85 01		      sta	VBLANK
    235  f236
    236  f236							; Turn on Vertical Sync signal and setup timer
    237  f236		       a9 02		      lda	#2
    238  f238		       85 00		      sta	VSYNC
    239  f23a
    240  f23a							; Increment frame count and reduce frame counter
    241  f23a		       e6 8e		      inc	Frame
    242  f23c		       c6 8f		      dec	FrameTimer
    243  f23e		       c6 90		      dec	FrameTimer+1
    244  f240
    245  f240							; VSYNCH signal scanlines
    246  f240					      REPEAT	#KERNEL_VSYNC
    247  f240		       85 02		      sta	WSYNC
    246  f240					      REPEND
    247  f242		       85 02		      sta	WSYNC
    246  f242					      REPEND
    247  f244		       85 02		      sta	WSYNC
    248  f246					      REPEND
    249  f246
    250  f246							; Turn off Vertical Sync signal
    251  f246		       a9 00		      lda	#0
    252  f248		       85 00		      sta	VSYNC
    253  f24a
    254  f24a				   .vsync_return
    255  f24a		       60		      rts
    256  f24b
    257  f24b				   VerticalBlank
    258  f24b							; Setup Timer
    259  f24b		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    260  f24d		       8d 96 02 	      sta	TIM64T
    261  f250
    262  f250				   .vblank_logic
    263  f250							; Perform Game Logic
    264  f250		       20 5b f2 	      jsr	.vblank_logic_call_ptr
    265  f253
    266  f253				   .vblank_loop
    267  f253							; WSYNC until Timer is complete
    268  f253		       85 02		      sta	WSYNC
    269  f255		       ad 84 02 	      lda	INTIM
    270  f258		       d0 f9		      bne	.vblank_loop
    271  f25a
    272  f25a				   .vblank_return
    273  f25a		       60		      rts
    274  f25b
    275  f25b				   .vblank_logic_call_ptr
    276  f25b		       6c 88 00 	      jmp	(VBlankPtr)
    277  f25e
    278  f25e				   Kernel
    279  f25e
    280  f25e							; Perform Selected Kernel
    281  f25e		       20 62 f2 	      jsr	.kernel_call_ptr
    282  f261		       60		      rts
    283  f262
    284  f262				   .kernel_call_ptr
    285  f262		       6c 8a 00 	      jmp	(KernelPtr)
    286  f265
    287  f265				   OverScan
    288  f265
    289  f265							; End of screen, enter blanking
    290  f265		       a9 42		      lda	#%01000010
    291  f267		       85 01		      sta	VBLANK
    292  f269
    293  f269							; Setup Timer
    294  f269		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    295  f26b		       8d 96 02 	      sta	TIM64T
    296  f26e
    297  f26e							;.overscan_reset:
    298  f26e							; Check for reset switch
    299  f26e		       ad 82 02 	      lda	SWCHB
    300  f271		       4a		      lsr		; Push D0 to carry (C)
    301  f272		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    302  f274
    303  f274							; Perform reset
    304  f274		       20 88 f2 	      jsr	LogoInit	; No need for logic
    305  f277							;    jsr TitleInit
    306  f277		       4c 7d f2 	      jmp	.overscan_loop
    307  f27a
    308  f27a				   .overscan_logic
    309  f27a							; Perform OverScan Logic
    310  f27a		       20 85 f2 	      jsr	.overscan_logic_call_ptr
    311  f27d
    312  f27d				   .overscan_loop
    313  f27d							; WSYNC until Timer is complete
    314  f27d		       85 02		      sta	WSYNC
    315  f27f		       ad 84 02 	      lda	INTIM
    316  f282		       d0 f9		      bne	.overscan_loop
    317  f284
    318  f284				   .overscan_return
    319  f284		       60		      rts
    320  f285
    321  f285				   .overscan_logic_call_ptr
    322  f285		       6c 8c 00 	      jmp	(OverScanPtr)
    323  f288
    324  f288							;================
    325  f288							; State Code
    326  f288							;================
    327  f288
------- FILE logo.asm LEVEL 2 PASS 2
      0  f288					      include	"logo.asm"
      1  f288							;================
      2  f288							; Constants
      3  f288							;================
      4  f288
      5  f288		       00 8c	   LOGO_FRAMES =	140
      6  f288
      7  f288		       00 00	   LOGO_BG_COLOR =	#$00
      8  f288		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f288		       00 00	   LOGO_BG_BW_COLOR =	#$00
     10  f288		       00 0e	   LOGO_FG_BW_COLOR =	#$0E
     11  f288
     12  f288		       00 0c	   LOGO_IMAGE_SIZE =	12
     13  f288		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     14  f288		       00 3c	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     15  f288		       00 42	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     16  f288		       00 38	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-10	; The extra 10 is for processing overflow
     17  f288		       00 06	   LOGO_IMAGE_ANIM_SPEED =	#6
     18  f288
     19  f288				   LogoInit
     20  f288
     21  f288							; Setup logic and kernel
      0  f288					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f288				   .POINTER   SET	VBlankPtr
      2  f288				   .ADDRESS   SET	LogoVerticalBlank
      3  f288
      4  f288		       a9 b3		      LDA	#<.ADDRESS
      5  f28a		       85 88		      STA	.POINTER
      6  f28c		       a9 f2		      LDA	#>.ADDRESS
      7  f28e		       85 89		      STA	.POINTER+1
      8  f290
      0  f290					      SET_POINTER	KernelPtr, LogoKernel
      1  f290				   .POINTER   SET	KernelPtr
      2  f290				   .ADDRESS   SET	LogoKernel
      3  f290
      4  f290		       a9 e1		      LDA	#<.ADDRESS
      5  f292		       85 8a		      STA	.POINTER
      6  f294		       a9 f2		      LDA	#>.ADDRESS
      7  f296		       85 8b		      STA	.POINTER+1
      8  f298
      0  f298					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f298				   .POINTER   SET	OverScanPtr
      2  f298				   .ADDRESS   SET	LogoOverScan
      3  f298
      4  f298		       a9 b7		      LDA	#<.ADDRESS
      5  f29a		       85 8c		      STA	.POINTER
      6  f29c		       a9 f2		      LDA	#>.ADDRESS
      7  f29e		       85 8d		      STA	.POINTER+1
      8  f2a0
     25  f2a0
     26  f2a0							; Clean audio
     27  f2a0		       a9 00		      lda	#0
     28  f2a2		       85 19		      sta	AUDV0
     29  f2a4		       85 1a		      sta	AUDV1
     30  f2a6
     31  f2a6							; Set initial button state
     32  f2a6							;    lda #0
     33  f2a6		       85 91		      sta	InputState
     34  f2a8
     35  f2a8							; Setup frame counters
     36  f2a8							;    lda #0
     37  f2a8		       85 8e		      sta	Frame
     38  f2aa		       a9 8c		      lda	#LOGO_FRAMES
     39  f2ac		       85 8f		      sta	FrameTimer
     40  f2ae
     41  f2ae							; Setup Image Animation
     42  f2ae		       a9 0b		      lda	#LOGO_IMAGE_SIZE-1
     43  f2b0		       85 a0		      sta	WebIndex
     44  f2b2
     45  f2b2		       60		      rts
     46  f2b3
     47  f2b3				   LogoVerticalBlank
     48  f2b3		       20 bb f2 	      jsr	LogoAnimation
     49  f2b6		       60		      rts
     50  f2b7
     51  f2b7				   LogoOverScan
     52  f2b7		       20 cc f2 	      jsr	LogoState
     53  f2ba		       60		      rts
     54  f2bb
     55  f2bb				   LogoAnimation
     56  f2bb		       a5 8e		      lda	Frame
     57  f2bd		       c9 06		      cmp	#LOGO_IMAGE_ANIM_SPEED
     58  f2bf		       d0 0a		      bne	.logo_animation_return
     59  f2c1
     60  f2c1		       a9 00		      lda	#0
     61  f2c3		       85 8e		      sta	Frame
     62  f2c5
     63  f2c5		       a6 a0		      ldx	WebIndex
     64  f2c7		       f0 02		      beq	.logo_animation_return
     65  f2c9
     66  f2c9							; Add another visible line
     67  f2c9		       c6 a0		      dec	WebIndex
     68  f2cb
     69  f2cb				   .logo_animation_return
     70  f2cb		       60		      rts
     71  f2cc
     72  f2cc				   LogoState
     73  f2cc		       a5 8f		      lda	FrameTimer
     74  f2ce		       f0 0d		      beq	.logo_state_next
     75  f2d0
     76  f2d0							; Check if Fire Button on controller 1 is released
     77  f2d0		       a5 0c		      lda	INPT4
     78  f2d2		       30 05		      bmi	.logo_state_check
     79  f2d4
     80  f2d4				   .logo_state_on
     81  f2d4		       a9 01		      lda	#1
     82  f2d6		       85 91		      sta	InputState
     83  f2d8		       60		      rts
     84  f2d9
     85  f2d9				   .logo_state_check
     86  f2d9		       a6 91		      ldx	InputState
     87  f2db		       f0 03		      beq	.logo_state_return
     88  f2dd
     89  f2dd				   .logo_state_next
     90  f2dd							; Button is released or timer runs out, load title screen
     91  f2dd		       20 70 f3 	      jsr	TitleInit
     92  f2e0
     93  f2e0				   .logo_state_return
     94  f2e0		       60		      rts
     95  f2e1
     96  f2e1				   LogoKernel
     97  f2e1
     98  f2e1							; Playfield Control
     99  f2e1		       a9 01		      lda	#%00000001	; Mirror
    100  f2e3							;sta CtrlPf
    101  f2e3		       85 0a		      sta	CTRLPF
    102  f2e5
    103  f2e5							; Load Colors
    104  f2e5		       ad 82 02 	      lda	SWCHB
    105  f2e8					      REPEAT	4
    106  f2e8		       4a		      lsr
    105  f2e8					      REPEND
    106  f2e9		       4a		      lsr
    105  f2e9					      REPEND
    106  f2ea		       4a		      lsr
    105  f2ea					      REPEND
    106  f2eb		       4a		      lsr
    107  f2ec					      REPEND
    108  f2ec		       90 07		      bcc	.logo_kernel_bw
    109  f2ee
    110  f2ee				   .logo_kernel_color
    111  f2ee		       a2 00		      ldx	#LOGO_BG_COLOR
    112  f2f0		       a0 c6		      ldy	#LOGO_FG_COLOR
    113  f2f2		       4c f9 f2 	      jmp	.logo_kernel_set
    114  f2f5
    115  f2f5				   .logo_kernel_bw
    116  f2f5		       a9 00		      lda	#LOGO_BG_BW_COLOR
    117  f2f7		       a9 0e		      lda	#LOGO_FG_BW_COLOR
    118  f2f9
    119  f2f9				   .logo_kernel_set
    120  f2f9		       86 09		      stx	COLUBK
    121  f2fb		       84 08		      sty	COLUPF
    122  f2fd
    123  f2fd				   .logo_kernel_start
    124  f2fd
    125  f2fd							; Turn on display
    126  f2fd		       a9 00		      lda	#0
    127  f2ff		       85 01		      sta	VBLANK
    128  f301
    129  f301		       a4 a0		      ldy	WebIndex
    130  f303		       d0 06		      bne	.logo_kernel_top_anim_padding
    131  f305
    132  f305				   .logo_kernel_top_padding
    133  f305							; Top Padding
    134  f305		       20 53 f3 	      jsr	LogoPadding
    135  f308		       4c 18 f3 	      jmp	.logo_kernel_image
    136  f30b
    137  f30b				   .logo_kernel_top_anim_padding
    138  f30b		       20 63 f3 	      jsr	LogoAnimPadding
    139  f30e
    140  f30e				   .logo_kernel_image_animation_start
    141  f30e		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    142  f310
    143  f310				   .logo_kernel_image_animation_loop
    144  f310		       85 02		      sta	WSYNC
    145  f312		       ca		      dex
    146  f313		       d0 fb		      bne	.logo_kernel_image_animation_loop
    147  f315
    148  f315		       88		      dey
    149  f316		       10 f6		      bpl	.logo_kernel_image_animation_start
    150  f318
    151  f318				   .logo_kernel_image
    152  f318
    153  f318		       a2 0b		      ldx	#LOGO_IMAGE_SIZE-1
    154  f31a		       a0 03		      ldy	#LOGO_IMAGE_LINE_SIZE-2
    155  f31c							; The extra 2 on line size is for processing overflow
    156  f31c
    157  f31c							;dex
    158  f31c		       e4 a0		      cpx	WebIndex
    159  f31e		       90 2f		      bcc	.logo_kernel_bottom_padding
    160  f320
    161  f320				   .logo_kernel_image_line
    162  f320		       85 02		      sta	WSYNC
    163  f322
    164  f322		       bd dc f1 	      lda	LogoImage1,x
    165  f325		       85 0e		      sta	PF1
    166  f327		       bd e8 f1 	      lda	LogoImage2,x
    167  f32a		       85 0f		      sta	PF2
    168  f32c
      0  f32c					      sleep	26
      1  f32c				   .CYCLES    SET	26
      2  f32c
      3  f32c				  -	      IF	.CYCLES < 2
      4  f32c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f32c				  -	      ERR
      6  f32c					      ENDIF
      7  f32c
      8  f32c				  -	      IF	.CYCLES & 1
      9  f32c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f32c				  -	      nop	0
     11  f32c				  -	      ELSE
     12  f32c				  -	      bit	VSYNC
     13  f32c				  -	      ENDIF
     14  f32c				  -.CYCLES    SET	.CYCLES - 3
     15  f32c					      ENDIF
     16  f32c
     17  f32c					      REPEAT	.CYCLES / 2
     18  f32c		       ea		      nop
     17  f32c					      REPEND
     18  f32d		       ea		      nop
     17  f32d					      REPEND
     18  f32e		       ea		      nop
     17  f32e					      REPEND
     18  f32f		       ea		      nop
     17  f32f					      REPEND
     18  f330		       ea		      nop
     17  f330					      REPEND
     18  f331		       ea		      nop
     17  f331					      REPEND
     18  f332		       ea		      nop
     17  f332					      REPEND
     18  f333		       ea		      nop
     17  f333					      REPEND
     18  f334		       ea		      nop
     17  f334					      REPEND
     18  f335		       ea		      nop
     17  f335					      REPEND
     18  f336		       ea		      nop
     17  f336					      REPEND
     18  f337		       ea		      nop
     17  f337					      REPEND
     18  f338		       ea		      nop
     19  f339					      REPEND
    170  f339
    171  f339		       bd f4 f1 	      lda	LogoImage3,x
    172  f33c		       85 0f		      sta	PF2
    173  f33e		       bd 00 f2 	      lda	LogoImage4,x
    174  f341		       85 0e		      sta	PF1
    175  f343
    176  f343		       88		      dey
    177  f344		       d0 da		      bne	.logo_kernel_image_line
    178  f346
    179  f346		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    180  f348
    181  f348		       e4 a0		      cpx	WebIndex
    182  f34a		       90 03		      bcc	.logo_kernel_bottom_padding
    183  f34c
    184  f34c		       ca		      dex
    185  f34d		       10 d1		      bpl	.logo_kernel_image_line
    186  f34f
    187  f34f				   .logo_kernel_bottom_padding
    188  f34f							; Bottom Padding
    189  f34f		       20 53 f3 	      jsr	LogoPadding
    190  f352
    191  f352				   .logo_kernel_image_return
    192  f352		       60		      rts
    193  f353
    194  f353				   LogoPadding
    195  f353		       a9 00		      lda	#0
    196  f355		       85 0d		      sta	PF0
    197  f357		       85 0e		      sta	PF1
    198  f359		       85 0f		      sta	PF2
    199  f35b
    200  f35b		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    201  f35d				   .logo_padding_loop
    202  f35d		       85 02		      sta	WSYNC
    203  f35f		       ca		      dex
    204  f360		       d0 fb		      bne	.logo_padding_loop
    205  f362
    206  f362		       60		      rts
    207  f363
    208  f363				   LogoAnimPadding
    209  f363		       a9 00		      lda	#0
    210  f365		       85 0d		      sta	PF0
    211  f367		       85 0e		      sta	PF1
    212  f369		       85 0f		      sta	PF2
    213  f36b
    214  f36b		       a2 38		      ldx	#LOGO_IMAGE_ANIM_PADDING
    215  f36d		       4c 5d f3 	      jmp	.logo_padding_loop
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f370					      include	"title.asm"
      1  f370							;================
      2  f370							; Constants
      3  f370							;================
      4  f370
      5  f370		       00 00	   TITLE_BG_COLOR =	#$00
      6  f370		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f370		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f370		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f370		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f370
     11  f370		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f370		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f370		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f370		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f370		       00 09	   TITLE_AUDIO_STEP =	9
     16  f370
     17  f370		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f370		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f370		       00 07	   TITLE_LABEL_LINE =	7
     20  f370
     21  f370		       00 10	   TITLE_GAP_SIZE =	#16
     22  f370
     23  f370		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f370		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f370		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f370
     27  f370				   TitleInit
     28  f370
     29  f370							; Setup logic and kernel
      0  f370					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f370				   .POINTER   SET	VBlankPtr
      2  f370				   .ADDRESS   SET	TitleVerticalBlank
      3  f370
      4  f370		       a9 d1		      LDA	#<.ADDRESS
      5  f372		       85 88		      STA	.POINTER
      6  f374		       a9 f3		      LDA	#>.ADDRESS
      7  f376		       85 89		      STA	.POINTER+1
      8  f378
      0  f378					      SET_POINTER	KernelPtr, TitleKernel
      1  f378				   .POINTER   SET	KernelPtr
      2  f378				   .ADDRESS   SET	TitleKernel
      3  f378
      4  f378		       a9 90		      LDA	#<.ADDRESS
      5  f37a		       85 8a		      STA	.POINTER
      6  f37c		       a9 f4		      LDA	#>.ADDRESS
      7  f37e		       85 8b		      STA	.POINTER+1
      8  f380
      0  f380					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f380				   .POINTER   SET	OverScanPtr
      2  f380				   .ADDRESS   SET	TitleOverScan
      3  f380
      4  f380		       a9 42		      LDA	#<.ADDRESS
      5  f382		       85 8c		      STA	.POINTER
      6  f384		       a9 f4		      LDA	#>.ADDRESS
      7  f386		       85 8d		      STA	.POINTER+1
      8  f388
     33  f388
     34  f388							; Load audio settings
     35  f388
     36  f388							; Melody Line
     37  f388		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f38a		       85 15		      sta	AUDC0
     39  f38c		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f38e		       85 19		      sta	AUDV0
     41  f390
     42  f390							; Drums and Bass
     43  f390		       a9 00		      lda	#0
     44  f392		       85 16		      sta	AUDC1
     45  f394		       85 1a		      sta	AUDV1
     46  f396
     47  f396							; Make it so that we play the first note immediately
     48  f396		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f398		       85 92		      sta	AudioStep
     50  f39a		       a9 01		      lda	#1
     51  f39c		       85 8f		      sta	FrameTimer
     52  f39e
     53  f39e							; Setup Spider Sprite
      0  f39e					      SET_POINTER	SpiderPtr, TitleSpider
      1  f39e				   .POINTER   SET	SpiderPtr
      2  f39e				   .ADDRESS   SET	TitleSpider
      3  f39e
      4  f39e		       a9 aa		      LDA	#<.ADDRESS
      5  f3a0		       85 a3		      STA	.POINTER
      6  f3a2		       a9 f0		      LDA	#>.ADDRESS
      7  f3a4		       85 a4		      STA	.POINTER+1
      8  f3a6
     55  f3a6
     56  f3a6		       a5 81		      lda	NuSiz0
     57  f3a8		       29 f8		      and	#%11111000
     58  f3aa		       09 06		      ora	#%00000110	; Triple Sprite
     59  f3ac		       85 81		      sta	NuSiz0
     60  f3ae		       85 04		      sta	NUSIZ0
     61  f3b0		       85 82		      sta	NuSiz1
     62  f3b2		       85 05		      sta	NUSIZ1
     63  f3b4
     64  f3b4		       a9 00		      lda	#0	; No reflect
     65  f3b6		       85 0b		      sta	REFP0
     66  f3b8		       a9 ff		      lda	#$FF	; Reflect P1
     67  f3ba		       85 0c		      sta	REFP1
     68  f3bc
     69  f3bc		       a9 00		      lda	#0
     70  f3be		       85 aa		      sta	SpiderDrawPos	; Initialize animation state
     71  f3c0
     72  f3c0							; Setup Web Line
     73  f3c0							; Missle0 (2 clock size)
     74  f3c0		       a5 81		      lda	NuSiz0
     75  f3c2		       29 cf		      and	#%11001111
     76  f3c4		       09 10		      ora	#%00010000
     77  f3c6		       85 81		      sta	NuSiz0
     78  f3c8		       85 04		      sta	NUSIZ0
     79  f3ca
     80  f3ca							; Disable at start
     81  f3ca		       a9 00		      lda	#0
     82  f3cc		       85 1d		      sta	ENAM0
     83  f3ce
     84  f3ce							; Set initial button state
     85  f3ce							;lda #0
     86  f3ce		       85 91		      sta	InputState
     87  f3d0
     88  f3d0		       60		      rts
     89  f3d1
     90  f3d1				   TitleVerticalBlank
     91  f3d1
     92  f3d1							; Refresh random values
     93  f3d1		       20 13 f0 	      jsr	Random
     94  f3d4
     95  f3d4		       20 de f3 	      jsr	TitlePosition
     96  f3d7		       20 f8 f3 	      jsr	TitleAnimation
     97  f3da		       20 23 f4 	      jsr	TitleColor
     98  f3dd
     99  f3dd		       60		      rts
    100  f3de
    101  f3de				   TitlePosition
    102  f3de
    103  f3de							; Position Spider
    104  f3de		       a2 00		      ldx	#0	; Object (player0)
    105  f3e0		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    106  f3e2		       20 00 f0 	      jsr	PosObject
    107  f3e5
    108  f3e5		       a2 01		      ldx	#1	; Object (player1)
    109  f3e7		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    110  f3e9		       20 00 f0 	      jsr	PosObject
    111  f3ec
    112  f3ec							; Position Web Line
    113  f3ec		       a2 02		      ldx	#2	; Object (missle0)
    114  f3ee		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    115  f3f0		       20 00 f0 	      jsr	PosObject
    116  f3f3
    117  f3f3		       85 02		      sta	WSYNC
    118  f3f5		       85 2a		      sta	HMOVE
    119  f3f7
    120  f3f7		       60		      rts
    121  f3f8
    122  f3f8				   TitleAnimation
    123  f3f8
    124  f3f8		       a5 92		      lda	AudioStep
    125  f3fa							;cmp #0
    126  f3fa		       f0 0d		      beq	.title_animation_1
    127  f3fc		       c9 04		      cmp	#4
    128  f3fe		       f0 16		      beq	.title_animation_2
    129  f400		       c9 09		      cmp	#9
    130  f402		       f0 05		      beq	.title_animation_1
    131  f404		       c9 0c		      cmp	#12
    132  f406		       f0 0e		      beq	.title_animation_2
    133  f408		       60		      rts
    134  f409
    135  f409				   .title_animation_1
      0  f409					      SET_POINTER	SpiderPtr, TitleSpider
      1  f409				   .POINTER   SET	SpiderPtr
      2  f409				   .ADDRESS   SET	TitleSpider
      3  f409
      4  f409		       a9 aa		      LDA	#<.ADDRESS
      5  f40b		       85 a3		      STA	.POINTER
      6  f40d		       a9 f0		      LDA	#>.ADDRESS
      7  f40f		       85 a4		      STA	.POINTER+1
      8  f411
    137  f411		       a9 00		      lda	#0
    138  f413		       85 aa		      sta	SpiderDrawPos
    139  f415		       60		      rts
    140  f416
    141  f416				   .title_animation_2
      0  f416					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f416				   .POINTER   SET	SpiderPtr
      2  f416				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f416
      4  f416		       a9 b3		      LDA	#<.ADDRESS
      5  f418		       85 a3		      STA	.POINTER
      6  f41a		       a9 f0		      LDA	#>.ADDRESS
      7  f41c		       85 a4		      STA	.POINTER+1
      8  f41e
    143  f41e		       a9 01		      lda	#1
    144  f420		       85 aa		      sta	SpiderDrawPos
    145  f422		       60		      rts
    146  f423
    147  f423				   TitleColor
    148  f423
    149  f423							; Load Colors
    150  f423		       a9 00		      lda	#TITLE_BG_COLOR
    151  f425		       85 09		      sta	COLUBK
    152  f427		       a9 06		      lda	#TITLE_WEB_COLOR
    153  f429		       85 08		      sta	COLUPF
    154  f42b
    155  f42b							; Check b/w
    156  f42b		       ad 82 02 	      lda	SWCHB
    157  f42e					      REPEAT	4
    158  f42e		       4a		      lsr
    157  f42e					      REPEND
    158  f42f		       4a		      lsr
    157  f42f					      REPEND
    158  f430		       4a		      lsr
    157  f430					      REPEND
    158  f431		       4a		      lsr
    159  f432					      REPEND
    160  f432		       90 07		      bcc	.title_bw
    161  f434
    162  f434				   .title_color
    163  f434		       a9 56		      lda	#TITLE_SPIDER_COLOR
    164  f436		       85 06		      sta	COLUP0
    165  f438		       85 07		      sta	COLUP1
    166  f43a
    167  f43a		       60		      rts
    168  f43b
    169  f43b				   .title_bw
    170  f43b							; Load B/W Colors
    171  f43b		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    172  f43d		       85 06		      sta	COLUP0
    173  f43f		       85 07		      sta	COLUP1
    174  f441
    175  f441		       60		      rts
    176  f442
    177  f442				   TitleOverScan
    178  f442		       20 49 f4 	      jsr	TitleAudio
    179  f445		       20 7f f4 	      jsr	TitleState
    180  f448		       60		      rts
    181  f449
    182  f449				   TitleAudio
    183  f449
    184  f449		       a6 8f		      ldx	FrameTimer
    185  f44b		       d0 31		      bne	.title_audio_return
    186  f44d
    187  f44d							; Reset Timer
    188  f44d		       a2 09		      ldx	#TITLE_AUDIO_STEP
    189  f44f		       86 8f		      stx	FrameTimer
    190  f451
    191  f451				   .title_audio_play
    192  f451
    193  f451							; Increment melody position
    194  f451		       a4 92		      ldy	AudioStep
    195  f453		       c8		      iny
    196  f454
    197  f454							; Check if we're at the end of the melody
    198  f454		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    199  f456		       d0 02		      bne	.title_audio_play_note
    200  f458
    201  f458							; Loop our audio step
    202  f458		       a0 00		      ldy	#0
    203  f45a
    204  f45a				   .title_audio_play_note
    205  f45a
    206  f45a							; Save current position
    207  f45a		       84 92		      sty	AudioStep
    208  f45c
    209  f45c							; Basic Melody Line
    210  f45c		       b9 7c f5 	      lda	TitleAudio0,y
    211  f45f		       85 17		      sta	AUDF0
    212  f461
    213  f461							; Drums and Bass
    214  f461		       b9 8c f5 	      lda	TitleTone1,y
    215  f464		       c9 ff		      cmp	#$FF
    216  f466		       f0 0e		      beq	.title_audio_play_note_1_mute
    217  f468
    218  f468		       85 16		      sta	AUDC1
    219  f46a		       b9 9c f5 	      lda	TitleAudio1,y
    220  f46d		       85 18		      sta	AUDF1
    221  f46f		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    222  f471		       85 1a		      sta	AUDV1
    223  f473
    224  f473		       4c 7e f4 	      jmp	.title_audio_return
    225  f476
    226  f476				   .title_audio_play_note_1_mute
    227  f476
    228  f476		       a9 00		      lda	#0
    229  f478		       85 18		      sta	AUDF1
    230  f47a		       85 16		      sta	AUDC1
    231  f47c		       85 1a		      sta	AUDV1
    232  f47e
    233  f47e				   .title_audio_return
    234  f47e		       60		      rts
    235  f47f
    236  f47f				   TitleState
    237  f47f
    238  f47f							; Check if Fire Button on controller 1 is released
    239  f47f		       a5 0c		      lda	INPT4
    240  f481		       30 05		      bmi	.title_state_check
    241  f483
    242  f483				   .title_state_on
    243  f483		       a9 01		      lda	#1
    244  f485		       85 91		      sta	InputState
    245  f487		       60		      rts
    246  f488
    247  f488				   .title_state_check
    248  f488		       a5 91		      lda	InputState
    249  f48a		       f0 03		      beq	.title_state_return
    250  f48c
    251  f48c				   .title_state_next
    252  f48c							; Button is released, load up game
    253  f48c		       20 2d fd 	      jsr	GameInit
    254  f48f
    255  f48f				   .title_state_return
    256  f48f		       60		      rts
    257  f490
    258  f490				   TitleKernel
    259  f490
    260  f490							; Playfield Control
    261  f490		       a5 80		      lda	CtrlPf
    262  f492		       29 fe		      and	#%11111110	; No mirroring
    263  f494		       85 80		      sta	CtrlPf
    264  f496		       85 0a		      sta	CTRLPF
    265  f498
    266  f498							; Turn on display
    267  f498		       a9 00		      lda	#0
    268  f49a		       85 01		      sta	VBLANK
    269  f49c
    270  f49c		       85 02		      sta	WSYNC
    271  f49e
    272  f49e				   TitleFrameTopDraw
    273  f49e
    274  f49e							; Start Counters
    275  f49e		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    276  f4a0		       a0 00		      ldy	#0	; Image Counter
    277  f4a2
    278  f4a2				   .title_frame_top
    279  f4a2
    280  f4a2							; 76 machine cycles per scanline
    281  f4a2		       85 02		      sta	WSYNC
    282  f4a4
    283  f4a4				   .title_frame_top_load		; 66 cycles
    284  f4a4
    285  f4a4							; First half of image
    286  f4a4		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    287  f4a7		       85 0d		      sta	PF0	; 4
    288  f4a9		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    289  f4ac		       85 0e		      sta	PF1	; 4
    290  f4ae		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    291  f4b1		       85 0f		      sta	PF2	; 4
    292  f4b3
      0  f4b3					      sleep	6
      1  f4b3				   .CYCLES    SET	6
      2  f4b3
      3  f4b3				  -	      IF	.CYCLES < 2
      4  f4b3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4b3				  -	      ERR
      6  f4b3					      ENDIF
      7  f4b3
      8  f4b3				  -	      IF	.CYCLES & 1
      9  f4b3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4b3				  -	      nop	0
     11  f4b3				  -	      ELSE
     12  f4b3				  -	      bit	VSYNC
     13  f4b3				  -	      ENDIF
     14  f4b3				  -.CYCLES    SET	.CYCLES - 3
     15  f4b3					      ENDIF
     16  f4b3
     17  f4b3					      REPEAT	.CYCLES / 2
     18  f4b3		       ea		      nop
     17  f4b3					      REPEND
     18  f4b4		       ea		      nop
     17  f4b4					      REPEND
     18  f4b5		       ea		      nop
     19  f4b6					      REPEND
    294  f4b6
    295  f4b6							; Second half of image
    296  f4b6		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    297  f4b9		       85 0d		      sta	PF0	; 4
    298  f4bb		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    299  f4be		       85 0e		      sta	PF1	; 4
    300  f4c0		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    301  f4c3		       85 0f		      sta	PF2	; 4
    302  f4c5
    303  f4c5				   .title_frame_top_index		; 4 cycles
    304  f4c5
    305  f4c5		       ca		      dex		; 2
    306  f4c6		       d0 da		      bne	.title_frame_top	; 2
    307  f4c8
    308  f4c8				   .title_frame_top_index_next		; 6 cycles
    309  f4c8
    310  f4c8							; Restore scanline counter
    311  f4c8		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    312  f4ca
    313  f4ca		       98		      tya		; 2
    314  f4cb		       18		      clc		; 2
    315  f4cc		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    316  f4ce		       a8		      tay		; 2
    317  f4cf
    318  f4cf		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    319  f4d1		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    320  f4d3		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    321  f4d5		       85 08		      sta	COLUPF	; 4
    322  f4d7		       ea		      nop		; 2
    323  f4d8		       4c a4 f4 	      jmp	.title_frame_top_load	; 3
    324  f4db
    325  f4db				   .title_frame_top_label_color_skip
    326  f4db
    327  f4db		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    328  f4dd		       d0 c3		      bne	.title_frame_top	; 2
    329  f4df
    330  f4df				   .title_frame_top_clean
    331  f4df
    332  f4df							; Clear out playfield
    333  f4df		       a9 00		      lda	#0
    334  f4e1		       85 0d		      sta	PF0
    335  f4e3		       85 0e		      sta	PF1
    336  f4e5		       85 0f		      sta	PF2
    337  f4e7
    338  f4e7				   TitleWebDraw
    339  f4e7		       a9 02		      lda	#%00000010
    340  f4e9		       85 1d		      sta	ENAM0
    341  f4eb
    342  f4eb		       a9 06		      lda	#TITLE_WEB_COLOR
    343  f4ed		       85 06		      sta	COLUP0
    344  f4ef
    345  f4ef		       a2 10		      ldx	#TITLE_GAP_SIZE
    346  f4f1				   .title_web_gap
    347  f4f1		       ca		      dex
    348  f4f2		       85 02		      sta	WSYNC
    349  f4f4		       d0 fb		      bne	.title_web_gap
    350  f4f6
    351  f4f6				   TitleSpiderDraw
    352  f4f6
    353  f4f6		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    354  f4f8
    355  f4f8		       a5 aa		      lda	SpiderDrawPos
    356  f4fa		       c9 01		      cmp	#1
    357  f4fc		       d0 0c		      bne	.title_spider_extra_web_disable
    358  f4fe
    359  f4fe				   .title_spider_extra_web_start
    360  f4fe		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    361  f500				   .title_spider_extra_web_loop
    362  f500		       85 02		      sta	WSYNC
    363  f502		       ca		      dex
    364  f503		       d0 fb		      bne	.title_spider_extra_web_loop
    365  f505
    366  f505		       88		      dey
    367  f506		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    368  f508		       d0 f4		      bne	.title_spider_extra_web_start
    369  f50a
    370  f50a				   .title_spider_extra_web_disable
    371  f50a		       a9 00		      lda	#0
    372  f50c		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    373  f50e
    374  f50e		       85 02		      sta	WSYNC
    375  f510
    376  f510		       85 1d		      sta	ENAM0
    377  f512
    378  f512							; Check b/w
    379  f512		       ad 82 02 	      lda	SWCHB
    380  f515					      REPEAT	4
    381  f515		       4a		      lsr
    380  f515					      REPEND
    381  f516		       4a		      lsr
    380  f516					      REPEND
    381  f517		       4a		      lsr
    380  f517					      REPEND
    381  f518		       4a		      lsr
    382  f519					      REPEND
    383  f519		       90 05		      bcc	.title_spider_bw
    384  f51b
    385  f51b				   .title_spider_color
    386  f51b		       a9 56		      lda	#TITLE_SPIDER_COLOR
    387  f51d		       4c 22 f5 	      jmp	.title_spider_color_set
    388  f520				   .title_spider_bw
    389  f520		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    390  f522				   .title_spider_color_set
    391  f522		       85 06		      sta	COLUP0
    392  f524
    393  f524				   .title_spider
    394  f524		       b1 a3		      lda	(SpiderPtr),y
    395  f526		       85 1b		      sta	GRP0
    396  f528		       85 1c		      sta	GRP1
    397  f52a
    398  f52a				   .title_spider_delay
    399  f52a		       ca		      dex
    400  f52b		       85 02		      sta	WSYNC
    401  f52d		       d0 fb		      bne	.title_spider_delay
    402  f52f
    403  f52f				   .title_spider_index
    404  f52f		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    405  f531		       88		      dey
    406  f532		       10 f0		      bpl	.title_spider
    407  f534
    408  f534				   .title_spider_clean
    409  f534
    410  f534							; Clear sprites
    411  f534		       a9 00		      lda	#0
    412  f536		       85 1b		      sta	GRP0
    413  f538		       85 1c		      sta	GRP1
    414  f53a
    415  f53a				   TitleFrameBottomDraw
    416  f53a
    417  f53a							; Load Frame Color
    418  f53a		       a9 06		      lda	#TITLE_WEB_COLOR
    419  f53c		       85 08		      sta	COLUPF
    420  f53e
    421  f53e							; Start Counters
    422  f53e		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    423  f540		       a0 00		      ldy	#0	; Image Counter
    424  f542
    425  f542				   .title_frame_bottom
    426  f542
    427  f542							; 76 machine cycles per scanline
    428  f542		       85 02		      sta	WSYNC
    429  f544
    430  f544				   .title_frame_bottom_load		; 66 cycles
    431  f544
    432  f544							; First half of image
    433  f544		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    434  f547		       85 0d		      sta	PF0	; 4
    435  f549		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    436  f54c		       85 0e		      sta	PF1	; 4
    437  f54e		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    438  f551		       85 0f		      sta	PF2	; 4
    439  f553
      0  f553					      sleep	6
      1  f553				   .CYCLES    SET	6
      2  f553
      3  f553				  -	      IF	.CYCLES < 2
      4  f553				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f553				  -	      ERR
      6  f553					      ENDIF
      7  f553
      8  f553				  -	      IF	.CYCLES & 1
      9  f553				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f553				  -	      nop	0
     11  f553				  -	      ELSE
     12  f553				  -	      bit	VSYNC
     13  f553				  -	      ENDIF
     14  f553				  -.CYCLES    SET	.CYCLES - 3
     15  f553					      ENDIF
     16  f553
     17  f553					      REPEAT	.CYCLES / 2
     18  f553		       ea		      nop
     17  f553					      REPEND
     18  f554		       ea		      nop
     17  f554					      REPEND
     18  f555		       ea		      nop
     19  f556					      REPEND
    441  f556
    442  f556							; Second half of image
    443  f556		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    444  f559		       85 0d		      sta	PF0	; 4
    445  f55b		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    446  f55e		       85 0e		      sta	PF1	; 4
    447  f560		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    448  f563		       85 0f		      sta	PF2	; 4
    449  f565
    450  f565				   .title_frame_bottom_index		; 4 cycles
    451  f565
    452  f565		       ca		      dex		; 2
    453  f566		       d0 da		      bne	.title_frame_bottom	; 2
    454  f568
    455  f568				   .title_frame_bottom_index_next		; 6 cycles
    456  f568
    457  f568							; Restore scanline counter
    458  f568		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    459  f56a
    460  f56a		       98		      tya		; 2
    461  f56b		       18		      clc		; 2
    462  f56c		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    463  f56e		       a8		      tay		; 2
    464  f56f		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    465  f571		       d0 cf		      bne	.title_frame_bottom	; 2
    466  f573
    467  f573				   .title_frame_bottom_clean
    468  f573
    469  f573							; Clear out playfield
    470  f573		       a9 00		      lda	#0
    471  f575		       85 0d		      sta	PF0
    472  f577		       85 0e		      sta	PF1
    473  f579		       85 0f		      sta	PF2
    474  f57b
    475  f57b				   .title_kernel_return
    476  f57b		       60		      rts
    477  f57c
    478  f57c				   TitleAudio0
    479  f57c
    480  f57c		       0f		      .BYTE.b	#15	; B
    481  f57d		       13		      .BYTE.b	#19	; G
    482  f57e		       17		      .BYTE.b	#23	; E
    483  f57f		       13		      .BYTE.b	#19	; G
    484  f580		       0e		      .BYTE.b	#14	; C
    485  f581		       13		      .BYTE.b	#19
    486  f582		       17		      .BYTE.b	#23
    487  f583		       13		      .BYTE.b	#19
    488  f584		       0c		      .BYTE.b	#12	; D
    489  f585		       13		      .BYTE.b	#19
    490  f586		       17		      .BYTE.b	#23
    491  f587		       13		      .BYTE.b	#19
    492  f588		       0e		      .BYTE.b	#14	; C
    493  f589		       13		      .BYTE.b	#19
    494  f58a		       17		      .BYTE.b	#23
    495  f58b		       13		      .BYTE.b	#19
    496  f58c
    497  f58c				   TitleTone1
    498  f58c
    499  f58c		       0f		      .BYTE.b	#15	; Electronic Rumble
    500  f58d		       ff		      .BYTE.b	#$FF
    501  f58e		       01		      .BYTE.b	#1	; Low Pure Tone
    502  f58f		       01		      .BYTE.b	#1
    503  f590		       08		      .BYTE.b	#8	; White Noise
    504  f591		       01		      .BYTE.b	#1
    505  f592		       01		      .BYTE.b	#1
    506  f593		       ff		      .BYTE.b	#$FF
    507  f594		       ff		      .BYTE.b	#$FF
    508  f595		       0f		      .BYTE.b	#15
    509  f596		       ff		      .BYTE.b	#$FF
    510  f597		       ff		      .BYTE.b	#$FF
    511  f598		       08		      .BYTE.b	#8
    512  f599		       ff		      .BYTE.b	#$FF
    513  f59a		       01		      .BYTE.b	#1
    514  f59b		       01		      .BYTE.b	#1
    515  f59c
    516  f59c				   TitleAudio1
    517  f59c
    518  f59c		       1d		      .BYTE.b	#29	; Kick
    519  f59d		       ff		      .BYTE.b	#$FF
    520  f59e		       1f		      .BYTE.b	#31	; C
    521  f59f		       1f		      .BYTE.b	#31
    522  f5a0		       07		      .BYTE.b	#7	; Snare
    523  f5a1		       1f		      .BYTE.b	#31
    524  f5a2		       1f		      .BYTE.b	#31
    525  f5a3		       ff		      .BYTE.b	#$FF
    526  f5a4		       ff		      .BYTE.b	#$FF
    527  f5a5		       1d		      .BYTE.b	#29
    528  f5a6		       ff		      .BYTE.b	#$FF
    529  f5a7		       ff		      .BYTE.b	#$FF
    530  f5a8		       07		      .BYTE.b	#7
    531  f5a9		       ff		      .BYTE.b	#$FF
    532  f5aa		       17		      .BYTE.b	#23	; F
    533  f5ab		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f5ac					      include	"game.asm"
      1  f5ac							;================
      2  f5ac							; Game
      3  f5ac							;================
      4  f5ac
      5  f5ac							; Constants
      6  f5ac
      7  f5ac		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f5ac		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f5ac		       00 09	   GAME_AUDIO_STEP =	9
     10  f5ac		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f5ac		       00 06	   GAME_AUDIO_TONE =	6
     12  f5ac
     13  f5ac							; Object Code
     14  f5ac
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f5ac					      include	"objects/level.asm"
      1  f5ac							;======================
      2  f5ac							; Level Logic
      3  f5ac							;======================
      4  f5ac
      5  f5ac							; Constants
      6  f5ac
      7  f5ac		       00 13	   LEVELS     =	19
      8  f5ac
      9  f5ac				   LevelInit
     10  f5ac
     11  f5ac							; Set beginning level by difficulty switches treated as binary
     12  f5ac		       ad 82 02 	      lda	SWCHB
     13  f5af					      REPEAT	6
     14  f5af		       4a		      lsr
     13  f5af					      REPEND
     14  f5b0		       4a		      lsr
     13  f5b0					      REPEND
     14  f5b1		       4a		      lsr
     13  f5b1					      REPEND
     14  f5b2		       4a		      lsr
     13  f5b2					      REPEND
     14  f5b3		       4a		      lsr
     13  f5b3					      REPEND
     14  f5b4		       4a		      lsr
     15  f5b5					      REPEND
     16  f5b5		       29 03		      and	#%00000011
     17  f5b7		       85 9f		      sta	LevelCurrent
     18  f5b9
     19  f5b9		       20 df f5 	      jsr	LevelLoad
     20  f5bc
     21  f5bc		       60		      rts
     22  f5bd
     23  f5bd				   LevelUpdate
     24  f5bd
     25  f5bd							; Calculate Desired score: (level+2)*5
     26  f5bd		       a5 9f		      lda	LevelCurrent
     27  f5bf		       18		      clc
     28  f5c0		       69 02		      adc	#2	; +2
     29  f5c2		       85 83		      sta	Temp
     30  f5c4		       0a		      asl		; x2
     31  f5c5		       0a		      asl		; x2
     32  f5c6		       65 83		      adc	Temp	; x1
     33  f5c8
     34  f5c8							; Check if score is high enough
     35  f5c8		       c5 95		      cmp	ScoreValue+1
     36  f5ca		       b0 0f		      bcs	.level_update_return
     37  f5cc
     38  f5cc							; Reset score
     39  f5cc		       a9 00		      lda	#0
     40  f5ce		       85 95		      sta	ScoreValue+1
     41  f5d0
     42  f5d0							; Check if we haven't reached the final level
     43  f5d0		       a5 9f		      lda	LevelCurrent
     44  f5d2		       c9 12		      cmp	#LEVELS-1
     45  f5d4		       b0 05		      bcs	.level_update_return
     46  f5d6
     47  f5d6		       e6 9f		      inc	LevelCurrent
     48  f5d8		       20 df f5 	      jsr	LevelLoad
     49  f5db
     50  f5db				   .level_update_return
     51  f5db
     52  f5db		       20 02 f6 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     53  f5de
     54  f5de		       60		      rts
     55  f5df
     56  f5df				   LevelLoad
     57  f5df
     58  f5df							; Bug Speed: level/4+2
     59  f5df		       a5 9f		      lda	LevelCurrent
     60  f5e1		       4a		      lsr		; /2
     61  f5e2		       4a		      lsr		; /2
     62  f5e3		       69 02		      adc	#2
     63  f5e5		       85 b7		      sta	BugSpeed
     64  f5e7
     65  f5e7							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     66  f5e7		       a9 14		      lda	#20
     67  f5e9		       18		      clc
     68  f5ea		       e5 9f		      sbc	LevelCurrent
     69  f5ec		       0a		      asl		; x2
     70  f5ed		       85 83		      sta	Temp
     71  f5ef		       0a		      asl		; x2
     72  f5f0		       0a		      asl		; x2
     73  f5f1		       65 83		      adc	Temp
     74  f5f3		       85 c6		      sta	SwatterWaitTime
     75  f5f5
     76  f5f5							; Swatter Hit Damage: level*3+$10
     77  f5f5		       a5 9f		      lda	LevelCurrent
     78  f5f7		       18		      clc
     79  f5f8		       85 83		      sta	Temp
     80  f5fa		       0a		      asl		; x2
     81  f5fb		       65 83		      adc	Temp
     82  f5fd		       69 10		      adc	#$10
     83  f5ff		       85 c7		      sta	SwatterHitDamage
     84  f601
     85  f601		       60		      rts
     86  f602
     87  f602				   LevelLoadColor
     88  f602		       a4 9f		      ldy	LevelCurrent
     89  f604
     90  f604							; check b/w
     91  f604		       ad 82 02 	      lda	SWCHB
     92  f607					      REPEAT	4
     93  f607		       4a		      lsr
     92  f607					      REPEND
     93  f608		       4a		      lsr
     92  f608					      REPEND
     93  f609		       4a		      lsr
     92  f609					      REPEND
     93  f60a		       4a		      lsr
     94  f60b					      REPEND
     95  f60b		       90 0b		      bcc	.level_load_bw
     96  f60d
     97  f60d				   .level_load_color
     98  f60d
     99  f60d							; Background Color
    100  f60d		       b9 21 f6 	      lda	LevelDataBk,y
    101  f610		       85 a1		      sta	WebColor+0
    102  f612
    103  f612							; Web Color
    104  f612		       b9 34 f6 	      lda	LevelDataPf,y
    105  f615		       85 a2		      sta	WebColor+1
    106  f617
    107  f617		       60		      rts
    108  f618
    109  f618				   .level_load_bw
    110  f618
    111  f618							; Background Color
    112  f618		       a9 00		      lda	#WEB_BG_COLOR
    113  f61a		       85 a1		      sta	WebColor+0
    114  f61c
    115  f61c							; Web Color
    116  f61c		       a9 02		      lda	#WEB_FG_COLOR
    117  f61e		       85 a2		      sta	WebColor+1
    118  f620
    119  f620		       60		      rts
    120  f621
    121  f621							; Easy: 1-5
    122  f621							; Medium: 6-9
    123  f621							; Hard: 10-15
    124  f621							; Extreme: 16-19
    125  f621
    126  f621				   LevelDataBk		; Background Color
    127  f621		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    128  f622		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    129  f623		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    130  f624		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    131  f625		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    132  f626		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    133  f627		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    134  f628		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    135  f629		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    136  f62a		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    137  f62b		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    138  f62c		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    139  f62d		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    140  f62e		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    141  f62f		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    142  f630		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    143  f631		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    144  f632		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    145  f633		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    146  f634
    147  f634				   LevelDataPf		; Web Color
    148  f634		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    149  f635		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    150  f636		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    151  f637		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    152  f638		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    153  f639		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    154  f63a		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    155  f63b		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    156  f63c		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    157  f63d		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    158  f63e		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    159  f63f		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    160  f640		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    161  f641		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    162  f642		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    163  f643		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    164  f644		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    165  f645		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    166  f646		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f647					      include	"objects/score.asm"
      1  f647							;======================
      2  f647							; Score (playfield)
      3  f647							;======================
      4  f647
      5  f647							; Constants
      6  f647
      7  f647		       00 00	   SCORE_BG_COLOR =	#$00
      8  f647		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f647		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f647		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f647		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f647		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f647
     14  f647		       00 05	   SCORE_LABEL_SIZE =	5
     15  f647		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f647		       00 02	   SCORE_LINE_SIZE =	2
     17  f647		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f647
     19  f647							; Initialization
     20  f647
     21  f647				   ScoreInit
     22  f647
     23  f647							; Health Score
     24  f647		       a9 ff		      lda	#$ff
     25  f649		       85 94		      sta	ScoreValue+0
     26  f64b
     27  f64b							; Game Score
     28  f64b		       a9 00		      lda	#0
     29  f64d		       85 95		      sta	ScoreValue+1
     30  f64f
     31  f64f		       60		      rts
     32  f650
     33  f650							; Frame Update
     34  f650
     35  f650				   ScoreUpdate
     36  f650
     37  f650							; Current Level Digits
     38  f650		       a5 9f		      lda	LevelCurrent
     39  f652		       18		      clc
     40  f653		       69 01		      adc	#1
     41  f655
     42  f655		       20 21 f0 	      jsr	BinBcdConvert
     43  f658
     44  f658							; Only use first byte
     45  f658		       8a		      txa
     46  f659		       29 0f		      and	#$0f
     47  f65b		       a8		      tay
     48  f65c		       8a		      txa
     49  f65d		       29 f0		      and	#$f0
     50  f65f					      REPEAT	4
     51  f65f		       4a		      lsr
     50  f65f					      REPEND
     51  f660		       4a		      lsr
     50  f660					      REPEND
     51  f661		       4a		      lsr
     50  f661					      REPEND
     51  f662		       4a		      lsr
     52  f663					      REPEND
     53  f663		       aa		      tax
     54  f664
     55  f664							; Adjust index positions by multiplying by 5
     56  f664		       8a		      txa
     57  f665		       85 83		      sta	Temp
     58  f667		       0a		      asl
     59  f668		       0a		      asl
     60  f669		       65 83		      adc	Temp
     61  f66b		       85 98		      sta	ScoreDigitTens
     62  f66d
     63  f66d		       98		      tya
     64  f66e		       85 83		      sta	Temp
     65  f670		       0a		      asl
     66  f671		       0a		      asl
     67  f672		       65 83		      adc	Temp
     68  f674		       85 96		      sta	ScoreDigitOnes
     69  f676
     70  f676							; Score Digits
     71  f676		       a5 95		      lda	ScoreValue+1
     72  f678
     73  f678		       20 21 f0 	      jsr	BinBcdConvert
     74  f67b
     75  f67b							; Only use first byte
     76  f67b		       8a		      txa
     77  f67c		       29 0f		      and	#$0f
     78  f67e		       a8		      tay
     79  f67f		       8a		      txa
     80  f680		       29 f0		      and	#$f0
     81  f682					      REPEAT	4
     82  f682		       4a		      lsr
     81  f682					      REPEND
     82  f683		       4a		      lsr
     81  f683					      REPEND
     82  f684		       4a		      lsr
     81  f684					      REPEND
     82  f685		       4a		      lsr
     83  f686					      REPEND
     84  f686		       aa		      tax
     85  f687
     86  f687							; Adjust index positions by multiplying by 5
     87  f687		       8a		      txa
     88  f688		       85 83		      sta	Temp
     89  f68a		       0a		      asl
     90  f68b		       0a		      asl
     91  f68c		       65 83		      adc	Temp
     92  f68e		       85 99		      sta	ScoreDigitTens+1
     93  f690
     94  f690		       98		      tya
     95  f691		       85 83		      sta	Temp
     96  f693		       0a		      asl
     97  f694		       0a		      asl
     98  f695		       65 83		      adc	Temp
     99  f697		       85 97		      sta	ScoreDigitOnes+1
    100  f699
    101  f699							; Health Bar
    102  f699		       a5 94		      lda	ScoreValue+0
    103  f69b		       f0 1c		      beq	.score_update_bar_empty
    104  f69d
    105  f69d					      REPEAT	4
    106  f69d		       4a		      lsr
    105  f69d					      REPEND
    106  f69e		       4a		      lsr
    105  f69e					      REPEND
    106  f69f		       4a		      lsr
    105  f69f					      REPEND
    106  f6a0		       4a		      lsr
    107  f6a1					      REPEND
    108  f6a1		       c9 08		      cmp	#8
    109  f6a3		       b0 09		      bcs	.score_update_bar_top
    110  f6a5
    111  f6a5				   .score_update_bar_bottom
    112  f6a5		       aa		      tax
    113  f6a6		       bd cc f7 	      lda	ScoreBar,x
    114  f6a9		       a0 00		      ldy	#$00
    115  f6ab		       4c bd f6 	      jmp	.score_update_bar_store
    116  f6ae
    117  f6ae				   .score_update_bar_top
    118  f6ae		       29 07		      and	#%00000111
    119  f6b0		       aa		      tax
    120  f6b1		       a9 7f		      lda	#$7f
    121  f6b3		       bc d4 f7 	      ldy	ScoreBarFlip,x
    122  f6b6		       4c bd f6 	      jmp	.score_update_bar_store
    123  f6b9
    124  f6b9				   .score_update_bar_empty
    125  f6b9		       a9 00		      lda	#0
    126  f6bb		       a0 00		      ldy	#0
    127  f6bd
    128  f6bd				   .score_update_bar_store
    129  f6bd		       85 9d		      sta	ScoreBarGfx+0
    130  f6bf		       84 9e		      sty	ScoreBarGfx+1
    131  f6c1
    132  f6c1				   .score_update_end
    133  f6c1		       60		      rts
    134  f6c2
    135  f6c2							; Draw loop (uses SCORE_LINES scanlines)
    136  f6c2
    137  f6c2				   ScoreDraw
    138  f6c2
    139  f6c2							; Load Colors
    140  f6c2		       a9 00		      lda	#SCORE_BG_COLOR
    141  f6c4		       85 09		      sta	COLUBK
    142  f6c6		       a9 06		      lda	#SCORE_LABEL_COLOR
    143  f6c8		       85 08		      sta	COLUPF
    144  f6ca		       85 06		      sta	COLUP0
    145  f6cc		       85 07		      sta	COLUP1
    146  f6ce
    147  f6ce							; Set Non-Mirror
    148  f6ce		       a5 80		      lda	CtrlPf
    149  f6d0		       29 fc		      and	#%11111100
    150  f6d2		       09 02		      ora	#%00000010
    151  f6d4		       85 80		      sta	CtrlPf
    152  f6d6		       85 0a		      sta	CTRLPF
    153  f6d8
    154  f6d8		       a2 00		      ldx	#0
    155  f6da				   .score_draw_label
    156  f6da
    157  f6da		       85 02		      sta	WSYNC
    158  f6dc
    159  f6dc							; First half of image
    160  f6dc		       bd 20 f1 	      lda	ScoreLabel+0,x	; 4
    161  f6df		       85 0d		      sta	PF0	; 3
    162  f6e1		       bd 21 f1 	      lda	ScoreLabel+1,x
    163  f6e4		       85 0e		      sta	PF1
    164  f6e6		       bd 22 f1 	      lda	ScoreLabel+2,x
    165  f6e9		       85 0f		      sta	PF2
    166  f6eb
      0  f6eb					      sleep	8
      1  f6eb				   .CYCLES    SET	8
      2  f6eb
      3  f6eb				  -	      IF	.CYCLES < 2
      4  f6eb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6eb				  -	      ERR
      6  f6eb					      ENDIF
      7  f6eb
      8  f6eb				  -	      IF	.CYCLES & 1
      9  f6eb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6eb				  -	      nop	0
     11  f6eb				  -	      ELSE
     12  f6eb				  -	      bit	VSYNC
     13  f6eb				  -	      ENDIF
     14  f6eb				  -.CYCLES    SET	.CYCLES - 3
     15  f6eb					      ENDIF
     16  f6eb
     17  f6eb					      REPEAT	.CYCLES / 2
     18  f6eb		       ea		      nop
     17  f6eb					      REPEND
     18  f6ec		       ea		      nop
     17  f6ec					      REPEND
     18  f6ed		       ea		      nop
     17  f6ed					      REPEND
     18  f6ee		       ea		      nop
     19  f6ef					      REPEND
    168  f6ef
    169  f6ef							; Second half of image
    170  f6ef							;lda ScoreLabel+3,x ; 4
    171  f6ef		       a9 00		      lda	#0	; 2
    172  f6f1		       85 0d		      sta	PF0	; 3
    173  f6f3		       bd 24 f1 	      lda	ScoreLabel+4,x
    174  f6f6		       85 0e		      sta	PF1
    175  f6f8		       bd 25 f1 	      lda	ScoreLabel+5,x
    176  f6fb		       85 0f		      sta	PF2
    177  f6fd
    178  f6fd		       8a		      txa
    179  f6fe		       18		      clc
    180  f6ff		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    181  f701		       aa		      tax
    182  f702		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    183  f704		       d0 d4		      bne	.score_draw_label
    184  f706
    185  f706							; Clear labels and setup color
    186  f706		       a9 00		      lda	#0
    187  f708		       85 0d		      sta	PF0
    188  f70a		       85 0e		      sta	PF1
    189  f70c		       85 0f		      sta	PF2
    190  f70e
    191  f70e		       85 02		      sta	WSYNC
    192  f710
    193  f710							; Load Colors
    194  f710		       ad 82 02 	      lda	SWCHB
    195  f713					      REPEAT	4
    196  f713		       4a		      lsr
    195  f713					      REPEND
    196  f714		       4a		      lsr
    195  f714					      REPEND
    196  f715		       4a		      lsr
    195  f715					      REPEND
    196  f716		       4a		      lsr
    197  f717					      REPEND
    198  f717		       90 0d		      bcc	.score_draw_bw
    199  f719
    200  f719				   .score_draw_color
    201  f719		       a9 44		      lda	#SCORE_LEVEL_COLOR
    202  f71b		       85 08		      sta	COLUPF
    203  f71d		       85 06		      sta	COLUP0
    204  f71f		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    205  f721		       85 07		      sta	COLUP1
    206  f723
    207  f723		       4c 30 f7 	      jmp	.score_draw_digit_start
    208  f726
    209  f726				   .score_draw_bw
    210  f726		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    211  f728		       85 08		      sta	COLUPF
    212  f72a		       85 06		      sta	COLUP0
    213  f72c		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    214  f72e		       85 07		      sta	COLUP1
    215  f730
    216  f730				   .score_draw_digit_start
    217  f730
    218  f730		       85 02		      sta	WSYNC
    219  f732
    220  f732							; Prepare initial line
    221  f732
    222  f732							; Level
    223  f732		       a4 98		      ldy	ScoreDigitTens
    224  f734		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    225  f737		       29 f0		      and	#$f0
    226  f739		       85 9a		      sta	ScoreDigitGfx
    227  f73b
    228  f73b		       a4 96		      ldy	ScoreDigitOnes
    229  f73d		       b9 bc f0 	      lda	ScoreDigits,y
    230  f740		       29 f0		      and	#$f0
    231  f742		       85 9b		      sta	ScoreDigitGfx+1
    232  f744
    233  f744							; Score
    234  f744		       a4 99		      ldy	ScoreDigitTens+1
    235  f746		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    236  f749		       29 0f		      and	#$0f
    237  f74b		       85 9c		      sta	ScoreDigitGfx+2
    238  f74d
    239  f74d		       a4 97		      ldy	ScoreDigitOnes+1
    240  f74f		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    241  f752		       29 f0		      and	#$f0
    242  f754		       05 9c		      ora	ScoreDigitGfx+2
    243  f756		       85 9c		      sta	ScoreDigitGfx+2
    244  f758
    245  f758		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    246  f75a		       a5 9a		      lda	ScoreDigitGfx
    247  f75c		       85 02		      sta	WSYNC
    248  f75e				   .score_draw_digit
    249  f75e
    250  f75e							;lda ScoreDigitGfx
    251  f75e		       85 0d		      sta	PF0
    252  f760		       a5 9b		      lda	ScoreDigitGfx+1
    253  f762		       85 0e		      sta	PF1
    254  f764		       a5 9c		      lda	ScoreDigitGfx+2
    255  f766		       85 0f		      sta	PF2
    256  f768
    257  f768							; Begin preparing next line
    258  f768		       e6 96		      inc	ScoreDigitOnes
    259  f76a		       e6 98		      inc	ScoreDigitTens
    260  f76c		       e6 97		      inc	ScoreDigitOnes+1
    261  f76e		       e6 99		      inc	ScoreDigitTens+1
    262  f770
    263  f770		       a9 00		      lda	#0
    264  f772		       85 0d		      sta	PF0
    265  f774		       a5 9d		      lda	ScoreBarGfx+0
    266  f776		       85 0e		      sta	PF1
    267  f778		       a5 9e		      lda	ScoreBarGfx+1
    268  f77a		       85 0f		      sta	PF2
    269  f77c
    270  f77c							; Level 1st Digit
    271  f77c		       a4 98		      ldy	ScoreDigitTens
    272  f77e		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    273  f781		       29 f0		      and	#$f0
    274  f783		       85 83		      sta	Temp
    275  f785
    276  f785							; Score 1st Digit
    277  f785		       a4 99		      ldy	ScoreDigitTens+1
    278  f787		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    279  f78a		       29 0f		      and	#$0f
    280  f78c		       85 84		      sta	Temp+1
    281  f78e
    282  f78e		       a5 9a		      lda	ScoreDigitGfx
    283  f790		       85 0d		      sta	PF0
    284  f792		       a5 9b		      lda	ScoreDigitGfx+1
    285  f794		       85 0e		      sta	PF1
    286  f796		       a5 9c		      lda	ScoreDigitGfx+2
    287  f798		       85 0f		      sta	PF2
    288  f79a
    289  f79a							; Level 2nd Digit (and transfer)
    290  f79a		       a4 96		      ldy	ScoreDigitOnes
    291  f79c		       b9 bc f0 	      lda	ScoreDigits,y
    292  f79f		       29 f0		      and	#$f0
    293  f7a1		       85 9b		      sta	ScoreDigitGfx+1
    294  f7a3
      0  f7a3					      sleep	3
      1  f7a3				   .CYCLES    SET	3
      2  f7a3
      3  f7a3				  -	      IF	.CYCLES < 2
      4  f7a3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7a3				  -	      ERR
      6  f7a3					      ENDIF
      7  f7a3
      8  f7a3					      IF	.CYCLES & 1
      9  f7a3					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7a3		       04 00		      nop	0
     11  f7a5				  -	      ELSE
     12  f7a5				  -	      bit	VSYNC
     13  f7a5					      ENDIF
     14  f7a5				   .CYCLES    SET	.CYCLES - 3
     15  f7a5					      ENDIF
     16  f7a5
     17  f7a5				  -	      REPEAT	.CYCLES / 2
     18  f7a5				  -	      nop
     19  f7a5					      REPEND
    296  f7a5
    297  f7a5		       a9 00		      lda	#0
    298  f7a7		       85 0d		      sta	PF0
    299  f7a9		       a5 9d		      lda	ScoreBarGfx+0
    300  f7ab		       85 0e		      sta	PF1
    301  f7ad		       a4 9e		      ldy	ScoreBarGfx+1
    302  f7af		       84 0f		      sty	PF2
    303  f7b1
    304  f7b1							; Score 2nd Digit (and transfer)
    305  f7b1		       a4 97		      ldy	ScoreDigitOnes+1
    306  f7b3		       b9 ee f0 	      lda	ScoreDigitsFlip,y
    307  f7b6		       29 f0		      and	#$f0
    308  f7b8		       05 84		      ora	Temp+1
    309  f7ba		       85 9c		      sta	ScoreDigitGfx+2
    310  f7bc
    311  f7bc							; Transfer Level 1st Digit
    312  f7bc		       a5 83		      lda	Temp
    313  f7be		       85 9a		      sta	ScoreDigitGfx
    314  f7c0
    315  f7c0		       ca		      dex
    316  f7c1		       d0 9b		      bne	.score_draw_digit
    317  f7c3
    318  f7c3		       a9 00		      lda	#0
    319  f7c5		       85 0d		      sta	PF0
    320  f7c7		       85 0e		      sta	PF1
    321  f7c9		       85 0f		      sta	PF2
    322  f7cb
    323  f7cb		       60		      rts
    324  f7cc
    325  f7cc				   ScoreBar
    326  f7cc		       40		      .BYTE.b	#%01000000
    327  f7cd		       40		      .BYTE.b	#%01000000
    328  f7ce		       60		      .BYTE.b	#%01100000
    329  f7cf		       70		      .BYTE.b	#%01110000
    330  f7d0		       78		      .BYTE.b	#%01111000
    331  f7d1		       7c		      .BYTE.b	#%01111100
    332  f7d2		       7e		      .BYTE.b	#%01111110
    333  f7d3		       7f		      .BYTE.b	#%01111111
    334  f7d4
    335  f7d4				   ScoreBarFlip
    336  f7d4		       01		      .BYTE.b	#%00000001
    337  f7d5		       03		      .BYTE.b	#%00000011
    338  f7d6		       07		      .BYTE.b	#%00000111
    339  f7d7		       0f		      .BYTE.b	#%00001111
    340  f7d8		       1f		      .BYTE.b	#%00011111
    341  f7d9		       3f		      .BYTE.b	#%00111111
    342  f7da		       7f		      .BYTE.b	#%01111111
    343  f7db		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f7dc					      include	"objects/web.asm"
      1  f7dc							;================
      2  f7dc							; Web (Playfield)
      3  f7dc							;================
      4  f7dc
      5  f7dc							; Constants
      6  f7dc
      7  f7dc		       00 00	   WEB_BG_COLOR =	#$00
      8  f7dc		       00 02	   WEB_FG_COLOR =	#$02
      9  f7dc
     10  f7dc		       00 1e	   WEB_SIZE   =	30
     11  f7dc		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f7dc		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f7dc
     14  f7dc							; Scanline Draw
     15  f7dc
     16  f7dc				   WebDrawStart
     17  f7dc
     18  f7dc							; Load Colors
     19  f7dc		       a5 a2		      lda	WebColor+1
     20  f7de		       85 08		      sta	COLUPF
     21  f7e0
     22  f7e0							; Mirror playfield and use standard playfield color
     23  f7e0		       a5 80		      lda	CtrlPf
     24  f7e2		       29 fc		      and	#%11111100
     25  f7e4		       09 01		      ora	#%00000001
     26  f7e6		       85 80		      sta	CtrlPf
     27  f7e8		       85 0a		      sta	CTRLPF
     28  f7ea
     29  f7ea							; Initialize image index
     30  f7ea		       a9 00		      lda	#0
     31  f7ec		       85 a0		      sta	WebIndex
     32  f7ee
     33  f7ee		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f7ef					      include	"objects/spider.asm"
      1  f7ef							;=================
      2  f7ef							; Spider (player0)
      3  f7ef							;=================
      4  f7ef
      5  f7ef							; Constants
      6  f7ef
      7  f7ef		       00 56	   SPIDER_COLOR =	#$56
      8  f7ef		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f7ef		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f7ef		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f7ef
     12  f7ef		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f7ef		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f7ef		       00 02	   SPIDER_VEL_X =	2
     15  f7ef		       00 02	   SPIDER_VEL_Y =	2
     16  f7ef
     17  f7ef							; Initialization
     18  f7ef
     19  f7ef				   SpiderInit
     20  f7ef
     21  f7ef							; Initialize Position in center of screen
     22  f7ef		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f7f1		       85 a5		      sta	SpiderPos
     24  f7f3		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f7f5		       85 a6		      sta	SpiderPos+1
     26  f7f7
     27  f7f7							; Setup Sprite
      0  f7f7					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f7f7				   .POINTER   SET	SpiderPtr
      2  f7f7				   .ADDRESS   SET	SpiderSprite
      3  f7f7
      4  f7f7		       a9 98		      LDA	#<.ADDRESS
      5  f7f9		       85 a3		      STA	.POINTER
      6  f7fb		       a9 f1		      LDA	#>.ADDRESS
      7  f7fd		       85 a4		      STA	.POINTER+1
      8  f7ff
     29  f7ff
     30  f7ff		       60		      rts
     31  f800
     32  f800							; Frame Update
     33  f800
     34  f800				   SpiderUpdate
     35  f800		       20 07 f8 	      jsr	SpiderControl
     36  f803		       20 ed f8 	      jsr	SpiderCollision
     37  f806		       60		      rts
     38  f807
     39  f807				   SpiderControl
     40  f807
     41  f807							; Control Position
     42  f807		       a6 a5		      ldx	SpiderPos
     43  f809		       a4 a6		      ldy	SpiderPos+1
     44  f80b		       ad 80 02 	      lda	SWCHA
     45  f80e
     46  f80e				   .spider_control_check_right
     47  f80e		       30 02		      bmi	.spider_control_check_left
     48  f810
     49  f810					      REPEAT	#SPIDER_VEL_X
     50  f810		       e8		      inx
     49  f810					      REPEND
     50  f811		       e8		      inx
     51  f812					      REPEND
     52  f812
     53  f812				   .spider_control_check_left
     54  f812		       2a		      rol
     55  f813		       30 02		      bmi	.spider_control_check_down
     56  f815
     57  f815					      REPEAT	#SPIDER_VEL_X
     58  f815		       ca		      dex
     57  f815					      REPEND
     58  f816		       ca		      dex
     59  f817					      REPEND
     60  f817
     61  f817				   .spider_control_check_down
     62  f817		       2a		      rol
     63  f818		       30 02		      bmi	.spider_control_check_up
     64  f81a
     65  f81a					      REPEAT	#SPIDER_VEL_Y
     66  f81a		       88		      dey
     65  f81a					      REPEND
     66  f81b		       88		      dey
     67  f81c					      REPEND
     68  f81c
     69  f81c				   .spider_control_check_up
     70  f81c		       2a		      rol
     71  f81d		       30 02		      bmi	.spider_control_sprite
     72  f81f
     73  f81f					      REPEAT	#SPIDER_VEL_Y
     74  f81f		       c8		      iny
     73  f81f					      REPEND
     74  f820		       c8		      iny
     75  f821					      REPEND
     76  f821
     77  f821				   .spider_control_sprite
     78  f821							; Control Sprite
     79  f821		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     80  f823
     81  f823				   .spider_control_sprite_x
     82  f823		       e4 a5		      cpx	SpiderPos
     83  f825		       90 04		      bcc	.spider_control_sprite_left
     84  f827		       f0 09		      beq	.spider_control_sprite_y
     85  f829		       b0 05		      bcs	.spider_control_sprite_right
     86  f82b
     87  f82b				   .spider_control_sprite_left
     88  f82b		       09 80		      ora	#%10000000
     89  f82d		       4c 32 f8 	      jmp	.spider_control_sprite_y
     90  f830
     91  f830				   .spider_control_sprite_right
     92  f830		       09 40		      ora	#%01000000
     93  f832
     94  f832				   .spider_control_sprite_y
     95  f832		       c4 a6		      cpy	SpiderPos+1
     96  f834		       90 04		      bcc	.spider_control_sprite_down
     97  f836		       f0 09		      beq	.spider_control_sprite_store
     98  f838		       b0 05		      bcs	.spider_control_sprite_up
     99  f83a
    100  f83a				   .spider_control_sprite_down
    101  f83a		       09 10		      ora	#%00010000
    102  f83c		       4c 41 f8 	      jmp	.spider_control_sprite_store
    103  f83f
    104  f83f				   .spider_control_sprite_up
    105  f83f		       09 20		      ora	#%00100000
    106  f841
    107  f841				   .spider_control_sprite_store
    108  f841		       c9 00		      cmp	#%00000000
    109  f843		       f0 02		      beq	.spider_control_boundary
    110  f845		       85 a7		      sta	SpiderCtrl
    111  f847
    112  f847				   .spider_control_boundary
    113  f847							; Check Playfield Boundaries
    114  f847
    115  f847				   .spider_control_boundary_left
    116  f847		       e0 03		      cpx	#SPIDER_VEL_X+1
    117  f849		       b0 05		      bcs	.spider_control_boundary_right
    118  f84b		       a2 03		      ldx	#SPIDER_VEL_X+1
    119  f84d		       4c 56 f8 	      jmp	.spider_control_boundary_top
    120  f850
    121  f850				   .spider_control_boundary_right
    122  f850		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    123  f852		       90 02		      bcc	.spider_control_boundary_top
    124  f854		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    125  f856
    126  f856				   .spider_control_boundary_top
    127  f856		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    128  f858		       b0 05		      bcs	.spider_control_boundary_bottom
    129  f85a		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    130  f85c		       4c 65 f8 	      jmp	.spider_control_store
    131  f85f
    132  f85f				   .spider_control_boundary_bottom
    133  f85f		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    134  f861		       90 02		      bcc	.spider_control_store
    135  f863		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    136  f865
    137  f865				   .spider_control_store
    138  f865							; Store new position
    139  f865		       86 a5		      stx	SpiderPos
    140  f867		       84 a6		      sty	SpiderPos+1
    141  f869
    142  f869							; TODO: Optimize this somehow?
    143  f869				   .spider_control_sprite_assign
    144  f869							; Skip if no change
    145  f869		       c9 00		      cmp	#%00000000
    146  f86b		       f0 7f		      beq	.spider_control_return
    147  f86d
    148  f86d		       a2 00		      ldx	#%00000000	; For reflection
    149  f86f
    150  f86f				   .spider_control_sprite_assign_left
    151  f86f		       c9 80		      cmp	#%10000000
    152  f871		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f873					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f873				   .POINTER   SET	SpiderPtr
      2  f873				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f873
      4  f873		       a9 a8		      LDA	#<.ADDRESS
      5  f875		       85 a3		      STA	.POINTER
      6  f877		       a9 f1		      LDA	#>.ADDRESS
      7  f879		       85 a4		      STA	.POINTER+1
      8  f87b
    154  f87b		       a2 08		      ldx	#%00001000
    155  f87d		       4c ea f8 	      jmp	.spider_control_reflect
    156  f880
    157  f880				   .spider_control_sprite_assign_right
    158  f880		       c9 40		      cmp	#%01000000
    159  f882		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f884					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f884				   .POINTER   SET	SpiderPtr
      2  f884				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f884
      4  f884		       a9 a8		      LDA	#<.ADDRESS
      5  f886		       85 a3		      STA	.POINTER
      6  f888		       a9 f1		      LDA	#>.ADDRESS
      7  f88a		       85 a4		      STA	.POINTER+1
      8  f88c
    161  f88c		       4c ea f8 	      jmp	.spider_control_reflect
    162  f88f
    163  f88f				   .spider_control_sprite_assign_top
    164  f88f		       c9 20		      cmp	#%00100000
    165  f891		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f893					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f893				   .POINTER   SET	SpiderPtr
      2  f893				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f893
      4  f893		       a9 98		      LDA	#<.ADDRESS
      5  f895		       85 a3		      STA	.POINTER
      6  f897		       a9 f1		      LDA	#>.ADDRESS
      7  f899		       85 a4		      STA	.POINTER+1
      8  f89b
    167  f89b		       4c ea f8 	      jmp	.spider_control_reflect
    168  f89e
    169  f89e				   .spider_control_sprite_assign_bottom
    170  f89e		       c9 10		      cmp	#%00010000
    171  f8a0		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f8a2					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f8a2				   .POINTER   SET	SpiderPtr
      2  f8a2				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f8a2
      4  f8a2		       a9 b8		      LDA	#<.ADDRESS
      5  f8a4		       85 a3		      STA	.POINTER
      6  f8a6		       a9 f1		      LDA	#>.ADDRESS
      7  f8a8		       85 a4		      STA	.POINTER+1
      8  f8aa
    173  f8aa		       4c ea f8 	      jmp	.spider_control_reflect
    174  f8ad
    175  f8ad				   .spider_control_sprite_assign_top_right
    176  f8ad		       c9 60		      cmp	#%01100000
    177  f8af		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f8b1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8b1				   .POINTER   SET	SpiderPtr
      2  f8b1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8b1
      4  f8b1		       a9 a8		      LDA	#<.ADDRESS
      5  f8b3		       85 a3		      STA	.POINTER
      6  f8b5		       a9 f1		      LDA	#>.ADDRESS
      7  f8b7		       85 a4		      STA	.POINTER+1
      8  f8b9
    179  f8b9		       4c ea f8 	      jmp	.spider_control_reflect
    180  f8bc
    181  f8bc				   .spider_control_sprite_assign_bottom_right
    182  f8bc		       c9 50		      cmp	#%01010000
    183  f8be		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f8c0					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8c0				   .POINTER   SET	SpiderPtr
      2  f8c0				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8c0
      4  f8c0		       a9 a8		      LDA	#<.ADDRESS
      5  f8c2		       85 a3		      STA	.POINTER
      6  f8c4		       a9 f1		      LDA	#>.ADDRESS
      7  f8c6		       85 a4		      STA	.POINTER+1
      8  f8c8
    185  f8c8		       4c ea f8 	      jmp	.spider_control_reflect
    186  f8cb
    187  f8cb				   .spider_control_sprite_assign_bottom_left
    188  f8cb		       c9 90		      cmp	#%10010000
    189  f8cd		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f8cf					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8cf				   .POINTER   SET	SpiderPtr
      2  f8cf				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8cf
      4  f8cf		       a9 a8		      LDA	#<.ADDRESS
      5  f8d1		       85 a3		      STA	.POINTER
      6  f8d3		       a9 f1		      LDA	#>.ADDRESS
      7  f8d5		       85 a4		      STA	.POINTER+1
      8  f8d7
    191  f8d7		       a2 08		      ldx	#%00001000
    192  f8d9		       4c ea f8 	      jmp	.spider_control_reflect
    193  f8dc
    194  f8dc				   .spider_control_sprite_assign_top_left
    195  f8dc		       c9 a0		      cmp	#%10100000
    196  f8de		       d0 0a		      bne	.spider_control_reflect
      0  f8e0					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8e0				   .POINTER   SET	SpiderPtr
      2  f8e0				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8e0
      4  f8e0		       a9 a8		      LDA	#<.ADDRESS
      5  f8e2		       85 a3		      STA	.POINTER
      6  f8e4		       a9 f1		      LDA	#>.ADDRESS
      7  f8e6		       85 a4		      STA	.POINTER+1
      8  f8e8
    198  f8e8		       a2 08		      ldx	#%00001000
    199  f8ea
    200  f8ea				   .spider_control_reflect
    201  f8ea		       86 0b		      stx	REFP0
    202  f8ec
    203  f8ec				   .spider_control_return
    204  f8ec		       60		      rts
    205  f8ed
    206  f8ed				   SpiderCollision
    207  f8ed		       a0 56		      ldy	#SPIDER_COLOR
    208  f8ef
    209  f8ef							; Check b/w
    210  f8ef		       ad 82 02 	      lda	SWCHB
    211  f8f2					      REPEAT	4
    212  f8f2		       4a		      lsr
    211  f8f2					      REPEND
    212  f8f3		       4a		      lsr
    211  f8f3					      REPEND
    212  f8f4		       4a		      lsr
    211  f8f4					      REPEND
    212  f8f5		       4a		      lsr
    213  f8f6					      REPEND
    214  f8f6		       b0 02		      bcs	.spider_collision_m0
    215  f8f8
    216  f8f8		       a0 0e		      ldy	#SPIDER_BW_COLOR
    217  f8fa
    218  f8fa				   .spider_collision_m0
    219  f8fa							; Check stun status
    220  f8fa		       a6 b8		      ldx	BugStunned
    221  f8fc		       d0 04		      bne	.spider_collision_m1
    222  f8fe
    223  f8fe							; Collision for M0 (V set)
    224  f8fe		       24 00		      bit	CXM0P
    225  f900		       70 0b		      bvs	.spider_collision_active
    226  f902
    227  f902				   .spider_collision_m1
    228  f902							; Check stun status
    229  f902		       a6 b9		      ldx	BugStunned+1
    230  f904		       d0 14		      bne	.spider_collision_return
    231  f906
    232  f906							; Collision for M1 (N set)
    233  f906		       24 01		      bit	CXM1P
    234  f908		       30 03		      bmi	.spider_collision_active
    235  f90a
    236  f90a		       4c 1a f9 	      jmp	.spider_collision_return
    237  f90d
    238  f90d				   .spider_collision_active
    239  f90d		       a0 44		      ldy	#SPIDER_COL_COLOR
    240  f90f
    241  f90f							; Check b/w
    242  f90f		       ad 82 02 	      lda	SWCHB
    243  f912					      REPEAT	4
    244  f912		       4a		      lsr
    243  f912					      REPEND
    244  f913		       4a		      lsr
    243  f913					      REPEND
    244  f914		       4a		      lsr
    243  f914					      REPEND
    244  f915		       4a		      lsr
    245  f916					      REPEND
    246  f916		       b0 02		      bcs	.spider_collision_return
    247  f918
    248  f918		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    249  f91a
    250  f91a				   .spider_collision_return
    251  f91a		       84 a8		      sty	SpiderColor
    252  f91c		       60		      rts
    253  f91d
    254  f91d				   SpiderPosition
    255  f91d
    256  f91d							; Set Position
    257  f91d		       a2 00		      ldx	#0	; Object (player0)
    258  f91f		       a5 a5		      lda	SpiderPos	; X Position
    259  f921		       20 00 f0 	      jsr	PosObject
    260  f924
    261  f924		       60		      rts
    262  f925
    263  f925							; Scanline Draw
    264  f925
    265  f925				   SpiderDrawStart
    266  f925
    267  f925							; Set player 0 to be quad size
    268  f925		       a5 81		      lda	NuSiz0
    269  f927		       29 f8		      and	#%11111000
    270  f929		       09 05		      ora	#%00000101
    271  f92b		       85 81		      sta	NuSiz0
    272  f92d		       85 04		      sta	NUSIZ0
    273  f92f
    274  f92f							; Set sprite color
    275  f92f		       a5 a8		      lda	SpiderColor
    276  f931		       85 06		      sta	COLUP0
    277  f933
    278  f933							; Determine if we need to use vertical delay (odd line)
    279  f933		       a5 a6		      lda	SpiderPos+1	; Y Position
    280  f935		       4a		      lsr
    281  f936		       b0 05		      bcs	.spider_draw_start_nodelay
    282  f938
    283  f938		       a0 01		      ldy	#1
    284  f93a		       4c 3f f9 	      jmp	.spider_draw_start_set_delay
    285  f93d
    286  f93d				   .spider_draw_start_nodelay
    287  f93d		       a0 00		      ldy	#0
    288  f93f
    289  f93f				   .spider_draw_start_set_delay
    290  f93f		       84 25		      sty	VDELP0
    291  f941
    292  f941				   .spider_draw_start_pos
    293  f941							; Calculate starting position
    294  f941		       18		      clc
    295  f942		       69 10		      adc	#SPIDER_SIZE
    296  f944		       85 aa		      sta	SpiderDrawPos
    297  f946
    298  f946							; Initialize sprite index and line buffer
    299  f946		       a9 00		      lda	#0
    300  f948		       85 a9		      sta	SpiderIndex
    301  f94a		       85 ab		      sta	SpiderLine
    302  f94c
    303  f94c		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f94d					      include	"objects/line.asm"
      1  f94d							;================
      2  f94d							; Line (ball)
      3  f94d							;================
      4  f94d
      5  f94d							; Constants
      6  f94d
      7  f94d		       00 08	   LINE_SIZE  =	8
      8  f94d		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f94d		       00 04	   LINE_VEL_X =	4
     10  f94d		       00 04	   LINE_VEL_Y =	4
     11  f94d
     12  f94d		       00 08	   LINE_AUDIO_C =	8
     13  f94d		       00 01	   LINE_AUDIO_F =	1
     14  f94d		       00 04	   LINE_AUDIO_V =	4
     15  f94d
     16  f94d		       00 08	   LINE_SAMPLE_LEN =	8
     17  f94d		       00 03	   LINE_SAMPLE_C =	3
     18  f94d		       00 01	   LINE_SAMPLE_F =	1
     19  f94d		       00 04	   LINE_SAMPLE_V =	4
     20  f94d
     21  f94d							; Initialization
     22  f94d
     23  f94d				   LineInit
     24  f94d
     25  f94d							; Initial Line Control
     26  f94d		       a9 00		      lda	#0
     27  f94f		       85 ae		      sta	LineEnabled
     28  f951		       85 af		      sta	LinePos+0
     29  f953		       85 b0		      sta	LinePos+1
     30  f955		       85 b1		      sta	LineVelocity+0
     31  f957		       85 b2		      sta	LineVelocity+1
     32  f959		       85 b3		      sta	LineStartPos+0
     33  f95b		       85 b4		      sta	LineStartPos+1
     34  f95d		       85 b5		      sta	LineDrawPos+0
     35  f95f		       85 b6		      sta	LineDrawPos+1
     36  f961
     37  f961		       60		      rts
     38  f962
     39  f962							; Frame Update
     40  f962
     41  f962				   LineUpdate
     42  f962		       20 6c f9 	      jsr	LineControl
     43  f965		       20 22 fa 	      jsr	LineObject
     44  f968		       20 69 fa 	      jsr	LineCollision
     45  f96b		       60		      rts
     46  f96c
     47  f96c				   LineControl
     48  f96c
     49  f96c							; Check if Fire Button on controller 1 is pressed
     50  f96c		       a5 0c		      lda	INPT4
     51  f96e		       30 08		      bmi	.line_control_skip
     52  f970
     53  f970		       24 ae		      bit	LineEnabled
     54  f972		       30 04		      bmi	.line_control_skip
     55  f974
     56  f974		       a5 a7		      lda	SpiderCtrl
     57  f976		       d0 03		      bne	.line_control_fire
     58  f978
     59  f978				   .line_control_skip
     60  f978		       4c 21 fa 	      jmp	.line_control_return
     61  f97b
     62  f97b				   .line_control_fire
     63  f97b		       20 ac fa 	      jsr	LineEnable
     64  f97e
     65  f97e				   .line_control_x
     66  f97e		       a5 a7		      lda	SpiderCtrl
     67  f980		       29 c0		      and	#%11000000
     68  f982		       f0 0e		      beq	.line_control_x_none
     69  f984				   .line_control_x_left
     70  f984		       c9 80		      cmp	#%10000000
     71  f986		       d0 05		      bne	.line_control_x_right
     72  f988
     73  f988		       a9 fc		      lda	#-LINE_VEL_X
     74  f98a		       4c 94 f9 	      jmp	.line_control_x_store
     75  f98d				   .line_control_x_right
     76  f98d		       a9 04		      lda	#LINE_VEL_X
     77  f98f		       4c 94 f9 	      jmp	.line_control_x_store
     78  f992				   .line_control_x_none
     79  f992		       a9 00		      lda	#0
     80  f994				   .line_control_x_store
     81  f994		       85 b1		      sta	LineVelocity
     82  f996
     83  f996				   .line_control_y
     84  f996		       a5 a7		      lda	SpiderCtrl
     85  f998		       29 30		      and	#%00110000
     86  f99a		       f0 0e		      beq	.line_control_y_none
     87  f99c				   .line_control_y_up
     88  f99c		       c9 20		      cmp	#%00100000
     89  f99e		       d0 05		      bne	.line_control_y_down
     90  f9a0
     91  f9a0		       a9 04		      lda	#LINE_VEL_Y
     92  f9a2		       4c ac f9 	      jmp	.line_control_y_store
     93  f9a5				   .line_control_y_down
     94  f9a5		       a9 fc		      lda	#-LINE_VEL_Y
     95  f9a7		       4c ac f9 	      jmp	.line_control_y_store
     96  f9aa				   .line_control_y_none
     97  f9aa		       a9 00		      lda	#0
     98  f9ac				   .line_control_y_store
     99  f9ac		       85 b2		      sta	LineVelocity+1
    100  f9ae
    101  f9ae				   .line_control_position
    102  f9ae
    103  f9ae		       a2 00		      ldx	#0	; offsetX
    104  f9b0		       a0 00		      ldy	#0	; offsetY
    105  f9b2
    106  f9b2		       a5 a7		      lda	SpiderCtrl
    107  f9b4		       29 f0		      and	#%11110000
    108  f9b6
    109  f9b6				   .line_control_position_left
    110  f9b6		       c9 80		      cmp	#%10000000
    111  f9b8		       d0 07		      bne	.line_control_position_right
    112  f9ba
    113  f9ba		       a2 00		      ldx	#0
    114  f9bc		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    115  f9be		       4c 09 fa 	      jmp	.line_control_position_store
    116  f9c1
    117  f9c1				   .line_control_position_right
    118  f9c1		       c9 40		      cmp	#%01000000
    119  f9c3		       d0 07		      bne	.line_control_position_top
    120  f9c5
    121  f9c5		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    122  f9c7		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    123  f9c9		       4c 09 fa 	      jmp	.line_control_position_store
    124  f9cc
    125  f9cc				   .line_control_position_top
    126  f9cc		       c9 20		      cmp	#%00100000
    127  f9ce		       d0 07		      bne	.line_control_position_bottom
    128  f9d0
    129  f9d0		       a2 08		      ldx	#SPIDER_SIZE/2
    130  f9d2		       a0 10		      ldy	#SPIDER_SIZE
    131  f9d4		       4c 09 fa 	      jmp	.line_control_position_store
    132  f9d7
    133  f9d7				   .line_control_position_bottom
    134  f9d7		       c9 10		      cmp	#%00010000
    135  f9d9		       d0 05		      bne	.line_control_position_top_right
    136  f9db
    137  f9db		       a2 08		      ldx	#SPIDER_SIZE/2
    138  f9dd		       4c 09 fa 	      jmp	.line_control_position_store
    139  f9e0
    140  f9e0				   .line_control_position_top_right
    141  f9e0		       c9 60		      cmp	#%01100000
    142  f9e2		       d0 07		      bne	.line_control_position_bottom_right
    143  f9e4
    144  f9e4		       a2 10		      ldx	#SPIDER_SIZE
    145  f9e6		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    146  f9e8		       4c 09 fa 	      jmp	.line_control_position_store
    147  f9eb
    148  f9eb				   .line_control_position_bottom_right
    149  f9eb		       c9 50		      cmp	#%01010000
    150  f9ed		       d0 07		      bne	.line_control_position_bottom_left
    151  f9ef
    152  f9ef		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    153  f9f1		       a0 00		      ldy	#0
    154  f9f3		       4c 09 fa 	      jmp	.line_control_position_store
    155  f9f6
    156  f9f6				   .line_control_position_bottom_left
    157  f9f6		       c9 90		      cmp	#%10010000
    158  f9f8		       d0 07		      bne	.line_control_position_top_left
    159  f9fa
    160  f9fa							; No Offset
    161  f9fa		       a2 04		      ldx	#LINE_SIZE/2
    162  f9fc		       a0 04		      ldy	#LINE_SIZE/2
    163  f9fe		       4c 09 fa 	      jmp	.line_control_position_store
    164  fa01
    165  fa01				   .line_control_position_top_left
    166  fa01		       c9 a0		      cmp	#%10100000
    167  fa03		       d0 04		      bne	.line_control_position_store
    168  fa05
    169  fa05		       a2 00		      ldx	#0
    170  fa07		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    171  fa09
    172  fa09				   .line_control_position_store
    173  fa09
    174  fa09							; Apply offsetX to playerX
    175  fa09		       a5 a5		      lda	SpiderPos
    176  fa0b		       86 83		      stx	Temp
    177  fa0d		       18		      clc
    178  fa0e		       65 83		      adc	Temp
    179  fa10		       aa		      tax
    180  fa11
    181  fa11							; Apply offsetY to playerY
    182  fa11		       a5 a6		      lda	SpiderPos+1
    183  fa13		       84 83		      sty	Temp
    184  fa15		       18		      clc
    185  fa16		       65 83		      adc	Temp
    186  fa18		       a8		      tay
    187  fa19
    188  fa19		       86 af		      stx	LinePos
    189  fa1b		       84 b0		      sty	LinePos+1
    190  fa1d		       86 b3		      stx	LineStartPos
    191  fa1f		       84 b4		      sty	LineStartPos+1
    192  fa21
    193  fa21				   .line_control_return
    194  fa21		       60		      rts
    195  fa22
    196  fa22				   LineObject
    197  fa22
    198  fa22							; Check if line is enabled
    199  fa22		       24 ae		      bit	LineEnabled
    200  fa24		       10 42		      bpl	.line_object_return
    201  fa26
    202  fa26							; Load position
    203  fa26		       a6 af		      ldx	LinePos
    204  fa28		       a4 b0		      ldy	LinePos+1
    205  fa2a
    206  fa2a				   .line_object_distance
    207  fa2a
    208  fa2a							; Check distance from player with absolute value differences
    209  fa2a
    210  fa2a				   .line_object_distance_x
    211  fa2a		       8a		      txa
    212  fa2b		       18		      clc
    213  fa2c		       e5 b3		      sbc	LineStartPos
    214  fa2e		       b0 04		      bcs	.line_object_distance_x_check
    215  fa30		       49 ff		      eor	#$FF	; C flag is clear here
    216  fa32		       69 01		      adc	#$01	; form two's complement
    217  fa34				   .line_object_distance_x_check		; Jumps to if positive
    218  fa34		       c9 40		      cmp	#LINE_DISTANCE
    219  fa36		       b0 2d		      bcs	.line_object_disable
    220  fa38
    221  fa38				   .line_object_distance_y
    222  fa38		       98		      tya
    223  fa39		       18		      clc
    224  fa3a		       e5 b4		      sbc	LineStartPos+1
    225  fa3c		       b0 04		      bcs	.line_object_distance_y_check
    226  fa3e		       49 ff		      eor	#$FF	; C flag is clear here
    227  fa40		       69 01		      adc	#$01	; form two's complement
    228  fa42				   .line_object_distance_y_check		; Jumps to if positive
    229  fa42		       c9 40		      cmp	#LINE_DISTANCE
    230  fa44		       b0 1f		      bcs	.line_object_disable
    231  fa46
    232  fa46				   .line_object_boundary
    233  fa46				   .line_object_boundary_left
    234  fa46		       e0 04		      cpx	#LINE_VEL_X
    235  fa48		       90 1b		      bcc	.line_object_disable
    236  fa4a				   .line_object_boundary_right
    237  fa4a		       e0 9c		      cpx	#160-LINE_VEL_X
    238  fa4c		       b0 17		      bcs	.line_object_disable
    239  fa4e				   .line_object_boundary_bottom
    240  fa4e		       c0 04		      cpy	#LINE_VEL_Y
    241  fa50		       90 13		      bcc	.line_object_disable
    242  fa52				   .line_object_boundary_top
    243  fa52		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    244  fa54		       b0 0f		      bcs	.line_object_disable
    245  fa56
    246  fa56				   .line_object_velocity
    247  fa56
    248  fa56							; Apply Velocity
    249  fa56		       8a		      txa
    250  fa57		       18		      clc
    251  fa58		       65 b1		      adc	LineVelocity
    252  fa5a		       85 af		      sta	LinePos
    253  fa5c
    254  fa5c		       98		      tya
    255  fa5d		       18		      clc
    256  fa5e		       65 b2		      adc	LineVelocity+1
    257  fa60		       85 b0		      sta	LinePos+1
    258  fa62
    259  fa62		       4c 68 fa 	      jmp	.line_object_return
    260  fa65
    261  fa65				   .line_object_disable
    262  fa65		       20 b8 fa 	      jsr	LineDisable
    263  fa68
    264  fa68				   .line_object_return
    265  fa68		       60		      rts
    266  fa69
    267  fa69				   LineCollision
    268  fa69
    269  fa69		       a9 78		      lda	#BUG_STUN_LENGTH
    270  fa6b
    271  fa6b				   .line_collision_m0
    272  fa6b		       24 04		      bit	CXM0FB
    273  fa6d		       50 08		      bvc	.line_collision_m1
    274  fa6f
    275  fa6f							; Set stun timer
    276  fa6f		       85 b8		      sta	BugStunned+0
    277  fa71
    278  fa71							; Disable line
    279  fa71		       20 b8 fa 	      jsr	LineDisable
    280  fa74		       4c 80 fa 	      jmp	.line_collision_sample
    281  fa77
    282  fa77				   .line_collision_m1
    283  fa77		       24 05		      bit	CXM1FB
    284  fa79		       50 08		      bvc	.line_collision_return
    285  fa7b
    286  fa7b							; Set stun timer
    287  fa7b		       85 b9		      sta	BugStunned+1
    288  fa7d
    289  fa7d							; Disable line
    290  fa7d		       20 b8 fa 	      jsr	LineDisable
    291  fa80
    292  fa80				   .line_collision_sample
    293  fa80		       20 da fa 	      jsr	LineSample
    294  fa83
    295  fa83				   .line_collision_return
    296  fa83		       60		      rts
    297  fa84
    298  fa84				   LinePosition
    299  fa84
    300  fa84							; Set Line Position
    301  fa84		       a2 04		      ldx	#4	; Object (ball)
    302  fa86		       a5 af		      lda	LinePos	; X Position
    303  fa88		       20 00 f0 	      jsr	PosObject
    304  fa8b
    305  fa8b		       60		      rts
    306  fa8c
    307  fa8c							; Scanline Draw
    308  fa8c
    309  fa8c				   LineDrawStart
    310  fa8c
    311  fa8c							; Set ball size to be 4 clocks (4/5 bits)
    312  fa8c		       a5 80		      lda	CtrlPf
    313  fa8e		       29 cf		      and	#%11001111
    314  fa90		       09 20		      ora	#%00100000
    315  fa92		       85 80		      sta	CtrlPf
    316  fa94		       85 0a		      sta	CTRLPF
    317  fa96
    318  fa96							; Determine if we need to use vertical delay (oven line)
    319  fa96		       a5 b0		      lda	LinePos+1
    320  fa98		       4a		      lsr
    321  fa99		       90 05		      bcc	.line_draw_start_nodelay
    322  fa9b
    323  fa9b		       a0 01		      ldy	#1
    324  fa9d		       4c a2 fa 	      jmp	.line_draw_start_set_delay
    325  faa0
    326  faa0				   .line_draw_start_nodelay
    327  faa0		       a0 00		      ldy	#0
    328  faa2
    329  faa2				   .line_draw_start_set_delay
    330  faa2		       84 27		      sty	VDELBL
    331  faa4
    332  faa4				   .line_draw_start_pos
    333  faa4							; Calculate starting position
    334  faa4		       18		      clc
    335  faa5		       85 b5		      sta	LineDrawPos+0
    336  faa7		       69 04		      adc	#LINE_SIZE/2
    337  faa9		       85 b6		      sta	LineDrawPos+1
    338  faab
    339  faab		       60		      rts
    340  faac
    341  faac				   LineEnable
    342  faac		       a9 80		      lda	#%10000000
    343  faae		       85 ae		      sta	LineEnabled
    344  fab0
    345  fab0		       a5 93		      lda	SampleStep
    346  fab2		       d0 03		      bne	.line_enable_return
    347  fab4
    348  fab4		       20 c4 fa 	      jsr	LineAudioPlay
    349  fab7
    350  fab7				   .line_enable_return
    351  fab7		       60		      rts
    352  fab8
    353  fab8				   LineDisable
    354  fab8		       a9 00		      lda	#0
    355  faba		       85 ae		      sta	LineEnabled
    356  fabc
    357  fabc		       a5 93		      lda	SampleStep
    358  fabe		       d0 03		      bne	.line_disable_return
    359  fac0
    360  fac0		       20 d1 fa 	      jsr	LineAudioMute
    361  fac3
    362  fac3				   .line_disable_return
    363  fac3		       60		      rts
    364  fac4
    365  fac4				   LineAudioPlay
    366  fac4		       a9 08		      lda	#LINE_AUDIO_C
    367  fac6		       85 16		      sta	AUDC1
    368  fac8		       a9 01		      lda	#LINE_AUDIO_F
    369  faca		       85 18		      sta	AUDF1
    370  facc		       a9 04		      lda	#LINE_AUDIO_V
    371  face		       85 1a		      sta	AUDV1
    372  fad0		       60		      rts
    373  fad1
    374  fad1				   LineAudioMute
    375  fad1		       a9 00		      lda	#0
    376  fad3		       85 1a		      sta	AUDV1
    377  fad5		       85 18		      sta	AUDF1
    378  fad7		       85 16		      sta	AUDC1
    379  fad9		       60		      rts
    380  fada
    381  fada				   LineSample
    382  fada		       a9 08		      lda	#LINE_SAMPLE_LEN
    383  fadc		       85 93		      sta	SampleStep
    384  fade		       a9 03		      lda	#LINE_SAMPLE_C
    385  fae0		       85 16		      sta	AUDC1
    386  fae2		       a9 01		      lda	#LINE_SAMPLE_F
    387  fae4		       85 18		      sta	AUDF1
    388  fae6		       a9 04		      lda	#LINE_SAMPLE_V
    389  fae8		       85 1a		      sta	AUDV1
    390  faea		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  faeb					      include	"objects/bug.asm"
      1  faeb							;======================
      2  faeb							; Bugs (missiles 0 & 1)
      3  faeb							;======================
      4  faeb
      5  faeb							; Constants
      6  faeb
      7  faeb		       00 08	   BUG_SIZE   =	8
      8  faeb		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  faeb		       00 78	   BUG_STUN_LENGTH =	120
     10  faeb		       00 04	   BUG_POINTS =	4
     11  faeb
     12  faeb		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  faeb		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  faeb		       00 38	   BUG_STUN_COLOR =	#$38
     15  faeb		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  faeb
     17  faeb		       00 1e	   BUG_SAMPLE_LEN =	30
     18  faeb		       00 03	   BUG_SAMPLE_C =	3
     19  faeb		       00 14	   BUG_SAMPLE_F =	20
     20  faeb		       00 04	   BUG_SAMPLE_V =	4
     21  faeb
     22  faeb		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  faeb		       00 08	   BUG_COL_SAMPLE_C =	8
     24  faeb		       00 08	   BUG_COL_SAMPLE_F =	8
     25  faeb		       00 03	   BUG_COL_SAMPLE_V =	3
     26  faeb
     27  faeb							; Initialization
     28  faeb
     29  faeb				   BugInit
     30  faeb
     31  faeb							; Initialize Bugs
     32  faeb		       a2 01		      ldx	#1
     33  faed
     34  faed				   .bug_init_loop
     35  faed		       20 f4 fa 	      jsr	BugReset
     36  faf0
     37  faf0		       ca		      dex
     38  faf1		       10 fa		      bpl	.bug_init_loop
     39  faf3
     40  faf3		       60		      rts
     41  faf4
     42  faf4				   BugReset		; x = bug (0 or 1)
     43  faf4
     44  faf4							; Set random position
     45  faf4		       20 13 f0 	      jsr	Random
     46  faf7
     47  faf7		       a5 86		      lda	Rand8
     48  faf9		       29 7f		      and	#$7f
     49  fafb		       95 ba		      sta	BugPosX,x
     50  fafd
     51  fafd		       a5 87		      lda	Rand16
     52  faff		       29 7f		      and	#$7f
     53  fb01		       95 bc		      sta	BugPosY,x
     54  fb03
     55  fb03							; Set as active
     56  fb03		       a9 00		      lda	#0
     57  fb05		       95 b8		      sta	BugStunned,x
     58  fb07
     59  fb07		       60		      rts
     60  fb08
     61  fb08							; Frame Update
     62  fb08
     63  fb08				   BugUpdate
     64  fb08
     65  fb08		       a2 01		      ldx	#1
     66  fb0a				   .bug_update_loop
     67  fb0a		       86 83		      stx	Temp+0
     68  fb0c
     69  fb0c		       b5 b8		      lda	BugStunned,x
     70  fb0e		       f0 08		      beq	.bug_update_active
     71  fb10
     72  fb10				   .bug_update_stunned
     73  fb10		       d6 b8		      dec	BugStunned,x
     74  fb12		       20 9b fb 	      jsr	BugStunCollision
     75  fb15		       4c 1e fb 	      jmp	.bug_update_next
     76  fb18
     77  fb18				   .bug_update_active
     78  fb18		       20 24 fb 	      jsr	BugMovement
     79  fb1b		       20 83 fb 	      jsr	BugCollision
     80  fb1e
     81  fb1e				   .bug_update_next
     82  fb1e		       a6 83		      ldx	Temp+0
     83  fb20		       ca		      dex
     84  fb21		       10 e7		      bpl	.bug_update_loop
     85  fb23
     86  fb23		       60		      rts
     87  fb24
     88  fb24				   BugMovement
     89  fb24
     90  fb24				   .bug_movement_random
     91  fb24		       20 13 f0 	      jsr	Random
     92  fb27		       29 03		      and	#%00000011
     93  fb29		       85 84		      sta	Temp+1
     94  fb2b
     95  fb2b				   .bug_movement_load
     96  fb2b		       a6 83		      ldx	Temp+0
     97  fb2d
     98  fb2d				   .bug_movement_x
     99  fb2d		       a4 b7		      ldy	BugSpeed
    100  fb2f
    101  fb2f							; Alter X Position
    102  fb2f		       a5 84		      lda	Temp+1
    103  fb31		       29 01		      and	#%00000001
    104  fb33
    105  fb33				   .bug_movement_x_check
    106  fb33		       c9 01		      cmp	#1
    107  fb35		       d0 08		      bne	.bug_movement_x_right
    108  fb37
    109  fb37				   .bug_movement_x_left
    110  fb37		       d6 ba		      dec	BugPosX,x
    111  fb39		       88		      dey
    112  fb3a		       d0 fb		      bne	.bug_movement_x_left
    113  fb3c
    114  fb3c		       4c 44 fb 	      jmp	.bug_movement_y
    115  fb3f
    116  fb3f				   .bug_movement_x_right
    117  fb3f		       f6 ba		      inc	BugPosX,x
    118  fb41		       88		      dey
    119  fb42		       d0 fb		      bne	.bug_movement_x_right
    120  fb44
    121  fb44				   .bug_movement_y
    122  fb44		       a4 b7		      ldy	BugSpeed
    123  fb46
    124  fb46							; Alter Y Position
    125  fb46		       a5 84		      lda	Temp+1
    126  fb48		       29 02		      and	#%00000010
    127  fb4a		       4a		      lsr
    128  fb4b
    129  fb4b				   .bug_movement_y_check
    130  fb4b		       c9 01		      cmp	#1
    131  fb4d		       d0 08		      bne	.bug_movement_y_down
    132  fb4f
    133  fb4f				   .bug_movement_y_up
    134  fb4f		       f6 bc		      inc	BugPosY,x
    135  fb51		       88		      dey
    136  fb52		       d0 fb		      bne	.bug_movement_y_up
    137  fb54
    138  fb54		       4c 5c fb 	      jmp	.bug_movement_boundary
    139  fb57
    140  fb57				   .bug_movement_y_down
    141  fb57		       d6 bc		      dec	BugPosY,x
    142  fb59		       88		      dey
    143  fb5a		       d0 fb		      bne	.bug_movement_y_down
    144  fb5c
    145  fb5c				   .bug_movement_boundary
    146  fb5c		       b5 ba		      lda	BugPosX,x
    147  fb5e		       b4 bc		      ldy	BugPosY,x
    148  fb60
    149  fb60				   .bug_movement_boundary_left
    150  fb60		       c9 18		      cmp	#BUG_BOUNDARY
    151  fb62		       b0 05		      bcs	.bug_movement_boundary_right
    152  fb64		       a9 18		      lda	#BUG_BOUNDARY
    153  fb66		       4c 6f fb 	      jmp	.bug_movement_boundary_top
    154  fb69
    155  fb69				   .bug_movement_boundary_right
    156  fb69		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    157  fb6b		       90 02		      bcc	.bug_movement_boundary_top
    158  fb6d		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    159  fb6f
    160  fb6f				   .bug_movement_boundary_top
    161  fb6f		       c0 18		      cpy	#BUG_BOUNDARY
    162  fb71		       b0 05		      bcs	.bug_movement_boundary_bottom
    163  fb73		       a0 18		      ldy	#BUG_BOUNDARY
    164  fb75		       4c 7e fb 	      jmp	.bug_movement_store
    165  fb78
    166  fb78				   .bug_movement_boundary_bottom
    167  fb78		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    168  fb7a		       90 02		      bcc	.bug_movement_store
    169  fb7c		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    170  fb7e
    171  fb7e				   .bug_movement_store
    172  fb7e		       95 ba		      sta	BugPosX,x
    173  fb80		       94 bc		      sty	BugPosY,x
    174  fb82
    175  fb82				   .bug_movement_return
    176  fb82		       60		      rts
    177  fb83
    178  fb83				   BugCollision
    179  fb83
    180  fb83		       e0 01		      cpx	#1
    181  fb85		       f0 05		      beq	.bug_collision_m1
    182  fb87
    183  fb87				   .bug_collision_m0
    184  fb87							; Collision for M0 (V set)
    185  fb87		       24 00		      bit	CXM0P
    186  fb89		       70 06		      bvs	.bug_collision_active
    187  fb8b		       60		      rts
    188  fb8c
    189  fb8c				   .bug_collision_m1
    190  fb8c							; Collision for M1 (N set)
    191  fb8c		       24 01		      bit	CXM1P
    192  fb8e		       30 01		      bmi	.bug_collision_active
    193  fb90		       60		      rts
    194  fb91
    195  fb91				   .bug_collision_active
    196  fb91
    197  fb91							; Reduce players score
    198  fb91		       a5 94		      lda	ScoreValue
    199  fb93		       f0 02		      beq	.bug_collision_score_skip
    200  fb95		       c6 94		      dec	ScoreValue
    201  fb97				   .bug_collision_score_skip
    202  fb97
    203  fb97							; Play sound
    204  fb97		       20 f4 fb 	      jsr	BugColSample
    205  fb9a
    206  fb9a		       60		      rts
    207  fb9b
    208  fb9b				   BugStunCollision
    209  fb9b
    210  fb9b		       e0 01		      cpx	#1
    211  fb9d		       f0 05		      beq	.bug_stun_collision_m1
    212  fb9f
    213  fb9f				   .bug_stun_collision_m0
    214  fb9f							; Collision for M0 (V set)
    215  fb9f		       24 00		      bit	CXM0P
    216  fba1		       70 06		      bvs	.bug_stun_collision_active
    217  fba3		       60		      rts
    218  fba4
    219  fba4				   .bug_stun_collision_m1
    220  fba4							; Collision for M1 (N set)
    221  fba4		       24 01		      bit	CXM1P
    222  fba6		       30 01		      bmi	.bug_stun_collision_active
    223  fba8		       60		      rts
    224  fba9
    225  fba9				   .bug_stun_collision_active
    226  fba9							; Add points to score
    227  fba9		       18		      clc
    228  fbaa		       a5 95		      lda	ScoreValue+1
    229  fbac		       69 04		      adc	#BUG_POINTS
    230  fbae		       85 95		      sta	ScoreValue+1
    231  fbb0
    232  fbb0							; Reset bug
    233  fbb0		       20 f4 fa 	      jsr	BugReset
    234  fbb3
    235  fbb3							; Play sample
    236  fbb3		       20 e3 fb 	      jsr	BugSample
    237  fbb6
    238  fbb6		       60		      rts
    239  fbb7
    240  fbb7							; Horizontal Positioning
    241  fbb7
    242  fbb7				   BugPosition
    243  fbb7
    244  fbb7		       a2 02		      ldx	#2
    245  fbb9		       a5 ba		      lda	BugPosX+0
    246  fbbb		       20 00 f0 	      jsr	PosObject
    247  fbbe
    248  fbbe		       a2 03		      ldx	#3
    249  fbc0		       a5 bb		      lda	BugPosX+1
    250  fbc2		       20 00 f0 	      jsr	PosObject
    251  fbc5
    252  fbc5		       60		      rts
    253  fbc6
    254  fbc6							; Scanline Draw
    255  fbc6
    256  fbc6				   BugDrawStart
    257  fbc6
    258  fbc6		       a0 01		      ldy	#1
    259  fbc8				   .bug_draw_start_loop
    260  fbc8
    261  fbc8							; Set missile 0 & 1 to be 8 clock size
    262  fbc8		       b9 81 00 	      lda	NuSiz0,y
    263  fbcb		       09 30		      ora	#%00110000
    264  fbcd		       99 81 00 	      sta	NuSiz0,y
    265  fbd0		       99 04 00 	      sta	NUSIZ0,y
    266  fbd3
    267  fbd3							; Setup half scanline positions
    268  fbd3		       b9 bc 00 	      lda	BugPosY,y
    269  fbd6		       4a		      lsr
    270  fbd7		       99 be 00 	      sta	BugDrawPosBottom,y
    271  fbda
    272  fbda		       69 04		      adc	#BUG_SIZE/2
    273  fbdc		       99 c0 00 	      sta	BugDrawPosTop,y
    274  fbdf
    275  fbdf		       88		      dey
    276  fbe0		       10 e6		      bpl	.bug_draw_start_loop
    277  fbe2
    278  fbe2		       60		      rts
    279  fbe3
    280  fbe3				   BugSample
    281  fbe3		       a9 1e		      lda	#BUG_SAMPLE_LEN
    282  fbe5		       85 93		      sta	SampleStep
    283  fbe7		       a9 03		      lda	#BUG_SAMPLE_C
    284  fbe9		       85 16		      sta	AUDC1
    285  fbeb		       a9 14		      lda	#BUG_SAMPLE_F
    286  fbed		       85 18		      sta	AUDF1
    287  fbef		       a9 04		      lda	#BUG_SAMPLE_V
    288  fbf1		       85 1a		      sta	AUDV1
    289  fbf3		       60		      rts
    290  fbf4
    291  fbf4				   BugColSample
    292  fbf4		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    293  fbf6		       85 93		      sta	SampleStep
    294  fbf8		       a9 08		      lda	#BUG_COL_SAMPLE_C
    295  fbfa		       85 16		      sta	AUDC1
    296  fbfc		       a9 08		      lda	#BUG_COL_SAMPLE_F
    297  fbfe		       85 18		      sta	AUDF1
    298  fc00		       a9 03		      lda	#BUG_COL_SAMPLE_V
    299  fc02		       85 1a		      sta	AUDV1
    300  fc04		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fc05					      include	"objects/swatter.asm"
      1  fc05							;==================
      2  fc05							; Swatter (player1)
      3  fc05							;==================
      4  fc05
      5  fc05							; Constants
      6  fc05
      7  fc05		       00 30	   SWATTER_COLOR =	#$30
      8  fc05		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fc05		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fc05		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fc05
     12  fc05		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fc05		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fc05
     15  fc05		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fc05		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fc05
     18  fc05		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fc05		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fc05		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fc05
     22  fc05		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fc05		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fc05		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fc05		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fc05		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fc05
     28  fc05		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fc05		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fc05		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fc05		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fc05
     33  fc05		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fc05		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fc05		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fc05		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fc05
     38  fc05							; Initialization
     39  fc05
     40  fc05				   SwatterInit
     41  fc05
     42  fc05		       20 dc fc 	      jsr	SwatterReset
     43  fc08
     44  fc08		       60		      rts
     45  fc09
     46  fc09							; Frame Update
     47  fc09
     48  fc09				   SwatterUpdate
     49  fc09
     50  fc09							; Check b/w
     51  fc09		       ad 82 02 	      lda	SWCHB
     52  fc0c					      REPEAT	4
     53  fc0c		       4a		      lsr
     52  fc0c					      REPEND
     53  fc0d		       4a		      lsr
     52  fc0d					      REPEND
     53  fc0e		       4a		      lsr
     52  fc0e					      REPEND
     53  fc0f		       4a		      lsr
     54  fc10					      REPEND
     55  fc10		       90 10		      bcc	.swatter_update_bw
     56  fc12
     57  fc12				   .swatter_update_color
     58  fc12		       a5 c4		      lda	SwatterState
     59  fc14		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     60  fc16		       d0 05		      bne	.swatter_update_color_hold
     61  fc18				   .swatter_update_color_active
     62  fc18		       a9 30		      lda	#SWATTER_COLOR
     63  fc1a		       4c 2f fc 	      jmp	.swatter_update_color_set
     64  fc1d				   .swatter_update_color_hold
     65  fc1d		       a9 36		      lda	#SWATTER_HOLD_COLOR
     66  fc1f		       4c 2f fc 	      jmp	.swatter_update_color_set
     67  fc22
     68  fc22				   .swatter_update_bw
     69  fc22		       a5 c4		      lda	SwatterState
     70  fc24		       c9 80		      cmp	#SWATTER_STATE_HOLD
     71  fc26		       d0 05		      bne	.swatter_update_bw_active
     72  fc28				   .swatter_update_bw_hold
     73  fc28		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     74  fc2a		       4c 2f fc 	      jmp	.swatter_update_color_set
     75  fc2d				   .swatter_update_bw_active
     76  fc2d		       a9 0e		      lda	#SWATTER_BW_COLOR
     77  fc2f
     78  fc2f				   .swatter_update_color_set
     79  fc2f		       85 c5		      sta	SwatterColor
     80  fc31
     81  fc31				   .swatter_update_hold_sample
     82  fc31		       a4 c4		      ldy	SwatterState
     83  fc33		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fc35		       d0 0f		      bne	.swatter_update_state
     85  fc37
     86  fc37		       c6 cb		      dec	SwatterSampleCount
     87  fc39		       d0 0b		      bne	.swatter_update_state
     88  fc3b
     89  fc3b		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     90  fc3d		       85 cb		      sta	SwatterSampleCount
     91  fc3f
     92  fc3f		       c6 cc		      dec	SwatterSampleF
     93  fc41		       a4 cc		      ldy	SwatterSampleF
     94  fc43		       20 fc fc 	      jsr	SwatterHoldSample
     95  fc46
     96  fc46				   .swatter_update_state
     97  fc46		       a6 90		      ldx	FrameTimer+1
     98  fc48		       d0 2d		      bne	.swatter_update_collision
     99  fc4a
    100  fc4a		       a4 c4		      ldy	SwatterState
    101  fc4c		       c0 00		      cpy	#SWATTER_STATE_WAIT
    102  fc4e		       f0 0a		      beq	.swatter_update_state_wait
    103  fc50
    104  fc50		       c0 80		      cpy	#SWATTER_STATE_HOLD
    105  fc52		       f0 18		      beq	.swatter_update_state_hold
    106  fc54
    107  fc54							; Else we're at the end of the active state
    108  fc54		       20 dc fc 	      jsr	SwatterReset
    109  fc57		       4c 86 fc 	      jmp	.swatter_update_return
    110  fc5a
    111  fc5a				   .swatter_update_state_wait
    112  fc5a		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    113  fc5c		       84 cc		      sty	SwatterSampleF
    114  fc5e		       20 fc fc 	      jsr	SwatterHoldSample
    115  fc61
    116  fc61		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    117  fc63		       85 cb		      sta	SwatterSampleCount
    118  fc65
    119  fc65		       a9 80		      lda	#SWATTER_STATE_HOLD
    120  fc67		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    121  fc69		       4c 73 fc 	      jmp	.swatter_update_state_set
    122  fc6c
    123  fc6c				   .swatter_update_state_hold
    124  fc6c		       20 0b fd 	      jsr	SwatterActiveSample
    125  fc6f
    126  fc6f		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    127  fc71		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    128  fc73
    129  fc73				   .swatter_update_state_set
    130  fc73		       85 c4		      sta	SwatterState
    131  fc75		       86 90		      stx	FrameTimer+1
    132  fc77
    133  fc77				   .swatter_update_collision
    134  fc77							; Check 1 frame after active
    135  fc77		       a5 c4		      lda	SwatterState
    136  fc79		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    137  fc7b		       d0 09		      bne	.swatter_update_return
    138  fc7d		       a6 90		      ldx	FrameTimer+1
    139  fc7f		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    140  fc81		       d0 03		      bne	.swatter_update_return
    141  fc83
    142  fc83		       20 87 fc 	      jsr	SwatterCollision
    143  fc86
    144  fc86				   .swatter_update_return
    145  fc86		       60		      rts
    146  fc87
    147  fc87				   SwatterCollision
    148  fc87		       24 00		      bit	CXM0P
    149  fc89		       30 09		      bmi	.swatter_collision_m0
    150  fc8b
    151  fc8b		       24 01		      bit	CXM1P
    152  fc8d		       70 0a		      bvs	.swatter_collision_m1
    153  fc8f
    154  fc8f		       24 07		      bit	CXPPMM
    155  fc91		       30 0e		      bmi	.swatter_collision_p0
    156  fc93
    157  fc93		       60		      rts
    158  fc94
    159  fc94				   .swatter_collision_m0
    160  fc94		       a2 00		      ldx	#0
    161  fc96		       4c 9b fc 	      jmp	.swatter_collision_bug_reset
    162  fc99
    163  fc99				   .swatter_collision_m1
    164  fc99		       a2 01		      ldx	#1
    165  fc9b
    166  fc9b				   .swatter_collision_bug_reset
    167  fc9b		       20 f4 fa 	      jsr	BugReset
    168  fc9e		       4c b3 fc 	      jmp	.swatter_collision_active
    169  fca1
    170  fca1				   .swatter_collision_p0
    171  fca1
    172  fca1		       a5 94		      lda	ScoreValue
    173  fca3		       c5 c7		      cmp	SwatterHitDamage
    174  fca5		       90 08		      bcc	.swatter_collision_p0_zero
    175  fca7		       f0 06		      beq	.swatter_collision_p0_zero
    176  fca9
    177  fca9		       18		      clc
    178  fcaa		       e5 c7		      sbc	SwatterHitDamage
    179  fcac		       4c b1 fc 	      jmp	.swatter_collision_p0_set
    180  fcaf
    181  fcaf				   .swatter_collision_p0_zero
    182  fcaf		       a9 00		      lda	#0
    183  fcb1
    184  fcb1				   .swatter_collision_p0_set
    185  fcb1		       85 94		      sta	ScoreValue
    186  fcb3
    187  fcb3				   .swatter_collision_active
    188  fcb3		       20 1c fd 	      jsr	SwatterHitSample
    189  fcb6
    190  fcb6		       60		      rts
    191  fcb7
    192  fcb7				   SwatterPosition
    193  fcb7
    194  fcb7							; Set Position
    195  fcb7		       a2 01		      ldx	#1	; Object (player1)
    196  fcb9		       a5 c2		      lda	SwatterPos	; X Position
    197  fcbb		       20 00 f0 	      jsr	PosObject
    198  fcbe
    199  fcbe		       60		      rts
    200  fcbf
    201  fcbf							; Scanline Draw
    202  fcbf
    203  fcbf				   SwatterDrawStart
    204  fcbf
    205  fcbf							; Set player 1 to be quad size
    206  fcbf		       a5 82		      lda	NuSiz1
    207  fcc1		       29 f8		      and	#%11111000
    208  fcc3		       09 07		      ora	#%00000111
    209  fcc5		       85 82		      sta	NuSiz1
    210  fcc7		       85 05		      sta	NUSIZ1
    211  fcc9
    212  fcc9							; Set sprite color
    213  fcc9		       a5 c5		      lda	SwatterColor
    214  fccb		       85 07		      sta	COLUP1
    215  fccd
    216  fccd							; Note: Doesn't need vertical delay
    217  fccd
    218  fccd							; Calculate starting position
    219  fccd		       a5 c3		      lda	SwatterPos+1	; Y Position
    220  fccf		       4a		      lsr
    221  fcd0		       18		      clc
    222  fcd1		       69 14		      adc	#SWATTER_SPRITE_SIZE
    223  fcd3		       85 c9		      sta	SwatterDrawPos
    224  fcd5
    225  fcd5							; Initialize sprite index
    226  fcd5		       a9 00		      lda	#0
    227  fcd7		       85 c8		      sta	SwatterIndex
    228  fcd9		       85 ca		      sta	SwatterLine
    229  fcdb
    230  fcdb		       60		      rts
    231  fcdc
    232  fcdc				   SwatterReset
    233  fcdc							; Initialize Swatter State
    234  fcdc		       a9 00		      lda	#SWATTER_STATE_WAIT
    235  fcde		       85 c4		      sta	SwatterState
    236  fce0
    237  fce0							; Set Wait Timer
    238  fce0		       20 13 f0 	      jsr	Random
    239  fce3		       a5 86		      lda	Rand8
    240  fce5		       29 3f		      and	#$3f
    241  fce7		       18		      clc
    242  fce8		       65 c6		      adc	SwatterWaitTime
    243  fcea		       85 90		      sta	FrameTimer+1
    244  fcec
    245  fcec							; Set Random Position
    246  fcec		       20 13 f0 	      jsr	Random
    247  fcef		       a5 86		      lda	Rand8	; X Position
    248  fcf1		       29 7f		      and	#$7f
    249  fcf3		       85 c2		      sta	SwatterPos+0
    250  fcf5		       a5 87		      lda	Rand16	; Y Position
    251  fcf7		       29 7e		      and	#$7e	; Ensure that Y position is even
    252  fcf9		       85 c3		      sta	SwatterPos+1
    253  fcfb
    254  fcfb		       60		      rts
    255  fcfc
    256  fcfc				   SwatterHoldSample
    257  fcfc		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    258  fcfe		       85 93		      sta	SampleStep
    259  fd00		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    260  fd02		       85 16		      sta	AUDC1
    261  fd04		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    262  fd06		       85 1a		      sta	AUDV1
    263  fd08
    264  fd08		       84 18		      sty	AUDF1	; Store value of y as frequency
    265  fd0a
    266  fd0a		       60		      rts
    267  fd0b
    268  fd0b				   SwatterActiveSample
    269  fd0b		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    270  fd0d		       85 93		      sta	SampleStep
    271  fd0f		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    272  fd11		       85 16		      sta	AUDC1
    273  fd13		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    274  fd15		       85 18		      sta	AUDF1
    275  fd17		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    276  fd19		       85 1a		      sta	AUDV1
    277  fd1b		       60		      rts
    278  fd1c
    279  fd1c				   SwatterHitSample
    280  fd1c		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    281  fd1e		       85 93		      sta	SampleStep
    282  fd20		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    283  fd22		       85 16		      sta	AUDC1
    284  fd24		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    285  fd26		       85 18		      sta	AUDF1
    286  fd28		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    287  fd2a		       85 1a		      sta	AUDV1
    288  fd2c		       60		      rts
------- FILE game.asm
     22  fd2d
     23  fd2d							; Initialization
     24  fd2d
     25  fd2d				   GameInit
     26  fd2d
     27  fd2d							; Setup logic and kernel
      0  fd2d					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fd2d				   .POINTER   SET	VBlankPtr
      2  fd2d				   .ADDRESS   SET	GameVerticalBlank
      3  fd2d
      4  fd2d		       a9 6e		      LDA	#<.ADDRESS
      5  fd2f		       85 88		      STA	.POINTER
      6  fd31		       a9 fd		      LDA	#>.ADDRESS
      7  fd33		       85 89		      STA	.POINTER+1
      8  fd35
      0  fd35					      SET_POINTER	KernelPtr, GameKernel
      1  fd35				   .POINTER   SET	KernelPtr
      2  fd35				   .ADDRESS   SET	GameKernel
      3  fd35
      4  fd35		       a9 f0		      LDA	#<.ADDRESS
      5  fd37		       85 8a		      STA	.POINTER
      6  fd39		       a9 fd		      LDA	#>.ADDRESS
      7  fd3b		       85 8b		      STA	.POINTER+1
      8  fd3d
      0  fd3d					      SET_POINTER	OverScanPtr, GameOverScan
      1  fd3d				   .POINTER   SET	OverScanPtr
      2  fd3d				   .ADDRESS   SET	GameOverScan
      3  fd3d
      4  fd3d		       a9 98		      LDA	#<.ADDRESS
      5  fd3f		       85 8c		      STA	.POINTER
      6  fd41		       a9 fd		      LDA	#>.ADDRESS
      7  fd43		       85 8d		      STA	.POINTER+1
      8  fd45
     31  fd45
     32  fd45							; Mute Audio
     33  fd45		       a9 00		      lda	#0
     34  fd47							;    sta AUDC0
     35  fd47							;    sta AUDV0
     36  fd47							;    sta AUDF0
     37  fd47		       85 16		      sta	AUDC1
     38  fd49		       85 1a		      sta	AUDV1
     39  fd4b		       85 18		      sta	AUDF1
     40  fd4d		       85 93		      sta	SampleStep
     41  fd4f
     42  fd4f							; Load Audio Settings
     43  fd4f		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fd51		       85 19		      sta	AUDV0
     45  fd53
     46  fd53							; Make it so that we play the first note immediately
     47  fd53		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fd55		       85 92		      sta	AudioStep
     49  fd57		       a9 02		      lda	#2
     50  fd59		       85 8f		      sta	FrameTimer
     51  fd5b
     52  fd5b							; Reset NuSiz
     53  fd5b							;    lda #0
     54  fd5b							;    sta NuSiz0
     55  fd5b							;    sta NUSIZ0
     56  fd5b							;    sta NuSiz1
     57  fd5b							;    sta NUSIZ1
     58  fd5b
     59  fd5b							; Initialize Objects
     60  fd5b		       20 ac f5 	      jsr	LevelInit
     61  fd5e		       20 47 f6 	      jsr	ScoreInit
     62  fd61		       20 ef f7 	      jsr	SpiderInit
     63  fd64		       20 4d f9 	      jsr	LineInit
     64  fd67		       20 eb fa 	      jsr	BugInit
     65  fd6a		       20 05 fc 	      jsr	SwatterInit
     66  fd6d
     67  fd6d		       60		      rts
     68  fd6e
     69  fd6e				   GameVerticalBlank
     70  fd6e
     71  fd6e							; Refresh random values
     72  fd6e		       20 13 f0 	      jsr	Random
     73  fd71
     74  fd71							; Update Objects
     75  fd71		       20 bd f5 	      jsr	LevelUpdate
     76  fd74		       20 00 f8 	      jsr	SpiderUpdate
     77  fd77		       20 62 f9 	      jsr	LineUpdate
     78  fd7a		       20 08 fb 	      jsr	BugUpdate
     79  fd7d		       20 09 fc 	      jsr	SwatterUpdate
     80  fd80		       20 50 f6 	      jsr	ScoreUpdate
     81  fd83
     82  fd83							; Reset Collisions
     83  fd83		       85 2c		      sta	CXCLR
     84  fd85
     85  fd85							; Clear horizontal movement
     86  fd85		       85 2b		      sta	HMCLR
     87  fd87
     88  fd87							; Update Positions
     89  fd87		       20 1d f9 	      jsr	SpiderPosition
     90  fd8a		       20 84 fa 	      jsr	LinePosition
     91  fd8d		       20 b7 fb 	      jsr	BugPosition
     92  fd90		       20 b7 fc 	      jsr	SwatterPosition
     93  fd93
     94  fd93							; Set final x positions
     95  fd93		       85 02		      sta	WSYNC
     96  fd95		       85 2a		      sta	HMOVE
     97  fd97
     98  fd97		       60		      rts
     99  fd98
    100  fd98				   GameOverScan
    101  fd98
    102  fd98							; Audio Routines
    103  fd98		       20 b4 fd 	      jsr	GameAudio
    104  fd9b		       20 a2 fd 	      jsr	GameSample
    105  fd9e
    106  fd9e							; State Routines
    107  fd9e		       20 e8 fd 	      jsr	GameDeath
    108  fda1
    109  fda1		       60		      rts
    110  fda2
    111  fda2				   GameSample
    112  fda2
    113  fda2		       a6 93		      ldx	SampleStep
    114  fda4		       f0 0b		      beq	.game_sample_return
    115  fda6
    116  fda6		       ca		      dex
    117  fda7		       d0 08		      bne	.game_sample_return
    118  fda9
    119  fda9				   .game_sample_mute
    120  fda9		       a9 00		      lda	#0
    121  fdab		       85 1a		      sta	AUDV1
    122  fdad		       85 18		      sta	AUDF1
    123  fdaf		       85 16		      sta	AUDC1
    124  fdb1
    125  fdb1				   .game_sample_return
    126  fdb1		       86 93		      stx	SampleStep
    127  fdb3		       60		      rts
    128  fdb4
    129  fdb4				   GameAudio
    130  fdb4
    131  fdb4		       a6 8f		      ldx	FrameTimer
    132  fdb6		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    133  fdb8		       f0 25		      beq	.game_audio_mute_note
    134  fdba		       e0 00		      cpx	#0
    135  fdbc		       d0 29		      bne	.game_audio_return
    136  fdbe
    137  fdbe							; Reset Timer
    138  fdbe		       a2 09		      ldx	#GAME_AUDIO_STEP
    139  fdc0		       86 8f		      stx	FrameTimer
    140  fdc2
    141  fdc2				   .game_audio_play
    142  fdc2
    143  fdc2							; Increment melody position
    144  fdc2		       a4 92		      ldy	AudioStep
    145  fdc4		       c8		      iny
    146  fdc5
    147  fdc5		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    148  fdc7		       d0 02		      bne	.game_audio_play_note
    149  fdc9
    150  fdc9							; Loop our audio step
    151  fdc9		       a0 00		      ldy	#0
    152  fdcb
    153  fdcb				   .game_audio_play_note
    154  fdcb
    155  fdcb							; Save current position
    156  fdcb		       84 92		      sty	AudioStep
    157  fdcd
    158  fdcd							; Melody Line
    159  fdcd		       b9 d5 fe 	      lda	GameAudio0,y
    160  fdd0		       c9 ff		      cmp	#$FF
    161  fdd2		       f0 0b		      beq	.game_audio_mute_note
    162  fdd4		       85 17		      sta	AUDF0
    163  fdd6		       a9 06		      lda	#GAME_AUDIO_TONE
    164  fdd8		       85 15		      sta	AUDC0
    165  fdda		       a9 02		      lda	#GAME_AUDIO_VOLUME
    166  fddc		       85 19		      sta	AUDV0
    167  fdde
    168  fdde		       60		      rts
    169  fddf
    170  fddf				   .game_audio_mute_note
    171  fddf
    172  fddf		       a9 00		      lda	#0
    173  fde1		       85 17		      sta	AUDF0
    174  fde3		       85 15		      sta	AUDC0
    175  fde5		       85 19		      sta	AUDV0
    176  fde7
    177  fde7				   .game_audio_return
    178  fde7		       60		      rts
    179  fde8
    180  fde8				   GameDeath
    181  fde8		       a5 94		      lda	ScoreValue+0
    182  fdea		       d0 03		      bne	.game_death_return
    183  fdec
    184  fdec							; Show Game Over Screen
    185  fdec		       20 f5 fe 	      jsr	OverInit
    186  fdef
    187  fdef				   .game_death_return
    188  fdef		       60		      rts
    189  fdf0
    190  fdf0				   GameKernel
    191  fdf0
    192  fdf0							; Turn on display
    193  fdf0		       a9 00		      lda	#0
    194  fdf2		       85 01		      sta	VBLANK
    195  fdf4
    196  fdf4				   .game_kernel_score
    197  fdf4
    198  fdf4							; Draw Score on top first
    199  fdf4		       20 c2 f6 	      jsr	ScoreDraw
    200  fdf7
    201  fdf7				   .game_kernel_objects_start
    202  fdf7
    203  fdf7							; Setup Drawing Objects
    204  fdf7		       20 dc f7 	      jsr	WebDrawStart
    205  fdfa		       20 25 f9 	      jsr	SpiderDrawStart
    206  fdfd		       20 bf fc 	      jsr	SwatterDrawStart
    207  fe00		       20 8c fa 	      jsr	LineDrawStart
    208  fe03		       20 c6 fb 	      jsr	BugDrawStart
    209  fe06
    210  fe06							; Start Scanline Counter
    211  fe06		       a2 a8		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    212  fe08							; The extra 5 is for processing overflow
    213  fe08
    214  fe08							; Half scanline counter in Temp+1
    215  fe08		       a9 56		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    216  fe0a		       85 84		      sta	Temp+1
    217  fe0c
    218  fe0c							; 6 line counter
    219  fe0c		       a9 00		      lda	#0
    220  fe0e		       85 85		      sta	Temp+2
    221  fe10
    222  fe10							; Load background color
    223  fe10		       a5 a1		      lda	WebColor+0
    224  fe12		       85 09		      sta	COLUBK
    225  fe14
    226  fe14							;sta WSYNC
    227  fe14
    228  fe14				   .game_kernel_objects
    229  fe14
    230  fe14		       a5 85		      lda	Temp+2
    231  fe16		       d0 1a		      bne	.game_kernel_missle
    232  fe18
    233  fe18		       a9 03		      lda	#3
    234  fe1a		       85 85		      sta	Temp+2
    235  fe1c
    236  fe1c				   .game_kernel_web
    237  fe1c
    238  fe1c				   .game_kernel_web_pf
    239  fe1c							; Web
    240  fe1c
    241  fe1c		       a4 a0		      ldy	WebIndex
    242  fe1e
    243  fe1e							; Load Image
    244  fe1e		       b9 3e f1 	      lda	WebImagePF0,y
    245  fe21		       85 0d		      sta	PF0
    246  fe23		       b9 5c f1 	      lda	WebImagePF1,y
    247  fe26		       85 0e		      sta	PF1
    248  fe28		       b9 7a f1 	      lda	WebImagePF2,y
    249  fe2b		       85 0f		      sta	PF2
    250  fe2d
    251  fe2d		       e6 a0		      inc	WebIndex
    252  fe2f
    253  fe2f		       4c 50 fe 	      jmp	.game_kernel_line
    254  fe32
    255  fe32				   .game_kernel_missle
    256  fe32
    257  fe32							; Preload half-line
    258  fe32		       a5 84		      lda	Temp+1
    259  fe34
    260  fe34				   .game_kernel_missle_bug_0
    261  fe34							; First Bug
    262  fe34
    263  fe34		       a0 00		      ldy	#%00000000
    264  fe36
    265  fe36							; Top
    266  fe36		       c5 c0		      cmp	BugDrawPosTop+0
    267  fe38		       b0 06		      bcs	.game_kernel_missle_bug_0_off
    268  fe3a
    269  fe3a							; Bottom
    270  fe3a		       c5 be		      cmp	BugDrawPosBottom+0
    271  fe3c		       90 02		      bcc	.game_kernel_missle_bug_0_off
    272  fe3e
    273  fe3e				   .game_kernel_missle_bug_0_on
    274  fe3e		       a0 02		      ldy	#%00000010
    275  fe40
    276  fe40				   .game_kernel_missle_bug_0_off
    277  fe40		       84 1d		      sty	ENAM0
    278  fe42
    279  fe42				   .game_kernel_missle_bug_1
    280  fe42							; Second Bug
    281  fe42
    282  fe42		       a0 00		      ldy	#%00000000
    283  fe44
    284  fe44							; Top
    285  fe44		       c5 c1		      cmp	BugDrawPosTop+1
    286  fe46		       b0 06		      bcs	.game_kernel_missle_bug_1_off
    287  fe48
    288  fe48							; Bottom
    289  fe48		       c5 bf		      cmp	BugDrawPosBottom+1
    290  fe4a		       90 02		      bcc	.game_kernel_missle_bug_1_off
    291  fe4c
    292  fe4c				   .game_kernel_missle_bug_1_on
    293  fe4c		       a0 02		      ldy	#%00000010
    294  fe4e
    295  fe4e				   .game_kernel_missle_bug_1_off
    296  fe4e		       84 1e		      sty	ENAM1
    297  fe50
    298  fe50							;jmp .game_kernel_line_skip
    299  fe50
    300  fe50				   .game_kernel_line
    301  fe50							; Line
    302  fe50
    303  fe50		       24 ae		      bit	LineEnabled
    304  fe52		       10 10		      bpl	.game_kernel_line_skip
    305  fe54
    306  fe54							; Load half-line
    307  fe54		       a5 84		      lda	Temp+1
    308  fe56
    309  fe56		       a0 00		      ldy	#%00000000
    310  fe58
    311  fe58							; Top
    312  fe58		       c5 b6		      cmp	LineDrawPos+1
    313  fe5a		       b0 06		      bcs	.game_kernel_line_set
    314  fe5c
    315  fe5c							; Bottom
    316  fe5c		       c5 b5		      cmp	LineDrawPos+0
    317  fe5e		       90 02		      bcc	.game_kernel_line_set
    318  fe60
    319  fe60		       a0 02		      ldy	#%00000010
    320  fe62				   .game_kernel_line_set
    321  fe62		       84 1f		      sty	ENABL
    322  fe64
    323  fe64				   .game_kernel_line_skip
    324  fe64
    325  fe64							; Next Line
    326  fe64		       ca		      dex
    327  fe65							;sta WSYNC
    328  fe65
    329  fe65				   .game_kernel_sprite
    330  fe65
    331  fe65				   .game_kernel_sprite_spider
    332  fe65							; Spider
    333  fe65
    334  fe65		       a4 a9		      ldy	SpiderIndex
    335  fe67		       30 1a		      bmi	.game_kernel_sprite_spider_load	; At end of sprite
    336  fe69		       d0 06		      bne	.game_kernel_sprite_spider_draw	; Currently drawing (not zero)
    337  fe6b
    338  fe6b							; Check y position to see if we should start
    339  fe6b		       a5 84		      lda	Temp+1	; Use half scanline
    340  fe6d		       e5 aa		      sbc	SpiderDrawPos
    341  fe6f		       10 12		      bpl	.game_kernel_sprite_spider_load
    342  fe71
    343  fe71				   .game_kernel_sprite_spider_draw
    344  fe71		       b1 a3		      lda	(SpiderPtr),y
    345  fe73		       85 ab		      sta	SpiderLine
    346  fe75
    347  fe75							; Increment sprite index
    348  fe75		       e6 a9		      inc	SpiderIndex
    349  fe77
    350  fe77							; See if we're at the end
    351  fe77		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    352  fe79		       d0 0a		      bne	.game_kernel_sprite_spider_line
    353  fe7b		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    354  fe7d		       84 a9		      sty	SpiderIndex
    355  fe7f		       a9 00		      lda	#0
    356  fe81		       85 ab		      sta	SpiderLine
    357  fe83
    358  fe83				   .game_kernel_sprite_spider_load
    359  fe83		       a5 ab		      lda	SpiderLine
    360  fe85				   .game_kernel_sprite_spider_line
    361  fe85		       85 1b		      sta	GRP0
    362  fe87
    363  fe87				   .game_kernel_sprite_swatter
    364  fe87							; Swatter
    365  fe87
    366  fe87							; Check if wait state
    367  fe87		       24 c4		      bit	SwatterState
    368  fe89		       10 1b		      bpl	.game_kernel_sprite_swatter_load
    369  fe8b
    370  fe8b		       a4 c8		      ldy	SwatterIndex
    371  fe8d		       30 17		      bmi	.game_kernel_sprite_swatter_load	; At end of sprite
    372  fe8f		       d0 06		      bne	.game_kernel_sprite_swatter_draw	; Currently drawing (not zero)
    373  fe91
    374  fe91							; Check y position to see if we should start
    375  fe91		       a5 84		      lda	Temp+1	; Use half scanline
    376  fe93		       e5 c9		      sbc	SwatterDrawPos
    377  fe95		       10 0f		      bpl	.game_kernel_sprite_swatter_load
    378  fe97
    379  fe97				   .game_kernel_sprite_swatter_draw
    380  fe97		       b9 c8 f1 	      lda	SwatterSprite,y
    381  fe9a		       85 ca		      sta	SwatterLine
    382  fe9c
    383  fe9c							; Increment index
    384  fe9c		       e6 c8		      inc	SwatterIndex
    385  fe9e
    386  fe9e							; See if we're at the end
    387  fe9e		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    388  fea0		       d0 06		      bne	.game_kernel_sprite_swatter_line
    389  fea2		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    390  fea4		       84 c8		      sty	SwatterIndex
    391  fea6
    392  fea6				   .game_kernel_sprite_swatter_load
    393  fea6		       a5 ca		      lda	SwatterLine
    394  fea8				   .game_kernel_sprite_swatter_line
    395  fea8		       85 1c		      sta	GRP1
    396  feaa
    397  feaa		       85 02		      sta	WSYNC
    398  feac
    399  feac				   .game_kernel_sprite_end
    400  feac
    401  feac							; New line, decrement half scanline, and increment 3 line counter
    402  feac		       c6 84		      dec	Temp+1
    403  feae		       c6 85		      dec	Temp+2
    404  feb0		       ca		      dex
    405  feb1		       f0 03		      beq	.game_kernel_clean
    406  feb3		       4c 14 fe 	      jmp	.game_kernel_objects
    407  feb6
    408  feb6				   .game_kernel_clean
    409  feb6
    410  feb6		       85 02		      sta	WSYNC
    411  feb8
    412  feb8		       a9 00		      lda	#0
    413  feba		       85 09		      sta	COLUBK
    414  febc		       85 08		      sta	COLUPF
    415  febe		       85 06		      sta	COLUP0
    416  fec0		       85 07		      sta	COLUP1
    417  fec2		       85 0d		      sta	PF0
    418  fec4		       85 0e		      sta	PF1
    419  fec6		       85 0f		      sta	PF2
    420  fec8		       85 1b		      sta	GRP0
    421  feca		       85 1c		      sta	GRP1
    422  fecc		       85 1d		      sta	ENAM0
    423  fece		       85 1e		      sta	ENAM1
    424  fed0		       85 1f		      sta	ENABL
    425  fed2
    426  fed2		       85 02		      sta	WSYNC
    427  fed4
    428  fed4				   .game_kernel_return
    429  fed4		       60		      rts
    430  fed5
    431  fed5				   GameAudio0
    432  fed5		       0d		      .byte.b	#13	; D
    433  fed6		       ff		      .byte.b	#$FF
    434  fed7		       0f		      .byte.b	#15	; B
    435  fed8		       ff		      .byte.b	#$FF
    436  fed9		       0d		      .byte.b	#13	; D
    437  feda		       ff		      .byte.b	#$FF
    438  fedb		       0f		      .byte.b	#15	; B
    439  fedc		       ff		      .byte.b	#$FF
    440  fedd		       0d		      .byte.b	#13	; D
    441  fede		       0d		      .byte.b	#13	; D
    442  fedf		       0f		      .byte.b	#15	; B
    443  fee0		       ff		      .byte.b	#$FF
    444  fee1		       0c		      .byte.b	#12	; D#
    445  fee2		       ff		      .byte.b	#$FF
    446  fee3		       0f		      .byte.b	#15	; B
    447  fee4		       ff		      .byte.b	#$FF
    448  fee5		       0b		      .byte.b	#11	; E
    449  fee6		       ff		      .byte.b	#$FF
    450  fee7		       0e		      .byte.b	#14	; C#
    451  fee8		       ff		      .byte.b	#$FF
    452  fee9		       0b		      .byte.b	#11
    453  feea		       ff		      .byte.b	#$FF
    454  feeb		       0e		      .byte.b	#14
    455  feec		       ff		      .byte.b	#$FF
    456  feed		       0b		      .byte.b	#11
    457  feee		       0b		      .byte.b	#11
    458  feef		       0e		      .byte.b	#14
    459  fef0		       ff		      .byte.b	#$FF
    460  fef1		       0b		      .byte.b	#11
    461  fef2		       ff		      .byte.b	#$FF
    462  fef3		       0e		      .byte.b	#14
    463  fef4		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fef5					      include	"over.asm"
      1  fef5							;================
      2  fef5							; Constants
      3  fef5							;================
      4  fef5
      5  fef5		       00 00	   OVER_BG_COLOR =	#$00
      6  fef5		       00 44	   OVER_FG_COLOR =	#$44
      7  fef5		       00 06	   OVER_FG_BW_COLOR =	#$06
      8  fef5
      9  fef5		       00 07	   OVER_AUDIO_TONE =	7
     10  fef5		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     11  fef5		       00 06	   OVER_AUDIO_LENGTH =	6
     12  fef5		       00 10	   OVER_AUDIO_STEP =	16
     13  fef5
     14  fef5		       00 09	   OVER_IMAGE_SIZE =	9
     15  fef5		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     16  fef5		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     17  fef5		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     18  fef5
     19  fef5				   OverInit
     20  fef5
     21  fef5							; Setup logic and kernel
      0  fef5					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fef5				   .POINTER   SET	VBlankPtr
      2  fef5				   .ADDRESS   SET	OverVerticalBlank
      3  fef5
      4  fef5		       a9 26		      LDA	#<.ADDRESS
      5  fef7		       85 88		      STA	.POINTER
      6  fef9		       a9 ff		      LDA	#>.ADDRESS
      7  fefb		       85 89		      STA	.POINTER+1
      8  fefd
      0  fefd					      SET_POINTER	KernelPtr, OverKernel
      1  fefd				   .POINTER   SET	KernelPtr
      2  fefd				   .ADDRESS   SET	OverKernel
      3  fefd
      4  fefd		       a9 7e		      LDA	#<.ADDRESS
      5  feff		       85 8a		      STA	.POINTER
      6  ff01		       a9 ff		      LDA	#>.ADDRESS
      7  ff03		       85 8b		      STA	.POINTER+1
      8  ff05
      0  ff05					      SET_POINTER	OverScanPtr, OverOverScan
      1  ff05				   .POINTER   SET	OverScanPtr
      2  ff05				   .ADDRESS   SET	OverOverScan
      3  ff05
      4  ff05		       a9 40		      LDA	#<.ADDRESS
      5  ff07		       85 8c		      STA	.POINTER
      6  ff09		       a9 ff		      LDA	#>.ADDRESS
      7  ff0b		       85 8d		      STA	.POINTER+1
      8  ff0d
     25  ff0d
     26  ff0d							; Load audio settings
     27  ff0d		       a9 07		      lda	#OVER_AUDIO_TONE
     28  ff0f		       85 15		      sta	AUDC0
     29  ff11							;lda #OVER_AUDIO_VOLUME
     30  ff11							;sta AUDV0
     31  ff11		       a9 00		      lda	#0
     32  ff13		       85 16		      sta	AUDC1
     33  ff15		       85 1a		      sta	AUDV1
     34  ff17
     35  ff17							; Set initial button state
     36  ff17							;lda #0
     37  ff17		       85 91		      sta	InputState
     38  ff19
     39  ff19							; Setup frame counters
     40  ff19		       a9 01		      lda	#1
     41  ff1b		       85 8f		      sta	FrameTimer
     42  ff1d		       a9 10		      lda	#OVER_AUDIO_STEP
     43  ff1f		       85 93		      sta	SampleStep
     44  ff21		       a9 06		      lda	#OVER_AUDIO_LENGTH
     45  ff23		       85 92		      sta	AudioStep
     46  ff25
     47  ff25		       60		      rts
     48  ff26
     49  ff26				   OverVerticalBlank
     50  ff26		       20 50 f6 	      jsr	ScoreUpdate
     51  ff29
     52  ff29							; Load Colors
     53  ff29		       a9 00		      lda	#OVER_BG_COLOR
     54  ff2b		       85 09		      sta	COLUBK
     55  ff2d
     56  ff2d							; Check b/w
     57  ff2d		       ad 82 02 	      lda	SWCHB
     58  ff30					      REPEAT	4
     59  ff30		       4a		      lsr
     58  ff30					      REPEND
     59  ff31		       4a		      lsr
     58  ff31					      REPEND
     59  ff32		       4a		      lsr
     58  ff32					      REPEND
     59  ff33		       4a		      lsr
     60  ff34					      REPEND
     61  ff34		       90 05		      bcc	.over_bw
     62  ff36
     63  ff36				   .over_color
     64  ff36		       a9 44		      lda	#OVER_FG_COLOR
     65  ff38		       85 08		      sta	COLUPF
     66  ff3a
     67  ff3a		       60		      rts
     68  ff3b
     69  ff3b				   .over_bw
     70  ff3b							; Load b/w Colors
     71  ff3b		       a9 06		      lda	#OVER_FG_BW_COLOR
     72  ff3d		       85 08		      sta	COLUPF
     73  ff3f
     74  ff3f		       60		      rts
     75  ff40
     76  ff40				   OverOverScan
     77  ff40		       20 47 ff 	      jsr	OverAudio
     78  ff43		       20 6d ff 	      jsr	OverState
     79  ff46		       60		      rts
     80  ff47
     81  ff47				   OverAudio
     82  ff47
     83  ff47		       a5 8f		      lda	FrameTimer
     84  ff49		       d0 21		      bne	.over_audio_return
     85  ff4b
     86  ff4b							; Reset Timer
     87  ff4b					      REPEAT	3
     88  ff4b		       e6 93		      inc	SampleStep
     87  ff4b					      REPEND
     88  ff4d		       e6 93		      inc	SampleStep
     87  ff4d					      REPEND
     88  ff4f		       e6 93		      inc	SampleStep
     89  ff51					      REPEND
     90  ff51		       a5 93		      lda	SampleStep
     91  ff53		       85 8f		      sta	FrameTimer
     92  ff55
     93  ff55				   .over_audio_play
     94  ff55
     95  ff55							; Increment melody position
     96  ff55		       a4 92		      ldy	AudioStep
     97  ff57		       f0 0d		      beq	.over_audio_mute_note
     98  ff59		       c6 92		      dec	AudioStep
     99  ff5b		       88		      dey
    100  ff5c
    101  ff5c				   .over_audio_play_note
    102  ff5c
    103  ff5c							; Melody Line
    104  ff5c		       b9 d0 ff 	      lda	OverAudio0,y
    105  ff5f		       85 17		      sta	AUDF0
    106  ff61		       a9 06		      lda	#OVER_AUDIO_VOLUME
    107  ff63		       85 19		      sta	AUDV0
    108  ff65
    109  ff65		       60		      rts
    110  ff66
    111  ff66				   .over_audio_mute_note
    112  ff66		       a9 00		      lda	#0
    113  ff68		       85 17		      sta	AUDF0
    114  ff6a		       85 19		      sta	AUDV0
    115  ff6c
    116  ff6c				   .over_audio_return
    117  ff6c		       60		      rts
    118  ff6d
    119  ff6d				   OverState
    120  ff6d
    121  ff6d							; Check if Fire Button on controller 1 is released
    122  ff6d		       a5 0c		      lda	INPT4
    123  ff6f		       30 05		      bmi	.over_state_check
    124  ff71
    125  ff71				   .over_state_on
    126  ff71		       a9 01		      lda	#1
    127  ff73		       85 91		      sta	InputState
    128  ff75		       60		      rts
    129  ff76
    130  ff76				   .over_state_check
    131  ff76		       a5 91		      lda	InputState
    132  ff78		       f0 03		      beq	.over_state_return
    133  ff7a
    134  ff7a				   .over_state_next
    135  ff7a							; Button is released, load title screen
    136  ff7a		       20 70 f3 	      jsr	TitleInit
    137  ff7d
    138  ff7d				   .over_state_return
    139  ff7d		       60		      rts
    140  ff7e
    141  ff7e				   OverKernel
    142  ff7e
    143  ff7e							; Turn on display
    144  ff7e		       a9 00		      lda	#0
    145  ff80		       85 01		      sta	VBLANK
    146  ff82
    147  ff82				   .over_kernel_score
    148  ff82
    149  ff82							; Draw Score on top first (no update)
    150  ff82		       20 c2 f6 	      jsr	ScoreDraw
    151  ff85
    152  ff85				   .over_kernel_init
    153  ff85							; Playfield Control
    154  ff85		       a5 80		      lda	CtrlPf
    155  ff87		       29 fd		      and	#%11111101	; Use playfield foreground color
    156  ff89		       09 01		      ora	#%00000001	; Set mirroring
    157  ff8b		       85 80		      sta	CtrlPf
    158  ff8d		       85 0a		      sta	CTRLPF
    159  ff8f
    160  ff8f				   .over_kernel_top_padding
    161  ff8f							; Top Padding
    162  ff8f		       20 ae ff 	      jsr	OverPadding
    163  ff92
    164  ff92				   .over_kernel_image
    165  ff92		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    166  ff94
    167  ff94				   .over_kernel_image_next
    168  ff94		       bd c7 ff 	      lda	OverImagePF2,x
    169  ff97		       85 0f		      sta	PF2
    170  ff99		       bd be ff 	      lda	OverImagePF1,x
    171  ff9c		       85 0e		      sta	PF1
    172  ff9e							;    lda OverImagePF0,x
    173  ff9e							;    sta PF0
    174  ff9e
    175  ff9e		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    176  ffa0				   .over_kernel_image_loop
    177  ffa0		       85 02		      sta	WSYNC
    178  ffa2		       88		      dey
    179  ffa3		       d0 fb		      bne	.over_kernel_image_loop
    180  ffa5
    181  ffa5		       ca		      dex
    182  ffa6		       10 ec		      bpl	.over_kernel_image_next
    183  ffa8
    184  ffa8				   .over_kernel_bottom_padding
    185  ffa8							; Bottom Padding
    186  ffa8		       20 ae ff 	      jsr	OverPadding
    187  ffab
    188  ffab				   .over_kernel_return
    189  ffab		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    190  ffad		       60		      rts
    191  ffae
    192  ffae				   OverPadding
    193  ffae		       a9 00		      lda	#0
    194  ffb0		       85 0d		      sta	PF0
    195  ffb2		       85 0e		      sta	PF1
    196  ffb4		       85 0f		      sta	PF2
    197  ffb6
    198  ffb6		       a2 32		      ldx	#OVER_IMAGE_PADDING
    199  ffb8				   .over_padding_loop
    200  ffb8		       85 02		      sta	WSYNC
    201  ffba		       ca		      dex
    202  ffbb		       d0 fb		      bne	.over_padding_loop
    203  ffbd
    204  ffbd		       60		      rts
    205  ffbe
    206  ffbe				   OverAssets
    207  ffbe
    208  ffbe							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ffbe					      include	"over_image.asm"
      1  ffbe							;OverImagePF0:
      2  ffbe							;    .BYTE %00000000
      3  ffbe							;    .BYTE %00000000
      4  ffbe							;    .BYTE %00000000
      5  ffbe							;    .BYTE %00000000
      6  ffbe							;    .BYTE %00000000
      7  ffbe							;    .BYTE %00000000
      8  ffbe							;    .BYTE %00000000
      9  ffbe							;    .BYTE %00000000
     10  ffbe							;    .BYTE %00000000
     11  ffbe
     12  ffbe				   OverImagePF1
     13  ffbe		       0c		      .BYTE.b	%00001100
     14  ffbf		       13		      .BYTE.b	%00010011
     15  ffc0		       20		      .BYTE.b	%00100000
     16  ffc1		       23		      .BYTE.b	%00100011
     17  ffc2		       24		      .BYTE.b	%00100100
     18  ffc3		       24		      .BYTE.b	%00100100
     19  ffc4		       12		      .BYTE.b	%00010010
     20  ffc5		       10		      .BYTE.b	%00010000
     21  ffc6		       08		      .BYTE.b	%00001000
     22  ffc7
     23  ffc7				   OverImagePF2
     24  ffc7		       e0		      .BYTE.b	%11100000
     25  ffc8		       18		      .BYTE.b	%00011000
     26  ffc9		       05		      .BYTE.b	%00000101
     27  ffca		       52		      .BYTE.b	%01010010
     28  ffcb		       23		      .BYTE.b	%00100011
     29  ffcc		       52		      .BYTE.b	%01010010
     30  ffcd		       04		      .BYTE.b	%00000100
     31  ffce		       18		      .BYTE.b	%00011000
     32  ffcf		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    210  ffd0
    211  ffd0				   OverAudio0
    212  ffd0
    213  ffd0		       1a		      .BYTE.b	#26	; D1
    214  ffd1		       1a		      .BYTE.b	#26
    215  ffd2		       16		      .BYTE.b	#22	; F1
    216  ffd3		       11		      .BYTE.b	#17	; A1
    217  ffd4		       0d		      .BYTE.b	#13	; D2
    218  ffd5		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    332  ffd6
    333  ffd6							;================
    334  ffd6							; End of cart
    335  ffd6							;================
    336  ffd6
    337  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    338  fffa
    339  fffa				   InterruptVectors
    340  fffa
    341  fffa		       0c f2		      .word.w	InitSystem	; NMI
    342  fffc		       0c f2		      .word.w	InitSystem	; RESET
    343  fffe		       0c f2		      .word.w	InitSystem	; IRQ
    344  10000
    345  10000					       END
