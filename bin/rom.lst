------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 11th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00cb ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; Global
     53 U0080
     54 U0080		       00 00 00 00 Temp       ds	4
     55 U0084		       00	   Rand8      ds	1
     56 U0085		       00	   Rand16     ds	1
     57 U0086
     58 U0086		       00 00	   VBlankPtr  ds	2
     59 U0088		       00 00	   KernelPtr  ds	2
     60 U008a		       00 00	   OverScanPtr ds	2
     61 U008c
     62 U008c		       00	   Frame      ds	1
     63 U008d		       00 00	   FrameTimer ds	2
     64 U008f		       00	   InputState ds	1
     65 U0090
     66 U0090		       00	   AudioStep  ds	1
     67 U0091		       00	   SampleStep ds	1
     68 U0092		       00	   GameAudioStep ds	1
     69 U0093
     70 U0093							; Score
     71 U0093
     72 U0093		       00 00	   ScoreValue ds	2
     73 U0095		       00 00	   ScoreDigitOnes ds	2
     74 U0097		       00 00	   ScoreDigitTens ds	2
     75 U0099		       00 00 00    ScoreDigitGfx ds	3
     76 U009c		       00 00	   ScoreBarGfx ds	2
     77 U009e
     78 U009e							; Level
     79 U009e		       00	   LevelCurrent ds	1
     80 U009f
     81 U009f							; Web
     82 U009f
     83 U009f		       00	   WebIndex   ds	1
     84 U00a0		       00 00	   WebColor   ds	2
     85 U00a2
     86 U00a2							; Spider
     87 U00a2
     88 U00a2		       00 00	   SpiderPtr  ds	2
     89 U00a4		       00 00	   SpiderPos  ds	2
     90 U00a6		       00	   SpiderCtrl ds	1
     91 U00a7		       00	   SpiderColor ds	1
     92 U00a8
     93 U00a8		       00	   SpiderIndex ds	1
     94 U00a9		       00	   SpiderDrawPos ds	1
     95 U00aa		       00	   SpiderLine ds	1
     96 U00ab
     97 U00ab		       00 00	   SpiderPtr2 ds	2
     98 U00ad
     99 U00ad							; Line
    100 U00ad
    101 U00ad		       00	   LineEnabled ds	1
    102 U00ae		       00 00	   LinePos    ds	2
    103 U00b0		       00 00	   LineVelocity ds	2
    104 U00b2		       00 00	   LineDrawPos ds	2
    105 U00b4
    106 U00b4							; Bug
    107 U00b4
    108 U00b4		       00	   BugSpeed   ds	1
    109 U00b5
    110 U00b5		       00 00	   BugStunned ds	2
    111 U00b7		       00 00	   BugPosX    ds	2
    112 U00b9		       00 00	   BugPosY    ds	2
    113 U00bb
    114 U00bb		       00 00	   BugDrawPosBottom ds	2
    115 U00bd		       00 00	   BugDrawPosTop ds	2
    116 U00bf
    117 U00bf							; Swatter
    118 U00bf
    119 U00bf		       00 00	   SwatterPos ds	2
    120 U00c1		       00	   SwatterState ds	1
    121 U00c2		       00	   SwatterColor ds	1
    122 U00c3
    123 U00c3		       00	   SwatterWaitTime ds	1
    124 U00c4		       00	   SwatterHoldTime ds	1
    125 U00c5		       00	   SwatterHitDamage ds	1
    126 U00c6
    127 U00c6		       00	   SwatterIndex ds	1
    128 U00c7		       00	   SwatterDrawPos ds	1
    129 U00c8		       00	   SwatterLine ds	1
    130 U00c9
    131 U00c9		       00	   SwatterSampleCount ds	1
    132 U00ca		       00	   SwatterSampleF ds	1
    133 U00cb
    134  10000 ????				       SEG
    135  f000					      org	$F000	; Start of cart area
    136  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 84		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 85		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 84		      sta	Rand8
     49  f01e		       45 85		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 80		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 81		      sta	Temp+1
     70  f029		       85 82		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 80		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 81		      lda	Temp+1	; And add into result
     77  f031		       65 81		      adc	Temp+1
     78  f033		       85 81		      sta	Temp+1
     79  f035
     80  f035		       a5 82		      lda	Temp+2	; Propagating any carry
     81  f037		       65 82		      adc	Temp+2
     82  f039		       85 82		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 81		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 82		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    138  f044
    139  f044							; Assets
    140  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
------- FILE title_bug.asm LEVEL 2 PASS 2
      0  f0bc					      include	"title_bug.asm"
      1  f0bc				   TitleBug
      2  f0bc
      3  f0bc		       10		      .BYTE.b	%00010000
      4  f0bd		       57		      .BYTE.b	%01010111
      5  f0be		       4f		      .BYTE.b	%01001111
      6  f0bf		       3f		      .BYTE.b	%00111111
      7  f0c0		       19		      .BYTE.b	%00011001
      8  f0c1		       79		      .BYTE.b	%01111001
      9  f0c2		       8f		      .BYTE.b	%10001111
     10  f0c3		       97		      .BYTE.b	%10010111
     11  f0c4		       e0		      .BYTE.b	%11100000
     12  f0c5
     13  f0c5		       57		      .BYTE.b	%01010111
     14  f0c6		       4f		      .BYTE.b	%01001111
     15  f0c7		       3f		      .BYTE.b	%00111111
     16  f0c8		       19		      .BYTE.b	%00011001
     17  f0c9		       7d		      .BYTE.b	%01111101
     18  f0ca		       8f		      .BYTE.b	%10001111
     19  f0cb		       f7		      .BYTE.b	%11110111
     20  f0cc		       00		      .BYTE.b	%00000000
     21  f0cd		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    145  f0ce
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0ce					      include	"objects/score_digits.asm"
      1  f0ce				   ScoreDigits
      2  f0ce
      3  f0ce		       77		      .BYTE.b	%01110111
      4  f0cf		       55		      .BYTE.b	%01010101
      5  f0d0		       55		      .BYTE.b	%01010101
      6  f0d1		       55		      .BYTE.b	%01010101
      7  f0d2		       77		      .BYTE.b	%01110111
      8  f0d3
      9  f0d3		       11		      .BYTE.b	%00010001
     10  f0d4		       11		      .BYTE.b	%00010001
     11  f0d5		       11		      .BYTE.b	%00010001
     12  f0d6		       11		      .BYTE.b	%00010001
     13  f0d7		       11		      .BYTE.b	%00010001
     14  f0d8
     15  f0d8		       77		      .BYTE.b	%01110111
     16  f0d9		       11		      .BYTE.b	%00010001
     17  f0da		       77		      .BYTE.b	%01110111
     18  f0db		       44		      .BYTE.b	%01000100
     19  f0dc		       77		      .BYTE.b	%01110111
     20  f0dd
     21  f0dd		       77		      .BYTE.b	%01110111
     22  f0de		       11		      .BYTE.b	%00010001
     23  f0df		       33		      .BYTE.b	%00110011
     24  f0e0		       11		      .BYTE.b	%00010001
     25  f0e1		       77		      .BYTE.b	%01110111
     26  f0e2
     27  f0e2		       55		      .BYTE.b	%01010101
     28  f0e3		       55		      .BYTE.b	%01010101
     29  f0e4		       77		      .BYTE.b	%01110111
     30  f0e5		       11		      .BYTE.b	%00010001
     31  f0e6		       11		      .BYTE.b	%00010001
     32  f0e7
     33  f0e7		       77		      .BYTE.b	%01110111
     34  f0e8		       44		      .BYTE.b	%01000100
     35  f0e9		       77		      .BYTE.b	%01110111
     36  f0ea		       11		      .BYTE.b	%00010001
     37  f0eb		       77		      .BYTE.b	%01110111
     38  f0ec
     39  f0ec		       77		      .BYTE.b	%01110111
     40  f0ed		       44		      .BYTE.b	%01000100
     41  f0ee		       77		      .BYTE.b	%01110111
     42  f0ef		       55		      .BYTE.b	%01010101
     43  f0f0		       77		      .BYTE.b	%01110111
     44  f0f1
     45  f0f1		       77		      .BYTE.b	%01110111
     46  f0f2		       11		      .BYTE.b	%00010001
     47  f0f3		       22		      .BYTE.b	%00100010
     48  f0f4		       22		      .BYTE.b	%00100010
     49  f0f5		       22		      .BYTE.b	%00100010
     50  f0f6
     51  f0f6		       77		      .BYTE.b	%01110111
     52  f0f7		       55		      .BYTE.b	%01010101
     53  f0f8		       77		      .BYTE.b	%01110111
     54  f0f9		       55		      .BYTE.b	%01010101
     55  f0fa		       77		      .BYTE.b	%01110111
     56  f0fb
     57  f0fb		       77		      .BYTE.b	%01110111
     58  f0fc		       55		      .BYTE.b	%01010101
     59  f0fd		       77		      .BYTE.b	%01110111
     60  f0fe		       11		      .BYTE.b	%00010001
     61  f0ff		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f100					      include	"objects/score_digits_flip.asm"
      1  f100				   ScoreDigitsFlip
      2  f100
      3  f100		       ee		      .BYTE.b	%11101110
      4  f101		       aa		      .BYTE.b	%10101010
      5  f102		       aa		      .BYTE.b	%10101010
      6  f103		       aa		      .BYTE.b	%10101010
      7  f104		       ee		      .BYTE.b	%11101110
      8  f105
      9  f105		       88		      .BYTE.b	%10001000
     10  f106		       88		      .BYTE.b	%10001000
     11  f107		       88		      .BYTE.b	%10001000
     12  f108		       88		      .BYTE.b	%10001000
     13  f109		       88		      .BYTE.b	%10001000
     14  f10a
     15  f10a		       ee		      .BYTE.b	%11101110
     16  f10b		       88		      .BYTE.b	%10001000
     17  f10c		       ee		      .BYTE.b	%11101110
     18  f10d		       22		      .BYTE.b	%00100010
     19  f10e		       ee		      .BYTE.b	%11101110
     20  f10f
     21  f10f		       ee		      .BYTE.b	%11101110
     22  f110		       88		      .BYTE.b	%10001000
     23  f111		       cc		      .BYTE.b	%11001100
     24  f112		       88		      .BYTE.b	%10001000
     25  f113		       ee		      .BYTE.b	%11101110
     26  f114
     27  f114		       aa		      .BYTE.b	%10101010
     28  f115		       aa		      .BYTE.b	%10101010
     29  f116		       ee		      .BYTE.b	%11101110
     30  f117		       88		      .BYTE.b	%10001000
     31  f118		       88		      .BYTE.b	%10001000
     32  f119
     33  f119		       ee		      .BYTE.b	%11101110
     34  f11a		       22		      .BYTE.b	%00100010
     35  f11b		       ee		      .BYTE.b	%11101110
     36  f11c		       88		      .BYTE.b	%10001000
     37  f11d		       ee		      .BYTE.b	%11101110
     38  f11e
     39  f11e		       ee		      .BYTE.b	%11101110
     40  f11f		       22		      .BYTE.b	%00100010
     41  f120		       ee		      .BYTE.b	%11101110
     42  f121		       aa		      .BYTE.b	%10101010
     43  f122		       ee		      .BYTE.b	%11101110
     44  f123
     45  f123		       ee		      .BYTE.b	%11101110
     46  f124		       88		      .BYTE.b	%10001000
     47  f125		       44		      .BYTE.b	%01000100
     48  f126		       44		      .BYTE.b	%01000100
     49  f127		       44		      .BYTE.b	%01000100
     50  f128
     51  f128		       ee		      .BYTE.b	%11101110
     52  f129		       aa		      .BYTE.b	%10101010
     53  f12a		       ee		      .BYTE.b	%11101110
     54  f12b		       aa		      .BYTE.b	%10101010
     55  f12c		       ee		      .BYTE.b	%11101110
     56  f12d
     57  f12d		       ee		      .BYTE.b	%11101110
     58  f12e		       aa		      .BYTE.b	%10101010
     59  f12f		       ee		      .BYTE.b	%11101110
     60  f130		       88		      .BYTE.b	%10001000
     61  f131		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f132					      include	"objects/score_label.asm"
      1  f132				   ScoreLabel
      2  f132
      3  f132		       20		      .BYTE.b	%00100000
      4  f133		       50		      .BYTE.b	%01010000
      5  f134		       ee		      .BYTE.b	%11101110
      6  f135		       00		      .BYTE.b	%00000000
      7  f136		       57		      .BYTE.b	%01010111
      8  f137		       00		      .BYTE.b	%00000000
      9  f138
     10  f138		       20		      .BYTE.b	%00100000
     11  f139		       50		      .BYTE.b	%01010000
     12  f13a		       4a		      .BYTE.b	%01001010
     13  f13b		       00		      .BYTE.b	%00000000
     14  f13c		       55		      .BYTE.b	%01010101
     15  f13d		       00		      .BYTE.b	%00000000
     16  f13e
     17  f13e		       20		      .BYTE.b	%00100000
     18  f13f		       50		      .BYTE.b	%01010000
     19  f140		       4e		      .BYTE.b	%01001110
     20  f141		       00		      .BYTE.b	%00000000
     21  f142		       77		      .BYTE.b	%01110111
     22  f143		       00		      .BYTE.b	%00000000
     23  f144
     24  f144		       20		      .BYTE.b	%00100000
     25  f145		       50		      .BYTE.b	%01010000
     26  f146		       42		      .BYTE.b	%01000010
     27  f147		       00		      .BYTE.b	%00000000
     28  f148		       54		      .BYTE.b	%01010100
     29  f149		       00		      .BYTE.b	%00000000
     30  f14a
     31  f14a		       e0		      .BYTE.b	%11100000
     32  f14b		       20		      .BYTE.b	%00100000
     33  f14c		       42		      .BYTE.b	%01000010
     34  f14d		       00		      .BYTE.b	%00000000
     35  f14e		       54		      .BYTE.b	%01010100
     36  f14f		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    149  f150
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f150					      include	"objects/web_image.asm"
      1  f150				   WebImagePF0
      2  f150		       00		      .BYTE.b	%00000000
      3  f151		       00		      .BYTE.b	%00000000
      4  f152		       00		      .BYTE.b	%00000000
      5  f153		       00		      .BYTE.b	%00000000
      6  f154		       00		      .BYTE.b	%00000000
      7  f155		       00		      .BYTE.b	%00000000
      8  f156		       00		      .BYTE.b	%00000000
      9  f157		       00		      .BYTE.b	%00000000
     10  f158		       30		      .BYTE.b	%00110000
     11  f159		       e0		      .BYTE.b	%11100000
     12  f15a		       20		      .BYTE.b	%00100000
     13  f15b		       40		      .BYTE.b	%01000000
     14  f15c		       40		      .BYTE.b	%01000000
     15  f15d		       80		      .BYTE.b	%10000000
     16  f15e		       80		      .BYTE.b	%10000000
     17  f15f		       40		      .BYTE.b	%01000000
     18  f160		       40		      .BYTE.b	%01000000
     19  f161		       20		      .BYTE.b	%00100000
     20  f162		       e0		      .BYTE.b	%11100000
     21  f163		       30		      .BYTE.b	%00110000
     22  f164		       00		      .BYTE.b	%00000000
     23  f165		       00		      .BYTE.b	%00000000
     24  f166		       00		      .BYTE.b	%00000000
     25  f167		       00		      .BYTE.b	%00000000
     26  f168		       00		      .BYTE.b	%00000000
     27  f169		       00		      .BYTE.b	%00000000
     28  f16a		       00		      .BYTE.b	%00000000
     29  f16b		       00		      .BYTE.b	%00000000
     30  f16c
     31  f16c				   WebImagePF1
     32  f16c		       02		      .BYTE.b	%00000010
     33  f16d		       01		      .BYTE.b	%00000001
     34  f16e		       00		      .BYTE.b	%00000000
     35  f16f		       00		      .BYTE.b	%00000000
     36  f170		       01		      .BYTE.b	%00000001
     37  f171		       01		      .BYTE.b	%00000001
     38  f172		       02		      .BYTE.b	%00000010
     39  f173		       0c		      .BYTE.b	%00001100
     40  f174		       30		      .BYTE.b	%00110000
     41  f175		       c0		      .BYTE.b	%11000000
     42  f176		       38		      .BYTE.b	%00111000
     43  f177		       07		      .BYTE.b	%00000111
     44  f178		       00		      .BYTE.b	%00000000
     45  f179		       00		      .BYTE.b	%00000000
     46  f17a		       00		      .BYTE.b	%00000000
     47  f17b		       00		      .BYTE.b	%00000000
     48  f17c		       07		      .BYTE.b	%00000111
     49  f17d		       38		      .BYTE.b	%00111000
     50  f17e		       c0		      .BYTE.b	%11000000
     51  f17f		       30		      .BYTE.b	%00110000
     52  f180		       0c		      .BYTE.b	%00001100
     53  f181		       02		      .BYTE.b	%00000010
     54  f182		       01		      .BYTE.b	%00000001
     55  f183		       01		      .BYTE.b	%00000001
     56  f184		       00		      .BYTE.b	%00000000
     57  f185		       00		      .BYTE.b	%00000000
     58  f186		       01		      .BYTE.b	%00000001
     59  f187		       02		      .BYTE.b	%00000010
     60  f188
     61  f188				   WebImagePF2
     62  f188		       08		      .BYTE.b	%00001000
     63  f189		       04		      .BYTE.b	%00000100
     64  f18a		       03		      .BYTE.b	%00000011
     65  f18b		       3f		      .BYTE.b	%00111111
     66  f18c		       c2		      .BYTE.b	%11000010
     67  f18d		       04		      .BYTE.b	%00000100
     68  f18e		       08		      .BYTE.b	%00001000
     69  f18f		       08		      .BYTE.b	%00001000
     70  f190		       10		      .BYTE.b	%00010000
     71  f191		       20		      .BYTE.b	%00100000
     72  f192		       20		      .BYTE.b	%00100000
     73  f193		       41		      .BYTE.b	%01000001
     74  f194		       8e		      .BYTE.b	%10001110
     75  f195		       f0		      .BYTE.b	%11110000
     76  f196		       f0		      .BYTE.b	%11110000
     77  f197		       8e		      .BYTE.b	%10001110
     78  f198		       41		      .BYTE.b	%01000001
     79  f199		       20		      .BYTE.b	%00100000
     80  f19a		       20		      .BYTE.b	%00100000
     81  f19b		       10		      .BYTE.b	%00010000
     82  f19c		       08		      .BYTE.b	%00001000
     83  f19d		       08		      .BYTE.b	%00001000
     84  f19e		       04		      .BYTE.b	%00000100
     85  f19f		       c2		      .BYTE.b	%11000010
     86  f1a0		       3f		      .BYTE.b	%00111111
     87  f1a1		       03		      .BYTE.b	%00000011
     88  f1a2		       04		      .BYTE.b	%00000100
     89  f1a3		       08		      .BYTE.b	%00001000
------- FILE kernel.asm
    151  f1a4
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f1a4					      include	"objects/spider_sprite.asm"
      1  f1a4				   SpiderSprite
      2  f1a4
      3  f1a4		       99		      .BYTE.b	%10011001
      4  f1a5		       bd		      .BYTE.b	%10111101
      5  f1a6		       bd		      .BYTE.b	%10111101
      6  f1a7		       bd		      .BYTE.b	%10111101
      7  f1a8		       7e		      .BYTE.b	%01111110
      8  f1a9		       3c		      .BYTE.b	%00111100
      9  f1aa		       18		      .BYTE.b	%00011000
     10  f1ab		       3c		      .BYTE.b	%00111100
     11  f1ac		       3c		      .BYTE.b	%00111100
     12  f1ad		       7e		      .BYTE.b	%01111110
     13  f1ae		       99		      .BYTE.b	%10011001
     14  f1af		       99		      .BYTE.b	%10011001
     15  f1b0		       bd		      .BYTE.b	%10111101
     16  f1b1		       db		      .BYTE.b	%11011011
     17  f1b2		       bd		      .BYTE.b	%10111101
     18  f1b3		       99		      .BYTE.b	%10011001
     19  f1b4
     20  f1b4		       c7		      .BYTE.b	%11000111
     21  f1b5		       c7		      .BYTE.b	%11000111
     22  f1b6		       28		      .BYTE.b	%00101000
     23  f1b7		       28		      .BYTE.b	%00101000
     24  f1b8		       3a		      .BYTE.b	%00111010
     25  f1b9		       7a		      .BYTE.b	%01111010
     26  f1ba		       fd		      .BYTE.b	%11111101
     27  f1bb		       ff		      .BYTE.b	%11111111
     28  f1bc		       ff		      .BYTE.b	%11111111
     29  f1bd		       fd		      .BYTE.b	%11111101
     30  f1be		       7a		      .BYTE.b	%01111010
     31  f1bf		       3a		      .BYTE.b	%00111010
     32  f1c0		       28		      .BYTE.b	%00101000
     33  f1c1		       28		      .BYTE.b	%00101000
     34  f1c2		       c7		      .BYTE.b	%11000111
     35  f1c3		       c7		      .BYTE.b	%11000111
     36  f1c4
     37  f1c4		       99		      .BYTE.b	%10011001
     38  f1c5		       bd		      .BYTE.b	%10111101
     39  f1c6		       db		      .BYTE.b	%11011011
     40  f1c7		       bd		      .BYTE.b	%10111101
     41  f1c8		       99		      .BYTE.b	%10011001
     42  f1c9		       99		      .BYTE.b	%10011001
     43  f1ca		       7e		      .BYTE.b	%01111110
     44  f1cb		       3c		      .BYTE.b	%00111100
     45  f1cc		       3c		      .BYTE.b	%00111100
     46  f1cd		       18		      .BYTE.b	%00011000
     47  f1ce		       3c		      .BYTE.b	%00111100
     48  f1cf		       7e		      .BYTE.b	%01111110
     49  f1d0		       bd		      .BYTE.b	%10111101
     50  f1d1		       bd		      .BYTE.b	%10111101
     51  f1d2		       bd		      .BYTE.b	%10111101
     52  f1d3		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    153  f1d4
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1d4					      include	"objects/swatter_sprite.asm"
      1  f1d4				   SwatterSprite
      2  f1d4
      3  f1d4		       18		      .BYTE.b	%00011000
      4  f1d5		       34		      .BYTE.b	%00110100
      5  f1d6		       2c		      .BYTE.b	%00101100
      6  f1d7		       34		      .BYTE.b	%00110100
      7  f1d8		       6a		      .BYTE.b	%01101010
      8  f1d9		       56		      .BYTE.b	%01010110
      9  f1da		       6a		      .BYTE.b	%01101010
     10  f1db		       56		      .BYTE.b	%01010110
     11  f1dc		       ab		      .BYTE.b	%10101011
     12  f1dd		       d5		      .BYTE.b	%11010101
     13  f1de		       ab		      .BYTE.b	%10101011
     14  f1df		       d5		      .BYTE.b	%11010101
     15  f1e0		       ab		      .BYTE.b	%10101011
     16  f1e1		       d5		      .BYTE.b	%11010101
     17  f1e2		       ab		      .BYTE.b	%10101011
     18  f1e3		       d5		      .BYTE.b	%11010101
     19  f1e4		       6a		      .BYTE.b	%01101010
     20  f1e5		       56		      .BYTE.b	%01010110
     21  f1e6		       3c		      .BYTE.b	%00111100
     22  f1e7		       3c		      .BYTE.b	%00111100
------- FILE kernel.asm
    155  f1e8
------- FILE logo_image.asm LEVEL 2 PASS 2
      0  f1e8					      include	"logo_image.asm"
      1  f1e8				   LogoImage1
      2  f1e8		       03		      .BYTE.b	%00000011
      3  f1e9		       03		      .BYTE.b	%00000011
      4  f1ea		       13		      .BYTE.b	%00010011
      5  f1eb		       33		      .BYTE.b	%00110011
      6  f1ec		       63		      .BYTE.b	%01100011
      7  f1ed		       c3		      .BYTE.b	%11000011
      8  f1ee		       c3		      .BYTE.b	%11000011
      9  f1ef		       63		      .BYTE.b	%01100011
     10  f1f0		       33		      .BYTE.b	%00110011
     11  f1f1		       13		      .BYTE.b	%00010011
     12  f1f2		       03		      .BYTE.b	%00000011
     13  f1f3		       03		      .BYTE.b	%00000011
     14  f1f4
     15  f1f4				   LogoImage2
     16  f1f4		       83		      .BYTE.b	%10000011
     17  f1f5		       c7		      .BYTE.b	%11000111
     18  f1f6		       ef		      .BYTE.b	%11101111
     19  f1f7		       6e		      .BYTE.b	%01101110
     20  f1f8		       6c		      .BYTE.b	%01101100
     21  f1f9		       6c		      .BYTE.b	%01101100
     22  f1fa		       6c		      .BYTE.b	%01101100
     23  f1fb		       6c		      .BYTE.b	%01101100
     24  f1fc		       6e		      .BYTE.b	%01101110
     25  f1fd		       ef		      .BYTE.b	%11101111
     26  f1fe		       c7		      .BYTE.b	%11000111
     27  f1ff		       83		      .BYTE.b	%10000011
     28  f200
     29  f200				   LogoImage3
     30  f200		       8f		      .BYTE.b	%10001111
     31  f201		       cf		      .BYTE.b	%11001111
     32  f202		       ef		      .BYTE.b	%11101111
     33  f203		       6d		      .BYTE.b	%01101101
     34  f204		       2c		      .BYTE.b	%00101100
     35  f205		       0c		      .BYTE.b	%00001100
     36  f206		       0c		      .BYTE.b	%00001100
     37  f207		       4c		      .BYTE.b	%01001100
     38  f208		       6d		      .BYTE.b	%01101101
     39  f209		       ef		      .BYTE.b	%11101111
     40  f20a		       cf		      .BYTE.b	%11001111
     41  f20b		       8f		      .BYTE.b	%10001111
     42  f20c
     43  f20c				   LogoImage4
     44  f20c		       00		      .BYTE.b	%00000000
     45  f20d		       01		      .BYTE.b	%00000001
     46  f20e		       13		      .BYTE.b	%00010011
     47  f20f		       33		      .BYTE.b	%00110011
     48  f210		       63		      .BYTE.b	%01100011
     49  f211		       c3		      .BYTE.b	%11000011
     50  f212		       c3		      .BYTE.b	%11000011
     51  f213		       63		      .BYTE.b	%01100011
     52  f214		       33		      .BYTE.b	%00110011
     53  f215		       13		      .BYTE.b	%00010011
     54  f216		       01		      .BYTE.b	%00000001
     55  f217		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    157  f218
    158  f218				   InitSystem
    159  f218
    160  f218				   .init_clean
    161  f218							; Resets RAM, TIA registers, and CPU registers
      0  f218					      CLEAN_START
      1  f218		       78		      sei
      2  f219		       d8		      cld
      3  f21a
      4  f21a		       a2 00		      ldx	#0
      5  f21c		       8a		      txa
      6  f21d		       a8		      tay
      7  f21e		       ca	   .CLEAR_STACK dex
      8  f21f		       9a		      txs
      9  f220		       48		      pha
     10  f221		       d0 fb		      bne	.CLEAR_STACK
     11  f223
    163  f223
    164  f223				   .init_tia
    165  f223							; Define default TIA register values
    166  f223
    167  f223							; Initialize copies
    168  f223							;    lda #0
    169  f223							;    sta CtrlPf
    170  f223							;    sta NuSiz0
    171  f223							;    sta NuSiz1
    172  f223
    173  f223							; Set background color
    174  f223							;    lda #$00	      ; Black
    175  f223							;    sta COLUBK
    176  f223
    177  f223							; Set the playfield and player color
    178  f223							;    lda #$0E	      ; White
    179  f223							;    sta COLUPF
    180  f223							;    sta COLUP0
    181  f223							;    sta COLUP1
    182  f223
    183  f223							; Playfield Control
    184  f223							;    lda #%00000001  ; 1 for mirroring
    185  f223							;    sta CtrlPf
    186  f223							;    sta CTRLPF
    187  f223
    188  f223							; Disable Game Elements
    189  f223							;    lda #$00
    190  f223							;    sta ENABL       ; Turn off ball
    191  f223							;    sta ENAM0       ; Turn off player 1 missile
    192  f223							;    sta ENAM1       ; Turn off player 2 missile
    193  f223							;    sta GRP0	      ; Turn off player 1
    194  f223							;    sta GRP1	      ; Turn off player 2
    195  f223
    196  f223							; Empty playfield
    197  f223							;    lda #%00000000
    198  f223							;    sta PF0
    199  f223							;    sta PF1
    200  f223							;    sta PF2
    201  f223
    202  f223				   .init_seed
    203  f223							; Seed the random number generator
    204  f223		       ad 84 02 	      lda	INTIM	; Unknown value
    205  f226		       85 84		      sta	Rand8	; Use as seed
    206  f228		       49 ff		      eor	#$FF	; Flip bits
    207  f22a		       85 85		      sta	Rand16	; Just in case INTIM was 0
    208  f22c
    209  f22c				   .init_game
    210  f22c
    211  f22c		       20 94 f2 	      jsr	LogoInit
    212  f22f
    213  f22f							;=======================================
    214  f22f							; Game Kernel
    215  f22f							;=======================================
    216  f22f
    217  f22f				   Main
    218  f22f
    219  f22f		       20 3e f2 	      jsr	VerticalSync
    220  f232		       20 57 f2 	      jsr	VerticalBlank
    221  f235		       20 6a f2 	      jsr	Kernel
    222  f238		       20 71 f2 	      jsr	OverScan
    223  f23b		       4c 2f f2 	      jmp	Main
    224  f23e
    225  f23e				   VerticalSync
    226  f23e
    227  f23e		       a9 00		      lda	#0
    228  f240		       85 01		      sta	VBLANK
    229  f242
    230  f242							; Turn on Vertical Sync signal and setup timer
    231  f242		       a9 02		      lda	#2
    232  f244		       85 00		      sta	VSYNC
    233  f246
    234  f246							; Increment frame count and reduce frame counter
    235  f246		       e6 8c		      inc	Frame
    236  f248		       c6 8d		      dec	FrameTimer
    237  f24a		       c6 8e		      dec	FrameTimer+1
    238  f24c
    239  f24c							; VSYNCH signal scanlines
    240  f24c					      REPEAT	#KERNEL_VSYNC
    241  f24c		       85 02		      sta	WSYNC
    240  f24c					      REPEND
    241  f24e		       85 02		      sta	WSYNC
    240  f24e					      REPEND
    241  f250		       85 02		      sta	WSYNC
    242  f252					      REPEND
    243  f252
    244  f252							; Turn off Vertical Sync signal
    245  f252		       a9 00		      lda	#0
    246  f254		       85 00		      sta	VSYNC
    247  f256
    248  f256				   .vsync_return
    249  f256		       60		      rts
    250  f257
    251  f257				   VerticalBlank
    252  f257							; Setup Timer
    253  f257		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    254  f259		       8d 96 02 	      sta	TIM64T
    255  f25c
    256  f25c				   .vblank_logic
    257  f25c							; Perform Game Logic
    258  f25c		       20 67 f2 	      jsr	.vblank_logic_call_ptr
    259  f25f
    260  f25f				   .vblank_loop
    261  f25f							; WSYNC until Timer is complete
    262  f25f		       85 02		      sta	WSYNC
    263  f261		       ad 84 02 	      lda	INTIM
    264  f264		       d0 f9		      bne	.vblank_loop
    265  f266
    266  f266				   .vblank_return
    267  f266		       60		      rts
    268  f267
    269  f267				   .vblank_logic_call_ptr
    270  f267		       6c 86 00 	      jmp	(VBlankPtr)
    271  f26a
    272  f26a				   Kernel
    273  f26a
    274  f26a							; Perform Selected Kernel
    275  f26a		       20 6e f2 	      jsr	.kernel_call_ptr
    276  f26d		       60		      rts
    277  f26e
    278  f26e				   .kernel_call_ptr
    279  f26e		       6c 88 00 	      jmp	(KernelPtr)
    280  f271
    281  f271				   OverScan
    282  f271
    283  f271							; End of screen, enter blanking
    284  f271		       a9 42		      lda	#%01000010
    285  f273		       85 01		      sta	VBLANK
    286  f275
    287  f275							; Setup Timer
    288  f275		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    289  f277		       8d 96 02 	      sta	TIM64T
    290  f27a
    291  f27a							;.overscan_reset:
    292  f27a							; Check for reset switch
    293  f27a		       ad 82 02 	      lda	SWCHB
    294  f27d		       4a		      lsr		; Push D0 to carry (C)
    295  f27e		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    296  f280
    297  f280							; Perform reset
    298  f280		       20 94 f2 	      jsr	LogoInit	; No need for logic
    299  f283		       4c 89 f2 	      jmp	.overscan_loop
    300  f286
    301  f286				   .overscan_logic
    302  f286							; Perform OverScan Logic
    303  f286		       20 91 f2 	      jsr	.overscan_logic_call_ptr
    304  f289
    305  f289				   .overscan_loop
    306  f289							; WSYNC until Timer is complete
    307  f289		       85 02		      sta	WSYNC
    308  f28b		       ad 84 02 	      lda	INTIM
    309  f28e		       d0 f9		      bne	.overscan_loop
    310  f290
    311  f290				   .overscan_return
    312  f290		       60		      rts
    313  f291
    314  f291				   .overscan_logic_call_ptr
    315  f291		       6c 8a 00 	      jmp	(OverScanPtr)
    316  f294
    317  f294							;================
    318  f294							; State Code
    319  f294							;================
    320  f294
------- FILE logo.asm LEVEL 2 PASS 2
      0  f294					      include	"logo.asm"
      1  f294							;================
      2  f294							; Constants
      3  f294							;================
      4  f294
      5  f294		       00 8c	   LOGO_FRAMES =	140
      6  f294
      7  f294		       00 00	   LOGO_BG_COLOR =	#$00
      8  f294		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f294		       00 00	   LOGO_BG_BW_COLOR =	#$00
     10  f294		       00 0e	   LOGO_FG_BW_COLOR =	#$0E
     11  f294
     12  f294		       00 0c	   LOGO_IMAGE_SIZE =	12
     13  f294		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     14  f294		       00 3c	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     15  f294		       00 42	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     16  f294		       00 38	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-10	; The extra 10 is for processing overflow
     17  f294		       00 06	   LOGO_IMAGE_ANIM_SPEED =	#6
     18  f294
     19  f294				   LogoInit
     20  f294
     21  f294							; Setup logic and kernel
      0  f294					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f294				   .POINTER   SET	VBlankPtr
      2  f294				   .ADDRESS   SET	LogoVerticalBlank
      3  f294
      4  f294		       a9 bf		      LDA	#<.ADDRESS
      5  f296		       85 86		      STA	.POINTER
      6  f298		       a9 f2		      LDA	#>.ADDRESS
      7  f29a		       85 87		      STA	.POINTER+1
      8  f29c
      0  f29c					      SET_POINTER	KernelPtr, LogoKernel
      1  f29c				   .POINTER   SET	KernelPtr
      2  f29c				   .ADDRESS   SET	LogoKernel
      3  f29c
      4  f29c		       a9 ed		      LDA	#<.ADDRESS
      5  f29e		       85 88		      STA	.POINTER
      6  f2a0		       a9 f2		      LDA	#>.ADDRESS
      7  f2a2		       85 89		      STA	.POINTER+1
      8  f2a4
      0  f2a4					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f2a4				   .POINTER   SET	OverScanPtr
      2  f2a4				   .ADDRESS   SET	LogoOverScan
      3  f2a4
      4  f2a4		       a9 c3		      LDA	#<.ADDRESS
      5  f2a6		       85 8a		      STA	.POINTER
      6  f2a8		       a9 f2		      LDA	#>.ADDRESS
      7  f2aa		       85 8b		      STA	.POINTER+1
      8  f2ac
     25  f2ac
     26  f2ac							; Clean audio
     27  f2ac		       a9 00		      lda	#0
     28  f2ae		       85 19		      sta	AUDV0
     29  f2b0		       85 1a		      sta	AUDV1
     30  f2b2
     31  f2b2							; Set initial button state
     32  f2b2							;    lda #0
     33  f2b2		       85 8f		      sta	InputState
     34  f2b4
     35  f2b4							; Setup frame counters
     36  f2b4							;    lda #0
     37  f2b4		       85 8c		      sta	Frame
     38  f2b6		       a9 8c		      lda	#LOGO_FRAMES
     39  f2b8		       85 8d		      sta	FrameTimer
     40  f2ba
     41  f2ba							; Setup Image Animation
     42  f2ba		       a9 0b		      lda	#LOGO_IMAGE_SIZE-1
     43  f2bc		       85 9f		      sta	WebIndex
     44  f2be
     45  f2be		       60		      rts
     46  f2bf
     47  f2bf				   LogoVerticalBlank
     48  f2bf		       20 c7 f2 	      jsr	LogoAnimation
     49  f2c2		       60		      rts
     50  f2c3
     51  f2c3				   LogoOverScan
     52  f2c3		       20 d8 f2 	      jsr	LogoState
     53  f2c6		       60		      rts
     54  f2c7
     55  f2c7				   LogoAnimation
     56  f2c7		       a5 8c		      lda	Frame
     57  f2c9		       c9 06		      cmp	#LOGO_IMAGE_ANIM_SPEED
     58  f2cb		       d0 0a		      bne	.logo_animation_return
     59  f2cd
     60  f2cd		       a9 00		      lda	#0
     61  f2cf		       85 8c		      sta	Frame
     62  f2d1
     63  f2d1		       a6 9f		      ldx	WebIndex
     64  f2d3		       f0 02		      beq	.logo_animation_return
     65  f2d5
     66  f2d5							; Add another visible line
     67  f2d5		       c6 9f		      dec	WebIndex
     68  f2d7
     69  f2d7				   .logo_animation_return
     70  f2d7		       60		      rts
     71  f2d8
     72  f2d8				   LogoState
     73  f2d8		       a5 8d		      lda	FrameTimer
     74  f2da		       f0 0d		      beq	.logo_state_next
     75  f2dc
     76  f2dc							; Check if Fire Button on controller 1 is released
     77  f2dc		       a5 0c		      lda	INPT4
     78  f2de		       30 05		      bmi	.logo_state_check
     79  f2e0
     80  f2e0				   .logo_state_on
     81  f2e0		       a9 01		      lda	#1
     82  f2e2		       85 8f		      sta	InputState
     83  f2e4		       60		      rts
     84  f2e5
     85  f2e5				   .logo_state_check
     86  f2e5		       a6 8f		      ldx	InputState
     87  f2e7		       f0 03		      beq	.logo_state_return
     88  f2e9
     89  f2e9				   .logo_state_next
     90  f2e9							; Button is released or timer runs out, load title screen
     91  f2e9		       20 7c f3 	      jsr	TitleInit
     92  f2ec
     93  f2ec				   .logo_state_return
     94  f2ec		       60		      rts
     95  f2ed
     96  f2ed				   LogoKernel
     97  f2ed
     98  f2ed							; Playfield Control
     99  f2ed		       a9 01		      lda	#%00000001	; Mirror
    100  f2ef							;sta CtrlPf
    101  f2ef		       85 0a		      sta	CTRLPF
    102  f2f1
    103  f2f1							; Load Colors
    104  f2f1		       ad 82 02 	      lda	SWCHB
    105  f2f4					      REPEAT	4
    106  f2f4		       4a		      lsr
    105  f2f4					      REPEND
    106  f2f5		       4a		      lsr
    105  f2f5					      REPEND
    106  f2f6		       4a		      lsr
    105  f2f6					      REPEND
    106  f2f7		       4a		      lsr
    107  f2f8					      REPEND
    108  f2f8		       90 07		      bcc	.logo_kernel_bw
    109  f2fa
    110  f2fa				   .logo_kernel_color
    111  f2fa		       a2 00		      ldx	#LOGO_BG_COLOR
    112  f2fc		       a0 c6		      ldy	#LOGO_FG_COLOR
    113  f2fe		       4c 05 f3 	      jmp	.logo_kernel_set
    114  f301
    115  f301				   .logo_kernel_bw
    116  f301		       a9 00		      lda	#LOGO_BG_BW_COLOR
    117  f303		       a9 0e		      lda	#LOGO_FG_BW_COLOR
    118  f305
    119  f305				   .logo_kernel_set
    120  f305		       86 09		      stx	COLUBK
    121  f307		       84 08		      sty	COLUPF
    122  f309
    123  f309				   .logo_kernel_start
    124  f309
    125  f309							; Turn on display
    126  f309		       a9 00		      lda	#0
    127  f30b		       85 01		      sta	VBLANK
    128  f30d
    129  f30d		       a4 9f		      ldy	WebIndex
    130  f30f		       d0 06		      bne	.logo_kernel_top_anim_padding
    131  f311
    132  f311				   .logo_kernel_top_padding
    133  f311							; Top Padding
    134  f311		       20 5f f3 	      jsr	LogoPadding
    135  f314		       4c 24 f3 	      jmp	.logo_kernel_image
    136  f317
    137  f317				   .logo_kernel_top_anim_padding
    138  f317		       20 6f f3 	      jsr	LogoAnimPadding
    139  f31a
    140  f31a				   .logo_kernel_image_animation_start
    141  f31a		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    142  f31c
    143  f31c				   .logo_kernel_image_animation_loop
    144  f31c		       85 02		      sta	WSYNC
    145  f31e		       ca		      dex
    146  f31f		       d0 fb		      bne	.logo_kernel_image_animation_loop
    147  f321
    148  f321		       88		      dey
    149  f322		       10 f6		      bpl	.logo_kernel_image_animation_start
    150  f324
    151  f324				   .logo_kernel_image
    152  f324
    153  f324		       a2 0b		      ldx	#LOGO_IMAGE_SIZE-1
    154  f326		       a0 03		      ldy	#LOGO_IMAGE_LINE_SIZE-2
    155  f328							; The extra 2 on line size is for processing overflow
    156  f328
    157  f328							;dex
    158  f328		       e4 9f		      cpx	WebIndex
    159  f32a		       90 2f		      bcc	.logo_kernel_bottom_padding
    160  f32c
    161  f32c				   .logo_kernel_image_line
    162  f32c		       85 02		      sta	WSYNC
    163  f32e
    164  f32e		       bd e8 f1 	      lda	LogoImage1,x
    165  f331		       85 0e		      sta	PF1
    166  f333		       bd f4 f1 	      lda	LogoImage2,x
    167  f336		       85 0f		      sta	PF2
    168  f338
      0  f338					      sleep	26
      1  f338				   .CYCLES    SET	26
      2  f338
      3  f338				  -	      IF	.CYCLES < 2
      4  f338				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f338				  -	      ERR
      6  f338					      ENDIF
      7  f338
      8  f338				  -	      IF	.CYCLES & 1
      9  f338				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f338				  -	      nop	0
     11  f338				  -	      ELSE
     12  f338				  -	      bit	VSYNC
     13  f338				  -	      ENDIF
     14  f338				  -.CYCLES    SET	.CYCLES - 3
     15  f338					      ENDIF
     16  f338
     17  f338					      REPEAT	.CYCLES / 2
     18  f338		       ea		      nop
     17  f338					      REPEND
     18  f339		       ea		      nop
     17  f339					      REPEND
     18  f33a		       ea		      nop
     17  f33a					      REPEND
     18  f33b		       ea		      nop
     17  f33b					      REPEND
     18  f33c		       ea		      nop
     17  f33c					      REPEND
     18  f33d		       ea		      nop
     17  f33d					      REPEND
     18  f33e		       ea		      nop
     17  f33e					      REPEND
     18  f33f		       ea		      nop
     17  f33f					      REPEND
     18  f340		       ea		      nop
     17  f340					      REPEND
     18  f341		       ea		      nop
     17  f341					      REPEND
     18  f342		       ea		      nop
     17  f342					      REPEND
     18  f343		       ea		      nop
     17  f343					      REPEND
     18  f344		       ea		      nop
     19  f345					      REPEND
    170  f345
    171  f345		       bd 00 f2 	      lda	LogoImage3,x
    172  f348		       85 0f		      sta	PF2
    173  f34a		       bd 0c f2 	      lda	LogoImage4,x
    174  f34d		       85 0e		      sta	PF1
    175  f34f
    176  f34f		       88		      dey
    177  f350		       d0 da		      bne	.logo_kernel_image_line
    178  f352
    179  f352		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    180  f354
    181  f354		       e4 9f		      cpx	WebIndex
    182  f356		       90 03		      bcc	.logo_kernel_bottom_padding
    183  f358
    184  f358		       ca		      dex
    185  f359		       10 d1		      bpl	.logo_kernel_image_line
    186  f35b
    187  f35b				   .logo_kernel_bottom_padding
    188  f35b							; Bottom Padding
    189  f35b		       20 5f f3 	      jsr	LogoPadding
    190  f35e
    191  f35e				   .logo_kernel_image_return
    192  f35e		       60		      rts
    193  f35f
    194  f35f				   LogoPadding
    195  f35f		       a9 00		      lda	#0
    196  f361		       85 0d		      sta	PF0
    197  f363		       85 0e		      sta	PF1
    198  f365		       85 0f		      sta	PF2
    199  f367
    200  f367		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    201  f369				   .logo_padding_loop
    202  f369		       85 02		      sta	WSYNC
    203  f36b		       ca		      dex
    204  f36c		       d0 fb		      bne	.logo_padding_loop
    205  f36e
    206  f36e		       60		      rts
    207  f36f
    208  f36f				   LogoAnimPadding
    209  f36f		       a9 00		      lda	#0
    210  f371		       85 0d		      sta	PF0
    211  f373		       85 0e		      sta	PF1
    212  f375		       85 0f		      sta	PF2
    213  f377
    214  f377		       a2 38		      ldx	#LOGO_IMAGE_ANIM_PADDING
    215  f379		       4c 69 f3 	      jmp	.logo_padding_loop
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f37c					      include	"title.asm"
      1  f37c							;================
      2  f37c							; Constants
      3  f37c							;================
      4  f37c
      5  f37c		       00 00	   TITLE_BG_COLOR =	#$00
      6  f37c		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f37c		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f37c		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f37c		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f37c
     11  f37c		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f37c		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f37c		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f37c		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f37c		       00 09	   TITLE_AUDIO_STEP =	9
     16  f37c
     17  f37c		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f37c		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f37c		       00 07	   TITLE_LABEL_LINE =	7
     20  f37c
     21  f37c		       00 10	   TITLE_GAP_SIZE =	#16
     22  f37c
     23  f37c		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f37c		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f37c		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f37c
     27  f37c				   TitleInit
     28  f37c
     29  f37c							; Setup logic and kernel
      0  f37c					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f37c				   .POINTER   SET	VBlankPtr
      2  f37c				   .ADDRESS   SET	TitleVerticalBlank
      3  f37c
      4  f37c		       a9 c3		      LDA	#<.ADDRESS
      5  f37e		       85 86		      STA	.POINTER
      6  f380		       a9 f3		      LDA	#>.ADDRESS
      7  f382		       85 87		      STA	.POINTER+1
      8  f384
      0  f384					      SET_POINTER	KernelPtr, TitleKernel
      1  f384				   .POINTER   SET	KernelPtr
      2  f384				   .ADDRESS   SET	TitleKernel
      3  f384
      4  f384		       a9 d9		      LDA	#<.ADDRESS
      5  f386		       85 88		      STA	.POINTER
      6  f388		       a9 f4		      LDA	#>.ADDRESS
      7  f38a		       85 89		      STA	.POINTER+1
      8  f38c
      0  f38c					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f38c				   .POINTER   SET	OverScanPtr
      2  f38c				   .ADDRESS   SET	TitleOverScan
      3  f38c
      4  f38c		       a9 86		      LDA	#<.ADDRESS
      5  f38e		       85 8a		      STA	.POINTER
      6  f390		       a9 f4		      LDA	#>.ADDRESS
      7  f392		       85 8b		      STA	.POINTER+1
      8  f394
     33  f394
     34  f394							; Load audio settings
     35  f394
     36  f394							; Melody Line
     37  f394		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f396		       85 15		      sta	AUDC0
     39  f398							;lda #TITLE_AUDIO_0_VOLUME
     40  f398							;sta AUDV0
     41  f398
     42  f398							; Make it so that we play the first note immediately
     43  f398		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     44  f39a		       85 90		      sta	AudioStep
     45  f39c		       a9 01		      lda	#1
     46  f39e		       85 8d		      sta	FrameTimer
     47  f3a0
     48  f3a0							; Setup Spider Sprite
      0  f3a0					      SET_POINTER	SpiderPtr, TitleSpider
      1  f3a0				   .POINTER   SET	SpiderPtr
      2  f3a0				   .ADDRESS   SET	TitleSpider
      3  f3a0
      4  f3a0		       a9 aa		      LDA	#<.ADDRESS
      5  f3a2		       85 a2		      STA	.POINTER
      6  f3a4		       a9 f0		      LDA	#>.ADDRESS
      7  f3a6		       85 a3		      STA	.POINTER+1
      8  f3a8
     50  f3a8
     51  f3a8		       a9 16		      lda	#%00010110	; Triple Sprite and 2 clock size missle0
     52  f3aa		       85 04		      sta	NUSIZ0
     53  f3ac		       a9 06		      lda	#%00000110	; Triple Sprite
     54  f3ae		       85 05		      sta	NUSIZ1
     55  f3b0
     56  f3b0		       a9 ff		      lda	#$FF	; Reflect P1
     57  f3b2		       85 0c		      sta	REFP1
     58  f3b4		       a9 00		      lda	#0	; No reflect
     59  f3b6		       85 0b		      sta	REFP0
     60  f3b8
     61  f3b8							; Drums and Bass
     62  f3b8							;lda #0
     63  f3b8							;sta AUDC1
     64  f3b8		       85 1a		      sta	AUDV1
     65  f3ba
     66  f3ba							;lda #0
     67  f3ba		       85 a9		      sta	SpiderDrawPos	; Initialize animation state
     68  f3bc
     69  f3bc							; Disable at start
     70  f3bc							;lda #0
     71  f3bc		       85 1d		      sta	ENAM0
     72  f3be
     73  f3be							; Set initial button state
     74  f3be							;lda #0
     75  f3be		       85 8f		      sta	InputState
     76  f3c0
     77  f3c0							; Set initial select state
     78  f3c0		       85 82		      sta	Temp+2
     79  f3c2
     80  f3c2		       60		      rts
     81  f3c3
     82  f3c3				   TitleVerticalBlank
     83  f3c3
     84  f3c3							; Refresh random values
     85  f3c3		       20 13 f0 	      jsr	Random
     86  f3c6
     87  f3c6		       20 d0 f3 	      jsr	TitlePosition
     88  f3c9		       20 ea f3 	      jsr	TitleAnimation
     89  f3cc		       20 67 f4 	      jsr	TitleColor
     90  f3cf
     91  f3cf		       60		      rts
     92  f3d0
     93  f3d0				   TitlePosition
     94  f3d0
     95  f3d0							; Position Spider
     96  f3d0		       a2 00		      ldx	#0	; Object (player0)
     97  f3d2		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
     98  f3d4		       20 00 f0 	      jsr	PosObject
     99  f3d7
    100  f3d7		       a2 01		      ldx	#1	; Object (player1)
    101  f3d9		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    102  f3db		       20 00 f0 	      jsr	PosObject
    103  f3de
    104  f3de							; Position Web Line
    105  f3de		       a2 02		      ldx	#2	; Object (missle0)
    106  f3e0		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    107  f3e2		       20 00 f0 	      jsr	PosObject
    108  f3e5
    109  f3e5		       85 02		      sta	WSYNC
    110  f3e7		       85 2a		      sta	HMOVE
    111  f3e9
    112  f3e9		       60		      rts
    113  f3ea
    114  f3ea				   TitleAnimation
    115  f3ea
    116  f3ea		       ad 82 02 	      lda	SWCHB
    117  f3ed		       29 02		      and	#%00000010
    118  f3ef		       d0 09		      bne	.title_animation_state_check
    119  f3f1
    120  f3f1		       a5 82		      lda	Temp+2
    121  f3f3
    122  f3f3				   .title_animation_state_on
    123  f3f3		       09 40		      ora	#%01000000
    124  f3f5		       85 82		      sta	Temp+2
    125  f3f7		       4c 0d f4 	      jmp	.title_animation_load
    126  f3fa
    127  f3fa				   .title_animation_state_check
    128  f3fa		       24 82		      bit	Temp+2
    129  f3fc		       50 0f		      bvc	.title_animation_load
    130  f3fe
    131  f3fe		       a5 82		      lda	Temp+2
    132  f400		       29 bf		      and	#%10111111
    133  f402
    134  f402				   .title_animation_state_swap
    135  f402		       10 05		      bpl	.title_animation_state_bug
    136  f404
    137  f404				   .title_animation_state_spider
    138  f404		       29 7f		      and	#%01111111
    139  f406		       4c 0b f4 	      jmp	.title_animation_state_set
    140  f409
    141  f409				   .title_animation_state_bug
    142  f409		       09 80		      ora	#%10000000
    143  f40b
    144  f40b				   .title_animation_state_set
    145  f40b		       85 82		      sta	Temp+2
    146  f40d
    147  f40d				   .title_animation_load
    148  f40d
    149  f40d		       24 82		      bit	Temp+2
    150  f40f		       30 2b		      bmi	.title_animation_bug
    151  f411
    152  f411				   .title_animation_spider
    153  f411
    154  f411		       a5 90		      lda	AudioStep
    155  f413		       f0 0d		      beq	.title_animation_spider_1
    156  f415		       c9 04		      cmp	#4
    157  f417		       f0 16		      beq	.title_animation_spider_2
    158  f419		       c9 09		      cmp	#9
    159  f41b		       f0 05		      beq	.title_animation_spider_1
    160  f41d		       c9 0c		      cmp	#12
    161  f41f		       f0 0e		      beq	.title_animation_spider_2
    162  f421		       60		      rts
    163  f422
    164  f422				   .title_animation_spider_1
      0  f422					      SET_POINTER	SpiderPtr, TitleSpider
      1  f422				   .POINTER   SET	SpiderPtr
      2  f422				   .ADDRESS   SET	TitleSpider
      3  f422
      4  f422		       a9 aa		      LDA	#<.ADDRESS
      5  f424		       85 a2		      STA	.POINTER
      6  f426		       a9 f0		      LDA	#>.ADDRESS
      7  f428		       85 a3		      STA	.POINTER+1
      8  f42a
    166  f42a		       a9 00		      lda	#0
    167  f42c		       4c 64 f4 	      jmp	.title_animation_return
    168  f42f
    169  f42f				   .title_animation_spider_2
      0  f42f					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f42f				   .POINTER   SET	SpiderPtr
      2  f42f				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f42f
      4  f42f		       a9 b3		      LDA	#<.ADDRESS
      5  f431		       85 a2		      STA	.POINTER
      6  f433		       a9 f0		      LDA	#>.ADDRESS
      7  f435		       85 a3		      STA	.POINTER+1
      8  f437
    171  f437		       a9 01		      lda	#1
    172  f439		       4c 64 f4 	      jmp	.title_animation_return
    173  f43c
    174  f43c				   .title_animation_bug
    175  f43c
    176  f43c		       a5 90		      lda	AudioStep
    177  f43e		       f0 0d		      beq	.title_animation_bug_1
    178  f440		       c9 04		      cmp	#4
    179  f442		       f0 16		      beq	.title_animation_bug_2
    180  f444		       c9 09		      cmp	#9
    181  f446		       f0 05		      beq	.title_animation_bug_1
    182  f448		       c9 0c		      cmp	#12
    183  f44a		       f0 0e		      beq	.title_animation_bug_2
    184  f44c		       60		      rts
    185  f44d
    186  f44d				   .title_animation_bug_1
      0  f44d					      SET_POINTER	SpiderPtr, TitleBug
      1  f44d				   .POINTER   SET	SpiderPtr
      2  f44d				   .ADDRESS   SET	TitleBug
      3  f44d
      4  f44d		       a9 bc		      LDA	#<.ADDRESS
      5  f44f		       85 a2		      STA	.POINTER
      6  f451		       a9 f0		      LDA	#>.ADDRESS
      7  f453		       85 a3		      STA	.POINTER+1
      8  f455
    188  f455		       a9 00		      lda	#0
    189  f457		       4c 64 f4 	      jmp	.title_animation_return
    190  f45a
    191  f45a				   .title_animation_bug_2
      0  f45a					      SET_POINTER	SpiderPtr, TitleBug+#TITLE_SPIDER_SIZE
      1  f45a				   .POINTER   SET	SpiderPtr
      2  f45a				   .ADDRESS   SET	TitleBug+#TITLE_SPIDER_SIZE
      3  f45a
      4  f45a		       a9 c5		      LDA	#<.ADDRESS
      5  f45c		       85 a2		      STA	.POINTER
      6  f45e		       a9 f0		      LDA	#>.ADDRESS
      7  f460		       85 a3		      STA	.POINTER+1
      8  f462
    193  f462		       a9 01		      lda	#1
    194  f464
    195  f464				   .title_animation_return
    196  f464		       85 a9		      sta	SpiderDrawPos
    197  f466		       60		      rts
    198  f467
    199  f467				   TitleColor
    200  f467
    201  f467							; Load Colors
    202  f467		       a9 00		      lda	#TITLE_BG_COLOR
    203  f469		       85 09		      sta	COLUBK
    204  f46b		       a9 06		      lda	#TITLE_WEB_COLOR
    205  f46d		       85 08		      sta	COLUPF
    206  f46f
    207  f46f							; Check b/w
    208  f46f		       ad 82 02 	      lda	SWCHB
    209  f472					      REPEAT	4
    210  f472		       4a		      lsr
    209  f472					      REPEND
    210  f473		       4a		      lsr
    209  f473					      REPEND
    210  f474		       4a		      lsr
    209  f474					      REPEND
    210  f475		       4a		      lsr
    211  f476					      REPEND
    212  f476		       90 07		      bcc	.title_bw
    213  f478
    214  f478				   .title_color
    215  f478		       a9 56		      lda	#TITLE_SPIDER_COLOR
    216  f47a		       85 06		      sta	COLUP0
    217  f47c		       85 07		      sta	COLUP1
    218  f47e
    219  f47e		       60		      rts
    220  f47f
    221  f47f				   .title_bw
    222  f47f							; Load B/W Colors
    223  f47f		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    224  f481		       85 06		      sta	COLUP0
    225  f483		       85 07		      sta	COLUP1
    226  f485
    227  f485		       60		      rts
    228  f486
    229  f486				   TitleOverScan
    230  f486		       20 8d f4 	      jsr	TitleAudio
    231  f489		       20 c8 f4 	      jsr	TitleState
    232  f48c		       60		      rts
    233  f48d
    234  f48d				   TitleAudio
    235  f48d
    236  f48d		       a6 8d		      ldx	FrameTimer
    237  f48f		       d0 36		      bne	.title_audio_return
    238  f491
    239  f491							; Reset Timer
    240  f491		       a2 09		      ldx	#TITLE_AUDIO_STEP
    241  f493		       86 8d		      stx	FrameTimer
    242  f495
    243  f495				   .title_audio_play
    244  f495
    245  f495							; Increment melody position
    246  f495		       a4 90		      ldy	AudioStep
    247  f497		       c8		      iny
    248  f498
    249  f498							; Check if we're at the end of the melody
    250  f498		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    251  f49a		       d0 02		      bne	.title_audio_play_note
    252  f49c
    253  f49c							; Loop our audio step
    254  f49c		       a0 00		      ldy	#0
    255  f49e
    256  f49e				   .title_audio_play_note
    257  f49e
    258  f49e							; Save current position
    259  f49e		       84 90		      sty	AudioStep
    260  f4a0
    261  f4a0				   .title_audio_play_melody
    262  f4a0							; Basic Melody Line
    263  f4a0		       b9 ca f5 	      lda	TitleAudio0,y
    264  f4a3		       30 09		      bmi	.title_audio_play_melody_mute
    265  f4a5
    266  f4a5		       85 17		      sta	AUDF0
    267  f4a7		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
    268  f4a9		       85 19		      sta	AUDV0
    269  f4ab
    270  f4ab		       4c b2 f4 	      jmp	.title_audio_play_rhythm
    271  f4ae
    272  f4ae				   .title_audio_play_melody_mute
    273  f4ae
    274  f4ae		       a9 00		      lda	#0
    275  f4b0		       85 19		      sta	AUDV0
    276  f4b2
    277  f4b2				   .title_audio_play_rhythm
    278  f4b2
    279  f4b2							; Drums and Bass
    280  f4b2		       b9 da f5 	      lda	TitleTone1,y
    281  f4b5		       30 0c		      bmi	.title_audio_play_rhythm_mute
    282  f4b7
    283  f4b7		       85 16		      sta	AUDC1
    284  f4b9		       b9 ea f5 	      lda	TitleAudio1,y
    285  f4bc		       85 18		      sta	AUDF1
    286  f4be		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    287  f4c0		       85 1a		      sta	AUDV1
    288  f4c2
    289  f4c2		       60		      rts
    290  f4c3
    291  f4c3				   .title_audio_play_rhythm_mute
    292  f4c3
    293  f4c3		       a9 00		      lda	#0
    294  f4c5							;sta AUDF1
    295  f4c5							;sta AUDC1
    296  f4c5		       85 1a		      sta	AUDV1
    297  f4c7
    298  f4c7				   .title_audio_return
    299  f4c7		       60		      rts
    300  f4c8
    301  f4c8				   TitleState
    302  f4c8
    303  f4c8							; Check if Fire Button on controller 1 is released
    304  f4c8		       a5 0c		      lda	INPT4
    305  f4ca		       30 05		      bmi	.title_state_check
    306  f4cc
    307  f4cc				   .title_state_on
    308  f4cc		       a9 01		      lda	#1
    309  f4ce		       85 8f		      sta	InputState
    310  f4d0		       60		      rts
    311  f4d1
    312  f4d1				   .title_state_check
    313  f4d1		       a5 8f		      lda	InputState
    314  f4d3		       f0 03		      beq	.title_state_return
    315  f4d5
    316  f4d5				   .title_state_next
    317  f4d5							; Button is released, load up game
    318  f4d5		       20 47 fd 	      jsr	GameInit
    319  f4d8
    320  f4d8				   .title_state_return
    321  f4d8		       60		      rts
    322  f4d9
    323  f4d9				   TitleKernel
    324  f4d9
    325  f4d9							; Playfield Control
    326  f4d9							;lda CtrlPf
    327  f4d9							;and #%11111110  ; No mirroring
    328  f4d9							;sta CtrlPf
    329  f4d9		       a9 00		      lda	#%00000000
    330  f4db		       85 0a		      sta	CTRLPF
    331  f4dd
    332  f4dd							; Turn on display
    333  f4dd		       a9 00		      lda	#0
    334  f4df		       85 01		      sta	VBLANK
    335  f4e1
    336  f4e1		       85 02		      sta	WSYNC
    337  f4e3
    338  f4e3				   TitleFrameTopDraw
    339  f4e3
    340  f4e3							; Start Counters
    341  f4e3		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    342  f4e5		       a0 00		      ldy	#0	; Image Counter
    343  f4e7
    344  f4e7				   .title_frame_top
    345  f4e7
    346  f4e7							; 76 machine cycles per scanline
    347  f4e7		       85 02		      sta	WSYNC
    348  f4e9
    349  f4e9				   .title_frame_top_load		; 66 cycles
    350  f4e9
    351  f4e9							; First half of image
    352  f4e9		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    353  f4ec		       85 0d		      sta	PF0	; 4
    354  f4ee		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    355  f4f1		       85 0e		      sta	PF1	; 4
    356  f4f3		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    357  f4f6		       85 0f		      sta	PF2	; 4
    358  f4f8
      0  f4f8					      sleep	6
      1  f4f8				   .CYCLES    SET	6
      2  f4f8
      3  f4f8				  -	      IF	.CYCLES < 2
      4  f4f8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4f8				  -	      ERR
      6  f4f8					      ENDIF
      7  f4f8
      8  f4f8				  -	      IF	.CYCLES & 1
      9  f4f8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4f8				  -	      nop	0
     11  f4f8				  -	      ELSE
     12  f4f8				  -	      bit	VSYNC
     13  f4f8				  -	      ENDIF
     14  f4f8				  -.CYCLES    SET	.CYCLES - 3
     15  f4f8					      ENDIF
     16  f4f8
     17  f4f8					      REPEAT	.CYCLES / 2
     18  f4f8		       ea		      nop
     17  f4f8					      REPEND
     18  f4f9		       ea		      nop
     17  f4f9					      REPEND
     18  f4fa		       ea		      nop
     19  f4fb					      REPEND
    360  f4fb
    361  f4fb							; Second half of image
    362  f4fb		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    363  f4fe		       85 0d		      sta	PF0	; 4
    364  f500		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    365  f503		       85 0e		      sta	PF1	; 4
    366  f505		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    367  f508		       85 0f		      sta	PF2	; 4
    368  f50a
    369  f50a				   .title_frame_top_index		; 4 cycles
    370  f50a
    371  f50a		       ca		      dex		; 2
    372  f50b		       d0 da		      bne	.title_frame_top	; 2
    373  f50d
    374  f50d				   .title_frame_top_index_next		; 6 cycles
    375  f50d
    376  f50d							; Restore scanline counter
    377  f50d		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    378  f50f
    379  f50f		       98		      tya		; 2
    380  f510		       18		      clc		; 2
    381  f511		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    382  f513		       a8		      tay		; 2
    383  f514
    384  f514		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    385  f516		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    386  f518		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    387  f51a		       85 08		      sta	COLUPF	; 4
    388  f51c		       ea		      nop		; 2
    389  f51d		       4c e9 f4 	      jmp	.title_frame_top_load	; 3
    390  f520
    391  f520				   .title_frame_top_label_color_skip
    392  f520
    393  f520		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    394  f522		       d0 c3		      bne	.title_frame_top	; 2
    395  f524
    396  f524				   .title_frame_top_clean
    397  f524
    398  f524							; Clear out playfield
    399  f524		       a9 00		      lda	#0
    400  f526		       85 0d		      sta	PF0
    401  f528		       85 0e		      sta	PF1
    402  f52a		       85 0f		      sta	PF2
    403  f52c
    404  f52c				   TitleWebDraw
    405  f52c
    406  f52c		       24 82		      bit	Temp+2
    407  f52e		       30 05		      bmi	.title_web_bug
    408  f530
    409  f530				   .title_web_spider
    410  f530		       a9 02		      lda	#%00000010
    411  f532		       4c 37 f5 	      jmp	.title_web_set
    412  f535				   .title_web_bug
    413  f535		       a9 00		      lda	#%00000000
    414  f537				   .title_web_set
    415  f537		       85 1d		      sta	ENAM0
    416  f539
    417  f539		       a9 06		      lda	#TITLE_WEB_COLOR
    418  f53b		       85 06		      sta	COLUP0
    419  f53d
    420  f53d		       a2 10		      ldx	#TITLE_GAP_SIZE
    421  f53f				   .title_web_gap
    422  f53f		       ca		      dex
    423  f540		       85 02		      sta	WSYNC
    424  f542		       d0 fb		      bne	.title_web_gap
    425  f544
    426  f544				   TitleSpiderDraw
    427  f544
    428  f544		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    429  f546
    430  f546		       a5 a9		      lda	SpiderDrawPos
    431  f548		       c9 01		      cmp	#1
    432  f54a		       d0 0c		      bne	.title_spider_extra_web_disable
    433  f54c
    434  f54c				   .title_spider_extra_web_start
    435  f54c		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    436  f54e				   .title_spider_extra_web_loop
    437  f54e		       85 02		      sta	WSYNC
    438  f550		       ca		      dex
    439  f551		       d0 fb		      bne	.title_spider_extra_web_loop
    440  f553
    441  f553		       88		      dey
    442  f554		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    443  f556		       d0 f4		      bne	.title_spider_extra_web_start
    444  f558
    445  f558				   .title_spider_extra_web_disable
    446  f558		       a9 00		      lda	#0
    447  f55a		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    448  f55c
    449  f55c		       85 02		      sta	WSYNC
    450  f55e
    451  f55e		       85 1d		      sta	ENAM0
    452  f560
    453  f560							; Check b/w
    454  f560		       ad 82 02 	      lda	SWCHB
    455  f563					      REPEAT	4
    456  f563		       4a		      lsr
    455  f563					      REPEND
    456  f564		       4a		      lsr
    455  f564					      REPEND
    456  f565		       4a		      lsr
    455  f565					      REPEND
    456  f566		       4a		      lsr
    457  f567					      REPEND
    458  f567		       90 05		      bcc	.title_spider_bw
    459  f569
    460  f569				   .title_spider_color
    461  f569		       a9 56		      lda	#TITLE_SPIDER_COLOR
    462  f56b		       4c 70 f5 	      jmp	.title_spider_color_set
    463  f56e				   .title_spider_bw
    464  f56e		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    465  f570				   .title_spider_color_set
    466  f570		       85 06		      sta	COLUP0
    467  f572
    468  f572				   .title_spider
    469  f572		       b1 a2		      lda	(SpiderPtr),y
    470  f574		       85 1b		      sta	GRP0
    471  f576		       85 1c		      sta	GRP1
    472  f578
    473  f578				   .title_spider_delay
    474  f578		       ca		      dex
    475  f579		       85 02		      sta	WSYNC
    476  f57b		       d0 fb		      bne	.title_spider_delay
    477  f57d
    478  f57d				   .title_spider_index
    479  f57d		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    480  f57f		       88		      dey
    481  f580		       10 f0		      bpl	.title_spider
    482  f582
    483  f582				   .title_spider_clean
    484  f582
    485  f582							; Clear sprites
    486  f582		       a9 00		      lda	#0
    487  f584		       85 1b		      sta	GRP0
    488  f586		       85 1c		      sta	GRP1
    489  f588
    490  f588				   TitleFrameBottomDraw
    491  f588
    492  f588							; Load Frame Color
    493  f588		       a9 06		      lda	#TITLE_WEB_COLOR
    494  f58a		       85 08		      sta	COLUPF
    495  f58c
    496  f58c							; Start Counters
    497  f58c		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    498  f58e		       a0 00		      ldy	#0	; Image Counter
    499  f590
    500  f590				   .title_frame_bottom
    501  f590
    502  f590							; 76 machine cycles per scanline
    503  f590		       85 02		      sta	WSYNC
    504  f592
    505  f592				   .title_frame_bottom_load		; 66 cycles
    506  f592
    507  f592							; First half of image
    508  f592		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    509  f595		       85 0d		      sta	PF0	; 4
    510  f597		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    511  f59a		       85 0e		      sta	PF1	; 4
    512  f59c		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    513  f59f		       85 0f		      sta	PF2	; 4
    514  f5a1
      0  f5a1					      sleep	6
      1  f5a1				   .CYCLES    SET	6
      2  f5a1
      3  f5a1				  -	      IF	.CYCLES < 2
      4  f5a1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5a1				  -	      ERR
      6  f5a1					      ENDIF
      7  f5a1
      8  f5a1				  -	      IF	.CYCLES & 1
      9  f5a1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5a1				  -	      nop	0
     11  f5a1				  -	      ELSE
     12  f5a1				  -	      bit	VSYNC
     13  f5a1				  -	      ENDIF
     14  f5a1				  -.CYCLES    SET	.CYCLES - 3
     15  f5a1					      ENDIF
     16  f5a1
     17  f5a1					      REPEAT	.CYCLES / 2
     18  f5a1		       ea		      nop
     17  f5a1					      REPEND
     18  f5a2		       ea		      nop
     17  f5a2					      REPEND
     18  f5a3		       ea		      nop
     19  f5a4					      REPEND
    516  f5a4
    517  f5a4							; Second half of image
    518  f5a4		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    519  f5a7		       85 0d		      sta	PF0	; 4
    520  f5a9		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    521  f5ac		       85 0e		      sta	PF1	; 4
    522  f5ae		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    523  f5b1		       85 0f		      sta	PF2	; 4
    524  f5b3
    525  f5b3				   .title_frame_bottom_index		; 4 cycles
    526  f5b3
    527  f5b3		       ca		      dex		; 2
    528  f5b4		       d0 da		      bne	.title_frame_bottom	; 2
    529  f5b6
    530  f5b6				   .title_frame_bottom_index_next		; 6 cycles
    531  f5b6
    532  f5b6							; Restore scanline counter
    533  f5b6		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    534  f5b8
    535  f5b8		       98		      tya		; 2
    536  f5b9		       18		      clc		; 2
    537  f5ba		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    538  f5bc		       a8		      tay		; 2
    539  f5bd		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    540  f5bf		       d0 cf		      bne	.title_frame_bottom	; 2
    541  f5c1
    542  f5c1				   .title_frame_bottom_clean
    543  f5c1
    544  f5c1							; Clear out playfield
    545  f5c1		       a9 00		      lda	#0
    546  f5c3		       85 0d		      sta	PF0
    547  f5c5		       85 0e		      sta	PF1
    548  f5c7		       85 0f		      sta	PF2
    549  f5c9
    550  f5c9				   .title_kernel_return
    551  f5c9		       60		      rts
    552  f5ca
    553  f5ca				   TitleAudio0
    554  f5ca
    555  f5ca		       0f		      .BYTE.b	#15	; B
    556  f5cb		       13		      .BYTE.b	#19	; G
    557  f5cc		       17		      .BYTE.b	#23	; E
    558  f5cd		       13		      .BYTE.b	#19	; G
    559  f5ce		       0e		      .BYTE.b	#14	; C
    560  f5cf		       0e		      .BYTE.b	#14
    561  f5d0		       ff		      .BYTE.b	#-1
    562  f5d1		       ff		      .BYTE.b	#-1
    563  f5d2		       0c		      .BYTE.b	#12	; D
    564  f5d3		       13		      .BYTE.b	#19
    565  f5d4		       17		      .BYTE.b	#23
    566  f5d5		       13		      .BYTE.b	#19
    567  f5d6		       0e		      .BYTE.b	#14	; C
    568  f5d7		       0e		      .BYTE.b	#14
    569  f5d8		       ff		      .BYTE.b	#-1
    570  f5d9		       ff		      .BYTE.b	#-1
    571  f5da
    572  f5da				   TitleTone1
    573  f5da
    574  f5da		       0f		      .BYTE.b	#15	; Electronic Rumble
    575  f5db		       ff		      .BYTE.b	#-1
    576  f5dc		       01		      .BYTE.b	#1	; Low Pure Tone
    577  f5dd		       01		      .BYTE.b	#1
    578  f5de		       08		      .BYTE.b	#8	; White Noise
    579  f5df		       01		      .BYTE.b	#1
    580  f5e0		       01		      .BYTE.b	#1
    581  f5e1		       ff		      .BYTE.b	#-1
    582  f5e2		       ff		      .BYTE.b	#-1
    583  f5e3		       0f		      .BYTE.b	#15
    584  f5e4		       ff		      .BYTE.b	#-1
    585  f5e5		       ff		      .BYTE.b	#-1
    586  f5e6		       08		      .BYTE.b	#8
    587  f5e7		       ff		      .BYTE.b	#-1
    588  f5e8		       01		      .BYTE.b	#1
    589  f5e9		       01		      .BYTE.b	#1
    590  f5ea
    591  f5ea				   TitleAudio1
    592  f5ea
    593  f5ea		       1d		      .BYTE.b	#29	; Kick
    594  f5eb		       ff		      .BYTE.b	#-1
    595  f5ec		       1f		      .BYTE.b	#31	; C
    596  f5ed		       1f		      .BYTE.b	#31
    597  f5ee		       07		      .BYTE.b	#7	; Snare
    598  f5ef		       1f		      .BYTE.b	#31
    599  f5f0		       1f		      .BYTE.b	#31
    600  f5f1		       ff		      .BYTE.b	#-1
    601  f5f2		       ff		      .BYTE.b	#-1
    602  f5f3		       1d		      .BYTE.b	#29
    603  f5f4		       ff		      .BYTE.b	#-1
    604  f5f5		       ff		      .BYTE.b	#-1
    605  f5f6		       07		      .BYTE.b	#7
    606  f5f7		       ff		      .BYTE.b	#-1
    607  f5f8		       17		      .BYTE.b	#23	; F
    608  f5f9		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f5fa					      include	"game.asm"
      1  f5fa							;================
      2  f5fa							; Game
      3  f5fa							;================
      4  f5fa
      5  f5fa							; Constants
      6  f5fa
      7  f5fa		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f5fa		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f5fa		       00 09	   GAME_AUDIO_STEP =	9
     10  f5fa		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f5fa		       00 06	   GAME_AUDIO_TONE =	6
     12  f5fa
     13  f5fa							; Object Code
     14  f5fa
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f5fa					      include	"objects/level.asm"
      1  f5fa							;======================
      2  f5fa							; Level Logic
      3  f5fa							;======================
      4  f5fa
      5  f5fa							; Constants
      6  f5fa
      7  f5fa		       00 14	   LEVELS     =	20
      8  f5fa
      9  f5fa				   LevelInit
     10  f5fa
     11  f5fa							; Set beginning level by difficulty switches treated as binary
     12  f5fa		       ad 82 02 	      lda	SWCHB
     13  f5fd					      REPEAT	6	; shift to 0-3
     14  f5fd		       4a		      lsr
     13  f5fd					      REPEND
     14  f5fe		       4a		      lsr
     13  f5fe					      REPEND
     14  f5ff		       4a		      lsr
     13  f5ff					      REPEND
     14  f600		       4a		      lsr
     13  f600					      REPEND
     14  f601		       4a		      lsr
     13  f601					      REPEND
     14  f602		       4a		      lsr
     15  f603					      REPEND
     16  f603		       18		      clc		; multiply by 5
     17  f604		       85 80		      sta	Temp
     18  f606		       0a		      asl
     19  f607		       0a		      asl
     20  f608		       65 80		      adc	Temp
     21  f60a		       85 9e		      sta	LevelCurrent
     22  f60c
     23  f60c		       20 32 f6 	      jsr	LevelLoad
     24  f60f
     25  f60f		       60		      rts
     26  f610
     27  f610				   LevelUpdate
     28  f610
     29  f610							; Calculate Desired score: (level+2)*5
     30  f610		       a5 9e		      lda	LevelCurrent
     31  f612		       18		      clc
     32  f613		       69 02		      adc	#2	; +2
     33  f615		       85 80		      sta	Temp
     34  f617		       0a		      asl		; x2
     35  f618		       0a		      asl		; x2
     36  f619		       65 80		      adc	Temp	; x1
     37  f61b
     38  f61b							; Check if score is high enough
     39  f61b		       c5 94		      cmp	ScoreValue+1
     40  f61d		       b0 0f		      bcs	.level_update_return
     41  f61f
     42  f61f							; Reset score
     43  f61f		       a9 00		      lda	#0
     44  f621		       85 94		      sta	ScoreValue+1
     45  f623
     46  f623							; Check if we haven't reached the final level
     47  f623		       a5 9e		      lda	LevelCurrent
     48  f625		       c9 13		      cmp	#LEVELS-1
     49  f627		       b0 05		      bcs	.level_update_return
     50  f629
     51  f629		       e6 9e		      inc	LevelCurrent
     52  f62b		       20 32 f6 	      jsr	LevelLoad
     53  f62e
     54  f62e				   .level_update_return
     55  f62e
     56  f62e		       20 6e f6 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     57  f631
     58  f631		       60		      rts
     59  f632
     60  f632				   LevelLoad
     61  f632
     62  f632							; Game Audio Step: 9-(level/4)
     63  f632		       a5 9e		      lda	LevelCurrent
     64  f634		       4a		      lsr		; /2
     65  f635		       4a		      lsr		; /2
     66  f636		       85 80		      sta	Temp
     67  f638		       a9 0a		      lda	#GAME_AUDIO_STEP+1
     68  f63a		       18		      clc
     69  f63b		       e5 80		      sbc	Temp
     70  f63d		       85 92		      sta	GameAudioStep
     71  f63f
     72  f63f							; Bug Speed: level/4+2
     73  f63f		       a5 9e		      lda	LevelCurrent
     74  f641		       4a		      lsr		; /2
     75  f642		       4a		      lsr		; /2
     76  f643		       69 02		      adc	#2
     77  f645		       85 b4		      sta	BugSpeed
     78  f647
     79  f647							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     80  f647		       a9 14		      lda	#20
     81  f649		       18		      clc
     82  f64a		       e5 9e		      sbc	LevelCurrent
     83  f64c		       0a		      asl		; x2
     84  f64d		       85 80		      sta	Temp
     85  f64f		       0a		      asl		; x2
     86  f650		       0a		      asl		; x2
     87  f651		       65 80		      adc	Temp
     88  f653		       85 c3		      sta	SwatterWaitTime
     89  f655
     90  f655							; Swatter Hold Time: 60-(level*2)
     91  f655
     92  f655		       a5 9e		      lda	LevelCurrent
     93  f657		       0a		      asl		; x2
     94  f658		       85 80		      sta	Temp
     95  f65a		       a9 3c		      lda	#60
     96  f65c		       18		      clc
     97  f65d		       e5 80		      sbc	Temp
     98  f65f		       85 c4		      sta	SwatterHoldTime
     99  f661
    100  f661							; Swatter Hit Damage: level*3+$10
    101  f661		       a5 9e		      lda	LevelCurrent
    102  f663		       18		      clc
    103  f664		       85 80		      sta	Temp
    104  f666		       0a		      asl		; x2
    105  f667		       65 80		      adc	Temp
    106  f669		       69 10		      adc	#$10
    107  f66b		       85 c5		      sta	SwatterHitDamage
    108  f66d
    109  f66d		       60		      rts
    110  f66e
    111  f66e				   LevelLoadColor
    112  f66e		       a4 9e		      ldy	LevelCurrent
    113  f670
    114  f670							; check b/w
    115  f670		       ad 82 02 	      lda	SWCHB
    116  f673					      REPEAT	4
    117  f673		       4a		      lsr
    116  f673					      REPEND
    117  f674		       4a		      lsr
    116  f674					      REPEND
    117  f675		       4a		      lsr
    116  f675					      REPEND
    117  f676		       4a		      lsr
    118  f677					      REPEND
    119  f677		       90 0b		      bcc	.level_load_bw
    120  f679
    121  f679				   .level_load_color
    122  f679
    123  f679							; Background Color
    124  f679		       b9 8d f6 	      lda	LevelDataBk,y
    125  f67c		       85 a0		      sta	WebColor+0
    126  f67e
    127  f67e							; Web Color
    128  f67e		       b9 a1 f6 	      lda	LevelDataPf,y
    129  f681		       85 a1		      sta	WebColor+1
    130  f683
    131  f683		       60		      rts
    132  f684
    133  f684				   .level_load_bw
    134  f684
    135  f684							; Background Color
    136  f684		       a9 00		      lda	#WEB_BG_COLOR
    137  f686		       85 a0		      sta	WebColor+0
    138  f688
    139  f688							; Web Color
    140  f688		       a9 02		      lda	#WEB_FG_COLOR
    141  f68a		       85 a1		      sta	WebColor+1
    142  f68c
    143  f68c		       60		      rts
    144  f68d
    145  f68d							; Easy: 1-5
    146  f68d							; Medium: 6-9
    147  f68d							; Hard: 10-15
    148  f68d							; Extreme: 16-19
    149  f68d
    150  f68d				   LevelDataBk		; Background Color
    151  f68d		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    152  f68e		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    153  f68f		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    154  f690		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    155  f691		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    156  f692		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    157  f693		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    158  f694		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    159  f695		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    160  f696		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    161  f697		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    162  f698		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    163  f699		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    164  f69a		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    165  f69b		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    166  f69c		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    167  f69d		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    168  f69e		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    169  f69f		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    170  f6a0		       0c		      .BYTE.b	#$0C	; rgb(199, 199, 199)
    171  f6a1
    172  f6a1				   LevelDataPf		; Web Color
    173  f6a1		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    174  f6a2		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    175  f6a3		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    176  f6a4		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    177  f6a5		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    178  f6a6		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    179  f6a7		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    180  f6a8		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    181  f6a9		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    182  f6aa		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    183  f6ab		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    184  f6ac		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    185  f6ad		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    186  f6ae		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    187  f6af		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    188  f6b0		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    189  f6b1		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    190  f6b2		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    191  f6b3		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    192  f6b4		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f6b5					      include	"objects/score.asm"
      1  f6b5							;======================
      2  f6b5							; Score (playfield)
      3  f6b5							;======================
      4  f6b5
      5  f6b5							; Constants
      6  f6b5
      7  f6b5		       00 00	   SCORE_BG_COLOR =	#$00
      8  f6b5		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f6b5		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f6b5		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f6b5		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f6b5		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f6b5
     14  f6b5		       00 05	   SCORE_LABEL_SIZE =	5
     15  f6b5		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f6b5		       00 02	   SCORE_LINE_SIZE =	2
     17  f6b5		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f6b5
     19  f6b5							; Initialization
     20  f6b5
     21  f6b5				   ScoreInit
     22  f6b5
     23  f6b5							; Health Score
     24  f6b5		       a9 ff		      lda	#$ff
     25  f6b7		       85 93		      sta	ScoreValue+0
     26  f6b9
     27  f6b9							; Game Score
     28  f6b9		       a9 00		      lda	#0
     29  f6bb		       85 94		      sta	ScoreValue+1
     30  f6bd
     31  f6bd		       60		      rts
     32  f6be
     33  f6be							; Frame Update
     34  f6be
     35  f6be				   ScoreUpdate
     36  f6be
     37  f6be							; Current Level Digits
     38  f6be		       a5 9e		      lda	LevelCurrent
     39  f6c0		       18		      clc
     40  f6c1		       69 01		      adc	#1
     41  f6c3		       a0 00		      ldy	#0
     42  f6c5		       20 f8 f6 	      jsr	ScoreUpdateDigits
     43  f6c8
     44  f6c8							; Score Digits
     45  f6c8		       a5 94		      lda	ScoreValue+1
     46  f6ca		       a0 01		      ldy	#1
     47  f6cc		       20 f8 f6 	      jsr	ScoreUpdateDigits
     48  f6cf
     49  f6cf							; Health Bar
     50  f6cf		       a5 93		      lda	ScoreValue+0
     51  f6d1		       f0 1c		      beq	.score_update_bar_empty
     52  f6d3
     53  f6d3					      REPEAT	4
     54  f6d3		       4a		      lsr
     53  f6d3					      REPEND
     54  f6d4		       4a		      lsr
     53  f6d4					      REPEND
     54  f6d5		       4a		      lsr
     53  f6d5					      REPEND
     54  f6d6		       4a		      lsr
     55  f6d7					      REPEND
     56  f6d7		       c9 08		      cmp	#8
     57  f6d9		       b0 09		      bcs	.score_update_bar_top
     58  f6db
     59  f6db				   .score_update_bar_bottom
     60  f6db		       aa		      tax
     61  f6dc		       bd 25 f8 	      lda	ScoreBar,x
     62  f6df		       a0 00		      ldy	#$00
     63  f6e1		       4c f3 f6 	      jmp	.score_update_bar_store
     64  f6e4
     65  f6e4				   .score_update_bar_top
     66  f6e4		       29 07		      and	#%00000111
     67  f6e6		       aa		      tax
     68  f6e7		       a9 7f		      lda	#$7f
     69  f6e9		       bc 2d f8 	      ldy	ScoreBarFlip,x
     70  f6ec		       4c f3 f6 	      jmp	.score_update_bar_store
     71  f6ef
     72  f6ef				   .score_update_bar_empty
     73  f6ef		       a9 00		      lda	#0
     74  f6f1		       a0 00		      ldy	#0
     75  f6f3
     76  f6f3				   .score_update_bar_store
     77  f6f3		       85 9c		      sta	ScoreBarGfx+0
     78  f6f5		       84 9d		      sty	ScoreBarGfx+1
     79  f6f7
     80  f6f7				   .score_update_end
     81  f6f7		       60		      rts
     82  f6f8
     83  f6f8				   ScoreUpdateDigits		; Value in A, ScoreDigit index in Y
     84  f6f8
     85  f6f8		       84 83		      sty	Temp+3
     86  f6fa
     87  f6fa		       20 21 f0 	      jsr	BinBcdConvert
     88  f6fd
     89  f6fd							; Only use first byte
     90  f6fd		       8a		      txa
     91  f6fe		       29 0f		      and	#$0f
     92  f700		       a8		      tay
     93  f701		       8a		      txa
     94  f702		       29 f0		      and	#$f0
     95  f704					      REPEAT	4
     96  f704		       4a		      lsr
     95  f704					      REPEND
     96  f705		       4a		      lsr
     95  f705					      REPEND
     96  f706		       4a		      lsr
     95  f706					      REPEND
     96  f707		       4a		      lsr
     97  f708					      REPEND
     98  f708		       aa		      tax
     99  f709
    100  f709							; Adjust index positions by multiplying by 5
    101  f709		       8a		      txa
    102  f70a		       85 80		      sta	Temp
    103  f70c		       0a		      asl
    104  f70d		       0a		      asl
    105  f70e		       65 80		      adc	Temp
    106  f710		       a6 83		      ldx	Temp+3
    107  f712		       95 97		      sta	ScoreDigitTens,x
    108  f714
    109  f714		       98		      tya
    110  f715		       85 80		      sta	Temp
    111  f717		       0a		      asl
    112  f718		       0a		      asl
    113  f719		       65 80		      adc	Temp
    114  f71b		       a4 83		      ldy	Temp+3
    115  f71d		       99 95 00 	      sta	ScoreDigitOnes,y
    116  f720
    117  f720		       60		      rts
    118  f721
    119  f721							; Draw loop (uses SCORE_LINES scanlines)
    120  f721
    121  f721				   ScoreDraw
    122  f721
    123  f721							; Load Colors
    124  f721		       a9 00		      lda	#SCORE_BG_COLOR
    125  f723		       85 09		      sta	COLUBK
    126  f725		       a9 06		      lda	#SCORE_LABEL_COLOR
    127  f727		       85 08		      sta	COLUPF
    128  f729		       85 06		      sta	COLUP0
    129  f72b		       85 07		      sta	COLUP1
    130  f72d
    131  f72d							; Set Non-Mirror
    132  f72d		       a9 02		      lda	#%00000010
    133  f72f		       85 0a		      sta	CTRLPF
    134  f731
    135  f731		       a2 00		      ldx	#0
    136  f733				   .score_draw_label
    137  f733
    138  f733		       85 02		      sta	WSYNC
    139  f735
    140  f735							; First half of image
    141  f735		       bd 32 f1 	      lda	ScoreLabel+0,x	; 4
    142  f738		       85 0d		      sta	PF0	; 3
    143  f73a		       bd 33 f1 	      lda	ScoreLabel+1,x
    144  f73d		       85 0e		      sta	PF1
    145  f73f		       bd 34 f1 	      lda	ScoreLabel+2,x
    146  f742		       85 0f		      sta	PF2
    147  f744
      0  f744					      sleep	8
      1  f744				   .CYCLES    SET	8
      2  f744
      3  f744				  -	      IF	.CYCLES < 2
      4  f744				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f744				  -	      ERR
      6  f744					      ENDIF
      7  f744
      8  f744				  -	      IF	.CYCLES & 1
      9  f744				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f744				  -	      nop	0
     11  f744				  -	      ELSE
     12  f744				  -	      bit	VSYNC
     13  f744				  -	      ENDIF
     14  f744				  -.CYCLES    SET	.CYCLES - 3
     15  f744					      ENDIF
     16  f744
     17  f744					      REPEAT	.CYCLES / 2
     18  f744		       ea		      nop
     17  f744					      REPEND
     18  f745		       ea		      nop
     17  f745					      REPEND
     18  f746		       ea		      nop
     17  f746					      REPEND
     18  f747		       ea		      nop
     19  f748					      REPEND
    149  f748
    150  f748							; Second half of image
    151  f748							;lda ScoreLabel+3,x ; 4
    152  f748		       a9 00		      lda	#0	; 2
    153  f74a		       85 0d		      sta	PF0	; 3
    154  f74c		       bd 36 f1 	      lda	ScoreLabel+4,x
    155  f74f		       85 0e		      sta	PF1
    156  f751		       bd 37 f1 	      lda	ScoreLabel+5,x
    157  f754		       85 0f		      sta	PF2
    158  f756
    159  f756		       8a		      txa
    160  f757		       18		      clc
    161  f758		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    162  f75a		       aa		      tax
    163  f75b		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    164  f75d		       d0 d4		      bne	.score_draw_label
    165  f75f
    166  f75f							; Clear labels and setup color
    167  f75f		       a9 00		      lda	#0
    168  f761		       85 0d		      sta	PF0
    169  f763		       85 0e		      sta	PF1
    170  f765		       85 0f		      sta	PF2
    171  f767
    172  f767		       85 02		      sta	WSYNC
    173  f769
    174  f769							; Load Colors
    175  f769		       ad 82 02 	      lda	SWCHB
    176  f76c					      REPEAT	4
    177  f76c		       4a		      lsr
    176  f76c					      REPEND
    177  f76d		       4a		      lsr
    176  f76d					      REPEND
    177  f76e		       4a		      lsr
    176  f76e					      REPEND
    177  f76f		       4a		      lsr
    178  f770					      REPEND
    179  f770		       90 0d		      bcc	.score_draw_bw
    180  f772
    181  f772				   .score_draw_color
    182  f772		       a9 44		      lda	#SCORE_LEVEL_COLOR
    183  f774		       85 08		      sta	COLUPF
    184  f776		       85 06		      sta	COLUP0
    185  f778		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    186  f77a		       85 07		      sta	COLUP1
    187  f77c
    188  f77c		       4c 89 f7 	      jmp	.score_draw_digit_start
    189  f77f
    190  f77f				   .score_draw_bw
    191  f77f		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    192  f781		       85 08		      sta	COLUPF
    193  f783		       85 06		      sta	COLUP0
    194  f785		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    195  f787		       85 07		      sta	COLUP1
    196  f789
    197  f789				   .score_draw_digit_start
    198  f789
    199  f789		       85 02		      sta	WSYNC
    200  f78b
    201  f78b							; Prepare initial line
    202  f78b
    203  f78b							; Level
    204  f78b		       a4 97		      ldy	ScoreDigitTens
    205  f78d		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    206  f790		       29 f0		      and	#$f0
    207  f792		       85 99		      sta	ScoreDigitGfx
    208  f794
    209  f794		       a4 95		      ldy	ScoreDigitOnes
    210  f796		       b9 ce f0 	      lda	ScoreDigits,y
    211  f799		       29 f0		      and	#$f0
    212  f79b		       85 9a		      sta	ScoreDigitGfx+1
    213  f79d
    214  f79d							; Score
    215  f79d		       a4 98		      ldy	ScoreDigitTens+1
    216  f79f		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    217  f7a2		       29 0f		      and	#$0f
    218  f7a4		       85 9b		      sta	ScoreDigitGfx+2
    219  f7a6
    220  f7a6		       a4 96		      ldy	ScoreDigitOnes+1
    221  f7a8		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    222  f7ab		       29 f0		      and	#$f0
    223  f7ad		       05 9b		      ora	ScoreDigitGfx+2
    224  f7af		       85 9b		      sta	ScoreDigitGfx+2
    225  f7b1
    226  f7b1		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    227  f7b3		       a5 99		      lda	ScoreDigitGfx
    228  f7b5		       85 02		      sta	WSYNC
    229  f7b7				   .score_draw_digit
    230  f7b7
    231  f7b7							;lda ScoreDigitGfx
    232  f7b7		       85 0d		      sta	PF0
    233  f7b9		       a5 9a		      lda	ScoreDigitGfx+1
    234  f7bb		       85 0e		      sta	PF1
    235  f7bd		       a5 9b		      lda	ScoreDigitGfx+2
    236  f7bf		       85 0f		      sta	PF2
    237  f7c1
    238  f7c1							; Begin preparing next line
    239  f7c1		       e6 95		      inc	ScoreDigitOnes
    240  f7c3		       e6 97		      inc	ScoreDigitTens
    241  f7c5		       e6 96		      inc	ScoreDigitOnes+1
    242  f7c7		       e6 98		      inc	ScoreDigitTens+1
    243  f7c9
    244  f7c9		       a9 00		      lda	#0
    245  f7cb		       85 0d		      sta	PF0
    246  f7cd		       a5 9c		      lda	ScoreBarGfx+0
    247  f7cf		       85 0e		      sta	PF1
    248  f7d1		       a5 9d		      lda	ScoreBarGfx+1
    249  f7d3		       85 0f		      sta	PF2
    250  f7d5
    251  f7d5							; Level 1st Digit
    252  f7d5		       a4 97		      ldy	ScoreDigitTens
    253  f7d7		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    254  f7da		       29 f0		      and	#$f0
    255  f7dc		       85 80		      sta	Temp
    256  f7de
    257  f7de							; Score 1st Digit
    258  f7de		       a4 98		      ldy	ScoreDigitTens+1
    259  f7e0		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    260  f7e3		       29 0f		      and	#$0f
    261  f7e5		       85 81		      sta	Temp+1
    262  f7e7
    263  f7e7		       a5 99		      lda	ScoreDigitGfx
    264  f7e9		       85 0d		      sta	PF0
    265  f7eb		       a5 9a		      lda	ScoreDigitGfx+1
    266  f7ed		       85 0e		      sta	PF1
    267  f7ef		       a5 9b		      lda	ScoreDigitGfx+2
    268  f7f1		       85 0f		      sta	PF2
    269  f7f3
    270  f7f3							; Level 2nd Digit (and transfer)
    271  f7f3		       a4 95		      ldy	ScoreDigitOnes
    272  f7f5		       b9 ce f0 	      lda	ScoreDigits,y
    273  f7f8		       29 f0		      and	#$f0
    274  f7fa		       85 9a		      sta	ScoreDigitGfx+1
    275  f7fc
      0  f7fc					      sleep	3
      1  f7fc				   .CYCLES    SET	3
      2  f7fc
      3  f7fc				  -	      IF	.CYCLES < 2
      4  f7fc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7fc				  -	      ERR
      6  f7fc					      ENDIF
      7  f7fc
      8  f7fc					      IF	.CYCLES & 1
      9  f7fc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7fc		       04 00		      nop	0
     11  f7fe				  -	      ELSE
     12  f7fe				  -	      bit	VSYNC
     13  f7fe					      ENDIF
     14  f7fe				   .CYCLES    SET	.CYCLES - 3
     15  f7fe					      ENDIF
     16  f7fe
     17  f7fe				  -	      REPEAT	.CYCLES / 2
     18  f7fe				  -	      nop
     19  f7fe					      REPEND
    277  f7fe
    278  f7fe		       a9 00		      lda	#0
    279  f800		       85 0d		      sta	PF0
    280  f802		       a5 9c		      lda	ScoreBarGfx+0
    281  f804		       85 0e		      sta	PF1
    282  f806		       a4 9d		      ldy	ScoreBarGfx+1
    283  f808		       84 0f		      sty	PF2
    284  f80a
    285  f80a							; Score 2nd Digit (and transfer)
    286  f80a		       a4 96		      ldy	ScoreDigitOnes+1
    287  f80c		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    288  f80f		       29 f0		      and	#$f0
    289  f811		       05 81		      ora	Temp+1
    290  f813		       85 9b		      sta	ScoreDigitGfx+2
    291  f815
    292  f815							; Transfer Level 1st Digit
    293  f815		       a5 80		      lda	Temp
    294  f817		       85 99		      sta	ScoreDigitGfx
    295  f819
    296  f819		       ca		      dex
    297  f81a		       d0 9b		      bne	.score_draw_digit
    298  f81c
    299  f81c		       a9 00		      lda	#0
    300  f81e		       85 0d		      sta	PF0
    301  f820		       85 0e		      sta	PF1
    302  f822		       85 0f		      sta	PF2
    303  f824
    304  f824		       60		      rts
    305  f825
    306  f825				   ScoreBar
    307  f825		       40		      .BYTE.b	#%01000000
    308  f826		       40		      .BYTE.b	#%01000000
    309  f827		       60		      .BYTE.b	#%01100000
    310  f828		       70		      .BYTE.b	#%01110000
    311  f829		       78		      .BYTE.b	#%01111000
    312  f82a		       7c		      .BYTE.b	#%01111100
    313  f82b		       7e		      .BYTE.b	#%01111110
    314  f82c		       7f		      .BYTE.b	#%01111111
    315  f82d
    316  f82d				   ScoreBarFlip
    317  f82d		       01		      .BYTE.b	#%00000001
    318  f82e		       03		      .BYTE.b	#%00000011
    319  f82f		       07		      .BYTE.b	#%00000111
    320  f830		       0f		      .BYTE.b	#%00001111
    321  f831		       1f		      .BYTE.b	#%00011111
    322  f832		       3f		      .BYTE.b	#%00111111
    323  f833		       7f		      .BYTE.b	#%01111111
    324  f834		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f835					      include	"objects/web.asm"
      1  f835							;================
      2  f835							; Web (Playfield)
      3  f835							;================
      4  f835
      5  f835							; Constants
      6  f835
      7  f835		       00 00	   WEB_BG_COLOR =	#$00
      8  f835		       00 02	   WEB_FG_COLOR =	#$02
      9  f835
     10  f835		       00 1c	   WEB_SIZE   =	28
     11  f835		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f835		       00 06	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f835
     14  f835							; Scanline Draw
     15  f835
     16  f835				   WebDrawStart
     17  f835
     18  f835							; Load Colors
     19  f835		       a5 a1		      lda	WebColor+1
     20  f837		       85 08		      sta	COLUPF
     21  f839
     22  f839							; Mirror playfield and use standard playfield color
     23  f839							;lda CtrlPf
     24  f839							;and #%11111100
     25  f839							;ora #%00000001
     26  f839							;sta CtrlPf
     27  f839							;sta CTRLPF
     28  f839
     29  f839							; Initialize image index
     30  f839		       a9 00		      lda	#0
     31  f83b		       85 9f		      sta	WebIndex
     32  f83d
     33  f83d		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f83e					      include	"objects/spider.asm"
      1  f83e							;=================
      2  f83e							; Spider (player0)
      3  f83e							;=================
      4  f83e
      5  f83e							; Constants
      6  f83e
      7  f83e		       00 56	   SPIDER_COLOR =	#$56
      8  f83e		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f83e		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f83e		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f83e
     12  f83e		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f83e		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f83e		       00 02	   SPIDER_VEL_X =	2
     15  f83e		       00 02	   SPIDER_VEL_Y =	2
     16  f83e
     17  f83e							; Initialization
     18  f83e
     19  f83e				   SpiderInit
     20  f83e
     21  f83e							; Initialize Position in center of screen
     22  f83e		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f840		       85 a4		      sta	SpiderPos
     24  f842		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f844		       85 a5		      sta	SpiderPos+1
     26  f846
     27  f846							; Initial direction
     28  f846		       a9 20		      lda	#%00100000
     29  f848		       85 a6		      sta	SpiderCtrl
     30  f84a
     31  f84a							; Setup Sprite
      0  f84a					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f84a				   .POINTER   SET	SpiderPtr
      2  f84a				   .ADDRESS   SET	SpiderSprite
      3  f84a
      4  f84a		       a9 a4		      LDA	#<.ADDRESS
      5  f84c		       85 a2		      STA	.POINTER
      6  f84e		       a9 f1		      LDA	#>.ADDRESS
      7  f850		       85 a3		      STA	.POINTER+1
      8  f852
     33  f852
     34  f852		       60		      rts
     35  f853
     36  f853							; Frame Update
     37  f853
     38  f853				   SpiderUpdate
     39  f853		       20 5a f8 	      jsr	SpiderControl
     40  f856		       20 40 f9 	      jsr	SpiderCollision
     41  f859		       60		      rts
     42  f85a
     43  f85a				   SpiderControl
     44  f85a
     45  f85a							; Control Position
     46  f85a		       a6 a4		      ldx	SpiderPos
     47  f85c		       a4 a5		      ldy	SpiderPos+1
     48  f85e		       ad 80 02 	      lda	SWCHA
     49  f861
     50  f861				   .spider_control_check_right
     51  f861		       30 02		      bmi	.spider_control_check_left
     52  f863
     53  f863					      REPEAT	#SPIDER_VEL_X
     54  f863		       e8		      inx
     53  f863					      REPEND
     54  f864		       e8		      inx
     55  f865					      REPEND
     56  f865
     57  f865				   .spider_control_check_left
     58  f865		       2a		      rol
     59  f866		       30 02		      bmi	.spider_control_check_down
     60  f868
     61  f868					      REPEAT	#SPIDER_VEL_X
     62  f868		       ca		      dex
     61  f868					      REPEND
     62  f869		       ca		      dex
     63  f86a					      REPEND
     64  f86a
     65  f86a				   .spider_control_check_down
     66  f86a		       2a		      rol
     67  f86b		       30 02		      bmi	.spider_control_check_up
     68  f86d
     69  f86d					      REPEAT	#SPIDER_VEL_Y
     70  f86d		       88		      dey
     69  f86d					      REPEND
     70  f86e		       88		      dey
     71  f86f					      REPEND
     72  f86f
     73  f86f				   .spider_control_check_up
     74  f86f		       2a		      rol
     75  f870		       30 02		      bmi	.spider_control_sprite
     76  f872
     77  f872					      REPEAT	#SPIDER_VEL_Y
     78  f872		       c8		      iny
     77  f872					      REPEND
     78  f873		       c8		      iny
     79  f874					      REPEND
     80  f874
     81  f874				   .spider_control_sprite
     82  f874							; Control Sprite
     83  f874		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     84  f876
     85  f876				   .spider_control_sprite_x
     86  f876		       e4 a4		      cpx	SpiderPos
     87  f878		       90 04		      bcc	.spider_control_sprite_left
     88  f87a		       f0 09		      beq	.spider_control_sprite_y
     89  f87c		       b0 05		      bcs	.spider_control_sprite_right
     90  f87e
     91  f87e				   .spider_control_sprite_left
     92  f87e		       09 80		      ora	#%10000000
     93  f880		       4c 85 f8 	      jmp	.spider_control_sprite_y
     94  f883
     95  f883				   .spider_control_sprite_right
     96  f883		       09 40		      ora	#%01000000
     97  f885
     98  f885				   .spider_control_sprite_y
     99  f885		       c4 a5		      cpy	SpiderPos+1
    100  f887		       90 04		      bcc	.spider_control_sprite_down
    101  f889		       f0 09		      beq	.spider_control_sprite_store
    102  f88b		       b0 05		      bcs	.spider_control_sprite_up
    103  f88d
    104  f88d				   .spider_control_sprite_down
    105  f88d		       09 10		      ora	#%00010000
    106  f88f		       4c 94 f8 	      jmp	.spider_control_sprite_store
    107  f892
    108  f892				   .spider_control_sprite_up
    109  f892		       09 20		      ora	#%00100000
    110  f894
    111  f894				   .spider_control_sprite_store
    112  f894		       c9 00		      cmp	#%00000000
    113  f896		       f0 02		      beq	.spider_control_boundary
    114  f898		       85 a6		      sta	SpiderCtrl
    115  f89a
    116  f89a				   .spider_control_boundary
    117  f89a							; Check Playfield Boundaries
    118  f89a
    119  f89a				   .spider_control_boundary_left
    120  f89a		       e0 03		      cpx	#SPIDER_VEL_X+1
    121  f89c		       b0 05		      bcs	.spider_control_boundary_right
    122  f89e		       a2 03		      ldx	#SPIDER_VEL_X+1
    123  f8a0		       4c a9 f8 	      jmp	.spider_control_boundary_top
    124  f8a3
    125  f8a3				   .spider_control_boundary_right
    126  f8a3		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    127  f8a5		       90 02		      bcc	.spider_control_boundary_top
    128  f8a7		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    129  f8a9
    130  f8a9				   .spider_control_boundary_top
    131  f8a9		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    132  f8ab		       b0 05		      bcs	.spider_control_boundary_bottom
    133  f8ad		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    134  f8af		       4c b8 f8 	      jmp	.spider_control_store
    135  f8b2
    136  f8b2				   .spider_control_boundary_bottom
    137  f8b2		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    138  f8b4		       90 02		      bcc	.spider_control_store
    139  f8b6		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    140  f8b8
    141  f8b8				   .spider_control_store
    142  f8b8							; Store new position
    143  f8b8		       86 a4		      stx	SpiderPos
    144  f8ba		       84 a5		      sty	SpiderPos+1
    145  f8bc
    146  f8bc							; TODO: Optimize this somehow?
    147  f8bc				   .spider_control_sprite_assign
    148  f8bc							; Skip if no change
    149  f8bc		       c9 00		      cmp	#%00000000
    150  f8be		       f0 7f		      beq	.spider_control_return
    151  f8c0
    152  f8c0		       a2 00		      ldx	#%00000000	; For reflection
    153  f8c2
    154  f8c2				   .spider_control_sprite_assign_left
    155  f8c2		       c9 80		      cmp	#%10000000
    156  f8c4		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f8c6					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8c6				   .POINTER   SET	SpiderPtr
      2  f8c6				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8c6
      4  f8c6		       a9 b4		      LDA	#<.ADDRESS
      5  f8c8		       85 a2		      STA	.POINTER
      6  f8ca		       a9 f1		      LDA	#>.ADDRESS
      7  f8cc		       85 a3		      STA	.POINTER+1
      8  f8ce
    158  f8ce		       a2 08		      ldx	#%00001000
    159  f8d0		       4c 3d f9 	      jmp	.spider_control_reflect
    160  f8d3
    161  f8d3				   .spider_control_sprite_assign_right
    162  f8d3		       c9 40		      cmp	#%01000000
    163  f8d5		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f8d7					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8d7				   .POINTER   SET	SpiderPtr
      2  f8d7				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8d7
      4  f8d7		       a9 b4		      LDA	#<.ADDRESS
      5  f8d9		       85 a2		      STA	.POINTER
      6  f8db		       a9 f1		      LDA	#>.ADDRESS
      7  f8dd		       85 a3		      STA	.POINTER+1
      8  f8df
    165  f8df		       4c 3d f9 	      jmp	.spider_control_reflect
    166  f8e2
    167  f8e2				   .spider_control_sprite_assign_top
    168  f8e2		       c9 20		      cmp	#%00100000
    169  f8e4		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f8e6					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f8e6				   .POINTER   SET	SpiderPtr
      2  f8e6				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f8e6
      4  f8e6		       a9 a4		      LDA	#<.ADDRESS
      5  f8e8		       85 a2		      STA	.POINTER
      6  f8ea		       a9 f1		      LDA	#>.ADDRESS
      7  f8ec		       85 a3		      STA	.POINTER+1
      8  f8ee
    171  f8ee		       4c 3d f9 	      jmp	.spider_control_reflect
    172  f8f1
    173  f8f1				   .spider_control_sprite_assign_bottom
    174  f8f1		       c9 10		      cmp	#%00010000
    175  f8f3		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f8f5					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f8f5				   .POINTER   SET	SpiderPtr
      2  f8f5				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f8f5
      4  f8f5		       a9 c4		      LDA	#<.ADDRESS
      5  f8f7		       85 a2		      STA	.POINTER
      6  f8f9		       a9 f1		      LDA	#>.ADDRESS
      7  f8fb		       85 a3		      STA	.POINTER+1
      8  f8fd
    177  f8fd		       4c 3d f9 	      jmp	.spider_control_reflect
    178  f900
    179  f900				   .spider_control_sprite_assign_top_right
    180  f900		       c9 60		      cmp	#%01100000
    181  f902		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f904					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f904				   .POINTER   SET	SpiderPtr
      2  f904				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f904
      4  f904		       a9 b4		      LDA	#<.ADDRESS
      5  f906		       85 a2		      STA	.POINTER
      6  f908		       a9 f1		      LDA	#>.ADDRESS
      7  f90a		       85 a3		      STA	.POINTER+1
      8  f90c
    183  f90c		       4c 3d f9 	      jmp	.spider_control_reflect
    184  f90f
    185  f90f				   .spider_control_sprite_assign_bottom_right
    186  f90f		       c9 50		      cmp	#%01010000
    187  f911		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f913					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f913				   .POINTER   SET	SpiderPtr
      2  f913				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f913
      4  f913		       a9 b4		      LDA	#<.ADDRESS
      5  f915		       85 a2		      STA	.POINTER
      6  f917		       a9 f1		      LDA	#>.ADDRESS
      7  f919		       85 a3		      STA	.POINTER+1
      8  f91b
    189  f91b		       4c 3d f9 	      jmp	.spider_control_reflect
    190  f91e
    191  f91e				   .spider_control_sprite_assign_bottom_left
    192  f91e		       c9 90		      cmp	#%10010000
    193  f920		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f922					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f922				   .POINTER   SET	SpiderPtr
      2  f922				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f922
      4  f922		       a9 b4		      LDA	#<.ADDRESS
      5  f924		       85 a2		      STA	.POINTER
      6  f926		       a9 f1		      LDA	#>.ADDRESS
      7  f928		       85 a3		      STA	.POINTER+1
      8  f92a
    195  f92a		       a2 08		      ldx	#%00001000
    196  f92c		       4c 3d f9 	      jmp	.spider_control_reflect
    197  f92f
    198  f92f				   .spider_control_sprite_assign_top_left
    199  f92f		       c9 a0		      cmp	#%10100000
    200  f931		       d0 0a		      bne	.spider_control_reflect
      0  f933					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f933				   .POINTER   SET	SpiderPtr
      2  f933				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f933
      4  f933		       a9 b4		      LDA	#<.ADDRESS
      5  f935		       85 a2		      STA	.POINTER
      6  f937		       a9 f1		      LDA	#>.ADDRESS
      7  f939		       85 a3		      STA	.POINTER+1
      8  f93b
    202  f93b		       a2 08		      ldx	#%00001000
    203  f93d
    204  f93d				   .spider_control_reflect
    205  f93d		       86 0b		      stx	REFP0
    206  f93f
    207  f93f				   .spider_control_return
    208  f93f		       60		      rts
    209  f940
    210  f940				   SpiderCollision
    211  f940		       a0 56		      ldy	#SPIDER_COLOR
    212  f942
    213  f942							; Check b/w
    214  f942		       ad 82 02 	      lda	SWCHB
    215  f945					      REPEAT	4
    216  f945		       4a		      lsr
    215  f945					      REPEND
    216  f946		       4a		      lsr
    215  f946					      REPEND
    216  f947		       4a		      lsr
    215  f947					      REPEND
    216  f948		       4a		      lsr
    217  f949					      REPEND
    218  f949		       b0 02		      bcs	.spider_collision_m0
    219  f94b
    220  f94b		       a0 0e		      ldy	#SPIDER_BW_COLOR
    221  f94d
    222  f94d				   .spider_collision_m0
    223  f94d							; Check stun status
    224  f94d		       a6 b5		      ldx	BugStunned
    225  f94f		       d0 04		      bne	.spider_collision_m1
    226  f951
    227  f951							; Collision for M0 (V set)
    228  f951		       24 00		      bit	CXM0P
    229  f953		       70 0b		      bvs	.spider_collision_active
    230  f955
    231  f955				   .spider_collision_m1
    232  f955							; Check stun status
    233  f955		       a6 b6		      ldx	BugStunned+1
    234  f957		       d0 14		      bne	.spider_collision_return
    235  f959
    236  f959							; Collision for M1 (N set)
    237  f959		       24 01		      bit	CXM1P
    238  f95b		       30 03		      bmi	.spider_collision_active
    239  f95d
    240  f95d		       4c 6d f9 	      jmp	.spider_collision_return
    241  f960
    242  f960				   .spider_collision_active
    243  f960		       a0 44		      ldy	#SPIDER_COL_COLOR
    244  f962
    245  f962							; Check b/w
    246  f962		       ad 82 02 	      lda	SWCHB
    247  f965					      REPEAT	4
    248  f965		       4a		      lsr
    247  f965					      REPEND
    248  f966		       4a		      lsr
    247  f966					      REPEND
    248  f967		       4a		      lsr
    247  f967					      REPEND
    248  f968		       4a		      lsr
    249  f969					      REPEND
    250  f969		       b0 02		      bcs	.spider_collision_return
    251  f96b
    252  f96b		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    253  f96d
    254  f96d				   .spider_collision_return
    255  f96d		       84 a7		      sty	SpiderColor
    256  f96f		       60		      rts
    257  f970
    258  f970				   SpiderPosition
    259  f970
    260  f970							; Set Position
    261  f970		       a2 00		      ldx	#0	; Object (player0)
    262  f972		       a5 a4		      lda	SpiderPos	; X Position
    263  f974		       20 00 f0 	      jsr	PosObject
    264  f977
    265  f977		       60		      rts
    266  f978
    267  f978							; Scanline Draw
    268  f978
    269  f978				   SpiderDrawStart
    270  f978
    271  f978							; Set player 0 to be quad size
    272  f978							;lda NuSiz0
    273  f978							;and #%11111000
    274  f978							;ora #%00000101
    275  f978							;sta NuSiz0
    276  f978							;sta NUSIZ0
    277  f978
    278  f978							; Set sprite color
    279  f978		       a5 a7		      lda	SpiderColor
    280  f97a		       85 06		      sta	COLUP0
    281  f97c
    282  f97c							; Determine if we need to use vertical delay (odd line)
    283  f97c		       a5 a5		      lda	SpiderPos+1	; Y Position
    284  f97e		       4a		      lsr
    285  f97f		       b0 05		      bcs	.spider_draw_start_nodelay
    286  f981
    287  f981		       a0 01		      ldy	#1
    288  f983		       4c 88 f9 	      jmp	.spider_draw_start_set_delay
    289  f986
    290  f986				   .spider_draw_start_nodelay
    291  f986		       a0 00		      ldy	#0
    292  f988
    293  f988				   .spider_draw_start_set_delay
    294  f988		       84 25		      sty	VDELP0
    295  f98a
    296  f98a				   .spider_draw_start_pos
    297  f98a							; Calculate starting position
    298  f98a		       18		      clc
    299  f98b		       69 10		      adc	#SPIDER_SIZE
    300  f98d		       85 a9		      sta	SpiderDrawPos
    301  f98f
    302  f98f							; Initialize sprite index and line buffer
    303  f98f		       a9 10		      lda	#SPIDER_SPRITE_SIZE
    304  f991		       85 a8		      sta	SpiderIndex
    305  f993		       a9 00		      lda	#0
    306  f995		       85 aa		      sta	SpiderLine
    307  f997
    308  f997		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f998					      include	"objects/line.asm"
      1  f998							;================
      2  f998							; Line (ball)
      3  f998							;================
      4  f998
      5  f998							; Constants
      6  f998
      7  f998		       00 08	   LINE_SIZE  =	8
      8  f998		       00 04	   LINE_VEL_X =	4
      9  f998		       00 04	   LINE_VEL_Y =	4
     10  f998
     11  f998		       00 08	   LINE_AUDIO_C =	8
     12  f998		       00 01	   LINE_AUDIO_F =	1
     13  f998		       00 04	   LINE_AUDIO_V =	4
     14  f998
     15  f998		       00 08	   LINE_SAMPLE_LEN =	8
     16  f998		       00 03	   LINE_SAMPLE_C =	3
     17  f998		       00 01	   LINE_SAMPLE_F =	1
     18  f998		       00 04	   LINE_SAMPLE_V =	4
     19  f998
     20  f998							; Initialization
     21  f998
     22  f998				   LineInit
     23  f998
     24  f998							; Initial Line Control
     25  f998		       a9 00		      lda	#0
     26  f99a		       85 ad		      sta	LineEnabled
     27  f99c		       85 ae		      sta	LinePos+0
     28  f99e		       85 af		      sta	LinePos+1
     29  f9a0
     30  f9a0							; Initial direction
     31  f9a0							;lda #0
     32  f9a0		       85 b0		      sta	LineVelocity+0
     33  f9a2		       a9 04		      lda	#LINE_VEL_Y
     34  f9a4		       85 b1		      sta	LineVelocity+1
     35  f9a6
     36  f9a6							; Disable line at start
     37  f9a6							;lda #-1
     38  f9a6							;sta LineDrawPos+0
     39  f9a6							;sta LineDrawPos+1
     40  f9a6
     41  f9a6		       60		      rts
     42  f9a7
     43  f9a7							; Frame Update
     44  f9a7
     45  f9a7				   LineUpdate
     46  f9a7		       20 b1 f9 	      jsr	LineControl
     47  f9aa		       20 63 fa 	      jsr	LineObject
     48  f9ad		       20 8e fa 	      jsr	LineCollision
     49  f9b0		       60		      rts
     50  f9b1
     51  f9b1				   LineControl
     52  f9b1
     53  f9b1							; Check if Fire Button on controller 1 is pressed
     54  f9b1		       a5 0c		      lda	INPT4
     55  f9b3		       30 08		      bmi	.line_control_skip
     56  f9b5
     57  f9b5		       24 ad		      bit	LineEnabled
     58  f9b7		       30 04		      bmi	.line_control_skip
     59  f9b9
     60  f9b9		       a5 a6		      lda	SpiderCtrl
     61  f9bb		       d0 03		      bne	.line_control_fire
     62  f9bd
     63  f9bd				   .line_control_skip
     64  f9bd		       4c 62 fa 	      jmp	.line_control_return
     65  f9c0
     66  f9c0				   .line_control_fire
     67  f9c0		       20 d2 fa 	      jsr	LineEnable
     68  f9c3
     69  f9c3				   .line_control_x
     70  f9c3		       a5 a6		      lda	SpiderCtrl
     71  f9c5		       29 c0		      and	#%11000000
     72  f9c7		       f0 0e		      beq	.line_control_x_none
     73  f9c9				   .line_control_x_left
     74  f9c9		       c9 80		      cmp	#%10000000
     75  f9cb		       d0 05		      bne	.line_control_x_right
     76  f9cd
     77  f9cd		       a9 fc		      lda	#-LINE_VEL_X
     78  f9cf		       4c d9 f9 	      jmp	.line_control_x_store
     79  f9d2				   .line_control_x_right
     80  f9d2		       a9 04		      lda	#LINE_VEL_X
     81  f9d4		       4c d9 f9 	      jmp	.line_control_x_store
     82  f9d7				   .line_control_x_none
     83  f9d7		       a9 00		      lda	#0
     84  f9d9				   .line_control_x_store
     85  f9d9		       85 b0		      sta	LineVelocity
     86  f9db
     87  f9db				   .line_control_y
     88  f9db		       a5 a6		      lda	SpiderCtrl
     89  f9dd		       29 30		      and	#%00110000
     90  f9df		       f0 0e		      beq	.line_control_y_none
     91  f9e1				   .line_control_y_up
     92  f9e1		       c9 20		      cmp	#%00100000
     93  f9e3		       d0 05		      bne	.line_control_y_down
     94  f9e5
     95  f9e5		       a9 04		      lda	#LINE_VEL_Y
     96  f9e7		       4c f1 f9 	      jmp	.line_control_y_store
     97  f9ea				   .line_control_y_down
     98  f9ea		       a9 fc		      lda	#-LINE_VEL_Y
     99  f9ec		       4c f1 f9 	      jmp	.line_control_y_store
    100  f9ef				   .line_control_y_none
    101  f9ef		       a9 00		      lda	#0
    102  f9f1				   .line_control_y_store
    103  f9f1		       85 b1		      sta	LineVelocity+1
    104  f9f3
    105  f9f3				   .line_control_position
    106  f9f3
    107  f9f3		       a2 00		      ldx	#0	; offsetX
    108  f9f5		       a0 00		      ldy	#0	; offsetY
    109  f9f7
    110  f9f7		       a5 a6		      lda	SpiderCtrl
    111  f9f9		       29 f0		      and	#%11110000
    112  f9fb
    113  f9fb				   .line_control_position_left
    114  f9fb		       c9 80		      cmp	#%10000000
    115  f9fd		       d0 07		      bne	.line_control_position_right
    116  f9ff
    117  f9ff		       a2 00		      ldx	#0
    118  fa01		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    119  fa03		       4c 4e fa 	      jmp	.line_control_position_store
    120  fa06
    121  fa06				   .line_control_position_right
    122  fa06		       c9 40		      cmp	#%01000000
    123  fa08		       d0 07		      bne	.line_control_position_top
    124  fa0a
    125  fa0a		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    126  fa0c		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    127  fa0e		       4c 4e fa 	      jmp	.line_control_position_store
    128  fa11
    129  fa11				   .line_control_position_top
    130  fa11		       c9 20		      cmp	#%00100000
    131  fa13		       d0 07		      bne	.line_control_position_bottom
    132  fa15
    133  fa15		       a2 08		      ldx	#SPIDER_SIZE/2
    134  fa17		       a0 10		      ldy	#SPIDER_SIZE
    135  fa19		       4c 4e fa 	      jmp	.line_control_position_store
    136  fa1c
    137  fa1c				   .line_control_position_bottom
    138  fa1c		       c9 10		      cmp	#%00010000
    139  fa1e		       d0 05		      bne	.line_control_position_top_right
    140  fa20
    141  fa20		       a2 08		      ldx	#SPIDER_SIZE/2
    142  fa22		       4c 4e fa 	      jmp	.line_control_position_store
    143  fa25
    144  fa25				   .line_control_position_top_right
    145  fa25		       c9 60		      cmp	#%01100000
    146  fa27		       d0 07		      bne	.line_control_position_bottom_right
    147  fa29
    148  fa29		       a2 10		      ldx	#SPIDER_SIZE
    149  fa2b		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    150  fa2d		       4c 4e fa 	      jmp	.line_control_position_store
    151  fa30
    152  fa30				   .line_control_position_bottom_right
    153  fa30		       c9 50		      cmp	#%01010000
    154  fa32		       d0 07		      bne	.line_control_position_bottom_left
    155  fa34
    156  fa34		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    157  fa36		       a0 00		      ldy	#0
    158  fa38		       4c 4e fa 	      jmp	.line_control_position_store
    159  fa3b
    160  fa3b				   .line_control_position_bottom_left
    161  fa3b		       c9 90		      cmp	#%10010000
    162  fa3d		       d0 07		      bne	.line_control_position_top_left
    163  fa3f
    164  fa3f							; No Offset
    165  fa3f		       a2 04		      ldx	#LINE_SIZE/2
    166  fa41		       a0 04		      ldy	#LINE_SIZE/2
    167  fa43		       4c 4e fa 	      jmp	.line_control_position_store
    168  fa46
    169  fa46				   .line_control_position_top_left
    170  fa46		       c9 a0		      cmp	#%10100000
    171  fa48		       d0 04		      bne	.line_control_position_store
    172  fa4a
    173  fa4a		       a2 00		      ldx	#0
    174  fa4c		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    175  fa4e
    176  fa4e				   .line_control_position_store
    177  fa4e
    178  fa4e							; Apply offsetX to playerX
    179  fa4e		       a5 a4		      lda	SpiderPos
    180  fa50		       86 80		      stx	Temp
    181  fa52		       18		      clc
    182  fa53		       65 80		      adc	Temp
    183  fa55		       aa		      tax
    184  fa56
    185  fa56							; Apply offsetY to playerY
    186  fa56		       a5 a5		      lda	SpiderPos+1
    187  fa58		       84 80		      sty	Temp
    188  fa5a		       18		      clc
    189  fa5b		       65 80		      adc	Temp
    190  fa5d		       a8		      tay
    191  fa5e
    192  fa5e		       86 ae		      stx	LinePos
    193  fa60		       84 af		      sty	LinePos+1
    194  fa62
    195  fa62				   .line_control_return
    196  fa62		       60		      rts
    197  fa63
    198  fa63				   LineObject
    199  fa63
    200  fa63							; Check if line is enabled
    201  fa63		       24 ad		      bit	LineEnabled
    202  fa65		       10 26		      bpl	.line_object_return
    203  fa67
    204  fa67							; Load position
    205  fa67		       a6 ae		      ldx	LinePos
    206  fa69		       a4 af		      ldy	LinePos+1
    207  fa6b
    208  fa6b				   .line_object_boundary
    209  fa6b				   .line_object_boundary_left
    210  fa6b		       e0 04		      cpx	#LINE_VEL_X
    211  fa6d		       90 1b		      bcc	.line_object_disable
    212  fa6f				   .line_object_boundary_right
    213  fa6f		       e0 9b		      cpx	#160-LINE_VEL_X-1
    214  fa71		       b0 17		      bcs	.line_object_disable
    215  fa73				   .line_object_boundary_bottom
    216  fa73		       c0 04		      cpy	#LINE_VEL_Y
    217  fa75		       90 13		      bcc	.line_object_disable
    218  fa77				   .line_object_boundary_top
    219  fa77		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    220  fa79		       b0 0f		      bcs	.line_object_disable
    221  fa7b
    222  fa7b				   .line_object_velocity
    223  fa7b
    224  fa7b							; Apply Velocity
    225  fa7b		       8a		      txa
    226  fa7c		       18		      clc
    227  fa7d		       65 b0		      adc	LineVelocity
    228  fa7f		       85 ae		      sta	LinePos
    229  fa81
    230  fa81		       98		      tya
    231  fa82		       18		      clc
    232  fa83		       65 b1		      adc	LineVelocity+1
    233  fa85		       85 af		      sta	LinePos+1
    234  fa87
    235  fa87		       4c 8d fa 	      jmp	.line_object_return
    236  fa8a
    237  fa8a				   .line_object_disable
    238  fa8a		       20 de fa 	      jsr	LineDisable
    239  fa8d
    240  fa8d				   .line_object_return
    241  fa8d		       60		      rts
    242  fa8e
    243  fa8e				   LineCollision
    244  fa8e
    245  fa8e		       a9 78		      lda	#BUG_STUN_LENGTH
    246  fa90
    247  fa90				   .line_collision_m0
    248  fa90		       24 04		      bit	CXM0FB
    249  fa92		       50 08		      bvc	.line_collision_m1
    250  fa94
    251  fa94							; Set stun timer
    252  fa94		       85 b5		      sta	BugStunned+0
    253  fa96
    254  fa96							; Disable line
    255  fa96		       20 de fa 	      jsr	LineDisable
    256  fa99		       4c a5 fa 	      jmp	.line_collision_sample
    257  fa9c
    258  fa9c				   .line_collision_m1
    259  fa9c		       24 05		      bit	CXM1FB
    260  fa9e		       50 08		      bvc	.line_collision_return
    261  faa0
    262  faa0							; Set stun timer
    263  faa0		       85 b6		      sta	BugStunned+1
    264  faa2
    265  faa2							; Disable line
    266  faa2		       20 de fa 	      jsr	LineDisable
    267  faa5
    268  faa5				   .line_collision_sample
    269  faa5		       20 fc fa 	      jsr	LineSample
    270  faa8
    271  faa8				   .line_collision_return
    272  faa8		       60		      rts
    273  faa9
    274  faa9				   LinePosition
    275  faa9
    276  faa9							; Set Line Position
    277  faa9		       a2 04		      ldx	#4	; Object (ball)
    278  faab		       a5 ae		      lda	LinePos	; X Position
    279  faad		       20 00 f0 	      jsr	PosObject
    280  fab0
    281  fab0		       60		      rts
    282  fab1
    283  fab1							; Scanline Draw
    284  fab1
    285  fab1				   LineDrawStart
    286  fab1
    287  fab1		       24 ad		      bit	LineEnabled
    288  fab3		       30 07		      bmi	.line_draw_start
    289  fab5
    290  fab5		       a9 ff		      lda	#-1
    291  fab7		       85 b2		      sta	LineDrawPos+0
    292  fab9		       85 b3		      sta	LineDrawPos+1
    293  fabb		       60		      rts
    294  fabc
    295  fabc				   .line_draw_start
    296  fabc							; Determine if we need to use vertical delay (oven line)
    297  fabc		       a5 af		      lda	LinePos+1
    298  fabe		       4a		      lsr
    299  fabf		       90 05		      bcc	.line_draw_start_nodelay
    300  fac1
    301  fac1		       a0 01		      ldy	#1
    302  fac3		       4c c8 fa 	      jmp	.line_draw_start_set_delay
    303  fac6
    304  fac6				   .line_draw_start_nodelay
    305  fac6		       a0 00		      ldy	#0
    306  fac8
    307  fac8				   .line_draw_start_set_delay
    308  fac8		       84 27		      sty	VDELBL
    309  faca
    310  faca				   .line_draw_start_pos
    311  faca							; Calculate starting position
    312  faca		       18		      clc
    313  facb		       85 b2		      sta	LineDrawPos+0
    314  facd		       69 04		      adc	#LINE_SIZE/2
    315  facf		       85 b3		      sta	LineDrawPos+1
    316  fad1
    317  fad1		       60		      rts
    318  fad2
    319  fad2				   LineEnable
    320  fad2		       a9 80		      lda	#%10000000
    321  fad4		       85 ad		      sta	LineEnabled
    322  fad6
    323  fad6		       a5 91		      lda	SampleStep
    324  fad8		       d0 03		      bne	.line_enable_return
    325  fada
    326  fada		       20 ea fa 	      jsr	LineAudioPlay
    327  fadd
    328  fadd				   .line_enable_return
    329  fadd		       60		      rts
    330  fade
    331  fade				   LineDisable
    332  fade		       a9 00		      lda	#0
    333  fae0		       85 ad		      sta	LineEnabled
    334  fae2
    335  fae2		       a5 91		      lda	SampleStep
    336  fae4		       d0 03		      bne	.line_disable_return
    337  fae6
    338  fae6		       20 f7 fa 	      jsr	LineAudioMute
    339  fae9
    340  fae9				   .line_disable_return
    341  fae9		       60		      rts
    342  faea
    343  faea				   LineAudioPlay
    344  faea		       a9 08		      lda	#LINE_AUDIO_C
    345  faec		       85 16		      sta	AUDC1
    346  faee		       a9 01		      lda	#LINE_AUDIO_F
    347  faf0		       85 18		      sta	AUDF1
    348  faf2		       a9 04		      lda	#LINE_AUDIO_V
    349  faf4		       85 1a		      sta	AUDV1
    350  faf6		       60		      rts
    351  faf7
    352  faf7				   LineAudioMute
    353  faf7		       a9 00		      lda	#0
    354  faf9		       85 1a		      sta	AUDV1
    355  fafb							;sta AUDF1
    356  fafb							;sta AUDC1
    357  fafb		       60		      rts
    358  fafc
    359  fafc				   LineSample
    360  fafc		       a9 08		      lda	#LINE_SAMPLE_LEN
    361  fafe		       85 91		      sta	SampleStep
    362  fb00		       a9 03		      lda	#LINE_SAMPLE_C
    363  fb02		       85 16		      sta	AUDC1
    364  fb04		       a9 01		      lda	#LINE_SAMPLE_F
    365  fb06		       85 18		      sta	AUDF1
    366  fb08		       a9 04		      lda	#LINE_SAMPLE_V
    367  fb0a		       85 1a		      sta	AUDV1
    368  fb0c		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  fb0d					      include	"objects/bug.asm"
      1  fb0d							;======================
      2  fb0d							; Bugs (missiles 0 & 1)
      3  fb0d							;======================
      4  fb0d
      5  fb0d							; Constants
      6  fb0d
      7  fb0d		       00 08	   BUG_SIZE   =	8
      8  fb0d		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  fb0d		       00 78	   BUG_STUN_LENGTH =	120
     10  fb0d		       00 04	   BUG_POINTS =	4
     11  fb0d
     12  fb0d		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  fb0d		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  fb0d		       00 38	   BUG_STUN_COLOR =	#$38
     15  fb0d		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  fb0d
     17  fb0d		       00 1e	   BUG_SAMPLE_LEN =	30
     18  fb0d		       00 03	   BUG_SAMPLE_C =	3
     19  fb0d		       00 14	   BUG_SAMPLE_F =	20
     20  fb0d		       00 04	   BUG_SAMPLE_V =	4
     21  fb0d
     22  fb0d		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  fb0d		       00 08	   BUG_COL_SAMPLE_C =	8
     24  fb0d		       00 08	   BUG_COL_SAMPLE_F =	8
     25  fb0d		       00 03	   BUG_COL_SAMPLE_V =	3
     26  fb0d
     27  fb0d							; Initialization
     28  fb0d
     29  fb0d				   BugInit
     30  fb0d
     31  fb0d							; Initialize Bugs
     32  fb0d		       a2 01		      ldx	#1
     33  fb0f
     34  fb0f				   .bug_init_loop
     35  fb0f		       20 16 fb 	      jsr	BugReset
     36  fb12
     37  fb12		       ca		      dex
     38  fb13		       10 fa		      bpl	.bug_init_loop
     39  fb15
     40  fb15		       60		      rts
     41  fb16
     42  fb16				   BugReset		; x = bug (0 or 1)
     43  fb16
     44  fb16							; Set random position
     45  fb16		       20 13 f0 	      jsr	Random
     46  fb19
     47  fb19		       a5 84		      lda	Rand8
     48  fb1b		       29 7f		      and	#$7f
     49  fb1d		       95 b7		      sta	BugPosX,x
     50  fb1f
     51  fb1f		       a5 85		      lda	Rand16
     52  fb21		       29 7f		      and	#$7f
     53  fb23		       95 b9		      sta	BugPosY,x
     54  fb25
     55  fb25							; Set as active
     56  fb25		       a9 00		      lda	#0
     57  fb27		       95 b5		      sta	BugStunned,x
     58  fb29
     59  fb29		       60		      rts
     60  fb2a
     61  fb2a							; Frame Update
     62  fb2a
     63  fb2a				   BugUpdate
     64  fb2a
     65  fb2a		       a2 01		      ldx	#1
     66  fb2c				   .bug_update_loop
     67  fb2c		       86 80		      stx	Temp+0
     68  fb2e
     69  fb2e		       b5 b5		      lda	BugStunned,x
     70  fb30		       f0 08		      beq	.bug_update_active
     71  fb32
     72  fb32				   .bug_update_stunned
     73  fb32		       d6 b5		      dec	BugStunned,x
     74  fb34		       20 bd fb 	      jsr	BugStunCollision
     75  fb37		       4c 40 fb 	      jmp	.bug_update_next
     76  fb3a
     77  fb3a				   .bug_update_active
     78  fb3a		       20 46 fb 	      jsr	BugMovement
     79  fb3d		       20 a5 fb 	      jsr	BugCollision
     80  fb40
     81  fb40				   .bug_update_next
     82  fb40		       a6 80		      ldx	Temp+0
     83  fb42		       ca		      dex
     84  fb43		       10 e7		      bpl	.bug_update_loop
     85  fb45
     86  fb45		       60		      rts
     87  fb46
     88  fb46				   BugMovement
     89  fb46
     90  fb46				   .bug_movement_random
     91  fb46		       20 13 f0 	      jsr	Random
     92  fb49		       29 03		      and	#%00000011
     93  fb4b		       85 81		      sta	Temp+1
     94  fb4d
     95  fb4d				   .bug_movement_load
     96  fb4d		       a6 80		      ldx	Temp+0
     97  fb4f
     98  fb4f				   .bug_movement_x
     99  fb4f		       a4 b4		      ldy	BugSpeed
    100  fb51
    101  fb51							; Alter X Position
    102  fb51		       a5 81		      lda	Temp+1
    103  fb53		       29 01		      and	#%00000001
    104  fb55
    105  fb55				   .bug_movement_x_check
    106  fb55		       c9 01		      cmp	#1
    107  fb57		       d0 08		      bne	.bug_movement_x_right
    108  fb59
    109  fb59				   .bug_movement_x_left
    110  fb59		       d6 b7		      dec	BugPosX,x
    111  fb5b		       88		      dey
    112  fb5c		       d0 fb		      bne	.bug_movement_x_left
    113  fb5e
    114  fb5e		       4c 66 fb 	      jmp	.bug_movement_y
    115  fb61
    116  fb61				   .bug_movement_x_right
    117  fb61		       f6 b7		      inc	BugPosX,x
    118  fb63		       88		      dey
    119  fb64		       d0 fb		      bne	.bug_movement_x_right
    120  fb66
    121  fb66				   .bug_movement_y
    122  fb66		       a4 b4		      ldy	BugSpeed
    123  fb68
    124  fb68							; Alter Y Position
    125  fb68		       a5 81		      lda	Temp+1
    126  fb6a		       29 02		      and	#%00000010
    127  fb6c		       4a		      lsr
    128  fb6d
    129  fb6d				   .bug_movement_y_check
    130  fb6d		       c9 01		      cmp	#1
    131  fb6f		       d0 08		      bne	.bug_movement_y_down
    132  fb71
    133  fb71				   .bug_movement_y_up
    134  fb71		       f6 b9		      inc	BugPosY,x
    135  fb73		       88		      dey
    136  fb74		       d0 fb		      bne	.bug_movement_y_up
    137  fb76
    138  fb76		       4c 7e fb 	      jmp	.bug_movement_boundary
    139  fb79
    140  fb79				   .bug_movement_y_down
    141  fb79		       d6 b9		      dec	BugPosY,x
    142  fb7b		       88		      dey
    143  fb7c		       d0 fb		      bne	.bug_movement_y_down
    144  fb7e
    145  fb7e				   .bug_movement_boundary
    146  fb7e		       b5 b7		      lda	BugPosX,x
    147  fb80		       b4 b9		      ldy	BugPosY,x
    148  fb82
    149  fb82				   .bug_movement_boundary_left
    150  fb82		       c9 18		      cmp	#BUG_BOUNDARY
    151  fb84		       b0 05		      bcs	.bug_movement_boundary_right
    152  fb86		       a9 18		      lda	#BUG_BOUNDARY
    153  fb88		       4c 91 fb 	      jmp	.bug_movement_boundary_top
    154  fb8b
    155  fb8b				   .bug_movement_boundary_right
    156  fb8b		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    157  fb8d		       90 02		      bcc	.bug_movement_boundary_top
    158  fb8f		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    159  fb91
    160  fb91				   .bug_movement_boundary_top
    161  fb91		       c0 18		      cpy	#BUG_BOUNDARY
    162  fb93		       b0 05		      bcs	.bug_movement_boundary_bottom
    163  fb95		       a0 18		      ldy	#BUG_BOUNDARY
    164  fb97		       4c a0 fb 	      jmp	.bug_movement_store
    165  fb9a
    166  fb9a				   .bug_movement_boundary_bottom
    167  fb9a		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    168  fb9c		       90 02		      bcc	.bug_movement_store
    169  fb9e		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    170  fba0
    171  fba0				   .bug_movement_store
    172  fba0		       95 b7		      sta	BugPosX,x
    173  fba2		       94 b9		      sty	BugPosY,x
    174  fba4
    175  fba4				   .bug_movement_return
    176  fba4		       60		      rts
    177  fba5
    178  fba5				   BugCollision
    179  fba5
    180  fba5		       e0 01		      cpx	#1
    181  fba7		       f0 05		      beq	.bug_collision_m1
    182  fba9
    183  fba9				   .bug_collision_m0
    184  fba9							; Collision for M0 (V set)
    185  fba9		       24 00		      bit	CXM0P
    186  fbab		       70 06		      bvs	.bug_collision_active
    187  fbad		       60		      rts
    188  fbae
    189  fbae				   .bug_collision_m1
    190  fbae							; Collision for M1 (N set)
    191  fbae		       24 01		      bit	CXM1P
    192  fbb0		       30 01		      bmi	.bug_collision_active
    193  fbb2		       60		      rts
    194  fbb3
    195  fbb3				   .bug_collision_active
    196  fbb3
    197  fbb3							; Reduce players score
    198  fbb3		       a5 93		      lda	ScoreValue
    199  fbb5		       f0 02		      beq	.bug_collision_score_skip
    200  fbb7		       c6 93		      dec	ScoreValue
    201  fbb9				   .bug_collision_score_skip
    202  fbb9
    203  fbb9							; Play sound
    204  fbb9		       20 0b fc 	      jsr	BugColSample
    205  fbbc
    206  fbbc		       60		      rts
    207  fbbd
    208  fbbd				   BugStunCollision
    209  fbbd
    210  fbbd		       e0 01		      cpx	#1
    211  fbbf		       f0 05		      beq	.bug_stun_collision_m1
    212  fbc1
    213  fbc1				   .bug_stun_collision_m0
    214  fbc1							; Collision for M0 (V set)
    215  fbc1		       24 00		      bit	CXM0P
    216  fbc3		       70 06		      bvs	.bug_stun_collision_active
    217  fbc5		       60		      rts
    218  fbc6
    219  fbc6				   .bug_stun_collision_m1
    220  fbc6							; Collision for M1 (N set)
    221  fbc6		       24 01		      bit	CXM1P
    222  fbc8		       30 01		      bmi	.bug_stun_collision_active
    223  fbca		       60		      rts
    224  fbcb
    225  fbcb				   .bug_stun_collision_active
    226  fbcb							; Add points to score
    227  fbcb		       18		      clc
    228  fbcc		       a5 94		      lda	ScoreValue+1
    229  fbce		       69 04		      adc	#BUG_POINTS
    230  fbd0		       85 94		      sta	ScoreValue+1
    231  fbd2
    232  fbd2							; Reset bug
    233  fbd2		       20 16 fb 	      jsr	BugReset
    234  fbd5
    235  fbd5							; Play sample
    236  fbd5		       20 fa fb 	      jsr	BugSample
    237  fbd8
    238  fbd8		       60		      rts
    239  fbd9
    240  fbd9							; Horizontal Positioning
    241  fbd9
    242  fbd9				   BugPosition
    243  fbd9
    244  fbd9		       a2 02		      ldx	#2
    245  fbdb		       a5 b7		      lda	BugPosX+0
    246  fbdd		       20 00 f0 	      jsr	PosObject
    247  fbe0
    248  fbe0		       a2 03		      ldx	#3
    249  fbe2		       a5 b8		      lda	BugPosX+1
    250  fbe4		       20 00 f0 	      jsr	PosObject
    251  fbe7
    252  fbe7		       60		      rts
    253  fbe8
    254  fbe8							; Scanline Draw
    255  fbe8
    256  fbe8				   BugDrawStart
    257  fbe8
    258  fbe8		       a0 01		      ldy	#1
    259  fbea				   .bug_draw_start_loop
    260  fbea
    261  fbea							; Set missile 0 & 1 to be 8 clock size
    262  fbea							;lda NuSiz0,y
    263  fbea							;ora #%00110000
    264  fbea							;sta NuSiz0,y
    265  fbea							;sta NUSIZ0,y
    266  fbea
    267  fbea							; Setup half scanline positions
    268  fbea		       b9 b9 00 	      lda	BugPosY,y
    269  fbed		       4a		      lsr
    270  fbee		       99 bb 00 	      sta	BugDrawPosBottom,y
    271  fbf1
    272  fbf1		       69 04		      adc	#BUG_SIZE/2
    273  fbf3		       99 bd 00 	      sta	BugDrawPosTop,y
    274  fbf6
    275  fbf6		       88		      dey
    276  fbf7		       10 f1		      bpl	.bug_draw_start_loop
    277  fbf9
    278  fbf9		       60		      rts
    279  fbfa
    280  fbfa				   BugSample
    281  fbfa		       a9 1e		      lda	#BUG_SAMPLE_LEN
    282  fbfc		       85 91		      sta	SampleStep
    283  fbfe		       a9 03		      lda	#BUG_SAMPLE_C
    284  fc00		       85 16		      sta	AUDC1
    285  fc02		       a9 14		      lda	#BUG_SAMPLE_F
    286  fc04		       85 18		      sta	AUDF1
    287  fc06		       a9 04		      lda	#BUG_SAMPLE_V
    288  fc08		       85 1a		      sta	AUDV1
    289  fc0a		       60		      rts
    290  fc0b
    291  fc0b				   BugColSample
    292  fc0b		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    293  fc0d		       85 91		      sta	SampleStep
    294  fc0f		       a9 08		      lda	#BUG_COL_SAMPLE_C
    295  fc11		       85 16		      sta	AUDC1
    296  fc13		       a9 08		      lda	#BUG_COL_SAMPLE_F
    297  fc15		       85 18		      sta	AUDF1
    298  fc17		       a9 03		      lda	#BUG_COL_SAMPLE_V
    299  fc19		       85 1a		      sta	AUDV1
    300  fc1b		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fc1c					      include	"objects/swatter.asm"
      1  fc1c							;==================
      2  fc1c							; Swatter (player1)
      3  fc1c							;==================
      4  fc1c
      5  fc1c							; Constants
      6  fc1c
      7  fc1c		       00 30	   SWATTER_COLOR =	#$30
      8  fc1c		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fc1c		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fc1c		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fc1c
     12  fc1c		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fc1c		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fc1c
     15  fc1c		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fc1c		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fc1c
     18  fc1c		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fc1c		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fc1c		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fc1c
     22  fc1c		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fc1c		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fc1c		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fc1c		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fc1c		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fc1c
     28  fc1c		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fc1c		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fc1c		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fc1c		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fc1c
     33  fc1c		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fc1c		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fc1c		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fc1c		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fc1c
     38  fc1c							; Initialization
     39  fc1c
     40  fc1c				   SwatterInit
     41  fc1c
     42  fc1c		       20 f6 fc 	      jsr	SwatterReset
     43  fc1f
     44  fc1f		       60		      rts
     45  fc20
     46  fc20							; Frame Update
     47  fc20
     48  fc20				   SwatterUpdate
     49  fc20
     50  fc20							; Check b/w
     51  fc20		       ad 82 02 	      lda	SWCHB
     52  fc23					      REPEAT	4
     53  fc23		       4a		      lsr
     52  fc23					      REPEND
     53  fc24		       4a		      lsr
     52  fc24					      REPEND
     53  fc25		       4a		      lsr
     52  fc25					      REPEND
     53  fc26		       4a		      lsr
     54  fc27					      REPEND
     55  fc27		       90 10		      bcc	.swatter_update_bw
     56  fc29
     57  fc29				   .swatter_update_color
     58  fc29		       a5 c1		      lda	SwatterState
     59  fc2b		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     60  fc2d		       d0 05		      bne	.swatter_update_color_hold
     61  fc2f				   .swatter_update_color_active
     62  fc2f		       a9 30		      lda	#SWATTER_COLOR
     63  fc31		       4c 46 fc 	      jmp	.swatter_update_color_set
     64  fc34				   .swatter_update_color_hold
     65  fc34		       a9 36		      lda	#SWATTER_HOLD_COLOR
     66  fc36		       4c 46 fc 	      jmp	.swatter_update_color_set
     67  fc39
     68  fc39				   .swatter_update_bw
     69  fc39		       a5 c1		      lda	SwatterState
     70  fc3b		       c9 80		      cmp	#SWATTER_STATE_HOLD
     71  fc3d		       d0 05		      bne	.swatter_update_bw_active
     72  fc3f				   .swatter_update_bw_hold
     73  fc3f		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     74  fc41		       4c 46 fc 	      jmp	.swatter_update_color_set
     75  fc44				   .swatter_update_bw_active
     76  fc44		       a9 0e		      lda	#SWATTER_BW_COLOR
     77  fc46
     78  fc46				   .swatter_update_color_set
     79  fc46		       85 c2		      sta	SwatterColor
     80  fc48
     81  fc48				   .swatter_update_hold_sample
     82  fc48		       a4 c1		      ldy	SwatterState
     83  fc4a		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fc4c		       d0 0f		      bne	.swatter_update_state
     85  fc4e
     86  fc4e		       c6 c9		      dec	SwatterSampleCount
     87  fc50		       d0 0b		      bne	.swatter_update_state
     88  fc52
     89  fc52		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     90  fc54		       85 c9		      sta	SwatterSampleCount
     91  fc56
     92  fc56		       c6 ca		      dec	SwatterSampleF
     93  fc58		       a4 ca		      ldy	SwatterSampleF
     94  fc5a		       20 16 fd 	      jsr	SwatterHoldSample
     95  fc5d
     96  fc5d				   .swatter_update_state
     97  fc5d		       a6 8e		      ldx	FrameTimer+1
     98  fc5f		       d0 2d		      bne	.swatter_update_collision
     99  fc61
    100  fc61		       a4 c1		      ldy	SwatterState
    101  fc63		       c0 00		      cpy	#SWATTER_STATE_WAIT
    102  fc65		       f0 0a		      beq	.swatter_update_state_wait
    103  fc67
    104  fc67		       c0 80		      cpy	#SWATTER_STATE_HOLD
    105  fc69		       f0 18		      beq	.swatter_update_state_hold
    106  fc6b
    107  fc6b							; Else we're at the end of the active state
    108  fc6b		       20 f6 fc 	      jsr	SwatterReset
    109  fc6e		       4c 9d fc 	      jmp	.swatter_update_return
    110  fc71
    111  fc71				   .swatter_update_state_wait
    112  fc71		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    113  fc73		       84 ca		      sty	SwatterSampleF
    114  fc75		       20 16 fd 	      jsr	SwatterHoldSample
    115  fc78
    116  fc78		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    117  fc7a		       85 c9		      sta	SwatterSampleCount
    118  fc7c
    119  fc7c		       a9 80		      lda	#SWATTER_STATE_HOLD
    120  fc7e		       a6 c4		      ldx	SwatterHoldTime
    121  fc80		       4c 8a fc 	      jmp	.swatter_update_state_set
    122  fc83
    123  fc83				   .swatter_update_state_hold
    124  fc83		       20 25 fd 	      jsr	SwatterActiveSample
    125  fc86
    126  fc86		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    127  fc88		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    128  fc8a
    129  fc8a				   .swatter_update_state_set
    130  fc8a		       85 c1		      sta	SwatterState
    131  fc8c		       86 8e		      stx	FrameTimer+1
    132  fc8e
    133  fc8e				   .swatter_update_collision
    134  fc8e							; Check 1 frame after active
    135  fc8e		       a5 c1		      lda	SwatterState
    136  fc90		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    137  fc92		       d0 09		      bne	.swatter_update_return
    138  fc94		       a6 8e		      ldx	FrameTimer+1
    139  fc96		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    140  fc98		       d0 03		      bne	.swatter_update_return
    141  fc9a
    142  fc9a		       20 9e fc 	      jsr	SwatterCollision
    143  fc9d
    144  fc9d				   .swatter_update_return
    145  fc9d		       60		      rts
    146  fc9e
    147  fc9e				   SwatterCollision
    148  fc9e		       24 00		      bit	CXM0P
    149  fca0		       30 09		      bmi	.swatter_collision_m0
    150  fca2
    151  fca2		       24 01		      bit	CXM1P
    152  fca4		       70 0a		      bvs	.swatter_collision_m1
    153  fca6
    154  fca6		       24 07		      bit	CXPPMM
    155  fca8		       30 0e		      bmi	.swatter_collision_p0
    156  fcaa
    157  fcaa		       60		      rts
    158  fcab
    159  fcab				   .swatter_collision_m0
    160  fcab		       a2 00		      ldx	#0
    161  fcad		       4c b2 fc 	      jmp	.swatter_collision_bug_reset
    162  fcb0
    163  fcb0				   .swatter_collision_m1
    164  fcb0		       a2 01		      ldx	#1
    165  fcb2
    166  fcb2				   .swatter_collision_bug_reset
    167  fcb2		       20 16 fb 	      jsr	BugReset
    168  fcb5		       4c c8 fc 	      jmp	.swatter_collision_active
    169  fcb8
    170  fcb8				   .swatter_collision_p0
    171  fcb8
    172  fcb8		       a5 93		      lda	ScoreValue
    173  fcba		       c5 c5		      cmp	SwatterHitDamage
    174  fcbc		       90 06		      bcc	.swatter_collision_p0_zero
    175  fcbe							;beq .swatter_collision_p0_zero
    176  fcbe
    177  fcbe		       18		      clc
    178  fcbf		       e5 c5		      sbc	SwatterHitDamage
    179  fcc1		       4c c6 fc 	      jmp	.swatter_collision_p0_set
    180  fcc4
    181  fcc4				   .swatter_collision_p0_zero
    182  fcc4		       a9 00		      lda	#0
    183  fcc6
    184  fcc6				   .swatter_collision_p0_set
    185  fcc6		       85 93		      sta	ScoreValue
    186  fcc8
    187  fcc8				   .swatter_collision_active
    188  fcc8		       20 36 fd 	      jsr	SwatterHitSample
    189  fccb
    190  fccb		       60		      rts
    191  fccc
    192  fccc				   SwatterPosition
    193  fccc
    194  fccc							; Set Position
    195  fccc		       a2 01		      ldx	#1	; Object (player1)
    196  fcce		       a5 bf		      lda	SwatterPos	; X Position
    197  fcd0		       20 00 f0 	      jsr	PosObject
    198  fcd3
    199  fcd3		       60		      rts
    200  fcd4
    201  fcd4							; Scanline Draw
    202  fcd4
    203  fcd4				   SwatterDrawStart
    204  fcd4
    205  fcd4							; Hide swatter if wait state
    206  fcd4		       24 c1		      bit	SwatterState
    207  fcd6		       30 09		      bmi	.swatter_draw_start
    208  fcd8
    209  fcd8		       a9 ff		      lda	#-1
    210  fcda		       85 c6		      sta	SwatterIndex
    211  fcdc							;sta SwatterDrawPos
    212  fcdc		       a9 00		      lda	#0
    213  fcde		       85 c8		      sta	SwatterLine
    214  fce0
    215  fce0		       60		      rts
    216  fce1
    217  fce1				   .swatter_draw_start
    218  fce1
    219  fce1							; Set sprite color
    220  fce1		       a5 c2		      lda	SwatterColor
    221  fce3		       85 07		      sta	COLUP1
    222  fce5
    223  fce5							; Note: Doesn't need vertical delay
    224  fce5
    225  fce5							; Calculate starting position
    226  fce5		       a5 c0		      lda	SwatterPos+1	; Y Position
    227  fce7		       4a		      lsr
    228  fce8		       18		      clc
    229  fce9		       69 14		      adc	#SWATTER_SPRITE_SIZE
    230  fceb		       85 c7		      sta	SwatterDrawPos
    231  fced
    232  fced							; Initialize sprite index
    233  fced		       a9 13		      lda	#SWATTER_SPRITE_SIZE-1
    234  fcef		       85 c6		      sta	SwatterIndex
    235  fcf1		       a9 00		      lda	#0
    236  fcf3		       85 c8		      sta	SwatterLine
    237  fcf5
    238  fcf5		       60		      rts
    239  fcf6
    240  fcf6				   SwatterReset
    241  fcf6							; Initialize Swatter State
    242  fcf6		       a9 00		      lda	#SWATTER_STATE_WAIT
    243  fcf8		       85 c1		      sta	SwatterState
    244  fcfa
    245  fcfa							; Set Wait Timer
    246  fcfa		       20 13 f0 	      jsr	Random
    247  fcfd		       a5 84		      lda	Rand8
    248  fcff		       29 3f		      and	#$3f
    249  fd01		       18		      clc
    250  fd02		       65 c3		      adc	SwatterWaitTime
    251  fd04		       85 8e		      sta	FrameTimer+1
    252  fd06
    253  fd06							; Set Random Position
    254  fd06		       20 13 f0 	      jsr	Random
    255  fd09		       a5 84		      lda	Rand8	; X Position
    256  fd0b		       29 7f		      and	#$7f
    257  fd0d		       85 bf		      sta	SwatterPos+0
    258  fd0f		       a5 85		      lda	Rand16	; Y Position
    259  fd11		       29 7e		      and	#$7e	; Ensure that Y position is even
    260  fd13		       85 c0		      sta	SwatterPos+1
    261  fd15
    262  fd15		       60		      rts
    263  fd16
    264  fd16				   SwatterHoldSample
    265  fd16		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    266  fd18		       85 91		      sta	SampleStep
    267  fd1a		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    268  fd1c		       85 16		      sta	AUDC1
    269  fd1e		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    270  fd20		       85 1a		      sta	AUDV1
    271  fd22
    272  fd22		       84 18		      sty	AUDF1	; Store value of y as frequency
    273  fd24
    274  fd24		       60		      rts
    275  fd25
    276  fd25				   SwatterActiveSample
    277  fd25		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    278  fd27		       85 91		      sta	SampleStep
    279  fd29		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    280  fd2b		       85 16		      sta	AUDC1
    281  fd2d		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    282  fd2f		       85 18		      sta	AUDF1
    283  fd31		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    284  fd33		       85 1a		      sta	AUDV1
    285  fd35		       60		      rts
    286  fd36
    287  fd36				   SwatterHitSample
    288  fd36		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    289  fd38		       85 91		      sta	SampleStep
    290  fd3a		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    291  fd3c		       85 16		      sta	AUDC1
    292  fd3e		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    293  fd40		       85 18		      sta	AUDF1
    294  fd42		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    295  fd44		       85 1a		      sta	AUDV1
    296  fd46		       60		      rts
------- FILE game.asm
     22  fd47
     23  fd47							; Initialization
     24  fd47
     25  fd47				   GameInit
     26  fd47
     27  fd47							; Setup logic and kernel
      0  fd47					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fd47				   .POINTER   SET	VBlankPtr
      2  fd47				   .ADDRESS   SET	GameVerticalBlank
      3  fd47
      4  fd47		       a9 84		      LDA	#<.ADDRESS
      5  fd49		       85 86		      STA	.POINTER
      6  fd4b		       a9 fd		      LDA	#>.ADDRESS
      7  fd4d		       85 87		      STA	.POINTER+1
      8  fd4f
      0  fd4f					      SET_POINTER	KernelPtr, GameKernel
      1  fd4f				   .POINTER   SET	KernelPtr
      2  fd4f				   .ADDRESS   SET	GameKernel
      3  fd4f
      4  fd4f		       a9 fe		      LDA	#<.ADDRESS
      5  fd51		       85 88		      STA	.POINTER
      6  fd53		       a9 fd		      LDA	#>.ADDRESS
      7  fd55		       85 89		      STA	.POINTER+1
      8  fd57
      0  fd57					      SET_POINTER	OverScanPtr, GameOverScan
      1  fd57				   .POINTER   SET	OverScanPtr
      2  fd57				   .ADDRESS   SET	GameOverScan
      3  fd57
      4  fd57		       a9 ae		      LDA	#<.ADDRESS
      5  fd59		       85 8a		      STA	.POINTER
      6  fd5b		       a9 fd		      LDA	#>.ADDRESS
      7  fd5d		       85 8b		      STA	.POINTER+1
      8  fd5f
     31  fd5f
     32  fd5f							; Mute Audio
     33  fd5f		       a9 00		      lda	#0
     34  fd61							;    sta AUDC0
     35  fd61							;    sta AUDV0
     36  fd61							;    sta AUDF0
     37  fd61							;sta AUDC1
     38  fd61		       85 1a		      sta	AUDV1
     39  fd63							;sta AUDF1
     40  fd63		       85 91		      sta	SampleStep
     41  fd65
     42  fd65							; Load Audio Settings
     43  fd65		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fd67		       85 19		      sta	AUDV0
     45  fd69
     46  fd69							; Make it so that we play the first note immediately
     47  fd69		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fd6b		       85 90		      sta	AudioStep
     49  fd6d		       a9 02		      lda	#2
     50  fd6f		       85 8d		      sta	FrameTimer
     51  fd71
     52  fd71							; Reset NuSiz
     53  fd71							;    lda #0
     54  fd71							;    sta NuSiz0
     55  fd71							;    sta NUSIZ0
     56  fd71							;    sta NuSiz1
     57  fd71							;    sta NUSIZ1
     58  fd71
     59  fd71							; Initialize Objects
     60  fd71		       20 fa f5 	      jsr	LevelInit
     61  fd74		       20 b5 f6 	      jsr	ScoreInit
     62  fd77		       20 3e f8 	      jsr	SpiderInit
     63  fd7a		       20 98 f9 	      jsr	LineInit
     64  fd7d		       20 0d fb 	      jsr	BugInit
     65  fd80		       20 1c fc 	      jsr	SwatterInit
     66  fd83
     67  fd83		       60		      rts
     68  fd84
     69  fd84				   GameVerticalBlank
     70  fd84
     71  fd84							; Refresh random values
     72  fd84		       20 13 f0 	      jsr	Random
     73  fd87
     74  fd87							; Update Objects
     75  fd87		       20 10 f6 	      jsr	LevelUpdate
     76  fd8a		       20 53 f8 	      jsr	SpiderUpdate
     77  fd8d		       20 a7 f9 	      jsr	LineUpdate
     78  fd90		       20 2a fb 	      jsr	BugUpdate
     79  fd93		       20 20 fc 	      jsr	SwatterUpdate
     80  fd96		       20 be f6 	      jsr	ScoreUpdate
     81  fd99
     82  fd99							; Reset Collisions
     83  fd99		       85 2c		      sta	CXCLR
     84  fd9b
     85  fd9b							; Clear horizontal movement
     86  fd9b		       85 2b		      sta	HMCLR
     87  fd9d
     88  fd9d							; Update Positions
     89  fd9d		       20 70 f9 	      jsr	SpiderPosition
     90  fda0		       20 a9 fa 	      jsr	LinePosition
     91  fda3		       20 d9 fb 	      jsr	BugPosition
     92  fda6		       20 cc fc 	      jsr	SwatterPosition
     93  fda9
     94  fda9							; Set final x positions
     95  fda9		       85 02		      sta	WSYNC
     96  fdab		       85 2a		      sta	HMOVE
     97  fdad
     98  fdad		       60		      rts
     99  fdae
    100  fdae				   GameOverScan
    101  fdae
    102  fdae							; Audio Routines
    103  fdae		       20 c6 fd 	      jsr	GameAudio
    104  fdb1		       20 b8 fd 	      jsr	GameSample
    105  fdb4
    106  fdb4							; State Routines
    107  fdb4		       20 f6 fd 	      jsr	GameDeath
    108  fdb7
    109  fdb7		       60		      rts
    110  fdb8
    111  fdb8				   GameSample
    112  fdb8
    113  fdb8		       a6 91		      ldx	SampleStep
    114  fdba		       f0 07		      beq	.game_sample_return
    115  fdbc
    116  fdbc		       ca		      dex
    117  fdbd		       d0 04		      bne	.game_sample_return
    118  fdbf
    119  fdbf				   .game_sample_mute
    120  fdbf		       a9 00		      lda	#0
    121  fdc1		       85 1a		      sta	AUDV1
    122  fdc3							;sta AUDF1
    123  fdc3							;sta AUDC1
    124  fdc3
    125  fdc3				   .game_sample_return
    126  fdc3		       86 91		      stx	SampleStep
    127  fdc5		       60		      rts
    128  fdc6
    129  fdc6				   GameAudio
    130  fdc6
    131  fdc6		       a6 8d		      ldx	FrameTimer
    132  fdc8		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    133  fdca		       f0 25		      beq	.game_audio_mute_note
    134  fdcc		       e0 00		      cpx	#0
    135  fdce		       d0 25		      bne	.game_audio_return
    136  fdd0
    137  fdd0							; Reset Timer
    138  fdd0		       a6 92		      ldx	GameAudioStep
    139  fdd2		       86 8d		      stx	FrameTimer
    140  fdd4
    141  fdd4				   .game_audio_play
    142  fdd4
    143  fdd4							; Increment melody position
    144  fdd4		       a4 90		      ldy	AudioStep
    145  fdd6		       c8		      iny
    146  fdd7
    147  fdd7		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    148  fdd9		       d0 02		      bne	.game_audio_play_note
    149  fddb
    150  fddb							; Loop our audio step
    151  fddb		       a0 00		      ldy	#0
    152  fddd
    153  fddd				   .game_audio_play_note
    154  fddd
    155  fddd							; Save current position
    156  fddd		       84 90		      sty	AudioStep
    157  fddf
    158  fddf							; Melody Line
    159  fddf		       b9 fd fe 	      lda	GameAudio0,y
    160  fde2		       c9 ff		      cmp	#$FF
    161  fde4		       f0 0b		      beq	.game_audio_mute_note
    162  fde6		       85 17		      sta	AUDF0
    163  fde8		       a9 06		      lda	#GAME_AUDIO_TONE
    164  fdea		       85 15		      sta	AUDC0
    165  fdec		       a9 02		      lda	#GAME_AUDIO_VOLUME
    166  fdee		       85 19		      sta	AUDV0
    167  fdf0
    168  fdf0		       60		      rts
    169  fdf1
    170  fdf1				   .game_audio_mute_note
    171  fdf1
    172  fdf1		       a9 00		      lda	#0
    173  fdf3							;sta AUDF0
    174  fdf3							;sta AUDC0
    175  fdf3		       85 19		      sta	AUDV0
    176  fdf5
    177  fdf5				   .game_audio_return
    178  fdf5		       60		      rts
    179  fdf6
    180  fdf6				   GameDeath
    181  fdf6		       a5 93		      lda	ScoreValue+0
    182  fdf8		       d0 03		      bne	.game_death_return
    183  fdfa
    184  fdfa							; Show Game Over Screen
    185  fdfa		       20 1d ff 	      jsr	OverInit
    186  fdfd
    187  fdfd				   .game_death_return
    188  fdfd		       60		      rts
    189  fdfe
    190  fdfe				   GameKernel
    191  fdfe
    192  fdfe							; Turn on display
    193  fdfe		       a9 00		      lda	#0
    194  fe00		       85 01		      sta	VBLANK
    195  fe02
    196  fe02				   .game_kernel_score
    197  fe02
    198  fe02							; Draw Score on top first
    199  fe02		       20 21 f7 	      jsr	ScoreDraw
    200  fe05
    201  fe05				   .game_kernel_objects_start
    202  fe05
    203  fe05							; Setup Drawing Objects
    204  fe05		       20 35 f8 	      jsr	WebDrawStart
    205  fe08		       20 78 f9 	      jsr	SpiderDrawStart
    206  fe0b		       20 d4 fc 	      jsr	SwatterDrawStart
    207  fe0e		       20 b1 fa 	      jsr	LineDrawStart
    208  fe11		       20 e8 fb 	      jsr	BugDrawStart
    209  fe14
    210  fe14							; Set missle and sprite sizes
    211  fe14		       a9 35		      lda	#%00110101
    212  fe16		       85 04		      sta	NUSIZ0
    213  fe18		       a9 37		      lda	#%00110111
    214  fe1a		       85 05		      sta	NUSIZ1
    215  fe1c
    216  fe1c							; Set playfield settings and ball size
    217  fe1c		       a9 21		      lda	#%00100001
    218  fe1e		       85 0a		      sta	CTRLPF
    219  fe20
    220  fe20							; Half scanline counter
    221  fe20		       a2 54		      ldx	#(KERNEL_SCANLINES-SCORE_LINES)/2-2
    222  fe22
    223  fe22							; 6 line counter
    224  fe22		       a9 00		      lda	#0
    225  fe24		       85 82		      sta	Temp+2
    226  fe26
    227  fe26							; Load background color and start first line
    228  fe26		       a5 a0		      lda	WebColor+0
    229  fe28		       85 02		      sta	WSYNC
    230  fe2a		       85 09		      sta	COLUBK
    231  fe2c
    232  fe2c				   .game_kernel_objects 		; 5 or 10 cycles
    233  fe2c
    234  fe2c		       a5 82		      lda	Temp+2	; 3
    235  fe2e		       d0 1a		      bne	.game_kernel_missle	; 2*
    236  fe30
    237  fe30		       a9 03		      lda	#3	; 2
    238  fe32		       85 82		      sta	Temp+2	; 3
    239  fe34
    240  fe34				   .game_kernel_web		; 32 cycles
    241  fe34							; Web
    242  fe34
    243  fe34		       a4 9f		      ldy	WebIndex	; 3
    244  fe36
    245  fe36							; Load Image
    246  fe36		       b9 50 f1 	      lda	WebImagePF0,y	; 4
    247  fe39		       85 0d		      sta	PF0	; 3
    248  fe3b		       b9 6c f1 	      lda	WebImagePF1,y	; 4
    249  fe3e		       85 0e		      sta	PF1	; 3
    250  fe40		       b9 88 f1 	      lda	WebImagePF2,y	; 4
    251  fe43		       85 0f		      sta	PF2	; 3
    252  fe45
    253  fe45		       e6 9f		      inc	WebIndex	; 5
    254  fe47
    255  fe47		       4c 74 fe 	      jmp	.game_kernel_line	; 3
    256  fe4a
    257  fe4a				   .game_kernel_missle
    258  fe4a
    259  fe4a				   .game_kernel_missle_bug_0		; 18 cycles
    260  fe4a							; First Bug
    261  fe4a
    262  fe4a							; Top
    263  fe4a		       e4 bd		      cpx	BugDrawPosTop+0	; 3
    264  fe4c		       b0 09		      bcs	.game_kernel_missle_bug_0_off_1	; 2 or 3 if branching
    265  fe4e
    266  fe4e							; Bottom
    267  fe4e		       e4 bb		      cpx	BugDrawPosBottom+0	; 3
    268  fe50		       90 08		      bcc	.game_kernel_missle_bug_0_off_2	; 2 or 3 if branching
    269  fe52
    270  fe52				   .game_kernel_missle_bug_0_on
    271  fe52		       a0 02		      ldy	#%00000010	; 2
    272  fe54		       4c 5d fe 	      jmp	.game_kernel_missle_bug_0_set	; 3
    273  fe57
    274  fe57				   .game_kernel_missle_bug_0_off_1
      0  fe57					      sleep	5
      1  fe57				   .CYCLES    SET	5
      2  fe57
      3  fe57				  -	      IF	.CYCLES < 2
      4  fe57				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe57				  -	      ERR
      6  fe57					      ENDIF
      7  fe57
      8  fe57					      IF	.CYCLES & 1
      9  fe57					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe57		       04 00		      nop	0
     11  fe59				  -	      ELSE
     12  fe59				  -	      bit	VSYNC
     13  fe59					      ENDIF
     14  fe59				   .CYCLES    SET	.CYCLES - 3
     15  fe59					      ENDIF
     16  fe59
     17  fe59					      REPEAT	.CYCLES / 2
     18  fe59		       ea		      nop
     19  fe5a					      REPEND
    276  fe5a				   .game_kernel_missle_bug_0_off_2
      0  fe5a					      sleep	2
      1  fe5a				   .CYCLES    SET	2
      2  fe5a
      3  fe5a				  -	      IF	.CYCLES < 2
      4  fe5a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe5a				  -	      ERR
      6  fe5a					      ENDIF
      7  fe5a
      8  fe5a				  -	      IF	.CYCLES & 1
      9  fe5a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe5a				  -	      nop	0
     11  fe5a				  -	      ELSE
     12  fe5a				  -	      bit	VSYNC
     13  fe5a				  -	      ENDIF
     14  fe5a				  -.CYCLES    SET	.CYCLES - 3
     15  fe5a					      ENDIF
     16  fe5a
     17  fe5a					      REPEAT	.CYCLES / 2
     18  fe5a		       ea		      nop
     19  fe5b					      REPEND
    278  fe5b		       a0 00		      ldy	#%00000000	; 2
    279  fe5d				   .game_kernel_missle_bug_0_set
    280  fe5d		       84 1d		      sty	ENAM0	; 3
    281  fe5f
    282  fe5f				   .game_kernel_missle_bug_1		; 18 cycles
    283  fe5f							; Second Bug
    284  fe5f
    285  fe5f							; Top
    286  fe5f		       e4 be		      cpx	BugDrawPosTop+1	; 3
    287  fe61		       b0 09		      bcs	.game_kernel_missle_bug_1_off_1	; 2 or 3 if branching
    288  fe63
    289  fe63							; Bottom
    290  fe63		       e4 bc		      cpx	BugDrawPosBottom+1	; 3
    291  fe65		       90 08		      bcc	.game_kernel_missle_bug_1_off_2	; 2 or 3 if branching
    292  fe67
    293  fe67				   .game_kernel_missle_bug_1_on
    294  fe67		       a0 02		      ldy	#%00000010	; 2
    295  fe69		       4c 72 fe 	      jmp	.game_kernel_missle_bug_1_set	; 3
    296  fe6c
    297  fe6c				   .game_kernel_missle_bug_1_off_1
      0  fe6c					      sleep	5
      1  fe6c				   .CYCLES    SET	5
      2  fe6c
      3  fe6c				  -	      IF	.CYCLES < 2
      4  fe6c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe6c				  -	      ERR
      6  fe6c					      ENDIF
      7  fe6c
      8  fe6c					      IF	.CYCLES & 1
      9  fe6c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe6c		       04 00		      nop	0
     11  fe6e				  -	      ELSE
     12  fe6e				  -	      bit	VSYNC
     13  fe6e					      ENDIF
     14  fe6e				   .CYCLES    SET	.CYCLES - 3
     15  fe6e					      ENDIF
     16  fe6e
     17  fe6e					      REPEAT	.CYCLES / 2
     18  fe6e		       ea		      nop
     19  fe6f					      REPEND
    299  fe6f				   .game_kernel_missle_bug_1_off_2
      0  fe6f					      sleep	2
      1  fe6f				   .CYCLES    SET	2
      2  fe6f
      3  fe6f				  -	      IF	.CYCLES < 2
      4  fe6f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe6f				  -	      ERR
      6  fe6f					      ENDIF
      7  fe6f
      8  fe6f				  -	      IF	.CYCLES & 1
      9  fe6f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe6f				  -	      nop	0
     11  fe6f				  -	      ELSE
     12  fe6f				  -	      bit	VSYNC
     13  fe6f				  -	      ENDIF
     14  fe6f				  -.CYCLES    SET	.CYCLES - 3
     15  fe6f					      ENDIF
     16  fe6f
     17  fe6f					      REPEAT	.CYCLES / 2
     18  fe6f		       ea		      nop
     19  fe70					      REPEND
    301  fe70		       a0 00		      ldy	#%00000000	; 2
    302  fe72				   .game_kernel_missle_bug_1_set
    303  fe72		       84 1e		      sty	ENAM1	; 3
    304  fe74
    305  fe74				   .game_kernel_line		; 18 cycles
    306  fe74							; Line
    307  fe74
    308  fe74							; Top
    309  fe74		       e4 b3		      cpx	LineDrawPos+1	; 3
    310  fe76		       b0 09		      bcs	.game_kernel_line_set_off_1	; 2 or 3 if branching
    311  fe78
    312  fe78							; Bottom
    313  fe78		       e4 b2		      cpx	LineDrawPos+0	; 3
    314  fe7a		       90 08		      bcc	.game_kernel_line_set_off_2	; 2 or 3 if branching
    315  fe7c
    316  fe7c				   .game_kernel_line_set_on
    317  fe7c		       a0 02		      ldy	#%00000010	; 2
    318  fe7e		       4c 87 fe 	      jmp	.game_kernel_line_set	; 3
    319  fe81
    320  fe81				   .game_kernel_line_set_off_1
      0  fe81					      sleep	5
      1  fe81				   .CYCLES    SET	5
      2  fe81
      3  fe81				  -	      IF	.CYCLES < 2
      4  fe81				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe81				  -	      ERR
      6  fe81					      ENDIF
      7  fe81
      8  fe81					      IF	.CYCLES & 1
      9  fe81					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe81		       04 00		      nop	0
     11  fe83				  -	      ELSE
     12  fe83				  -	      bit	VSYNC
     13  fe83					      ENDIF
     14  fe83				   .CYCLES    SET	.CYCLES - 3
     15  fe83					      ENDIF
     16  fe83
     17  fe83					      REPEAT	.CYCLES / 2
     18  fe83		       ea		      nop
     19  fe84					      REPEND
    322  fe84				   .game_kernel_line_set_off_2
      0  fe84					      sleep	2
      1  fe84				   .CYCLES    SET	2
      2  fe84
      3  fe84				  -	      IF	.CYCLES < 2
      4  fe84				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe84				  -	      ERR
      6  fe84					      ENDIF
      7  fe84
      8  fe84				  -	      IF	.CYCLES & 1
      9  fe84				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe84				  -	      nop	0
     11  fe84				  -	      ELSE
     12  fe84				  -	      bit	VSYNC
     13  fe84				  -	      ENDIF
     14  fe84				  -.CYCLES    SET	.CYCLES - 3
     15  fe84					      ENDIF
     16  fe84
     17  fe84					      REPEAT	.CYCLES / 2
     18  fe84		       ea		      nop
     19  fe85					      REPEND
    324  fe85		       a0 00		      ldy	#%00000000	; 2
    325  fe87				   .game_kernel_line_set
    326  fe87		       84 1f		      sty	ENABL	; 3
    327  fe89
    328  fe89							; Next Line
    329  fe89							;sleep 17 or 16
    330  fe89		       85 02		      sta	WSYNC
    331  fe8b
    332  fe8b				   .game_kernel_sprite
    333  fe8b
    334  fe8b				   .game_kernel_sprite_spider		; 34 cycles
    335  fe8b							; Spider
    336  fe8b
    337  fe8b		       a4 a8		      ldy	SpiderIndex	; 3
    338  fe8d		       30 16		      bmi	.game_kernel_sprite_spider_load_1	; At end of sprite / 2 or 3 if branching
    339  fe8f
    340  fe8f							; Check y position to see if we should be drawing
    341  fe8f		       8a		      txa		; 2
    342  fe90		       e5 a9		      sbc	SpiderDrawPos	; 3
    343  fe92		       10 15		      bpl	.game_kernel_sprite_spider_load_2	; 2 or 3 if branching
    344  fe94
    345  fe94				   .game_kernel_sprite_spider_draw
    346  fe94
    347  fe94							; Decrement sprite index
    348  fe94		       88		      dey		; 2
    349  fe95		       10 05		      bpl	.game_kernel_sprite_spider_grab	; 2 or 3 if branching
    350  fe97
    351  fe97		       a9 00		      lda	#0	; 2
    352  fe99							;sleep 1
    353  fe99		       4c 9e fe 	      jmp	.game_kernel_sprite_spider_store	; 3
    354  fe9c
    355  fe9c				   .game_kernel_sprite_spider_grab
    356  fe9c		       b1 a2		      lda	(SpiderPtr),y	; 5
    357  fe9e				   .game_kernel_sprite_spider_store
    358  fe9e		       84 a8		      sty	SpiderIndex	; 3
    359  fea0		       85 aa		      sta	SpiderLine	; 3
    360  fea2
    361  fea2		       4c b3 fe 	      jmp	.game_kernel_sprite_spider_load_3	; 3
    362  fea5
    363  fea5				   .game_kernel_sprite_spider_load_1
      0  fea5					      sleep	7
      1  fea5				   .CYCLES    SET	7
      2  fea5
      3  fea5				  -	      IF	.CYCLES < 2
      4  fea5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fea5				  -	      ERR
      6  fea5					      ENDIF
      7  fea5
      8  fea5					      IF	.CYCLES & 1
      9  fea5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fea5		       04 00		      nop	0
     11  fea7				  -	      ELSE
     12  fea7				  -	      bit	VSYNC
     13  fea7					      ENDIF
     14  fea7				   .CYCLES    SET	.CYCLES - 3
     15  fea7					      ENDIF
     16  fea7
     17  fea7					      REPEAT	.CYCLES / 2
     18  fea7		       ea		      nop
     17  fea7					      REPEND
     18  fea8		       ea		      nop
     19  fea9					      REPEND
    365  fea9				   .game_kernel_sprite_spider_load_2
      0  fea9					      sleep	15
      1  fea9				   .CYCLES    SET	15
      2  fea9
      3  fea9				  -	      IF	.CYCLES < 2
      4  fea9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fea9				  -	      ERR
      6  fea9					      ENDIF
      7  fea9
      8  fea9					      IF	.CYCLES & 1
      9  fea9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fea9		       04 00		      nop	0
     11  feab				  -	      ELSE
     12  feab				  -	      bit	VSYNC
     13  feab					      ENDIF
     14  feab				   .CYCLES    SET	.CYCLES - 3
     15  feab					      ENDIF
     16  feab
     17  feab					      REPEAT	.CYCLES / 2
     18  feab		       ea		      nop
     17  feab					      REPEND
     18  feac		       ea		      nop
     17  feac					      REPEND
     18  fead		       ea		      nop
     17  fead					      REPEND
     18  feae		       ea		      nop
     17  feae					      REPEND
     18  feaf		       ea		      nop
     17  feaf					      REPEND
     18  feb0		       ea		      nop
     19  feb1					      REPEND
    367  feb1		       a5 aa		      lda	SpiderLine	; 3
    368  feb3				   .game_kernel_sprite_spider_load_3
    369  feb3		       85 1b		      sta	GRP0	; 3
    370  feb5
    371  feb5				   .game_kernel_sprite_swatter		; 30 cycles
    372  feb5							; Swatter
    373  feb5
    374  feb5							; Check if wait state
    375  feb5							;bit SwatterState
    376  feb5							;bpl .game_kernel_sprite_swatter_load
    377  feb5
    378  feb5		       a4 c6		      ldy	SwatterIndex	; 3
    379  feb7		       30 0f		      bmi	.game_kernel_sprite_swatter_load_1	; At end of sprite / 2 or 3 if branching
    380  feb9
    381  feb9							; Check y position to see if we should be drawing
    382  feb9		       8a		      txa		; 2
    383  feba		       e5 c7		      sbc	SwatterDrawPos	; 3
    384  febc		       10 0e		      bpl	.game_kernel_sprite_swatter_load_2	; 2 or 3 if branching
    385  febe
    386  febe				   .game_kernel_sprite_swatter_draw
    387  febe		       b9 d4 f1 	      lda	SwatterSprite,y	; 4
    388  fec1		       85 c8		      sta	SwatterLine	; 3
    389  fec3
    390  fec3							; Decrement sprite index
    391  fec3		       c6 c6		      dec	SwatterIndex	; 5
    392  fec5
    393  fec5		       4c d4 fe 	      jmp	.game_kernel_sprite_swatter_line	; 3
    394  fec8
    395  fec8				   .game_kernel_sprite_swatter_load_1
      0  fec8					      sleep	7
      1  fec8				   .CYCLES    SET	7
      2  fec8
      3  fec8				  -	      IF	.CYCLES < 2
      4  fec8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fec8				  -	      ERR
      6  fec8					      ENDIF
      7  fec8
      8  fec8					      IF	.CYCLES & 1
      9  fec8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fec8		       04 00		      nop	0
     11  feca				  -	      ELSE
     12  feca				  -	      bit	VSYNC
     13  feca					      ENDIF
     14  feca				   .CYCLES    SET	.CYCLES - 3
     15  feca					      ENDIF
     16  feca
     17  feca					      REPEAT	.CYCLES / 2
     18  feca		       ea		      nop
     17  feca					      REPEND
     18  fecb		       ea		      nop
     19  fecc					      REPEND
    397  fecc				   .game_kernel_sprite_swatter_load_2
      0  fecc					      sleep	11
      1  fecc				   .CYCLES    SET	11
      2  fecc
      3  fecc				  -	      IF	.CYCLES < 2
      4  fecc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fecc				  -	      ERR
      6  fecc					      ENDIF
      7  fecc
      8  fecc					      IF	.CYCLES & 1
      9  fecc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fecc		       04 00		      nop	0
     11  fece				  -	      ELSE
     12  fece				  -	      bit	VSYNC
     13  fece					      ENDIF
     14  fece				   .CYCLES    SET	.CYCLES - 3
     15  fece					      ENDIF
     16  fece
     17  fece					      REPEAT	.CYCLES / 2
     18  fece		       ea		      nop
     17  fece					      REPEND
     18  fecf		       ea		      nop
     17  fecf					      REPEND
     18  fed0		       ea		      nop
     17  fed0					      REPEND
     18  fed1		       ea		      nop
     19  fed2					      REPEND
    399  fed2		       a5 c8		      lda	SwatterLine	; 3
    400  fed4				   .game_kernel_sprite_swatter_line
    401  fed4		       85 1c		      sta	GRP1	; 3
    402  fed6
    403  fed6				   .game_kernel_sprite_end		; 12 or 11 cycles
    404  fed6
    405  fed6							;sta WSYNC
    406  fed6
    407  fed6							; New line, decrement half scanline, and increment 3 line counter
    408  fed6		       c6 82		      dec	Temp+2	; 5
    409  fed8		       ca		      dex		; 2
    410  fed9		       f0 03		      beq	.game_kernel_clean	; 2 or 3 if branching
    411  fedb		       4c 2c fe 	      jmp	.game_kernel_objects	; 3
    412  fede
    413  fede				   .game_kernel_clean
    414  fede
    415  fede		       85 02		      sta	WSYNC
    416  fee0
    417  fee0		       a9 00		      lda	#0
    418  fee2		       85 09		      sta	COLUBK
    419  fee4		       85 08		      sta	COLUPF
    420  fee6		       85 06		      sta	COLUP0
    421  fee8		       85 07		      sta	COLUP1
    422  feea		       85 0d		      sta	PF0
    423  feec		       85 0e		      sta	PF1
    424  feee		       85 0f		      sta	PF2
    425  fef0		       85 1b		      sta	GRP0
    426  fef2		       85 1c		      sta	GRP1
    427  fef4		       85 1d		      sta	ENAM0
    428  fef6		       85 1e		      sta	ENAM1
    429  fef8		       85 1f		      sta	ENABL
    430  fefa
    431  fefa		       85 02		      sta	WSYNC
    432  fefc
    433  fefc				   .game_kernel_return
    434  fefc		       60		      rts
    435  fefd
    436  fefd				   GameAudio0
    437  fefd		       0d		      .byte.b	#13	; D
    438  fefe		       ff		      .byte.b	#$FF
    439  feff		       0f		      .byte.b	#15	; B
    440  ff00		       ff		      .byte.b	#$FF
    441  ff01		       0d		      .byte.b	#13	; D
    442  ff02		       ff		      .byte.b	#$FF
    443  ff03		       0f		      .byte.b	#15	; B
    444  ff04		       ff		      .byte.b	#$FF
    445  ff05		       0d		      .byte.b	#13	; D
    446  ff06		       0d		      .byte.b	#13	; D
    447  ff07		       0f		      .byte.b	#15	; B
    448  ff08		       ff		      .byte.b	#$FF
    449  ff09		       0c		      .byte.b	#12	; D#
    450  ff0a		       ff		      .byte.b	#$FF
    451  ff0b		       0f		      .byte.b	#15	; B
    452  ff0c		       ff		      .byte.b	#$FF
    453  ff0d		       0b		      .byte.b	#11	; E
    454  ff0e		       ff		      .byte.b	#$FF
    455  ff0f		       0e		      .byte.b	#14	; C#
    456  ff10		       ff		      .byte.b	#$FF
    457  ff11		       0b		      .byte.b	#11
    458  ff12		       ff		      .byte.b	#$FF
    459  ff13		       0e		      .byte.b	#14
    460  ff14		       ff		      .byte.b	#$FF
    461  ff15		       0b		      .byte.b	#11
    462  ff16		       0b		      .byte.b	#11
    463  ff17		       0e		      .byte.b	#14
    464  ff18		       ff		      .byte.b	#$FF
    465  ff19		       0b		      .byte.b	#11
    466  ff1a		       ff		      .byte.b	#$FF
    467  ff1b		       0e		      .byte.b	#14
    468  ff1c		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  ff1d					      include	"over.asm"
      1  ff1d							;================
      2  ff1d							; Constants
      3  ff1d							;================
      4  ff1d
      5  ff1d		       00 00	   OVER_BG_COLOR =	#$00
      6  ff1d		       00 44	   OVER_FG_COLOR =	#$44
      7  ff1d		       00 06	   OVER_FG_BW_COLOR =	#$06
      8  ff1d
      9  ff1d		       00 07	   OVER_AUDIO_TONE =	7
     10  ff1d		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     11  ff1d		       00 06	   OVER_AUDIO_LENGTH =	6
     12  ff1d		       00 10	   OVER_AUDIO_STEP =	16
     13  ff1d
     14  ff1d		       00 09	   OVER_IMAGE_SIZE =	9
     15  ff1d		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     16  ff1d		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     17  ff1d		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     18  ff1d
     19  ff1d				   OverInit
     20  ff1d
     21  ff1d							; Setup logic and kernel
      0  ff1d					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  ff1d				   .POINTER   SET	VBlankPtr
      2  ff1d				   .ADDRESS   SET	OverVerticalBlank
      3  ff1d
      4  ff1d		       a9 4c		      LDA	#<.ADDRESS
      5  ff1f		       85 86		      STA	.POINTER
      6  ff21		       a9 ff		      LDA	#>.ADDRESS
      7  ff23		       85 87		      STA	.POINTER+1
      8  ff25
      0  ff25					      SET_POINTER	KernelPtr, OverKernel
      1  ff25				   .POINTER   SET	KernelPtr
      2  ff25				   .ADDRESS   SET	OverKernel
      3  ff25
      4  ff25		       a9 a6		      LDA	#<.ADDRESS
      5  ff27		       85 88		      STA	.POINTER
      6  ff29		       a9 ff		      LDA	#>.ADDRESS
      7  ff2b		       85 89		      STA	.POINTER+1
      8  ff2d
      0  ff2d					      SET_POINTER	OverScanPtr, OverOverScan
      1  ff2d				   .POINTER   SET	OverScanPtr
      2  ff2d				   .ADDRESS   SET	OverOverScan
      3  ff2d
      4  ff2d		       a9 66		      LDA	#<.ADDRESS
      5  ff2f		       85 8a		      STA	.POINTER
      6  ff31		       a9 ff		      LDA	#>.ADDRESS
      7  ff33		       85 8b		      STA	.POINTER+1
      8  ff35
     25  ff35
     26  ff35							; Load audio settings
     27  ff35		       a9 07		      lda	#OVER_AUDIO_TONE
     28  ff37		       85 15		      sta	AUDC0
     29  ff39							;lda #OVER_AUDIO_VOLUME
     30  ff39							;sta AUDV0
     31  ff39		       a9 00		      lda	#0
     32  ff3b							;sta AUDC1
     33  ff3b		       85 1a		      sta	AUDV1
     34  ff3d
     35  ff3d							; Set initial button state
     36  ff3d							;lda #0
     37  ff3d		       85 8f		      sta	InputState
     38  ff3f
     39  ff3f							; Setup frame counters
     40  ff3f		       a9 01		      lda	#1
     41  ff41		       85 8d		      sta	FrameTimer
     42  ff43		       a9 10		      lda	#OVER_AUDIO_STEP
     43  ff45		       85 91		      sta	SampleStep
     44  ff47		       a9 06		      lda	#OVER_AUDIO_LENGTH
     45  ff49		       85 90		      sta	AudioStep
     46  ff4b
     47  ff4b		       60		      rts
     48  ff4c
     49  ff4c				   OverVerticalBlank
     50  ff4c		       20 be f6 	      jsr	ScoreUpdate
     51  ff4f
     52  ff4f							; Load Colors
     53  ff4f		       a9 00		      lda	#OVER_BG_COLOR
     54  ff51		       85 09		      sta	COLUBK
     55  ff53
     56  ff53							; Check b/w
     57  ff53		       ad 82 02 	      lda	SWCHB
     58  ff56					      REPEAT	4
     59  ff56		       4a		      lsr
     58  ff56					      REPEND
     59  ff57		       4a		      lsr
     58  ff57					      REPEND
     59  ff58		       4a		      lsr
     58  ff58					      REPEND
     59  ff59		       4a		      lsr
     60  ff5a					      REPEND
     61  ff5a		       90 05		      bcc	.over_bw
     62  ff5c
     63  ff5c				   .over_color
     64  ff5c		       a9 44		      lda	#OVER_FG_COLOR
     65  ff5e		       85 08		      sta	COLUPF
     66  ff60
     67  ff60		       60		      rts
     68  ff61
     69  ff61				   .over_bw
     70  ff61							; Load b/w Colors
     71  ff61		       a9 06		      lda	#OVER_FG_BW_COLOR
     72  ff63		       85 08		      sta	COLUPF
     73  ff65
     74  ff65		       60		      rts
     75  ff66
     76  ff66				   OverOverScan
     77  ff66		       20 6d ff 	      jsr	OverAudio
     78  ff69		       20 91 ff 	      jsr	OverState
     79  ff6c		       60		      rts
     80  ff6d
     81  ff6d				   OverAudio
     82  ff6d
     83  ff6d		       a5 8d		      lda	FrameTimer
     84  ff6f		       d0 1f		      bne	.over_audio_return
     85  ff71
     86  ff71							; Reset Timer
     87  ff71					      REPEAT	3
     88  ff71		       e6 91		      inc	SampleStep
     87  ff71					      REPEND
     88  ff73		       e6 91		      inc	SampleStep
     87  ff73					      REPEND
     88  ff75		       e6 91		      inc	SampleStep
     89  ff77					      REPEND
     90  ff77		       a5 91		      lda	SampleStep
     91  ff79		       85 8d		      sta	FrameTimer
     92  ff7b
     93  ff7b				   .over_audio_play
     94  ff7b
     95  ff7b							; Increment melody position
     96  ff7b		       a4 90		      ldy	AudioStep
     97  ff7d		       f0 0d		      beq	.over_audio_mute_note
     98  ff7f		       c6 90		      dec	AudioStep
     99  ff81		       88		      dey
    100  ff82
    101  ff82				   .over_audio_play_note
    102  ff82
    103  ff82							; Melody Line
    104  ff82		       b9 f2 ff 	      lda	OverAudio0,y
    105  ff85		       85 17		      sta	AUDF0
    106  ff87		       a9 06		      lda	#OVER_AUDIO_VOLUME
    107  ff89		       85 19		      sta	AUDV0
    108  ff8b
    109  ff8b		       60		      rts
    110  ff8c
    111  ff8c				   .over_audio_mute_note
    112  ff8c		       a9 00		      lda	#0
    113  ff8e							;sta AUDF0
    114  ff8e		       85 19		      sta	AUDV0
    115  ff90
    116  ff90				   .over_audio_return
    117  ff90		       60		      rts
    118  ff91
    119  ff91				   OverState
    120  ff91
    121  ff91							; Check to see if audio has finished
    122  ff91		       a5 90		      lda	AudioStep
    123  ff93		       d0 10		      bne	.over_state_return
    124  ff95
    125  ff95							; Check if Fire Button on controller 1 is released
    126  ff95		       a5 0c		      lda	INPT4
    127  ff97		       30 05		      bmi	.over_state_check
    128  ff99
    129  ff99				   .over_state_on
    130  ff99		       a9 01		      lda	#1
    131  ff9b		       85 8f		      sta	InputState
    132  ff9d		       60		      rts
    133  ff9e
    134  ff9e				   .over_state_check
    135  ff9e		       a5 8f		      lda	InputState
    136  ffa0		       f0 03		      beq	.over_state_return
    137  ffa2
    138  ffa2				   .over_state_next
    139  ffa2							; Button is released, load title screen
    140  ffa2		       20 7c f3 	      jsr	TitleInit
    141  ffa5
    142  ffa5				   .over_state_return
    143  ffa5		       60		      rts
    144  ffa6
    145  ffa6				   OverKernel
    146  ffa6
    147  ffa6							; Turn on display
    148  ffa6		       a9 00		      lda	#0
    149  ffa8		       85 01		      sta	VBLANK
    150  ffaa
    151  ffaa				   .over_kernel_score
    152  ffaa
    153  ffaa							; Draw Score on top first (no update)
    154  ffaa		       20 21 f7 	      jsr	ScoreDraw
    155  ffad
    156  ffad				   .over_kernel_init
    157  ffad							; Playfield Control
    158  ffad							;lda CtrlPf
    159  ffad							;and #%11111101 ; Use playfield foreground color
    160  ffad							;ora #%00000001 ; Set mirroring
    161  ffad							;sta CtrlPf
    162  ffad		       a9 01		      lda	#%00000001
    163  ffaf		       85 0a		      sta	CTRLPF
    164  ffb1
    165  ffb1				   .over_kernel_top_padding
    166  ffb1							; Top Padding
    167  ffb1		       20 d2 ff 	      jsr	OverPadding
    168  ffb4
    169  ffb4				   .over_kernel_image
    170  ffb4		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    171  ffb6
    172  ffb6				   .over_kernel_image_next
    173  ffb6		       bd e9 ff 	      lda	OverImagePF2,x
    174  ffb9		       85 0f		      sta	PF2
    175  ffbb		       bd e0 ff 	      lda	OverImagePF1,x
    176  ffbe		       85 0e		      sta	PF1
    177  ffc0							;    lda OverImagePF0,x
    178  ffc0							;    sta PF0
    179  ffc0
    180  ffc0		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    181  ffc2				   .over_kernel_image_loop
    182  ffc2		       85 02		      sta	WSYNC
    183  ffc4		       88		      dey
    184  ffc5		       d0 fb		      bne	.over_kernel_image_loop
    185  ffc7
    186  ffc7		       ca		      dex
    187  ffc8		       10 ec		      bpl	.over_kernel_image_next
    188  ffca
    189  ffca				   .over_kernel_bottom_padding
    190  ffca							; Bottom Padding
    191  ffca		       85 02		      sta	WSYNC	; Add extra line to get to 262
    192  ffcc		       20 d2 ff 	      jsr	OverPadding
    193  ffcf
    194  ffcf				   .over_kernel_return
    195  ffcf		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    196  ffd1		       60		      rts
    197  ffd2
    198  ffd2				   OverPadding
    199  ffd2		       a9 00		      lda	#0
    200  ffd4							;sta PF0
    201  ffd4		       85 0e		      sta	PF1
    202  ffd6		       85 0f		      sta	PF2
    203  ffd8
    204  ffd8		       a2 32		      ldx	#OVER_IMAGE_PADDING
    205  ffda				   .over_padding_loop
    206  ffda		       85 02		      sta	WSYNC
    207  ffdc		       ca		      dex
    208  ffdd		       d0 fb		      bne	.over_padding_loop
    209  ffdf
    210  ffdf		       60		      rts
    211  ffe0
    212  ffe0				   OverAssets
    213  ffe0
    214  ffe0							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ffe0					      include	"over_image.asm"
      1  ffe0							;OverImagePF0:
      2  ffe0							;    .BYTE %00000000
      3  ffe0							;    .BYTE %00000000
      4  ffe0							;    .BYTE %00000000
      5  ffe0							;    .BYTE %00000000
      6  ffe0							;    .BYTE %00000000
      7  ffe0							;    .BYTE %00000000
      8  ffe0							;    .BYTE %00000000
      9  ffe0							;    .BYTE %00000000
     10  ffe0							;    .BYTE %00000000
     11  ffe0
     12  ffe0				   OverImagePF1
     13  ffe0		       0c		      .BYTE.b	%00001100
     14  ffe1		       13		      .BYTE.b	%00010011
     15  ffe2		       20		      .BYTE.b	%00100000
     16  ffe3		       23		      .BYTE.b	%00100011
     17  ffe4		       24		      .BYTE.b	%00100100
     18  ffe5		       24		      .BYTE.b	%00100100
     19  ffe6		       12		      .BYTE.b	%00010010
     20  ffe7		       10		      .BYTE.b	%00010000
     21  ffe8		       08		      .BYTE.b	%00001000
     22  ffe9
     23  ffe9				   OverImagePF2
     24  ffe9		       e0		      .BYTE.b	%11100000
     25  ffea		       f8		      .BYTE.b	%11111000
     26  ffeb		       fd		      .BYTE.b	%11111101
     27  ffec		       ae		      .BYTE.b	%10101110
     28  ffed		       df		      .BYTE.b	%11011111
     29  ffee		       ae		      .BYTE.b	%10101110
     30  ffef		       fc		      .BYTE.b	%11111100
     31  fff0		       f8		      .BYTE.b	%11111000
     32  fff1		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    216  fff2
    217  fff2				   OverAudio0
    218  fff2
    219  fff2		       1a		      .BYTE.b	#26	; D1
    220  fff3		       1a		      .BYTE.b	#26
    221  fff4		       16		      .BYTE.b	#22	; F1
    222  fff5		       11		      .BYTE.b	#17	; A1
    223  fff6		       0d		      .BYTE.b	#13	; D2
    224  fff7		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    325  fff8
    326  fff8							;================
    327  fff8							; End of cart
    328  fff8							;================
    329  fff8
    330  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    331  fffa
    332  fffa				   InterruptVectors
    333  fffa
    334  fffa		       18 f2		      .word.w	InitSystem	; NMI
    335  fffc		       18 f2		      .word.w	InitSystem	; RESET
    336  fffe		       18 f2		      .word.w	InitSystem	; IRQ
    337  10000
    338  10000					       END
