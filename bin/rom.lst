------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00b8 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00	   FrameTimer ds	1
     70 U008f
     71 U008f		       00	   AudioStep  ds	1
     72 U0090
     73 U0090		       00	   SampleStep ds	1
     74 U0091
     75 U0091							; Score
     76 U0091
     77 U0091		       00 00	   ScoreValue ds	2
     78 U0093		       00 00	   ScoreDigitOnes ds	2
     79 U0095		       00 00	   ScoreDigitTens ds	2
     80 U0097		       00 00	   ScoreGfx   ds	2
     81 U0099
     82 U0099							; Web
     83 U0099
     84 U0099		       00	   WebIndex   ds	1
     85 U009a		       00	   WebDir     ds	1
     86 U009b
     87 U009b							; Spider
     88 U009b
     89 U009b		       00 00	   SpiderPtr  ds	2
     90 U009d		       00 00	   SpiderPos  ds	2
     91 U009f		       00	   SpiderCtrl ds	1
     92 U00a0		       00	   SpiderColor ds	1
     93 U00a1
     94 U00a1		       00	   SpiderIndex ds	1
     95 U00a2		       00	   SpiderDrawPos ds	1
     96 U00a3
     97 U00a3							; Line
     98 U00a3
     99 U00a3		       00	   LineEnabled ds	1
    100 U00a4		       00 00	   LinePos    ds	2
    101 U00a6		       00 00	   LineVelocity ds	2
    102 U00a8		       00 00	   LineStartPos ds	2
    103 U00aa		       00 00	   LineDrawPos ds	2
    104 U00ac
    105 U00ac							; Bug
    106 U00ac
    107 U00ac		       00 00	   BugStunned ds	2
    108 U00ae		       00 00	   BugPosX    ds	2
    109 U00b0		       00 00	   BugPosY    ds	2
    110 U00b2		       00 00	   BugColor   ds	2
    111 U00b4
    112 U00b4		       00 00	   BugDrawPosBottom ds	2
    113 U00b6		       00 00	   BugDrawPosTop ds	2
    114 U00b8
    115  10000 ????				       SEG
    116  f000					      org	$F000	; Start of cart area
    117  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    119  f021
    120  f021				   InitSystem
    121  f021
    122  f021				   .init_clean
    123  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    125  f02c
    126  f02c				   .init_tia
    127  f02c							; Define default TIA register values
    128  f02c
    129  f02c							; Initialize copies
    130  f02c		       a9 00		      lda	#0
    131  f02e		       85 80		      sta	CtrlPf
    132  f030		       85 81		      sta	NuSiz0
    133  f032		       85 82		      sta	NuSiz1
    134  f034
    135  f034							; Set background color
    136  f034		       a9 00		      lda	#$00	; Black
    137  f036		       85 09		      sta	COLUBK
    138  f038
    139  f038							; Set the playfield and player color
    140  f038		       a9 0e		      lda	#$0E	; White
    141  f03a		       85 08		      sta	COLUPF
    142  f03c		       85 06		      sta	COLUP0
    143  f03e		       85 07		      sta	COLUP1
    144  f040
    145  f040							; Playfield Control
    146  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    147  f042		       85 80		      sta	CtrlPf
    148  f044		       85 0a		      sta	CTRLPF
    149  f046
    150  f046							; Disable Game Elements
    151  f046		       a9 00		      lda	#$00
    152  f048		       85 1f		      sta	ENABL	; Turn off ball
    153  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    154  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    155  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    156  f050		       85 1c		      sta	GRP1	; Turn off player 2
    157  f052
    158  f052							; Empty playfield
    159  f052		       a9 00		      lda	#%00000000
    160  f054		       85 0d		      sta	PF0
    161  f056		       85 0e		      sta	PF1
    162  f058		       85 0f		      sta	PF2
    163  f05a
    164  f05a				   .init_seed
    165  f05a							; Seed the random number generator
    166  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    167  f05d		       85 85		      sta	Rand8	; Use as seed
    168  f05f		       49 ff		      eor	#$FF	; Flip bits
    169  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    170  f063
    171  f063				   .init_game
    172  f063
    173  f063		       20 c9 f0 	      jsr	LogoInit
    174  f066
    175  f066							;=======================================
    176  f066							; Game Kernel
    177  f066							;=======================================
    178  f066
    179  f066				   Main
    180  f066
    181  f066		       20 75 f0 	      jsr	VerticalSync
    182  f069		       20 8c f0 	      jsr	VerticalBlank
    183  f06c		       20 9f f0 	      jsr	Kernel
    184  f06f		       20 a6 f0 	      jsr	OverScan
    185  f072		       4c 66 f0 	      jmp	Main
    186  f075
    187  f075				   VerticalSync
    188  f075
    189  f075		       a9 00		      lda	#0
    190  f077		       85 01		      sta	VBLANK
    191  f079
    192  f079							; Turn on Vertical Sync signal and setup timer
    193  f079		       a9 02		      lda	#2
    194  f07b		       85 00		      sta	VSYNC
    195  f07d
    196  f07d							; Increment frame count and reduce frame counter
    197  f07d		       e6 8d		      inc	Frame
    198  f07f		       c6 8e		      dec	FrameTimer
    199  f081
    200  f081							; VSYNCH signal scanlines
    201  f081					      REPEAT	#KERNEL_VSYNC
    202  f081		       85 02		      sta	WSYNC
    201  f081					      REPEND
    202  f083		       85 02		      sta	WSYNC
    201  f083					      REPEND
    202  f085		       85 02		      sta	WSYNC
    203  f087					      REPEND
    204  f087
    205  f087							; Turn off Vertical Sync signal
    206  f087		       a9 00		      lda	#0
    207  f089		       85 00		      sta	VSYNC
    208  f08b
    209  f08b				   .vsync_return
    210  f08b		       60		      rts
    211  f08c
    212  f08c				   VerticalBlank
    213  f08c							; Setup Timer
    214  f08c		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    215  f08e		       8d 96 02 	      sta	TIM64T
    216  f091
    217  f091				   .vblank_logic
    218  f091							; Perform Game Logic
    219  f091		       20 9c f0 	      jsr	.vblank_logic_call_ptr
    220  f094
    221  f094				   .vblank_loop
    222  f094							; WSYNC until Timer is complete
    223  f094		       85 02		      sta	WSYNC
    224  f096		       ad 84 02 	      lda	INTIM
    225  f099		       d0 f9		      bne	.vblank_loop
    226  f09b
    227  f09b				   .vblank_return
    228  f09b		       60		      rts
    229  f09c
    230  f09c				   .vblank_logic_call_ptr
    231  f09c		       6c 87 00 	      jmp	(VBlankPtr)
    232  f09f
    233  f09f				   Kernel
    234  f09f
    235  f09f							; Perform Selected Kernel
    236  f09f		       20 a3 f0 	      jsr	.kernel_call_ptr
    237  f0a2		       60		      rts
    238  f0a3
    239  f0a3				   .kernel_call_ptr
    240  f0a3		       6c 89 00 	      jmp	(KernelPtr)
    241  f0a6
    242  f0a6				   OverScan
    243  f0a6
    244  f0a6							; End of screen, enter blanking
    245  f0a6		       a9 42		      lda	#%01000010
    246  f0a8		       85 01		      sta	VBLANK
    247  f0aa
    248  f0aa							; Setup Timer
    249  f0aa		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    250  f0ac		       8d 96 02 	      sta	TIM64T
    251  f0af
    252  f0af							;.overscan_reset:
    253  f0af							; Check for reset switch
    254  f0af		       ad 82 02 	      lda	SWCHB
    255  f0b2		       4a		      lsr		; Push D0 to carry (C)
    256  f0b3		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    257  f0b5
    258  f0b5							; Perform reset
    259  f0b5		       20 c9 f0 	      jsr	LogoInit	; No need for logic
    260  f0b8		       4c be f0 	      jmp	.overscan_loop
    261  f0bb
    262  f0bb				   .overscan_logic
    263  f0bb							; Perform OverScan Logic
    264  f0bb		       20 c6 f0 	      jsr	.overscan_logic_call_ptr
    265  f0be
    266  f0be				   .overscan_loop
    267  f0be							; WSYNC until Timer is complete
    268  f0be		       85 02		      sta	WSYNC
    269  f0c0		       ad 84 02 	      lda	INTIM
    270  f0c3		       d0 f9		      bne	.overscan_loop
    271  f0c5
    272  f0c5				   .overscan_return
    273  f0c5		       60		      rts
    274  f0c6
    275  f0c6				   .overscan_logic_call_ptr
    276  f0c6		       6c 8b 00 	      jmp	(OverScanPtr)
    277  f0c9
    278  f0c9							;================
    279  f0c9							; State Code
    280  f0c9							;================
    281  f0c9
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0c9					      include	"logo.asm"
      1  f0c9							;================
      2  f0c9							; Constants
      3  f0c9							;================
      4  f0c9
      5  f0c9		       00 b4	   LOGO_FRAMES =	180
      6  f0c9
      7  f0c9		       00 a2	   LOGO_BG_COLOR =	#$A2
      8  f0c9		       00 5e	   LOGO_FG_COLOR =	#$5E
      9  f0c9
     10  f0c9		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0c9		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0c9		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0c9		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0c9		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0c9		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0c9
     17  f0c9		       00 09	   LOGO_IMAGE_SIZE =	9
     18  f0c9		       00 08	   LOGO_IMAGE_LINE_SIZE =	8
     19  f0c9		       00 48	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     20  f0c9		       00 3c	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     21  f0c9
     22  f0c9				   LogoInit
     23  f0c9
     24  f0c9							; Setup logic and kernel
      0  f0c9					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f0c9				   .POINTER   SET	VBlankPtr
      2  f0c9				   .ADDRESS   SET	LogoVerticalBlank
      3  f0c9
      4  f0c9		       a9 10		      LDA	#<.ADDRESS
      5  f0cb		       85 87		      STA	.POINTER
      6  f0cd		       a9 f1		      LDA	#>.ADDRESS
      7  f0cf		       85 88		      STA	.POINTER+1
      8  f0d1
      0  f0d1					      SET_POINTER	KernelPtr, LogoKernel
      1  f0d1				   .POINTER   SET	KernelPtr
      2  f0d1				   .ADDRESS   SET	LogoKernel
      3  f0d1
      4  f0d1		       a9 54		      LDA	#<.ADDRESS
      5  f0d3		       85 89		      STA	.POINTER
      6  f0d5		       a9 f1		      LDA	#>.ADDRESS
      7  f0d7		       85 8a		      STA	.POINTER+1
      8  f0d9
      0  f0d9					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f0d9				   .POINTER   SET	OverScanPtr
      2  f0d9				   .ADDRESS   SET	LogoOverScan
      3  f0d9
      4  f0d9		       a9 11		      LDA	#<.ADDRESS
      5  f0db		       85 8b		      STA	.POINTER
      6  f0dd		       a9 f1		      LDA	#>.ADDRESS
      7  f0df		       85 8c		      STA	.POINTER+1
      8  f0e1
     28  f0e1
     29  f0e1							; Load Colors
     30  f0e1		       a9 a2		      lda	#LOGO_BG_COLOR
     31  f0e3		       85 09		      sta	COLUBK
     32  f0e5		       a9 5e		      lda	#LOGO_FG_COLOR
     33  f0e7		       85 08		      sta	COLUPF
     34  f0e9
     35  f0e9							; Load audio settings
     36  f0e9		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     37  f0eb		       85 15		      sta	AUDC0
     38  f0ed		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     39  f0ef		       85 19		      sta	AUDV0
     40  f0f1		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     41  f0f3		       85 16		      sta	AUDC1
     42  f0f5		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     43  f0f7		       85 1a		      sta	AUDV1
     44  f0f9		       a9 00		      lda	#0
     45  f0fb		       85 8f		      sta	AudioStep
     46  f0fd
     47  f0fd							; Play first note
     48  f0fd		       ad dd f1 	      lda	LogoAudio0,AudioStep
     49  f100		       85 17		      sta	AUDF0
     50  f102		       ad e9 f1 	      lda	LogoAudio1,AudioStep
     51  f105		       85 18		      sta	AUDF1
     52  f107
     53  f107							; Setup frame counters
     54  f107		       a9 00		      lda	#0
     55  f109		       85 8d		      sta	Frame
     56  f10b		       a9 b4		      lda	#LOGO_FRAMES
     57  f10d		       85 8e		      sta	FrameTimer
     58  f10f
     59  f10f							; Setup Image Animation
     60  f10f							;lda #KERNEL_IMAGE_SIZE
     61  f10f							;sta ImageVisible
     62  f10f
     63  f10f		       60		      rts
     64  f110
     65  f110				   LogoVerticalBlank
     66  f110							;jsr LogoAnimation
     67  f110		       60		      rts
     68  f111
     69  f111				   LogoOverScan
     70  f111		       20 1f f1 	      jsr	LogoAudio
     71  f114		       20 4a f1 	      jsr	LogoState
     72  f117		       60		      rts
     73  f118
     74  f118				   LogoAnimation
     75  f118		       a5 8d		      lda	Frame
     76  f11a		       29 03		      and	#%00000011	; Every 4 when bits are 00
     77  f11c		       d0 00		      bne	.logo_animation_return
     78  f11e
     79  f11e							;ldx ImageVisible
     80  f11e							;cpx #0
     81  f11e							;beq .logo_animation_return
     82  f11e
     83  f11e							; Add another visible line
     84  f11e							;dex
     85  f11e							;stx ImageVisible
     86  f11e
     87  f11e				   .logo_animation_return
     88  f11e		       60		      rts
     89  f11f
     90  f11f				   LogoAudio
     91  f11f
     92  f11f		       a5 8d		      lda	Frame
     93  f121		       29 07		      and	#%00000111	; Every 8 when bits are 000
     94  f123		       d0 24		      bne	.logo_audio_return
     95  f125
     96  f125				   .logo_audio_play
     97  f125
     98  f125							; Check if we're at the end of the melody
     99  f125		       a4 8f		      ldy	AudioStep
    100  f127		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
    101  f129		       f0 10		      beq	.logo_audio_mute
    102  f12b
    103  f12b				   .logo_audio_play_note
    104  f12b							; Increment audio position
    105  f12b		       c8		      iny
    106  f12c		       84 8f		      sty	AudioStep
    107  f12e
    108  f12e							; Logo note and play
    109  f12e		       b9 dd f1 	      lda	LogoAudio0,y
    110  f131		       85 17		      sta	AUDF0
    111  f133		       b9 e9 f1 	      lda	LogoAudio1,y
    112  f136		       85 18		      sta	AUDF1
    113  f138		       4c 49 f1 	      jmp	.logo_audio_mute_skip
    114  f13b
    115  f13b				   .logo_audio_mute
    116  f13b
    117  f13b							; Mute audio
    118  f13b		       a9 00		      lda	#0
    119  f13d		       85 15		      sta	AUDC0
    120  f13f		       85 19		      sta	AUDV0
    121  f141		       85 17		      sta	AUDF0
    122  f143		       85 16		      sta	AUDC1
    123  f145		       85 1a		      sta	AUDV1
    124  f147		       85 18		      sta	AUDF1
    125  f149
    126  f149				   .logo_audio_mute_skip
    127  f149				   .logo_audio_return
    128  f149		       60		      rts
    129  f14a
    130  f14a				   LogoState
    131  f14a		       a5 8e		      lda	FrameTimer
    132  f14c		       c9 00		      cmp	#0
    133  f14e		       d0 03		      bne	.logo_state_return
    134  f150
    135  f150		       20 f5 f1 	      jsr	TitleInit
    136  f153
    137  f153				   .logo_state_return
    138  f153		       60		      rts
    139  f154
    140  f154				   LogoKernel
    141  f154
    142  f154							; Playfield Control
    143  f154		       a5 80		      lda	CtrlPf
    144  f156		       29 fe		      and	#%11111110	; No mirroring
    145  f158		       85 80		      sta	CtrlPf
    146  f15a		       85 0a		      sta	CTRLPF
    147  f15c
    148  f15c							; Turn on display
    149  f15c		       a9 00		      lda	#0
    150  f15e		       85 01		      sta	VBLANK
    151  f160
    152  f160				   .logo_kernel_top_padding
    153  f160							; Top Padding
    154  f160		       20 97 f1 	      jsr	LogoPadding
    155  f163
    156  f163				   .logo_kernel_image
    157  f163
    158  f163		       a2 11		      ldx	#(LOGO_IMAGE_SIZE*2)-1
    159  f165		       a0 07		      ldy	#LOGO_IMAGE_LINE_SIZE-1
    160  f167							; The extra 1 on line size is for processing overflow
    161  f167
    162  f167				   .logo_kernel_image_line
    163  f167		       85 02		      sta	WSYNC
    164  f169
    165  f169		       bd a6 f1 	      lda	LogoImagePF0-1,x
    166  f16c		       85 0d		      sta	PF0
    167  f16e		       bd b8 f1 	      lda	LogoImagePF1-1,x
    168  f171		       85 0e		      sta	PF1
    169  f173		       bd ca f1 	      lda	LogoImagePF2-1,x
    170  f176		       85 0f		      sta	PF2
    171  f178
      0  f178					      sleep	6
      1  f178				   .CYCLES    SET	6
      2  f178
      3  f178				  -	      IF	.CYCLES < 2
      4  f178				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f178				  -	      ERR
      6  f178					      ENDIF
      7  f178
      8  f178				  -	      IF	.CYCLES & 1
      9  f178				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f178				  -	      nop	0
     11  f178				  -	      ELSE
     12  f178				  -	      bit	VSYNC
     13  f178				  -	      ENDIF
     14  f178				  -.CYCLES    SET	.CYCLES - 3
     15  f178					      ENDIF
     16  f178
     17  f178					      REPEAT	.CYCLES / 2
     18  f178		       ea		      nop
     17  f178					      REPEND
     18  f179		       ea		      nop
     17  f179					      REPEND
     18  f17a		       ea		      nop
     19  f17b					      REPEND
    173  f17b
    174  f17b		       bd a7 f1 	      lda	LogoImagePF0,x
    175  f17e		       85 0d		      sta	PF0
    176  f180		       bd b9 f1 	      lda	LogoImagePF1,x
    177  f183		       85 0e		      sta	PF1
    178  f185		       bd cb f1 	      lda	LogoImagePF2,x
    179  f188		       85 0f		      sta	PF2
    180  f18a
    181  f18a		       88		      dey
    182  f18b		       d0 da		      bne	.logo_kernel_image_line
    183  f18d
    184  f18d		       a0 08		      ldy	#LOGO_IMAGE_LINE_SIZE
    185  f18f
    186  f18f		       ca		      dex
    187  f190		       ca		      dex
    188  f191		       10 d4		      bpl	.logo_kernel_image_line
    189  f193
    190  f193				   .logo_kernel_bottom_padding
    191  f193							; Bottom Padding
    192  f193		       20 97 f1 	      jsr	LogoPadding
    193  f196
    194  f196				   .logo_kernel_image_return
    195  f196		       60		      rts
    196  f197
    197  f197				   LogoPadding
    198  f197		       a9 00		      lda	#0
    199  f199		       85 0d		      sta	PF0
    200  f19b		       85 0e		      sta	PF1
    201  f19d		       85 0f		      sta	PF2
    202  f19f
    203  f19f		       a2 3c		      ldx	#LOGO_IMAGE_PADDING
    204  f1a1				   .logo_padding_loop
    205  f1a1		       85 02		      sta	WSYNC
    206  f1a3		       ca		      dex
    207  f1a4		       d0 fb		      bne	.logo_padding_loop
    208  f1a6
    209  f1a6		       60		      rts
    210  f1a7
    211  f1a7				   LogoAssets
    212  f1a7
    213  f1a7							; Assets
------- FILE logo_image.asm LEVEL 3 PASS 2
      0  f1a7					      include	"logo_image.asm"
      1  f1a7				   LogoImagePF0
      2  f1a7		       00		      .BYTE.b	%00000000
      3  f1a8		       40		      .BYTE.b	%01000000
      4  f1a9		       00		      .BYTE.b	%00000000
      5  f1aa		       a0		      .BYTE.b	%10100000
      6  f1ab		       00		      .BYTE.b	%00000000
      7  f1ac		       10		      .BYTE.b	%00010000
      8  f1ad		       00		      .BYTE.b	%00000000
      9  f1ae		       00		      .BYTE.b	%00000000
     10  f1af		       00		      .BYTE.b	%00000000
     11  f1b0		       c0		      .BYTE.b	%11000000
     12  f1b1		       00		      .BYTE.b	%00000000
     13  f1b2		       50		      .BYTE.b	%01010000
     14  f1b3		       00		      .BYTE.b	%00000000
     15  f1b4		       40		      .BYTE.b	%01000000
     16  f1b5		       00		      .BYTE.b	%00000000
     17  f1b6		       50		      .BYTE.b	%01010000
     18  f1b7		       00		      .BYTE.b	%00000000
     19  f1b8		       c0		      .BYTE.b	%11000000
     20  f1b9
     21  f1b9				   LogoImagePF1
     22  f1b9		       00		      .BYTE.b	%00000000
     23  f1ba		       00		      .BYTE.b	%00000000
     24  f1bb		       00		      .BYTE.b	%00000000
     25  f1bc		       00		      .BYTE.b	%00000000
     26  f1bd		       00		      .BYTE.b	%00000000
     27  f1be		       80		      .BYTE.b	%10000000
     28  f1bf		       00		      .BYTE.b	%00000000
     29  f1c0		       00		      .BYTE.b	%00000000
     30  f1c1		       00		      .BYTE.b	%00000000
     31  f1c2		       00		      .BYTE.b	%00000000
     32  f1c3		       00		      .BYTE.b	%00000000
     33  f1c4		       80		      .BYTE.b	%10000000
     34  f1c5		       00		      .BYTE.b	%00000000
     35  f1c6		       80		      .BYTE.b	%10000000
     36  f1c7		       00		      .BYTE.b	%00000000
     37  f1c8		       80		      .BYTE.b	%10000000
     38  f1c9		       00		      .BYTE.b	%00000000
     39  f1ca		       00		      .BYTE.b	%00000000
     40  f1cb
     41  f1cb				   LogoImagePF2
     42  f1cb		       44		      .BYTE.b	%01000100
     43  f1cc		       00		      .BYTE.b	%00000000
     44  f1cd		       a8		      .BYTE.b	%10101000
     45  f1ce		       00		      .BYTE.b	%00000000
     46  f1cf		       10		      .BYTE.b	%00010000
     47  f1d0		       00		      .BYTE.b	%00000000
     48  f1d1		       00		      .BYTE.b	%00000000
     49  f1d2		       00		      .BYTE.b	%00000000
     50  f1d3		       8c		      .BYTE.b	%10001100
     51  f1d4		       00		      .BYTE.b	%00000000
     52  f1d5		       54		      .BYTE.b	%01010100
     53  f1d6		       00		      .BYTE.b	%00000000
     54  f1d7		       54		      .BYTE.b	%01010100
     55  f1d8		       00		      .BYTE.b	%00000000
     56  f1d9		       54		      .BYTE.b	%01010100
     57  f1da		       00		      .BYTE.b	%00000000
     58  f1db		       8c		      .BYTE.b	%10001100
     59  f1dc		       00		      .BYTE.b	%00000000
------- FILE logo.asm
    215  f1dd
    216  f1dd				   LogoAudio0
    217  f1dd
    218  f1dd		       1d		      .BYTE.b	#29	; C
    219  f1de		       17		      .BYTE.b	#23	; E
    220  f1df		       13		      .BYTE.b	#19	; G
    221  f1e0		       0f		      .BYTE.b	#15	; A
    222  f1e1		       17		      .BYTE.b	#23	; E
    223  f1e2		       13		      .BYTE.b	#19	; G
    224  f1e3		       0f		      .BYTE.b	#15	; B
    225  f1e4		       0e		      .BYTE.b	#14	; C
    226  f1e5		       0b		      .BYTE.b	#11	; E
    227  f1e6		       0b		      .BYTE.b	#11
    228  f1e7		       0b		      .BYTE.b	#11
    229  f1e8		       0b		      .BYTE.b	#11
    230  f1e9
    231  f1e9				   LogoAudio1
    232  f1e9
    233  f1e9		       1f		      .BYTE.b	#31	; C
    234  f1ea		       1f		      .BYTE.b	#31
    235  f1eb		       1f		      .BYTE.b	#31
    236  f1ec		       1f		      .BYTE.b	#31
    237  f1ed		       19		      .BYTE.b	#25	; E
    238  f1ee		       19		      .BYTE.b	#25
    239  f1ef		       19		      .BYTE.b	#25
    240  f1f0		       19		      .BYTE.b	#25
    241  f1f1		       14		      .BYTE.b	#20	; G
    242  f1f2		       14		      .BYTE.b	#20
    243  f1f3		       14		      .BYTE.b	#20
    244  f1f4		       14		      .BYTE.b	#20
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f1f5					      include	"title.asm"
      1  f1f5							;================
      2  f1f5							; Constants
      3  f1f5							;================
      4  f1f5
      5  f1f5		       00 08	   TITLE_LINE_SIZE =	8
      6  f1f5		       00 04	   TITLE_DATA_SIZE =	%00000100
      7  f1f5		       00 01	   TITLE_BORDER =	1
      8  f1f5		       00 04	   TITLE_PAD  =	4
      9  f1f5		       00 06	   TITLE_IMAGE =	6
     10  f1f5		       00 02	   TITLE_GAP  =	2
     11  f1f5
     12  f1f5		       00 00	   TITLE_BG_COLOR =	#$00
     13  f1f5		       00 0e	   TITLE_FG_COLOR =	#$0E
     14  f1f5
     15  f1f5		       00 04	   TITLE_AUDIO_0_TONE =	4
     16  f1f5		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     17  f1f5		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     18  f1f5		       00 10	   TITLE_AUDIO_LENGTH =	16
     19  f1f5		       00 09	   TITLE_AUDIO_STEP =	9
     20  f1f5
     21  f1f5				   TitleInit
     22  f1f5
     23  f1f5							; Setup logic and kernel
      0  f1f5					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f1f5				   .POINTER   SET	VBlankPtr
      2  f1f5				   .ADDRESS   SET	TitleVerticalBlank
      3  f1f5
      4  f1f5		       a9 2c		      LDA	#<.ADDRESS
      5  f1f7		       85 87		      STA	.POINTER
      6  f1f9		       a9 f2		      LDA	#>.ADDRESS
      7  f1fb		       85 88		      STA	.POINTER+1
      8  f1fd
      0  f1fd					      SET_POINTER	KernelPtr, TitleKernel
      1  f1fd				   .POINTER   SET	KernelPtr
      2  f1fd				   .ADDRESS   SET	TitleKernel
      3  f1fd
      4  f1fd		       a9 77		      LDA	#<.ADDRESS
      5  f1ff		       85 89		      STA	.POINTER
      6  f201		       a9 f2		      LDA	#>.ADDRESS
      7  f203		       85 8a		      STA	.POINTER+1
      8  f205
      0  f205					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f205				   .POINTER   SET	OverScanPtr
      2  f205				   .ADDRESS   SET	TitleOverScan
      3  f205
      4  f205		       a9 30		      LDA	#<.ADDRESS
      5  f207		       85 8b		      STA	.POINTER
      6  f209		       a9 f2		      LDA	#>.ADDRESS
      7  f20b		       85 8c		      STA	.POINTER+1
      8  f20d
     27  f20d
     28  f20d							; Load Colors
     29  f20d		       a9 00		      lda	#TITLE_BG_COLOR
     30  f20f		       85 09		      sta	COLUBK
     31  f211		       a9 0e		      lda	#TITLE_FG_COLOR
     32  f213		       85 08		      sta	COLUPF
     33  f215
     34  f215							; Load audio settings
     35  f215
     36  f215							; Melody Line
     37  f215		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f217		       85 15		      sta	AUDC0
     39  f219		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f21b		       85 19		      sta	AUDV0
     41  f21d
     42  f21d							; Drums and Bass
     43  f21d		       a9 00		      lda	#0
     44  f21f		       85 16		      sta	AUDC1
     45  f221		       85 1a		      sta	AUDV1
     46  f223
     47  f223							; Make it so that we play the first note immediately
     48  f223		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f225		       85 8f		      sta	AudioStep
     50  f227		       a9 01		      lda	#1
     51  f229		       85 8e		      sta	FrameTimer
     52  f22b
     53  f22b		       60		      rts
     54  f22c
     55  f22c				   TitleVerticalBlank
     56  f22c
     57  f22c							; Refresh random values
     58  f22c		       20 13 f0 	      jsr	Random
     59  f22f
     60  f22f		       60		      rts
     61  f230
     62  f230				   TitleOverScan
     63  f230		       20 37 f2 	      jsr	TitleAudio
     64  f233		       20 6f f2 	      jsr	TitleState
     65  f236		       60		      rts
     66  f237
     67  f237				   TitleAudio
     68  f237
     69  f237		       a6 8e		      ldx	FrameTimer
     70  f239		       e0 00		      cpx	#0
     71  f23b		       d0 31		      bne	.title_audio_return
     72  f23d
     73  f23d							; Reset Timer
     74  f23d		       a2 09		      ldx	#TITLE_AUDIO_STEP
     75  f23f		       86 8e		      stx	FrameTimer
     76  f241
     77  f241				   .title_audio_play
     78  f241
     79  f241							; Increment melody position
     80  f241		       a4 8f		      ldy	AudioStep
     81  f243		       c8		      iny
     82  f244
     83  f244							; Check if we're at the end of the melody
     84  f244		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
     85  f246		       d0 02		      bne	.title_audio_play_note
     86  f248
     87  f248							; Loop our audio step
     88  f248		       a0 00		      ldy	#0
     89  f24a
     90  f24a				   .title_audio_play_note
     91  f24a
     92  f24a							; Save current position
     93  f24a		       84 8f		      sty	AudioStep
     94  f24c
     95  f24c							; Basic Melody Line
     96  f24c		       b9 53 f3 	      lda	TitleAudio0,y
     97  f24f		       85 17		      sta	AUDF0
     98  f251
     99  f251							; Drums and Bass
    100  f251		       b9 63 f3 	      lda	TitleTone1,y
    101  f254		       c9 ff		      cmp	#$FF
    102  f256		       f0 0e		      beq	.title_audio_play_note_1_mute
    103  f258
    104  f258		       85 16		      sta	AUDC1
    105  f25a		       b9 73 f3 	      lda	TitleAudio1,y
    106  f25d		       85 18		      sta	AUDF1
    107  f25f		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    108  f261		       85 1a		      sta	AUDV1
    109  f263
    110  f263		       4c 6e f2 	      jmp	.title_audio_return
    111  f266
    112  f266				   .title_audio_play_note_1_mute
    113  f266
    114  f266		       a9 00		      lda	#0
    115  f268		       85 18		      sta	AUDF1
    116  f26a		       85 16		      sta	AUDC1
    117  f26c		       85 1a		      sta	AUDV1
    118  f26e
    119  f26e				   .title_audio_return
    120  f26e		       60		      rts
    121  f26f
    122  f26f				   TitleState
    123  f26f							; Check if Fire Button on controller 1 is pressed
    124  f26f		       a5 0c		      lda	INPT4
    125  f271		       30 03		      bmi	.title_state_return
    126  f273
    127  f273		       20 5b f9 	      jsr	GameInit
    128  f276
    129  f276				   .title_state_return
    130  f276		       60		      rts
    131  f277
    132  f277				   TitleKernel
    133  f277
    134  f277							; Playfield Control
    135  f277		       a5 80		      lda	CtrlPf
    136  f279		       29 fe		      and	#%11111110	; No mirroring
    137  f27b		       85 80		      sta	CtrlPf
    138  f27d		       85 0a		      sta	CTRLPF
    139  f27f
    140  f27f							; Start Counters
    141  f27f		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    142  f281		       a0 00		      ldy	#0	; Image Counter
    143  f283
    144  f283							; Turn on display
    145  f283		       a9 00		      lda	#0
    146  f285		       85 01		      sta	VBLANK
    147  f287
    148  f287		       85 02		      sta	WSYNC
    149  f289
    150  f289				   .title_kernel_image
    151  f289
    152  f289							; 76 machine cycles per scanline
    153  f289		       85 02		      sta	WSYNC
    154  f28b
    155  f28b				   .title_kernel_image_load		; 66 cycles
    156  f28b
    157  f28b							; First half of image
    158  f28b		       b9 c3 f2 	      lda	TitleImage,y	; 5
    159  f28e		       85 0d		      sta	PF0	; 4
    160  f290		       b9 c4 f2 	      lda	TitleImage+1,y	; 5
    161  f293		       85 0e		      sta	PF1	; 4
    162  f295		       b9 c5 f2 	      lda	TitleImage+2,y	; 5
    163  f298		       85 0f		      sta	PF2	; 4
    164  f29a
      0  f29a					      sleep	6
      1  f29a				   .CYCLES    SET	6
      2  f29a
      3  f29a				  -	      IF	.CYCLES < 2
      4  f29a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f29a				  -	      ERR
      6  f29a					      ENDIF
      7  f29a
      8  f29a				  -	      IF	.CYCLES & 1
      9  f29a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f29a				  -	      nop	0
     11  f29a				  -	      ELSE
     12  f29a				  -	      bit	VSYNC
     13  f29a				  -	      ENDIF
     14  f29a				  -.CYCLES    SET	.CYCLES - 3
     15  f29a					      ENDIF
     16  f29a
     17  f29a					      REPEAT	.CYCLES / 2
     18  f29a		       ea		      nop
     17  f29a					      REPEND
     18  f29b		       ea		      nop
     17  f29b					      REPEND
     18  f29c		       ea		      nop
     19  f29d					      REPEND
    166  f29d
    167  f29d							; Second half of image
    168  f29d		       b9 c6 f2 	      lda	TitleImage+3,y	; 5
    169  f2a0		       85 0d		      sta	PF0	; 4
    170  f2a2		       b9 c7 f2 	      lda	TitleImage+4,y	; 5
    171  f2a5		       85 0e		      sta	PF1	; 4
    172  f2a7		       b9 c8 f2 	      lda	TitleImage+5,y	; 5
    173  f2aa		       85 0f		      sta	PF2	; 4
    174  f2ac
    175  f2ac				   .title_kernel_image_index		; 4 cycles
    176  f2ac
    177  f2ac		       ca		      dex		; 2
    178  f2ad		       d0 da		      bne	.title_kernel_image	; 2
    179  f2af
    180  f2af				   .title_kernel_image_index_next		; 6 cycles
    181  f2af
    182  f2af							; Restore scanline counter
    183  f2af		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    184  f2b1
    185  f2b1		       98		      tya		; 2
    186  f2b2		       18		      clc		; 2
    187  f2b3		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    188  f2b5		       a8		      tay		; 2
    189  f2b6		       c0 90		      cpy	#KERNEL_IMAGE_SIZE*KERNEL_IMAGE_FULL_DATA
    190  f2b8		       d0 cf		      bne	.title_kernel_image	; 2
    191  f2ba
    192  f2ba				   .title_kernel_image_clean
    193  f2ba
    194  f2ba							; Clear out playfield
    195  f2ba		       a9 00		      lda	#0
    196  f2bc		       85 0d		      sta	PF0
    197  f2be		       85 0e		      sta	PF1
    198  f2c0		       85 0f		      sta	PF2
    199  f2c2
    200  f2c2				   .title_kernel_image_return
    201  f2c2		       60		      rts
    202  f2c3
    203  f2c3				   TitleAssets
    204  f2c3
    205  f2c3							; Assets
------- FILE title_image.asm LEVEL 3 PASS 2
      0  f2c3					      include	"title_image.asm"
      1  f2c3				   TitleImage
      2  f2c3
      3  f2c3		       f0		      .BYTE.b	%11110000
      4  f2c4		       ff		      .BYTE.b	%11111111
      5  f2c5		       ff		      .BYTE.b	%11111111
      6  f2c6		       f0		      .BYTE.b	%11110000
      7  f2c7		       ff		      .BYTE.b	%11111111
      8  f2c8		       ff		      .BYTE.b	%11111111
      9  f2c9
     10  f2c9		       10		      .BYTE.b	%00010000
     11  f2ca		       00		      .BYTE.b	%00000000
     12  f2cb		       00		      .BYTE.b	%00000000
     13  f2cc		       00		      .BYTE.b	%00000000
     14  f2cd		       00		      .BYTE.b	%00000000
     15  f2ce		       80		      .BYTE.b	%10000000
     16  f2cf
     17  f2cf		       10		      .BYTE.b	%00010000
     18  f2d0		       00		      .BYTE.b	%00000000
     19  f2d1		       00		      .BYTE.b	%00000000
     20  f2d2		       00		      .BYTE.b	%00000000
     21  f2d3		       00		      .BYTE.b	%00000000
     22  f2d4		       80		      .BYTE.b	%10000000
     23  f2d5
     24  f2d5		       10		      .BYTE.b	%00010000
     25  f2d6		       00		      .BYTE.b	%00000000
     26  f2d7		       00		      .BYTE.b	%00000000
     27  f2d8		       00		      .BYTE.b	%00000000
     28  f2d9		       00		      .BYTE.b	%00000000
     29  f2da		       80		      .BYTE.b	%10000000
     30  f2db
     31  f2db		       10		      .BYTE.b	%00010000
     32  f2dc		       00		      .BYTE.b	%00000000
     33  f2dd		       00		      .BYTE.b	%00000000
     34  f2de		       00		      .BYTE.b	%00000000
     35  f2df		       00		      .BYTE.b	%00000000
     36  f2e0		       80		      .BYTE.b	%10000000
     37  f2e1
     38  f2e1		       10		      .BYTE.b	%00010000
     39  f2e2		       77		      .BYTE.b	%01110111
     40  f2e3		       ee		      .BYTE.b	%11101110
     41  f2e4		       c0		      .BYTE.b	%11000000
     42  f2e5		       b8		      .BYTE.b	%10111000
     43  f2e6		       80		      .BYTE.b	%10000000
     44  f2e7
     45  f2e7		       10		      .BYTE.b	%00010000
     46  f2e8		       45		      .BYTE.b	%01000101
     47  f2e9		       24		      .BYTE.b	%00100100
     48  f2ea		       50		      .BYTE.b	%01010000
     49  f2eb		       24		      .BYTE.b	%00100100
     50  f2ec		       80		      .BYTE.b	%10000000
     51  f2ed
     52  f2ed		       10		      .BYTE.b	%00010000
     53  f2ee		       47		      .BYTE.b	%01000111
     54  f2ef		       24		      .BYTE.b	%00100100
     55  f2f0		       d0		      .BYTE.b	%11010000
     56  f2f1		       24		      .BYTE.b	%00100100
     57  f2f2		       80		      .BYTE.b	%10000000
     58  f2f3
     59  f2f3		       10		      .BYTE.b	%00010000
     60  f2f4		       74		      .BYTE.b	%01110100
     61  f2f5		       24		      .BYTE.b	%00100100
     62  f2f6		       50		      .BYTE.b	%01010000
     63  f2f7		       38		      .BYTE.b	%00111000
     64  f2f8		       80		      .BYTE.b	%10000000
     65  f2f9
     66  f2f9		       10		      .BYTE.b	%00010000
     67  f2fa		       14		      .BYTE.b	%00010100
     68  f2fb		       24		      .BYTE.b	%00100100
     69  f2fc		       50		      .BYTE.b	%01010000
     70  f2fd		       24		      .BYTE.b	%00100100
     71  f2fe		       80		      .BYTE.b	%10000000
     72  f2ff
     73  f2ff		       10		      .BYTE.b	%00010000
     74  f300		       74		      .BYTE.b	%01110100
     75  f301		       ee		      .BYTE.b	%11101110
     76  f302		       c0		      .BYTE.b	%11000000
     77  f303		       a4		      .BYTE.b	%10100100
     78  f304		       80		      .BYTE.b	%10000000
     79  f305
     80  f305		       10		      .BYTE.b	%00010000
     81  f306		       00		      .BYTE.b	%00000000
     82  f307		       00		      .BYTE.b	%00000000
     83  f308		       00		      .BYTE.b	%00000000
     84  f309		       00		      .BYTE.b	%00000000
     85  f30a		       80		      .BYTE.b	%10000000
     86  f30b
     87  f30b		       10		      .BYTE.b	%00010000
     88  f30c		       00		      .BYTE.b	%00000000
     89  f30d		       00		      .BYTE.b	%00000000
     90  f30e		       00		      .BYTE.b	%00000000
     91  f30f		       00		      .BYTE.b	%00000000
     92  f310		       80		      .BYTE.b	%10000000
     93  f311
     94  f311		       10		      .BYTE.b	%00010000
     95  f312		       01		      .BYTE.b	%00000001
     96  f313		       03		      .BYTE.b	%00000011
     97  f314		       20		      .BYTE.b	%00100000
     98  f315		       5d		      .BYTE.b	%01011101
     99  f316		       83		      .BYTE.b	%10000011
    100  f317
    101  f317		       10		      .BYTE.b	%00010000
    102  f318		       0a		      .BYTE.b	%00001010
    103  f319		       14		      .BYTE.b	%00010100
    104  f31a		       20		      .BYTE.b	%00100000
    105  f31b		       51		      .BYTE.b	%01010001
    106  f31c		       84		      .BYTE.b	%10000100
    107  f31d
    108  f31d		       10		      .BYTE.b	%00010000
    109  f31e		       15		      .BYTE.b	%00010101
    110  f31f		       2a		      .BYTE.b	%00101010
    111  f320		       20		      .BYTE.b	%00100000
    112  f321		       59		      .BYTE.b	%01011001
    113  f322		       83		      .BYTE.b	%10000011
    114  f323
    115  f323		       10		      .BYTE.b	%00010000
    116  f324		       24		      .BYTE.b	%00100100
    117  f325		       49		      .BYTE.b	%01001001
    118  f326		       20		      .BYTE.b	%00100000
    119  f327		       51		      .BYTE.b	%01010001
    120  f328		       84		      .BYTE.b	%10000100
    121  f329
    122  f329		       10		      .BYTE.b	%00010000
    123  f32a		       22		      .BYTE.b	%00100010
    124  f32b		       44		      .BYTE.b	%01000100
    125  f32c		       a0		      .BYTE.b	%10100000
    126  f32d		       51		      .BYTE.b	%01010001
    127  f32e		       84		      .BYTE.b	%10000100
    128  f32f
    129  f32f		       10		      .BYTE.b	%00010000
    130  f330		       11		      .BYTE.b	%00010001
    131  f331		       23		      .BYTE.b	%00100011
    132  f332		       40		      .BYTE.b	%01000000
    133  f333		       9d		      .BYTE.b	%10011101
    134  f334		       83		      .BYTE.b	%10000011
    135  f335
    136  f335		       10		      .BYTE.b	%00010000
    137  f336		       00		      .BYTE.b	%00000000
    138  f337		       00		      .BYTE.b	%00000000
    139  f338		       00		      .BYTE.b	%00000000
    140  f339		       00		      .BYTE.b	%00000000
    141  f33a		       80		      .BYTE.b	%10000000
    142  f33b
    143  f33b		       10		      .BYTE.b	%00010000
    144  f33c		       00		      .BYTE.b	%00000000
    145  f33d		       00		      .BYTE.b	%00000000
    146  f33e		       00		      .BYTE.b	%00000000
    147  f33f		       00		      .BYTE.b	%00000000
    148  f340		       80		      .BYTE.b	%10000000
    149  f341
    150  f341		       10		      .BYTE.b	%00010000
    151  f342		       00		      .BYTE.b	%00000000
    152  f343		       00		      .BYTE.b	%00000000
    153  f344		       00		      .BYTE.b	%00000000
    154  f345		       00		      .BYTE.b	%00000000
    155  f346		       80		      .BYTE.b	%10000000
    156  f347
    157  f347		       10		      .BYTE.b	%00010000
    158  f348		       00		      .BYTE.b	%00000000
    159  f349		       00		      .BYTE.b	%00000000
    160  f34a		       00		      .BYTE.b	%00000000
    161  f34b		       00		      .BYTE.b	%00000000
    162  f34c		       80		      .BYTE.b	%10000000
    163  f34d
    164  f34d		       f0		      .BYTE.b	%11110000
    165  f34e		       ff		      .BYTE.b	%11111111
    166  f34f		       ff		      .BYTE.b	%11111111
    167  f350		       f0		      .BYTE.b	%11110000
    168  f351		       ff		      .BYTE.b	%11111111
    169  f352		       ff		      .BYTE.b	%11111111
------- FILE title.asm
    207  f353
    208  f353				   TitleAudio0
    209  f353
    210  f353		       0f		      .BYTE.b	#15	; B
    211  f354		       13		      .BYTE.b	#19	; G
    212  f355		       17		      .BYTE.b	#23	; E
    213  f356		       13		      .BYTE.b	#19	; G
    214  f357		       0e		      .BYTE.b	#14	; C
    215  f358		       13		      .BYTE.b	#19
    216  f359		       17		      .BYTE.b	#23
    217  f35a		       13		      .BYTE.b	#19
    218  f35b		       0c		      .BYTE.b	#12	; D
    219  f35c		       13		      .BYTE.b	#19
    220  f35d		       17		      .BYTE.b	#23
    221  f35e		       13		      .BYTE.b	#19
    222  f35f		       0e		      .BYTE.b	#14	; C
    223  f360		       13		      .BYTE.b	#19
    224  f361		       17		      .BYTE.b	#23
    225  f362		       13		      .BYTE.b	#19
    226  f363
    227  f363				   TitleTone1
    228  f363
    229  f363		       0f		      .BYTE.b	#15	; Electronic Rumble
    230  f364		       ff		      .BYTE.b	#$FF
    231  f365		       01		      .BYTE.b	#1	; Low Pure Tone
    232  f366		       01		      .BYTE.b	#1
    233  f367		       08		      .BYTE.b	#8	; White Noise
    234  f368		       01		      .BYTE.b	#1
    235  f369		       01		      .BYTE.b	#1
    236  f36a		       ff		      .BYTE.b	#$FF
    237  f36b		       ff		      .BYTE.b	#$FF
    238  f36c		       0f		      .BYTE.b	#15
    239  f36d		       ff		      .BYTE.b	#$FF
    240  f36e		       ff		      .BYTE.b	#$FF
    241  f36f		       08		      .BYTE.b	#8
    242  f370		       ff		      .BYTE.b	#$FF
    243  f371		       01		      .BYTE.b	#1
    244  f372		       01		      .BYTE.b	#1
    245  f373
    246  f373				   TitleAudio1
    247  f373
    248  f373		       1d		      .BYTE.b	#29	; Kick
    249  f374		       ff		      .BYTE.b	#$FF
    250  f375		       1f		      .BYTE.b	#31	; C
    251  f376		       1f		      .BYTE.b	#31
    252  f377		       07		      .BYTE.b	#7	; Snare
    253  f378		       1f		      .BYTE.b	#31
    254  f379		       1f		      .BYTE.b	#31
    255  f37a		       ff		      .BYTE.b	#$FF
    256  f37b		       ff		      .BYTE.b	#$FF
    257  f37c		       1d		      .BYTE.b	#29
    258  f37d		       ff		      .BYTE.b	#$FF
    259  f37e		       ff		      .BYTE.b	#$FF
    260  f37f		       07		      .BYTE.b	#7
    261  f380		       ff		      .BYTE.b	#$FF
    262  f381		       17		      .BYTE.b	#23	; F
    263  f382		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f383					      include	"game.asm"
      1  f383							;================
      2  f383							; Game
      3  f383							;================
      4  f383
      5  f383							; Constants
      6  f383
      7  f383		       00 04	   GAME_AUDIO_VOLUME =	4
      8  f383		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f383		       00 09	   GAME_AUDIO_STEP =	9
     10  f383		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f383		       00 06	   GAME_AUDIO_TONE =	6
     12  f383
     13  f383							; Object Code
     14  f383
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f383					      include	"objects/score.asm"
      1  f383							;======================
      2  f383							; Score (playfield)
      3  f383							;======================
      4  f383
      5  f383							; Constants
      6  f383
      7  f383		       00 00	   SCORE_BG_COLOR =	#$00
      8  f383		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f383		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f383
     11  f383		       00 05	   SCORE_CHAR_SIZE =	5
     12  f383		       00 02	   SCORE_LINE_SIZE =	2
     13  f383		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f383
     15  f383							; Initialization
     16  f383
     17  f383				   ScoreInit
     18  f383
     19  f383							; Health Score
     20  f383		       a9 ff		      lda	#$FF
     21  f385		       85 91		      sta	ScoreValue+0
     22  f387
     23  f387							; Game Score
     24  f387		       a9 00		      lda	#0
     25  f389		       85 92		      sta	ScoreValue+1
     26  f38b
     27  f38b		       60		      rts
     28  f38c
     29  f38c							; Frame Update
     30  f38c
     31  f38c				   ScoreUpdate
     32  f38c
     33  f38c		       a2 01		      ldx	#1
     34  f38e				   .score_update_loop
     35  f38e
     36  f38e							; Ones Digit
     37  f38e		       b5 91		      lda	ScoreValue,x
     38  f390		       29 0f		      and	#$0f
     39  f392		       85 83		      sta	Temp
     40  f394		       0a		      asl
     41  f395		       0a		      asl
     42  f396		       65 83		      adc	Temp
     43  f398		       95 93		      sta	ScoreDigitOnes,x
     44  f39a
     45  f39a							; Tens Digit
     46  f39a		       b5 91		      lda	ScoreValue,x
     47  f39c		       29 f0		      and	#$f0
     48  f39e		       4a		      lsr
     49  f39f		       4a		      lsr
     50  f3a0		       85 83		      sta	Temp
     51  f3a2		       4a		      lsr
     52  f3a3		       4a		      lsr
     53  f3a4		       65 83		      adc	Temp
     54  f3a6		       95 95		      sta	ScoreDigitTens,x
     55  f3a8
     56  f3a8		       ca		      dex
     57  f3a9		       10 e3		      bpl	.score_update_loop
     58  f3ab
     59  f3ab				   .score_update_end
     60  f3ab		       60		      rts
     61  f3ac
     62  f3ac							; Draw loop (uses SCORE_LINES scanlines)
     63  f3ac
     64  f3ac				   ScoreDraw
     65  f3ac
     66  f3ac							; Load Colors
     67  f3ac		       a9 00		      lda	#SCORE_BG_COLOR
     68  f3ae		       85 09		      sta	COLUBK
     69  f3b0		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f3b2		       85 08		      sta	COLUPF
     71  f3b4		       85 06		      sta	COLUP0
     72  f3b6		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f3b8		       85 07		      sta	COLUP1
     74  f3ba
     75  f3ba							; Set Non-Mirror and p0/p1 color
     76  f3ba		       a5 80		      lda	CtrlPf
     77  f3bc		       29 fc		      and	#%11111100
     78  f3be		       09 02		      ora	#%00000010
     79  f3c0		       85 80		      sta	CtrlPf
     80  f3c2		       85 0a		      sta	CTRLPF
     81  f3c4
     82  f3c4							;sta WSYNC
     83  f3c4
     84  f3c4		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f3c6
     86  f3c6				   .score_draw_line
     87  f3c6
     88  f3c6							; 1st Value
     89  f3c6		       a4 95		      ldy	ScoreDigitTens
     90  f3c8		       b9 1c f4 	      lda	ScoreDigits,y
     91  f3cb		       29 f0		      and	#$f0
     92  f3cd		       85 97		      sta	ScoreGfx
     93  f3cf		       a4 93		      ldy	ScoreDigitOnes
     94  f3d1		       b9 1c f4 	      lda	ScoreDigits,y
     95  f3d4		       29 0f		      and	#$0f
     96  f3d6		       05 97		      ora	ScoreGfx
     97  f3d8		       85 97		      sta	ScoreGfx
     98  f3da
     99  f3da		       85 02		      sta	WSYNC
    100  f3dc		       85 0e		      sta	PF1
    101  f3de
    102  f3de							; 2nd Value
    103  f3de		       a4 96		      ldy	ScoreDigitTens+1
    104  f3e0		       b9 1c f4 	      lda	ScoreDigits,y
    105  f3e3		       29 f0		      and	#$f0
    106  f3e5		       85 98		      sta	ScoreGfx+1
    107  f3e7		       a4 94		      ldy	ScoreDigitOnes+1
    108  f3e9		       b9 1c f4 	      lda	ScoreDigits,y
    109  f3ec		       29 0f		      and	#$0f
    110  f3ee		       05 98		      ora	ScoreGfx+1
    111  f3f0		       85 98		      sta	ScoreGfx+1
    112  f3f2
      0  f3f2					      sleep	12
      1  f3f2				   .CYCLES    SET	12
      2  f3f2
      3  f3f2				  -	      IF	.CYCLES < 2
      4  f3f2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3f2				  -	      ERR
      6  f3f2					      ENDIF
      7  f3f2
      8  f3f2				  -	      IF	.CYCLES & 1
      9  f3f2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3f2				  -	      nop	0
     11  f3f2				  -	      ELSE
     12  f3f2				  -	      bit	VSYNC
     13  f3f2				  -	      ENDIF
     14  f3f2				  -.CYCLES    SET	.CYCLES - 3
     15  f3f2					      ENDIF
     16  f3f2
     17  f3f2					      REPEAT	.CYCLES / 2
     18  f3f2		       ea		      nop
     17  f3f2					      REPEND
     18  f3f3		       ea		      nop
     17  f3f3					      REPEND
     18  f3f4		       ea		      nop
     17  f3f4					      REPEND
     18  f3f5		       ea		      nop
     17  f3f5					      REPEND
     18  f3f6		       ea		      nop
     17  f3f6					      REPEND
     18  f3f7		       ea		      nop
     19  f3f8					      REPEND
    114  f3f8		       85 0e		      sta	PF1
    115  f3fa
    116  f3fa		       a4 97		      ldy	ScoreGfx
    117  f3fc		       85 02		      sta	WSYNC
    118  f3fe
    119  f3fe		       84 0e		      sty	PF1
    120  f400
    121  f400		       e6 93		      inc	ScoreDigitOnes
    122  f402		       e6 94		      inc	ScoreDigitOnes+1
    123  f404		       e6 95		      inc	ScoreDigitTens
    124  f406		       e6 96		      inc	ScoreDigitTens+1
    125  f408
      0  f408					      sleep	12
      1  f408				   .CYCLES    SET	12
      2  f408
      3  f408				  -	      IF	.CYCLES < 2
      4  f408				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f408				  -	      ERR
      6  f408					      ENDIF
      7  f408
      8  f408				  -	      IF	.CYCLES & 1
      9  f408				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f408				  -	      nop	0
     11  f408				  -	      ELSE
     12  f408				  -	      bit	VSYNC
     13  f408				  -	      ENDIF
     14  f408				  -.CYCLES    SET	.CYCLES - 3
     15  f408					      ENDIF
     16  f408
     17  f408					      REPEAT	.CYCLES / 2
     18  f408		       ea		      nop
     17  f408					      REPEND
     18  f409		       ea		      nop
     17  f409					      REPEND
     18  f40a		       ea		      nop
     17  f40a					      REPEND
     18  f40b		       ea		      nop
     17  f40b					      REPEND
     18  f40c		       ea		      nop
     17  f40c					      REPEND
     18  f40d		       ea		      nop
     19  f40e					      REPEND
    127  f40e		       ca		      dex
    128  f40f		       85 0e		      sta	PF1
    129  f411
    130  f411		       d0 b3		      bne	.score_draw_line
    131  f413		       85 02		      sta	WSYNC
    132  f415
    133  f415							; Clear
    134  f415		       a9 00		      lda	#0
    135  f417		       85 0e		      sta	PF1
    136  f419
    137  f419		       85 02		      sta	WSYNC
    138  f41b
    139  f41b		       60		      rts
    140  f41c
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f41c					      include	"objects/score_digits.asm"
      1  f41c				   ScoreDigits
      2  f41c
      3  f41c		       77		      .BYTE.b	%01110111
      4  f41d		       55		      .BYTE.b	%01010101
      5  f41e		       55		      .BYTE.b	%01010101
      6  f41f		       55		      .BYTE.b	%01010101
      7  f420		       77		      .BYTE.b	%01110111
      8  f421
      9  f421		       11		      .BYTE.b	%00010001
     10  f422		       11		      .BYTE.b	%00010001
     11  f423		       11		      .BYTE.b	%00010001
     12  f424		       11		      .BYTE.b	%00010001
     13  f425		       11		      .BYTE.b	%00010001
     14  f426
     15  f426		       77		      .BYTE.b	%01110111
     16  f427		       11		      .BYTE.b	%00010001
     17  f428		       77		      .BYTE.b	%01110111
     18  f429		       44		      .BYTE.b	%01000100
     19  f42a		       77		      .BYTE.b	%01110111
     20  f42b
     21  f42b		       77		      .BYTE.b	%01110111
     22  f42c		       11		      .BYTE.b	%00010001
     23  f42d		       33		      .BYTE.b	%00110011
     24  f42e		       11		      .BYTE.b	%00010001
     25  f42f		       77		      .BYTE.b	%01110111
     26  f430
     27  f430		       55		      .BYTE.b	%01010101
     28  f431		       55		      .BYTE.b	%01010101
     29  f432		       77		      .BYTE.b	%01110111
     30  f433		       11		      .BYTE.b	%00010001
     31  f434		       11		      .BYTE.b	%00010001
     32  f435
     33  f435		       77		      .BYTE.b	%01110111
     34  f436		       44		      .BYTE.b	%01000100
     35  f437		       77		      .BYTE.b	%01110111
     36  f438		       11		      .BYTE.b	%00010001
     37  f439		       77		      .BYTE.b	%01110111
     38  f43a
     39  f43a		       77		      .BYTE.b	%01110111
     40  f43b		       44		      .BYTE.b	%01000100
     41  f43c		       77		      .BYTE.b	%01110111
     42  f43d		       55		      .BYTE.b	%01010101
     43  f43e		       77		      .BYTE.b	%01110111
     44  f43f
     45  f43f		       77		      .BYTE.b	%01110111
     46  f440		       11		      .BYTE.b	%00010001
     47  f441		       22		      .BYTE.b	%00100010
     48  f442		       22		      .BYTE.b	%00100010
     49  f443		       22		      .BYTE.b	%00100010
     50  f444
     51  f444		       77		      .BYTE.b	%01110111
     52  f445		       55		      .BYTE.b	%01010101
     53  f446		       77		      .BYTE.b	%01110111
     54  f447		       55		      .BYTE.b	%01010101
     55  f448		       77		      .BYTE.b	%01110111
     56  f449
     57  f449		       77		      .BYTE.b	%01110111
     58  f44a		       55		      .BYTE.b	%01010101
     59  f44b		       77		      .BYTE.b	%01110111
     60  f44c		       11		      .BYTE.b	%00010001
     61  f44d		       11		      .BYTE.b	%00010001
     62  f44e
     63  f44e		       77		      .BYTE.b	%01110111
     64  f44f		       55		      .BYTE.b	%01010101
     65  f450		       77		      .BYTE.b	%01110111
     66  f451		       55		      .BYTE.b	%01010101
     67  f452		       55		      .BYTE.b	%01010101
     68  f453
     69  f453		       66		      .BYTE.b	%01100110
     70  f454		       55		      .BYTE.b	%01010101
     71  f455		       66		      .BYTE.b	%01100110
     72  f456		       55		      .BYTE.b	%01010101
     73  f457		       66		      .BYTE.b	%01100110
     74  f458
     75  f458		       77		      .BYTE.b	%01110111
     76  f459		       44		      .BYTE.b	%01000100
     77  f45a		       44		      .BYTE.b	%01000100
     78  f45b		       44		      .BYTE.b	%01000100
     79  f45c		       77		      .BYTE.b	%01110111
     80  f45d
     81  f45d		       66		      .BYTE.b	%01100110
     82  f45e		       55		      .BYTE.b	%01010101
     83  f45f		       55		      .BYTE.b	%01010101
     84  f460		       55		      .BYTE.b	%01010101
     85  f461		       66		      .BYTE.b	%01100110
     86  f462
     87  f462		       77		      .BYTE.b	%01110111
     88  f463		       44		      .BYTE.b	%01000100
     89  f464		       66		      .BYTE.b	%01100110
     90  f465		       44		      .BYTE.b	%01000100
     91  f466		       77		      .BYTE.b	%01110111
     92  f467
     93  f467		       77		      .BYTE.b	%01110111
     94  f468		       44		      .BYTE.b	%01000100
     95  f469		       66		      .BYTE.b	%01100110
     96  f46a		       44		      .BYTE.b	%01000100
     97  f46b		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f46c					      include	"objects/web.asm"
      1  f46c							;================
      2  f46c							; Web (Playfield)
      3  f46c							;================
      4  f46c
      5  f46c							; Constants
      6  f46c
      7  f46c		       00 00	   WEB_BG_COLOR =	#$00
      8  f46c		       00 06	   WEB_FG_COLOR =	#$06
      9  f46c
     10  f46c		       00 1e	   WEB_SIZE   =	30
     11  f46c		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f46c		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f46c
     14  f46c							; Scanline Draw
     15  f46c
     16  f46c				   WebDrawStart
     17  f46c
     18  f46c							; Load Colors
     19  f46c		       a9 00		      lda	#WEB_BG_COLOR
     20  f46e		       85 09		      sta	COLUBK
     21  f470		       a9 06		      lda	#WEB_FG_COLOR
     22  f472		       85 08		      sta	COLUPF
     23  f474
     24  f474							; Mirror playfield and use standard playfield color
     25  f474		       a5 80		      lda	CtrlPf
     26  f476		       29 fc		      and	#%11111100
     27  f478		       09 01		      ora	#%00000001
     28  f47a		       85 80		      sta	CtrlPf
     29  f47c		       85 0a		      sta	CTRLPF
     30  f47e
     31  f47e							; Initialize image index
     32  f47e		       a9 00		      lda	#0
     33  f480		       85 99		      sta	WebIndex
     34  f482		       a9 01		      lda	#1
     35  f484		       85 9a		      sta	WebDir
     36  f486
     37  f486		       60		      rts
     38  f487
     39  f487				   WebDraw
     40  f487
     41  f487		       a4 99		      ldy	WebIndex
     42  f489
     43  f489							; Draw Image
     44  f489		       b9 b2 f4 	      lda	WebImagePF0,y
     45  f48c		       85 0d		      sta	PF0
     46  f48e		       b9 c1 f4 	      lda	WebImagePF1,y
     47  f491		       85 0e		      sta	PF1
     48  f493		       b9 d0 f4 	      lda	WebImagePF2,y
     49  f496		       85 0f		      sta	PF2
     50  f498
     51  f498							; Increment image index
     52  f498		       18		      clc
     53  f499		       98		      tya
     54  f49a		       65 9a		      adc	WebDir
     55  f49c		       85 99		      sta	WebIndex
     56  f49e
     57  f49e		       c9 0f		      cmp	#WEB_SIZE/2
     58  f4a0		       d0 06		      bne	.web_draw_return
     59  f4a2
     60  f4a2		       a9 ff		      lda	#-1
     61  f4a4		       85 9a		      sta	WebDir
     62  f4a6
     63  f4a6		       c6 99		      dec	WebIndex
     64  f4a8
     65  f4a8				   .web_draw_return
     66  f4a8		       60		      rts
     67  f4a9
     68  f4a9				   WebClean
     69  f4a9
     70  f4a9							; Clear out playfield
     71  f4a9		       a9 00		      lda	#0
     72  f4ab		       85 0d		      sta	PF0
     73  f4ad		       85 0e		      sta	PF1
     74  f4af		       85 0f		      sta	PF2
     75  f4b1
     76  f4b1		       60		      rts
     77  f4b2
     78  f4b2							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f4b2					      include	"objects/web_image.asm"
      1  f4b2				   WebImagePF0
      2  f4b2		       00		      .BYTE.b	%00000000
      3  f4b3		       00		      .BYTE.b	%00000000
      4  f4b4		       00		      .BYTE.b	%00000000
      5  f4b5		       00		      .BYTE.b	%00000000
      6  f4b6		       00		      .BYTE.b	%00000000
      7  f4b7		       00		      .BYTE.b	%00000000
      8  f4b8		       00		      .BYTE.b	%00000000
      9  f4b9		       00		      .BYTE.b	%00000000
     10  f4ba		       00		      .BYTE.b	%00000000
     11  f4bb		       30		      .BYTE.b	%00110000
     12  f4bc		       e0		      .BYTE.b	%11100000
     13  f4bd		       20		      .BYTE.b	%00100000
     14  f4be		       40		      .BYTE.b	%01000000
     15  f4bf		       40		      .BYTE.b	%01000000
     16  f4c0		       80		      .BYTE.b	%10000000
     17  f4c1
     18  f4c1				   WebImagePF1
     19  f4c1		       08		      .BYTE.b	%00001000
     20  f4c2		       06		      .BYTE.b	%00000110
     21  f4c3		       01		      .BYTE.b	%00000001
     22  f4c4		       00		      .BYTE.b	%00000000
     23  f4c5		       00		      .BYTE.b	%00000000
     24  f4c6		       01		      .BYTE.b	%00000001
     25  f4c7		       01		      .BYTE.b	%00000001
     26  f4c8		       02		      .BYTE.b	%00000010
     27  f4c9		       0c		      .BYTE.b	%00001100
     28  f4ca		       30		      .BYTE.b	%00110000
     29  f4cb		       c0		      .BYTE.b	%11000000
     30  f4cc		       38		      .BYTE.b	%00111000
     31  f4cd		       07		      .BYTE.b	%00000111
     32  f4ce		       00		      .BYTE.b	%00000000
     33  f4cf		       00		      .BYTE.b	%00000000
     34  f4d0
     35  f4d0				   WebImagePF2
     36  f4d0		       20		      .BYTE.b	%00100000
     37  f4d1		       18		      .BYTE.b	%00011000
     38  f4d2		       04		      .BYTE.b	%00000100
     39  f4d3		       03		      .BYTE.b	%00000011
     40  f4d4		       3f		      .BYTE.b	%00111111
     41  f4d5		       c2		      .BYTE.b	%11000010
     42  f4d6		       04		      .BYTE.b	%00000100
     43  f4d7		       08		      .BYTE.b	%00001000
     44  f4d8		       08		      .BYTE.b	%00001000
     45  f4d9		       10		      .BYTE.b	%00010000
     46  f4da		       20		      .BYTE.b	%00100000
     47  f4db		       20		      .BYTE.b	%00100000
     48  f4dc		       41		      .BYTE.b	%01000001
     49  f4dd		       8e		      .BYTE.b	%10001110
     50  f4de		       f0		      .BYTE.b	%11110000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f4df					      include	"objects/spider.asm"
      1  f4df							;=================
      2  f4df							; Spider (player0)
      3  f4df							;=================
      4  f4df
      5  f4df							; Constants
      6  f4df
      7  f4df		       00 56	   SPIDER_COLOR =	#$56
      8  f4df		       00 10	   SPIDER_SIZE =	16
      9  f4df		       00 08	   SPIDER_SPRITE_SIZE =	8
     10  f4df		       00 02	   SPIDER_VEL_X =	2
     11  f4df		       00 02	   SPIDER_VEL_Y =	2
     12  f4df
     13  f4df		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f4df
     15  f4df							; Initialization
     16  f4df
     17  f4df				   SpiderInit
     18  f4df
     19  f4df							; Initialize Position in center of screen
     20  f4df		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f4e1		       85 9d		      sta	SpiderPos
     22  f4e3		       a9 48		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f4e5		       85 9e		      sta	SpiderPos+1
     24  f4e7
     25  f4e7							; Setup Sprite
      0  f4e7					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f4e7				   .POINTER   SET	SpiderPtr
      2  f4e7				   .ADDRESS   SET	SpiderSprite
      3  f4e7
      4  f4e7		       a9 5d		      LDA	#<.ADDRESS
      5  f4e9		       85 9b		      STA	.POINTER
      6  f4eb		       a9 f6		      LDA	#>.ADDRESS
      7  f4ed		       85 9c		      STA	.POINTER+1
      8  f4ef
     27  f4ef
     28  f4ef							;    lda #SPIDER_COLOR
     29  f4ef							;    sta SpiderColor
     30  f4ef
     31  f4ef		       60		      rts
     32  f4f0
     33  f4f0							; Frame Update
     34  f4f0
     35  f4f0				   SpiderUpdate
     36  f4f0		       20 f7 f4 	      jsr	SpiderControl
     37  f4f3		       20 dd f5 	      jsr	SpiderCollision
     38  f4f6		       60		      rts
     39  f4f7
     40  f4f7				   SpiderControl
     41  f4f7
     42  f4f7							; Control Position
     43  f4f7		       a6 9d		      ldx	SpiderPos
     44  f4f9		       a4 9e		      ldy	SpiderPos+1
     45  f4fb		       ad 80 02 	      lda	SWCHA
     46  f4fe
     47  f4fe				   .spider_control_check_right
     48  f4fe		       30 02		      bmi	.spider_control_check_left
     49  f500
     50  f500					      REPEAT	#SPIDER_VEL_X
     51  f500		       e8		      inx
     50  f500					      REPEND
     51  f501		       e8		      inx
     52  f502					      REPEND
     53  f502
     54  f502				   .spider_control_check_left
     55  f502		       2a		      rol
     56  f503		       30 02		      bmi	.spider_control_check_down
     57  f505
     58  f505					      REPEAT	#SPIDER_VEL_X
     59  f505		       ca		      dex
     58  f505					      REPEND
     59  f506		       ca		      dex
     60  f507					      REPEND
     61  f507
     62  f507				   .spider_control_check_down
     63  f507		       2a		      rol
     64  f508		       30 02		      bmi	.spider_control_check_up
     65  f50a
     66  f50a					      REPEAT	#SPIDER_VEL_Y
     67  f50a		       88		      dey
     66  f50a					      REPEND
     67  f50b		       88		      dey
     68  f50c					      REPEND
     69  f50c
     70  f50c				   .spider_control_check_up
     71  f50c		       2a		      rol
     72  f50d		       30 02		      bmi	.spider_control_sprite
     73  f50f
     74  f50f					      REPEAT	#SPIDER_VEL_Y
     75  f50f		       c8		      iny
     74  f50f					      REPEND
     75  f510		       c8		      iny
     76  f511					      REPEND
     77  f511
     78  f511				   .spider_control_sprite
     79  f511							; Control Sprite
     80  f511		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f513
     82  f513				   .spider_control_sprite_x
     83  f513		       e4 9d		      cpx	SpiderPos
     84  f515		       90 04		      bcc	.spider_control_sprite_left
     85  f517		       f0 09		      beq	.spider_control_sprite_y
     86  f519		       b0 05		      bcs	.spider_control_sprite_right
     87  f51b
     88  f51b				   .spider_control_sprite_left
     89  f51b		       09 80		      ora	#%10000000
     90  f51d		       4c 22 f5 	      jmp	.spider_control_sprite_y
     91  f520
     92  f520				   .spider_control_sprite_right
     93  f520		       09 40		      ora	#%01000000
     94  f522
     95  f522				   .spider_control_sprite_y
     96  f522		       c4 9e		      cpy	SpiderPos+1
     97  f524		       90 04		      bcc	.spider_control_sprite_down
     98  f526		       f0 09		      beq	.spider_control_sprite_store
     99  f528		       b0 05		      bcs	.spider_control_sprite_up
    100  f52a
    101  f52a				   .spider_control_sprite_down
    102  f52a		       09 10		      ora	#%00010000
    103  f52c		       4c 31 f5 	      jmp	.spider_control_sprite_store
    104  f52f
    105  f52f				   .spider_control_sprite_up
    106  f52f		       09 20		      ora	#%00100000
    107  f531
    108  f531				   .spider_control_sprite_store
    109  f531		       c9 00		      cmp	#%00000000
    110  f533		       f0 02		      beq	.spider_control_boundary
    111  f535		       85 9f		      sta	SpiderCtrl
    112  f537
    113  f537				   .spider_control_boundary
    114  f537							; Check Playfield Boundaries
    115  f537
    116  f537				   .spider_control_boundary_left
    117  f537		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f539		       b0 05		      bcs	.spider_control_boundary_right
    119  f53b		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f53d		       4c 46 f5 	      jmp	.spider_control_boundary_top
    121  f540
    122  f540				   .spider_control_boundary_right
    123  f540		       e0 7e		      cpx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    124  f542		       90 02		      bcc	.spider_control_boundary_top
    125  f544		       a2 7e		      ldx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    126  f546
    127  f546				   .spider_control_boundary_top
    128  f546		       c0 03		      cpy	#SPIDER_VEL_X+1
    129  f548		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f54a		       a0 03		      ldy	#SPIDER_VEL_X+1
    131  f54c		       4c 55 f5 	      jmp	.spider_control_store
    132  f54f
    133  f54f				   .spider_control_boundary_bottom
    134  f54f		       c0 b1		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    135  f551		       90 02		      bcc	.spider_control_store
    136  f553		       a0 b1		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    137  f555
    138  f555				   .spider_control_store
    139  f555							; Store new position
    140  f555		       86 9d		      stx	SpiderPos
    141  f557		       84 9e		      sty	SpiderPos+1
    142  f559
    143  f559							; TODO: Optimize this somehow?
    144  f559				   .spider_control_sprite_assign
    145  f559							; Skip if no change
    146  f559		       c9 00		      cmp	#%00000000
    147  f55b		       f0 7f		      beq	.spider_control_return
    148  f55d
    149  f55d		       a2 00		      ldx	#%00000000	; For reflection
    150  f55f
    151  f55f				   .spider_control_sprite_assign_left
    152  f55f		       c9 80		      cmp	#%10000000
    153  f561		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f563					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f563				   .POINTER   SET	SpiderPtr
      2  f563				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f563
      4  f563		       a9 6d		      LDA	#<.ADDRESS
      5  f565		       85 9b		      STA	.POINTER
      6  f567		       a9 f6		      LDA	#>.ADDRESS
      7  f569		       85 9c		      STA	.POINTER+1
      8  f56b
    155  f56b		       a2 08		      ldx	#%00001000
    156  f56d		       4c da f5 	      jmp	.spider_control_reflect
    157  f570
    158  f570				   .spider_control_sprite_assign_right
    159  f570		       c9 40		      cmp	#%01000000
    160  f572		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f574					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f574				   .POINTER   SET	SpiderPtr
      2  f574				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f574
      4  f574		       a9 6d		      LDA	#<.ADDRESS
      5  f576		       85 9b		      STA	.POINTER
      6  f578		       a9 f6		      LDA	#>.ADDRESS
      7  f57a		       85 9c		      STA	.POINTER+1
      8  f57c
    162  f57c		       4c da f5 	      jmp	.spider_control_reflect
    163  f57f
    164  f57f				   .spider_control_sprite_assign_top
    165  f57f		       c9 20		      cmp	#%00100000
    166  f581		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f583					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f583				   .POINTER   SET	SpiderPtr
      2  f583				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f583
      4  f583		       a9 5d		      LDA	#<.ADDRESS
      5  f585		       85 9b		      STA	.POINTER
      6  f587		       a9 f6		      LDA	#>.ADDRESS
      7  f589		       85 9c		      STA	.POINTER+1
      8  f58b
    168  f58b		       4c da f5 	      jmp	.spider_control_reflect
    169  f58e
    170  f58e				   .spider_control_sprite_assign_bottom
    171  f58e		       c9 10		      cmp	#%00010000
    172  f590		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f592					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f592				   .POINTER   SET	SpiderPtr
      2  f592				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f592
      4  f592		       a9 7d		      LDA	#<.ADDRESS
      5  f594		       85 9b		      STA	.POINTER
      6  f596		       a9 f6		      LDA	#>.ADDRESS
      7  f598		       85 9c		      STA	.POINTER+1
      8  f59a
    174  f59a		       4c da f5 	      jmp	.spider_control_reflect
    175  f59d
    176  f59d				   .spider_control_sprite_assign_top_right
    177  f59d		       c9 60		      cmp	#%01100000
    178  f59f		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f5a1					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f5a1				   .POINTER   SET	SpiderPtr
      2  f5a1				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f5a1
      4  f5a1		       a9 65		      LDA	#<.ADDRESS
      5  f5a3		       85 9b		      STA	.POINTER
      6  f5a5		       a9 f6		      LDA	#>.ADDRESS
      7  f5a7		       85 9c		      STA	.POINTER+1
      8  f5a9
    180  f5a9		       4c da f5 	      jmp	.spider_control_reflect
    181  f5ac
    182  f5ac				   .spider_control_sprite_assign_bottom_right
    183  f5ac		       c9 50		      cmp	#%01010000
    184  f5ae		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f5b0					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f5b0				   .POINTER   SET	SpiderPtr
      2  f5b0				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f5b0
      4  f5b0		       a9 75		      LDA	#<.ADDRESS
      5  f5b2		       85 9b		      STA	.POINTER
      6  f5b4		       a9 f6		      LDA	#>.ADDRESS
      7  f5b6		       85 9c		      STA	.POINTER+1
      8  f5b8
    186  f5b8		       4c da f5 	      jmp	.spider_control_reflect
    187  f5bb
    188  f5bb				   .spider_control_sprite_assign_bottom_left
    189  f5bb		       c9 90		      cmp	#%10010000
    190  f5bd		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f5bf					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f5bf				   .POINTER   SET	SpiderPtr
      2  f5bf				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f5bf
      4  f5bf		       a9 75		      LDA	#<.ADDRESS
      5  f5c1		       85 9b		      STA	.POINTER
      6  f5c3		       a9 f6		      LDA	#>.ADDRESS
      7  f5c5		       85 9c		      STA	.POINTER+1
      8  f5c7
    192  f5c7		       a2 08		      ldx	#%00001000
    193  f5c9		       4c da f5 	      jmp	.spider_control_reflect
    194  f5cc
    195  f5cc				   .spider_control_sprite_assign_top_left
    196  f5cc		       c9 a0		      cmp	#%10100000
    197  f5ce		       d0 0a		      bne	.spider_control_reflect
      0  f5d0					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f5d0				   .POINTER   SET	SpiderPtr
      2  f5d0				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f5d0
      4  f5d0		       a9 65		      LDA	#<.ADDRESS
      5  f5d2		       85 9b		      STA	.POINTER
      6  f5d4		       a9 f6		      LDA	#>.ADDRESS
      7  f5d6		       85 9c		      STA	.POINTER+1
      8  f5d8
    199  f5d8		       a2 08		      ldx	#%00001000
    200  f5da
    201  f5da				   .spider_control_reflect
    202  f5da		       86 0b		      stx	REFP0
    203  f5dc
    204  f5dc				   .spider_control_return
    205  f5dc		       60		      rts
    206  f5dd
    207  f5dd				   SpiderCollision
    208  f5dd		       a9 56		      lda	#SPIDER_COLOR
    209  f5df
    210  f5df				   .spider_collision_m0
    211  f5df							; Check stun status
    212  f5df		       a6 ac		      ldx	BugStunned
    213  f5e1		       e0 00		      cpx	#0
    214  f5e3		       d0 04		      bne	.spider_collision_m1
    215  f5e5
    216  f5e5							; Collision for M0 (V set)
    217  f5e5		       24 00		      bit	CXM0P
    218  f5e7		       70 0d		      bvs	.spider_collision_active
    219  f5e9
    220  f5e9				   .spider_collision_m1
    221  f5e9							; Check stun status
    222  f5e9		       a6 ad		      ldx	BugStunned+1
    223  f5eb		       e0 00		      cpx	#0
    224  f5ed		       d0 09		      bne	.spider_collision_return
    225  f5ef
    226  f5ef							; Collision for M1 (N set)
    227  f5ef		       24 01		      bit	CXM1P
    228  f5f1		       30 03		      bmi	.spider_collision_active
    229  f5f3
    230  f5f3		       4c f8 f5 	      jmp	.spider_collision_return
    231  f5f6
    232  f5f6				   .spider_collision_active
    233  f5f6		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f5f8
    235  f5f8				   .spider_collision_return
    236  f5f8		       85 a0		      sta	SpiderColor
    237  f5fa		       60		      rts
    238  f5fb
    239  f5fb				   SpiderPosition
    240  f5fb
    241  f5fb							; Set Position
    242  f5fb		       a2 00		      ldx	#0	; Object (player0)
    243  f5fd		       a5 9d		      lda	SpiderPos	; X Position
    244  f5ff		       20 00 f0 	      jsr	PosObject
    245  f602
    246  f602		       60		      rts
    247  f603
    248  f603							; Scanline Draw
    249  f603
    250  f603				   SpiderDrawStart
    251  f603
    252  f603							; Set player 0 to be double size
    253  f603							; and missile 0 to be 4 clock size
    254  f603		       a5 81		      lda	NuSiz0
    255  f605		       09 07		      ora	#%00000111
    256  f607		       85 81		      sta	NuSiz0
    257  f609		       85 04		      sta	NUSIZ0
    258  f60b
    259  f60b							; Set sprite color
    260  f60b		       a5 a0		      lda	SpiderColor
    261  f60d		       85 06		      sta	COLUP0
    262  f60f
    263  f60f							; Determine if we need to use vertical delay (odd line)
    264  f60f		       a5 9e		      lda	SpiderPos+1	; Y Position
    265  f611		       4a		      lsr
    266  f612		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f614
    268  f614		       a0 01		      ldy	#1
    269  f616		       4c 1b f6 	      jmp	.spider_draw_start_set_delay
    270  f619
    271  f619				   .spider_draw_start_nodelay
    272  f619		       a0 00		      ldy	#0
    273  f61b
    274  f61b				   .spider_draw_start_set_delay
    275  f61b		       84 25		      sty	VDELP0
    276  f61d
    277  f61d				   .spider_draw_start_pos
    278  f61d							; Calculate starting position
    279  f61d		       18		      clc
    280  f61e		       69 10		      adc	#SPIDER_SIZE
    281  f620		       85 a2		      sta	SpiderDrawPos
    282  f622
    283  f622							; Initialize sprite index
    284  f622		       a9 00		      lda	#0
    285  f624		       85 a1		      sta	SpiderIndex
    286  f626
    287  f626		       60		      rts
    288  f627
    289  f627				   SpiderDraw
    290  f627
    291  f627		       a4 a1		      ldy	SpiderIndex
    292  f629		       c0 10		      cpy	#(SPIDER_SPRITE_SIZE*2)
    293  f62b		       f0 1f		      beq	.spider_draw_blank	; At end of sprite
    294  f62d		       b0 28		      bcs	.spider_draw_return	; Completed drawing sprite
    295  f62f		       c0 00		      cpy	#0
    296  f631		       d0 06		      bne	.spider_draw_line
    297  f633
    298  f633							; Use half scanline
    299  f633		       a5 84		      lda	Temp+1
    300  f635
    301  f635		       e5 a2		      sbc	SpiderDrawPos
    302  f637		       10 1e		      bpl	.spider_draw_return	; Not yet to draw sprite
    303  f639
    304  f639				   .spider_draw_line
    305  f639		       98		      tya
    306  f63a		       4a		      lsr
    307  f63b		       b0 09		      bcs	.spider_draw_skip
    308  f63d		       a8		      tay
    309  f63e
    310  f63e		       b1 9b		      lda	(SpiderPtr),y
    311  f640		       85 1b		      sta	GRP0
    312  f642
    313  f642							; Using this for now until we have another sprite
    314  f642		       a9 00		      lda	#0
    315  f644		       85 1c		      sta	GRP1
    316  f646
    317  f646				   .spider_draw_skip
    318  f646		       a4 a1		      ldy	SpiderIndex
    319  f648		       c8		      iny
    320  f649		       84 a1		      sty	SpiderIndex
    321  f64b		       60		      rts		; Early return
    322  f64c
    323  f64c				   .spider_draw_blank
    324  f64c		       a9 00		      lda	#0
    325  f64e		       85 1b		      sta	GRP0
    326  f650
    327  f650							; Using this for now until we have another sprite
    328  f650		       a9 00		      lda	#0
    329  f652		       85 1c		      sta	GRP1
    330  f654
    331  f654							; Push index to be one above
    332  f654		       c8		      iny
    333  f655		       84 a1		      sty	SpiderIndex
    334  f657
    335  f657				   .spider_draw_return
    336  f657		       60		      rts
    337  f658
    338  f658				   SpiderClean
    339  f658
    340  f658							; Clear out Player0 sprite
    341  f658		       a9 00		      lda	#0
    342  f65a		       85 1b		      sta	GRP0
    343  f65c
    344  f65c		       60		      rts
    345  f65d
    346  f65d							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f65d					      include	"objects/spider_sprite.asm"
      1  f65d				   SpiderSprite
      2  f65d
      3  f65d		       99		      .BYTE.b	%10011001
      4  f65e		       bd		      .BYTE.b	%10111101
      5  f65f		       99		      .BYTE.b	%10011001
      6  f660		       7e		      .BYTE.b	%01111110
      7  f661		       3c		      .BYTE.b	%00111100
      8  f662		       7e		      .BYTE.b	%01111110
      9  f663		       bd		      .BYTE.b	%10111101
     10  f664		       99		      .BYTE.b	%10011001
     11  f665
     12  f665		       0b		      .BYTE.b	%00001011
     13  f666		       13		      .BYTE.b	%00010011
     14  f667		       1c		      .BYTE.b	%00011100
     15  f668		       2d		      .BYTE.b	%00101101
     16  f669		       f6		      .BYTE.b	%11110110
     17  f66a		       b8		      .BYTE.b	%10111000
     18  f66b		       10		      .BYTE.b	%00010000
     19  f66c		       30		      .BYTE.b	%00110000
     20  f66d
     21  f66d		       c7		      .BYTE.b	%11000111
     22  f66e		       28		      .BYTE.b	%00101000
     23  f66f		       7a		      .BYTE.b	%01111010
     24  f670		       ff		      .BYTE.b	%11111111
     25  f671		       ff		      .BYTE.b	%11111111
     26  f672		       7a		      .BYTE.b	%01111010
     27  f673		       28		      .BYTE.b	%00101000
     28  f674		       c7		      .BYTE.b	%11000111
     29  f675
     30  f675		       30		      .BYTE.b	%00110000
     31  f676		       10		      .BYTE.b	%00010000
     32  f677		       b8		      .BYTE.b	%10111000
     33  f678		       f6		      .BYTE.b	%11110110
     34  f679		       2d		      .BYTE.b	%00101101
     35  f67a		       1c		      .BYTE.b	%00011100
     36  f67b		       13		      .BYTE.b	%00010011
     37  f67c		       0b		      .BYTE.b	%00001011
     38  f67d
     39  f67d		       99		      .BYTE.b	%10011001
     40  f67e		       bd		      .BYTE.b	%10111101
     41  f67f		       7e		      .BYTE.b	%01111110
     42  f680		       3c		      .BYTE.b	%00111100
     43  f681		       7e		      .BYTE.b	%01111110
     44  f682		       99		      .BYTE.b	%10011001
     45  f683		       bd		      .BYTE.b	%10111101
     46  f684		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f685					      include	"objects/line.asm"
      1  f685							;================
      2  f685							; Line (ball)
      3  f685							;================
      4  f685
      5  f685							; Constants
      6  f685
      7  f685		       00 04	   LINE_SIZE  =	4
      8  f685		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f685		       00 04	   LINE_VEL_X =	4
     10  f685		       00 04	   LINE_VEL_Y =	4
     11  f685
     12  f685		       00 08	   LINE_AUDIO_C =	8
     13  f685		       00 01	   LINE_AUDIO_F =	1
     14  f685		       00 04	   LINE_AUDIO_V =	4
     15  f685
     16  f685		       00 08	   LINE_SAMPLE_LEN =	8
     17  f685		       00 03	   LINE_SAMPLE_C =	3
     18  f685		       00 01	   LINE_SAMPLE_F =	1
     19  f685		       00 04	   LINE_SAMPLE_V =	4
     20  f685
     21  f685							; Initialization
     22  f685
     23  f685				   LineInit
     24  f685
     25  f685							; Initial Line Control
     26  f685		       a9 00		      lda	#0
     27  f687		       85 a3		      sta	LineEnabled
     28  f689		       85 a4		      sta	LinePos+0
     29  f68b		       85 a5		      sta	LinePos+1
     30  f68d		       85 a6		      sta	LineVelocity+0
     31  f68f		       85 a7		      sta	LineVelocity+1
     32  f691		       85 a8		      sta	LineStartPos+0
     33  f693		       85 a9		      sta	LineStartPos+1
     34  f695		       85 aa		      sta	LineDrawPos+0
     35  f697		       85 ab		      sta	LineDrawPos+1
     36  f699
     37  f699		       60		      rts
     38  f69a
     39  f69a							; Frame Update
     40  f69a
     41  f69a				   LineUpdate
     42  f69a		       20 a4 f6 	      jsr	LineControl
     43  f69d		       20 56 f7 	      jsr	LineObject
     44  f6a0		       20 9d f7 	      jsr	LineCollision
     45  f6a3		       60		      rts
     46  f6a4
     47  f6a4				   LineControl
     48  f6a4
     49  f6a4							; Check if Fire Button on controller 1 is pressed
     50  f6a4		       a5 0c		      lda	INPT4
     51  f6a6		       30 0a		      bmi	.line_control_skip
     52  f6a8
     53  f6a8		       24 a3		      bit	LineEnabled
     54  f6aa		       30 06		      bmi	.line_control_skip
     55  f6ac
     56  f6ac		       a5 9f		      lda	SpiderCtrl
     57  f6ae		       c9 00		      cmp	#0
     58  f6b0		       d0 03		      bne	.line_control_fire
     59  f6b2
     60  f6b2				   .line_control_skip
     61  f6b2		       4c 55 f7 	      jmp	.line_control_return
     62  f6b5
     63  f6b5				   .line_control_fire
     64  f6b5		       20 f8 f7 	      jsr	LineEnable
     65  f6b8
     66  f6b8				   .line_control_x
     67  f6b8		       a5 9f		      lda	SpiderCtrl
     68  f6ba		       29 c0		      and	#%11000000
     69  f6bc		       f0 0e		      beq	.line_control_x_none
     70  f6be				   .line_control_x_left
     71  f6be		       c9 80		      cmp	#%10000000
     72  f6c0		       d0 05		      bne	.line_control_x_right
     73  f6c2
     74  f6c2		       a9 fc		      lda	#-LINE_VEL_X
     75  f6c4		       4c ce f6 	      jmp	.line_control_x_store
     76  f6c7				   .line_control_x_right
     77  f6c7		       a9 04		      lda	#LINE_VEL_X
     78  f6c9		       4c ce f6 	      jmp	.line_control_x_store
     79  f6cc				   .line_control_x_none
     80  f6cc		       a9 00		      lda	#0
     81  f6ce				   .line_control_x_store
     82  f6ce		       85 a6		      sta	LineVelocity
     83  f6d0
     84  f6d0				   .line_control_y
     85  f6d0		       a5 9f		      lda	SpiderCtrl
     86  f6d2		       29 30		      and	#%00110000
     87  f6d4		       f0 0e		      beq	.line_control_y_none
     88  f6d6				   .line_control_y_up
     89  f6d6		       c9 20		      cmp	#%00100000
     90  f6d8		       d0 05		      bne	.line_control_y_down
     91  f6da
     92  f6da		       a9 04		      lda	#LINE_VEL_Y
     93  f6dc		       4c e6 f6 	      jmp	.line_control_y_store
     94  f6df				   .line_control_y_down
     95  f6df		       a9 fc		      lda	#-LINE_VEL_Y
     96  f6e1		       4c e6 f6 	      jmp	.line_control_y_store
     97  f6e4				   .line_control_y_none
     98  f6e4		       a9 00		      lda	#0
     99  f6e6				   .line_control_y_store
    100  f6e6		       85 a7		      sta	LineVelocity+1
    101  f6e8
    102  f6e8				   .line_control_position
    103  f6e8
    104  f6e8		       a2 00		      ldx	#0	; offsetX
    105  f6ea		       a0 00		      ldy	#0	; offsetY
    106  f6ec
    107  f6ec		       a5 9f		      lda	SpiderCtrl
    108  f6ee		       29 f0		      and	#%11110000
    109  f6f0
    110  f6f0				   .line_control_position_left
    111  f6f0		       c9 80		      cmp	#%10000000
    112  f6f2		       d0 07		      bne	.line_control_position_right
    113  f6f4
    114  f6f4		       a2 04		      ldx	#LINE_SIZE
    115  f6f6		       a0 10		      ldy	#SPIDER_SIZE
    116  f6f8		       4c 3d f7 	      jmp	.line_control_position_store
    117  f6fb
    118  f6fb				   .line_control_position_right
    119  f6fb		       c9 40		      cmp	#%01000000
    120  f6fd		       d0 07		      bne	.line_control_position_top
    121  f6ff
    122  f6ff		       a2 20		      ldx	#SPIDER_SIZE*2
    123  f701		       a0 10		      ldy	#SPIDER_SIZE
    124  f703		       4c 3d f7 	      jmp	.line_control_position_store
    125  f706
    126  f706				   .line_control_position_top
    127  f706		       c9 20		      cmp	#%00100000
    128  f708		       d0 07		      bne	.line_control_position_bottom
    129  f70a
    130  f70a		       a2 10		      ldx	#SPIDER_SIZE
    131  f70c		       a0 20		      ldy	#SPIDER_SIZE*2
    132  f70e		       4c 3d f7 	      jmp	.line_control_position_store
    133  f711
    134  f711				   .line_control_position_bottom
    135  f711		       c9 10		      cmp	#%00010000
    136  f713		       d0 05		      bne	.line_control_position_top_right
    137  f715
    138  f715		       a2 10		      ldx	#SPIDER_SIZE
    139  f717		       4c 3d f7 	      jmp	.line_control_position_store
    140  f71a
    141  f71a				   .line_control_position_top_right
    142  f71a		       c9 60		      cmp	#%01100000
    143  f71c		       d0 07		      bne	.line_control_position_bottom_right
    144  f71e
    145  f71e		       a2 20		      ldx	#SPIDER_SIZE*2
    146  f720		       a0 20		      ldy	#SPIDER_SIZE*2
    147  f722		       4c 3d f7 	      jmp	.line_control_position_store
    148  f725
    149  f725				   .line_control_position_bottom_right
    150  f725		       c9 50		      cmp	#%01010000
    151  f727		       d0 05		      bne	.line_control_position_bottom_left
    152  f729
    153  f729		       a2 20		      ldx	#SPIDER_SIZE*2
    154  f72b		       4c 3d f7 	      jmp	.line_control_position_store
    155  f72e
    156  f72e				   .line_control_position_bottom_left
    157  f72e		       c9 90		      cmp	#%10010000
    158  f730		       d0 03		      bne	.line_control_position_top_left
    159  f732
    160  f732							; No Offset
    161  f732		       4c 3d f7 	      jmp	.line_control_position_store
    162  f735
    163  f735				   .line_control_position_top_left
    164  f735		       c9 a0		      cmp	#%10100000
    165  f737		       d0 04		      bne	.line_control_position_store
    166  f739
    167  f739		       a2 04		      ldx	#LINE_SIZE
    168  f73b		       a0 20		      ldy	#SPIDER_SIZE*2
    169  f73d
    170  f73d				   .line_control_position_store
    171  f73d
    172  f73d							; Apply offsetX to playerX
    173  f73d		       a5 9d		      lda	SpiderPos
    174  f73f		       86 83		      stx	Temp
    175  f741		       18		      clc
    176  f742		       65 83		      adc	Temp
    177  f744		       aa		      tax
    178  f745
    179  f745							; Apply offsetY to playerY
    180  f745		       a5 9e		      lda	SpiderPos+1
    181  f747		       84 83		      sty	Temp
    182  f749		       18		      clc
    183  f74a		       65 83		      adc	Temp
    184  f74c		       a8		      tay
    185  f74d
    186  f74d		       86 a4		      stx	LinePos
    187  f74f		       84 a5		      sty	LinePos+1
    188  f751		       86 a8		      stx	LineStartPos
    189  f753		       84 a9		      sty	LineStartPos+1
    190  f755
    191  f755				   .line_control_return
    192  f755		       60		      rts
    193  f756
    194  f756				   LineObject
    195  f756
    196  f756							; Check if line is enabled
    197  f756		       24 a3		      bit	LineEnabled
    198  f758		       10 42		      bpl	.line_object_return
    199  f75a
    200  f75a							; Load position
    201  f75a		       a6 a4		      ldx	LinePos
    202  f75c		       a4 a5		      ldy	LinePos+1
    203  f75e
    204  f75e				   .line_object_distance
    205  f75e
    206  f75e							; Check distance from player with absolute value differences
    207  f75e
    208  f75e				   .line_object_distance_x
    209  f75e		       8a		      txa
    210  f75f		       18		      clc
    211  f760		       e5 a8		      sbc	LineStartPos
    212  f762		       b0 04		      bcs	.line_object_distance_x_check
    213  f764		       49 ff		      eor	#$FF	; C flag is clear here
    214  f766		       69 01		      adc	#$01	; form two's complement
    215  f768				   .line_object_distance_x_check		; Jumps to if positive
    216  f768		       c9 40		      cmp	#LINE_DISTANCE
    217  f76a		       b0 2d		      bcs	.line_object_disable
    218  f76c
    219  f76c				   .line_object_distance_y
    220  f76c		       98		      tya
    221  f76d		       18		      clc
    222  f76e		       e5 a9		      sbc	LineStartPos+1
    223  f770		       b0 04		      bcs	.line_object_distance_y_check
    224  f772		       49 ff		      eor	#$FF	; C flag is clear here
    225  f774		       69 01		      adc	#$01	; form two's complement
    226  f776				   .line_object_distance_y_check		; Jumps to if positive
    227  f776		       c9 40		      cmp	#LINE_DISTANCE
    228  f778		       b0 1f		      bcs	.line_object_disable
    229  f77a
    230  f77a				   .line_object_boundary
    231  f77a				   .line_object_boundary_left
    232  f77a		       e0 04		      cpx	#LINE_VEL_X
    233  f77c		       90 1b		      bcc	.line_object_disable
    234  f77e				   .line_object_boundary_right
    235  f77e		       e0 9c		      cpx	#160-LINE_VEL_X
    236  f780		       b0 17		      bcs	.line_object_disable
    237  f782				   .line_object_boundary_bottom
    238  f782		       c0 04		      cpy	#LINE_VEL_Y
    239  f784		       90 13		      bcc	.line_object_disable
    240  f786				   .line_object_boundary_top
    241  f786		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    242  f788		       b0 0f		      bcs	.line_object_disable
    243  f78a
    244  f78a				   .line_object_velocity
    245  f78a
    246  f78a							; Apply Velocity
    247  f78a		       8a		      txa
    248  f78b		       18		      clc
    249  f78c		       65 a6		      adc	LineVelocity
    250  f78e		       85 a4		      sta	LinePos
    251  f790
    252  f790		       98		      tya
    253  f791		       18		      clc
    254  f792		       65 a7		      adc	LineVelocity+1
    255  f794		       85 a5		      sta	LinePos+1
    256  f796
    257  f796		       4c 9c f7 	      jmp	.line_object_return
    258  f799
    259  f799				   .line_object_disable
    260  f799		       20 06 f8 	      jsr	LineDisable
    261  f79c
    262  f79c				   .line_object_return
    263  f79c		       60		      rts
    264  f79d
    265  f79d				   LineCollision
    266  f79d
    267  f79d		       a9 78		      lda	#BUG_STUN_LENGTH
    268  f79f
    269  f79f				   .line_collision_m0
    270  f79f		       24 04		      bit	CXM0FB
    271  f7a1		       50 08		      bvc	.line_collision_m1
    272  f7a3
    273  f7a3							; Set stun timer
    274  f7a3		       85 ac		      sta	BugStunned+0
    275  f7a5
    276  f7a5							; Disable line
    277  f7a5		       20 06 f8 	      jsr	LineDisable
    278  f7a8		       4c b4 f7 	      jmp	.line_collision_sample
    279  f7ab
    280  f7ab				   .line_collision_m1
    281  f7ab		       24 05		      bit	CXM1FB
    282  f7ad		       50 08		      bvc	.line_collision_return
    283  f7af
    284  f7af							; Set stun timer
    285  f7af		       85 ad		      sta	BugStunned+1
    286  f7b1
    287  f7b1							; Disable line
    288  f7b1		       20 06 f8 	      jsr	LineDisable
    289  f7b4
    290  f7b4				   .line_collision_sample
    291  f7b4		       20 2a f8 	      jsr	LineSample
    292  f7b7
    293  f7b7				   .line_collision_return
    294  f7b7		       60		      rts
    295  f7b8
    296  f7b8				   LinePosition
    297  f7b8
    298  f7b8							; Set Line Position
    299  f7b8		       a2 04		      ldx	#4	; Object (ball)
    300  f7ba		       a5 a4		      lda	LinePos	; X Position
    301  f7bc		       20 00 f0 	      jsr	PosObject
    302  f7bf
    303  f7bf		       60		      rts
    304  f7c0
    305  f7c0							; Scanline Draw
    306  f7c0
    307  f7c0				   LineDrawStart
    308  f7c0
    309  f7c0							; Set ball size to be 4 clocks (4/5 bits)
    310  f7c0		       a5 80		      lda	CtrlPf
    311  f7c2		       29 cf		      and	#%11001111
    312  f7c4		       09 20		      ora	#%00100000
    313  f7c6		       85 80		      sta	CtrlPf
    314  f7c8		       85 0a		      sta	CTRLPF
    315  f7ca
    316  f7ca							; Determine if we need to use vertical delay (oven line)
    317  f7ca		       a5 a5		      lda	LinePos+1
    318  f7cc		       4a		      lsr
    319  f7cd		       90 05		      bcc	.line_draw_start_nodelay
    320  f7cf
    321  f7cf		       a0 01		      ldy	#1
    322  f7d1		       4c d6 f7 	      jmp	.line_draw_start_set_delay
    323  f7d4
    324  f7d4				   .line_draw_start_nodelay
    325  f7d4		       a0 00		      ldy	#0
    326  f7d6
    327  f7d6				   .line_draw_start_set_delay
    328  f7d6		       84 27		      sty	VDELBL
    329  f7d8
    330  f7d8				   .line_draw_start_pos
    331  f7d8							; Calculate starting position
    332  f7d8		       18		      clc
    333  f7d9		       85 aa		      sta	LineDrawPos+0
    334  f7db		       69 02		      adc	#LINE_SIZE/2
    335  f7dd		       85 ab		      sta	LineDrawPos+1
    336  f7df
    337  f7df		       60		      rts
    338  f7e0
    339  f7e0				   LineDraw
    340  f7e0
    341  f7e0		       a0 00		      ldy	#%00000000
    342  f7e2
    343  f7e2							; Check if visible
    344  f7e2		       24 a3		      bit	LineEnabled
    345  f7e4		       10 0a		      bpl	.line_draw_off
    346  f7e6
    347  f7e6							; Load half scanline
    348  f7e6							;    lda Temp+1
    349  f7e6
    350  f7e6							; Top
    351  f7e6		       c5 ab		      cmp	LineDrawPos+1
    352  f7e8		       b0 06		      bcs	.line_draw_off
    353  f7ea
    354  f7ea							; Bottom
    355  f7ea		       c5 aa		      cmp	LineDrawPos+0
    356  f7ec		       90 02		      bcc	.line_draw_off
    357  f7ee
    358  f7ee				   .line_draw_on
    359  f7ee		       a0 02		      ldy	#%00000010
    360  f7f0
    361  f7f0				   .line_draw_off
    362  f7f0		       84 1f		      sty	ENABL
    363  f7f2
    364  f7f2		       60		      rts
    365  f7f3
    366  f7f3				   LineClean
    367  f7f3
    368  f7f3							; Clear out Line
    369  f7f3		       a9 00		      lda	#0
    370  f7f5		       85 1f		      sta	ENABL
    371  f7f7
    372  f7f7		       60		      rts
    373  f7f8
    374  f7f8				   LineEnable
    375  f7f8		       a9 80		      lda	#%10000000
    376  f7fa		       85 a3		      sta	LineEnabled
    377  f7fc
    378  f7fc		       a5 90		      lda	SampleStep
    379  f7fe		       c9 00		      cmp	#0
    380  f800		       d0 03		      bne	.line_enable_return
    381  f802
    382  f802		       20 14 f8 	      jsr	LineAudioPlay
    383  f805
    384  f805				   .line_enable_return
    385  f805		       60		      rts
    386  f806
    387  f806				   LineDisable
    388  f806		       a9 00		      lda	#0
    389  f808		       85 a3		      sta	LineEnabled
    390  f80a
    391  f80a		       a5 90		      lda	SampleStep
    392  f80c		       c9 00		      cmp	#0
    393  f80e		       d0 03		      bne	.line_disable_return
    394  f810
    395  f810		       20 21 f8 	      jsr	LineAudioMute
    396  f813
    397  f813				   .line_disable_return
    398  f813		       60		      rts
    399  f814
    400  f814				   LineAudioPlay
    401  f814		       a9 08		      lda	#LINE_AUDIO_C
    402  f816		       85 16		      sta	AUDC1
    403  f818		       a9 01		      lda	#LINE_AUDIO_F
    404  f81a		       85 18		      sta	AUDF1
    405  f81c		       a9 04		      lda	#LINE_AUDIO_V
    406  f81e		       85 1a		      sta	AUDV1
    407  f820		       60		      rts
    408  f821
    409  f821				   LineAudioMute
    410  f821		       a9 00		      lda	#0
    411  f823		       85 1a		      sta	AUDV1
    412  f825		       85 18		      sta	AUDF1
    413  f827		       85 16		      sta	AUDC1
    414  f829		       60		      rts
    415  f82a
    416  f82a				   LineSample
    417  f82a		       a9 08		      lda	#LINE_SAMPLE_LEN
    418  f82c		       85 90		      sta	SampleStep
    419  f82e		       a9 03		      lda	#LINE_SAMPLE_C
    420  f830		       85 16		      sta	AUDC1
    421  f832		       a9 01		      lda	#LINE_SAMPLE_F
    422  f834		       85 18		      sta	AUDF1
    423  f836		       a9 04		      lda	#LINE_SAMPLE_V
    424  f838		       85 1a		      sta	AUDV1
    425  f83a		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f83b					      include	"objects/bug.asm"
      1  f83b							;======================
      2  f83b							; Bugs (missiles 0 & 1)
      3  f83b							;======================
      4  f83b
      5  f83b							; Constants
      6  f83b
      7  f83b		       00 08	   BUG_SIZE   =	8
      8  f83b		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f83b		       00 02	   BUG_SPEED  =	2
     10  f83b		       00 78	   BUG_STUN_LENGTH =	120
     11  f83b		       00 04	   BUG_POINTS =	4
     12  f83b
     13  f83b		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f83b		       00 38	   BUG_COLOR_STUN =	#$38
     15  f83b
     16  f83b		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f83b		       00 03	   BUG_SAMPLE_C =	3
     18  f83b		       00 14	   BUG_SAMPLE_F =	20
     19  f83b		       00 04	   BUG_SAMPLE_V =	4
     20  f83b
     21  f83b							; Initialization
     22  f83b
     23  f83b				   BugInit
     24  f83b
     25  f83b							; Initialize Bugs
     26  f83b		       a2 01		      ldx	#1
     27  f83d
     28  f83d				   .bug_init_loop
     29  f83d		       20 44 f8 	      jsr	BugReset
     30  f840
     31  f840		       ca		      dex
     32  f841		       10 fa		      bpl	.bug_init_loop
     33  f843
     34  f843		       60		      rts
     35  f844
     36  f844				   BugReset		; x = bug (0 or 1)
     37  f844
     38  f844							; Set random position
     39  f844		       20 13 f0 	      jsr	Random
     40  f847
     41  f847		       a5 85		      lda	Rand8
     42  f849		       29 7f		      and	#$7f
     43  f84b		       95 ae		      sta	BugPosX,x
     44  f84d
     45  f84d		       a5 86		      lda	Rand16
     46  f84f		       29 7f		      and	#$7f
     47  f851		       95 b0		      sta	BugPosY,x
     48  f853
     49  f853							; Set as active
     50  f853		       a9 00		      lda	#0
     51  f855		       95 ac		      sta	BugStunned,x
     52  f857
     53  f857							; Reset Color
     54  f857		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     55  f859		       95 b2		      sta	BugColor,x
     56  f85b
     57  f85b		       60		      rts
     58  f85c
     59  f85c							; Frame Update
     60  f85c
     61  f85c				   BugUpdate
     62  f85c
     63  f85c		       a2 01		      ldx	#1
     64  f85e				   .bug_update_loop
     65  f85e		       86 83		      stx	Temp+0
     66  f860
     67  f860		       b5 ac		      lda	BugStunned,x
     68  f862		       c9 00		      cmp	#0
     69  f864		       f0 08		      beq	.bug_update_active
     70  f866
     71  f866				   .bug_update_stunned
     72  f866		       d6 ac		      dec	BugStunned,x
     73  f868		       20 de f8 	      jsr	BugStunCollision
     74  f86b		       4c 74 f8 	      jmp	.bug_update_next
     75  f86e
     76  f86e				   .bug_update_active
     77  f86e		       20 7a f8 	      jsr	BugMovement
     78  f871		       20 cd f8 	      jsr	BugCollision
     79  f874
     80  f874				   .bug_update_next
     81  f874		       a6 83		      ldx	Temp+0
     82  f876		       ca		      dex
     83  f877		       10 e5		      bpl	.bug_update_loop
     84  f879
     85  f879		       60		      rts
     86  f87a
     87  f87a				   BugMovement
     88  f87a
     89  f87a				   .bug_movement_random
     90  f87a		       20 13 f0 	      jsr	Random
     91  f87d		       29 03		      and	#%00000011
     92  f87f		       85 84		      sta	Temp+1
     93  f881
     94  f881				   .bug_movement_load
     95  f881							; Load x and y values
     96  f881		       a6 83		      ldx	Temp+0
     97  f883		       b5 ae		      lda	BugPosX,x
     98  f885		       b4 b0		      ldy	BugPosY,x
     99  f887		       aa		      tax
    100  f888
    101  f888				   .bug_movement_x
    102  f888							; Alter X Position
    103  f888		       a5 84		      lda	Temp+1
    104  f88a		       29 01		      and	#%00000001
    105  f88c
    106  f88c				   .bug_movement_x_left
    107  f88c		       c9 01		      cmp	#1
    108  f88e		       d0 05		      bne	.bug_movement_x_right
    109  f890					      REPEAT	#BUG_SPEED
    110  f890		       ca		      dex
    109  f890					      REPEND
    110  f891		       ca		      dex
    111  f892					      REPEND
    112  f892		       4c 97 f8 	      jmp	.bug_movement_y
    113  f895
    114  f895				   .bug_movement_x_right
    115  f895					      REPEAT	#BUG_SPEED
    116  f895		       e8		      inx
    115  f895					      REPEND
    116  f896		       e8		      inx
    117  f897					      REPEND
    118  f897
    119  f897				   .bug_movement_y
    120  f897							; Alter Y Position
    121  f897		       a5 84		      lda	Temp+1
    122  f899		       29 02		      and	#%00000010
    123  f89b		       4a		      lsr
    124  f89c
    125  f89c				   .bug_movement_y_up
    126  f89c		       c9 01		      cmp	#1
    127  f89e		       d0 05		      bne	.bug_movement_y_down
    128  f8a0					      REPEAT	#BUG_SPEED
    129  f8a0		       c8		      iny
    128  f8a0					      REPEND
    129  f8a1		       c8		      iny
    130  f8a2					      REPEND
    131  f8a2		       4c a7 f8 	      jmp	.bug_movement_boundary
    132  f8a5
    133  f8a5				   .bug_movement_y_down
    134  f8a5					      REPEAT	#BUG_SPEED
    135  f8a5		       88		      dey
    134  f8a5					      REPEND
    135  f8a6		       88		      dey
    136  f8a7					      REPEND
    137  f8a7
    138  f8a7				   .bug_movement_boundary
    139  f8a7
    140  f8a7				   .bug_movement_boundary_left
    141  f8a7		       e0 08		      cpx	#BUG_BOUNDARY
    142  f8a9		       b0 05		      bcs	.bug_movement_boundary_right
    143  f8ab		       a2 08		      ldx	#BUG_BOUNDARY
    144  f8ad		       4c b6 f8 	      jmp	.bug_movement_boundary_top
    145  f8b0
    146  f8b0				   .bug_movement_boundary_right
    147  f8b0		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    148  f8b2		       90 02		      bcc	.bug_movement_boundary_top
    149  f8b4		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    150  f8b6
    151  f8b6				   .bug_movement_boundary_top
    152  f8b6		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    153  f8b8		       b0 05		      bcs	.bug_movement_boundary_bottom
    154  f8ba		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    155  f8bc		       4c c5 f8 	      jmp	.bug_movement_store
    156  f8bf
    157  f8bf				   .bug_movement_boundary_bottom
    158  f8bf		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    159  f8c1		       90 02		      bcc	.bug_movement_store
    160  f8c3		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    161  f8c5
    162  f8c5				   .bug_movement_store
    163  f8c5		       8a		      txa
    164  f8c6		       a6 83		      ldx	Temp+0
    165  f8c8		       95 ae		      sta	BugPosX,x
    166  f8ca		       94 b0		      sty	BugPosY,x
    167  f8cc
    168  f8cc				   .bug_movement_return
    169  f8cc		       60		      rts
    170  f8cd
    171  f8cd				   BugCollision
    172  f8cd
    173  f8cd		       e0 01		      cpx	#1
    174  f8cf		       f0 05		      beq	.bug_collision_m1
    175  f8d1
    176  f8d1				   .bug_collision_m0
    177  f8d1							; Collision for M0 (V set)
    178  f8d1		       24 00		      bit	CXM0P
    179  f8d3		       70 06		      bvs	.bug_collision_active
    180  f8d5		       60		      rts
    181  f8d6
    182  f8d6				   .bug_collision_m1
    183  f8d6							; Collision for M1 (N set)
    184  f8d6		       24 01		      bit	CXM1P
    185  f8d8		       30 01		      bmi	.bug_collision_active
    186  f8da		       60		      rts
    187  f8db
    188  f8db				   .bug_collision_active
    189  f8db		       c6 91		      dec	ScoreValue
    190  f8dd		       60		      rts
    191  f8de
    192  f8de				   BugStunCollision
    193  f8de
    194  f8de		       e0 01		      cpx	#1
    195  f8e0		       f0 05		      beq	.bug_stun_collision_m1
    196  f8e2
    197  f8e2				   .bug_stun_collision_m0
    198  f8e2							; Collision for M0 (V set)
    199  f8e2		       24 00		      bit	CXM0P
    200  f8e4		       70 06		      bvs	.bug_stun_collision_active
    201  f8e6		       60		      rts
    202  f8e7
    203  f8e7				   .bug_stun_collision_m1
    204  f8e7							; Collision for M1 (N set)
    205  f8e7		       24 01		      bit	CXM1P
    206  f8e9		       30 01		      bmi	.bug_stun_collision_active
    207  f8eb		       60		      rts
    208  f8ec
    209  f8ec				   .bug_stun_collision_active
    210  f8ec							; Add points to score
    211  f8ec		       18		      clc
    212  f8ed		       a5 92		      lda	ScoreValue+1
    213  f8ef		       69 04		      adc	#BUG_POINTS
    214  f8f1		       85 92		      sta	ScoreValue+1
    215  f8f3
    216  f8f3							; Reset bug
    217  f8f3		       20 44 f8 	      jsr	BugReset
    218  f8f6
    219  f8f6							; Play sample
    220  f8f6		       20 4a f9 	      jsr	BugSample
    221  f8f9
    222  f8f9		       60		      rts
    223  f8fa
    224  f8fa							; Horizontal Positioning
    225  f8fa
    226  f8fa				   BugPosition
    227  f8fa
    228  f8fa		       a2 02		      ldx	#2
    229  f8fc		       a5 ae		      lda	BugPosX+0
    230  f8fe		       20 00 f0 	      jsr	PosObject
    231  f901
    232  f901		       a2 03		      ldx	#3
    233  f903		       a5 af		      lda	BugPosX+1
    234  f905		       20 00 f0 	      jsr	PosObject
    235  f908
    236  f908		       60		      rts
    237  f909
    238  f909							; Scanline Draw
    239  f909
    240  f909				   BugDrawStart
    241  f909
    242  f909		       a0 01		      ldy	#1
    243  f90b				   .bug_draw_start_loop
    244  f90b
    245  f90b							; Set missile 0 & 1 to be 4 clock size
    246  f90b		       b9 81 00 	      lda	NuSiz0,y
    247  f90e		       09 30		      ora	#%00110000
    248  f910		       99 81 00 	      sta	NuSiz0,y
    249  f913		       99 04 00 	      sta	NUSIZ0,y
    250  f916
    251  f916							; Setup half scanline positions
    252  f916		       b9 b0 00 	      lda	BugPosY,y
    253  f919		       4a		      lsr
    254  f91a		       99 b4 00 	      sta	BugDrawPosBottom,y
    255  f91d
    256  f91d		       69 04		      adc	#BUG_SIZE/2
    257  f91f		       99 b6 00 	      sta	BugDrawPosTop,y
    258  f922
    259  f922		       88		      dey
    260  f923		       10 e6		      bpl	.bug_draw_start_loop
    261  f925
    262  f925		       60		      rts
    263  f926
    264  f926				   BugDraw
    265  f926
    266  f926							; Load half scanline
    267  f926							;    lda Temp+1
    268  f926
    269  f926				   .bug_draw_0
    270  f926		       a0 00		      ldy	#%00000000
    271  f928
    272  f928							; Check top and bottom y pos
    273  f928		       c5 b6		      cmp	BugDrawPosTop+0
    274  f92a		       b0 06		      bcs	.bug_draw_0_off
    275  f92c
    276  f92c		       c5 b4		      cmp	BugDrawPosBottom+0
    277  f92e		       90 02		      bcc	.bug_draw_0_off
    278  f930
    279  f930				   .bug_draw_0_on
    280  f930		       a0 02		      ldy	#%00000010
    281  f932
    282  f932				   .bug_draw_0_off
    283  f932		       84 1d		      sty	ENAM0
    284  f934
    285  f934				   .bug_draw_1
    286  f934		       a0 00		      ldy	#%00000000
    287  f936
    288  f936							; Check top and bottom y pos
    289  f936		       c5 b7		      cmp	BugDrawPosTop+1
    290  f938		       b0 06		      bcs	.bug_draw_1_off
    291  f93a
    292  f93a		       c5 b5		      cmp	BugDrawPosBottom+1
    293  f93c		       90 02		      bcc	.bug_draw_1_off
    294  f93e
    295  f93e				   .bug_draw_1_on
    296  f93e		       a0 02		      ldy	#%00000010
    297  f940
    298  f940				   .bug_draw_1_off
    299  f940		       84 1e		      sty	ENAM1
    300  f942
    301  f942				   .bug_draw_return
    302  f942		       60		      rts
    303  f943
    304  f943				   BugClean
    305  f943		       a9 00		      lda	#0
    306  f945		       85 1d		      sta	ENAM0
    307  f947		       85 1e		      sta	ENAM1
    308  f949		       60		      rts
    309  f94a
    310  f94a				   BugSample
    311  f94a		       a9 1e		      lda	#BUG_SAMPLE_LEN
    312  f94c		       85 90		      sta	SampleStep
    313  f94e		       a9 03		      lda	#BUG_SAMPLE_C
    314  f950		       85 16		      sta	AUDC1
    315  f952		       a9 14		      lda	#BUG_SAMPLE_F
    316  f954		       85 18		      sta	AUDF1
    317  f956		       a9 04		      lda	#BUG_SAMPLE_V
    318  f958		       85 1a		      sta	AUDV1
    319  f95a		       60		      rts
------- FILE game.asm
     20  f95b							;    include "objects/swatter.asm"
     21  f95b
     22  f95b							; Initialization
     23  f95b
     24  f95b				   GameInit
     25  f95b
     26  f95b							; Setup logic and kernel
      0  f95b					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  f95b				   .POINTER   SET	VBlankPtr
      2  f95b				   .ADDRESS   SET	GameVerticalBlank
      3  f95b
      4  f95b		       a9 9c		      LDA	#<.ADDRESS
      5  f95d		       85 87		      STA	.POINTER
      6  f95f		       a9 f9		      LDA	#>.ADDRESS
      7  f961		       85 88		      STA	.POINTER+1
      8  f963
      0  f963					      SET_POINTER	KernelPtr, GameKernel
      1  f963				   .POINTER   SET	KernelPtr
      2  f963				   .ADDRESS   SET	GameKernel
      3  f963
      4  f963		       a9 19		      LDA	#<.ADDRESS
      5  f965		       85 89		      STA	.POINTER
      6  f967		       a9 fa		      LDA	#>.ADDRESS
      7  f969		       85 8a		      STA	.POINTER+1
      8  f96b
      0  f96b					      SET_POINTER	OverScanPtr, GameOverScan
      1  f96b				   .POINTER   SET	OverScanPtr
      2  f96b				   .ADDRESS   SET	GameOverScan
      3  f96b
      4  f96b		       a9 bd		      LDA	#<.ADDRESS
      5  f96d		       85 8b		      STA	.POINTER
      6  f96f		       a9 f9		      LDA	#>.ADDRESS
      7  f971		       85 8c		      STA	.POINTER+1
      8  f973
     30  f973
     31  f973							; Mute Audio
     32  f973		       a9 00		      lda	#0
     33  f975		       85 15		      sta	AUDC0
     34  f977		       85 19		      sta	AUDV0
     35  f979		       85 17		      sta	AUDF0
     36  f97b		       85 16		      sta	AUDC1
     37  f97d		       85 1a		      sta	AUDV1
     38  f97f		       85 18		      sta	AUDF1
     39  f981		       85 90		      sta	SampleStep
     40  f983
     41  f983							; Load Audio Settings
     42  f983		       a9 04		      lda	#GAME_AUDIO_VOLUME
     43  f985		       85 19		      sta	AUDV0
     44  f987
     45  f987							; Make it so that we play the first note immediately
     46  f987		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     47  f989		       85 8f		      sta	AudioStep
     48  f98b		       a9 02		      lda	#2
     49  f98d		       85 8e		      sta	FrameTimer
     50  f98f
     51  f98f							; Initialize Objects
     52  f98f		       20 83 f3 	      jsr	ScoreInit
     53  f992		       20 df f4 	      jsr	SpiderInit
     54  f995		       20 85 f6 	      jsr	LineInit
     55  f998		       20 3b f8 	      jsr	BugInit
     56  f99b							;    jsr SwatterInit
     57  f99b
     58  f99b		       60		      rts
     59  f99c
     60  f99c				   GameVerticalBlank
     61  f99c
     62  f99c							; Refresh random values
     63  f99c		       20 13 f0 	      jsr	Random
     64  f99f
     65  f99f							; Update Objects
     66  f99f		       20 f0 f4 	      jsr	SpiderUpdate
     67  f9a2		       20 9a f6 	      jsr	LineUpdate
     68  f9a5		       20 5c f8 	      jsr	BugUpdate
     69  f9a8							;    jsr SwatterUpdate
     70  f9a8		       20 8c f3 	      jsr	ScoreUpdate
     71  f9ab
     72  f9ab							; Reset Collisions
     73  f9ab		       85 2c		      sta	CXCLR
     74  f9ad
     75  f9ad							; Clear horizontal movement
     76  f9ad		       85 2b		      sta	HMCLR
     77  f9af
     78  f9af							; Update Positions
     79  f9af		       20 fb f5 	      jsr	SpiderPosition
     80  f9b2		       20 b8 f7 	      jsr	LinePosition
     81  f9b5		       20 fa f8 	      jsr	BugPosition
     82  f9b8							;    jsr SwatterPosition
     83  f9b8
     84  f9b8							; Set final x positions
     85  f9b8		       85 02		      sta	WSYNC
     86  f9ba		       85 2a		      sta	HMOVE
     87  f9bc
     88  f9bc		       60		      rts
     89  f9bd
     90  f9bd				   GameOverScan
     91  f9bd
     92  f9bd							; Audio Routines
     93  f9bd		       20 db f9 	      jsr	GameAudio
     94  f9c0		       20 c7 f9 	      jsr	GameSample
     95  f9c3
     96  f9c3							; State Routines
     97  f9c3		       20 0f fa 	      jsr	GameDeath
     98  f9c6
     99  f9c6		       60		      rts
    100  f9c7
    101  f9c7				   GameSample
    102  f9c7
    103  f9c7		       a6 90		      ldx	SampleStep
    104  f9c9		       e0 00		      cpx	#0
    105  f9cb		       f0 0b		      beq	.game_sample_return
    106  f9cd
    107  f9cd		       ca		      dex
    108  f9ce		       d0 08		      bne	.game_sample_return
    109  f9d0
    110  f9d0				   .game_sample_mute
    111  f9d0		       a9 00		      lda	#0
    112  f9d2		       85 1a		      sta	AUDV1
    113  f9d4		       85 18		      sta	AUDF1
    114  f9d6		       85 16		      sta	AUDC1
    115  f9d8
    116  f9d8				   .game_sample_return
    117  f9d8		       86 90		      stx	SampleStep
    118  f9da		       60		      rts
    119  f9db
    120  f9db				   GameAudio
    121  f9db
    122  f9db		       a6 8e		      ldx	FrameTimer
    123  f9dd		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    124  f9df		       f0 25		      beq	.game_audio_mute_note
    125  f9e1		       e0 00		      cpx	#0
    126  f9e3		       d0 29		      bne	.game_audio_return
    127  f9e5
    128  f9e5							; Reset Timer
    129  f9e5		       a2 09		      ldx	#GAME_AUDIO_STEP
    130  f9e7		       86 8e		      stx	FrameTimer
    131  f9e9
    132  f9e9				   .game_audio_play
    133  f9e9
    134  f9e9							; Increment melody position
    135  f9e9		       a4 8f		      ldy	AudioStep
    136  f9eb		       c8		      iny
    137  f9ec
    138  f9ec		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    139  f9ee		       d0 02		      bne	.game_audio_play_note
    140  f9f0
    141  f9f0							; Loop our audio step
    142  f9f0		       a0 00		      ldy	#0
    143  f9f2
    144  f9f2				   .game_audio_play_note
    145  f9f2
    146  f9f2							; Save current position
    147  f9f2		       84 8f		      sty	AudioStep
    148  f9f4
    149  f9f4							; Melody Line
    150  f9f4		       b9 7d fa 	      lda	GameAudio0,y
    151  f9f7		       c9 ff		      cmp	#$FF
    152  f9f9		       f0 0b		      beq	.game_audio_mute_note
    153  f9fb		       85 17		      sta	AUDF0
    154  f9fd		       a9 06		      lda	#GAME_AUDIO_TONE
    155  f9ff		       85 15		      sta	AUDC0
    156  fa01		       a9 04		      lda	#GAME_AUDIO_VOLUME
    157  fa03		       85 19		      sta	AUDV0
    158  fa05
    159  fa05		       60		      rts
    160  fa06
    161  fa06				   .game_audio_mute_note
    162  fa06
    163  fa06		       a9 00		      lda	#0
    164  fa08		       85 17		      sta	AUDF0
    165  fa0a		       85 15		      sta	AUDC0
    166  fa0c		       85 19		      sta	AUDV0
    167  fa0e
    168  fa0e				   .game_audio_return
    169  fa0e		       60		      rts
    170  fa0f
    171  fa0f				   GameDeath
    172  fa0f		       a5 91		      lda	ScoreValue+0
    173  fa11		       c9 00		      cmp	#0
    174  fa13		       d0 03		      bne	.game_death_return
    175  fa15
    176  fa15							; Show Game Over Screen
    177  fa15		       20 9d fa 	      jsr	OverInit
    178  fa18
    179  fa18				   .game_death_return
    180  fa18		       60		      rts
    181  fa19
    182  fa19				   GameKernel
    183  fa19
    184  fa19							; Turn on display
    185  fa19		       a9 00		      lda	#0
    186  fa1b		       85 01		      sta	VBLANK
    187  fa1d
    188  fa1d				   .game_kernel_score
    189  fa1d
    190  fa1d							; Draw Score on top first
    191  fa1d		       20 ac f3 	      jsr	ScoreDraw
    192  fa20
    193  fa20				   .game_kernel_objects_start
    194  fa20
    195  fa20							; Setup Drawing Objects
    196  fa20		       20 6c f4 	      jsr	WebDrawStart
    197  fa23		       20 03 f6 	      jsr	SpiderDrawStart
    198  fa26		       20 c0 f7 	      jsr	LineDrawStart
    199  fa29		       20 09 f9 	      jsr	BugDrawStart
    200  fa2c							;    jsr SwatterDrawStart
    201  fa2c
    202  fa2c							; Start Scanline Counter
    203  fa2c		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    204  fa2e							; The extra 5 is for processing overflow
    205  fa2e
    206  fa2e							; Half scanline counter in Temp+1
    207  fa2e		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    208  fa30		       85 84		      sta	Temp+1
    209  fa32
    210  fa32				   .game_kernel_objects
    211  fa32
    212  fa32							; Draw Objects in order
    213  fa32
    214  fa32							;    jsr LineDraw
    215  fa32							;    jsr BugDraw
    216  fa32		       20 87 f4 	      jsr	WebDraw	; Every 6 lines
    217  fa35
    218  fa35		       85 02		      sta	WSYNC
    219  fa37		       ca		      dex
    220  fa38		       f0 34		      beq	.game_kernel_clean
    221  fa3a
    222  fa3a		       20 27 f6 	      jsr	SpiderDraw	; Every odd scanline
    223  fa3d							;    jsr SwatterDraw
    224  fa3d
    225  fa3d		       85 02		      sta	WSYNC
    226  fa3f		       c6 84		      dec	Temp+1
    227  fa41		       ca		      dex
    228  fa42		       f0 2a		      beq	.game_kernel_clean
    229  fa44
    230  fa44		       a5 84		      lda	Temp+1
    231  fa46		       20 e0 f7 	      jsr	LineDraw
    232  fa49		       20 26 f9 	      jsr	BugDraw
    233  fa4c
    234  fa4c							;    sta WSYNC
    235  fa4c		       ca		      dex
    236  fa4d		       f0 1f		      beq	.game_kernel_clean
    237  fa4f
    238  fa4f		       20 27 f6 	      jsr	SpiderDraw
    239  fa52							;    jsr SwatterDraw
    240  fa52
    241  fa52		       85 02		      sta	WSYNC
    242  fa54		       c6 84		      dec	Temp+1
    243  fa56		       ca		      dex
    244  fa57		       f0 15		      beq	.game_kernel_clean
    245  fa59
    246  fa59		       a5 84		      lda	Temp+1
    247  fa5b		       20 e0 f7 	      jsr	LineDraw
    248  fa5e		       20 26 f9 	      jsr	BugDraw
    249  fa61
    250  fa61							;    sta WSYNC
    251  fa61		       ca		      dex
    252  fa62		       f0 0a		      beq	.game_kernel_clean
    253  fa64
    254  fa64		       20 27 f6 	      jsr	SpiderDraw
    255  fa67							;    jsr SwatterDraw
    256  fa67
    257  fa67		       85 02		      sta	WSYNC
    258  fa69		       c6 84		      dec	Temp+1
    259  fa6b		       ca		      dex
    260  fa6c		       d0 c4		      bne	.game_kernel_objects
    261  fa6e
    262  fa6e				   .game_kernel_clean
    263  fa6e
    264  fa6e		       20 a9 f4 	      jsr	WebClean
    265  fa71		       20 58 f6 	      jsr	SpiderClean
    266  fa74		       20 f3 f7 	      jsr	LineClean
    267  fa77		       20 43 f9 	      jsr	BugClean
    268  fa7a							;    jsr SwatterClean
    269  fa7a
    270  fa7a		       85 02		      sta	WSYNC
    271  fa7c
    272  fa7c				   .game_kernel_return
    273  fa7c		       60		      rts
    274  fa7d
    275  fa7d				   GameAudio0
    276  fa7d		       0d		      .byte.b	#13	; D
    277  fa7e		       ff		      .byte.b	#$FF
    278  fa7f		       0f		      .byte.b	#15	; B
    279  fa80		       ff		      .byte.b	#$FF
    280  fa81		       0d		      .byte.b	#13	; D
    281  fa82		       ff		      .byte.b	#$FF
    282  fa83		       0f		      .byte.b	#15	; B
    283  fa84		       ff		      .byte.b	#$FF
    284  fa85		       0d		      .byte.b	#13	; D
    285  fa86		       0d		      .byte.b	#13	; D
    286  fa87		       0f		      .byte.b	#15	; B
    287  fa88		       ff		      .byte.b	#$FF
    288  fa89		       0c		      .byte.b	#12	; D#
    289  fa8a		       ff		      .byte.b	#$FF
    290  fa8b		       0f		      .byte.b	#15	; B
    291  fa8c		       ff		      .byte.b	#$FF
    292  fa8d		       0b		      .byte.b	#11	; E
    293  fa8e		       ff		      .byte.b	#$FF
    294  fa8f		       0e		      .byte.b	#14	; C#
    295  fa90		       ff		      .byte.b	#$FF
    296  fa91		       0b		      .byte.b	#11
    297  fa92		       ff		      .byte.b	#$FF
    298  fa93		       0e		      .byte.b	#14
    299  fa94		       ff		      .byte.b	#$FF
    300  fa95		       0b		      .byte.b	#11
    301  fa96		       0b		      .byte.b	#11
    302  fa97		       0e		      .byte.b	#14
    303  fa98		       ff		      .byte.b	#$FF
    304  fa99		       0b		      .byte.b	#11
    305  fa9a		       ff		      .byte.b	#$FF
    306  fa9b		       0e		      .byte.b	#14
    307  fa9c		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fa9d					      include	"over.asm"
      1  fa9d							;================
      2  fa9d							; Constants
      3  fa9d							;================
      4  fa9d
      5  fa9d		       00 dc	   OVER_FRAMES =	220
      6  fa9d
      7  fa9d		       00 00	   OVER_BG_COLOR =	#$00
      8  fa9d		       00 44	   OVER_FG_COLOR =	#$44
      9  fa9d
     10  fa9d		       00 07	   OVER_AUDIO_TONE =	7
     11  fa9d		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fa9d		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fa9d		       00 10	   OVER_AUDIO_STEP =	16
     14  fa9d
     15  fa9d		       00 09	   OVER_IMAGE_SIZE =	9
     16  fa9d		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fa9d		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fa9d		       00 35	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fa9d
     20  fa9d				   OverInit
     21  fa9d
     22  fa9d							; Setup logic and kernel
      0  fa9d					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fa9d				   .POINTER   SET	VBlankPtr
      2  fa9d				   .ADDRESS   SET	OverVerticalBlank
      3  fa9d
      4  fa9d		       a9 df		      LDA	#<.ADDRESS
      5  fa9f		       85 87		      STA	.POINTER
      6  faa1		       a9 fa		      LDA	#>.ADDRESS
      7  faa3		       85 88		      STA	.POINTER+1
      8  faa5
      0  faa5					      SET_POINTER	KernelPtr, OverKernel
      1  faa5				   .POINTER   SET	KernelPtr
      2  faa5				   .ADDRESS   SET	OverKernel
      3  faa5
      4  faa5		       a9 1d		      LDA	#<.ADDRESS
      5  faa7		       85 89		      STA	.POINTER
      6  faa9		       a9 fb		      LDA	#>.ADDRESS
      7  faab		       85 8a		      STA	.POINTER+1
      8  faad
      0  faad					      SET_POINTER	OverScanPtr, OverOverScan
      1  faad				   .POINTER   SET	OverScanPtr
      2  faad				   .ADDRESS   SET	OverOverScan
      3  faad
      4  faad		       a9 e3		      LDA	#<.ADDRESS
      5  faaf		       85 8b		      STA	.POINTER
      6  fab1		       a9 fa		      LDA	#>.ADDRESS
      7  fab3		       85 8c		      STA	.POINTER+1
      8  fab5
     26  fab5
     27  fab5							; Load Colors
     28  fab5		       a9 00		      lda	#OVER_BG_COLOR
     29  fab7		       85 09		      sta	COLUBK
     30  fab9		       a9 44		      lda	#OVER_FG_COLOR
     31  fabb		       85 08		      sta	COLUPF
     32  fabd
     33  fabd							; Load audio settings
     34  fabd		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fabf		       85 15		      sta	AUDC0
     36  fac1		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fac3		       85 19		      sta	AUDV0
     38  fac5		       a9 00		      lda	#0
     39  fac7		       85 16		      sta	AUDC1
     40  fac9		       85 1a		      sta	AUDV1
     41  facb		       a9 00		      lda	#0
     42  facd		       85 8f		      sta	AudioStep
     43  facf
     44  facf							; Play first note
     45  facf		       ad 6f fb 	      lda	OverAudio0,AudioStep
     46  fad2		       85 17		      sta	AUDF0
     47  fad4
     48  fad4							; Setup frame counters
     49  fad4		       a9 00		      lda	#0
     50  fad6		       85 8d		      sta	Frame
     51  fad8		       a9 10		      lda	#OVER_AUDIO_STEP
     52  fada		       85 8e		      sta	FrameTimer
     53  fadc		       85 84		      sta	Temp+1
     54  fade
     55  fade		       60		      rts
     56  fadf
     57  fadf				   OverVerticalBlank
     58  fadf		       20 8c f3 	      jsr	ScoreUpdate
     59  fae2		       60		      rts
     60  fae3
     61  fae3				   OverOverScan
     62  fae3		       20 ea fa 	      jsr	OverAudio
     63  fae6		       20 13 fb 	      jsr	OverState
     64  fae9		       60		      rts
     65  faea
     66  faea				   OverAudio
     67  faea
     68  faea		       a6 8e		      ldx	FrameTimer
     69  faec		       e0 00		      cpx	#0
     70  faee		       d0 22		      bne	.over_audio_return
     71  faf0
     72  faf0							; Reset Timer
     73  faf0		       a6 84		      ldx	Temp+1
     74  faf2					      REPEAT	3
     75  faf2		       e8		      inx
     74  faf2					      REPEND
     75  faf3		       e8		      inx
     74  faf3					      REPEND
     75  faf4		       e8		      inx
     76  faf5					      REPEND
     77  faf5		       86 8e		      stx	FrameTimer
     78  faf7		       86 84		      stx	Temp+1
     79  faf9
     80  faf9				   .over_audio_play
     81  faf9
     82  faf9							; Increment melody position
     83  faf9		       a4 8f		      ldy	AudioStep
     84  fafb		       c8		      iny
     85  fafc
     86  fafc		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  fafe		       f0 0c		      beq	.over_audio_mute_note
     88  fb00
     89  fb00				   .over_audio_play_note
     90  fb00
     91  fb00							; Save current position
     92  fb00		       84 8f		      sty	AudioStep
     93  fb02
     94  fb02							; Melody Line
     95  fb02		       b9 6f fb 	      lda	OverAudio0,y
     96  fb05		       85 17		      sta	AUDF0
     97  fb07		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  fb09		       85 19		      sta	AUDV0
     99  fb0b
    100  fb0b		       60		      rts
    101  fb0c
    102  fb0c				   .over_audio_mute_note
    103  fb0c		       a9 00		      lda	#0
    104  fb0e		       85 17		      sta	AUDF0
    105  fb10		       85 19		      sta	AUDV0
    106  fb12
    107  fb12				   .over_audio_return
    108  fb12		       60		      rts
    109  fb13
    110  fb13				   OverState
    111  fb13		       a5 8d		      lda	Frame
    112  fb15		       c9 dc		      cmp	#OVER_FRAMES
    113  fb17		       d0 03		      bne	.over_state_return
    114  fb19
    115  fb19		       20 f5 f1 	      jsr	TitleInit
    116  fb1c
    117  fb1c				   .over_state_return
    118  fb1c		       60		      rts
    119  fb1d
    120  fb1d				   OverKernel
    121  fb1d
    122  fb1d							; Turn on display
    123  fb1d		       a9 00		      lda	#0
    124  fb1f		       85 01		      sta	VBLANK
    125  fb21
    126  fb21				   .over_kernel_score
    127  fb21
    128  fb21							; Draw Score on top first (no update)
    129  fb21		       20 ac f3 	      jsr	ScoreDraw
    130  fb24
    131  fb24				   .over_kernel_init
    132  fb24							; Playfield Control
    133  fb24		       a5 80		      lda	CtrlPf
    134  fb26		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  fb28		       09 01		      ora	#%00000001	; Set mirroring
    136  fb2a		       85 80		      sta	CtrlPf
    137  fb2c		       85 0a		      sta	CTRLPF
    138  fb2e
    139  fb2e				   .over_kernel_top_padding
    140  fb2e							; Top Padding
    141  fb2e		       20 4d fb 	      jsr	OverPadding
    142  fb31
    143  fb31				   .over_kernel_image
    144  fb31		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  fb33
    146  fb33				   .over_kernel_image_next
    147  fb33		       bd 66 fb 	      lda	OverImagePF2,x
    148  fb36		       85 0f		      sta	PF2
    149  fb38		       bd 5d fb 	      lda	OverImagePF1,x
    150  fb3b		       85 0e		      sta	PF1
    151  fb3d							;    lda OverImagePF0,x
    152  fb3d							;    sta PF0
    153  fb3d
    154  fb3d		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  fb3f				   .over_kernel_image_loop
    156  fb3f		       85 02		      sta	WSYNC
    157  fb41		       88		      dey
    158  fb42		       d0 fb		      bne	.over_kernel_image_loop
    159  fb44
    160  fb44		       ca		      dex
    161  fb45		       10 ec		      bpl	.over_kernel_image_next
    162  fb47
    163  fb47				   .over_kernel_bottom_padding
    164  fb47							; Bottom Padding
    165  fb47		       20 4d fb 	      jsr	OverPadding
    166  fb4a
    167  fb4a				   .over_kernel_return
    168  fb4a		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  fb4c		       60		      rts
    170  fb4d
    171  fb4d				   OverPadding
    172  fb4d		       a9 00		      lda	#0
    173  fb4f		       85 0d		      sta	PF0
    174  fb51		       85 0e		      sta	PF1
    175  fb53		       85 0f		      sta	PF2
    176  fb55
    177  fb55		       a2 35		      ldx	#OVER_IMAGE_PADDING
    178  fb57				   .over_padding_loop
    179  fb57		       85 02		      sta	WSYNC
    180  fb59		       ca		      dex
    181  fb5a		       d0 fb		      bne	.over_padding_loop
    182  fb5c
    183  fb5c		       60		      rts
    184  fb5d
    185  fb5d				   OverAssets
    186  fb5d
    187  fb5d							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  fb5d					      include	"over_image.asm"
      1  fb5d							;OverImagePF0:
      2  fb5d							;    .BYTE %00000000
      3  fb5d							;    .BYTE %00000000
      4  fb5d							;    .BYTE %00000000
      5  fb5d							;    .BYTE %00000000
      6  fb5d							;    .BYTE %00000000
      7  fb5d							;    .BYTE %00000000
      8  fb5d							;    .BYTE %00000000
      9  fb5d							;    .BYTE %00000000
     10  fb5d							;    .BYTE %00000000
     11  fb5d
     12  fb5d				   OverImagePF1
     13  fb5d		       0c		      .BYTE.b	%00001100
     14  fb5e		       13		      .BYTE.b	%00010011
     15  fb5f		       20		      .BYTE.b	%00100000
     16  fb60		       23		      .BYTE.b	%00100011
     17  fb61		       24		      .BYTE.b	%00100100
     18  fb62		       24		      .BYTE.b	%00100100
     19  fb63		       12		      .BYTE.b	%00010010
     20  fb64		       10		      .BYTE.b	%00010000
     21  fb65		       08		      .BYTE.b	%00001000
     22  fb66
     23  fb66				   OverImagePF2
     24  fb66		       e0		      .BYTE.b	%11100000
     25  fb67		       18		      .BYTE.b	%00011000
     26  fb68		       05		      .BYTE.b	%00000101
     27  fb69		       52		      .BYTE.b	%01010010
     28  fb6a		       23		      .BYTE.b	%00100011
     29  fb6b		       52		      .BYTE.b	%01010010
     30  fb6c		       04		      .BYTE.b	%00000100
     31  fb6d		       18		      .BYTE.b	%00011000
     32  fb6e		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  fb6f
    190  fb6f				   OverAudio0
    191  fb6f
    192  fb6f		       0c		      .BYTE.b	#12	; D#2
    193  fb70		       0d		      .BYTE.b	#13	; D2
    194  fb71		       11		      .BYTE.b	#17	; A1
    195  fb72		       16		      .BYTE.b	#22	; F1
    196  fb73		       1a		      .BYTE.b	#26	; D1
    197  fb74		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    286  fb75
    287  fb75							;================
    288  fb75							; End of cart
    289  fb75							;================
    290  fb75
    291  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    292  fffa
    293  fffa				   InterruptVectors
    294  fffa
    295  fffa		       21 f0		      .word.w	InitSystem	; NMI
    296  fffc		       21 f0		      .word.w	InitSystem	; RESET
    297  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    298  10000
    299  10000					       END
