------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 11th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00c9 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; Global
     53 U0080
     54 U0080		       00 00 00    Temp       ds	3
     55 U0083		       00	   Rand8      ds	1
     56 U0084		       00	   Rand16     ds	1
     57 U0085
     58 U0085		       00 00	   VBlankPtr  ds	2
     59 U0087		       00 00	   KernelPtr  ds	2
     60 U0089		       00 00	   OverScanPtr ds	2
     61 U008b
     62 U008b		       00	   Frame      ds	1
     63 U008c		       00 00	   FrameTimer ds	2
     64 U008e		       00	   InputState ds	1
     65 U008f
     66 U008f		       00	   AudioStep  ds	1
     67 U0090
     68 U0090		       00	   SampleStep ds	1
     69 U0091
     70 U0091							; Score
     71 U0091
     72 U0091		       00 00	   ScoreValue ds	2
     73 U0093		       00 00	   ScoreDigitOnes ds	2
     74 U0095		       00 00	   ScoreDigitTens ds	2
     75 U0097		       00 00 00    ScoreDigitGfx ds	3
     76 U009a		       00 00	   ScoreBarGfx ds	2
     77 U009c
     78 U009c							; Level
     79 U009c		       00	   LevelCurrent ds	1
     80 U009d
     81 U009d							; Web
     82 U009d
     83 U009d		       00	   WebIndex   ds	1
     84 U009e		       00 00	   WebColor   ds	2
     85 U00a0
     86 U00a0							; Spider
     87 U00a0
     88 U00a0		       00 00	   SpiderPtr  ds	2
     89 U00a2		       00 00	   SpiderPos  ds	2
     90 U00a4		       00	   SpiderCtrl ds	1
     91 U00a5		       00	   SpiderColor ds	1
     92 U00a6
     93 U00a6		       00	   SpiderIndex ds	1
     94 U00a7		       00	   SpiderDrawPos ds	1
     95 U00a8		       00	   SpiderLine ds	1
     96 U00a9
     97 U00a9		       00 00	   SpiderPtr2 ds	2
     98 U00ab
     99 U00ab							; Line
    100 U00ab
    101 U00ab		       00	   LineEnabled ds	1
    102 U00ac		       00 00	   LinePos    ds	2
    103 U00ae		       00 00	   LineVelocity ds	2
    104 U00b0		       00 00	   LineDrawPos ds	2
    105 U00b2
    106 U00b2							; Bug
    107 U00b2
    108 U00b2		       00	   BugSpeed   ds	1
    109 U00b3
    110 U00b3		       00 00	   BugStunned ds	2
    111 U00b5		       00 00	   BugPosX    ds	2
    112 U00b7		       00 00	   BugPosY    ds	2
    113 U00b9
    114 U00b9		       00 00	   BugDrawPosBottom ds	2
    115 U00bb		       00 00	   BugDrawPosTop ds	2
    116 U00bd
    117 U00bd							; Swatter
    118 U00bd
    119 U00bd		       00 00	   SwatterPos ds	2
    120 U00bf		       00	   SwatterState ds	1
    121 U00c0		       00	   SwatterColor ds	1
    122 U00c1
    123 U00c1		       00	   SwatterWaitTime ds	1
    124 U00c2		       00	   SwatterHoldTime ds	1
    125 U00c3		       00	   SwatterHitDamage ds	1
    126 U00c4
    127 U00c4		       00	   SwatterIndex ds	1
    128 U00c5		       00	   SwatterDrawPos ds	1
    129 U00c6		       00	   SwatterLine ds	1
    130 U00c7
    131 U00c7		       00	   SwatterSampleCount ds	1
    132 U00c8		       00	   SwatterSampleF ds	1
    133 U00c9
    134  10000 ????				       SEG
    135  f000					      org	$F000	; Start of cart area
    136  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 83		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 84		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 83		      sta	Rand8
     49  f01e		       45 84		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 80		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 81		      sta	Temp+1
     70  f029		       85 82		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 80		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 81		      lda	Temp+1	; And add into result
     77  f031		       65 81		      adc	Temp+1
     78  f033		       85 81		      sta	Temp+1
     79  f035
     80  f035		       a5 82		      lda	Temp+2	; Propagating any carry
     81  f037		       65 82		      adc	Temp+2
     82  f039		       85 82		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 81		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 82		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    138  f044
    139  f044							; Assets
    140  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
------- FILE title_bug.asm LEVEL 2 PASS 2
      0  f0bc					      include	"title_bug.asm"
      1  f0bc				   TitleBug
      2  f0bc
      3  f0bc		       10		      .BYTE.b	%00010000
      4  f0bd		       57		      .BYTE.b	%01010111
      5  f0be		       4f		      .BYTE.b	%01001111
      6  f0bf		       3f		      .BYTE.b	%00111111
      7  f0c0		       19		      .BYTE.b	%00011001
      8  f0c1		       79		      .BYTE.b	%01111001
      9  f0c2		       8f		      .BYTE.b	%10001111
     10  f0c3		       97		      .BYTE.b	%10010111
     11  f0c4		       e0		      .BYTE.b	%11100000
     12  f0c5
     13  f0c5		       57		      .BYTE.b	%01010111
     14  f0c6		       4f		      .BYTE.b	%01001111
     15  f0c7		       3f		      .BYTE.b	%00111111
     16  f0c8		       19		      .BYTE.b	%00011001
     17  f0c9		       7d		      .BYTE.b	%01111101
     18  f0ca		       8f		      .BYTE.b	%10001111
     19  f0cb		       f7		      .BYTE.b	%11110111
     20  f0cc		       00		      .BYTE.b	%00000000
     21  f0cd		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    145  f0ce
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0ce					      include	"objects/score_digits.asm"
      1  f0ce				   ScoreDigits
      2  f0ce
      3  f0ce		       77		      .BYTE.b	%01110111
      4  f0cf		       55		      .BYTE.b	%01010101
      5  f0d0		       55		      .BYTE.b	%01010101
      6  f0d1		       55		      .BYTE.b	%01010101
      7  f0d2		       77		      .BYTE.b	%01110111
      8  f0d3
      9  f0d3		       11		      .BYTE.b	%00010001
     10  f0d4		       11		      .BYTE.b	%00010001
     11  f0d5		       11		      .BYTE.b	%00010001
     12  f0d6		       11		      .BYTE.b	%00010001
     13  f0d7		       11		      .BYTE.b	%00010001
     14  f0d8
     15  f0d8		       77		      .BYTE.b	%01110111
     16  f0d9		       11		      .BYTE.b	%00010001
     17  f0da		       77		      .BYTE.b	%01110111
     18  f0db		       44		      .BYTE.b	%01000100
     19  f0dc		       77		      .BYTE.b	%01110111
     20  f0dd
     21  f0dd		       77		      .BYTE.b	%01110111
     22  f0de		       11		      .BYTE.b	%00010001
     23  f0df		       33		      .BYTE.b	%00110011
     24  f0e0		       11		      .BYTE.b	%00010001
     25  f0e1		       77		      .BYTE.b	%01110111
     26  f0e2
     27  f0e2		       55		      .BYTE.b	%01010101
     28  f0e3		       55		      .BYTE.b	%01010101
     29  f0e4		       77		      .BYTE.b	%01110111
     30  f0e5		       11		      .BYTE.b	%00010001
     31  f0e6		       11		      .BYTE.b	%00010001
     32  f0e7
     33  f0e7		       77		      .BYTE.b	%01110111
     34  f0e8		       44		      .BYTE.b	%01000100
     35  f0e9		       77		      .BYTE.b	%01110111
     36  f0ea		       11		      .BYTE.b	%00010001
     37  f0eb		       77		      .BYTE.b	%01110111
     38  f0ec
     39  f0ec		       77		      .BYTE.b	%01110111
     40  f0ed		       44		      .BYTE.b	%01000100
     41  f0ee		       77		      .BYTE.b	%01110111
     42  f0ef		       55		      .BYTE.b	%01010101
     43  f0f0		       77		      .BYTE.b	%01110111
     44  f0f1
     45  f0f1		       77		      .BYTE.b	%01110111
     46  f0f2		       11		      .BYTE.b	%00010001
     47  f0f3		       22		      .BYTE.b	%00100010
     48  f0f4		       22		      .BYTE.b	%00100010
     49  f0f5		       22		      .BYTE.b	%00100010
     50  f0f6
     51  f0f6		       77		      .BYTE.b	%01110111
     52  f0f7		       55		      .BYTE.b	%01010101
     53  f0f8		       77		      .BYTE.b	%01110111
     54  f0f9		       55		      .BYTE.b	%01010101
     55  f0fa		       77		      .BYTE.b	%01110111
     56  f0fb
     57  f0fb		       77		      .BYTE.b	%01110111
     58  f0fc		       55		      .BYTE.b	%01010101
     59  f0fd		       77		      .BYTE.b	%01110111
     60  f0fe		       11		      .BYTE.b	%00010001
     61  f0ff		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f100					      include	"objects/score_digits_flip.asm"
      1  f100				   ScoreDigitsFlip
      2  f100
      3  f100		       ee		      .BYTE.b	%11101110
      4  f101		       aa		      .BYTE.b	%10101010
      5  f102		       aa		      .BYTE.b	%10101010
      6  f103		       aa		      .BYTE.b	%10101010
      7  f104		       ee		      .BYTE.b	%11101110
      8  f105
      9  f105		       88		      .BYTE.b	%10001000
     10  f106		       88		      .BYTE.b	%10001000
     11  f107		       88		      .BYTE.b	%10001000
     12  f108		       88		      .BYTE.b	%10001000
     13  f109		       88		      .BYTE.b	%10001000
     14  f10a
     15  f10a		       ee		      .BYTE.b	%11101110
     16  f10b		       88		      .BYTE.b	%10001000
     17  f10c		       ee		      .BYTE.b	%11101110
     18  f10d		       22		      .BYTE.b	%00100010
     19  f10e		       ee		      .BYTE.b	%11101110
     20  f10f
     21  f10f		       ee		      .BYTE.b	%11101110
     22  f110		       88		      .BYTE.b	%10001000
     23  f111		       cc		      .BYTE.b	%11001100
     24  f112		       88		      .BYTE.b	%10001000
     25  f113		       ee		      .BYTE.b	%11101110
     26  f114
     27  f114		       aa		      .BYTE.b	%10101010
     28  f115		       aa		      .BYTE.b	%10101010
     29  f116		       ee		      .BYTE.b	%11101110
     30  f117		       88		      .BYTE.b	%10001000
     31  f118		       88		      .BYTE.b	%10001000
     32  f119
     33  f119		       ee		      .BYTE.b	%11101110
     34  f11a		       22		      .BYTE.b	%00100010
     35  f11b		       ee		      .BYTE.b	%11101110
     36  f11c		       88		      .BYTE.b	%10001000
     37  f11d		       ee		      .BYTE.b	%11101110
     38  f11e
     39  f11e		       ee		      .BYTE.b	%11101110
     40  f11f		       22		      .BYTE.b	%00100010
     41  f120		       ee		      .BYTE.b	%11101110
     42  f121		       aa		      .BYTE.b	%10101010
     43  f122		       ee		      .BYTE.b	%11101110
     44  f123
     45  f123		       ee		      .BYTE.b	%11101110
     46  f124		       88		      .BYTE.b	%10001000
     47  f125		       44		      .BYTE.b	%01000100
     48  f126		       44		      .BYTE.b	%01000100
     49  f127		       44		      .BYTE.b	%01000100
     50  f128
     51  f128		       ee		      .BYTE.b	%11101110
     52  f129		       aa		      .BYTE.b	%10101010
     53  f12a		       ee		      .BYTE.b	%11101110
     54  f12b		       aa		      .BYTE.b	%10101010
     55  f12c		       ee		      .BYTE.b	%11101110
     56  f12d
     57  f12d		       ee		      .BYTE.b	%11101110
     58  f12e		       aa		      .BYTE.b	%10101010
     59  f12f		       ee		      .BYTE.b	%11101110
     60  f130		       88		      .BYTE.b	%10001000
     61  f131		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f132					      include	"objects/score_label.asm"
      1  f132				   ScoreLabel
      2  f132
      3  f132		       20		      .BYTE.b	%00100000
      4  f133		       50		      .BYTE.b	%01010000
      5  f134		       ee		      .BYTE.b	%11101110
      6  f135		       00		      .BYTE.b	%00000000
      7  f136		       57		      .BYTE.b	%01010111
      8  f137		       00		      .BYTE.b	%00000000
      9  f138
     10  f138		       20		      .BYTE.b	%00100000
     11  f139		       50		      .BYTE.b	%01010000
     12  f13a		       4a		      .BYTE.b	%01001010
     13  f13b		       00		      .BYTE.b	%00000000
     14  f13c		       55		      .BYTE.b	%01010101
     15  f13d		       00		      .BYTE.b	%00000000
     16  f13e
     17  f13e		       20		      .BYTE.b	%00100000
     18  f13f		       50		      .BYTE.b	%01010000
     19  f140		       4e		      .BYTE.b	%01001110
     20  f141		       00		      .BYTE.b	%00000000
     21  f142		       77		      .BYTE.b	%01110111
     22  f143		       00		      .BYTE.b	%00000000
     23  f144
     24  f144		       20		      .BYTE.b	%00100000
     25  f145		       50		      .BYTE.b	%01010000
     26  f146		       42		      .BYTE.b	%01000010
     27  f147		       00		      .BYTE.b	%00000000
     28  f148		       54		      .BYTE.b	%01010100
     29  f149		       00		      .BYTE.b	%00000000
     30  f14a
     31  f14a		       e0		      .BYTE.b	%11100000
     32  f14b		       20		      .BYTE.b	%00100000
     33  f14c		       42		      .BYTE.b	%01000010
     34  f14d		       00		      .BYTE.b	%00000000
     35  f14e		       54		      .BYTE.b	%01010100
     36  f14f		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    149  f150
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f150					      include	"objects/web_image.asm"
      1  f150				   WebImagePF0
      2  f150		       00		      .BYTE.b	%00000000
      3  f151		       00		      .BYTE.b	%00000000
      4  f152		       00		      .BYTE.b	%00000000
      5  f153		       00		      .BYTE.b	%00000000
      6  f154		       00		      .BYTE.b	%00000000
      7  f155		       00		      .BYTE.b	%00000000
      8  f156		       00		      .BYTE.b	%00000000
      9  f157		       00		      .BYTE.b	%00000000
     10  f158		       30		      .BYTE.b	%00110000
     11  f159		       e0		      .BYTE.b	%11100000
     12  f15a		       20		      .BYTE.b	%00100000
     13  f15b		       40		      .BYTE.b	%01000000
     14  f15c		       40		      .BYTE.b	%01000000
     15  f15d		       80		      .BYTE.b	%10000000
     16  f15e		       80		      .BYTE.b	%10000000
     17  f15f		       40		      .BYTE.b	%01000000
     18  f160		       40		      .BYTE.b	%01000000
     19  f161		       20		      .BYTE.b	%00100000
     20  f162		       e0		      .BYTE.b	%11100000
     21  f163		       30		      .BYTE.b	%00110000
     22  f164		       00		      .BYTE.b	%00000000
     23  f165		       00		      .BYTE.b	%00000000
     24  f166		       00		      .BYTE.b	%00000000
     25  f167		       00		      .BYTE.b	%00000000
     26  f168		       00		      .BYTE.b	%00000000
     27  f169		       00		      .BYTE.b	%00000000
     28  f16a		       00		      .BYTE.b	%00000000
     29  f16b		       00		      .BYTE.b	%00000000
     30  f16c
     31  f16c				   WebImagePF1
     32  f16c		       02		      .BYTE.b	%00000010
     33  f16d		       01		      .BYTE.b	%00000001
     34  f16e		       00		      .BYTE.b	%00000000
     35  f16f		       00		      .BYTE.b	%00000000
     36  f170		       01		      .BYTE.b	%00000001
     37  f171		       01		      .BYTE.b	%00000001
     38  f172		       02		      .BYTE.b	%00000010
     39  f173		       0c		      .BYTE.b	%00001100
     40  f174		       30		      .BYTE.b	%00110000
     41  f175		       c0		      .BYTE.b	%11000000
     42  f176		       38		      .BYTE.b	%00111000
     43  f177		       07		      .BYTE.b	%00000111
     44  f178		       00		      .BYTE.b	%00000000
     45  f179		       00		      .BYTE.b	%00000000
     46  f17a		       00		      .BYTE.b	%00000000
     47  f17b		       00		      .BYTE.b	%00000000
     48  f17c		       07		      .BYTE.b	%00000111
     49  f17d		       38		      .BYTE.b	%00111000
     50  f17e		       c0		      .BYTE.b	%11000000
     51  f17f		       30		      .BYTE.b	%00110000
     52  f180		       0c		      .BYTE.b	%00001100
     53  f181		       02		      .BYTE.b	%00000010
     54  f182		       01		      .BYTE.b	%00000001
     55  f183		       01		      .BYTE.b	%00000001
     56  f184		       00		      .BYTE.b	%00000000
     57  f185		       00		      .BYTE.b	%00000000
     58  f186		       01		      .BYTE.b	%00000001
     59  f187		       02		      .BYTE.b	%00000010
     60  f188
     61  f188				   WebImagePF2
     62  f188		       08		      .BYTE.b	%00001000
     63  f189		       04		      .BYTE.b	%00000100
     64  f18a		       03		      .BYTE.b	%00000011
     65  f18b		       3f		      .BYTE.b	%00111111
     66  f18c		       c2		      .BYTE.b	%11000010
     67  f18d		       04		      .BYTE.b	%00000100
     68  f18e		       08		      .BYTE.b	%00001000
     69  f18f		       08		      .BYTE.b	%00001000
     70  f190		       10		      .BYTE.b	%00010000
     71  f191		       20		      .BYTE.b	%00100000
     72  f192		       20		      .BYTE.b	%00100000
     73  f193		       41		      .BYTE.b	%01000001
     74  f194		       8e		      .BYTE.b	%10001110
     75  f195		       f0		      .BYTE.b	%11110000
     76  f196		       f0		      .BYTE.b	%11110000
     77  f197		       8e		      .BYTE.b	%10001110
     78  f198		       41		      .BYTE.b	%01000001
     79  f199		       20		      .BYTE.b	%00100000
     80  f19a		       20		      .BYTE.b	%00100000
     81  f19b		       10		      .BYTE.b	%00010000
     82  f19c		       08		      .BYTE.b	%00001000
     83  f19d		       08		      .BYTE.b	%00001000
     84  f19e		       04		      .BYTE.b	%00000100
     85  f19f		       c2		      .BYTE.b	%11000010
     86  f1a0		       3f		      .BYTE.b	%00111111
     87  f1a1		       03		      .BYTE.b	%00000011
     88  f1a2		       04		      .BYTE.b	%00000100
     89  f1a3		       08		      .BYTE.b	%00001000
------- FILE kernel.asm
    151  f1a4
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f1a4					      include	"objects/spider_sprite.asm"
      1  f1a4				   SpiderSprite
      2  f1a4
      3  f1a4		       99		      .BYTE.b	%10011001
      4  f1a5		       bd		      .BYTE.b	%10111101
      5  f1a6		       bd		      .BYTE.b	%10111101
      6  f1a7		       bd		      .BYTE.b	%10111101
      7  f1a8		       7e		      .BYTE.b	%01111110
      8  f1a9		       3c		      .BYTE.b	%00111100
      9  f1aa		       18		      .BYTE.b	%00011000
     10  f1ab		       3c		      .BYTE.b	%00111100
     11  f1ac		       3c		      .BYTE.b	%00111100
     12  f1ad		       7e		      .BYTE.b	%01111110
     13  f1ae		       99		      .BYTE.b	%10011001
     14  f1af		       99		      .BYTE.b	%10011001
     15  f1b0		       bd		      .BYTE.b	%10111101
     16  f1b1		       db		      .BYTE.b	%11011011
     17  f1b2		       bd		      .BYTE.b	%10111101
     18  f1b3		       99		      .BYTE.b	%10011001
     19  f1b4
     20  f1b4		       c7		      .BYTE.b	%11000111
     21  f1b5		       c7		      .BYTE.b	%11000111
     22  f1b6		       28		      .BYTE.b	%00101000
     23  f1b7		       28		      .BYTE.b	%00101000
     24  f1b8		       3a		      .BYTE.b	%00111010
     25  f1b9		       7a		      .BYTE.b	%01111010
     26  f1ba		       fd		      .BYTE.b	%11111101
     27  f1bb		       ff		      .BYTE.b	%11111111
     28  f1bc		       ff		      .BYTE.b	%11111111
     29  f1bd		       fd		      .BYTE.b	%11111101
     30  f1be		       7a		      .BYTE.b	%01111010
     31  f1bf		       3a		      .BYTE.b	%00111010
     32  f1c0		       28		      .BYTE.b	%00101000
     33  f1c1		       28		      .BYTE.b	%00101000
     34  f1c2		       c7		      .BYTE.b	%11000111
     35  f1c3		       c7		      .BYTE.b	%11000111
     36  f1c4
     37  f1c4		       99		      .BYTE.b	%10011001
     38  f1c5		       bd		      .BYTE.b	%10111101
     39  f1c6		       db		      .BYTE.b	%11011011
     40  f1c7		       bd		      .BYTE.b	%10111101
     41  f1c8		       99		      .BYTE.b	%10011001
     42  f1c9		       99		      .BYTE.b	%10011001
     43  f1ca		       7e		      .BYTE.b	%01111110
     44  f1cb		       3c		      .BYTE.b	%00111100
     45  f1cc		       3c		      .BYTE.b	%00111100
     46  f1cd		       18		      .BYTE.b	%00011000
     47  f1ce		       3c		      .BYTE.b	%00111100
     48  f1cf		       7e		      .BYTE.b	%01111110
     49  f1d0		       bd		      .BYTE.b	%10111101
     50  f1d1		       bd		      .BYTE.b	%10111101
     51  f1d2		       bd		      .BYTE.b	%10111101
     52  f1d3		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    153  f1d4
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1d4					      include	"objects/swatter_sprite.asm"
      1  f1d4				   SwatterSprite
      2  f1d4
      3  f1d4		       18		      .BYTE.b	%00011000
      4  f1d5		       34		      .BYTE.b	%00110100
      5  f1d6		       2c		      .BYTE.b	%00101100
      6  f1d7		       34		      .BYTE.b	%00110100
      7  f1d8		       6a		      .BYTE.b	%01101010
      8  f1d9		       56		      .BYTE.b	%01010110
      9  f1da		       6a		      .BYTE.b	%01101010
     10  f1db		       56		      .BYTE.b	%01010110
     11  f1dc		       ab		      .BYTE.b	%10101011
     12  f1dd		       d5		      .BYTE.b	%11010101
     13  f1de		       ab		      .BYTE.b	%10101011
     14  f1df		       d5		      .BYTE.b	%11010101
     15  f1e0		       ab		      .BYTE.b	%10101011
     16  f1e1		       d5		      .BYTE.b	%11010101
     17  f1e2		       ab		      .BYTE.b	%10101011
     18  f1e3		       d5		      .BYTE.b	%11010101
     19  f1e4		       6a		      .BYTE.b	%01101010
     20  f1e5		       56		      .BYTE.b	%01010110
     21  f1e6		       3c		      .BYTE.b	%00111100
     22  f1e7		       3c		      .BYTE.b	%00111100
------- FILE kernel.asm
    155  f1e8
------- FILE logo_image.asm LEVEL 2 PASS 2
      0  f1e8					      include	"logo_image.asm"
      1  f1e8				   LogoImage1
      2  f1e8		       03		      .BYTE.b	%00000011
      3  f1e9		       03		      .BYTE.b	%00000011
      4  f1ea		       13		      .BYTE.b	%00010011
      5  f1eb		       33		      .BYTE.b	%00110011
      6  f1ec		       63		      .BYTE.b	%01100011
      7  f1ed		       c3		      .BYTE.b	%11000011
      8  f1ee		       c3		      .BYTE.b	%11000011
      9  f1ef		       63		      .BYTE.b	%01100011
     10  f1f0		       33		      .BYTE.b	%00110011
     11  f1f1		       13		      .BYTE.b	%00010011
     12  f1f2		       03		      .BYTE.b	%00000011
     13  f1f3		       03		      .BYTE.b	%00000011
     14  f1f4
     15  f1f4				   LogoImage2
     16  f1f4		       83		      .BYTE.b	%10000011
     17  f1f5		       c7		      .BYTE.b	%11000111
     18  f1f6		       ef		      .BYTE.b	%11101111
     19  f1f7		       6e		      .BYTE.b	%01101110
     20  f1f8		       6c		      .BYTE.b	%01101100
     21  f1f9		       6c		      .BYTE.b	%01101100
     22  f1fa		       6c		      .BYTE.b	%01101100
     23  f1fb		       6c		      .BYTE.b	%01101100
     24  f1fc		       6e		      .BYTE.b	%01101110
     25  f1fd		       ef		      .BYTE.b	%11101111
     26  f1fe		       c7		      .BYTE.b	%11000111
     27  f1ff		       83		      .BYTE.b	%10000011
     28  f200
     29  f200				   LogoImage3
     30  f200		       8f		      .BYTE.b	%10001111
     31  f201		       cf		      .BYTE.b	%11001111
     32  f202		       ef		      .BYTE.b	%11101111
     33  f203		       6d		      .BYTE.b	%01101101
     34  f204		       2c		      .BYTE.b	%00101100
     35  f205		       0c		      .BYTE.b	%00001100
     36  f206		       0c		      .BYTE.b	%00001100
     37  f207		       4c		      .BYTE.b	%01001100
     38  f208		       6d		      .BYTE.b	%01101101
     39  f209		       ef		      .BYTE.b	%11101111
     40  f20a		       cf		      .BYTE.b	%11001111
     41  f20b		       8f		      .BYTE.b	%10001111
     42  f20c
     43  f20c				   LogoImage4
     44  f20c		       00		      .BYTE.b	%00000000
     45  f20d		       01		      .BYTE.b	%00000001
     46  f20e		       13		      .BYTE.b	%00010011
     47  f20f		       33		      .BYTE.b	%00110011
     48  f210		       63		      .BYTE.b	%01100011
     49  f211		       c3		      .BYTE.b	%11000011
     50  f212		       c3		      .BYTE.b	%11000011
     51  f213		       63		      .BYTE.b	%01100011
     52  f214		       33		      .BYTE.b	%00110011
     53  f215		       13		      .BYTE.b	%00010011
     54  f216		       01		      .BYTE.b	%00000001
     55  f217		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    157  f218
    158  f218				   InitSystem
    159  f218
    160  f218				   .init_clean
    161  f218							; Resets RAM, TIA registers, and CPU registers
      0  f218					      CLEAN_START
      1  f218		       78		      sei
      2  f219		       d8		      cld
      3  f21a
      4  f21a		       a2 00		      ldx	#0
      5  f21c		       8a		      txa
      6  f21d		       a8		      tay
      7  f21e		       ca	   .CLEAR_STACK dex
      8  f21f		       9a		      txs
      9  f220		       48		      pha
     10  f221		       d0 fb		      bne	.CLEAR_STACK
     11  f223
    163  f223
    164  f223				   .init_tia
    165  f223							; Define default TIA register values
    166  f223
    167  f223							; Initialize copies
    168  f223							;    lda #0
    169  f223							;    sta CtrlPf
    170  f223							;    sta NuSiz0
    171  f223							;    sta NuSiz1
    172  f223
    173  f223							; Set background color
    174  f223							;    lda #$00	      ; Black
    175  f223							;    sta COLUBK
    176  f223
    177  f223							; Set the playfield and player color
    178  f223							;    lda #$0E	      ; White
    179  f223							;    sta COLUPF
    180  f223							;    sta COLUP0
    181  f223							;    sta COLUP1
    182  f223
    183  f223							; Playfield Control
    184  f223							;    lda #%00000001  ; 1 for mirroring
    185  f223							;    sta CtrlPf
    186  f223							;    sta CTRLPF
    187  f223
    188  f223							; Disable Game Elements
    189  f223							;    lda #$00
    190  f223							;    sta ENABL       ; Turn off ball
    191  f223							;    sta ENAM0       ; Turn off player 1 missile
    192  f223							;    sta ENAM1       ; Turn off player 2 missile
    193  f223							;    sta GRP0	      ; Turn off player 1
    194  f223							;    sta GRP1	      ; Turn off player 2
    195  f223
    196  f223							; Empty playfield
    197  f223							;    lda #%00000000
    198  f223							;    sta PF0
    199  f223							;    sta PF1
    200  f223							;    sta PF2
    201  f223
    202  f223				   .init_seed
    203  f223							; Seed the random number generator
    204  f223		       ad 84 02 	      lda	INTIM	; Unknown value
    205  f226		       85 83		      sta	Rand8	; Use as seed
    206  f228		       49 ff		      eor	#$FF	; Flip bits
    207  f22a		       85 84		      sta	Rand16	; Just in case INTIM was 0
    208  f22c
    209  f22c				   .init_game
    210  f22c
    211  f22c		       20 94 f2 	      jsr	LogoInit
    212  f22f
    213  f22f							;=======================================
    214  f22f							; Game Kernel
    215  f22f							;=======================================
    216  f22f
    217  f22f				   Main
    218  f22f
    219  f22f		       20 3e f2 	      jsr	VerticalSync
    220  f232		       20 57 f2 	      jsr	VerticalBlank
    221  f235		       20 6a f2 	      jsr	Kernel
    222  f238		       20 71 f2 	      jsr	OverScan
    223  f23b		       4c 2f f2 	      jmp	Main
    224  f23e
    225  f23e				   VerticalSync
    226  f23e
    227  f23e		       a9 00		      lda	#0
    228  f240		       85 01		      sta	VBLANK
    229  f242
    230  f242							; Turn on Vertical Sync signal and setup timer
    231  f242		       a9 02		      lda	#2
    232  f244		       85 00		      sta	VSYNC
    233  f246
    234  f246							; Increment frame count and reduce frame counter
    235  f246		       e6 8b		      inc	Frame
    236  f248		       c6 8c		      dec	FrameTimer
    237  f24a		       c6 8d		      dec	FrameTimer+1
    238  f24c
    239  f24c							; VSYNCH signal scanlines
    240  f24c					      REPEAT	#KERNEL_VSYNC
    241  f24c		       85 02		      sta	WSYNC
    240  f24c					      REPEND
    241  f24e		       85 02		      sta	WSYNC
    240  f24e					      REPEND
    241  f250		       85 02		      sta	WSYNC
    242  f252					      REPEND
    243  f252
    244  f252							; Turn off Vertical Sync signal
    245  f252		       a9 00		      lda	#0
    246  f254		       85 00		      sta	VSYNC
    247  f256
    248  f256				   .vsync_return
    249  f256		       60		      rts
    250  f257
    251  f257				   VerticalBlank
    252  f257							; Setup Timer
    253  f257		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    254  f259		       8d 96 02 	      sta	TIM64T
    255  f25c
    256  f25c				   .vblank_logic
    257  f25c							; Perform Game Logic
    258  f25c		       20 67 f2 	      jsr	.vblank_logic_call_ptr
    259  f25f
    260  f25f				   .vblank_loop
    261  f25f							; WSYNC until Timer is complete
    262  f25f		       85 02		      sta	WSYNC
    263  f261		       ad 84 02 	      lda	INTIM
    264  f264		       d0 f9		      bne	.vblank_loop
    265  f266
    266  f266				   .vblank_return
    267  f266		       60		      rts
    268  f267
    269  f267				   .vblank_logic_call_ptr
    270  f267		       6c 85 00 	      jmp	(VBlankPtr)
    271  f26a
    272  f26a				   Kernel
    273  f26a
    274  f26a							; Perform Selected Kernel
    275  f26a		       20 6e f2 	      jsr	.kernel_call_ptr
    276  f26d		       60		      rts
    277  f26e
    278  f26e				   .kernel_call_ptr
    279  f26e		       6c 87 00 	      jmp	(KernelPtr)
    280  f271
    281  f271				   OverScan
    282  f271
    283  f271							; End of screen, enter blanking
    284  f271		       a9 42		      lda	#%01000010
    285  f273		       85 01		      sta	VBLANK
    286  f275
    287  f275							; Setup Timer
    288  f275		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    289  f277		       8d 96 02 	      sta	TIM64T
    290  f27a
    291  f27a							;.overscan_reset:
    292  f27a							; Check for reset switch
    293  f27a		       ad 82 02 	      lda	SWCHB
    294  f27d		       4a		      lsr		; Push D0 to carry (C)
    295  f27e		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    296  f280
    297  f280							; Perform reset
    298  f280		       20 94 f2 	      jsr	LogoInit	; No need for logic
    299  f283		       4c 89 f2 	      jmp	.overscan_loop
    300  f286
    301  f286				   .overscan_logic
    302  f286							; Perform OverScan Logic
    303  f286		       20 91 f2 	      jsr	.overscan_logic_call_ptr
    304  f289
    305  f289				   .overscan_loop
    306  f289							; WSYNC until Timer is complete
    307  f289		       85 02		      sta	WSYNC
    308  f28b		       ad 84 02 	      lda	INTIM
    309  f28e		       d0 f9		      bne	.overscan_loop
    310  f290
    311  f290				   .overscan_return
    312  f290		       60		      rts
    313  f291
    314  f291				   .overscan_logic_call_ptr
    315  f291		       6c 89 00 	      jmp	(OverScanPtr)
    316  f294
    317  f294							;================
    318  f294							; State Code
    319  f294							;================
    320  f294
------- FILE logo.asm LEVEL 2 PASS 2
      0  f294					      include	"logo.asm"
      1  f294							;================
      2  f294							; Constants
      3  f294							;================
      4  f294
      5  f294		       00 8c	   LOGO_FRAMES =	140
      6  f294
      7  f294		       00 00	   LOGO_BG_COLOR =	#$00
      8  f294		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f294		       00 00	   LOGO_BG_BW_COLOR =	#$00
     10  f294		       00 0e	   LOGO_FG_BW_COLOR =	#$0E
     11  f294
     12  f294		       00 0c	   LOGO_IMAGE_SIZE =	12
     13  f294		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     14  f294		       00 3c	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     15  f294		       00 42	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     16  f294		       00 38	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-10	; The extra 10 is for processing overflow
     17  f294		       00 06	   LOGO_IMAGE_ANIM_SPEED =	#6
     18  f294
     19  f294				   LogoInit
     20  f294
     21  f294							; Setup logic and kernel
      0  f294					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f294				   .POINTER   SET	VBlankPtr
      2  f294				   .ADDRESS   SET	LogoVerticalBlank
      3  f294
      4  f294		       a9 bf		      LDA	#<.ADDRESS
      5  f296		       85 85		      STA	.POINTER
      6  f298		       a9 f2		      LDA	#>.ADDRESS
      7  f29a		       85 86		      STA	.POINTER+1
      8  f29c
      0  f29c					      SET_POINTER	KernelPtr, LogoKernel
      1  f29c				   .POINTER   SET	KernelPtr
      2  f29c				   .ADDRESS   SET	LogoKernel
      3  f29c
      4  f29c		       a9 ed		      LDA	#<.ADDRESS
      5  f29e		       85 87		      STA	.POINTER
      6  f2a0		       a9 f2		      LDA	#>.ADDRESS
      7  f2a2		       85 88		      STA	.POINTER+1
      8  f2a4
      0  f2a4					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f2a4				   .POINTER   SET	OverScanPtr
      2  f2a4				   .ADDRESS   SET	LogoOverScan
      3  f2a4
      4  f2a4		       a9 c3		      LDA	#<.ADDRESS
      5  f2a6		       85 89		      STA	.POINTER
      6  f2a8		       a9 f2		      LDA	#>.ADDRESS
      7  f2aa		       85 8a		      STA	.POINTER+1
      8  f2ac
     25  f2ac
     26  f2ac							; Clean audio
     27  f2ac		       a9 00		      lda	#0
     28  f2ae		       85 19		      sta	AUDV0
     29  f2b0		       85 1a		      sta	AUDV1
     30  f2b2
     31  f2b2							; Set initial button state
     32  f2b2							;    lda #0
     33  f2b2		       85 8e		      sta	InputState
     34  f2b4
     35  f2b4							; Setup frame counters
     36  f2b4							;    lda #0
     37  f2b4		       85 8b		      sta	Frame
     38  f2b6		       a9 8c		      lda	#LOGO_FRAMES
     39  f2b8		       85 8c		      sta	FrameTimer
     40  f2ba
     41  f2ba							; Setup Image Animation
     42  f2ba		       a9 0b		      lda	#LOGO_IMAGE_SIZE-1
     43  f2bc		       85 9d		      sta	WebIndex
     44  f2be
     45  f2be		       60		      rts
     46  f2bf
     47  f2bf				   LogoVerticalBlank
     48  f2bf		       20 c7 f2 	      jsr	LogoAnimation
     49  f2c2		       60		      rts
     50  f2c3
     51  f2c3				   LogoOverScan
     52  f2c3		       20 d8 f2 	      jsr	LogoState
     53  f2c6		       60		      rts
     54  f2c7
     55  f2c7				   LogoAnimation
     56  f2c7		       a5 8b		      lda	Frame
     57  f2c9		       c9 06		      cmp	#LOGO_IMAGE_ANIM_SPEED
     58  f2cb		       d0 0a		      bne	.logo_animation_return
     59  f2cd
     60  f2cd		       a9 00		      lda	#0
     61  f2cf		       85 8b		      sta	Frame
     62  f2d1
     63  f2d1		       a6 9d		      ldx	WebIndex
     64  f2d3		       f0 02		      beq	.logo_animation_return
     65  f2d5
     66  f2d5							; Add another visible line
     67  f2d5		       c6 9d		      dec	WebIndex
     68  f2d7
     69  f2d7				   .logo_animation_return
     70  f2d7		       60		      rts
     71  f2d8
     72  f2d8				   LogoState
     73  f2d8		       a5 8c		      lda	FrameTimer
     74  f2da		       f0 0d		      beq	.logo_state_next
     75  f2dc
     76  f2dc							; Check if Fire Button on controller 1 is released
     77  f2dc		       a5 0c		      lda	INPT4
     78  f2de		       30 05		      bmi	.logo_state_check
     79  f2e0
     80  f2e0				   .logo_state_on
     81  f2e0		       a9 01		      lda	#1
     82  f2e2		       85 8e		      sta	InputState
     83  f2e4		       60		      rts
     84  f2e5
     85  f2e5				   .logo_state_check
     86  f2e5		       a6 8e		      ldx	InputState
     87  f2e7		       f0 03		      beq	.logo_state_return
     88  f2e9
     89  f2e9				   .logo_state_next
     90  f2e9							; Button is released or timer runs out, load title screen
     91  f2e9		       20 7c f3 	      jsr	TitleInit
     92  f2ec
     93  f2ec				   .logo_state_return
     94  f2ec		       60		      rts
     95  f2ed
     96  f2ed				   LogoKernel
     97  f2ed
     98  f2ed							; Playfield Control
     99  f2ed		       a9 01		      lda	#%00000001	; Mirror
    100  f2ef							;sta CtrlPf
    101  f2ef		       85 0a		      sta	CTRLPF
    102  f2f1
    103  f2f1							; Load Colors
    104  f2f1		       ad 82 02 	      lda	SWCHB
    105  f2f4					      REPEAT	4
    106  f2f4		       4a		      lsr
    105  f2f4					      REPEND
    106  f2f5		       4a		      lsr
    105  f2f5					      REPEND
    106  f2f6		       4a		      lsr
    105  f2f6					      REPEND
    106  f2f7		       4a		      lsr
    107  f2f8					      REPEND
    108  f2f8		       90 07		      bcc	.logo_kernel_bw
    109  f2fa
    110  f2fa				   .logo_kernel_color
    111  f2fa		       a2 00		      ldx	#LOGO_BG_COLOR
    112  f2fc		       a0 c6		      ldy	#LOGO_FG_COLOR
    113  f2fe		       4c 05 f3 	      jmp	.logo_kernel_set
    114  f301
    115  f301				   .logo_kernel_bw
    116  f301		       a9 00		      lda	#LOGO_BG_BW_COLOR
    117  f303		       a9 0e		      lda	#LOGO_FG_BW_COLOR
    118  f305
    119  f305				   .logo_kernel_set
    120  f305		       86 09		      stx	COLUBK
    121  f307		       84 08		      sty	COLUPF
    122  f309
    123  f309				   .logo_kernel_start
    124  f309
    125  f309							; Turn on display
    126  f309		       a9 00		      lda	#0
    127  f30b		       85 01		      sta	VBLANK
    128  f30d
    129  f30d		       a4 9d		      ldy	WebIndex
    130  f30f		       d0 06		      bne	.logo_kernel_top_anim_padding
    131  f311
    132  f311				   .logo_kernel_top_padding
    133  f311							; Top Padding
    134  f311		       20 5f f3 	      jsr	LogoPadding
    135  f314		       4c 24 f3 	      jmp	.logo_kernel_image
    136  f317
    137  f317				   .logo_kernel_top_anim_padding
    138  f317		       20 6f f3 	      jsr	LogoAnimPadding
    139  f31a
    140  f31a				   .logo_kernel_image_animation_start
    141  f31a		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    142  f31c
    143  f31c				   .logo_kernel_image_animation_loop
    144  f31c		       85 02		      sta	WSYNC
    145  f31e		       ca		      dex
    146  f31f		       d0 fb		      bne	.logo_kernel_image_animation_loop
    147  f321
    148  f321		       88		      dey
    149  f322		       10 f6		      bpl	.logo_kernel_image_animation_start
    150  f324
    151  f324				   .logo_kernel_image
    152  f324
    153  f324		       a2 0b		      ldx	#LOGO_IMAGE_SIZE-1
    154  f326		       a0 03		      ldy	#LOGO_IMAGE_LINE_SIZE-2
    155  f328							; The extra 2 on line size is for processing overflow
    156  f328
    157  f328							;dex
    158  f328		       e4 9d		      cpx	WebIndex
    159  f32a		       90 2f		      bcc	.logo_kernel_bottom_padding
    160  f32c
    161  f32c				   .logo_kernel_image_line
    162  f32c		       85 02		      sta	WSYNC
    163  f32e
    164  f32e		       bd e8 f1 	      lda	LogoImage1,x
    165  f331		       85 0e		      sta	PF1
    166  f333		       bd f4 f1 	      lda	LogoImage2,x
    167  f336		       85 0f		      sta	PF2
    168  f338
      0  f338					      sleep	26
      1  f338				   .CYCLES    SET	26
      2  f338
      3  f338				  -	      IF	.CYCLES < 2
      4  f338				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f338				  -	      ERR
      6  f338					      ENDIF
      7  f338
      8  f338				  -	      IF	.CYCLES & 1
      9  f338				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f338				  -	      nop	0
     11  f338				  -	      ELSE
     12  f338				  -	      bit	VSYNC
     13  f338				  -	      ENDIF
     14  f338				  -.CYCLES    SET	.CYCLES - 3
     15  f338					      ENDIF
     16  f338
     17  f338					      REPEAT	.CYCLES / 2
     18  f338		       ea		      nop
     17  f338					      REPEND
     18  f339		       ea		      nop
     17  f339					      REPEND
     18  f33a		       ea		      nop
     17  f33a					      REPEND
     18  f33b		       ea		      nop
     17  f33b					      REPEND
     18  f33c		       ea		      nop
     17  f33c					      REPEND
     18  f33d		       ea		      nop
     17  f33d					      REPEND
     18  f33e		       ea		      nop
     17  f33e					      REPEND
     18  f33f		       ea		      nop
     17  f33f					      REPEND
     18  f340		       ea		      nop
     17  f340					      REPEND
     18  f341		       ea		      nop
     17  f341					      REPEND
     18  f342		       ea		      nop
     17  f342					      REPEND
     18  f343		       ea		      nop
     17  f343					      REPEND
     18  f344		       ea		      nop
     19  f345					      REPEND
    170  f345
    171  f345		       bd 00 f2 	      lda	LogoImage3,x
    172  f348		       85 0f		      sta	PF2
    173  f34a		       bd 0c f2 	      lda	LogoImage4,x
    174  f34d		       85 0e		      sta	PF1
    175  f34f
    176  f34f		       88		      dey
    177  f350		       d0 da		      bne	.logo_kernel_image_line
    178  f352
    179  f352		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    180  f354
    181  f354		       e4 9d		      cpx	WebIndex
    182  f356		       90 03		      bcc	.logo_kernel_bottom_padding
    183  f358
    184  f358		       ca		      dex
    185  f359		       10 d1		      bpl	.logo_kernel_image_line
    186  f35b
    187  f35b				   .logo_kernel_bottom_padding
    188  f35b							; Bottom Padding
    189  f35b		       20 5f f3 	      jsr	LogoPadding
    190  f35e
    191  f35e				   .logo_kernel_image_return
    192  f35e		       60		      rts
    193  f35f
    194  f35f				   LogoPadding
    195  f35f		       a9 00		      lda	#0
    196  f361		       85 0d		      sta	PF0
    197  f363		       85 0e		      sta	PF1
    198  f365		       85 0f		      sta	PF2
    199  f367
    200  f367		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    201  f369				   .logo_padding_loop
    202  f369		       85 02		      sta	WSYNC
    203  f36b		       ca		      dex
    204  f36c		       d0 fb		      bne	.logo_padding_loop
    205  f36e
    206  f36e		       60		      rts
    207  f36f
    208  f36f				   LogoAnimPadding
    209  f36f		       a9 00		      lda	#0
    210  f371		       85 0d		      sta	PF0
    211  f373		       85 0e		      sta	PF1
    212  f375		       85 0f		      sta	PF2
    213  f377
    214  f377		       a2 38		      ldx	#LOGO_IMAGE_ANIM_PADDING
    215  f379		       4c 69 f3 	      jmp	.logo_padding_loop
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f37c					      include	"title.asm"
      1  f37c							;================
      2  f37c							; Constants
      3  f37c							;================
      4  f37c
      5  f37c		       00 00	   TITLE_BG_COLOR =	#$00
      6  f37c		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f37c		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f37c		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f37c		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f37c
     11  f37c		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f37c		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f37c		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f37c		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f37c		       00 09	   TITLE_AUDIO_STEP =	9
     16  f37c
     17  f37c		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f37c		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f37c		       00 07	   TITLE_LABEL_LINE =	7
     20  f37c
     21  f37c		       00 10	   TITLE_GAP_SIZE =	#16
     22  f37c
     23  f37c		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f37c		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f37c		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f37c
     27  f37c				   TitleInit
     28  f37c
     29  f37c							; Setup logic and kernel
      0  f37c					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f37c				   .POINTER   SET	VBlankPtr
      2  f37c				   .ADDRESS   SET	TitleVerticalBlank
      3  f37c
      4  f37c		       a9 cd		      LDA	#<.ADDRESS
      5  f37e		       85 85		      STA	.POINTER
      6  f380		       a9 f3		      LDA	#>.ADDRESS
      7  f382		       85 86		      STA	.POINTER+1
      8  f384
      0  f384					      SET_POINTER	KernelPtr, TitleKernel
      1  f384				   .POINTER   SET	KernelPtr
      2  f384				   .ADDRESS   SET	TitleKernel
      3  f384
      4  f384		       a9 da		      LDA	#<.ADDRESS
      5  f386		       85 87		      STA	.POINTER
      6  f388		       a9 f4		      LDA	#>.ADDRESS
      7  f38a		       85 88		      STA	.POINTER+1
      8  f38c
      0  f38c					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f38c				   .POINTER   SET	OverScanPtr
      2  f38c				   .ADDRESS   SET	TitleOverScan
      3  f38c
      4  f38c		       a9 90		      LDA	#<.ADDRESS
      5  f38e		       85 89		      STA	.POINTER
      6  f390		       a9 f4		      LDA	#>.ADDRESS
      7  f392		       85 8a		      STA	.POINTER+1
      8  f394
     33  f394
     34  f394							; Load audio settings
     35  f394
     36  f394							; Melody Line
     37  f394		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f396		       85 15		      sta	AUDC0
     39  f398		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     40  f39a		       85 19		      sta	AUDV0
     41  f39c
     42  f39c							; Drums and Bass
     43  f39c		       a9 00		      lda	#0
     44  f39e							;sta AUDC1
     45  f39e		       85 1a		      sta	AUDV1
     46  f3a0
     47  f3a0							; Make it so that we play the first note immediately
     48  f3a0		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     49  f3a2		       85 8f		      sta	AudioStep
     50  f3a4		       a9 01		      lda	#1
     51  f3a6		       85 8c		      sta	FrameTimer
     52  f3a8
     53  f3a8							; Setup Spider Sprite
      0  f3a8					      SET_POINTER	SpiderPtr, TitleSpider
      1  f3a8				   .POINTER   SET	SpiderPtr
      2  f3a8				   .ADDRESS   SET	TitleSpider
      3  f3a8
      4  f3a8		       a9 aa		      LDA	#<.ADDRESS
      5  f3aa		       85 a0		      STA	.POINTER
      6  f3ac		       a9 f0		      LDA	#>.ADDRESS
      7  f3ae		       85 a1		      STA	.POINTER+1
      8  f3b0
     55  f3b0
     56  f3b0		       a9 16		      lda	#%00010110	; Triple Sprite and 2 clock size missle0
     57  f3b2		       85 04		      sta	NUSIZ0
     58  f3b4		       a9 06		      lda	#%00000110	; Triple Sprite
     59  f3b6		       85 05		      sta	NUSIZ1
     60  f3b8
     61  f3b8		       a9 00		      lda	#0	; No reflect
     62  f3ba		       85 0b		      sta	REFP0
     63  f3bc		       a9 ff		      lda	#$FF	; Reflect P1
     64  f3be		       85 0c		      sta	REFP1
     65  f3c0
     66  f3c0		       a9 00		      lda	#0
     67  f3c2		       85 a7		      sta	SpiderDrawPos	; Initialize animation state
     68  f3c4
     69  f3c4							; Disable at start
     70  f3c4		       a9 00		      lda	#0
     71  f3c6		       85 1d		      sta	ENAM0
     72  f3c8
     73  f3c8							; Set initial button state
     74  f3c8							;lda #0
     75  f3c8		       85 8e		      sta	InputState
     76  f3ca
     77  f3ca							; Set initial select state
     78  f3ca		       85 82		      sta	Temp+2
     79  f3cc
     80  f3cc		       60		      rts
     81  f3cd
     82  f3cd				   TitleVerticalBlank
     83  f3cd
     84  f3cd							; Refresh random values
     85  f3cd		       20 13 f0 	      jsr	Random
     86  f3d0
     87  f3d0		       20 da f3 	      jsr	TitlePosition
     88  f3d3		       20 f4 f3 	      jsr	TitleAnimation
     89  f3d6		       20 71 f4 	      jsr	TitleColor
     90  f3d9
     91  f3d9		       60		      rts
     92  f3da
     93  f3da				   TitlePosition
     94  f3da
     95  f3da							; Position Spider
     96  f3da		       a2 00		      ldx	#0	; Object (player0)
     97  f3dc		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
     98  f3de		       20 00 f0 	      jsr	PosObject
     99  f3e1
    100  f3e1		       a2 01		      ldx	#1	; Object (player1)
    101  f3e3		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    102  f3e5		       20 00 f0 	      jsr	PosObject
    103  f3e8
    104  f3e8							; Position Web Line
    105  f3e8		       a2 02		      ldx	#2	; Object (missle0)
    106  f3ea		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    107  f3ec		       20 00 f0 	      jsr	PosObject
    108  f3ef
    109  f3ef		       85 02		      sta	WSYNC
    110  f3f1		       85 2a		      sta	HMOVE
    111  f3f3
    112  f3f3		       60		      rts
    113  f3f4
    114  f3f4				   TitleAnimation
    115  f3f4
    116  f3f4		       ad 82 02 	      lda	SWCHB
    117  f3f7		       29 02		      and	#%00000010
    118  f3f9		       d0 09		      bne	.title_animation_state_check
    119  f3fb
    120  f3fb		       a5 82		      lda	Temp+2
    121  f3fd
    122  f3fd				   .title_animation_state_on
    123  f3fd		       09 40		      ora	#%01000000
    124  f3ff		       85 82		      sta	Temp+2
    125  f401		       4c 17 f4 	      jmp	.title_animation_load
    126  f404
    127  f404				   .title_animation_state_check
    128  f404		       24 82		      bit	Temp+2
    129  f406		       50 0f		      bvc	.title_animation_load
    130  f408
    131  f408		       a5 82		      lda	Temp+2
    132  f40a		       29 bf		      and	#%10111111
    133  f40c
    134  f40c				   .title_animation_state_swap
    135  f40c		       10 05		      bpl	.title_animation_state_bug
    136  f40e
    137  f40e				   .title_animation_state_spider
    138  f40e		       29 7f		      and	#%01111111
    139  f410		       4c 15 f4 	      jmp	.title_animation_state_set
    140  f413
    141  f413				   .title_animation_state_bug
    142  f413		       09 80		      ora	#%10000000
    143  f415
    144  f415				   .title_animation_state_set
    145  f415		       85 82		      sta	Temp+2
    146  f417
    147  f417				   .title_animation_load
    148  f417
    149  f417		       24 82		      bit	Temp+2
    150  f419		       30 2b		      bmi	.title_animation_bug
    151  f41b
    152  f41b				   .title_animation_spider
    153  f41b
    154  f41b		       a5 8f		      lda	AudioStep
    155  f41d		       f0 0d		      beq	.title_animation_spider_1
    156  f41f		       c9 04		      cmp	#4
    157  f421		       f0 16		      beq	.title_animation_spider_2
    158  f423		       c9 09		      cmp	#9
    159  f425		       f0 05		      beq	.title_animation_spider_1
    160  f427		       c9 0c		      cmp	#12
    161  f429		       f0 0e		      beq	.title_animation_spider_2
    162  f42b		       60		      rts
    163  f42c
    164  f42c				   .title_animation_spider_1
      0  f42c					      SET_POINTER	SpiderPtr, TitleSpider
      1  f42c				   .POINTER   SET	SpiderPtr
      2  f42c				   .ADDRESS   SET	TitleSpider
      3  f42c
      4  f42c		       a9 aa		      LDA	#<.ADDRESS
      5  f42e		       85 a0		      STA	.POINTER
      6  f430		       a9 f0		      LDA	#>.ADDRESS
      7  f432		       85 a1		      STA	.POINTER+1
      8  f434
    166  f434		       a9 00		      lda	#0
    167  f436		       4c 6e f4 	      jmp	.title_animation_return
    168  f439
    169  f439				   .title_animation_spider_2
      0  f439					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f439				   .POINTER   SET	SpiderPtr
      2  f439				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f439
      4  f439		       a9 b3		      LDA	#<.ADDRESS
      5  f43b		       85 a0		      STA	.POINTER
      6  f43d		       a9 f0		      LDA	#>.ADDRESS
      7  f43f		       85 a1		      STA	.POINTER+1
      8  f441
    171  f441		       a9 01		      lda	#1
    172  f443		       4c 6e f4 	      jmp	.title_animation_return
    173  f446
    174  f446				   .title_animation_bug
    175  f446
    176  f446		       a5 8f		      lda	AudioStep
    177  f448		       f0 0d		      beq	.title_animation_bug_1
    178  f44a		       c9 04		      cmp	#4
    179  f44c		       f0 16		      beq	.title_animation_bug_2
    180  f44e		       c9 09		      cmp	#9
    181  f450		       f0 05		      beq	.title_animation_bug_1
    182  f452		       c9 0c		      cmp	#12
    183  f454		       f0 0e		      beq	.title_animation_bug_2
    184  f456		       60		      rts
    185  f457
    186  f457				   .title_animation_bug_1
      0  f457					      SET_POINTER	SpiderPtr, TitleBug
      1  f457				   .POINTER   SET	SpiderPtr
      2  f457				   .ADDRESS   SET	TitleBug
      3  f457
      4  f457		       a9 bc		      LDA	#<.ADDRESS
      5  f459		       85 a0		      STA	.POINTER
      6  f45b		       a9 f0		      LDA	#>.ADDRESS
      7  f45d		       85 a1		      STA	.POINTER+1
      8  f45f
    188  f45f		       a9 00		      lda	#0
    189  f461		       4c 6e f4 	      jmp	.title_animation_return
    190  f464
    191  f464				   .title_animation_bug_2
      0  f464					      SET_POINTER	SpiderPtr, TitleBug+#TITLE_SPIDER_SIZE
      1  f464				   .POINTER   SET	SpiderPtr
      2  f464				   .ADDRESS   SET	TitleBug+#TITLE_SPIDER_SIZE
      3  f464
      4  f464		       a9 c5		      LDA	#<.ADDRESS
      5  f466		       85 a0		      STA	.POINTER
      6  f468		       a9 f0		      LDA	#>.ADDRESS
      7  f46a		       85 a1		      STA	.POINTER+1
      8  f46c
    193  f46c		       a9 01		      lda	#1
    194  f46e
    195  f46e				   .title_animation_return
    196  f46e		       85 a7		      sta	SpiderDrawPos
    197  f470		       60		      rts
    198  f471
    199  f471				   TitleColor
    200  f471
    201  f471							; Load Colors
    202  f471		       a9 00		      lda	#TITLE_BG_COLOR
    203  f473		       85 09		      sta	COLUBK
    204  f475		       a9 06		      lda	#TITLE_WEB_COLOR
    205  f477		       85 08		      sta	COLUPF
    206  f479
    207  f479							; Check b/w
    208  f479		       ad 82 02 	      lda	SWCHB
    209  f47c					      REPEAT	4
    210  f47c		       4a		      lsr
    209  f47c					      REPEND
    210  f47d		       4a		      lsr
    209  f47d					      REPEND
    210  f47e		       4a		      lsr
    209  f47e					      REPEND
    210  f47f		       4a		      lsr
    211  f480					      REPEND
    212  f480		       90 07		      bcc	.title_bw
    213  f482
    214  f482				   .title_color
    215  f482		       a9 56		      lda	#TITLE_SPIDER_COLOR
    216  f484		       85 06		      sta	COLUP0
    217  f486		       85 07		      sta	COLUP1
    218  f488
    219  f488		       60		      rts
    220  f489
    221  f489				   .title_bw
    222  f489							; Load B/W Colors
    223  f489		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    224  f48b		       85 06		      sta	COLUP0
    225  f48d		       85 07		      sta	COLUP1
    226  f48f
    227  f48f		       60		      rts
    228  f490
    229  f490				   TitleOverScan
    230  f490		       20 97 f4 	      jsr	TitleAudio
    231  f493		       20 c9 f4 	      jsr	TitleState
    232  f496		       60		      rts
    233  f497
    234  f497				   TitleAudio
    235  f497
    236  f497		       a6 8c		      ldx	FrameTimer
    237  f499		       d0 2d		      bne	.title_audio_return
    238  f49b
    239  f49b							; Reset Timer
    240  f49b		       a2 09		      ldx	#TITLE_AUDIO_STEP
    241  f49d		       86 8c		      stx	FrameTimer
    242  f49f
    243  f49f				   .title_audio_play
    244  f49f
    245  f49f							; Increment melody position
    246  f49f		       a4 8f		      ldy	AudioStep
    247  f4a1		       c8		      iny
    248  f4a2
    249  f4a2							; Check if we're at the end of the melody
    250  f4a2		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    251  f4a4		       d0 02		      bne	.title_audio_play_note
    252  f4a6
    253  f4a6							; Loop our audio step
    254  f4a6		       a0 00		      ldy	#0
    255  f4a8
    256  f4a8				   .title_audio_play_note
    257  f4a8
    258  f4a8							; Save current position
    259  f4a8		       84 8f		      sty	AudioStep
    260  f4aa
    261  f4aa							; Basic Melody Line
    262  f4aa		       b9 cb f5 	      lda	TitleAudio0,y
    263  f4ad		       85 17		      sta	AUDF0
    264  f4af
    265  f4af							; Drums and Bass
    266  f4af		       b9 db f5 	      lda	TitleTone1,y
    267  f4b2		       c9 ff		      cmp	#$FF
    268  f4b4		       f0 0e		      beq	.title_audio_play_note_1_mute
    269  f4b6
    270  f4b6		       85 16		      sta	AUDC1
    271  f4b8		       b9 eb f5 	      lda	TitleAudio1,y
    272  f4bb		       85 18		      sta	AUDF1
    273  f4bd		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    274  f4bf		       85 1a		      sta	AUDV1
    275  f4c1
    276  f4c1		       4c c8 f4 	      jmp	.title_audio_return
    277  f4c4
    278  f4c4				   .title_audio_play_note_1_mute
    279  f4c4
    280  f4c4		       a9 00		      lda	#0
    281  f4c6							;sta AUDF1
    282  f4c6							;sta AUDC1
    283  f4c6		       85 1a		      sta	AUDV1
    284  f4c8
    285  f4c8				   .title_audio_return
    286  f4c8		       60		      rts
    287  f4c9
    288  f4c9				   TitleState
    289  f4c9
    290  f4c9							; Check if Fire Button on controller 1 is released
    291  f4c9		       a5 0c		      lda	INPT4
    292  f4cb		       30 05		      bmi	.title_state_check
    293  f4cd
    294  f4cd				   .title_state_on
    295  f4cd		       a9 01		      lda	#1
    296  f4cf		       85 8e		      sta	InputState
    297  f4d1		       60		      rts
    298  f4d2
    299  f4d2				   .title_state_check
    300  f4d2		       a5 8e		      lda	InputState
    301  f4d4		       f0 03		      beq	.title_state_return
    302  f4d6
    303  f4d6				   .title_state_next
    304  f4d6							; Button is released, load up game
    305  f4d6		       20 38 fd 	      jsr	GameInit
    306  f4d9
    307  f4d9				   .title_state_return
    308  f4d9		       60		      rts
    309  f4da
    310  f4da				   TitleKernel
    311  f4da
    312  f4da							; Playfield Control
    313  f4da							;lda CtrlPf
    314  f4da							;and #%11111110  ; No mirroring
    315  f4da							;sta CtrlPf
    316  f4da		       a9 00		      lda	#%00000000
    317  f4dc		       85 0a		      sta	CTRLPF
    318  f4de
    319  f4de							; Turn on display
    320  f4de		       a9 00		      lda	#0
    321  f4e0		       85 01		      sta	VBLANK
    322  f4e2
    323  f4e2		       85 02		      sta	WSYNC
    324  f4e4
    325  f4e4				   TitleFrameTopDraw
    326  f4e4
    327  f4e4							; Start Counters
    328  f4e4		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    329  f4e6		       a0 00		      ldy	#0	; Image Counter
    330  f4e8
    331  f4e8				   .title_frame_top
    332  f4e8
    333  f4e8							; 76 machine cycles per scanline
    334  f4e8		       85 02		      sta	WSYNC
    335  f4ea
    336  f4ea				   .title_frame_top_load		; 66 cycles
    337  f4ea
    338  f4ea							; First half of image
    339  f4ea		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    340  f4ed		       85 0d		      sta	PF0	; 4
    341  f4ef		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    342  f4f2		       85 0e		      sta	PF1	; 4
    343  f4f4		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    344  f4f7		       85 0f		      sta	PF2	; 4
    345  f4f9
      0  f4f9					      sleep	6
      1  f4f9				   .CYCLES    SET	6
      2  f4f9
      3  f4f9				  -	      IF	.CYCLES < 2
      4  f4f9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4f9				  -	      ERR
      6  f4f9					      ENDIF
      7  f4f9
      8  f4f9				  -	      IF	.CYCLES & 1
      9  f4f9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4f9				  -	      nop	0
     11  f4f9				  -	      ELSE
     12  f4f9				  -	      bit	VSYNC
     13  f4f9				  -	      ENDIF
     14  f4f9				  -.CYCLES    SET	.CYCLES - 3
     15  f4f9					      ENDIF
     16  f4f9
     17  f4f9					      REPEAT	.CYCLES / 2
     18  f4f9		       ea		      nop
     17  f4f9					      REPEND
     18  f4fa		       ea		      nop
     17  f4fa					      REPEND
     18  f4fb		       ea		      nop
     19  f4fc					      REPEND
    347  f4fc
    348  f4fc							; Second half of image
    349  f4fc		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    350  f4ff		       85 0d		      sta	PF0	; 4
    351  f501		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    352  f504		       85 0e		      sta	PF1	; 4
    353  f506		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    354  f509		       85 0f		      sta	PF2	; 4
    355  f50b
    356  f50b				   .title_frame_top_index		; 4 cycles
    357  f50b
    358  f50b		       ca		      dex		; 2
    359  f50c		       d0 da		      bne	.title_frame_top	; 2
    360  f50e
    361  f50e				   .title_frame_top_index_next		; 6 cycles
    362  f50e
    363  f50e							; Restore scanline counter
    364  f50e		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    365  f510
    366  f510		       98		      tya		; 2
    367  f511		       18		      clc		; 2
    368  f512		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    369  f514		       a8		      tay		; 2
    370  f515
    371  f515		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    372  f517		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    373  f519		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    374  f51b		       85 08		      sta	COLUPF	; 4
    375  f51d		       ea		      nop		; 2
    376  f51e		       4c ea f4 	      jmp	.title_frame_top_load	; 3
    377  f521
    378  f521				   .title_frame_top_label_color_skip
    379  f521
    380  f521		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    381  f523		       d0 c3		      bne	.title_frame_top	; 2
    382  f525
    383  f525				   .title_frame_top_clean
    384  f525
    385  f525							; Clear out playfield
    386  f525		       a9 00		      lda	#0
    387  f527		       85 0d		      sta	PF0
    388  f529		       85 0e		      sta	PF1
    389  f52b		       85 0f		      sta	PF2
    390  f52d
    391  f52d				   TitleWebDraw
    392  f52d
    393  f52d		       24 82		      bit	Temp+2
    394  f52f		       30 05		      bmi	.title_web_bug
    395  f531
    396  f531				   .title_web_spider
    397  f531		       a9 02		      lda	#%00000010
    398  f533		       4c 38 f5 	      jmp	.title_web_set
    399  f536				   .title_web_bug
    400  f536		       a9 00		      lda	#%00000000
    401  f538				   .title_web_set
    402  f538		       85 1d		      sta	ENAM0
    403  f53a
    404  f53a		       a9 06		      lda	#TITLE_WEB_COLOR
    405  f53c		       85 06		      sta	COLUP0
    406  f53e
    407  f53e		       a2 10		      ldx	#TITLE_GAP_SIZE
    408  f540				   .title_web_gap
    409  f540		       ca		      dex
    410  f541		       85 02		      sta	WSYNC
    411  f543		       d0 fb		      bne	.title_web_gap
    412  f545
    413  f545				   TitleSpiderDraw
    414  f545
    415  f545		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    416  f547
    417  f547		       a5 a7		      lda	SpiderDrawPos
    418  f549		       c9 01		      cmp	#1
    419  f54b		       d0 0c		      bne	.title_spider_extra_web_disable
    420  f54d
    421  f54d				   .title_spider_extra_web_start
    422  f54d		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    423  f54f				   .title_spider_extra_web_loop
    424  f54f		       85 02		      sta	WSYNC
    425  f551		       ca		      dex
    426  f552		       d0 fb		      bne	.title_spider_extra_web_loop
    427  f554
    428  f554		       88		      dey
    429  f555		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    430  f557		       d0 f4		      bne	.title_spider_extra_web_start
    431  f559
    432  f559				   .title_spider_extra_web_disable
    433  f559		       a9 00		      lda	#0
    434  f55b		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    435  f55d
    436  f55d		       85 02		      sta	WSYNC
    437  f55f
    438  f55f		       85 1d		      sta	ENAM0
    439  f561
    440  f561							; Check b/w
    441  f561		       ad 82 02 	      lda	SWCHB
    442  f564					      REPEAT	4
    443  f564		       4a		      lsr
    442  f564					      REPEND
    443  f565		       4a		      lsr
    442  f565					      REPEND
    443  f566		       4a		      lsr
    442  f566					      REPEND
    443  f567		       4a		      lsr
    444  f568					      REPEND
    445  f568		       90 05		      bcc	.title_spider_bw
    446  f56a
    447  f56a				   .title_spider_color
    448  f56a		       a9 56		      lda	#TITLE_SPIDER_COLOR
    449  f56c		       4c 71 f5 	      jmp	.title_spider_color_set
    450  f56f				   .title_spider_bw
    451  f56f		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    452  f571				   .title_spider_color_set
    453  f571		       85 06		      sta	COLUP0
    454  f573
    455  f573				   .title_spider
    456  f573		       b1 a0		      lda	(SpiderPtr),y
    457  f575		       85 1b		      sta	GRP0
    458  f577		       85 1c		      sta	GRP1
    459  f579
    460  f579				   .title_spider_delay
    461  f579		       ca		      dex
    462  f57a		       85 02		      sta	WSYNC
    463  f57c		       d0 fb		      bne	.title_spider_delay
    464  f57e
    465  f57e				   .title_spider_index
    466  f57e		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    467  f580		       88		      dey
    468  f581		       10 f0		      bpl	.title_spider
    469  f583
    470  f583				   .title_spider_clean
    471  f583
    472  f583							; Clear sprites
    473  f583		       a9 00		      lda	#0
    474  f585		       85 1b		      sta	GRP0
    475  f587		       85 1c		      sta	GRP1
    476  f589
    477  f589				   TitleFrameBottomDraw
    478  f589
    479  f589							; Load Frame Color
    480  f589		       a9 06		      lda	#TITLE_WEB_COLOR
    481  f58b		       85 08		      sta	COLUPF
    482  f58d
    483  f58d							; Start Counters
    484  f58d		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    485  f58f		       a0 00		      ldy	#0	; Image Counter
    486  f591
    487  f591				   .title_frame_bottom
    488  f591
    489  f591							; 76 machine cycles per scanline
    490  f591		       85 02		      sta	WSYNC
    491  f593
    492  f593				   .title_frame_bottom_load		; 66 cycles
    493  f593
    494  f593							; First half of image
    495  f593		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    496  f596		       85 0d		      sta	PF0	; 4
    497  f598		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    498  f59b		       85 0e		      sta	PF1	; 4
    499  f59d		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    500  f5a0		       85 0f		      sta	PF2	; 4
    501  f5a2
      0  f5a2					      sleep	6
      1  f5a2				   .CYCLES    SET	6
      2  f5a2
      3  f5a2				  -	      IF	.CYCLES < 2
      4  f5a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5a2				  -	      ERR
      6  f5a2					      ENDIF
      7  f5a2
      8  f5a2				  -	      IF	.CYCLES & 1
      9  f5a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5a2				  -	      nop	0
     11  f5a2				  -	      ELSE
     12  f5a2				  -	      bit	VSYNC
     13  f5a2				  -	      ENDIF
     14  f5a2				  -.CYCLES    SET	.CYCLES - 3
     15  f5a2					      ENDIF
     16  f5a2
     17  f5a2					      REPEAT	.CYCLES / 2
     18  f5a2		       ea		      nop
     17  f5a2					      REPEND
     18  f5a3		       ea		      nop
     17  f5a3					      REPEND
     18  f5a4		       ea		      nop
     19  f5a5					      REPEND
    503  f5a5
    504  f5a5							; Second half of image
    505  f5a5		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    506  f5a8		       85 0d		      sta	PF0	; 4
    507  f5aa		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    508  f5ad		       85 0e		      sta	PF1	; 4
    509  f5af		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    510  f5b2		       85 0f		      sta	PF2	; 4
    511  f5b4
    512  f5b4				   .title_frame_bottom_index		; 4 cycles
    513  f5b4
    514  f5b4		       ca		      dex		; 2
    515  f5b5		       d0 da		      bne	.title_frame_bottom	; 2
    516  f5b7
    517  f5b7				   .title_frame_bottom_index_next		; 6 cycles
    518  f5b7
    519  f5b7							; Restore scanline counter
    520  f5b7		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    521  f5b9
    522  f5b9		       98		      tya		; 2
    523  f5ba		       18		      clc		; 2
    524  f5bb		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    525  f5bd		       a8		      tay		; 2
    526  f5be		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    527  f5c0		       d0 cf		      bne	.title_frame_bottom	; 2
    528  f5c2
    529  f5c2				   .title_frame_bottom_clean
    530  f5c2
    531  f5c2							; Clear out playfield
    532  f5c2		       a9 00		      lda	#0
    533  f5c4		       85 0d		      sta	PF0
    534  f5c6		       85 0e		      sta	PF1
    535  f5c8		       85 0f		      sta	PF2
    536  f5ca
    537  f5ca				   .title_kernel_return
    538  f5ca		       60		      rts
    539  f5cb
    540  f5cb				   TitleAudio0
    541  f5cb
    542  f5cb		       0f		      .BYTE.b	#15	; B
    543  f5cc		       13		      .BYTE.b	#19	; G
    544  f5cd		       17		      .BYTE.b	#23	; E
    545  f5ce		       13		      .BYTE.b	#19	; G
    546  f5cf		       0e		      .BYTE.b	#14	; C
    547  f5d0		       13		      .BYTE.b	#19
    548  f5d1		       17		      .BYTE.b	#23
    549  f5d2		       13		      .BYTE.b	#19
    550  f5d3		       0c		      .BYTE.b	#12	; D
    551  f5d4		       13		      .BYTE.b	#19
    552  f5d5		       17		      .BYTE.b	#23
    553  f5d6		       13		      .BYTE.b	#19
    554  f5d7		       0e		      .BYTE.b	#14	; C
    555  f5d8		       13		      .BYTE.b	#19
    556  f5d9		       17		      .BYTE.b	#23
    557  f5da		       13		      .BYTE.b	#19
    558  f5db
    559  f5db				   TitleTone1
    560  f5db
    561  f5db		       0f		      .BYTE.b	#15	; Electronic Rumble
    562  f5dc		       ff		      .BYTE.b	#$FF
    563  f5dd		       01		      .BYTE.b	#1	; Low Pure Tone
    564  f5de		       01		      .BYTE.b	#1
    565  f5df		       08		      .BYTE.b	#8	; White Noise
    566  f5e0		       01		      .BYTE.b	#1
    567  f5e1		       01		      .BYTE.b	#1
    568  f5e2		       ff		      .BYTE.b	#$FF
    569  f5e3		       ff		      .BYTE.b	#$FF
    570  f5e4		       0f		      .BYTE.b	#15
    571  f5e5		       ff		      .BYTE.b	#$FF
    572  f5e6		       ff		      .BYTE.b	#$FF
    573  f5e7		       08		      .BYTE.b	#8
    574  f5e8		       ff		      .BYTE.b	#$FF
    575  f5e9		       01		      .BYTE.b	#1
    576  f5ea		       01		      .BYTE.b	#1
    577  f5eb
    578  f5eb				   TitleAudio1
    579  f5eb
    580  f5eb		       1d		      .BYTE.b	#29	; Kick
    581  f5ec		       ff		      .BYTE.b	#$FF
    582  f5ed		       1f		      .BYTE.b	#31	; C
    583  f5ee		       1f		      .BYTE.b	#31
    584  f5ef		       07		      .BYTE.b	#7	; Snare
    585  f5f0		       1f		      .BYTE.b	#31
    586  f5f1		       1f		      .BYTE.b	#31
    587  f5f2		       ff		      .BYTE.b	#$FF
    588  f5f3		       ff		      .BYTE.b	#$FF
    589  f5f4		       1d		      .BYTE.b	#29
    590  f5f5		       ff		      .BYTE.b	#$FF
    591  f5f6		       ff		      .BYTE.b	#$FF
    592  f5f7		       07		      .BYTE.b	#7
    593  f5f8		       ff		      .BYTE.b	#$FF
    594  f5f9		       17		      .BYTE.b	#23	; F
    595  f5fa		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f5fb					      include	"game.asm"
      1  f5fb							;================
      2  f5fb							; Game
      3  f5fb							;================
      4  f5fb
      5  f5fb							; Constants
      6  f5fb
      7  f5fb		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f5fb		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f5fb		       00 09	   GAME_AUDIO_STEP =	9
     10  f5fb		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f5fb		       00 06	   GAME_AUDIO_TONE =	6
     12  f5fb
     13  f5fb							; Object Code
     14  f5fb
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f5fb					      include	"objects/level.asm"
      1  f5fb							;======================
      2  f5fb							; Level Logic
      3  f5fb							;======================
      4  f5fb
      5  f5fb							; Constants
      6  f5fb
      7  f5fb		       00 14	   LEVELS     =	20
      8  f5fb
      9  f5fb				   LevelInit
     10  f5fb
     11  f5fb							; Set beginning level by difficulty switches treated as binary
     12  f5fb		       ad 82 02 	      lda	SWCHB
     13  f5fe					      REPEAT	6	; shift to 0-3
     14  f5fe		       4a		      lsr
     13  f5fe					      REPEND
     14  f5ff		       4a		      lsr
     13  f5ff					      REPEND
     14  f600		       4a		      lsr
     13  f600					      REPEND
     14  f601		       4a		      lsr
     13  f601					      REPEND
     14  f602		       4a		      lsr
     13  f602					      REPEND
     14  f603		       4a		      lsr
     15  f604					      REPEND
     16  f604		       18		      clc		; multiply by 5
     17  f605		       85 80		      sta	Temp
     18  f607		       0a		      asl
     19  f608		       0a		      asl
     20  f609		       65 80		      adc	Temp
     21  f60b		       85 9c		      sta	LevelCurrent
     22  f60d
     23  f60d		       20 33 f6 	      jsr	LevelLoad
     24  f610
     25  f610		       60		      rts
     26  f611
     27  f611				   LevelUpdate
     28  f611
     29  f611							; Calculate Desired score: (level+2)*5
     30  f611		       a5 9c		      lda	LevelCurrent
     31  f613		       18		      clc
     32  f614		       69 02		      adc	#2	; +2
     33  f616		       85 80		      sta	Temp
     34  f618		       0a		      asl		; x2
     35  f619		       0a		      asl		; x2
     36  f61a		       65 80		      adc	Temp	; x1
     37  f61c
     38  f61c							; Check if score is high enough
     39  f61c		       c5 92		      cmp	ScoreValue+1
     40  f61e		       b0 0f		      bcs	.level_update_return
     41  f620
     42  f620							; Reset score
     43  f620		       a9 00		      lda	#0
     44  f622		       85 92		      sta	ScoreValue+1
     45  f624
     46  f624							; Check if we haven't reached the final level
     47  f624		       a5 9c		      lda	LevelCurrent
     48  f626		       c9 13		      cmp	#LEVELS-1
     49  f628		       b0 05		      bcs	.level_update_return
     50  f62a
     51  f62a		       e6 9c		      inc	LevelCurrent
     52  f62c		       20 33 f6 	      jsr	LevelLoad
     53  f62f
     54  f62f				   .level_update_return
     55  f62f
     56  f62f		       20 62 f6 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     57  f632
     58  f632		       60		      rts
     59  f633
     60  f633				   LevelLoad
     61  f633
     62  f633							; Bug Speed: level/4+2
     63  f633		       a5 9c		      lda	LevelCurrent
     64  f635		       4a		      lsr		; /2
     65  f636		       4a		      lsr		; /2
     66  f637		       69 02		      adc	#2
     67  f639		       85 b2		      sta	BugSpeed
     68  f63b
     69  f63b							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     70  f63b		       a9 14		      lda	#20
     71  f63d		       18		      clc
     72  f63e		       e5 9c		      sbc	LevelCurrent
     73  f640		       0a		      asl		; x2
     74  f641		       85 80		      sta	Temp
     75  f643		       0a		      asl		; x2
     76  f644		       0a		      asl		; x2
     77  f645		       65 80		      adc	Temp
     78  f647		       85 c1		      sta	SwatterWaitTime
     79  f649
     80  f649							; Swatter Hold Time: 60-(level*2)
     81  f649
     82  f649		       a5 9c		      lda	LevelCurrent
     83  f64b		       0a		      asl		; x2
     84  f64c		       85 80		      sta	Temp
     85  f64e		       a9 3c		      lda	#60
     86  f650		       18		      clc
     87  f651		       e5 80		      sbc	Temp
     88  f653		       85 c2		      sta	SwatterHoldTime
     89  f655
     90  f655							; Swatter Hit Damage: level*3+$10
     91  f655		       a5 9c		      lda	LevelCurrent
     92  f657		       18		      clc
     93  f658		       85 80		      sta	Temp
     94  f65a		       0a		      asl		; x2
     95  f65b		       65 80		      adc	Temp
     96  f65d		       69 10		      adc	#$10
     97  f65f		       85 c3		      sta	SwatterHitDamage
     98  f661
     99  f661		       60		      rts
    100  f662
    101  f662				   LevelLoadColor
    102  f662		       a4 9c		      ldy	LevelCurrent
    103  f664
    104  f664							; check b/w
    105  f664		       ad 82 02 	      lda	SWCHB
    106  f667					      REPEAT	4
    107  f667		       4a		      lsr
    106  f667					      REPEND
    107  f668		       4a		      lsr
    106  f668					      REPEND
    107  f669		       4a		      lsr
    106  f669					      REPEND
    107  f66a		       4a		      lsr
    108  f66b					      REPEND
    109  f66b		       90 0b		      bcc	.level_load_bw
    110  f66d
    111  f66d				   .level_load_color
    112  f66d
    113  f66d							; Background Color
    114  f66d		       b9 81 f6 	      lda	LevelDataBk,y
    115  f670		       85 9e		      sta	WebColor+0
    116  f672
    117  f672							; Web Color
    118  f672		       b9 95 f6 	      lda	LevelDataPf,y
    119  f675		       85 9f		      sta	WebColor+1
    120  f677
    121  f677		       60		      rts
    122  f678
    123  f678				   .level_load_bw
    124  f678
    125  f678							; Background Color
    126  f678		       a9 00		      lda	#WEB_BG_COLOR
    127  f67a		       85 9e		      sta	WebColor+0
    128  f67c
    129  f67c							; Web Color
    130  f67c		       a9 02		      lda	#WEB_FG_COLOR
    131  f67e		       85 9f		      sta	WebColor+1
    132  f680
    133  f680		       60		      rts
    134  f681
    135  f681							; Easy: 1-5
    136  f681							; Medium: 6-9
    137  f681							; Hard: 10-15
    138  f681							; Extreme: 16-19
    139  f681
    140  f681				   LevelDataBk		; Background Color
    141  f681		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    142  f682		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    143  f683		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    144  f684		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    145  f685		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    146  f686		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    147  f687		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    148  f688		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    149  f689		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    150  f68a		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    151  f68b		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    152  f68c		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    153  f68d		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    154  f68e		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    155  f68f		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    156  f690		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    157  f691		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    158  f692		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    159  f693		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    160  f694		       0c		      .BYTE.b	#$0C	; rgb(199, 199, 199)
    161  f695
    162  f695				   LevelDataPf		; Web Color
    163  f695		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    164  f696		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    165  f697		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    166  f698		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    167  f699		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    168  f69a		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    169  f69b		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    170  f69c		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    171  f69d		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    172  f69e		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    173  f69f		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    174  f6a0		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    175  f6a1		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    176  f6a2		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    177  f6a3		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    178  f6a4		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    179  f6a5		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    180  f6a6		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    181  f6a7		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    182  f6a8		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f6a9					      include	"objects/score.asm"
      1  f6a9							;======================
      2  f6a9							; Score (playfield)
      3  f6a9							;======================
      4  f6a9
      5  f6a9							; Constants
      6  f6a9
      7  f6a9		       00 00	   SCORE_BG_COLOR =	#$00
      8  f6a9		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f6a9		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f6a9		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f6a9		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f6a9		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f6a9
     14  f6a9		       00 05	   SCORE_LABEL_SIZE =	5
     15  f6a9		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f6a9		       00 02	   SCORE_LINE_SIZE =	2
     17  f6a9		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f6a9
     19  f6a9							; Initialization
     20  f6a9
     21  f6a9				   ScoreInit
     22  f6a9
     23  f6a9							; Health Score
     24  f6a9		       a9 ff		      lda	#$ff
     25  f6ab		       85 91		      sta	ScoreValue+0
     26  f6ad
     27  f6ad							; Game Score
     28  f6ad		       a9 00		      lda	#0
     29  f6af		       85 92		      sta	ScoreValue+1
     30  f6b1
     31  f6b1		       60		      rts
     32  f6b2
     33  f6b2							; Frame Update
     34  f6b2
     35  f6b2				   ScoreUpdate
     36  f6b2
     37  f6b2							; Current Level Digits
     38  f6b2		       a5 9c		      lda	LevelCurrent
     39  f6b4		       18		      clc
     40  f6b5		       69 01		      adc	#1
     41  f6b7
     42  f6b7		       20 21 f0 	      jsr	BinBcdConvert
     43  f6ba
     44  f6ba							; Only use first byte
     45  f6ba		       8a		      txa
     46  f6bb		       29 0f		      and	#$0f
     47  f6bd		       a8		      tay
     48  f6be		       8a		      txa
     49  f6bf		       29 f0		      and	#$f0
     50  f6c1					      REPEAT	4
     51  f6c1		       4a		      lsr
     50  f6c1					      REPEND
     51  f6c2		       4a		      lsr
     50  f6c2					      REPEND
     51  f6c3		       4a		      lsr
     50  f6c3					      REPEND
     51  f6c4		       4a		      lsr
     52  f6c5					      REPEND
     53  f6c5		       aa		      tax
     54  f6c6
     55  f6c6							; Adjust index positions by multiplying by 5
     56  f6c6		       8a		      txa
     57  f6c7		       85 80		      sta	Temp
     58  f6c9		       0a		      asl
     59  f6ca		       0a		      asl
     60  f6cb		       65 80		      adc	Temp
     61  f6cd		       85 95		      sta	ScoreDigitTens
     62  f6cf
     63  f6cf		       98		      tya
     64  f6d0		       85 80		      sta	Temp
     65  f6d2		       0a		      asl
     66  f6d3		       0a		      asl
     67  f6d4		       65 80		      adc	Temp
     68  f6d6		       85 93		      sta	ScoreDigitOnes
     69  f6d8
     70  f6d8							; Score Digits
     71  f6d8		       a5 92		      lda	ScoreValue+1
     72  f6da
     73  f6da		       20 21 f0 	      jsr	BinBcdConvert
     74  f6dd
     75  f6dd							; Only use first byte
     76  f6dd		       8a		      txa
     77  f6de		       29 0f		      and	#$0f
     78  f6e0		       a8		      tay
     79  f6e1		       8a		      txa
     80  f6e2		       29 f0		      and	#$f0
     81  f6e4					      REPEAT	4
     82  f6e4		       4a		      lsr
     81  f6e4					      REPEND
     82  f6e5		       4a		      lsr
     81  f6e5					      REPEND
     82  f6e6		       4a		      lsr
     81  f6e6					      REPEND
     82  f6e7		       4a		      lsr
     83  f6e8					      REPEND
     84  f6e8		       aa		      tax
     85  f6e9
     86  f6e9							; Adjust index positions by multiplying by 5
     87  f6e9		       8a		      txa
     88  f6ea		       85 80		      sta	Temp
     89  f6ec		       0a		      asl
     90  f6ed		       0a		      asl
     91  f6ee		       65 80		      adc	Temp
     92  f6f0		       85 96		      sta	ScoreDigitTens+1
     93  f6f2
     94  f6f2		       98		      tya
     95  f6f3		       85 80		      sta	Temp
     96  f6f5		       0a		      asl
     97  f6f6		       0a		      asl
     98  f6f7		       65 80		      adc	Temp
     99  f6f9		       85 94		      sta	ScoreDigitOnes+1
    100  f6fb
    101  f6fb							; Health Bar
    102  f6fb		       a5 91		      lda	ScoreValue+0
    103  f6fd		       f0 1c		      beq	.score_update_bar_empty
    104  f6ff
    105  f6ff					      REPEAT	4
    106  f6ff		       4a		      lsr
    105  f6ff					      REPEND
    106  f700		       4a		      lsr
    105  f700					      REPEND
    106  f701		       4a		      lsr
    105  f701					      REPEND
    106  f702		       4a		      lsr
    107  f703					      REPEND
    108  f703		       c9 08		      cmp	#8
    109  f705		       b0 09		      bcs	.score_update_bar_top
    110  f707
    111  f707				   .score_update_bar_bottom
    112  f707		       aa		      tax
    113  f708		       bd 28 f8 	      lda	ScoreBar,x
    114  f70b		       a0 00		      ldy	#$00
    115  f70d		       4c 1f f7 	      jmp	.score_update_bar_store
    116  f710
    117  f710				   .score_update_bar_top
    118  f710		       29 07		      and	#%00000111
    119  f712		       aa		      tax
    120  f713		       a9 7f		      lda	#$7f
    121  f715		       bc 30 f8 	      ldy	ScoreBarFlip,x
    122  f718		       4c 1f f7 	      jmp	.score_update_bar_store
    123  f71b
    124  f71b				   .score_update_bar_empty
    125  f71b		       a9 00		      lda	#0
    126  f71d		       a0 00		      ldy	#0
    127  f71f
    128  f71f				   .score_update_bar_store
    129  f71f		       85 9a		      sta	ScoreBarGfx+0
    130  f721		       84 9b		      sty	ScoreBarGfx+1
    131  f723
    132  f723				   .score_update_end
    133  f723		       60		      rts
    134  f724
    135  f724							; Draw loop (uses SCORE_LINES scanlines)
    136  f724
    137  f724				   ScoreDraw
    138  f724
    139  f724							; Load Colors
    140  f724		       a9 00		      lda	#SCORE_BG_COLOR
    141  f726		       85 09		      sta	COLUBK
    142  f728		       a9 06		      lda	#SCORE_LABEL_COLOR
    143  f72a		       85 08		      sta	COLUPF
    144  f72c		       85 06		      sta	COLUP0
    145  f72e		       85 07		      sta	COLUP1
    146  f730
    147  f730							; Set Non-Mirror
    148  f730		       a9 02		      lda	#%00000010
    149  f732		       85 0a		      sta	CTRLPF
    150  f734
    151  f734		       a2 00		      ldx	#0
    152  f736				   .score_draw_label
    153  f736
    154  f736		       85 02		      sta	WSYNC
    155  f738
    156  f738							; First half of image
    157  f738		       bd 32 f1 	      lda	ScoreLabel+0,x	; 4
    158  f73b		       85 0d		      sta	PF0	; 3
    159  f73d		       bd 33 f1 	      lda	ScoreLabel+1,x
    160  f740		       85 0e		      sta	PF1
    161  f742		       bd 34 f1 	      lda	ScoreLabel+2,x
    162  f745		       85 0f		      sta	PF2
    163  f747
      0  f747					      sleep	8
      1  f747				   .CYCLES    SET	8
      2  f747
      3  f747				  -	      IF	.CYCLES < 2
      4  f747				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f747				  -	      ERR
      6  f747					      ENDIF
      7  f747
      8  f747				  -	      IF	.CYCLES & 1
      9  f747				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f747				  -	      nop	0
     11  f747				  -	      ELSE
     12  f747				  -	      bit	VSYNC
     13  f747				  -	      ENDIF
     14  f747				  -.CYCLES    SET	.CYCLES - 3
     15  f747					      ENDIF
     16  f747
     17  f747					      REPEAT	.CYCLES / 2
     18  f747		       ea		      nop
     17  f747					      REPEND
     18  f748		       ea		      nop
     17  f748					      REPEND
     18  f749		       ea		      nop
     17  f749					      REPEND
     18  f74a		       ea		      nop
     19  f74b					      REPEND
    165  f74b
    166  f74b							; Second half of image
    167  f74b							;lda ScoreLabel+3,x ; 4
    168  f74b		       a9 00		      lda	#0	; 2
    169  f74d		       85 0d		      sta	PF0	; 3
    170  f74f		       bd 36 f1 	      lda	ScoreLabel+4,x
    171  f752		       85 0e		      sta	PF1
    172  f754		       bd 37 f1 	      lda	ScoreLabel+5,x
    173  f757		       85 0f		      sta	PF2
    174  f759
    175  f759		       8a		      txa
    176  f75a		       18		      clc
    177  f75b		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    178  f75d		       aa		      tax
    179  f75e		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    180  f760		       d0 d4		      bne	.score_draw_label
    181  f762
    182  f762							; Clear labels and setup color
    183  f762		       a9 00		      lda	#0
    184  f764		       85 0d		      sta	PF0
    185  f766		       85 0e		      sta	PF1
    186  f768		       85 0f		      sta	PF2
    187  f76a
    188  f76a		       85 02		      sta	WSYNC
    189  f76c
    190  f76c							; Load Colors
    191  f76c		       ad 82 02 	      lda	SWCHB
    192  f76f					      REPEAT	4
    193  f76f		       4a		      lsr
    192  f76f					      REPEND
    193  f770		       4a		      lsr
    192  f770					      REPEND
    193  f771		       4a		      lsr
    192  f771					      REPEND
    193  f772		       4a		      lsr
    194  f773					      REPEND
    195  f773		       90 0d		      bcc	.score_draw_bw
    196  f775
    197  f775				   .score_draw_color
    198  f775		       a9 44		      lda	#SCORE_LEVEL_COLOR
    199  f777		       85 08		      sta	COLUPF
    200  f779		       85 06		      sta	COLUP0
    201  f77b		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    202  f77d		       85 07		      sta	COLUP1
    203  f77f
    204  f77f		       4c 8c f7 	      jmp	.score_draw_digit_start
    205  f782
    206  f782				   .score_draw_bw
    207  f782		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    208  f784		       85 08		      sta	COLUPF
    209  f786		       85 06		      sta	COLUP0
    210  f788		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    211  f78a		       85 07		      sta	COLUP1
    212  f78c
    213  f78c				   .score_draw_digit_start
    214  f78c
    215  f78c		       85 02		      sta	WSYNC
    216  f78e
    217  f78e							; Prepare initial line
    218  f78e
    219  f78e							; Level
    220  f78e		       a4 95		      ldy	ScoreDigitTens
    221  f790		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    222  f793		       29 f0		      and	#$f0
    223  f795		       85 97		      sta	ScoreDigitGfx
    224  f797
    225  f797		       a4 93		      ldy	ScoreDigitOnes
    226  f799		       b9 ce f0 	      lda	ScoreDigits,y
    227  f79c		       29 f0		      and	#$f0
    228  f79e		       85 98		      sta	ScoreDigitGfx+1
    229  f7a0
    230  f7a0							; Score
    231  f7a0		       a4 96		      ldy	ScoreDigitTens+1
    232  f7a2		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    233  f7a5		       29 0f		      and	#$0f
    234  f7a7		       85 99		      sta	ScoreDigitGfx+2
    235  f7a9
    236  f7a9		       a4 94		      ldy	ScoreDigitOnes+1
    237  f7ab		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    238  f7ae		       29 f0		      and	#$f0
    239  f7b0		       05 99		      ora	ScoreDigitGfx+2
    240  f7b2		       85 99		      sta	ScoreDigitGfx+2
    241  f7b4
    242  f7b4		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    243  f7b6		       a5 97		      lda	ScoreDigitGfx
    244  f7b8		       85 02		      sta	WSYNC
    245  f7ba				   .score_draw_digit
    246  f7ba
    247  f7ba							;lda ScoreDigitGfx
    248  f7ba		       85 0d		      sta	PF0
    249  f7bc		       a5 98		      lda	ScoreDigitGfx+1
    250  f7be		       85 0e		      sta	PF1
    251  f7c0		       a5 99		      lda	ScoreDigitGfx+2
    252  f7c2		       85 0f		      sta	PF2
    253  f7c4
    254  f7c4							; Begin preparing next line
    255  f7c4		       e6 93		      inc	ScoreDigitOnes
    256  f7c6		       e6 95		      inc	ScoreDigitTens
    257  f7c8		       e6 94		      inc	ScoreDigitOnes+1
    258  f7ca		       e6 96		      inc	ScoreDigitTens+1
    259  f7cc
    260  f7cc		       a9 00		      lda	#0
    261  f7ce		       85 0d		      sta	PF0
    262  f7d0		       a5 9a		      lda	ScoreBarGfx+0
    263  f7d2		       85 0e		      sta	PF1
    264  f7d4		       a5 9b		      lda	ScoreBarGfx+1
    265  f7d6		       85 0f		      sta	PF2
    266  f7d8
    267  f7d8							; Level 1st Digit
    268  f7d8		       a4 95		      ldy	ScoreDigitTens
    269  f7da		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    270  f7dd		       29 f0		      and	#$f0
    271  f7df		       85 80		      sta	Temp
    272  f7e1
    273  f7e1							; Score 1st Digit
    274  f7e1		       a4 96		      ldy	ScoreDigitTens+1
    275  f7e3		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    276  f7e6		       29 0f		      and	#$0f
    277  f7e8		       85 81		      sta	Temp+1
    278  f7ea
    279  f7ea		       a5 97		      lda	ScoreDigitGfx
    280  f7ec		       85 0d		      sta	PF0
    281  f7ee		       a5 98		      lda	ScoreDigitGfx+1
    282  f7f0		       85 0e		      sta	PF1
    283  f7f2		       a5 99		      lda	ScoreDigitGfx+2
    284  f7f4		       85 0f		      sta	PF2
    285  f7f6
    286  f7f6							; Level 2nd Digit (and transfer)
    287  f7f6		       a4 93		      ldy	ScoreDigitOnes
    288  f7f8		       b9 ce f0 	      lda	ScoreDigits,y
    289  f7fb		       29 f0		      and	#$f0
    290  f7fd		       85 98		      sta	ScoreDigitGfx+1
    291  f7ff
      0  f7ff					      sleep	3
      1  f7ff				   .CYCLES    SET	3
      2  f7ff
      3  f7ff				  -	      IF	.CYCLES < 2
      4  f7ff				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7ff				  -	      ERR
      6  f7ff					      ENDIF
      7  f7ff
      8  f7ff					      IF	.CYCLES & 1
      9  f7ff					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7ff		       04 00		      nop	0
     11  f801				  -	      ELSE
     12  f801				  -	      bit	VSYNC
     13  f801					      ENDIF
     14  f801				   .CYCLES    SET	.CYCLES - 3
     15  f801					      ENDIF
     16  f801
     17  f801				  -	      REPEAT	.CYCLES / 2
     18  f801				  -	      nop
     19  f801					      REPEND
    293  f801
    294  f801		       a9 00		      lda	#0
    295  f803		       85 0d		      sta	PF0
    296  f805		       a5 9a		      lda	ScoreBarGfx+0
    297  f807		       85 0e		      sta	PF1
    298  f809		       a4 9b		      ldy	ScoreBarGfx+1
    299  f80b		       84 0f		      sty	PF2
    300  f80d
    301  f80d							; Score 2nd Digit (and transfer)
    302  f80d		       a4 94		      ldy	ScoreDigitOnes+1
    303  f80f		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    304  f812		       29 f0		      and	#$f0
    305  f814		       05 81		      ora	Temp+1
    306  f816		       85 99		      sta	ScoreDigitGfx+2
    307  f818
    308  f818							; Transfer Level 1st Digit
    309  f818		       a5 80		      lda	Temp
    310  f81a		       85 97		      sta	ScoreDigitGfx
    311  f81c
    312  f81c		       ca		      dex
    313  f81d		       d0 9b		      bne	.score_draw_digit
    314  f81f
    315  f81f		       a9 00		      lda	#0
    316  f821		       85 0d		      sta	PF0
    317  f823		       85 0e		      sta	PF1
    318  f825		       85 0f		      sta	PF2
    319  f827
    320  f827		       60		      rts
    321  f828
    322  f828				   ScoreBar
    323  f828		       40		      .BYTE.b	#%01000000
    324  f829		       40		      .BYTE.b	#%01000000
    325  f82a		       60		      .BYTE.b	#%01100000
    326  f82b		       70		      .BYTE.b	#%01110000
    327  f82c		       78		      .BYTE.b	#%01111000
    328  f82d		       7c		      .BYTE.b	#%01111100
    329  f82e		       7e		      .BYTE.b	#%01111110
    330  f82f		       7f		      .BYTE.b	#%01111111
    331  f830
    332  f830				   ScoreBarFlip
    333  f830		       01		      .BYTE.b	#%00000001
    334  f831		       03		      .BYTE.b	#%00000011
    335  f832		       07		      .BYTE.b	#%00000111
    336  f833		       0f		      .BYTE.b	#%00001111
    337  f834		       1f		      .BYTE.b	#%00011111
    338  f835		       3f		      .BYTE.b	#%00111111
    339  f836		       7f		      .BYTE.b	#%01111111
    340  f837		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f838					      include	"objects/web.asm"
      1  f838							;================
      2  f838							; Web (Playfield)
      3  f838							;================
      4  f838
      5  f838							; Constants
      6  f838
      7  f838		       00 00	   WEB_BG_COLOR =	#$00
      8  f838		       00 02	   WEB_FG_COLOR =	#$02
      9  f838
     10  f838		       00 1c	   WEB_SIZE   =	28
     11  f838		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f838		       00 06	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f838
     14  f838							; Scanline Draw
     15  f838
     16  f838				   WebDrawStart
     17  f838
     18  f838							; Load Colors
     19  f838		       a5 9f		      lda	WebColor+1
     20  f83a		       85 08		      sta	COLUPF
     21  f83c
     22  f83c							; Mirror playfield and use standard playfield color
     23  f83c							;lda CtrlPf
     24  f83c							;and #%11111100
     25  f83c							;ora #%00000001
     26  f83c							;sta CtrlPf
     27  f83c							;sta CTRLPF
     28  f83c
     29  f83c							; Initialize image index
     30  f83c		       a9 00		      lda	#0
     31  f83e		       85 9d		      sta	WebIndex
     32  f840
     33  f840		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f841					      include	"objects/spider.asm"
      1  f841							;=================
      2  f841							; Spider (player0)
      3  f841							;=================
      4  f841
      5  f841							; Constants
      6  f841
      7  f841		       00 56	   SPIDER_COLOR =	#$56
      8  f841		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f841		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f841		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f841
     12  f841		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f841		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f841		       00 02	   SPIDER_VEL_X =	2
     15  f841		       00 02	   SPIDER_VEL_Y =	2
     16  f841
     17  f841							; Initialization
     18  f841
     19  f841				   SpiderInit
     20  f841
     21  f841							; Initialize Position in center of screen
     22  f841		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f843		       85 a2		      sta	SpiderPos
     24  f845		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f847		       85 a3		      sta	SpiderPos+1
     26  f849
     27  f849							; Initial direction
     28  f849		       a9 20		      lda	#%00100000
     29  f84b		       85 a4		      sta	SpiderCtrl
     30  f84d
     31  f84d							; Setup Sprite
      0  f84d					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f84d				   .POINTER   SET	SpiderPtr
      2  f84d				   .ADDRESS   SET	SpiderSprite
      3  f84d
      4  f84d		       a9 a4		      LDA	#<.ADDRESS
      5  f84f		       85 a0		      STA	.POINTER
      6  f851		       a9 f1		      LDA	#>.ADDRESS
      7  f853		       85 a1		      STA	.POINTER+1
      8  f855
     33  f855
     34  f855		       60		      rts
     35  f856
     36  f856							; Frame Update
     37  f856
     38  f856				   SpiderUpdate
     39  f856		       20 5d f8 	      jsr	SpiderControl
     40  f859		       20 43 f9 	      jsr	SpiderCollision
     41  f85c		       60		      rts
     42  f85d
     43  f85d				   SpiderControl
     44  f85d
     45  f85d							; Control Position
     46  f85d		       a6 a2		      ldx	SpiderPos
     47  f85f		       a4 a3		      ldy	SpiderPos+1
     48  f861		       ad 80 02 	      lda	SWCHA
     49  f864
     50  f864				   .spider_control_check_right
     51  f864		       30 02		      bmi	.spider_control_check_left
     52  f866
     53  f866					      REPEAT	#SPIDER_VEL_X
     54  f866		       e8		      inx
     53  f866					      REPEND
     54  f867		       e8		      inx
     55  f868					      REPEND
     56  f868
     57  f868				   .spider_control_check_left
     58  f868		       2a		      rol
     59  f869		       30 02		      bmi	.spider_control_check_down
     60  f86b
     61  f86b					      REPEAT	#SPIDER_VEL_X
     62  f86b		       ca		      dex
     61  f86b					      REPEND
     62  f86c		       ca		      dex
     63  f86d					      REPEND
     64  f86d
     65  f86d				   .spider_control_check_down
     66  f86d		       2a		      rol
     67  f86e		       30 02		      bmi	.spider_control_check_up
     68  f870
     69  f870					      REPEAT	#SPIDER_VEL_Y
     70  f870		       88		      dey
     69  f870					      REPEND
     70  f871		       88		      dey
     71  f872					      REPEND
     72  f872
     73  f872				   .spider_control_check_up
     74  f872		       2a		      rol
     75  f873		       30 02		      bmi	.spider_control_sprite
     76  f875
     77  f875					      REPEAT	#SPIDER_VEL_Y
     78  f875		       c8		      iny
     77  f875					      REPEND
     78  f876		       c8		      iny
     79  f877					      REPEND
     80  f877
     81  f877				   .spider_control_sprite
     82  f877							; Control Sprite
     83  f877		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     84  f879
     85  f879				   .spider_control_sprite_x
     86  f879		       e4 a2		      cpx	SpiderPos
     87  f87b		       90 04		      bcc	.spider_control_sprite_left
     88  f87d		       f0 09		      beq	.spider_control_sprite_y
     89  f87f		       b0 05		      bcs	.spider_control_sprite_right
     90  f881
     91  f881				   .spider_control_sprite_left
     92  f881		       09 80		      ora	#%10000000
     93  f883		       4c 88 f8 	      jmp	.spider_control_sprite_y
     94  f886
     95  f886				   .spider_control_sprite_right
     96  f886		       09 40		      ora	#%01000000
     97  f888
     98  f888				   .spider_control_sprite_y
     99  f888		       c4 a3		      cpy	SpiderPos+1
    100  f88a		       90 04		      bcc	.spider_control_sprite_down
    101  f88c		       f0 09		      beq	.spider_control_sprite_store
    102  f88e		       b0 05		      bcs	.spider_control_sprite_up
    103  f890
    104  f890				   .spider_control_sprite_down
    105  f890		       09 10		      ora	#%00010000
    106  f892		       4c 97 f8 	      jmp	.spider_control_sprite_store
    107  f895
    108  f895				   .spider_control_sprite_up
    109  f895		       09 20		      ora	#%00100000
    110  f897
    111  f897				   .spider_control_sprite_store
    112  f897		       c9 00		      cmp	#%00000000
    113  f899		       f0 02		      beq	.spider_control_boundary
    114  f89b		       85 a4		      sta	SpiderCtrl
    115  f89d
    116  f89d				   .spider_control_boundary
    117  f89d							; Check Playfield Boundaries
    118  f89d
    119  f89d				   .spider_control_boundary_left
    120  f89d		       e0 03		      cpx	#SPIDER_VEL_X+1
    121  f89f		       b0 05		      bcs	.spider_control_boundary_right
    122  f8a1		       a2 03		      ldx	#SPIDER_VEL_X+1
    123  f8a3		       4c ac f8 	      jmp	.spider_control_boundary_top
    124  f8a6
    125  f8a6				   .spider_control_boundary_right
    126  f8a6		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    127  f8a8		       90 02		      bcc	.spider_control_boundary_top
    128  f8aa		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    129  f8ac
    130  f8ac				   .spider_control_boundary_top
    131  f8ac		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    132  f8ae		       b0 05		      bcs	.spider_control_boundary_bottom
    133  f8b0		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    134  f8b2		       4c bb f8 	      jmp	.spider_control_store
    135  f8b5
    136  f8b5				   .spider_control_boundary_bottom
    137  f8b5		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    138  f8b7		       90 02		      bcc	.spider_control_store
    139  f8b9		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    140  f8bb
    141  f8bb				   .spider_control_store
    142  f8bb							; Store new position
    143  f8bb		       86 a2		      stx	SpiderPos
    144  f8bd		       84 a3		      sty	SpiderPos+1
    145  f8bf
    146  f8bf							; TODO: Optimize this somehow?
    147  f8bf				   .spider_control_sprite_assign
    148  f8bf							; Skip if no change
    149  f8bf		       c9 00		      cmp	#%00000000
    150  f8c1		       f0 7f		      beq	.spider_control_return
    151  f8c3
    152  f8c3		       a2 00		      ldx	#%00000000	; For reflection
    153  f8c5
    154  f8c5				   .spider_control_sprite_assign_left
    155  f8c5		       c9 80		      cmp	#%10000000
    156  f8c7		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f8c9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8c9				   .POINTER   SET	SpiderPtr
      2  f8c9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8c9
      4  f8c9		       a9 b4		      LDA	#<.ADDRESS
      5  f8cb		       85 a0		      STA	.POINTER
      6  f8cd		       a9 f1		      LDA	#>.ADDRESS
      7  f8cf		       85 a1		      STA	.POINTER+1
      8  f8d1
    158  f8d1		       a2 08		      ldx	#%00001000
    159  f8d3		       4c 40 f9 	      jmp	.spider_control_reflect
    160  f8d6
    161  f8d6				   .spider_control_sprite_assign_right
    162  f8d6		       c9 40		      cmp	#%01000000
    163  f8d8		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f8da					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8da				   .POINTER   SET	SpiderPtr
      2  f8da				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8da
      4  f8da		       a9 b4		      LDA	#<.ADDRESS
      5  f8dc		       85 a0		      STA	.POINTER
      6  f8de		       a9 f1		      LDA	#>.ADDRESS
      7  f8e0		       85 a1		      STA	.POINTER+1
      8  f8e2
    165  f8e2		       4c 40 f9 	      jmp	.spider_control_reflect
    166  f8e5
    167  f8e5				   .spider_control_sprite_assign_top
    168  f8e5		       c9 20		      cmp	#%00100000
    169  f8e7		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f8e9					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f8e9				   .POINTER   SET	SpiderPtr
      2  f8e9				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f8e9
      4  f8e9		       a9 a4		      LDA	#<.ADDRESS
      5  f8eb		       85 a0		      STA	.POINTER
      6  f8ed		       a9 f1		      LDA	#>.ADDRESS
      7  f8ef		       85 a1		      STA	.POINTER+1
      8  f8f1
    171  f8f1		       4c 40 f9 	      jmp	.spider_control_reflect
    172  f8f4
    173  f8f4				   .spider_control_sprite_assign_bottom
    174  f8f4		       c9 10		      cmp	#%00010000
    175  f8f6		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f8f8					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f8f8				   .POINTER   SET	SpiderPtr
      2  f8f8				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f8f8
      4  f8f8		       a9 c4		      LDA	#<.ADDRESS
      5  f8fa		       85 a0		      STA	.POINTER
      6  f8fc		       a9 f1		      LDA	#>.ADDRESS
      7  f8fe		       85 a1		      STA	.POINTER+1
      8  f900
    177  f900		       4c 40 f9 	      jmp	.spider_control_reflect
    178  f903
    179  f903				   .spider_control_sprite_assign_top_right
    180  f903		       c9 60		      cmp	#%01100000
    181  f905		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f907					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f907				   .POINTER   SET	SpiderPtr
      2  f907				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f907
      4  f907		       a9 b4		      LDA	#<.ADDRESS
      5  f909		       85 a0		      STA	.POINTER
      6  f90b		       a9 f1		      LDA	#>.ADDRESS
      7  f90d		       85 a1		      STA	.POINTER+1
      8  f90f
    183  f90f		       4c 40 f9 	      jmp	.spider_control_reflect
    184  f912
    185  f912				   .spider_control_sprite_assign_bottom_right
    186  f912		       c9 50		      cmp	#%01010000
    187  f914		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f916					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f916				   .POINTER   SET	SpiderPtr
      2  f916				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f916
      4  f916		       a9 b4		      LDA	#<.ADDRESS
      5  f918		       85 a0		      STA	.POINTER
      6  f91a		       a9 f1		      LDA	#>.ADDRESS
      7  f91c		       85 a1		      STA	.POINTER+1
      8  f91e
    189  f91e		       4c 40 f9 	      jmp	.spider_control_reflect
    190  f921
    191  f921				   .spider_control_sprite_assign_bottom_left
    192  f921		       c9 90		      cmp	#%10010000
    193  f923		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f925					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f925				   .POINTER   SET	SpiderPtr
      2  f925				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f925
      4  f925		       a9 b4		      LDA	#<.ADDRESS
      5  f927		       85 a0		      STA	.POINTER
      6  f929		       a9 f1		      LDA	#>.ADDRESS
      7  f92b		       85 a1		      STA	.POINTER+1
      8  f92d
    195  f92d		       a2 08		      ldx	#%00001000
    196  f92f		       4c 40 f9 	      jmp	.spider_control_reflect
    197  f932
    198  f932				   .spider_control_sprite_assign_top_left
    199  f932		       c9 a0		      cmp	#%10100000
    200  f934		       d0 0a		      bne	.spider_control_reflect
      0  f936					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f936				   .POINTER   SET	SpiderPtr
      2  f936				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f936
      4  f936		       a9 b4		      LDA	#<.ADDRESS
      5  f938		       85 a0		      STA	.POINTER
      6  f93a		       a9 f1		      LDA	#>.ADDRESS
      7  f93c		       85 a1		      STA	.POINTER+1
      8  f93e
    202  f93e		       a2 08		      ldx	#%00001000
    203  f940
    204  f940				   .spider_control_reflect
    205  f940		       86 0b		      stx	REFP0
    206  f942
    207  f942				   .spider_control_return
    208  f942		       60		      rts
    209  f943
    210  f943				   SpiderCollision
    211  f943		       a0 56		      ldy	#SPIDER_COLOR
    212  f945
    213  f945							; Check b/w
    214  f945		       ad 82 02 	      lda	SWCHB
    215  f948					      REPEAT	4
    216  f948		       4a		      lsr
    215  f948					      REPEND
    216  f949		       4a		      lsr
    215  f949					      REPEND
    216  f94a		       4a		      lsr
    215  f94a					      REPEND
    216  f94b		       4a		      lsr
    217  f94c					      REPEND
    218  f94c		       b0 02		      bcs	.spider_collision_m0
    219  f94e
    220  f94e		       a0 0e		      ldy	#SPIDER_BW_COLOR
    221  f950
    222  f950				   .spider_collision_m0
    223  f950							; Check stun status
    224  f950		       a6 b3		      ldx	BugStunned
    225  f952		       d0 04		      bne	.spider_collision_m1
    226  f954
    227  f954							; Collision for M0 (V set)
    228  f954		       24 00		      bit	CXM0P
    229  f956		       70 0b		      bvs	.spider_collision_active
    230  f958
    231  f958				   .spider_collision_m1
    232  f958							; Check stun status
    233  f958		       a6 b4		      ldx	BugStunned+1
    234  f95a		       d0 14		      bne	.spider_collision_return
    235  f95c
    236  f95c							; Collision for M1 (N set)
    237  f95c		       24 01		      bit	CXM1P
    238  f95e		       30 03		      bmi	.spider_collision_active
    239  f960
    240  f960		       4c 70 f9 	      jmp	.spider_collision_return
    241  f963
    242  f963				   .spider_collision_active
    243  f963		       a0 44		      ldy	#SPIDER_COL_COLOR
    244  f965
    245  f965							; Check b/w
    246  f965		       ad 82 02 	      lda	SWCHB
    247  f968					      REPEAT	4
    248  f968		       4a		      lsr
    247  f968					      REPEND
    248  f969		       4a		      lsr
    247  f969					      REPEND
    248  f96a		       4a		      lsr
    247  f96a					      REPEND
    248  f96b		       4a		      lsr
    249  f96c					      REPEND
    250  f96c		       b0 02		      bcs	.spider_collision_return
    251  f96e
    252  f96e		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    253  f970
    254  f970				   .spider_collision_return
    255  f970		       84 a5		      sty	SpiderColor
    256  f972		       60		      rts
    257  f973
    258  f973				   SpiderPosition
    259  f973
    260  f973							; Set Position
    261  f973		       a2 00		      ldx	#0	; Object (player0)
    262  f975		       a5 a2		      lda	SpiderPos	; X Position
    263  f977		       20 00 f0 	      jsr	PosObject
    264  f97a
    265  f97a		       60		      rts
    266  f97b
    267  f97b							; Scanline Draw
    268  f97b
    269  f97b				   SpiderDrawStart
    270  f97b
    271  f97b							; Set player 0 to be quad size
    272  f97b							;lda NuSiz0
    273  f97b							;and #%11111000
    274  f97b							;ora #%00000101
    275  f97b							;sta NuSiz0
    276  f97b							;sta NUSIZ0
    277  f97b
    278  f97b							; Set sprite color
    279  f97b		       a5 a5		      lda	SpiderColor
    280  f97d		       85 06		      sta	COLUP0
    281  f97f
    282  f97f							; Determine if we need to use vertical delay (odd line)
    283  f97f		       a5 a3		      lda	SpiderPos+1	; Y Position
    284  f981		       4a		      lsr
    285  f982		       b0 05		      bcs	.spider_draw_start_nodelay
    286  f984
    287  f984		       a0 01		      ldy	#1
    288  f986		       4c 8b f9 	      jmp	.spider_draw_start_set_delay
    289  f989
    290  f989				   .spider_draw_start_nodelay
    291  f989		       a0 00		      ldy	#0
    292  f98b
    293  f98b				   .spider_draw_start_set_delay
    294  f98b		       84 25		      sty	VDELP0
    295  f98d
    296  f98d				   .spider_draw_start_pos
    297  f98d							; Calculate starting position
    298  f98d		       18		      clc
    299  f98e		       69 10		      adc	#SPIDER_SIZE
    300  f990		       85 a7		      sta	SpiderDrawPos
    301  f992
    302  f992							; Initialize sprite index and line buffer
    303  f992		       a9 10		      lda	#SPIDER_SPRITE_SIZE
    304  f994		       85 a6		      sta	SpiderIndex
    305  f996		       a9 00		      lda	#0
    306  f998		       85 a8		      sta	SpiderLine
    307  f99a
    308  f99a		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f99b					      include	"objects/line.asm"
      1  f99b							;================
      2  f99b							; Line (ball)
      3  f99b							;================
      4  f99b
      5  f99b							; Constants
      6  f99b
      7  f99b		       00 08	   LINE_SIZE  =	8
      8  f99b		       00 04	   LINE_VEL_X =	4
      9  f99b		       00 04	   LINE_VEL_Y =	4
     10  f99b
     11  f99b		       00 08	   LINE_AUDIO_C =	8
     12  f99b		       00 01	   LINE_AUDIO_F =	1
     13  f99b		       00 04	   LINE_AUDIO_V =	4
     14  f99b
     15  f99b		       00 08	   LINE_SAMPLE_LEN =	8
     16  f99b		       00 03	   LINE_SAMPLE_C =	3
     17  f99b		       00 01	   LINE_SAMPLE_F =	1
     18  f99b		       00 04	   LINE_SAMPLE_V =	4
     19  f99b
     20  f99b							; Initialization
     21  f99b
     22  f99b				   LineInit
     23  f99b
     24  f99b							; Initial Line Control
     25  f99b		       a9 00		      lda	#0
     26  f99d		       85 ab		      sta	LineEnabled
     27  f99f		       85 ac		      sta	LinePos+0
     28  f9a1		       85 ad		      sta	LinePos+1
     29  f9a3		       85 b0		      sta	LineDrawPos+0
     30  f9a5		       85 b1		      sta	LineDrawPos+1
     31  f9a7
     32  f9a7							; Initial direction
     33  f9a7							;lda #0
     34  f9a7		       85 ae		      sta	LineVelocity+0
     35  f9a9		       a9 04		      lda	#LINE_VEL_Y
     36  f9ab		       85 af		      sta	LineVelocity+1
     37  f9ad
     38  f9ad		       60		      rts
     39  f9ae
     40  f9ae							; Frame Update
     41  f9ae
     42  f9ae				   LineUpdate
     43  f9ae		       20 b8 f9 	      jsr	LineControl
     44  f9b1		       20 6a fa 	      jsr	LineObject
     45  f9b4		       20 95 fa 	      jsr	LineCollision
     46  f9b7		       60		      rts
     47  f9b8
     48  f9b8				   LineControl
     49  f9b8
     50  f9b8							; Check if Fire Button on controller 1 is pressed
     51  f9b8		       a5 0c		      lda	INPT4
     52  f9ba		       30 08		      bmi	.line_control_skip
     53  f9bc
     54  f9bc		       24 ab		      bit	LineEnabled
     55  f9be		       30 04		      bmi	.line_control_skip
     56  f9c0
     57  f9c0		       a5 a4		      lda	SpiderCtrl
     58  f9c2		       d0 03		      bne	.line_control_fire
     59  f9c4
     60  f9c4				   .line_control_skip
     61  f9c4		       4c 69 fa 	      jmp	.line_control_return
     62  f9c7
     63  f9c7				   .line_control_fire
     64  f9c7		       20 ce fa 	      jsr	LineEnable
     65  f9ca
     66  f9ca				   .line_control_x
     67  f9ca		       a5 a4		      lda	SpiderCtrl
     68  f9cc		       29 c0		      and	#%11000000
     69  f9ce		       f0 0e		      beq	.line_control_x_none
     70  f9d0				   .line_control_x_left
     71  f9d0		       c9 80		      cmp	#%10000000
     72  f9d2		       d0 05		      bne	.line_control_x_right
     73  f9d4
     74  f9d4		       a9 fc		      lda	#-LINE_VEL_X
     75  f9d6		       4c e0 f9 	      jmp	.line_control_x_store
     76  f9d9				   .line_control_x_right
     77  f9d9		       a9 04		      lda	#LINE_VEL_X
     78  f9db		       4c e0 f9 	      jmp	.line_control_x_store
     79  f9de				   .line_control_x_none
     80  f9de		       a9 00		      lda	#0
     81  f9e0				   .line_control_x_store
     82  f9e0		       85 ae		      sta	LineVelocity
     83  f9e2
     84  f9e2				   .line_control_y
     85  f9e2		       a5 a4		      lda	SpiderCtrl
     86  f9e4		       29 30		      and	#%00110000
     87  f9e6		       f0 0e		      beq	.line_control_y_none
     88  f9e8				   .line_control_y_up
     89  f9e8		       c9 20		      cmp	#%00100000
     90  f9ea		       d0 05		      bne	.line_control_y_down
     91  f9ec
     92  f9ec		       a9 04		      lda	#LINE_VEL_Y
     93  f9ee		       4c f8 f9 	      jmp	.line_control_y_store
     94  f9f1				   .line_control_y_down
     95  f9f1		       a9 fc		      lda	#-LINE_VEL_Y
     96  f9f3		       4c f8 f9 	      jmp	.line_control_y_store
     97  f9f6				   .line_control_y_none
     98  f9f6		       a9 00		      lda	#0
     99  f9f8				   .line_control_y_store
    100  f9f8		       85 af		      sta	LineVelocity+1
    101  f9fa
    102  f9fa				   .line_control_position
    103  f9fa
    104  f9fa		       a2 00		      ldx	#0	; offsetX
    105  f9fc		       a0 00		      ldy	#0	; offsetY
    106  f9fe
    107  f9fe		       a5 a4		      lda	SpiderCtrl
    108  fa00		       29 f0		      and	#%11110000
    109  fa02
    110  fa02				   .line_control_position_left
    111  fa02		       c9 80		      cmp	#%10000000
    112  fa04		       d0 07		      bne	.line_control_position_right
    113  fa06
    114  fa06		       a2 00		      ldx	#0
    115  fa08		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    116  fa0a		       4c 55 fa 	      jmp	.line_control_position_store
    117  fa0d
    118  fa0d				   .line_control_position_right
    119  fa0d		       c9 40		      cmp	#%01000000
    120  fa0f		       d0 07		      bne	.line_control_position_top
    121  fa11
    122  fa11		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    123  fa13		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    124  fa15		       4c 55 fa 	      jmp	.line_control_position_store
    125  fa18
    126  fa18				   .line_control_position_top
    127  fa18		       c9 20		      cmp	#%00100000
    128  fa1a		       d0 07		      bne	.line_control_position_bottom
    129  fa1c
    130  fa1c		       a2 08		      ldx	#SPIDER_SIZE/2
    131  fa1e		       a0 10		      ldy	#SPIDER_SIZE
    132  fa20		       4c 55 fa 	      jmp	.line_control_position_store
    133  fa23
    134  fa23				   .line_control_position_bottom
    135  fa23		       c9 10		      cmp	#%00010000
    136  fa25		       d0 05		      bne	.line_control_position_top_right
    137  fa27
    138  fa27		       a2 08		      ldx	#SPIDER_SIZE/2
    139  fa29		       4c 55 fa 	      jmp	.line_control_position_store
    140  fa2c
    141  fa2c				   .line_control_position_top_right
    142  fa2c		       c9 60		      cmp	#%01100000
    143  fa2e		       d0 07		      bne	.line_control_position_bottom_right
    144  fa30
    145  fa30		       a2 10		      ldx	#SPIDER_SIZE
    146  fa32		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    147  fa34		       4c 55 fa 	      jmp	.line_control_position_store
    148  fa37
    149  fa37				   .line_control_position_bottom_right
    150  fa37		       c9 50		      cmp	#%01010000
    151  fa39		       d0 07		      bne	.line_control_position_bottom_left
    152  fa3b
    153  fa3b		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    154  fa3d		       a0 00		      ldy	#0
    155  fa3f		       4c 55 fa 	      jmp	.line_control_position_store
    156  fa42
    157  fa42				   .line_control_position_bottom_left
    158  fa42		       c9 90		      cmp	#%10010000
    159  fa44		       d0 07		      bne	.line_control_position_top_left
    160  fa46
    161  fa46							; No Offset
    162  fa46		       a2 04		      ldx	#LINE_SIZE/2
    163  fa48		       a0 04		      ldy	#LINE_SIZE/2
    164  fa4a		       4c 55 fa 	      jmp	.line_control_position_store
    165  fa4d
    166  fa4d				   .line_control_position_top_left
    167  fa4d		       c9 a0		      cmp	#%10100000
    168  fa4f		       d0 04		      bne	.line_control_position_store
    169  fa51
    170  fa51		       a2 00		      ldx	#0
    171  fa53		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    172  fa55
    173  fa55				   .line_control_position_store
    174  fa55
    175  fa55							; Apply offsetX to playerX
    176  fa55		       a5 a2		      lda	SpiderPos
    177  fa57		       86 80		      stx	Temp
    178  fa59		       18		      clc
    179  fa5a		       65 80		      adc	Temp
    180  fa5c		       aa		      tax
    181  fa5d
    182  fa5d							; Apply offsetY to playerY
    183  fa5d		       a5 a3		      lda	SpiderPos+1
    184  fa5f		       84 80		      sty	Temp
    185  fa61		       18		      clc
    186  fa62		       65 80		      adc	Temp
    187  fa64		       a8		      tay
    188  fa65
    189  fa65		       86 ac		      stx	LinePos
    190  fa67		       84 ad		      sty	LinePos+1
    191  fa69
    192  fa69				   .line_control_return
    193  fa69		       60		      rts
    194  fa6a
    195  fa6a				   LineObject
    196  fa6a
    197  fa6a							; Check if line is enabled
    198  fa6a		       24 ab		      bit	LineEnabled
    199  fa6c		       10 26		      bpl	.line_object_return
    200  fa6e
    201  fa6e							; Load position
    202  fa6e		       a6 ac		      ldx	LinePos
    203  fa70		       a4 ad		      ldy	LinePos+1
    204  fa72
    205  fa72				   .line_object_boundary
    206  fa72				   .line_object_boundary_left
    207  fa72		       e0 04		      cpx	#LINE_VEL_X
    208  fa74		       90 1b		      bcc	.line_object_disable
    209  fa76				   .line_object_boundary_right
    210  fa76		       e0 9b		      cpx	#160-LINE_VEL_X-1
    211  fa78		       b0 17		      bcs	.line_object_disable
    212  fa7a				   .line_object_boundary_bottom
    213  fa7a		       c0 04		      cpy	#LINE_VEL_Y
    214  fa7c		       90 13		      bcc	.line_object_disable
    215  fa7e				   .line_object_boundary_top
    216  fa7e		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    217  fa80		       b0 0f		      bcs	.line_object_disable
    218  fa82
    219  fa82				   .line_object_velocity
    220  fa82
    221  fa82							; Apply Velocity
    222  fa82		       8a		      txa
    223  fa83		       18		      clc
    224  fa84		       65 ae		      adc	LineVelocity
    225  fa86		       85 ac		      sta	LinePos
    226  fa88
    227  fa88		       98		      tya
    228  fa89		       18		      clc
    229  fa8a		       65 af		      adc	LineVelocity+1
    230  fa8c		       85 ad		      sta	LinePos+1
    231  fa8e
    232  fa8e		       4c 94 fa 	      jmp	.line_object_return
    233  fa91
    234  fa91				   .line_object_disable
    235  fa91		       20 da fa 	      jsr	LineDisable
    236  fa94
    237  fa94				   .line_object_return
    238  fa94		       60		      rts
    239  fa95
    240  fa95				   LineCollision
    241  fa95
    242  fa95		       a9 78		      lda	#BUG_STUN_LENGTH
    243  fa97
    244  fa97				   .line_collision_m0
    245  fa97		       24 04		      bit	CXM0FB
    246  fa99		       50 08		      bvc	.line_collision_m1
    247  fa9b
    248  fa9b							; Set stun timer
    249  fa9b		       85 b3		      sta	BugStunned+0
    250  fa9d
    251  fa9d							; Disable line
    252  fa9d		       20 da fa 	      jsr	LineDisable
    253  faa0		       4c ac fa 	      jmp	.line_collision_sample
    254  faa3
    255  faa3				   .line_collision_m1
    256  faa3		       24 05		      bit	CXM1FB
    257  faa5		       50 08		      bvc	.line_collision_return
    258  faa7
    259  faa7							; Set stun timer
    260  faa7		       85 b4		      sta	BugStunned+1
    261  faa9
    262  faa9							; Disable line
    263  faa9		       20 da fa 	      jsr	LineDisable
    264  faac
    265  faac				   .line_collision_sample
    266  faac		       20 f8 fa 	      jsr	LineSample
    267  faaf
    268  faaf				   .line_collision_return
    269  faaf		       60		      rts
    270  fab0
    271  fab0				   LinePosition
    272  fab0
    273  fab0							; Set Line Position
    274  fab0		       a2 04		      ldx	#4	; Object (ball)
    275  fab2		       a5 ac		      lda	LinePos	; X Position
    276  fab4		       20 00 f0 	      jsr	PosObject
    277  fab7
    278  fab7		       60		      rts
    279  fab8
    280  fab8							; Scanline Draw
    281  fab8
    282  fab8				   LineDrawStart
    283  fab8
    284  fab8							; Set ball size to be 4 clocks (4/5 bits)
    285  fab8							;lda CtrlPf
    286  fab8							;and #%11001111
    287  fab8							;ora #%00100000
    288  fab8							;sta CtrlPf
    289  fab8							;sta CTRLPF
    290  fab8
    291  fab8							; Determine if we need to use vertical delay (oven line)
    292  fab8		       a5 ad		      lda	LinePos+1
    293  faba		       4a		      lsr
    294  fabb		       90 05		      bcc	.line_draw_start_nodelay
    295  fabd
    296  fabd		       a0 01		      ldy	#1
    297  fabf		       4c c4 fa 	      jmp	.line_draw_start_set_delay
    298  fac2
    299  fac2				   .line_draw_start_nodelay
    300  fac2		       a0 00		      ldy	#0
    301  fac4
    302  fac4				   .line_draw_start_set_delay
    303  fac4		       84 27		      sty	VDELBL
    304  fac6
    305  fac6				   .line_draw_start_pos
    306  fac6							; Calculate starting position
    307  fac6		       18		      clc
    308  fac7		       85 b0		      sta	LineDrawPos+0
    309  fac9		       69 04		      adc	#LINE_SIZE/2
    310  facb		       85 b1		      sta	LineDrawPos+1
    311  facd
    312  facd		       60		      rts
    313  face
    314  face				   LineEnable
    315  face		       a9 80		      lda	#%10000000
    316  fad0		       85 ab		      sta	LineEnabled
    317  fad2
    318  fad2		       a5 90		      lda	SampleStep
    319  fad4		       d0 03		      bne	.line_enable_return
    320  fad6
    321  fad6		       20 e6 fa 	      jsr	LineAudioPlay
    322  fad9
    323  fad9				   .line_enable_return
    324  fad9		       60		      rts
    325  fada
    326  fada				   LineDisable
    327  fada		       a9 00		      lda	#0
    328  fadc		       85 ab		      sta	LineEnabled
    329  fade
    330  fade		       a5 90		      lda	SampleStep
    331  fae0		       d0 03		      bne	.line_disable_return
    332  fae2
    333  fae2		       20 f3 fa 	      jsr	LineAudioMute
    334  fae5
    335  fae5				   .line_disable_return
    336  fae5		       60		      rts
    337  fae6
    338  fae6				   LineAudioPlay
    339  fae6		       a9 08		      lda	#LINE_AUDIO_C
    340  fae8		       85 16		      sta	AUDC1
    341  faea		       a9 01		      lda	#LINE_AUDIO_F
    342  faec		       85 18		      sta	AUDF1
    343  faee		       a9 04		      lda	#LINE_AUDIO_V
    344  faf0		       85 1a		      sta	AUDV1
    345  faf2		       60		      rts
    346  faf3
    347  faf3				   LineAudioMute
    348  faf3		       a9 00		      lda	#0
    349  faf5		       85 1a		      sta	AUDV1
    350  faf7							;sta AUDF1
    351  faf7							;sta AUDC1
    352  faf7		       60		      rts
    353  faf8
    354  faf8				   LineSample
    355  faf8		       a9 08		      lda	#LINE_SAMPLE_LEN
    356  fafa		       85 90		      sta	SampleStep
    357  fafc		       a9 03		      lda	#LINE_SAMPLE_C
    358  fafe		       85 16		      sta	AUDC1
    359  fb00		       a9 01		      lda	#LINE_SAMPLE_F
    360  fb02		       85 18		      sta	AUDF1
    361  fb04		       a9 04		      lda	#LINE_SAMPLE_V
    362  fb06		       85 1a		      sta	AUDV1
    363  fb08		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  fb09					      include	"objects/bug.asm"
      1  fb09							;======================
      2  fb09							; Bugs (missiles 0 & 1)
      3  fb09							;======================
      4  fb09
      5  fb09							; Constants
      6  fb09
      7  fb09		       00 08	   BUG_SIZE   =	8
      8  fb09		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  fb09		       00 78	   BUG_STUN_LENGTH =	120
     10  fb09		       00 04	   BUG_POINTS =	4
     11  fb09
     12  fb09		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  fb09		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  fb09		       00 38	   BUG_STUN_COLOR =	#$38
     15  fb09		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  fb09
     17  fb09		       00 1e	   BUG_SAMPLE_LEN =	30
     18  fb09		       00 03	   BUG_SAMPLE_C =	3
     19  fb09		       00 14	   BUG_SAMPLE_F =	20
     20  fb09		       00 04	   BUG_SAMPLE_V =	4
     21  fb09
     22  fb09		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  fb09		       00 08	   BUG_COL_SAMPLE_C =	8
     24  fb09		       00 08	   BUG_COL_SAMPLE_F =	8
     25  fb09		       00 03	   BUG_COL_SAMPLE_V =	3
     26  fb09
     27  fb09							; Initialization
     28  fb09
     29  fb09				   BugInit
     30  fb09
     31  fb09							; Initialize Bugs
     32  fb09		       a2 01		      ldx	#1
     33  fb0b
     34  fb0b				   .bug_init_loop
     35  fb0b		       20 12 fb 	      jsr	BugReset
     36  fb0e
     37  fb0e		       ca		      dex
     38  fb0f		       10 fa		      bpl	.bug_init_loop
     39  fb11
     40  fb11		       60		      rts
     41  fb12
     42  fb12				   BugReset		; x = bug (0 or 1)
     43  fb12
     44  fb12							; Set random position
     45  fb12		       20 13 f0 	      jsr	Random
     46  fb15
     47  fb15		       a5 83		      lda	Rand8
     48  fb17		       29 7f		      and	#$7f
     49  fb19		       95 b5		      sta	BugPosX,x
     50  fb1b
     51  fb1b		       a5 84		      lda	Rand16
     52  fb1d		       29 7f		      and	#$7f
     53  fb1f		       95 b7		      sta	BugPosY,x
     54  fb21
     55  fb21							; Set as active
     56  fb21		       a9 00		      lda	#0
     57  fb23		       95 b3		      sta	BugStunned,x
     58  fb25
     59  fb25		       60		      rts
     60  fb26
     61  fb26							; Frame Update
     62  fb26
     63  fb26				   BugUpdate
     64  fb26
     65  fb26		       a2 01		      ldx	#1
     66  fb28				   .bug_update_loop
     67  fb28		       86 80		      stx	Temp+0
     68  fb2a
     69  fb2a		       b5 b3		      lda	BugStunned,x
     70  fb2c		       f0 08		      beq	.bug_update_active
     71  fb2e
     72  fb2e				   .bug_update_stunned
     73  fb2e		       d6 b3		      dec	BugStunned,x
     74  fb30		       20 b9 fb 	      jsr	BugStunCollision
     75  fb33		       4c 3c fb 	      jmp	.bug_update_next
     76  fb36
     77  fb36				   .bug_update_active
     78  fb36		       20 42 fb 	      jsr	BugMovement
     79  fb39		       20 a1 fb 	      jsr	BugCollision
     80  fb3c
     81  fb3c				   .bug_update_next
     82  fb3c		       a6 80		      ldx	Temp+0
     83  fb3e		       ca		      dex
     84  fb3f		       10 e7		      bpl	.bug_update_loop
     85  fb41
     86  fb41		       60		      rts
     87  fb42
     88  fb42				   BugMovement
     89  fb42
     90  fb42				   .bug_movement_random
     91  fb42		       20 13 f0 	      jsr	Random
     92  fb45		       29 03		      and	#%00000011
     93  fb47		       85 81		      sta	Temp+1
     94  fb49
     95  fb49				   .bug_movement_load
     96  fb49		       a6 80		      ldx	Temp+0
     97  fb4b
     98  fb4b				   .bug_movement_x
     99  fb4b		       a4 b2		      ldy	BugSpeed
    100  fb4d
    101  fb4d							; Alter X Position
    102  fb4d		       a5 81		      lda	Temp+1
    103  fb4f		       29 01		      and	#%00000001
    104  fb51
    105  fb51				   .bug_movement_x_check
    106  fb51		       c9 01		      cmp	#1
    107  fb53		       d0 08		      bne	.bug_movement_x_right
    108  fb55
    109  fb55				   .bug_movement_x_left
    110  fb55		       d6 b5		      dec	BugPosX,x
    111  fb57		       88		      dey
    112  fb58		       d0 fb		      bne	.bug_movement_x_left
    113  fb5a
    114  fb5a		       4c 62 fb 	      jmp	.bug_movement_y
    115  fb5d
    116  fb5d				   .bug_movement_x_right
    117  fb5d		       f6 b5		      inc	BugPosX,x
    118  fb5f		       88		      dey
    119  fb60		       d0 fb		      bne	.bug_movement_x_right
    120  fb62
    121  fb62				   .bug_movement_y
    122  fb62		       a4 b2		      ldy	BugSpeed
    123  fb64
    124  fb64							; Alter Y Position
    125  fb64		       a5 81		      lda	Temp+1
    126  fb66		       29 02		      and	#%00000010
    127  fb68		       4a		      lsr
    128  fb69
    129  fb69				   .bug_movement_y_check
    130  fb69		       c9 01		      cmp	#1
    131  fb6b		       d0 08		      bne	.bug_movement_y_down
    132  fb6d
    133  fb6d				   .bug_movement_y_up
    134  fb6d		       f6 b7		      inc	BugPosY,x
    135  fb6f		       88		      dey
    136  fb70		       d0 fb		      bne	.bug_movement_y_up
    137  fb72
    138  fb72		       4c 7a fb 	      jmp	.bug_movement_boundary
    139  fb75
    140  fb75				   .bug_movement_y_down
    141  fb75		       d6 b7		      dec	BugPosY,x
    142  fb77		       88		      dey
    143  fb78		       d0 fb		      bne	.bug_movement_y_down
    144  fb7a
    145  fb7a				   .bug_movement_boundary
    146  fb7a		       b5 b5		      lda	BugPosX,x
    147  fb7c		       b4 b7		      ldy	BugPosY,x
    148  fb7e
    149  fb7e				   .bug_movement_boundary_left
    150  fb7e		       c9 18		      cmp	#BUG_BOUNDARY
    151  fb80		       b0 05		      bcs	.bug_movement_boundary_right
    152  fb82		       a9 18		      lda	#BUG_BOUNDARY
    153  fb84		       4c 8d fb 	      jmp	.bug_movement_boundary_top
    154  fb87
    155  fb87				   .bug_movement_boundary_right
    156  fb87		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    157  fb89		       90 02		      bcc	.bug_movement_boundary_top
    158  fb8b		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    159  fb8d
    160  fb8d				   .bug_movement_boundary_top
    161  fb8d		       c0 18		      cpy	#BUG_BOUNDARY
    162  fb8f		       b0 05		      bcs	.bug_movement_boundary_bottom
    163  fb91		       a0 18		      ldy	#BUG_BOUNDARY
    164  fb93		       4c 9c fb 	      jmp	.bug_movement_store
    165  fb96
    166  fb96				   .bug_movement_boundary_bottom
    167  fb96		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    168  fb98		       90 02		      bcc	.bug_movement_store
    169  fb9a		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    170  fb9c
    171  fb9c				   .bug_movement_store
    172  fb9c		       95 b5		      sta	BugPosX,x
    173  fb9e		       94 b7		      sty	BugPosY,x
    174  fba0
    175  fba0				   .bug_movement_return
    176  fba0		       60		      rts
    177  fba1
    178  fba1				   BugCollision
    179  fba1
    180  fba1		       e0 01		      cpx	#1
    181  fba3		       f0 05		      beq	.bug_collision_m1
    182  fba5
    183  fba5				   .bug_collision_m0
    184  fba5							; Collision for M0 (V set)
    185  fba5		       24 00		      bit	CXM0P
    186  fba7		       70 06		      bvs	.bug_collision_active
    187  fba9		       60		      rts
    188  fbaa
    189  fbaa				   .bug_collision_m1
    190  fbaa							; Collision for M1 (N set)
    191  fbaa		       24 01		      bit	CXM1P
    192  fbac		       30 01		      bmi	.bug_collision_active
    193  fbae		       60		      rts
    194  fbaf
    195  fbaf				   .bug_collision_active
    196  fbaf
    197  fbaf							; Reduce players score
    198  fbaf		       a5 91		      lda	ScoreValue
    199  fbb1		       f0 02		      beq	.bug_collision_score_skip
    200  fbb3		       c6 91		      dec	ScoreValue
    201  fbb5				   .bug_collision_score_skip
    202  fbb5
    203  fbb5							; Play sound
    204  fbb5		       20 07 fc 	      jsr	BugColSample
    205  fbb8
    206  fbb8		       60		      rts
    207  fbb9
    208  fbb9				   BugStunCollision
    209  fbb9
    210  fbb9		       e0 01		      cpx	#1
    211  fbbb		       f0 05		      beq	.bug_stun_collision_m1
    212  fbbd
    213  fbbd				   .bug_stun_collision_m0
    214  fbbd							; Collision for M0 (V set)
    215  fbbd		       24 00		      bit	CXM0P
    216  fbbf		       70 06		      bvs	.bug_stun_collision_active
    217  fbc1		       60		      rts
    218  fbc2
    219  fbc2				   .bug_stun_collision_m1
    220  fbc2							; Collision for M1 (N set)
    221  fbc2		       24 01		      bit	CXM1P
    222  fbc4		       30 01		      bmi	.bug_stun_collision_active
    223  fbc6		       60		      rts
    224  fbc7
    225  fbc7				   .bug_stun_collision_active
    226  fbc7							; Add points to score
    227  fbc7		       18		      clc
    228  fbc8		       a5 92		      lda	ScoreValue+1
    229  fbca		       69 04		      adc	#BUG_POINTS
    230  fbcc		       85 92		      sta	ScoreValue+1
    231  fbce
    232  fbce							; Reset bug
    233  fbce		       20 12 fb 	      jsr	BugReset
    234  fbd1
    235  fbd1							; Play sample
    236  fbd1		       20 f6 fb 	      jsr	BugSample
    237  fbd4
    238  fbd4		       60		      rts
    239  fbd5
    240  fbd5							; Horizontal Positioning
    241  fbd5
    242  fbd5				   BugPosition
    243  fbd5
    244  fbd5		       a2 02		      ldx	#2
    245  fbd7		       a5 b5		      lda	BugPosX+0
    246  fbd9		       20 00 f0 	      jsr	PosObject
    247  fbdc
    248  fbdc		       a2 03		      ldx	#3
    249  fbde		       a5 b6		      lda	BugPosX+1
    250  fbe0		       20 00 f0 	      jsr	PosObject
    251  fbe3
    252  fbe3		       60		      rts
    253  fbe4
    254  fbe4							; Scanline Draw
    255  fbe4
    256  fbe4				   BugDrawStart
    257  fbe4
    258  fbe4		       a0 01		      ldy	#1
    259  fbe6				   .bug_draw_start_loop
    260  fbe6
    261  fbe6							; Set missile 0 & 1 to be 8 clock size
    262  fbe6							;lda NuSiz0,y
    263  fbe6							;ora #%00110000
    264  fbe6							;sta NuSiz0,y
    265  fbe6							;sta NUSIZ0,y
    266  fbe6
    267  fbe6							; Setup half scanline positions
    268  fbe6		       b9 b7 00 	      lda	BugPosY,y
    269  fbe9		       4a		      lsr
    270  fbea		       99 b9 00 	      sta	BugDrawPosBottom,y
    271  fbed
    272  fbed		       69 04		      adc	#BUG_SIZE/2
    273  fbef		       99 bb 00 	      sta	BugDrawPosTop,y
    274  fbf2
    275  fbf2		       88		      dey
    276  fbf3		       10 f1		      bpl	.bug_draw_start_loop
    277  fbf5
    278  fbf5		       60		      rts
    279  fbf6
    280  fbf6				   BugSample
    281  fbf6		       a9 1e		      lda	#BUG_SAMPLE_LEN
    282  fbf8		       85 90		      sta	SampleStep
    283  fbfa		       a9 03		      lda	#BUG_SAMPLE_C
    284  fbfc		       85 16		      sta	AUDC1
    285  fbfe		       a9 14		      lda	#BUG_SAMPLE_F
    286  fc00		       85 18		      sta	AUDF1
    287  fc02		       a9 04		      lda	#BUG_SAMPLE_V
    288  fc04		       85 1a		      sta	AUDV1
    289  fc06		       60		      rts
    290  fc07
    291  fc07				   BugColSample
    292  fc07		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    293  fc09		       85 90		      sta	SampleStep
    294  fc0b		       a9 08		      lda	#BUG_COL_SAMPLE_C
    295  fc0d		       85 16		      sta	AUDC1
    296  fc0f		       a9 08		      lda	#BUG_COL_SAMPLE_F
    297  fc11		       85 18		      sta	AUDF1
    298  fc13		       a9 03		      lda	#BUG_COL_SAMPLE_V
    299  fc15		       85 1a		      sta	AUDV1
    300  fc17		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fc18					      include	"objects/swatter.asm"
      1  fc18							;==================
      2  fc18							; Swatter (player1)
      3  fc18							;==================
      4  fc18
      5  fc18							; Constants
      6  fc18
      7  fc18		       00 30	   SWATTER_COLOR =	#$30
      8  fc18		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fc18		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fc18		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fc18
     12  fc18		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fc18		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fc18
     15  fc18		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fc18		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fc18
     18  fc18		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fc18		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fc18		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fc18
     22  fc18		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fc18		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fc18		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fc18		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fc18		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fc18
     28  fc18		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fc18		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fc18		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fc18		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fc18
     33  fc18		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fc18		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fc18		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fc18		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fc18
     38  fc18							; Initialization
     39  fc18
     40  fc18				   SwatterInit
     41  fc18
     42  fc18		       20 e7 fc 	      jsr	SwatterReset
     43  fc1b
     44  fc1b		       60		      rts
     45  fc1c
     46  fc1c							; Frame Update
     47  fc1c
     48  fc1c				   SwatterUpdate
     49  fc1c
     50  fc1c							; Check b/w
     51  fc1c		       ad 82 02 	      lda	SWCHB
     52  fc1f					      REPEAT	4
     53  fc1f		       4a		      lsr
     52  fc1f					      REPEND
     53  fc20		       4a		      lsr
     52  fc20					      REPEND
     53  fc21		       4a		      lsr
     52  fc21					      REPEND
     53  fc22		       4a		      lsr
     54  fc23					      REPEND
     55  fc23		       90 10		      bcc	.swatter_update_bw
     56  fc25
     57  fc25				   .swatter_update_color
     58  fc25		       a5 bf		      lda	SwatterState
     59  fc27		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     60  fc29		       d0 05		      bne	.swatter_update_color_hold
     61  fc2b				   .swatter_update_color_active
     62  fc2b		       a9 30		      lda	#SWATTER_COLOR
     63  fc2d		       4c 42 fc 	      jmp	.swatter_update_color_set
     64  fc30				   .swatter_update_color_hold
     65  fc30		       a9 36		      lda	#SWATTER_HOLD_COLOR
     66  fc32		       4c 42 fc 	      jmp	.swatter_update_color_set
     67  fc35
     68  fc35				   .swatter_update_bw
     69  fc35		       a5 bf		      lda	SwatterState
     70  fc37		       c9 80		      cmp	#SWATTER_STATE_HOLD
     71  fc39		       d0 05		      bne	.swatter_update_bw_active
     72  fc3b				   .swatter_update_bw_hold
     73  fc3b		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     74  fc3d		       4c 42 fc 	      jmp	.swatter_update_color_set
     75  fc40				   .swatter_update_bw_active
     76  fc40		       a9 0e		      lda	#SWATTER_BW_COLOR
     77  fc42
     78  fc42				   .swatter_update_color_set
     79  fc42		       85 c0		      sta	SwatterColor
     80  fc44
     81  fc44				   .swatter_update_hold_sample
     82  fc44		       a4 bf		      ldy	SwatterState
     83  fc46		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fc48		       d0 0f		      bne	.swatter_update_state
     85  fc4a
     86  fc4a		       c6 c7		      dec	SwatterSampleCount
     87  fc4c		       d0 0b		      bne	.swatter_update_state
     88  fc4e
     89  fc4e		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     90  fc50		       85 c7		      sta	SwatterSampleCount
     91  fc52
     92  fc52		       c6 c8		      dec	SwatterSampleF
     93  fc54		       a4 c8		      ldy	SwatterSampleF
     94  fc56		       20 07 fd 	      jsr	SwatterHoldSample
     95  fc59
     96  fc59				   .swatter_update_state
     97  fc59		       a6 8d		      ldx	FrameTimer+1
     98  fc5b		       d0 2d		      bne	.swatter_update_collision
     99  fc5d
    100  fc5d		       a4 bf		      ldy	SwatterState
    101  fc5f		       c0 00		      cpy	#SWATTER_STATE_WAIT
    102  fc61		       f0 0a		      beq	.swatter_update_state_wait
    103  fc63
    104  fc63		       c0 80		      cpy	#SWATTER_STATE_HOLD
    105  fc65		       f0 18		      beq	.swatter_update_state_hold
    106  fc67
    107  fc67							; Else we're at the end of the active state
    108  fc67		       20 e7 fc 	      jsr	SwatterReset
    109  fc6a		       4c 99 fc 	      jmp	.swatter_update_return
    110  fc6d
    111  fc6d				   .swatter_update_state_wait
    112  fc6d		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    113  fc6f		       84 c8		      sty	SwatterSampleF
    114  fc71		       20 07 fd 	      jsr	SwatterHoldSample
    115  fc74
    116  fc74		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    117  fc76		       85 c7		      sta	SwatterSampleCount
    118  fc78
    119  fc78		       a9 80		      lda	#SWATTER_STATE_HOLD
    120  fc7a		       a6 c2		      ldx	SwatterHoldTime
    121  fc7c		       4c 86 fc 	      jmp	.swatter_update_state_set
    122  fc7f
    123  fc7f				   .swatter_update_state_hold
    124  fc7f		       20 16 fd 	      jsr	SwatterActiveSample
    125  fc82
    126  fc82		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    127  fc84		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    128  fc86
    129  fc86				   .swatter_update_state_set
    130  fc86		       85 bf		      sta	SwatterState
    131  fc88		       86 8d		      stx	FrameTimer+1
    132  fc8a
    133  fc8a				   .swatter_update_collision
    134  fc8a							; Check 1 frame after active
    135  fc8a		       a5 bf		      lda	SwatterState
    136  fc8c		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    137  fc8e		       d0 09		      bne	.swatter_update_return
    138  fc90		       a6 8d		      ldx	FrameTimer+1
    139  fc92		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    140  fc94		       d0 03		      bne	.swatter_update_return
    141  fc96
    142  fc96		       20 9a fc 	      jsr	SwatterCollision
    143  fc99
    144  fc99				   .swatter_update_return
    145  fc99		       60		      rts
    146  fc9a
    147  fc9a				   SwatterCollision
    148  fc9a		       24 00		      bit	CXM0P
    149  fc9c		       30 09		      bmi	.swatter_collision_m0
    150  fc9e
    151  fc9e		       24 01		      bit	CXM1P
    152  fca0		       70 0a		      bvs	.swatter_collision_m1
    153  fca2
    154  fca2		       24 07		      bit	CXPPMM
    155  fca4		       30 0e		      bmi	.swatter_collision_p0
    156  fca6
    157  fca6		       60		      rts
    158  fca7
    159  fca7				   .swatter_collision_m0
    160  fca7		       a2 00		      ldx	#0
    161  fca9		       4c ae fc 	      jmp	.swatter_collision_bug_reset
    162  fcac
    163  fcac				   .swatter_collision_m1
    164  fcac		       a2 01		      ldx	#1
    165  fcae
    166  fcae				   .swatter_collision_bug_reset
    167  fcae		       20 12 fb 	      jsr	BugReset
    168  fcb1		       4c c6 fc 	      jmp	.swatter_collision_active
    169  fcb4
    170  fcb4				   .swatter_collision_p0
    171  fcb4
    172  fcb4		       a5 91		      lda	ScoreValue
    173  fcb6		       c5 c3		      cmp	SwatterHitDamage
    174  fcb8		       90 08		      bcc	.swatter_collision_p0_zero
    175  fcba		       f0 06		      beq	.swatter_collision_p0_zero
    176  fcbc
    177  fcbc		       18		      clc
    178  fcbd		       e5 c3		      sbc	SwatterHitDamage
    179  fcbf		       4c c4 fc 	      jmp	.swatter_collision_p0_set
    180  fcc2
    181  fcc2				   .swatter_collision_p0_zero
    182  fcc2		       a9 00		      lda	#0
    183  fcc4
    184  fcc4				   .swatter_collision_p0_set
    185  fcc4		       85 91		      sta	ScoreValue
    186  fcc6
    187  fcc6				   .swatter_collision_active
    188  fcc6		       20 27 fd 	      jsr	SwatterHitSample
    189  fcc9
    190  fcc9		       60		      rts
    191  fcca
    192  fcca				   SwatterPosition
    193  fcca
    194  fcca							; Set Position
    195  fcca		       a2 01		      ldx	#1	; Object (player1)
    196  fccc		       a5 bd		      lda	SwatterPos	; X Position
    197  fcce		       20 00 f0 	      jsr	PosObject
    198  fcd1
    199  fcd1		       60		      rts
    200  fcd2
    201  fcd2							; Scanline Draw
    202  fcd2
    203  fcd2				   SwatterDrawStart
    204  fcd2
    205  fcd2							; Set player 1 to be quad size
    206  fcd2							;lda NuSiz1
    207  fcd2							;and #%11111000
    208  fcd2							;ora #%00000111
    209  fcd2							;sta NuSiz1
    210  fcd2							;sta NUSIZ1
    211  fcd2
    212  fcd2							; Set sprite color
    213  fcd2		       a5 c0		      lda	SwatterColor
    214  fcd4		       85 07		      sta	COLUP1
    215  fcd6
    216  fcd6							; Note: Doesn't need vertical delay
    217  fcd6
    218  fcd6							; Calculate starting position
    219  fcd6		       a5 be		      lda	SwatterPos+1	; Y Position
    220  fcd8		       4a		      lsr
    221  fcd9		       18		      clc
    222  fcda		       69 14		      adc	#SWATTER_SPRITE_SIZE
    223  fcdc		       85 c5		      sta	SwatterDrawPos
    224  fcde
    225  fcde							; Initialize sprite index
    226  fcde		       a9 13		      lda	#SWATTER_SPRITE_SIZE-1
    227  fce0		       85 c4		      sta	SwatterIndex
    228  fce2		       a9 00		      lda	#0
    229  fce4		       85 c6		      sta	SwatterLine
    230  fce6
    231  fce6		       60		      rts
    232  fce7
    233  fce7				   SwatterReset
    234  fce7							; Initialize Swatter State
    235  fce7		       a9 00		      lda	#SWATTER_STATE_WAIT
    236  fce9		       85 bf		      sta	SwatterState
    237  fceb
    238  fceb							; Set Wait Timer
    239  fceb		       20 13 f0 	      jsr	Random
    240  fcee		       a5 83		      lda	Rand8
    241  fcf0		       29 3f		      and	#$3f
    242  fcf2		       18		      clc
    243  fcf3		       65 c1		      adc	SwatterWaitTime
    244  fcf5		       85 8d		      sta	FrameTimer+1
    245  fcf7
    246  fcf7							; Set Random Position
    247  fcf7		       20 13 f0 	      jsr	Random
    248  fcfa		       a5 83		      lda	Rand8	; X Position
    249  fcfc		       29 7f		      and	#$7f
    250  fcfe		       85 bd		      sta	SwatterPos+0
    251  fd00		       a5 84		      lda	Rand16	; Y Position
    252  fd02		       29 7e		      and	#$7e	; Ensure that Y position is even
    253  fd04		       85 be		      sta	SwatterPos+1
    254  fd06
    255  fd06		       60		      rts
    256  fd07
    257  fd07				   SwatterHoldSample
    258  fd07		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    259  fd09		       85 90		      sta	SampleStep
    260  fd0b		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    261  fd0d		       85 16		      sta	AUDC1
    262  fd0f		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    263  fd11		       85 1a		      sta	AUDV1
    264  fd13
    265  fd13		       84 18		      sty	AUDF1	; Store value of y as frequency
    266  fd15
    267  fd15		       60		      rts
    268  fd16
    269  fd16				   SwatterActiveSample
    270  fd16		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    271  fd18		       85 90		      sta	SampleStep
    272  fd1a		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    273  fd1c		       85 16		      sta	AUDC1
    274  fd1e		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    275  fd20		       85 18		      sta	AUDF1
    276  fd22		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    277  fd24		       85 1a		      sta	AUDV1
    278  fd26		       60		      rts
    279  fd27
    280  fd27				   SwatterHitSample
    281  fd27		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    282  fd29		       85 90		      sta	SampleStep
    283  fd2b		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    284  fd2d		       85 16		      sta	AUDC1
    285  fd2f		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    286  fd31		       85 18		      sta	AUDF1
    287  fd33		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    288  fd35		       85 1a		      sta	AUDV1
    289  fd37		       60		      rts
------- FILE game.asm
     22  fd38
     23  fd38							; Initialization
     24  fd38
     25  fd38				   GameInit
     26  fd38
     27  fd38							; Setup logic and kernel
      0  fd38					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fd38				   .POINTER   SET	VBlankPtr
      2  fd38				   .ADDRESS   SET	GameVerticalBlank
      3  fd38
      4  fd38		       a9 75		      LDA	#<.ADDRESS
      5  fd3a		       85 85		      STA	.POINTER
      6  fd3c		       a9 fd		      LDA	#>.ADDRESS
      7  fd3e		       85 86		      STA	.POINTER+1
      8  fd40
      0  fd40					      SET_POINTER	KernelPtr, GameKernel
      1  fd40				   .POINTER   SET	KernelPtr
      2  fd40				   .ADDRESS   SET	GameKernel
      3  fd40
      4  fd40		       a9 ef		      LDA	#<.ADDRESS
      5  fd42		       85 87		      STA	.POINTER
      6  fd44		       a9 fd		      LDA	#>.ADDRESS
      7  fd46		       85 88		      STA	.POINTER+1
      8  fd48
      0  fd48					      SET_POINTER	OverScanPtr, GameOverScan
      1  fd48				   .POINTER   SET	OverScanPtr
      2  fd48				   .ADDRESS   SET	GameOverScan
      3  fd48
      4  fd48		       a9 9f		      LDA	#<.ADDRESS
      5  fd4a		       85 89		      STA	.POINTER
      6  fd4c		       a9 fd		      LDA	#>.ADDRESS
      7  fd4e		       85 8a		      STA	.POINTER+1
      8  fd50
     31  fd50
     32  fd50							; Mute Audio
     33  fd50		       a9 00		      lda	#0
     34  fd52							;    sta AUDC0
     35  fd52							;    sta AUDV0
     36  fd52							;    sta AUDF0
     37  fd52							;sta AUDC1
     38  fd52		       85 1a		      sta	AUDV1
     39  fd54							;sta AUDF1
     40  fd54		       85 90		      sta	SampleStep
     41  fd56
     42  fd56							; Load Audio Settings
     43  fd56		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fd58		       85 19		      sta	AUDV0
     45  fd5a
     46  fd5a							; Make it so that we play the first note immediately
     47  fd5a		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fd5c		       85 8f		      sta	AudioStep
     49  fd5e		       a9 02		      lda	#2
     50  fd60		       85 8c		      sta	FrameTimer
     51  fd62
     52  fd62							; Reset NuSiz
     53  fd62							;    lda #0
     54  fd62							;    sta NuSiz0
     55  fd62							;    sta NUSIZ0
     56  fd62							;    sta NuSiz1
     57  fd62							;    sta NUSIZ1
     58  fd62
     59  fd62							; Initialize Objects
     60  fd62		       20 fb f5 	      jsr	LevelInit
     61  fd65		       20 a9 f6 	      jsr	ScoreInit
     62  fd68		       20 41 f8 	      jsr	SpiderInit
     63  fd6b		       20 9b f9 	      jsr	LineInit
     64  fd6e		       20 09 fb 	      jsr	BugInit
     65  fd71		       20 18 fc 	      jsr	SwatterInit
     66  fd74
     67  fd74		       60		      rts
     68  fd75
     69  fd75				   GameVerticalBlank
     70  fd75
     71  fd75							; Refresh random values
     72  fd75		       20 13 f0 	      jsr	Random
     73  fd78
     74  fd78							; Update Objects
     75  fd78		       20 11 f6 	      jsr	LevelUpdate
     76  fd7b		       20 56 f8 	      jsr	SpiderUpdate
     77  fd7e		       20 ae f9 	      jsr	LineUpdate
     78  fd81		       20 26 fb 	      jsr	BugUpdate
     79  fd84		       20 1c fc 	      jsr	SwatterUpdate
     80  fd87		       20 b2 f6 	      jsr	ScoreUpdate
     81  fd8a
     82  fd8a							; Reset Collisions
     83  fd8a		       85 2c		      sta	CXCLR
     84  fd8c
     85  fd8c							; Clear horizontal movement
     86  fd8c		       85 2b		      sta	HMCLR
     87  fd8e
     88  fd8e							; Update Positions
     89  fd8e		       20 73 f9 	      jsr	SpiderPosition
     90  fd91		       20 b0 fa 	      jsr	LinePosition
     91  fd94		       20 d5 fb 	      jsr	BugPosition
     92  fd97		       20 ca fc 	      jsr	SwatterPosition
     93  fd9a
     94  fd9a							; Set final x positions
     95  fd9a		       85 02		      sta	WSYNC
     96  fd9c		       85 2a		      sta	HMOVE
     97  fd9e
     98  fd9e		       60		      rts
     99  fd9f
    100  fd9f				   GameOverScan
    101  fd9f
    102  fd9f							; Audio Routines
    103  fd9f		       20 b7 fd 	      jsr	GameAudio
    104  fda2		       20 a9 fd 	      jsr	GameSample
    105  fda5
    106  fda5							; State Routines
    107  fda5		       20 e7 fd 	      jsr	GameDeath
    108  fda8
    109  fda8		       60		      rts
    110  fda9
    111  fda9				   GameSample
    112  fda9
    113  fda9		       a6 90		      ldx	SampleStep
    114  fdab		       f0 07		      beq	.game_sample_return
    115  fdad
    116  fdad		       ca		      dex
    117  fdae		       d0 04		      bne	.game_sample_return
    118  fdb0
    119  fdb0				   .game_sample_mute
    120  fdb0		       a9 00		      lda	#0
    121  fdb2		       85 1a		      sta	AUDV1
    122  fdb4							;sta AUDF1
    123  fdb4							;sta AUDC1
    124  fdb4
    125  fdb4				   .game_sample_return
    126  fdb4		       86 90		      stx	SampleStep
    127  fdb6		       60		      rts
    128  fdb7
    129  fdb7				   GameAudio
    130  fdb7
    131  fdb7		       a6 8c		      ldx	FrameTimer
    132  fdb9		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    133  fdbb		       f0 25		      beq	.game_audio_mute_note
    134  fdbd		       e0 00		      cpx	#0
    135  fdbf		       d0 25		      bne	.game_audio_return
    136  fdc1
    137  fdc1							; Reset Timer
    138  fdc1		       a2 09		      ldx	#GAME_AUDIO_STEP
    139  fdc3		       86 8c		      stx	FrameTimer
    140  fdc5
    141  fdc5				   .game_audio_play
    142  fdc5
    143  fdc5							; Increment melody position
    144  fdc5		       a4 8f		      ldy	AudioStep
    145  fdc7		       c8		      iny
    146  fdc8
    147  fdc8		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    148  fdca		       d0 02		      bne	.game_audio_play_note
    149  fdcc
    150  fdcc							; Loop our audio step
    151  fdcc		       a0 00		      ldy	#0
    152  fdce
    153  fdce				   .game_audio_play_note
    154  fdce
    155  fdce							; Save current position
    156  fdce		       84 8f		      sty	AudioStep
    157  fdd0
    158  fdd0							; Melody Line
    159  fdd0		       b9 c5 fe 	      lda	GameAudio0,y
    160  fdd3		       c9 ff		      cmp	#$FF
    161  fdd5		       f0 0b		      beq	.game_audio_mute_note
    162  fdd7		       85 17		      sta	AUDF0
    163  fdd9		       a9 06		      lda	#GAME_AUDIO_TONE
    164  fddb		       85 15		      sta	AUDC0
    165  fddd		       a9 02		      lda	#GAME_AUDIO_VOLUME
    166  fddf		       85 19		      sta	AUDV0
    167  fde1
    168  fde1		       60		      rts
    169  fde2
    170  fde2				   .game_audio_mute_note
    171  fde2
    172  fde2		       a9 00		      lda	#0
    173  fde4							;sta AUDF0
    174  fde4							;sta AUDC0
    175  fde4		       85 19		      sta	AUDV0
    176  fde6
    177  fde6				   .game_audio_return
    178  fde6		       60		      rts
    179  fde7
    180  fde7				   GameDeath
    181  fde7		       a5 91		      lda	ScoreValue+0
    182  fde9		       d0 03		      bne	.game_death_return
    183  fdeb
    184  fdeb							; Show Game Over Screen
    185  fdeb		       20 e5 fe 	      jsr	OverInit
    186  fdee
    187  fdee				   .game_death_return
    188  fdee		       60		      rts
    189  fdef
    190  fdef				   GameKernel
    191  fdef
    192  fdef							; Turn on display
    193  fdef		       a9 00		      lda	#0
    194  fdf1		       85 01		      sta	VBLANK
    195  fdf3
    196  fdf3				   .game_kernel_score
    197  fdf3
    198  fdf3							; Draw Score on top first
    199  fdf3		       20 24 f7 	      jsr	ScoreDraw
    200  fdf6
    201  fdf6				   .game_kernel_objects_start
    202  fdf6
    203  fdf6							; Setup Drawing Objects
    204  fdf6		       20 38 f8 	      jsr	WebDrawStart
    205  fdf9		       20 7b f9 	      jsr	SpiderDrawStart
    206  fdfc		       20 d2 fc 	      jsr	SwatterDrawStart
    207  fdff		       20 b8 fa 	      jsr	LineDrawStart
    208  fe02		       20 e4 fb 	      jsr	BugDrawStart
    209  fe05
    210  fe05							; Set missle and sprite sizes
    211  fe05		       a9 35		      lda	#%00110101
    212  fe07		       85 04		      sta	NUSIZ0
    213  fe09		       a9 37		      lda	#%00110111
    214  fe0b		       85 05		      sta	NUSIZ1
    215  fe0d
    216  fe0d							; Set playfield settings and ball size
    217  fe0d		       a9 21		      lda	#%00100001
    218  fe0f		       85 0a		      sta	CTRLPF
    219  fe11
    220  fe11							; Half scanline counter
    221  fe11		       a2 54		      ldx	#(KERNEL_SCANLINES-SCORE_LINES)/2-2
    222  fe13
    223  fe13							; 6 line counter
    224  fe13		       a9 00		      lda	#0
    225  fe15		       85 82		      sta	Temp+2
    226  fe17
    227  fe17		       85 02		      sta	WSYNC
    228  fe19
    229  fe19							; Load background color
    230  fe19		       a5 9e		      lda	WebColor+0
    231  fe1b		       85 09		      sta	COLUBK
    232  fe1d
    233  fe1d				   .game_kernel_objects
    234  fe1d
    235  fe1d		       a5 82		      lda	Temp+2
    236  fe1f		       d0 1a		      bne	.game_kernel_missle
    237  fe21
    238  fe21		       a9 03		      lda	#3
    239  fe23		       85 82		      sta	Temp+2
    240  fe25
    241  fe25				   .game_kernel_web
    242  fe25
    243  fe25				   .game_kernel_web_pf
    244  fe25							; Web
    245  fe25
    246  fe25		       a4 9d		      ldy	WebIndex
    247  fe27
    248  fe27							; Load Image
    249  fe27		       b9 50 f1 	      lda	WebImagePF0,y
    250  fe2a		       85 0d		      sta	PF0
    251  fe2c		       b9 6c f1 	      lda	WebImagePF1,y
    252  fe2f		       85 0e		      sta	PF1
    253  fe31		       b9 88 f1 	      lda	WebImagePF2,y
    254  fe34		       85 0f		      sta	PF2
    255  fe36
    256  fe36		       e6 9d		      inc	WebIndex
    257  fe38
    258  fe38		       4c 57 fe 	      jmp	.game_kernel_line
    259  fe3b
    260  fe3b				   .game_kernel_missle
    261  fe3b
    262  fe3b				   .game_kernel_missle_bug_0
    263  fe3b							; First Bug
    264  fe3b
    265  fe3b		       a0 00		      ldy	#%00000000
    266  fe3d
    267  fe3d							; Top
    268  fe3d		       e4 bb		      cpx	BugDrawPosTop+0
    269  fe3f		       b0 06		      bcs	.game_kernel_missle_bug_0_off
    270  fe41
    271  fe41							; Bottom
    272  fe41		       e4 b9		      cpx	BugDrawPosBottom+0
    273  fe43		       90 02		      bcc	.game_kernel_missle_bug_0_off
    274  fe45
    275  fe45				   .game_kernel_missle_bug_0_on
    276  fe45		       a0 02		      ldy	#%00000010
    277  fe47
    278  fe47				   .game_kernel_missle_bug_0_off
    279  fe47		       84 1d		      sty	ENAM0
    280  fe49
    281  fe49				   .game_kernel_missle_bug_1
    282  fe49							; Second Bug
    283  fe49
    284  fe49		       a0 00		      ldy	#%00000000
    285  fe4b
    286  fe4b							; Top
    287  fe4b		       e4 bc		      cpx	BugDrawPosTop+1
    288  fe4d		       b0 06		      bcs	.game_kernel_missle_bug_1_off
    289  fe4f
    290  fe4f							; Bottom
    291  fe4f		       e4 ba		      cpx	BugDrawPosBottom+1
    292  fe51		       90 02		      bcc	.game_kernel_missle_bug_1_off
    293  fe53
    294  fe53				   .game_kernel_missle_bug_1_on
    295  fe53		       a0 02		      ldy	#%00000010
    296  fe55
    297  fe55				   .game_kernel_missle_bug_1_off
    298  fe55		       84 1e		      sty	ENAM1
    299  fe57
    300  fe57				   .game_kernel_line
    301  fe57							; Line
    302  fe57
    303  fe57		       24 ab		      bit	LineEnabled
    304  fe59		       10 0e		      bpl	.game_kernel_line_skip
    305  fe5b
    306  fe5b		       a0 00		      ldy	#%00000000
    307  fe5d
    308  fe5d							; Top
    309  fe5d		       e4 b1		      cpx	LineDrawPos+1
    310  fe5f		       b0 06		      bcs	.game_kernel_line_set
    311  fe61
    312  fe61							; Bottom
    313  fe61		       e4 b0		      cpx	LineDrawPos+0
    314  fe63		       90 02		      bcc	.game_kernel_line_set
    315  fe65
    316  fe65		       a0 02		      ldy	#%00000010
    317  fe67				   .game_kernel_line_set
    318  fe67		       84 1f		      sty	ENABL
    319  fe69
    320  fe69				   .game_kernel_line_skip
    321  fe69
    322  fe69							; Next Line
    323  fe69		       85 02		      sta	WSYNC
    324  fe6b
    325  fe6b				   .game_kernel_sprite
    326  fe6b
    327  fe6b				   .game_kernel_sprite_spider
    328  fe6b							; Spider
    329  fe6b
    330  fe6b		       a4 a6		      ldy	SpiderIndex
    331  fe6d		       30 13		      bmi	.game_kernel_sprite_spider_load	; At end of sprite
    332  fe6f
    333  fe6f							; Check y position to see if we should be drawing
    334  fe6f		       8a		      txa
    335  fe70		       e5 a7		      sbc	SpiderDrawPos
    336  fe72		       10 0e		      bpl	.game_kernel_sprite_spider_load
    337  fe74
    338  fe74				   .game_kernel_sprite_spider_draw
    339  fe74
    340  fe74							; Decrement sprite index
    341  fe74		       88		      dey
    342  fe75		       10 05		      bpl	.game_kernel_sprite_spider_grab
    343  fe77
    344  fe77		       a9 00		      lda	#0
    345  fe79		       4c 7e fe 	      jmp	.game_kernel_sprite_spider_store
    346  fe7c
    347  fe7c				   .game_kernel_sprite_spider_grab
    348  fe7c		       b1 a0		      lda	(SpiderPtr),y
    349  fe7e				   .game_kernel_sprite_spider_store
    350  fe7e		       84 a6		      sty	SpiderIndex
    351  fe80		       85 a8		      sta	SpiderLine
    352  fe82
    353  fe82				   .game_kernel_sprite_spider_load
    354  fe82		       a5 a8		      lda	SpiderLine
    355  fe84		       85 1b		      sta	GRP0
    356  fe86
    357  fe86				   .game_kernel_sprite_swatter
    358  fe86							; Swatter
    359  fe86
    360  fe86							; Check if wait state
    361  fe86		       24 bf		      bit	SwatterState
    362  fe88		       10 10		      bpl	.game_kernel_sprite_swatter_load
    363  fe8a
    364  fe8a		       a4 c4		      ldy	SwatterIndex
    365  fe8c		       30 0c		      bmi	.game_kernel_sprite_swatter_load	; At end of sprite
    366  fe8e
    367  fe8e							; Check y position to see if we should be drawing
    368  fe8e		       8a		      txa
    369  fe8f		       e5 c5		      sbc	SwatterDrawPos
    370  fe91		       10 07		      bpl	.game_kernel_sprite_swatter_load
    371  fe93
    372  fe93				   .game_kernel_sprite_swatter_draw
    373  fe93		       b9 d4 f1 	      lda	SwatterSprite,y
    374  fe96		       85 c6		      sta	SwatterLine
    375  fe98
    376  fe98							; Decrement sprite index
    377  fe98		       c6 c4		      dec	SwatterIndex
    378  fe9a
    379  fe9a				   .game_kernel_sprite_swatter_load
    380  fe9a		       a5 c6		      lda	SwatterLine
    381  fe9c				   .game_kernel_sprite_swatter_line
    382  fe9c		       85 1c		      sta	GRP1
    383  fe9e
    384  fe9e				   .game_kernel_sprite_end
    385  fe9e
    386  fe9e							;sta WSYNC
    387  fe9e
    388  fe9e							; New line, decrement half scanline, and increment 3 line counter
    389  fe9e		       c6 82		      dec	Temp+2
    390  fea0		       ca		      dex
    391  fea1		       f0 03		      beq	.game_kernel_clean
    392  fea3		       4c 1d fe 	      jmp	.game_kernel_objects
    393  fea6
    394  fea6				   .game_kernel_clean
    395  fea6
    396  fea6		       85 02		      sta	WSYNC
    397  fea8
    398  fea8		       a9 00		      lda	#0
    399  feaa		       85 09		      sta	COLUBK
    400  feac		       85 08		      sta	COLUPF
    401  feae		       85 06		      sta	COLUP0
    402  feb0		       85 07		      sta	COLUP1
    403  feb2		       85 0d		      sta	PF0
    404  feb4		       85 0e		      sta	PF1
    405  feb6		       85 0f		      sta	PF2
    406  feb8		       85 1b		      sta	GRP0
    407  feba		       85 1c		      sta	GRP1
    408  febc		       85 1d		      sta	ENAM0
    409  febe		       85 1e		      sta	ENAM1
    410  fec0		       85 1f		      sta	ENABL
    411  fec2
    412  fec2		       85 02		      sta	WSYNC
    413  fec4
    414  fec4				   .game_kernel_return
    415  fec4		       60		      rts
    416  fec5
    417  fec5				   GameAudio0
    418  fec5		       0d		      .byte.b	#13	; D
    419  fec6		       ff		      .byte.b	#$FF
    420  fec7		       0f		      .byte.b	#15	; B
    421  fec8		       ff		      .byte.b	#$FF
    422  fec9		       0d		      .byte.b	#13	; D
    423  feca		       ff		      .byte.b	#$FF
    424  fecb		       0f		      .byte.b	#15	; B
    425  fecc		       ff		      .byte.b	#$FF
    426  fecd		       0d		      .byte.b	#13	; D
    427  fece		       0d		      .byte.b	#13	; D
    428  fecf		       0f		      .byte.b	#15	; B
    429  fed0		       ff		      .byte.b	#$FF
    430  fed1		       0c		      .byte.b	#12	; D#
    431  fed2		       ff		      .byte.b	#$FF
    432  fed3		       0f		      .byte.b	#15	; B
    433  fed4		       ff		      .byte.b	#$FF
    434  fed5		       0b		      .byte.b	#11	; E
    435  fed6		       ff		      .byte.b	#$FF
    436  fed7		       0e		      .byte.b	#14	; C#
    437  fed8		       ff		      .byte.b	#$FF
    438  fed9		       0b		      .byte.b	#11
    439  feda		       ff		      .byte.b	#$FF
    440  fedb		       0e		      .byte.b	#14
    441  fedc		       ff		      .byte.b	#$FF
    442  fedd		       0b		      .byte.b	#11
    443  fede		       0b		      .byte.b	#11
    444  fedf		       0e		      .byte.b	#14
    445  fee0		       ff		      .byte.b	#$FF
    446  fee1		       0b		      .byte.b	#11
    447  fee2		       ff		      .byte.b	#$FF
    448  fee3		       0e		      .byte.b	#14
    449  fee4		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fee5					      include	"over.asm"
      1  fee5							;================
      2  fee5							; Constants
      3  fee5							;================
      4  fee5
      5  fee5		       00 00	   OVER_BG_COLOR =	#$00
      6  fee5		       00 44	   OVER_FG_COLOR =	#$44
      7  fee5		       00 06	   OVER_FG_BW_COLOR =	#$06
      8  fee5
      9  fee5		       00 07	   OVER_AUDIO_TONE =	7
     10  fee5		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     11  fee5		       00 06	   OVER_AUDIO_LENGTH =	6
     12  fee5		       00 10	   OVER_AUDIO_STEP =	16
     13  fee5
     14  fee5		       00 09	   OVER_IMAGE_SIZE =	9
     15  fee5		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     16  fee5		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     17  fee5		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     18  fee5
     19  fee5				   OverInit
     20  fee5
     21  fee5							; Setup logic and kernel
      0  fee5					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fee5				   .POINTER   SET	VBlankPtr
      2  fee5				   .ADDRESS   SET	OverVerticalBlank
      3  fee5
      4  fee5		       a9 14		      LDA	#<.ADDRESS
      5  fee7		       85 85		      STA	.POINTER
      6  fee9		       a9 ff		      LDA	#>.ADDRESS
      7  feeb		       85 86		      STA	.POINTER+1
      8  feed
      0  feed					      SET_POINTER	KernelPtr, OverKernel
      1  feed				   .POINTER   SET	KernelPtr
      2  feed				   .ADDRESS   SET	OverKernel
      3  feed
      4  feed		       a9 6e		      LDA	#<.ADDRESS
      5  feef		       85 87		      STA	.POINTER
      6  fef1		       a9 ff		      LDA	#>.ADDRESS
      7  fef3		       85 88		      STA	.POINTER+1
      8  fef5
      0  fef5					      SET_POINTER	OverScanPtr, OverOverScan
      1  fef5				   .POINTER   SET	OverScanPtr
      2  fef5				   .ADDRESS   SET	OverOverScan
      3  fef5
      4  fef5		       a9 2e		      LDA	#<.ADDRESS
      5  fef7		       85 89		      STA	.POINTER
      6  fef9		       a9 ff		      LDA	#>.ADDRESS
      7  fefb		       85 8a		      STA	.POINTER+1
      8  fefd
     25  fefd
     26  fefd							; Load audio settings
     27  fefd		       a9 07		      lda	#OVER_AUDIO_TONE
     28  feff		       85 15		      sta	AUDC0
     29  ff01							;lda #OVER_AUDIO_VOLUME
     30  ff01							;sta AUDV0
     31  ff01		       a9 00		      lda	#0
     32  ff03							;sta AUDC1
     33  ff03		       85 1a		      sta	AUDV1
     34  ff05
     35  ff05							; Set initial button state
     36  ff05							;lda #0
     37  ff05		       85 8e		      sta	InputState
     38  ff07
     39  ff07							; Setup frame counters
     40  ff07		       a9 01		      lda	#1
     41  ff09		       85 8c		      sta	FrameTimer
     42  ff0b		       a9 10		      lda	#OVER_AUDIO_STEP
     43  ff0d		       85 90		      sta	SampleStep
     44  ff0f		       a9 06		      lda	#OVER_AUDIO_LENGTH
     45  ff11		       85 8f		      sta	AudioStep
     46  ff13
     47  ff13		       60		      rts
     48  ff14
     49  ff14				   OverVerticalBlank
     50  ff14		       20 b2 f6 	      jsr	ScoreUpdate
     51  ff17
     52  ff17							; Load Colors
     53  ff17		       a9 00		      lda	#OVER_BG_COLOR
     54  ff19		       85 09		      sta	COLUBK
     55  ff1b
     56  ff1b							; Check b/w
     57  ff1b		       ad 82 02 	      lda	SWCHB
     58  ff1e					      REPEAT	4
     59  ff1e		       4a		      lsr
     58  ff1e					      REPEND
     59  ff1f		       4a		      lsr
     58  ff1f					      REPEND
     59  ff20		       4a		      lsr
     58  ff20					      REPEND
     59  ff21		       4a		      lsr
     60  ff22					      REPEND
     61  ff22		       90 05		      bcc	.over_bw
     62  ff24
     63  ff24				   .over_color
     64  ff24		       a9 44		      lda	#OVER_FG_COLOR
     65  ff26		       85 08		      sta	COLUPF
     66  ff28
     67  ff28		       60		      rts
     68  ff29
     69  ff29				   .over_bw
     70  ff29							; Load b/w Colors
     71  ff29		       a9 06		      lda	#OVER_FG_BW_COLOR
     72  ff2b		       85 08		      sta	COLUPF
     73  ff2d
     74  ff2d		       60		      rts
     75  ff2e
     76  ff2e				   OverOverScan
     77  ff2e		       20 35 ff 	      jsr	OverAudio
     78  ff31		       20 59 ff 	      jsr	OverState
     79  ff34		       60		      rts
     80  ff35
     81  ff35				   OverAudio
     82  ff35
     83  ff35		       a5 8c		      lda	FrameTimer
     84  ff37		       d0 1f		      bne	.over_audio_return
     85  ff39
     86  ff39							; Reset Timer
     87  ff39					      REPEAT	3
     88  ff39		       e6 90		      inc	SampleStep
     87  ff39					      REPEND
     88  ff3b		       e6 90		      inc	SampleStep
     87  ff3b					      REPEND
     88  ff3d		       e6 90		      inc	SampleStep
     89  ff3f					      REPEND
     90  ff3f		       a5 90		      lda	SampleStep
     91  ff41		       85 8c		      sta	FrameTimer
     92  ff43
     93  ff43				   .over_audio_play
     94  ff43
     95  ff43							; Increment melody position
     96  ff43		       a4 8f		      ldy	AudioStep
     97  ff45		       f0 0d		      beq	.over_audio_mute_note
     98  ff47		       c6 8f		      dec	AudioStep
     99  ff49		       88		      dey
    100  ff4a
    101  ff4a				   .over_audio_play_note
    102  ff4a
    103  ff4a							; Melody Line
    104  ff4a		       b9 ba ff 	      lda	OverAudio0,y
    105  ff4d		       85 17		      sta	AUDF0
    106  ff4f		       a9 06		      lda	#OVER_AUDIO_VOLUME
    107  ff51		       85 19		      sta	AUDV0
    108  ff53
    109  ff53		       60		      rts
    110  ff54
    111  ff54				   .over_audio_mute_note
    112  ff54		       a9 00		      lda	#0
    113  ff56							;sta AUDF0
    114  ff56		       85 19		      sta	AUDV0
    115  ff58
    116  ff58				   .over_audio_return
    117  ff58		       60		      rts
    118  ff59
    119  ff59				   OverState
    120  ff59
    121  ff59							; Check to see if audio has finished
    122  ff59		       a5 8f		      lda	AudioStep
    123  ff5b		       d0 10		      bne	.over_state_return
    124  ff5d
    125  ff5d							; Check if Fire Button on controller 1 is released
    126  ff5d		       a5 0c		      lda	INPT4
    127  ff5f		       30 05		      bmi	.over_state_check
    128  ff61
    129  ff61				   .over_state_on
    130  ff61		       a9 01		      lda	#1
    131  ff63		       85 8e		      sta	InputState
    132  ff65		       60		      rts
    133  ff66
    134  ff66				   .over_state_check
    135  ff66		       a5 8e		      lda	InputState
    136  ff68		       f0 03		      beq	.over_state_return
    137  ff6a
    138  ff6a				   .over_state_next
    139  ff6a							; Button is released, load title screen
    140  ff6a		       20 7c f3 	      jsr	TitleInit
    141  ff6d
    142  ff6d				   .over_state_return
    143  ff6d		       60		      rts
    144  ff6e
    145  ff6e				   OverKernel
    146  ff6e
    147  ff6e							; Turn on display
    148  ff6e		       a9 00		      lda	#0
    149  ff70		       85 01		      sta	VBLANK
    150  ff72
    151  ff72				   .over_kernel_score
    152  ff72
    153  ff72							; Draw Score on top first (no update)
    154  ff72		       20 24 f7 	      jsr	ScoreDraw
    155  ff75
    156  ff75				   .over_kernel_init
    157  ff75							; Playfield Control
    158  ff75							;lda CtrlPf
    159  ff75							;and #%11111101 ; Use playfield foreground color
    160  ff75							;ora #%00000001 ; Set mirroring
    161  ff75							;sta CtrlPf
    162  ff75		       a9 01		      lda	#%00000001
    163  ff77		       85 0a		      sta	CTRLPF
    164  ff79
    165  ff79				   .over_kernel_top_padding
    166  ff79							; Top Padding
    167  ff79		       20 98 ff 	      jsr	OverPadding
    168  ff7c
    169  ff7c				   .over_kernel_image
    170  ff7c		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    171  ff7e
    172  ff7e				   .over_kernel_image_next
    173  ff7e		       bd b1 ff 	      lda	OverImagePF2,x
    174  ff81		       85 0f		      sta	PF2
    175  ff83		       bd a8 ff 	      lda	OverImagePF1,x
    176  ff86		       85 0e		      sta	PF1
    177  ff88							;    lda OverImagePF0,x
    178  ff88							;    sta PF0
    179  ff88
    180  ff88		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    181  ff8a				   .over_kernel_image_loop
    182  ff8a		       85 02		      sta	WSYNC
    183  ff8c		       88		      dey
    184  ff8d		       d0 fb		      bne	.over_kernel_image_loop
    185  ff8f
    186  ff8f		       ca		      dex
    187  ff90		       10 ec		      bpl	.over_kernel_image_next
    188  ff92
    189  ff92				   .over_kernel_bottom_padding
    190  ff92							; Bottom Padding
    191  ff92		       20 98 ff 	      jsr	OverPadding
    192  ff95
    193  ff95				   .over_kernel_return
    194  ff95		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    195  ff97		       60		      rts
    196  ff98
    197  ff98				   OverPadding
    198  ff98		       a9 00		      lda	#0
    199  ff9a		       85 0d		      sta	PF0
    200  ff9c		       85 0e		      sta	PF1
    201  ff9e		       85 0f		      sta	PF2
    202  ffa0
    203  ffa0		       a2 32		      ldx	#OVER_IMAGE_PADDING
    204  ffa2				   .over_padding_loop
    205  ffa2		       85 02		      sta	WSYNC
    206  ffa4		       ca		      dex
    207  ffa5		       d0 fb		      bne	.over_padding_loop
    208  ffa7
    209  ffa7		       60		      rts
    210  ffa8
    211  ffa8				   OverAssets
    212  ffa8
    213  ffa8							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ffa8					      include	"over_image.asm"
      1  ffa8							;OverImagePF0:
      2  ffa8							;    .BYTE %00000000
      3  ffa8							;    .BYTE %00000000
      4  ffa8							;    .BYTE %00000000
      5  ffa8							;    .BYTE %00000000
      6  ffa8							;    .BYTE %00000000
      7  ffa8							;    .BYTE %00000000
      8  ffa8							;    .BYTE %00000000
      9  ffa8							;    .BYTE %00000000
     10  ffa8							;    .BYTE %00000000
     11  ffa8
     12  ffa8				   OverImagePF1
     13  ffa8		       0c		      .BYTE.b	%00001100
     14  ffa9		       13		      .BYTE.b	%00010011
     15  ffaa		       20		      .BYTE.b	%00100000
     16  ffab		       23		      .BYTE.b	%00100011
     17  ffac		       24		      .BYTE.b	%00100100
     18  ffad		       24		      .BYTE.b	%00100100
     19  ffae		       12		      .BYTE.b	%00010010
     20  ffaf		       10		      .BYTE.b	%00010000
     21  ffb0		       08		      .BYTE.b	%00001000
     22  ffb1
     23  ffb1				   OverImagePF2
     24  ffb1		       e0		      .BYTE.b	%11100000
     25  ffb2		       18		      .BYTE.b	%00011000
     26  ffb3		       05		      .BYTE.b	%00000101
     27  ffb4		       52		      .BYTE.b	%01010010
     28  ffb5		       23		      .BYTE.b	%00100011
     29  ffb6		       52		      .BYTE.b	%01010010
     30  ffb7		       04		      .BYTE.b	%00000100
     31  ffb8		       18		      .BYTE.b	%00011000
     32  ffb9		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    215  ffba
    216  ffba				   OverAudio0
    217  ffba
    218  ffba		       1a		      .BYTE.b	#26	; D1
    219  ffbb		       1a		      .BYTE.b	#26
    220  ffbc		       16		      .BYTE.b	#22	; F1
    221  ffbd		       11		      .BYTE.b	#17	; A1
    222  ffbe		       0d		      .BYTE.b	#13	; D2
    223  ffbf		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    325  ffc0
    326  ffc0							;================
    327  ffc0							; End of cart
    328  ffc0							;================
    329  ffc0
    330  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    331  fffa
    332  fffa				   InterruptVectors
    333  fffa
    334  fffa		       18 f2		      .word.w	InitSystem	; NMI
    335  fffc		       18 f2		      .word.w	InitSystem	; RESET
    336  fffe		       18 f2		      .word.w	InitSystem	; IRQ
    337  10000
    338  10000					       END
