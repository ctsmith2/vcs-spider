------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: February 11th, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00cd ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; Global
     53 U0080
     54 U0080		       00 00 00 00 Temp       ds	4
     55 U0084		       00	   Rand8      ds	1
     56 U0085		       00	   Rand16     ds	1
     57 U0086
     58 U0086		       00 00	   VBlankPtr  ds	2
     59 U0088		       00 00	   KernelPtr  ds	2
     60 U008a		       00 00	   OverScanPtr ds	2
     61 U008c
     62 U008c		       00	   Frame      ds	1
     63 U008d		       00 00	   FrameTimer ds	2
     64 U008f		       00 00	   InputState ds	2
     65 U0091
     66 U0091		       00	   AudioStep  ds	1
     67 U0092		       00	   SampleStep ds	1
     68 U0093
     69 U0093							; Game
     70 U0093
     71 U0093		       00	   GameType   ds	1
     72 U0094		       00	   GameAudioStep ds	1
     73 U0095
     74 U0095							; Score
     75 U0095
     76 U0095		       00 00	   ScoreValue ds	2
     77 U0097		       00 00	   ScoreDigitOnes ds	2
     78 U0099		       00 00	   ScoreDigitTens ds	2
     79 U009b		       00 00 00    ScoreDigitGfx ds	3
     80 U009e		       00 00	   ScoreBarGfx ds	2
     81 U00a0
     82 U00a0							; Level
     83 U00a0		       00	   LevelCurrent ds	1
     84 U00a1
     85 U00a1							; Web
     86 U00a1
     87 U00a1		       00	   WebIndex   ds	1
     88 U00a2		       00 00	   WebColor   ds	2
     89 U00a4
     90 U00a4							; Spider
     91 U00a4
     92 U00a4		       00 00	   SpiderPtr  ds	2
     93 U00a6		       00 00	   SpiderPos  ds	2
     94 U00a8		       00	   SpiderCtrl ds	1
     95 U00a9		       00	   SpiderColor ds	1
     96 U00aa
     97 U00aa		       00	   SpiderIndex ds	1
     98 U00ab		       00	   SpiderDrawPos ds	1
     99 U00ac		       00	   SpiderLine ds	1
    100 U00ad
    101 U00ad		       00 00	   SpiderPtr2 ds	2
    102 U00af
    103 U00af							; Line
    104 U00af
    105 U00af		       00	   LineEnabled ds	1
    106 U00b0		       00 00	   LinePos    ds	2
    107 U00b2		       00 00	   LineVelocity ds	2
    108 U00b4		       00 00	   LineDrawPos ds	2
    109 U00b6
    110 U00b6							; Bug
    111 U00b6
    112 U00b6		       00	   BugSpeed   ds	1
    113 U00b7
    114 U00b7		       00 00	   BugStunned ds	2
    115 U00b9		       00 00	   BugPosX    ds	2
    116 U00bb		       00 00	   BugPosY    ds	2
    117 U00bd
    118 U00bd		       00 00	   BugDrawPosBottom ds	2
    119 U00bf		       00 00	   BugDrawPosTop ds	2
    120 U00c1
    121 U00c1							; Swatter
    122 U00c1
    123 U00c1		       00 00	   SwatterPos ds	2
    124 U00c3		       00	   SwatterState ds	1
    125 U00c4		       00	   SwatterColor ds	1
    126 U00c5
    127 U00c5		       00	   SwatterWaitTime ds	1
    128 U00c6		       00	   SwatterHoldTime ds	1
    129 U00c7		       00	   SwatterHitDamage ds	1
    130 U00c8
    131 U00c8		       00	   SwatterIndex ds	1
    132 U00c9		       00	   SwatterDrawPos ds	1
    133 U00ca		       00	   SwatterLine ds	1
    134 U00cb
    135 U00cb		       00	   SwatterSampleCount ds	1
    136 U00cc		       00	   SwatterSampleF ds	1
    137 U00cd
    138  10000 ????				       SEG
    139  f000					      org	$F000	; Start of cart area
    140  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 84		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 85		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 84		      sta	Rand8
     49  f01e		       45 85		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 80		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 81		      sta	Temp+1
     70  f029		       85 82		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 80		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 81		      lda	Temp+1	; And add into result
     77  f031		       65 81		      adc	Temp+1
     78  f033		       85 81		      sta	Temp+1
     79  f035
     80  f035		       a5 82		      lda	Temp+2	; Propagating any carry
     81  f037		       65 82		      adc	Temp+2
     82  f039		       85 82		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 81		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 82		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    142  f044
    143  f044							; Assets
    144  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
------- FILE title_bug.asm LEVEL 2 PASS 2
      0  f0bc					      include	"title_bug.asm"
      1  f0bc				   TitleBug
      2  f0bc
      3  f0bc		       10		      .BYTE.b	%00010000
      4  f0bd		       57		      .BYTE.b	%01010111
      5  f0be		       4f		      .BYTE.b	%01001111
      6  f0bf		       3f		      .BYTE.b	%00111111
      7  f0c0		       19		      .BYTE.b	%00011001
      8  f0c1		       79		      .BYTE.b	%01111001
      9  f0c2		       8f		      .BYTE.b	%10001111
     10  f0c3		       97		      .BYTE.b	%10010111
     11  f0c4		       e0		      .BYTE.b	%11100000
     12  f0c5
     13  f0c5		       57		      .BYTE.b	%01010111
     14  f0c6		       4f		      .BYTE.b	%01001111
     15  f0c7		       3f		      .BYTE.b	%00111111
     16  f0c8		       19		      .BYTE.b	%00011001
     17  f0c9		       7d		      .BYTE.b	%01111101
     18  f0ca		       8f		      .BYTE.b	%10001111
     19  f0cb		       f7		      .BYTE.b	%11110111
     20  f0cc		       00		      .BYTE.b	%00000000
     21  f0cd		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    149  f0ce
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0ce					      include	"objects/score_digits.asm"
      1  f0ce				   ScoreDigits
      2  f0ce
      3  f0ce		       77		      .BYTE.b	%01110111
      4  f0cf		       55		      .BYTE.b	%01010101
      5  f0d0		       55		      .BYTE.b	%01010101
      6  f0d1		       55		      .BYTE.b	%01010101
      7  f0d2		       77		      .BYTE.b	%01110111
      8  f0d3
      9  f0d3		       11		      .BYTE.b	%00010001
     10  f0d4		       11		      .BYTE.b	%00010001
     11  f0d5		       11		      .BYTE.b	%00010001
     12  f0d6		       11		      .BYTE.b	%00010001
     13  f0d7		       11		      .BYTE.b	%00010001
     14  f0d8
     15  f0d8		       77		      .BYTE.b	%01110111
     16  f0d9		       11		      .BYTE.b	%00010001
     17  f0da		       77		      .BYTE.b	%01110111
     18  f0db		       44		      .BYTE.b	%01000100
     19  f0dc		       77		      .BYTE.b	%01110111
     20  f0dd
     21  f0dd		       77		      .BYTE.b	%01110111
     22  f0de		       11		      .BYTE.b	%00010001
     23  f0df		       33		      .BYTE.b	%00110011
     24  f0e0		       11		      .BYTE.b	%00010001
     25  f0e1		       77		      .BYTE.b	%01110111
     26  f0e2
     27  f0e2		       55		      .BYTE.b	%01010101
     28  f0e3		       55		      .BYTE.b	%01010101
     29  f0e4		       77		      .BYTE.b	%01110111
     30  f0e5		       11		      .BYTE.b	%00010001
     31  f0e6		       11		      .BYTE.b	%00010001
     32  f0e7
     33  f0e7		       77		      .BYTE.b	%01110111
     34  f0e8		       44		      .BYTE.b	%01000100
     35  f0e9		       77		      .BYTE.b	%01110111
     36  f0ea		       11		      .BYTE.b	%00010001
     37  f0eb		       77		      .BYTE.b	%01110111
     38  f0ec
     39  f0ec		       77		      .BYTE.b	%01110111
     40  f0ed		       44		      .BYTE.b	%01000100
     41  f0ee		       77		      .BYTE.b	%01110111
     42  f0ef		       55		      .BYTE.b	%01010101
     43  f0f0		       77		      .BYTE.b	%01110111
     44  f0f1
     45  f0f1		       77		      .BYTE.b	%01110111
     46  f0f2		       11		      .BYTE.b	%00010001
     47  f0f3		       22		      .BYTE.b	%00100010
     48  f0f4		       22		      .BYTE.b	%00100010
     49  f0f5		       22		      .BYTE.b	%00100010
     50  f0f6
     51  f0f6		       77		      .BYTE.b	%01110111
     52  f0f7		       55		      .BYTE.b	%01010101
     53  f0f8		       77		      .BYTE.b	%01110111
     54  f0f9		       55		      .BYTE.b	%01010101
     55  f0fa		       77		      .BYTE.b	%01110111
     56  f0fb
     57  f0fb		       77		      .BYTE.b	%01110111
     58  f0fc		       55		      .BYTE.b	%01010101
     59  f0fd		       77		      .BYTE.b	%01110111
     60  f0fe		       11		      .BYTE.b	%00010001
     61  f0ff		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f100					      include	"objects/score_digits_flip.asm"
      1  f100				   ScoreDigitsFlip
      2  f100
      3  f100		       ee		      .BYTE.b	%11101110
      4  f101		       aa		      .BYTE.b	%10101010
      5  f102		       aa		      .BYTE.b	%10101010
      6  f103		       aa		      .BYTE.b	%10101010
      7  f104		       ee		      .BYTE.b	%11101110
      8  f105
      9  f105		       88		      .BYTE.b	%10001000
     10  f106		       88		      .BYTE.b	%10001000
     11  f107		       88		      .BYTE.b	%10001000
     12  f108		       88		      .BYTE.b	%10001000
     13  f109		       88		      .BYTE.b	%10001000
     14  f10a
     15  f10a		       ee		      .BYTE.b	%11101110
     16  f10b		       88		      .BYTE.b	%10001000
     17  f10c		       ee		      .BYTE.b	%11101110
     18  f10d		       22		      .BYTE.b	%00100010
     19  f10e		       ee		      .BYTE.b	%11101110
     20  f10f
     21  f10f		       ee		      .BYTE.b	%11101110
     22  f110		       88		      .BYTE.b	%10001000
     23  f111		       cc		      .BYTE.b	%11001100
     24  f112		       88		      .BYTE.b	%10001000
     25  f113		       ee		      .BYTE.b	%11101110
     26  f114
     27  f114		       aa		      .BYTE.b	%10101010
     28  f115		       aa		      .BYTE.b	%10101010
     29  f116		       ee		      .BYTE.b	%11101110
     30  f117		       88		      .BYTE.b	%10001000
     31  f118		       88		      .BYTE.b	%10001000
     32  f119
     33  f119		       ee		      .BYTE.b	%11101110
     34  f11a		       22		      .BYTE.b	%00100010
     35  f11b		       ee		      .BYTE.b	%11101110
     36  f11c		       88		      .BYTE.b	%10001000
     37  f11d		       ee		      .BYTE.b	%11101110
     38  f11e
     39  f11e		       ee		      .BYTE.b	%11101110
     40  f11f		       22		      .BYTE.b	%00100010
     41  f120		       ee		      .BYTE.b	%11101110
     42  f121		       aa		      .BYTE.b	%10101010
     43  f122		       ee		      .BYTE.b	%11101110
     44  f123
     45  f123		       ee		      .BYTE.b	%11101110
     46  f124		       88		      .BYTE.b	%10001000
     47  f125		       44		      .BYTE.b	%01000100
     48  f126		       44		      .BYTE.b	%01000100
     49  f127		       44		      .BYTE.b	%01000100
     50  f128
     51  f128		       ee		      .BYTE.b	%11101110
     52  f129		       aa		      .BYTE.b	%10101010
     53  f12a		       ee		      .BYTE.b	%11101110
     54  f12b		       aa		      .BYTE.b	%10101010
     55  f12c		       ee		      .BYTE.b	%11101110
     56  f12d
     57  f12d		       ee		      .BYTE.b	%11101110
     58  f12e		       aa		      .BYTE.b	%10101010
     59  f12f		       ee		      .BYTE.b	%11101110
     60  f130		       88		      .BYTE.b	%10001000
     61  f131		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f132					      include	"objects/score_label.asm"
      1  f132				   ScoreLabel
      2  f132
      3  f132		       20		      .BYTE.b	%00100000
      4  f133		       50		      .BYTE.b	%01010000
      5  f134		       ee		      .BYTE.b	%11101110
      6  f135		       00		      .BYTE.b	%00000000
      7  f136		       57		      .BYTE.b	%01010111
      8  f137		       00		      .BYTE.b	%00000000
      9  f138
     10  f138		       20		      .BYTE.b	%00100000
     11  f139		       50		      .BYTE.b	%01010000
     12  f13a		       4a		      .BYTE.b	%01001010
     13  f13b		       00		      .BYTE.b	%00000000
     14  f13c		       55		      .BYTE.b	%01010101
     15  f13d		       00		      .BYTE.b	%00000000
     16  f13e
     17  f13e		       20		      .BYTE.b	%00100000
     18  f13f		       50		      .BYTE.b	%01010000
     19  f140		       4e		      .BYTE.b	%01001110
     20  f141		       00		      .BYTE.b	%00000000
     21  f142		       77		      .BYTE.b	%01110111
     22  f143		       00		      .BYTE.b	%00000000
     23  f144
     24  f144		       20		      .BYTE.b	%00100000
     25  f145		       50		      .BYTE.b	%01010000
     26  f146		       42		      .BYTE.b	%01000010
     27  f147		       00		      .BYTE.b	%00000000
     28  f148		       54		      .BYTE.b	%01010100
     29  f149		       00		      .BYTE.b	%00000000
     30  f14a
     31  f14a		       e0		      .BYTE.b	%11100000
     32  f14b		       20		      .BYTE.b	%00100000
     33  f14c		       42		      .BYTE.b	%01000010
     34  f14d		       00		      .BYTE.b	%00000000
     35  f14e		       54		      .BYTE.b	%01010100
     36  f14f		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    153  f150
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f150					      include	"objects/web_image.asm"
      1  f150				   WebImagePF0
      2  f150		       00		      .BYTE.b	%00000000
      3  f151		       00		      .BYTE.b	%00000000
      4  f152		       00		      .BYTE.b	%00000000
      5  f153		       00		      .BYTE.b	%00000000
      6  f154		       00		      .BYTE.b	%00000000
      7  f155		       00		      .BYTE.b	%00000000
      8  f156		       00		      .BYTE.b	%00000000
      9  f157		       00		      .BYTE.b	%00000000
     10  f158		       30		      .BYTE.b	%00110000
     11  f159		       e0		      .BYTE.b	%11100000
     12  f15a		       20		      .BYTE.b	%00100000
     13  f15b		       40		      .BYTE.b	%01000000
     14  f15c		       40		      .BYTE.b	%01000000
     15  f15d		       80		      .BYTE.b	%10000000
     16  f15e		       80		      .BYTE.b	%10000000
     17  f15f		       40		      .BYTE.b	%01000000
     18  f160		       40		      .BYTE.b	%01000000
     19  f161		       20		      .BYTE.b	%00100000
     20  f162		       e0		      .BYTE.b	%11100000
     21  f163		       30		      .BYTE.b	%00110000
     22  f164		       00		      .BYTE.b	%00000000
     23  f165		       00		      .BYTE.b	%00000000
     24  f166		       00		      .BYTE.b	%00000000
     25  f167		       00		      .BYTE.b	%00000000
     26  f168		       00		      .BYTE.b	%00000000
     27  f169		       00		      .BYTE.b	%00000000
     28  f16a		       00		      .BYTE.b	%00000000
     29  f16b		       00		      .BYTE.b	%00000000
     30  f16c
     31  f16c				   WebImagePF1
     32  f16c		       02		      .BYTE.b	%00000010
     33  f16d		       01		      .BYTE.b	%00000001
     34  f16e		       00		      .BYTE.b	%00000000
     35  f16f		       00		      .BYTE.b	%00000000
     36  f170		       01		      .BYTE.b	%00000001
     37  f171		       01		      .BYTE.b	%00000001
     38  f172		       02		      .BYTE.b	%00000010
     39  f173		       0c		      .BYTE.b	%00001100
     40  f174		       30		      .BYTE.b	%00110000
     41  f175		       c0		      .BYTE.b	%11000000
     42  f176		       38		      .BYTE.b	%00111000
     43  f177		       07		      .BYTE.b	%00000111
     44  f178		       00		      .BYTE.b	%00000000
     45  f179		       00		      .BYTE.b	%00000000
     46  f17a		       00		      .BYTE.b	%00000000
     47  f17b		       00		      .BYTE.b	%00000000
     48  f17c		       07		      .BYTE.b	%00000111
     49  f17d		       38		      .BYTE.b	%00111000
     50  f17e		       c0		      .BYTE.b	%11000000
     51  f17f		       30		      .BYTE.b	%00110000
     52  f180		       0c		      .BYTE.b	%00001100
     53  f181		       02		      .BYTE.b	%00000010
     54  f182		       01		      .BYTE.b	%00000001
     55  f183		       01		      .BYTE.b	%00000001
     56  f184		       00		      .BYTE.b	%00000000
     57  f185		       00		      .BYTE.b	%00000000
     58  f186		       01		      .BYTE.b	%00000001
     59  f187		       02		      .BYTE.b	%00000010
     60  f188
     61  f188				   WebImagePF2
     62  f188		       08		      .BYTE.b	%00001000
     63  f189		       04		      .BYTE.b	%00000100
     64  f18a		       03		      .BYTE.b	%00000011
     65  f18b		       3f		      .BYTE.b	%00111111
     66  f18c		       c2		      .BYTE.b	%11000010
     67  f18d		       04		      .BYTE.b	%00000100
     68  f18e		       08		      .BYTE.b	%00001000
     69  f18f		       08		      .BYTE.b	%00001000
     70  f190		       10		      .BYTE.b	%00010000
     71  f191		       20		      .BYTE.b	%00100000
     72  f192		       20		      .BYTE.b	%00100000
     73  f193		       41		      .BYTE.b	%01000001
     74  f194		       8e		      .BYTE.b	%10001110
     75  f195		       f0		      .BYTE.b	%11110000
     76  f196		       f0		      .BYTE.b	%11110000
     77  f197		       8e		      .BYTE.b	%10001110
     78  f198		       41		      .BYTE.b	%01000001
     79  f199		       20		      .BYTE.b	%00100000
     80  f19a		       20		      .BYTE.b	%00100000
     81  f19b		       10		      .BYTE.b	%00010000
     82  f19c		       08		      .BYTE.b	%00001000
     83  f19d		       08		      .BYTE.b	%00001000
     84  f19e		       04		      .BYTE.b	%00000100
     85  f19f		       c2		      .BYTE.b	%11000010
     86  f1a0		       3f		      .BYTE.b	%00111111
     87  f1a1		       03		      .BYTE.b	%00000011
     88  f1a2		       04		      .BYTE.b	%00000100
     89  f1a3		       08		      .BYTE.b	%00001000
------- FILE kernel.asm
    155  f1a4
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f1a4					      include	"objects/spider_sprite.asm"
      1  f1a4				   SpiderSprite
      2  f1a4
      3  f1a4		       99		      .BYTE.b	%10011001
      4  f1a5		       bd		      .BYTE.b	%10111101
      5  f1a6		       bd		      .BYTE.b	%10111101
      6  f1a7		       bd		      .BYTE.b	%10111101
      7  f1a8		       7e		      .BYTE.b	%01111110
      8  f1a9		       3c		      .BYTE.b	%00111100
      9  f1aa		       18		      .BYTE.b	%00011000
     10  f1ab		       3c		      .BYTE.b	%00111100
     11  f1ac		       3c		      .BYTE.b	%00111100
     12  f1ad		       7e		      .BYTE.b	%01111110
     13  f1ae		       99		      .BYTE.b	%10011001
     14  f1af		       99		      .BYTE.b	%10011001
     15  f1b0		       bd		      .BYTE.b	%10111101
     16  f1b1		       db		      .BYTE.b	%11011011
     17  f1b2		       bd		      .BYTE.b	%10111101
     18  f1b3		       99		      .BYTE.b	%10011001
     19  f1b4
     20  f1b4		       c7		      .BYTE.b	%11000111
     21  f1b5		       c7		      .BYTE.b	%11000111
     22  f1b6		       28		      .BYTE.b	%00101000
     23  f1b7		       28		      .BYTE.b	%00101000
     24  f1b8		       3a		      .BYTE.b	%00111010
     25  f1b9		       7a		      .BYTE.b	%01111010
     26  f1ba		       fd		      .BYTE.b	%11111101
     27  f1bb		       ff		      .BYTE.b	%11111111
     28  f1bc		       ff		      .BYTE.b	%11111111
     29  f1bd		       fd		      .BYTE.b	%11111101
     30  f1be		       7a		      .BYTE.b	%01111010
     31  f1bf		       3a		      .BYTE.b	%00111010
     32  f1c0		       28		      .BYTE.b	%00101000
     33  f1c1		       28		      .BYTE.b	%00101000
     34  f1c2		       c7		      .BYTE.b	%11000111
     35  f1c3		       c7		      .BYTE.b	%11000111
     36  f1c4
     37  f1c4		       99		      .BYTE.b	%10011001
     38  f1c5		       bd		      .BYTE.b	%10111101
     39  f1c6		       db		      .BYTE.b	%11011011
     40  f1c7		       bd		      .BYTE.b	%10111101
     41  f1c8		       99		      .BYTE.b	%10011001
     42  f1c9		       99		      .BYTE.b	%10011001
     43  f1ca		       7e		      .BYTE.b	%01111110
     44  f1cb		       3c		      .BYTE.b	%00111100
     45  f1cc		       3c		      .BYTE.b	%00111100
     46  f1cd		       18		      .BYTE.b	%00011000
     47  f1ce		       3c		      .BYTE.b	%00111100
     48  f1cf		       7e		      .BYTE.b	%01111110
     49  f1d0		       bd		      .BYTE.b	%10111101
     50  f1d1		       bd		      .BYTE.b	%10111101
     51  f1d2		       bd		      .BYTE.b	%10111101
     52  f1d3		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    157  f1d4
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1d4					      include	"objects/swatter_sprite.asm"
      1  f1d4				   SwatterSprite
      2  f1d4
      3  f1d4		       18		      .BYTE.b	%00011000
      4  f1d5		       34		      .BYTE.b	%00110100
      5  f1d6		       2c		      .BYTE.b	%00101100
      6  f1d7		       34		      .BYTE.b	%00110100
      7  f1d8		       6a		      .BYTE.b	%01101010
      8  f1d9		       56		      .BYTE.b	%01010110
      9  f1da		       6a		      .BYTE.b	%01101010
     10  f1db		       56		      .BYTE.b	%01010110
     11  f1dc		       ab		      .BYTE.b	%10101011
     12  f1dd		       d5		      .BYTE.b	%11010101
     13  f1de		       ab		      .BYTE.b	%10101011
     14  f1df		       d5		      .BYTE.b	%11010101
     15  f1e0		       ab		      .BYTE.b	%10101011
     16  f1e1		       d5		      .BYTE.b	%11010101
     17  f1e2		       ab		      .BYTE.b	%10101011
     18  f1e3		       d5		      .BYTE.b	%11010101
     19  f1e4		       6a		      .BYTE.b	%01101010
     20  f1e5		       56		      .BYTE.b	%01010110
     21  f1e6		       3c		      .BYTE.b	%00111100
     22  f1e7		       3c		      .BYTE.b	%00111100
------- FILE kernel.asm
    159  f1e8
------- FILE logo_image.asm LEVEL 2 PASS 2
      0  f1e8					      include	"logo_image.asm"
      1  f1e8				   LogoImage1
      2  f1e8		       03		      .BYTE.b	%00000011
      3  f1e9		       03		      .BYTE.b	%00000011
      4  f1ea		       13		      .BYTE.b	%00010011
      5  f1eb		       33		      .BYTE.b	%00110011
      6  f1ec		       63		      .BYTE.b	%01100011
      7  f1ed		       c3		      .BYTE.b	%11000011
      8  f1ee		       c3		      .BYTE.b	%11000011
      9  f1ef		       63		      .BYTE.b	%01100011
     10  f1f0		       33		      .BYTE.b	%00110011
     11  f1f1		       13		      .BYTE.b	%00010011
     12  f1f2		       03		      .BYTE.b	%00000011
     13  f1f3		       03		      .BYTE.b	%00000011
     14  f1f4
     15  f1f4				   LogoImage2
     16  f1f4		       83		      .BYTE.b	%10000011
     17  f1f5		       c7		      .BYTE.b	%11000111
     18  f1f6		       ef		      .BYTE.b	%11101111
     19  f1f7		       6e		      .BYTE.b	%01101110
     20  f1f8		       6c		      .BYTE.b	%01101100
     21  f1f9		       6c		      .BYTE.b	%01101100
     22  f1fa		       6c		      .BYTE.b	%01101100
     23  f1fb		       6c		      .BYTE.b	%01101100
     24  f1fc		       6e		      .BYTE.b	%01101110
     25  f1fd		       ef		      .BYTE.b	%11101111
     26  f1fe		       c7		      .BYTE.b	%11000111
     27  f1ff		       83		      .BYTE.b	%10000011
     28  f200
     29  f200				   LogoImage3
     30  f200		       8f		      .BYTE.b	%10001111
     31  f201		       cf		      .BYTE.b	%11001111
     32  f202		       ef		      .BYTE.b	%11101111
     33  f203		       6d		      .BYTE.b	%01101101
     34  f204		       2c		      .BYTE.b	%00101100
     35  f205		       0c		      .BYTE.b	%00001100
     36  f206		       0c		      .BYTE.b	%00001100
     37  f207		       4c		      .BYTE.b	%01001100
     38  f208		       6d		      .BYTE.b	%01101101
     39  f209		       ef		      .BYTE.b	%11101111
     40  f20a		       cf		      .BYTE.b	%11001111
     41  f20b		       8f		      .BYTE.b	%10001111
     42  f20c
     43  f20c				   LogoImage4
     44  f20c		       00		      .BYTE.b	%00000000
     45  f20d		       01		      .BYTE.b	%00000001
     46  f20e		       13		      .BYTE.b	%00010011
     47  f20f		       33		      .BYTE.b	%00110011
     48  f210		       63		      .BYTE.b	%01100011
     49  f211		       c3		      .BYTE.b	%11000011
     50  f212		       c3		      .BYTE.b	%11000011
     51  f213		       63		      .BYTE.b	%01100011
     52  f214		       33		      .BYTE.b	%00110011
     53  f215		       13		      .BYTE.b	%00010011
     54  f216		       01		      .BYTE.b	%00000001
     55  f217		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    161  f218
    162  f218				   InitSystem
    163  f218
    164  f218				   .init_clean
    165  f218							; Resets RAM, TIA registers, and CPU registers
      0  f218					      CLEAN_START
      1  f218		       78		      sei
      2  f219		       d8		      cld
      3  f21a
      4  f21a		       a2 00		      ldx	#0
      5  f21c		       8a		      txa
      6  f21d		       a8		      tay
      7  f21e		       ca	   .CLEAR_STACK dex
      8  f21f		       9a		      txs
      9  f220		       48		      pha
     10  f221		       d0 fb		      bne	.CLEAR_STACK
     11  f223
    167  f223
    168  f223				   .init_tia
    169  f223							; Define default TIA register values
    170  f223
    171  f223							; Initialize copies
    172  f223							;    lda #0
    173  f223							;    sta CtrlPf
    174  f223							;    sta NuSiz0
    175  f223							;    sta NuSiz1
    176  f223
    177  f223							; Set background color
    178  f223							;    lda #$00	      ; Black
    179  f223							;    sta COLUBK
    180  f223
    181  f223							; Set the playfield and player color
    182  f223							;    lda #$0E	      ; White
    183  f223							;    sta COLUPF
    184  f223							;    sta COLUP0
    185  f223							;    sta COLUP1
    186  f223
    187  f223							; Playfield Control
    188  f223							;    lda #%00000001  ; 1 for mirroring
    189  f223							;    sta CtrlPf
    190  f223							;    sta CTRLPF
    191  f223
    192  f223							; Disable Game Elements
    193  f223							;    lda #$00
    194  f223							;    sta ENABL       ; Turn off ball
    195  f223							;    sta ENAM0       ; Turn off player 1 missile
    196  f223							;    sta ENAM1       ; Turn off player 2 missile
    197  f223							;    sta GRP0	      ; Turn off player 1
    198  f223							;    sta GRP1	      ; Turn off player 2
    199  f223
    200  f223							; Empty playfield
    201  f223							;    lda #%00000000
    202  f223							;    sta PF0
    203  f223							;    sta PF1
    204  f223							;    sta PF2
    205  f223
    206  f223				   .init_seed
    207  f223							; Seed the random number generator
    208  f223		       ad 84 02 	      lda	INTIM	; Unknown value
    209  f226		       85 84		      sta	Rand8	; Use as seed
    210  f228		       49 ff		      eor	#$FF	; Flip bits
    211  f22a		       85 85		      sta	Rand16	; Just in case INTIM was 0
    212  f22c
    213  f22c				   .init_game
    214  f22c
    215  f22c		       20 94 f2 	      jsr	LogoInit
    216  f22f
    217  f22f							;=======================================
    218  f22f							; Game Kernel
    219  f22f							;=======================================
    220  f22f
    221  f22f				   Main
    222  f22f
    223  f22f		       20 3e f2 	      jsr	VerticalSync
    224  f232		       20 57 f2 	      jsr	VerticalBlank
    225  f235		       20 6a f2 	      jsr	Kernel
    226  f238		       20 71 f2 	      jsr	OverScan
    227  f23b		       4c 2f f2 	      jmp	Main
    228  f23e
    229  f23e				   VerticalSync
    230  f23e
    231  f23e		       a9 00		      lda	#0
    232  f240		       85 01		      sta	VBLANK
    233  f242
    234  f242							; Turn on Vertical Sync signal and setup timer
    235  f242		       a9 02		      lda	#2
    236  f244		       85 00		      sta	VSYNC
    237  f246
    238  f246							; Increment frame count and reduce frame counter
    239  f246		       e6 8c		      inc	Frame
    240  f248		       c6 8d		      dec	FrameTimer
    241  f24a		       c6 8e		      dec	FrameTimer+1
    242  f24c
    243  f24c							; VSYNCH signal scanlines
    244  f24c					      REPEAT	#KERNEL_VSYNC
    245  f24c		       85 02		      sta	WSYNC
    244  f24c					      REPEND
    245  f24e		       85 02		      sta	WSYNC
    244  f24e					      REPEND
    245  f250		       85 02		      sta	WSYNC
    246  f252					      REPEND
    247  f252
    248  f252							; Turn off Vertical Sync signal
    249  f252		       a9 00		      lda	#0
    250  f254		       85 00		      sta	VSYNC
    251  f256
    252  f256				   .vsync_return
    253  f256		       60		      rts
    254  f257
    255  f257				   VerticalBlank
    256  f257							; Setup Timer
    257  f257		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    258  f259		       8d 96 02 	      sta	TIM64T
    259  f25c
    260  f25c				   .vblank_logic
    261  f25c							; Perform Game Logic
    262  f25c		       20 67 f2 	      jsr	.vblank_logic_call_ptr
    263  f25f
    264  f25f				   .vblank_loop
    265  f25f							; WSYNC until Timer is complete
    266  f25f		       85 02		      sta	WSYNC
    267  f261		       ad 84 02 	      lda	INTIM
    268  f264		       d0 f9		      bne	.vblank_loop
    269  f266
    270  f266				   .vblank_return
    271  f266		       60		      rts
    272  f267
    273  f267				   .vblank_logic_call_ptr
    274  f267		       6c 86 00 	      jmp	(VBlankPtr)
    275  f26a
    276  f26a				   Kernel
    277  f26a
    278  f26a							; Perform Selected Kernel
    279  f26a		       20 6e f2 	      jsr	.kernel_call_ptr
    280  f26d		       60		      rts
    281  f26e
    282  f26e				   .kernel_call_ptr
    283  f26e		       6c 88 00 	      jmp	(KernelPtr)
    284  f271
    285  f271				   OverScan
    286  f271
    287  f271							; End of screen, enter blanking
    288  f271		       a9 42		      lda	#%01000010
    289  f273		       85 01		      sta	VBLANK
    290  f275
    291  f275							; Setup Timer
    292  f275		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    293  f277		       8d 96 02 	      sta	TIM64T
    294  f27a
    295  f27a				   .overscan_reset
    296  f27a							; Check for reset switch
    297  f27a		       ad 82 02 	      lda	SWCHB
    298  f27d		       4a		      lsr		; Push D0 to carry (C)
    299  f27e		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    300  f280
    301  f280							; Perform reset
    302  f280		       20 94 f2 	      jsr	LogoInit	; No need for logic
    303  f283		       4c 89 f2 	      jmp	.overscan_loop
    304  f286
    305  f286				   .overscan_logic
    306  f286							; Perform OverScan Logic
    307  f286		       20 91 f2 	      jsr	.overscan_logic_call_ptr
    308  f289
    309  f289				   .overscan_loop
    310  f289							; WSYNC until Timer is complete
    311  f289		       85 02		      sta	WSYNC
    312  f28b		       ad 84 02 	      lda	INTIM
    313  f28e		       d0 f9		      bne	.overscan_loop
    314  f290
    315  f290				   .overscan_return
    316  f290		       60		      rts
    317  f291
    318  f291				   .overscan_logic_call_ptr
    319  f291		       6c 8a 00 	      jmp	(OverScanPtr)
    320  f294
    321  f294							;================
    322  f294							; State Code
    323  f294							;================
    324  f294
------- FILE logo.asm LEVEL 2 PASS 2
      0  f294					      include	"logo.asm"
      1  f294							;================
      2  f294							; Constants
      3  f294							;================
      4  f294
      5  f294		       00 8c	   LOGO_FRAMES =	140
      6  f294
      7  f294		       00 00	   LOGO_BG_COLOR =	#$00
      8  f294		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f294		       00 00	   LOGO_BG_BW_COLOR =	#$00
     10  f294		       00 0e	   LOGO_FG_BW_COLOR =	#$0E
     11  f294
     12  f294		       00 0c	   LOGO_IMAGE_SIZE =	12
     13  f294		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     14  f294		       00 3c	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     15  f294		       00 42	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     16  f294		       00 38	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-10	; The extra 10 is for processing overflow
     17  f294		       00 06	   LOGO_IMAGE_ANIM_SPEED =	#6
     18  f294
     19  f294				   LogoInit
     20  f294
     21  f294							; Setup logic and kernel
      0  f294					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f294				   .POINTER   SET	VBlankPtr
      2  f294				   .ADDRESS   SET	LogoVerticalBlank
      3  f294
      4  f294		       a9 bf		      LDA	#<.ADDRESS
      5  f296		       85 86		      STA	.POINTER
      6  f298		       a9 f2		      LDA	#>.ADDRESS
      7  f29a		       85 87		      STA	.POINTER+1
      8  f29c
      0  f29c					      SET_POINTER	KernelPtr, LogoKernel
      1  f29c				   .POINTER   SET	KernelPtr
      2  f29c				   .ADDRESS   SET	LogoKernel
      3  f29c
      4  f29c		       a9 f3		      LDA	#<.ADDRESS
      5  f29e		       85 88		      STA	.POINTER
      6  f2a0		       a9 f2		      LDA	#>.ADDRESS
      7  f2a2		       85 89		      STA	.POINTER+1
      8  f2a4
      0  f2a4					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f2a4				   .POINTER   SET	OverScanPtr
      2  f2a4				   .ADDRESS   SET	LogoOverScan
      3  f2a4
      4  f2a4		       a9 c3		      LDA	#<.ADDRESS
      5  f2a6		       85 8a		      STA	.POINTER
      6  f2a8		       a9 f2		      LDA	#>.ADDRESS
      7  f2aa		       85 8b		      STA	.POINTER+1
      8  f2ac
     25  f2ac
     26  f2ac							; Clean audio
     27  f2ac		       a9 00		      lda	#0
     28  f2ae		       85 19		      sta	AUDV0
     29  f2b0		       85 1a		      sta	AUDV1
     30  f2b2
     31  f2b2							; Set initial button state
     32  f2b2							;    lda #0
     33  f2b2		       85 8f		      sta	InputState
     34  f2b4
     35  f2b4							; Setup frame counters
     36  f2b4							;    lda #0
     37  f2b4		       85 8c		      sta	Frame
     38  f2b6		       a9 8c		      lda	#LOGO_FRAMES
     39  f2b8		       85 8d		      sta	FrameTimer
     40  f2ba
     41  f2ba							; Setup Image Animation
     42  f2ba		       a9 0b		      lda	#LOGO_IMAGE_SIZE-1
     43  f2bc		       85 a1		      sta	WebIndex
     44  f2be
     45  f2be		       60		      rts
     46  f2bf
     47  f2bf				   LogoVerticalBlank
     48  f2bf		       20 c7 f2 	      jsr	LogoAnimation
     49  f2c2		       60		      rts
     50  f2c3
     51  f2c3				   LogoOverScan
     52  f2c3		       20 d8 f2 	      jsr	LogoState
     53  f2c6		       60		      rts
     54  f2c7
     55  f2c7				   LogoAnimation
     56  f2c7		       a5 8c		      lda	Frame
     57  f2c9		       c9 06		      cmp	#LOGO_IMAGE_ANIM_SPEED
     58  f2cb		       d0 0a		      bne	.logo_animation_return
     59  f2cd
     60  f2cd		       a9 00		      lda	#0
     61  f2cf		       85 8c		      sta	Frame
     62  f2d1
     63  f2d1		       a6 a1		      ldx	WebIndex
     64  f2d3		       f0 02		      beq	.logo_animation_return
     65  f2d5
     66  f2d5							; Add another visible line
     67  f2d5		       c6 a1		      dec	WebIndex
     68  f2d7
     69  f2d7				   .logo_animation_return
     70  f2d7		       60		      rts
     71  f2d8
     72  f2d8				   LogoState
     73  f2d8		       a5 8d		      lda	FrameTimer
     74  f2da		       f0 13		      beq	.logo_state_next
     75  f2dc
     76  f2dc		       a2 01		      ldx	#1
     77  f2de				   .logo_state
     78  f2de							; Check if Fire Button on controller 0 or 1 is released
     79  f2de		       b5 0c		      lda	INPT4,x
     80  f2e0		       30 05		      bmi	.logo_state_check
     81  f2e2
     82  f2e2				   .logo_state_on
     83  f2e2		       a9 01		      lda	#1
     84  f2e4		       95 8f		      sta	InputState,x
     85  f2e6		       60		      rts
     86  f2e7
     87  f2e7				   .logo_state_check
     88  f2e7		       b5 8f		      lda	InputState,x
     89  f2e9		       d0 04		      bne	.logo_state_next
     90  f2eb
     91  f2eb				   .logo_state_loop
     92  f2eb		       ca		      dex
     93  f2ec		       10 f0		      bpl	.logo_state
     94  f2ee		       60		      rts
     95  f2ef
     96  f2ef				   .logo_state_next
     97  f2ef							; Button is released or timer runs out, load title screen
     98  f2ef		       20 80 f3 	      jsr	TitleInit
     99  f2f2		       60		      rts
    100  f2f3
    101  f2f3				   LogoKernel
    102  f2f3
    103  f2f3							; Playfield Control
    104  f2f3		       a9 01		      lda	#%00000001	; Mirror
    105  f2f5							;sta CtrlPf
    106  f2f5		       85 0a		      sta	CTRLPF
    107  f2f7
    108  f2f7							; Load Colors
    109  f2f7		       ad 82 02 	      lda	SWCHB
    110  f2fa		       29 08		      and	#%00001000
    111  f2fc		       f0 07		      beq	.logo_kernel_bw
    112  f2fe
    113  f2fe				   .logo_kernel_color
    114  f2fe		       a2 00		      ldx	#LOGO_BG_COLOR
    115  f300		       a0 c6		      ldy	#LOGO_FG_COLOR
    116  f302		       4c 09 f3 	      jmp	.logo_kernel_set
    117  f305
    118  f305				   .logo_kernel_bw
    119  f305		       a2 00		      ldx	#LOGO_BG_BW_COLOR
    120  f307		       a0 0e		      ldy	#LOGO_FG_BW_COLOR
    121  f309
    122  f309				   .logo_kernel_set
    123  f309		       86 09		      stx	COLUBK
    124  f30b		       84 08		      sty	COLUPF
    125  f30d
    126  f30d				   .logo_kernel_start
    127  f30d
    128  f30d							; Turn on display
    129  f30d		       a9 00		      lda	#0
    130  f30f		       85 01		      sta	VBLANK
    131  f311
    132  f311		       a4 a1		      ldy	WebIndex
    133  f313		       d0 06		      bne	.logo_kernel_top_anim_padding
    134  f315
    135  f315				   .logo_kernel_top_padding
    136  f315							; Top Padding
    137  f315		       20 63 f3 	      jsr	LogoPadding
    138  f318		       4c 28 f3 	      jmp	.logo_kernel_image
    139  f31b
    140  f31b				   .logo_kernel_top_anim_padding
    141  f31b		       20 73 f3 	      jsr	LogoAnimPadding
    142  f31e
    143  f31e				   .logo_kernel_image_animation_start
    144  f31e		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    145  f320
    146  f320				   .logo_kernel_image_animation_loop
    147  f320		       85 02		      sta	WSYNC
    148  f322		       ca		      dex
    149  f323		       d0 fb		      bne	.logo_kernel_image_animation_loop
    150  f325
    151  f325		       88		      dey
    152  f326		       10 f6		      bpl	.logo_kernel_image_animation_start
    153  f328
    154  f328				   .logo_kernel_image
    155  f328
    156  f328		       a2 0b		      ldx	#LOGO_IMAGE_SIZE-1
    157  f32a		       a0 03		      ldy	#LOGO_IMAGE_LINE_SIZE-2
    158  f32c							; The extra 2 on line size is for processing overflow
    159  f32c
    160  f32c							;dex
    161  f32c		       e4 a1		      cpx	WebIndex
    162  f32e		       90 2f		      bcc	.logo_kernel_bottom_padding
    163  f330
    164  f330				   .logo_kernel_image_line
    165  f330		       85 02		      sta	WSYNC
    166  f332
    167  f332		       bd e8 f1 	      lda	LogoImage1,x
    168  f335		       85 0e		      sta	PF1
    169  f337		       bd f4 f1 	      lda	LogoImage2,x
    170  f33a		       85 0f		      sta	PF2
    171  f33c
      0  f33c					      sleep	26
      1  f33c				   .CYCLES    SET	26
      2  f33c
      3  f33c				  -	      IF	.CYCLES < 2
      4  f33c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f33c				  -	      ERR
      6  f33c					      ENDIF
      7  f33c
      8  f33c				  -	      IF	.CYCLES & 1
      9  f33c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f33c				  -	      nop	0
     11  f33c				  -	      ELSE
     12  f33c				  -	      bit	VSYNC
     13  f33c				  -	      ENDIF
     14  f33c				  -.CYCLES    SET	.CYCLES - 3
     15  f33c					      ENDIF
     16  f33c
     17  f33c					      REPEAT	.CYCLES / 2
     18  f33c		       ea		      nop
     17  f33c					      REPEND
     18  f33d		       ea		      nop
     17  f33d					      REPEND
     18  f33e		       ea		      nop
     17  f33e					      REPEND
     18  f33f		       ea		      nop
     17  f33f					      REPEND
     18  f340		       ea		      nop
     17  f340					      REPEND
     18  f341		       ea		      nop
     17  f341					      REPEND
     18  f342		       ea		      nop
     17  f342					      REPEND
     18  f343		       ea		      nop
     17  f343					      REPEND
     18  f344		       ea		      nop
     17  f344					      REPEND
     18  f345		       ea		      nop
     17  f345					      REPEND
     18  f346		       ea		      nop
     17  f346					      REPEND
     18  f347		       ea		      nop
     17  f347					      REPEND
     18  f348		       ea		      nop
     19  f349					      REPEND
    173  f349
    174  f349		       bd 00 f2 	      lda	LogoImage3,x
    175  f34c		       85 0f		      sta	PF2
    176  f34e		       bd 0c f2 	      lda	LogoImage4,x
    177  f351		       85 0e		      sta	PF1
    178  f353
    179  f353		       88		      dey
    180  f354		       d0 da		      bne	.logo_kernel_image_line
    181  f356
    182  f356		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    183  f358
    184  f358		       e4 a1		      cpx	WebIndex
    185  f35a		       90 03		      bcc	.logo_kernel_bottom_padding
    186  f35c
    187  f35c		       ca		      dex
    188  f35d		       10 d1		      bpl	.logo_kernel_image_line
    189  f35f
    190  f35f				   .logo_kernel_bottom_padding
    191  f35f							; Bottom Padding
    192  f35f		       20 63 f3 	      jsr	LogoPadding
    193  f362
    194  f362				   .logo_kernel_image_return
    195  f362		       60		      rts
    196  f363
    197  f363				   LogoPadding
    198  f363		       a9 00		      lda	#0
    199  f365		       85 0d		      sta	PF0
    200  f367		       85 0e		      sta	PF1
    201  f369		       85 0f		      sta	PF2
    202  f36b
    203  f36b		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    204  f36d				   .logo_padding_loop
    205  f36d		       85 02		      sta	WSYNC
    206  f36f		       ca		      dex
    207  f370		       d0 fb		      bne	.logo_padding_loop
    208  f372
    209  f372		       60		      rts
    210  f373
    211  f373				   LogoAnimPadding
    212  f373		       a9 00		      lda	#0
    213  f375		       85 0d		      sta	PF0
    214  f377		       85 0e		      sta	PF1
    215  f379		       85 0f		      sta	PF2
    216  f37b
    217  f37b		       a2 38		      ldx	#LOGO_IMAGE_ANIM_PADDING
    218  f37d		       4c 6d f3 	      jmp	.logo_padding_loop
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f380					      include	"title.asm"
      1  f380							;================
      2  f380							; Constants
      3  f380							;================
      4  f380
      5  f380		       00 00	   TITLE_BG_COLOR =	#$00
      6  f380		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f380		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f380		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f380		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f380
     11  f380		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f380		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f380		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f380		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f380		       00 09	   TITLE_AUDIO_STEP =	9
     16  f380
     17  f380		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f380		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f380		       00 07	   TITLE_LABEL_LINE =	7
     20  f380
     21  f380		       00 10	   TITLE_GAP_SIZE =	#16
     22  f380
     23  f380		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f380		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f380		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f380
     27  f380				   TitleInit
     28  f380
     29  f380							; Setup logic and kernel
      0  f380					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f380				   .POINTER   SET	VBlankPtr
      2  f380				   .ADDRESS   SET	TitleVerticalBlank
      3  f380
      4  f380		       a9 c7		      LDA	#<.ADDRESS
      5  f382		       85 86		      STA	.POINTER
      6  f384		       a9 f3		      LDA	#>.ADDRESS
      7  f386		       85 87		      STA	.POINTER+1
      8  f388
      0  f388					      SET_POINTER	KernelPtr, TitleKernel
      1  f388				   .POINTER   SET	KernelPtr
      2  f388				   .ADDRESS   SET	TitleKernel
      3  f388
      4  f388		       a9 fb		      LDA	#<.ADDRESS
      5  f38a		       85 88		      STA	.POINTER
      6  f38c		       a9 f4		      LDA	#>.ADDRESS
      7  f38e		       85 89		      STA	.POINTER+1
      8  f390
      0  f390					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f390				   .POINTER   SET	OverScanPtr
      2  f390				   .ADDRESS   SET	TitleOverScan
      3  f390
      4  f390		       a9 88		      LDA	#<.ADDRESS
      5  f392		       85 8a		      STA	.POINTER
      6  f394		       a9 f4		      LDA	#>.ADDRESS
      7  f396		       85 8b		      STA	.POINTER+1
      8  f398
     33  f398
     34  f398							; Load audio settings
     35  f398
     36  f398							; Melody Line
     37  f398		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f39a		       85 15		      sta	AUDC0
     39  f39c							;lda #TITLE_AUDIO_0_VOLUME
     40  f39c							;sta AUDV0
     41  f39c
     42  f39c							; Make it so that we play the first note immediately
     43  f39c		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     44  f39e		       85 91		      sta	AudioStep
     45  f3a0		       a9 01		      lda	#1
     46  f3a2		       85 8d		      sta	FrameTimer
     47  f3a4
     48  f3a4							; Setup Spider Sprite
      0  f3a4					      SET_POINTER	SpiderPtr, TitleSpider
      1  f3a4				   .POINTER   SET	SpiderPtr
      2  f3a4				   .ADDRESS   SET	TitleSpider
      3  f3a4
      4  f3a4		       a9 aa		      LDA	#<.ADDRESS
      5  f3a6		       85 a4		      STA	.POINTER
      6  f3a8		       a9 f0		      LDA	#>.ADDRESS
      7  f3aa		       85 a5		      STA	.POINTER+1
      8  f3ac
     50  f3ac
     51  f3ac		       a9 16		      lda	#%00010110	; Triple Sprite and 2 clock size missle0
     52  f3ae		       85 04		      sta	NUSIZ0
     53  f3b0		       a9 06		      lda	#%00000110	; Triple Sprite
     54  f3b2		       85 05		      sta	NUSIZ1
     55  f3b4
     56  f3b4		       a9 ff		      lda	#$FF	; Reflect P1
     57  f3b6		       85 0c		      sta	REFP1
     58  f3b8		       a9 00		      lda	#0	; No reflect
     59  f3ba		       85 0b		      sta	REFP0
     60  f3bc
     61  f3bc							; Drums and Bass
     62  f3bc							;lda #0
     63  f3bc							;sta AUDC1
     64  f3bc		       85 1a		      sta	AUDV1
     65  f3be
     66  f3be							;lda #0
     67  f3be		       85 ab		      sta	SpiderDrawPos	; Initialize animation state
     68  f3c0
     69  f3c0							; Disable at start
     70  f3c0							;lda #0
     71  f3c0		       85 1d		      sta	ENAM0
     72  f3c2
     73  f3c2							; Set initial button state
     74  f3c2							;lda #0
     75  f3c2		       85 8f		      sta	InputState
     76  f3c4
     77  f3c4							; Set initial select state
     78  f3c4		       85 82		      sta	Temp+2
     79  f3c6
     80  f3c6		       60		      rts
     81  f3c7
     82  f3c7				   TitleVerticalBlank
     83  f3c7
     84  f3c7							; Refresh random values
     85  f3c7		       20 13 f0 	      jsr	Random
     86  f3ca
     87  f3ca		       20 d4 f3 	      jsr	TitlePosition
     88  f3cd		       20 ee f3 	      jsr	TitleAnimation
     89  f3d0		       20 6b f4 	      jsr	TitleColor
     90  f3d3
     91  f3d3		       60		      rts
     92  f3d4
     93  f3d4				   TitlePosition
     94  f3d4
     95  f3d4							; Position Spider
     96  f3d4		       a2 00		      ldx	#0	; Object (player0)
     97  f3d6		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
     98  f3d8		       20 00 f0 	      jsr	PosObject
     99  f3db
    100  f3db		       a2 01		      ldx	#1	; Object (player1)
    101  f3dd		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    102  f3df		       20 00 f0 	      jsr	PosObject
    103  f3e2
    104  f3e2							; Position Web Line
    105  f3e2		       a2 02		      ldx	#2	; Object (missle0)
    106  f3e4		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    107  f3e6		       20 00 f0 	      jsr	PosObject
    108  f3e9
    109  f3e9		       85 02		      sta	WSYNC
    110  f3eb		       85 2a		      sta	HMOVE
    111  f3ed
    112  f3ed		       60		      rts
    113  f3ee
    114  f3ee				   TitleAnimation
    115  f3ee
    116  f3ee		       ad 82 02 	      lda	SWCHB
    117  f3f1		       29 02		      and	#%00000010
    118  f3f3		       d0 09		      bne	.title_animation_state_check
    119  f3f5
    120  f3f5		       a5 82		      lda	Temp+2
    121  f3f7
    122  f3f7				   .title_animation_state_on
    123  f3f7		       09 40		      ora	#%01000000
    124  f3f9		       85 82		      sta	Temp+2
    125  f3fb		       4c 11 f4 	      jmp	.title_animation_load
    126  f3fe
    127  f3fe				   .title_animation_state_check
    128  f3fe		       24 82		      bit	Temp+2
    129  f400		       50 0f		      bvc	.title_animation_load
    130  f402
    131  f402		       a5 82		      lda	Temp+2
    132  f404		       29 bf		      and	#%10111111
    133  f406
    134  f406				   .title_animation_state_swap
    135  f406		       10 05		      bpl	.title_animation_state_bug
    136  f408
    137  f408				   .title_animation_state_spider
    138  f408		       29 7f		      and	#%01111111
    139  f40a		       4c 0f f4 	      jmp	.title_animation_state_set
    140  f40d
    141  f40d				   .title_animation_state_bug
    142  f40d		       09 80		      ora	#%10000000
    143  f40f
    144  f40f				   .title_animation_state_set
    145  f40f		       85 82		      sta	Temp+2
    146  f411
    147  f411				   .title_animation_load
    148  f411
    149  f411		       24 82		      bit	Temp+2
    150  f413		       30 2b		      bmi	.title_animation_bug
    151  f415
    152  f415				   .title_animation_spider
    153  f415
    154  f415		       a5 91		      lda	AudioStep
    155  f417		       f0 0d		      beq	.title_animation_spider_1
    156  f419		       c9 04		      cmp	#4
    157  f41b		       f0 16		      beq	.title_animation_spider_2
    158  f41d		       c9 09		      cmp	#9
    159  f41f		       f0 05		      beq	.title_animation_spider_1
    160  f421		       c9 0c		      cmp	#12
    161  f423		       f0 0e		      beq	.title_animation_spider_2
    162  f425		       60		      rts
    163  f426
    164  f426				   .title_animation_spider_1
      0  f426					      SET_POINTER	SpiderPtr, TitleSpider
      1  f426				   .POINTER   SET	SpiderPtr
      2  f426				   .ADDRESS   SET	TitleSpider
      3  f426
      4  f426		       a9 aa		      LDA	#<.ADDRESS
      5  f428		       85 a4		      STA	.POINTER
      6  f42a		       a9 f0		      LDA	#>.ADDRESS
      7  f42c		       85 a5		      STA	.POINTER+1
      8  f42e
    166  f42e		       a9 00		      lda	#0
    167  f430		       4c 68 f4 	      jmp	.title_animation_return
    168  f433
    169  f433				   .title_animation_spider_2
      0  f433					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f433				   .POINTER   SET	SpiderPtr
      2  f433				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f433
      4  f433		       a9 b3		      LDA	#<.ADDRESS
      5  f435		       85 a4		      STA	.POINTER
      6  f437		       a9 f0		      LDA	#>.ADDRESS
      7  f439		       85 a5		      STA	.POINTER+1
      8  f43b
    171  f43b		       a9 01		      lda	#1
    172  f43d		       4c 68 f4 	      jmp	.title_animation_return
    173  f440
    174  f440				   .title_animation_bug
    175  f440
    176  f440		       a5 91		      lda	AudioStep
    177  f442		       f0 0d		      beq	.title_animation_bug_1
    178  f444		       c9 04		      cmp	#4
    179  f446		       f0 16		      beq	.title_animation_bug_2
    180  f448		       c9 09		      cmp	#9
    181  f44a		       f0 05		      beq	.title_animation_bug_1
    182  f44c		       c9 0c		      cmp	#12
    183  f44e		       f0 0e		      beq	.title_animation_bug_2
    184  f450		       60		      rts
    185  f451
    186  f451				   .title_animation_bug_1
      0  f451					      SET_POINTER	SpiderPtr, TitleBug
      1  f451				   .POINTER   SET	SpiderPtr
      2  f451				   .ADDRESS   SET	TitleBug
      3  f451
      4  f451		       a9 bc		      LDA	#<.ADDRESS
      5  f453		       85 a4		      STA	.POINTER
      6  f455		       a9 f0		      LDA	#>.ADDRESS
      7  f457		       85 a5		      STA	.POINTER+1
      8  f459
    188  f459		       a9 00		      lda	#0
    189  f45b		       4c 68 f4 	      jmp	.title_animation_return
    190  f45e
    191  f45e				   .title_animation_bug_2
      0  f45e					      SET_POINTER	SpiderPtr, TitleBug+#TITLE_SPIDER_SIZE
      1  f45e				   .POINTER   SET	SpiderPtr
      2  f45e				   .ADDRESS   SET	TitleBug+#TITLE_SPIDER_SIZE
      3  f45e
      4  f45e		       a9 c5		      LDA	#<.ADDRESS
      5  f460		       85 a4		      STA	.POINTER
      6  f462		       a9 f0		      LDA	#>.ADDRESS
      7  f464		       85 a5		      STA	.POINTER+1
      8  f466
    193  f466		       a9 01		      lda	#1
    194  f468
    195  f468				   .title_animation_return
    196  f468		       85 ab		      sta	SpiderDrawPos
    197  f46a		       60		      rts
    198  f46b
    199  f46b				   TitleColor
    200  f46b
    201  f46b							; Load Colors
    202  f46b		       a9 00		      lda	#TITLE_BG_COLOR
    203  f46d		       85 09		      sta	COLUBK
    204  f46f		       a9 06		      lda	#TITLE_WEB_COLOR
    205  f471		       85 08		      sta	COLUPF
    206  f473
    207  f473							; Check b/w
    208  f473		       ad 82 02 	      lda	SWCHB
    209  f476		       29 08		      and	#%00001000
    210  f478		       f0 07		      beq	.title_bw
    211  f47a
    212  f47a				   .title_color
    213  f47a		       a9 56		      lda	#TITLE_SPIDER_COLOR
    214  f47c		       85 06		      sta	COLUP0
    215  f47e		       85 07		      sta	COLUP1
    216  f480
    217  f480		       60		      rts
    218  f481
    219  f481				   .title_bw
    220  f481							; Load B/W Colors
    221  f481		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    222  f483		       85 06		      sta	COLUP0
    223  f485		       85 07		      sta	COLUP1
    224  f487
    225  f487		       60		      rts
    226  f488
    227  f488				   TitleOverScan
    228  f488		       20 8f f4 	      jsr	TitleAudio
    229  f48b		       20 ca f4 	      jsr	TitleState
    230  f48e		       60		      rts
    231  f48f
    232  f48f				   TitleAudio
    233  f48f
    234  f48f		       a6 8d		      ldx	FrameTimer
    235  f491		       d0 36		      bne	.title_audio_return
    236  f493
    237  f493							; Reset Timer
    238  f493		       a2 09		      ldx	#TITLE_AUDIO_STEP
    239  f495		       86 8d		      stx	FrameTimer
    240  f497
    241  f497				   .title_audio_play
    242  f497
    243  f497							; Increment melody position
    244  f497		       a4 91		      ldy	AudioStep
    245  f499		       c8		      iny
    246  f49a
    247  f49a							; Check if we're at the end of the melody
    248  f49a		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    249  f49c		       d0 02		      bne	.title_audio_play_note
    250  f49e
    251  f49e							; Loop our audio step
    252  f49e		       a0 00		      ldy	#0
    253  f4a0
    254  f4a0				   .title_audio_play_note
    255  f4a0
    256  f4a0							; Save current position
    257  f4a0		       84 91		      sty	AudioStep
    258  f4a2
    259  f4a2				   .title_audio_play_melody
    260  f4a2							; Basic Melody Line
    261  f4a2		       b9 e1 f5 	      lda	TitleAudio0,y
    262  f4a5		       30 09		      bmi	.title_audio_play_melody_mute
    263  f4a7
    264  f4a7		       85 17		      sta	AUDF0
    265  f4a9		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
    266  f4ab		       85 19		      sta	AUDV0
    267  f4ad
    268  f4ad		       4c b4 f4 	      jmp	.title_audio_play_rhythm
    269  f4b0
    270  f4b0				   .title_audio_play_melody_mute
    271  f4b0
    272  f4b0		       a9 00		      lda	#0
    273  f4b2		       85 19		      sta	AUDV0
    274  f4b4
    275  f4b4				   .title_audio_play_rhythm
    276  f4b4
    277  f4b4							; Drums and Bass
    278  f4b4		       b9 f1 f5 	      lda	TitleTone1,y
    279  f4b7		       30 0c		      bmi	.title_audio_play_rhythm_mute
    280  f4b9
    281  f4b9		       85 16		      sta	AUDC1
    282  f4bb		       b9 01 f6 	      lda	TitleAudio1,y
    283  f4be		       85 18		      sta	AUDF1
    284  f4c0		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    285  f4c2		       85 1a		      sta	AUDV1
    286  f4c4
    287  f4c4		       60		      rts
    288  f4c5
    289  f4c5				   .title_audio_play_rhythm_mute
    290  f4c5
    291  f4c5		       a9 00		      lda	#0
    292  f4c7							;sta AUDF1
    293  f4c7							;sta AUDC1
    294  f4c7		       85 1a		      sta	AUDV1
    295  f4c9
    296  f4c9				   .title_audio_return
    297  f4c9		       60		      rts
    298  f4ca
    299  f4ca				   TitleState
    300  f4ca
    301  f4ca		       a2 01		      ldx	#1
    302  f4cc
    303  f4cc				   .title_state
    304  f4cc							; Check if fire button on controller is released
    305  f4cc		       b5 0c		      lda	INPT4,x
    306  f4ce		       30 0c		      bmi	.title_state_check
    307  f4d0
    308  f4d0				   .title_state_on
    309  f4d0		       a9 40		      lda	#%01000000
    310  f4d2		       e0 01		      cpx	#1
    311  f4d4		       d0 02		      bne	.title_state_on_set
    312  f4d6				   .title_state_on_1
    313  f4d6		       a9 80		      lda	#%10000000
    314  f4d8				   .title_state_on_set
    315  f4d8		       05 8f		      ora	InputState
    316  f4da		       85 8f		      sta	InputState
    317  f4dc
    318  f4dc				   .title_state_check
    319  f4dc		       8a		      txa
    320  f4dd		       d0 07		      bne	.title_state_check_1
    321  f4df				   .title_state_check_0
    322  f4df		       24 8f		      bit	InputState
    323  f4e1		       70 0b		      bvs	.title_state_type_0
    324  f4e3		       4c ea f4 	      jmp	.title_state_dec
    325  f4e6				   .title_state_check_1
    326  f4e6		       24 8f		      bit	InputState
    327  f4e8		       30 09		      bmi	.title_state_type_1
    328  f4ea
    329  f4ea				   .title_state_dec
    330  f4ea		       ca		      dex
    331  f4eb		       10 df		      bpl	.title_state
    332  f4ed
    333  f4ed		       60		      rts
    334  f4ee
    335  f4ee				   .title_state_type_0
    336  f4ee		       a9 40		      lda	#%01000000
    337  f4f0		       4c f5 f4 	      jmp	.title_state_type_set
    338  f4f3				   .title_state_type_1
    339  f4f3		       a9 80		      lda	#%10000000
    340  f4f5				   .title_state_type_set
    341  f4f5		       85 93		      sta	GameType
    342  f4f7				   .title_state_next
    343  f4f7							; Button is released, load up game
    344  f4f7		       20 1d fd 	      jsr	GameInit
    345  f4fa
    346  f4fa				   .title_state_return
    347  f4fa		       60		      rts
    348  f4fb
    349  f4fb				   TitleKernel
    350  f4fb
    351  f4fb							; Playfield Control
    352  f4fb		       a9 00		      lda	#%00000000	; No mirroring
    353  f4fd		       85 0a		      sta	CTRLPF
    354  f4ff
    355  f4ff							; Turn on display
    356  f4ff							;lda #0
    357  f4ff		       85 01		      sta	VBLANK
    358  f501
    359  f501		       85 02		      sta	WSYNC
    360  f503
    361  f503				   TitleFrameTopDraw
    362  f503
    363  f503							; Start Counters
    364  f503		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    365  f505		       a0 00		      ldy	#0	; Image Counter
    366  f507
    367  f507				   .title_frame_top
    368  f507
    369  f507							; 76 machine cycles per scanline
    370  f507		       85 02		      sta	WSYNC
    371  f509
    372  f509				   .title_frame_top_load		; 66 cycles
    373  f509
    374  f509							; First half of image
    375  f509		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    376  f50c		       85 0d		      sta	PF0	; 4
    377  f50e		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    378  f511		       85 0e		      sta	PF1	; 4
    379  f513		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    380  f516		       85 0f		      sta	PF2	; 4
    381  f518
      0  f518					      sleep	6
      1  f518				   .CYCLES    SET	6
      2  f518
      3  f518				  -	      IF	.CYCLES < 2
      4  f518				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f518				  -	      ERR
      6  f518					      ENDIF
      7  f518
      8  f518				  -	      IF	.CYCLES & 1
      9  f518				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f518				  -	      nop	0
     11  f518				  -	      ELSE
     12  f518				  -	      bit	VSYNC
     13  f518				  -	      ENDIF
     14  f518				  -.CYCLES    SET	.CYCLES - 3
     15  f518					      ENDIF
     16  f518
     17  f518					      REPEAT	.CYCLES / 2
     18  f518		       ea		      nop
     17  f518					      REPEND
     18  f519		       ea		      nop
     17  f519					      REPEND
     18  f51a		       ea		      nop
     19  f51b					      REPEND
    383  f51b
    384  f51b							; Second half of image
    385  f51b		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    386  f51e		       85 0d		      sta	PF0	; 4
    387  f520		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    388  f523		       85 0e		      sta	PF1	; 4
    389  f525		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    390  f528		       85 0f		      sta	PF2	; 4
    391  f52a
    392  f52a				   .title_frame_top_index		; 4 cycles
    393  f52a
    394  f52a		       ca		      dex		; 2
    395  f52b		       d0 da		      bne	.title_frame_top	; 2
    396  f52d
    397  f52d				   .title_frame_top_index_next		; 6 cycles
    398  f52d
    399  f52d							; Restore scanline counter
    400  f52d		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    401  f52f
    402  f52f		       98		      tya		; 2
    403  f530		       18		      clc		; 2
    404  f531		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    405  f533		       a8		      tay		; 2
    406  f534
    407  f534		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    408  f536		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    409  f538		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    410  f53a		       85 08		      sta	COLUPF	; 4
    411  f53c		       ea		      nop		; 2
    412  f53d		       4c 09 f5 	      jmp	.title_frame_top_load	; 3
    413  f540
    414  f540				   .title_frame_top_label_color_skip
    415  f540
    416  f540		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    417  f542		       d0 c3		      bne	.title_frame_top	; 2
    418  f544
    419  f544				   .title_frame_top_clean
    420  f544
    421  f544							; Clear out playfield
    422  f544		       a9 00		      lda	#0
    423  f546		       85 0d		      sta	PF0
    424  f548		       85 0e		      sta	PF1
    425  f54a		       85 0f		      sta	PF2
    426  f54c
    427  f54c				   TitleWebDraw
    428  f54c
    429  f54c		       a9 00		      lda	#%00000000
    430  f54e		       24 82		      bit	Temp+2
    431  f550		       30 02		      bmi	.title_web_set
    432  f552				   .title_web_spider
    433  f552		       a9 02		      lda	#%00000010
    434  f554				   .title_web_set
    435  f554		       85 1d		      sta	ENAM0
    436  f556
    437  f556		       a9 06		      lda	#TITLE_WEB_COLOR
    438  f558		       85 06		      sta	COLUP0
    439  f55a
    440  f55a		       a2 10		      ldx	#TITLE_GAP_SIZE
    441  f55c				   .title_web_gap
    442  f55c		       ca		      dex
    443  f55d		       85 02		      sta	WSYNC
    444  f55f		       d0 fb		      bne	.title_web_gap
    445  f561
    446  f561				   TitleSpiderDraw
    447  f561
    448  f561		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    449  f563
    450  f563		       a5 ab		      lda	SpiderDrawPos
    451  f565		       f0 0c		      beq	.title_spider_extra_web_disable
    452  f567
    453  f567				   .title_spider_extra_web_start
    454  f567		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    455  f569				   .title_spider_extra_web_loop
    456  f569		       85 02		      sta	WSYNC
    457  f56b		       ca		      dex
    458  f56c		       d0 fb		      bne	.title_spider_extra_web_loop
    459  f56e
    460  f56e		       88		      dey
    461  f56f		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    462  f571		       d0 f4		      bne	.title_spider_extra_web_start
    463  f573
    464  f573				   .title_spider_extra_web_disable
    465  f573							;lda #0
    466  f573		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    467  f575
    468  f575		       85 02		      sta	WSYNC
    469  f577
    470  f577		       85 1d		      sta	ENAM0
    471  f579
    472  f579							; Check b/w
    473  f579		       ad 82 02 	      lda	SWCHB
    474  f57c		       29 08		      and	#%00001000
    475  f57e		       f0 05		      beq	.title_spider_bw
    476  f580				   .title_spider_color
    477  f580		       a9 56		      lda	#TITLE_SPIDER_COLOR
    478  f582		       4c 87 f5 	      jmp	.title_spider_color_set
    479  f585				   .title_spider_bw
    480  f585		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    481  f587				   .title_spider_color_set
    482  f587		       85 06		      sta	COLUP0
    483  f589
    484  f589				   .title_spider
    485  f589		       b1 a4		      lda	(SpiderPtr),y
    486  f58b		       85 1b		      sta	GRP0
    487  f58d		       85 1c		      sta	GRP1
    488  f58f
    489  f58f				   .title_spider_delay
    490  f58f		       ca		      dex
    491  f590		       85 02		      sta	WSYNC
    492  f592		       d0 fb		      bne	.title_spider_delay
    493  f594
    494  f594				   .title_spider_index
    495  f594		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    496  f596		       88		      dey
    497  f597		       10 f0		      bpl	.title_spider
    498  f599
    499  f599				   .title_spider_clean
    500  f599
    501  f599							; Clear sprites
    502  f599		       a9 00		      lda	#0
    503  f59b		       85 1b		      sta	GRP0
    504  f59d		       85 1c		      sta	GRP1
    505  f59f
    506  f59f				   TitleFrameBottomDraw
    507  f59f
    508  f59f							; Load Frame Color
    509  f59f		       a9 06		      lda	#TITLE_WEB_COLOR
    510  f5a1		       85 08		      sta	COLUPF
    511  f5a3
    512  f5a3							; Start Counters
    513  f5a3		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    514  f5a5		       a0 00		      ldy	#0	; Image Counter
    515  f5a7
    516  f5a7				   .title_frame_bottom
    517  f5a7
    518  f5a7							; 76 machine cycles per scanline
    519  f5a7		       85 02		      sta	WSYNC
    520  f5a9
    521  f5a9				   .title_frame_bottom_load		; 66 cycles
    522  f5a9
    523  f5a9							; First half of image
    524  f5a9		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    525  f5ac		       85 0d		      sta	PF0	; 4
    526  f5ae		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    527  f5b1		       85 0e		      sta	PF1	; 4
    528  f5b3		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    529  f5b6		       85 0f		      sta	PF2	; 4
    530  f5b8
      0  f5b8					      sleep	6
      1  f5b8				   .CYCLES    SET	6
      2  f5b8
      3  f5b8				  -	      IF	.CYCLES < 2
      4  f5b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5b8				  -	      ERR
      6  f5b8					      ENDIF
      7  f5b8
      8  f5b8				  -	      IF	.CYCLES & 1
      9  f5b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5b8				  -	      nop	0
     11  f5b8				  -	      ELSE
     12  f5b8				  -	      bit	VSYNC
     13  f5b8				  -	      ENDIF
     14  f5b8				  -.CYCLES    SET	.CYCLES - 3
     15  f5b8					      ENDIF
     16  f5b8
     17  f5b8					      REPEAT	.CYCLES / 2
     18  f5b8		       ea		      nop
     17  f5b8					      REPEND
     18  f5b9		       ea		      nop
     17  f5b9					      REPEND
     18  f5ba		       ea		      nop
     19  f5bb					      REPEND
    532  f5bb
    533  f5bb							; Second half of image
    534  f5bb		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    535  f5be		       85 0d		      sta	PF0	; 4
    536  f5c0		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    537  f5c3		       85 0e		      sta	PF1	; 4
    538  f5c5		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    539  f5c8		       85 0f		      sta	PF2	; 4
    540  f5ca
    541  f5ca				   .title_frame_bottom_index		; 4 cycles
    542  f5ca
    543  f5ca		       ca		      dex		; 2
    544  f5cb		       d0 da		      bne	.title_frame_bottom	; 2
    545  f5cd
    546  f5cd				   .title_frame_bottom_index_next		; 6 cycles
    547  f5cd
    548  f5cd							; Restore scanline counter
    549  f5cd		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    550  f5cf
    551  f5cf		       98		      tya		; 2
    552  f5d0		       18		      clc		; 2
    553  f5d1		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    554  f5d3		       a8		      tay		; 2
    555  f5d4		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    556  f5d6		       d0 cf		      bne	.title_frame_bottom	; 2
    557  f5d8
    558  f5d8				   .title_frame_bottom_clean
    559  f5d8
    560  f5d8							; Clear out playfield
    561  f5d8		       a9 00		      lda	#0
    562  f5da		       85 0d		      sta	PF0
    563  f5dc		       85 0e		      sta	PF1
    564  f5de		       85 0f		      sta	PF2
    565  f5e0
    566  f5e0				   .title_kernel_return
    567  f5e0		       60		      rts
    568  f5e1
    569  f5e1				   TitleAudio0
    570  f5e1
    571  f5e1		       0f		      .BYTE.b	#15	; B
    572  f5e2		       13		      .BYTE.b	#19	; G
    573  f5e3		       17		      .BYTE.b	#23	; E
    574  f5e4		       13		      .BYTE.b	#19	; G
    575  f5e5		       0e		      .BYTE.b	#14	; C
    576  f5e6		       0e		      .BYTE.b	#14
    577  f5e7		       ff		      .BYTE.b	#-1
    578  f5e8		       ff		      .BYTE.b	#-1
    579  f5e9		       0c		      .BYTE.b	#12	; D
    580  f5ea		       13		      .BYTE.b	#19
    581  f5eb		       17		      .BYTE.b	#23
    582  f5ec		       13		      .BYTE.b	#19
    583  f5ed		       0e		      .BYTE.b	#14	; C
    584  f5ee		       0e		      .BYTE.b	#14
    585  f5ef		       ff		      .BYTE.b	#-1
    586  f5f0		       ff		      .BYTE.b	#-1
    587  f5f1
    588  f5f1				   TitleTone1
    589  f5f1
    590  f5f1		       0f		      .BYTE.b	#15	; Electronic Rumble
    591  f5f2		       ff		      .BYTE.b	#-1
    592  f5f3		       01		      .BYTE.b	#1	; Low Pure Tone
    593  f5f4		       01		      .BYTE.b	#1
    594  f5f5		       08		      .BYTE.b	#8	; White Noise
    595  f5f6		       01		      .BYTE.b	#1
    596  f5f7		       01		      .BYTE.b	#1
    597  f5f8		       ff		      .BYTE.b	#-1
    598  f5f9		       ff		      .BYTE.b	#-1
    599  f5fa		       0f		      .BYTE.b	#15
    600  f5fb		       ff		      .BYTE.b	#-1
    601  f5fc		       ff		      .BYTE.b	#-1
    602  f5fd		       08		      .BYTE.b	#8
    603  f5fe		       ff		      .BYTE.b	#-1
    604  f5ff		       01		      .BYTE.b	#1
    605  f600		       01		      .BYTE.b	#1
    606  f601
    607  f601				   TitleAudio1
    608  f601
    609  f601		       1d		      .BYTE.b	#29	; Kick
    610  f602		       ff		      .BYTE.b	#-1
    611  f603		       1f		      .BYTE.b	#31	; C
    612  f604		       1f		      .BYTE.b	#31
    613  f605		       07		      .BYTE.b	#7	; Snare
    614  f606		       1f		      .BYTE.b	#31
    615  f607		       1f		      .BYTE.b	#31
    616  f608		       ff		      .BYTE.b	#-1
    617  f609		       ff		      .BYTE.b	#-1
    618  f60a		       1d		      .BYTE.b	#29
    619  f60b		       ff		      .BYTE.b	#-1
    620  f60c		       ff		      .BYTE.b	#-1
    621  f60d		       07		      .BYTE.b	#7
    622  f60e		       ff		      .BYTE.b	#-1
    623  f60f		       17		      .BYTE.b	#23	; F
    624  f610		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f611					      include	"game.asm"
      1  f611							;================
      2  f611							; Game
      3  f611							;================
      4  f611
      5  f611							; Constants
      6  f611
      7  f611		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f611		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f611		       00 09	   GAME_AUDIO_STEP =	9
     10  f611		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f611		       00 06	   GAME_AUDIO_TONE =	6
     12  f611
     13  f611							; Object Code
     14  f611
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f611					      include	"objects/level.asm"
      1  f611							;======================
      2  f611							; Level Logic
      3  f611							;======================
      4  f611
      5  f611							; Constants
      6  f611
      7  f611		       00 14	   LEVELS     =	20
      8  f611
      9  f611				   LevelInit
     10  f611
     11  f611							; Set beginning level by difficulty switches treated as binary
     12  f611		       ad 82 02 	      lda	SWCHB
     13  f614					      REPEAT	6	; shift to 0-3
     14  f614		       4a		      lsr
     13  f614					      REPEND
     14  f615		       4a		      lsr
     13  f615					      REPEND
     14  f616		       4a		      lsr
     13  f616					      REPEND
     14  f617		       4a		      lsr
     13  f617					      REPEND
     14  f618		       4a		      lsr
     13  f618					      REPEND
     14  f619		       4a		      lsr
     15  f61a					      REPEND
     16  f61a		       18		      clc		; multiply by 5
     17  f61b		       85 80		      sta	Temp
     18  f61d		       0a		      asl
     19  f61e		       0a		      asl
     20  f61f		       65 80		      adc	Temp
     21  f621		       85 a0		      sta	LevelCurrent
     22  f623
     23  f623		       20 49 f6 	      jsr	LevelLoad
     24  f626
     25  f626		       60		      rts
     26  f627
     27  f627				   LevelUpdate
     28  f627
     29  f627							; Calculate Desired score: (level+2)*5
     30  f627		       a5 a0		      lda	LevelCurrent
     31  f629		       18		      clc
     32  f62a		       69 02		      adc	#2	; +2
     33  f62c		       85 80		      sta	Temp
     34  f62e		       0a		      asl		; x2
     35  f62f		       0a		      asl		; x2
     36  f630		       65 80		      adc	Temp	; x1
     37  f632
     38  f632							; Check if score is high enough
     39  f632		       c5 96		      cmp	ScoreValue+1
     40  f634		       b0 0f		      bcs	.level_update_return
     41  f636
     42  f636							; Reset score
     43  f636		       a9 00		      lda	#0
     44  f638		       85 96		      sta	ScoreValue+1
     45  f63a
     46  f63a							; Check if we haven't reached the final level
     47  f63a		       a5 a0		      lda	LevelCurrent
     48  f63c		       c9 13		      cmp	#LEVELS-1
     49  f63e		       b0 05		      bcs	.level_update_return
     50  f640
     51  f640		       e6 a0		      inc	LevelCurrent
     52  f642		       20 49 f6 	      jsr	LevelLoad
     53  f645
     54  f645				   .level_update_return
     55  f645
     56  f645		       20 85 f6 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     57  f648
     58  f648		       60		      rts
     59  f649
     60  f649				   LevelLoad
     61  f649
     62  f649							; Game Audio Step: 9-(level/4)
     63  f649		       a5 a0		      lda	LevelCurrent
     64  f64b		       4a		      lsr		; /2
     65  f64c		       4a		      lsr		; /2
     66  f64d		       85 80		      sta	Temp
     67  f64f		       a9 0a		      lda	#GAME_AUDIO_STEP+1
     68  f651		       18		      clc
     69  f652		       e5 80		      sbc	Temp
     70  f654		       85 94		      sta	GameAudioStep
     71  f656
     72  f656							; Bug Speed: level/4+2
     73  f656		       a5 a0		      lda	LevelCurrent
     74  f658		       4a		      lsr		; /2
     75  f659		       4a		      lsr		; /2
     76  f65a		       69 02		      adc	#2
     77  f65c		       85 b6		      sta	BugSpeed
     78  f65e
     79  f65e							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     80  f65e		       a9 14		      lda	#20
     81  f660		       18		      clc
     82  f661		       e5 a0		      sbc	LevelCurrent
     83  f663		       0a		      asl		; x2
     84  f664		       85 80		      sta	Temp
     85  f666		       0a		      asl		; x2
     86  f667		       0a		      asl		; x2
     87  f668		       65 80		      adc	Temp
     88  f66a		       85 c5		      sta	SwatterWaitTime
     89  f66c
     90  f66c							; Swatter Hold Time: 60-(level*2)
     91  f66c
     92  f66c		       a5 a0		      lda	LevelCurrent
     93  f66e		       0a		      asl		; x2
     94  f66f		       85 80		      sta	Temp
     95  f671		       a9 3c		      lda	#60
     96  f673		       18		      clc
     97  f674		       e5 80		      sbc	Temp
     98  f676		       85 c6		      sta	SwatterHoldTime
     99  f678
    100  f678							; Swatter Hit Damage: level*3+$10
    101  f678		       a5 a0		      lda	LevelCurrent
    102  f67a		       18		      clc
    103  f67b		       85 80		      sta	Temp
    104  f67d		       0a		      asl		; x2
    105  f67e		       65 80		      adc	Temp
    106  f680		       69 10		      adc	#$10
    107  f682		       85 c7		      sta	SwatterHitDamage
    108  f684
    109  f684		       60		      rts
    110  f685
    111  f685				   LevelLoadColor
    112  f685		       a4 a0		      ldy	LevelCurrent
    113  f687
    114  f687							; check b/w
    115  f687		       ad 82 02 	      lda	SWCHB
    116  f68a		       29 08		      and	#%00001000
    117  f68c		       f0 0b		      beq	.level_load_bw
    118  f68e
    119  f68e				   .level_load_color
    120  f68e
    121  f68e							; Background Color
    122  f68e		       b9 a2 f6 	      lda	LevelDataBk,y
    123  f691		       85 a2		      sta	WebColor+0
    124  f693
    125  f693							; Web Color
    126  f693		       b9 b6 f6 	      lda	LevelDataPf,y
    127  f696		       85 a3		      sta	WebColor+1
    128  f698
    129  f698		       60		      rts
    130  f699
    131  f699				   .level_load_bw
    132  f699
    133  f699							; Background Color
    134  f699		       a9 00		      lda	#WEB_BG_COLOR
    135  f69b		       85 a2		      sta	WebColor+0
    136  f69d
    137  f69d							; Web Color
    138  f69d		       a9 02		      lda	#WEB_FG_COLOR
    139  f69f		       85 a3		      sta	WebColor+1
    140  f6a1
    141  f6a1		       60		      rts
    142  f6a2
    143  f6a2							; Easy: 1-5
    144  f6a2							; Medium: 6-9
    145  f6a2							; Hard: 10-15
    146  f6a2							; Extreme: 16-19
    147  f6a2
    148  f6a2				   LevelDataBk		; Background Color
    149  f6a2		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    150  f6a3		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    151  f6a4		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    152  f6a5		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    153  f6a6		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    154  f6a7		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    155  f6a8		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    156  f6a9		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    157  f6aa		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    158  f6ab		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    159  f6ac		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    160  f6ad		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    161  f6ae		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    162  f6af		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    163  f6b0		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    164  f6b1		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    165  f6b2		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    166  f6b3		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    167  f6b4		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    168  f6b5		       0c		      .BYTE.b	#$0C	; rgb(199, 199, 199)
    169  f6b6
    170  f6b6				   LevelDataPf		; Web Color
    171  f6b6		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    172  f6b7		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    173  f6b8		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    174  f6b9		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    175  f6ba		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    176  f6bb		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    177  f6bc		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    178  f6bd		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    179  f6be		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    180  f6bf		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    181  f6c0		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    182  f6c1		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    183  f6c2		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    184  f6c3		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    185  f6c4		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    186  f6c5		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    187  f6c6		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    188  f6c7		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    189  f6c8		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    190  f6c9		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f6ca					      include	"objects/score.asm"
      1  f6ca							;======================
      2  f6ca							; Score (playfield)
      3  f6ca							;======================
      4  f6ca
      5  f6ca							; Constants
      6  f6ca
      7  f6ca		       00 00	   SCORE_BG_COLOR =	#$00
      8  f6ca		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f6ca		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f6ca		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f6ca		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f6ca		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f6ca
     14  f6ca		       00 05	   SCORE_LABEL_SIZE =	5
     15  f6ca		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f6ca		       00 02	   SCORE_LINE_SIZE =	2
     17  f6ca		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f6ca
     19  f6ca							; Initialization
     20  f6ca
     21  f6ca				   ScoreInit
     22  f6ca
     23  f6ca							; Health Score
     24  f6ca		       a9 ff		      lda	#$ff
     25  f6cc		       85 95		      sta	ScoreValue+0
     26  f6ce
     27  f6ce							; Game Score
     28  f6ce		       a9 00		      lda	#0
     29  f6d0		       85 96		      sta	ScoreValue+1
     30  f6d2
     31  f6d2		       60		      rts
     32  f6d3
     33  f6d3							; Frame Update
     34  f6d3
     35  f6d3				   ScoreUpdate
     36  f6d3
     37  f6d3							; Current Level Digits
     38  f6d3		       a5 a0		      lda	LevelCurrent
     39  f6d5		       18		      clc
     40  f6d6		       69 01		      adc	#1
     41  f6d8		       a0 00		      ldy	#0
     42  f6da		       20 0d f7 	      jsr	ScoreUpdateDigits
     43  f6dd
     44  f6dd							; Score Digits
     45  f6dd		       a5 96		      lda	ScoreValue+1
     46  f6df		       a0 01		      ldy	#1
     47  f6e1		       20 0d f7 	      jsr	ScoreUpdateDigits
     48  f6e4
     49  f6e4							; Health Bar
     50  f6e4		       a5 95		      lda	ScoreValue+0
     51  f6e6		       f0 1c		      beq	.score_update_bar_empty
     52  f6e8
     53  f6e8					      REPEAT	4
     54  f6e8		       4a		      lsr
     53  f6e8					      REPEND
     54  f6e9		       4a		      lsr
     53  f6e9					      REPEND
     54  f6ea		       4a		      lsr
     53  f6ea					      REPEND
     54  f6eb		       4a		      lsr
     55  f6ec					      REPEND
     56  f6ec		       c9 08		      cmp	#8
     57  f6ee		       b0 09		      bcs	.score_update_bar_top
     58  f6f0
     59  f6f0				   .score_update_bar_bottom
     60  f6f0		       aa		      tax
     61  f6f1		       bd 38 f8 	      lda	ScoreBar,x
     62  f6f4		       a0 00		      ldy	#$00
     63  f6f6		       4c 08 f7 	      jmp	.score_update_bar_store
     64  f6f9
     65  f6f9				   .score_update_bar_top
     66  f6f9		       29 07		      and	#%00000111
     67  f6fb		       aa		      tax
     68  f6fc		       a9 7f		      lda	#$7f
     69  f6fe		       bc 40 f8 	      ldy	ScoreBarFlip,x
     70  f701		       4c 08 f7 	      jmp	.score_update_bar_store
     71  f704
     72  f704				   .score_update_bar_empty
     73  f704		       a9 00		      lda	#0
     74  f706		       a0 00		      ldy	#0
     75  f708
     76  f708				   .score_update_bar_store
     77  f708		       85 9e		      sta	ScoreBarGfx+0
     78  f70a		       84 9f		      sty	ScoreBarGfx+1
     79  f70c
     80  f70c				   .score_update_end
     81  f70c		       60		      rts
     82  f70d
     83  f70d				   ScoreUpdateDigits		; Value in A, ScoreDigit index in Y
     84  f70d
     85  f70d		       84 83		      sty	Temp+3
     86  f70f
     87  f70f		       20 21 f0 	      jsr	BinBcdConvert
     88  f712
     89  f712							; Only use first byte
     90  f712		       8a		      txa
     91  f713		       29 0f		      and	#$0f
     92  f715		       a8		      tay
     93  f716		       8a		      txa
     94  f717		       29 f0		      and	#$f0
     95  f719					      REPEAT	4
     96  f719		       4a		      lsr
     95  f719					      REPEND
     96  f71a		       4a		      lsr
     95  f71a					      REPEND
     96  f71b		       4a		      lsr
     95  f71b					      REPEND
     96  f71c		       4a		      lsr
     97  f71d					      REPEND
     98  f71d		       aa		      tax
     99  f71e
    100  f71e							; Adjust index positions by multiplying by 5
    101  f71e		       8a		      txa
    102  f71f		       85 80		      sta	Temp
    103  f721		       0a		      asl
    104  f722		       0a		      asl
    105  f723		       65 80		      adc	Temp
    106  f725		       a6 83		      ldx	Temp+3
    107  f727		       95 99		      sta	ScoreDigitTens,x
    108  f729
    109  f729		       98		      tya
    110  f72a		       85 80		      sta	Temp
    111  f72c		       0a		      asl
    112  f72d		       0a		      asl
    113  f72e		       65 80		      adc	Temp
    114  f730		       a4 83		      ldy	Temp+3
    115  f732		       99 97 00 	      sta	ScoreDigitOnes,y
    116  f735
    117  f735		       60		      rts
    118  f736
    119  f736							; Draw loop (uses SCORE_LINES scanlines)
    120  f736
    121  f736				   ScoreDraw
    122  f736
    123  f736							; Load Colors
    124  f736		       a9 00		      lda	#SCORE_BG_COLOR
    125  f738		       85 09		      sta	COLUBK
    126  f73a		       a9 06		      lda	#SCORE_LABEL_COLOR
    127  f73c		       85 08		      sta	COLUPF
    128  f73e		       85 06		      sta	COLUP0
    129  f740		       85 07		      sta	COLUP1
    130  f742
    131  f742							; Set Non-Mirror
    132  f742		       a9 02		      lda	#%00000010
    133  f744		       85 0a		      sta	CTRLPF
    134  f746
    135  f746		       a2 00		      ldx	#0
    136  f748				   .score_draw_label
    137  f748
    138  f748		       85 02		      sta	WSYNC
    139  f74a
    140  f74a							; First half of image
    141  f74a		       bd 32 f1 	      lda	ScoreLabel+0,x	; 4
    142  f74d		       85 0d		      sta	PF0	; 3
    143  f74f		       bd 33 f1 	      lda	ScoreLabel+1,x
    144  f752		       85 0e		      sta	PF1
    145  f754		       bd 34 f1 	      lda	ScoreLabel+2,x
    146  f757		       85 0f		      sta	PF2
    147  f759
      0  f759					      sleep	8
      1  f759				   .CYCLES    SET	8
      2  f759
      3  f759				  -	      IF	.CYCLES < 2
      4  f759				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f759				  -	      ERR
      6  f759					      ENDIF
      7  f759
      8  f759				  -	      IF	.CYCLES & 1
      9  f759				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f759				  -	      nop	0
     11  f759				  -	      ELSE
     12  f759				  -	      bit	VSYNC
     13  f759				  -	      ENDIF
     14  f759				  -.CYCLES    SET	.CYCLES - 3
     15  f759					      ENDIF
     16  f759
     17  f759					      REPEAT	.CYCLES / 2
     18  f759		       ea		      nop
     17  f759					      REPEND
     18  f75a		       ea		      nop
     17  f75a					      REPEND
     18  f75b		       ea		      nop
     17  f75b					      REPEND
     18  f75c		       ea		      nop
     19  f75d					      REPEND
    149  f75d
    150  f75d							; Second half of image
    151  f75d							;lda ScoreLabel+3,x ; 4
    152  f75d		       a9 00		      lda	#0	; 2
    153  f75f		       85 0d		      sta	PF0	; 3
    154  f761		       bd 36 f1 	      lda	ScoreLabel+4,x
    155  f764		       85 0e		      sta	PF1
    156  f766		       bd 37 f1 	      lda	ScoreLabel+5,x
    157  f769		       85 0f		      sta	PF2
    158  f76b
    159  f76b		       8a		      txa
    160  f76c		       18		      clc
    161  f76d		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    162  f76f		       aa		      tax
    163  f770		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    164  f772		       d0 d4		      bne	.score_draw_label
    165  f774
    166  f774							; Clear labels and setup color
    167  f774		       a9 00		      lda	#0
    168  f776		       85 0d		      sta	PF0
    169  f778		       85 0e		      sta	PF1
    170  f77a		       85 0f		      sta	PF2
    171  f77c
    172  f77c		       85 02		      sta	WSYNC
    173  f77e
    174  f77e							; Load Colors
    175  f77e		       ad 82 02 	      lda	SWCHB
    176  f781		       29 08		      and	#%00001000
    177  f783		       f0 0d		      beq	.score_draw_bw
    178  f785
    179  f785				   .score_draw_color
    180  f785		       a9 44		      lda	#SCORE_LEVEL_COLOR
    181  f787		       85 08		      sta	COLUPF
    182  f789		       85 06		      sta	COLUP0
    183  f78b		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    184  f78d		       85 07		      sta	COLUP1
    185  f78f
    186  f78f		       4c 9c f7 	      jmp	.score_draw_digit_start
    187  f792
    188  f792				   .score_draw_bw
    189  f792		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    190  f794		       85 08		      sta	COLUPF
    191  f796		       85 06		      sta	COLUP0
    192  f798		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    193  f79a		       85 07		      sta	COLUP1
    194  f79c
    195  f79c				   .score_draw_digit_start
    196  f79c
    197  f79c		       85 02		      sta	WSYNC
    198  f79e
    199  f79e							; Prepare initial line
    200  f79e
    201  f79e							; Level
    202  f79e		       a4 99		      ldy	ScoreDigitTens
    203  f7a0		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    204  f7a3		       29 f0		      and	#$f0
    205  f7a5		       85 9b		      sta	ScoreDigitGfx
    206  f7a7
    207  f7a7		       a4 97		      ldy	ScoreDigitOnes
    208  f7a9		       b9 ce f0 	      lda	ScoreDigits,y
    209  f7ac		       29 f0		      and	#$f0
    210  f7ae		       85 9c		      sta	ScoreDigitGfx+1
    211  f7b0
    212  f7b0							; Score
    213  f7b0		       a4 9a		      ldy	ScoreDigitTens+1
    214  f7b2		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    215  f7b5		       29 0f		      and	#$0f
    216  f7b7		       85 9d		      sta	ScoreDigitGfx+2
    217  f7b9
    218  f7b9		       a4 98		      ldy	ScoreDigitOnes+1
    219  f7bb		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    220  f7be		       29 f0		      and	#$f0
    221  f7c0		       05 9d		      ora	ScoreDigitGfx+2
    222  f7c2		       85 9d		      sta	ScoreDigitGfx+2
    223  f7c4
    224  f7c4		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    225  f7c6		       a5 9b		      lda	ScoreDigitGfx
    226  f7c8		       85 02		      sta	WSYNC
    227  f7ca				   .score_draw_digit
    228  f7ca
    229  f7ca							;lda ScoreDigitGfx
    230  f7ca		       85 0d		      sta	PF0
    231  f7cc		       a5 9c		      lda	ScoreDigitGfx+1
    232  f7ce		       85 0e		      sta	PF1
    233  f7d0		       a5 9d		      lda	ScoreDigitGfx+2
    234  f7d2		       85 0f		      sta	PF2
    235  f7d4
    236  f7d4							; Begin preparing next line
    237  f7d4		       e6 97		      inc	ScoreDigitOnes
    238  f7d6		       e6 99		      inc	ScoreDigitTens
    239  f7d8		       e6 98		      inc	ScoreDigitOnes+1
    240  f7da		       e6 9a		      inc	ScoreDigitTens+1
    241  f7dc
    242  f7dc		       a9 00		      lda	#0
    243  f7de		       85 0d		      sta	PF0
    244  f7e0		       a5 9e		      lda	ScoreBarGfx+0
    245  f7e2		       85 0e		      sta	PF1
    246  f7e4		       a5 9f		      lda	ScoreBarGfx+1
    247  f7e6		       85 0f		      sta	PF2
    248  f7e8
    249  f7e8							; Level 1st Digit
    250  f7e8		       a4 99		      ldy	ScoreDigitTens
    251  f7ea		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    252  f7ed		       29 f0		      and	#$f0
    253  f7ef		       85 80		      sta	Temp
    254  f7f1
    255  f7f1							; Score 1st Digit
    256  f7f1		       a4 9a		      ldy	ScoreDigitTens+1
    257  f7f3		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    258  f7f6		       29 0f		      and	#$0f
    259  f7f8		       85 81		      sta	Temp+1
    260  f7fa
    261  f7fa		       a5 9b		      lda	ScoreDigitGfx
    262  f7fc		       85 0d		      sta	PF0
    263  f7fe		       a5 9c		      lda	ScoreDigitGfx+1
    264  f800		       85 0e		      sta	PF1
    265  f802		       a5 9d		      lda	ScoreDigitGfx+2
    266  f804		       85 0f		      sta	PF2
    267  f806
    268  f806							; Level 2nd Digit (and transfer)
    269  f806		       a4 97		      ldy	ScoreDigitOnes
    270  f808		       b9 ce f0 	      lda	ScoreDigits,y
    271  f80b		       29 f0		      and	#$f0
    272  f80d		       85 9c		      sta	ScoreDigitGfx+1
    273  f80f
      0  f80f					      sleep	3
      1  f80f				   .CYCLES    SET	3
      2  f80f
      3  f80f				  -	      IF	.CYCLES < 2
      4  f80f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f80f				  -	      ERR
      6  f80f					      ENDIF
      7  f80f
      8  f80f					      IF	.CYCLES & 1
      9  f80f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f80f		       04 00		      nop	0
     11  f811				  -	      ELSE
     12  f811				  -	      bit	VSYNC
     13  f811					      ENDIF
     14  f811				   .CYCLES    SET	.CYCLES - 3
     15  f811					      ENDIF
     16  f811
     17  f811				  -	      REPEAT	.CYCLES / 2
     18  f811				  -	      nop
     19  f811					      REPEND
    275  f811
    276  f811		       a9 00		      lda	#0
    277  f813		       85 0d		      sta	PF0
    278  f815		       a5 9e		      lda	ScoreBarGfx+0
    279  f817		       85 0e		      sta	PF1
    280  f819		       a4 9f		      ldy	ScoreBarGfx+1
    281  f81b		       84 0f		      sty	PF2
    282  f81d
    283  f81d							; Score 2nd Digit (and transfer)
    284  f81d		       a4 98		      ldy	ScoreDigitOnes+1
    285  f81f		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    286  f822		       29 f0		      and	#$f0
    287  f824		       05 81		      ora	Temp+1
    288  f826		       85 9d		      sta	ScoreDigitGfx+2
    289  f828
    290  f828							; Transfer Level 1st Digit
    291  f828		       a5 80		      lda	Temp
    292  f82a		       85 9b		      sta	ScoreDigitGfx
    293  f82c
    294  f82c		       ca		      dex
    295  f82d		       d0 9b		      bne	.score_draw_digit
    296  f82f
    297  f82f		       a9 00		      lda	#0
    298  f831		       85 0d		      sta	PF0
    299  f833		       85 0e		      sta	PF1
    300  f835		       85 0f		      sta	PF2
    301  f837
    302  f837		       60		      rts
    303  f838
    304  f838				   ScoreBar
    305  f838		       40		      .BYTE.b	#%01000000
    306  f839		       40		      .BYTE.b	#%01000000
    307  f83a		       60		      .BYTE.b	#%01100000
    308  f83b		       70		      .BYTE.b	#%01110000
    309  f83c		       78		      .BYTE.b	#%01111000
    310  f83d		       7c		      .BYTE.b	#%01111100
    311  f83e		       7e		      .BYTE.b	#%01111110
    312  f83f		       7f		      .BYTE.b	#%01111111
    313  f840
    314  f840				   ScoreBarFlip
    315  f840		       01		      .BYTE.b	#%00000001
    316  f841		       03		      .BYTE.b	#%00000011
    317  f842		       07		      .BYTE.b	#%00000111
    318  f843		       0f		      .BYTE.b	#%00001111
    319  f844		       1f		      .BYTE.b	#%00011111
    320  f845		       3f		      .BYTE.b	#%00111111
    321  f846		       7f		      .BYTE.b	#%01111111
    322  f847		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f848					      include	"objects/web.asm"
      1  f848							;================
      2  f848							; Web (Playfield)
      3  f848							;================
      4  f848
      5  f848							; Constants
      6  f848
      7  f848		       00 00	   WEB_BG_COLOR =	#$00
      8  f848		       00 02	   WEB_FG_COLOR =	#$02
      9  f848
     10  f848		       00 1c	   WEB_SIZE   =	28
     11  f848		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f848		       00 06	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f848
     14  f848							; Scanline Draw
     15  f848
     16  f848				   WebDrawStart
     17  f848
     18  f848							; Load Colors
     19  f848		       a5 a3		      lda	WebColor+1
     20  f84a		       85 08		      sta	COLUPF
     21  f84c
     22  f84c							; Mirror playfield and use standard playfield color
     23  f84c							;lda CtrlPf
     24  f84c							;and #%11111100
     25  f84c							;ora #%00000001
     26  f84c							;sta CtrlPf
     27  f84c							;sta CTRLPF
     28  f84c
     29  f84c							; Initialize image index
     30  f84c		       a9 00		      lda	#0
     31  f84e		       85 a1		      sta	WebIndex
     32  f850
     33  f850		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f851					      include	"objects/spider.asm"
      1  f851							;=================
      2  f851							; Spider (player0)
      3  f851							;=================
      4  f851
      5  f851							; Constants
      6  f851
      7  f851		       00 56	   SPIDER_COLOR =	#$56
      8  f851		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f851		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f851		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f851
     12  f851		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f851		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f851		       00 02	   SPIDER_VEL_X =	2
     15  f851		       00 02	   SPIDER_VEL_Y =	2
     16  f851
     17  f851							; Initialization
     18  f851
     19  f851				   SpiderInit
     20  f851
     21  f851							; Initialize Position in center of screen
     22  f851		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f853		       85 a6		      sta	SpiderPos
     24  f855		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f857		       85 a7		      sta	SpiderPos+1
     26  f859
     27  f859							; Initial direction
     28  f859		       a9 10		      lda	#%00010000
     29  f85b		       85 a8		      sta	SpiderCtrl
     30  f85d
     31  f85d							; Setup Sprite
      0  f85d					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f85d				   .POINTER   SET	SpiderPtr
      2  f85d				   .ADDRESS   SET	SpiderSprite
      3  f85d
      4  f85d		       a9 a4		      LDA	#<.ADDRESS
      5  f85f		       85 a4		      STA	.POINTER
      6  f861		       a9 f1		      LDA	#>.ADDRESS
      7  f863		       85 a5		      STA	.POINTER+1
      8  f865
     33  f865
     34  f865		       60		      rts
     35  f866
     36  f866							; Frame Update
     37  f866
     38  f866				   SpiderUpdate
     39  f866		       20 6d f8 	      jsr	SpiderControl
     40  f869		       20 10 f9 	      jsr	SpiderCollision
     41  f86c		       60		      rts
     42  f86d
     43  f86d				   SpiderControl
     44  f86d
     45  f86d							; Control Position
     46  f86d		       a6 a6		      ldx	SpiderPos
     47  f86f		       a4 a7		      ldy	SpiderPos+1
     48  f871		       ad 80 02 	      lda	SWCHA
     49  f874
     50  f874				   .spider_control_check_right
     51  f874		       30 02		      bmi	.spider_control_check_left
     52  f876
     53  f876					      REPEAT	#SPIDER_VEL_X
     54  f876		       e8		      inx
     53  f876					      REPEND
     54  f877		       e8		      inx
     55  f878					      REPEND
     56  f878
     57  f878				   .spider_control_check_left
     58  f878		       2a		      rol
     59  f879		       30 02		      bmi	.spider_control_check_down
     60  f87b
     61  f87b					      REPEAT	#SPIDER_VEL_X
     62  f87b		       ca		      dex
     61  f87b					      REPEND
     62  f87c		       ca		      dex
     63  f87d					      REPEND
     64  f87d
     65  f87d				   .spider_control_check_down
     66  f87d		       2a		      rol
     67  f87e		       30 02		      bmi	.spider_control_check_up
     68  f880
     69  f880					      REPEAT	#SPIDER_VEL_Y
     70  f880		       88		      dey
     69  f880					      REPEND
     70  f881		       88		      dey
     71  f882					      REPEND
     72  f882
     73  f882				   .spider_control_check_up
     74  f882		       2a		      rol
     75  f883		       30 02		      bmi	.spider_control_sprite
     76  f885
     77  f885					      REPEAT	#SPIDER_VEL_Y
     78  f885		       c8		      iny
     77  f885					      REPEND
     78  f886		       c8		      iny
     79  f887					      REPEND
     80  f887
     81  f887				   .spider_control_sprite
     82  f887							; Control Sprite
     83  f887		       a9 00		      lda	#%00000000
     84  f889							; 7th bit: right
     85  f889							; 6th bit: left
     86  f889							; 5th bit: down
     87  f889							; 4th bit: up
     88  f889
     89  f889				   .spider_control_sprite_x
     90  f889		       e4 a6		      cpx	SpiderPos
     91  f88b		       90 04		      bcc	.spider_control_sprite_left
     92  f88d		       f0 09		      beq	.spider_control_sprite_y
     93  f88f		       b0 05		      bcs	.spider_control_sprite_right
     94  f891
     95  f891				   .spider_control_sprite_left
     96  f891		       09 40		      ora	#%01000000
     97  f893		       4c 98 f8 	      jmp	.spider_control_sprite_y
     98  f896
     99  f896				   .spider_control_sprite_right
    100  f896		       09 80		      ora	#%10000000
    101  f898
    102  f898				   .spider_control_sprite_y
    103  f898		       c4 a7		      cpy	SpiderPos+1
    104  f89a		       90 04		      bcc	.spider_control_sprite_down
    105  f89c		       f0 09		      beq	.spider_control_sprite_store
    106  f89e		       b0 05		      bcs	.spider_control_sprite_up
    107  f8a0
    108  f8a0				   .spider_control_sprite_down
    109  f8a0		       09 20		      ora	#%00100000
    110  f8a2		       4c a7 f8 	      jmp	.spider_control_sprite_store
    111  f8a5
    112  f8a5				   .spider_control_sprite_up
    113  f8a5		       09 10		      ora	#%00010000
    114  f8a7
    115  f8a7				   .spider_control_sprite_store
    116  f8a7		       c9 00		      cmp	#%00000000
    117  f8a9		       f0 02		      beq	.spider_control_boundary
    118  f8ab		       85 a8		      sta	SpiderCtrl
    119  f8ad
    120  f8ad				   .spider_control_boundary
    121  f8ad							; Check Playfield Boundaries
    122  f8ad
    123  f8ad				   .spider_control_boundary_left
    124  f8ad		       e0 03		      cpx	#SPIDER_VEL_X+1
    125  f8af		       b0 05		      bcs	.spider_control_boundary_right
    126  f8b1		       a2 03		      ldx	#SPIDER_VEL_X+1
    127  f8b3		       4c bc f8 	      jmp	.spider_control_boundary_top
    128  f8b6
    129  f8b6				   .spider_control_boundary_right
    130  f8b6		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    131  f8b8		       90 02		      bcc	.spider_control_boundary_top
    132  f8ba		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    133  f8bc
    134  f8bc				   .spider_control_boundary_top
    135  f8bc		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    136  f8be		       b0 05		      bcs	.spider_control_boundary_bottom
    137  f8c0		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    138  f8c2		       4c cb f8 	      jmp	.spider_control_store
    139  f8c5
    140  f8c5				   .spider_control_boundary_bottom
    141  f8c5		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    142  f8c7		       90 02		      bcc	.spider_control_store
    143  f8c9		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    144  f8cb
    145  f8cb				   .spider_control_store
    146  f8cb							; Store new position
    147  f8cb		       86 a6		      stx	SpiderPos
    148  f8cd		       84 a7		      sty	SpiderPos+1
    149  f8cf
    150  f8cf				   .spider_control_sprite_assign
    151  f8cf							; Skip if no change
    152  f8cf		       c9 00		      cmp	#%00000000
    153  f8d1		       f0 3c		      beq	.spider_control_return
    154  f8d3
    155  f8d3		       a2 00		      ldx	#%00000000	; For reflection
    156  f8d5
    157  f8d5		       24 a8		      bit	SpiderCtrl
    158  f8d7		       30 0f		      bmi	.spider_control_sprite_assign_right
    159  f8d9		       50 18		      bvc	.spider_control_sprite_assign_top
    160  f8db
    161  f8db				   .spider_control_sprite_assign_left
      0  f8db					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8db				   .POINTER   SET	SpiderPtr
      2  f8db				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8db
      4  f8db		       a9 b4		      LDA	#<.ADDRESS
      5  f8dd		       85 a4		      STA	.POINTER
      6  f8df		       a9 f1		      LDA	#>.ADDRESS
      7  f8e1		       85 a5		      STA	.POINTER+1
      8  f8e3
    163  f8e3		       a2 08		      ldx	#%00001000
    164  f8e5		       4c 0d f9 	      jmp	.spider_control_reflect
    165  f8e8
    166  f8e8				   .spider_control_sprite_assign_right
      0  f8e8					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8e8				   .POINTER   SET	SpiderPtr
      2  f8e8				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8e8
      4  f8e8		       a9 b4		      LDA	#<.ADDRESS
      5  f8ea		       85 a4		      STA	.POINTER
      6  f8ec		       a9 f1		      LDA	#>.ADDRESS
      7  f8ee		       85 a5		      STA	.POINTER+1
      8  f8f0
    168  f8f0		       4c 0d f9 	      jmp	.spider_control_reflect
    169  f8f3
    170  f8f3				   .spider_control_sprite_assign_top
    171  f8f3		       c9 10		      cmp	#%00010000
    172  f8f5		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f8f7					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f8f7				   .POINTER   SET	SpiderPtr
      2  f8f7				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f8f7
      4  f8f7		       a9 a4		      LDA	#<.ADDRESS
      5  f8f9		       85 a4		      STA	.POINTER
      6  f8fb		       a9 f1		      LDA	#>.ADDRESS
      7  f8fd		       85 a5		      STA	.POINTER+1
      8  f8ff
    174  f8ff		       4c 0d f9 	      jmp	.spider_control_reflect
    175  f902
    176  f902				   .spider_control_sprite_assign_bottom
      0  f902					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f902				   .POINTER   SET	SpiderPtr
      2  f902				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f902
      4  f902		       a9 c4		      LDA	#<.ADDRESS
      5  f904		       85 a4		      STA	.POINTER
      6  f906		       a9 f1		      LDA	#>.ADDRESS
      7  f908		       85 a5		      STA	.POINTER+1
      8  f90a
    178  f90a		       4c 0d f9 	      jmp	.spider_control_reflect
    179  f90d
    180  f90d				   .spider_control_reflect
    181  f90d		       86 0b		      stx	REFP0
    182  f90f
    183  f90f				   .spider_control_return
    184  f90f		       60		      rts
    185  f910
    186  f910				   SpiderCollision
    187  f910		       a0 56		      ldy	#SPIDER_COLOR
    188  f912
    189  f912							; Check b/w
    190  f912		       ad 82 02 	      lda	SWCHB
    191  f915		       29 08		      and	#%00001000
    192  f917		       d0 02		      bne	.spider_collision_m0
    193  f919
    194  f919		       a0 0e		      ldy	#SPIDER_BW_COLOR
    195  f91b
    196  f91b				   .spider_collision_m0
    197  f91b							; Check stun status
    198  f91b		       a6 b7		      ldx	BugStunned
    199  f91d		       d0 04		      bne	.spider_collision_m1
    200  f91f
    201  f91f							; Collision for M0 (V set)
    202  f91f		       24 00		      bit	CXM0P
    203  f921		       70 0b		      bvs	.spider_collision_active
    204  f923
    205  f923				   .spider_collision_m1
    206  f923							; Check stun status
    207  f923		       a6 b8		      ldx	BugStunned+1
    208  f925		       d0 12		      bne	.spider_collision_return
    209  f927
    210  f927							; Collision for M1 (N set)
    211  f927		       24 01		      bit	CXM1P
    212  f929		       30 03		      bmi	.spider_collision_active
    213  f92b
    214  f92b		       4c 39 f9 	      jmp	.spider_collision_return
    215  f92e
    216  f92e				   .spider_collision_active
    217  f92e		       a0 44		      ldy	#SPIDER_COL_COLOR
    218  f930
    219  f930							; Check b/w
    220  f930		       ad 82 02 	      lda	SWCHB
    221  f933		       29 08		      and	#%00001000
    222  f935		       d0 02		      bne	.spider_collision_return
    223  f937
    224  f937		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    225  f939
    226  f939				   .spider_collision_return
    227  f939		       84 a9		      sty	SpiderColor
    228  f93b		       60		      rts
    229  f93c
    230  f93c				   SpiderPosition
    231  f93c
    232  f93c							; Set Position
    233  f93c		       a2 00		      ldx	#0	; Object (player0)
    234  f93e		       a5 a6		      lda	SpiderPos	; X Position
    235  f940		       20 00 f0 	      jsr	PosObject
    236  f943
    237  f943		       60		      rts
    238  f944
    239  f944							; Scanline Draw
    240  f944
    241  f944				   SpiderDrawStart
    242  f944
    243  f944							; Set player 0 to be quad size
    244  f944							;lda NuSiz0
    245  f944							;and #%11111000
    246  f944							;ora #%00000101
    247  f944							;sta NuSiz0
    248  f944							;sta NUSIZ0
    249  f944
    250  f944							; Set sprite color
    251  f944		       a5 a9		      lda	SpiderColor
    252  f946		       85 06		      sta	COLUP0
    253  f948
    254  f948							; Determine if we need to use vertical delay (odd line)
    255  f948		       a5 a7		      lda	SpiderPos+1	; Y Position
    256  f94a		       4a		      lsr
    257  f94b		       b0 05		      bcs	.spider_draw_start_nodelay
    258  f94d
    259  f94d		       a0 01		      ldy	#1
    260  f94f		       4c 54 f9 	      jmp	.spider_draw_start_set_delay
    261  f952
    262  f952				   .spider_draw_start_nodelay
    263  f952		       a0 00		      ldy	#0
    264  f954
    265  f954				   .spider_draw_start_set_delay
    266  f954		       84 25		      sty	VDELP0
    267  f956
    268  f956				   .spider_draw_start_pos
    269  f956							; Calculate starting position
    270  f956		       18		      clc
    271  f957		       69 10		      adc	#SPIDER_SIZE
    272  f959		       85 ab		      sta	SpiderDrawPos
    273  f95b
    274  f95b							; Initialize sprite index and line buffer
    275  f95b		       a9 10		      lda	#SPIDER_SPRITE_SIZE
    276  f95d		       85 aa		      sta	SpiderIndex
    277  f95f		       a9 00		      lda	#0
    278  f961		       85 ac		      sta	SpiderLine
    279  f963
    280  f963		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f964					      include	"objects/line.asm"
      1  f964							;================
      2  f964							; Line (ball)
      3  f964							;================
      4  f964
      5  f964							; Constants
      6  f964
      7  f964		       00 08	   LINE_SIZE  =	8
      8  f964		       00 04	   LINE_VEL_X =	4
      9  f964		       00 04	   LINE_VEL_Y =	4
     10  f964
     11  f964		       00 08	   LINE_AUDIO_C =	8
     12  f964		       00 01	   LINE_AUDIO_F =	1
     13  f964		       00 04	   LINE_AUDIO_V =	4
     14  f964
     15  f964		       00 08	   LINE_SAMPLE_LEN =	8
     16  f964		       00 03	   LINE_SAMPLE_C =	3
     17  f964		       00 01	   LINE_SAMPLE_F =	1
     18  f964		       00 04	   LINE_SAMPLE_V =	4
     19  f964
     20  f964							; Initialization
     21  f964
     22  f964				   LineInit
     23  f964
     24  f964							; Initial Line Control
     25  f964		       a9 00		      lda	#0
     26  f966		       85 af		      sta	LineEnabled
     27  f968							;sta LinePos+0
     28  f968							;sta LinePos+1
     29  f968
     30  f968							; Initial direction
     31  f968							;lda #0
     32  f968							;sta LineVelocity+0
     33  f968							;lda #LINE_VEL_Y
     34  f968							;sta LineVelocity+1
     35  f968
     36  f968							; Disable line at start
     37  f968							;lda #-1
     38  f968							;sta LineDrawPos+0
     39  f968							;sta LineDrawPos+1
     40  f968
     41  f968		       60		      rts
     42  f969
     43  f969							; Frame Update
     44  f969
     45  f969				   LineUpdate
     46  f969		       20 73 f9 	      jsr	LineControl
     47  f96c		       20 3b fa 	      jsr	LineObject
     48  f96f		       20 66 fa 	      jsr	LineCollision
     49  f972		       60		      rts
     50  f973
     51  f973				   LineControl
     52  f973
     53  f973							; Check if Fire Button on controller is pressed (0 or 1)
     54  f973
     55  f973		       a2 00		      ldx	#0
     56  f975		       24 93		      bit	GameType
     57  f977		       70 02		      bvs	.line_control_check
     58  f979		       a2 01		      ldx	#1
     59  f97b
     60  f97b				   .line_control_check
     61  f97b		       b5 0c		      lda	INPT4,x
     62  f97d		       30 1c		      bmi	.line_control_skip
     63  f97f
     64  f97f		       24 af		      bit	LineEnabled
     65  f981		       30 18		      bmi	.line_control_skip
     66  f983
     67  f983		       24 93		      bit	GameType
     68  f985		       30 05		      bmi	.line_control_check_ctrl_1
     69  f987
     70  f987				   .line_control_check_ctrl_0
     71  f987		       a5 a8		      lda	SpiderCtrl
     72  f989		       4c 97 f9 	      jmp	.line_control_check_ctrl
     73  f98c
     74  f98c				   .line_control_check_ctrl_1
     75  f98c		       ad 80 02 	      lda	SWCHA
     76  f98f		       49 ff		      eor	#$ff	; invert bits
     77  f991					      REPEAT	4
     78  f991		       0a		      asl
     77  f991					      REPEND
     78  f992		       0a		      asl
     77  f992					      REPEND
     78  f993		       0a		      asl
     77  f993					      REPEND
     78  f994		       0a		      asl
     79  f995					      REPEND
     80  f995		       29 f0		      and	#%11110000
     81  f997
     82  f997				   .line_control_check_ctrl
     83  f997		       85 83		      sta	Temp+3
     84  f999		       d0 01		      bne	.line_control_fire
     85  f99b
     86  f99b				   .line_control_skip
     87  f99b		       60		      rts
     88  f99c
     89  f99c				   .line_control_fire
     90  f99c		       20 aa fa 	      jsr	LineEnable
     91  f99f
     92  f99f				   .line_control_x
     93  f99f		       a9 c0		      lda	#%11000000
     94  f9a1		       24 83		      bit	Temp+3
     95  f9a3		       f0 0c		      beq	.line_control_x_none
     96  f9a5				   .line_control_x_right
     97  f9a5		       10 05		      bpl	.line_control_x_left
     98  f9a7		       a9 04		      lda	#LINE_VEL_X
     99  f9a9		       4c b3 f9 	      jmp	.line_control_x_store
    100  f9ac				   .line_control_x_left
    101  f9ac		       a9 fc		      lda	#-LINE_VEL_X
    102  f9ae		       4c b3 f9 	      jmp	.line_control_x_store
    103  f9b1				   .line_control_x_none
    104  f9b1		       a9 00		      lda	#0
    105  f9b3				   .line_control_x_store
    106  f9b3		       85 b2		      sta	LineVelocity
    107  f9b5
    108  f9b5				   .line_control_y
    109  f9b5		       a5 83		      lda	Temp+3
    110  f9b7		       29 30		      and	#%00110000
    111  f9b9		       f0 0e		      beq	.line_control_y_none
    112  f9bb				   .line_control_y_down
    113  f9bb		       c9 20		      cmp	#%00100000
    114  f9bd		       d0 05		      bne	.line_control_y_up
    115  f9bf		       a9 fc		      lda	#-LINE_VEL_Y
    116  f9c1		       4c cb f9 	      jmp	.line_control_y_store
    117  f9c4				   .line_control_y_up
    118  f9c4		       a9 04		      lda	#LINE_VEL_Y
    119  f9c6		       4c cb f9 	      jmp	.line_control_y_store
    120  f9c9				   .line_control_y_none
    121  f9c9		       a9 00		      lda	#0
    122  f9cb				   .line_control_y_store
    123  f9cb		       85 b3		      sta	LineVelocity+1
    124  f9cd
    125  f9cd				   .line_control_position
    126  f9cd
    127  f9cd		       a2 00		      ldx	#0	; offsetX
    128  f9cf		       a0 00		      ldy	#0	; offsetY
    129  f9d1
    130  f9d1		       a5 83		      lda	Temp+3
    131  f9d3
    132  f9d3				   .line_control_position_left
    133  f9d3		       c9 40		      cmp	#%01000000
    134  f9d5		       d0 07		      bne	.line_control_position_right
    135  f9d7
    136  f9d7		       a2 00		      ldx	#0
    137  f9d9		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    138  f9db		       4c 26 fa 	      jmp	.line_control_position_store
    139  f9de
    140  f9de				   .line_control_position_right
    141  f9de		       c9 80		      cmp	#%10000000
    142  f9e0		       d0 07		      bne	.line_control_position_top
    143  f9e2
    144  f9e2		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    145  f9e4		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    146  f9e6		       4c 26 fa 	      jmp	.line_control_position_store
    147  f9e9
    148  f9e9				   .line_control_position_top
    149  f9e9		       c9 10		      cmp	#%00010000
    150  f9eb		       d0 07		      bne	.line_control_position_bottom
    151  f9ed
    152  f9ed		       a2 08		      ldx	#SPIDER_SIZE/2
    153  f9ef		       a0 10		      ldy	#SPIDER_SIZE
    154  f9f1		       4c 26 fa 	      jmp	.line_control_position_store
    155  f9f4
    156  f9f4				   .line_control_position_bottom
    157  f9f4		       c9 20		      cmp	#%00100000
    158  f9f6		       d0 05		      bne	.line_control_position_top_right
    159  f9f8
    160  f9f8		       a2 08		      ldx	#SPIDER_SIZE/2
    161  f9fa		       4c 26 fa 	      jmp	.line_control_position_store
    162  f9fd
    163  f9fd				   .line_control_position_top_right
    164  f9fd		       c9 90		      cmp	#%10010000
    165  f9ff		       d0 07		      bne	.line_control_position_bottom_right
    166  fa01
    167  fa01		       a2 10		      ldx	#SPIDER_SIZE
    168  fa03		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    169  fa05		       4c 26 fa 	      jmp	.line_control_position_store
    170  fa08
    171  fa08				   .line_control_position_bottom_right
    172  fa08		       c9 a0		      cmp	#%10100000
    173  fa0a		       d0 07		      bne	.line_control_position_bottom_left
    174  fa0c
    175  fa0c		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    176  fa0e		       a0 00		      ldy	#0
    177  fa10		       4c 26 fa 	      jmp	.line_control_position_store
    178  fa13
    179  fa13				   .line_control_position_bottom_left
    180  fa13		       c9 60		      cmp	#%01100000
    181  fa15		       d0 07		      bne	.line_control_position_top_left
    182  fa17
    183  fa17							; No Offset
    184  fa17		       a2 04		      ldx	#LINE_SIZE/2
    185  fa19		       a0 04		      ldy	#LINE_SIZE/2
    186  fa1b		       4c 26 fa 	      jmp	.line_control_position_store
    187  fa1e
    188  fa1e				   .line_control_position_top_left
    189  fa1e		       c9 50		      cmp	#%01010000
    190  fa20		       d0 04		      bne	.line_control_position_store
    191  fa22
    192  fa22		       a2 00		      ldx	#0
    193  fa24		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    194  fa26
    195  fa26				   .line_control_position_store
    196  fa26
    197  fa26							; Apply offsetX to playerX
    198  fa26		       a5 a6		      lda	SpiderPos
    199  fa28		       86 80		      stx	Temp
    200  fa2a		       18		      clc
    201  fa2b		       65 80		      adc	Temp
    202  fa2d		       aa		      tax
    203  fa2e
    204  fa2e							; Apply offsetY to playerY
    205  fa2e		       a5 a7		      lda	SpiderPos+1
    206  fa30		       84 80		      sty	Temp
    207  fa32		       18		      clc
    208  fa33		       65 80		      adc	Temp
    209  fa35		       a8		      tay
    210  fa36
    211  fa36		       86 b0		      stx	LinePos
    212  fa38		       84 b1		      sty	LinePos+1
    213  fa3a
    214  fa3a				   .line_control_return
    215  fa3a		       60		      rts
    216  fa3b
    217  fa3b				   LineObject
    218  fa3b
    219  fa3b							; Check if line is enabled
    220  fa3b		       24 af		      bit	LineEnabled
    221  fa3d		       10 26		      bpl	.line_object_return
    222  fa3f
    223  fa3f							; Load position
    224  fa3f		       a6 b0		      ldx	LinePos
    225  fa41		       a4 b1		      ldy	LinePos+1
    226  fa43
    227  fa43				   .line_object_boundary
    228  fa43				   .line_object_boundary_left
    229  fa43		       e0 04		      cpx	#LINE_VEL_X
    230  fa45		       90 1b		      bcc	.line_object_disable
    231  fa47				   .line_object_boundary_right
    232  fa47		       e0 9b		      cpx	#160-LINE_VEL_X-1
    233  fa49		       b0 17		      bcs	.line_object_disable
    234  fa4b				   .line_object_boundary_bottom
    235  fa4b		       c0 04		      cpy	#LINE_VEL_Y
    236  fa4d		       90 13		      bcc	.line_object_disable
    237  fa4f				   .line_object_boundary_top
    238  fa4f		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    239  fa51		       b0 0f		      bcs	.line_object_disable
    240  fa53
    241  fa53				   .line_object_velocity
    242  fa53
    243  fa53							; Apply Velocity
    244  fa53		       8a		      txa
    245  fa54		       18		      clc
    246  fa55		       65 b2		      adc	LineVelocity
    247  fa57		       85 b0		      sta	LinePos
    248  fa59
    249  fa59		       98		      tya
    250  fa5a		       18		      clc
    251  fa5b		       65 b3		      adc	LineVelocity+1
    252  fa5d		       85 b1		      sta	LinePos+1
    253  fa5f
    254  fa5f		       4c 65 fa 	      jmp	.line_object_return
    255  fa62
    256  fa62				   .line_object_disable
    257  fa62		       20 b6 fa 	      jsr	LineDisable
    258  fa65
    259  fa65				   .line_object_return
    260  fa65		       60		      rts
    261  fa66
    262  fa66				   LineCollision
    263  fa66
    264  fa66		       a9 78		      lda	#BUG_STUN_LENGTH
    265  fa68
    266  fa68				   .line_collision_m0
    267  fa68		       24 04		      bit	CXM0FB
    268  fa6a		       50 08		      bvc	.line_collision_m1
    269  fa6c
    270  fa6c							; Set stun timer
    271  fa6c		       85 b7		      sta	BugStunned+0
    272  fa6e
    273  fa6e							; Disable line
    274  fa6e		       20 b6 fa 	      jsr	LineDisable
    275  fa71		       4c 7d fa 	      jmp	.line_collision_sample
    276  fa74
    277  fa74				   .line_collision_m1
    278  fa74		       24 05		      bit	CXM1FB
    279  fa76		       50 08		      bvc	.line_collision_return
    280  fa78
    281  fa78							; Set stun timer
    282  fa78		       85 b8		      sta	BugStunned+1
    283  fa7a
    284  fa7a							; Disable line
    285  fa7a		       20 b6 fa 	      jsr	LineDisable
    286  fa7d
    287  fa7d				   .line_collision_sample
    288  fa7d		       20 d4 fa 	      jsr	LineSample
    289  fa80
    290  fa80				   .line_collision_return
    291  fa80		       60		      rts
    292  fa81
    293  fa81				   LinePosition
    294  fa81
    295  fa81							; Set Line Position
    296  fa81		       a2 04		      ldx	#4	; Object (ball)
    297  fa83		       a5 b0		      lda	LinePos	; X Position
    298  fa85		       20 00 f0 	      jsr	PosObject
    299  fa88
    300  fa88		       60		      rts
    301  fa89
    302  fa89							; Scanline Draw
    303  fa89
    304  fa89				   LineDrawStart
    305  fa89
    306  fa89		       24 af		      bit	LineEnabled
    307  fa8b		       30 07		      bmi	.line_draw_start
    308  fa8d
    309  fa8d		       a9 ff		      lda	#-1
    310  fa8f		       85 b4		      sta	LineDrawPos+0
    311  fa91		       85 b5		      sta	LineDrawPos+1
    312  fa93		       60		      rts
    313  fa94
    314  fa94				   .line_draw_start
    315  fa94							; Determine if we need to use vertical delay (oven line)
    316  fa94		       a5 b1		      lda	LinePos+1
    317  fa96		       4a		      lsr
    318  fa97		       90 05		      bcc	.line_draw_start_nodelay
    319  fa99
    320  fa99		       a0 01		      ldy	#1
    321  fa9b		       4c a0 fa 	      jmp	.line_draw_start_set_delay
    322  fa9e
    323  fa9e				   .line_draw_start_nodelay
    324  fa9e		       a0 00		      ldy	#0
    325  faa0
    326  faa0				   .line_draw_start_set_delay
    327  faa0		       84 27		      sty	VDELBL
    328  faa2
    329  faa2				   .line_draw_start_pos
    330  faa2							; Calculate starting position
    331  faa2		       18		      clc
    332  faa3		       85 b4		      sta	LineDrawPos+0
    333  faa5		       69 04		      adc	#LINE_SIZE/2
    334  faa7		       85 b5		      sta	LineDrawPos+1
    335  faa9
    336  faa9		       60		      rts
    337  faaa
    338  faaa				   LineEnable
    339  faaa		       a9 80		      lda	#%10000000
    340  faac		       85 af		      sta	LineEnabled
    341  faae
    342  faae		       a5 92		      lda	SampleStep
    343  fab0		       d0 03		      bne	.line_enable_return
    344  fab2
    345  fab2		       20 c2 fa 	      jsr	LineAudioPlay
    346  fab5
    347  fab5				   .line_enable_return
    348  fab5		       60		      rts
    349  fab6
    350  fab6				   LineDisable
    351  fab6		       a9 00		      lda	#0
    352  fab8		       85 af		      sta	LineEnabled
    353  faba
    354  faba		       a5 92		      lda	SampleStep
    355  fabc		       d0 03		      bne	.line_disable_return
    356  fabe
    357  fabe		       20 cf fa 	      jsr	LineAudioMute
    358  fac1
    359  fac1				   .line_disable_return
    360  fac1		       60		      rts
    361  fac2
    362  fac2				   LineAudioPlay
    363  fac2		       a9 08		      lda	#LINE_AUDIO_C
    364  fac4		       85 16		      sta	AUDC1
    365  fac6		       a9 01		      lda	#LINE_AUDIO_F
    366  fac8		       85 18		      sta	AUDF1
    367  faca		       a9 04		      lda	#LINE_AUDIO_V
    368  facc		       85 1a		      sta	AUDV1
    369  face		       60		      rts
    370  facf
    371  facf				   LineAudioMute
    372  facf		       a9 00		      lda	#0
    373  fad1		       85 1a		      sta	AUDV1
    374  fad3							;sta AUDF1
    375  fad3							;sta AUDC1
    376  fad3		       60		      rts
    377  fad4
    378  fad4				   LineSample
    379  fad4		       a9 08		      lda	#LINE_SAMPLE_LEN
    380  fad6		       85 92		      sta	SampleStep
    381  fad8		       a9 03		      lda	#LINE_SAMPLE_C
    382  fada		       85 16		      sta	AUDC1
    383  fadc		       a9 01		      lda	#LINE_SAMPLE_F
    384  fade		       85 18		      sta	AUDF1
    385  fae0		       a9 04		      lda	#LINE_SAMPLE_V
    386  fae2		       85 1a		      sta	AUDV1
    387  fae4		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  fae5					      include	"objects/bug.asm"
      1  fae5							;======================
      2  fae5							; Bugs (missiles 0 & 1)
      3  fae5							;======================
      4  fae5
      5  fae5							; Constants
      6  fae5
      7  fae5		       00 08	   BUG_SIZE   =	8
      8  fae5		       00 18	   BUG_BOUNDARY =	#(BUG_SIZE*3)
      9  fae5		       00 78	   BUG_STUN_LENGTH =	120
     10  fae5		       00 04	   BUG_POINTS =	4
     11  fae5
     12  fae5		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     13  fae5		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     14  fae5		       00 38	   BUG_STUN_COLOR =	#$38
     15  fae5		       00 08	   BUG_STUN_BW_COLOR =	#$08
     16  fae5
     17  fae5		       00 1e	   BUG_SAMPLE_LEN =	30
     18  fae5		       00 03	   BUG_SAMPLE_C =	3
     19  fae5		       00 14	   BUG_SAMPLE_F =	20
     20  fae5		       00 04	   BUG_SAMPLE_V =	4
     21  fae5
     22  fae5		       00 01	   BUG_COL_SAMPLE_LEN =	1
     23  fae5		       00 08	   BUG_COL_SAMPLE_C =	8
     24  fae5		       00 08	   BUG_COL_SAMPLE_F =	8
     25  fae5		       00 03	   BUG_COL_SAMPLE_V =	3
     26  fae5
     27  fae5							; Initialization
     28  fae5
     29  fae5				   BugInit
     30  fae5
     31  fae5							; Initialize Bugs
     32  fae5		       a2 01		      ldx	#1
     33  fae7
     34  fae7				   .bug_init_loop
     35  fae7		       20 ee fa 	      jsr	BugReset
     36  faea
     37  faea		       ca		      dex
     38  faeb		       10 fa		      bpl	.bug_init_loop
     39  faed
     40  faed		       60		      rts
     41  faee
     42  faee				   BugReset		; x = bug (0 or 1)
     43  faee
     44  faee							; Set random position
     45  faee		       20 13 f0 	      jsr	Random
     46  faf1
     47  faf1		       a5 84		      lda	Rand8
     48  faf3		       29 7f		      and	#$7f
     49  faf5		       95 b9		      sta	BugPosX,x
     50  faf7
     51  faf7		       a5 85		      lda	Rand16
     52  faf9		       29 7f		      and	#$7f
     53  fafb		       95 bb		      sta	BugPosY,x
     54  fafd
     55  fafd							; Set as active
     56  fafd		       a9 00		      lda	#0
     57  faff		       95 b7		      sta	BugStunned,x
     58  fb01
     59  fb01		       60		      rts
     60  fb02
     61  fb02							; Frame Update
     62  fb02
     63  fb02				   BugUpdate
     64  fb02
     65  fb02		       a2 01		      ldx	#1
     66  fb04				   .bug_update_loop
     67  fb04		       86 80		      stx	Temp+0
     68  fb06
     69  fb06		       b5 b7		      lda	BugStunned,x
     70  fb08		       f0 08		      beq	.bug_update_active
     71  fb0a
     72  fb0a				   .bug_update_stunned
     73  fb0a		       d6 b7		      dec	BugStunned,x
     74  fb0c		       20 95 fb 	      jsr	BugStunCollision
     75  fb0f		       4c 18 fb 	      jmp	.bug_update_next
     76  fb12
     77  fb12				   .bug_update_active
     78  fb12		       20 1e fb 	      jsr	BugMovement
     79  fb15		       20 7d fb 	      jsr	BugCollision
     80  fb18
     81  fb18				   .bug_update_next
     82  fb18		       a6 80		      ldx	Temp+0
     83  fb1a		       ca		      dex
     84  fb1b		       10 e7		      bpl	.bug_update_loop
     85  fb1d
     86  fb1d		       60		      rts
     87  fb1e
     88  fb1e				   BugMovement
     89  fb1e
     90  fb1e				   .bug_movement_random
     91  fb1e		       20 13 f0 	      jsr	Random
     92  fb21		       29 03		      and	#%00000011
     93  fb23		       85 81		      sta	Temp+1
     94  fb25
     95  fb25				   .bug_movement_load
     96  fb25		       a6 80		      ldx	Temp+0
     97  fb27
     98  fb27				   .bug_movement_x
     99  fb27		       a4 b6		      ldy	BugSpeed
    100  fb29
    101  fb29							; Alter X Position
    102  fb29		       a5 81		      lda	Temp+1
    103  fb2b		       29 01		      and	#%00000001
    104  fb2d
    105  fb2d				   .bug_movement_x_check
    106  fb2d		       c9 01		      cmp	#1
    107  fb2f		       d0 08		      bne	.bug_movement_x_right
    108  fb31
    109  fb31				   .bug_movement_x_left
    110  fb31		       d6 b9		      dec	BugPosX,x
    111  fb33		       88		      dey
    112  fb34		       d0 fb		      bne	.bug_movement_x_left
    113  fb36
    114  fb36		       4c 3e fb 	      jmp	.bug_movement_y
    115  fb39
    116  fb39				   .bug_movement_x_right
    117  fb39		       f6 b9		      inc	BugPosX,x
    118  fb3b		       88		      dey
    119  fb3c		       d0 fb		      bne	.bug_movement_x_right
    120  fb3e
    121  fb3e				   .bug_movement_y
    122  fb3e		       a4 b6		      ldy	BugSpeed
    123  fb40
    124  fb40							; Alter Y Position
    125  fb40		       a5 81		      lda	Temp+1
    126  fb42		       29 02		      and	#%00000010
    127  fb44		       4a		      lsr
    128  fb45
    129  fb45				   .bug_movement_y_check
    130  fb45		       c9 01		      cmp	#1
    131  fb47		       d0 08		      bne	.bug_movement_y_down
    132  fb49
    133  fb49				   .bug_movement_y_up
    134  fb49		       f6 bb		      inc	BugPosY,x
    135  fb4b		       88		      dey
    136  fb4c		       d0 fb		      bne	.bug_movement_y_up
    137  fb4e
    138  fb4e		       4c 56 fb 	      jmp	.bug_movement_boundary
    139  fb51
    140  fb51				   .bug_movement_y_down
    141  fb51		       d6 bb		      dec	BugPosY,x
    142  fb53		       88		      dey
    143  fb54		       d0 fb		      bne	.bug_movement_y_down
    144  fb56
    145  fb56				   .bug_movement_boundary
    146  fb56		       b5 b9		      lda	BugPosX,x
    147  fb58		       b4 bb		      ldy	BugPosY,x
    148  fb5a
    149  fb5a				   .bug_movement_boundary_left
    150  fb5a		       c9 18		      cmp	#BUG_BOUNDARY
    151  fb5c		       b0 05		      bcs	.bug_movement_boundary_right
    152  fb5e		       a9 18		      lda	#BUG_BOUNDARY
    153  fb60		       4c 69 fb 	      jmp	.bug_movement_boundary_top
    154  fb63
    155  fb63				   .bug_movement_boundary_right
    156  fb63		       c9 88		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    157  fb65		       90 02		      bcc	.bug_movement_boundary_top
    158  fb67		       a9 88		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    159  fb69
    160  fb69				   .bug_movement_boundary_top
    161  fb69		       c0 18		      cpy	#BUG_BOUNDARY
    162  fb6b		       b0 05		      bcs	.bug_movement_boundary_bottom
    163  fb6d		       a0 18		      ldy	#BUG_BOUNDARY
    164  fb6f		       4c 78 fb 	      jmp	.bug_movement_store
    165  fb72
    166  fb72				   .bug_movement_boundary_bottom
    167  fb72		       c0 95		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    168  fb74		       90 02		      bcc	.bug_movement_store
    169  fb76		       a0 95		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    170  fb78
    171  fb78				   .bug_movement_store
    172  fb78		       95 b9		      sta	BugPosX,x
    173  fb7a		       94 bb		      sty	BugPosY,x
    174  fb7c
    175  fb7c				   .bug_movement_return
    176  fb7c		       60		      rts
    177  fb7d
    178  fb7d				   BugCollision
    179  fb7d
    180  fb7d		       e0 01		      cpx	#1
    181  fb7f		       f0 05		      beq	.bug_collision_m1
    182  fb81
    183  fb81				   .bug_collision_m0
    184  fb81							; Collision for M0 (V set)
    185  fb81		       24 00		      bit	CXM0P
    186  fb83		       70 06		      bvs	.bug_collision_active
    187  fb85		       60		      rts
    188  fb86
    189  fb86				   .bug_collision_m1
    190  fb86							; Collision for M1 (N set)
    191  fb86		       24 01		      bit	CXM1P
    192  fb88		       30 01		      bmi	.bug_collision_active
    193  fb8a		       60		      rts
    194  fb8b
    195  fb8b				   .bug_collision_active
    196  fb8b
    197  fb8b							; Reduce players score
    198  fb8b		       a5 95		      lda	ScoreValue
    199  fb8d		       f0 02		      beq	.bug_collision_score_skip
    200  fb8f		       c6 95		      dec	ScoreValue
    201  fb91				   .bug_collision_score_skip
    202  fb91
    203  fb91							; Play sound
    204  fb91		       20 e3 fb 	      jsr	BugColSample
    205  fb94
    206  fb94		       60		      rts
    207  fb95
    208  fb95				   BugStunCollision
    209  fb95
    210  fb95		       e0 01		      cpx	#1
    211  fb97		       f0 05		      beq	.bug_stun_collision_m1
    212  fb99
    213  fb99				   .bug_stun_collision_m0
    214  fb99							; Collision for M0 (V set)
    215  fb99		       24 00		      bit	CXM0P
    216  fb9b		       70 06		      bvs	.bug_stun_collision_active
    217  fb9d		       60		      rts
    218  fb9e
    219  fb9e				   .bug_stun_collision_m1
    220  fb9e							; Collision for M1 (N set)
    221  fb9e		       24 01		      bit	CXM1P
    222  fba0		       30 01		      bmi	.bug_stun_collision_active
    223  fba2		       60		      rts
    224  fba3
    225  fba3				   .bug_stun_collision_active
    226  fba3							; Add points to score
    227  fba3		       18		      clc
    228  fba4		       a5 96		      lda	ScoreValue+1
    229  fba6		       69 04		      adc	#BUG_POINTS
    230  fba8		       85 96		      sta	ScoreValue+1
    231  fbaa
    232  fbaa							; Reset bug
    233  fbaa		       20 ee fa 	      jsr	BugReset
    234  fbad
    235  fbad							; Play sample
    236  fbad		       20 d2 fb 	      jsr	BugSample
    237  fbb0
    238  fbb0		       60		      rts
    239  fbb1
    240  fbb1							; Horizontal Positioning
    241  fbb1
    242  fbb1				   BugPosition
    243  fbb1
    244  fbb1		       a2 02		      ldx	#2
    245  fbb3		       a5 b9		      lda	BugPosX+0
    246  fbb5		       20 00 f0 	      jsr	PosObject
    247  fbb8
    248  fbb8		       a2 03		      ldx	#3
    249  fbba		       a5 ba		      lda	BugPosX+1
    250  fbbc		       20 00 f0 	      jsr	PosObject
    251  fbbf
    252  fbbf		       60		      rts
    253  fbc0
    254  fbc0							; Scanline Draw
    255  fbc0
    256  fbc0				   BugDrawStart
    257  fbc0
    258  fbc0		       a0 01		      ldy	#1
    259  fbc2				   .bug_draw_start_loop
    260  fbc2
    261  fbc2							; Set missile 0 & 1 to be 8 clock size
    262  fbc2							;lda NuSiz0,y
    263  fbc2							;ora #%00110000
    264  fbc2							;sta NuSiz0,y
    265  fbc2							;sta NUSIZ0,y
    266  fbc2
    267  fbc2							; Setup half scanline positions
    268  fbc2		       b9 bb 00 	      lda	BugPosY,y
    269  fbc5		       4a		      lsr
    270  fbc6		       99 bd 00 	      sta	BugDrawPosBottom,y
    271  fbc9
    272  fbc9		       69 04		      adc	#BUG_SIZE/2
    273  fbcb		       99 bf 00 	      sta	BugDrawPosTop,y
    274  fbce
    275  fbce		       88		      dey
    276  fbcf		       10 f1		      bpl	.bug_draw_start_loop
    277  fbd1
    278  fbd1		       60		      rts
    279  fbd2
    280  fbd2				   BugSample
    281  fbd2		       a9 1e		      lda	#BUG_SAMPLE_LEN
    282  fbd4		       85 92		      sta	SampleStep
    283  fbd6		       a9 03		      lda	#BUG_SAMPLE_C
    284  fbd8		       85 16		      sta	AUDC1
    285  fbda		       a9 14		      lda	#BUG_SAMPLE_F
    286  fbdc		       85 18		      sta	AUDF1
    287  fbde		       a9 04		      lda	#BUG_SAMPLE_V
    288  fbe0		       85 1a		      sta	AUDV1
    289  fbe2		       60		      rts
    290  fbe3
    291  fbe3				   BugColSample
    292  fbe3		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    293  fbe5		       85 92		      sta	SampleStep
    294  fbe7		       a9 08		      lda	#BUG_COL_SAMPLE_C
    295  fbe9		       85 16		      sta	AUDC1
    296  fbeb		       a9 08		      lda	#BUG_COL_SAMPLE_F
    297  fbed		       85 18		      sta	AUDF1
    298  fbef		       a9 03		      lda	#BUG_COL_SAMPLE_V
    299  fbf1		       85 1a		      sta	AUDV1
    300  fbf3		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fbf4					      include	"objects/swatter.asm"
      1  fbf4							;==================
      2  fbf4							; Swatter (player1)
      3  fbf4							;==================
      4  fbf4
      5  fbf4							; Constants
      6  fbf4
      7  fbf4		       00 30	   SWATTER_COLOR =	#$30
      8  fbf4		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fbf4		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fbf4		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fbf4
     12  fbf4		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fbf4		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fbf4
     15  fbf4		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fbf4		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fbf4
     18  fbf4		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fbf4		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fbf4		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fbf4
     22  fbf4		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fbf4		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fbf4		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fbf4		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fbf4		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fbf4
     28  fbf4		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fbf4		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fbf4		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fbf4		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fbf4
     33  fbf4		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fbf4		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fbf4		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fbf4		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fbf4
     38  fbf4							; Initialization
     39  fbf4
     40  fbf4				   SwatterInit
     41  fbf4
     42  fbf4		       20 cc fc 	      jsr	SwatterReset
     43  fbf7
     44  fbf7		       60		      rts
     45  fbf8
     46  fbf8							; Frame Update
     47  fbf8
     48  fbf8				   SwatterUpdate
     49  fbf8
     50  fbf8							; Check b/w
     51  fbf8		       ad 82 02 	      lda	SWCHB
     52  fbfb		       29 08		      and	#%00001000
     53  fbfd		       f0 10		      beq	.swatter_update_bw
     54  fbff
     55  fbff				   .swatter_update_color
     56  fbff		       a5 c3		      lda	SwatterState
     57  fc01		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     58  fc03		       d0 05		      bne	.swatter_update_color_hold
     59  fc05				   .swatter_update_color_active
     60  fc05		       a9 30		      lda	#SWATTER_COLOR
     61  fc07		       4c 1c fc 	      jmp	.swatter_update_color_set
     62  fc0a				   .swatter_update_color_hold
     63  fc0a		       a9 36		      lda	#SWATTER_HOLD_COLOR
     64  fc0c		       4c 1c fc 	      jmp	.swatter_update_color_set
     65  fc0f
     66  fc0f				   .swatter_update_bw
     67  fc0f		       a5 c3		      lda	SwatterState
     68  fc11		       c9 80		      cmp	#SWATTER_STATE_HOLD
     69  fc13		       d0 05		      bne	.swatter_update_bw_active
     70  fc15				   .swatter_update_bw_hold
     71  fc15		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     72  fc17		       4c 1c fc 	      jmp	.swatter_update_color_set
     73  fc1a				   .swatter_update_bw_active
     74  fc1a		       a9 0e		      lda	#SWATTER_BW_COLOR
     75  fc1c
     76  fc1c				   .swatter_update_color_set
     77  fc1c		       85 c4		      sta	SwatterColor
     78  fc1e
     79  fc1e				   .swatter_update_hold_sample
     80  fc1e		       a4 c3		      ldy	SwatterState
     81  fc20		       c0 80		      cpy	#SWATTER_STATE_HOLD
     82  fc22		       d0 0f		      bne	.swatter_update_state
     83  fc24
     84  fc24		       c6 cb		      dec	SwatterSampleCount
     85  fc26		       d0 0b		      bne	.swatter_update_state
     86  fc28
     87  fc28		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     88  fc2a		       85 cb		      sta	SwatterSampleCount
     89  fc2c
     90  fc2c		       c6 cc		      dec	SwatterSampleF
     91  fc2e		       a4 cc		      ldy	SwatterSampleF
     92  fc30		       20 ec fc 	      jsr	SwatterHoldSample
     93  fc33
     94  fc33				   .swatter_update_state
     95  fc33		       a6 8e		      ldx	FrameTimer+1
     96  fc35		       d0 2d		      bne	.swatter_update_collision
     97  fc37
     98  fc37		       a4 c3		      ldy	SwatterState
     99  fc39		       c0 00		      cpy	#SWATTER_STATE_WAIT
    100  fc3b		       f0 0a		      beq	.swatter_update_state_wait
    101  fc3d
    102  fc3d		       c0 80		      cpy	#SWATTER_STATE_HOLD
    103  fc3f		       f0 18		      beq	.swatter_update_state_hold
    104  fc41
    105  fc41							; Else we're at the end of the active state
    106  fc41		       20 cc fc 	      jsr	SwatterReset
    107  fc44		       4c 73 fc 	      jmp	.swatter_update_return
    108  fc47
    109  fc47				   .swatter_update_state_wait
    110  fc47		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    111  fc49		       84 cc		      sty	SwatterSampleF
    112  fc4b		       20 ec fc 	      jsr	SwatterHoldSample
    113  fc4e
    114  fc4e		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    115  fc50		       85 cb		      sta	SwatterSampleCount
    116  fc52
    117  fc52		       a9 80		      lda	#SWATTER_STATE_HOLD
    118  fc54		       a6 c6		      ldx	SwatterHoldTime
    119  fc56		       4c 60 fc 	      jmp	.swatter_update_state_set
    120  fc59
    121  fc59				   .swatter_update_state_hold
    122  fc59		       20 fb fc 	      jsr	SwatterActiveSample
    123  fc5c
    124  fc5c		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    125  fc5e		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    126  fc60
    127  fc60				   .swatter_update_state_set
    128  fc60		       85 c3		      sta	SwatterState
    129  fc62		       86 8e		      stx	FrameTimer+1
    130  fc64
    131  fc64				   .swatter_update_collision
    132  fc64							; Check 1 frame after active
    133  fc64		       a5 c3		      lda	SwatterState
    134  fc66		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    135  fc68		       d0 09		      bne	.swatter_update_return
    136  fc6a		       a6 8e		      ldx	FrameTimer+1
    137  fc6c		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    138  fc6e		       d0 03		      bne	.swatter_update_return
    139  fc70
    140  fc70		       20 74 fc 	      jsr	SwatterCollision
    141  fc73
    142  fc73				   .swatter_update_return
    143  fc73		       60		      rts
    144  fc74
    145  fc74				   SwatterCollision
    146  fc74		       24 00		      bit	CXM0P
    147  fc76		       30 09		      bmi	.swatter_collision_m0
    148  fc78
    149  fc78		       24 01		      bit	CXM1P
    150  fc7a		       70 0a		      bvs	.swatter_collision_m1
    151  fc7c
    152  fc7c		       24 07		      bit	CXPPMM
    153  fc7e		       30 0e		      bmi	.swatter_collision_p0
    154  fc80
    155  fc80		       60		      rts
    156  fc81
    157  fc81				   .swatter_collision_m0
    158  fc81		       a2 00		      ldx	#0
    159  fc83		       4c 88 fc 	      jmp	.swatter_collision_bug_reset
    160  fc86
    161  fc86				   .swatter_collision_m1
    162  fc86		       a2 01		      ldx	#1
    163  fc88
    164  fc88				   .swatter_collision_bug_reset
    165  fc88		       20 ee fa 	      jsr	BugReset
    166  fc8b		       4c 9e fc 	      jmp	.swatter_collision_active
    167  fc8e
    168  fc8e				   .swatter_collision_p0
    169  fc8e
    170  fc8e		       a5 95		      lda	ScoreValue
    171  fc90		       c5 c7		      cmp	SwatterHitDamage
    172  fc92		       90 06		      bcc	.swatter_collision_p0_zero
    173  fc94							;beq .swatter_collision_p0_zero
    174  fc94
    175  fc94		       18		      clc
    176  fc95		       e5 c7		      sbc	SwatterHitDamage
    177  fc97		       4c 9c fc 	      jmp	.swatter_collision_p0_set
    178  fc9a
    179  fc9a				   .swatter_collision_p0_zero
    180  fc9a		       a9 00		      lda	#0
    181  fc9c
    182  fc9c				   .swatter_collision_p0_set
    183  fc9c		       85 95		      sta	ScoreValue
    184  fc9e
    185  fc9e				   .swatter_collision_active
    186  fc9e		       20 0c fd 	      jsr	SwatterHitSample
    187  fca1
    188  fca1		       60		      rts
    189  fca2
    190  fca2				   SwatterPosition
    191  fca2
    192  fca2							; Set Position
    193  fca2		       a2 01		      ldx	#1	; Object (player1)
    194  fca4		       a5 c1		      lda	SwatterPos	; X Position
    195  fca6		       20 00 f0 	      jsr	PosObject
    196  fca9
    197  fca9		       60		      rts
    198  fcaa
    199  fcaa							; Scanline Draw
    200  fcaa
    201  fcaa				   SwatterDrawStart
    202  fcaa
    203  fcaa							; Hide swatter if wait state
    204  fcaa		       24 c3		      bit	SwatterState
    205  fcac		       30 09		      bmi	.swatter_draw_start
    206  fcae
    207  fcae		       a9 ff		      lda	#-1
    208  fcb0		       85 c8		      sta	SwatterIndex
    209  fcb2							;sta SwatterDrawPos
    210  fcb2		       a9 00		      lda	#0
    211  fcb4		       85 ca		      sta	SwatterLine
    212  fcb6
    213  fcb6		       60		      rts
    214  fcb7
    215  fcb7				   .swatter_draw_start
    216  fcb7
    217  fcb7							; Set sprite color
    218  fcb7		       a5 c4		      lda	SwatterColor
    219  fcb9		       85 07		      sta	COLUP1
    220  fcbb
    221  fcbb							; Note: Doesn't need vertical delay
    222  fcbb
    223  fcbb							; Calculate starting position
    224  fcbb		       a5 c2		      lda	SwatterPos+1	; Y Position
    225  fcbd		       4a		      lsr
    226  fcbe		       18		      clc
    227  fcbf		       69 14		      adc	#SWATTER_SPRITE_SIZE
    228  fcc1		       85 c9		      sta	SwatterDrawPos
    229  fcc3
    230  fcc3							; Initialize sprite index
    231  fcc3		       a9 13		      lda	#SWATTER_SPRITE_SIZE-1
    232  fcc5		       85 c8		      sta	SwatterIndex
    233  fcc7		       a9 00		      lda	#0
    234  fcc9		       85 ca		      sta	SwatterLine
    235  fccb
    236  fccb		       60		      rts
    237  fccc
    238  fccc				   SwatterReset
    239  fccc							; Initialize Swatter State
    240  fccc		       a9 00		      lda	#SWATTER_STATE_WAIT
    241  fcce		       85 c3		      sta	SwatterState
    242  fcd0
    243  fcd0							; Set Wait Timer
    244  fcd0		       20 13 f0 	      jsr	Random
    245  fcd3		       a5 84		      lda	Rand8
    246  fcd5		       29 3f		      and	#$3f
    247  fcd7		       18		      clc
    248  fcd8		       65 c5		      adc	SwatterWaitTime
    249  fcda		       85 8e		      sta	FrameTimer+1
    250  fcdc
    251  fcdc							; Set Random Position
    252  fcdc		       20 13 f0 	      jsr	Random
    253  fcdf		       a5 84		      lda	Rand8	; X Position
    254  fce1		       29 7f		      and	#$7f
    255  fce3		       85 c1		      sta	SwatterPos+0
    256  fce5		       a5 85		      lda	Rand16	; Y Position
    257  fce7		       29 7e		      and	#$7e	; Ensure that Y position is even
    258  fce9		       85 c2		      sta	SwatterPos+1
    259  fceb
    260  fceb		       60		      rts
    261  fcec
    262  fcec				   SwatterHoldSample
    263  fcec		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    264  fcee		       85 92		      sta	SampleStep
    265  fcf0		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    266  fcf2		       85 16		      sta	AUDC1
    267  fcf4		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    268  fcf6		       85 1a		      sta	AUDV1
    269  fcf8
    270  fcf8		       84 18		      sty	AUDF1	; Store value of y as frequency
    271  fcfa
    272  fcfa		       60		      rts
    273  fcfb
    274  fcfb				   SwatterActiveSample
    275  fcfb		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    276  fcfd		       85 92		      sta	SampleStep
    277  fcff		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    278  fd01		       85 16		      sta	AUDC1
    279  fd03		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    280  fd05		       85 18		      sta	AUDF1
    281  fd07		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    282  fd09		       85 1a		      sta	AUDV1
    283  fd0b		       60		      rts
    284  fd0c
    285  fd0c				   SwatterHitSample
    286  fd0c		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    287  fd0e		       85 92		      sta	SampleStep
    288  fd10		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    289  fd12		       85 16		      sta	AUDC1
    290  fd14		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    291  fd16		       85 18		      sta	AUDF1
    292  fd18		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    293  fd1a		       85 1a		      sta	AUDV1
    294  fd1c		       60		      rts
------- FILE game.asm
     22  fd1d
     23  fd1d							; Initialization
     24  fd1d
     25  fd1d				   GameInit
     26  fd1d
     27  fd1d							; Setup logic and kernel
      0  fd1d					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fd1d				   .POINTER   SET	VBlankPtr
      2  fd1d				   .ADDRESS   SET	GameVerticalBlank
      3  fd1d
      4  fd1d		       a9 5a		      LDA	#<.ADDRESS
      5  fd1f		       85 86		      STA	.POINTER
      6  fd21		       a9 fd		      LDA	#>.ADDRESS
      7  fd23		       85 87		      STA	.POINTER+1
      8  fd25
      0  fd25					      SET_POINTER	KernelPtr, GameKernel
      1  fd25				   .POINTER   SET	KernelPtr
      2  fd25				   .ADDRESS   SET	GameKernel
      3  fd25
      4  fd25		       a9 d4		      LDA	#<.ADDRESS
      5  fd27		       85 88		      STA	.POINTER
      6  fd29		       a9 fd		      LDA	#>.ADDRESS
      7  fd2b		       85 89		      STA	.POINTER+1
      8  fd2d
      0  fd2d					      SET_POINTER	OverScanPtr, GameOverScan
      1  fd2d				   .POINTER   SET	OverScanPtr
      2  fd2d				   .ADDRESS   SET	GameOverScan
      3  fd2d
      4  fd2d		       a9 84		      LDA	#<.ADDRESS
      5  fd2f		       85 8a		      STA	.POINTER
      6  fd31		       a9 fd		      LDA	#>.ADDRESS
      7  fd33		       85 8b		      STA	.POINTER+1
      8  fd35
     31  fd35
     32  fd35							; Mute Audio
     33  fd35		       a9 00		      lda	#0
     34  fd37							;    sta AUDC0
     35  fd37							;    sta AUDV0
     36  fd37							;    sta AUDF0
     37  fd37							;sta AUDC1
     38  fd37		       85 1a		      sta	AUDV1
     39  fd39							;sta AUDF1
     40  fd39		       85 92		      sta	SampleStep
     41  fd3b
     42  fd3b							; Load Audio Settings
     43  fd3b		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fd3d		       85 19		      sta	AUDV0
     45  fd3f
     46  fd3f							; Make it so that we play the first note immediately
     47  fd3f		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fd41		       85 91		      sta	AudioStep
     49  fd43		       a9 02		      lda	#2
     50  fd45		       85 8d		      sta	FrameTimer
     51  fd47
     52  fd47							; Reset NuSiz
     53  fd47							;    lda #0
     54  fd47							;    sta NuSiz0
     55  fd47							;    sta NUSIZ0
     56  fd47							;    sta NuSiz1
     57  fd47							;    sta NUSIZ1
     58  fd47
     59  fd47							; Initialize Objects
     60  fd47		       20 11 f6 	      jsr	LevelInit
     61  fd4a		       20 ca f6 	      jsr	ScoreInit
     62  fd4d		       20 51 f8 	      jsr	SpiderInit
     63  fd50		       20 64 f9 	      jsr	LineInit
     64  fd53		       20 e5 fa 	      jsr	BugInit
     65  fd56		       20 f4 fb 	      jsr	SwatterInit
     66  fd59
     67  fd59		       60		      rts
     68  fd5a
     69  fd5a				   GameVerticalBlank
     70  fd5a
     71  fd5a							; Refresh random values
     72  fd5a		       20 13 f0 	      jsr	Random
     73  fd5d
     74  fd5d							; Update Objects
     75  fd5d		       20 27 f6 	      jsr	LevelUpdate
     76  fd60		       20 66 f8 	      jsr	SpiderUpdate
     77  fd63		       20 69 f9 	      jsr	LineUpdate
     78  fd66		       20 02 fb 	      jsr	BugUpdate
     79  fd69		       20 f8 fb 	      jsr	SwatterUpdate
     80  fd6c		       20 d3 f6 	      jsr	ScoreUpdate
     81  fd6f
     82  fd6f							; Reset Collisions
     83  fd6f		       85 2c		      sta	CXCLR
     84  fd71
     85  fd71							; Clear horizontal movement
     86  fd71		       85 2b		      sta	HMCLR
     87  fd73
     88  fd73							; Update Positions
     89  fd73		       20 3c f9 	      jsr	SpiderPosition
     90  fd76		       20 81 fa 	      jsr	LinePosition
     91  fd79		       20 b1 fb 	      jsr	BugPosition
     92  fd7c		       20 a2 fc 	      jsr	SwatterPosition
     93  fd7f
     94  fd7f							; Set final x positions
     95  fd7f		       85 02		      sta	WSYNC
     96  fd81		       85 2a		      sta	HMOVE
     97  fd83
     98  fd83		       60		      rts
     99  fd84
    100  fd84				   GameOverScan
    101  fd84
    102  fd84							; Audio Routines
    103  fd84		       20 9c fd 	      jsr	GameAudio
    104  fd87		       20 8e fd 	      jsr	GameSample
    105  fd8a
    106  fd8a							; State Routines
    107  fd8a		       20 cc fd 	      jsr	GameDeath
    108  fd8d
    109  fd8d		       60		      rts
    110  fd8e
    111  fd8e				   GameSample
    112  fd8e
    113  fd8e		       a6 92		      ldx	SampleStep
    114  fd90		       f0 07		      beq	.game_sample_return
    115  fd92
    116  fd92		       ca		      dex
    117  fd93		       d0 04		      bne	.game_sample_return
    118  fd95
    119  fd95				   .game_sample_mute
    120  fd95		       a9 00		      lda	#0
    121  fd97		       85 1a		      sta	AUDV1
    122  fd99							;sta AUDF1
    123  fd99							;sta AUDC1
    124  fd99
    125  fd99				   .game_sample_return
    126  fd99		       86 92		      stx	SampleStep
    127  fd9b		       60		      rts
    128  fd9c
    129  fd9c				   GameAudio
    130  fd9c
    131  fd9c		       a6 8d		      ldx	FrameTimer
    132  fd9e		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    133  fda0		       f0 25		      beq	.game_audio_mute_note
    134  fda2		       e0 00		      cpx	#0
    135  fda4		       d0 25		      bne	.game_audio_return
    136  fda6
    137  fda6							; Reset Timer
    138  fda6		       a6 94		      ldx	GameAudioStep
    139  fda8		       86 8d		      stx	FrameTimer
    140  fdaa
    141  fdaa				   .game_audio_play
    142  fdaa
    143  fdaa							; Increment melody position
    144  fdaa		       a4 91		      ldy	AudioStep
    145  fdac		       c8		      iny
    146  fdad
    147  fdad		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    148  fdaf		       d0 02		      bne	.game_audio_play_note
    149  fdb1
    150  fdb1							; Loop our audio step
    151  fdb1		       a0 00		      ldy	#0
    152  fdb3
    153  fdb3				   .game_audio_play_note
    154  fdb3
    155  fdb3							; Save current position
    156  fdb3		       84 91		      sty	AudioStep
    157  fdb5
    158  fdb5							; Melody Line
    159  fdb5		       b9 d3 fe 	      lda	GameAudio0,y
    160  fdb8		       c9 ff		      cmp	#$FF
    161  fdba		       f0 0b		      beq	.game_audio_mute_note
    162  fdbc		       85 17		      sta	AUDF0
    163  fdbe		       a9 06		      lda	#GAME_AUDIO_TONE
    164  fdc0		       85 15		      sta	AUDC0
    165  fdc2		       a9 02		      lda	#GAME_AUDIO_VOLUME
    166  fdc4		       85 19		      sta	AUDV0
    167  fdc6
    168  fdc6		       60		      rts
    169  fdc7
    170  fdc7				   .game_audio_mute_note
    171  fdc7
    172  fdc7		       a9 00		      lda	#0
    173  fdc9							;sta AUDF0
    174  fdc9							;sta AUDC0
    175  fdc9		       85 19		      sta	AUDV0
    176  fdcb
    177  fdcb				   .game_audio_return
    178  fdcb		       60		      rts
    179  fdcc
    180  fdcc				   GameDeath
    181  fdcc		       a5 95		      lda	ScoreValue+0
    182  fdce		       d0 03		      bne	.game_death_return
    183  fdd0
    184  fdd0							; Show Game Over Screen
    185  fdd0		       20 f3 fe 	      jsr	OverInit
    186  fdd3
    187  fdd3				   .game_death_return
    188  fdd3		       60		      rts
    189  fdd4
    190  fdd4				   GameKernel
    191  fdd4
    192  fdd4							; Turn on display
    193  fdd4		       a9 00		      lda	#0
    194  fdd6		       85 01		      sta	VBLANK
    195  fdd8
    196  fdd8				   .game_kernel_score
    197  fdd8
    198  fdd8							; Draw Score on top first
    199  fdd8		       20 36 f7 	      jsr	ScoreDraw
    200  fddb
    201  fddb				   .game_kernel_objects_start
    202  fddb
    203  fddb							; Setup Drawing Objects
    204  fddb		       20 48 f8 	      jsr	WebDrawStart
    205  fdde		       20 44 f9 	      jsr	SpiderDrawStart
    206  fde1		       20 aa fc 	      jsr	SwatterDrawStart
    207  fde4		       20 89 fa 	      jsr	LineDrawStart
    208  fde7		       20 c0 fb 	      jsr	BugDrawStart
    209  fdea
    210  fdea							; Set missle and sprite sizes
    211  fdea		       a9 35		      lda	#%00110101
    212  fdec		       85 04		      sta	NUSIZ0
    213  fdee		       a9 37		      lda	#%00110111
    214  fdf0		       85 05		      sta	NUSIZ1
    215  fdf2
    216  fdf2							; Set playfield settings and ball size
    217  fdf2		       a9 21		      lda	#%00100001
    218  fdf4		       85 0a		      sta	CTRLPF
    219  fdf6
    220  fdf6							; Half scanline counter
    221  fdf6		       a2 54		      ldx	#(KERNEL_SCANLINES-SCORE_LINES)/2-2
    222  fdf8
    223  fdf8							; 6 line counter
    224  fdf8		       a9 00		      lda	#0
    225  fdfa		       85 82		      sta	Temp+2
    226  fdfc
    227  fdfc							; Load background color and start first line
    228  fdfc		       a5 a2		      lda	WebColor+0
    229  fdfe		       85 02		      sta	WSYNC
    230  fe00		       85 09		      sta	COLUBK
    231  fe02
    232  fe02				   .game_kernel_objects 		; 5 or 10 cycles
    233  fe02
    234  fe02		       a5 82		      lda	Temp+2	; 3
    235  fe04		       d0 1a		      bne	.game_kernel_missle	; 2*
    236  fe06
    237  fe06		       a9 03		      lda	#3	; 2
    238  fe08		       85 82		      sta	Temp+2	; 3
    239  fe0a
    240  fe0a				   .game_kernel_web		; 32 cycles
    241  fe0a							; Web
    242  fe0a
    243  fe0a		       a4 a1		      ldy	WebIndex	; 3
    244  fe0c
    245  fe0c							; Load Image
    246  fe0c		       b9 50 f1 	      lda	WebImagePF0,y	; 4
    247  fe0f		       85 0d		      sta	PF0	; 3
    248  fe11		       b9 6c f1 	      lda	WebImagePF1,y	; 4
    249  fe14		       85 0e		      sta	PF1	; 3
    250  fe16		       b9 88 f1 	      lda	WebImagePF2,y	; 4
    251  fe19		       85 0f		      sta	PF2	; 3
    252  fe1b
    253  fe1b		       e6 a1		      inc	WebIndex	; 5
    254  fe1d
    255  fe1d		       4c 4a fe 	      jmp	.game_kernel_line	; 3
    256  fe20
    257  fe20				   .game_kernel_missle
    258  fe20
    259  fe20				   .game_kernel_missle_bug_0		; 18 cycles
    260  fe20							; First Bug
    261  fe20
    262  fe20							; Top
    263  fe20		       e4 bf		      cpx	BugDrawPosTop+0	; 3
    264  fe22		       b0 09		      bcs	.game_kernel_missle_bug_0_off_1	; 2 or 3 if branching
    265  fe24
    266  fe24							; Bottom
    267  fe24		       e4 bd		      cpx	BugDrawPosBottom+0	; 3
    268  fe26		       90 08		      bcc	.game_kernel_missle_bug_0_off_2	; 2 or 3 if branching
    269  fe28
    270  fe28				   .game_kernel_missle_bug_0_on
    271  fe28		       a0 02		      ldy	#%00000010	; 2
    272  fe2a		       4c 33 fe 	      jmp	.game_kernel_missle_bug_0_set	; 3
    273  fe2d
    274  fe2d				   .game_kernel_missle_bug_0_off_1
      0  fe2d					      sleep	5
      1  fe2d				   .CYCLES    SET	5
      2  fe2d
      3  fe2d				  -	      IF	.CYCLES < 2
      4  fe2d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe2d				  -	      ERR
      6  fe2d					      ENDIF
      7  fe2d
      8  fe2d					      IF	.CYCLES & 1
      9  fe2d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe2d		       04 00		      nop	0
     11  fe2f				  -	      ELSE
     12  fe2f				  -	      bit	VSYNC
     13  fe2f					      ENDIF
     14  fe2f				   .CYCLES    SET	.CYCLES - 3
     15  fe2f					      ENDIF
     16  fe2f
     17  fe2f					      REPEAT	.CYCLES / 2
     18  fe2f		       ea		      nop
     19  fe30					      REPEND
    276  fe30				   .game_kernel_missle_bug_0_off_2
      0  fe30					      sleep	2
      1  fe30				   .CYCLES    SET	2
      2  fe30
      3  fe30				  -	      IF	.CYCLES < 2
      4  fe30				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe30				  -	      ERR
      6  fe30					      ENDIF
      7  fe30
      8  fe30				  -	      IF	.CYCLES & 1
      9  fe30				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe30				  -	      nop	0
     11  fe30				  -	      ELSE
     12  fe30				  -	      bit	VSYNC
     13  fe30				  -	      ENDIF
     14  fe30				  -.CYCLES    SET	.CYCLES - 3
     15  fe30					      ENDIF
     16  fe30
     17  fe30					      REPEAT	.CYCLES / 2
     18  fe30		       ea		      nop
     19  fe31					      REPEND
    278  fe31		       a0 00		      ldy	#%00000000	; 2
    279  fe33				   .game_kernel_missle_bug_0_set
    280  fe33		       84 1d		      sty	ENAM0	; 3
    281  fe35
    282  fe35				   .game_kernel_missle_bug_1		; 18 cycles
    283  fe35							; Second Bug
    284  fe35
    285  fe35							; Top
    286  fe35		       e4 c0		      cpx	BugDrawPosTop+1	; 3
    287  fe37		       b0 09		      bcs	.game_kernel_missle_bug_1_off_1	; 2 or 3 if branching
    288  fe39
    289  fe39							; Bottom
    290  fe39		       e4 be		      cpx	BugDrawPosBottom+1	; 3
    291  fe3b		       90 08		      bcc	.game_kernel_missle_bug_1_off_2	; 2 or 3 if branching
    292  fe3d
    293  fe3d				   .game_kernel_missle_bug_1_on
    294  fe3d		       a0 02		      ldy	#%00000010	; 2
    295  fe3f		       4c 48 fe 	      jmp	.game_kernel_missle_bug_1_set	; 3
    296  fe42
    297  fe42				   .game_kernel_missle_bug_1_off_1
      0  fe42					      sleep	5
      1  fe42				   .CYCLES    SET	5
      2  fe42
      3  fe42				  -	      IF	.CYCLES < 2
      4  fe42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe42				  -	      ERR
      6  fe42					      ENDIF
      7  fe42
      8  fe42					      IF	.CYCLES & 1
      9  fe42					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe42		       04 00		      nop	0
     11  fe44				  -	      ELSE
     12  fe44				  -	      bit	VSYNC
     13  fe44					      ENDIF
     14  fe44				   .CYCLES    SET	.CYCLES - 3
     15  fe44					      ENDIF
     16  fe44
     17  fe44					      REPEAT	.CYCLES / 2
     18  fe44		       ea		      nop
     19  fe45					      REPEND
    299  fe45				   .game_kernel_missle_bug_1_off_2
      0  fe45					      sleep	2
      1  fe45				   .CYCLES    SET	2
      2  fe45
      3  fe45				  -	      IF	.CYCLES < 2
      4  fe45				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe45				  -	      ERR
      6  fe45					      ENDIF
      7  fe45
      8  fe45				  -	      IF	.CYCLES & 1
      9  fe45				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe45				  -	      nop	0
     11  fe45				  -	      ELSE
     12  fe45				  -	      bit	VSYNC
     13  fe45				  -	      ENDIF
     14  fe45				  -.CYCLES    SET	.CYCLES - 3
     15  fe45					      ENDIF
     16  fe45
     17  fe45					      REPEAT	.CYCLES / 2
     18  fe45		       ea		      nop
     19  fe46					      REPEND
    301  fe46		       a0 00		      ldy	#%00000000	; 2
    302  fe48				   .game_kernel_missle_bug_1_set
    303  fe48		       84 1e		      sty	ENAM1	; 3
    304  fe4a
    305  fe4a				   .game_kernel_line		; 18 cycles
    306  fe4a							; Line
    307  fe4a
    308  fe4a							; Top
    309  fe4a		       e4 b5		      cpx	LineDrawPos+1	; 3
    310  fe4c		       b0 09		      bcs	.game_kernel_line_set_off_1	; 2 or 3 if branching
    311  fe4e
    312  fe4e							; Bottom
    313  fe4e		       e4 b4		      cpx	LineDrawPos+0	; 3
    314  fe50		       90 08		      bcc	.game_kernel_line_set_off_2	; 2 or 3 if branching
    315  fe52
    316  fe52				   .game_kernel_line_set_on
    317  fe52		       a0 02		      ldy	#%00000010	; 2
    318  fe54		       4c 5d fe 	      jmp	.game_kernel_line_set	; 3
    319  fe57
    320  fe57				   .game_kernel_line_set_off_1
      0  fe57					      sleep	5
      1  fe57				   .CYCLES    SET	5
      2  fe57
      3  fe57				  -	      IF	.CYCLES < 2
      4  fe57				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe57				  -	      ERR
      6  fe57					      ENDIF
      7  fe57
      8  fe57					      IF	.CYCLES & 1
      9  fe57					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe57		       04 00		      nop	0
     11  fe59				  -	      ELSE
     12  fe59				  -	      bit	VSYNC
     13  fe59					      ENDIF
     14  fe59				   .CYCLES    SET	.CYCLES - 3
     15  fe59					      ENDIF
     16  fe59
     17  fe59					      REPEAT	.CYCLES / 2
     18  fe59		       ea		      nop
     19  fe5a					      REPEND
    322  fe5a				   .game_kernel_line_set_off_2
      0  fe5a					      sleep	2
      1  fe5a				   .CYCLES    SET	2
      2  fe5a
      3  fe5a				  -	      IF	.CYCLES < 2
      4  fe5a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe5a				  -	      ERR
      6  fe5a					      ENDIF
      7  fe5a
      8  fe5a				  -	      IF	.CYCLES & 1
      9  fe5a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe5a				  -	      nop	0
     11  fe5a				  -	      ELSE
     12  fe5a				  -	      bit	VSYNC
     13  fe5a				  -	      ENDIF
     14  fe5a				  -.CYCLES    SET	.CYCLES - 3
     15  fe5a					      ENDIF
     16  fe5a
     17  fe5a					      REPEAT	.CYCLES / 2
     18  fe5a		       ea		      nop
     19  fe5b					      REPEND
    324  fe5b		       a0 00		      ldy	#%00000000	; 2
    325  fe5d				   .game_kernel_line_set
    326  fe5d		       84 1f		      sty	ENABL	; 3
    327  fe5f
    328  fe5f							; Next Line
    329  fe5f							;sleep 17 or 16
    330  fe5f		       85 02		      sta	WSYNC
    331  fe61
    332  fe61				   .game_kernel_sprite
    333  fe61
    334  fe61				   .game_kernel_sprite_spider		; 34 cycles
    335  fe61							; Spider
    336  fe61
    337  fe61		       a4 aa		      ldy	SpiderIndex	; 3
    338  fe63		       30 16		      bmi	.game_kernel_sprite_spider_load_1	; At end of sprite / 2 or 3 if branching
    339  fe65
    340  fe65							; Check y position to see if we should be drawing
    341  fe65		       8a		      txa		; 2
    342  fe66		       e5 ab		      sbc	SpiderDrawPos	; 3
    343  fe68		       10 15		      bpl	.game_kernel_sprite_spider_load_2	; 2 or 3 if branching
    344  fe6a
    345  fe6a				   .game_kernel_sprite_spider_draw
    346  fe6a
    347  fe6a							; Decrement sprite index
    348  fe6a		       88		      dey		; 2
    349  fe6b		       10 05		      bpl	.game_kernel_sprite_spider_grab	; 2 or 3 if branching
    350  fe6d
    351  fe6d		       a9 00		      lda	#0	; 2
    352  fe6f							;sleep 1
    353  fe6f		       4c 74 fe 	      jmp	.game_kernel_sprite_spider_store	; 3
    354  fe72
    355  fe72				   .game_kernel_sprite_spider_grab
    356  fe72		       b1 a4		      lda	(SpiderPtr),y	; 5
    357  fe74				   .game_kernel_sprite_spider_store
    358  fe74		       84 aa		      sty	SpiderIndex	; 3
    359  fe76		       85 ac		      sta	SpiderLine	; 3
    360  fe78
    361  fe78		       4c 89 fe 	      jmp	.game_kernel_sprite_spider_load_3	; 3
    362  fe7b
    363  fe7b				   .game_kernel_sprite_spider_load_1
      0  fe7b					      sleep	7
      1  fe7b				   .CYCLES    SET	7
      2  fe7b
      3  fe7b				  -	      IF	.CYCLES < 2
      4  fe7b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe7b				  -	      ERR
      6  fe7b					      ENDIF
      7  fe7b
      8  fe7b					      IF	.CYCLES & 1
      9  fe7b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe7b		       04 00		      nop	0
     11  fe7d				  -	      ELSE
     12  fe7d				  -	      bit	VSYNC
     13  fe7d					      ENDIF
     14  fe7d				   .CYCLES    SET	.CYCLES - 3
     15  fe7d					      ENDIF
     16  fe7d
     17  fe7d					      REPEAT	.CYCLES / 2
     18  fe7d		       ea		      nop
     17  fe7d					      REPEND
     18  fe7e		       ea		      nop
     19  fe7f					      REPEND
    365  fe7f				   .game_kernel_sprite_spider_load_2
      0  fe7f					      sleep	15
      1  fe7f				   .CYCLES    SET	15
      2  fe7f
      3  fe7f				  -	      IF	.CYCLES < 2
      4  fe7f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe7f				  -	      ERR
      6  fe7f					      ENDIF
      7  fe7f
      8  fe7f					      IF	.CYCLES & 1
      9  fe7f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe7f		       04 00		      nop	0
     11  fe81				  -	      ELSE
     12  fe81				  -	      bit	VSYNC
     13  fe81					      ENDIF
     14  fe81				   .CYCLES    SET	.CYCLES - 3
     15  fe81					      ENDIF
     16  fe81
     17  fe81					      REPEAT	.CYCLES / 2
     18  fe81		       ea		      nop
     17  fe81					      REPEND
     18  fe82		       ea		      nop
     17  fe82					      REPEND
     18  fe83		       ea		      nop
     17  fe83					      REPEND
     18  fe84		       ea		      nop
     17  fe84					      REPEND
     18  fe85		       ea		      nop
     17  fe85					      REPEND
     18  fe86		       ea		      nop
     19  fe87					      REPEND
    367  fe87		       a5 ac		      lda	SpiderLine	; 3
    368  fe89				   .game_kernel_sprite_spider_load_3
    369  fe89		       85 1b		      sta	GRP0	; 3
    370  fe8b
    371  fe8b				   .game_kernel_sprite_swatter		; 30 cycles
    372  fe8b							; Swatter
    373  fe8b
    374  fe8b							; Check if wait state
    375  fe8b							;bit SwatterState
    376  fe8b							;bpl .game_kernel_sprite_swatter_load
    377  fe8b
    378  fe8b		       a4 c8		      ldy	SwatterIndex	; 3
    379  fe8d		       30 0f		      bmi	.game_kernel_sprite_swatter_load_1	; At end of sprite / 2 or 3 if branching
    380  fe8f
    381  fe8f							; Check y position to see if we should be drawing
    382  fe8f		       8a		      txa		; 2
    383  fe90		       e5 c9		      sbc	SwatterDrawPos	; 3
    384  fe92		       10 0e		      bpl	.game_kernel_sprite_swatter_load_2	; 2 or 3 if branching
    385  fe94
    386  fe94				   .game_kernel_sprite_swatter_draw
    387  fe94		       b9 d4 f1 	      lda	SwatterSprite,y	; 4
    388  fe97		       85 ca		      sta	SwatterLine	; 3
    389  fe99
    390  fe99							; Decrement sprite index
    391  fe99		       c6 c8		      dec	SwatterIndex	; 5
    392  fe9b
    393  fe9b		       4c aa fe 	      jmp	.game_kernel_sprite_swatter_line	; 3
    394  fe9e
    395  fe9e				   .game_kernel_sprite_swatter_load_1
      0  fe9e					      sleep	7
      1  fe9e				   .CYCLES    SET	7
      2  fe9e
      3  fe9e				  -	      IF	.CYCLES < 2
      4  fe9e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe9e				  -	      ERR
      6  fe9e					      ENDIF
      7  fe9e
      8  fe9e					      IF	.CYCLES & 1
      9  fe9e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe9e		       04 00		      nop	0
     11  fea0				  -	      ELSE
     12  fea0				  -	      bit	VSYNC
     13  fea0					      ENDIF
     14  fea0				   .CYCLES    SET	.CYCLES - 3
     15  fea0					      ENDIF
     16  fea0
     17  fea0					      REPEAT	.CYCLES / 2
     18  fea0		       ea		      nop
     17  fea0					      REPEND
     18  fea1		       ea		      nop
     19  fea2					      REPEND
    397  fea2				   .game_kernel_sprite_swatter_load_2
      0  fea2					      sleep	11
      1  fea2				   .CYCLES    SET	11
      2  fea2
      3  fea2				  -	      IF	.CYCLES < 2
      4  fea2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fea2				  -	      ERR
      6  fea2					      ENDIF
      7  fea2
      8  fea2					      IF	.CYCLES & 1
      9  fea2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fea2		       04 00		      nop	0
     11  fea4				  -	      ELSE
     12  fea4				  -	      bit	VSYNC
     13  fea4					      ENDIF
     14  fea4				   .CYCLES    SET	.CYCLES - 3
     15  fea4					      ENDIF
     16  fea4
     17  fea4					      REPEAT	.CYCLES / 2
     18  fea4		       ea		      nop
     17  fea4					      REPEND
     18  fea5		       ea		      nop
     17  fea5					      REPEND
     18  fea6		       ea		      nop
     17  fea6					      REPEND
     18  fea7		       ea		      nop
     19  fea8					      REPEND
    399  fea8		       a5 ca		      lda	SwatterLine	; 3
    400  feaa				   .game_kernel_sprite_swatter_line
    401  feaa		       85 1c		      sta	GRP1	; 3
    402  feac
    403  feac				   .game_kernel_sprite_end		; 12 or 11 cycles
    404  feac
    405  feac							;sta WSYNC
    406  feac
    407  feac							; New line, decrement half scanline, and increment 3 line counter
    408  feac		       c6 82		      dec	Temp+2	; 5
    409  feae		       ca		      dex		; 2
    410  feaf		       f0 03		      beq	.game_kernel_clean	; 2 or 3 if branching
    411  feb1		       4c 02 fe 	      jmp	.game_kernel_objects	; 3
    412  feb4
    413  feb4				   .game_kernel_clean
    414  feb4
    415  feb4		       85 02		      sta	WSYNC
    416  feb6
    417  feb6		       a9 00		      lda	#0
    418  feb8		       85 09		      sta	COLUBK
    419  feba		       85 08		      sta	COLUPF
    420  febc		       85 06		      sta	COLUP0
    421  febe		       85 07		      sta	COLUP1
    422  fec0		       85 0d		      sta	PF0
    423  fec2		       85 0e		      sta	PF1
    424  fec4		       85 0f		      sta	PF2
    425  fec6		       85 1b		      sta	GRP0
    426  fec8		       85 1c		      sta	GRP1
    427  feca		       85 1d		      sta	ENAM0
    428  fecc		       85 1e		      sta	ENAM1
    429  fece		       85 1f		      sta	ENABL
    430  fed0
    431  fed0		       85 02		      sta	WSYNC
    432  fed2
    433  fed2				   .game_kernel_return
    434  fed2		       60		      rts
    435  fed3
    436  fed3				   GameAudio0
    437  fed3		       0d		      .byte.b	#13	; D
    438  fed4		       ff		      .byte.b	#$FF
    439  fed5		       0f		      .byte.b	#15	; B
    440  fed6		       ff		      .byte.b	#$FF
    441  fed7		       0d		      .byte.b	#13	; D
    442  fed8		       ff		      .byte.b	#$FF
    443  fed9		       0f		      .byte.b	#15	; B
    444  feda		       ff		      .byte.b	#$FF
    445  fedb		       0d		      .byte.b	#13	; D
    446  fedc		       0d		      .byte.b	#13	; D
    447  fedd		       0f		      .byte.b	#15	; B
    448  fede		       ff		      .byte.b	#$FF
    449  fedf		       0c		      .byte.b	#12	; D#
    450  fee0		       ff		      .byte.b	#$FF
    451  fee1		       0f		      .byte.b	#15	; B
    452  fee2		       ff		      .byte.b	#$FF
    453  fee3		       0b		      .byte.b	#11	; E
    454  fee4		       ff		      .byte.b	#$FF
    455  fee5		       0e		      .byte.b	#14	; C#
    456  fee6		       ff		      .byte.b	#$FF
    457  fee7		       0b		      .byte.b	#11
    458  fee8		       ff		      .byte.b	#$FF
    459  fee9		       0e		      .byte.b	#14
    460  feea		       ff		      .byte.b	#$FF
    461  feeb		       0b		      .byte.b	#11
    462  feec		       0b		      .byte.b	#11
    463  feed		       0e		      .byte.b	#14
    464  feee		       ff		      .byte.b	#$FF
    465  feef		       0b		      .byte.b	#11
    466  fef0		       ff		      .byte.b	#$FF
    467  fef1		       0e		      .byte.b	#14
    468  fef2		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fef3					      include	"over.asm"
      1  fef3							;================
      2  fef3							; Constants
      3  fef3							;================
      4  fef3
      5  fef3		       00 00	   OVER_BG_COLOR =	#$00
      6  fef3		       00 44	   OVER_FG_COLOR =	#$44
      7  fef3		       00 06	   OVER_FG_BW_COLOR =	#$06
      8  fef3
      9  fef3		       00 07	   OVER_AUDIO_TONE =	7
     10  fef3		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     11  fef3		       00 06	   OVER_AUDIO_LENGTH =	6
     12  fef3		       00 10	   OVER_AUDIO_STEP =	16
     13  fef3
     14  fef3		       00 09	   OVER_IMAGE_SIZE =	9
     15  fef3		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     16  fef3		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     17  fef3		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     18  fef3
     19  fef3				   OverInit
     20  fef3
     21  fef3							; Setup logic and kernel
      0  fef3					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fef3				   .POINTER   SET	VBlankPtr
      2  fef3				   .ADDRESS   SET	OverVerticalBlank
      3  fef3
      4  fef3		       a9 22		      LDA	#<.ADDRESS
      5  fef5		       85 86		      STA	.POINTER
      6  fef7		       a9 ff		      LDA	#>.ADDRESS
      7  fef9		       85 87		      STA	.POINTER+1
      8  fefb
      0  fefb					      SET_POINTER	KernelPtr, OverKernel
      1  fefb				   .POINTER   SET	KernelPtr
      2  fefb				   .ADDRESS   SET	OverKernel
      3  fefb
      4  fefb		       a9 80		      LDA	#<.ADDRESS
      5  fefd		       85 88		      STA	.POINTER
      6  feff		       a9 ff		      LDA	#>.ADDRESS
      7  ff01		       85 89		      STA	.POINTER+1
      8  ff03
      0  ff03					      SET_POINTER	OverScanPtr, OverOverScan
      1  ff03				   .POINTER   SET	OverScanPtr
      2  ff03				   .ADDRESS   SET	OverOverScan
      3  ff03
      4  ff03		       a9 3a		      LDA	#<.ADDRESS
      5  ff05		       85 8a		      STA	.POINTER
      6  ff07		       a9 ff		      LDA	#>.ADDRESS
      7  ff09		       85 8b		      STA	.POINTER+1
      8  ff0b
     25  ff0b
     26  ff0b							; Load audio settings
     27  ff0b		       a9 07		      lda	#OVER_AUDIO_TONE
     28  ff0d		       85 15		      sta	AUDC0
     29  ff0f							;lda #OVER_AUDIO_VOLUME
     30  ff0f							;sta AUDV0
     31  ff0f		       a9 00		      lda	#0
     32  ff11							;sta AUDC1
     33  ff11		       85 1a		      sta	AUDV1
     34  ff13
     35  ff13							; Set initial button state
     36  ff13							;lda #0
     37  ff13		       85 8f		      sta	InputState
     38  ff15
     39  ff15							; Setup frame counters
     40  ff15		       a9 01		      lda	#1
     41  ff17		       85 8d		      sta	FrameTimer
     42  ff19		       a9 10		      lda	#OVER_AUDIO_STEP
     43  ff1b		       85 92		      sta	SampleStep
     44  ff1d		       a9 06		      lda	#OVER_AUDIO_LENGTH
     45  ff1f		       85 91		      sta	AudioStep
     46  ff21
     47  ff21		       60		      rts
     48  ff22
     49  ff22				   OverVerticalBlank
     50  ff22		       20 d3 f6 	      jsr	ScoreUpdate
     51  ff25
     52  ff25							; Load Colors
     53  ff25		       a9 00		      lda	#OVER_BG_COLOR
     54  ff27		       85 09		      sta	COLUBK
     55  ff29
     56  ff29							; Check b/w
     57  ff29		       ad 82 02 	      lda	SWCHB
     58  ff2c		       29 08		      and	#%00001000
     59  ff2e		       f0 05		      beq	.over_bw
     60  ff30
     61  ff30				   .over_color
     62  ff30		       a9 44		      lda	#OVER_FG_COLOR
     63  ff32		       85 08		      sta	COLUPF
     64  ff34
     65  ff34		       60		      rts
     66  ff35
     67  ff35				   .over_bw
     68  ff35							; Load b/w Colors
     69  ff35		       a9 06		      lda	#OVER_FG_BW_COLOR
     70  ff37		       85 08		      sta	COLUPF
     71  ff39
     72  ff39		       60		      rts
     73  ff3a
     74  ff3a				   OverOverScan
     75  ff3a		       20 41 ff 	      jsr	OverAudio
     76  ff3d		       20 65 ff 	      jsr	OverState
     77  ff40		       60		      rts
     78  ff41
     79  ff41				   OverAudio
     80  ff41
     81  ff41		       a5 8d		      lda	FrameTimer
     82  ff43		       d0 1f		      bne	.over_audio_return
     83  ff45
     84  ff45							; Reset Timer
     85  ff45					      REPEAT	3
     86  ff45		       e6 92		      inc	SampleStep
     85  ff45					      REPEND
     86  ff47		       e6 92		      inc	SampleStep
     85  ff47					      REPEND
     86  ff49		       e6 92		      inc	SampleStep
     87  ff4b					      REPEND
     88  ff4b		       a5 92		      lda	SampleStep
     89  ff4d		       85 8d		      sta	FrameTimer
     90  ff4f
     91  ff4f				   .over_audio_play
     92  ff4f
     93  ff4f							; Increment melody position
     94  ff4f		       a4 91		      ldy	AudioStep
     95  ff51		       f0 0d		      beq	.over_audio_mute_note
     96  ff53		       c6 91		      dec	AudioStep
     97  ff55		       88		      dey
     98  ff56
     99  ff56				   .over_audio_play_note
    100  ff56
    101  ff56							; Melody Line
    102  ff56		       b9 cc ff 	      lda	OverAudio0,y
    103  ff59		       85 17		      sta	AUDF0
    104  ff5b		       a9 06		      lda	#OVER_AUDIO_VOLUME
    105  ff5d		       85 19		      sta	AUDV0
    106  ff5f
    107  ff5f		       60		      rts
    108  ff60
    109  ff60				   .over_audio_mute_note
    110  ff60		       a9 00		      lda	#0
    111  ff62							;sta AUDF0
    112  ff62		       85 19		      sta	AUDV0
    113  ff64
    114  ff64				   .over_audio_return
    115  ff64		       60		      rts
    116  ff65
    117  ff65				   OverState
    118  ff65
    119  ff65							; Check to see if audio has finished
    120  ff65		       a5 91		      lda	AudioStep
    121  ff67		       d0 16		      bne	.over_state_return
    122  ff69
    123  ff69		       a2 01		      ldx	#1
    124  ff6b				   .over_state
    125  ff6b							; Check if Fire Button on controller 1 is released
    126  ff6b		       b5 0c		      lda	INPT4,x
    127  ff6d		       30 05		      bmi	.over_state_check
    128  ff6f
    129  ff6f				   .over_state_on
    130  ff6f		       a9 01		      lda	#1
    131  ff71		       95 8f		      sta	InputState,x
    132  ff73		       60		      rts
    133  ff74
    134  ff74				   .over_state_check
    135  ff74		       b5 8f		      lda	InputState,x
    136  ff76		       d0 04		      bne	.over_state_next
    137  ff78
    138  ff78				   .over_state_loop
    139  ff78		       ca		      dex
    140  ff79		       10 f0		      bpl	.over_state
    141  ff7b		       60		      rts
    142  ff7c
    143  ff7c				   .over_state_next
    144  ff7c							; Button is released, load title screen
    145  ff7c		       20 80 f3 	      jsr	TitleInit
    146  ff7f
    147  ff7f				   .over_state_return
    148  ff7f		       60		      rts
    149  ff80
    150  ff80				   OverKernel
    151  ff80
    152  ff80							; Turn on display
    153  ff80		       a9 00		      lda	#0
    154  ff82		       85 01		      sta	VBLANK
    155  ff84
    156  ff84				   .over_kernel_score
    157  ff84
    158  ff84							; Draw Score on top first (no update)
    159  ff84		       20 36 f7 	      jsr	ScoreDraw
    160  ff87
    161  ff87				   .over_kernel_init
    162  ff87							; Playfield Control
    163  ff87							;lda CtrlPf
    164  ff87							;and #%11111101 ; Use playfield foreground color
    165  ff87							;ora #%00000001 ; Set mirroring
    166  ff87							;sta CtrlPf
    167  ff87		       a9 01		      lda	#%00000001
    168  ff89		       85 0a		      sta	CTRLPF
    169  ff8b
    170  ff8b				   .over_kernel_top_padding
    171  ff8b							; Top Padding
    172  ff8b		       20 ac ff 	      jsr	OverPadding
    173  ff8e
    174  ff8e				   .over_kernel_image
    175  ff8e		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    176  ff90
    177  ff90				   .over_kernel_image_next
    178  ff90		       bd c3 ff 	      lda	OverImagePF2,x
    179  ff93		       85 0f		      sta	PF2
    180  ff95		       bd ba ff 	      lda	OverImagePF1,x
    181  ff98		       85 0e		      sta	PF1
    182  ff9a							;    lda OverImagePF0,x
    183  ff9a							;    sta PF0
    184  ff9a
    185  ff9a		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    186  ff9c				   .over_kernel_image_loop
    187  ff9c		       85 02		      sta	WSYNC
    188  ff9e		       88		      dey
    189  ff9f		       d0 fb		      bne	.over_kernel_image_loop
    190  ffa1
    191  ffa1		       ca		      dex
    192  ffa2		       10 ec		      bpl	.over_kernel_image_next
    193  ffa4
    194  ffa4				   .over_kernel_bottom_padding
    195  ffa4							; Bottom Padding
    196  ffa4		       85 02		      sta	WSYNC	; Add extra line to get to 262
    197  ffa6		       20 ac ff 	      jsr	OverPadding
    198  ffa9
    199  ffa9				   .over_kernel_return
    200  ffa9		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    201  ffab		       60		      rts
    202  ffac
    203  ffac				   OverPadding
    204  ffac		       a9 00		      lda	#0
    205  ffae							;sta PF0
    206  ffae		       85 0e		      sta	PF1
    207  ffb0		       85 0f		      sta	PF2
    208  ffb2
    209  ffb2		       a2 32		      ldx	#OVER_IMAGE_PADDING
    210  ffb4				   .over_padding_loop
    211  ffb4		       85 02		      sta	WSYNC
    212  ffb6		       ca		      dex
    213  ffb7		       d0 fb		      bne	.over_padding_loop
    214  ffb9
    215  ffb9		       60		      rts
    216  ffba
    217  ffba				   OverAssets
    218  ffba
    219  ffba							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  ffba					      include	"over_image.asm"
      1  ffba							;OverImagePF0:
      2  ffba							;    .BYTE %00000000
      3  ffba							;    .BYTE %00000000
      4  ffba							;    .BYTE %00000000
      5  ffba							;    .BYTE %00000000
      6  ffba							;    .BYTE %00000000
      7  ffba							;    .BYTE %00000000
      8  ffba							;    .BYTE %00000000
      9  ffba							;    .BYTE %00000000
     10  ffba							;    .BYTE %00000000
     11  ffba
     12  ffba				   OverImagePF1
     13  ffba		       0c		      .BYTE.b	%00001100
     14  ffbb		       13		      .BYTE.b	%00010011
     15  ffbc		       20		      .BYTE.b	%00100000
     16  ffbd		       23		      .BYTE.b	%00100011
     17  ffbe		       24		      .BYTE.b	%00100100
     18  ffbf		       24		      .BYTE.b	%00100100
     19  ffc0		       12		      .BYTE.b	%00010010
     20  ffc1		       10		      .BYTE.b	%00010000
     21  ffc2		       08		      .BYTE.b	%00001000
     22  ffc3
     23  ffc3				   OverImagePF2
     24  ffc3		       e0		      .BYTE.b	%11100000
     25  ffc4		       f8		      .BYTE.b	%11111000
     26  ffc5		       fd		      .BYTE.b	%11111101
     27  ffc6		       ae		      .BYTE.b	%10101110
     28  ffc7		       df		      .BYTE.b	%11011111
     29  ffc8		       ae		      .BYTE.b	%10101110
     30  ffc9		       fc		      .BYTE.b	%11111100
     31  ffca		       f8		      .BYTE.b	%11111000
     32  ffcb		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    221  ffcc
    222  ffcc				   OverAudio0
    223  ffcc
    224  ffcc		       1a		      .BYTE.b	#26	; D1
    225  ffcd		       1a		      .BYTE.b	#26
    226  ffce		       16		      .BYTE.b	#22	; F1
    227  ffcf		       11		      .BYTE.b	#17	; A1
    228  ffd0		       0d		      .BYTE.b	#13	; D2
    229  ffd1		       0c		      .BYTE.b	#12	; D#2
------- FILE kernel.asm
    329  ffd2
    330  ffd2							;================
    331  ffd2							; End of cart
    332  ffd2							;================
    333  ffd2
    334  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    335  fffa
    336  fffa				   InterruptVectors
    337  fffa
    338  fffa		       18 f2		      .word.w	InitSystem	; NMI
    339  fffc		       18 f2		      .word.w	InitSystem	; RESET
    340  fffe		       18 f2		      .word.w	InitSystem	; IRQ
    341  10000
    342  10000					       END
