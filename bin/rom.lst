------- FILE kernel.asm LEVEL 1 PASS 2
      1  f800 ????						; Spider Web game for Atari VCS/2600
      2  f800 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  f800 ????						; Licensed under GNU LGPL V3.0
      4  f800 ????						; Last revision: November 14th, 2019
      5  f800 ????
      6  f800 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  f800 ????				      include	"vcs.h"
      1  f800 ????						; VCS.H
      2  f800 ????						; Version 1.05, 13/November/2003
      3  f800 ????
      4  f800 ????	       00 69	   VERSION_VCS =	105
      5  f800 ????
      6  f800 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  f800 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  f800 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  f800 ????						;
     10  f800 ????						; This file defines hardware registers and memory mapping for the
     11  f800 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  f800 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  f800 ????						; available at at http://www.atari2600.org/dasm
     14  f800 ????						;
     15  f800 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  f800 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  f800 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  f800 ????						; with your views.  Please contribute, if you think you can improve this
     19  f800 ????						; file!
     20  f800 ????						;
     21  f800 ????						; Latest Revisions...
     22  f800 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  f800 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  f800 ????						;			    This will allow conditional code to verify VCS.H being
     25  f800 ????						;			    used for code assembly.
     26  f800 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  f800 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  f800 ????						;			 mirrored reading/writing differences.	This is more a
     29  f800 ????						;			 readability issue, and binary compatibility with disassembled
     30  f800 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  f800 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  f800 ????						;			 which was broken by the use of segments in this file, as
     33  f800 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  f800 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  f800 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  f800 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  f800 ????						;						   it is safe to leave it undefined, and the base address will
     38  f800 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  f800 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  f800 ????						;			  - register definitions are now generated through assignment
     41  f800 ????						;			    in uninitialised segments.	This allows a changeable base
     42  f800 ????						;			    address architecture.
     43  f800 ????						; 1.0	22/MAR/2003		Initial release
     44  f800 ????
     45  f800 ????
     46  f800 ????						;-------------------------------------------------------------------------------
     47  f800 ????
     48  f800 ????						; TIA_BASE_ADDRESS
     49  f800 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  f800 ????						; Normally 0, the base address should (externally, before including this file)
     51  f800 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  f800 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  f800 ????						; < $40 as a bankswitch.
     54  f800 ????
     55  f800 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  f800 ????			  -TIA_BASE_ADDRESS =	0
     57  f800 ????				      ENDIF
     58  f800 ????
     59  f800 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  f800 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  f800 ????						; *OR* by declaring the label before including this file, eg:
     62  f800 ????						; TIA_BASE_ADDRESS = $40
     63  f800 ????						;   include "vcs.h"
     64  f800 ????
     65  f800 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  f800 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  f800 ????						; for the mirrored ROM hardware registers.
     68  f800 ????
     69  f800 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  f800 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  f800 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  f800 ????
     73  f800 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  f800 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  f800 ????				      ENDIF
     76  f800 ????
     77  f800 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  f800 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  f800 ????				      ENDIF
     80  f800 ????
     81  f800 ????						;-------------------------------------------------------------------------------
     82  f800 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  f800 ????				      SEG
    199  f800 ????
    200  f800 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  f800 ????				      include	"macro.h"
      1  f800 ????						; MACRO.H
      2  f800 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  f800 ????
      4  f800 ????	       00 6a	   VERSION_MACRO =	106
      5  f800 ????
      6  f800 ????						;
      7  f800 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  f800 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  f800 ????						;
     10  f800 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  f800 ????						; It is distributed as a companion machine-specific support package
     12  f800 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  f800 ????						; available at at http://www.atari2600.org/dasm
     14  f800 ????						;
     15  f800 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  f800 ????						; contents, or would like to add something, please write to me
     17  f800 ????						; (atari2600@taswegian.com) with your contribution.
     18  f800 ????						;
     19  f800 ????						; Latest Revisions...
     20  f800 ????						;
     21  f800 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  f800 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  f800 ????						;			   This will allow conditional code to verify MACRO.H being
     24  f800 ????						;			   used for code assembly.
     25  f800 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  f800 ????						;
     27  f800 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  f800 ????						;
     29  f800 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  f800 ????						;			   (standardised macro for vertical synch code)
     31  f800 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  f800 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  f800 ????						; 1.0	22/MAR/2003		Initial release
     34  f800 ????
     35  f800 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  f800 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  f800 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  f800 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  f800 ????						;   registers and require them to be defined first).
     40  f800 ????
     41  f800 ????						; Available macros...
     42  f800 ????						;   SLEEP n		 - sleep for n cycles
     43  f800 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  f800 ????						;   CLEAN_START	 - set machine to known state on startup
     45  f800 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  f800 ????
     47  f800 ????						;-------------------------------------------------------------------------------
     48  f800 ????						; SLEEP duration
     49  f800 ????						; Original author: Thomas Jentzsch
     50  f800 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  f800 ????						; useful for code where precise timing is required.
     52  f800 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  f800 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  f800 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  f800 ????
     56  f800 ????				      MAC	sleep
     57  f800 ????			   .CYCLES    SET	{1}
     58  f800 ????
     59  f800 ????				      IF	.CYCLES < 2
     60  f800 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  f800 ????				      ERR
     62  f800 ????				      ENDIF
     63  f800 ????
     64  f800 ????				      IF	.CYCLES & 1
     65  f800 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  f800 ????				      nop	0
     67  f800 ????				      ELSE
     68  f800 ????				      bit	VSYNC
     69  f800 ????				      ENDIF
     70  f800 ????			   .CYCLES    SET	.CYCLES - 3
     71  f800 ????				      ENDIF
     72  f800 ????
     73  f800 ????				      REPEAT	.CYCLES / 2
     74  f800 ????				      nop
     75  f800 ????				      REPEND
     76  f800 ????				      ENDM		;usage: SLEEP n (n>1)
     77  f800 ????
     78  f800 ????						;-------------------------------------------------------------------------------
     79  f800 ????						; VERTICAL_SYNC
     80  f800 ????						; revised version by Edwin Blink -- saves bytes!
     81  f800 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  f800 ????						; Note: Alters the accumulator
     83  f800 ????
     84  f800 ????						; OUT: A = 0
     85  f800 ????
     86  f800 ????				      MAC	vertical_sync
     87  f800 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  f800 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  f800 ????				      sta	VSYNC
     90  f800 ????				      lsr
     91  f800 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  f800 ????				      ENDM
     93  f800 ????
     94  f800 ????						;-------------------------------------------------------------------------------
     95  f800 ????						; CLEAN_START
     96  f800 ????						; Original author: Andrew Davie
     97  f800 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  f800 ????						; Sets stack pointer to $FF, and all registers to 0
     99  f800 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  f800 ????						; Use as very first section of code on boot (ie: at reset)
    101  f800 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  f800 ????
    103  f800 ????				      MAC	clean_start
    104  f800 ????				      sei
    105  f800 ????				      cld
    106  f800 ????
    107  f800 ????				      ldx	#0
    108  f800 ????				      txa
    109  f800 ????				      tay
    110  f800 ????			   .CLEAR_STACK dex
    111  f800 ????				      txs
    112  f800 ????				      pha
    113  f800 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  f800 ????
    115  f800 ????				      ENDM
    116  f800 ????
    117  f800 ????						;-------------------------------------------------------
    118  f800 ????						; SET_POINTER
    119  f800 ????						; Original author: Manuel Rotschkar
    120  f800 ????						;
    121  f800 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  f800 ????						;
    123  f800 ????						; Usage: SET_POINTER pointer, address
    124  f800 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  f800 ????						;
    126  f800 ????						; Note: Alters the accumulator, NZ flags
    127  f800 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  f800 ????						; IN 2: absolute address
    129  f800 ????
    130  f800 ????				      MAC	set_pointer
    131  f800 ????			   .POINTER   SET	{1}
    132  f800 ????			   .ADDRESS   SET	{2}
    133  f800 ????
    134  f800 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  f800 ????				      STA	.POINTER	; Store in pointer
    136  f800 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  f800 ????				      STA	.POINTER+1	; Store in pointer+1
    138  f800 ????
    139  f800 ????				      ENDM
    140  f800 ????
    141  f800 ????						;-------------------------------------------------------
    142  f800 ????						; BOUNDARY byte#
    143  f800 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  f800 ????						;
    145  f800 ????						; Push data to a certain position inside a page and keep count of how
    146  f800 ????						; many free bytes the programmer will have.
    147  f800 ????						;
    148  f800 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  f800 ????
    150  f800 ????			   .FREE_BYTES SET	0
    151  f800 ????				      MAC	boundary
    152  f800 ????				      REPEAT	256
    153  f800 ????				      IF	<. % {1} = 0
    154  f800 ????				      MEXIT
    155  f800 ????				      ELSE
    156  f800 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  f800 ????				      .byte	$00
    158  f800 ????				      ENDIF
    159  f800 ????				      REPEND
    160  f800 ????				      ENDM
    161  f800 ????
    162  f800 ????
    163  f800 ????						; EOF
------- FILE kernel.asm
      9  f800 ????
     10  f800 ????						;================
     11  f800 ????						; Constants
     12  f800 ????						;================
     13  f800 ????
     14  f800 ????						; PAL Region
     15  f800 ????	       00 00	   PAL	      =	0
     16  f800 ????	       00 f2	   PAL_SCANLINES =	242
     17  f800 ????	       01 38	   PAL_TOTAL  =	312
     18  f800 ????
     19  f800 ????						; NTSC Region
     20  f800 ????	       00 01	   NTSC       =	1
     21  f800 ????	       00 c0	   NTSC_SCANLINES =	192
     22  f800 ????	       01 06	   NTSC_TOTAL =	262
     23  f800 ????
     24  f800 ????						; Kernel
     25  f800 ????	       00 01	   SYSTEM     =	NTSC
     26  f800 ????				      if	SYSTEM = NTSC
     27  f800 ????	       00 c0	   KERNEL_SCANLINES =	NTSC_SCANLINES
     28  f800 ????	       01 06	   KERNEL_TOTAL =	NTSC_TOTAL
     29  f800 ????				      endif
     30  f800 ????			  -	      if	SYSTEM = PAL
     31  f800 ????			  -KERNEL_SCANLINES =	PAL_SCANLINES
     32  f800 ????			  -KERNEL_TOTAL =	PAL_TOTAL
     33  f800 ????				      endif
     34  f800 ????	       00 03	   KERNEL_VSYNC =	3
     35  f800 ????	       00 25	   KERNEL_VBLANK =	37
     36  f800 ????	       00 1e	   KERNEL_OVERSCAN =	30
     37  f800 ????	       01 40	   KERNEL_WIDTH =	40*8
     38  f800 ????	       00 44	   KERNEL_HBLANK =	68
     39  f800 ????
     40  f800 ????	       00 03	   KERNEL_IMAGE_MIRROR_DATA =	#3
     41  f800 ????	       00 06	   KERNEL_IMAGE_FULL_DATA =	#6
     42  f800 ????	       00 08	   KERNEL_IMAGE_LINE =	#8
     43  f800 ????	       00 18	   KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  f800 ????
     45  f800 ????						;================
     46  f800 ????						; Variables
     47  f800 ????						;================
     48  f800 ????
     49 U00b8 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00	   FrameTimer ds	1
     70 U008f
     71 U008f		       00	   AudioStep  ds	1
     72 U0090
     73 U0090		       00	   SampleStep ds	1
     74 U0091
     75 U0091							; Score
     76 U0091
     77 U0091		       00 00	   ScoreValue ds	2
     78 U0093		       00 00	   ScoreDigitOnes ds	2
     79 U0095		       00 00	   ScoreDigitTens ds	2
     80 U0097		       00 00	   ScoreGfx   ds	2
     81 U0099
     82 U0099							; Web
     83 U0099
     84 U0099		       00	   WebIndex   ds	1
     85 U009a		       00	   WebDir     ds	1
     86 U009b
     87 U009b							; Spider
     88 U009b
     89 U009b		       00 00	   SpiderPtr  ds	2
     90 U009d		       00 00	   SpiderPos  ds	2
     91 U009f		       00	   SpiderCtrl ds	1
     92 U00a0		       00	   SpiderColor ds	1
     93 U00a1
     94 U00a1		       00	   SpiderIndex ds	1
     95 U00a2		       00	   SpiderDrawPos ds	1
     96 U00a3
     97 U00a3							; Line
     98 U00a3
     99 U00a3		       00	   LineEnabled ds	1
    100 U00a4		       00 00	   LinePos    ds	2
    101 U00a6		       00 00	   LineVelocity ds	2
    102 U00a8		       00 00	   LineStartPos ds	2
    103 U00aa		       00 00	   LineDrawPos ds	2
    104 U00ac
    105 U00ac							; Bug
    106 U00ac
    107 U00ac		       00 00	   BugStunned ds	2
    108 U00ae		       00 00	   BugPosX    ds	2
    109 U00b0		       00 00	   BugPosY    ds	2
    110 U00b2		       00 00	   BugColor   ds	2
    111 U00b4
    112 U00b4		       00 00	   BugDrawPosBottom ds	2
    113 U00b6		       00 00	   BugDrawPosTop ds	2
    114 U00b8
    115  f800 ????				      SEG
    116  f000					      org	$F000	; Start of cart area
    117  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    119  f021
    120  f021				   InitSystem
    121  f021
    122  f021				   .init_clean
    123  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    125  f02c
    126  f02c				   .init_tia
    127  f02c							; Define default TIA register values
    128  f02c
    129  f02c							; Initialize copies
    130  f02c		       a9 00		      lda	#0
    131  f02e		       85 80		      sta	CtrlPf
    132  f030		       85 81		      sta	NuSiz0
    133  f032		       85 82		      sta	NuSiz1
    134  f034
    135  f034							; Set background color
    136  f034							;    lda #$00	      ; Black
    137  f034							;    sta COLUBK
    138  f034
    139  f034							; Set the playfield and player color
    140  f034							;    lda #$0E	      ; White
    141  f034							;    sta COLUPF
    142  f034							;    sta COLUP0
    143  f034							;    sta COLUP1
    144  f034
    145  f034							; Playfield Control
    146  f034							;    lda #%00000001  ; 1 for mirroring
    147  f034							;    sta CtrlPf
    148  f034							;    sta CTRLPF
    149  f034
    150  f034							; Disable Game Elements
    151  f034							;    lda #$00
    152  f034							;    sta ENABL       ; Turn off ball
    153  f034							;    sta ENAM0       ; Turn off player 1 missile
    154  f034							;    sta ENAM1       ; Turn off player 2 missile
    155  f034							;    sta GRP0	      ; Turn off player 1
    156  f034							;    sta GRP1	      ; Turn off player 2
    157  f034
    158  f034							; Empty playfield
    159  f034							;    lda #%00000000
    160  f034							;    sta PF0
    161  f034							;    sta PF1
    162  f034							;    sta PF2
    163  f034
    164  f034				   .init_seed
    165  f034							; Seed the random number generator
    166  f034		       ad 84 02 	      lda	INTIM	; Unknown value
    167  f037		       85 85		      sta	Rand8	; Use as seed
    168  f039		       49 ff		      eor	#$FF	; Flip bits
    169  f03b		       85 86		      sta	Rand16	; Just in case INTIM was 0
    170  f03d
    171  f03d				   .init_game
    172  f03d
    173  f03d							;   jsr LogoInit
    174  f03d		       20 4e f6 	      jsr	GameInit	; Used for testing
    175  f040
    176  f040							;=======================================
    177  f040							; Game Kernel
    178  f040							;=======================================
    179  f040
    180  f040				   Main
    181  f040
    182  f040		       20 4f f0 	      jsr	VerticalSync
    183  f043		       20 66 f0 	      jsr	VerticalBlank
    184  f046		       20 79 f0 	      jsr	Kernel
    185  f049		       20 80 f0 	      jsr	OverScan
    186  f04c		       4c 40 f0 	      jmp	Main
    187  f04f
    188  f04f				   VerticalSync
    189  f04f
    190  f04f		       a9 00		      lda	#0
    191  f051		       85 01		      sta	VBLANK
    192  f053
    193  f053							; Turn on Vertical Sync signal and setup timer
    194  f053		       a9 02		      lda	#2
    195  f055		       85 00		      sta	VSYNC
    196  f057
    197  f057							; Increment frame count and reduce frame counter
    198  f057		       e6 8d		      inc	Frame
    199  f059		       c6 8e		      dec	FrameTimer
    200  f05b
    201  f05b							; VSYNCH signal scanlines
    202  f05b					      REPEAT	#KERNEL_VSYNC
    203  f05b		       85 02		      sta	WSYNC
    202  f05b					      REPEND
    203  f05d		       85 02		      sta	WSYNC
    202  f05d					      REPEND
    203  f05f		       85 02		      sta	WSYNC
    204  f061					      REPEND
    205  f061
    206  f061							; Turn off Vertical Sync signal
    207  f061		       a9 00		      lda	#0
    208  f063		       85 00		      sta	VSYNC
    209  f065
    210  f065				   .vsync_return
    211  f065		       60		      rts
    212  f066
    213  f066				   VerticalBlank
    214  f066							; Setup Timer
    215  f066		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    216  f068		       8d 96 02 	      sta	TIM64T
    217  f06b
    218  f06b				   .vblank_logic
    219  f06b							; Perform Game Logic
    220  f06b							;jsr (VBlankPtr)
    221  f06b		       20 76 f0 	      jsr	.vblank_logic_call_ptr
    222  f06e
    223  f06e				   .vblank_loop
    224  f06e							; WSYNC until Timer is complete
    225  f06e		       85 02		      sta	WSYNC
    226  f070		       ad 84 02 	      lda	INTIM
    227  f073		       d0 f9		      bne	.vblank_loop
    228  f075
    229  f075				   .vblank_return
    230  f075		       60		      rts
    231  f076
    232  f076				   .vblank_logic_call_ptr
    233  f076		       6c 87 00 	      jmp	(VBlankPtr)
    234  f079
    235  f079				   Kernel
    236  f079
    237  f079							; Perform Selected Kernel
    238  f079							;jsr (KernelPtr)
    239  f079		       20 7d f0 	      jsr	.kernel_call_ptr
    240  f07c		       60		      rts
    241  f07d
    242  f07d				   .kernel_call_ptr
    243  f07d		       6c 89 00 	      jmp	(KernelPtr)
    244  f080
    245  f080				   OverScan
    246  f080
    247  f080							; End of screen, enter blanking
    248  f080		       a9 42		      lda	#%01000010
    249  f082		       85 01		      sta	VBLANK
    250  f084
    251  f084							; Setup Timer
    252  f084		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    253  f086		       8d 96 02 	      sta	TIM64T
    254  f089
    255  f089							;.overscan_reset:
    256  f089							; Check for reset switch
    257  f089							;    lda SWCHB
    258  f089							;    lsr		      ; Push D0 to carry (C)
    259  f089							;    bcs .overscan_logic     ; If D0 is set, no reset
    260  f089
    261  f089							; Perform reset
    262  f089							;    jsr LogoInit	      ; No need for logic
    263  f089							;    jsr GameInit
    264  f089							;    jmp .overscan_loop
    265  f089
    266  f089				   .overscan_logic
    267  f089							; Perform OverScan Logic
    268  f089							;jsr (OverScanPtr)
    269  f089		       20 94 f0 	      jsr	.overscan_logic_call_ptr
    270  f08c
    271  f08c				   .overscan_loop
    272  f08c							; WSYNC until Timer is complete
    273  f08c		       85 02		      sta	WSYNC
    274  f08e		       ad 84 02 	      lda	INTIM
    275  f091		       d0 f9		      bne	.overscan_loop
    276  f093
    277  f093				   .overscan_return
    278  f093		       60		      rts
    279  f094
    280  f094				   .overscan_logic_call_ptr
    281  f094		       6c 8b 00 	      jmp	(OverScanPtr)
    282  f097
    283  f097							;================
    284  f097							; State Code
    285  f097							;================
    286  f097
    287  f097							;    include "logo.asm"
    288  f097							;    include "title.asm"
------- FILE game.asm LEVEL 2 PASS 2
      0  f097					      include	"game.asm"
      1  f097							;================
      2  f097							; Game
      3  f097							;================
      4  f097
      5  f097							; Constants
      6  f097
      7  f097		       00 04	   GAME_AUDIO_VOLUME =	4
      8  f097		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f097		       00 09	   GAME_AUDIO_STEP =	9
     10  f097		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f097		       00 06	   GAME_AUDIO_TONE =	6
     12  f097
     13  f097							; Object Code
     14  f097
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f097					      include	"objects/score.asm"
      1  f097							;======================
      2  f097							; Score (playfield)
      3  f097							;======================
      4  f097
      5  f097							; Constants
      6  f097
      7  f097		       00 00	   SCORE_BG_COLOR =	#$00
      8  f097		       00 44	   SCORE_FG_0_COLOR =	#$44
      9  f097		       00 c8	   SCORE_FG_1_COLOR =	#$C8
     10  f097
     11  f097		       00 05	   SCORE_CHAR_SIZE =	5
     12  f097		       00 02	   SCORE_LINE_SIZE =	2
     13  f097		       00 0d	   SCORE_LINES =	SCORE_CHAR_SIZE*SCORE_LINE_SIZE+3
     14  f097
     15  f097							; Initialization
     16  f097
     17  f097				   ScoreInit
     18  f097
     19  f097							; Health Score
     20  f097		       a9 ff		      lda	#$FF
     21  f099		       85 91		      sta	ScoreValue+0
     22  f09b
     23  f09b							; Game Score
     24  f09b		       a9 00		      lda	#0
     25  f09d		       85 92		      sta	ScoreValue+1
     26  f09f
     27  f09f		       60		      rts
     28  f0a0
     29  f0a0							; Frame Update
     30  f0a0
     31  f0a0				   ScoreUpdate
     32  f0a0
     33  f0a0		       a2 01		      ldx	#1
     34  f0a2				   .score_update_loop
     35  f0a2
     36  f0a2							; Ones Digit
     37  f0a2		       b5 91		      lda	ScoreValue,x
     38  f0a4		       29 0f		      and	#$0f
     39  f0a6		       85 83		      sta	Temp
     40  f0a8		       0a		      asl
     41  f0a9		       0a		      asl
     42  f0aa		       65 83		      adc	Temp
     43  f0ac		       95 93		      sta	ScoreDigitOnes,x
     44  f0ae
     45  f0ae							; Tens Digit
     46  f0ae		       b5 91		      lda	ScoreValue,x
     47  f0b0		       29 f0		      and	#$f0
     48  f0b2		       4a		      lsr
     49  f0b3		       4a		      lsr
     50  f0b4		       85 83		      sta	Temp
     51  f0b6		       4a		      lsr
     52  f0b7		       4a		      lsr
     53  f0b8		       65 83		      adc	Temp
     54  f0ba		       95 95		      sta	ScoreDigitTens,x
     55  f0bc
     56  f0bc		       ca		      dex
     57  f0bd		       10 e3		      bpl	.score_update_loop
     58  f0bf
     59  f0bf				   .score_update_end
     60  f0bf		       60		      rts
     61  f0c0
     62  f0c0							; Draw loop (uses SCORE_LINES scanlines)
     63  f0c0
     64  f0c0				   ScoreDraw
     65  f0c0
     66  f0c0							; Load Colors
     67  f0c0		       a9 00		      lda	#SCORE_BG_COLOR
     68  f0c2		       85 09		      sta	COLUBK
     69  f0c4		       a9 44		      lda	#SCORE_FG_0_COLOR
     70  f0c6		       85 08		      sta	COLUPF
     71  f0c8		       85 06		      sta	COLUP0
     72  f0ca		       a9 c8		      lda	#SCORE_FG_1_COLOR
     73  f0cc		       85 07		      sta	COLUP1
     74  f0ce
     75  f0ce							; Set Non-Mirror and p0/p1 color
     76  f0ce		       a5 80		      lda	CtrlPf
     77  f0d0		       29 fc		      and	#%11111100
     78  f0d2		       09 02		      ora	#%00000010
     79  f0d4		       85 80		      sta	CtrlPf
     80  f0d6		       85 0a		      sta	CTRLPF
     81  f0d8
     82  f0d8							;sta WSYNC
     83  f0d8
     84  f0d8		       a2 05		      ldx	#SCORE_CHAR_SIZE
     85  f0da
     86  f0da				   .score_draw_line
     87  f0da
     88  f0da							; 1st Value
     89  f0da		       a4 95		      ldy	ScoreDigitTens
     90  f0dc		       b9 30 f1 	      lda	ScoreDigits,y
     91  f0df		       29 f0		      and	#$f0
     92  f0e1		       85 97		      sta	ScoreGfx
     93  f0e3		       a4 93		      ldy	ScoreDigitOnes
     94  f0e5		       b9 30 f1 	      lda	ScoreDigits,y
     95  f0e8		       29 0f		      and	#$0f
     96  f0ea		       05 97		      ora	ScoreGfx
     97  f0ec		       85 97		      sta	ScoreGfx
     98  f0ee
     99  f0ee		       85 02		      sta	WSYNC
    100  f0f0		       85 0e		      sta	PF1
    101  f0f2
    102  f0f2							; 2nd Value
    103  f0f2		       a4 96		      ldy	ScoreDigitTens+1
    104  f0f4		       b9 30 f1 	      lda	ScoreDigits,y
    105  f0f7		       29 f0		      and	#$f0
    106  f0f9		       85 98		      sta	ScoreGfx+1
    107  f0fb		       a4 94		      ldy	ScoreDigitOnes+1
    108  f0fd		       b9 30 f1 	      lda	ScoreDigits,y
    109  f100		       29 0f		      and	#$0f
    110  f102		       05 98		      ora	ScoreGfx+1
    111  f104		       85 98		      sta	ScoreGfx+1
    112  f106
      0  f106					      sleep	12
      1  f106				   .CYCLES    SET	12
      2  f106
      3  f106				  -	      IF	.CYCLES < 2
      4  f106				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f106				  -	      ERR
      6  f106					      ENDIF
      7  f106
      8  f106				  -	      IF	.CYCLES & 1
      9  f106				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f106				  -	      nop	0
     11  f106				  -	      ELSE
     12  f106				  -	      bit	VSYNC
     13  f106				  -	      ENDIF
     14  f106				  -.CYCLES    SET	.CYCLES - 3
     15  f106					      ENDIF
     16  f106
     17  f106					      REPEAT	.CYCLES / 2
     18  f106		       ea		      nop
     17  f106					      REPEND
     18  f107		       ea		      nop
     17  f107					      REPEND
     18  f108		       ea		      nop
     17  f108					      REPEND
     18  f109		       ea		      nop
     17  f109					      REPEND
     18  f10a		       ea		      nop
     17  f10a					      REPEND
     18  f10b		       ea		      nop
     19  f10c					      REPEND
    114  f10c		       85 0e		      sta	PF1
    115  f10e
    116  f10e		       a4 97		      ldy	ScoreGfx
    117  f110		       85 02		      sta	WSYNC
    118  f112
    119  f112		       84 0e		      sty	PF1
    120  f114
    121  f114		       e6 93		      inc	ScoreDigitOnes
    122  f116		       e6 94		      inc	ScoreDigitOnes+1
    123  f118		       e6 95		      inc	ScoreDigitTens
    124  f11a		       e6 96		      inc	ScoreDigitTens+1
    125  f11c
      0  f11c					      sleep	12
      1  f11c				   .CYCLES    SET	12
      2  f11c
      3  f11c				  -	      IF	.CYCLES < 2
      4  f11c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f11c				  -	      ERR
      6  f11c					      ENDIF
      7  f11c
      8  f11c				  -	      IF	.CYCLES & 1
      9  f11c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f11c				  -	      nop	0
     11  f11c				  -	      ELSE
     12  f11c				  -	      bit	VSYNC
     13  f11c				  -	      ENDIF
     14  f11c				  -.CYCLES    SET	.CYCLES - 3
     15  f11c					      ENDIF
     16  f11c
     17  f11c					      REPEAT	.CYCLES / 2
     18  f11c		       ea		      nop
     17  f11c					      REPEND
     18  f11d		       ea		      nop
     17  f11d					      REPEND
     18  f11e		       ea		      nop
     17  f11e					      REPEND
     18  f11f		       ea		      nop
     17  f11f					      REPEND
     18  f120		       ea		      nop
     17  f120					      REPEND
     18  f121		       ea		      nop
     19  f122					      REPEND
    127  f122		       ca		      dex
    128  f123		       85 0e		      sta	PF1
    129  f125
    130  f125		       d0 b3		      bne	.score_draw_line
    131  f127		       85 02		      sta	WSYNC
    132  f129
    133  f129							; Clear
    134  f129		       a9 00		      lda	#0
    135  f12b		       85 0e		      sta	PF1
    136  f12d
    137  f12d		       85 02		      sta	WSYNC
    138  f12f
    139  f12f		       60		      rts
    140  f130
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f130					      include	"objects/score_digits.asm"
      1  f130				   ScoreDigits
      2  f130
      3  f130		       77		      .BYTE.b	%01110111
      4  f131		       55		      .BYTE.b	%01010101
      5  f132		       55		      .BYTE.b	%01010101
      6  f133		       55		      .BYTE.b	%01010101
      7  f134		       77		      .BYTE.b	%01110111
      8  f135
      9  f135		       11		      .BYTE.b	%00010001
     10  f136		       11		      .BYTE.b	%00010001
     11  f137		       11		      .BYTE.b	%00010001
     12  f138		       11		      .BYTE.b	%00010001
     13  f139		       11		      .BYTE.b	%00010001
     14  f13a
     15  f13a		       77		      .BYTE.b	%01110111
     16  f13b		       11		      .BYTE.b	%00010001
     17  f13c		       77		      .BYTE.b	%01110111
     18  f13d		       44		      .BYTE.b	%01000100
     19  f13e		       77		      .BYTE.b	%01110111
     20  f13f
     21  f13f		       77		      .BYTE.b	%01110111
     22  f140		       11		      .BYTE.b	%00010001
     23  f141		       33		      .BYTE.b	%00110011
     24  f142		       11		      .BYTE.b	%00010001
     25  f143		       77		      .BYTE.b	%01110111
     26  f144
     27  f144		       55		      .BYTE.b	%01010101
     28  f145		       55		      .BYTE.b	%01010101
     29  f146		       77		      .BYTE.b	%01110111
     30  f147		       11		      .BYTE.b	%00010001
     31  f148		       11		      .BYTE.b	%00010001
     32  f149
     33  f149		       77		      .BYTE.b	%01110111
     34  f14a		       44		      .BYTE.b	%01000100
     35  f14b		       77		      .BYTE.b	%01110111
     36  f14c		       11		      .BYTE.b	%00010001
     37  f14d		       77		      .BYTE.b	%01110111
     38  f14e
     39  f14e		       77		      .BYTE.b	%01110111
     40  f14f		       44		      .BYTE.b	%01000100
     41  f150		       77		      .BYTE.b	%01110111
     42  f151		       55		      .BYTE.b	%01010101
     43  f152		       77		      .BYTE.b	%01110111
     44  f153
     45  f153		       77		      .BYTE.b	%01110111
     46  f154		       11		      .BYTE.b	%00010001
     47  f155		       22		      .BYTE.b	%00100010
     48  f156		       22		      .BYTE.b	%00100010
     49  f157		       22		      .BYTE.b	%00100010
     50  f158
     51  f158		       77		      .BYTE.b	%01110111
     52  f159		       55		      .BYTE.b	%01010101
     53  f15a		       77		      .BYTE.b	%01110111
     54  f15b		       55		      .BYTE.b	%01010101
     55  f15c		       77		      .BYTE.b	%01110111
     56  f15d
     57  f15d		       77		      .BYTE.b	%01110111
     58  f15e		       55		      .BYTE.b	%01010101
     59  f15f		       77		      .BYTE.b	%01110111
     60  f160		       11		      .BYTE.b	%00010001
     61  f161		       11		      .BYTE.b	%00010001
     62  f162
     63  f162		       77		      .BYTE.b	%01110111
     64  f163		       55		      .BYTE.b	%01010101
     65  f164		       77		      .BYTE.b	%01110111
     66  f165		       55		      .BYTE.b	%01010101
     67  f166		       55		      .BYTE.b	%01010101
     68  f167
     69  f167		       66		      .BYTE.b	%01100110
     70  f168		       55		      .BYTE.b	%01010101
     71  f169		       66		      .BYTE.b	%01100110
     72  f16a		       55		      .BYTE.b	%01010101
     73  f16b		       66		      .BYTE.b	%01100110
     74  f16c
     75  f16c		       77		      .BYTE.b	%01110111
     76  f16d		       44		      .BYTE.b	%01000100
     77  f16e		       44		      .BYTE.b	%01000100
     78  f16f		       44		      .BYTE.b	%01000100
     79  f170		       77		      .BYTE.b	%01110111
     80  f171
     81  f171		       66		      .BYTE.b	%01100110
     82  f172		       55		      .BYTE.b	%01010101
     83  f173		       55		      .BYTE.b	%01010101
     84  f174		       55		      .BYTE.b	%01010101
     85  f175		       66		      .BYTE.b	%01100110
     86  f176
     87  f176		       77		      .BYTE.b	%01110111
     88  f177		       44		      .BYTE.b	%01000100
     89  f178		       66		      .BYTE.b	%01100110
     90  f179		       44		      .BYTE.b	%01000100
     91  f17a		       77		      .BYTE.b	%01110111
     92  f17b
     93  f17b		       77		      .BYTE.b	%01110111
     94  f17c		       44		      .BYTE.b	%01000100
     95  f17d		       66		      .BYTE.b	%01100110
     96  f17e		       44		      .BYTE.b	%01000100
     97  f17f		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f180					      include	"objects/web.asm"
      1  f180							;================
      2  f180							; Web (Playfield)
      3  f180							;================
      4  f180
      5  f180							; Constants
      6  f180
      7  f180		       00 00	   WEB_BG_COLOR =	#$00
      8  f180		       00 06	   WEB_FG_COLOR =	#$06
      9  f180
     10  f180		       00 1e	   WEB_SIZE   =	30
     11  f180		       00 b3	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f180		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f180
     14  f180							; Scanline Draw
     15  f180
     16  f180				   WebDrawStart
     17  f180
     18  f180							; Load Colors
     19  f180		       a9 00		      lda	#WEB_BG_COLOR
     20  f182		       85 09		      sta	COLUBK
     21  f184		       a9 06		      lda	#WEB_FG_COLOR
     22  f186		       85 08		      sta	COLUPF
     23  f188
     24  f188							; Mirror playfield and use standard playfield color
     25  f188		       a5 80		      lda	CtrlPf
     26  f18a		       29 fc		      and	#%11111100
     27  f18c		       09 01		      ora	#%00000001
     28  f18e		       85 80		      sta	CtrlPf
     29  f190		       85 0a		      sta	CTRLPF
     30  f192
     31  f192							; Initialize image index
     32  f192		       a9 00		      lda	#0
     33  f194		       85 99		      sta	WebIndex
     34  f196		       a9 01		      lda	#1
     35  f198		       85 9a		      sta	WebDir
     36  f19a
     37  f19a		       60		      rts
     38  f19b
     39  f19b				   WebDraw
     40  f19b
     41  f19b		       a4 99		      ldy	WebIndex
     42  f19d
     43  f19d							; Draw Image
     44  f19d		       b9 c6 f1 	      lda	WebImagePF0,y
     45  f1a0		       85 0d		      sta	PF0
     46  f1a2		       b9 d5 f1 	      lda	WebImagePF1,y
     47  f1a5		       85 0e		      sta	PF1
     48  f1a7		       b9 e4 f1 	      lda	WebImagePF2,y
     49  f1aa		       85 0f		      sta	PF2
     50  f1ac
     51  f1ac							; Increment image index
     52  f1ac		       18		      clc
     53  f1ad		       98		      tya
     54  f1ae		       65 9a		      adc	WebDir
     55  f1b0		       85 99		      sta	WebIndex
     56  f1b2
     57  f1b2		       c9 0f		      cmp	#WEB_SIZE/2
     58  f1b4		       d0 06		      bne	.web_draw_return
     59  f1b6
     60  f1b6		       a9 ff		      lda	#-1
     61  f1b8		       85 9a		      sta	WebDir
     62  f1ba
     63  f1ba		       c6 99		      dec	WebIndex
     64  f1bc
     65  f1bc				   .web_draw_return
     66  f1bc		       60		      rts
     67  f1bd
     68  f1bd				   WebClean
     69  f1bd
     70  f1bd							; Clear out playfield
     71  f1bd		       a9 00		      lda	#0
     72  f1bf		       85 0d		      sta	PF0
     73  f1c1		       85 0e		      sta	PF1
     74  f1c3		       85 0f		      sta	PF2
     75  f1c5
     76  f1c5		       60		      rts
     77  f1c6
     78  f1c6							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f1c6					      include	"objects/web_image.asm"
      1  f1c6				   WebImagePF0
      2  f1c6		       00		      .BYTE.b	%00000000
      3  f1c7		       00		      .BYTE.b	%00000000
      4  f1c8		       00		      .BYTE.b	%00000000
      5  f1c9		       00		      .BYTE.b	%00000000
      6  f1ca		       00		      .BYTE.b	%00000000
      7  f1cb		       00		      .BYTE.b	%00000000
      8  f1cc		       00		      .BYTE.b	%00000000
      9  f1cd		       00		      .BYTE.b	%00000000
     10  f1ce		       00		      .BYTE.b	%00000000
     11  f1cf		       30		      .BYTE.b	%00110000
     12  f1d0		       e0		      .BYTE.b	%11100000
     13  f1d1		       20		      .BYTE.b	%00100000
     14  f1d2		       40		      .BYTE.b	%01000000
     15  f1d3		       40		      .BYTE.b	%01000000
     16  f1d4		       80		      .BYTE.b	%10000000
     17  f1d5
     18  f1d5				   WebImagePF1
     19  f1d5		       08		      .BYTE.b	%00001000
     20  f1d6		       06		      .BYTE.b	%00000110
     21  f1d7		       01		      .BYTE.b	%00000001
     22  f1d8		       00		      .BYTE.b	%00000000
     23  f1d9		       00		      .BYTE.b	%00000000
     24  f1da		       01		      .BYTE.b	%00000001
     25  f1db		       01		      .BYTE.b	%00000001
     26  f1dc		       02		      .BYTE.b	%00000010
     27  f1dd		       0c		      .BYTE.b	%00001100
     28  f1de		       30		      .BYTE.b	%00110000
     29  f1df		       c0		      .BYTE.b	%11000000
     30  f1e0		       38		      .BYTE.b	%00111000
     31  f1e1		       07		      .BYTE.b	%00000111
     32  f1e2		       00		      .BYTE.b	%00000000
     33  f1e3		       00		      .BYTE.b	%00000000
     34  f1e4
     35  f1e4				   WebImagePF2
     36  f1e4		       20		      .BYTE.b	%00100000
     37  f1e5		       18		      .BYTE.b	%00011000
     38  f1e6		       04		      .BYTE.b	%00000100
     39  f1e7		       03		      .BYTE.b	%00000011
     40  f1e8		       3f		      .BYTE.b	%00111111
     41  f1e9		       c2		      .BYTE.b	%11000010
     42  f1ea		       04		      .BYTE.b	%00000100
     43  f1eb		       08		      .BYTE.b	%00001000
     44  f1ec		       08		      .BYTE.b	%00001000
     45  f1ed		       10		      .BYTE.b	%00010000
     46  f1ee		       20		      .BYTE.b	%00100000
     47  f1ef		       20		      .BYTE.b	%00100000
     48  f1f0		       41		      .BYTE.b	%01000001
     49  f1f1		       8e		      .BYTE.b	%10001110
     50  f1f2		       f0		      .BYTE.b	%11110000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f1f3					      include	"objects/spider.asm"
      1  f1f3							;=================
      2  f1f3							; Spider (player0)
      3  f1f3							;=================
      4  f1f3
      5  f1f3							; Constants
      6  f1f3
      7  f1f3		       00 56	   SPIDER_COLOR =	#$56
      8  f1f3		       00 10	   SPIDER_SIZE =	16
      9  f1f3		       00 08	   SPIDER_SPRITE_SIZE =	8
     10  f1f3		       00 02	   SPIDER_VEL_X =	2
     11  f1f3		       00 02	   SPIDER_VEL_Y =	2
     12  f1f3
     13  f1f3		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f1f3
     15  f1f3							; Initialization
     16  f1f3
     17  f1f3				   SpiderInit
     18  f1f3
     19  f1f3							; Initialize Position in center of screen
     20  f1f3		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f1f5		       85 9d		      sta	SpiderPos
     22  f1f7		       a9 48		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f1f9		       85 9e		      sta	SpiderPos+1
     24  f1fb
     25  f1fb							; Setup Sprite
      0  f1fb					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f1fb				   .POINTER   SET	SpiderPtr
      2  f1fb				   .ADDRESS   SET	SpiderSprite
      3  f1fb
      4  f1fb		       a9 71		      LDA	#<.ADDRESS
      5  f1fd		       85 9b		      STA	.POINTER
      6  f1ff		       a9 f3		      LDA	#>.ADDRESS
      7  f201		       85 9c		      STA	.POINTER+1
      8  f203
     27  f203
     28  f203							;    lda #SPIDER_COLOR
     29  f203							;    sta SpiderColor
     30  f203
     31  f203		       60		      rts
     32  f204
     33  f204							; Frame Update
     34  f204
     35  f204				   SpiderUpdate
     36  f204		       20 0b f2 	      jsr	SpiderControl
     37  f207		       20 f1 f2 	      jsr	SpiderCollision
     38  f20a		       60		      rts
     39  f20b
     40  f20b				   SpiderControl
     41  f20b
     42  f20b							; Control Position
     43  f20b		       a6 9d		      ldx	SpiderPos
     44  f20d		       a4 9e		      ldy	SpiderPos+1
     45  f20f		       ad 80 02 	      lda	SWCHA
     46  f212
     47  f212				   .spider_control_check_right
     48  f212		       30 02		      bmi	.spider_control_check_left
     49  f214
     50  f214					      REPEAT	#SPIDER_VEL_X
     51  f214		       e8		      inx
     50  f214					      REPEND
     51  f215		       e8		      inx
     52  f216					      REPEND
     53  f216
     54  f216				   .spider_control_check_left
     55  f216		       2a		      rol
     56  f217		       30 02		      bmi	.spider_control_check_down
     57  f219
     58  f219					      REPEAT	#SPIDER_VEL_X
     59  f219		       ca		      dex
     58  f219					      REPEND
     59  f21a		       ca		      dex
     60  f21b					      REPEND
     61  f21b
     62  f21b				   .spider_control_check_down
     63  f21b		       2a		      rol
     64  f21c		       30 02		      bmi	.spider_control_check_up
     65  f21e
     66  f21e					      REPEAT	#SPIDER_VEL_Y
     67  f21e		       88		      dey
     66  f21e					      REPEND
     67  f21f		       88		      dey
     68  f220					      REPEND
     69  f220
     70  f220				   .spider_control_check_up
     71  f220		       2a		      rol
     72  f221		       30 02		      bmi	.spider_control_sprite
     73  f223
     74  f223					      REPEAT	#SPIDER_VEL_Y
     75  f223		       c8		      iny
     74  f223					      REPEND
     75  f224		       c8		      iny
     76  f225					      REPEND
     77  f225
     78  f225				   .spider_control_sprite
     79  f225							; Control Sprite
     80  f225		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f227
     82  f227				   .spider_control_sprite_x
     83  f227		       e4 9d		      cpx	SpiderPos
     84  f229		       90 04		      bcc	.spider_control_sprite_left
     85  f22b		       f0 09		      beq	.spider_control_sprite_y
     86  f22d		       b0 05		      bcs	.spider_control_sprite_right
     87  f22f
     88  f22f				   .spider_control_sprite_left
     89  f22f		       09 80		      ora	#%10000000
     90  f231		       4c 36 f2 	      jmp	.spider_control_sprite_y
     91  f234
     92  f234				   .spider_control_sprite_right
     93  f234		       09 40		      ora	#%01000000
     94  f236
     95  f236				   .spider_control_sprite_y
     96  f236		       c4 9e		      cpy	SpiderPos+1
     97  f238		       90 04		      bcc	.spider_control_sprite_down
     98  f23a		       f0 09		      beq	.spider_control_sprite_store
     99  f23c		       b0 05		      bcs	.spider_control_sprite_up
    100  f23e
    101  f23e				   .spider_control_sprite_down
    102  f23e		       09 10		      ora	#%00010000
    103  f240		       4c 45 f2 	      jmp	.spider_control_sprite_store
    104  f243
    105  f243				   .spider_control_sprite_up
    106  f243		       09 20		      ora	#%00100000
    107  f245
    108  f245				   .spider_control_sprite_store
    109  f245		       c9 00		      cmp	#%00000000
    110  f247		       f0 02		      beq	.spider_control_boundary
    111  f249		       85 9f		      sta	SpiderCtrl
    112  f24b
    113  f24b				   .spider_control_boundary
    114  f24b							; Check Playfield Boundaries
    115  f24b
    116  f24b				   .spider_control_boundary_left
    117  f24b		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f24d		       b0 05		      bcs	.spider_control_boundary_right
    119  f24f		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f251		       4c 5a f2 	      jmp	.spider_control_boundary_top
    121  f254
    122  f254				   .spider_control_boundary_right
    123  f254		       e0 7e		      cpx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    124  f256		       90 02		      bcc	.spider_control_boundary_top
    125  f258		       a2 7e		      ldx	#(KERNEL_WIDTH/2)-(SPIDER_SIZE*2)-SPIDER_VEL_X
    126  f25a
    127  f25a				   .spider_control_boundary_top
    128  f25a		       c0 03		      cpy	#SPIDER_VEL_X+1
    129  f25c		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f25e		       a0 03		      ldy	#SPIDER_VEL_X+1
    131  f260		       4c 69 f2 	      jmp	.spider_control_store
    132  f263
    133  f263				   .spider_control_boundary_bottom
    134  f263		       c0 b1		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    135  f265		       90 02		      bcc	.spider_control_store
    136  f267		       a0 b1		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_VEL_Y
    137  f269
    138  f269				   .spider_control_store
    139  f269							; Store new position
    140  f269		       86 9d		      stx	SpiderPos
    141  f26b		       84 9e		      sty	SpiderPos+1
    142  f26d
    143  f26d							; TODO: Optimize this somehow?
    144  f26d				   .spider_control_sprite_assign
    145  f26d							; Skip if no change
    146  f26d		       c9 00		      cmp	#%00000000
    147  f26f		       f0 7f		      beq	.spider_control_return
    148  f271
    149  f271		       a2 00		      ldx	#%00000000	; For reflection
    150  f273
    151  f273				   .spider_control_sprite_assign_left
    152  f273		       c9 80		      cmp	#%10000000
    153  f275		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f277					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f277				   .POINTER   SET	SpiderPtr
      2  f277				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f277
      4  f277		       a9 81		      LDA	#<.ADDRESS
      5  f279		       85 9b		      STA	.POINTER
      6  f27b		       a9 f3		      LDA	#>.ADDRESS
      7  f27d		       85 9c		      STA	.POINTER+1
      8  f27f
    155  f27f		       a2 08		      ldx	#%00001000
    156  f281		       4c ee f2 	      jmp	.spider_control_reflect
    157  f284
    158  f284				   .spider_control_sprite_assign_right
    159  f284		       c9 40		      cmp	#%01000000
    160  f286		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f288					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f288				   .POINTER   SET	SpiderPtr
      2  f288				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f288
      4  f288		       a9 81		      LDA	#<.ADDRESS
      5  f28a		       85 9b		      STA	.POINTER
      6  f28c		       a9 f3		      LDA	#>.ADDRESS
      7  f28e		       85 9c		      STA	.POINTER+1
      8  f290
    162  f290		       4c ee f2 	      jmp	.spider_control_reflect
    163  f293
    164  f293				   .spider_control_sprite_assign_top
    165  f293		       c9 20		      cmp	#%00100000
    166  f295		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f297					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f297				   .POINTER   SET	SpiderPtr
      2  f297				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f297
      4  f297		       a9 71		      LDA	#<.ADDRESS
      5  f299		       85 9b		      STA	.POINTER
      6  f29b		       a9 f3		      LDA	#>.ADDRESS
      7  f29d		       85 9c		      STA	.POINTER+1
      8  f29f
    168  f29f		       4c ee f2 	      jmp	.spider_control_reflect
    169  f2a2
    170  f2a2				   .spider_control_sprite_assign_bottom
    171  f2a2		       c9 10		      cmp	#%00010000
    172  f2a4		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f2a6					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f2a6				   .POINTER   SET	SpiderPtr
      2  f2a6				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f2a6
      4  f2a6		       a9 91		      LDA	#<.ADDRESS
      5  f2a8		       85 9b		      STA	.POINTER
      6  f2aa		       a9 f3		      LDA	#>.ADDRESS
      7  f2ac		       85 9c		      STA	.POINTER+1
      8  f2ae
    174  f2ae		       4c ee f2 	      jmp	.spider_control_reflect
    175  f2b1
    176  f2b1				   .spider_control_sprite_assign_top_right
    177  f2b1		       c9 60		      cmp	#%01100000
    178  f2b3		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f2b5					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f2b5				   .POINTER   SET	SpiderPtr
      2  f2b5				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f2b5
      4  f2b5		       a9 79		      LDA	#<.ADDRESS
      5  f2b7		       85 9b		      STA	.POINTER
      6  f2b9		       a9 f3		      LDA	#>.ADDRESS
      7  f2bb		       85 9c		      STA	.POINTER+1
      8  f2bd
    180  f2bd		       4c ee f2 	      jmp	.spider_control_reflect
    181  f2c0
    182  f2c0				   .spider_control_sprite_assign_bottom_right
    183  f2c0		       c9 50		      cmp	#%01010000
    184  f2c2		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f2c4					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f2c4				   .POINTER   SET	SpiderPtr
      2  f2c4				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f2c4
      4  f2c4		       a9 89		      LDA	#<.ADDRESS
      5  f2c6		       85 9b		      STA	.POINTER
      6  f2c8		       a9 f3		      LDA	#>.ADDRESS
      7  f2ca		       85 9c		      STA	.POINTER+1
      8  f2cc
    186  f2cc		       4c ee f2 	      jmp	.spider_control_reflect
    187  f2cf
    188  f2cf				   .spider_control_sprite_assign_bottom_left
    189  f2cf		       c9 90		      cmp	#%10010000
    190  f2d1		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f2d3					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f2d3				   .POINTER   SET	SpiderPtr
      2  f2d3				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f2d3
      4  f2d3		       a9 89		      LDA	#<.ADDRESS
      5  f2d5		       85 9b		      STA	.POINTER
      6  f2d7		       a9 f3		      LDA	#>.ADDRESS
      7  f2d9		       85 9c		      STA	.POINTER+1
      8  f2db
    192  f2db		       a2 08		      ldx	#%00001000
    193  f2dd		       4c ee f2 	      jmp	.spider_control_reflect
    194  f2e0
    195  f2e0				   .spider_control_sprite_assign_top_left
    196  f2e0		       c9 a0		      cmp	#%10100000
    197  f2e2		       d0 0a		      bne	.spider_control_reflect
      0  f2e4					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f2e4				   .POINTER   SET	SpiderPtr
      2  f2e4				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f2e4
      4  f2e4		       a9 79		      LDA	#<.ADDRESS
      5  f2e6		       85 9b		      STA	.POINTER
      6  f2e8		       a9 f3		      LDA	#>.ADDRESS
      7  f2ea		       85 9c		      STA	.POINTER+1
      8  f2ec
    199  f2ec		       a2 08		      ldx	#%00001000
    200  f2ee
    201  f2ee				   .spider_control_reflect
    202  f2ee		       86 0b		      stx	REFP0
    203  f2f0
    204  f2f0				   .spider_control_return
    205  f2f0		       60		      rts
    206  f2f1
    207  f2f1				   SpiderCollision
    208  f2f1		       a9 56		      lda	#SPIDER_COLOR
    209  f2f3
    210  f2f3				   .spider_collision_m0
    211  f2f3							; Check stun status
    212  f2f3		       a6 ac		      ldx	BugStunned
    213  f2f5		       e0 00		      cpx	#0
    214  f2f7		       d0 04		      bne	.spider_collision_m1
    215  f2f9
    216  f2f9							; Collision for M0 (V set)
    217  f2f9		       24 00		      bit	CXM0P
    218  f2fb		       70 0d		      bvs	.spider_collision_active
    219  f2fd
    220  f2fd				   .spider_collision_m1
    221  f2fd							; Check stun status
    222  f2fd		       a6 ad		      ldx	BugStunned+1
    223  f2ff		       e0 00		      cpx	#0
    224  f301		       d0 09		      bne	.spider_collision_return
    225  f303
    226  f303							; Collision for M1 (N set)
    227  f303		       24 01		      bit	CXM1P
    228  f305		       30 03		      bmi	.spider_collision_active
    229  f307
    230  f307		       4c 0c f3 	      jmp	.spider_collision_return
    231  f30a
    232  f30a				   .spider_collision_active
    233  f30a		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f30c
    235  f30c				   .spider_collision_return
    236  f30c		       85 a0		      sta	SpiderColor
    237  f30e		       60		      rts
    238  f30f
    239  f30f				   SpiderPosition
    240  f30f
    241  f30f							; Set Position
    242  f30f		       a2 00		      ldx	#0	; Object (player0)
    243  f311		       a5 9d		      lda	SpiderPos	; X Position
    244  f313		       20 00 f0 	      jsr	PosObject
    245  f316
    246  f316		       60		      rts
    247  f317
    248  f317							; Scanline Draw
    249  f317
    250  f317				   SpiderDrawStart
    251  f317
    252  f317							; Set player 0 to be double size
    253  f317							; and missile 0 to be 4 clock size
    254  f317		       a5 81		      lda	NuSiz0
    255  f319		       09 07		      ora	#%00000111
    256  f31b		       85 81		      sta	NuSiz0
    257  f31d		       85 04		      sta	NUSIZ0
    258  f31f
    259  f31f							; Set sprite color
    260  f31f		       a5 a0		      lda	SpiderColor
    261  f321		       85 06		      sta	COLUP0
    262  f323
    263  f323							; Determine if we need to use vertical delay (odd line)
    264  f323		       a5 9e		      lda	SpiderPos+1	; Y Position
    265  f325		       4a		      lsr
    266  f326		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f328
    268  f328		       a0 01		      ldy	#1
    269  f32a		       4c 2f f3 	      jmp	.spider_draw_start_set_delay
    270  f32d
    271  f32d				   .spider_draw_start_nodelay
    272  f32d		       a0 00		      ldy	#0
    273  f32f
    274  f32f				   .spider_draw_start_set_delay
    275  f32f		       84 25		      sty	VDELP0
    276  f331
    277  f331				   .spider_draw_start_pos
    278  f331							; Calculate starting position
    279  f331		       18		      clc
    280  f332		       69 10		      adc	#SPIDER_SIZE
    281  f334		       85 a2		      sta	SpiderDrawPos
    282  f336
    283  f336							; Initialize sprite index
    284  f336		       a9 00		      lda	#0
    285  f338		       85 a1		      sta	SpiderIndex
    286  f33a
    287  f33a		       60		      rts
    288  f33b
    289  f33b				   SpiderDraw
    290  f33b
    291  f33b		       a4 a1		      ldy	SpiderIndex
    292  f33d		       c0 10		      cpy	#(SPIDER_SPRITE_SIZE*2)
    293  f33f		       f0 1f		      beq	.spider_draw_blank	; At end of sprite
    294  f341		       b0 28		      bcs	.spider_draw_return	; Completed drawing sprite
    295  f343		       c0 00		      cpy	#0
    296  f345		       d0 06		      bne	.spider_draw_line
    297  f347
    298  f347							; Use half scanline
    299  f347		       a5 84		      lda	Temp+1
    300  f349
    301  f349		       e5 a2		      sbc	SpiderDrawPos
    302  f34b		       10 1e		      bpl	.spider_draw_return	; Not yet to draw sprite
    303  f34d
    304  f34d				   .spider_draw_line
    305  f34d		       98		      tya
    306  f34e		       4a		      lsr
    307  f34f		       b0 09		      bcs	.spider_draw_skip
    308  f351		       a8		      tay
    309  f352
    310  f352		       b1 9b		      lda	(SpiderPtr),y
    311  f354		       85 1b		      sta	GRP0
    312  f356
    313  f356							; Using this for now until we have another sprite
    314  f356		       a9 00		      lda	#0
    315  f358		       85 1c		      sta	GRP1
    316  f35a
    317  f35a				   .spider_draw_skip
    318  f35a		       a4 a1		      ldy	SpiderIndex
    319  f35c		       c8		      iny
    320  f35d		       84 a1		      sty	SpiderIndex
    321  f35f		       60		      rts		; Early return
    322  f360
    323  f360				   .spider_draw_blank
    324  f360		       a9 00		      lda	#0
    325  f362		       85 1b		      sta	GRP0
    326  f364
    327  f364							; Using this for now until we have another sprite
    328  f364		       a9 00		      lda	#0
    329  f366		       85 1c		      sta	GRP1
    330  f368
    331  f368							; Push index to be one above
    332  f368		       c8		      iny
    333  f369		       84 a1		      sty	SpiderIndex
    334  f36b
    335  f36b				   .spider_draw_return
    336  f36b		       60		      rts
    337  f36c
    338  f36c				   SpiderClean
    339  f36c
    340  f36c							; Clear out Player0 sprite
    341  f36c		       a9 00		      lda	#0
    342  f36e		       85 1b		      sta	GRP0
    343  f370
    344  f370		       60		      rts
    345  f371
    346  f371							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f371					      include	"objects/spider_sprite.asm"
      1  f371				   SpiderSprite
      2  f371
      3  f371		       99		      .BYTE.b	%10011001
      4  f372		       bd		      .BYTE.b	%10111101
      5  f373		       99		      .BYTE.b	%10011001
      6  f374		       7e		      .BYTE.b	%01111110
      7  f375		       3c		      .BYTE.b	%00111100
      8  f376		       7e		      .BYTE.b	%01111110
      9  f377		       bd		      .BYTE.b	%10111101
     10  f378		       99		      .BYTE.b	%10011001
     11  f379
     12  f379		       0b		      .BYTE.b	%00001011
     13  f37a		       13		      .BYTE.b	%00010011
     14  f37b		       1c		      .BYTE.b	%00011100
     15  f37c		       2d		      .BYTE.b	%00101101
     16  f37d		       f6		      .BYTE.b	%11110110
     17  f37e		       b8		      .BYTE.b	%10111000
     18  f37f		       10		      .BYTE.b	%00010000
     19  f380		       30		      .BYTE.b	%00110000
     20  f381
     21  f381		       c7		      .BYTE.b	%11000111
     22  f382		       28		      .BYTE.b	%00101000
     23  f383		       7a		      .BYTE.b	%01111010
     24  f384		       ff		      .BYTE.b	%11111111
     25  f385		       ff		      .BYTE.b	%11111111
     26  f386		       7a		      .BYTE.b	%01111010
     27  f387		       28		      .BYTE.b	%00101000
     28  f388		       c7		      .BYTE.b	%11000111
     29  f389
     30  f389		       30		      .BYTE.b	%00110000
     31  f38a		       10		      .BYTE.b	%00010000
     32  f38b		       b8		      .BYTE.b	%10111000
     33  f38c		       f6		      .BYTE.b	%11110110
     34  f38d		       2d		      .BYTE.b	%00101101
     35  f38e		       1c		      .BYTE.b	%00011100
     36  f38f		       13		      .BYTE.b	%00010011
     37  f390		       0b		      .BYTE.b	%00001011
     38  f391
     39  f391		       99		      .BYTE.b	%10011001
     40  f392		       bd		      .BYTE.b	%10111101
     41  f393		       7e		      .BYTE.b	%01111110
     42  f394		       3c		      .BYTE.b	%00111100
     43  f395		       7e		      .BYTE.b	%01111110
     44  f396		       99		      .BYTE.b	%10011001
     45  f397		       bd		      .BYTE.b	%10111101
     46  f398		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f399					      include	"objects/line.asm"
      1  f399							;================
      2  f399							; Line (ball)
      3  f399							;================
      4  f399
      5  f399							; Constants
      6  f399
      7  f399		       00 04	   LINE_SIZE  =	4
      8  f399		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f399		       00 04	   LINE_VEL_X =	4
     10  f399		       00 04	   LINE_VEL_Y =	4
     11  f399
     12  f399		       00 08	   LINE_AUDIO_C =	8
     13  f399		       00 01	   LINE_AUDIO_F =	1
     14  f399		       00 04	   LINE_AUDIO_V =	4
     15  f399
     16  f399		       00 08	   LINE_SAMPLE_LEN =	8
     17  f399		       00 03	   LINE_SAMPLE_C =	3
     18  f399		       00 01	   LINE_SAMPLE_F =	1
     19  f399		       00 04	   LINE_SAMPLE_V =	4
     20  f399
     21  f399							; Initialization
     22  f399
     23  f399							;LineInit:
     24  f399
     25  f399							; Initial Line Control
     26  f399							;    lda #0
     27  f399							;    sta LineEnabled
     28  f399							;    sta LinePos+0
     29  f399							;    sta LinePos+1
     30  f399							;    sta LineVelocity+0
     31  f399							;    sta LineVelocity+1
     32  f399							;    sta LineStartPos+0
     33  f399							;    sta LineStartPos+1
     34  f399							;    sta LineDrawPos+0
     35  f399							;    sta LineDrawPos+1
     36  f399
     37  f399							;    rts
     38  f399
     39  f399							; Frame Update
     40  f399
     41  f399				   LineUpdate
     42  f399		       20 a3 f3 	      jsr	LineControl
     43  f39c		       20 55 f4 	      jsr	LineObject
     44  f39f		       20 9c f4 	      jsr	LineCollision
     45  f3a2		       60		      rts
     46  f3a3
     47  f3a3				   LineControl
     48  f3a3
     49  f3a3							; Check if Fire Button on controller 1 is pressed
     50  f3a3		       a5 0c		      lda	INPT4
     51  f3a5		       30 0a		      bmi	.line_control_skip
     52  f3a7
     53  f3a7		       24 a3		      bit	LineEnabled
     54  f3a9		       30 06		      bmi	.line_control_skip
     55  f3ab
     56  f3ab		       a5 9f		      lda	SpiderCtrl
     57  f3ad		       c9 00		      cmp	#0
     58  f3af		       d0 03		      bne	.line_control_fire
     59  f3b1
     60  f3b1				   .line_control_skip
     61  f3b1		       4c 54 f4 	      jmp	.line_control_return
     62  f3b4
     63  f3b4				   .line_control_fire
     64  f3b4		       20 f2 f4 	      jsr	LineEnable
     65  f3b7
     66  f3b7				   .line_control_x
     67  f3b7		       a5 9f		      lda	SpiderCtrl
     68  f3b9		       29 c0		      and	#%11000000
     69  f3bb		       f0 0e		      beq	.line_control_x_none
     70  f3bd				   .line_control_x_left
     71  f3bd		       c9 80		      cmp	#%10000000
     72  f3bf		       d0 05		      bne	.line_control_x_right
     73  f3c1
     74  f3c1		       a9 fc		      lda	#-LINE_VEL_X
     75  f3c3		       4c cd f3 	      jmp	.line_control_x_store
     76  f3c6				   .line_control_x_right
     77  f3c6		       a9 04		      lda	#LINE_VEL_X
     78  f3c8		       4c cd f3 	      jmp	.line_control_x_store
     79  f3cb				   .line_control_x_none
     80  f3cb		       a9 00		      lda	#0
     81  f3cd				   .line_control_x_store
     82  f3cd		       85 a6		      sta	LineVelocity
     83  f3cf
     84  f3cf				   .line_control_y
     85  f3cf		       a5 9f		      lda	SpiderCtrl
     86  f3d1		       29 30		      and	#%00110000
     87  f3d3		       f0 0e		      beq	.line_control_y_none
     88  f3d5				   .line_control_y_up
     89  f3d5		       c9 20		      cmp	#%00100000
     90  f3d7		       d0 05		      bne	.line_control_y_down
     91  f3d9
     92  f3d9		       a9 04		      lda	#LINE_VEL_Y
     93  f3db		       4c e5 f3 	      jmp	.line_control_y_store
     94  f3de				   .line_control_y_down
     95  f3de		       a9 fc		      lda	#-LINE_VEL_Y
     96  f3e0		       4c e5 f3 	      jmp	.line_control_y_store
     97  f3e3				   .line_control_y_none
     98  f3e3		       a9 00		      lda	#0
     99  f3e5				   .line_control_y_store
    100  f3e5		       85 a7		      sta	LineVelocity+1
    101  f3e7
    102  f3e7				   .line_control_position
    103  f3e7
    104  f3e7		       a2 00		      ldx	#0	; offsetX
    105  f3e9		       a0 00		      ldy	#0	; offsetY
    106  f3eb
    107  f3eb		       a5 9f		      lda	SpiderCtrl
    108  f3ed		       29 f0		      and	#%11110000
    109  f3ef
    110  f3ef				   .line_control_position_left
    111  f3ef		       c9 80		      cmp	#%10000000
    112  f3f1		       d0 07		      bne	.line_control_position_right
    113  f3f3
    114  f3f3		       a2 04		      ldx	#LINE_SIZE
    115  f3f5		       a0 10		      ldy	#SPIDER_SIZE
    116  f3f7		       4c 3c f4 	      jmp	.line_control_position_store
    117  f3fa
    118  f3fa				   .line_control_position_right
    119  f3fa		       c9 40		      cmp	#%01000000
    120  f3fc		       d0 07		      bne	.line_control_position_top
    121  f3fe
    122  f3fe		       a2 20		      ldx	#SPIDER_SIZE*2
    123  f400		       a0 10		      ldy	#SPIDER_SIZE
    124  f402		       4c 3c f4 	      jmp	.line_control_position_store
    125  f405
    126  f405				   .line_control_position_top
    127  f405		       c9 20		      cmp	#%00100000
    128  f407		       d0 07		      bne	.line_control_position_bottom
    129  f409
    130  f409		       a2 10		      ldx	#SPIDER_SIZE
    131  f40b		       a0 20		      ldy	#SPIDER_SIZE*2
    132  f40d		       4c 3c f4 	      jmp	.line_control_position_store
    133  f410
    134  f410				   .line_control_position_bottom
    135  f410		       c9 10		      cmp	#%00010000
    136  f412		       d0 05		      bne	.line_control_position_top_right
    137  f414
    138  f414		       a2 10		      ldx	#SPIDER_SIZE
    139  f416		       4c 3c f4 	      jmp	.line_control_position_store
    140  f419
    141  f419				   .line_control_position_top_right
    142  f419		       c9 60		      cmp	#%01100000
    143  f41b		       d0 07		      bne	.line_control_position_bottom_right
    144  f41d
    145  f41d		       a2 20		      ldx	#SPIDER_SIZE*2
    146  f41f		       a0 20		      ldy	#SPIDER_SIZE*2
    147  f421		       4c 3c f4 	      jmp	.line_control_position_store
    148  f424
    149  f424				   .line_control_position_bottom_right
    150  f424		       c9 50		      cmp	#%01010000
    151  f426		       d0 05		      bne	.line_control_position_bottom_left
    152  f428
    153  f428		       a2 20		      ldx	#SPIDER_SIZE*2
    154  f42a		       4c 3c f4 	      jmp	.line_control_position_store
    155  f42d
    156  f42d				   .line_control_position_bottom_left
    157  f42d		       c9 90		      cmp	#%10010000
    158  f42f		       d0 03		      bne	.line_control_position_top_left
    159  f431
    160  f431							; No Offset
    161  f431		       4c 3c f4 	      jmp	.line_control_position_store
    162  f434
    163  f434				   .line_control_position_top_left
    164  f434		       c9 a0		      cmp	#%10100000
    165  f436		       d0 04		      bne	.line_control_position_store
    166  f438
    167  f438		       a2 04		      ldx	#LINE_SIZE
    168  f43a		       a0 20		      ldy	#SPIDER_SIZE*2
    169  f43c
    170  f43c				   .line_control_position_store
    171  f43c
    172  f43c							; Apply offsetX to playerX
    173  f43c		       a5 9d		      lda	SpiderPos
    174  f43e		       86 83		      stx	Temp
    175  f440		       18		      clc
    176  f441		       65 83		      adc	Temp
    177  f443		       aa		      tax
    178  f444
    179  f444							; Apply offsetY to playerY
    180  f444		       a5 9e		      lda	SpiderPos+1
    181  f446		       84 83		      sty	Temp
    182  f448		       18		      clc
    183  f449		       65 83		      adc	Temp
    184  f44b		       a8		      tay
    185  f44c
    186  f44c		       86 a4		      stx	LinePos
    187  f44e		       84 a5		      sty	LinePos+1
    188  f450		       86 a8		      stx	LineStartPos
    189  f452		       84 a9		      sty	LineStartPos+1
    190  f454
    191  f454				   .line_control_return
    192  f454		       60		      rts
    193  f455
    194  f455				   LineObject
    195  f455
    196  f455							; Check if line is enabled
    197  f455		       24 a3		      bit	LineEnabled
    198  f457		       10 42		      bpl	.line_object_return
    199  f459
    200  f459							; Load position
    201  f459		       a6 a4		      ldx	LinePos
    202  f45b		       a4 a5		      ldy	LinePos+1
    203  f45d
    204  f45d				   .line_object_distance
    205  f45d
    206  f45d							; Check distance from player with absolute value differences
    207  f45d
    208  f45d				   .line_object_distance_x
    209  f45d		       8a		      txa
    210  f45e		       18		      clc
    211  f45f		       e5 a8		      sbc	LineStartPos
    212  f461		       b0 04		      bcs	.line_object_distance_x_check
    213  f463		       49 ff		      eor	#$FF	; C flag is clear here
    214  f465		       69 01		      adc	#$01	; form two's complement
    215  f467				   .line_object_distance_x_check		; Jumps to if positive
    216  f467		       c9 40		      cmp	#LINE_DISTANCE
    217  f469		       b0 2d		      bcs	.line_object_disable
    218  f46b
    219  f46b				   .line_object_distance_y
    220  f46b		       98		      tya
    221  f46c		       18		      clc
    222  f46d		       e5 a9		      sbc	LineStartPos+1
    223  f46f		       b0 04		      bcs	.line_object_distance_y_check
    224  f471		       49 ff		      eor	#$FF	; C flag is clear here
    225  f473		       69 01		      adc	#$01	; form two's complement
    226  f475				   .line_object_distance_y_check		; Jumps to if positive
    227  f475		       c9 40		      cmp	#LINE_DISTANCE
    228  f477		       b0 1f		      bcs	.line_object_disable
    229  f479
    230  f479				   .line_object_boundary
    231  f479				   .line_object_boundary_left
    232  f479		       e0 04		      cpx	#LINE_VEL_X
    233  f47b		       90 1b		      bcc	.line_object_disable
    234  f47d				   .line_object_boundary_right
    235  f47d		       e0 9c		      cpx	#160-LINE_VEL_X
    236  f47f		       b0 17		      bcs	.line_object_disable
    237  f481				   .line_object_boundary_bottom
    238  f481		       c0 04		      cpy	#LINE_VEL_Y
    239  f483		       90 13		      bcc	.line_object_disable
    240  f485				   .line_object_boundary_top
    241  f485		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    242  f487		       b0 0f		      bcs	.line_object_disable
    243  f489
    244  f489				   .line_object_velocity
    245  f489
    246  f489							; Apply Velocity
    247  f489		       8a		      txa
    248  f48a		       18		      clc
    249  f48b		       65 a6		      adc	LineVelocity
    250  f48d		       85 a4		      sta	LinePos
    251  f48f
    252  f48f		       98		      tya
    253  f490		       18		      clc
    254  f491		       65 a7		      adc	LineVelocity+1
    255  f493		       85 a5		      sta	LinePos+1
    256  f495
    257  f495		       4c 9b f4 	      jmp	.line_object_return
    258  f498
    259  f498				   .line_object_disable
    260  f498		       20 00 f5 	      jsr	LineDisable
    261  f49b
    262  f49b				   .line_object_return
    263  f49b		       60		      rts
    264  f49c
    265  f49c				   LineCollision
    266  f49c
    267  f49c		       a9 78		      lda	#BUG_STUN_LENGTH
    268  f49e
    269  f49e				   .line_collision_m0
    270  f49e		       24 04		      bit	CXM0FB
    271  f4a0		       50 08		      bvc	.line_collision_m1
    272  f4a2
    273  f4a2							; Set stun timer
    274  f4a2		       85 ac		      sta	BugStunned+0
    275  f4a4
    276  f4a4							; Disable line
    277  f4a4		       20 00 f5 	      jsr	LineDisable
    278  f4a7		       4c b3 f4 	      jmp	.line_collision_sample
    279  f4aa
    280  f4aa				   .line_collision_m1
    281  f4aa		       24 05		      bit	CXM1FB
    282  f4ac		       50 08		      bvc	.line_collision_return
    283  f4ae
    284  f4ae							; Set stun timer
    285  f4ae		       85 ad		      sta	BugStunned+1
    286  f4b0
    287  f4b0							; Disable line
    288  f4b0		       20 00 f5 	      jsr	LineDisable
    289  f4b3
    290  f4b3				   .line_collision_sample
    291  f4b3		       20 24 f5 	      jsr	LineSample
    292  f4b6
    293  f4b6				   .line_collision_return
    294  f4b6		       60		      rts
    295  f4b7
    296  f4b7				   LinePosition
    297  f4b7
    298  f4b7							; Set Line Position
    299  f4b7		       a2 04		      ldx	#4	; Object (ball)
    300  f4b9		       a5 a4		      lda	LinePos	; X Position
    301  f4bb		       20 00 f0 	      jsr	PosObject
    302  f4be
    303  f4be		       60		      rts
    304  f4bf
    305  f4bf							; Scanline Draw
    306  f4bf
    307  f4bf				   LineDrawStart
    308  f4bf
    309  f4bf							; Set ball size to be 4 clocks (4/5 bits)
    310  f4bf		       a5 80		      lda	CtrlPf
    311  f4c1		       29 cf		      and	#%11001111
    312  f4c3		       09 20		      ora	#%00100000
    313  f4c5		       85 80		      sta	CtrlPf
    314  f4c7		       85 0a		      sta	CTRLPF
    315  f4c9
    316  f4c9							; Determine if we need to use vertical delay (oven line)
    317  f4c9		       a5 a5		      lda	LinePos+1
    318  f4cb		       4a		      lsr
    319  f4cc		       90 05		      bcc	.line_draw_start_nodelay
    320  f4ce
    321  f4ce		       a0 01		      ldy	#1
    322  f4d0		       4c d5 f4 	      jmp	.line_draw_start_set_delay
    323  f4d3
    324  f4d3				   .line_draw_start_nodelay
    325  f4d3		       a0 00		      ldy	#0
    326  f4d5
    327  f4d5				   .line_draw_start_set_delay
    328  f4d5		       84 27		      sty	VDELBL
    329  f4d7
    330  f4d7				   .line_draw_start_pos
    331  f4d7							; Calculate starting position
    332  f4d7		       18		      clc
    333  f4d8		       85 aa		      sta	LineDrawPos+0
    334  f4da		       69 02		      adc	#LINE_SIZE/2
    335  f4dc		       85 ab		      sta	LineDrawPos+1
    336  f4de
    337  f4de		       60		      rts
    338  f4df
    339  f4df				   LineDraw
    340  f4df
    341  f4df		       a0 00		      ldy	#%00000000
    342  f4e1
    343  f4e1							; Check if visible
    344  f4e1		       24 a3		      bit	LineEnabled
    345  f4e3		       10 0a		      bpl	.line_draw_off
    346  f4e5
    347  f4e5							; Load half scanline
    348  f4e5							;    lda Temp+1
    349  f4e5
    350  f4e5							; Top
    351  f4e5		       c5 ab		      cmp	LineDrawPos+1
    352  f4e7		       b0 06		      bcs	.line_draw_off
    353  f4e9
    354  f4e9							; Bottom
    355  f4e9		       c5 aa		      cmp	LineDrawPos+0
    356  f4eb		       90 02		      bcc	.line_draw_off
    357  f4ed
    358  f4ed				   .line_draw_on
    359  f4ed		       a0 02		      ldy	#%00000010
    360  f4ef
    361  f4ef				   .line_draw_off
    362  f4ef		       84 1f		      sty	ENABL
    363  f4f1
    364  f4f1		       60		      rts
    365  f4f2
    366  f4f2							;LineClean:
    367  f4f2
    368  f4f2							; Clear out Line
    369  f4f2							;    lda #0
    370  f4f2							;    sta ENABL
    371  f4f2
    372  f4f2							;    rts
    373  f4f2
    374  f4f2				   LineEnable
    375  f4f2		       a9 80		      lda	#%10000000
    376  f4f4		       85 a3		      sta	LineEnabled
    377  f4f6
    378  f4f6		       a5 90		      lda	SampleStep
    379  f4f8		       c9 00		      cmp	#0
    380  f4fa		       d0 03		      bne	.line_enable_return
    381  f4fc
    382  f4fc		       20 0e f5 	      jsr	LineAudioPlay
    383  f4ff
    384  f4ff				   .line_enable_return
    385  f4ff		       60		      rts
    386  f500
    387  f500				   LineDisable
    388  f500		       a9 00		      lda	#0
    389  f502		       85 a3		      sta	LineEnabled
    390  f504
    391  f504		       a5 90		      lda	SampleStep
    392  f506		       c9 00		      cmp	#0
    393  f508		       d0 03		      bne	.line_disable_return
    394  f50a
    395  f50a		       20 1b f5 	      jsr	LineAudioMute
    396  f50d
    397  f50d				   .line_disable_return
    398  f50d		       60		      rts
    399  f50e
    400  f50e				   LineAudioPlay
    401  f50e		       a9 08		      lda	#LINE_AUDIO_C
    402  f510		       85 16		      sta	AUDC1
    403  f512		       a9 01		      lda	#LINE_AUDIO_F
    404  f514		       85 18		      sta	AUDF1
    405  f516		       a9 04		      lda	#LINE_AUDIO_V
    406  f518		       85 1a		      sta	AUDV1
    407  f51a		       60		      rts
    408  f51b
    409  f51b				   LineAudioMute
    410  f51b		       a9 00		      lda	#0
    411  f51d		       85 1a		      sta	AUDV1
    412  f51f		       85 18		      sta	AUDF1
    413  f521		       85 16		      sta	AUDC1
    414  f523		       60		      rts
    415  f524
    416  f524				   LineSample
    417  f524		       a9 08		      lda	#LINE_SAMPLE_LEN
    418  f526		       85 90		      sta	SampleStep
    419  f528		       a9 03		      lda	#LINE_SAMPLE_C
    420  f52a		       85 16		      sta	AUDC1
    421  f52c		       a9 01		      lda	#LINE_SAMPLE_F
    422  f52e		       85 18		      sta	AUDF1
    423  f530		       a9 04		      lda	#LINE_SAMPLE_V
    424  f532		       85 1a		      sta	AUDV1
    425  f534		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f535					      include	"objects/bug.asm"
      1  f535							;======================
      2  f535							; Bugs (missiles 0 & 1)
      3  f535							;======================
      4  f535
      5  f535							; Constants
      6  f535
      7  f535		       00 08	   BUG_SIZE   =	8
      8  f535		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f535		       00 02	   BUG_SPEED  =	2
     10  f535		       00 78	   BUG_STUN_LENGTH =	120
     11  f535		       00 04	   BUG_POINTS =	4
     12  f535
     13  f535		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     14  f535		       00 38	   BUG_COLOR_STUN =	#$38
     15  f535
     16  f535		       00 1e	   BUG_SAMPLE_LEN =	30
     17  f535		       00 03	   BUG_SAMPLE_C =	3
     18  f535		       00 14	   BUG_SAMPLE_F =	20
     19  f535		       00 04	   BUG_SAMPLE_V =	4
     20  f535
     21  f535							; Initialization
     22  f535
     23  f535				   BugInit
     24  f535
     25  f535							; Initialize Bugs
     26  f535		       a2 01		      ldx	#1
     27  f537
     28  f537				   .bug_init_loop
     29  f537		       20 3e f5 	      jsr	BugReset
     30  f53a
     31  f53a		       ca		      dex
     32  f53b		       10 fa		      bpl	.bug_init_loop
     33  f53d
     34  f53d		       60		      rts
     35  f53e
     36  f53e				   BugReset		; x = bug (0 or 1)
     37  f53e
     38  f53e							; Set random position
     39  f53e		       20 13 f0 	      jsr	Random
     40  f541
     41  f541		       a5 85		      lda	Rand8
     42  f543		       29 7f		      and	#$7f
     43  f545		       95 ae		      sta	BugPosX,x
     44  f547
     45  f547		       a5 86		      lda	Rand16
     46  f549		       29 7f		      and	#$7f
     47  f54b		       95 b0		      sta	BugPosY,x
     48  f54d
     49  f54d							; Set as active
     50  f54d		       a9 00		      lda	#0
     51  f54f		       95 ac		      sta	BugStunned,x
     52  f551
     53  f551							; Reset Color
     54  f551		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     55  f553		       95 b2		      sta	BugColor,x
     56  f555
     57  f555		       60		      rts
     58  f556
     59  f556							; Frame Update
     60  f556
     61  f556				   BugUpdate
     62  f556
     63  f556		       a2 01		      ldx	#1
     64  f558				   .bug_update_loop
     65  f558		       86 83		      stx	Temp+0
     66  f55a
     67  f55a		       b5 ac		      lda	BugStunned,x
     68  f55c		       c9 00		      cmp	#0
     69  f55e		       f0 08		      beq	.bug_update_active
     70  f560
     71  f560				   .bug_update_stunned
     72  f560		       d6 ac		      dec	BugStunned,x
     73  f562		       20 d8 f5 	      jsr	BugStunCollision
     74  f565		       4c 6e f5 	      jmp	.bug_update_next
     75  f568
     76  f568				   .bug_update_active
     77  f568		       20 74 f5 	      jsr	BugMovement
     78  f56b		       20 c7 f5 	      jsr	BugCollision
     79  f56e
     80  f56e				   .bug_update_next
     81  f56e		       a6 83		      ldx	Temp+0
     82  f570		       ca		      dex
     83  f571		       10 e5		      bpl	.bug_update_loop
     84  f573
     85  f573		       60		      rts
     86  f574
     87  f574				   BugMovement
     88  f574
     89  f574				   .bug_movement_random
     90  f574		       20 13 f0 	      jsr	Random
     91  f577		       29 03		      and	#%00000011
     92  f579		       85 84		      sta	Temp+1
     93  f57b
     94  f57b				   .bug_movement_load
     95  f57b							; Load x and y values
     96  f57b		       a6 83		      ldx	Temp+0
     97  f57d		       b5 ae		      lda	BugPosX,x
     98  f57f		       b4 b0		      ldy	BugPosY,x
     99  f581		       aa		      tax
    100  f582
    101  f582				   .bug_movement_x
    102  f582							; Alter X Position
    103  f582		       a5 84		      lda	Temp+1
    104  f584		       29 01		      and	#%00000001
    105  f586
    106  f586				   .bug_movement_x_left
    107  f586		       c9 01		      cmp	#1
    108  f588		       d0 05		      bne	.bug_movement_x_right
    109  f58a					      REPEAT	#BUG_SPEED
    110  f58a		       ca		      dex
    109  f58a					      REPEND
    110  f58b		       ca		      dex
    111  f58c					      REPEND
    112  f58c		       4c 91 f5 	      jmp	.bug_movement_y
    113  f58f
    114  f58f				   .bug_movement_x_right
    115  f58f					      REPEAT	#BUG_SPEED
    116  f58f		       e8		      inx
    115  f58f					      REPEND
    116  f590		       e8		      inx
    117  f591					      REPEND
    118  f591
    119  f591				   .bug_movement_y
    120  f591							; Alter Y Position
    121  f591		       a5 84		      lda	Temp+1
    122  f593		       29 02		      and	#%00000010
    123  f595		       4a		      lsr
    124  f596
    125  f596				   .bug_movement_y_up
    126  f596		       c9 01		      cmp	#1
    127  f598		       d0 05		      bne	.bug_movement_y_down
    128  f59a					      REPEAT	#BUG_SPEED
    129  f59a		       c8		      iny
    128  f59a					      REPEND
    129  f59b		       c8		      iny
    130  f59c					      REPEND
    131  f59c		       4c a1 f5 	      jmp	.bug_movement_boundary
    132  f59f
    133  f59f				   .bug_movement_y_down
    134  f59f					      REPEAT	#BUG_SPEED
    135  f59f		       88		      dey
    134  f59f					      REPEND
    135  f5a0		       88		      dey
    136  f5a1					      REPEND
    137  f5a1
    138  f5a1				   .bug_movement_boundary
    139  f5a1
    140  f5a1				   .bug_movement_boundary_left
    141  f5a1		       e0 08		      cpx	#BUG_BOUNDARY
    142  f5a3		       b0 05		      bcs	.bug_movement_boundary_right
    143  f5a5		       a2 08		      ldx	#BUG_BOUNDARY
    144  f5a7		       4c b0 f5 	      jmp	.bug_movement_boundary_top
    145  f5aa
    146  f5aa				   .bug_movement_boundary_right
    147  f5aa		       e0 90		      cpx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    148  f5ac		       90 02		      bcc	.bug_movement_boundary_top
    149  f5ae		       a2 90		      ldx	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    150  f5b0
    151  f5b0				   .bug_movement_boundary_top
    152  f5b0		       c0 25		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    153  f5b2		       b0 05		      bcs	.bug_movement_boundary_bottom
    154  f5b4		       a0 25		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    155  f5b6		       4c bf f5 	      jmp	.bug_movement_store
    156  f5b9
    157  f5b9				   .bug_movement_boundary_bottom
    158  f5b9		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    159  f5bb		       90 02		      bcc	.bug_movement_store
    160  f5bd		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    161  f5bf
    162  f5bf				   .bug_movement_store
    163  f5bf		       8a		      txa
    164  f5c0		       a6 83		      ldx	Temp+0
    165  f5c2		       95 ae		      sta	BugPosX,x
    166  f5c4		       94 b0		      sty	BugPosY,x
    167  f5c6
    168  f5c6				   .bug_movement_return
    169  f5c6		       60		      rts
    170  f5c7
    171  f5c7				   BugCollision
    172  f5c7
    173  f5c7		       e0 01		      cpx	#1
    174  f5c9		       f0 05		      beq	.bug_collision_m1
    175  f5cb
    176  f5cb				   .bug_collision_m0
    177  f5cb							; Collision for M0 (V set)
    178  f5cb		       24 00		      bit	CXM0P
    179  f5cd		       70 06		      bvs	.bug_collision_active
    180  f5cf		       60		      rts
    181  f5d0
    182  f5d0				   .bug_collision_m1
    183  f5d0							; Collision for M1 (N set)
    184  f5d0		       24 01		      bit	CXM1P
    185  f5d2		       30 01		      bmi	.bug_collision_active
    186  f5d4		       60		      rts
    187  f5d5
    188  f5d5				   .bug_collision_active
    189  f5d5		       c6 91		      dec	ScoreValue
    190  f5d7		       60		      rts
    191  f5d8
    192  f5d8				   BugStunCollision
    193  f5d8
    194  f5d8		       e0 01		      cpx	#1
    195  f5da		       f0 05		      beq	.bug_stun_collision_m1
    196  f5dc
    197  f5dc				   .bug_stun_collision_m0
    198  f5dc							; Collision for M0 (V set)
    199  f5dc		       24 00		      bit	CXM0P
    200  f5de		       70 06		      bvs	.bug_stun_collision_active
    201  f5e0		       60		      rts
    202  f5e1
    203  f5e1				   .bug_stun_collision_m1
    204  f5e1							; Collision for M1 (N set)
    205  f5e1		       24 01		      bit	CXM1P
    206  f5e3		       30 01		      bmi	.bug_stun_collision_active
    207  f5e5		       60		      rts
    208  f5e6
    209  f5e6				   .bug_stun_collision_active
    210  f5e6							; Add points to score
    211  f5e6		       18		      clc
    212  f5e7		       a5 92		      lda	ScoreValue+1
    213  f5e9		       69 04		      adc	#BUG_POINTS
    214  f5eb		       85 92		      sta	ScoreValue+1
    215  f5ed
    216  f5ed							; Reset bug
    217  f5ed		       20 3e f5 	      jsr	BugReset
    218  f5f0
    219  f5f0							; Play sample
    220  f5f0		       20 3d f6 	      jsr	BugSample
    221  f5f3
    222  f5f3		       60		      rts
    223  f5f4
    224  f5f4							; Horizontal Positioning
    225  f5f4
    226  f5f4				   BugPosition
    227  f5f4
    228  f5f4		       a2 02		      ldx	#2
    229  f5f6		       a5 ae		      lda	BugPosX+0
    230  f5f8		       20 00 f0 	      jsr	PosObject
    231  f5fb
    232  f5fb		       a2 03		      ldx	#3
    233  f5fd		       a5 af		      lda	BugPosX+1
    234  f5ff		       20 00 f0 	      jsr	PosObject
    235  f602
    236  f602		       60		      rts
    237  f603
    238  f603							; Scanline Draw
    239  f603
    240  f603				   BugDrawStart
    241  f603
    242  f603		       a0 01		      ldy	#1
    243  f605				   .bug_draw_start_loop
    244  f605
    245  f605							; Set missile 0 & 1 to be 4 clock size
    246  f605		       b9 81 00 	      lda	NuSiz0,y
    247  f608		       09 30		      ora	#%00110000
    248  f60a		       99 81 00 	      sta	NuSiz0,y
    249  f60d		       99 04 00 	      sta	NUSIZ0,y
    250  f610
    251  f610							; Setup half scanline positions
    252  f610		       b9 b0 00 	      lda	BugPosY,y
    253  f613		       4a		      lsr
    254  f614		       99 b4 00 	      sta	BugDrawPosBottom,y
    255  f617
    256  f617		       69 04		      adc	#BUG_SIZE/2
    257  f619		       99 b6 00 	      sta	BugDrawPosTop,y
    258  f61c
    259  f61c		       88		      dey
    260  f61d		       10 e6		      bpl	.bug_draw_start_loop
    261  f61f
    262  f61f		       60		      rts
    263  f620
    264  f620				   BugDraw
    265  f620
    266  f620							; Load half scanline
    267  f620							;    lda Temp+1
    268  f620
    269  f620				   .bug_draw_0
    270  f620		       a0 00		      ldy	#%00000000
    271  f622
    272  f622							; Check top and bottom y pos
    273  f622		       c5 b6		      cmp	BugDrawPosTop+0
    274  f624		       b0 06		      bcs	.bug_draw_0_off
    275  f626
    276  f626		       c5 b4		      cmp	BugDrawPosBottom+0
    277  f628		       90 02		      bcc	.bug_draw_0_off
    278  f62a
    279  f62a				   .bug_draw_0_on
    280  f62a		       a0 02		      ldy	#%00000010
    281  f62c
    282  f62c				   .bug_draw_0_off
    283  f62c		       84 1d		      sty	ENAM0
    284  f62e
    285  f62e				   .bug_draw_1
    286  f62e		       a0 00		      ldy	#%00000000
    287  f630
    288  f630							; Check top and bottom y pos
    289  f630		       c5 b7		      cmp	BugDrawPosTop+1
    290  f632		       b0 06		      bcs	.bug_draw_1_off
    291  f634
    292  f634		       c5 b5		      cmp	BugDrawPosBottom+1
    293  f636		       90 02		      bcc	.bug_draw_1_off
    294  f638
    295  f638				   .bug_draw_1_on
    296  f638		       a0 02		      ldy	#%00000010
    297  f63a
    298  f63a				   .bug_draw_1_off
    299  f63a		       84 1e		      sty	ENAM1
    300  f63c
    301  f63c				   .bug_draw_return
    302  f63c		       60		      rts
    303  f63d
    304  f63d							;BugClean:
    305  f63d							;    lda #0
    306  f63d							;    sta ENAM0
    307  f63d							;    sta ENAM1
    308  f63d							;    rts
    309  f63d
    310  f63d				   BugSample
    311  f63d		       a9 1e		      lda	#BUG_SAMPLE_LEN
    312  f63f		       85 90		      sta	SampleStep
    313  f641		       a9 03		      lda	#BUG_SAMPLE_C
    314  f643		       85 16		      sta	AUDC1
    315  f645		       a9 14		      lda	#BUG_SAMPLE_F
    316  f647		       85 18		      sta	AUDF1
    317  f649		       a9 04		      lda	#BUG_SAMPLE_V
    318  f64b		       85 1a		      sta	AUDV1
    319  f64d		       60		      rts
------- FILE game.asm
     20  f64e							;    include "objects/swatter.asm"
     21  f64e
     22  f64e							; Initialization
     23  f64e
     24  f64e				   GameInit
     25  f64e
     26  f64e							; Setup logic and kernel
      0  f64e					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  f64e				   .POINTER   SET	VBlankPtr
      2  f64e				   .ADDRESS   SET	GameVerticalBlank
      3  f64e
      4  f64e		       a9 78		      LDA	#<.ADDRESS
      5  f650		       85 87		      STA	.POINTER
      6  f652		       a9 f6		      LDA	#>.ADDRESS
      7  f654		       85 88		      STA	.POINTER+1
      8  f656
      0  f656					      SET_POINTER	KernelPtr, GameKernel
      1  f656				   .POINTER   SET	KernelPtr
      2  f656				   .ADDRESS   SET	GameKernel
      3  f656
      4  f656		       a9 be		      LDA	#<.ADDRESS
      5  f658		       85 89		      STA	.POINTER
      6  f65a		       a9 f6		      LDA	#>.ADDRESS
      7  f65c		       85 8a		      STA	.POINTER+1
      8  f65e
      0  f65e					      SET_POINTER	OverScanPtr, GameOverScan
      1  f65e				   .POINTER   SET	OverScanPtr
      2  f65e				   .ADDRESS   SET	GameOverScan
      3  f65e
      4  f65e		       a9 99		      LDA	#<.ADDRESS
      5  f660		       85 8b		      STA	.POINTER
      6  f662		       a9 f6		      LDA	#>.ADDRESS
      7  f664		       85 8c		      STA	.POINTER+1
      8  f666
     30  f666
     31  f666							; Mute Audio
     32  f666							;    lda #0
     33  f666							;    sta AUDC0
     34  f666							;    sta AUDV0
     35  f666							;    sta AUDF0
     36  f666							;    sta AUDC1
     37  f666							;    sta AUDV1
     38  f666							;    sta AUDF1
     39  f666							;    sta SampleStep
     40  f666
     41  f666							; Load Audio Settings
     42  f666							;    lda #GAME_AUDIO_VOLUME
     43  f666							;    sta AUDV0
     44  f666
     45  f666							; Make it so that we play the first note immediately
     46  f666		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     47  f668		       85 8f		      sta	AudioStep
     48  f66a		       a9 02		      lda	#2
     49  f66c		       85 8e		      sta	FrameTimer
     50  f66e
     51  f66e							; Initialize Objects
     52  f66e		       20 97 f0 	      jsr	ScoreInit
     53  f671		       20 f3 f1 	      jsr	SpiderInit
     54  f674							;    jsr LineInit
     55  f674		       20 35 f5 	      jsr	BugInit
     56  f677							;    jsr SwatterInit
     57  f677
     58  f677		       60		      rts
     59  f678
     60  f678				   GameVerticalBlank
     61  f678
     62  f678							; Refresh random values
     63  f678		       20 13 f0 	      jsr	Random
     64  f67b
     65  f67b							; Update Objects
     66  f67b		       20 04 f2 	      jsr	SpiderUpdate
     67  f67e		       20 99 f3 	      jsr	LineUpdate
     68  f681		       20 56 f5 	      jsr	BugUpdate
     69  f684							;    jsr SwatterUpdate
     70  f684		       20 a0 f0 	      jsr	ScoreUpdate
     71  f687
     72  f687							; Reset Collisions
     73  f687		       85 2c		      sta	CXCLR
     74  f689
     75  f689							; Clear horizontal movement
     76  f689		       85 2b		      sta	HMCLR
     77  f68b
     78  f68b							; Update Positions
     79  f68b		       20 0f f3 	      jsr	SpiderPosition
     80  f68e		       20 b7 f4 	      jsr	LinePosition
     81  f691		       20 f4 f5 	      jsr	BugPosition
     82  f694							;    jsr SwatterPosition
     83  f694
     84  f694							; Set final x positions
     85  f694		       85 02		      sta	WSYNC
     86  f696		       85 2a		      sta	HMOVE
     87  f698
     88  f698		       60		      rts
     89  f699
     90  f699				   GameOverScan
     91  f699
     92  f699							; Audio Routines
     93  f699							;    jsr GameAudio
     94  f699		       20 a0 f6 	      jsr	GameSample
     95  f69c
     96  f69c							; State Routines
     97  f69c		       20 b4 f6 	      jsr	GameDeath
     98  f69f
     99  f69f		       60		      rts
    100  f6a0
    101  f6a0				   GameSample
    102  f6a0
    103  f6a0		       a6 90		      ldx	SampleStep
    104  f6a2		       e0 00		      cpx	#0
    105  f6a4		       f0 0b		      beq	.game_sample_return
    106  f6a6
    107  f6a6		       ca		      dex
    108  f6a7		       d0 08		      bne	.game_sample_return
    109  f6a9
    110  f6a9				   .game_sample_mute
    111  f6a9		       a9 00		      lda	#0
    112  f6ab		       85 1a		      sta	AUDV1
    113  f6ad		       85 18		      sta	AUDF1
    114  f6af		       85 16		      sta	AUDC1
    115  f6b1
    116  f6b1				   .game_sample_return
    117  f6b1		       86 90		      stx	SampleStep
    118  f6b3		       60		      rts
    119  f6b4
    120  f6b4							;GameAudio:
    121  f6b4
    122  f6b4							;    ldx FrameTimer
    123  f6b4							;    cpx #GAME_AUDIO_OFFSET
    124  f6b4							;    beq .game_audio_mute_note
    125  f6b4							;    cpx #0
    126  f6b4							;    bne .game_audio_return
    127  f6b4
    128  f6b4							; Reset Timer
    129  f6b4							;    ldx #GAME_AUDIO_STEP
    130  f6b4							;    stx FrameTimer
    131  f6b4
    132  f6b4							;.game_audio_play:
    133  f6b4
    134  f6b4							; Increment melody position
    135  f6b4							;    ldy AudioStep
    136  f6b4							;    iny
    137  f6b4
    138  f6b4							;    cpy #GAME_AUDIO_LENGTH
    139  f6b4							;    bne .game_audio_play_note
    140  f6b4
    141  f6b4							; Loop our audio step
    142  f6b4							;    ldy #0
    143  f6b4
    144  f6b4							;.game_audio_play_note:
    145  f6b4
    146  f6b4							; Save current position
    147  f6b4							;    sty AudioStep
    148  f6b4
    149  f6b4							; Melody Line
    150  f6b4							;    lda GameAudio0,y
    151  f6b4							;    cmp #$FF
    152  f6b4							;    beq .game_audio_mute_note
    153  f6b4							;    sta AUDF0
    154  f6b4							;    lda #GAME_AUDIO_TONE
    155  f6b4							;    sta AUDC0
    156  f6b4							;    lda #GAME_AUDIO_VOLUME
    157  f6b4							;    sta AUDV0
    158  f6b4
    159  f6b4							;    rts
    160  f6b4
    161  f6b4							;.game_audio_mute_note:
    162  f6b4
    163  f6b4							;    lda #0
    164  f6b4							;    sta AUDF0
    165  f6b4							;    sta AUDC0
    166  f6b4							;    sta AUDV0
    167  f6b4
    168  f6b4							;.game_audio_return:
    169  f6b4							;    rts
    170  f6b4
    171  f6b4				   GameDeath
    172  f6b4		       a5 91		      lda	ScoreValue+0
    173  f6b6		       c9 00		      cmp	#0
    174  f6b8		       d0 03		      bne	.game_death_return
    175  f6ba
    176  f6ba							; Show Game Over Screen
    177  f6ba		       20 1c f7 	      jsr	OverInit
    178  f6bd
    179  f6bd				   .game_death_return
    180  f6bd		       60		      rts
    181  f6be
    182  f6be				   GameKernel
    183  f6be
    184  f6be							; Turn on display
    185  f6be		       a9 00		      lda	#0
    186  f6c0		       85 01		      sta	VBLANK
    187  f6c2
    188  f6c2				   .game_kernel_score
    189  f6c2
    190  f6c2							; Draw Score on top first
    191  f6c2		       20 c0 f0 	      jsr	ScoreDraw
    192  f6c5
    193  f6c5				   .game_kernel_objects_start
    194  f6c5
    195  f6c5							; Setup Drawing Objects
    196  f6c5		       20 80 f1 	      jsr	WebDrawStart
    197  f6c8		       20 17 f3 	      jsr	SpiderDrawStart
    198  f6cb		       20 bf f4 	      jsr	LineDrawStart
    199  f6ce		       20 03 f6 	      jsr	BugDrawStart
    200  f6d1							;    jsr SwatterDrawStart
    201  f6d1
    202  f6d1							; Start Scanline Counter
    203  f6d1		       a2 ae		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    204  f6d3							; The extra 5 is for processing overflow
    205  f6d3
    206  f6d3							; Half scanline counter in Temp+1
    207  f6d3		       a9 59		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    208  f6d5		       85 84		      sta	Temp+1
    209  f6d7
    210  f6d7				   .game_kernel_objects
    211  f6d7
    212  f6d7							; Draw Objects in order
    213  f6d7
    214  f6d7							;    jsr LineDraw
    215  f6d7							;    jsr BugDraw
    216  f6d7		       20 9b f1 	      jsr	WebDraw	; Every 6 lines
    217  f6da
    218  f6da		       85 02		      sta	WSYNC
    219  f6dc		       ca		      dex
    220  f6dd		       f0 34		      beq	.game_kernel_clean
    221  f6df
    222  f6df		       20 3b f3 	      jsr	SpiderDraw	; Every odd scanline
    223  f6e2							;    jsr SwatterDraw
    224  f6e2
    225  f6e2		       85 02		      sta	WSYNC
    226  f6e4		       c6 84		      dec	Temp+1
    227  f6e6		       ca		      dex
    228  f6e7		       f0 2a		      beq	.game_kernel_clean
    229  f6e9
    230  f6e9		       a5 84		      lda	Temp+1
    231  f6eb		       20 df f4 	      jsr	LineDraw
    232  f6ee		       20 20 f6 	      jsr	BugDraw
    233  f6f1
    234  f6f1							;    sta WSYNC
    235  f6f1		       ca		      dex
    236  f6f2		       f0 1f		      beq	.game_kernel_clean
    237  f6f4
    238  f6f4		       20 3b f3 	      jsr	SpiderDraw
    239  f6f7							;    jsr SwatterDraw
    240  f6f7
    241  f6f7		       85 02		      sta	WSYNC
    242  f6f9		       c6 84		      dec	Temp+1
    243  f6fb		       ca		      dex
    244  f6fc		       f0 15		      beq	.game_kernel_clean
    245  f6fe
    246  f6fe		       a5 84		      lda	Temp+1
    247  f700		       20 df f4 	      jsr	LineDraw
    248  f703		       20 20 f6 	      jsr	BugDraw
    249  f706
    250  f706							;    sta WSYNC
    251  f706		       ca		      dex
    252  f707		       f0 0a		      beq	.game_kernel_clean
    253  f709
    254  f709		       20 3b f3 	      jsr	SpiderDraw
    255  f70c							;    jsr SwatterDraw
    256  f70c
    257  f70c		       85 02		      sta	WSYNC
    258  f70e		       c6 84		      dec	Temp+1
    259  f710		       ca		      dex
    260  f711		       d0 c4		      bne	.game_kernel_objects
    261  f713
    262  f713				   .game_kernel_clean
    263  f713
    264  f713		       20 bd f1 	      jsr	WebClean
    265  f716		       20 6c f3 	      jsr	SpiderClean
    266  f719							;    jsr LineClean
    267  f719							;    jsr BugClean
    268  f719							;    jsr SwatterDraw
    269  f719
    270  f719		       85 02		      sta	WSYNC
    271  f71b
    272  f71b				   .game_kernel_return
    273  f71b		       60		      rts
    274  f71c
    275  f71c							;GameAudio0:
    276  f71c							;    .byte #13   ; D
    277  f71c							;    .byte #$FF
    278  f71c							;    .byte #15   ; B
    279  f71c							;    .byte #$FF
    280  f71c							;    .byte #13   ; D
    281  f71c							;    .byte #$FF
    282  f71c							;    .byte #15   ; B
    283  f71c							;    .byte #$FF
    284  f71c							;    .byte #13   ; D
    285  f71c							;    .byte #13   ; D
    286  f71c							;    .byte #15   ; B
    287  f71c							;    .byte #$FF
    288  f71c							;    .byte #12   ; D#
    289  f71c							;    .byte #$FF
    290  f71c							;    .byte #15   ; B
    291  f71c							;    .byte #$FF
    292  f71c							;    .byte #11   ; E
    293  f71c							;    .byte #$FF
    294  f71c							;    .byte #14   ; C#
    295  f71c							;    .byte #$FF
    296  f71c							;    .byte #11
    297  f71c							;    .byte #$FF
    298  f71c							;    .byte #14
    299  f71c							;    .byte #$FF
    300  f71c							;    .byte #11
    301  f71c							;    .byte #11
    302  f71c							;    .byte #14
    303  f71c							;    .byte #$FF
    304  f71c							;    .byte #11
    305  f71c							;    .byte #$FF
    306  f71c							;    .byte #14
    307  f71c							;    .byte #$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  f71c					      include	"over.asm"
      1  f71c							;================
      2  f71c							; Constants
      3  f71c							;================
      4  f71c
      5  f71c		       00 dc	   OVER_FRAMES =	220
      6  f71c
      7  f71c		       00 00	   OVER_BG_COLOR =	#$00
      8  f71c		       00 44	   OVER_FG_COLOR =	#$44
      9  f71c
     10  f71c		       00 07	   OVER_AUDIO_TONE =	7
     11  f71c		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  f71c		       00 06	   OVER_AUDIO_LENGTH =	6
     13  f71c		       00 10	   OVER_AUDIO_STEP =	16
     14  f71c
     15  f71c		       00 09	   OVER_IMAGE_SIZE =	9
     16  f71c		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  f71c		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  f71c		       00 35	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  f71c
     20  f71c				   OverInit
     21  f71c
     22  f71c							; Setup logic and kernel
      0  f71c					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  f71c				   .POINTER   SET	VBlankPtr
      2  f71c				   .ADDRESS   SET	OverVerticalBlank
      3  f71c
      4  f71c		       a9 5e		      LDA	#<.ADDRESS
      5  f71e		       85 87		      STA	.POINTER
      6  f720		       a9 f7		      LDA	#>.ADDRESS
      7  f722		       85 88		      STA	.POINTER+1
      8  f724
      0  f724					      SET_POINTER	KernelPtr, OverKernel
      1  f724				   .POINTER   SET	KernelPtr
      2  f724				   .ADDRESS   SET	OverKernel
      3  f724
      4  f724		       a9 9c		      LDA	#<.ADDRESS
      5  f726		       85 89		      STA	.POINTER
      6  f728		       a9 f7		      LDA	#>.ADDRESS
      7  f72a		       85 8a		      STA	.POINTER+1
      8  f72c
      0  f72c					      SET_POINTER	OverScanPtr, OverOverScan
      1  f72c				   .POINTER   SET	OverScanPtr
      2  f72c				   .ADDRESS   SET	OverOverScan
      3  f72c
      4  f72c		       a9 62		      LDA	#<.ADDRESS
      5  f72e		       85 8b		      STA	.POINTER
      6  f730		       a9 f7		      LDA	#>.ADDRESS
      7  f732		       85 8c		      STA	.POINTER+1
      8  f734
     26  f734
     27  f734							; Load Colors
     28  f734		       a9 00		      lda	#OVER_BG_COLOR
     29  f736		       85 09		      sta	COLUBK
     30  f738		       a9 44		      lda	#OVER_FG_COLOR
     31  f73a		       85 08		      sta	COLUPF
     32  f73c
     33  f73c							; Load audio settings
     34  f73c		       a9 07		      lda	#OVER_AUDIO_TONE
     35  f73e		       85 15		      sta	AUDC0
     36  f740		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  f742		       85 19		      sta	AUDV0
     38  f744		       a9 00		      lda	#0
     39  f746		       85 16		      sta	AUDC1
     40  f748		       85 1a		      sta	AUDV1
     41  f74a		       a9 00		      lda	#0
     42  f74c		       85 8f		      sta	AudioStep
     43  f74e
     44  f74e							; Play first note
     45  f74e		       ad ee f7 	      lda	OverAudio0,AudioStep
     46  f751		       85 17		      sta	AUDF0
     47  f753
     48  f753							; Setup frame counters
     49  f753		       a9 00		      lda	#0
     50  f755		       85 8d		      sta	Frame
     51  f757		       a9 10		      lda	#OVER_AUDIO_STEP
     52  f759		       85 8e		      sta	FrameTimer
     53  f75b		       85 84		      sta	Temp+1
     54  f75d
     55  f75d		       60		      rts
     56  f75e
     57  f75e				   OverVerticalBlank
     58  f75e		       20 a0 f0 	      jsr	ScoreUpdate
     59  f761		       60		      rts
     60  f762
     61  f762				   OverOverScan
     62  f762		       20 69 f7 	      jsr	OverAudio
     63  f765		       20 92 f7 	      jsr	OverState
     64  f768		       60		      rts
     65  f769
     66  f769				   OverAudio
     67  f769
     68  f769		       a6 8e		      ldx	FrameTimer
     69  f76b		       e0 00		      cpx	#0
     70  f76d		       d0 22		      bne	.over_audio_return
     71  f76f
     72  f76f							; Reset Timer
     73  f76f		       a6 84		      ldx	Temp+1
     74  f771					      REPEAT	3
     75  f771		       e8		      inx
     74  f771					      REPEND
     75  f772		       e8		      inx
     74  f772					      REPEND
     75  f773		       e8		      inx
     76  f774					      REPEND
     77  f774		       86 8e		      stx	FrameTimer
     78  f776		       86 84		      stx	Temp+1
     79  f778
     80  f778				   .over_audio_play
     81  f778
     82  f778							; Increment melody position
     83  f778		       a4 8f		      ldy	AudioStep
     84  f77a		       c8		      iny
     85  f77b
     86  f77b		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  f77d		       f0 0c		      beq	.over_audio_mute_note
     88  f77f
     89  f77f				   .over_audio_play_note
     90  f77f
     91  f77f							; Save current position
     92  f77f		       84 8f		      sty	AudioStep
     93  f781
     94  f781							; Melody Line
     95  f781		       b9 ee f7 	      lda	OverAudio0,y
     96  f784		       85 17		      sta	AUDF0
     97  f786		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  f788		       85 19		      sta	AUDV0
     99  f78a
    100  f78a		       60		      rts
    101  f78b
    102  f78b				   .over_audio_mute_note
    103  f78b		       a9 00		      lda	#0
    104  f78d		       85 17		      sta	AUDF0
    105  f78f		       85 19		      sta	AUDV0
    106  f791
    107  f791				   .over_audio_return
    108  f791		       60		      rts
    109  f792
    110  f792				   OverState
    111  f792		       a5 8d		      lda	Frame
    112  f794		       c9 dc		      cmp	#OVER_FRAMES
    113  f796		       d0 03		      bne	.over_state_return
    114  f798
    115  f798							;    jsr TitleInit
    116  f798		       20 4e f6 	      jsr	GameInit
    117  f79b
    118  f79b				   .over_state_return
    119  f79b		       60		      rts
    120  f79c
    121  f79c				   OverKernel
    122  f79c
    123  f79c							; Turn on display
    124  f79c		       a9 00		      lda	#0
    125  f79e		       85 01		      sta	VBLANK
    126  f7a0
    127  f7a0				   .over_kernel_score
    128  f7a0
    129  f7a0							; Draw Score on top first (no update)
    130  f7a0		       20 c0 f0 	      jsr	ScoreDraw
    131  f7a3
    132  f7a3				   .over_kernel_init
    133  f7a3							; Playfield Control
    134  f7a3		       a5 80		      lda	CtrlPf
    135  f7a5		       29 fd		      and	#%11111101	; Use playfield foreground color
    136  f7a7		       09 01		      ora	#%00000001	; Set mirroring
    137  f7a9		       85 80		      sta	CtrlPf
    138  f7ab		       85 0a		      sta	CTRLPF
    139  f7ad
    140  f7ad				   .over_kernel_top_padding
    141  f7ad							; Top Padding
    142  f7ad		       20 cc f7 	      jsr	OverPadding
    143  f7b0
    144  f7b0				   .over_kernel_image
    145  f7b0		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    146  f7b2
    147  f7b2				   .over_kernel_image_next
    148  f7b2		       bd e5 f7 	      lda	OverImagePF2,x
    149  f7b5		       85 0f		      sta	PF2
    150  f7b7		       bd dc f7 	      lda	OverImagePF1,x
    151  f7ba		       85 0e		      sta	PF1
    152  f7bc							;    lda OverImagePF0,x
    153  f7bc							;    sta PF0
    154  f7bc
    155  f7bc		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    156  f7be				   .over_kernel_image_loop
    157  f7be		       85 02		      sta	WSYNC
    158  f7c0		       88		      dey
    159  f7c1		       d0 fb		      bne	.over_kernel_image_loop
    160  f7c3
    161  f7c3		       ca		      dex
    162  f7c4		       10 ec		      bpl	.over_kernel_image_next
    163  f7c6
    164  f7c6				   .over_kernel_bottom_padding
    165  f7c6							; Bottom Padding
    166  f7c6		       20 cc f7 	      jsr	OverPadding
    167  f7c9
    168  f7c9				   .over_kernel_return
    169  f7c9		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    170  f7cb		       60		      rts
    171  f7cc
    172  f7cc				   OverPadding
    173  f7cc		       a9 00		      lda	#0
    174  f7ce		       85 0d		      sta	PF0
    175  f7d0		       85 0e		      sta	PF1
    176  f7d2		       85 0f		      sta	PF2
    177  f7d4
    178  f7d4		       a2 35		      ldx	#OVER_IMAGE_PADDING
    179  f7d6				   .over_padding_loop
    180  f7d6		       85 02		      sta	WSYNC
    181  f7d8		       ca		      dex
    182  f7d9		       d0 fb		      bne	.over_padding_loop
    183  f7db
    184  f7db		       60		      rts
    185  f7dc
    186  f7dc				   OverAssets
    187  f7dc
    188  f7dc							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  f7dc					      include	"over_image.asm"
      1  f7dc							;OverImagePF0:
      2  f7dc							;    .BYTE %00000000
      3  f7dc							;    .BYTE %00000000
      4  f7dc							;    .BYTE %00000000
      5  f7dc							;    .BYTE %00000000
      6  f7dc							;    .BYTE %00000000
      7  f7dc							;    .BYTE %00000000
      8  f7dc							;    .BYTE %00000000
      9  f7dc							;    .BYTE %00000000
     10  f7dc							;    .BYTE %00000000
     11  f7dc
     12  f7dc				   OverImagePF1
     13  f7dc		       0c		      .BYTE.b	%00001100
     14  f7dd		       13		      .BYTE.b	%00010011
     15  f7de		       20		      .BYTE.b	%00100000
     16  f7df		       23		      .BYTE.b	%00100011
     17  f7e0		       24		      .BYTE.b	%00100100
     18  f7e1		       24		      .BYTE.b	%00100100
     19  f7e2		       12		      .BYTE.b	%00010010
     20  f7e3		       10		      .BYTE.b	%00010000
     21  f7e4		       08		      .BYTE.b	%00001000
     22  f7e5
     23  f7e5				   OverImagePF2
     24  f7e5		       e0		      .BYTE.b	%11100000
     25  f7e6		       18		      .BYTE.b	%00011000
     26  f7e7		       05		      .BYTE.b	%00000101
     27  f7e8		       52		      .BYTE.b	%01010010
     28  f7e9		       23		      .BYTE.b	%00100011
     29  f7ea		       52		      .BYTE.b	%01010010
     30  f7eb		       04		      .BYTE.b	%00000100
     31  f7ec		       18		      .BYTE.b	%00011000
     32  f7ed		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    190  f7ee
    191  f7ee				   OverAudio0
    192  f7ee
    193  f7ee		       0c		      .BYTE.b	#12	; D#2
    194  f7ef		       0d		      .BYTE.b	#13	; D2
    195  f7f0		       11		      .BYTE.b	#17	; A1
    196  f7f1		       16		      .BYTE.b	#22	; F1
    197  f7f2		       1a		      .BYTE.b	#26	; D1
    198  f7f3		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    291  f7f4
    292  f7f4							;================
    293  f7f4							; End of cart
    294  f7f4							;================
    295  f7f4
    296  f7fa					      ORG	$F7FA	; 2k = $F7FA, 4k = $FFFA
    297  f7fa
    298  f7fa				   InterruptVectors
    299  f7fa
    300  f7fa		       21 f0		      .word.w	InitSystem	; NMI
    301  f7fc		       21 f0		      .word.w	InitSystem	; RESET
    302  f7fe		       21 f0		      .word.w	InitSystem	; IRQ
    303  f800
    304  f800					      END
