------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: November 14th, 2019
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00c8 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; TIA Register Copies
     53 U0080
     54 U0080		       00	   CtrlPf     ds	1
     55 U0081		       00	   NuSiz0     ds	1
     56 U0082		       00	   NuSiz1     ds	1
     57 U0083
     58 U0083							; Global
     59 U0083
     60 U0083		       00 00	   Temp       ds	2
     61 U0085		       00	   Rand8      ds	1
     62 U0086		       00	   Rand16     ds	1
     63 U0087
     64 U0087		       00 00	   VBlankPtr  ds	2
     65 U0089		       00 00	   KernelPtr  ds	2
     66 U008b		       00 00	   OverScanPtr ds	2
     67 U008d
     68 U008d		       00	   Frame      ds	1
     69 U008e		       00 00	   FrameTimer ds	2
     70 U0090
     71 U0090		       00	   AudioStep  ds	1
     72 U0091
     73 U0091		       00	   SampleStep ds	1
     74 U0092
     75 U0092							; Score
     76 U0092
     77 U0092		       00 00	   ScoreValue ds	2
     78 U0094		       00	   ScoreDigitOnes ds	1
     79 U0095		       00	   ScoreDigitGfx ds	1
     80 U0096		       00 00	   ScoreBarGfx ds	2
     81 U0098
     82 U0098							; Level
     83 U0098		       00	   LevelCurrent ds	1
     84 U0099
     85 U0099							; Web
     86 U0099
     87 U0099		       00	   WebIndex   ds	1
     88 U009a		       00 00	   WebColor   ds	2
     89 U009c
     90 U009c							; Spider
     91 U009c
     92 U009c		       00 00	   SpiderPtr  ds	2
     93 U009e		       00 00	   SpiderPos  ds	2
     94 U00a0		       00	   SpiderCtrl ds	1
     95 U00a1		       00	   SpiderColor ds	1
     96 U00a2
     97 U00a2		       00	   SpiderIndex ds	1
     98 U00a3		       00	   SpiderDrawPos ds	1
     99 U00a4		       00	   SpiderLine ds	1
    100 U00a5
    101 U00a5		       00 00	   SpiderPtr2 ds	2
    102 U00a7
    103 U00a7							; Line
    104 U00a7
    105 U00a7		       00	   LineEnabled ds	1
    106 U00a8		       00 00	   LinePos    ds	2
    107 U00aa		       00 00	   LineVelocity ds	2
    108 U00ac		       00 00	   LineStartPos ds	2
    109 U00ae		       00 00	   LineDrawPos ds	2
    110 U00b0
    111 U00b0							; Bug
    112 U00b0
    113 U00b0		       00	   BugSpeed   ds	1
    114 U00b1
    115 U00b1		       00 00	   BugStunned ds	2
    116 U00b3		       00 00	   BugPosX    ds	2
    117 U00b5		       00 00	   BugPosY    ds	2
    118 U00b7		       00 00	   BugColor   ds	2
    119 U00b9
    120 U00b9		       00 00	   BugDrawPosBottom ds	2
    121 U00bb		       00 00	   BugDrawPosTop ds	2
    122 U00bd
    123 U00bd							; Swatter
    124 U00bd
    125 U00bd		       00 00	   SwatterPos ds	2
    126 U00bf		       00	   SwatterState ds	1
    127 U00c0		       00	   SwatterColor ds	1
    128 U00c1
    129 U00c1		       00	   SwatterWaitTime ds	1
    130 U00c2		       00	   SwatterHitDamage ds	1
    131 U00c3
    132 U00c3		       00	   SwatterIndex ds	1
    133 U00c4		       00	   SwatterDrawPos ds	1
    134 U00c5		       00	   SwatterLine ds	1
    135 U00c6
    136 U00c6		       00	   SwatterSampleCount ds	1
    137 U00c7		       00	   SwatterSampleF ds	1
    138 U00c8
    139  10000 ????				       SEG
    140  f000					      org	$F000	; Start of cart area
    141  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 85		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 86		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 85		      sta	Rand8
     49  f01e		       45 86		      eor	Rand16
     50  f020		       60		      rts
------- FILE kernel.asm
    143  f021
    144  f021				   InitSystem
    145  f021
    146  f021				   .init_clean
    147  f021							; Resets RAM, TIA registers, and CPU registers
      0  f021					      CLEAN_START
      1  f021		       78		      sei
      2  f022		       d8		      cld
      3  f023
      4  f023		       a2 00		      ldx	#0
      5  f025		       8a		      txa
      6  f026		       a8		      tay
      7  f027		       ca	   .CLEAR_STACK dex
      8  f028		       9a		      txs
      9  f029		       48		      pha
     10  f02a		       d0 fb		      bne	.CLEAR_STACK
     11  f02c
    149  f02c
    150  f02c				   .init_tia
    151  f02c							; Define default TIA register values
    152  f02c
    153  f02c							; Initialize copies
    154  f02c		       a9 00		      lda	#0
    155  f02e		       85 80		      sta	CtrlPf
    156  f030		       85 81		      sta	NuSiz0
    157  f032		       85 82		      sta	NuSiz1
    158  f034
    159  f034							; Set background color
    160  f034		       a9 00		      lda	#$00	; Black
    161  f036		       85 09		      sta	COLUBK
    162  f038
    163  f038							; Set the playfield and player color
    164  f038		       a9 0e		      lda	#$0E	; White
    165  f03a		       85 08		      sta	COLUPF
    166  f03c		       85 06		      sta	COLUP0
    167  f03e		       85 07		      sta	COLUP1
    168  f040
    169  f040							; Playfield Control
    170  f040		       a9 01		      lda	#%00000001	; 1 for mirroring
    171  f042		       85 80		      sta	CtrlPf
    172  f044		       85 0a		      sta	CTRLPF
    173  f046
    174  f046							; Disable Game Elements
    175  f046		       a9 00		      lda	#$00
    176  f048		       85 1f		      sta	ENABL	; Turn off ball
    177  f04a		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    178  f04c		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    179  f04e		       85 1b		      sta	GRP0	; Turn off player 1
    180  f050		       85 1c		      sta	GRP1	; Turn off player 2
    181  f052
    182  f052							; Empty playfield
    183  f052		       a9 00		      lda	#%00000000
    184  f054		       85 0d		      sta	PF0
    185  f056		       85 0e		      sta	PF1
    186  f058		       85 0f		      sta	PF2
    187  f05a
    188  f05a				   .init_seed
    189  f05a							; Seed the random number generator
    190  f05a		       ad 84 02 	      lda	INTIM	; Unknown value
    191  f05d		       85 85		      sta	Rand8	; Use as seed
    192  f05f		       49 ff		      eor	#$FF	; Flip bits
    193  f061		       85 86		      sta	Rand16	; Just in case INTIM was 0
    194  f063
    195  f063				   .init_game
    196  f063
    197  f063							;   jsr LogoInit
    198  f063		       20 cb f0 	      jsr	TitleInit
    199  f066
    200  f066							;=======================================
    201  f066							; Game Kernel
    202  f066							;=======================================
    203  f066
    204  f066				   Main
    205  f066
    206  f066		       20 75 f0 	      jsr	VerticalSync
    207  f069		       20 8e f0 	      jsr	VerticalBlank
    208  f06c		       20 a1 f0 	      jsr	Kernel
    209  f06f		       20 a8 f0 	      jsr	OverScan
    210  f072		       4c 66 f0 	      jmp	Main
    211  f075
    212  f075				   VerticalSync
    213  f075
    214  f075		       a9 00		      lda	#0
    215  f077		       85 01		      sta	VBLANK
    216  f079
    217  f079							; Turn on Vertical Sync signal and setup timer
    218  f079		       a9 02		      lda	#2
    219  f07b		       85 00		      sta	VSYNC
    220  f07d
    221  f07d							; Increment frame count and reduce frame counter
    222  f07d		       e6 8d		      inc	Frame
    223  f07f		       c6 8e		      dec	FrameTimer
    224  f081		       c6 8f		      dec	FrameTimer+1
    225  f083
    226  f083							; VSYNCH signal scanlines
    227  f083					      REPEAT	#KERNEL_VSYNC
    228  f083		       85 02		      sta	WSYNC
    227  f083					      REPEND
    228  f085		       85 02		      sta	WSYNC
    227  f085					      REPEND
    228  f087		       85 02		      sta	WSYNC
    229  f089					      REPEND
    230  f089
    231  f089							; Turn off Vertical Sync signal
    232  f089		       a9 00		      lda	#0
    233  f08b		       85 00		      sta	VSYNC
    234  f08d
    235  f08d				   .vsync_return
    236  f08d		       60		      rts
    237  f08e
    238  f08e				   VerticalBlank
    239  f08e							; Setup Timer
    240  f08e		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    241  f090		       8d 96 02 	      sta	TIM64T
    242  f093
    243  f093				   .vblank_logic
    244  f093							; Perform Game Logic
    245  f093		       20 9e f0 	      jsr	.vblank_logic_call_ptr
    246  f096
    247  f096				   .vblank_loop
    248  f096							; WSYNC until Timer is complete
    249  f096		       85 02		      sta	WSYNC
    250  f098		       ad 84 02 	      lda	INTIM
    251  f09b		       d0 f9		      bne	.vblank_loop
    252  f09d
    253  f09d				   .vblank_return
    254  f09d		       60		      rts
    255  f09e
    256  f09e				   .vblank_logic_call_ptr
    257  f09e		       6c 87 00 	      jmp	(VBlankPtr)
    258  f0a1
    259  f0a1				   Kernel
    260  f0a1
    261  f0a1							; Perform Selected Kernel
    262  f0a1		       20 a5 f0 	      jsr	.kernel_call_ptr
    263  f0a4		       60		      rts
    264  f0a5
    265  f0a5				   .kernel_call_ptr
    266  f0a5		       6c 89 00 	      jmp	(KernelPtr)
    267  f0a8
    268  f0a8				   OverScan
    269  f0a8
    270  f0a8							; End of screen, enter blanking
    271  f0a8		       a9 42		      lda	#%01000010
    272  f0aa		       85 01		      sta	VBLANK
    273  f0ac
    274  f0ac							; Setup Timer
    275  f0ac		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    276  f0ae		       8d 96 02 	      sta	TIM64T
    277  f0b1
    278  f0b1							;.overscan_reset:
    279  f0b1							; Check for reset switch
    280  f0b1		       ad 82 02 	      lda	SWCHB
    281  f0b4		       4a		      lsr		; Push D0 to carry (C)
    282  f0b5		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    283  f0b7
    284  f0b7							; Perform reset
    285  f0b7							;    jsr LogoInit	      ; No need for logic
    286  f0b7		       20 cb f0 	      jsr	TitleInit
    287  f0ba		       4c c0 f0 	      jmp	.overscan_loop
    288  f0bd
    289  f0bd				   .overscan_logic
    290  f0bd							; Perform OverScan Logic
    291  f0bd		       20 c8 f0 	      jsr	.overscan_logic_call_ptr
    292  f0c0
    293  f0c0				   .overscan_loop
    294  f0c0							; WSYNC until Timer is complete
    295  f0c0		       85 02		      sta	WSYNC
    296  f0c2		       ad 84 02 	      lda	INTIM
    297  f0c5		       d0 f9		      bne	.overscan_loop
    298  f0c7
    299  f0c7				   .overscan_return
    300  f0c7		       60		      rts
    301  f0c8
    302  f0c8				   .overscan_logic_call_ptr
    303  f0c8		       6c 8b 00 	      jmp	(OverScanPtr)
    304  f0cb
    305  f0cb							;================
    306  f0cb							; State Code
    307  f0cb							;================
    308  f0cb
    309  f0cb							;    include "logo.asm"
------- FILE title.asm LEVEL 2 PASS 2
      0  f0cb					      include	"title.asm"
      1  f0cb							;================
      2  f0cb							; Constants
      3  f0cb							;================
      4  f0cb
      5  f0cb		       00 00	   TITLE_BG_COLOR =	#$00
      6  f0cb		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f0cb		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f0cb		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f0cb
     10  f0cb		       00 04	   TITLE_AUDIO_0_TONE =	4
     11  f0cb		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     12  f0cb		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     13  f0cb		       00 10	   TITLE_AUDIO_LENGTH =	16
     14  f0cb		       00 09	   TITLE_AUDIO_STEP =	9
     15  f0cb
     16  f0cb		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     17  f0cb		       00 05	   TITLE_FRAME_BOT_LINES =	5
     18  f0cb		       00 07	   TITLE_LABEL_LINE =	7
     19  f0cb
     20  f0cb		       00 0f	   TITLE_GAP_SIZE =	#15
     21  f0cb
     22  f0cb		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     23  f0cb		       00 09	   TITLE_SPIDER_SIZE =	#9
     24  f0cb		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     25  f0cb
     26  f0cb				   TitleInit
     27  f0cb
     28  f0cb							; Setup logic and kernel
      0  f0cb					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f0cb				   .POINTER   SET	VBlankPtr
      2  f0cb				   .ADDRESS   SET	TitleVerticalBlank
      3  f0cb
      4  f0cb		       a9 38		      LDA	#<.ADDRESS
      5  f0cd		       85 87		      STA	.POINTER
      6  f0cf		       a9 f1		      LDA	#>.ADDRESS
      7  f0d1		       85 88		      STA	.POINTER+1
      8  f0d3
      0  f0d3					      SET_POINTER	KernelPtr, TitleKernel
      1  f0d3				   .POINTER   SET	KernelPtr
      2  f0d3				   .ADDRESS   SET	TitleKernel
      3  f0d3
      4  f0d3		       a9 d0		      LDA	#<.ADDRESS
      5  f0d5		       85 89		      STA	.POINTER
      6  f0d7		       a9 f1		      LDA	#>.ADDRESS
      7  f0d9		       85 8a		      STA	.POINTER+1
      8  f0db
      0  f0db					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f0db				   .POINTER   SET	OverScanPtr
      2  f0db				   .ADDRESS   SET	TitleOverScan
      3  f0db
      4  f0db		       a9 89		      LDA	#<.ADDRESS
      5  f0dd		       85 8b		      STA	.POINTER
      6  f0df		       a9 f1		      LDA	#>.ADDRESS
      7  f0e1		       85 8c		      STA	.POINTER+1
      8  f0e3
     32  f0e3
     33  f0e3							; Load Colors
     34  f0e3		       a9 00		      lda	#TITLE_BG_COLOR
     35  f0e5		       85 09		      sta	COLUBK
     36  f0e7		       a9 06		      lda	#TITLE_WEB_COLOR
     37  f0e9		       85 08		      sta	COLUPF
     38  f0eb		       a9 56		      lda	#TITLE_SPIDER_COLOR
     39  f0ed		       85 06		      sta	COLUP0
     40  f0ef		       85 07		      sta	COLUP1
     41  f0f1
     42  f0f1							; Load audio settings
     43  f0f1
     44  f0f1							; Melody Line
     45  f0f1		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     46  f0f3		       85 15		      sta	AUDC0
     47  f0f5		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
     48  f0f7		       85 19		      sta	AUDV0
     49  f0f9
     50  f0f9							; Drums and Bass
     51  f0f9		       a9 00		      lda	#0
     52  f0fb		       85 16		      sta	AUDC1
     53  f0fd		       85 1a		      sta	AUDV1
     54  f0ff
     55  f0ff							; Make it so that we play the first note immediately
     56  f0ff		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     57  f101		       85 90		      sta	AudioStep
     58  f103		       a9 01		      lda	#1
     59  f105		       85 8e		      sta	FrameTimer
     60  f107
     61  f107							; Setup Spider Sprite
      0  f107					      SET_POINTER	SpiderPtr, TitleSpider
      1  f107				   .POINTER   SET	SpiderPtr
      2  f107				   .ADDRESS   SET	TitleSpider
      3  f107
      4  f107		       a9 10		      LDA	#<.ADDRESS
      5  f109		       85 9c		      STA	.POINTER
      6  f10b		       a9 f3		      LDA	#>.ADDRESS
      7  f10d		       85 9d		      STA	.POINTER+1
      8  f10f
     63  f10f
     64  f10f		       a5 81		      lda	NuSiz0
     65  f111		       29 f8		      and	#%11111000
     66  f113		       09 06		      ora	#%00000110	; Triple Sprite
     67  f115		       85 81		      sta	NuSiz0
     68  f117		       85 04		      sta	NUSIZ0
     69  f119		       85 82		      sta	NuSiz1
     70  f11b		       85 05		      sta	NUSIZ1
     71  f11d
     72  f11d		       a9 00		      lda	#0	; No reflect
     73  f11f		       85 0b		      sta	REFP0
     74  f121		       a9 ff		      lda	#$FF	; Reflect P1
     75  f123		       85 0c		      sta	REFP1
     76  f125
     77  f125		       a9 00		      lda	#0
     78  f127		       85 a3		      sta	SpiderDrawPos	; Initialize animation state
     79  f129
     80  f129							; Setup Web Line
     81  f129							; Missle0 (2 clock size)
     82  f129		       a5 81		      lda	NuSiz0
     83  f12b		       29 cf		      and	#%11001111
     84  f12d		       09 10		      ora	#%00010000
     85  f12f		       85 81		      sta	NuSiz0
     86  f131		       85 04		      sta	NUSIZ0
     87  f133
     88  f133							; Disable at start
     89  f133		       a9 00		      lda	#0
     90  f135		       85 1d		      sta	ENAM0
     91  f137
     92  f137		       60		      rts
     93  f138
     94  f138				   TitleVerticalBlank
     95  f138
     96  f138							; Refresh random values
     97  f138		       20 13 f0 	      jsr	Random
     98  f13b
     99  f13b		       20 42 f1 	      jsr	TitlePosition
    100  f13e		       20 5c f1 	      jsr	TitleAnimation
    101  f141
    102  f141		       60		      rts
    103  f142
    104  f142				   TitlePosition
    105  f142
    106  f142							; Position Spider
    107  f142		       a2 00		      ldx	#0	; Object (player0)
    108  f144		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
    109  f146		       20 00 f0 	      jsr	PosObject
    110  f149
    111  f149		       a2 01		      ldx	#1	; Object (player1)
    112  f14b		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    113  f14d		       20 00 f0 	      jsr	PosObject
    114  f150
    115  f150							; Position Web Line
    116  f150		       a2 02		      ldx	#2	; Object (missle0)
    117  f152		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    118  f154		       20 00 f0 	      jsr	PosObject
    119  f157
    120  f157		       85 02		      sta	WSYNC
    121  f159		       85 2a		      sta	HMOVE
    122  f15b
    123  f15b		       60		      rts
    124  f15c
    125  f15c				   TitleAnimation
    126  f15c
    127  f15c		       a5 90		      lda	AudioStep
    128  f15e		       c9 00		      cmp	#0
    129  f160		       f0 0d		      beq	.title_animation_1
    130  f162		       c9 04		      cmp	#4
    131  f164		       f0 16		      beq	.title_animation_2
    132  f166		       c9 09		      cmp	#9
    133  f168		       f0 05		      beq	.title_animation_1
    134  f16a		       c9 0c		      cmp	#12
    135  f16c		       f0 0e		      beq	.title_animation_2
    136  f16e		       60		      rts
    137  f16f
    138  f16f				   .title_animation_1
      0  f16f					      SET_POINTER	SpiderPtr, TitleSpider
      1  f16f				   .POINTER   SET	SpiderPtr
      2  f16f				   .ADDRESS   SET	TitleSpider
      3  f16f
      4  f16f		       a9 10		      LDA	#<.ADDRESS
      5  f171		       85 9c		      STA	.POINTER
      6  f173		       a9 f3		      LDA	#>.ADDRESS
      7  f175		       85 9d		      STA	.POINTER+1
      8  f177
    140  f177		       a9 00		      lda	#0
    141  f179		       85 a3		      sta	SpiderDrawPos
    142  f17b		       60		      rts
    143  f17c
    144  f17c				   .title_animation_2
      0  f17c					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f17c				   .POINTER   SET	SpiderPtr
      2  f17c				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f17c
      4  f17c		       a9 19		      LDA	#<.ADDRESS
      5  f17e		       85 9c		      STA	.POINTER
      6  f180		       a9 f3		      LDA	#>.ADDRESS
      7  f182		       85 9d		      STA	.POINTER+1
      8  f184
    146  f184		       a9 01		      lda	#1
    147  f186		       85 a3		      sta	SpiderDrawPos
    148  f188		       60		      rts
    149  f189
    150  f189				   TitleOverScan
    151  f189		       20 90 f1 	      jsr	TitleAudio
    152  f18c		       20 c8 f1 	      jsr	TitleState
    153  f18f		       60		      rts
    154  f190
    155  f190				   TitleAudio
    156  f190
    157  f190		       a6 8e		      ldx	FrameTimer
    158  f192		       e0 00		      cpx	#0
    159  f194		       d0 31		      bne	.title_audio_return
    160  f196
    161  f196							; Reset Timer
    162  f196		       a2 09		      ldx	#TITLE_AUDIO_STEP
    163  f198		       86 8e		      stx	FrameTimer
    164  f19a
    165  f19a				   .title_audio_play
    166  f19a
    167  f19a							; Increment melody position
    168  f19a		       a4 90		      ldy	AudioStep
    169  f19c		       c8		      iny
    170  f19d
    171  f19d							; Check if we're at the end of the melody
    172  f19d		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    173  f19f		       d0 02		      bne	.title_audio_play_note
    174  f1a1
    175  f1a1							; Loop our audio step
    176  f1a1		       a0 00		      ldy	#0
    177  f1a3
    178  f1a3				   .title_audio_play_note
    179  f1a3
    180  f1a3							; Save current position
    181  f1a3		       84 90		      sty	AudioStep
    182  f1a5
    183  f1a5							; Basic Melody Line
    184  f1a5		       b9 22 f3 	      lda	TitleAudio0,y
    185  f1a8		       85 17		      sta	AUDF0
    186  f1aa
    187  f1aa							; Drums and Bass
    188  f1aa		       b9 32 f3 	      lda	TitleTone1,y
    189  f1ad		       c9 ff		      cmp	#$FF
    190  f1af		       f0 0e		      beq	.title_audio_play_note_1_mute
    191  f1b1
    192  f1b1		       85 16		      sta	AUDC1
    193  f1b3		       b9 42 f3 	      lda	TitleAudio1,y
    194  f1b6		       85 18		      sta	AUDF1
    195  f1b8		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    196  f1ba		       85 1a		      sta	AUDV1
    197  f1bc
    198  f1bc		       4c c7 f1 	      jmp	.title_audio_return
    199  f1bf
    200  f1bf				   .title_audio_play_note_1_mute
    201  f1bf
    202  f1bf		       a9 00		      lda	#0
    203  f1c1		       85 18		      sta	AUDF1
    204  f1c3		       85 16		      sta	AUDC1
    205  f1c5		       85 1a		      sta	AUDV1
    206  f1c7
    207  f1c7				   .title_audio_return
    208  f1c7		       60		      rts
    209  f1c8
    210  f1c8				   TitleState
    211  f1c8							; Check if Fire Button on controller 1 is pressed
    212  f1c8		       a5 0c		      lda	INPT4
    213  f1ca		       30 03		      bmi	.title_state_return
    214  f1cc
    215  f1cc		       20 0f fb 	      jsr	GameInit
    216  f1cf
    217  f1cf				   .title_state_return
    218  f1cf		       60		      rts
    219  f1d0
    220  f1d0				   TitleKernel
    221  f1d0
    222  f1d0							; Playfield Control
    223  f1d0		       a5 80		      lda	CtrlPf
    224  f1d2		       29 fe		      and	#%11111110	; No mirroring
    225  f1d4		       85 80		      sta	CtrlPf
    226  f1d6		       85 0a		      sta	CTRLPF
    227  f1d8
    228  f1d8							; Turn on display
    229  f1d8		       a9 00		      lda	#0
    230  f1da		       85 01		      sta	VBLANK
    231  f1dc
    232  f1dc		       85 02		      sta	WSYNC
    233  f1de
    234  f1de				   TitleFrameTopDraw
    235  f1de
    236  f1de							; Start Counters
    237  f1de		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    238  f1e0		       a0 00		      ldy	#0	; Image Counter
    239  f1e2
    240  f1e2				   .title_frame_top
    241  f1e2
    242  f1e2							; 76 machine cycles per scanline
    243  f1e2		       85 02		      sta	WSYNC
    244  f1e4
    245  f1e4				   .title_frame_top_load		; 66 cycles
    246  f1e4
    247  f1e4							; First half of image
    248  f1e4		       b9 aa f2 	      lda	TitleFrameTop,y	; 5
    249  f1e7		       85 0d		      sta	PF0	; 4
    250  f1e9		       b9 ab f2 	      lda	TitleFrameTop+1,y	; 5
    251  f1ec		       85 0e		      sta	PF1	; 4
    252  f1ee		       b9 ac f2 	      lda	TitleFrameTop+2,y	; 5
    253  f1f1		       85 0f		      sta	PF2	; 4
    254  f1f3
      0  f1f3					      sleep	6
      1  f1f3				   .CYCLES    SET	6
      2  f1f3
      3  f1f3				  -	      IF	.CYCLES < 2
      4  f1f3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1f3				  -	      ERR
      6  f1f3					      ENDIF
      7  f1f3
      8  f1f3				  -	      IF	.CYCLES & 1
      9  f1f3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1f3				  -	      nop	0
     11  f1f3				  -	      ELSE
     12  f1f3				  -	      bit	VSYNC
     13  f1f3				  -	      ENDIF
     14  f1f3				  -.CYCLES    SET	.CYCLES - 3
     15  f1f3					      ENDIF
     16  f1f3
     17  f1f3					      REPEAT	.CYCLES / 2
     18  f1f3		       ea		      nop
     17  f1f3					      REPEND
     18  f1f4		       ea		      nop
     17  f1f4					      REPEND
     18  f1f5		       ea		      nop
     19  f1f6					      REPEND
    256  f1f6
    257  f1f6							; Second half of image
    258  f1f6		       b9 ad f2 	      lda	TitleFrameTop+3,y	; 5
    259  f1f9		       85 0d		      sta	PF0	; 4
    260  f1fb		       b9 ae f2 	      lda	TitleFrameTop+4,y	; 5
    261  f1fe		       85 0e		      sta	PF1	; 4
    262  f200		       b9 af f2 	      lda	TitleFrameTop+5,y	; 5
    263  f203		       85 0f		      sta	PF2	; 4
    264  f205
    265  f205				   .title_frame_top_index		; 4 cycles
    266  f205
    267  f205		       ca		      dex		; 2
    268  f206		       d0 da		      bne	.title_frame_top	; 2
    269  f208
    270  f208				   .title_frame_top_index_next		; 6 cycles
    271  f208
    272  f208							; Restore scanline counter
    273  f208		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    274  f20a
    275  f20a		       98		      tya		; 2
    276  f20b		       18		      clc		; 2
    277  f20c		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    278  f20e		       a8		      tay		; 2
    279  f20f
    280  f20f		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA
    281  f211		       d0 04		      bne	.title_frame_top_label_color_skip
    282  f213		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    283  f215		       85 08		      sta	COLUPF	; 4
    284  f217				   .title_frame_top_label_color_skip
    285  f217
    286  f217		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA
    287  f219		       d0 c7		      bne	.title_frame_top	; 2
    288  f21b
    289  f21b				   .title_frame_top_clean
    290  f21b
    291  f21b							; Clear out playfield
    292  f21b		       a9 00		      lda	#0
    293  f21d		       85 0d		      sta	PF0
    294  f21f		       85 0e		      sta	PF1
    295  f221		       85 0f		      sta	PF2
    296  f223
    297  f223				   TitleWebDraw
    298  f223		       a9 02		      lda	#%00000010
    299  f225		       85 1d		      sta	ENAM0
    300  f227
    301  f227		       a9 06		      lda	#TITLE_WEB_COLOR
    302  f229		       85 06		      sta	COLUP0
    303  f22b
    304  f22b		       a2 0f		      ldx	#TITLE_GAP_SIZE
    305  f22d				   .title_web_gap
    306  f22d		       ca		      dex
    307  f22e		       85 02		      sta	WSYNC
    308  f230		       d0 fb		      bne	.title_web_gap
    309  f232
    310  f232				   TitleSpiderDraw
    311  f232
    312  f232		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    313  f234
    314  f234		       a5 a3		      lda	SpiderDrawPos
    315  f236		       c9 01		      cmp	#1
    316  f238		       d0 0c		      bne	.title_spider_extra_web_disable
    317  f23a
    318  f23a				   .title_spider_extra_web_start
    319  f23a		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    320  f23c				   .title_spider_extra_web_loop
    321  f23c		       85 02		      sta	WSYNC
    322  f23e		       ca		      dex
    323  f23f		       d0 fb		      bne	.title_spider_extra_web_loop
    324  f241
    325  f241		       88		      dey
    326  f242		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    327  f244		       d0 f4		      bne	.title_spider_extra_web_start
    328  f246
    329  f246				   .title_spider_extra_web_disable
    330  f246		       a9 00		      lda	#0
    331  f248		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    332  f24a
    333  f24a		       85 02		      sta	WSYNC
    334  f24c
    335  f24c		       85 1d		      sta	ENAM0
    336  f24e		       a9 56		      lda	#TITLE_SPIDER_COLOR
    337  f250		       85 06		      sta	COLUP0
    338  f252
    339  f252				   .title_spider
    340  f252		       b1 9c		      lda	(SpiderPtr),y
    341  f254		       85 1b		      sta	GRP0
    342  f256		       85 1c		      sta	GRP1
    343  f258
    344  f258				   .title_spider_delay
    345  f258		       ca		      dex
    346  f259		       85 02		      sta	WSYNC
    347  f25b		       d0 fb		      bne	.title_spider_delay
    348  f25d
    349  f25d				   .title_spider_index
    350  f25d		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    351  f25f		       88		      dey
    352  f260		       10 f0		      bpl	.title_spider
    353  f262
    354  f262				   .title_spider_clean
    355  f262
    356  f262							; Clear sprites
    357  f262		       a9 00		      lda	#0
    358  f264		       85 1b		      sta	GRP0
    359  f266		       85 1c		      sta	GRP1
    360  f268
    361  f268				   TitleFrameBottomDraw
    362  f268
    363  f268							; Load Frame Color
    364  f268		       a9 06		      lda	#TITLE_WEB_COLOR
    365  f26a		       85 08		      sta	COLUPF
    366  f26c
    367  f26c							; Start Counters
    368  f26c		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    369  f26e		       a0 00		      ldy	#0	; Image Counter
    370  f270
    371  f270				   .title_frame_bottom
    372  f270
    373  f270							; 76 machine cycles per scanline
    374  f270		       85 02		      sta	WSYNC
    375  f272
    376  f272				   .title_frame_bottom_load		; 66 cycles
    377  f272
    378  f272							; First half of image
    379  f272		       b9 f2 f2 	      lda	TitleFrameBottom,y	; 5
    380  f275		       85 0d		      sta	PF0	; 4
    381  f277		       b9 f3 f2 	      lda	TitleFrameBottom+1,y	; 5
    382  f27a		       85 0e		      sta	PF1	; 4
    383  f27c		       b9 f4 f2 	      lda	TitleFrameBottom+2,y	; 5
    384  f27f		       85 0f		      sta	PF2	; 4
    385  f281
      0  f281					      sleep	6
      1  f281				   .CYCLES    SET	6
      2  f281
      3  f281				  -	      IF	.CYCLES < 2
      4  f281				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f281				  -	      ERR
      6  f281					      ENDIF
      7  f281
      8  f281				  -	      IF	.CYCLES & 1
      9  f281				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f281				  -	      nop	0
     11  f281				  -	      ELSE
     12  f281				  -	      bit	VSYNC
     13  f281				  -	      ENDIF
     14  f281				  -.CYCLES    SET	.CYCLES - 3
     15  f281					      ENDIF
     16  f281
     17  f281					      REPEAT	.CYCLES / 2
     18  f281		       ea		      nop
     17  f281					      REPEND
     18  f282		       ea		      nop
     17  f282					      REPEND
     18  f283		       ea		      nop
     19  f284					      REPEND
    387  f284
    388  f284							; Second half of image
    389  f284		       b9 f5 f2 	      lda	TitleFrameBottom+3,y	; 5
    390  f287		       85 0d		      sta	PF0	; 4
    391  f289		       b9 f6 f2 	      lda	TitleFrameBottom+4,y	; 5
    392  f28c		       85 0e		      sta	PF1	; 4
    393  f28e		       b9 f7 f2 	      lda	TitleFrameBottom+5,y	; 5
    394  f291		       85 0f		      sta	PF2	; 4
    395  f293
    396  f293				   .title_frame_bottom_index		; 4 cycles
    397  f293
    398  f293		       ca		      dex		; 2
    399  f294		       d0 da		      bne	.title_frame_bottom	; 2
    400  f296
    401  f296				   .title_frame_bottom_index_next		; 6 cycles
    402  f296
    403  f296							; Restore scanline counter
    404  f296		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    405  f298
    406  f298		       98		      tya		; 2
    407  f299		       18		      clc		; 2
    408  f29a		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    409  f29c		       a8		      tay		; 2
    410  f29d		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    411  f29f		       d0 cf		      bne	.title_frame_bottom	; 2
    412  f2a1
    413  f2a1				   .title_frame_bottom_clean
    414  f2a1
    415  f2a1							; Clear out playfield
    416  f2a1		       a9 00		      lda	#0
    417  f2a3		       85 0d		      sta	PF0
    418  f2a5		       85 0e		      sta	PF1
    419  f2a7		       85 0f		      sta	PF2
    420  f2a9
    421  f2a9				   .title_kernel_return
    422  f2a9		       60		      rts
    423  f2aa
    424  f2aa				   TitleAssets
    425  f2aa
    426  f2aa							; Assets
------- FILE title_frame_top.asm LEVEL 3 PASS 2
      0  f2aa					      include	"title_frame_top.asm"
      1  f2aa				   TitleFrameTop
      2  f2aa
      3  f2aa		       a0		      .BYTE.b	%10100000
      4  f2ab		       54		      .BYTE.b	%01010100
      5  f2ac		       01		      .BYTE.b	%00000001
      6  f2ad		       00		      .BYTE.b	%00000000
      7  f2ae		       03		      .BYTE.b	%00000011
      8  f2af		       2c		      .BYTE.b	%00101100
      9  f2b0
     10  f2b0		       d0		      .BYTE.b	%11010000
     11  f2b1		       23		      .BYTE.b	%00100011
     12  f2b2		       00		      .BYTE.b	%00000000
     13  f2b3		       00		      .BYTE.b	%00000000
     14  f2b4		       00		      .BYTE.b	%00000000
     15  f2b5		       51		      .BYTE.b	%01010001
     16  f2b6
     17  f2b6		       60		      .BYTE.b	%01100000
     18  f2b7		       dc		      .BYTE.b	%11011100
     19  f2b8		       00		      .BYTE.b	%00000000
     20  f2b9		       00		      .BYTE.b	%00000000
     21  f2ba		       00		      .BYTE.b	%00000000
     22  f2bb		       8e		      .BYTE.b	%10001110
     23  f2bc
     24  f2bc		       b0		      .BYTE.b	%10110000
     25  f2bd		       00		      .BYTE.b	%00000000
     26  f2be		       00		      .BYTE.b	%00000000
     27  f2bf		       00		      .BYTE.b	%00000000
     28  f2c0		       00		      .BYTE.b	%00000000
     29  f2c1		       51		      .BYTE.b	%01010001
     30  f2c2
     31  f2c2		       40		      .BYTE.b	%01000000
     32  f2c3		       80		      .BYTE.b	%10000000
     33  f2c4		       00		      .BYTE.b	%00000000
     34  f2c5		       00		      .BYTE.b	%00000000
     35  f2c6		       00		      .BYTE.b	%00000000
     36  f2c7		       ad		      .BYTE.b	%10101101
     37  f2c8
     38  f2c8		       50		      .BYTE.b	%01010000
     39  f2c9		       00		      .BYTE.b	%00000000
     40  f2ca		       00		      .BYTE.b	%00000000
     41  f2cb		       00		      .BYTE.b	%00000000
     42  f2cc		       01		      .BYTE.b	%00000001
     43  f2cd		       82		      .BYTE.b	%10000010
     44  f2ce
     45  f2ce		       20		      .BYTE.b	%00100000
     46  f2cf		       00		      .BYTE.b	%00000000
     47  f2d0		       00		      .BYTE.b	%00000000
     48  f2d1		       00		      .BYTE.b	%00000000
     49  f2d2		       02		      .BYTE.b	%00000010
     50  f2d3		       00		      .BYTE.b	%00000000
     51  f2d4
     52  f2d4		       c0		      .BYTE.b	%11000000
     53  f2d5		       77		      .BYTE.b	%01110111
     54  f2d6		       66		      .BYTE.b	%01100110
     55  f2d7		       30		      .BYTE.b	%00110000
     56  f2d8		       22		      .BYTE.b	%00100010
     57  f2d9		       1b		      .BYTE.b	%00011011
     58  f2da
     59  f2da		       40		      .BYTE.b	%01000000
     60  f2db		       52		      .BYTE.b	%01010010
     61  f2dc		       2a		      .BYTE.b	%00101010
     62  f2dd		       50		      .BYTE.b	%01010000
     63  f2de		       22		      .BYTE.b	%00100010
     64  f2df		       29		      .BYTE.b	%00101001
     65  f2e0
     66  f2e0		       c0		      .BYTE.b	%11000000
     67  f2e1		       72		      .BYTE.b	%01110010
     68  f2e2		       6a		      .BYTE.b	%01101010
     69  f2e3		       50		      .BYTE.b	%01010000
     70  f2e4		       22		      .BYTE.b	%00100010
     71  f2e5		       1b		      .BYTE.b	%00011011
     72  f2e6
     73  f2e6		       80		      .BYTE.b	%10000000
     74  f2e7		       42		      .BYTE.b	%01000010
     75  f2e8		       2a		      .BYTE.b	%00101010
     76  f2e9		       30		      .BYTE.b	%00110000
     77  f2ea		       2a		      .BYTE.b	%00101010
     78  f2eb		       29		      .BYTE.b	%00101001
     79  f2ec
     80  f2ec		       c0		      .BYTE.b	%11000000
     81  f2ed		       47		      .BYTE.b	%01000111
     82  f2ee		       e6		      .BYTE.b	%11100110
     83  f2ef		       50		      .BYTE.b	%01010000
     84  f2f0		       14		      .BYTE.b	%00010100
     85  f2f1		       1b		      .BYTE.b	%00011011
------- FILE title.asm
------- FILE title_frame_bottom.asm LEVEL 3 PASS 2
      0  f2f2					      include	"title_frame_bottom.asm"
      1  f2f2				   TitleFrameBottom
      2  f2f2
      3  f2f2		       20		      .BYTE.b	%00100000
      4  f2f3		       00		      .BYTE.b	%00000000
      5  f2f4		       00		      .BYTE.b	%00000000
      6  f2f5		       00		      .BYTE.b	%00000000
      7  f2f6		       00		      .BYTE.b	%00000000
      8  f2f7		       64		      .BYTE.b	%01100100
      9  f2f8
     10  f2f8		       50		      .BYTE.b	%01010000
     11  f2f9		       00		      .BYTE.b	%00000000
     12  f2fa		       00		      .BYTE.b	%00000000
     13  f2fb		       00		      .BYTE.b	%00000000
     14  f2fc		       00		      .BYTE.b	%00000000
     15  f2fd		       98		      .BYTE.b	%10011000
     16  f2fe
     17  f2fe		       90		      .BYTE.b	%10010000
     18  f2ff		       80		      .BYTE.b	%10000000
     19  f300		       00		      .BYTE.b	%00000000
     20  f301		       00		      .BYTE.b	%00000000
     21  f302		       00		      .BYTE.b	%00000000
     22  f303		       28		      .BYTE.b	%00101000
     23  f304
     24  f304		       60		      .BYTE.b	%01100000
     25  f305		       60		      .BYTE.b	%01100000
     26  f306		       00		      .BYTE.b	%00000000
     27  f307		       00		      .BYTE.b	%00000000
     28  f308		       00		      .BYTE.b	%00000000
     29  f309		       44		      .BYTE.b	%01000100
     30  f30a
     31  f30a		       d0		      .BYTE.b	%11010000
     32  f30b		       1c		      .BYTE.b	%00011100
     33  f30c		       00		      .BYTE.b	%00000000
     34  f30d		       00		      .BYTE.b	%00000000
     35  f30e		       00		      .BYTE.b	%00000000
     36  f30f		       ab		      .BYTE.b	%10101011
------- FILE title.asm
------- FILE title_spider.asm LEVEL 3 PASS 2
      0  f310					      include	"title_spider.asm"
      1  f310				   TitleSpider
      2  f310
      3  f310		       30		      .BYTE.b	%00110000
      4  f311		       67		      .BYTE.b	%01100111
      5  f312		       4f		      .BYTE.b	%01001111
      6  f313		       dd		      .BYTE.b	%11011101
      7  f314		       d8		      .BYTE.b	%11011000
      8  f315		       df		      .BYTE.b	%11011111
      9  f316		       4d		      .BYTE.b	%01001101
     10  f317		       6f		      .BYTE.b	%01101111
     11  f318		       3b		      .BYTE.b	%00111011
     12  f319
     13  f319		       37		      .BYTE.b	%00110111
     14  f31a		       6d		      .BYTE.b	%01101101
     15  f31b		       d8		      .BYTE.b	%11011000
     16  f31c		       df		      .BYTE.b	%11011111
     17  f31d		       cd		      .BYTE.b	%11001101
     18  f31e		       6f		      .BYTE.b	%01101111
     19  f31f		       3b		      .BYTE.b	%00111011
     20  f320		       00		      .BYTE.b	%00000000
     21  f321		       00		      .BYTE.b	%00000000
------- FILE title.asm
    430  f322
    431  f322				   TitleAudio0
    432  f322
    433  f322		       0f		      .BYTE.b	#15	; B
    434  f323		       13		      .BYTE.b	#19	; G
    435  f324		       17		      .BYTE.b	#23	; E
    436  f325		       13		      .BYTE.b	#19	; G
    437  f326		       0e		      .BYTE.b	#14	; C
    438  f327		       13		      .BYTE.b	#19
    439  f328		       17		      .BYTE.b	#23
    440  f329		       13		      .BYTE.b	#19
    441  f32a		       0c		      .BYTE.b	#12	; D
    442  f32b		       13		      .BYTE.b	#19
    443  f32c		       17		      .BYTE.b	#23
    444  f32d		       13		      .BYTE.b	#19
    445  f32e		       0e		      .BYTE.b	#14	; C
    446  f32f		       13		      .BYTE.b	#19
    447  f330		       17		      .BYTE.b	#23
    448  f331		       13		      .BYTE.b	#19
    449  f332
    450  f332				   TitleTone1
    451  f332
    452  f332		       0f		      .BYTE.b	#15	; Electronic Rumble
    453  f333		       ff		      .BYTE.b	#$FF
    454  f334		       01		      .BYTE.b	#1	; Low Pure Tone
    455  f335		       01		      .BYTE.b	#1
    456  f336		       08		      .BYTE.b	#8	; White Noise
    457  f337		       01		      .BYTE.b	#1
    458  f338		       01		      .BYTE.b	#1
    459  f339		       ff		      .BYTE.b	#$FF
    460  f33a		       ff		      .BYTE.b	#$FF
    461  f33b		       0f		      .BYTE.b	#15
    462  f33c		       ff		      .BYTE.b	#$FF
    463  f33d		       ff		      .BYTE.b	#$FF
    464  f33e		       08		      .BYTE.b	#8
    465  f33f		       ff		      .BYTE.b	#$FF
    466  f340		       01		      .BYTE.b	#1
    467  f341		       01		      .BYTE.b	#1
    468  f342
    469  f342				   TitleAudio1
    470  f342
    471  f342		       1d		      .BYTE.b	#29	; Kick
    472  f343		       ff		      .BYTE.b	#$FF
    473  f344		       1f		      .BYTE.b	#31	; C
    474  f345		       1f		      .BYTE.b	#31
    475  f346		       07		      .BYTE.b	#7	; Snare
    476  f347		       1f		      .BYTE.b	#31
    477  f348		       1f		      .BYTE.b	#31
    478  f349		       ff		      .BYTE.b	#$FF
    479  f34a		       ff		      .BYTE.b	#$FF
    480  f34b		       1d		      .BYTE.b	#29
    481  f34c		       ff		      .BYTE.b	#$FF
    482  f34d		       ff		      .BYTE.b	#$FF
    483  f34e		       07		      .BYTE.b	#7
    484  f34f		       ff		      .BYTE.b	#$FF
    485  f350		       17		      .BYTE.b	#23	; F
    486  f351		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f352					      include	"game.asm"
      1  f352							;================
      2  f352							; Game
      3  f352							;================
      4  f352
      5  f352							; Constants
      6  f352
      7  f352		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f352		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f352		       00 09	   GAME_AUDIO_STEP =	9
     10  f352		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f352		       00 06	   GAME_AUDIO_TONE =	6
     12  f352
     13  f352							; Object Code
     14  f352
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f352					      include	"objects/level.asm"
      1  f352							;======================
      2  f352							; Level Logic
      3  f352							;======================
      4  f352
      5  f352							; Constants
      6  f352
      7  f352		       00 04	   LEVELS     =	4
      8  f352
      9  f352				   LevelInit
     10  f352
     11  f352							; Set beginning level by difficulty switches treated as binary
     12  f352		       ad 82 02 	      lda	SWCHB
     13  f355					      REPEAT	6
     14  f355		       4a		      lsr
     13  f355					      REPEND
     14  f356		       4a		      lsr
     13  f356					      REPEND
     14  f357		       4a		      lsr
     13  f357					      REPEND
     14  f358		       4a		      lsr
     13  f358					      REPEND
     14  f359		       4a		      lsr
     13  f359					      REPEND
     14  f35a		       4a		      lsr
     15  f35b					      REPEND
     16  f35b		       29 03		      and	#%00000011
     17  f35d		       85 98		      sta	LevelCurrent
     18  f35f
     19  f35f		       20 78 f3 	      jsr	LevelLoad
     20  f362
     21  f362		       60		      rts
     22  f363
     23  f363				   LevelUpdate
     24  f363
     25  f363							; Check if score is high enough
     26  f363		       a4 98		      ldy	LevelCurrent
     27  f365		       a5 93		      lda	ScoreValue+1
     28  f367		       d9 94 f3 	      cmp	LevelDataScore,y
     29  f36a		       90 0b		      bcc	.level_update_return
     30  f36c
     31  f36c							; Check if we haven't reached the final level
     32  f36c		       a5 98		      lda	LevelCurrent
     33  f36e		       c9 03		      cmp	#LEVELS-1
     34  f370		       b0 05		      bcs	.level_update_return
     35  f372
     36  f372		       e6 98		      inc	LevelCurrent
     37  f374		       20 78 f3 	      jsr	LevelLoad
     38  f377
     39  f377				   .level_update_return
     40  f377		       60		      rts
     41  f378
     42  f378				   LevelLoad
     43  f378		       a4 98		      ldy	LevelCurrent
     44  f37a
     45  f37a							; Background Color
     46  f37a		       b9 98 f3 	      lda	LevelDataBk,y
     47  f37d		       85 9a		      sta	WebColor+0
     48  f37f
     49  f37f							; Web Color
     50  f37f		       b9 9c f3 	      lda	LevelDataPf,y
     51  f382		       85 9b		      sta	WebColor+1
     52  f384
     53  f384							; Bug Speed
     54  f384		       b9 a0 f3 	      lda	LevelDataBug,y
     55  f387		       85 b0		      sta	BugSpeed
     56  f389
     57  f389							; Swatter Wait Time
     58  f389		       b9 a4 f3 	      lda	LevelDataSwatterWait,y
     59  f38c		       85 c1		      sta	SwatterWaitTime
     60  f38e
     61  f38e							; Swatter Hit Damage
     62  f38e		       b9 a8 f3 	      lda	LevelDataSwatterDamage,y
     63  f391		       85 c2		      sta	SwatterHitDamage
     64  f393
     65  f393		       60		      rts
     66  f394
     67  f394				   LevelDataScore		; Score needed
     68  f394		       10		      .BYTE.b	#$10
     69  f395		       20		      .BYTE.b	#$20
     70  f396		       40		      .BYTE.b	#$40
     71  f397		       ff		      .BYTE.b	#$FF
     72  f398
     73  f398				   LevelDataBk		; Background Color
     74  f398		       00		      .BYTE.b	#$00
     75  f399		       60		      .BYTE.b	#$60
     76  f39a		       50		      .BYTE.b	#$50
     77  f39b		       30		      .BYTE.b	#$30
     78  f39c
     79  f39c				   LevelDataPf		; Web Color
     80  f39c		       06		      .BYTE.b	#$06
     81  f39d		       64		      .BYTE.b	#$64
     82  f39e		       54		      .BYTE.b	#$54
     83  f39f		       34		      .BYTE.b	#$34
     84  f3a0
     85  f3a0				   LevelDataBug 		; Bug Speed
     86  f3a0		       02		      .BYTE.b	#2
     87  f3a1		       03		      .BYTE.b	#3
     88  f3a2		       04		      .BYTE.b	#4
     89  f3a3		       05		      .BYTE.b	#5
     90  f3a4
     91  f3a4				   LevelDataSwatterWait 		; Swatter Wait Time Min (adds random 0-128)
     92  f3a4		       b4		      .BYTE.b	#180
     93  f3a5		       96		      .BYTE.b	#150
     94  f3a6		       78		      .BYTE.b	#120
     95  f3a7		       3c		      .BYTE.b	#60
     96  f3a8
     97  f3a8				   LevelDataSwatterDamage		; Swatter Damage
     98  f3a8		       10		      .BYTE.b	#$10
     99  f3a9		       18		      .BYTE.b	#$18
    100  f3aa		       20		      .BYTE.b	#$20
    101  f3ab		       40		      .BYTE.b	#$40
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f3ac					      include	"objects/score.asm"
      1  f3ac							;======================
      2  f3ac							; Score (playfield)
      3  f3ac							;======================
      4  f3ac
      5  f3ac							; Constants
      6  f3ac
      7  f3ac		       00 00	   SCORE_BG_COLOR =	#$00
      8  f3ac		       00 0f	   SCORE_LABEL_COLOR =	#$0f
      9  f3ac		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f3ac		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f3ac
     12  f3ac		       00 05	   SCORE_LABEL_SIZE =	5
     13  f3ac		       00 05	   SCORE_DIGIT_SIZE =	5
     14  f3ac		       00 02	   SCORE_LINE_SIZE =	2
     15  f3ac		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     16  f3ac
     17  f3ac							; Initialization
     18  f3ac
     19  f3ac				   ScoreInit
     20  f3ac
     21  f3ac							; Health Score
     22  f3ac		       a9 ff		      lda	#$FF
     23  f3ae		       85 92		      sta	ScoreValue+0
     24  f3b0
     25  f3b0							; Game Score
     26  f3b0		       a9 00		      lda	#0
     27  f3b2		       85 93		      sta	ScoreValue+1
     28  f3b4
     29  f3b4		       60		      rts
     30  f3b5
     31  f3b5							; Frame Update
     32  f3b5
     33  f3b5				   ScoreUpdate
     34  f3b5
     35  f3b5							; Current Level Digit
     36  f3b5		       a5 98		      lda	LevelCurrent
     37  f3b7		       18		      clc
     38  f3b8		       69 01		      adc	#1
     39  f3ba		       29 0f		      and	#$0f
     40  f3bc		       85 83		      sta	Temp
     41  f3be		       0a		      asl
     42  f3bf		       0a		      asl
     43  f3c0		       65 83		      adc	Temp
     44  f3c2		       85 94		      sta	ScoreDigitOnes
     45  f3c4
     46  f3c4							; Health Bar
     47  f3c4		       a5 92		      lda	ScoreValue+0
     48  f3c6		       f0 1c		      beq	.score_update_bar_empty
     49  f3c8
     50  f3c8					      REPEAT	4
     51  f3c8		       4a		      lsr
     50  f3c8					      REPEND
     51  f3c9		       4a		      lsr
     50  f3c9					      REPEND
     51  f3ca		       4a		      lsr
     50  f3ca					      REPEND
     51  f3cb		       4a		      lsr
     52  f3cc					      REPEND
     53  f3cc		       c9 08		      cmp	#8
     54  f3ce		       b0 09		      bcs	.score_update_bar_top
     55  f3d0
     56  f3d0				   .score_update_bar_bottom
     57  f3d0		       aa		      tax
     58  f3d1		       bd 8e f4 	      lda	ScoreBar,x
     59  f3d4		       a0 00		      ldy	#$00
     60  f3d6		       4c e8 f3 	      jmp	.score_update_bar_store
     61  f3d9
     62  f3d9				   .score_update_bar_top
     63  f3d9		       29 07		      and	#%00000111
     64  f3db		       aa		      tax
     65  f3dc		       a9 ff		      lda	#$ff
     66  f3de		       bc 96 f4 	      ldy	ScoreBarFlip,x
     67  f3e1		       4c e8 f3 	      jmp	.score_update_bar_store
     68  f3e4
     69  f3e4				   .score_update_bar_empty
     70  f3e4		       a9 00		      lda	#0
     71  f3e6		       a0 00		      ldy	#0
     72  f3e8
     73  f3e8				   .score_update_bar_store
     74  f3e8		       85 96		      sta	ScoreBarGfx+0
     75  f3ea		       84 97		      sty	ScoreBarGfx+1
     76  f3ec
     77  f3ec				   .score_update_end
     78  f3ec		       60		      rts
     79  f3ed
     80  f3ed							; Draw loop (uses SCORE_LINES scanlines)
     81  f3ed
     82  f3ed				   ScoreDraw
     83  f3ed
     84  f3ed							; Load Colors
     85  f3ed		       a9 00		      lda	#SCORE_BG_COLOR
     86  f3ef		       85 09		      sta	COLUBK
     87  f3f1		       a9 0f		      lda	#SCORE_LABEL_COLOR
     88  f3f3		       85 08		      sta	COLUPF
     89  f3f5		       85 06		      sta	COLUP0
     90  f3f7		       85 07		      sta	COLUP1
     91  f3f9
     92  f3f9							; Set Non-Mirror
     93  f3f9		       a5 80		      lda	CtrlPf
     94  f3fb		       29 fc		      and	#%11111100
     95  f3fd		       09 02		      ora	#%00000010
     96  f3ff		       85 80		      sta	CtrlPf
     97  f401		       85 0a		      sta	CTRLPF
     98  f403
     99  f403		       85 02		      sta	WSYNC
    100  f405
    101  f405		       a2 04		      ldx	#SCORE_LABEL_SIZE-1
    102  f407				   .score_draw_label
    103  f407		       bd ee f4 	      lda	ScoreLevel,x
    104  f40a		       bc f3 f4 	      ldy	ScoreHealth,x
    105  f40d
    106  f40d		       85 0e		      sta	PF1
      0  f40f					      sleep	28
      1  f40f				   .CYCLES    SET	28
      2  f40f
      3  f40f				  -	      IF	.CYCLES < 2
      4  f40f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f40f				  -	      ERR
      6  f40f					      ENDIF
      7  f40f
      8  f40f				  -	      IF	.CYCLES & 1
      9  f40f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f40f				  -	      nop	0
     11  f40f				  -	      ELSE
     12  f40f				  -	      bit	VSYNC
     13  f40f				  -	      ENDIF
     14  f40f				  -.CYCLES    SET	.CYCLES - 3
     15  f40f					      ENDIF
     16  f40f
     17  f40f					      REPEAT	.CYCLES / 2
     18  f40f		       ea		      nop
     17  f40f					      REPEND
     18  f410		       ea		      nop
     17  f410					      REPEND
     18  f411		       ea		      nop
     17  f411					      REPEND
     18  f412		       ea		      nop
     17  f412					      REPEND
     18  f413		       ea		      nop
     17  f413					      REPEND
     18  f414		       ea		      nop
     17  f414					      REPEND
     18  f415		       ea		      nop
     17  f415					      REPEND
     18  f416		       ea		      nop
     17  f416					      REPEND
     18  f417		       ea		      nop
     17  f417					      REPEND
     18  f418		       ea		      nop
     17  f418					      REPEND
     18  f419		       ea		      nop
     17  f419					      REPEND
     18  f41a		       ea		      nop
     17  f41a					      REPEND
     18  f41b		       ea		      nop
     17  f41b					      REPEND
     18  f41c		       ea		      nop
     19  f41d					      REPEND
    108  f41d		       84 0e		      sty	PF1
    109  f41f
    110  f41f		       ca		      dex
    111  f420		       85 02		      sta	WSYNC
    112  f422		       10 e3		      bpl	.score_draw_label
    113  f424
    114  f424							; Clear labels and setup color
    115  f424		       a9 00		      lda	#0
    116  f426		       85 0e		      sta	PF1
    117  f428		       85 02		      sta	WSYNC
    118  f42a
    119  f42a		       a9 44		      lda	#SCORE_LEVEL_COLOR
    120  f42c		       85 08		      sta	COLUPF
    121  f42e		       85 06		      sta	COLUP0
    122  f430		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    123  f432		       85 07		      sta	COLUP1
    124  f434
    125  f434		       85 02		      sta	WSYNC
    126  f436
    127  f436		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    128  f438				   .score_draw_digit
    129  f438
    130  f438		       a4 94		      ldy	ScoreDigitOnes
    131  f43a		       b9 9e f4 	      lda	ScoreDigits,y
    132  f43d		       29 f0		      and	#$f0
    133  f43f		       85 95		      sta	ScoreDigitGfx
    134  f441		       a0 00		      ldy	#0
    135  f443
    136  f443		       85 02		      sta	WSYNC
    137  f445		       85 0e		      sta	PF1
    138  f447		       84 0f		      sty	PF2
    139  f449
    140  f449		       a5 96		      lda	ScoreBarGfx+0
    141  f44b		       a4 97		      ldy	ScoreBarGfx+1
      0  f44d					      sleep	30
      1  f44d				   .CYCLES    SET	30
      2  f44d
      3  f44d				  -	      IF	.CYCLES < 2
      4  f44d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f44d				  -	      ERR
      6  f44d					      ENDIF
      7  f44d
      8  f44d				  -	      IF	.CYCLES & 1
      9  f44d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f44d				  -	      nop	0
     11  f44d				  -	      ELSE
     12  f44d				  -	      bit	VSYNC
     13  f44d				  -	      ENDIF
     14  f44d				  -.CYCLES    SET	.CYCLES - 3
     15  f44d					      ENDIF
     16  f44d
     17  f44d					      REPEAT	.CYCLES / 2
     18  f44d		       ea		      nop
     17  f44d					      REPEND
     18  f44e		       ea		      nop
     17  f44e					      REPEND
     18  f44f		       ea		      nop
     17  f44f					      REPEND
     18  f450		       ea		      nop
     17  f450					      REPEND
     18  f451		       ea		      nop
     17  f451					      REPEND
     18  f452		       ea		      nop
     17  f452					      REPEND
     18  f453		       ea		      nop
     17  f453					      REPEND
     18  f454		       ea		      nop
     17  f454					      REPEND
     18  f455		       ea		      nop
     17  f455					      REPEND
     18  f456		       ea		      nop
     17  f456					      REPEND
     18  f457		       ea		      nop
     17  f457					      REPEND
     18  f458		       ea		      nop
     17  f458					      REPEND
     18  f459		       ea		      nop
     17  f459					      REPEND
     18  f45a		       ea		      nop
     17  f45a					      REPEND
     18  f45b		       ea		      nop
     19  f45c					      REPEND
    143  f45c		       85 0e		      sta	PF1
    144  f45e		       84 0f		      sty	PF2
    145  f460
    146  f460		       a5 95		      lda	ScoreDigitGfx
    147  f462		       a0 00		      ldy	#0
    148  f464		       85 02		      sta	WSYNC
    149  f466		       85 0e		      sta	PF1
    150  f468		       84 0f		      sty	PF2
    151  f46a
    152  f46a		       e6 94		      inc	ScoreDigitOnes
    153  f46c
    154  f46c		       a5 96		      lda	ScoreBarGfx+0
    155  f46e		       a4 97		      ldy	ScoreBarGfx+1
      0  f470					      sleep	28
      1  f470				   .CYCLES    SET	28
      2  f470
      3  f470				  -	      IF	.CYCLES < 2
      4  f470				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f470				  -	      ERR
      6  f470					      ENDIF
      7  f470
      8  f470				  -	      IF	.CYCLES & 1
      9  f470				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f470				  -	      nop	0
     11  f470				  -	      ELSE
     12  f470				  -	      bit	VSYNC
     13  f470				  -	      ENDIF
     14  f470				  -.CYCLES    SET	.CYCLES - 3
     15  f470					      ENDIF
     16  f470
     17  f470					      REPEAT	.CYCLES / 2
     18  f470		       ea		      nop
     17  f470					      REPEND
     18  f471		       ea		      nop
     17  f471					      REPEND
     18  f472		       ea		      nop
     17  f472					      REPEND
     18  f473		       ea		      nop
     17  f473					      REPEND
     18  f474		       ea		      nop
     17  f474					      REPEND
     18  f475		       ea		      nop
     17  f475					      REPEND
     18  f476		       ea		      nop
     17  f476					      REPEND
     18  f477		       ea		      nop
     17  f477					      REPEND
     18  f478		       ea		      nop
     17  f478					      REPEND
     18  f479		       ea		      nop
     17  f479					      REPEND
     18  f47a		       ea		      nop
     17  f47a					      REPEND
     18  f47b		       ea		      nop
     17  f47b					      REPEND
     18  f47c		       ea		      nop
     17  f47c					      REPEND
     18  f47d		       ea		      nop
     19  f47e					      REPEND
    157  f47e		       85 0e		      sta	PF1
    158  f480		       84 0f		      sty	PF2
    159  f482
    160  f482		       ca		      dex
    161  f483		       d0 b3		      bne	.score_draw_digit
    162  f485
    163  f485		       a9 00		      lda	#0
    164  f487		       85 02		      sta	WSYNC
    165  f489		       85 0e		      sta	PF1
    166  f48b		       85 0f		      sta	PF2
    167  f48d
    168  f48d		       60		      rts
    169  f48e
    170  f48e				   ScoreBar
    171  f48e		       80		      .BYTE.b	#%10000000
    172  f48f		       c0		      .BYTE.b	#%11000000
    173  f490		       e0		      .BYTE.b	#%11100000
    174  f491		       f0		      .BYTE.b	#%11110000
    175  f492		       f8		      .BYTE.b	#%11111000
    176  f493		       fc		      .BYTE.b	#%11111100
    177  f494		       fe		      .BYTE.b	#%11111110
    178  f495		       ff		      .BYTE.b	#%11111111
    179  f496
    180  f496				   ScoreBarFlip
    181  f496		       01		      .BYTE.b	#%00000001
    182  f497		       03		      .BYTE.b	#%00000011
    183  f498		       07		      .BYTE.b	#%00000111
    184  f499		       0f		      .BYTE.b	#%00001111
    185  f49a		       1f		      .BYTE.b	#%00011111
    186  f49b		       3f		      .BYTE.b	#%00111111
    187  f49c		       7f		      .BYTE.b	#%01111111
    188  f49d		       7f		      .BYTE.b	#%01111111
    189  f49e
------- FILE objects/score_digits.asm LEVEL 4 PASS 2
      0  f49e					      include	"objects/score_digits.asm"
      1  f49e				   ScoreDigits
      2  f49e
      3  f49e		       77		      .BYTE.b	%01110111
      4  f49f		       55		      .BYTE.b	%01010101
      5  f4a0		       55		      .BYTE.b	%01010101
      6  f4a1		       55		      .BYTE.b	%01010101
      7  f4a2		       77		      .BYTE.b	%01110111
      8  f4a3
      9  f4a3		       11		      .BYTE.b	%00010001
     10  f4a4		       11		      .BYTE.b	%00010001
     11  f4a5		       11		      .BYTE.b	%00010001
     12  f4a6		       11		      .BYTE.b	%00010001
     13  f4a7		       11		      .BYTE.b	%00010001
     14  f4a8
     15  f4a8		       77		      .BYTE.b	%01110111
     16  f4a9		       11		      .BYTE.b	%00010001
     17  f4aa		       77		      .BYTE.b	%01110111
     18  f4ab		       44		      .BYTE.b	%01000100
     19  f4ac		       77		      .BYTE.b	%01110111
     20  f4ad
     21  f4ad		       77		      .BYTE.b	%01110111
     22  f4ae		       11		      .BYTE.b	%00010001
     23  f4af		       33		      .BYTE.b	%00110011
     24  f4b0		       11		      .BYTE.b	%00010001
     25  f4b1		       77		      .BYTE.b	%01110111
     26  f4b2
     27  f4b2		       55		      .BYTE.b	%01010101
     28  f4b3		       55		      .BYTE.b	%01010101
     29  f4b4		       77		      .BYTE.b	%01110111
     30  f4b5		       11		      .BYTE.b	%00010001
     31  f4b6		       11		      .BYTE.b	%00010001
     32  f4b7
     33  f4b7		       77		      .BYTE.b	%01110111
     34  f4b8		       44		      .BYTE.b	%01000100
     35  f4b9		       77		      .BYTE.b	%01110111
     36  f4ba		       11		      .BYTE.b	%00010001
     37  f4bb		       77		      .BYTE.b	%01110111
     38  f4bc
     39  f4bc		       77		      .BYTE.b	%01110111
     40  f4bd		       44		      .BYTE.b	%01000100
     41  f4be		       77		      .BYTE.b	%01110111
     42  f4bf		       55		      .BYTE.b	%01010101
     43  f4c0		       77		      .BYTE.b	%01110111
     44  f4c1
     45  f4c1		       77		      .BYTE.b	%01110111
     46  f4c2		       11		      .BYTE.b	%00010001
     47  f4c3		       22		      .BYTE.b	%00100010
     48  f4c4		       22		      .BYTE.b	%00100010
     49  f4c5		       22		      .BYTE.b	%00100010
     50  f4c6
     51  f4c6		       77		      .BYTE.b	%01110111
     52  f4c7		       55		      .BYTE.b	%01010101
     53  f4c8		       77		      .BYTE.b	%01110111
     54  f4c9		       55		      .BYTE.b	%01010101
     55  f4ca		       77		      .BYTE.b	%01110111
     56  f4cb
     57  f4cb		       77		      .BYTE.b	%01110111
     58  f4cc		       55		      .BYTE.b	%01010101
     59  f4cd		       77		      .BYTE.b	%01110111
     60  f4ce		       11		      .BYTE.b	%00010001
     61  f4cf		       11		      .BYTE.b	%00010001
     62  f4d0
     63  f4d0		       77		      .BYTE.b	%01110111
     64  f4d1		       55		      .BYTE.b	%01010101
     65  f4d2		       77		      .BYTE.b	%01110111
     66  f4d3		       55		      .BYTE.b	%01010101
     67  f4d4		       55		      .BYTE.b	%01010101
     68  f4d5
     69  f4d5		       66		      .BYTE.b	%01100110
     70  f4d6		       55		      .BYTE.b	%01010101
     71  f4d7		       66		      .BYTE.b	%01100110
     72  f4d8		       55		      .BYTE.b	%01010101
     73  f4d9		       66		      .BYTE.b	%01100110
     74  f4da
     75  f4da		       77		      .BYTE.b	%01110111
     76  f4db		       44		      .BYTE.b	%01000100
     77  f4dc		       44		      .BYTE.b	%01000100
     78  f4dd		       44		      .BYTE.b	%01000100
     79  f4de		       77		      .BYTE.b	%01110111
     80  f4df
     81  f4df		       66		      .BYTE.b	%01100110
     82  f4e0		       55		      .BYTE.b	%01010101
     83  f4e1		       55		      .BYTE.b	%01010101
     84  f4e2		       55		      .BYTE.b	%01010101
     85  f4e3		       66		      .BYTE.b	%01100110
     86  f4e4
     87  f4e4		       77		      .BYTE.b	%01110111
     88  f4e5		       44		      .BYTE.b	%01000100
     89  f4e6		       66		      .BYTE.b	%01100110
     90  f4e7		       44		      .BYTE.b	%01000100
     91  f4e8		       77		      .BYTE.b	%01110111
     92  f4e9
     93  f4e9		       77		      .BYTE.b	%01110111
     94  f4ea		       44		      .BYTE.b	%01000100
     95  f4eb		       66		      .BYTE.b	%01100110
     96  f4ec		       44		      .BYTE.b	%01000100
     97  f4ed		       44		      .BYTE.b	%01000100
------- FILE objects/score.asm
------- FILE objects/score_level.asm LEVEL 4 PASS 2
      0  f4ee					      include	"objects/score_level.asm"
      1  f4ee				   ScoreLevel
      2  f4ee
      3  f4ee		       d3		      .BYTE.b	%11010011
      4  f4ef		       aa		      .BYTE.b	%10101010
      5  f4f0		       aa		      .BYTE.b	%10101010
      6  f4f1		       aa		      .BYTE.b	%10101010
      7  f4f2		       aa		      .BYTE.b	%10101010
------- FILE objects/score.asm
------- FILE objects/score_health.asm LEVEL 4 PASS 2
      0  f4f3					      include	"objects/score_health.asm"
      1  f4f3				   ScoreHealth
      2  f4f3
      3  f4f3		       a8		      .BYTE.b	%10101000
      4  f4f4		       a8		      .BYTE.b	%10101000
      5  f4f5		       ee		      .BYTE.b	%11101110
      6  f4f6		       aa		      .BYTE.b	%10101010
      7  f4f7		       ae		      .BYTE.b	%10101110
------- FILE objects/score.asm
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f4f8					      include	"objects/web.asm"
      1  f4f8							;================
      2  f4f8							; Web (Playfield)
      3  f4f8							;================
      4  f4f8
      5  f4f8							; Constants
      6  f4f8
      7  f4f8		       00 00	   WEB_BG_COLOR =	#$00
      8  f4f8		       00 06	   WEB_FG_COLOR =	#$06
      9  f4f8
     10  f4f8		       00 1e	   WEB_SIZE   =	30
     11  f4f8		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f4f8		       00 05	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f4f8
     14  f4f8							; Scanline Draw
     15  f4f8
     16  f4f8				   WebDrawStart
     17  f4f8
     18  f4f8							; Load Colors
     19  f4f8							;    lda WebColor+0
     20  f4f8							;    sta COLUBK
     21  f4f8		       a5 9b		      lda	WebColor+1
     22  f4fa		       85 08		      sta	COLUPF
     23  f4fc
     24  f4fc							; Mirror playfield and use standard playfield color
     25  f4fc		       a5 80		      lda	CtrlPf
     26  f4fe		       29 fc		      and	#%11111100
     27  f500		       09 01		      ora	#%00000001
     28  f502		       85 80		      sta	CtrlPf
     29  f504		       85 0a		      sta	CTRLPF
     30  f506
     31  f506							; Initialize image index
     32  f506		       a9 00		      lda	#0
     33  f508		       85 99		      sta	WebIndex
     34  f50a
     35  f50a		       60		      rts
     36  f50b
     37  f50b				   WebClean
     38  f50b
     39  f50b							; Clear out playfield
     40  f50b		       a9 00		      lda	#0
     41  f50d		       85 0d		      sta	PF0
     42  f50f		       85 0e		      sta	PF1
     43  f511		       85 0f		      sta	PF2
     44  f513
     45  f513							; Clear colors
     46  f513		       85 09		      sta	COLUBK
     47  f515		       85 08		      sta	COLUPF
     48  f517
     49  f517		       60		      rts
     50  f518
     51  f518							; Web Image
------- FILE objects/web_image.asm LEVEL 4 PASS 2
      0  f518					      include	"objects/web_image.asm"
      1  f518				   WebImagePF0
      2  f518		       00		      .BYTE.b	%00000000
      3  f519		       00		      .BYTE.b	%00000000
      4  f51a		       00		      .BYTE.b	%00000000
      5  f51b		       00		      .BYTE.b	%00000000
      6  f51c		       00		      .BYTE.b	%00000000
      7  f51d		       00		      .BYTE.b	%00000000
      8  f51e		       00		      .BYTE.b	%00000000
      9  f51f		       00		      .BYTE.b	%00000000
     10  f520		       00		      .BYTE.b	%00000000
     11  f521		       30		      .BYTE.b	%00110000
     12  f522		       e0		      .BYTE.b	%11100000
     13  f523		       20		      .BYTE.b	%00100000
     14  f524		       40		      .BYTE.b	%01000000
     15  f525		       40		      .BYTE.b	%01000000
     16  f526		       80		      .BYTE.b	%10000000
     17  f527		       80		      .BYTE.b	%10000000
     18  f528		       40		      .BYTE.b	%01000000
     19  f529		       40		      .BYTE.b	%01000000
     20  f52a		       20		      .BYTE.b	%00100000
     21  f52b		       e0		      .BYTE.b	%11100000
     22  f52c		       30		      .BYTE.b	%00110000
     23  f52d		       00		      .BYTE.b	%00000000
     24  f52e		       00		      .BYTE.b	%00000000
     25  f52f		       00		      .BYTE.b	%00000000
     26  f530		       00		      .BYTE.b	%00000000
     27  f531		       00		      .BYTE.b	%00000000
     28  f532		       00		      .BYTE.b	%00000000
     29  f533		       00		      .BYTE.b	%00000000
     30  f534		       00		      .BYTE.b	%00000000
     31  f535		       00		      .BYTE.b	%00000000
     32  f536
     33  f536				   WebImagePF1
     34  f536		       08		      .BYTE.b	%00001000
     35  f537		       06		      .BYTE.b	%00000110
     36  f538		       01		      .BYTE.b	%00000001
     37  f539		       00		      .BYTE.b	%00000000
     38  f53a		       00		      .BYTE.b	%00000000
     39  f53b		       01		      .BYTE.b	%00000001
     40  f53c		       01		      .BYTE.b	%00000001
     41  f53d		       02		      .BYTE.b	%00000010
     42  f53e		       0c		      .BYTE.b	%00001100
     43  f53f		       30		      .BYTE.b	%00110000
     44  f540		       c0		      .BYTE.b	%11000000
     45  f541		       38		      .BYTE.b	%00111000
     46  f542		       07		      .BYTE.b	%00000111
     47  f543		       00		      .BYTE.b	%00000000
     48  f544		       00		      .BYTE.b	%00000000
     49  f545		       00		      .BYTE.b	%00000000
     50  f546		       00		      .BYTE.b	%00000000
     51  f547		       07		      .BYTE.b	%00000111
     52  f548		       38		      .BYTE.b	%00111000
     53  f549		       c0		      .BYTE.b	%11000000
     54  f54a		       30		      .BYTE.b	%00110000
     55  f54b		       0c		      .BYTE.b	%00001100
     56  f54c		       02		      .BYTE.b	%00000010
     57  f54d		       01		      .BYTE.b	%00000001
     58  f54e		       01		      .BYTE.b	%00000001
     59  f54f		       00		      .BYTE.b	%00000000
     60  f550		       00		      .BYTE.b	%00000000
     61  f551		       01		      .BYTE.b	%00000001
     62  f552		       06		      .BYTE.b	%00000110
     63  f553		       08		      .BYTE.b	%00001000
     64  f554
     65  f554				   WebImagePF2
     66  f554		       20		      .BYTE.b	%00100000
     67  f555		       18		      .BYTE.b	%00011000
     68  f556		       04		      .BYTE.b	%00000100
     69  f557		       03		      .BYTE.b	%00000011
     70  f558		       3f		      .BYTE.b	%00111111
     71  f559		       c2		      .BYTE.b	%11000010
     72  f55a		       04		      .BYTE.b	%00000100
     73  f55b		       08		      .BYTE.b	%00001000
     74  f55c		       08		      .BYTE.b	%00001000
     75  f55d		       10		      .BYTE.b	%00010000
     76  f55e		       20		      .BYTE.b	%00100000
     77  f55f		       20		      .BYTE.b	%00100000
     78  f560		       41		      .BYTE.b	%01000001
     79  f561		       8e		      .BYTE.b	%10001110
     80  f562		       f0		      .BYTE.b	%11110000
     81  f563		       f0		      .BYTE.b	%11110000
     82  f564		       8e		      .BYTE.b	%10001110
     83  f565		       41		      .BYTE.b	%01000001
     84  f566		       20		      .BYTE.b	%00100000
     85  f567		       20		      .BYTE.b	%00100000
     86  f568		       10		      .BYTE.b	%00010000
     87  f569		       08		      .BYTE.b	%00001000
     88  f56a		       08		      .BYTE.b	%00001000
     89  f56b		       04		      .BYTE.b	%00000100
     90  f56c		       c2		      .BYTE.b	%11000010
     91  f56d		       3f		      .BYTE.b	%00111111
     92  f56e		       03		      .BYTE.b	%00000011
     93  f56f		       04		      .BYTE.b	%00000100
     94  f570		       18		      .BYTE.b	%00011000
     95  f571		       20		      .BYTE.b	%00100000
------- FILE objects/web.asm
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f572					      include	"objects/spider.asm"
      1  f572							;=================
      2  f572							; Spider (player0)
      3  f572							;=================
      4  f572
      5  f572							; Constants
      6  f572
      7  f572		       00 56	   SPIDER_COLOR =	#$56
      8  f572		       00 10	   SPIDER_SPRITE_SIZE =	16
      9  f572		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     10  f572		       00 02	   SPIDER_VEL_X =	2
     11  f572		       00 02	   SPIDER_VEL_Y =	2
     12  f572
     13  f572		       00 44	   SPIDER_COL_COLOR =	#$44
     14  f572
     15  f572							; Initialization
     16  f572
     17  f572				   SpiderInit
     18  f572
     19  f572							; Initialize Position in center of screen
     20  f572		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     21  f574		       85 9e		      sta	SpiderPos
     22  f576		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     23  f578		       85 9f		      sta	SpiderPos+1
     24  f57a
     25  f57a							; Setup Sprite
      0  f57a					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f57a				   .POINTER   SET	SpiderPtr
      2  f57a				   .ADDRESS   SET	SpiderSprite
      3  f57a
      4  f57a		       a9 c3		      LDA	#<.ADDRESS
      5  f57c		       85 9c		      STA	.POINTER
      6  f57e		       a9 f6		      LDA	#>.ADDRESS
      7  f580		       85 9d		      STA	.POINTER+1
      8  f582
     27  f582
     28  f582							;    lda #SPIDER_COLOR
     29  f582							;    sta SpiderColor
     30  f582
     31  f582		       60		      rts
     32  f583
     33  f583							; Frame Update
     34  f583
     35  f583				   SpiderUpdate
     36  f583		       20 8a f5 	      jsr	SpiderControl
     37  f586		       20 70 f6 	      jsr	SpiderCollision
     38  f589		       60		      rts
     39  f58a
     40  f58a				   SpiderControl
     41  f58a
     42  f58a							; Control Position
     43  f58a		       a6 9e		      ldx	SpiderPos
     44  f58c		       a4 9f		      ldy	SpiderPos+1
     45  f58e		       ad 80 02 	      lda	SWCHA
     46  f591
     47  f591				   .spider_control_check_right
     48  f591		       30 02		      bmi	.spider_control_check_left
     49  f593
     50  f593					      REPEAT	#SPIDER_VEL_X
     51  f593		       e8		      inx
     50  f593					      REPEND
     51  f594		       e8		      inx
     52  f595					      REPEND
     53  f595
     54  f595				   .spider_control_check_left
     55  f595		       2a		      rol
     56  f596		       30 02		      bmi	.spider_control_check_down
     57  f598
     58  f598					      REPEAT	#SPIDER_VEL_X
     59  f598		       ca		      dex
     58  f598					      REPEND
     59  f599		       ca		      dex
     60  f59a					      REPEND
     61  f59a
     62  f59a				   .spider_control_check_down
     63  f59a		       2a		      rol
     64  f59b		       30 02		      bmi	.spider_control_check_up
     65  f59d
     66  f59d					      REPEAT	#SPIDER_VEL_Y
     67  f59d		       88		      dey
     66  f59d					      REPEND
     67  f59e		       88		      dey
     68  f59f					      REPEND
     69  f59f
     70  f59f				   .spider_control_check_up
     71  f59f		       2a		      rol
     72  f5a0		       30 02		      bmi	.spider_control_sprite
     73  f5a2
     74  f5a2					      REPEAT	#SPIDER_VEL_Y
     75  f5a2		       c8		      iny
     74  f5a2					      REPEND
     75  f5a3		       c8		      iny
     76  f5a4					      REPEND
     77  f5a4
     78  f5a4				   .spider_control_sprite
     79  f5a4							; Control Sprite
     80  f5a4		       a9 00		      lda	#%00000000	; First 2 bits are left or right, second 2 bits are up or down
     81  f5a6
     82  f5a6				   .spider_control_sprite_x
     83  f5a6		       e4 9e		      cpx	SpiderPos
     84  f5a8		       90 04		      bcc	.spider_control_sprite_left
     85  f5aa		       f0 09		      beq	.spider_control_sprite_y
     86  f5ac		       b0 05		      bcs	.spider_control_sprite_right
     87  f5ae
     88  f5ae				   .spider_control_sprite_left
     89  f5ae		       09 80		      ora	#%10000000
     90  f5b0		       4c b5 f5 	      jmp	.spider_control_sprite_y
     91  f5b3
     92  f5b3				   .spider_control_sprite_right
     93  f5b3		       09 40		      ora	#%01000000
     94  f5b5
     95  f5b5				   .spider_control_sprite_y
     96  f5b5		       c4 9f		      cpy	SpiderPos+1
     97  f5b7		       90 04		      bcc	.spider_control_sprite_down
     98  f5b9		       f0 09		      beq	.spider_control_sprite_store
     99  f5bb		       b0 05		      bcs	.spider_control_sprite_up
    100  f5bd
    101  f5bd				   .spider_control_sprite_down
    102  f5bd		       09 10		      ora	#%00010000
    103  f5bf		       4c c4 f5 	      jmp	.spider_control_sprite_store
    104  f5c2
    105  f5c2				   .spider_control_sprite_up
    106  f5c2		       09 20		      ora	#%00100000
    107  f5c4
    108  f5c4				   .spider_control_sprite_store
    109  f5c4		       c9 00		      cmp	#%00000000
    110  f5c6		       f0 02		      beq	.spider_control_boundary
    111  f5c8		       85 a0		      sta	SpiderCtrl
    112  f5ca
    113  f5ca				   .spider_control_boundary
    114  f5ca							; Check Playfield Boundaries
    115  f5ca
    116  f5ca				   .spider_control_boundary_left
    117  f5ca		       e0 03		      cpx	#SPIDER_VEL_X+1
    118  f5cc		       b0 05		      bcs	.spider_control_boundary_right
    119  f5ce		       a2 03		      ldx	#SPIDER_VEL_X+1
    120  f5d0		       4c d9 f5 	      jmp	.spider_control_boundary_top
    121  f5d3
    122  f5d3				   .spider_control_boundary_right
    123  f5d3		       e0 8b		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    124  f5d5		       90 02		      bcc	.spider_control_boundary_top
    125  f5d7		       a2 8b		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X-3
    126  f5d9
    127  f5d9				   .spider_control_boundary_top
    128  f5d9		       c0 0d		      cpy	#SPIDER_VEL_Y+11
    129  f5db		       b0 05		      bcs	.spider_control_boundary_bottom
    130  f5dd		       a0 0d		      ldy	#SPIDER_VEL_Y+11
    131  f5df		       4c e8 f5 	      jmp	.spider_control_store
    132  f5e2
    133  f5e2				   .spider_control_boundary_bottom
    134  f5e2		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    135  f5e4		       90 02		      bcc	.spider_control_store
    136  f5e6		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    137  f5e8
    138  f5e8				   .spider_control_store
    139  f5e8							; Store new position
    140  f5e8		       86 9e		      stx	SpiderPos
    141  f5ea		       84 9f		      sty	SpiderPos+1
    142  f5ec
    143  f5ec							; TODO: Optimize this somehow?
    144  f5ec				   .spider_control_sprite_assign
    145  f5ec							; Skip if no change
    146  f5ec		       c9 00		      cmp	#%00000000
    147  f5ee		       f0 7f		      beq	.spider_control_return
    148  f5f0
    149  f5f0		       a2 00		      ldx	#%00000000	; For reflection
    150  f5f2
    151  f5f2				   .spider_control_sprite_assign_left
    152  f5f2		       c9 80		      cmp	#%10000000
    153  f5f4		       d0 0d		      bne	.spider_control_sprite_assign_right
      0  f5f6					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f5f6				   .POINTER   SET	SpiderPtr
      2  f5f6				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f5f6
      4  f5f6		       a9 e3		      LDA	#<.ADDRESS
      5  f5f8		       85 9c		      STA	.POINTER
      6  f5fa		       a9 f6		      LDA	#>.ADDRESS
      7  f5fc		       85 9d		      STA	.POINTER+1
      8  f5fe
    155  f5fe		       a2 08		      ldx	#%00001000
    156  f600		       4c 6d f6 	      jmp	.spider_control_reflect
    157  f603
    158  f603				   .spider_control_sprite_assign_right
    159  f603		       c9 40		      cmp	#%01000000
    160  f605		       d0 0b		      bne	.spider_control_sprite_assign_top
      0  f607					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f607				   .POINTER   SET	SpiderPtr
      2  f607				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f607
      4  f607		       a9 e3		      LDA	#<.ADDRESS
      5  f609		       85 9c		      STA	.POINTER
      6  f60b		       a9 f6		      LDA	#>.ADDRESS
      7  f60d		       85 9d		      STA	.POINTER+1
      8  f60f
    162  f60f		       4c 6d f6 	      jmp	.spider_control_reflect
    163  f612
    164  f612				   .spider_control_sprite_assign_top
    165  f612		       c9 20		      cmp	#%00100000
    166  f614		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f616					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f616				   .POINTER   SET	SpiderPtr
      2  f616				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f616
      4  f616		       a9 c3		      LDA	#<.ADDRESS
      5  f618		       85 9c		      STA	.POINTER
      6  f61a		       a9 f6		      LDA	#>.ADDRESS
      7  f61c		       85 9d		      STA	.POINTER+1
      8  f61e
    168  f61e		       4c 6d f6 	      jmp	.spider_control_reflect
    169  f621
    170  f621				   .spider_control_sprite_assign_bottom
    171  f621		       c9 10		      cmp	#%00010000
    172  f623		       d0 0b		      bne	.spider_control_sprite_assign_top_right
      0  f625					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*4
      1  f625				   .POINTER   SET	SpiderPtr
      2  f625				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*4
      3  f625
      4  f625		       a9 03		      LDA	#<.ADDRESS
      5  f627		       85 9c		      STA	.POINTER
      6  f629		       a9 f7		      LDA	#>.ADDRESS
      7  f62b		       85 9d		      STA	.POINTER+1
      8  f62d
    174  f62d		       4c 6d f6 	      jmp	.spider_control_reflect
    175  f630
    176  f630				   .spider_control_sprite_assign_top_right
    177  f630		       c9 60		      cmp	#%01100000
    178  f632		       d0 0b		      bne	.spider_control_sprite_assign_bottom_right
      0  f634					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f634				   .POINTER   SET	SpiderPtr
      2  f634				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f634
      4  f634		       a9 d3		      LDA	#<.ADDRESS
      5  f636		       85 9c		      STA	.POINTER
      6  f638		       a9 f6		      LDA	#>.ADDRESS
      7  f63a		       85 9d		      STA	.POINTER+1
      8  f63c
    180  f63c		       4c 6d f6 	      jmp	.spider_control_reflect
    181  f63f
    182  f63f				   .spider_control_sprite_assign_bottom_right
    183  f63f		       c9 50		      cmp	#%01010000
    184  f641		       d0 0b		      bne	.spider_control_sprite_assign_bottom_left
      0  f643					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f643				   .POINTER   SET	SpiderPtr
      2  f643				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f643
      4  f643		       a9 f3		      LDA	#<.ADDRESS
      5  f645		       85 9c		      STA	.POINTER
      6  f647		       a9 f6		      LDA	#>.ADDRESS
      7  f649		       85 9d		      STA	.POINTER+1
      8  f64b
    186  f64b		       4c 6d f6 	      jmp	.spider_control_reflect
    187  f64e
    188  f64e				   .spider_control_sprite_assign_bottom_left
    189  f64e		       c9 90		      cmp	#%10010000
    190  f650		       d0 0d		      bne	.spider_control_sprite_assign_top_left
      0  f652					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*3
      1  f652				   .POINTER   SET	SpiderPtr
      2  f652				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*3
      3  f652
      4  f652		       a9 f3		      LDA	#<.ADDRESS
      5  f654		       85 9c		      STA	.POINTER
      6  f656		       a9 f6		      LDA	#>.ADDRESS
      7  f658		       85 9d		      STA	.POINTER+1
      8  f65a
    192  f65a		       a2 08		      ldx	#%00001000
    193  f65c		       4c 6d f6 	      jmp	.spider_control_reflect
    194  f65f
    195  f65f				   .spider_control_sprite_assign_top_left
    196  f65f		       c9 a0		      cmp	#%10100000
    197  f661		       d0 0a		      bne	.spider_control_reflect
      0  f663					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f663				   .POINTER   SET	SpiderPtr
      2  f663				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f663
      4  f663		       a9 d3		      LDA	#<.ADDRESS
      5  f665		       85 9c		      STA	.POINTER
      6  f667		       a9 f6		      LDA	#>.ADDRESS
      7  f669		       85 9d		      STA	.POINTER+1
      8  f66b
    199  f66b		       a2 08		      ldx	#%00001000
    200  f66d
    201  f66d				   .spider_control_reflect
    202  f66d		       86 0b		      stx	REFP0
    203  f66f
    204  f66f				   .spider_control_return
    205  f66f		       60		      rts
    206  f670
    207  f670				   SpiderCollision
    208  f670		       a9 56		      lda	#SPIDER_COLOR
    209  f672
    210  f672				   .spider_collision_m0
    211  f672							; Check stun status
    212  f672		       a6 b1		      ldx	BugStunned
    213  f674		       e0 00		      cpx	#0
    214  f676		       d0 04		      bne	.spider_collision_m1
    215  f678
    216  f678							; Collision for M0 (V set)
    217  f678		       24 00		      bit	CXM0P
    218  f67a		       70 0d		      bvs	.spider_collision_active
    219  f67c
    220  f67c				   .spider_collision_m1
    221  f67c							; Check stun status
    222  f67c		       a6 b2		      ldx	BugStunned+1
    223  f67e		       e0 00		      cpx	#0
    224  f680		       d0 09		      bne	.spider_collision_return
    225  f682
    226  f682							; Collision for M1 (N set)
    227  f682		       24 01		      bit	CXM1P
    228  f684		       30 03		      bmi	.spider_collision_active
    229  f686
    230  f686		       4c 8b f6 	      jmp	.spider_collision_return
    231  f689
    232  f689				   .spider_collision_active
    233  f689		       a9 44		      lda	#SPIDER_COL_COLOR
    234  f68b
    235  f68b				   .spider_collision_return
    236  f68b		       85 a1		      sta	SpiderColor
    237  f68d		       60		      rts
    238  f68e
    239  f68e				   SpiderPosition
    240  f68e
    241  f68e							; Set Position
    242  f68e		       a2 00		      ldx	#0	; Object (player0)
    243  f690		       a5 9e		      lda	SpiderPos	; X Position
    244  f692		       20 00 f0 	      jsr	PosObject
    245  f695
    246  f695		       60		      rts
    247  f696
    248  f696							; Scanline Draw
    249  f696
    250  f696				   SpiderDrawStart
    251  f696
    252  f696							; Set player 0 to be quad size
    253  f696		       a5 81		      lda	NuSiz0
    254  f698		       29 f8		      and	#%11111000
    255  f69a		       09 05		      ora	#%00000101
    256  f69c		       85 81		      sta	NuSiz0
    257  f69e		       85 04		      sta	NUSIZ0
    258  f6a0
    259  f6a0							; Set sprite color
    260  f6a0		       a5 a1		      lda	SpiderColor
    261  f6a2		       85 06		      sta	COLUP0
    262  f6a4
    263  f6a4							; Determine if we need to use vertical delay (odd line)
    264  f6a4		       a5 9f		      lda	SpiderPos+1	; Y Position
    265  f6a6		       4a		      lsr
    266  f6a7		       b0 05		      bcs	.spider_draw_start_nodelay
    267  f6a9
    268  f6a9		       a0 01		      ldy	#1
    269  f6ab		       4c b0 f6 	      jmp	.spider_draw_start_set_delay
    270  f6ae
    271  f6ae				   .spider_draw_start_nodelay
    272  f6ae		       a0 00		      ldy	#0
    273  f6b0
    274  f6b0				   .spider_draw_start_set_delay
    275  f6b0		       84 25		      sty	VDELP0
    276  f6b2
    277  f6b2				   .spider_draw_start_pos
    278  f6b2							; Calculate starting position
    279  f6b2		       18		      clc
    280  f6b3		       69 10		      adc	#SPIDER_SIZE
    281  f6b5		       85 a3		      sta	SpiderDrawPos
    282  f6b7
    283  f6b7							; Initialize sprite index and line buffer
    284  f6b7		       a9 00		      lda	#0
    285  f6b9		       85 a2		      sta	SpiderIndex
    286  f6bb		       85 a4		      sta	SpiderLine
    287  f6bd
    288  f6bd		       60		      rts
    289  f6be
    290  f6be				   SpiderClean
    291  f6be
    292  f6be							; Clear out Player0 sprite
    293  f6be		       a9 00		      lda	#0
    294  f6c0		       85 1b		      sta	GRP0
    295  f6c2
    296  f6c2		       60		      rts
    297  f6c3
    298  f6c3							; Spider Sprites
------- FILE objects/spider_sprite.asm LEVEL 4 PASS 2
      0  f6c3					      include	"objects/spider_sprite.asm"
      1  f6c3				   SpiderSprite
      2  f6c3
      3  f6c3		       99		      .BYTE.b	%10011001
      4  f6c4		       99		      .BYTE.b	%10011001
      5  f6c5		       bd		      .BYTE.b	%10111101
      6  f6c6		       bd		      .BYTE.b	%10111101
      7  f6c7		       99		      .BYTE.b	%10011001
      8  f6c8		       99		      .BYTE.b	%10011001
      9  f6c9		       7e		      .BYTE.b	%01111110
     10  f6ca		       3c		      .BYTE.b	%00111100
     11  f6cb		       3c		      .BYTE.b	%00111100
     12  f6cc		       18		      .BYTE.b	%00011000
     13  f6cd		       3c		      .BYTE.b	%00111100
     14  f6ce		       7e		      .BYTE.b	%01111110
     15  f6cf		       bd		      .BYTE.b	%10111101
     16  f6d0		       bd		      .BYTE.b	%10111101
     17  f6d1		       bd		      .BYTE.b	%10111101
     18  f6d2		       99		      .BYTE.b	%10011001
     19  f6d3
     20  f6d3		       0b		      .BYTE.b	%00001011
     21  f6d4		       0b		      .BYTE.b	%00001011
     22  f6d5		       13		      .BYTE.b	%00010011
     23  f6d6		       13		      .BYTE.b	%00010011
     24  f6d7		       1c		      .BYTE.b	%00011100
     25  f6d8		       1c		      .BYTE.b	%00011100
     26  f6d9		       3d		      .BYTE.b	%00111101
     27  f6da		       3d		      .BYTE.b	%00111101
     28  f6db		       7e		      .BYTE.b	%01111110
     29  f6dc		       fe		      .BYTE.b	%11111110
     30  f6dd		       b8		      .BYTE.b	%10111000
     31  f6de		       b8		      .BYTE.b	%10111000
     32  f6df		       10		      .BYTE.b	%00010000
     33  f6e0		       10		      .BYTE.b	%00010000
     34  f6e1		       30		      .BYTE.b	%00110000
     35  f6e2		       20		      .BYTE.b	%00100000
     36  f6e3
     37  f6e3		       c7		      .BYTE.b	%11000111
     38  f6e4		       c7		      .BYTE.b	%11000111
     39  f6e5		       28		      .BYTE.b	%00101000
     40  f6e6		       28		      .BYTE.b	%00101000
     41  f6e7		       3a		      .BYTE.b	%00111010
     42  f6e8		       7a		      .BYTE.b	%01111010
     43  f6e9		       fd		      .BYTE.b	%11111101
     44  f6ea		       ff		      .BYTE.b	%11111111
     45  f6eb		       ff		      .BYTE.b	%11111111
     46  f6ec		       fd		      .BYTE.b	%11111101
     47  f6ed		       7a		      .BYTE.b	%01111010
     48  f6ee		       3a		      .BYTE.b	%00111010
     49  f6ef		       28		      .BYTE.b	%00101000
     50  f6f0		       28		      .BYTE.b	%00101000
     51  f6f1		       c7		      .BYTE.b	%11000111
     52  f6f2		       c7		      .BYTE.b	%11000111
     53  f6f3
     54  f6f3		       20		      .BYTE.b	%00100000
     55  f6f4		       30		      .BYTE.b	%00110000
     56  f6f5		       10		      .BYTE.b	%00010000
     57  f6f6		       10		      .BYTE.b	%00010000
     58  f6f7		       b8		      .BYTE.b	%10111000
     59  f6f8		       bc		      .BYTE.b	%10111100
     60  f6f9		       fc		      .BYTE.b	%11111100
     61  f6fa		       7e		      .BYTE.b	%01111110
     62  f6fb		       3f		      .BYTE.b	%00111111
     63  f6fc		       1d		      .BYTE.b	%00011101
     64  f6fd		       0c		      .BYTE.b	%00001100
     65  f6fe		       1c		      .BYTE.b	%00011100
     66  f6ff		       13		      .BYTE.b	%00010011
     67  f700		       13		      .BYTE.b	%00010011
     68  f701		       0b		      .BYTE.b	%00001011
     69  f702		       0b		      .BYTE.b	%00001011
     70  f703
     71  f703		       99		      .BYTE.b	%10011001
     72  f704		       bd		      .BYTE.b	%10111101
     73  f705		       bd		      .BYTE.b	%10111101
     74  f706		       bd		      .BYTE.b	%10111101
     75  f707		       7e		      .BYTE.b	%01111110
     76  f708		       3c		      .BYTE.b	%00111100
     77  f709		       18		      .BYTE.b	%00011000
     78  f70a		       3c		      .BYTE.b	%00111100
     79  f70b		       3c		      .BYTE.b	%00111100
     80  f70c		       7e		      .BYTE.b	%01111110
     81  f70d		       99		      .BYTE.b	%10011001
     82  f70e		       99		      .BYTE.b	%10011001
     83  f70f		       bd		      .BYTE.b	%10111101
     84  f710		       bd		      .BYTE.b	%10111101
     85  f711		       99		      .BYTE.b	%10011001
     86  f712		       99		      .BYTE.b	%10011001
------- FILE objects/spider.asm
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f713					      include	"objects/line.asm"
      1  f713							;================
      2  f713							; Line (ball)
      3  f713							;================
      4  f713
      5  f713							; Constants
      6  f713
      7  f713		       00 08	   LINE_SIZE  =	8
      8  f713		       00 40	   LINE_DISTANCE =	64	; Distance from player
      9  f713		       00 04	   LINE_VEL_X =	4
     10  f713		       00 04	   LINE_VEL_Y =	4
     11  f713
     12  f713		       00 08	   LINE_AUDIO_C =	8
     13  f713		       00 01	   LINE_AUDIO_F =	1
     14  f713		       00 04	   LINE_AUDIO_V =	4
     15  f713
     16  f713		       00 08	   LINE_SAMPLE_LEN =	8
     17  f713		       00 03	   LINE_SAMPLE_C =	3
     18  f713		       00 01	   LINE_SAMPLE_F =	1
     19  f713		       00 04	   LINE_SAMPLE_V =	4
     20  f713
     21  f713							; Initialization
     22  f713
     23  f713				   LineInit
     24  f713
     25  f713							; Initial Line Control
     26  f713		       a9 00		      lda	#0
     27  f715		       85 a7		      sta	LineEnabled
     28  f717		       85 a8		      sta	LinePos+0
     29  f719		       85 a9		      sta	LinePos+1
     30  f71b		       85 aa		      sta	LineVelocity+0
     31  f71d		       85 ab		      sta	LineVelocity+1
     32  f71f		       85 ac		      sta	LineStartPos+0
     33  f721		       85 ad		      sta	LineStartPos+1
     34  f723		       85 ae		      sta	LineDrawPos+0
     35  f725		       85 af		      sta	LineDrawPos+1
     36  f727
     37  f727		       60		      rts
     38  f728
     39  f728							; Frame Update
     40  f728
     41  f728				   LineUpdate
     42  f728		       20 32 f7 	      jsr	LineControl
     43  f72b		       20 ea f7 	      jsr	LineObject
     44  f72e		       20 31 f8 	      jsr	LineCollision
     45  f731		       60		      rts
     46  f732
     47  f732				   LineControl
     48  f732
     49  f732							; Check if Fire Button on controller 1 is pressed
     50  f732		       a5 0c		      lda	INPT4
     51  f734		       30 0a		      bmi	.line_control_skip
     52  f736
     53  f736		       24 a7		      bit	LineEnabled
     54  f738		       30 06		      bmi	.line_control_skip
     55  f73a
     56  f73a		       a5 a0		      lda	SpiderCtrl
     57  f73c		       c9 00		      cmp	#0
     58  f73e		       d0 03		      bne	.line_control_fire
     59  f740
     60  f740				   .line_control_skip
     61  f740		       4c e9 f7 	      jmp	.line_control_return
     62  f743
     63  f743				   .line_control_fire
     64  f743		       20 79 f8 	      jsr	LineEnable
     65  f746
     66  f746				   .line_control_x
     67  f746		       a5 a0		      lda	SpiderCtrl
     68  f748		       29 c0		      and	#%11000000
     69  f74a		       f0 0e		      beq	.line_control_x_none
     70  f74c				   .line_control_x_left
     71  f74c		       c9 80		      cmp	#%10000000
     72  f74e		       d0 05		      bne	.line_control_x_right
     73  f750
     74  f750		       a9 fc		      lda	#-LINE_VEL_X
     75  f752		       4c 5c f7 	      jmp	.line_control_x_store
     76  f755				   .line_control_x_right
     77  f755		       a9 04		      lda	#LINE_VEL_X
     78  f757		       4c 5c f7 	      jmp	.line_control_x_store
     79  f75a				   .line_control_x_none
     80  f75a		       a9 00		      lda	#0
     81  f75c				   .line_control_x_store
     82  f75c		       85 aa		      sta	LineVelocity
     83  f75e
     84  f75e				   .line_control_y
     85  f75e		       a5 a0		      lda	SpiderCtrl
     86  f760		       29 30		      and	#%00110000
     87  f762		       f0 0e		      beq	.line_control_y_none
     88  f764				   .line_control_y_up
     89  f764		       c9 20		      cmp	#%00100000
     90  f766		       d0 05		      bne	.line_control_y_down
     91  f768
     92  f768		       a9 04		      lda	#LINE_VEL_Y
     93  f76a		       4c 74 f7 	      jmp	.line_control_y_store
     94  f76d				   .line_control_y_down
     95  f76d		       a9 fc		      lda	#-LINE_VEL_Y
     96  f76f		       4c 74 f7 	      jmp	.line_control_y_store
     97  f772				   .line_control_y_none
     98  f772		       a9 00		      lda	#0
     99  f774				   .line_control_y_store
    100  f774		       85 ab		      sta	LineVelocity+1
    101  f776
    102  f776				   .line_control_position
    103  f776
    104  f776		       a2 00		      ldx	#0	; offsetX
    105  f778		       a0 00		      ldy	#0	; offsetY
    106  f77a
    107  f77a		       a5 a0		      lda	SpiderCtrl
    108  f77c		       29 f0		      and	#%11110000
    109  f77e
    110  f77e				   .line_control_position_left
    111  f77e		       c9 80		      cmp	#%10000000
    112  f780		       d0 07		      bne	.line_control_position_right
    113  f782
    114  f782		       a2 00		      ldx	#0
    115  f784		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    116  f786		       4c d1 f7 	      jmp	.line_control_position_store
    117  f789
    118  f789				   .line_control_position_right
    119  f789		       c9 40		      cmp	#%01000000
    120  f78b		       d0 07		      bne	.line_control_position_top
    121  f78d
    122  f78d		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    123  f78f		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    124  f791		       4c d1 f7 	      jmp	.line_control_position_store
    125  f794
    126  f794				   .line_control_position_top
    127  f794		       c9 20		      cmp	#%00100000
    128  f796		       d0 07		      bne	.line_control_position_bottom
    129  f798
    130  f798		       a2 08		      ldx	#SPIDER_SIZE/2
    131  f79a		       a0 10		      ldy	#SPIDER_SIZE
    132  f79c		       4c d1 f7 	      jmp	.line_control_position_store
    133  f79f
    134  f79f				   .line_control_position_bottom
    135  f79f		       c9 10		      cmp	#%00010000
    136  f7a1		       d0 05		      bne	.line_control_position_top_right
    137  f7a3
    138  f7a3		       a2 08		      ldx	#SPIDER_SIZE/2
    139  f7a5		       4c d1 f7 	      jmp	.line_control_position_store
    140  f7a8
    141  f7a8				   .line_control_position_top_right
    142  f7a8		       c9 60		      cmp	#%01100000
    143  f7aa		       d0 07		      bne	.line_control_position_bottom_right
    144  f7ac
    145  f7ac		       a2 10		      ldx	#SPIDER_SIZE
    146  f7ae		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    147  f7b0		       4c d1 f7 	      jmp	.line_control_position_store
    148  f7b3
    149  f7b3				   .line_control_position_bottom_right
    150  f7b3		       c9 50		      cmp	#%01010000
    151  f7b5		       d0 07		      bne	.line_control_position_bottom_left
    152  f7b7
    153  f7b7		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    154  f7b9		       a0 00		      ldy	#0
    155  f7bb		       4c d1 f7 	      jmp	.line_control_position_store
    156  f7be
    157  f7be				   .line_control_position_bottom_left
    158  f7be		       c9 90		      cmp	#%10010000
    159  f7c0		       d0 07		      bne	.line_control_position_top_left
    160  f7c2
    161  f7c2							; No Offset
    162  f7c2		       a2 04		      ldx	#LINE_SIZE/2
    163  f7c4		       a0 04		      ldy	#LINE_SIZE/2
    164  f7c6		       4c d1 f7 	      jmp	.line_control_position_store
    165  f7c9
    166  f7c9				   .line_control_position_top_left
    167  f7c9		       c9 a0		      cmp	#%10100000
    168  f7cb		       d0 04		      bne	.line_control_position_store
    169  f7cd
    170  f7cd		       a2 00		      ldx	#0
    171  f7cf		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    172  f7d1
    173  f7d1				   .line_control_position_store
    174  f7d1
    175  f7d1							; Apply offsetX to playerX
    176  f7d1		       a5 9e		      lda	SpiderPos
    177  f7d3		       86 83		      stx	Temp
    178  f7d5		       18		      clc
    179  f7d6		       65 83		      adc	Temp
    180  f7d8		       aa		      tax
    181  f7d9
    182  f7d9							; Apply offsetY to playerY
    183  f7d9		       a5 9f		      lda	SpiderPos+1
    184  f7db		       84 83		      sty	Temp
    185  f7dd		       18		      clc
    186  f7de		       65 83		      adc	Temp
    187  f7e0		       a8		      tay
    188  f7e1
    189  f7e1		       86 a8		      stx	LinePos
    190  f7e3		       84 a9		      sty	LinePos+1
    191  f7e5		       86 ac		      stx	LineStartPos
    192  f7e7		       84 ad		      sty	LineStartPos+1
    193  f7e9
    194  f7e9				   .line_control_return
    195  f7e9		       60		      rts
    196  f7ea
    197  f7ea				   LineObject
    198  f7ea
    199  f7ea							; Check if line is enabled
    200  f7ea		       24 a7		      bit	LineEnabled
    201  f7ec		       10 42		      bpl	.line_object_return
    202  f7ee
    203  f7ee							; Load position
    204  f7ee		       a6 a8		      ldx	LinePos
    205  f7f0		       a4 a9		      ldy	LinePos+1
    206  f7f2
    207  f7f2				   .line_object_distance
    208  f7f2
    209  f7f2							; Check distance from player with absolute value differences
    210  f7f2
    211  f7f2				   .line_object_distance_x
    212  f7f2		       8a		      txa
    213  f7f3		       18		      clc
    214  f7f4		       e5 ac		      sbc	LineStartPos
    215  f7f6		       b0 04		      bcs	.line_object_distance_x_check
    216  f7f8		       49 ff		      eor	#$FF	; C flag is clear here
    217  f7fa		       69 01		      adc	#$01	; form two's complement
    218  f7fc				   .line_object_distance_x_check		; Jumps to if positive
    219  f7fc		       c9 40		      cmp	#LINE_DISTANCE
    220  f7fe		       b0 2d		      bcs	.line_object_disable
    221  f800
    222  f800				   .line_object_distance_y
    223  f800		       98		      tya
    224  f801		       18		      clc
    225  f802		       e5 ad		      sbc	LineStartPos+1
    226  f804		       b0 04		      bcs	.line_object_distance_y_check
    227  f806		       49 ff		      eor	#$FF	; C flag is clear here
    228  f808		       69 01		      adc	#$01	; form two's complement
    229  f80a				   .line_object_distance_y_check		; Jumps to if positive
    230  f80a		       c9 40		      cmp	#LINE_DISTANCE
    231  f80c		       b0 1f		      bcs	.line_object_disable
    232  f80e
    233  f80e				   .line_object_boundary
    234  f80e				   .line_object_boundary_left
    235  f80e		       e0 04		      cpx	#LINE_VEL_X
    236  f810		       90 1b		      bcc	.line_object_disable
    237  f812				   .line_object_boundary_right
    238  f812		       e0 9c		      cpx	#160-LINE_VEL_X
    239  f814		       b0 17		      bcs	.line_object_disable
    240  f816				   .line_object_boundary_bottom
    241  f816		       c0 04		      cpy	#LINE_VEL_Y
    242  f818		       90 13		      bcc	.line_object_disable
    243  f81a				   .line_object_boundary_top
    244  f81a		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    245  f81c		       b0 0f		      bcs	.line_object_disable
    246  f81e
    247  f81e				   .line_object_velocity
    248  f81e
    249  f81e							; Apply Velocity
    250  f81e		       8a		      txa
    251  f81f		       18		      clc
    252  f820		       65 aa		      adc	LineVelocity
    253  f822		       85 a8		      sta	LinePos
    254  f824
    255  f824		       98		      tya
    256  f825		       18		      clc
    257  f826		       65 ab		      adc	LineVelocity+1
    258  f828		       85 a9		      sta	LinePos+1
    259  f82a
    260  f82a		       4c 30 f8 	      jmp	.line_object_return
    261  f82d
    262  f82d				   .line_object_disable
    263  f82d		       20 87 f8 	      jsr	LineDisable
    264  f830
    265  f830				   .line_object_return
    266  f830		       60		      rts
    267  f831
    268  f831				   LineCollision
    269  f831
    270  f831		       a9 78		      lda	#BUG_STUN_LENGTH
    271  f833
    272  f833				   .line_collision_m0
    273  f833		       24 04		      bit	CXM0FB
    274  f835		       50 08		      bvc	.line_collision_m1
    275  f837
    276  f837							; Set stun timer
    277  f837		       85 b1		      sta	BugStunned+0
    278  f839
    279  f839							; Disable line
    280  f839		       20 87 f8 	      jsr	LineDisable
    281  f83c		       4c 48 f8 	      jmp	.line_collision_sample
    282  f83f
    283  f83f				   .line_collision_m1
    284  f83f		       24 05		      bit	CXM1FB
    285  f841		       50 08		      bvc	.line_collision_return
    286  f843
    287  f843							; Set stun timer
    288  f843		       85 b2		      sta	BugStunned+1
    289  f845
    290  f845							; Disable line
    291  f845		       20 87 f8 	      jsr	LineDisable
    292  f848
    293  f848				   .line_collision_sample
    294  f848		       20 ab f8 	      jsr	LineSample
    295  f84b
    296  f84b				   .line_collision_return
    297  f84b		       60		      rts
    298  f84c
    299  f84c				   LinePosition
    300  f84c
    301  f84c							; Set Line Position
    302  f84c		       a2 04		      ldx	#4	; Object (ball)
    303  f84e		       a5 a8		      lda	LinePos	; X Position
    304  f850		       20 00 f0 	      jsr	PosObject
    305  f853
    306  f853		       60		      rts
    307  f854
    308  f854							; Scanline Draw
    309  f854
    310  f854				   LineDrawStart
    311  f854
    312  f854							; Set ball size to be 4 clocks (4/5 bits)
    313  f854		       a5 80		      lda	CtrlPf
    314  f856		       29 cf		      and	#%11001111
    315  f858		       09 20		      ora	#%00100000
    316  f85a		       85 80		      sta	CtrlPf
    317  f85c		       85 0a		      sta	CTRLPF
    318  f85e
    319  f85e							; Determine if we need to use vertical delay (oven line)
    320  f85e		       a5 a9		      lda	LinePos+1
    321  f860		       4a		      lsr
    322  f861		       90 05		      bcc	.line_draw_start_nodelay
    323  f863
    324  f863		       a0 01		      ldy	#1
    325  f865		       4c 6a f8 	      jmp	.line_draw_start_set_delay
    326  f868
    327  f868				   .line_draw_start_nodelay
    328  f868		       a0 00		      ldy	#0
    329  f86a
    330  f86a				   .line_draw_start_set_delay
    331  f86a		       84 27		      sty	VDELBL
    332  f86c
    333  f86c				   .line_draw_start_pos
    334  f86c							; Calculate starting position
    335  f86c		       18		      clc
    336  f86d		       85 ae		      sta	LineDrawPos+0
    337  f86f		       69 04		      adc	#LINE_SIZE/2
    338  f871		       85 af		      sta	LineDrawPos+1
    339  f873
    340  f873		       60		      rts
    341  f874
    342  f874				   LineClean
    343  f874
    344  f874							; Clear out Line
    345  f874		       a9 00		      lda	#0
    346  f876		       85 1f		      sta	ENABL
    347  f878
    348  f878		       60		      rts
    349  f879
    350  f879				   LineEnable
    351  f879		       a9 80		      lda	#%10000000
    352  f87b		       85 a7		      sta	LineEnabled
    353  f87d
    354  f87d		       a5 91		      lda	SampleStep
    355  f87f		       c9 00		      cmp	#0
    356  f881		       d0 03		      bne	.line_enable_return
    357  f883
    358  f883		       20 95 f8 	      jsr	LineAudioPlay
    359  f886
    360  f886				   .line_enable_return
    361  f886		       60		      rts
    362  f887
    363  f887				   LineDisable
    364  f887		       a9 00		      lda	#0
    365  f889		       85 a7		      sta	LineEnabled
    366  f88b
    367  f88b		       a5 91		      lda	SampleStep
    368  f88d		       c9 00		      cmp	#0
    369  f88f		       d0 03		      bne	.line_disable_return
    370  f891
    371  f891		       20 a2 f8 	      jsr	LineAudioMute
    372  f894
    373  f894				   .line_disable_return
    374  f894		       60		      rts
    375  f895
    376  f895				   LineAudioPlay
    377  f895		       a9 08		      lda	#LINE_AUDIO_C
    378  f897		       85 16		      sta	AUDC1
    379  f899		       a9 01		      lda	#LINE_AUDIO_F
    380  f89b		       85 18		      sta	AUDF1
    381  f89d		       a9 04		      lda	#LINE_AUDIO_V
    382  f89f		       85 1a		      sta	AUDV1
    383  f8a1		       60		      rts
    384  f8a2
    385  f8a2				   LineAudioMute
    386  f8a2		       a9 00		      lda	#0
    387  f8a4		       85 1a		      sta	AUDV1
    388  f8a6		       85 18		      sta	AUDF1
    389  f8a8		       85 16		      sta	AUDC1
    390  f8aa		       60		      rts
    391  f8ab
    392  f8ab				   LineSample
    393  f8ab		       a9 08		      lda	#LINE_SAMPLE_LEN
    394  f8ad		       85 91		      sta	SampleStep
    395  f8af		       a9 03		      lda	#LINE_SAMPLE_C
    396  f8b1		       85 16		      sta	AUDC1
    397  f8b3		       a9 01		      lda	#LINE_SAMPLE_F
    398  f8b5		       85 18		      sta	AUDF1
    399  f8b7		       a9 04		      lda	#LINE_SAMPLE_V
    400  f8b9		       85 1a		      sta	AUDV1
    401  f8bb		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  f8bc					      include	"objects/bug.asm"
      1  f8bc							;======================
      2  f8bc							; Bugs (missiles 0 & 1)
      3  f8bc							;======================
      4  f8bc
      5  f8bc							; Constants
      6  f8bc
      7  f8bc		       00 08	   BUG_SIZE   =	8
      8  f8bc		       00 08	   BUG_BOUNDARY =	BUG_SIZE
      9  f8bc		       00 78	   BUG_STUN_LENGTH =	120
     10  f8bc		       00 04	   BUG_POINTS =	4
     11  f8bc
     12  f8bc		       00 cc	   BUG_COLOR_ACTIVE =	#$CC
     13  f8bc		       00 38	   BUG_COLOR_STUN =	#$38
     14  f8bc
     15  f8bc		       00 1e	   BUG_SAMPLE_LEN =	30
     16  f8bc		       00 03	   BUG_SAMPLE_C =	3
     17  f8bc		       00 14	   BUG_SAMPLE_F =	20
     18  f8bc		       00 04	   BUG_SAMPLE_V =	4
     19  f8bc
     20  f8bc		       00 01	   BUG_COL_SAMPLE_LEN =	1
     21  f8bc		       00 08	   BUG_COL_SAMPLE_C =	8
     22  f8bc		       00 08	   BUG_COL_SAMPLE_F =	8
     23  f8bc		       00 03	   BUG_COL_SAMPLE_V =	3
     24  f8bc
     25  f8bc							; Initialization
     26  f8bc
     27  f8bc				   BugInit
     28  f8bc
     29  f8bc							; Initialize Bugs
     30  f8bc		       a2 01		      ldx	#1
     31  f8be
     32  f8be				   .bug_init_loop
     33  f8be		       20 c5 f8 	      jsr	BugReset
     34  f8c1
     35  f8c1		       ca		      dex
     36  f8c2		       10 fa		      bpl	.bug_init_loop
     37  f8c4
     38  f8c4		       60		      rts
     39  f8c5
     40  f8c5				   BugReset		; x = bug (0 or 1)
     41  f8c5
     42  f8c5							; Set random position
     43  f8c5		       20 13 f0 	      jsr	Random
     44  f8c8
     45  f8c8		       a5 85		      lda	Rand8
     46  f8ca		       29 7f		      and	#$7f
     47  f8cc		       95 b3		      sta	BugPosX,x
     48  f8ce
     49  f8ce		       a5 86		      lda	Rand16
     50  f8d0		       29 7f		      and	#$7f
     51  f8d2		       95 b5		      sta	BugPosY,x
     52  f8d4
     53  f8d4							; Set as active
     54  f8d4		       a9 00		      lda	#0
     55  f8d6		       95 b1		      sta	BugStunned,x
     56  f8d8
     57  f8d8							; Reset Color
     58  f8d8		       a9 cc		      lda	#BUG_COLOR_ACTIVE
     59  f8da		       95 b7		      sta	BugColor,x
     60  f8dc
     61  f8dc		       60		      rts
     62  f8dd
     63  f8dd							; Frame Update
     64  f8dd
     65  f8dd				   BugUpdate
     66  f8dd
     67  f8dd		       a2 01		      ldx	#1
     68  f8df				   .bug_update_loop
     69  f8df		       86 83		      stx	Temp+0
     70  f8e1
     71  f8e1		       b5 b1		      lda	BugStunned,x
     72  f8e3		       c9 00		      cmp	#0
     73  f8e5		       f0 08		      beq	.bug_update_active
     74  f8e7
     75  f8e7				   .bug_update_stunned
     76  f8e7		       d6 b1		      dec	BugStunned,x
     77  f8e9		       20 74 f9 	      jsr	BugStunCollision
     78  f8ec		       4c f5 f8 	      jmp	.bug_update_next
     79  f8ef
     80  f8ef				   .bug_update_active
     81  f8ef		       20 fb f8 	      jsr	BugMovement
     82  f8f2		       20 5a f9 	      jsr	BugCollision
     83  f8f5
     84  f8f5				   .bug_update_next
     85  f8f5		       a6 83		      ldx	Temp+0
     86  f8f7		       ca		      dex
     87  f8f8		       10 e5		      bpl	.bug_update_loop
     88  f8fa
     89  f8fa		       60		      rts
     90  f8fb
     91  f8fb				   BugMovement
     92  f8fb
     93  f8fb				   .bug_movement_random
     94  f8fb		       20 13 f0 	      jsr	Random
     95  f8fe		       29 03		      and	#%00000011
     96  f900		       85 84		      sta	Temp+1
     97  f902
     98  f902				   .bug_movement_load
     99  f902		       a6 83		      ldx	Temp+0
    100  f904
    101  f904				   .bug_movement_x
    102  f904		       a4 b0		      ldy	BugSpeed
    103  f906
    104  f906							; Alter X Position
    105  f906		       a5 84		      lda	Temp+1
    106  f908		       29 01		      and	#%00000001
    107  f90a
    108  f90a				   .bug_movement_x_check
    109  f90a		       c9 01		      cmp	#1
    110  f90c		       d0 08		      bne	.bug_movement_x_right
    111  f90e
    112  f90e				   .bug_movement_x_left
    113  f90e		       d6 b3		      dec	BugPosX,x
    114  f910		       88		      dey
    115  f911		       d0 fb		      bne	.bug_movement_x_left
    116  f913
    117  f913		       4c 1b f9 	      jmp	.bug_movement_y
    118  f916
    119  f916				   .bug_movement_x_right
    120  f916		       f6 b3		      inc	BugPosX,x
    121  f918		       88		      dey
    122  f919		       d0 fb		      bne	.bug_movement_x_right
    123  f91b
    124  f91b				   .bug_movement_y
    125  f91b		       a4 b0		      ldy	BugSpeed
    126  f91d
    127  f91d							; Alter Y Position
    128  f91d		       a5 84		      lda	Temp+1
    129  f91f		       29 02		      and	#%00000010
    130  f921		       4a		      lsr
    131  f922
    132  f922				   .bug_movement_y_check
    133  f922		       c9 01		      cmp	#1
    134  f924		       d0 08		      bne	.bug_movement_y_down
    135  f926
    136  f926				   .bug_movement_y_up
    137  f926		       f6 b5		      inc	BugPosY,x
    138  f928		       88		      dey
    139  f929		       d0 fb		      bne	.bug_movement_y_up
    140  f92b
    141  f92b		       4c 33 f9 	      jmp	.bug_movement_boundary
    142  f92e
    143  f92e				   .bug_movement_y_down
    144  f92e		       d6 b5		      dec	BugPosY,x
    145  f930		       88		      dey
    146  f931		       d0 fb		      bne	.bug_movement_y_down
    147  f933
    148  f933				   .bug_movement_boundary
    149  f933		       b5 b3		      lda	BugPosX,x
    150  f935		       b4 b5		      ldy	BugPosY,x
    151  f937
    152  f937				   .bug_movement_boundary_left
    153  f937		       c9 08		      cmp	#BUG_BOUNDARY
    154  f939		       b0 05		      bcs	.bug_movement_boundary_right
    155  f93b		       a9 08		      lda	#BUG_BOUNDARY
    156  f93d		       4c 46 f9 	      jmp	.bug_movement_boundary_top
    157  f940
    158  f940				   .bug_movement_boundary_right
    159  f940		       c9 90		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    160  f942		       90 02		      bcc	.bug_movement_boundary_top
    161  f944		       a9 90		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY-BUG_SIZE
    162  f946
    163  f946				   .bug_movement_boundary_top
    164  f946		       c0 2b		      cpy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    165  f948		       b0 05		      bcs	.bug_movement_boundary_bottom
    166  f94a		       a0 2b		      ldy	#SCORE_LINES+BUG_BOUNDARY+(BUG_SIZE*2)
    167  f94c		       4c 55 f9 	      jmp	.bug_movement_store
    168  f94f
    169  f94f				   .bug_movement_boundary_bottom
    170  f94f		       c0 b0		      cpy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    171  f951		       90 02		      bcc	.bug_movement_store
    172  f953		       a0 b0		      ldy	#KERNEL_SCANLINES-BUG_BOUNDARY-BUG_SIZE
    173  f955
    174  f955				   .bug_movement_store
    175  f955		       95 b3		      sta	BugPosX,x
    176  f957		       94 b5		      sty	BugPosY,x
    177  f959
    178  f959				   .bug_movement_return
    179  f959		       60		      rts
    180  f95a
    181  f95a				   BugCollision
    182  f95a
    183  f95a		       e0 01		      cpx	#1
    184  f95c		       f0 05		      beq	.bug_collision_m1
    185  f95e
    186  f95e				   .bug_collision_m0
    187  f95e							; Collision for M0 (V set)
    188  f95e		       24 00		      bit	CXM0P
    189  f960		       70 06		      bvs	.bug_collision_active
    190  f962		       60		      rts
    191  f963
    192  f963				   .bug_collision_m1
    193  f963							; Collision for M1 (N set)
    194  f963		       24 01		      bit	CXM1P
    195  f965		       30 01		      bmi	.bug_collision_active
    196  f967		       60		      rts
    197  f968
    198  f968				   .bug_collision_active
    199  f968
    200  f968							; Reduce players score
    201  f968		       a5 92		      lda	ScoreValue
    202  f96a		       c9 00		      cmp	#0
    203  f96c		       f0 02		      beq	.bug_collision_score_skip
    204  f96e		       c6 92		      dec	ScoreValue
    205  f970				   .bug_collision_score_skip
    206  f970
    207  f970							; Play sound
    208  f970		       20 d4 f9 	      jsr	BugColSample
    209  f973
    210  f973		       60		      rts
    211  f974
    212  f974				   BugStunCollision
    213  f974
    214  f974		       e0 01		      cpx	#1
    215  f976		       f0 05		      beq	.bug_stun_collision_m1
    216  f978
    217  f978				   .bug_stun_collision_m0
    218  f978							; Collision for M0 (V set)
    219  f978		       24 00		      bit	CXM0P
    220  f97a		       70 06		      bvs	.bug_stun_collision_active
    221  f97c		       60		      rts
    222  f97d
    223  f97d				   .bug_stun_collision_m1
    224  f97d							; Collision for M1 (N set)
    225  f97d		       24 01		      bit	CXM1P
    226  f97f		       30 01		      bmi	.bug_stun_collision_active
    227  f981		       60		      rts
    228  f982
    229  f982				   .bug_stun_collision_active
    230  f982							; Add points to score
    231  f982		       18		      clc
    232  f983		       a5 93		      lda	ScoreValue+1
    233  f985		       69 04		      adc	#BUG_POINTS
    234  f987		       85 93		      sta	ScoreValue+1
    235  f989
    236  f989							; Reset bug
    237  f989		       20 c5 f8 	      jsr	BugReset
    238  f98c
    239  f98c							; Play sample
    240  f98c		       20 c3 f9 	      jsr	BugSample
    241  f98f
    242  f98f		       60		      rts
    243  f990
    244  f990							; Horizontal Positioning
    245  f990
    246  f990				   BugPosition
    247  f990
    248  f990		       a2 02		      ldx	#2
    249  f992		       a5 b3		      lda	BugPosX+0
    250  f994		       20 00 f0 	      jsr	PosObject
    251  f997
    252  f997		       a2 03		      ldx	#3
    253  f999		       a5 b4		      lda	BugPosX+1
    254  f99b		       20 00 f0 	      jsr	PosObject
    255  f99e
    256  f99e		       60		      rts
    257  f99f
    258  f99f							; Scanline Draw
    259  f99f
    260  f99f				   BugDrawStart
    261  f99f
    262  f99f		       a0 01		      ldy	#1
    263  f9a1				   .bug_draw_start_loop
    264  f9a1
    265  f9a1							; Set missile 0 & 1 to be 8 clock size
    266  f9a1		       b9 81 00 	      lda	NuSiz0,y
    267  f9a4		       09 30		      ora	#%00110000
    268  f9a6		       99 81 00 	      sta	NuSiz0,y
    269  f9a9		       99 04 00 	      sta	NUSIZ0,y
    270  f9ac
    271  f9ac							; Setup half scanline positions
    272  f9ac		       b9 b5 00 	      lda	BugPosY,y
    273  f9af		       4a		      lsr
    274  f9b0		       99 b9 00 	      sta	BugDrawPosBottom,y
    275  f9b3
    276  f9b3		       69 04		      adc	#BUG_SIZE/2
    277  f9b5		       99 bb 00 	      sta	BugDrawPosTop,y
    278  f9b8
    279  f9b8		       88		      dey
    280  f9b9		       10 e6		      bpl	.bug_draw_start_loop
    281  f9bb
    282  f9bb		       60		      rts
    283  f9bc
    284  f9bc				   BugClean
    285  f9bc		       a9 00		      lda	#0
    286  f9be		       85 1d		      sta	ENAM0
    287  f9c0		       85 1e		      sta	ENAM1
    288  f9c2		       60		      rts
    289  f9c3
    290  f9c3				   BugSample
    291  f9c3		       a9 1e		      lda	#BUG_SAMPLE_LEN
    292  f9c5		       85 91		      sta	SampleStep
    293  f9c7		       a9 03		      lda	#BUG_SAMPLE_C
    294  f9c9		       85 16		      sta	AUDC1
    295  f9cb		       a9 14		      lda	#BUG_SAMPLE_F
    296  f9cd		       85 18		      sta	AUDF1
    297  f9cf		       a9 04		      lda	#BUG_SAMPLE_V
    298  f9d1		       85 1a		      sta	AUDV1
    299  f9d3		       60		      rts
    300  f9d4
    301  f9d4				   BugColSample
    302  f9d4		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    303  f9d6		       85 91		      sta	SampleStep
    304  f9d8		       a9 08		      lda	#BUG_COL_SAMPLE_C
    305  f9da		       85 16		      sta	AUDC1
    306  f9dc		       a9 08		      lda	#BUG_COL_SAMPLE_F
    307  f9de		       85 18		      sta	AUDF1
    308  f9e0		       a9 03		      lda	#BUG_COL_SAMPLE_V
    309  f9e2		       85 1a		      sta	AUDV1
    310  f9e4		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  f9e5					      include	"objects/swatter.asm"
      1  f9e5							;==================
      2  f9e5							; Swatter (player1)
      3  f9e5							;==================
      4  f9e5
      5  f9e5							; Constants
      6  f9e5
      7  f9e5		       00 30	   SWATTER_COLOR =	#$30
      8  f9e5		       00 36	   SWATTER_HOLD_COLOR =	#$36
      9  f9e5		       00 14	   SWATTER_SPRITE_SIZE =	#20
     10  f9e5		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     11  f9e5
     12  f9e5		       00 3c	   SWATTER_HOLD_TIME =	60
     13  f9e5		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     14  f9e5
     15  f9e5		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     16  f9e5		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     17  f9e5		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     18  f9e5
     19  f9e5		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     20  f9e5		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     21  f9e5		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     22  f9e5		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     23  f9e5		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     24  f9e5
     25  f9e5		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     26  f9e5		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     27  f9e5		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     28  f9e5		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     29  f9e5
     30  f9e5		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     31  f9e5		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     32  f9e5		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     33  f9e5		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     34  f9e5
     35  f9e5							; Initialization
     36  f9e5
     37  f9e5				   SwatterInit
     38  f9e5
     39  f9e5		       20 aa fa 	      jsr	SwatterReset
     40  f9e8
     41  f9e8		       60		      rts
     42  f9e9
     43  f9e9							; Frame Update
     44  f9e9
     45  f9e9				   SwatterUpdate
     46  f9e9
     47  f9e9				   .swatter_update_color
     48  f9e9		       a5 bf		      lda	SwatterState
     49  f9eb		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     50  f9ed		       d0 05		      bne	.swatter_update_color_hold
     51  f9ef				   .swatter_update_color_active
     52  f9ef		       a9 30		      lda	#SWATTER_COLOR
     53  f9f1		       4c f6 f9 	      jmp	.swatter_update_color_set
     54  f9f4				   .swatter_update_color_hold
     55  f9f4		       a9 36		      lda	#SWATTER_HOLD_COLOR
     56  f9f6				   .swatter_update_color_set
     57  f9f6		       85 c0		      sta	SwatterColor
     58  f9f8
     59  f9f8				   .swatter_update_hold_sample
     60  f9f8		       a4 bf		      ldy	SwatterState
     61  f9fa		       c0 80		      cpy	#SWATTER_STATE_HOLD
     62  f9fc		       d0 0f		      bne	.swatter_update_state
     63  f9fe
     64  f9fe		       c6 c6		      dec	SwatterSampleCount
     65  fa00		       d0 0b		      bne	.swatter_update_state
     66  fa02
     67  fa02		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     68  fa04		       85 c6		      sta	SwatterSampleCount
     69  fa06
     70  fa06		       c6 c7		      dec	SwatterSampleF
     71  fa08		       a4 c7		      ldy	SwatterSampleF
     72  fa0a		       20 ca fa 	      jsr	SwatterHoldSample
     73  fa0d
     74  fa0d				   .swatter_update_state
     75  fa0d		       a6 8f		      ldx	FrameTimer+1
     76  fa0f		       e0 00		      cpx	#0
     77  fa11		       d0 2d		      bne	.swatter_update_collision
     78  fa13
     79  fa13		       a4 bf		      ldy	SwatterState
     80  fa15		       c0 00		      cpy	#SWATTER_STATE_WAIT
     81  fa17		       f0 0a		      beq	.swatter_update_state_wait
     82  fa19
     83  fa19		       c0 80		      cpy	#SWATTER_STATE_HOLD
     84  fa1b		       f0 18		      beq	.swatter_update_state_hold
     85  fa1d
     86  fa1d							; Else we're at the end of the active state
     87  fa1d		       20 aa fa 	      jsr	SwatterReset
     88  fa20		       4c 4f fa 	      jmp	.swatter_update_return
     89  fa23
     90  fa23				   .swatter_update_state_wait
     91  fa23		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
     92  fa25		       84 c7		      sty	SwatterSampleF
     93  fa27		       20 ca fa 	      jsr	SwatterHoldSample
     94  fa2a
     95  fa2a		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     96  fa2c		       85 c6		      sta	SwatterSampleCount
     97  fa2e
     98  fa2e		       a9 80		      lda	#SWATTER_STATE_HOLD
     99  fa30		       a2 3c		      ldx	#SWATTER_HOLD_TIME
    100  fa32		       4c 3c fa 	      jmp	.swatter_update_state_set
    101  fa35
    102  fa35				   .swatter_update_state_hold
    103  fa35		       20 d9 fa 	      jsr	SwatterActiveSample
    104  fa38
    105  fa38		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    106  fa3a		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    107  fa3c
    108  fa3c				   .swatter_update_state_set
    109  fa3c		       85 bf		      sta	SwatterState
    110  fa3e		       86 8f		      stx	FrameTimer+1
    111  fa40
    112  fa40				   .swatter_update_collision
    113  fa40							; Check 1 frame after active
    114  fa40		       a5 bf		      lda	SwatterState
    115  fa42		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    116  fa44		       d0 09		      bne	.swatter_update_return
    117  fa46		       a6 8f		      ldx	FrameTimer+1
    118  fa48		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    119  fa4a		       d0 03		      bne	.swatter_update_return
    120  fa4c
    121  fa4c		       20 50 fa 	      jsr	SwatterCollision
    122  fa4f
    123  fa4f				   .swatter_update_return
    124  fa4f		       60		      rts
    125  fa50
    126  fa50				   SwatterCollision
    127  fa50		       24 00		      bit	CXM0P
    128  fa52		       30 09		      bmi	.swatter_collision_m0
    129  fa54
    130  fa54		       24 01		      bit	CXM1P
    131  fa56		       70 0a		      bvs	.swatter_collision_m1
    132  fa58
    133  fa58		       24 07		      bit	CXPPMM
    134  fa5a		       30 0e		      bmi	.swatter_collision_p0
    135  fa5c
    136  fa5c		       60		      rts
    137  fa5d
    138  fa5d				   .swatter_collision_m0
    139  fa5d		       a2 00		      ldx	#0
    140  fa5f		       4c 64 fa 	      jmp	.swatter_collision_bug_reset
    141  fa62
    142  fa62				   .swatter_collision_m1
    143  fa62		       a2 01		      ldx	#1
    144  fa64
    145  fa64				   .swatter_collision_bug_reset
    146  fa64		       20 c5 f8 	      jsr	BugReset
    147  fa67		       4c 7c fa 	      jmp	.swatter_collision_active
    148  fa6a
    149  fa6a				   .swatter_collision_p0
    150  fa6a
    151  fa6a		       a5 92		      lda	ScoreValue
    152  fa6c		       c5 c2		      cmp	SwatterHitDamage
    153  fa6e		       90 08		      bcc	.swatter_collision_p0_zero
    154  fa70		       f0 06		      beq	.swatter_collision_p0_zero
    155  fa72
    156  fa72		       18		      clc
    157  fa73		       e5 c2		      sbc	SwatterHitDamage
    158  fa75		       4c 7a fa 	      jmp	.swatter_collision_p0_set
    159  fa78
    160  fa78				   .swatter_collision_p0_zero
    161  fa78		       a9 00		      lda	#0
    162  fa7a
    163  fa7a				   .swatter_collision_p0_set
    164  fa7a		       85 92		      sta	ScoreValue
    165  fa7c
    166  fa7c				   .swatter_collision_active
    167  fa7c		       20 ea fa 	      jsr	SwatterHitSample
    168  fa7f
    169  fa7f		       60		      rts
    170  fa80
    171  fa80				   SwatterPosition
    172  fa80
    173  fa80							; Set Position
    174  fa80		       a2 01		      ldx	#1	; Object (player1)
    175  fa82		       a5 bd		      lda	SwatterPos	; X Position
    176  fa84		       20 00 f0 	      jsr	PosObject
    177  fa87
    178  fa87		       60		      rts
    179  fa88
    180  fa88							; Scanline Draw
    181  fa88
    182  fa88				   SwatterDrawStart
    183  fa88
    184  fa88							; Set player 1 to be quad size
    185  fa88		       a5 82		      lda	NuSiz1
    186  fa8a		       29 f8		      and	#%11111000
    187  fa8c		       09 07		      ora	#%00000111
    188  fa8e		       85 82		      sta	NuSiz1
    189  fa90		       85 05		      sta	NUSIZ1
    190  fa92
    191  fa92							; Set sprite color
    192  fa92		       a5 c0		      lda	SwatterColor
    193  fa94		       85 07		      sta	COLUP1
    194  fa96
    195  fa96							; Note: Doesn't need vertical delay
    196  fa96
    197  fa96							; Calculate starting position
    198  fa96		       a5 be		      lda	SwatterPos+1	; Y Position
    199  fa98		       4a		      lsr
    200  fa99		       18		      clc
    201  fa9a		       69 14		      adc	#SWATTER_SPRITE_SIZE
    202  fa9c		       85 c4		      sta	SwatterDrawPos
    203  fa9e
    204  fa9e							; Initialize sprite index
    205  fa9e		       a9 00		      lda	#0
    206  faa0		       85 c3		      sta	SwatterIndex
    207  faa2		       85 c5		      sta	SwatterLine
    208  faa4
    209  faa4		       60		      rts
    210  faa5
    211  faa5				   SwatterClean
    212  faa5
    213  faa5							; Clear out Player1 sprite
    214  faa5		       a9 00		      lda	#0
    215  faa7		       85 1c		      sta	GRP1
    216  faa9
    217  faa9		       60		      rts
    218  faaa
    219  faaa				   SwatterReset
    220  faaa							; Initialize Swatter State
    221  faaa		       a9 00		      lda	#SWATTER_STATE_WAIT
    222  faac		       85 bf		      sta	SwatterState
    223  faae
    224  faae							; Set Wait Timer
    225  faae		       20 13 f0 	      jsr	Random
    226  fab1		       a5 85		      lda	Rand8
    227  fab3		       29 3f		      and	#$3f
    228  fab5		       18		      clc
    229  fab6		       65 c1		      adc	SwatterWaitTime
    230  fab8		       85 8f		      sta	FrameTimer+1
    231  faba
    232  faba							; Set Random Position
    233  faba		       20 13 f0 	      jsr	Random
    234  fabd		       a5 85		      lda	Rand8	; X Position
    235  fabf		       29 7f		      and	#$7f
    236  fac1		       85 bd		      sta	SwatterPos+0
    237  fac3		       a5 86		      lda	Rand16	; Y Position
    238  fac5		       29 7e		      and	#$7e	; Ensure that Y position is even
    239  fac7		       85 be		      sta	SwatterPos+1
    240  fac9
    241  fac9		       60		      rts
    242  faca
    243  faca				   SwatterHoldSample
    244  faca		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    245  facc		       85 91		      sta	SampleStep
    246  face		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    247  fad0		       85 16		      sta	AUDC1
    248  fad2		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    249  fad4		       85 1a		      sta	AUDV1
    250  fad6
    251  fad6		       84 18		      sty	AUDF1	; Store value of y as frequency
    252  fad8
    253  fad8		       60		      rts
    254  fad9
    255  fad9				   SwatterActiveSample
    256  fad9		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    257  fadb		       85 91		      sta	SampleStep
    258  fadd		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    259  fadf		       85 16		      sta	AUDC1
    260  fae1		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    261  fae3		       85 18		      sta	AUDF1
    262  fae5		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    263  fae7		       85 1a		      sta	AUDV1
    264  fae9		       60		      rts
    265  faea
    266  faea				   SwatterHitSample
    267  faea		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    268  faec		       85 91		      sta	SampleStep
    269  faee		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    270  faf0		       85 16		      sta	AUDC1
    271  faf2		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    272  faf4		       85 18		      sta	AUDF1
    273  faf6		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    274  faf8		       85 1a		      sta	AUDV1
    275  fafa		       60		      rts
    276  fafb
    277  fafb							; Swatter Sprites
------- FILE objects/swatter_sprite.asm LEVEL 4 PASS 2
      0  fafb					      include	"objects/swatter_sprite.asm"
      1  fafb				   SwatterSprite
      2  fafb
      3  fafb		       3c		      .BYTE.b	%00111100
      4  fafc		       3c		      .BYTE.b	%00111100
      5  fafd		       56		      .BYTE.b	%01010110
      6  fafe		       6a		      .BYTE.b	%01101010
      7  faff		       d5		      .BYTE.b	%11010101
      8  fb00		       ab		      .BYTE.b	%10101011
      9  fb01		       d5		      .BYTE.b	%11010101
     10  fb02		       ab		      .BYTE.b	%10101011
     11  fb03		       d5		      .BYTE.b	%11010101
     12  fb04		       ab		      .BYTE.b	%10101011
     13  fb05		       d5		      .BYTE.b	%11010101
     14  fb06		       ab		      .BYTE.b	%10101011
     15  fb07		       56		      .BYTE.b	%01010110
     16  fb08		       6a		      .BYTE.b	%01101010
     17  fb09		       56		      .BYTE.b	%01010110
     18  fb0a		       6a		      .BYTE.b	%01101010
     19  fb0b		       34		      .BYTE.b	%00110100
     20  fb0c		       2c		      .BYTE.b	%00101100
     21  fb0d		       34		      .BYTE.b	%00110100
     22  fb0e		       18		      .BYTE.b	%00011000
------- FILE objects/swatter.asm
------- FILE game.asm
     22  fb0f
     23  fb0f							; Initialization
     24  fb0f
     25  fb0f				   GameInit
     26  fb0f
     27  fb0f							; Setup logic and kernel
      0  fb0f					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fb0f				   .POINTER   SET	VBlankPtr
      2  fb0f				   .ADDRESS   SET	GameVerticalBlank
      3  fb0f
      4  fb0f		       a9 60		      LDA	#<.ADDRESS
      5  fb11		       85 87		      STA	.POINTER
      6  fb13		       a9 fb		      LDA	#>.ADDRESS
      7  fb15		       85 88		      STA	.POINTER+1
      8  fb17
      0  fb17					      SET_POINTER	KernelPtr, GameKernel
      1  fb17				   .POINTER   SET	KernelPtr
      2  fb17				   .ADDRESS   SET	GameKernel
      3  fb17
      4  fb17		       a9 e6		      LDA	#<.ADDRESS
      5  fb19		       85 89		      STA	.POINTER
      6  fb1b		       a9 fb		      LDA	#>.ADDRESS
      7  fb1d		       85 8a		      STA	.POINTER+1
      8  fb1f
      0  fb1f					      SET_POINTER	OverScanPtr, GameOverScan
      1  fb1f				   .POINTER   SET	OverScanPtr
      2  fb1f				   .ADDRESS   SET	GameOverScan
      3  fb1f
      4  fb1f		       a9 8a		      LDA	#<.ADDRESS
      5  fb21		       85 8b		      STA	.POINTER
      6  fb23		       a9 fb		      LDA	#>.ADDRESS
      7  fb25		       85 8c		      STA	.POINTER+1
      8  fb27
     31  fb27
     32  fb27							; Mute Audio
     33  fb27		       a9 00		      lda	#0
     34  fb29		       85 15		      sta	AUDC0
     35  fb2b		       85 19		      sta	AUDV0
     36  fb2d		       85 17		      sta	AUDF0
     37  fb2f		       85 16		      sta	AUDC1
     38  fb31		       85 1a		      sta	AUDV1
     39  fb33		       85 18		      sta	AUDF1
     40  fb35		       85 91		      sta	SampleStep
     41  fb37
     42  fb37							; Load Audio Settings
     43  fb37		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fb39		       85 19		      sta	AUDV0
     45  fb3b
     46  fb3b							; Make it so that we play the first note immediately
     47  fb3b		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fb3d		       85 90		      sta	AudioStep
     49  fb3f		       a9 02		      lda	#2
     50  fb41		       85 8e		      sta	FrameTimer
     51  fb43
     52  fb43							; Reset NuSiz
     53  fb43		       a9 00		      lda	#0
     54  fb45		       85 81		      sta	NuSiz0
     55  fb47		       85 04		      sta	NUSIZ0
     56  fb49		       85 82		      sta	NuSiz1
     57  fb4b		       85 05		      sta	NUSIZ1
     58  fb4d
     59  fb4d							; Initialize Objects
     60  fb4d		       20 52 f3 	      jsr	LevelInit
     61  fb50		       20 ac f3 	      jsr	ScoreInit
     62  fb53		       20 72 f5 	      jsr	SpiderInit
     63  fb56		       20 13 f7 	      jsr	LineInit
     64  fb59		       20 bc f8 	      jsr	BugInit
     65  fb5c		       20 e5 f9 	      jsr	SwatterInit
     66  fb5f
     67  fb5f		       60		      rts
     68  fb60
     69  fb60				   GameVerticalBlank
     70  fb60
     71  fb60							; Refresh random values
     72  fb60		       20 13 f0 	      jsr	Random
     73  fb63
     74  fb63							; Update Objects
     75  fb63		       20 63 f3 	      jsr	LevelUpdate
     76  fb66		       20 83 f5 	      jsr	SpiderUpdate
     77  fb69		       20 28 f7 	      jsr	LineUpdate
     78  fb6c		       20 dd f8 	      jsr	BugUpdate
     79  fb6f		       20 e9 f9 	      jsr	SwatterUpdate
     80  fb72		       20 b5 f3 	      jsr	ScoreUpdate
     81  fb75
     82  fb75							; Reset Collisions
     83  fb75		       85 2c		      sta	CXCLR
     84  fb77
     85  fb77							; Clear horizontal movement
     86  fb77		       85 2b		      sta	HMCLR
     87  fb79
     88  fb79							; Update Positions
     89  fb79		       20 8e f6 	      jsr	SpiderPosition
     90  fb7c		       20 4c f8 	      jsr	LinePosition
     91  fb7f		       20 90 f9 	      jsr	BugPosition
     92  fb82		       20 80 fa 	      jsr	SwatterPosition
     93  fb85
     94  fb85							; Set final x positions
     95  fb85		       85 02		      sta	WSYNC
     96  fb87		       85 2a		      sta	HMOVE
     97  fb89
     98  fb89		       60		      rts
     99  fb8a
    100  fb8a				   GameOverScan
    101  fb8a
    102  fb8a							; Audio Routines
    103  fb8a		       20 a8 fb 	      jsr	GameAudio
    104  fb8d		       20 94 fb 	      jsr	GameSample
    105  fb90
    106  fb90							; State Routines
    107  fb90		       20 dc fb 	      jsr	GameDeath
    108  fb93
    109  fb93		       60		      rts
    110  fb94
    111  fb94				   GameSample
    112  fb94
    113  fb94		       a6 91		      ldx	SampleStep
    114  fb96		       e0 00		      cpx	#0
    115  fb98		       f0 0b		      beq	.game_sample_return
    116  fb9a
    117  fb9a		       ca		      dex
    118  fb9b		       d0 08		      bne	.game_sample_return
    119  fb9d
    120  fb9d				   .game_sample_mute
    121  fb9d		       a9 00		      lda	#0
    122  fb9f		       85 1a		      sta	AUDV1
    123  fba1		       85 18		      sta	AUDF1
    124  fba3		       85 16		      sta	AUDC1
    125  fba5
    126  fba5				   .game_sample_return
    127  fba5		       86 91		      stx	SampleStep
    128  fba7		       60		      rts
    129  fba8
    130  fba8				   GameAudio
    131  fba8
    132  fba8		       a6 8e		      ldx	FrameTimer
    133  fbaa		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    134  fbac		       f0 25		      beq	.game_audio_mute_note
    135  fbae		       e0 00		      cpx	#0
    136  fbb0		       d0 29		      bne	.game_audio_return
    137  fbb2
    138  fbb2							; Reset Timer
    139  fbb2		       a2 09		      ldx	#GAME_AUDIO_STEP
    140  fbb4		       86 8e		      stx	FrameTimer
    141  fbb6
    142  fbb6				   .game_audio_play
    143  fbb6
    144  fbb6							; Increment melody position
    145  fbb6		       a4 90		      ldy	AudioStep
    146  fbb8		       c8		      iny
    147  fbb9
    148  fbb9		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    149  fbbb		       d0 02		      bne	.game_audio_play_note
    150  fbbd
    151  fbbd							; Loop our audio step
    152  fbbd		       a0 00		      ldy	#0
    153  fbbf
    154  fbbf				   .game_audio_play_note
    155  fbbf
    156  fbbf							; Save current position
    157  fbbf		       84 90		      sty	AudioStep
    158  fbc1
    159  fbc1							; Melody Line
    160  fbc1		       b9 8b fd 	      lda	GameAudio0,y
    161  fbc4		       c9 ff		      cmp	#$FF
    162  fbc6		       f0 0b		      beq	.game_audio_mute_note
    163  fbc8		       85 17		      sta	AUDF0
    164  fbca		       a9 06		      lda	#GAME_AUDIO_TONE
    165  fbcc		       85 15		      sta	AUDC0
    166  fbce		       a9 02		      lda	#GAME_AUDIO_VOLUME
    167  fbd0		       85 19		      sta	AUDV0
    168  fbd2
    169  fbd2		       60		      rts
    170  fbd3
    171  fbd3				   .game_audio_mute_note
    172  fbd3
    173  fbd3		       a9 00		      lda	#0
    174  fbd5		       85 17		      sta	AUDF0
    175  fbd7		       85 15		      sta	AUDC0
    176  fbd9		       85 19		      sta	AUDV0
    177  fbdb
    178  fbdb				   .game_audio_return
    179  fbdb		       60		      rts
    180  fbdc
    181  fbdc				   GameDeath
    182  fbdc		       a5 92		      lda	ScoreValue+0
    183  fbde		       c9 00		      cmp	#0
    184  fbe0		       d0 03		      bne	.game_death_return
    185  fbe2
    186  fbe2							; Show Game Over Screen
    187  fbe2		       20 ab fd 	      jsr	OverInit
    188  fbe5
    189  fbe5				   .game_death_return
    190  fbe5		       60		      rts
    191  fbe6
    192  fbe6				   GameKernel
    193  fbe6
    194  fbe6							; Turn on display
    195  fbe6		       a9 00		      lda	#0
    196  fbe8		       85 01		      sta	VBLANK
    197  fbea
    198  fbea				   .game_kernel_score
    199  fbea
    200  fbea							; Draw Score on top first
    201  fbea		       20 ed f3 	      jsr	ScoreDraw
    202  fbed
    203  fbed				   .game_kernel_objects_start
    204  fbed
    205  fbed							; Setup Drawing Objects
    206  fbed		       20 f8 f4 	      jsr	WebDrawStart
    207  fbf0		       20 96 f6 	      jsr	SpiderDrawStart
    208  fbf3		       20 88 fa 	      jsr	SwatterDrawStart
    209  fbf6		       20 54 f8 	      jsr	LineDrawStart
    210  fbf9		       20 9f f9 	      jsr	BugDrawStart
    211  fbfc
    212  fbfc							; Start Scanline Counter
    213  fbfc		       a2 a8		      ldx	#KERNEL_SCANLINES-SCORE_LINES-5
    214  fbfe							; The extra 5 is for processing overflow
    215  fbfe
    216  fbfe							; Half scanline counter in Temp+1
    217  fbfe		       a9 56		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2
    218  fc00		       85 84		      sta	Temp+1
    219  fc02
    220  fc02							; Load background color
    221  fc02		       a5 9a		      lda	WebColor+0
    222  fc04		       85 09		      sta	COLUBK
    223  fc06
    224  fc06				   .game_kernel_objects
    225  fc06
    226  fc06		       85 02		      sta	WSYNC
    227  fc08
    228  fc08				   .game_kernel_web
    229  fc08
    230  fc08							; Web
    231  fc08		       a4 99		      ldy	WebIndex
    232  fc0a
    233  fc0a							; Load Image
    234  fc0a		       b9 18 f5 	      lda	WebImagePF0,y
    235  fc0d		       85 0d		      sta	PF0
    236  fc0f		       b9 36 f5 	      lda	WebImagePF1,y
    237  fc12		       85 0e		      sta	PF1
    238  fc14		       b9 54 f5 	      lda	WebImagePF2,y
    239  fc17		       85 0f		      sta	PF2
    240  fc19
    241  fc19		       e6 99		      inc	WebIndex
    242  fc1b
    243  fc1b				   .game_kernel_line_1
    244  fc1b							; Line (1st time)
    245  fc1b
    246  fc1b		       24 a7		      bit	LineEnabled
    247  fc1d		       10 10		      bpl	.game_kernel_line_1_skip
    248  fc1f
    249  fc1f							; Load half-line
    250  fc1f		       a5 84		      lda	Temp+1
    251  fc21
    252  fc21		       a0 00		      ldy	#%00000000
    253  fc23
    254  fc23							; Top
    255  fc23		       c5 af		      cmp	LineDrawPos+1
    256  fc25		       b0 06		      bcs	.game_kernel_line_1_off
    257  fc27
    258  fc27							; Bottom
    259  fc27		       c5 ae		      cmp	LineDrawPos+0
    260  fc29		       90 02		      bcc	.game_kernel_line_1_off
    261  fc2b
    262  fc2b				   .game_kernel_line_1_on
    263  fc2b		       a0 02		      ldy	#%00000010
    264  fc2d
    265  fc2d				   .game_kernel_line_1_off
    266  fc2d		       84 1f		      sty	ENABL
    267  fc2f
    268  fc2f				   .game_kernel_line_1_skip
    269  fc2f
    270  fc2f		       ca		      dex
    271  fc30		       85 02		      sta	WSYNC
    272  fc32
    273  fc32				   .game_kernel_spider_1
    274  fc32							; Spider (1st time)
    275  fc32
    276  fc32		       a4 a2		      ldy	SpiderIndex
    277  fc34		       30 1a		      bmi	.game_kernel_spider_1_load	; At end of sprite
    278  fc36		       d0 06		      bne	.game_kernel_spider_1_draw	; Currently drawing (not zero)
    279  fc38
    280  fc38							; Check y position to see if we should start
    281  fc38		       a5 84		      lda	Temp+1	; Use half scanline
    282  fc3a		       e5 a3		      sbc	SpiderDrawPos
    283  fc3c		       10 12		      bpl	.game_kernel_spider_1_load
    284  fc3e
    285  fc3e				   .game_kernel_spider_1_draw
    286  fc3e		       b1 9c		      lda	(SpiderPtr),y
    287  fc40		       85 a4		      sta	SpiderLine
    288  fc42
    289  fc42							; Increment sprite index
    290  fc42		       e6 a2		      inc	SpiderIndex
    291  fc44
    292  fc44							; See if we're at the end
    293  fc44		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    294  fc46		       d0 0a		      bne	.game_kernel_spider_1_line
    295  fc48		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    296  fc4a		       84 a2		      sty	SpiderIndex
    297  fc4c		       a9 00		      lda	#0
    298  fc4e		       85 a4		      sta	SpiderLine
    299  fc50
    300  fc50				   .game_kernel_spider_1_load
    301  fc50		       a5 a4		      lda	SpiderLine
    302  fc52				   .game_kernel_spider_1_line
    303  fc52		       85 1b		      sta	GRP0
    304  fc54
    305  fc54				   .game_kernel_swatter_1
    306  fc54							; Swatter (1st time)
    307  fc54
    308  fc54							; Check if wait state
    309  fc54		       24 bf		      bit	SwatterState
    310  fc56		       10 1b		      bpl	.game_kernel_swatter_1_load
    311  fc58
    312  fc58		       a4 c3		      ldy	SwatterIndex
    313  fc5a		       30 17		      bmi	.game_kernel_swatter_1_load	; At end of sprite
    314  fc5c		       d0 06		      bne	.game_kernel_swatter_1_draw	; Currently drawing (not zero)
    315  fc5e
    316  fc5e							; Check y position to see if we should start
    317  fc5e		       a5 84		      lda	Temp+1	; Use half scanline
    318  fc60		       e5 c4		      sbc	SwatterDrawPos
    319  fc62		       10 0f		      bpl	.game_kernel_swatter_1_load
    320  fc64
    321  fc64				   .game_kernel_swatter_1_draw
    322  fc64		       b9 fb fa 	      lda	SwatterSprite,y
    323  fc67		       85 c5		      sta	SwatterLine
    324  fc69
    325  fc69							; Increment index
    326  fc69		       e6 c3		      inc	SwatterIndex
    327  fc6b
    328  fc6b							; See if we're at the end
    329  fc6b		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    330  fc6d		       d0 06		      bne	.game_kernel_swatter_1_line
    331  fc6f		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    332  fc71		       84 c3		      sty	SwatterIndex
    333  fc73
    334  fc73				   .game_kernel_swatter_1_load
    335  fc73		       a5 c5		      lda	SwatterLine
    336  fc75				   .game_kernel_swatter_1_line
    337  fc75		       85 1c		      sta	GRP1
    338  fc77
    339  fc77							; New line and decrement half scanline
    340  fc77		       c6 84		      dec	Temp+1
    341  fc79		       ca		      dex
    342  fc7a		       85 02		      sta	WSYNC
    343  fc7c
    344  fc7c							; Preload half-line
    345  fc7c		       a5 84		      lda	Temp+1
    346  fc7e
    347  fc7e				   .game_kernel_line_2
    348  fc7e							; Line (2nd time)
    349  fc7e
    350  fc7e		       24 a7		      bit	LineEnabled
    351  fc80		       10 0e		      bpl	.game_kernel_line_2_skip
    352  fc82
    353  fc82		       a0 00		      ldy	#%00000000
    354  fc84
    355  fc84							; Top
    356  fc84		       c5 af		      cmp	LineDrawPos+1
    357  fc86		       b0 06		      bcs	.game_kernel_line_2_off
    358  fc88
    359  fc88							; Bottom
    360  fc88		       c5 ae		      cmp	LineDrawPos+0
    361  fc8a		       90 02		      bcc	.game_kernel_line_2_off
    362  fc8c
    363  fc8c				   .game_kernel_line_2_on
    364  fc8c		       a0 02		      ldy	#%00000010
    365  fc8e
    366  fc8e				   .game_kernel_line_2_off
    367  fc8e		       84 1f		      sty	ENABL
    368  fc90
    369  fc90				   .game_kernel_line_2_skip
    370  fc90
    371  fc90				   .game_kernel_bug_1_0
    372  fc90							; First Bug (1st time)
    373  fc90
    374  fc90		       a0 00		      ldy	#%00000000
    375  fc92
    376  fc92							; Top
    377  fc92		       c5 bb		      cmp	BugDrawPosTop+0
    378  fc94		       b0 06		      bcs	.game_kernel_bug_1_0_off
    379  fc96
    380  fc96							; Bottom
    381  fc96		       c5 b9		      cmp	BugDrawPosBottom+0
    382  fc98		       90 02		      bcc	.game_kernel_bug_1_0_off
    383  fc9a
    384  fc9a				   .game_kernel_bug_1_0_on
    385  fc9a		       a0 02		      ldy	#%00000010
    386  fc9c
    387  fc9c				   .game_kernel_bug_1_0_off
    388  fc9c		       84 1d		      sty	ENAM0
    389  fc9e
    390  fc9e				   .game_kernel_bug_1_1
    391  fc9e							; Second Bug (1st time)
    392  fc9e
    393  fc9e		       a0 00		      ldy	#%00000000
    394  fca0
    395  fca0							; Top
    396  fca0		       c5 bc		      cmp	BugDrawPosTop+1
    397  fca2		       b0 06		      bcs	.game_kernel_bug_1_1_off
    398  fca4
    399  fca4							; Bottom
    400  fca4		       c5 ba		      cmp	BugDrawPosBottom+1
    401  fca6		       90 02		      bcc	.game_kernel_bug_1_1_off
    402  fca8
    403  fca8				   .game_kernel_bug_1_1_on
    404  fca8		       a0 02		      ldy	#%00000010
    405  fcaa
    406  fcaa				   .game_kernel_bug_1_1_off
    407  fcaa		       84 1e		      sty	ENAM1
    408  fcac
    409  fcac							; Next Line
    410  fcac		       ca		      dex
    411  fcad		       85 02		      sta	WSYNC
    412  fcaf
    413  fcaf				   .game_kernel_spider_2
    414  fcaf							; Spider (2nd time)
    415  fcaf
    416  fcaf		       a4 a2		      ldy	SpiderIndex
    417  fcb1		       30 1a		      bmi	.game_kernel_spider_2_load	; At end of sprite
    418  fcb3		       d0 06		      bne	.game_kernel_spider_2_draw	; Currently drawing (not zero)
    419  fcb5
    420  fcb5							; Check y position to see if we should start
    421  fcb5		       a5 84		      lda	Temp+1	; Use half scanline
    422  fcb7		       e5 a3		      sbc	SpiderDrawPos
    423  fcb9		       10 12		      bpl	.game_kernel_spider_2_load
    424  fcbb
    425  fcbb				   .game_kernel_spider_2_draw
    426  fcbb		       b1 9c		      lda	(SpiderPtr),y
    427  fcbd		       85 a4		      sta	SpiderLine
    428  fcbf
    429  fcbf							; Increment sprite index
    430  fcbf		       e6 a2		      inc	SpiderIndex
    431  fcc1
    432  fcc1							; See if we're at the end
    433  fcc1		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    434  fcc3		       d0 0a		      bne	.game_kernel_spider_2_line
    435  fcc5		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    436  fcc7		       84 a2		      sty	SpiderIndex
    437  fcc9		       a9 00		      lda	#0
    438  fccb		       85 a4		      sta	SpiderLine
    439  fccd
    440  fccd				   .game_kernel_spider_2_load
    441  fccd		       a5 a4		      lda	SpiderLine
    442  fccf				   .game_kernel_spider_2_line
    443  fccf		       85 1b		      sta	GRP0
    444  fcd1
    445  fcd1				   .game_kernel_swatter_2
    446  fcd1							; Swatter (2nd time)
    447  fcd1
    448  fcd1							; Check if wait state
    449  fcd1		       24 bf		      bit	SwatterState
    450  fcd3		       10 1b		      bpl	.game_kernel_swatter_2_load
    451  fcd5
    452  fcd5		       a4 c3		      ldy	SwatterIndex
    453  fcd7		       30 17		      bmi	.game_kernel_swatter_2_load	; At end of sprite
    454  fcd9		       d0 06		      bne	.game_kernel_swatter_2_draw	; Currently drawing (not zero)
    455  fcdb
    456  fcdb							; Check y position to see if we should start
    457  fcdb		       a5 84		      lda	Temp+1	; Use half scanline
    458  fcdd		       e5 c4		      sbc	SwatterDrawPos
    459  fcdf		       10 0f		      bpl	.game_kernel_swatter_2_load
    460  fce1
    461  fce1				   .game_kernel_swatter_2_draw
    462  fce1		       b9 fb fa 	      lda	SwatterSprite,y
    463  fce4		       85 c5		      sta	SwatterLine
    464  fce6
    465  fce6							; Increment index
    466  fce6		       e6 c3		      inc	SwatterIndex
    467  fce8
    468  fce8							; See if we're at the end
    469  fce8		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    470  fcea		       d0 06		      bne	.game_kernel_swatter_2_line
    471  fcec		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    472  fcee		       84 c3		      sty	SwatterIndex
    473  fcf0
    474  fcf0				   .game_kernel_swatter_2_load
    475  fcf0		       a5 c5		      lda	SwatterLine
    476  fcf2				   .game_kernel_swatter_2_line
    477  fcf2		       85 1c		      sta	GRP1
    478  fcf4
    479  fcf4							; Next Line and half-line
    480  fcf4		       c6 84		      dec	Temp+1
    481  fcf6		       ca		      dex
    482  fcf7		       85 02		      sta	WSYNC
    483  fcf9
    484  fcf9							; Preload half-line
    485  fcf9		       a5 84		      lda	Temp+1
    486  fcfb
    487  fcfb				   .game_kernel_line_3
    488  fcfb							; Line (3rd time)
    489  fcfb
    490  fcfb		       24 a7		      bit	LineEnabled
    491  fcfd		       10 0e		      bpl	.game_kernel_line_3_skip
    492  fcff
    493  fcff		       a0 00		      ldy	#%00000000
    494  fd01
    495  fd01							; Top
    496  fd01		       c5 af		      cmp	LineDrawPos+1
    497  fd03		       b0 06		      bcs	.game_kernel_line_3_off
    498  fd05
    499  fd05							; Bottom
    500  fd05		       c5 ae		      cmp	LineDrawPos+0
    501  fd07		       90 02		      bcc	.game_kernel_line_3_off
    502  fd09
    503  fd09				   .game_kernel_line_3_on
    504  fd09		       a0 02		      ldy	#%00000010
    505  fd0b
    506  fd0b				   .game_kernel_line_3_off
    507  fd0b		       84 1f		      sty	ENABL
    508  fd0d
    509  fd0d				   .game_kernel_line_3_skip
    510  fd0d
    511  fd0d				   .game_kernel_bug_2_0
    512  fd0d							; First Bug (2nd time)
    513  fd0d
    514  fd0d		       a0 00		      ldy	#%00000000
    515  fd0f
    516  fd0f							; Top
    517  fd0f		       c5 bb		      cmp	BugDrawPosTop+0
    518  fd11		       b0 06		      bcs	.game_kernel_bug_2_0_off
    519  fd13
    520  fd13							; Bottom
    521  fd13		       c5 b9		      cmp	BugDrawPosBottom+0
    522  fd15		       90 02		      bcc	.game_kernel_bug_2_0_off
    523  fd17
    524  fd17				   .game_kernel_bug_2_0_on
    525  fd17		       a0 02		      ldy	#%00000010
    526  fd19
    527  fd19				   .game_kernel_bug_2_0_off
    528  fd19		       84 1d		      sty	ENAM0
    529  fd1b
    530  fd1b				   .game_kernel_bug_2_1
    531  fd1b							; Second Bug (2nd time)
    532  fd1b
    533  fd1b		       a0 00		      ldy	#%00000000
    534  fd1d
    535  fd1d							; Top
    536  fd1d		       c5 bc		      cmp	BugDrawPosTop+1
    537  fd1f		       b0 06		      bcs	.game_kernel_bug_2_1_off
    538  fd21
    539  fd21							; Bottom
    540  fd21		       c5 ba		      cmp	BugDrawPosBottom+1
    541  fd23		       90 02		      bcc	.game_kernel_bug_2_1_off
    542  fd25
    543  fd25				   .game_kernel_bug_2_1_on
    544  fd25		       a0 02		      ldy	#%00000010
    545  fd27
    546  fd27				   .game_kernel_bug_2_1_off
    547  fd27		       84 1e		      sty	ENAM1
    548  fd29
    549  fd29							; Next Line
    550  fd29		       ca		      dex
    551  fd2a		       85 02		      sta	WSYNC
    552  fd2c
    553  fd2c				   .game_kernel_spider_3
    554  fd2c							; Spider (3rd time)
    555  fd2c
    556  fd2c		       a4 a2		      ldy	SpiderIndex
    557  fd2e		       30 1a		      bmi	.game_kernel_spider_3_load	; At end of sprite
    558  fd30		       d0 06		      bne	.game_kernel_spider_3_draw	; Currently drawing (not zero)
    559  fd32
    560  fd32							; Check y position to see if we should start
    561  fd32		       a5 84		      lda	Temp+1	; Use half scanline
    562  fd34		       e5 a3		      sbc	SpiderDrawPos
    563  fd36		       10 12		      bpl	.game_kernel_spider_3_load
    564  fd38
    565  fd38				   .game_kernel_spider_3_draw
    566  fd38		       b1 9c		      lda	(SpiderPtr),y
    567  fd3a		       85 a4		      sta	SpiderLine
    568  fd3c
    569  fd3c							; Increment sprite index
    570  fd3c		       e6 a2		      inc	SpiderIndex
    571  fd3e
    572  fd3e							; See if we're at the end
    573  fd3e		       c0 10		      cpy	#SPIDER_SPRITE_SIZE
    574  fd40		       d0 0a		      bne	.game_kernel_spider_3_line
    575  fd42		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    576  fd44		       84 a2		      sty	SpiderIndex
    577  fd46		       a9 00		      lda	#0
    578  fd48		       85 a4		      sta	SpiderLine
    579  fd4a
    580  fd4a				   .game_kernel_spider_3_load
    581  fd4a		       a5 a4		      lda	SpiderLine
    582  fd4c				   .game_kernel_spider_3_line
    583  fd4c		       85 1b		      sta	GRP0
    584  fd4e
    585  fd4e				   .game_kernel_spider_3_skip
    586  fd4e
    587  fd4e				   .game_kernel_swatter_3
    588  fd4e							; Swatter (3rd time)
    589  fd4e
    590  fd4e							; Check if wait state
    591  fd4e		       24 bf		      bit	SwatterState
    592  fd50		       10 1b		      bpl	.game_kernel_swatter_3_load
    593  fd52
    594  fd52		       a4 c3		      ldy	SwatterIndex
    595  fd54		       30 17		      bmi	.game_kernel_swatter_3_load	; At end of sprite
    596  fd56		       d0 06		      bne	.game_kernel_swatter_3_draw	; Currently drawing (not zero)
    597  fd58
    598  fd58							; Check y position to see if we should start
    599  fd58		       a5 84		      lda	Temp+1	; Use half scanline
    600  fd5a		       e5 c4		      sbc	SwatterDrawPos
    601  fd5c		       10 0f		      bpl	.game_kernel_swatter_3_load
    602  fd5e
    603  fd5e				   .game_kernel_swatter_3_draw
    604  fd5e		       b9 fb fa 	      lda	SwatterSprite,y
    605  fd61		       85 c5		      sta	SwatterLine
    606  fd63
    607  fd63							; Increment index
    608  fd63		       e6 c3		      inc	SwatterIndex
    609  fd65
    610  fd65							; See if we're at the end
    611  fd65		       c0 13		      cpy	#(SWATTER_SPRITE_SIZE-1)
    612  fd67		       d0 06		      bne	.game_kernel_swatter_3_line
    613  fd69		       a0 ff		      ldy	#-1	; Load a negative value to tell draw routine to stop
    614  fd6b		       84 c3		      sty	SwatterIndex
    615  fd6d
    616  fd6d				   .game_kernel_swatter_3_load
    617  fd6d		       a5 c5		      lda	SwatterLine
    618  fd6f				   .game_kernel_swatter_3_line
    619  fd6f		       85 1c		      sta	GRP1
    620  fd71
    621  fd71				   .game_kernel_swatter_3_skip
    622  fd71
    623  fd71							; New line and decrement half scanline
    624  fd71		       c6 84		      dec	Temp+1
    625  fd73		       ca		      dex
    626  fd74		       f0 03		      beq	.game_kernel_clean
    627  fd76		       4c 06 fc 	      jmp	.game_kernel_objects
    628  fd79
    629  fd79				   .game_kernel_clean
    630  fd79
    631  fd79		       20 0b f5 	      jsr	WebClean
    632  fd7c		       20 be f6 	      jsr	SpiderClean
    633  fd7f		       20 74 f8 	      jsr	LineClean
    634  fd82		       20 bc f9 	      jsr	BugClean
    635  fd85		       20 a5 fa 	      jsr	SwatterClean
    636  fd88
    637  fd88		       85 02		      sta	WSYNC
    638  fd8a
    639  fd8a				   .game_kernel_return
    640  fd8a		       60		      rts
    641  fd8b
    642  fd8b				   GameAudio0
    643  fd8b		       0d		      .byte.b	#13	; D
    644  fd8c		       ff		      .byte.b	#$FF
    645  fd8d		       0f		      .byte.b	#15	; B
    646  fd8e		       ff		      .byte.b	#$FF
    647  fd8f		       0d		      .byte.b	#13	; D
    648  fd90		       ff		      .byte.b	#$FF
    649  fd91		       0f		      .byte.b	#15	; B
    650  fd92		       ff		      .byte.b	#$FF
    651  fd93		       0d		      .byte.b	#13	; D
    652  fd94		       0d		      .byte.b	#13	; D
    653  fd95		       0f		      .byte.b	#15	; B
    654  fd96		       ff		      .byte.b	#$FF
    655  fd97		       0c		      .byte.b	#12	; D#
    656  fd98		       ff		      .byte.b	#$FF
    657  fd99		       0f		      .byte.b	#15	; B
    658  fd9a		       ff		      .byte.b	#$FF
    659  fd9b		       0b		      .byte.b	#11	; E
    660  fd9c		       ff		      .byte.b	#$FF
    661  fd9d		       0e		      .byte.b	#14	; C#
    662  fd9e		       ff		      .byte.b	#$FF
    663  fd9f		       0b		      .byte.b	#11
    664  fda0		       ff		      .byte.b	#$FF
    665  fda1		       0e		      .byte.b	#14
    666  fda2		       ff		      .byte.b	#$FF
    667  fda3		       0b		      .byte.b	#11
    668  fda4		       0b		      .byte.b	#11
    669  fda5		       0e		      .byte.b	#14
    670  fda6		       ff		      .byte.b	#$FF
    671  fda7		       0b		      .byte.b	#11
    672  fda8		       ff		      .byte.b	#$FF
    673  fda9		       0e		      .byte.b	#14
    674  fdaa		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  fdab					      include	"over.asm"
      1  fdab							;================
      2  fdab							; Constants
      3  fdab							;================
      4  fdab
      5  fdab		       00 dc	   OVER_FRAMES =	220
      6  fdab
      7  fdab		       00 00	   OVER_BG_COLOR =	#$00
      8  fdab		       00 44	   OVER_FG_COLOR =	#$44
      9  fdab
     10  fdab		       00 07	   OVER_AUDIO_TONE =	7
     11  fdab		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  fdab		       00 06	   OVER_AUDIO_LENGTH =	6
     13  fdab		       00 10	   OVER_AUDIO_STEP =	16
     14  fdab
     15  fdab		       00 09	   OVER_IMAGE_SIZE =	9
     16  fdab		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  fdab		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  fdab		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  fdab
     20  fdab				   OverInit
     21  fdab
     22  fdab							; Setup logic and kernel
      0  fdab					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  fdab				   .POINTER   SET	VBlankPtr
      2  fdab				   .ADDRESS   SET	OverVerticalBlank
      3  fdab
      4  fdab		       a9 ed		      LDA	#<.ADDRESS
      5  fdad		       85 87		      STA	.POINTER
      6  fdaf		       a9 fd		      LDA	#>.ADDRESS
      7  fdb1		       85 88		      STA	.POINTER+1
      8  fdb3
      0  fdb3					      SET_POINTER	KernelPtr, OverKernel
      1  fdb3				   .POINTER   SET	KernelPtr
      2  fdb3				   .ADDRESS   SET	OverKernel
      3  fdb3
      4  fdb3		       a9 2b		      LDA	#<.ADDRESS
      5  fdb5		       85 89		      STA	.POINTER
      6  fdb7		       a9 fe		      LDA	#>.ADDRESS
      7  fdb9		       85 8a		      STA	.POINTER+1
      8  fdbb
      0  fdbb					      SET_POINTER	OverScanPtr, OverOverScan
      1  fdbb				   .POINTER   SET	OverScanPtr
      2  fdbb				   .ADDRESS   SET	OverOverScan
      3  fdbb
      4  fdbb		       a9 f1		      LDA	#<.ADDRESS
      5  fdbd		       85 8b		      STA	.POINTER
      6  fdbf		       a9 fd		      LDA	#>.ADDRESS
      7  fdc1		       85 8c		      STA	.POINTER+1
      8  fdc3
     26  fdc3
     27  fdc3							; Load Colors
     28  fdc3		       a9 00		      lda	#OVER_BG_COLOR
     29  fdc5		       85 09		      sta	COLUBK
     30  fdc7		       a9 44		      lda	#OVER_FG_COLOR
     31  fdc9		       85 08		      sta	COLUPF
     32  fdcb
     33  fdcb							; Load audio settings
     34  fdcb		       a9 07		      lda	#OVER_AUDIO_TONE
     35  fdcd		       85 15		      sta	AUDC0
     36  fdcf		       a9 06		      lda	#OVER_AUDIO_VOLUME
     37  fdd1		       85 19		      sta	AUDV0
     38  fdd3		       a9 00		      lda	#0
     39  fdd5		       85 16		      sta	AUDC1
     40  fdd7		       85 1a		      sta	AUDV1
     41  fdd9		       a9 00		      lda	#0
     42  fddb		       85 90		      sta	AudioStep
     43  fddd
     44  fddd							; Play first note
     45  fddd		       ad 7d fe 	      lda	OverAudio0,AudioStep
     46  fde0		       85 17		      sta	AUDF0
     47  fde2
     48  fde2							; Setup frame counters
     49  fde2		       a9 00		      lda	#0
     50  fde4		       85 8d		      sta	Frame
     51  fde6		       a9 10		      lda	#OVER_AUDIO_STEP
     52  fde8		       85 8e		      sta	FrameTimer
     53  fdea		       85 84		      sta	Temp+1
     54  fdec
     55  fdec		       60		      rts
     56  fded
     57  fded				   OverVerticalBlank
     58  fded		       20 b5 f3 	      jsr	ScoreUpdate
     59  fdf0		       60		      rts
     60  fdf1
     61  fdf1				   OverOverScan
     62  fdf1		       20 f8 fd 	      jsr	OverAudio
     63  fdf4		       20 21 fe 	      jsr	OverState
     64  fdf7		       60		      rts
     65  fdf8
     66  fdf8				   OverAudio
     67  fdf8
     68  fdf8		       a6 8e		      ldx	FrameTimer
     69  fdfa		       e0 00		      cpx	#0
     70  fdfc		       d0 22		      bne	.over_audio_return
     71  fdfe
     72  fdfe							; Reset Timer
     73  fdfe		       a6 84		      ldx	Temp+1
     74  fe00					      REPEAT	3
     75  fe00		       e8		      inx
     74  fe00					      REPEND
     75  fe01		       e8		      inx
     74  fe01					      REPEND
     75  fe02		       e8		      inx
     76  fe03					      REPEND
     77  fe03		       86 8e		      stx	FrameTimer
     78  fe05		       86 84		      stx	Temp+1
     79  fe07
     80  fe07				   .over_audio_play
     81  fe07
     82  fe07							; Increment melody position
     83  fe07		       a4 90		      ldy	AudioStep
     84  fe09		       c8		      iny
     85  fe0a
     86  fe0a		       c0 06		      cpy	#OVER_AUDIO_LENGTH
     87  fe0c		       f0 0c		      beq	.over_audio_mute_note
     88  fe0e
     89  fe0e				   .over_audio_play_note
     90  fe0e
     91  fe0e							; Save current position
     92  fe0e		       84 90		      sty	AudioStep
     93  fe10
     94  fe10							; Melody Line
     95  fe10		       b9 7d fe 	      lda	OverAudio0,y
     96  fe13		       85 17		      sta	AUDF0
     97  fe15		       a9 06		      lda	#OVER_AUDIO_VOLUME
     98  fe17		       85 19		      sta	AUDV0
     99  fe19
    100  fe19		       60		      rts
    101  fe1a
    102  fe1a				   .over_audio_mute_note
    103  fe1a		       a9 00		      lda	#0
    104  fe1c		       85 17		      sta	AUDF0
    105  fe1e		       85 19		      sta	AUDV0
    106  fe20
    107  fe20				   .over_audio_return
    108  fe20		       60		      rts
    109  fe21
    110  fe21				   OverState
    111  fe21		       a5 8d		      lda	Frame
    112  fe23		       c9 dc		      cmp	#OVER_FRAMES
    113  fe25		       d0 03		      bne	.over_state_return
    114  fe27
    115  fe27		       20 cb f0 	      jsr	TitleInit
    116  fe2a
    117  fe2a				   .over_state_return
    118  fe2a		       60		      rts
    119  fe2b
    120  fe2b				   OverKernel
    121  fe2b
    122  fe2b							; Turn on display
    123  fe2b		       a9 00		      lda	#0
    124  fe2d		       85 01		      sta	VBLANK
    125  fe2f
    126  fe2f				   .over_kernel_score
    127  fe2f
    128  fe2f							; Draw Score on top first (no update)
    129  fe2f		       20 ed f3 	      jsr	ScoreDraw
    130  fe32
    131  fe32				   .over_kernel_init
    132  fe32							; Playfield Control
    133  fe32		       a5 80		      lda	CtrlPf
    134  fe34		       29 fd		      and	#%11111101	; Use playfield foreground color
    135  fe36		       09 01		      ora	#%00000001	; Set mirroring
    136  fe38		       85 80		      sta	CtrlPf
    137  fe3a		       85 0a		      sta	CTRLPF
    138  fe3c
    139  fe3c				   .over_kernel_top_padding
    140  fe3c							; Top Padding
    141  fe3c		       20 5b fe 	      jsr	OverPadding
    142  fe3f
    143  fe3f				   .over_kernel_image
    144  fe3f		       a2 08		      ldx	#OVER_IMAGE_SIZE-1
    145  fe41
    146  fe41				   .over_kernel_image_next
    147  fe41		       bd 74 fe 	      lda	OverImagePF2,x
    148  fe44		       85 0f		      sta	PF2
    149  fe46		       bd 6b fe 	      lda	OverImagePF1,x
    150  fe49		       85 0e		      sta	PF1
    151  fe4b							;    lda OverImagePF0,x
    152  fe4b							;    sta PF0
    153  fe4b
    154  fe4b		       a0 08		      ldy	#OVER_IMAGE_LINE_SIZE
    155  fe4d				   .over_kernel_image_loop
    156  fe4d		       85 02		      sta	WSYNC
    157  fe4f		       88		      dey
    158  fe50		       d0 fb		      bne	.over_kernel_image_loop
    159  fe52
    160  fe52		       ca		      dex
    161  fe53		       10 ec		      bpl	.over_kernel_image_next
    162  fe55
    163  fe55				   .over_kernel_bottom_padding
    164  fe55							; Bottom Padding
    165  fe55		       20 5b fe 	      jsr	OverPadding
    166  fe58
    167  fe58				   .over_kernel_return
    168  fe58		       85 02		      sta	WSYNC	; This extra line is to account for constant rounding
    169  fe5a		       60		      rts
    170  fe5b
    171  fe5b				   OverPadding
    172  fe5b		       a9 00		      lda	#0
    173  fe5d		       85 0d		      sta	PF0
    174  fe5f		       85 0e		      sta	PF1
    175  fe61		       85 0f		      sta	PF2
    176  fe63
    177  fe63		       a2 32		      ldx	#OVER_IMAGE_PADDING
    178  fe65				   .over_padding_loop
    179  fe65		       85 02		      sta	WSYNC
    180  fe67		       ca		      dex
    181  fe68		       d0 fb		      bne	.over_padding_loop
    182  fe6a
    183  fe6a		       60		      rts
    184  fe6b
    185  fe6b				   OverAssets
    186  fe6b
    187  fe6b							; Assets
------- FILE over_image.asm LEVEL 3 PASS 2
      0  fe6b					      include	"over_image.asm"
      1  fe6b							;OverImagePF0:
      2  fe6b							;    .BYTE %00000000
      3  fe6b							;    .BYTE %00000000
      4  fe6b							;    .BYTE %00000000
      5  fe6b							;    .BYTE %00000000
      6  fe6b							;    .BYTE %00000000
      7  fe6b							;    .BYTE %00000000
      8  fe6b							;    .BYTE %00000000
      9  fe6b							;    .BYTE %00000000
     10  fe6b							;    .BYTE %00000000
     11  fe6b
     12  fe6b				   OverImagePF1
     13  fe6b		       0c		      .BYTE.b	%00001100
     14  fe6c		       13		      .BYTE.b	%00010011
     15  fe6d		       20		      .BYTE.b	%00100000
     16  fe6e		       23		      .BYTE.b	%00100011
     17  fe6f		       24		      .BYTE.b	%00100100
     18  fe70		       24		      .BYTE.b	%00100100
     19  fe71		       12		      .BYTE.b	%00010010
     20  fe72		       10		      .BYTE.b	%00010000
     21  fe73		       08		      .BYTE.b	%00001000
     22  fe74
     23  fe74				   OverImagePF2
     24  fe74		       e0		      .BYTE.b	%11100000
     25  fe75		       18		      .BYTE.b	%00011000
     26  fe76		       05		      .BYTE.b	%00000101
     27  fe77		       52		      .BYTE.b	%01010010
     28  fe78		       23		      .BYTE.b	%00100011
     29  fe79		       52		      .BYTE.b	%01010010
     30  fe7a		       04		      .BYTE.b	%00000100
     31  fe7b		       18		      .BYTE.b	%00011000
     32  fe7c		       e0		      .BYTE.b	%11100000
------- FILE over.asm
    189  fe7d
    190  fe7d				   OverAudio0
    191  fe7d
    192  fe7d		       0c		      .BYTE.b	#12	; D#2
    193  fe7e		       0d		      .BYTE.b	#13	; D2
    194  fe7f		       11		      .BYTE.b	#17	; A1
    195  fe80		       16		      .BYTE.b	#22	; F1
    196  fe81		       1a		      .BYTE.b	#26	; D1
    197  fe82		       1a		      .BYTE.b	#26
------- FILE kernel.asm
    313  fe83
    314  fe83							;================
    315  fe83							; End of cart
    316  fe83							;================
    317  fe83
    318  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    319  fffa
    320  fffa				   InterruptVectors
    321  fffa
    322  fffa		       21 f0		      .word.w	InitSystem	; NMI
    323  fffc		       21 f0		      .word.w	InitSystem	; RESET
    324  fffe		       21 f0		      .word.w	InitSystem	; IRQ
    325  10000
    326  10000					       END
