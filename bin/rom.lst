------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????						; Spider Web game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: March 1st, 2020
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE kernel.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		01 40	    KERNEL_WIDTH =	40*8
     38  10000 ????		00 44	    KERNEL_HBLANK =	68
     39  10000 ????
     40  10000 ????		00 03	    KERNEL_IMAGE_MIRROR_DATA =	#3
     41  10000 ????		00 06	    KERNEL_IMAGE_FULL_DATA =	#6
     42  10000 ????		00 08	    KERNEL_IMAGE_LINE =	#8
     43  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	#24	; KERNEL_SCANLINES/KERNEL_IMAGE_LINE
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U00d4 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080							; Global
     53 U0080
     54 U0080		       00 00 00 00 Temp       ds	4
     55 U0084		       00	   Rand8      ds	1
     56 U0085		       00	   Rand16     ds	1
     57 U0086
     58 U0086		       00 00	   VBlankPtr  ds	2
     59 U0088		       00 00	   KernelPtr  ds	2
     60 U008a		       00 00	   OverScanPtr ds	2
     61 U008c
     62 U008c		       00	   Frame      ds	1
     63 U008d		       00 00	   FrameTimer ds	2
     64 U008f		       00 00	   InputState ds	2
     65 U0091
     66 U0091		       00	   AudioStep  ds	1
     67 U0092		       00	   SampleStep ds	1
     68 U0093
     69 U0093							; Game
     70 U0093
     71 U0093		       00	   GameType   ds	1
     72 U0094		       00	   GameAudioStep ds	1
     73 U0095
     74 U0095							; Score
     75 U0095
     76 U0095		       00 00	   ScoreValue ds	2
     77 U0097		       00 00	   ScoreDigitOnes ds	2
     78 U0099		       00 00	   ScoreDigitTens ds	2
     79 U009b		       00 00 00    ScoreDigitGfx ds	3
     80 U009e		       00 00	   ScoreBarGfx ds	2
     81 U00a0
     82 U00a0							; Level
     83 U00a0		       00	   LevelCurrent ds	1
     84 U00a1
     85 U00a1							; Web
     86 U00a1
     87 U00a1		       00	   WebIndex   ds	1
     88 U00a2		       00 00	   WebColor   ds	2
     89 U00a4
     90 U00a4							; Spider
     91 U00a4
     92 U00a4		       00 00	   SpiderPtr  ds	2
     93 U00a6		       00 00	   SpiderPos  ds	2
     94 U00a8		       00	   SpiderCtrl ds	1
     95 U00a9		       00	   SpiderColor ds	1
     96 U00aa
     97 U00aa		       00	   SpiderIndex ds	1
     98 U00ab		       00	   SpiderDrawPos ds	1
     99 U00ac		       00	   SpiderLine ds	1
    100 U00ad
    101 U00ad		       00 00	   SpiderPtr2 ds	2
    102 U00af
    103 U00af							; Line
    104 U00af
    105 U00af		       00	   LineEnabled ds	1
    106 U00b0		       00 00	   LinePos    ds	2
    107 U00b2		       00 00	   LineVelocity ds	2
    108 U00b4		       00 00	   LineDrawPos ds	2
    109 U00b6
    110 U00b6							; Bug
    111 U00b6
    112 U00b6		       00	   BugSpeed   ds	1
    113 U00b7
    114 U00b7		       00 00	   BugStunned ds	2
    115 U00b9		       00 00	   BugPosX    ds	2
    116 U00bb		       00 00	   BugPosY    ds	2
    117 U00bd
    118 U00bd		       00 00	   BugDrawPosBottom ds	2
    119 U00bf		       00 00	   BugDrawPosTop ds	2
    120 U00c1
    121 U00c1							; Swatter
    122 U00c1
    123 U00c1		       00 00	   SwatterPos ds	2
    124 U00c3		       00	   SwatterState ds	1
    125 U00c4		       00	   SwatterColor ds	1
    126 U00c5
    127 U00c5		       00	   SwatterWaitTime ds	1
    128 U00c6		       00	   SwatterHoldTime ds	1
    129 U00c7		       00	   SwatterHitDamage ds	1
    130 U00c8
    131 U00c8		       00	   SwatterIndex ds	1
    132 U00c9		       00	   SwatterDrawPos ds	1
    133 U00ca		       00	   SwatterLine ds	1
    134 U00cb
    135 U00cb		       00	   SwatterSampleCount ds	1
    136 U00cc		       00	   SwatterSampleF ds	1
    137 U00cd
    138 U00cd							; Over
    139 U00cd
    140 U00cd		       00 00	   OverImagePF1Ptr ds	2
    141 U00cf		       00 00	   OverImagePF2Ptr ds	2
    142 U00d1		       00 00	   OverAudio0Ptr ds	2
    143 U00d3		       00	   OverColor  ds	1
    144 U00d4
    145  10000 ????				       SEG
    146  f000					      org	$F000	; Start of cart area
    147  f000
------- FILE routines.asm LEVEL 2 PASS 2
      0  f000					      include	"routines.asm"
      1  f000							;=======================================
      2  f000							; Global Kernel Subroutines
      3  f000							;=======================================
      4  f000
      5  f000							;=======================================
      6  f000							; PosObject
      7  f000							; ---------
      8  f000							; A - holds the X position of the object
      9  f000							; X - holds which object to position
     10  f000							;   0 = player0
     11  f000							;   1 = player1
     12  f000							;   2 = missile0
     13  f000							;   3 = missile1
     14  f000							;   4 = Ball
     15  f000							;=======================================
     16  f000
     17  f000				   PosObject
     18  f000		       38		      sec
     19  f001		       85 02		      sta	WSYNC
     20  f003				   .posobject_divide_loop
     21  f003		       e9 0f		      sbc	#15
     22  f005		       b0 fc		      bcs	.posobject_divide_loop
     23  f007		       49 07		      eor	#7
     24  f009					      REPEAT	4
     25  f009		       0a		      asl
     24  f009					      REPEND
     25  f00a		       0a		      asl
     24  f00a					      REPEND
     25  f00b		       0a		      asl
     24  f00b					      REPEND
     25  f00c		       0a		      asl
     26  f00d					      REPEND
     27  f00d		       9d 20 00 	      sta.wx	HMP0,x
     28  f010		       95 10		      sta	RESP0,x
     29  f012		       60		      rts
     30  f013
     31  f013							;=======================================
     32  f013							; Random
     33  f013							; ---------
     34  f013							; Uses: A
     35  f013							; Sets 16-bit number in Rand8/16
     36  f013							; Returns: A
     37  f013							;
     38  f013							; Sourced from https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
     39  f013							;=======================================
     40  f013
     41  f013				   Random
     42  f013		       a5 84		      lda	Rand8
     43  f015		       4a		      lsr
     44  f016		       26 85		      rol	Rand16
     45  f018		       90 02		      bcc	.random_noeor
     46  f01a		       49 b4		      eor	#$B4
     47  f01c				   .random_noeor
     48  f01c		       85 84		      sta	Rand8
     49  f01e		       45 85		      eor	Rand16
     50  f020		       60		      rts
     51  f021
     52  f021							;=======================================
     53  f021							; BinBcdConvert
     54  f021							; ---------
     55  f021							; Input: A
     56  f021							; Uses: A,X,Y,Temp0/1/2
     57  f021							; Converts binary value to decimal value (BCD)
     58  f021							; Returns X,Y
     59  f021							; Sourced from http://www.6502.org/source/integers/hex2dec-more.htm
     60  f021							;=======================================
     61  f021
     62  f021				   BinBcdConvert
     63  f021		       85 80		      sta	Temp+0
     64  f023
     65  f023		       18		      clc
     66  f024		       f8		      sed		; Switch to decimal mode
     67  f025
     68  f025		       a9 00		      lda	#0	; Clear result
     69  f027		       85 81		      sta	Temp+1
     70  f029		       85 82		      sta	Temp+2
     71  f02b
     72  f02b		       a2 08		      ldx	#8	; Number of source bits
     73  f02d				   .bin_bcd_convert_bit
     74  f02d		       06 80		      asl	Temp+0	; Shift out one bit
     75  f02f
     76  f02f		       a5 81		      lda	Temp+1	; And add into result
     77  f031		       65 81		      adc	Temp+1
     78  f033		       85 81		      sta	Temp+1
     79  f035
     80  f035		       a5 82		      lda	Temp+2	; Propagating any carry
     81  f037		       65 82		      adc	Temp+2
     82  f039		       85 82		      sta	Temp+2
     83  f03b
     84  f03b		       ca		      dex		; Repeat for next bit
     85  f03c		       d0 ef		      bne	.bin_bcd_convert_bit
     86  f03e
     87  f03e		       d8		      cld		; Back to binary
     88  f03f
     89  f03f		       a6 81		      ldx	Temp+1	; Load result into registers
     90  f041		       a4 82		      ldy	Temp+2
     91  f043
     92  f043		       60		      rts
------- FILE kernel.asm
    149  f044
    150  f044							; Assets
    151  f044
------- FILE title_frame_top.asm LEVEL 2 PASS 2
      0  f044					      include	"title_frame_top.asm"
      1  f044				   TitleFrameTop
      2  f044
      3  f044		       a0		      .BYTE.b	%10100000
      4  f045		       54		      .BYTE.b	%01010100
      5  f046		       01		      .BYTE.b	%00000001
      6  f047		       00		      .BYTE.b	%00000000
      7  f048		       03		      .BYTE.b	%00000011
      8  f049		       2c		      .BYTE.b	%00101100
      9  f04a
     10  f04a		       d0		      .BYTE.b	%11010000
     11  f04b		       23		      .BYTE.b	%00100011
     12  f04c		       00		      .BYTE.b	%00000000
     13  f04d		       00		      .BYTE.b	%00000000
     14  f04e		       00		      .BYTE.b	%00000000
     15  f04f		       51		      .BYTE.b	%01010001
     16  f050
     17  f050		       60		      .BYTE.b	%01100000
     18  f051		       dc		      .BYTE.b	%11011100
     19  f052		       00		      .BYTE.b	%00000000
     20  f053		       00		      .BYTE.b	%00000000
     21  f054		       00		      .BYTE.b	%00000000
     22  f055		       8e		      .BYTE.b	%10001110
     23  f056
     24  f056		       b0		      .BYTE.b	%10110000
     25  f057		       00		      .BYTE.b	%00000000
     26  f058		       00		      .BYTE.b	%00000000
     27  f059		       00		      .BYTE.b	%00000000
     28  f05a		       00		      .BYTE.b	%00000000
     29  f05b		       51		      .BYTE.b	%01010001
     30  f05c
     31  f05c		       40		      .BYTE.b	%01000000
     32  f05d		       80		      .BYTE.b	%10000000
     33  f05e		       00		      .BYTE.b	%00000000
     34  f05f		       00		      .BYTE.b	%00000000
     35  f060		       00		      .BYTE.b	%00000000
     36  f061		       ad		      .BYTE.b	%10101101
     37  f062
     38  f062		       50		      .BYTE.b	%01010000
     39  f063		       00		      .BYTE.b	%00000000
     40  f064		       00		      .BYTE.b	%00000000
     41  f065		       00		      .BYTE.b	%00000000
     42  f066		       01		      .BYTE.b	%00000001
     43  f067		       82		      .BYTE.b	%10000010
     44  f068
     45  f068		       20		      .BYTE.b	%00100000
     46  f069		       00		      .BYTE.b	%00000000
     47  f06a		       00		      .BYTE.b	%00000000
     48  f06b		       00		      .BYTE.b	%00000000
     49  f06c		       02		      .BYTE.b	%00000010
     50  f06d		       00		      .BYTE.b	%00000000
     51  f06e
     52  f06e		       c0		      .BYTE.b	%11000000
     53  f06f		       77		      .BYTE.b	%01110111
     54  f070		       66		      .BYTE.b	%01100110
     55  f071		       30		      .BYTE.b	%00110000
     56  f072		       22		      .BYTE.b	%00100010
     57  f073		       1b		      .BYTE.b	%00011011
     58  f074
     59  f074		       40		      .BYTE.b	%01000000
     60  f075		       52		      .BYTE.b	%01010010
     61  f076		       2a		      .BYTE.b	%00101010
     62  f077		       50		      .BYTE.b	%01010000
     63  f078		       22		      .BYTE.b	%00100010
     64  f079		       29		      .BYTE.b	%00101001
     65  f07a
     66  f07a		       c0		      .BYTE.b	%11000000
     67  f07b		       72		      .BYTE.b	%01110010
     68  f07c		       6a		      .BYTE.b	%01101010
     69  f07d		       50		      .BYTE.b	%01010000
     70  f07e		       22		      .BYTE.b	%00100010
     71  f07f		       1b		      .BYTE.b	%00011011
     72  f080
     73  f080		       80		      .BYTE.b	%10000000
     74  f081		       42		      .BYTE.b	%01000010
     75  f082		       2a		      .BYTE.b	%00101010
     76  f083		       30		      .BYTE.b	%00110000
     77  f084		       2a		      .BYTE.b	%00101010
     78  f085		       29		      .BYTE.b	%00101001
     79  f086
     80  f086		       c0		      .BYTE.b	%11000000
     81  f087		       47		      .BYTE.b	%01000111
     82  f088		       e6		      .BYTE.b	%11100110
     83  f089		       50		      .BYTE.b	%01010000
     84  f08a		       14		      .BYTE.b	%00010100
     85  f08b		       1b		      .BYTE.b	%00011011
------- FILE kernel.asm
------- FILE title_frame_bottom.asm LEVEL 2 PASS 2
      0  f08c					      include	"title_frame_bottom.asm"
      1  f08c				   TitleFrameBottom
      2  f08c
      3  f08c		       20		      .BYTE.b	%00100000
      4  f08d		       00		      .BYTE.b	%00000000
      5  f08e		       00		      .BYTE.b	%00000000
      6  f08f		       00		      .BYTE.b	%00000000
      7  f090		       00		      .BYTE.b	%00000000
      8  f091		       64		      .BYTE.b	%01100100
      9  f092
     10  f092		       50		      .BYTE.b	%01010000
     11  f093		       00		      .BYTE.b	%00000000
     12  f094		       00		      .BYTE.b	%00000000
     13  f095		       00		      .BYTE.b	%00000000
     14  f096		       00		      .BYTE.b	%00000000
     15  f097		       98		      .BYTE.b	%10011000
     16  f098
     17  f098		       90		      .BYTE.b	%10010000
     18  f099		       80		      .BYTE.b	%10000000
     19  f09a		       00		      .BYTE.b	%00000000
     20  f09b		       00		      .BYTE.b	%00000000
     21  f09c		       00		      .BYTE.b	%00000000
     22  f09d		       28		      .BYTE.b	%00101000
     23  f09e
     24  f09e		       60		      .BYTE.b	%01100000
     25  f09f		       60		      .BYTE.b	%01100000
     26  f0a0		       00		      .BYTE.b	%00000000
     27  f0a1		       00		      .BYTE.b	%00000000
     28  f0a2		       00		      .BYTE.b	%00000000
     29  f0a3		       44		      .BYTE.b	%01000100
     30  f0a4
     31  f0a4		       d0		      .BYTE.b	%11010000
     32  f0a5		       1c		      .BYTE.b	%00011100
     33  f0a6		       00		      .BYTE.b	%00000000
     34  f0a7		       00		      .BYTE.b	%00000000
     35  f0a8		       00		      .BYTE.b	%00000000
     36  f0a9		       ab		      .BYTE.b	%10101011
------- FILE kernel.asm
------- FILE title_spider.asm LEVEL 2 PASS 2
      0  f0aa					      include	"title_spider.asm"
      1  f0aa				   TitleSpider
      2  f0aa
      3  f0aa		       30		      .BYTE.b	%00110000
      4  f0ab		       67		      .BYTE.b	%01100111
      5  f0ac		       4f		      .BYTE.b	%01001111
      6  f0ad		       dd		      .BYTE.b	%11011101
      7  f0ae		       d8		      .BYTE.b	%11011000
      8  f0af		       df		      .BYTE.b	%11011111
      9  f0b0		       4d		      .BYTE.b	%01001101
     10  f0b1		       6f		      .BYTE.b	%01101111
     11  f0b2		       3b		      .BYTE.b	%00111011
     12  f0b3
     13  f0b3		       37		      .BYTE.b	%00110111
     14  f0b4		       6d		      .BYTE.b	%01101101
     15  f0b5		       d8		      .BYTE.b	%11011000
     16  f0b6		       df		      .BYTE.b	%11011111
     17  f0b7		       cd		      .BYTE.b	%11001101
     18  f0b8		       6f		      .BYTE.b	%01101111
     19  f0b9		       3b		      .BYTE.b	%00111011
     20  f0ba		       00		      .BYTE.b	%00000000
     21  f0bb		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
------- FILE title_bug.asm LEVEL 2 PASS 2
      0  f0bc					      include	"title_bug.asm"
      1  f0bc				   TitleBug
      2  f0bc
      3  f0bc		       10		      .BYTE.b	%00010000
      4  f0bd		       57		      .BYTE.b	%01010111
      5  f0be		       4f		      .BYTE.b	%01001111
      6  f0bf		       3f		      .BYTE.b	%00111111
      7  f0c0		       19		      .BYTE.b	%00011001
      8  f0c1		       79		      .BYTE.b	%01111001
      9  f0c2		       8f		      .BYTE.b	%10001111
     10  f0c3		       97		      .BYTE.b	%10010111
     11  f0c4		       e0		      .BYTE.b	%11100000
     12  f0c5
     13  f0c5		       57		      .BYTE.b	%01010111
     14  f0c6		       4f		      .BYTE.b	%01001111
     15  f0c7		       3f		      .BYTE.b	%00111111
     16  f0c8		       19		      .BYTE.b	%00011001
     17  f0c9		       7d		      .BYTE.b	%01111101
     18  f0ca		       8f		      .BYTE.b	%10001111
     19  f0cb		       f7		      .BYTE.b	%11110111
     20  f0cc		       00		      .BYTE.b	%00000000
     21  f0cd		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    156  f0ce
------- FILE objects/score_digits.asm LEVEL 2 PASS 2
      0  f0ce					      include	"objects/score_digits.asm"
      1  f0ce				   ScoreDigits
      2  f0ce
      3  f0ce		       77		      .BYTE.b	%01110111
      4  f0cf		       55		      .BYTE.b	%01010101
      5  f0d0		       55		      .BYTE.b	%01010101
      6  f0d1		       55		      .BYTE.b	%01010101
      7  f0d2		       77		      .BYTE.b	%01110111
      8  f0d3
      9  f0d3		       11		      .BYTE.b	%00010001
     10  f0d4		       11		      .BYTE.b	%00010001
     11  f0d5		       11		      .BYTE.b	%00010001
     12  f0d6		       11		      .BYTE.b	%00010001
     13  f0d7		       11		      .BYTE.b	%00010001
     14  f0d8
     15  f0d8		       77		      .BYTE.b	%01110111
     16  f0d9		       11		      .BYTE.b	%00010001
     17  f0da		       77		      .BYTE.b	%01110111
     18  f0db		       44		      .BYTE.b	%01000100
     19  f0dc		       77		      .BYTE.b	%01110111
     20  f0dd
     21  f0dd		       77		      .BYTE.b	%01110111
     22  f0de		       11		      .BYTE.b	%00010001
     23  f0df		       33		      .BYTE.b	%00110011
     24  f0e0		       11		      .BYTE.b	%00010001
     25  f0e1		       77		      .BYTE.b	%01110111
     26  f0e2
     27  f0e2		       55		      .BYTE.b	%01010101
     28  f0e3		       55		      .BYTE.b	%01010101
     29  f0e4		       77		      .BYTE.b	%01110111
     30  f0e5		       11		      .BYTE.b	%00010001
     31  f0e6		       11		      .BYTE.b	%00010001
     32  f0e7
     33  f0e7		       77		      .BYTE.b	%01110111
     34  f0e8		       44		      .BYTE.b	%01000100
     35  f0e9		       77		      .BYTE.b	%01110111
     36  f0ea		       11		      .BYTE.b	%00010001
     37  f0eb		       77		      .BYTE.b	%01110111
     38  f0ec
     39  f0ec		       77		      .BYTE.b	%01110111
     40  f0ed		       44		      .BYTE.b	%01000100
     41  f0ee		       77		      .BYTE.b	%01110111
     42  f0ef		       55		      .BYTE.b	%01010101
     43  f0f0		       77		      .BYTE.b	%01110111
     44  f0f1
     45  f0f1		       77		      .BYTE.b	%01110111
     46  f0f2		       11		      .BYTE.b	%00010001
     47  f0f3		       22		      .BYTE.b	%00100010
     48  f0f4		       22		      .BYTE.b	%00100010
     49  f0f5		       22		      .BYTE.b	%00100010
     50  f0f6
     51  f0f6		       77		      .BYTE.b	%01110111
     52  f0f7		       55		      .BYTE.b	%01010101
     53  f0f8		       77		      .BYTE.b	%01110111
     54  f0f9		       55		      .BYTE.b	%01010101
     55  f0fa		       77		      .BYTE.b	%01110111
     56  f0fb
     57  f0fb		       77		      .BYTE.b	%01110111
     58  f0fc		       55		      .BYTE.b	%01010101
     59  f0fd		       77		      .BYTE.b	%01110111
     60  f0fe		       11		      .BYTE.b	%00010001
     61  f0ff		       11		      .BYTE.b	%00010001
------- FILE kernel.asm
------- FILE objects/score_digits_flip.asm LEVEL 2 PASS 2
      0  f100					      include	"objects/score_digits_flip.asm"
      1  f100				   ScoreDigitsFlip
      2  f100
      3  f100		       ee		      .BYTE.b	%11101110
      4  f101		       aa		      .BYTE.b	%10101010
      5  f102		       aa		      .BYTE.b	%10101010
      6  f103		       aa		      .BYTE.b	%10101010
      7  f104		       ee		      .BYTE.b	%11101110
      8  f105
      9  f105		       88		      .BYTE.b	%10001000
     10  f106		       88		      .BYTE.b	%10001000
     11  f107		       88		      .BYTE.b	%10001000
     12  f108		       88		      .BYTE.b	%10001000
     13  f109		       88		      .BYTE.b	%10001000
     14  f10a
     15  f10a		       ee		      .BYTE.b	%11101110
     16  f10b		       88		      .BYTE.b	%10001000
     17  f10c		       ee		      .BYTE.b	%11101110
     18  f10d		       22		      .BYTE.b	%00100010
     19  f10e		       ee		      .BYTE.b	%11101110
     20  f10f
     21  f10f		       ee		      .BYTE.b	%11101110
     22  f110		       88		      .BYTE.b	%10001000
     23  f111		       cc		      .BYTE.b	%11001100
     24  f112		       88		      .BYTE.b	%10001000
     25  f113		       ee		      .BYTE.b	%11101110
     26  f114
     27  f114		       aa		      .BYTE.b	%10101010
     28  f115		       aa		      .BYTE.b	%10101010
     29  f116		       ee		      .BYTE.b	%11101110
     30  f117		       88		      .BYTE.b	%10001000
     31  f118		       88		      .BYTE.b	%10001000
     32  f119
     33  f119		       ee		      .BYTE.b	%11101110
     34  f11a		       22		      .BYTE.b	%00100010
     35  f11b		       ee		      .BYTE.b	%11101110
     36  f11c		       88		      .BYTE.b	%10001000
     37  f11d		       ee		      .BYTE.b	%11101110
     38  f11e
     39  f11e		       ee		      .BYTE.b	%11101110
     40  f11f		       22		      .BYTE.b	%00100010
     41  f120		       ee		      .BYTE.b	%11101110
     42  f121		       aa		      .BYTE.b	%10101010
     43  f122		       ee		      .BYTE.b	%11101110
     44  f123
     45  f123		       ee		      .BYTE.b	%11101110
     46  f124		       88		      .BYTE.b	%10001000
     47  f125		       44		      .BYTE.b	%01000100
     48  f126		       44		      .BYTE.b	%01000100
     49  f127		       44		      .BYTE.b	%01000100
     50  f128
     51  f128		       ee		      .BYTE.b	%11101110
     52  f129		       aa		      .BYTE.b	%10101010
     53  f12a		       ee		      .BYTE.b	%11101110
     54  f12b		       aa		      .BYTE.b	%10101010
     55  f12c		       ee		      .BYTE.b	%11101110
     56  f12d
     57  f12d		       ee		      .BYTE.b	%11101110
     58  f12e		       aa		      .BYTE.b	%10101010
     59  f12f		       ee		      .BYTE.b	%11101110
     60  f130		       88		      .BYTE.b	%10001000
     61  f131		       88		      .BYTE.b	%10001000
------- FILE kernel.asm
------- FILE objects/score_label.asm LEVEL 2 PASS 2
      0  f132					      include	"objects/score_label.asm"
      1  f132				   ScoreLabel
      2  f132
      3  f132		       20		      .BYTE.b	%00100000
      4  f133		       50		      .BYTE.b	%01010000
      5  f134		       ee		      .BYTE.b	%11101110
      6  f135		       00		      .BYTE.b	%00000000
      7  f136		       57		      .BYTE.b	%01010111
      8  f137		       00		      .BYTE.b	%00000000
      9  f138
     10  f138		       20		      .BYTE.b	%00100000
     11  f139		       50		      .BYTE.b	%01010000
     12  f13a		       4a		      .BYTE.b	%01001010
     13  f13b		       00		      .BYTE.b	%00000000
     14  f13c		       55		      .BYTE.b	%01010101
     15  f13d		       00		      .BYTE.b	%00000000
     16  f13e
     17  f13e		       20		      .BYTE.b	%00100000
     18  f13f		       50		      .BYTE.b	%01010000
     19  f140		       4e		      .BYTE.b	%01001110
     20  f141		       00		      .BYTE.b	%00000000
     21  f142		       77		      .BYTE.b	%01110111
     22  f143		       00		      .BYTE.b	%00000000
     23  f144
     24  f144		       20		      .BYTE.b	%00100000
     25  f145		       50		      .BYTE.b	%01010000
     26  f146		       42		      .BYTE.b	%01000010
     27  f147		       00		      .BYTE.b	%00000000
     28  f148		       54		      .BYTE.b	%01010100
     29  f149		       00		      .BYTE.b	%00000000
     30  f14a
     31  f14a		       e0		      .BYTE.b	%11100000
     32  f14b		       20		      .BYTE.b	%00100000
     33  f14c		       42		      .BYTE.b	%01000010
     34  f14d		       00		      .BYTE.b	%00000000
     35  f14e		       54		      .BYTE.b	%01010100
     36  f14f		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    160  f150
------- FILE objects/web_image.asm LEVEL 2 PASS 2
      0  f150					      include	"objects/web_image.asm"
      1  f150				   WebImagePF0
      2  f150		       00		      .BYTE.b	%00000000
      3  f151		       00		      .BYTE.b	%00000000
      4  f152		       00		      .BYTE.b	%00000000
      5  f153		       00		      .BYTE.b	%00000000
      6  f154		       00		      .BYTE.b	%00000000
      7  f155		       00		      .BYTE.b	%00000000
      8  f156		       00		      .BYTE.b	%00000000
      9  f157		       00		      .BYTE.b	%00000000
     10  f158		       30		      .BYTE.b	%00110000
     11  f159		       e0		      .BYTE.b	%11100000
     12  f15a		       20		      .BYTE.b	%00100000
     13  f15b		       40		      .BYTE.b	%01000000
     14  f15c		       40		      .BYTE.b	%01000000
     15  f15d		       80		      .BYTE.b	%10000000
     16  f15e		       80		      .BYTE.b	%10000000
     17  f15f		       40		      .BYTE.b	%01000000
     18  f160		       40		      .BYTE.b	%01000000
     19  f161		       20		      .BYTE.b	%00100000
     20  f162		       e0		      .BYTE.b	%11100000
     21  f163		       30		      .BYTE.b	%00110000
     22  f164		       00		      .BYTE.b	%00000000
     23  f165		       00		      .BYTE.b	%00000000
     24  f166		       00		      .BYTE.b	%00000000
     25  f167		       00		      .BYTE.b	%00000000
     26  f168		       00		      .BYTE.b	%00000000
     27  f169		       00		      .BYTE.b	%00000000
     28  f16a		       00		      .BYTE.b	%00000000
     29  f16b		       00		      .BYTE.b	%00000000
     30  f16c
     31  f16c				   WebImagePF1
     32  f16c		       02		      .BYTE.b	%00000010
     33  f16d		       01		      .BYTE.b	%00000001
     34  f16e		       00		      .BYTE.b	%00000000
     35  f16f		       00		      .BYTE.b	%00000000
     36  f170		       01		      .BYTE.b	%00000001
     37  f171		       01		      .BYTE.b	%00000001
     38  f172		       02		      .BYTE.b	%00000010
     39  f173		       0c		      .BYTE.b	%00001100
     40  f174		       30		      .BYTE.b	%00110000
     41  f175		       c0		      .BYTE.b	%11000000
     42  f176		       38		      .BYTE.b	%00111000
     43  f177		       07		      .BYTE.b	%00000111
     44  f178		       00		      .BYTE.b	%00000000
     45  f179		       00		      .BYTE.b	%00000000
     46  f17a		       00		      .BYTE.b	%00000000
     47  f17b		       00		      .BYTE.b	%00000000
     48  f17c		       07		      .BYTE.b	%00000111
     49  f17d		       38		      .BYTE.b	%00111000
     50  f17e		       c0		      .BYTE.b	%11000000
     51  f17f		       30		      .BYTE.b	%00110000
     52  f180		       0c		      .BYTE.b	%00001100
     53  f181		       02		      .BYTE.b	%00000010
     54  f182		       01		      .BYTE.b	%00000001
     55  f183		       01		      .BYTE.b	%00000001
     56  f184		       00		      .BYTE.b	%00000000
     57  f185		       00		      .BYTE.b	%00000000
     58  f186		       01		      .BYTE.b	%00000001
     59  f187		       02		      .BYTE.b	%00000010
     60  f188
     61  f188				   WebImagePF2
     62  f188		       08		      .BYTE.b	%00001000
     63  f189		       04		      .BYTE.b	%00000100
     64  f18a		       03		      .BYTE.b	%00000011
     65  f18b		       3f		      .BYTE.b	%00111111
     66  f18c		       c2		      .BYTE.b	%11000010
     67  f18d		       04		      .BYTE.b	%00000100
     68  f18e		       08		      .BYTE.b	%00001000
     69  f18f		       08		      .BYTE.b	%00001000
     70  f190		       10		      .BYTE.b	%00010000
     71  f191		       20		      .BYTE.b	%00100000
     72  f192		       20		      .BYTE.b	%00100000
     73  f193		       41		      .BYTE.b	%01000001
     74  f194		       8e		      .BYTE.b	%10001110
     75  f195		       f0		      .BYTE.b	%11110000
     76  f196		       f0		      .BYTE.b	%11110000
     77  f197		       8e		      .BYTE.b	%10001110
     78  f198		       41		      .BYTE.b	%01000001
     79  f199		       20		      .BYTE.b	%00100000
     80  f19a		       20		      .BYTE.b	%00100000
     81  f19b		       10		      .BYTE.b	%00010000
     82  f19c		       08		      .BYTE.b	%00001000
     83  f19d		       08		      .BYTE.b	%00001000
     84  f19e		       04		      .BYTE.b	%00000100
     85  f19f		       c2		      .BYTE.b	%11000010
     86  f1a0		       3f		      .BYTE.b	%00111111
     87  f1a1		       03		      .BYTE.b	%00000011
     88  f1a2		       04		      .BYTE.b	%00000100
     89  f1a3		       08		      .BYTE.b	%00001000
------- FILE kernel.asm
    162  f1a4
------- FILE objects/spider_sprite.asm LEVEL 2 PASS 2
      0  f1a4					      include	"objects/spider_sprite.asm"
      1  f1a4				   SpiderSprite
      2  f1a4
      3  f1a4		       99		      .BYTE.b	%10011001
      4  f1a5		       bd		      .BYTE.b	%10111101
      5  f1a6		       bd		      .BYTE.b	%10111101
      6  f1a7		       bd		      .BYTE.b	%10111101
      7  f1a8		       7e		      .BYTE.b	%01111110
      8  f1a9		       3c		      .BYTE.b	%00111100
      9  f1aa		       18		      .BYTE.b	%00011000
     10  f1ab		       3c		      .BYTE.b	%00111100
     11  f1ac		       3c		      .BYTE.b	%00111100
     12  f1ad		       7e		      .BYTE.b	%01111110
     13  f1ae		       99		      .BYTE.b	%10011001
     14  f1af		       99		      .BYTE.b	%10011001
     15  f1b0		       bd		      .BYTE.b	%10111101
     16  f1b1		       db		      .BYTE.b	%11011011
     17  f1b2		       bd		      .BYTE.b	%10111101
     18  f1b3		       99		      .BYTE.b	%10011001
     19  f1b4
     20  f1b4		       c7		      .BYTE.b	%11000111
     21  f1b5		       c7		      .BYTE.b	%11000111
     22  f1b6		       28		      .BYTE.b	%00101000
     23  f1b7		       28		      .BYTE.b	%00101000
     24  f1b8		       3a		      .BYTE.b	%00111010
     25  f1b9		       7a		      .BYTE.b	%01111010
     26  f1ba		       fd		      .BYTE.b	%11111101
     27  f1bb		       ff		      .BYTE.b	%11111111
     28  f1bc		       ff		      .BYTE.b	%11111111
     29  f1bd		       fd		      .BYTE.b	%11111101
     30  f1be		       7a		      .BYTE.b	%01111010
     31  f1bf		       3a		      .BYTE.b	%00111010
     32  f1c0		       28		      .BYTE.b	%00101000
     33  f1c1		       28		      .BYTE.b	%00101000
     34  f1c2		       c7		      .BYTE.b	%11000111
     35  f1c3		       c7		      .BYTE.b	%11000111
     36  f1c4
     37  f1c4		       99		      .BYTE.b	%10011001
     38  f1c5		       bd		      .BYTE.b	%10111101
     39  f1c6		       db		      .BYTE.b	%11011011
     40  f1c7		       bd		      .BYTE.b	%10111101
     41  f1c8		       99		      .BYTE.b	%10011001
     42  f1c9		       99		      .BYTE.b	%10011001
     43  f1ca		       7e		      .BYTE.b	%01111110
     44  f1cb		       3c		      .BYTE.b	%00111100
     45  f1cc		       3c		      .BYTE.b	%00111100
     46  f1cd		       18		      .BYTE.b	%00011000
     47  f1ce		       3c		      .BYTE.b	%00111100
     48  f1cf		       7e		      .BYTE.b	%01111110
     49  f1d0		       bd		      .BYTE.b	%10111101
     50  f1d1		       bd		      .BYTE.b	%10111101
     51  f1d2		       bd		      .BYTE.b	%10111101
     52  f1d3		       99		      .BYTE.b	%10011001
------- FILE kernel.asm
    164  f1d4
------- FILE objects/swatter_sprite.asm LEVEL 2 PASS 2
      0  f1d4					      include	"objects/swatter_sprite.asm"
      1  f1d4				   SwatterSprite
      2  f1d4
      3  f1d4		       18		      .BYTE.b	%00011000
      4  f1d5		       34		      .BYTE.b	%00110100
      5  f1d6		       2c		      .BYTE.b	%00101100
      6  f1d7		       34		      .BYTE.b	%00110100
      7  f1d8		       6a		      .BYTE.b	%01101010
      8  f1d9		       56		      .BYTE.b	%01010110
      9  f1da		       6a		      .BYTE.b	%01101010
     10  f1db		       56		      .BYTE.b	%01010110
     11  f1dc		       ab		      .BYTE.b	%10101011
     12  f1dd		       d5		      .BYTE.b	%11010101
     13  f1de		       ab		      .BYTE.b	%10101011
     14  f1df		       d5		      .BYTE.b	%11010101
     15  f1e0		       ab		      .BYTE.b	%10101011
     16  f1e1		       d5		      .BYTE.b	%11010101
     17  f1e2		       ab		      .BYTE.b	%10101011
     18  f1e3		       d5		      .BYTE.b	%11010101
     19  f1e4		       6a		      .BYTE.b	%01101010
     20  f1e5		       56		      .BYTE.b	%01010110
     21  f1e6		       3c		      .BYTE.b	%00111100
     22  f1e7		       3c		      .BYTE.b	%00111100
------- FILE kernel.asm
    166  f1e8
------- FILE logo_image.asm LEVEL 2 PASS 2
      0  f1e8					      include	"logo_image.asm"
      1  f1e8				   LogoImage1
      2  f1e8		       03		      .BYTE.b	%00000011
      3  f1e9		       03		      .BYTE.b	%00000011
      4  f1ea		       13		      .BYTE.b	%00010011
      5  f1eb		       33		      .BYTE.b	%00110011
      6  f1ec		       63		      .BYTE.b	%01100011
      7  f1ed		       c3		      .BYTE.b	%11000011
      8  f1ee		       c3		      .BYTE.b	%11000011
      9  f1ef		       63		      .BYTE.b	%01100011
     10  f1f0		       33		      .BYTE.b	%00110011
     11  f1f1		       13		      .BYTE.b	%00010011
     12  f1f2		       03		      .BYTE.b	%00000011
     13  f1f3		       03		      .BYTE.b	%00000011
     14  f1f4
     15  f1f4				   LogoImage2
     16  f1f4		       83		      .BYTE.b	%10000011
     17  f1f5		       c7		      .BYTE.b	%11000111
     18  f1f6		       ef		      .BYTE.b	%11101111
     19  f1f7		       6e		      .BYTE.b	%01101110
     20  f1f8		       6c		      .BYTE.b	%01101100
     21  f1f9		       6c		      .BYTE.b	%01101100
     22  f1fa		       6c		      .BYTE.b	%01101100
     23  f1fb		       6c		      .BYTE.b	%01101100
     24  f1fc		       6e		      .BYTE.b	%01101110
     25  f1fd		       ef		      .BYTE.b	%11101111
     26  f1fe		       c7		      .BYTE.b	%11000111
     27  f1ff		       83		      .BYTE.b	%10000011
     28  f200
     29  f200				   LogoImage3
     30  f200		       8f		      .BYTE.b	%10001111
     31  f201		       cf		      .BYTE.b	%11001111
     32  f202		       ef		      .BYTE.b	%11101111
     33  f203		       6d		      .BYTE.b	%01101101
     34  f204		       2c		      .BYTE.b	%00101100
     35  f205		       0c		      .BYTE.b	%00001100
     36  f206		       0c		      .BYTE.b	%00001100
     37  f207		       4c		      .BYTE.b	%01001100
     38  f208		       6d		      .BYTE.b	%01101101
     39  f209		       ef		      .BYTE.b	%11101111
     40  f20a		       cf		      .BYTE.b	%11001111
     41  f20b		       8f		      .BYTE.b	%10001111
     42  f20c
     43  f20c				   LogoImage4
     44  f20c		       00		      .BYTE.b	%00000000
     45  f20d		       01		      .BYTE.b	%00000001
     46  f20e		       13		      .BYTE.b	%00010011
     47  f20f		       33		      .BYTE.b	%00110011
     48  f210		       63		      .BYTE.b	%01100011
     49  f211		       c3		      .BYTE.b	%11000011
     50  f212		       c3		      .BYTE.b	%11000011
     51  f213		       63		      .BYTE.b	%01100011
     52  f214		       33		      .BYTE.b	%00110011
     53  f215		       13		      .BYTE.b	%00010011
     54  f216		       01		      .BYTE.b	%00000001
     55  f217		       00		      .BYTE.b	%00000000
------- FILE kernel.asm
    168  f218
    169  f218				   InitSystem
    170  f218
    171  f218				   .init_clean
    172  f218							; Resets RAM, TIA registers, and CPU registers
      0  f218					      CLEAN_START
      1  f218		       78		      sei
      2  f219		       d8		      cld
      3  f21a
      4  f21a		       a2 00		      ldx	#0
      5  f21c		       8a		      txa
      6  f21d		       a8		      tay
      7  f21e		       ca	   .CLEAR_STACK dex
      8  f21f		       9a		      txs
      9  f220		       48		      pha
     10  f221		       d0 fb		      bne	.CLEAR_STACK
     11  f223
    174  f223
    175  f223				   .init_tia
    176  f223							; Define default TIA register values
    177  f223
    178  f223							; Initialize copies
    179  f223							;    lda #0
    180  f223							;    sta CtrlPf
    181  f223							;    sta NuSiz0
    182  f223							;    sta NuSiz1
    183  f223
    184  f223							; Set background color
    185  f223							;    lda #$00	      ; Black
    186  f223							;    sta COLUBK
    187  f223
    188  f223							; Set the playfield and player color
    189  f223							;    lda #$0E	      ; White
    190  f223							;    sta COLUPF
    191  f223							;    sta COLUP0
    192  f223							;    sta COLUP1
    193  f223
    194  f223							; Playfield Control
    195  f223							;    lda #%00000001  ; 1 for mirroring
    196  f223							;    sta CtrlPf
    197  f223							;    sta CTRLPF
    198  f223
    199  f223							; Disable Game Elements
    200  f223							;    lda #$00
    201  f223							;    sta ENABL       ; Turn off ball
    202  f223							;    sta ENAM0       ; Turn off player 1 missile
    203  f223							;    sta ENAM1       ; Turn off player 2 missile
    204  f223							;    sta GRP0	      ; Turn off player 1
    205  f223							;    sta GRP1	      ; Turn off player 2
    206  f223
    207  f223							; Empty playfield
    208  f223							;    lda #%00000000
    209  f223							;    sta PF0
    210  f223							;    sta PF1
    211  f223							;    sta PF2
    212  f223
    213  f223				   .init_seed
    214  f223							; Seed the random number generator
    215  f223		       ad 84 02 	      lda	INTIM	; Unknown value
    216  f226		       85 84		      sta	Rand8	; Use as seed
    217  f228		       49 ff		      eor	#$FF	; Flip bits
    218  f22a		       85 85		      sta	Rand16	; Just in case INTIM was 0
    219  f22c
    220  f22c				   .init_game
    221  f22c
    222  f22c		       20 94 f2 	      jsr	LogoInit
    223  f22f
    224  f22f							;=======================================
    225  f22f							; Game Kernel
    226  f22f							;=======================================
    227  f22f
    228  f22f				   Main
    229  f22f
    230  f22f		       20 3e f2 	      jsr	VerticalSync
    231  f232		       20 57 f2 	      jsr	VerticalBlank
    232  f235		       20 6a f2 	      jsr	Kernel
    233  f238		       20 71 f2 	      jsr	OverScan
    234  f23b		       4c 2f f2 	      jmp	Main
    235  f23e
    236  f23e				   VerticalSync
    237  f23e
    238  f23e		       a9 00		      lda	#0
    239  f240		       85 01		      sta	VBLANK
    240  f242
    241  f242							; Turn on Vertical Sync signal and setup timer
    242  f242		       a9 02		      lda	#2
    243  f244		       85 00		      sta	VSYNC
    244  f246
    245  f246							; Increment frame count and reduce frame counter
    246  f246		       e6 8c		      inc	Frame
    247  f248		       c6 8d		      dec	FrameTimer
    248  f24a		       c6 8e		      dec	FrameTimer+1
    249  f24c
    250  f24c							; VSYNCH signal scanlines
    251  f24c					      REPEAT	#KERNEL_VSYNC
    252  f24c		       85 02		      sta	WSYNC
    251  f24c					      REPEND
    252  f24e		       85 02		      sta	WSYNC
    251  f24e					      REPEND
    252  f250		       85 02		      sta	WSYNC
    253  f252					      REPEND
    254  f252
    255  f252							; Turn off Vertical Sync signal
    256  f252		       a9 00		      lda	#0
    257  f254		       85 00		      sta	VSYNC
    258  f256
    259  f256				   .vsync_return
    260  f256		       60		      rts
    261  f257
    262  f257				   VerticalBlank
    263  f257							; Setup Timer
    264  f257		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    265  f259		       8d 96 02 	      sta	TIM64T
    266  f25c
    267  f25c				   .vblank_logic
    268  f25c							; Perform Game Logic
    269  f25c		       20 67 f2 	      jsr	.vblank_logic_call_ptr
    270  f25f
    271  f25f				   .vblank_loop
    272  f25f							; WSYNC until Timer is complete
    273  f25f		       85 02		      sta	WSYNC
    274  f261		       ad 84 02 	      lda	INTIM
    275  f264		       d0 f9		      bne	.vblank_loop
    276  f266
    277  f266				   .vblank_return
    278  f266		       60		      rts
    279  f267
    280  f267				   .vblank_logic_call_ptr
    281  f267		       6c 86 00 	      jmp	(VBlankPtr)
    282  f26a
    283  f26a				   Kernel
    284  f26a
    285  f26a							; Perform Selected Kernel
    286  f26a		       20 6e f2 	      jsr	.kernel_call_ptr
    287  f26d		       60		      rts
    288  f26e
    289  f26e				   .kernel_call_ptr
    290  f26e		       6c 88 00 	      jmp	(KernelPtr)
    291  f271
    292  f271				   OverScan
    293  f271
    294  f271							; End of screen, enter blanking
    295  f271		       a9 42		      lda	#%01000010
    296  f273		       85 01		      sta	VBLANK
    297  f275
    298  f275							; Setup Timer
    299  f275		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    300  f277		       8d 96 02 	      sta	TIM64T
    301  f27a
    302  f27a				   .overscan_reset
    303  f27a							; Check for reset switch
    304  f27a		       ad 82 02 	      lda	SWCHB
    305  f27d		       4a		      lsr		; Push D0 to carry (C)
    306  f27e		       b0 06		      bcs	.overscan_logic	; If D0 is set, no reset
    307  f280
    308  f280							; Perform reset
    309  f280		       20 94 f2 	      jsr	LogoInit	; No need for logic
    310  f283		       4c 89 f2 	      jmp	.overscan_loop
    311  f286
    312  f286				   .overscan_logic
    313  f286							; Perform OverScan Logic
    314  f286		       20 91 f2 	      jsr	.overscan_logic_call_ptr
    315  f289
    316  f289				   .overscan_loop
    317  f289							; WSYNC until Timer is complete
    318  f289		       85 02		      sta	WSYNC
    319  f28b		       ad 84 02 	      lda	INTIM
    320  f28e		       d0 f9		      bne	.overscan_loop
    321  f290
    322  f290				   .overscan_return
    323  f290		       60		      rts
    324  f291
    325  f291				   .overscan_logic_call_ptr
    326  f291		       6c 8a 00 	      jmp	(OverScanPtr)
    327  f294
    328  f294							;================
    329  f294							; State Code
    330  f294							;================
    331  f294
------- FILE logo.asm LEVEL 2 PASS 2
      0  f294					      include	"logo.asm"
      1  f294							;================
      2  f294							; Constants
      3  f294							;================
      4  f294
      5  f294		       00 8c	   LOGO_FRAMES =	140
      6  f294
      7  f294		       00 00	   LOGO_BG_COLOR =	#$00
      8  f294		       00 c6	   LOGO_FG_COLOR =	#$C6
      9  f294		       00 00	   LOGO_BG_BW_COLOR =	#$00
     10  f294		       00 0e	   LOGO_FG_BW_COLOR =	#$0E
     11  f294
     12  f294		       00 0c	   LOGO_IMAGE_SIZE =	12
     13  f294		       00 05	   LOGO_IMAGE_LINE_SIZE =	5
     14  f294		       00 3c	   LOGO_IMAGE_LINES =	LOGO_IMAGE_SIZE*LOGO_IMAGE_LINE_SIZE
     15  f294		       00 42	   LOGO_IMAGE_PADDING =	#(KERNEL_SCANLINES-LOGO_IMAGE_LINES)/2
     16  f294		       00 38	   LOGO_IMAGE_ANIM_PADDING =	#LOGO_IMAGE_PADDING-10	; The extra 10 is for processing overflow
     17  f294		       00 06	   LOGO_IMAGE_ANIM_SPEED =	#6
     18  f294
     19  f294				   LogoInit
     20  f294
     21  f294							; Setup logic and kernel
      0  f294					      SET_POINTER	VBlankPtr, LogoVerticalBlank
      1  f294				   .POINTER   SET	VBlankPtr
      2  f294				   .ADDRESS   SET	LogoVerticalBlank
      3  f294
      4  f294		       a9 bf		      LDA	#<.ADDRESS
      5  f296		       85 86		      STA	.POINTER
      6  f298		       a9 f2		      LDA	#>.ADDRESS
      7  f29a		       85 87		      STA	.POINTER+1
      8  f29c
      0  f29c					      SET_POINTER	KernelPtr, LogoKernel
      1  f29c				   .POINTER   SET	KernelPtr
      2  f29c				   .ADDRESS   SET	LogoKernel
      3  f29c
      4  f29c		       a9 f3		      LDA	#<.ADDRESS
      5  f29e		       85 88		      STA	.POINTER
      6  f2a0		       a9 f2		      LDA	#>.ADDRESS
      7  f2a2		       85 89		      STA	.POINTER+1
      8  f2a4
      0  f2a4					      SET_POINTER	OverScanPtr, LogoOverScan
      1  f2a4				   .POINTER   SET	OverScanPtr
      2  f2a4				   .ADDRESS   SET	LogoOverScan
      3  f2a4
      4  f2a4		       a9 c3		      LDA	#<.ADDRESS
      5  f2a6		       85 8a		      STA	.POINTER
      6  f2a8		       a9 f2		      LDA	#>.ADDRESS
      7  f2aa		       85 8b		      STA	.POINTER+1
      8  f2ac
     25  f2ac
     26  f2ac							; Clean audio
     27  f2ac		       a9 00		      lda	#0
     28  f2ae		       85 19		      sta	AUDV0
     29  f2b0		       85 1a		      sta	AUDV1
     30  f2b2
     31  f2b2							; Set initial button state
     32  f2b2							;    lda #0
     33  f2b2		       85 8f		      sta	InputState
     34  f2b4
     35  f2b4							; Setup frame counters
     36  f2b4							;    lda #0
     37  f2b4		       85 8c		      sta	Frame
     38  f2b6		       a9 8c		      lda	#LOGO_FRAMES
     39  f2b8		       85 8d		      sta	FrameTimer
     40  f2ba
     41  f2ba							; Setup Image Animation
     42  f2ba		       a9 0b		      lda	#LOGO_IMAGE_SIZE-1
     43  f2bc		       85 a1		      sta	WebIndex
     44  f2be
     45  f2be		       60		      rts
     46  f2bf
     47  f2bf				   LogoVerticalBlank
     48  f2bf		       20 c7 f2 	      jsr	LogoAnimation
     49  f2c2		       60		      rts
     50  f2c3
     51  f2c3				   LogoOverScan
     52  f2c3		       20 d8 f2 	      jsr	LogoState
     53  f2c6		       60		      rts
     54  f2c7
     55  f2c7				   LogoAnimation
     56  f2c7		       a5 8c		      lda	Frame
     57  f2c9		       c9 06		      cmp	#LOGO_IMAGE_ANIM_SPEED
     58  f2cb		       d0 0a		      bne	.logo_animation_return
     59  f2cd
     60  f2cd		       a9 00		      lda	#0
     61  f2cf		       85 8c		      sta	Frame
     62  f2d1
     63  f2d1		       a6 a1		      ldx	WebIndex
     64  f2d3		       f0 02		      beq	.logo_animation_return
     65  f2d5
     66  f2d5							; Add another visible line
     67  f2d5		       c6 a1		      dec	WebIndex
     68  f2d7
     69  f2d7				   .logo_animation_return
     70  f2d7		       60		      rts
     71  f2d8
     72  f2d8				   LogoState
     73  f2d8		       a5 8d		      lda	FrameTimer
     74  f2da		       f0 13		      beq	.logo_state_next
     75  f2dc
     76  f2dc		       a2 01		      ldx	#1
     77  f2de				   .logo_state
     78  f2de							; Check if Fire Button on controller 0 or 1 is released
     79  f2de		       b5 0c		      lda	INPT4,x
     80  f2e0		       30 05		      bmi	.logo_state_check
     81  f2e2
     82  f2e2				   .logo_state_on
     83  f2e2		       a9 01		      lda	#1
     84  f2e4		       95 8f		      sta	InputState,x
     85  f2e6		       60		      rts
     86  f2e7
     87  f2e7				   .logo_state_check
     88  f2e7		       b5 8f		      lda	InputState,x
     89  f2e9		       d0 04		      bne	.logo_state_next
     90  f2eb
     91  f2eb				   .logo_state_loop
     92  f2eb		       ca		      dex
     93  f2ec		       10 f0		      bpl	.logo_state
     94  f2ee		       60		      rts
     95  f2ef
     96  f2ef				   .logo_state_next
     97  f2ef							; Button is released or timer runs out, load title screen
     98  f2ef		       20 80 f3 	      jsr	TitleInit
     99  f2f2		       60		      rts
    100  f2f3
    101  f2f3				   LogoKernel
    102  f2f3
    103  f2f3							; Playfield Control
    104  f2f3		       a9 01		      lda	#%00000001	; Mirror
    105  f2f5							;sta CtrlPf
    106  f2f5		       85 0a		      sta	CTRLPF
    107  f2f7
    108  f2f7							; Load Colors
    109  f2f7		       ad 82 02 	      lda	SWCHB
    110  f2fa		       29 08		      and	#%00001000
    111  f2fc		       f0 07		      beq	.logo_kernel_bw
    112  f2fe
    113  f2fe				   .logo_kernel_color
    114  f2fe		       a2 00		      ldx	#LOGO_BG_COLOR
    115  f300		       a0 c6		      ldy	#LOGO_FG_COLOR
    116  f302		       4c 09 f3 	      jmp	.logo_kernel_set
    117  f305
    118  f305				   .logo_kernel_bw
    119  f305		       a2 00		      ldx	#LOGO_BG_BW_COLOR
    120  f307		       a0 0e		      ldy	#LOGO_FG_BW_COLOR
    121  f309
    122  f309				   .logo_kernel_set
    123  f309		       86 09		      stx	COLUBK
    124  f30b		       84 08		      sty	COLUPF
    125  f30d
    126  f30d				   .logo_kernel_start
    127  f30d
    128  f30d							; Turn on display
    129  f30d		       a9 00		      lda	#0
    130  f30f		       85 01		      sta	VBLANK
    131  f311
    132  f311		       a4 a1		      ldy	WebIndex
    133  f313		       d0 06		      bne	.logo_kernel_top_anim_padding
    134  f315
    135  f315				   .logo_kernel_top_padding
    136  f315							; Top Padding
    137  f315		       20 63 f3 	      jsr	LogoPadding
    138  f318		       4c 28 f3 	      jmp	.logo_kernel_image
    139  f31b
    140  f31b				   .logo_kernel_top_anim_padding
    141  f31b		       20 73 f3 	      jsr	LogoAnimPadding
    142  f31e
    143  f31e				   .logo_kernel_image_animation_start
    144  f31e		       a2 05		      ldx	#LOGO_IMAGE_LINE_SIZE
    145  f320
    146  f320				   .logo_kernel_image_animation_loop
    147  f320		       85 02		      sta	WSYNC
    148  f322		       ca		      dex
    149  f323		       d0 fb		      bne	.logo_kernel_image_animation_loop
    150  f325
    151  f325		       88		      dey
    152  f326		       10 f6		      bpl	.logo_kernel_image_animation_start
    153  f328
    154  f328				   .logo_kernel_image
    155  f328
    156  f328		       a2 0b		      ldx	#LOGO_IMAGE_SIZE-1
    157  f32a		       a0 03		      ldy	#LOGO_IMAGE_LINE_SIZE-2
    158  f32c							; The extra 2 on line size is for processing overflow
    159  f32c
    160  f32c							;dex
    161  f32c		       e4 a1		      cpx	WebIndex
    162  f32e		       90 2f		      bcc	.logo_kernel_bottom_padding
    163  f330
    164  f330				   .logo_kernel_image_line
    165  f330		       85 02		      sta	WSYNC
    166  f332
    167  f332		       bd e8 f1 	      lda	LogoImage1,x
    168  f335		       85 0e		      sta	PF1
    169  f337		       bd f4 f1 	      lda	LogoImage2,x
    170  f33a		       85 0f		      sta	PF2
    171  f33c
      0  f33c					      sleep	26
      1  f33c				   .CYCLES    SET	26
      2  f33c
      3  f33c				  -	      IF	.CYCLES < 2
      4  f33c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f33c				  -	      ERR
      6  f33c					      ENDIF
      7  f33c
      8  f33c				  -	      IF	.CYCLES & 1
      9  f33c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f33c				  -	      nop	0
     11  f33c				  -	      ELSE
     12  f33c				  -	      bit	VSYNC
     13  f33c				  -	      ENDIF
     14  f33c				  -.CYCLES    SET	.CYCLES - 3
     15  f33c					      ENDIF
     16  f33c
     17  f33c					      REPEAT	.CYCLES / 2
     18  f33c		       ea		      nop
     17  f33c					      REPEND
     18  f33d		       ea		      nop
     17  f33d					      REPEND
     18  f33e		       ea		      nop
     17  f33e					      REPEND
     18  f33f		       ea		      nop
     17  f33f					      REPEND
     18  f340		       ea		      nop
     17  f340					      REPEND
     18  f341		       ea		      nop
     17  f341					      REPEND
     18  f342		       ea		      nop
     17  f342					      REPEND
     18  f343		       ea		      nop
     17  f343					      REPEND
     18  f344		       ea		      nop
     17  f344					      REPEND
     18  f345		       ea		      nop
     17  f345					      REPEND
     18  f346		       ea		      nop
     17  f346					      REPEND
     18  f347		       ea		      nop
     17  f347					      REPEND
     18  f348		       ea		      nop
     19  f349					      REPEND
    173  f349
    174  f349		       bd 00 f2 	      lda	LogoImage3,x
    175  f34c		       85 0f		      sta	PF2
    176  f34e		       bd 0c f2 	      lda	LogoImage4,x
    177  f351		       85 0e		      sta	PF1
    178  f353
    179  f353		       88		      dey
    180  f354		       d0 da		      bne	.logo_kernel_image_line
    181  f356
    182  f356		       a0 05		      ldy	#LOGO_IMAGE_LINE_SIZE
    183  f358
    184  f358		       e4 a1		      cpx	WebIndex
    185  f35a		       90 03		      bcc	.logo_kernel_bottom_padding
    186  f35c
    187  f35c		       ca		      dex
    188  f35d		       10 d1		      bpl	.logo_kernel_image_line
    189  f35f
    190  f35f				   .logo_kernel_bottom_padding
    191  f35f							; Bottom Padding
    192  f35f		       20 63 f3 	      jsr	LogoPadding
    193  f362
    194  f362				   .logo_kernel_image_return
    195  f362		       60		      rts
    196  f363
    197  f363				   LogoPadding
    198  f363		       a9 00		      lda	#0
    199  f365		       85 0d		      sta	PF0
    200  f367		       85 0e		      sta	PF1
    201  f369		       85 0f		      sta	PF2
    202  f36b
    203  f36b		       a2 42		      ldx	#LOGO_IMAGE_PADDING
    204  f36d				   .logo_padding_loop
    205  f36d		       85 02		      sta	WSYNC
    206  f36f		       ca		      dex
    207  f370		       d0 fb		      bne	.logo_padding_loop
    208  f372
    209  f372		       60		      rts
    210  f373
    211  f373				   LogoAnimPadding
    212  f373		       a9 00		      lda	#0
    213  f375		       85 0d		      sta	PF0
    214  f377		       85 0e		      sta	PF1
    215  f379		       85 0f		      sta	PF2
    216  f37b
    217  f37b		       a2 38		      ldx	#LOGO_IMAGE_ANIM_PADDING
    218  f37d		       4c 6d f3 	      jmp	.logo_padding_loop
------- FILE kernel.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f380					      include	"title.asm"
      1  f380							;================
      2  f380							; Constants
      3  f380							;================
      4  f380
      5  f380		       00 00	   TITLE_BG_COLOR =	#$00
      6  f380		       00 06	   TITLE_WEB_COLOR =	#$06
      7  f380		       00 0e	   TITLE_LABEL_COLOR =	#$0E
      8  f380		       00 56	   TITLE_SPIDER_COLOR =	#$56
      9  f380		       00 0e	   TITLE_SPIDER_BW_COLOR =	#$0E
     10  f380
     11  f380		       00 04	   TITLE_AUDIO_0_TONE =	4
     12  f380		       00 01	   TITLE_AUDIO_0_VOLUME =	1
     13  f380		       00 05	   TITLE_AUDIO_1_VOLUME =	5
     14  f380		       00 10	   TITLE_AUDIO_LENGTH =	16
     15  f380		       00 09	   TITLE_AUDIO_STEP =	9
     16  f380
     17  f380		       00 0c	   TITLE_FRAME_TOP_LINES =	12
     18  f380		       00 05	   TITLE_FRAME_BOT_LINES =	5
     19  f380		       00 07	   TITLE_LABEL_LINE =	7
     20  f380
     21  f380		       00 10	   TITLE_GAP_SIZE =	#16
     22  f380
     23  f380		       00 26	   TITLE_SPIDER_POS_X =	#(KERNEL_WIDTH/4)-(8*3)-(8*2)-2
     24  f380		       00 09	   TITLE_SPIDER_SIZE =	#9
     25  f380		       00 04	   TITLE_SPIDER_LINE_SIZE =	#4
     26  f380
     27  f380				   TitleInit
     28  f380
     29  f380							; Setup logic and kernel
      0  f380					      SET_POINTER	VBlankPtr, TitleVerticalBlank
      1  f380				   .POINTER   SET	VBlankPtr
      2  f380				   .ADDRESS   SET	TitleVerticalBlank
      3  f380
      4  f380		       a9 c7		      LDA	#<.ADDRESS
      5  f382		       85 86		      STA	.POINTER
      6  f384		       a9 f3		      LDA	#>.ADDRESS
      7  f386		       85 87		      STA	.POINTER+1
      8  f388
      0  f388					      SET_POINTER	KernelPtr, TitleKernel
      1  f388				   .POINTER   SET	KernelPtr
      2  f388				   .ADDRESS   SET	TitleKernel
      3  f388
      4  f388		       a9 fb		      LDA	#<.ADDRESS
      5  f38a		       85 88		      STA	.POINTER
      6  f38c		       a9 f4		      LDA	#>.ADDRESS
      7  f38e		       85 89		      STA	.POINTER+1
      8  f390
      0  f390					      SET_POINTER	OverScanPtr, TitleOverScan
      1  f390				   .POINTER   SET	OverScanPtr
      2  f390				   .ADDRESS   SET	TitleOverScan
      3  f390
      4  f390		       a9 88		      LDA	#<.ADDRESS
      5  f392		       85 8a		      STA	.POINTER
      6  f394		       a9 f4		      LDA	#>.ADDRESS
      7  f396		       85 8b		      STA	.POINTER+1
      8  f398
     33  f398
     34  f398							; Load audio settings
     35  f398
     36  f398							; Melody Line
     37  f398		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     38  f39a		       85 15		      sta	AUDC0
     39  f39c							;lda #TITLE_AUDIO_0_VOLUME
     40  f39c							;sta AUDV0
     41  f39c
     42  f39c							; Make it so that we play the first note immediately
     43  f39c		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     44  f39e		       85 91		      sta	AudioStep
     45  f3a0		       a9 01		      lda	#1
     46  f3a2		       85 8d		      sta	FrameTimer
     47  f3a4
     48  f3a4							; Setup Spider Sprite
      0  f3a4					      SET_POINTER	SpiderPtr, TitleSpider
      1  f3a4				   .POINTER   SET	SpiderPtr
      2  f3a4				   .ADDRESS   SET	TitleSpider
      3  f3a4
      4  f3a4		       a9 aa		      LDA	#<.ADDRESS
      5  f3a6		       85 a4		      STA	.POINTER
      6  f3a8		       a9 f0		      LDA	#>.ADDRESS
      7  f3aa		       85 a5		      STA	.POINTER+1
      8  f3ac
     50  f3ac
     51  f3ac		       a9 16		      lda	#%00010110	; Triple Sprite and 2 clock size missle0
     52  f3ae		       85 04		      sta	NUSIZ0
     53  f3b0		       a9 06		      lda	#%00000110	; Triple Sprite
     54  f3b2		       85 05		      sta	NUSIZ1
     55  f3b4
     56  f3b4		       a9 ff		      lda	#$FF	; Reflect P1
     57  f3b6		       85 0c		      sta	REFP1
     58  f3b8		       a9 00		      lda	#0	; No reflect
     59  f3ba		       85 0b		      sta	REFP0
     60  f3bc
     61  f3bc							; Drums and Bass
     62  f3bc							;lda #0
     63  f3bc							;sta AUDC1
     64  f3bc		       85 1a		      sta	AUDV1
     65  f3be
     66  f3be							;lda #0
     67  f3be		       85 ab		      sta	SpiderDrawPos	; Initialize animation state
     68  f3c0
     69  f3c0							; Disable at start
     70  f3c0							;lda #0
     71  f3c0		       85 1d		      sta	ENAM0
     72  f3c2
     73  f3c2							; Set initial button state
     74  f3c2							;lda #0
     75  f3c2		       85 8f		      sta	InputState
     76  f3c4
     77  f3c4							; Set initial select state
     78  f3c4		       85 82		      sta	Temp+2
     79  f3c6
     80  f3c6		       60		      rts
     81  f3c7
     82  f3c7				   TitleVerticalBlank
     83  f3c7
     84  f3c7							; Refresh random values
     85  f3c7		       20 13 f0 	      jsr	Random
     86  f3ca
     87  f3ca		       20 d4 f3 	      jsr	TitlePosition
     88  f3cd		       20 ee f3 	      jsr	TitleAnimation
     89  f3d0		       20 6b f4 	      jsr	TitleColor
     90  f3d3
     91  f3d3		       60		      rts
     92  f3d4
     93  f3d4				   TitlePosition
     94  f3d4
     95  f3d4							; Position Spider
     96  f3d4		       a2 00		      ldx	#0	; Object (player0)
     97  f3d6		       a9 26		      lda	#TITLE_SPIDER_POS_X	; X Position
     98  f3d8		       20 00 f0 	      jsr	PosObject
     99  f3db
    100  f3db		       a2 01		      ldx	#1	; Object (player1)
    101  f3dd		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    102  f3df		       20 00 f0 	      jsr	PosObject
    103  f3e2
    104  f3e2							; Position Web Line
    105  f3e2		       a2 02		      ldx	#2	; Object (missle0)
    106  f3e4		       a9 2e		      lda	#(TITLE_SPIDER_POS_X+8)	; X Position
    107  f3e6		       20 00 f0 	      jsr	PosObject
    108  f3e9
    109  f3e9		       85 02		      sta	WSYNC
    110  f3eb		       85 2a		      sta	HMOVE
    111  f3ed
    112  f3ed		       60		      rts
    113  f3ee
    114  f3ee				   TitleAnimation
    115  f3ee
    116  f3ee		       ad 82 02 	      lda	SWCHB
    117  f3f1		       29 02		      and	#%00000010
    118  f3f3		       d0 09		      bne	.title_animation_state_check
    119  f3f5
    120  f3f5		       a5 82		      lda	Temp+2
    121  f3f7
    122  f3f7				   .title_animation_state_on
    123  f3f7		       09 40		      ora	#%01000000
    124  f3f9		       85 82		      sta	Temp+2
    125  f3fb		       4c 11 f4 	      jmp	.title_animation_load
    126  f3fe
    127  f3fe				   .title_animation_state_check
    128  f3fe		       24 82		      bit	Temp+2
    129  f400		       50 0f		      bvc	.title_animation_load
    130  f402
    131  f402		       a5 82		      lda	Temp+2
    132  f404		       29 bf		      and	#%10111111
    133  f406
    134  f406				   .title_animation_state_swap
    135  f406		       10 05		      bpl	.title_animation_state_bug
    136  f408
    137  f408				   .title_animation_state_spider
    138  f408		       29 7f		      and	#%01111111
    139  f40a		       4c 0f f4 	      jmp	.title_animation_state_set
    140  f40d
    141  f40d				   .title_animation_state_bug
    142  f40d		       09 80		      ora	#%10000000
    143  f40f
    144  f40f				   .title_animation_state_set
    145  f40f		       85 82		      sta	Temp+2
    146  f411
    147  f411				   .title_animation_load
    148  f411
    149  f411		       24 82		      bit	Temp+2
    150  f413		       30 2b		      bmi	.title_animation_bug
    151  f415
    152  f415				   .title_animation_spider
    153  f415
    154  f415		       a5 91		      lda	AudioStep
    155  f417		       f0 0d		      beq	.title_animation_spider_1
    156  f419		       c9 04		      cmp	#4
    157  f41b		       f0 16		      beq	.title_animation_spider_2
    158  f41d		       c9 09		      cmp	#9
    159  f41f		       f0 05		      beq	.title_animation_spider_1
    160  f421		       c9 0c		      cmp	#12
    161  f423		       f0 0e		      beq	.title_animation_spider_2
    162  f425		       60		      rts
    163  f426
    164  f426				   .title_animation_spider_1
      0  f426					      SET_POINTER	SpiderPtr, TitleSpider
      1  f426				   .POINTER   SET	SpiderPtr
      2  f426				   .ADDRESS   SET	TitleSpider
      3  f426
      4  f426		       a9 aa		      LDA	#<.ADDRESS
      5  f428		       85 a4		      STA	.POINTER
      6  f42a		       a9 f0		      LDA	#>.ADDRESS
      7  f42c		       85 a5		      STA	.POINTER+1
      8  f42e
    166  f42e		       a9 00		      lda	#0
    167  f430		       4c 68 f4 	      jmp	.title_animation_return
    168  f433
    169  f433				   .title_animation_spider_2
      0  f433					      SET_POINTER	SpiderPtr, TitleSpider+#TITLE_SPIDER_SIZE
      1  f433				   .POINTER   SET	SpiderPtr
      2  f433				   .ADDRESS   SET	TitleSpider+#TITLE_SPIDER_SIZE
      3  f433
      4  f433		       a9 b3		      LDA	#<.ADDRESS
      5  f435		       85 a4		      STA	.POINTER
      6  f437		       a9 f0		      LDA	#>.ADDRESS
      7  f439		       85 a5		      STA	.POINTER+1
      8  f43b
    171  f43b		       a9 01		      lda	#1
    172  f43d		       4c 68 f4 	      jmp	.title_animation_return
    173  f440
    174  f440				   .title_animation_bug
    175  f440
    176  f440		       a5 91		      lda	AudioStep
    177  f442		       f0 0d		      beq	.title_animation_bug_1
    178  f444		       c9 04		      cmp	#4
    179  f446		       f0 16		      beq	.title_animation_bug_2
    180  f448		       c9 09		      cmp	#9
    181  f44a		       f0 05		      beq	.title_animation_bug_1
    182  f44c		       c9 0c		      cmp	#12
    183  f44e		       f0 0e		      beq	.title_animation_bug_2
    184  f450		       60		      rts
    185  f451
    186  f451				   .title_animation_bug_1
      0  f451					      SET_POINTER	SpiderPtr, TitleBug
      1  f451				   .POINTER   SET	SpiderPtr
      2  f451				   .ADDRESS   SET	TitleBug
      3  f451
      4  f451		       a9 bc		      LDA	#<.ADDRESS
      5  f453		       85 a4		      STA	.POINTER
      6  f455		       a9 f0		      LDA	#>.ADDRESS
      7  f457		       85 a5		      STA	.POINTER+1
      8  f459
    188  f459		       a9 00		      lda	#0
    189  f45b		       4c 68 f4 	      jmp	.title_animation_return
    190  f45e
    191  f45e				   .title_animation_bug_2
      0  f45e					      SET_POINTER	SpiderPtr, TitleBug+#TITLE_SPIDER_SIZE
      1  f45e				   .POINTER   SET	SpiderPtr
      2  f45e				   .ADDRESS   SET	TitleBug+#TITLE_SPIDER_SIZE
      3  f45e
      4  f45e		       a9 c5		      LDA	#<.ADDRESS
      5  f460		       85 a4		      STA	.POINTER
      6  f462		       a9 f0		      LDA	#>.ADDRESS
      7  f464		       85 a5		      STA	.POINTER+1
      8  f466
    193  f466		       a9 01		      lda	#1
    194  f468
    195  f468				   .title_animation_return
    196  f468		       85 ab		      sta	SpiderDrawPos
    197  f46a		       60		      rts
    198  f46b
    199  f46b				   TitleColor
    200  f46b
    201  f46b							; Load Colors
    202  f46b		       a9 00		      lda	#TITLE_BG_COLOR
    203  f46d		       85 09		      sta	COLUBK
    204  f46f		       a9 06		      lda	#TITLE_WEB_COLOR
    205  f471		       85 08		      sta	COLUPF
    206  f473
    207  f473							; Check b/w
    208  f473		       ad 82 02 	      lda	SWCHB
    209  f476		       29 08		      and	#%00001000
    210  f478		       f0 07		      beq	.title_bw
    211  f47a
    212  f47a				   .title_color
    213  f47a		       a9 56		      lda	#TITLE_SPIDER_COLOR
    214  f47c		       85 06		      sta	COLUP0
    215  f47e		       85 07		      sta	COLUP1
    216  f480
    217  f480		       60		      rts
    218  f481
    219  f481				   .title_bw
    220  f481							; Load B/W Colors
    221  f481		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    222  f483		       85 06		      sta	COLUP0
    223  f485		       85 07		      sta	COLUP1
    224  f487
    225  f487		       60		      rts
    226  f488
    227  f488				   TitleOverScan
    228  f488		       20 8f f4 	      jsr	TitleAudio
    229  f48b		       20 ca f4 	      jsr	TitleState
    230  f48e		       60		      rts
    231  f48f
    232  f48f				   TitleAudio
    233  f48f
    234  f48f		       a6 8d		      ldx	FrameTimer
    235  f491		       d0 36		      bne	.title_audio_return
    236  f493
    237  f493							; Reset Timer
    238  f493		       a2 09		      ldx	#TITLE_AUDIO_STEP
    239  f495		       86 8d		      stx	FrameTimer
    240  f497
    241  f497				   .title_audio_play
    242  f497
    243  f497							; Increment melody position
    244  f497		       a4 91		      ldy	AudioStep
    245  f499		       c8		      iny
    246  f49a
    247  f49a							; Check if we're at the end of the melody
    248  f49a		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
    249  f49c		       d0 02		      bne	.title_audio_play_note
    250  f49e
    251  f49e							; Loop our audio step
    252  f49e		       a0 00		      ldy	#0
    253  f4a0
    254  f4a0				   .title_audio_play_note
    255  f4a0
    256  f4a0							; Save current position
    257  f4a0		       84 91		      sty	AudioStep
    258  f4a2
    259  f4a2				   .title_audio_play_melody
    260  f4a2							; Basic Melody Line
    261  f4a2		       b9 e1 f5 	      lda	TitleAudio0,y
    262  f4a5		       30 09		      bmi	.title_audio_play_melody_mute
    263  f4a7
    264  f4a7		       85 17		      sta	AUDF0
    265  f4a9		       a9 01		      lda	#TITLE_AUDIO_0_VOLUME
    266  f4ab		       85 19		      sta	AUDV0
    267  f4ad
    268  f4ad		       4c b4 f4 	      jmp	.title_audio_play_rhythm
    269  f4b0
    270  f4b0				   .title_audio_play_melody_mute
    271  f4b0
    272  f4b0		       a9 00		      lda	#0
    273  f4b2		       85 19		      sta	AUDV0
    274  f4b4
    275  f4b4				   .title_audio_play_rhythm
    276  f4b4
    277  f4b4							; Drums and Bass
    278  f4b4		       b9 f1 f5 	      lda	TitleTone1,y
    279  f4b7		       30 0c		      bmi	.title_audio_play_rhythm_mute
    280  f4b9
    281  f4b9		       85 16		      sta	AUDC1
    282  f4bb		       b9 01 f6 	      lda	TitleAudio1,y
    283  f4be		       85 18		      sta	AUDF1
    284  f4c0		       a9 05		      lda	#TITLE_AUDIO_1_VOLUME
    285  f4c2		       85 1a		      sta	AUDV1
    286  f4c4
    287  f4c4		       60		      rts
    288  f4c5
    289  f4c5				   .title_audio_play_rhythm_mute
    290  f4c5
    291  f4c5		       a9 00		      lda	#0
    292  f4c7							;sta AUDF1
    293  f4c7							;sta AUDC1
    294  f4c7		       85 1a		      sta	AUDV1
    295  f4c9
    296  f4c9				   .title_audio_return
    297  f4c9		       60		      rts
    298  f4ca
    299  f4ca				   TitleState
    300  f4ca
    301  f4ca		       a2 01		      ldx	#1
    302  f4cc
    303  f4cc				   .title_state
    304  f4cc							; Check if fire button on controller is released
    305  f4cc		       b5 0c		      lda	INPT4,x
    306  f4ce		       30 0c		      bmi	.title_state_check
    307  f4d0
    308  f4d0				   .title_state_on
    309  f4d0		       a9 40		      lda	#%01000000
    310  f4d2		       e0 01		      cpx	#1
    311  f4d4		       d0 02		      bne	.title_state_on_set
    312  f4d6				   .title_state_on_1
    313  f4d6		       a9 80		      lda	#%10000000
    314  f4d8				   .title_state_on_set
    315  f4d8		       05 8f		      ora	InputState
    316  f4da		       85 8f		      sta	InputState
    317  f4dc
    318  f4dc				   .title_state_check
    319  f4dc		       8a		      txa
    320  f4dd		       d0 07		      bne	.title_state_check_1
    321  f4df				   .title_state_check_0
    322  f4df		       24 8f		      bit	InputState
    323  f4e1		       70 0b		      bvs	.title_state_type_0
    324  f4e3		       4c ea f4 	      jmp	.title_state_dec
    325  f4e6				   .title_state_check_1
    326  f4e6		       24 8f		      bit	InputState
    327  f4e8		       30 09		      bmi	.title_state_type_1
    328  f4ea
    329  f4ea				   .title_state_dec
    330  f4ea		       ca		      dex
    331  f4eb		       10 df		      bpl	.title_state
    332  f4ed
    333  f4ed		       60		      rts
    334  f4ee
    335  f4ee				   .title_state_type_0
    336  f4ee		       a9 40		      lda	#%01000000
    337  f4f0		       4c f5 f4 	      jmp	.title_state_type_set
    338  f4f3				   .title_state_type_1
    339  f4f3		       a9 80		      lda	#%10000000
    340  f4f5				   .title_state_type_set
    341  f4f5		       85 93		      sta	GameType
    342  f4f7				   .title_state_next
    343  f4f7							; Button is released, load up game
    344  f4f7		       20 45 fd 	      jsr	GameInit
    345  f4fa
    346  f4fa				   .title_state_return
    347  f4fa		       60		      rts
    348  f4fb
    349  f4fb				   TitleKernel
    350  f4fb
    351  f4fb							; Playfield Control
    352  f4fb		       a9 00		      lda	#%00000000	; No mirroring
    353  f4fd		       85 0a		      sta	CTRLPF
    354  f4ff
    355  f4ff							; Turn on display
    356  f4ff							;lda #0
    357  f4ff		       85 01		      sta	VBLANK
    358  f501
    359  f501		       85 02		      sta	WSYNC
    360  f503
    361  f503				   TitleFrameTopDraw
    362  f503
    363  f503							; Start Counters
    364  f503		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    365  f505		       a0 00		      ldy	#0	; Image Counter
    366  f507
    367  f507				   .title_frame_top
    368  f507
    369  f507							; 76 machine cycles per scanline
    370  f507		       85 02		      sta	WSYNC
    371  f509
    372  f509				   .title_frame_top_load		; 66 cycles
    373  f509
    374  f509							; First half of image
    375  f509		       b9 44 f0 	      lda	TitleFrameTop,y	; 5
    376  f50c		       85 0d		      sta	PF0	; 4
    377  f50e		       b9 45 f0 	      lda	TitleFrameTop+1,y	; 5
    378  f511		       85 0e		      sta	PF1	; 4
    379  f513		       b9 46 f0 	      lda	TitleFrameTop+2,y	; 5
    380  f516		       85 0f		      sta	PF2	; 4
    381  f518
      0  f518					      sleep	6
      1  f518				   .CYCLES    SET	6
      2  f518
      3  f518				  -	      IF	.CYCLES < 2
      4  f518				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f518				  -	      ERR
      6  f518					      ENDIF
      7  f518
      8  f518				  -	      IF	.CYCLES & 1
      9  f518				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f518				  -	      nop	0
     11  f518				  -	      ELSE
     12  f518				  -	      bit	VSYNC
     13  f518				  -	      ENDIF
     14  f518				  -.CYCLES    SET	.CYCLES - 3
     15  f518					      ENDIF
     16  f518
     17  f518					      REPEAT	.CYCLES / 2
     18  f518		       ea		      nop
     17  f518					      REPEND
     18  f519		       ea		      nop
     17  f519					      REPEND
     18  f51a		       ea		      nop
     19  f51b					      REPEND
    383  f51b
    384  f51b							; Second half of image
    385  f51b		       b9 47 f0 	      lda	TitleFrameTop+3,y	; 5
    386  f51e		       85 0d		      sta	PF0	; 4
    387  f520		       b9 48 f0 	      lda	TitleFrameTop+4,y	; 5
    388  f523		       85 0e		      sta	PF1	; 4
    389  f525		       b9 49 f0 	      lda	TitleFrameTop+5,y	; 5
    390  f528		       85 0f		      sta	PF2	; 4
    391  f52a
    392  f52a				   .title_frame_top_index		; 4 cycles
    393  f52a
    394  f52a		       ca		      dex		; 2
    395  f52b		       d0 da		      bne	.title_frame_top	; 2
    396  f52d
    397  f52d				   .title_frame_top_index_next		; 6 cycles
    398  f52d
    399  f52d							; Restore scanline counter
    400  f52d		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    401  f52f
    402  f52f		       98		      tya		; 2
    403  f530		       18		      clc		; 2
    404  f531		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    405  f533		       a8		      tay		; 2
    406  f534
    407  f534		       c0 2a		      cpy	#TITLE_LABEL_LINE*KERNEL_IMAGE_FULL_DATA	; 2
    408  f536		       d0 08		      bne	.title_frame_top_label_color_skip	; 2
    409  f538		       a9 0e		      lda	#TITLE_LABEL_COLOR	; 2
    410  f53a		       85 08		      sta	COLUPF	; 4
    411  f53c		       ea		      nop		; 2
    412  f53d		       4c 09 f5 	      jmp	.title_frame_top_load	; 3
    413  f540
    414  f540				   .title_frame_top_label_color_skip
    415  f540
    416  f540		       c0 48		      cpy	#TITLE_FRAME_TOP_LINES*KERNEL_IMAGE_FULL_DATA	; 2
    417  f542		       d0 c3		      bne	.title_frame_top	; 2
    418  f544
    419  f544				   .title_frame_top_clean
    420  f544
    421  f544							; Clear out playfield
    422  f544		       a9 00		      lda	#0
    423  f546		       85 0d		      sta	PF0
    424  f548		       85 0e		      sta	PF1
    425  f54a		       85 0f		      sta	PF2
    426  f54c
    427  f54c				   TitleWebDraw
    428  f54c
    429  f54c		       a9 00		      lda	#%00000000
    430  f54e		       24 82		      bit	Temp+2
    431  f550		       30 02		      bmi	.title_web_set
    432  f552				   .title_web_spider
    433  f552		       a9 02		      lda	#%00000010
    434  f554				   .title_web_set
    435  f554		       85 1d		      sta	ENAM0
    436  f556
    437  f556		       a9 06		      lda	#TITLE_WEB_COLOR
    438  f558		       85 06		      sta	COLUP0
    439  f55a
    440  f55a		       a2 10		      ldx	#TITLE_GAP_SIZE
    441  f55c				   .title_web_gap
    442  f55c		       ca		      dex
    443  f55d		       85 02		      sta	WSYNC
    444  f55f		       d0 fb		      bne	.title_web_gap
    445  f561
    446  f561				   TitleSpiderDraw
    447  f561
    448  f561		       a0 08		      ldy	#TITLE_SPIDER_SIZE-1
    449  f563
    450  f563		       a5 ab		      lda	SpiderDrawPos
    451  f565		       f0 0c		      beq	.title_spider_extra_web_disable
    452  f567
    453  f567				   .title_spider_extra_web_start
    454  f567		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    455  f569				   .title_spider_extra_web_loop
    456  f569		       85 02		      sta	WSYNC
    457  f56b		       ca		      dex
    458  f56c		       d0 fb		      bne	.title_spider_extra_web_loop
    459  f56e
    460  f56e		       88		      dey
    461  f56f		       c0 06		      cpy	#TITLE_SPIDER_SIZE-3
    462  f571		       d0 f4		      bne	.title_spider_extra_web_start
    463  f573
    464  f573				   .title_spider_extra_web_disable
    465  f573							;lda #0
    466  f573		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    467  f575
    468  f575		       85 02		      sta	WSYNC
    469  f577
    470  f577		       85 1d		      sta	ENAM0
    471  f579
    472  f579							; Check b/w
    473  f579		       ad 82 02 	      lda	SWCHB
    474  f57c		       29 08		      and	#%00001000
    475  f57e		       f0 05		      beq	.title_spider_bw
    476  f580				   .title_spider_color
    477  f580		       a9 56		      lda	#TITLE_SPIDER_COLOR
    478  f582		       4c 87 f5 	      jmp	.title_spider_color_set
    479  f585				   .title_spider_bw
    480  f585		       a9 0e		      lda	#TITLE_SPIDER_BW_COLOR
    481  f587				   .title_spider_color_set
    482  f587		       85 06		      sta	COLUP0
    483  f589
    484  f589				   .title_spider
    485  f589		       b1 a4		      lda	(SpiderPtr),y
    486  f58b		       85 1b		      sta	GRP0
    487  f58d		       85 1c		      sta	GRP1
    488  f58f
    489  f58f				   .title_spider_delay
    490  f58f		       ca		      dex
    491  f590		       85 02		      sta	WSYNC
    492  f592		       d0 fb		      bne	.title_spider_delay
    493  f594
    494  f594				   .title_spider_index
    495  f594		       a2 04		      ldx	#TITLE_SPIDER_LINE_SIZE
    496  f596		       88		      dey
    497  f597		       10 f0		      bpl	.title_spider
    498  f599
    499  f599				   .title_spider_clean
    500  f599
    501  f599							; Clear sprites
    502  f599		       a9 00		      lda	#0
    503  f59b		       85 1b		      sta	GRP0
    504  f59d		       85 1c		      sta	GRP1
    505  f59f
    506  f59f				   TitleFrameBottomDraw
    507  f59f
    508  f59f							; Load Frame Color
    509  f59f		       a9 06		      lda	#TITLE_WEB_COLOR
    510  f5a1		       85 08		      sta	COLUPF
    511  f5a3
    512  f5a3							; Start Counters
    513  f5a3		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; Scanline Counter
    514  f5a5		       a0 00		      ldy	#0	; Image Counter
    515  f5a7
    516  f5a7				   .title_frame_bottom
    517  f5a7
    518  f5a7							; 76 machine cycles per scanline
    519  f5a7		       85 02		      sta	WSYNC
    520  f5a9
    521  f5a9				   .title_frame_bottom_load		; 66 cycles
    522  f5a9
    523  f5a9							; First half of image
    524  f5a9		       b9 8c f0 	      lda	TitleFrameBottom,y	; 5
    525  f5ac		       85 0d		      sta	PF0	; 4
    526  f5ae		       b9 8d f0 	      lda	TitleFrameBottom+1,y	; 5
    527  f5b1		       85 0e		      sta	PF1	; 4
    528  f5b3		       b9 8e f0 	      lda	TitleFrameBottom+2,y	; 5
    529  f5b6		       85 0f		      sta	PF2	; 4
    530  f5b8
      0  f5b8					      sleep	6
      1  f5b8				   .CYCLES    SET	6
      2  f5b8
      3  f5b8				  -	      IF	.CYCLES < 2
      4  f5b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5b8				  -	      ERR
      6  f5b8					      ENDIF
      7  f5b8
      8  f5b8				  -	      IF	.CYCLES & 1
      9  f5b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5b8				  -	      nop	0
     11  f5b8				  -	      ELSE
     12  f5b8				  -	      bit	VSYNC
     13  f5b8				  -	      ENDIF
     14  f5b8				  -.CYCLES    SET	.CYCLES - 3
     15  f5b8					      ENDIF
     16  f5b8
     17  f5b8					      REPEAT	.CYCLES / 2
     18  f5b8		       ea		      nop
     17  f5b8					      REPEND
     18  f5b9		       ea		      nop
     17  f5b9					      REPEND
     18  f5ba		       ea		      nop
     19  f5bb					      REPEND
    532  f5bb
    533  f5bb							; Second half of image
    534  f5bb		       b9 8f f0 	      lda	TitleFrameBottom+3,y	; 5
    535  f5be		       85 0d		      sta	PF0	; 4
    536  f5c0		       b9 90 f0 	      lda	TitleFrameBottom+4,y	; 5
    537  f5c3		       85 0e		      sta	PF1	; 4
    538  f5c5		       b9 91 f0 	      lda	TitleFrameBottom+5,y	; 5
    539  f5c8		       85 0f		      sta	PF2	; 4
    540  f5ca
    541  f5ca				   .title_frame_bottom_index		; 4 cycles
    542  f5ca
    543  f5ca		       ca		      dex		; 2
    544  f5cb		       d0 da		      bne	.title_frame_bottom	; 2
    545  f5cd
    546  f5cd				   .title_frame_bottom_index_next		; 6 cycles
    547  f5cd
    548  f5cd							; Restore scanline counter
    549  f5cd		       a2 08		      ldx	#KERNEL_IMAGE_LINE	; 2
    550  f5cf
    551  f5cf		       98		      tya		; 2
    552  f5d0		       18		      clc		; 2
    553  f5d1		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA	; 2
    554  f5d3		       a8		      tay		; 2
    555  f5d4		       c0 1e		      cpy	#TITLE_FRAME_BOT_LINES*KERNEL_IMAGE_FULL_DATA
    556  f5d6		       d0 cf		      bne	.title_frame_bottom	; 2
    557  f5d8
    558  f5d8				   .title_frame_bottom_clean
    559  f5d8
    560  f5d8							; Clear out playfield
    561  f5d8		       a9 00		      lda	#0
    562  f5da		       85 0d		      sta	PF0
    563  f5dc		       85 0e		      sta	PF1
    564  f5de		       85 0f		      sta	PF2
    565  f5e0
    566  f5e0				   .title_kernel_return
    567  f5e0		       60		      rts
    568  f5e1
    569  f5e1				   TitleAudio0
    570  f5e1
    571  f5e1		       0f		      .BYTE.b	#15	; B
    572  f5e2		       13		      .BYTE.b	#19	; G
    573  f5e3		       17		      .BYTE.b	#23	; E
    574  f5e4		       13		      .BYTE.b	#19	; G
    575  f5e5		       0e		      .BYTE.b	#14	; C
    576  f5e6		       0e		      .BYTE.b	#14
    577  f5e7		       ff		      .BYTE.b	#-1
    578  f5e8		       ff		      .BYTE.b	#-1
    579  f5e9		       0c		      .BYTE.b	#12	; D
    580  f5ea		       13		      .BYTE.b	#19
    581  f5eb		       17		      .BYTE.b	#23
    582  f5ec		       13		      .BYTE.b	#19
    583  f5ed		       0e		      .BYTE.b	#14	; C
    584  f5ee		       0e		      .BYTE.b	#14
    585  f5ef		       ff		      .BYTE.b	#-1
    586  f5f0		       ff		      .BYTE.b	#-1
    587  f5f1
    588  f5f1				   TitleTone1
    589  f5f1
    590  f5f1		       0f		      .BYTE.b	#15	; Electronic Rumble
    591  f5f2		       ff		      .BYTE.b	#-1
    592  f5f3		       01		      .BYTE.b	#1	; Low Pure Tone
    593  f5f4		       01		      .BYTE.b	#1
    594  f5f5		       08		      .BYTE.b	#8	; White Noise
    595  f5f6		       01		      .BYTE.b	#1
    596  f5f7		       01		      .BYTE.b	#1
    597  f5f8		       ff		      .BYTE.b	#-1
    598  f5f9		       ff		      .BYTE.b	#-1
    599  f5fa		       0f		      .BYTE.b	#15
    600  f5fb		       ff		      .BYTE.b	#-1
    601  f5fc		       ff		      .BYTE.b	#-1
    602  f5fd		       08		      .BYTE.b	#8
    603  f5fe		       ff		      .BYTE.b	#-1
    604  f5ff		       01		      .BYTE.b	#1
    605  f600		       01		      .BYTE.b	#1
    606  f601
    607  f601				   TitleAudio1
    608  f601
    609  f601		       1d		      .BYTE.b	#29	; Kick
    610  f602		       ff		      .BYTE.b	#-1
    611  f603		       1f		      .BYTE.b	#31	; C
    612  f604		       1f		      .BYTE.b	#31
    613  f605		       07		      .BYTE.b	#7	; Snare
    614  f606		       1f		      .BYTE.b	#31
    615  f607		       1f		      .BYTE.b	#31
    616  f608		       ff		      .BYTE.b	#-1
    617  f609		       ff		      .BYTE.b	#-1
    618  f60a		       1d		      .BYTE.b	#29
    619  f60b		       ff		      .BYTE.b	#-1
    620  f60c		       ff		      .BYTE.b	#-1
    621  f60d		       07		      .BYTE.b	#7
    622  f60e		       ff		      .BYTE.b	#-1
    623  f60f		       17		      .BYTE.b	#23	; F
    624  f610		       18		      .BYTE.b	#24	; E
------- FILE kernel.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f611					      include	"game.asm"
      1  f611							;================
      2  f611							; Game
      3  f611							;================
      4  f611
      5  f611							; Constants
      6  f611
      7  f611		       00 02	   GAME_AUDIO_VOLUME =	2
      8  f611		       00 20	   GAME_AUDIO_LENGTH =	32
      9  f611		       00 09	   GAME_AUDIO_STEP =	9
     10  f611		       00 01	   GAME_AUDIO_OFFSET =	1
     11  f611		       00 06	   GAME_AUDIO_TONE =	6
     12  f611
     13  f611							; Object Code
     14  f611
------- FILE objects/level.asm LEVEL 3 PASS 2
      0  f611					      include	"objects/level.asm"
      1  f611							;======================
      2  f611							; Level Logic
      3  f611							;======================
      4  f611
      5  f611							; Constants
      6  f611
      7  f611		       00 14	   LEVELS     =	20
      8  f611
      9  f611				   LevelInit
     10  f611
     11  f611							; Set beginning level by difficulty switches treated as binary
     12  f611		       ad 82 02 	      lda	SWCHB
     13  f614					      REPEAT	6	; shift to 0-3
     14  f614		       4a		      lsr
     13  f614					      REPEND
     14  f615		       4a		      lsr
     13  f615					      REPEND
     14  f616		       4a		      lsr
     13  f616					      REPEND
     14  f617		       4a		      lsr
     13  f617					      REPEND
     14  f618		       4a		      lsr
     13  f618					      REPEND
     14  f619		       4a		      lsr
     15  f61a					      REPEND
     16  f61a		       18		      clc		; multiply by 5
     17  f61b		       85 80		      sta	Temp
     18  f61d		       0a		      asl
     19  f61e		       0a		      asl
     20  f61f		       65 80		      adc	Temp
     21  f621		       85 a0		      sta	LevelCurrent
     22  f623
     23  f623		       20 4d f6 	      jsr	LevelLoad
     24  f626
     25  f626		       60		      rts
     26  f627
     27  f627				   LevelUpdate
     28  f627
     29  f627							; Calculate Desired score: level*4+22
     30  f627		       a5 a0		      lda	LevelCurrent
     31  f629		       0a		      asl		; x2
     32  f62a		       0a		      asl		; x2
     33  f62b		       69 17		      adc	#23	; +23
     34  f62d
     35  f62d							; Check if score is high enough
     36  f62d		       c5 96		      cmp	ScoreValue+1
     37  f62f		       b0 18		      bcs	.level_update_return
     38  f631
     39  f631							; Check if we haven't reached the final level
     40  f631		       a5 a0		      lda	LevelCurrent
     41  f633		       c9 13		      cmp	#LEVELS-1
     42  f635		       90 09		      bcc	.level_update_next
     43  f637
     44  f637							; Force score to 99
     45  f637		       a9 63		      lda	#99
     46  f639		       85 96		      sta	ScoreValue+1
     47  f63b
     48  f63b							; Show Win Screen
     49  f63b		       38		      sec		; Define win
     50  f63c		       20 1c ff 	      jsr	OverInit
     51  f63f		       60		      rts
     52  f640
     53  f640				   .level_update_next
     54  f640
     55  f640							; Reset score
     56  f640		       a9 00		      lda	#0
     57  f642		       85 96		      sta	ScoreValue+1
     58  f644
     59  f644		       e6 a0		      inc	LevelCurrent
     60  f646		       20 4d f6 	      jsr	LevelLoad
     61  f649
     62  f649				   .level_update_return
     63  f649
     64  f649		       20 89 f6 	      jsr	LevelLoadColor	; Always update color (for b/w support)
     65  f64c
     66  f64c		       60		      rts
     67  f64d
     68  f64d				   LevelLoad
     69  f64d
     70  f64d							; Game Audio Step: 9-(level/4)
     71  f64d		       a5 a0		      lda	LevelCurrent
     72  f64f		       4a		      lsr		; /2
     73  f650		       4a		      lsr		; /2
     74  f651		       85 80		      sta	Temp
     75  f653		       a9 0a		      lda	#GAME_AUDIO_STEP+1
     76  f655		       18		      clc
     77  f656		       e5 80		      sbc	Temp
     78  f658		       85 94		      sta	GameAudioStep
     79  f65a
     80  f65a							; Bug Speed: level/4+2
     81  f65a		       a5 a0		      lda	LevelCurrent
     82  f65c		       4a		      lsr		; /2
     83  f65d		       4a		      lsr		; /2
     84  f65e		       69 02		      adc	#2
     85  f660		       85 b6		      sta	BugSpeed
     86  f662
     87  f662							; Swatter Wait Time Min (adds random 0-128): (20-level)*10
     88  f662		       a9 14		      lda	#20
     89  f664		       18		      clc
     90  f665		       e5 a0		      sbc	LevelCurrent
     91  f667		       0a		      asl		; x2
     92  f668		       85 80		      sta	Temp
     93  f66a		       0a		      asl		; x2
     94  f66b		       0a		      asl		; x2
     95  f66c		       65 80		      adc	Temp
     96  f66e		       85 c5		      sta	SwatterWaitTime
     97  f670
     98  f670							; Swatter Hold Time: 60-(level*2)
     99  f670
    100  f670		       a5 a0		      lda	LevelCurrent
    101  f672		       0a		      asl		; x2
    102  f673		       85 80		      sta	Temp
    103  f675		       a9 3c		      lda	#60
    104  f677		       18		      clc
    105  f678		       e5 80		      sbc	Temp
    106  f67a		       85 c6		      sta	SwatterHoldTime
    107  f67c
    108  f67c							; Swatter Hit Damage: level*3+$10
    109  f67c		       a5 a0		      lda	LevelCurrent
    110  f67e		       18		      clc
    111  f67f		       85 80		      sta	Temp
    112  f681		       0a		      asl		; x2
    113  f682		       65 80		      adc	Temp
    114  f684		       69 10		      adc	#$10
    115  f686		       85 c7		      sta	SwatterHitDamage
    116  f688
    117  f688		       60		      rts
    118  f689
    119  f689				   LevelLoadColor
    120  f689		       a4 a0		      ldy	LevelCurrent
    121  f68b
    122  f68b							; check b/w
    123  f68b		       ad 82 02 	      lda	SWCHB
    124  f68e		       29 08		      and	#%00001000
    125  f690		       f0 0b		      beq	.level_load_bw
    126  f692
    127  f692				   .level_load_color
    128  f692
    129  f692							; Background Color
    130  f692		       b9 a6 f6 	      lda	LevelDataBk,y
    131  f695		       85 a2		      sta	WebColor+0
    132  f697
    133  f697							; Web Color
    134  f697		       b9 ba f6 	      lda	LevelDataPf,y
    135  f69a		       85 a3		      sta	WebColor+1
    136  f69c
    137  f69c		       60		      rts
    138  f69d
    139  f69d				   .level_load_bw
    140  f69d
    141  f69d							; Background Color
    142  f69d		       a9 00		      lda	#WEB_BG_COLOR
    143  f69f		       85 a2		      sta	WebColor+0
    144  f6a1
    145  f6a1							; Web Color
    146  f6a1		       a9 02		      lda	#WEB_FG_COLOR
    147  f6a3		       85 a3		      sta	WebColor+1
    148  f6a5
    149  f6a5		       60		      rts
    150  f6a6
    151  f6a6							; Easy: 1-5
    152  f6a6							; Medium: 6-9
    153  f6a6							; Hard: 10-15
    154  f6a6							; Extreme: 16-19
    155  f6a6
    156  f6a6				   LevelDataBk		; Background Color
    157  f6a6		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)      Easy
    158  f6a7		       d0		      .BYTE.b	#$D0	; rgb(0, 21, 1)
    159  f6a8		       a0		      .BYTE.b	#$A0	; rgb(0, 31, 2) *
    160  f6a9		       c0		      .BYTE.b	#$C0	; rgb(0, 33, 2)
    161  f6aa		       b0		      .BYTE.b	#$B0	; rgb(0, 36, 3)
    162  f6ab		       90		      .BYTE.b	#$90	; rgb(0, 16, 58)    Medium
    163  f6ac		       80		      .BYTE.b	#$80	; rgb(0, 0, 114)
    164  f6ad		       60		      .BYTE.b	#$60	; rgb(13, 0, 130)
    165  f6ae		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    166  f6af		       10		      .BYTE.b	#$10	; rgb(25, 2, 0)     Hard
    167  f6b0		       e0		      .BYTE.b	#$E0	; rgb(26, 2, 0)
    168  f6b1		       20		      .BYTE.b	#$20	; rgb(55, 0, 0)
    169  f6b2		       f0		      .BYTE.b	#$F0	; rgb(56, 0, 0)
    170  f6b3		       40		      .BYTE.b	#$40	; rgb(68, 0, 8)
    171  f6b4		       30		      .BYTE.b	#$30	; rgb(71, 0, 0)
    172  f6b5		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)    Extreme
    173  f6b6		       50		      .BYTE.b	#$50	; rgb(45, 0, 74)
    174  f6b7		       08		      .BYTE.b	#$08	; rgb(126, 126, 126)
    175  f6b8		       0a		      .BYTE.b	#$0A	; rgb(162, 162, 162)
    176  f6b9		       0c		      .BYTE.b	#$0C	; rgb(199, 199, 199)
    177  f6ba
    178  f6ba				   LevelDataPf		; Web Color
    179  f6ba		       06		      .BYTE.b	#$06	; rgb(91, 91, 91)   Easy
    180  f6bb		       d4		      .BYTE.b	#$D4	; rgb(48, 89, 0)
    181  f6bc		       c4		      .BYTE.b	#$C4	; rgb(8, 107, 0)
    182  f6bd		       b4		      .BYTE.b	#$B4	; rgb(0, 112, 12)
    183  f6be		       a4		      .BYTE.b	#$A4	; rgb(0, 105, 87)
    184  f6bf		       92		      .BYTE.b	#$92	; rgb(0, 49, 110)   Medium
    185  f6c0		       84		      .BYTE.b	#$84	; rgb(3, 60, 214)
    186  f6c1		       94		      .BYTE.b	#$94	; rgb(0, 85, 162)
    187  f6c2		       64		      .BYTE.b	#$64	; rgb(85, 15, 201)
    188  f6c3		       22		      .BYTE.b	#$22	; rgb(94, 8, 0)     Hard
    189  f6c4		       32		      .BYTE.b	#$32	; rgb(115, 0, 0)
    190  f6c5		       42		      .BYTE.b	#$42	; rgb(111, 0, 31)
    191  f6c6		       44		      .BYTE.b	#$44	; rgb(150, 6, 64)
    192  f6c7		       34		      .BYTE.b	#$34	; rgb(152, 19, 0)
    193  f6c8		       24		      .BYTE.b	#$24	; rgb(131, 39, 0)
    194  f6c9		       52		      .BYTE.b	#$52	; rgb(87, 0, 103)  Extreme
    195  f6ca		       54		      .BYTE.b	#$54	; rgb(125, 5, 140)
    196  f6cb		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    197  f6cc		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
    198  f6cd		       00		      .BYTE.b	#$00	; rgb(0, 0, 0)
------- FILE game.asm
------- FILE objects/score.asm LEVEL 3 PASS 2
      0  f6ce					      include	"objects/score.asm"
      1  f6ce							;======================
      2  f6ce							; Score (playfield)
      3  f6ce							;======================
      4  f6ce
      5  f6ce							; Constants
      6  f6ce
      7  f6ce		       00 00	   SCORE_BG_COLOR =	#$00
      8  f6ce		       00 06	   SCORE_LABEL_COLOR =	#$06
      9  f6ce		       00 44	   SCORE_LEVEL_COLOR =	#$44
     10  f6ce		       00 c8	   SCORE_HEALTH_COLOR =	#$C8
     11  f6ce		       00 0e	   SCORE_LEVEL_BW_COLOR =	#$0E
     12  f6ce		       00 0e	   SCORE_HEALTH_BW_COLOR =	#$0E
     13  f6ce
     14  f6ce		       00 05	   SCORE_LABEL_SIZE =	5
     15  f6ce		       00 05	   SCORE_DIGIT_SIZE =	5
     16  f6ce		       00 02	   SCORE_LINE_SIZE =	2
     17  f6ce		       00 13	   SCORE_LINES =	SCORE_LABEL_SIZE+1+SCORE_DIGIT_SIZE*SCORE_LINE_SIZE+3
     18  f6ce
     19  f6ce							; Initialization
     20  f6ce
     21  f6ce				   ScoreInit
     22  f6ce
     23  f6ce							; Health Score
     24  f6ce		       a9 ff		      lda	#$ff
     25  f6d0		       85 95		      sta	ScoreValue+0
     26  f6d2
     27  f6d2							; Game Score
     28  f6d2		       a9 00		      lda	#0
     29  f6d4		       85 96		      sta	ScoreValue+1
     30  f6d6
     31  f6d6		       60		      rts
     32  f6d7
     33  f6d7							; Frame Update
     34  f6d7
     35  f6d7				   ScoreUpdate
     36  f6d7
     37  f6d7							; Current Level Digits
     38  f6d7		       a5 a0		      lda	LevelCurrent
     39  f6d9		       18		      clc
     40  f6da		       69 01		      adc	#1
     41  f6dc		       a0 00		      ldy	#0
     42  f6de		       20 11 f7 	      jsr	ScoreUpdateDigits
     43  f6e1
     44  f6e1							; Score Digits
     45  f6e1		       a5 96		      lda	ScoreValue+1
     46  f6e3		       a0 01		      ldy	#1
     47  f6e5		       20 11 f7 	      jsr	ScoreUpdateDigits
     48  f6e8
     49  f6e8							; Health Bar
     50  f6e8		       a5 95		      lda	ScoreValue+0
     51  f6ea		       f0 1c		      beq	.score_update_bar_empty
     52  f6ec
     53  f6ec					      REPEAT	4
     54  f6ec		       4a		      lsr
     53  f6ec					      REPEND
     54  f6ed		       4a		      lsr
     53  f6ed					      REPEND
     54  f6ee		       4a		      lsr
     53  f6ee					      REPEND
     54  f6ef		       4a		      lsr
     55  f6f0					      REPEND
     56  f6f0		       c9 08		      cmp	#8
     57  f6f2		       b0 09		      bcs	.score_update_bar_top
     58  f6f4
     59  f6f4				   .score_update_bar_bottom
     60  f6f4		       aa		      tax
     61  f6f5		       bd 3c f8 	      lda	ScoreBar,x
     62  f6f8		       a0 00		      ldy	#$00
     63  f6fa		       4c 0c f7 	      jmp	.score_update_bar_store
     64  f6fd
     65  f6fd				   .score_update_bar_top
     66  f6fd		       29 07		      and	#%00000111
     67  f6ff		       aa		      tax
     68  f700		       a9 7f		      lda	#$7f
     69  f702		       bc 44 f8 	      ldy	ScoreBarFlip,x
     70  f705		       4c 0c f7 	      jmp	.score_update_bar_store
     71  f708
     72  f708				   .score_update_bar_empty
     73  f708		       a9 00		      lda	#0
     74  f70a		       a0 00		      ldy	#0
     75  f70c
     76  f70c				   .score_update_bar_store
     77  f70c		       85 9e		      sta	ScoreBarGfx+0
     78  f70e		       84 9f		      sty	ScoreBarGfx+1
     79  f710
     80  f710				   .score_update_end
     81  f710		       60		      rts
     82  f711
     83  f711				   ScoreUpdateDigits		; Value in A, ScoreDigit index in Y
     84  f711
     85  f711		       84 83		      sty	Temp+3
     86  f713
     87  f713		       20 21 f0 	      jsr	BinBcdConvert
     88  f716
     89  f716							; Only use first byte
     90  f716		       8a		      txa
     91  f717		       29 0f		      and	#$0f
     92  f719		       a8		      tay
     93  f71a		       8a		      txa
     94  f71b		       29 f0		      and	#$f0
     95  f71d					      REPEAT	4
     96  f71d		       4a		      lsr
     95  f71d					      REPEND
     96  f71e		       4a		      lsr
     95  f71e					      REPEND
     96  f71f		       4a		      lsr
     95  f71f					      REPEND
     96  f720		       4a		      lsr
     97  f721					      REPEND
     98  f721		       aa		      tax
     99  f722
    100  f722							; Adjust index positions by multiplying by 5
    101  f722		       8a		      txa
    102  f723		       85 80		      sta	Temp
    103  f725		       0a		      asl
    104  f726		       0a		      asl
    105  f727		       65 80		      adc	Temp
    106  f729		       a6 83		      ldx	Temp+3
    107  f72b		       95 99		      sta	ScoreDigitTens,x
    108  f72d
    109  f72d		       98		      tya
    110  f72e		       85 80		      sta	Temp
    111  f730		       0a		      asl
    112  f731		       0a		      asl
    113  f732		       65 80		      adc	Temp
    114  f734		       a4 83		      ldy	Temp+3
    115  f736		       99 97 00 	      sta	ScoreDigitOnes,y
    116  f739
    117  f739		       60		      rts
    118  f73a
    119  f73a							; Draw loop (uses SCORE_LINES scanlines)
    120  f73a
    121  f73a				   ScoreDraw
    122  f73a
    123  f73a							; Load Colors
    124  f73a		       a9 00		      lda	#SCORE_BG_COLOR
    125  f73c		       85 09		      sta	COLUBK
    126  f73e		       a9 06		      lda	#SCORE_LABEL_COLOR
    127  f740		       85 08		      sta	COLUPF
    128  f742		       85 06		      sta	COLUP0
    129  f744		       85 07		      sta	COLUP1
    130  f746
    131  f746							; Set Non-Mirror
    132  f746		       a9 02		      lda	#%00000010
    133  f748		       85 0a		      sta	CTRLPF
    134  f74a
    135  f74a		       a2 00		      ldx	#0
    136  f74c				   .score_draw_label
    137  f74c
    138  f74c		       85 02		      sta	WSYNC
    139  f74e
    140  f74e							; First half of image
    141  f74e		       bd 32 f1 	      lda	ScoreLabel+0,x	; 4
    142  f751		       85 0d		      sta	PF0	; 3
    143  f753		       bd 33 f1 	      lda	ScoreLabel+1,x
    144  f756		       85 0e		      sta	PF1
    145  f758		       bd 34 f1 	      lda	ScoreLabel+2,x
    146  f75b		       85 0f		      sta	PF2
    147  f75d
      0  f75d					      sleep	8
      1  f75d				   .CYCLES    SET	8
      2  f75d
      3  f75d				  -	      IF	.CYCLES < 2
      4  f75d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f75d				  -	      ERR
      6  f75d					      ENDIF
      7  f75d
      8  f75d				  -	      IF	.CYCLES & 1
      9  f75d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f75d				  -	      nop	0
     11  f75d				  -	      ELSE
     12  f75d				  -	      bit	VSYNC
     13  f75d				  -	      ENDIF
     14  f75d				  -.CYCLES    SET	.CYCLES - 3
     15  f75d					      ENDIF
     16  f75d
     17  f75d					      REPEAT	.CYCLES / 2
     18  f75d		       ea		      nop
     17  f75d					      REPEND
     18  f75e		       ea		      nop
     17  f75e					      REPEND
     18  f75f		       ea		      nop
     17  f75f					      REPEND
     18  f760		       ea		      nop
     19  f761					      REPEND
    149  f761
    150  f761							; Second half of image
    151  f761							;lda ScoreLabel+3,x ; 4
    152  f761		       a9 00		      lda	#0	; 2
    153  f763		       85 0d		      sta	PF0	; 3
    154  f765		       bd 36 f1 	      lda	ScoreLabel+4,x
    155  f768		       85 0e		      sta	PF1
    156  f76a		       bd 37 f1 	      lda	ScoreLabel+5,x
    157  f76d		       85 0f		      sta	PF2
    158  f76f
    159  f76f		       8a		      txa
    160  f770		       18		      clc
    161  f771		       69 06		      adc	#KERNEL_IMAGE_FULL_DATA
    162  f773		       aa		      tax
    163  f774		       e0 1e		      cpx	#KERNEL_IMAGE_FULL_DATA*SCORE_LABEL_SIZE
    164  f776		       d0 d4		      bne	.score_draw_label
    165  f778
    166  f778							; Clear labels and setup color
    167  f778		       a9 00		      lda	#0
    168  f77a		       85 0d		      sta	PF0
    169  f77c		       85 0e		      sta	PF1
    170  f77e		       85 0f		      sta	PF2
    171  f780
    172  f780		       85 02		      sta	WSYNC
    173  f782
    174  f782							; Load Colors
    175  f782		       ad 82 02 	      lda	SWCHB
    176  f785		       29 08		      and	#%00001000
    177  f787		       f0 0d		      beq	.score_draw_bw
    178  f789
    179  f789				   .score_draw_color
    180  f789		       a9 44		      lda	#SCORE_LEVEL_COLOR
    181  f78b		       85 08		      sta	COLUPF
    182  f78d		       85 06		      sta	COLUP0
    183  f78f		       a9 c8		      lda	#SCORE_HEALTH_COLOR
    184  f791		       85 07		      sta	COLUP1
    185  f793
    186  f793		       4c a0 f7 	      jmp	.score_draw_digit_start
    187  f796
    188  f796				   .score_draw_bw
    189  f796		       a9 0e		      lda	#SCORE_LEVEL_BW_COLOR
    190  f798		       85 08		      sta	COLUPF
    191  f79a		       85 06		      sta	COLUP0
    192  f79c		       a9 0e		      lda	#SCORE_HEALTH_BW_COLOR
    193  f79e		       85 07		      sta	COLUP1
    194  f7a0
    195  f7a0				   .score_draw_digit_start
    196  f7a0
    197  f7a0		       85 02		      sta	WSYNC
    198  f7a2
    199  f7a2							; Prepare initial line
    200  f7a2
    201  f7a2							; Level
    202  f7a2		       a4 99		      ldy	ScoreDigitTens
    203  f7a4		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    204  f7a7		       29 f0		      and	#$f0
    205  f7a9		       85 9b		      sta	ScoreDigitGfx
    206  f7ab
    207  f7ab		       a4 97		      ldy	ScoreDigitOnes
    208  f7ad		       b9 ce f0 	      lda	ScoreDigits,y
    209  f7b0		       29 f0		      and	#$f0
    210  f7b2		       85 9c		      sta	ScoreDigitGfx+1
    211  f7b4
    212  f7b4							; Score
    213  f7b4		       a4 9a		      ldy	ScoreDigitTens+1
    214  f7b6		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    215  f7b9		       29 0f		      and	#$0f
    216  f7bb		       85 9d		      sta	ScoreDigitGfx+2
    217  f7bd
    218  f7bd		       a4 98		      ldy	ScoreDigitOnes+1
    219  f7bf		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    220  f7c2		       29 f0		      and	#$f0
    221  f7c4		       05 9d		      ora	ScoreDigitGfx+2
    222  f7c6		       85 9d		      sta	ScoreDigitGfx+2
    223  f7c8
    224  f7c8		       a2 05		      ldx	#SCORE_DIGIT_SIZE
    225  f7ca		       a5 9b		      lda	ScoreDigitGfx
    226  f7cc		       85 02		      sta	WSYNC
    227  f7ce				   .score_draw_digit
    228  f7ce
    229  f7ce							;lda ScoreDigitGfx
    230  f7ce		       85 0d		      sta	PF0
    231  f7d0		       a5 9c		      lda	ScoreDigitGfx+1
    232  f7d2		       85 0e		      sta	PF1
    233  f7d4		       a5 9d		      lda	ScoreDigitGfx+2
    234  f7d6		       85 0f		      sta	PF2
    235  f7d8
    236  f7d8							; Begin preparing next line
    237  f7d8		       e6 97		      inc	ScoreDigitOnes
    238  f7da		       e6 99		      inc	ScoreDigitTens
    239  f7dc		       e6 98		      inc	ScoreDigitOnes+1
    240  f7de		       e6 9a		      inc	ScoreDigitTens+1
    241  f7e0
    242  f7e0		       a9 00		      lda	#0
    243  f7e2		       85 0d		      sta	PF0
    244  f7e4		       a5 9e		      lda	ScoreBarGfx+0
    245  f7e6		       85 0e		      sta	PF1
    246  f7e8		       a5 9f		      lda	ScoreBarGfx+1
    247  f7ea		       85 0f		      sta	PF2
    248  f7ec
    249  f7ec							; Level 1st Digit
    250  f7ec		       a4 99		      ldy	ScoreDigitTens
    251  f7ee		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    252  f7f1		       29 f0		      and	#$f0
    253  f7f3		       85 80		      sta	Temp
    254  f7f5
    255  f7f5							; Score 1st Digit
    256  f7f5		       a4 9a		      ldy	ScoreDigitTens+1
    257  f7f7		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    258  f7fa		       29 0f		      and	#$0f
    259  f7fc		       85 81		      sta	Temp+1
    260  f7fe
    261  f7fe		       a5 9b		      lda	ScoreDigitGfx
    262  f800		       85 0d		      sta	PF0
    263  f802		       a5 9c		      lda	ScoreDigitGfx+1
    264  f804		       85 0e		      sta	PF1
    265  f806		       a5 9d		      lda	ScoreDigitGfx+2
    266  f808		       85 0f		      sta	PF2
    267  f80a
    268  f80a							; Level 2nd Digit (and transfer)
    269  f80a		       a4 97		      ldy	ScoreDigitOnes
    270  f80c		       b9 ce f0 	      lda	ScoreDigits,y
    271  f80f		       29 f0		      and	#$f0
    272  f811		       85 9c		      sta	ScoreDigitGfx+1
    273  f813
      0  f813					      sleep	3
      1  f813				   .CYCLES    SET	3
      2  f813
      3  f813				  -	      IF	.CYCLES < 2
      4  f813				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f813				  -	      ERR
      6  f813					      ENDIF
      7  f813
      8  f813					      IF	.CYCLES & 1
      9  f813					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f813		       04 00		      nop	0
     11  f815				  -	      ELSE
     12  f815				  -	      bit	VSYNC
     13  f815					      ENDIF
     14  f815				   .CYCLES    SET	.CYCLES - 3
     15  f815					      ENDIF
     16  f815
     17  f815				  -	      REPEAT	.CYCLES / 2
     18  f815				  -	      nop
     19  f815					      REPEND
    275  f815
    276  f815		       a9 00		      lda	#0
    277  f817		       85 0d		      sta	PF0
    278  f819		       a5 9e		      lda	ScoreBarGfx+0
    279  f81b		       85 0e		      sta	PF1
    280  f81d		       a4 9f		      ldy	ScoreBarGfx+1
    281  f81f		       84 0f		      sty	PF2
    282  f821
    283  f821							; Score 2nd Digit (and transfer)
    284  f821		       a4 98		      ldy	ScoreDigitOnes+1
    285  f823		       b9 00 f1 	      lda	ScoreDigitsFlip,y
    286  f826		       29 f0		      and	#$f0
    287  f828		       05 81		      ora	Temp+1
    288  f82a		       85 9d		      sta	ScoreDigitGfx+2
    289  f82c
    290  f82c							; Transfer Level 1st Digit
    291  f82c		       a5 80		      lda	Temp
    292  f82e		       85 9b		      sta	ScoreDigitGfx
    293  f830
    294  f830		       ca		      dex
    295  f831		       d0 9b		      bne	.score_draw_digit
    296  f833
    297  f833		       a9 00		      lda	#0
    298  f835		       85 0d		      sta	PF0
    299  f837		       85 0e		      sta	PF1
    300  f839		       85 0f		      sta	PF2
    301  f83b
    302  f83b		       60		      rts
    303  f83c
    304  f83c				   ScoreBar
    305  f83c		       40		      .BYTE.b	#%01000000
    306  f83d		       40		      .BYTE.b	#%01000000
    307  f83e		       60		      .BYTE.b	#%01100000
    308  f83f		       70		      .BYTE.b	#%01110000
    309  f840		       78		      .BYTE.b	#%01111000
    310  f841		       7c		      .BYTE.b	#%01111100
    311  f842		       7e		      .BYTE.b	#%01111110
    312  f843		       7f		      .BYTE.b	#%01111111
    313  f844
    314  f844				   ScoreBarFlip
    315  f844		       01		      .BYTE.b	#%00000001
    316  f845		       03		      .BYTE.b	#%00000011
    317  f846		       07		      .BYTE.b	#%00000111
    318  f847		       0f		      .BYTE.b	#%00001111
    319  f848		       1f		      .BYTE.b	#%00011111
    320  f849		       3f		      .BYTE.b	#%00111111
    321  f84a		       7f		      .BYTE.b	#%01111111
    322  f84b		       7f		      .BYTE.b	#%01111111
------- FILE game.asm
------- FILE objects/web.asm LEVEL 3 PASS 2
      0  f84c					      include	"objects/web.asm"
      1  f84c							;================
      2  f84c							; Web (Playfield)
      3  f84c							;================
      4  f84c
      5  f84c							; Constants
      6  f84c
      7  f84c		       00 00	   WEB_BG_COLOR =	#$00
      8  f84c		       00 02	   WEB_FG_COLOR =	#$02
      9  f84c
     10  f84c		       00 1c	   WEB_SIZE   =	28
     11  f84c		       00 ad	   WEB_LINES  =	KERNEL_SCANLINES-SCORE_LINES
     12  f84c		       00 06	   WEB_LINE   =	WEB_LINES/WEB_SIZE
     13  f84c
     14  f84c							; Scanline Draw
     15  f84c
     16  f84c				   WebDrawStart
     17  f84c
     18  f84c							; Load Colors
     19  f84c		       a5 a3		      lda	WebColor+1
     20  f84e		       85 08		      sta	COLUPF
     21  f850
     22  f850							; Mirror playfield and use standard playfield color
     23  f850							;lda CtrlPf
     24  f850							;and #%11111100
     25  f850							;ora #%00000001
     26  f850							;sta CtrlPf
     27  f850							;sta CTRLPF
     28  f850
     29  f850							; Initialize image index
     30  f850		       a9 00		      lda	#0
     31  f852		       85 a1		      sta	WebIndex
     32  f854
     33  f854		       60		      rts
------- FILE game.asm
------- FILE objects/spider.asm LEVEL 3 PASS 2
      0  f855					      include	"objects/spider.asm"
      1  f855							;=================
      2  f855							; Spider (player0)
      3  f855							;=================
      4  f855
      5  f855							; Constants
      6  f855
      7  f855		       00 56	   SPIDER_COLOR =	#$56
      8  f855		       00 0e	   SPIDER_BW_COLOR =	#$0E
      9  f855		       00 44	   SPIDER_COL_COLOR =	#$44
     10  f855		       00 08	   SPIDER_COL_BW_COLOR =	#$08
     11  f855
     12  f855		       00 10	   SPIDER_SPRITE_SIZE =	16
     13  f855		       00 10	   SPIDER_SIZE =	#SPIDER_SPRITE_SIZE
     14  f855		       00 02	   SPIDER_VEL_X =	2
     15  f855		       00 02	   SPIDER_VEL_Y =	2
     16  f855
     17  f855							; Initialization
     18  f855
     19  f855				   SpiderInit
     20  f855
     21  f855							; Initialize Position in center of screen
     22  f855		       a9 3f		      lda	#(KERNEL_WIDTH/4)-SPIDER_SIZE-1
     23  f857		       85 a6		      sta	SpiderPos
     24  f859		       a9 45		      lda	#(KERNEL_SCANLINES-SCORE_LINES)/2-SPIDER_SIZE-1
     25  f85b		       85 a7		      sta	SpiderPos+1
     26  f85d
     27  f85d							; Initial direction
     28  f85d		       a9 10		      lda	#%00010000
     29  f85f		       85 a8		      sta	SpiderCtrl
     30  f861
     31  f861							; Setup Sprite
      0  f861					      SET_POINTER	SpiderPtr, SpiderSprite
      1  f861				   .POINTER   SET	SpiderPtr
      2  f861				   .ADDRESS   SET	SpiderSprite
      3  f861
      4  f861		       a9 a4		      LDA	#<.ADDRESS
      5  f863		       85 a4		      STA	.POINTER
      6  f865		       a9 f1		      LDA	#>.ADDRESS
      7  f867		       85 a5		      STA	.POINTER+1
      8  f869
     33  f869
     34  f869		       60		      rts
     35  f86a
     36  f86a							; Frame Update
     37  f86a
     38  f86a				   SpiderUpdate
     39  f86a		       20 71 f8 	      jsr	SpiderControl
     40  f86d		       20 14 f9 	      jsr	SpiderCollision
     41  f870		       60		      rts
     42  f871
     43  f871				   SpiderControl
     44  f871
     45  f871							; Control Position
     46  f871		       a6 a6		      ldx	SpiderPos
     47  f873		       a4 a7		      ldy	SpiderPos+1
     48  f875		       ad 80 02 	      lda	SWCHA
     49  f878
     50  f878				   .spider_control_check_right
     51  f878		       30 02		      bmi	.spider_control_check_left
     52  f87a
     53  f87a					      REPEAT	#SPIDER_VEL_X
     54  f87a		       e8		      inx
     53  f87a					      REPEND
     54  f87b		       e8		      inx
     55  f87c					      REPEND
     56  f87c
     57  f87c				   .spider_control_check_left
     58  f87c		       2a		      rol
     59  f87d		       30 02		      bmi	.spider_control_check_down
     60  f87f
     61  f87f					      REPEAT	#SPIDER_VEL_X
     62  f87f		       ca		      dex
     61  f87f					      REPEND
     62  f880		       ca		      dex
     63  f881					      REPEND
     64  f881
     65  f881				   .spider_control_check_down
     66  f881		       2a		      rol
     67  f882		       30 02		      bmi	.spider_control_check_up
     68  f884
     69  f884					      REPEAT	#SPIDER_VEL_Y
     70  f884		       88		      dey
     69  f884					      REPEND
     70  f885		       88		      dey
     71  f886					      REPEND
     72  f886
     73  f886				   .spider_control_check_up
     74  f886		       2a		      rol
     75  f887		       30 02		      bmi	.spider_control_sprite
     76  f889
     77  f889					      REPEAT	#SPIDER_VEL_Y
     78  f889		       c8		      iny
     77  f889					      REPEND
     78  f88a		       c8		      iny
     79  f88b					      REPEND
     80  f88b
     81  f88b				   .spider_control_sprite
     82  f88b							; Control Sprite
     83  f88b		       a9 00		      lda	#%00000000
     84  f88d							; 7th bit: right
     85  f88d							; 6th bit: left
     86  f88d							; 5th bit: down
     87  f88d							; 4th bit: up
     88  f88d
     89  f88d				   .spider_control_sprite_x
     90  f88d		       e4 a6		      cpx	SpiderPos
     91  f88f		       90 04		      bcc	.spider_control_sprite_left
     92  f891		       f0 09		      beq	.spider_control_sprite_y
     93  f893		       b0 05		      bcs	.spider_control_sprite_right
     94  f895
     95  f895				   .spider_control_sprite_left
     96  f895		       09 40		      ora	#%01000000
     97  f897		       4c 9c f8 	      jmp	.spider_control_sprite_y
     98  f89a
     99  f89a				   .spider_control_sprite_right
    100  f89a		       09 80		      ora	#%10000000
    101  f89c
    102  f89c				   .spider_control_sprite_y
    103  f89c		       c4 a7		      cpy	SpiderPos+1
    104  f89e		       90 04		      bcc	.spider_control_sprite_down
    105  f8a0		       f0 09		      beq	.spider_control_sprite_store
    106  f8a2		       b0 05		      bcs	.spider_control_sprite_up
    107  f8a4
    108  f8a4				   .spider_control_sprite_down
    109  f8a4		       09 20		      ora	#%00100000
    110  f8a6		       4c ab f8 	      jmp	.spider_control_sprite_store
    111  f8a9
    112  f8a9				   .spider_control_sprite_up
    113  f8a9		       09 10		      ora	#%00010000
    114  f8ab
    115  f8ab				   .spider_control_sprite_store
    116  f8ab		       c9 00		      cmp	#%00000000
    117  f8ad		       f0 02		      beq	.spider_control_boundary
    118  f8af		       85 a8		      sta	SpiderCtrl
    119  f8b1
    120  f8b1				   .spider_control_boundary
    121  f8b1							; Check Playfield Boundaries
    122  f8b1
    123  f8b1				   .spider_control_boundary_left
    124  f8b1		       e0 02		      cpx	#SPIDER_VEL_X
    125  f8b3		       b0 05		      bcs	.spider_control_boundary_right
    126  f8b5		       a2 02		      ldx	#SPIDER_VEL_X
    127  f8b7		       4c c0 f8 	      jmp	.spider_control_boundary_top
    128  f8ba
    129  f8ba				   .spider_control_boundary_right
    130  f8ba		       e0 8e		      cpx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X
    131  f8bc		       90 02		      bcc	.spider_control_boundary_top
    132  f8be		       a2 8e		      ldx	#(KERNEL_WIDTH/2)-SPIDER_SIZE-SPIDER_VEL_X
    133  f8c0
    134  f8c0				   .spider_control_boundary_top
    135  f8c0		       c0 04		      cpy	#SPIDER_VEL_Y+2
    136  f8c2		       b0 05		      bcs	.spider_control_boundary_bottom
    137  f8c4		       a0 04		      ldy	#SPIDER_VEL_Y+2
    138  f8c6		       4c cf f8 	      jmp	.spider_control_store
    139  f8c9
    140  f8c9				   .spider_control_boundary_bottom
    141  f8c9		       c0 8a		      cpy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    142  f8cb		       90 02		      bcc	.spider_control_store
    143  f8cd		       a0 8a		      ldy	#KERNEL_SCANLINES-SCORE_LINES-SPIDER_SIZE-SPIDER_VEL_Y-17
    144  f8cf
    145  f8cf				   .spider_control_store
    146  f8cf							; Store new position
    147  f8cf		       86 a6		      stx	SpiderPos
    148  f8d1		       84 a7		      sty	SpiderPos+1
    149  f8d3
    150  f8d3				   .spider_control_sprite_assign
    151  f8d3							; Skip if no change
    152  f8d3		       c9 00		      cmp	#%00000000
    153  f8d5		       f0 3c		      beq	.spider_control_return
    154  f8d7
    155  f8d7		       a2 00		      ldx	#%00000000	; For reflection
    156  f8d9
    157  f8d9		       24 a8		      bit	SpiderCtrl
    158  f8db		       30 0f		      bmi	.spider_control_sprite_assign_right
    159  f8dd		       50 18		      bvc	.spider_control_sprite_assign_top
    160  f8df
    161  f8df				   .spider_control_sprite_assign_left
      0  f8df					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8df				   .POINTER   SET	SpiderPtr
      2  f8df				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8df
      4  f8df		       a9 b4		      LDA	#<.ADDRESS
      5  f8e1		       85 a4		      STA	.POINTER
      6  f8e3		       a9 f1		      LDA	#>.ADDRESS
      7  f8e5		       85 a5		      STA	.POINTER+1
      8  f8e7
    163  f8e7		       a2 08		      ldx	#%00001000
    164  f8e9		       4c 11 f9 	      jmp	.spider_control_reflect
    165  f8ec
    166  f8ec				   .spider_control_sprite_assign_right
      0  f8ec					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*1
      1  f8ec				   .POINTER   SET	SpiderPtr
      2  f8ec				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*1
      3  f8ec
      4  f8ec		       a9 b4		      LDA	#<.ADDRESS
      5  f8ee		       85 a4		      STA	.POINTER
      6  f8f0		       a9 f1		      LDA	#>.ADDRESS
      7  f8f2		       85 a5		      STA	.POINTER+1
      8  f8f4
    168  f8f4		       4c 11 f9 	      jmp	.spider_control_reflect
    169  f8f7
    170  f8f7				   .spider_control_sprite_assign_top
    171  f8f7		       c9 10		      cmp	#%00010000
    172  f8f9		       d0 0b		      bne	.spider_control_sprite_assign_bottom
      0  f8fb					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*0
      1  f8fb				   .POINTER   SET	SpiderPtr
      2  f8fb				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*0
      3  f8fb
      4  f8fb		       a9 a4		      LDA	#<.ADDRESS
      5  f8fd		       85 a4		      STA	.POINTER
      6  f8ff		       a9 f1		      LDA	#>.ADDRESS
      7  f901		       85 a5		      STA	.POINTER+1
      8  f903
    174  f903		       4c 11 f9 	      jmp	.spider_control_reflect
    175  f906
    176  f906				   .spider_control_sprite_assign_bottom
      0  f906					      SET_POINTER	SpiderPtr, SpiderSprite+#SPIDER_SPRITE_SIZE*2
      1  f906				   .POINTER   SET	SpiderPtr
      2  f906				   .ADDRESS   SET	SpiderSprite+#SPIDER_SPRITE_SIZE*2
      3  f906
      4  f906		       a9 c4		      LDA	#<.ADDRESS
      5  f908		       85 a4		      STA	.POINTER
      6  f90a		       a9 f1		      LDA	#>.ADDRESS
      7  f90c		       85 a5		      STA	.POINTER+1
      8  f90e
    178  f90e		       4c 11 f9 	      jmp	.spider_control_reflect
    179  f911
    180  f911				   .spider_control_reflect
    181  f911		       86 0b		      stx	REFP0
    182  f913
    183  f913				   .spider_control_return
    184  f913		       60		      rts
    185  f914
    186  f914				   SpiderCollision
    187  f914		       a0 56		      ldy	#SPIDER_COLOR
    188  f916
    189  f916							; Check b/w
    190  f916		       ad 82 02 	      lda	SWCHB
    191  f919		       29 08		      and	#%00001000
    192  f91b		       d0 02		      bne	.spider_collision_m0
    193  f91d
    194  f91d		       a0 0e		      ldy	#SPIDER_BW_COLOR
    195  f91f
    196  f91f				   .spider_collision_m0
    197  f91f							; Check stun status
    198  f91f		       a6 b7		      ldx	BugStunned
    199  f921		       d0 04		      bne	.spider_collision_m1
    200  f923
    201  f923							; Collision for M0 (V set)
    202  f923		       24 00		      bit	CXM0P
    203  f925		       70 0b		      bvs	.spider_collision_active
    204  f927
    205  f927				   .spider_collision_m1
    206  f927							; Check stun status
    207  f927		       a6 b8		      ldx	BugStunned+1
    208  f929		       d0 12		      bne	.spider_collision_return
    209  f92b
    210  f92b							; Collision for M1 (N set)
    211  f92b		       24 01		      bit	CXM1P
    212  f92d		       30 03		      bmi	.spider_collision_active
    213  f92f
    214  f92f		       4c 3d f9 	      jmp	.spider_collision_return
    215  f932
    216  f932				   .spider_collision_active
    217  f932		       a0 44		      ldy	#SPIDER_COL_COLOR
    218  f934
    219  f934							; Check b/w
    220  f934		       ad 82 02 	      lda	SWCHB
    221  f937		       29 08		      and	#%00001000
    222  f939		       d0 02		      bne	.spider_collision_return
    223  f93b
    224  f93b		       a0 08		      ldy	#SPIDER_COL_BW_COLOR
    225  f93d
    226  f93d				   .spider_collision_return
    227  f93d		       84 a9		      sty	SpiderColor
    228  f93f		       60		      rts
    229  f940
    230  f940				   SpiderPosition
    231  f940
    232  f940							; Set Position
    233  f940		       a2 00		      ldx	#0	; Object (player0)
    234  f942		       a5 a6		      lda	SpiderPos	; X Position
    235  f944		       20 00 f0 	      jsr	PosObject
    236  f947
    237  f947		       60		      rts
    238  f948
    239  f948							; Scanline Draw
    240  f948
    241  f948				   SpiderDrawStart
    242  f948
    243  f948							; Set player 0 to be quad size
    244  f948							;lda NuSiz0
    245  f948							;and #%11111000
    246  f948							;ora #%00000101
    247  f948							;sta NuSiz0
    248  f948							;sta NUSIZ0
    249  f948
    250  f948							; Set sprite color
    251  f948		       a5 a9		      lda	SpiderColor
    252  f94a		       85 06		      sta	COLUP0
    253  f94c
    254  f94c							; Determine if we need to use vertical delay (odd line)
    255  f94c		       a5 a7		      lda	SpiderPos+1	; Y Position
    256  f94e		       4a		      lsr
    257  f94f		       b0 05		      bcs	.spider_draw_start_nodelay
    258  f951
    259  f951		       a0 01		      ldy	#1
    260  f953		       4c 58 f9 	      jmp	.spider_draw_start_set_delay
    261  f956
    262  f956				   .spider_draw_start_nodelay
    263  f956		       a0 00		      ldy	#0
    264  f958
    265  f958				   .spider_draw_start_set_delay
    266  f958		       84 25		      sty	VDELP0
    267  f95a
    268  f95a				   .spider_draw_start_pos
    269  f95a							; Calculate starting position
    270  f95a		       18		      clc
    271  f95b		       69 10		      adc	#SPIDER_SIZE
    272  f95d		       85 ab		      sta	SpiderDrawPos
    273  f95f
    274  f95f							; Initialize sprite index and line buffer
    275  f95f		       a9 10		      lda	#SPIDER_SPRITE_SIZE
    276  f961		       85 aa		      sta	SpiderIndex
    277  f963		       a9 00		      lda	#0
    278  f965		       85 ac		      sta	SpiderLine
    279  f967
    280  f967		       60		      rts
------- FILE game.asm
------- FILE objects/line.asm LEVEL 3 PASS 2
      0  f968					      include	"objects/line.asm"
      1  f968							;================
      2  f968							; Line (ball)
      3  f968							;================
      4  f968
      5  f968							; Constants
      6  f968
      7  f968		       00 08	   LINE_SIZE  =	8
      8  f968		       00 04	   LINE_VEL_X =	4
      9  f968		       00 04	   LINE_VEL_Y =	4
     10  f968
     11  f968		       00 08	   LINE_AUDIO_C =	8
     12  f968		       00 01	   LINE_AUDIO_F =	1
     13  f968		       00 04	   LINE_AUDIO_V =	4
     14  f968
     15  f968		       00 08	   LINE_SAMPLE_LEN =	8
     16  f968		       00 03	   LINE_SAMPLE_C =	3
     17  f968		       00 01	   LINE_SAMPLE_F =	1
     18  f968		       00 04	   LINE_SAMPLE_V =	4
     19  f968
     20  f968							; Initialization
     21  f968
     22  f968				   LineInit
     23  f968
     24  f968							; Initial Line Control
     25  f968		       a9 00		      lda	#0
     26  f96a		       85 af		      sta	LineEnabled
     27  f96c							;sta LinePos+0
     28  f96c							;sta LinePos+1
     29  f96c
     30  f96c							; Initial direction
     31  f96c							;lda #0
     32  f96c							;sta LineVelocity+0
     33  f96c							;lda #LINE_VEL_Y
     34  f96c							;sta LineVelocity+1
     35  f96c
     36  f96c							; Disable line at start
     37  f96c							;lda #-1
     38  f96c							;sta LineDrawPos+0
     39  f96c							;sta LineDrawPos+1
     40  f96c
     41  f96c		       60		      rts
     42  f96d
     43  f96d							; Frame Update
     44  f96d
     45  f96d				   LineUpdate
     46  f96d		       20 77 f9 	      jsr	LineControl
     47  f970		       20 3b fa 	      jsr	LineObject
     48  f973		       20 66 fa 	      jsr	LineCollision
     49  f976		       60		      rts
     50  f977
     51  f977				   LineControl
     52  f977
     53  f977							; If in two player mode, no fire is required
     54  f977		       24 93		      bit	GameType
     55  f979		       30 04		      bmi	.line_control_check_enabled
     56  f97b
     57  f97b				   .line_control_check_fire
     58  f97b							; Check if Fire Button on controller 0 is pressed
     59  f97b		       a5 0c		      lda	INPT4
     60  f97d		       30 1c		      bmi	.line_control_skip
     61  f97f
     62  f97f				   .line_control_check_enabled
     63  f97f		       24 af		      bit	LineEnabled
     64  f981		       30 18		      bmi	.line_control_skip
     65  f983
     66  f983		       24 93		      bit	GameType
     67  f985		       30 05		      bmi	.line_control_check_ctrl_1
     68  f987
     69  f987				   .line_control_check_ctrl_0
     70  f987		       a5 a8		      lda	SpiderCtrl
     71  f989		       4c 97 f9 	      jmp	.line_control_check_ctrl
     72  f98c
     73  f98c				   .line_control_check_ctrl_1
     74  f98c		       ad 80 02 	      lda	SWCHA
     75  f98f		       49 ff		      eor	#$ff	; invert bits
     76  f991					      REPEAT	4
     77  f991		       0a		      asl
     76  f991					      REPEND
     77  f992		       0a		      asl
     76  f992					      REPEND
     77  f993		       0a		      asl
     76  f993					      REPEND
     77  f994		       0a		      asl
     78  f995					      REPEND
     79  f995		       29 f0		      and	#%11110000
     80  f997
     81  f997				   .line_control_check_ctrl
     82  f997		       85 83		      sta	Temp+3
     83  f999		       d0 01		      bne	.line_control_fire
     84  f99b
     85  f99b				   .line_control_skip
     86  f99b		       60		      rts
     87  f99c
     88  f99c				   .line_control_fire
     89  f99c		       20 aa fa 	      jsr	LineEnable
     90  f99f
     91  f99f				   .line_control_x
     92  f99f		       a9 c0		      lda	#%11000000
     93  f9a1		       24 83		      bit	Temp+3
     94  f9a3		       f0 0c		      beq	.line_control_x_none
     95  f9a5				   .line_control_x_right
     96  f9a5		       10 05		      bpl	.line_control_x_left
     97  f9a7		       a9 04		      lda	#LINE_VEL_X
     98  f9a9		       4c b3 f9 	      jmp	.line_control_x_store
     99  f9ac				   .line_control_x_left
    100  f9ac		       a9 fc		      lda	#-LINE_VEL_X
    101  f9ae		       4c b3 f9 	      jmp	.line_control_x_store
    102  f9b1				   .line_control_x_none
    103  f9b1		       a9 00		      lda	#0
    104  f9b3				   .line_control_x_store
    105  f9b3		       85 b2		      sta	LineVelocity
    106  f9b5
    107  f9b5				   .line_control_y
    108  f9b5		       a5 83		      lda	Temp+3
    109  f9b7		       29 30		      and	#%00110000
    110  f9b9		       f0 0e		      beq	.line_control_y_none
    111  f9bb				   .line_control_y_down
    112  f9bb		       c9 20		      cmp	#%00100000
    113  f9bd		       d0 05		      bne	.line_control_y_up
    114  f9bf		       a9 fc		      lda	#-LINE_VEL_Y
    115  f9c1		       4c cb f9 	      jmp	.line_control_y_store
    116  f9c4				   .line_control_y_up
    117  f9c4		       a9 04		      lda	#LINE_VEL_Y
    118  f9c6		       4c cb f9 	      jmp	.line_control_y_store
    119  f9c9				   .line_control_y_none
    120  f9c9		       a9 00		      lda	#0
    121  f9cb				   .line_control_y_store
    122  f9cb		       85 b3		      sta	LineVelocity+1
    123  f9cd
    124  f9cd				   .line_control_position
    125  f9cd
    126  f9cd		       a2 00		      ldx	#0	; offsetX
    127  f9cf		       a0 00		      ldy	#0	; offsetY
    128  f9d1
    129  f9d1		       a5 83		      lda	Temp+3
    130  f9d3
    131  f9d3				   .line_control_position_left
    132  f9d3		       c9 40		      cmp	#%01000000
    133  f9d5		       d0 07		      bne	.line_control_position_right
    134  f9d7
    135  f9d7		       a2 00		      ldx	#0
    136  f9d9		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    137  f9db		       4c 26 fa 	      jmp	.line_control_position_store
    138  f9de
    139  f9de				   .line_control_position_right
    140  f9de		       c9 80		      cmp	#%10000000
    141  f9e0		       d0 07		      bne	.line_control_position_top
    142  f9e2
    143  f9e2		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    144  f9e4		       a0 0c		      ldy	#SPIDER_SIZE-LINE_SIZE/2
    145  f9e6		       4c 26 fa 	      jmp	.line_control_position_store
    146  f9e9
    147  f9e9				   .line_control_position_top
    148  f9e9		       c9 10		      cmp	#%00010000
    149  f9eb		       d0 07		      bne	.line_control_position_bottom
    150  f9ed
    151  f9ed		       a2 08		      ldx	#SPIDER_SIZE/2
    152  f9ef		       a0 10		      ldy	#SPIDER_SIZE
    153  f9f1		       4c 26 fa 	      jmp	.line_control_position_store
    154  f9f4
    155  f9f4				   .line_control_position_bottom
    156  f9f4		       c9 20		      cmp	#%00100000
    157  f9f6		       d0 05		      bne	.line_control_position_top_right
    158  f9f8
    159  f9f8		       a2 08		      ldx	#SPIDER_SIZE/2
    160  f9fa		       4c 26 fa 	      jmp	.line_control_position_store
    161  f9fd
    162  f9fd				   .line_control_position_top_right
    163  f9fd		       c9 90		      cmp	#%10010000
    164  f9ff		       d0 07		      bne	.line_control_position_bottom_right
    165  fa01
    166  fa01		       a2 10		      ldx	#SPIDER_SIZE
    167  fa03		       a0 20		      ldy	#SPIDER_SIZE+LINE_SIZE*2
    168  fa05		       4c 26 fa 	      jmp	.line_control_position_store
    169  fa08
    170  fa08				   .line_control_position_bottom_right
    171  fa08		       c9 a0		      cmp	#%10100000
    172  fa0a		       d0 07		      bne	.line_control_position_bottom_left
    173  fa0c
    174  fa0c		       a2 0c		      ldx	#SPIDER_SIZE-LINE_SIZE/2
    175  fa0e		       a0 00		      ldy	#0
    176  fa10		       4c 26 fa 	      jmp	.line_control_position_store
    177  fa13
    178  fa13				   .line_control_position_bottom_left
    179  fa13		       c9 60		      cmp	#%01100000
    180  fa15		       d0 07		      bne	.line_control_position_top_left
    181  fa17
    182  fa17							; No Offset
    183  fa17		       a2 04		      ldx	#LINE_SIZE/2
    184  fa19		       a0 04		      ldy	#LINE_SIZE/2
    185  fa1b		       4c 26 fa 	      jmp	.line_control_position_store
    186  fa1e
    187  fa1e				   .line_control_position_top_left
    188  fa1e		       c9 50		      cmp	#%01010000
    189  fa20		       d0 04		      bne	.line_control_position_store
    190  fa22
    191  fa22		       a2 00		      ldx	#0
    192  fa24		       a0 1c		      ldy	#SPIDER_SIZE+LINE_SIZE*3/2
    193  fa26
    194  fa26				   .line_control_position_store
    195  fa26
    196  fa26							; Apply offsetX to playerX
    197  fa26		       a5 a6		      lda	SpiderPos
    198  fa28		       86 80		      stx	Temp
    199  fa2a		       18		      clc
    200  fa2b		       65 80		      adc	Temp
    201  fa2d		       aa		      tax
    202  fa2e
    203  fa2e							; Apply offsetY to playerY
    204  fa2e		       a5 a7		      lda	SpiderPos+1
    205  fa30		       84 80		      sty	Temp
    206  fa32		       18		      clc
    207  fa33		       65 80		      adc	Temp
    208  fa35		       a8		      tay
    209  fa36
    210  fa36		       86 b0		      stx	LinePos
    211  fa38		       84 b1		      sty	LinePos+1
    212  fa3a
    213  fa3a				   .line_control_return
    214  fa3a		       60		      rts
    215  fa3b
    216  fa3b				   LineObject
    217  fa3b
    218  fa3b							; Check if line is enabled
    219  fa3b		       24 af		      bit	LineEnabled
    220  fa3d		       10 26		      bpl	.line_object_return
    221  fa3f
    222  fa3f							; Load position
    223  fa3f		       a6 b0		      ldx	LinePos
    224  fa41		       a4 b1		      ldy	LinePos+1
    225  fa43
    226  fa43				   .line_object_boundary
    227  fa43				   .line_object_boundary_left
    228  fa43		       e0 04		      cpx	#LINE_VEL_X
    229  fa45		       90 1b		      bcc	.line_object_disable
    230  fa47				   .line_object_boundary_right
    231  fa47		       e0 9b		      cpx	#160-LINE_VEL_X-1
    232  fa49		       b0 17		      bcs	.line_object_disable
    233  fa4b				   .line_object_boundary_bottom
    234  fa4b		       c0 04		      cpy	#LINE_VEL_Y
    235  fa4d		       90 13		      bcc	.line_object_disable
    236  fa4f				   .line_object_boundary_top
    237  fa4f		       c0 bc		      cpy	#KERNEL_SCANLINES-LINE_VEL_Y
    238  fa51		       b0 0f		      bcs	.line_object_disable
    239  fa53
    240  fa53				   .line_object_velocity
    241  fa53
    242  fa53							; Apply Velocity
    243  fa53		       8a		      txa
    244  fa54		       18		      clc
    245  fa55		       65 b2		      adc	LineVelocity
    246  fa57		       85 b0		      sta	LinePos
    247  fa59
    248  fa59		       98		      tya
    249  fa5a		       18		      clc
    250  fa5b		       65 b3		      adc	LineVelocity+1
    251  fa5d		       85 b1		      sta	LinePos+1
    252  fa5f
    253  fa5f		       4c 65 fa 	      jmp	.line_object_return
    254  fa62
    255  fa62				   .line_object_disable
    256  fa62		       20 b6 fa 	      jsr	LineDisable
    257  fa65
    258  fa65				   .line_object_return
    259  fa65		       60		      rts
    260  fa66
    261  fa66				   LineCollision
    262  fa66
    263  fa66		       a9 78		      lda	#BUG_STUN_LENGTH
    264  fa68
    265  fa68				   .line_collision_m0
    266  fa68		       24 04		      bit	CXM0FB
    267  fa6a		       50 08		      bvc	.line_collision_m1
    268  fa6c
    269  fa6c							; Set stun timer
    270  fa6c		       85 b7		      sta	BugStunned+0
    271  fa6e
    272  fa6e							; Disable line
    273  fa6e		       20 b6 fa 	      jsr	LineDisable
    274  fa71		       4c 7d fa 	      jmp	.line_collision_sample
    275  fa74
    276  fa74				   .line_collision_m1
    277  fa74		       24 05		      bit	CXM1FB
    278  fa76		       50 08		      bvc	.line_collision_return
    279  fa78
    280  fa78							; Set stun timer
    281  fa78		       85 b8		      sta	BugStunned+1
    282  fa7a
    283  fa7a							; Disable line
    284  fa7a		       20 b6 fa 	      jsr	LineDisable
    285  fa7d
    286  fa7d				   .line_collision_sample
    287  fa7d		       20 d4 fa 	      jsr	LineSample
    288  fa80
    289  fa80				   .line_collision_return
    290  fa80		       60		      rts
    291  fa81
    292  fa81				   LinePosition
    293  fa81
    294  fa81							; Set Line Position
    295  fa81		       a2 04		      ldx	#4	; Object (ball)
    296  fa83		       a5 b0		      lda	LinePos	; X Position
    297  fa85		       20 00 f0 	      jsr	PosObject
    298  fa88
    299  fa88		       60		      rts
    300  fa89
    301  fa89							; Scanline Draw
    302  fa89
    303  fa89				   LineDrawStart
    304  fa89
    305  fa89		       24 af		      bit	LineEnabled
    306  fa8b		       30 07		      bmi	.line_draw_start
    307  fa8d
    308  fa8d		       a9 ff		      lda	#-1
    309  fa8f		       85 b4		      sta	LineDrawPos+0
    310  fa91		       85 b5		      sta	LineDrawPos+1
    311  fa93		       60		      rts
    312  fa94
    313  fa94				   .line_draw_start
    314  fa94							; Determine if we need to use vertical delay (oven line)
    315  fa94		       a5 b1		      lda	LinePos+1
    316  fa96		       4a		      lsr
    317  fa97		       90 05		      bcc	.line_draw_start_nodelay
    318  fa99
    319  fa99		       a0 01		      ldy	#1
    320  fa9b		       4c a0 fa 	      jmp	.line_draw_start_set_delay
    321  fa9e
    322  fa9e				   .line_draw_start_nodelay
    323  fa9e		       a0 00		      ldy	#0
    324  faa0
    325  faa0				   .line_draw_start_set_delay
    326  faa0		       84 27		      sty	VDELBL
    327  faa2
    328  faa2				   .line_draw_start_pos
    329  faa2							; Calculate starting position
    330  faa2		       18		      clc
    331  faa3		       85 b4		      sta	LineDrawPos+0
    332  faa5		       69 04		      adc	#LINE_SIZE/2
    333  faa7		       85 b5		      sta	LineDrawPos+1
    334  faa9
    335  faa9		       60		      rts
    336  faaa
    337  faaa				   LineEnable
    338  faaa		       a9 80		      lda	#%10000000
    339  faac		       85 af		      sta	LineEnabled
    340  faae
    341  faae		       a5 92		      lda	SampleStep
    342  fab0		       d0 03		      bne	.line_enable_return
    343  fab2
    344  fab2		       20 c2 fa 	      jsr	LineAudioPlay
    345  fab5
    346  fab5				   .line_enable_return
    347  fab5		       60		      rts
    348  fab6
    349  fab6				   LineDisable
    350  fab6		       a9 00		      lda	#0
    351  fab8		       85 af		      sta	LineEnabled
    352  faba
    353  faba		       a5 92		      lda	SampleStep
    354  fabc		       d0 03		      bne	.line_disable_return
    355  fabe
    356  fabe		       20 cf fa 	      jsr	LineAudioMute
    357  fac1
    358  fac1				   .line_disable_return
    359  fac1		       60		      rts
    360  fac2
    361  fac2				   LineAudioPlay
    362  fac2		       a9 08		      lda	#LINE_AUDIO_C
    363  fac4		       85 16		      sta	AUDC1
    364  fac6		       a9 01		      lda	#LINE_AUDIO_F
    365  fac8		       85 18		      sta	AUDF1
    366  faca		       a9 04		      lda	#LINE_AUDIO_V
    367  facc		       85 1a		      sta	AUDV1
    368  face		       60		      rts
    369  facf
    370  facf				   LineAudioMute
    371  facf		       a9 00		      lda	#0
    372  fad1		       85 1a		      sta	AUDV1
    373  fad3							;sta AUDF1
    374  fad3							;sta AUDC1
    375  fad3		       60		      rts
    376  fad4
    377  fad4				   LineSample
    378  fad4		       a9 08		      lda	#LINE_SAMPLE_LEN
    379  fad6		       85 92		      sta	SampleStep
    380  fad8		       a9 03		      lda	#LINE_SAMPLE_C
    381  fada		       85 16		      sta	AUDC1
    382  fadc		       a9 01		      lda	#LINE_SAMPLE_F
    383  fade		       85 18		      sta	AUDF1
    384  fae0		       a9 04		      lda	#LINE_SAMPLE_V
    385  fae2		       85 1a		      sta	AUDV1
    386  fae4		       60		      rts
------- FILE game.asm
------- FILE objects/bug.asm LEVEL 3 PASS 2
      0  fae5					      include	"objects/bug.asm"
      1  fae5							;======================
      2  fae5							; Bugs (missiles 0 & 1)
      3  fae5							;======================
      4  fae5
      5  fae5							; Constants
      6  fae5
      7  fae5		       00 08	   BUG_SIZE   =	8
      8  fae5		       00 08	   BUG_BOUNDARY =	#(BUG_SIZE)
      9  fae5		       00 78	   BUG_STUN_LENGTH =	120
     10  fae5		       00 04	   BUG_POINTS =	4
     11  fae5		       00 03	   BUG_HP     =	3
     12  fae5
     13  fae5		       00 cc	   BUG_ACTIVE_COLOR =	#$CC
     14  fae5		       00 0c	   BUG_ACTIVE_BW_COLOR =	#$0C
     15  fae5		       00 38	   BUG_STUN_COLOR =	#$38
     16  fae5		       00 08	   BUG_STUN_BW_COLOR =	#$08
     17  fae5
     18  fae5		       00 1e	   BUG_SAMPLE_LEN =	30
     19  fae5		       00 03	   BUG_SAMPLE_C =	3
     20  fae5		       00 14	   BUG_SAMPLE_F =	20
     21  fae5		       00 04	   BUG_SAMPLE_V =	4
     22  fae5
     23  fae5		       00 01	   BUG_COL_SAMPLE_LEN =	1
     24  fae5		       00 08	   BUG_COL_SAMPLE_C =	8
     25  fae5		       00 08	   BUG_COL_SAMPLE_F =	8
     26  fae5		       00 03	   BUG_COL_SAMPLE_V =	3
     27  fae5
     28  fae5							; Initialization
     29  fae5
     30  fae5				   BugInit
     31  fae5
     32  fae5							; Initialize Bugs
     33  fae5		       a2 01		      ldx	#1
     34  fae7
     35  fae7				   .bug_init_loop
     36  fae7		       20 ee fa 	      jsr	BugReset
     37  faea
     38  faea		       ca		      dex
     39  faeb		       10 fa		      bpl	.bug_init_loop
     40  faed
     41  faed		       60		      rts
     42  faee
     43  faee				   BugReset		; x = bug (0 or 1)
     44  faee
     45  faee							; Set random position
     46  faee		       20 13 f0 	      jsr	Random
     47  faf1
     48  faf1		       a5 84		      lda	Rand8
     49  faf3		       30 14		      bmi	.bug_reset_v
     50  faf5
     51  faf5				   .bug_reset_h
     52  faf5		       29 7f		      and	#$7f
     53  faf7		       95 b9		      sta	BugPosX,x
     54  faf9
     55  faf9		       a5 85		      lda	Rand16
     56  fafb		       30 05		      bmi	.bug_reset_h_bottom
     57  fafd				   .bug_reset_h_top
     58  fafd		       a9 08		      lda	#BUG_BOUNDARY
     59  faff		       4c 04 fb 	      jmp	.bug_reset_h_y
     60  fb02				   .bug_reset_h_bottom
     61  fb02		       a9 a5		      lda	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
     62  fb04				   .bug_reset_h_y
     63  fb04		       95 bb		      sta	BugPosY,x
     64  fb06		       4c 1a fb 	      jmp	.bug_reset_active
     65  fb09
     66  fb09				   .bug_reset_v
     67  fb09		       29 7f		      and	#$7f
     68  fb0b		       95 bb		      sta	BugPosY,x
     69  fb0d
     70  fb0d		       a5 85		      lda	Rand16
     71  fb0f		       30 05		      bmi	.bug_reset_v_right
     72  fb11
     73  fb11				   .bug_reset_v_left
     74  fb11		       a9 08		      lda	#BUG_BOUNDARY
     75  fb13		       4c 18 fb 	      jmp	.bug_reset_v_x
     76  fb16				   .bug_reset_v_right
     77  fb16		       a9 98		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
     78  fb18				   .bug_reset_v_x
     79  fb18		       95 b9		      sta	BugPosX,x
     80  fb1a
     81  fb1a				   .bug_reset_active
     82  fb1a							; Set as active
     83  fb1a		       a9 00		      lda	#0
     84  fb1c		       95 b7		      sta	BugStunned,x
     85  fb1e
     86  fb1e		       60		      rts
     87  fb1f
     88  fb1f							; Frame Update
     89  fb1f
     90  fb1f				   BugUpdate
     91  fb1f
     92  fb1f		       a2 01		      ldx	#1
     93  fb21				   .bug_update_loop
     94  fb21		       86 80		      stx	Temp+0
     95  fb23
     96  fb23		       b5 b7		      lda	BugStunned,x
     97  fb25		       f0 08		      beq	.bug_update_active
     98  fb27
     99  fb27				   .bug_update_stunned
    100  fb27		       d6 b7		      dec	BugStunned,x
    101  fb29		       20 b2 fb 	      jsr	BugStunCollision
    102  fb2c		       4c 35 fb 	      jmp	.bug_update_next
    103  fb2f
    104  fb2f				   .bug_update_active
    105  fb2f		       20 3b fb 	      jsr	BugMovement
    106  fb32		       20 9a fb 	      jsr	BugCollision
    107  fb35
    108  fb35				   .bug_update_next
    109  fb35		       a6 80		      ldx	Temp+0
    110  fb37		       ca		      dex
    111  fb38		       10 e7		      bpl	.bug_update_loop
    112  fb3a
    113  fb3a		       60		      rts
    114  fb3b
    115  fb3b				   BugMovement
    116  fb3b
    117  fb3b				   .bug_movement_random
    118  fb3b		       20 13 f0 	      jsr	Random
    119  fb3e		       29 03		      and	#%00000011
    120  fb40		       85 81		      sta	Temp+1
    121  fb42
    122  fb42				   .bug_movement_load
    123  fb42		       a6 80		      ldx	Temp+0
    124  fb44
    125  fb44				   .bug_movement_x
    126  fb44		       a4 b6		      ldy	BugSpeed
    127  fb46
    128  fb46							; Alter X Position
    129  fb46		       a5 81		      lda	Temp+1
    130  fb48		       29 01		      and	#%00000001
    131  fb4a
    132  fb4a				   .bug_movement_x_check
    133  fb4a		       c9 01		      cmp	#1
    134  fb4c		       d0 08		      bne	.bug_movement_x_right
    135  fb4e
    136  fb4e				   .bug_movement_x_left
    137  fb4e		       d6 b9		      dec	BugPosX,x
    138  fb50		       88		      dey
    139  fb51		       d0 fb		      bne	.bug_movement_x_left
    140  fb53
    141  fb53		       4c 5b fb 	      jmp	.bug_movement_y
    142  fb56
    143  fb56				   .bug_movement_x_right
    144  fb56		       f6 b9		      inc	BugPosX,x
    145  fb58		       88		      dey
    146  fb59		       d0 fb		      bne	.bug_movement_x_right
    147  fb5b
    148  fb5b				   .bug_movement_y
    149  fb5b		       a4 b6		      ldy	BugSpeed
    150  fb5d
    151  fb5d							; Alter Y Position
    152  fb5d		       a5 81		      lda	Temp+1
    153  fb5f		       29 02		      and	#%00000010
    154  fb61		       4a		      lsr
    155  fb62
    156  fb62				   .bug_movement_y_check
    157  fb62		       c9 01		      cmp	#1
    158  fb64		       d0 08		      bne	.bug_movement_y_down
    159  fb66
    160  fb66				   .bug_movement_y_up
    161  fb66		       f6 bb		      inc	BugPosY,x
    162  fb68		       88		      dey
    163  fb69		       d0 fb		      bne	.bug_movement_y_up
    164  fb6b
    165  fb6b		       4c 73 fb 	      jmp	.bug_movement_boundary
    166  fb6e
    167  fb6e				   .bug_movement_y_down
    168  fb6e		       d6 bb		      dec	BugPosY,x
    169  fb70		       88		      dey
    170  fb71		       d0 fb		      bne	.bug_movement_y_down
    171  fb73
    172  fb73				   .bug_movement_boundary
    173  fb73		       b5 b9		      lda	BugPosX,x
    174  fb75		       b4 bb		      ldy	BugPosY,x
    175  fb77
    176  fb77				   .bug_movement_boundary_left
    177  fb77		       c9 08		      cmp	#BUG_BOUNDARY
    178  fb79		       b0 05		      bcs	.bug_movement_boundary_right
    179  fb7b		       a9 08		      lda	#BUG_BOUNDARY
    180  fb7d		       4c 86 fb 	      jmp	.bug_movement_boundary_top
    181  fb80
    182  fb80				   .bug_movement_boundary_right
    183  fb80		       c9 98		      cmp	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    184  fb82		       90 02		      bcc	.bug_movement_boundary_top
    185  fb84		       a9 98		      lda	#(KERNEL_WIDTH/2)-BUG_BOUNDARY
    186  fb86
    187  fb86				   .bug_movement_boundary_top
    188  fb86		       c0 08		      cpy	#BUG_BOUNDARY
    189  fb88		       b0 05		      bcs	.bug_movement_boundary_bottom
    190  fb8a		       a0 08		      ldy	#BUG_BOUNDARY
    191  fb8c		       4c 95 fb 	      jmp	.bug_movement_store
    192  fb8f
    193  fb8f				   .bug_movement_boundary_bottom
    194  fb8f		       c0 a5		      cpy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    195  fb91		       90 02		      bcc	.bug_movement_store
    196  fb93		       a0 a5		      ldy	#KERNEL_SCANLINES-SCORE_LINES-BUG_BOUNDARY
    197  fb95
    198  fb95				   .bug_movement_store
    199  fb95		       95 b9		      sta	BugPosX,x
    200  fb97		       94 bb		      sty	BugPosY,x
    201  fb99
    202  fb99				   .bug_movement_return
    203  fb99		       60		      rts
    204  fb9a
    205  fb9a				   BugCollision
    206  fb9a
    207  fb9a		       e0 01		      cpx	#1
    208  fb9c		       f0 05		      beq	.bug_collision_m1
    209  fb9e
    210  fb9e				   .bug_collision_m0
    211  fb9e							; Collision for M0 (V set)
    212  fb9e		       24 00		      bit	CXM0P
    213  fba0		       70 06		      bvs	.bug_collision_active
    214  fba2		       60		      rts
    215  fba3
    216  fba3				   .bug_collision_m1
    217  fba3							; Collision for M1 (N set)
    218  fba3		       24 01		      bit	CXM1P
    219  fba5		       30 01		      bmi	.bug_collision_active
    220  fba7		       60		      rts
    221  fba8
    222  fba8				   .bug_collision_active
    223  fba8
    224  fba8							; Reduce players score
    225  fba8		       a5 95		      lda	ScoreValue
    226  fbaa		       f0 02		      beq	.bug_collision_score_skip
    227  fbac		       c6 95		      dec	ScoreValue
    228  fbae				   .bug_collision_score_skip
    229  fbae
    230  fbae							; Play sound
    231  fbae		       20 0b fc 	      jsr	BugColSample
    232  fbb1
    233  fbb1		       60		      rts
    234  fbb2
    235  fbb2				   BugStunCollision
    236  fbb2
    237  fbb2		       e0 01		      cpx	#1
    238  fbb4		       f0 05		      beq	.bug_stun_collision_m1
    239  fbb6
    240  fbb6				   .bug_stun_collision_m0
    241  fbb6							; Collision for M0 (V set)
    242  fbb6		       24 00		      bit	CXM0P
    243  fbb8		       70 06		      bvs	.bug_stun_collision_active
    244  fbba		       60		      rts
    245  fbbb
    246  fbbb				   .bug_stun_collision_m1
    247  fbbb							; Collision for M1 (N set)
    248  fbbb		       24 01		      bit	CXM1P
    249  fbbd		       30 01		      bmi	.bug_stun_collision_active
    250  fbbf		       60		      rts
    251  fbc0
    252  fbc0				   .bug_stun_collision_active
    253  fbc0							; Add health to player
    254  fbc0		       18		      clc
    255  fbc1		       a5 95		      lda	ScoreValue
    256  fbc3		       69 03		      adc	#BUG_HP
    257  fbc5		       90 02		      bcc	.bug_stun_collision_active_hp_skip
    258  fbc7		       a9 ff		      lda	#$ff
    259  fbc9				   .bug_stun_collision_active_hp_skip
    260  fbc9		       85 95		      sta	ScoreValue
    261  fbcb
    262  fbcb							; Add points to score
    263  fbcb		       18		      clc
    264  fbcc		       a5 96		      lda	ScoreValue+1
    265  fbce		       69 04		      adc	#BUG_POINTS
    266  fbd0		       85 96		      sta	ScoreValue+1
    267  fbd2
    268  fbd2							; Reset bug
    269  fbd2		       20 ee fa 	      jsr	BugReset
    270  fbd5
    271  fbd5							; Play sample
    272  fbd5		       20 fa fb 	      jsr	BugSample
    273  fbd8
    274  fbd8		       60		      rts
    275  fbd9
    276  fbd9							; Horizontal Positioning
    277  fbd9
    278  fbd9				   BugPosition
    279  fbd9
    280  fbd9		       a2 02		      ldx	#2
    281  fbdb		       a5 b9		      lda	BugPosX+0
    282  fbdd		       20 00 f0 	      jsr	PosObject
    283  fbe0
    284  fbe0		       a2 03		      ldx	#3
    285  fbe2		       a5 ba		      lda	BugPosX+1
    286  fbe4		       20 00 f0 	      jsr	PosObject
    287  fbe7
    288  fbe7		       60		      rts
    289  fbe8
    290  fbe8							; Scanline Draw
    291  fbe8
    292  fbe8				   BugDrawStart
    293  fbe8
    294  fbe8		       a0 01		      ldy	#1
    295  fbea				   .bug_draw_start_loop
    296  fbea
    297  fbea							; Set missile 0 & 1 to be 8 clock size
    298  fbea							;lda NuSiz0,y
    299  fbea							;ora #%00110000
    300  fbea							;sta NuSiz0,y
    301  fbea							;sta NUSIZ0,y
    302  fbea
    303  fbea							; Setup half scanline positions
    304  fbea		       b9 bb 00 	      lda	BugPosY,y
    305  fbed		       4a		      lsr
    306  fbee		       99 bd 00 	      sta	BugDrawPosBottom,y
    307  fbf1
    308  fbf1		       69 04		      adc	#BUG_SIZE/2
    309  fbf3		       99 bf 00 	      sta	BugDrawPosTop,y
    310  fbf6
    311  fbf6		       88		      dey
    312  fbf7		       10 f1		      bpl	.bug_draw_start_loop
    313  fbf9
    314  fbf9		       60		      rts
    315  fbfa
    316  fbfa				   BugSample
    317  fbfa		       a9 1e		      lda	#BUG_SAMPLE_LEN
    318  fbfc		       85 92		      sta	SampleStep
    319  fbfe		       a9 03		      lda	#BUG_SAMPLE_C
    320  fc00		       85 16		      sta	AUDC1
    321  fc02		       a9 14		      lda	#BUG_SAMPLE_F
    322  fc04		       85 18		      sta	AUDF1
    323  fc06		       a9 04		      lda	#BUG_SAMPLE_V
    324  fc08		       85 1a		      sta	AUDV1
    325  fc0a		       60		      rts
    326  fc0b
    327  fc0b				   BugColSample
    328  fc0b		       a9 01		      lda	#BUG_COL_SAMPLE_LEN
    329  fc0d		       85 92		      sta	SampleStep
    330  fc0f		       a9 08		      lda	#BUG_COL_SAMPLE_C
    331  fc11		       85 16		      sta	AUDC1
    332  fc13		       a9 08		      lda	#BUG_COL_SAMPLE_F
    333  fc15		       85 18		      sta	AUDF1
    334  fc17		       a9 03		      lda	#BUG_COL_SAMPLE_V
    335  fc19		       85 1a		      sta	AUDV1
    336  fc1b		       60		      rts
------- FILE game.asm
------- FILE objects/swatter.asm LEVEL 3 PASS 2
      0  fc1c					      include	"objects/swatter.asm"
      1  fc1c							;==================
      2  fc1c							; Swatter (player1)
      3  fc1c							;==================
      4  fc1c
      5  fc1c							; Constants
      6  fc1c
      7  fc1c		       00 30	   SWATTER_COLOR =	#$30
      8  fc1c		       00 0e	   SWATTER_BW_COLOR =	#$0E
      9  fc1c		       00 36	   SWATTER_HOLD_COLOR =	#$36
     10  fc1c		       00 04	   SWATTER_HOLD_BW_COLOR =	#$04
     11  fc1c
     12  fc1c		       00 14	   SWATTER_SPRITE_SIZE =	#20
     13  fc1c		       00 28	   SWATTER_SIZE =	#SWATTER_SPRITE_SIZE*2
     14  fc1c
     15  fc1c		       00 3c	   SWATTER_HOLD_TIME =	60
     16  fc1c		       00 1e	   SWATTER_ACTIVE_TIME =	60/2
     17  fc1c
     18  fc1c		       00 00	   SWATTER_STATE_WAIT =	#%00000000
     19  fc1c		       00 80	   SWATTER_STATE_HOLD =	#%10000000
     20  fc1c		       00 c0	   SWATTER_STATE_ACTIVE =	#%11000000
     21  fc1c
     22  fc1c		       00 02	   SWATTER_HOLD_SAMPLE_C =	2
     23  fc1c		       00 04	   SWATTER_HOLD_SAMPLE_V =	4
     24  fc1c		       00 15	   SWATTER_HOLD_SAMPLE_F_MIN =	21	; Starting frequency
     25  fc1c		       00 01	   SWATTER_HOLD_SAMPLE_F_MAX =	1
     26  fc1c		       00 03	   SWATTER_HOLD_SAMPLE_LEN =	#SWATTER_HOLD_TIME/(SWATTER_HOLD_SAMPLE_F_MIN-SWATTER_HOLD_SAMPLE_F_MAX)	; Time between each frequency
     27  fc1c
     28  fc1c		       00 14	   SWATTER_ACTIVE_SAMPLE_LEN =	20
     29  fc1c		       00 08	   SWATTER_ACTIVE_SAMPLE_C =	8	; 15
     30  fc1c		       00 0c	   SWATTER_ACTIVE_SAMPLE_F =	12	; 5
     31  fc1c		       00 04	   SWATTER_ACTIVE_SAMPLE_V =	4
     32  fc1c
     33  fc1c		       00 14	   SWATTER_HIT_SAMPLE_LEN =	20
     34  fc1c		       00 03	   SWATTER_HIT_SAMPLE_C =	3
     35  fc1c		       00 06	   SWATTER_HIT_SAMPLE_F =	6
     36  fc1c		       00 04	   SWATTER_HIT_SAMPLE_V =	4
     37  fc1c
     38  fc1c							; Initialization
     39  fc1c
     40  fc1c				   SwatterInit
     41  fc1c
     42  fc1c		       20 f4 fc 	      jsr	SwatterReset
     43  fc1f
     44  fc1f		       60		      rts
     45  fc20
     46  fc20							; Frame Update
     47  fc20
     48  fc20				   SwatterUpdate
     49  fc20
     50  fc20							; Check b/w
     51  fc20		       ad 82 02 	      lda	SWCHB
     52  fc23		       29 08		      and	#%00001000
     53  fc25		       f0 10		      beq	.swatter_update_bw
     54  fc27
     55  fc27				   .swatter_update_color
     56  fc27		       a5 c3		      lda	SwatterState
     57  fc29		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
     58  fc2b		       d0 05		      bne	.swatter_update_color_hold
     59  fc2d				   .swatter_update_color_active
     60  fc2d		       a9 30		      lda	#SWATTER_COLOR
     61  fc2f		       4c 44 fc 	      jmp	.swatter_update_color_set
     62  fc32				   .swatter_update_color_hold
     63  fc32		       a9 36		      lda	#SWATTER_HOLD_COLOR
     64  fc34		       4c 44 fc 	      jmp	.swatter_update_color_set
     65  fc37
     66  fc37				   .swatter_update_bw
     67  fc37		       a5 c3		      lda	SwatterState
     68  fc39		       c9 80		      cmp	#SWATTER_STATE_HOLD
     69  fc3b		       d0 05		      bne	.swatter_update_bw_active
     70  fc3d				   .swatter_update_bw_hold
     71  fc3d		       a9 04		      lda	#SWATTER_HOLD_BW_COLOR
     72  fc3f		       4c 44 fc 	      jmp	.swatter_update_color_set
     73  fc42				   .swatter_update_bw_active
     74  fc42		       a9 0e		      lda	#SWATTER_BW_COLOR
     75  fc44
     76  fc44				   .swatter_update_color_set
     77  fc44		       85 c4		      sta	SwatterColor
     78  fc46
     79  fc46				   .swatter_update_hold_sample
     80  fc46		       a4 c3		      ldy	SwatterState
     81  fc48		       c0 80		      cpy	#SWATTER_STATE_HOLD
     82  fc4a		       d0 0f		      bne	.swatter_update_state
     83  fc4c
     84  fc4c		       c6 cb		      dec	SwatterSampleCount
     85  fc4e		       d0 0b		      bne	.swatter_update_state
     86  fc50
     87  fc50		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
     88  fc52		       85 cb		      sta	SwatterSampleCount
     89  fc54
     90  fc54		       c6 cc		      dec	SwatterSampleF
     91  fc56		       a4 cc		      ldy	SwatterSampleF
     92  fc58		       20 14 fd 	      jsr	SwatterHoldSample
     93  fc5b
     94  fc5b				   .swatter_update_state
     95  fc5b		       a6 8e		      ldx	FrameTimer+1
     96  fc5d		       d0 2d		      bne	.swatter_update_collision
     97  fc5f
     98  fc5f		       a4 c3		      ldy	SwatterState
     99  fc61		       c0 00		      cpy	#SWATTER_STATE_WAIT
    100  fc63		       f0 0a		      beq	.swatter_update_state_wait
    101  fc65
    102  fc65		       c0 80		      cpy	#SWATTER_STATE_HOLD
    103  fc67		       f0 18		      beq	.swatter_update_state_hold
    104  fc69
    105  fc69							; Else we're at the end of the active state
    106  fc69		       20 f4 fc 	      jsr	SwatterReset
    107  fc6c		       4c 9b fc 	      jmp	.swatter_update_return
    108  fc6f
    109  fc6f				   .swatter_update_state_wait
    110  fc6f		       a0 15		      ldy	#SWATTER_HOLD_SAMPLE_F_MIN
    111  fc71		       84 cc		      sty	SwatterSampleF
    112  fc73		       20 14 fd 	      jsr	SwatterHoldSample
    113  fc76
    114  fc76		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    115  fc78		       85 cb		      sta	SwatterSampleCount
    116  fc7a
    117  fc7a		       a9 80		      lda	#SWATTER_STATE_HOLD
    118  fc7c		       a6 c6		      ldx	SwatterHoldTime
    119  fc7e		       4c 88 fc 	      jmp	.swatter_update_state_set
    120  fc81
    121  fc81				   .swatter_update_state_hold
    122  fc81		       20 23 fd 	      jsr	SwatterActiveSample
    123  fc84
    124  fc84		       a9 c0		      lda	#SWATTER_STATE_ACTIVE
    125  fc86		       a2 1e		      ldx	#SWATTER_ACTIVE_TIME
    126  fc88
    127  fc88				   .swatter_update_state_set
    128  fc88		       85 c3		      sta	SwatterState
    129  fc8a		       86 8e		      stx	FrameTimer+1
    130  fc8c
    131  fc8c				   .swatter_update_collision
    132  fc8c							; Check 1 frame after active
    133  fc8c		       a5 c3		      lda	SwatterState
    134  fc8e		       c9 c0		      cmp	#SWATTER_STATE_ACTIVE
    135  fc90		       d0 09		      bne	.swatter_update_return
    136  fc92		       a6 8e		      ldx	FrameTimer+1
    137  fc94		       e0 1d		      cpx	#SWATTER_ACTIVE_TIME-1
    138  fc96		       d0 03		      bne	.swatter_update_return
    139  fc98
    140  fc98		       20 9c fc 	      jsr	SwatterCollision
    141  fc9b
    142  fc9b				   .swatter_update_return
    143  fc9b		       60		      rts
    144  fc9c
    145  fc9c				   SwatterCollision
    146  fc9c		       24 00		      bit	CXM0P
    147  fc9e		       30 09		      bmi	.swatter_collision_m0
    148  fca0
    149  fca0		       24 01		      bit	CXM1P
    150  fca2		       70 0a		      bvs	.swatter_collision_m1
    151  fca4
    152  fca4		       24 07		      bit	CXPPMM
    153  fca6		       30 0e		      bmi	.swatter_collision_p0
    154  fca8
    155  fca8		       60		      rts
    156  fca9
    157  fca9				   .swatter_collision_m0
    158  fca9		       a2 00		      ldx	#0
    159  fcab		       4c b0 fc 	      jmp	.swatter_collision_bug_reset
    160  fcae
    161  fcae				   .swatter_collision_m1
    162  fcae		       a2 01		      ldx	#1
    163  fcb0
    164  fcb0				   .swatter_collision_bug_reset
    165  fcb0		       20 ee fa 	      jsr	BugReset
    166  fcb3		       4c c6 fc 	      jmp	.swatter_collision_active
    167  fcb6
    168  fcb6				   .swatter_collision_p0
    169  fcb6
    170  fcb6		       a5 95		      lda	ScoreValue
    171  fcb8		       c5 c7		      cmp	SwatterHitDamage
    172  fcba		       90 06		      bcc	.swatter_collision_p0_zero
    173  fcbc							;beq .swatter_collision_p0_zero
    174  fcbc
    175  fcbc		       18		      clc
    176  fcbd		       e5 c7		      sbc	SwatterHitDamage
    177  fcbf		       4c c4 fc 	      jmp	.swatter_collision_p0_set
    178  fcc2
    179  fcc2				   .swatter_collision_p0_zero
    180  fcc2		       a9 00		      lda	#0
    181  fcc4
    182  fcc4				   .swatter_collision_p0_set
    183  fcc4		       85 95		      sta	ScoreValue
    184  fcc6
    185  fcc6				   .swatter_collision_active
    186  fcc6		       20 34 fd 	      jsr	SwatterHitSample
    187  fcc9
    188  fcc9		       60		      rts
    189  fcca
    190  fcca				   SwatterPosition
    191  fcca
    192  fcca							; Set Position
    193  fcca		       a2 01		      ldx	#1	; Object (player1)
    194  fccc		       a5 c1		      lda	SwatterPos	; X Position
    195  fcce		       20 00 f0 	      jsr	PosObject
    196  fcd1
    197  fcd1		       60		      rts
    198  fcd2
    199  fcd2							; Scanline Draw
    200  fcd2
    201  fcd2				   SwatterDrawStart
    202  fcd2
    203  fcd2							; Set sprite color
    204  fcd2		       a5 c4		      lda	SwatterColor
    205  fcd4		       85 07		      sta	COLUP1
    206  fcd6
    207  fcd6							; Hide swatter if wait state
    208  fcd6		       24 c3		      bit	SwatterState
    209  fcd8		       30 09		      bmi	.swatter_draw_start
    210  fcda
    211  fcda		       a9 ff		      lda	#-1
    212  fcdc		       85 c8		      sta	SwatterIndex
    213  fcde							;sta SwatterDrawPos
    214  fcde		       a9 00		      lda	#0
    215  fce0		       85 ca		      sta	SwatterLine
    216  fce2
    217  fce2		       60		      rts
    218  fce3
    219  fce3				   .swatter_draw_start
    220  fce3
    221  fce3							; Note: Doesn't need vertical delay
    222  fce3
    223  fce3							; Calculate starting position
    224  fce3		       a5 c2		      lda	SwatterPos+1	; Y Position
    225  fce5		       4a		      lsr
    226  fce6		       18		      clc
    227  fce7		       69 14		      adc	#SWATTER_SPRITE_SIZE
    228  fce9		       85 c9		      sta	SwatterDrawPos
    229  fceb
    230  fceb							; Initialize sprite index
    231  fceb		       a9 13		      lda	#SWATTER_SPRITE_SIZE-1
    232  fced		       85 c8		      sta	SwatterIndex
    233  fcef		       a9 00		      lda	#0
    234  fcf1		       85 ca		      sta	SwatterLine
    235  fcf3
    236  fcf3		       60		      rts
    237  fcf4
    238  fcf4				   SwatterReset
    239  fcf4							; Initialize Swatter State
    240  fcf4		       a9 00		      lda	#SWATTER_STATE_WAIT
    241  fcf6		       85 c3		      sta	SwatterState
    242  fcf8
    243  fcf8							; Set Wait Timer
    244  fcf8		       20 13 f0 	      jsr	Random
    245  fcfb		       a5 84		      lda	Rand8
    246  fcfd		       29 3f		      and	#$3f
    247  fcff		       18		      clc
    248  fd00		       65 c5		      adc	SwatterWaitTime
    249  fd02		       85 8e		      sta	FrameTimer+1
    250  fd04
    251  fd04							; Set Random Position
    252  fd04		       20 13 f0 	      jsr	Random
    253  fd07		       a5 84		      lda	Rand8	; X Position
    254  fd09		       29 7f		      and	#$7f
    255  fd0b		       85 c1		      sta	SwatterPos+0
    256  fd0d		       a5 85		      lda	Rand16	; Y Position
    257  fd0f		       29 7e		      and	#$7e	; Ensure that Y position is even
    258  fd11		       85 c2		      sta	SwatterPos+1
    259  fd13
    260  fd13		       60		      rts
    261  fd14
    262  fd14				   SwatterHoldSample
    263  fd14		       a9 03		      lda	#SWATTER_HOLD_SAMPLE_LEN
    264  fd16		       85 92		      sta	SampleStep
    265  fd18		       a9 02		      lda	#SWATTER_HOLD_SAMPLE_C
    266  fd1a		       85 16		      sta	AUDC1
    267  fd1c		       a9 04		      lda	#SWATTER_HOLD_SAMPLE_V
    268  fd1e		       85 1a		      sta	AUDV1
    269  fd20
    270  fd20		       84 18		      sty	AUDF1	; Store value of y as frequency
    271  fd22
    272  fd22		       60		      rts
    273  fd23
    274  fd23				   SwatterActiveSample
    275  fd23		       a9 14		      lda	#SWATTER_ACTIVE_SAMPLE_LEN
    276  fd25		       85 92		      sta	SampleStep
    277  fd27		       a9 08		      lda	#SWATTER_ACTIVE_SAMPLE_C
    278  fd29		       85 16		      sta	AUDC1
    279  fd2b		       a9 0c		      lda	#SWATTER_ACTIVE_SAMPLE_F
    280  fd2d		       85 18		      sta	AUDF1
    281  fd2f		       a9 04		      lda	#SWATTER_ACTIVE_SAMPLE_V
    282  fd31		       85 1a		      sta	AUDV1
    283  fd33		       60		      rts
    284  fd34
    285  fd34				   SwatterHitSample
    286  fd34		       a9 14		      lda	#SWATTER_HIT_SAMPLE_LEN
    287  fd36		       85 92		      sta	SampleStep
    288  fd38		       a9 03		      lda	#SWATTER_HIT_SAMPLE_C
    289  fd3a		       85 16		      sta	AUDC1
    290  fd3c		       a9 06		      lda	#SWATTER_HIT_SAMPLE_F
    291  fd3e		       85 18		      sta	AUDF1
    292  fd40		       a9 04		      lda	#SWATTER_HIT_SAMPLE_V
    293  fd42		       85 1a		      sta	AUDV1
    294  fd44		       60		      rts
------- FILE game.asm
     22  fd45
     23  fd45							; Initialization
     24  fd45
     25  fd45				   GameInit
     26  fd45
     27  fd45							; Setup logic and kernel
      0  fd45					      SET_POINTER	VBlankPtr, GameVerticalBlank
      1  fd45				   .POINTER   SET	VBlankPtr
      2  fd45				   .ADDRESS   SET	GameVerticalBlank
      3  fd45
      4  fd45		       a9 82		      LDA	#<.ADDRESS
      5  fd47		       85 86		      STA	.POINTER
      6  fd49		       a9 fd		      LDA	#>.ADDRESS
      7  fd4b		       85 87		      STA	.POINTER+1
      8  fd4d
      0  fd4d					      SET_POINTER	KernelPtr, GameKernel
      1  fd4d				   .POINTER   SET	KernelPtr
      2  fd4d				   .ADDRESS   SET	GameKernel
      3  fd4d
      4  fd4d		       a9 fd		      LDA	#<.ADDRESS
      5  fd4f		       85 88		      STA	.POINTER
      6  fd51		       a9 fd		      LDA	#>.ADDRESS
      7  fd53		       85 89		      STA	.POINTER+1
      8  fd55
      0  fd55					      SET_POINTER	OverScanPtr, GameOverScan
      1  fd55				   .POINTER   SET	OverScanPtr
      2  fd55				   .ADDRESS   SET	GameOverScan
      3  fd55
      4  fd55		       a9 ac		      LDA	#<.ADDRESS
      5  fd57		       85 8a		      STA	.POINTER
      6  fd59		       a9 fd		      LDA	#>.ADDRESS
      7  fd5b		       85 8b		      STA	.POINTER+1
      8  fd5d
     31  fd5d
     32  fd5d							; Mute Audio
     33  fd5d		       a9 00		      lda	#0
     34  fd5f							;    sta AUDC0
     35  fd5f							;    sta AUDV0
     36  fd5f							;    sta AUDF0
     37  fd5f							;sta AUDC1
     38  fd5f		       85 1a		      sta	AUDV1
     39  fd61							;sta AUDF1
     40  fd61		       85 92		      sta	SampleStep
     41  fd63
     42  fd63							; Load Audio Settings
     43  fd63		       a9 02		      lda	#GAME_AUDIO_VOLUME
     44  fd65		       85 19		      sta	AUDV0
     45  fd67
     46  fd67							; Make it so that we play the first note immediately
     47  fd67		       a9 1f		      lda	#GAME_AUDIO_LENGTH-1
     48  fd69		       85 91		      sta	AudioStep
     49  fd6b		       a9 02		      lda	#2
     50  fd6d		       85 8d		      sta	FrameTimer
     51  fd6f
     52  fd6f							; Reset NuSiz
     53  fd6f							;    lda #0
     54  fd6f							;    sta NuSiz0
     55  fd6f							;    sta NUSIZ0
     56  fd6f							;    sta NuSiz1
     57  fd6f							;    sta NUSIZ1
     58  fd6f
     59  fd6f							; Initialize Objects
     60  fd6f		       20 11 f6 	      jsr	LevelInit
     61  fd72		       20 ce f6 	      jsr	ScoreInit
     62  fd75		       20 55 f8 	      jsr	SpiderInit
     63  fd78		       20 68 f9 	      jsr	LineInit
     64  fd7b		       20 e5 fa 	      jsr	BugInit
     65  fd7e		       20 1c fc 	      jsr	SwatterInit
     66  fd81
     67  fd81		       60		      rts
     68  fd82
     69  fd82				   GameVerticalBlank
     70  fd82
     71  fd82							; Refresh random values
     72  fd82		       20 13 f0 	      jsr	Random
     73  fd85
     74  fd85							; Update Objects
     75  fd85		       20 27 f6 	      jsr	LevelUpdate
     76  fd88		       20 6a f8 	      jsr	SpiderUpdate
     77  fd8b		       20 6d f9 	      jsr	LineUpdate
     78  fd8e		       20 1f fb 	      jsr	BugUpdate
     79  fd91		       20 20 fc 	      jsr	SwatterUpdate
     80  fd94		       20 d7 f6 	      jsr	ScoreUpdate
     81  fd97
     82  fd97							; Reset Collisions
     83  fd97		       85 2c		      sta	CXCLR
     84  fd99
     85  fd99							; Clear horizontal movement
     86  fd99		       85 2b		      sta	HMCLR
     87  fd9b
     88  fd9b							; Update Positions
     89  fd9b		       20 40 f9 	      jsr	SpiderPosition
     90  fd9e		       20 81 fa 	      jsr	LinePosition
     91  fda1		       20 d9 fb 	      jsr	BugPosition
     92  fda4		       20 ca fc 	      jsr	SwatterPosition
     93  fda7
     94  fda7							; Set final x positions
     95  fda7		       85 02		      sta	WSYNC
     96  fda9		       85 2a		      sta	HMOVE
     97  fdab
     98  fdab		       60		      rts
     99  fdac
    100  fdac				   GameOverScan
    101  fdac
    102  fdac							; Audio Routines
    103  fdac		       20 c4 fd 	      jsr	GameAudio
    104  fdaf		       20 b6 fd 	      jsr	GameSample
    105  fdb2
    106  fdb2							; State Routines
    107  fdb2		       20 f4 fd 	      jsr	GameDeath
    108  fdb5
    109  fdb5		       60		      rts
    110  fdb6
    111  fdb6				   GameSample
    112  fdb6
    113  fdb6		       a6 92		      ldx	SampleStep
    114  fdb8		       f0 07		      beq	.game_sample_return
    115  fdba
    116  fdba		       ca		      dex
    117  fdbb		       d0 04		      bne	.game_sample_return
    118  fdbd
    119  fdbd				   .game_sample_mute
    120  fdbd		       a9 00		      lda	#0
    121  fdbf		       85 1a		      sta	AUDV1
    122  fdc1							;sta AUDF1
    123  fdc1							;sta AUDC1
    124  fdc1
    125  fdc1				   .game_sample_return
    126  fdc1		       86 92		      stx	SampleStep
    127  fdc3		       60		      rts
    128  fdc4
    129  fdc4				   GameAudio
    130  fdc4
    131  fdc4		       a6 8d		      ldx	FrameTimer
    132  fdc6		       e0 01		      cpx	#GAME_AUDIO_OFFSET
    133  fdc8		       f0 25		      beq	.game_audio_mute_note
    134  fdca		       e0 00		      cpx	#0
    135  fdcc		       d0 25		      bne	.game_audio_return
    136  fdce
    137  fdce							; Reset Timer
    138  fdce		       a6 94		      ldx	GameAudioStep
    139  fdd0		       86 8d		      stx	FrameTimer
    140  fdd2
    141  fdd2				   .game_audio_play
    142  fdd2
    143  fdd2							; Increment melody position
    144  fdd2		       a4 91		      ldy	AudioStep
    145  fdd4		       c8		      iny
    146  fdd5
    147  fdd5		       c0 20		      cpy	#GAME_AUDIO_LENGTH
    148  fdd7		       d0 02		      bne	.game_audio_play_note
    149  fdd9
    150  fdd9							; Loop our audio step
    151  fdd9		       a0 00		      ldy	#0
    152  fddb
    153  fddb				   .game_audio_play_note
    154  fddb
    155  fddb							; Save current position
    156  fddb		       84 91		      sty	AudioStep
    157  fddd
    158  fddd							; Melody Line
    159  fddd		       b9 fc fe 	      lda	GameAudio0,y
    160  fde0		       c9 ff		      cmp	#$FF
    161  fde2		       f0 0b		      beq	.game_audio_mute_note
    162  fde4		       85 17		      sta	AUDF0
    163  fde6		       a9 06		      lda	#GAME_AUDIO_TONE
    164  fde8		       85 15		      sta	AUDC0
    165  fdea		       a9 02		      lda	#GAME_AUDIO_VOLUME
    166  fdec		       85 19		      sta	AUDV0
    167  fdee
    168  fdee		       60		      rts
    169  fdef
    170  fdef				   .game_audio_mute_note
    171  fdef
    172  fdef		       a9 00		      lda	#0
    173  fdf1							;sta AUDF0
    174  fdf1							;sta AUDC0
    175  fdf1		       85 19		      sta	AUDV0
    176  fdf3
    177  fdf3				   .game_audio_return
    178  fdf3		       60		      rts
    179  fdf4
    180  fdf4				   GameDeath
    181  fdf4		       a5 95		      lda	ScoreValue+0
    182  fdf6		       d0 04		      bne	.game_death_return
    183  fdf8
    184  fdf8							; Show Game Over Screen
    185  fdf8		       18		      clc		; Define lose
    186  fdf9		       20 1c ff 	      jsr	OverInit
    187  fdfc
    188  fdfc				   .game_death_return
    189  fdfc		       60		      rts
    190  fdfd
    191  fdfd				   GameKernel
    192  fdfd
    193  fdfd							; Turn on display
    194  fdfd		       a9 00		      lda	#0
    195  fdff		       85 01		      sta	VBLANK
    196  fe01
    197  fe01				   .game_kernel_score
    198  fe01
    199  fe01							; Draw Score on top first
    200  fe01		       20 3a f7 	      jsr	ScoreDraw
    201  fe04
    202  fe04				   .game_kernel_objects_start
    203  fe04
    204  fe04							; Setup Drawing Objects
    205  fe04		       20 4c f8 	      jsr	WebDrawStart
    206  fe07		       20 48 f9 	      jsr	SpiderDrawStart
    207  fe0a		       20 d2 fc 	      jsr	SwatterDrawStart
    208  fe0d		       20 89 fa 	      jsr	LineDrawStart
    209  fe10		       20 e8 fb 	      jsr	BugDrawStart
    210  fe13
    211  fe13							; Set missle and sprite sizes
    212  fe13		       a9 35		      lda	#%00110101
    213  fe15		       85 04		      sta	NUSIZ0
    214  fe17		       a9 37		      lda	#%00110111
    215  fe19		       85 05		      sta	NUSIZ1
    216  fe1b
    217  fe1b							; Set playfield settings and ball size
    218  fe1b		       a9 21		      lda	#%00100001
    219  fe1d		       85 0a		      sta	CTRLPF
    220  fe1f
    221  fe1f							; Half scanline counter
    222  fe1f		       a2 54		      ldx	#(KERNEL_SCANLINES-SCORE_LINES)/2-2
    223  fe21
    224  fe21							; 6 line counter
    225  fe21		       a9 00		      lda	#0
    226  fe23		       85 82		      sta	Temp+2
    227  fe25
    228  fe25							; Load background color and start first line
    229  fe25		       a5 a2		      lda	WebColor+0
    230  fe27		       85 02		      sta	WSYNC
    231  fe29		       85 09		      sta	COLUBK
    232  fe2b
    233  fe2b				   .game_kernel_objects 		; 5 or 10 cycles
    234  fe2b
    235  fe2b		       a5 82		      lda	Temp+2	; 3
    236  fe2d		       d0 1a		      bne	.game_kernel_missle	; 2*
    237  fe2f
    238  fe2f		       a9 03		      lda	#3	; 2
    239  fe31		       85 82		      sta	Temp+2	; 3
    240  fe33
    241  fe33				   .game_kernel_web		; 32 cycles
    242  fe33							; Web
    243  fe33
    244  fe33		       a4 a1		      ldy	WebIndex	; 3
    245  fe35
    246  fe35							; Load Image
    247  fe35		       b9 50 f1 	      lda	WebImagePF0,y	; 4
    248  fe38		       85 0d		      sta	PF0	; 3
    249  fe3a		       b9 6c f1 	      lda	WebImagePF1,y	; 4
    250  fe3d		       85 0e		      sta	PF1	; 3
    251  fe3f		       b9 88 f1 	      lda	WebImagePF2,y	; 4
    252  fe42		       85 0f		      sta	PF2	; 3
    253  fe44
    254  fe44		       e6 a1		      inc	WebIndex	; 5
    255  fe46
    256  fe46		       4c 73 fe 	      jmp	.game_kernel_line	; 3
    257  fe49
    258  fe49				   .game_kernel_missle
    259  fe49
    260  fe49				   .game_kernel_missle_bug_0		; 18 cycles
    261  fe49							; First Bug
    262  fe49
    263  fe49							; Top
    264  fe49		       e4 bf		      cpx	BugDrawPosTop+0	; 3
    265  fe4b		       b0 09		      bcs	.game_kernel_missle_bug_0_off_1	; 2 or 3 if branching
    266  fe4d
    267  fe4d							; Bottom
    268  fe4d		       e4 bd		      cpx	BugDrawPosBottom+0	; 3
    269  fe4f		       90 08		      bcc	.game_kernel_missle_bug_0_off_2	; 2 or 3 if branching
    270  fe51
    271  fe51				   .game_kernel_missle_bug_0_on
    272  fe51		       a0 02		      ldy	#%00000010	; 2
    273  fe53		       4c 5c fe 	      jmp	.game_kernel_missle_bug_0_set	; 3
    274  fe56
    275  fe56				   .game_kernel_missle_bug_0_off_1
      0  fe56					      sleep	5
      1  fe56				   .CYCLES    SET	5
      2  fe56
      3  fe56				  -	      IF	.CYCLES < 2
      4  fe56				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe56				  -	      ERR
      6  fe56					      ENDIF
      7  fe56
      8  fe56					      IF	.CYCLES & 1
      9  fe56					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe56		       04 00		      nop	0
     11  fe58				  -	      ELSE
     12  fe58				  -	      bit	VSYNC
     13  fe58					      ENDIF
     14  fe58				   .CYCLES    SET	.CYCLES - 3
     15  fe58					      ENDIF
     16  fe58
     17  fe58					      REPEAT	.CYCLES / 2
     18  fe58		       ea		      nop
     19  fe59					      REPEND
    277  fe59				   .game_kernel_missle_bug_0_off_2
      0  fe59					      sleep	2
      1  fe59				   .CYCLES    SET	2
      2  fe59
      3  fe59				  -	      IF	.CYCLES < 2
      4  fe59				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe59				  -	      ERR
      6  fe59					      ENDIF
      7  fe59
      8  fe59				  -	      IF	.CYCLES & 1
      9  fe59				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe59				  -	      nop	0
     11  fe59				  -	      ELSE
     12  fe59				  -	      bit	VSYNC
     13  fe59				  -	      ENDIF
     14  fe59				  -.CYCLES    SET	.CYCLES - 3
     15  fe59					      ENDIF
     16  fe59
     17  fe59					      REPEAT	.CYCLES / 2
     18  fe59		       ea		      nop
     19  fe5a					      REPEND
    279  fe5a		       a0 00		      ldy	#%00000000	; 2
    280  fe5c				   .game_kernel_missle_bug_0_set
    281  fe5c		       84 1d		      sty	ENAM0	; 3
    282  fe5e
    283  fe5e				   .game_kernel_missle_bug_1		; 18 cycles
    284  fe5e							; Second Bug
    285  fe5e
    286  fe5e							; Top
    287  fe5e		       e4 c0		      cpx	BugDrawPosTop+1	; 3
    288  fe60		       b0 09		      bcs	.game_kernel_missle_bug_1_off_1	; 2 or 3 if branching
    289  fe62
    290  fe62							; Bottom
    291  fe62		       e4 be		      cpx	BugDrawPosBottom+1	; 3
    292  fe64		       90 08		      bcc	.game_kernel_missle_bug_1_off_2	; 2 or 3 if branching
    293  fe66
    294  fe66				   .game_kernel_missle_bug_1_on
    295  fe66		       a0 02		      ldy	#%00000010	; 2
    296  fe68		       4c 71 fe 	      jmp	.game_kernel_missle_bug_1_set	; 3
    297  fe6b
    298  fe6b				   .game_kernel_missle_bug_1_off_1
      0  fe6b					      sleep	5
      1  fe6b				   .CYCLES    SET	5
      2  fe6b
      3  fe6b				  -	      IF	.CYCLES < 2
      4  fe6b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe6b				  -	      ERR
      6  fe6b					      ENDIF
      7  fe6b
      8  fe6b					      IF	.CYCLES & 1
      9  fe6b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe6b		       04 00		      nop	0
     11  fe6d				  -	      ELSE
     12  fe6d				  -	      bit	VSYNC
     13  fe6d					      ENDIF
     14  fe6d				   .CYCLES    SET	.CYCLES - 3
     15  fe6d					      ENDIF
     16  fe6d
     17  fe6d					      REPEAT	.CYCLES / 2
     18  fe6d		       ea		      nop
     19  fe6e					      REPEND
    300  fe6e				   .game_kernel_missle_bug_1_off_2
      0  fe6e					      sleep	2
      1  fe6e				   .CYCLES    SET	2
      2  fe6e
      3  fe6e				  -	      IF	.CYCLES < 2
      4  fe6e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe6e				  -	      ERR
      6  fe6e					      ENDIF
      7  fe6e
      8  fe6e				  -	      IF	.CYCLES & 1
      9  fe6e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe6e				  -	      nop	0
     11  fe6e				  -	      ELSE
     12  fe6e				  -	      bit	VSYNC
     13  fe6e				  -	      ENDIF
     14  fe6e				  -.CYCLES    SET	.CYCLES - 3
     15  fe6e					      ENDIF
     16  fe6e
     17  fe6e					      REPEAT	.CYCLES / 2
     18  fe6e		       ea		      nop
     19  fe6f					      REPEND
    302  fe6f		       a0 00		      ldy	#%00000000	; 2
    303  fe71				   .game_kernel_missle_bug_1_set
    304  fe71		       84 1e		      sty	ENAM1	; 3
    305  fe73
    306  fe73				   .game_kernel_line		; 18 cycles
    307  fe73							; Line
    308  fe73
    309  fe73							; Top
    310  fe73		       e4 b5		      cpx	LineDrawPos+1	; 3
    311  fe75		       b0 09		      bcs	.game_kernel_line_set_off_1	; 2 or 3 if branching
    312  fe77
    313  fe77							; Bottom
    314  fe77		       e4 b4		      cpx	LineDrawPos+0	; 3
    315  fe79		       90 08		      bcc	.game_kernel_line_set_off_2	; 2 or 3 if branching
    316  fe7b
    317  fe7b				   .game_kernel_line_set_on
    318  fe7b		       a0 02		      ldy	#%00000010	; 2
    319  fe7d		       4c 86 fe 	      jmp	.game_kernel_line_set	; 3
    320  fe80
    321  fe80				   .game_kernel_line_set_off_1
      0  fe80					      sleep	5
      1  fe80				   .CYCLES    SET	5
      2  fe80
      3  fe80				  -	      IF	.CYCLES < 2
      4  fe80				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe80				  -	      ERR
      6  fe80					      ENDIF
      7  fe80
      8  fe80					      IF	.CYCLES & 1
      9  fe80					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe80		       04 00		      nop	0
     11  fe82				  -	      ELSE
     12  fe82				  -	      bit	VSYNC
     13  fe82					      ENDIF
     14  fe82				   .CYCLES    SET	.CYCLES - 3
     15  fe82					      ENDIF
     16  fe82
     17  fe82					      REPEAT	.CYCLES / 2
     18  fe82		       ea		      nop
     19  fe83					      REPEND
    323  fe83				   .game_kernel_line_set_off_2
      0  fe83					      sleep	2
      1  fe83				   .CYCLES    SET	2
      2  fe83
      3  fe83				  -	      IF	.CYCLES < 2
      4  fe83				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe83				  -	      ERR
      6  fe83					      ENDIF
      7  fe83
      8  fe83				  -	      IF	.CYCLES & 1
      9  fe83				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe83				  -	      nop	0
     11  fe83				  -	      ELSE
     12  fe83				  -	      bit	VSYNC
     13  fe83				  -	      ENDIF
     14  fe83				  -.CYCLES    SET	.CYCLES - 3
     15  fe83					      ENDIF
     16  fe83
     17  fe83					      REPEAT	.CYCLES / 2
     18  fe83		       ea		      nop
     19  fe84					      REPEND
    325  fe84		       a0 00		      ldy	#%00000000	; 2
    326  fe86				   .game_kernel_line_set
    327  fe86		       84 1f		      sty	ENABL	; 3
    328  fe88
    329  fe88							; Next Line
    330  fe88							;sleep 17 or 16
    331  fe88		       85 02		      sta	WSYNC
    332  fe8a
    333  fe8a				   .game_kernel_sprite
    334  fe8a
    335  fe8a				   .game_kernel_sprite_spider		; 34 cycles
    336  fe8a							; Spider
    337  fe8a
    338  fe8a		       a4 aa		      ldy	SpiderIndex	; 3
    339  fe8c		       30 16		      bmi	.game_kernel_sprite_spider_load_1	; At end of sprite / 2 or 3 if branching
    340  fe8e
    341  fe8e							; Check y position to see if we should be drawing
    342  fe8e		       8a		      txa		; 2
    343  fe8f		       e5 ab		      sbc	SpiderDrawPos	; 3
    344  fe91		       10 15		      bpl	.game_kernel_sprite_spider_load_2	; 2 or 3 if branching
    345  fe93
    346  fe93				   .game_kernel_sprite_spider_draw
    347  fe93
    348  fe93							; Decrement sprite index
    349  fe93		       88		      dey		; 2
    350  fe94		       10 05		      bpl	.game_kernel_sprite_spider_grab	; 2 or 3 if branching
    351  fe96
    352  fe96		       a9 00		      lda	#0	; 2
    353  fe98							;sleep 1
    354  fe98		       4c 9d fe 	      jmp	.game_kernel_sprite_spider_store	; 3
    355  fe9b
    356  fe9b				   .game_kernel_sprite_spider_grab
    357  fe9b		       b1 a4		      lda	(SpiderPtr),y	; 5
    358  fe9d				   .game_kernel_sprite_spider_store
    359  fe9d		       84 aa		      sty	SpiderIndex	; 3
    360  fe9f		       85 ac		      sta	SpiderLine	; 3
    361  fea1
    362  fea1		       4c b2 fe 	      jmp	.game_kernel_sprite_spider_load_3	; 3
    363  fea4
    364  fea4				   .game_kernel_sprite_spider_load_1
      0  fea4					      sleep	7
      1  fea4				   .CYCLES    SET	7
      2  fea4
      3  fea4				  -	      IF	.CYCLES < 2
      4  fea4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fea4				  -	      ERR
      6  fea4					      ENDIF
      7  fea4
      8  fea4					      IF	.CYCLES & 1
      9  fea4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fea4		       04 00		      nop	0
     11  fea6				  -	      ELSE
     12  fea6				  -	      bit	VSYNC
     13  fea6					      ENDIF
     14  fea6				   .CYCLES    SET	.CYCLES - 3
     15  fea6					      ENDIF
     16  fea6
     17  fea6					      REPEAT	.CYCLES / 2
     18  fea6		       ea		      nop
     17  fea6					      REPEND
     18  fea7		       ea		      nop
     19  fea8					      REPEND
    366  fea8				   .game_kernel_sprite_spider_load_2
      0  fea8					      sleep	15
      1  fea8				   .CYCLES    SET	15
      2  fea8
      3  fea8				  -	      IF	.CYCLES < 2
      4  fea8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fea8				  -	      ERR
      6  fea8					      ENDIF
      7  fea8
      8  fea8					      IF	.CYCLES & 1
      9  fea8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fea8		       04 00		      nop	0
     11  feaa				  -	      ELSE
     12  feaa				  -	      bit	VSYNC
     13  feaa					      ENDIF
     14  feaa				   .CYCLES    SET	.CYCLES - 3
     15  feaa					      ENDIF
     16  feaa
     17  feaa					      REPEAT	.CYCLES / 2
     18  feaa		       ea		      nop
     17  feaa					      REPEND
     18  feab		       ea		      nop
     17  feab					      REPEND
     18  feac		       ea		      nop
     17  feac					      REPEND
     18  fead		       ea		      nop
     17  fead					      REPEND
     18  feae		       ea		      nop
     17  feae					      REPEND
     18  feaf		       ea		      nop
     19  feb0					      REPEND
    368  feb0		       a5 ac		      lda	SpiderLine	; 3
    369  feb2				   .game_kernel_sprite_spider_load_3
    370  feb2		       85 1b		      sta	GRP0	; 3
    371  feb4
    372  feb4				   .game_kernel_sprite_swatter		; 30 cycles
    373  feb4							; Swatter
    374  feb4
    375  feb4							; Check if wait state
    376  feb4							;bit SwatterState
    377  feb4							;bpl .game_kernel_sprite_swatter_load
    378  feb4
    379  feb4		       a4 c8		      ldy	SwatterIndex	; 3
    380  feb6		       30 0f		      bmi	.game_kernel_sprite_swatter_load_1	; At end of sprite / 2 or 3 if branching
    381  feb8
    382  feb8							; Check y position to see if we should be drawing
    383  feb8		       8a		      txa		; 2
    384  feb9		       e5 c9		      sbc	SwatterDrawPos	; 3
    385  febb		       10 0e		      bpl	.game_kernel_sprite_swatter_load_2	; 2 or 3 if branching
    386  febd
    387  febd				   .game_kernel_sprite_swatter_draw
    388  febd		       b9 d4 f1 	      lda	SwatterSprite,y	; 4
    389  fec0		       85 ca		      sta	SwatterLine	; 3
    390  fec2
    391  fec2							; Decrement sprite index
    392  fec2		       c6 c8		      dec	SwatterIndex	; 5
    393  fec4
    394  fec4		       4c d3 fe 	      jmp	.game_kernel_sprite_swatter_line	; 3
    395  fec7
    396  fec7				   .game_kernel_sprite_swatter_load_1
      0  fec7					      sleep	7
      1  fec7				   .CYCLES    SET	7
      2  fec7
      3  fec7				  -	      IF	.CYCLES < 2
      4  fec7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fec7				  -	      ERR
      6  fec7					      ENDIF
      7  fec7
      8  fec7					      IF	.CYCLES & 1
      9  fec7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fec7		       04 00		      nop	0
     11  fec9				  -	      ELSE
     12  fec9				  -	      bit	VSYNC
     13  fec9					      ENDIF
     14  fec9				   .CYCLES    SET	.CYCLES - 3
     15  fec9					      ENDIF
     16  fec9
     17  fec9					      REPEAT	.CYCLES / 2
     18  fec9		       ea		      nop
     17  fec9					      REPEND
     18  feca		       ea		      nop
     19  fecb					      REPEND
    398  fecb				   .game_kernel_sprite_swatter_load_2
      0  fecb					      sleep	11
      1  fecb				   .CYCLES    SET	11
      2  fecb
      3  fecb				  -	      IF	.CYCLES < 2
      4  fecb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fecb				  -	      ERR
      6  fecb					      ENDIF
      7  fecb
      8  fecb					      IF	.CYCLES & 1
      9  fecb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fecb		       04 00		      nop	0
     11  fecd				  -	      ELSE
     12  fecd				  -	      bit	VSYNC
     13  fecd					      ENDIF
     14  fecd				   .CYCLES    SET	.CYCLES - 3
     15  fecd					      ENDIF
     16  fecd
     17  fecd					      REPEAT	.CYCLES / 2
     18  fecd		       ea		      nop
     17  fecd					      REPEND
     18  fece		       ea		      nop
     17  fece					      REPEND
     18  fecf		       ea		      nop
     17  fecf					      REPEND
     18  fed0		       ea		      nop
     19  fed1					      REPEND
    400  fed1		       a5 ca		      lda	SwatterLine	; 3
    401  fed3				   .game_kernel_sprite_swatter_line
    402  fed3		       85 1c		      sta	GRP1	; 3
    403  fed5
    404  fed5				   .game_kernel_sprite_end		; 12 or 11 cycles
    405  fed5
    406  fed5							;sta WSYNC
    407  fed5
    408  fed5							; New line, decrement half scanline, and increment 3 line counter
    409  fed5		       c6 82		      dec	Temp+2	; 5
    410  fed7		       ca		      dex		; 2
    411  fed8		       f0 03		      beq	.game_kernel_clean	; 2 or 3 if branching
    412  feda		       4c 2b fe 	      jmp	.game_kernel_objects	; 3
    413  fedd
    414  fedd				   .game_kernel_clean
    415  fedd
    416  fedd		       85 02		      sta	WSYNC
    417  fedf
    418  fedf		       a9 00		      lda	#0
    419  fee1		       85 09		      sta	COLUBK
    420  fee3		       85 08		      sta	COLUPF
    421  fee5		       85 06		      sta	COLUP0
    422  fee7		       85 07		      sta	COLUP1
    423  fee9		       85 0d		      sta	PF0
    424  feeb		       85 0e		      sta	PF1
    425  feed		       85 0f		      sta	PF2
    426  feef		       85 1b		      sta	GRP0
    427  fef1		       85 1c		      sta	GRP1
    428  fef3		       85 1d		      sta	ENAM0
    429  fef5		       85 1e		      sta	ENAM1
    430  fef7		       85 1f		      sta	ENABL
    431  fef9
    432  fef9		       85 02		      sta	WSYNC
    433  fefb
    434  fefb				   .game_kernel_return
    435  fefb		       60		      rts
    436  fefc
    437  fefc				   GameAudio0
    438  fefc		       0d		      .byte.b	#13	; D
    439  fefd		       ff		      .byte.b	#$FF
    440  fefe		       0f		      .byte.b	#15	; B
    441  feff		       ff		      .byte.b	#$FF
    442  ff00		       0d		      .byte.b	#13	; D
    443  ff01		       ff		      .byte.b	#$FF
    444  ff02		       0f		      .byte.b	#15	; B
    445  ff03		       ff		      .byte.b	#$FF
    446  ff04		       0d		      .byte.b	#13	; D
    447  ff05		       0d		      .byte.b	#13	; D
    448  ff06		       0f		      .byte.b	#15	; B
    449  ff07		       ff		      .byte.b	#$FF
    450  ff08		       0c		      .byte.b	#12	; D#
    451  ff09		       ff		      .byte.b	#$FF
    452  ff0a		       0f		      .byte.b	#15	; B
    453  ff0b		       ff		      .byte.b	#$FF
    454  ff0c		       0b		      .byte.b	#11	; E
    455  ff0d		       ff		      .byte.b	#$FF
    456  ff0e		       0e		      .byte.b	#14	; C#
    457  ff0f		       ff		      .byte.b	#$FF
    458  ff10		       0b		      .byte.b	#11
    459  ff11		       ff		      .byte.b	#$FF
    460  ff12		       0e		      .byte.b	#14
    461  ff13		       ff		      .byte.b	#$FF
    462  ff14		       0b		      .byte.b	#11
    463  ff15		       0b		      .byte.b	#11
    464  ff16		       0e		      .byte.b	#14
    465  ff17		       ff		      .byte.b	#$FF
    466  ff18		       0b		      .byte.b	#11
    467  ff19		       ff		      .byte.b	#$FF
    468  ff1a		       0e		      .byte.b	#14
    469  ff1b		       ff		      .byte.b	#$FF
------- FILE kernel.asm
------- FILE over.asm LEVEL 2 PASS 2
      0  ff1c					      include	"over.asm"
      1  ff1c							;================
      2  ff1c							; Constants
      3  ff1c							;================
      4  ff1c
      5  ff1c		       00 00	   OVER_BG_COLOR =	#$00
      6  ff1c		       00 56	   OVER_FG_WIN_COLOR =	#SPIDER_COLOR
      7  ff1c		       00 44	   OVER_FG_LOSE_COLOR =	#$44
      8  ff1c		       00 06	   OVER_FG_BW_COLOR =	#$06
      9  ff1c
     10  ff1c		       00 07	   OVER_AUDIO_TONE =	7
     11  ff1c		       00 06	   OVER_AUDIO_VOLUME =	6	; 15 is max
     12  ff1c		       00 06	   OVER_AUDIO_LENGTH =	6
     13  ff1c		       00 10	   OVER_AUDIO_STEP =	16
     14  ff1c
     15  ff1c		       00 09	   OVER_IMAGE_SIZE =	9
     16  ff1c		       00 08	   OVER_IMAGE_LINE_SIZE =	8
     17  ff1c		       00 48	   OVER_IMAGE_LINES =	OVER_IMAGE_SIZE*OVER_IMAGE_LINE_SIZE
     18  ff1c		       00 32	   OVER_IMAGE_PADDING =	#(KERNEL_SCANLINES-SCORE_LINES-OVER_IMAGE_LINES)/2
     19  ff1c
     20  ff1c				   OverInit
     21  ff1c
     22  ff1c		       90 1f		      bcc	.over_init_lose
     23  ff1e
     24  ff1e				   .over_init_win
      0  ff1e					      SET_POINTER	OverImagePF1Ptr, OverWinImagePF1
      1  ff1e				   .POINTER   SET	OverImagePF1Ptr
      2  ff1e				   .ADDRESS   SET	OverWinImagePF1
      3  ff1e
      4  ff1e		       a9 1f		      LDA	#<.ADDRESS
      5  ff20		       85 cd		      STA	.POINTER
      6  ff22		       a9 00		      LDA	#>.ADDRESS
      7  ff24		       85 ce		      STA	.POINTER+1
      8  ff26
      0  ff26					      SET_POINTER	OverImagePF2Ptr, OverWinImagePF2
      1  ff26				   .POINTER   SET	OverImagePF2Ptr
      2  ff26				   .ADDRESS   SET	OverWinImagePF2
      3  ff26
      4  ff26		       a9 28		      LDA	#<.ADDRESS
      5  ff28		       85 cf		      STA	.POINTER
      6  ff2a		       a9 00		      LDA	#>.ADDRESS
      7  ff2c		       85 d0		      STA	.POINTER+1
      8  ff2e
      0  ff2e					      SET_POINTER	OverAudio0Ptr, OverWinAudio0
      1  ff2e				   .POINTER   SET	OverAudio0Ptr
      2  ff2e				   .ADDRESS   SET	OverWinAudio0
      3  ff2e
      4  ff2e		       a9 43		      LDA	#<.ADDRESS
      5  ff30		       85 d1		      STA	.POINTER
      6  ff32		       a9 00		      LDA	#>.ADDRESS
      7  ff34		       85 d2		      STA	.POINTER+1
      8  ff36
     28  ff36		       a9 56		      lda	#OVER_FG_WIN_COLOR
     29  ff38		       85 d3		      sta	OverColor
     30  ff3a
     31  ff3a		       4c 59 ff 	      jmp	.over_init_logic
     32  ff3d
     33  ff3d				   .over_init_lose
      0  ff3d					      SET_POINTER	OverImagePF1Ptr, OverLoseImagePF1
      1  ff3d				   .POINTER   SET	OverImagePF1Ptr
      2  ff3d				   .ADDRESS   SET	OverLoseImagePF1
      3  ff3d
      4  ff3d		       a9 31		      LDA	#<.ADDRESS
      5  ff3f		       85 cd		      STA	.POINTER
      6  ff41		       a9 00		      LDA	#>.ADDRESS
      7  ff43		       85 ce		      STA	.POINTER+1
      8  ff45
      0  ff45					      SET_POINTER	OverImagePF2Ptr, OverLoseImagePF2
      1  ff45				   .POINTER   SET	OverImagePF2Ptr
      2  ff45				   .ADDRESS   SET	OverLoseImagePF2
      3  ff45
      4  ff45		       a9 3a		      LDA	#<.ADDRESS
      5  ff47		       85 cf		      STA	.POINTER
      6  ff49		       a9 00		      LDA	#>.ADDRESS
      7  ff4b		       85 d0		      STA	.POINTER+1
      8  ff4d
      0  ff4d					      SET_POINTER	OverAudio0Ptr, OverLoseAudio0
      1  ff4d				   .POINTER   SET	OverAudio0Ptr
      2  ff4d				   .ADDRESS   SET	OverLoseAudio0
      3  ff4d
      4  ff4d		       a9 49		      LDA	#<.ADDRESS
      5  ff4f		       85 d1		      STA	.POINTER
      6  ff51		       a9 00		      LDA	#>.ADDRESS
      7  ff53		       85 d2		      STA	.POINTER+1
      8  ff55
     37  ff55		       a9 44		      lda	#OVER_FG_LOSE_COLOR
     38  ff57		       85 d3		      sta	OverColor
     39  ff59
     40  ff59				   .over_init_logic
     41  ff59
     42  ff59							; Setup logic and kernel
      0  ff59					      SET_POINTER	VBlankPtr, OverVerticalBlank
      1  ff59				   .POINTER   SET	VBlankPtr
      2  ff59				   .ADDRESS   SET	OverVerticalBlank
      3  ff59
      4  ff59		       a9 88		      LDA	#<.ADDRESS
      5  ff5b		       85 86		      STA	.POINTER
      6  ff5d		       a9 ff		      LDA	#>.ADDRESS
      7  ff5f		       85 87		      STA	.POINTER+1
      8  ff61
      0  ff61					      SET_POINTER	KernelPtr, OverKernel
      1  ff61				   .POINTER   SET	KernelPtr
      2  ff61				   .ADDRESS   SET	OverKernel
      3  ff61
      4  ff61		       a9 d1		      LDA	#<.ADDRESS
      5  ff63		       85 88		      STA	.POINTER
      6  ff65		       a9 ff		      LDA	#>.ADDRESS
      7  ff67		       85 89		      STA	.POINTER+1
      8  ff69
      0  ff69					      SET_POINTER	OverScanPtr, OverOverScan
      1  ff69				   .POINTER   SET	OverScanPtr
      2  ff69				   .ADDRESS   SET	OverOverScan
      3  ff69
      4  ff69		       a9 8c		      LDA	#<.ADDRESS
      5  ff6b		       85 8a		      STA	.POINTER
      6  ff6d		       a9 ff		      LDA	#>.ADDRESS
      7  ff6f		       85 8b		      STA	.POINTER+1
      8  ff71
     46  ff71
     47  ff71							; Load audio settings
     48  ff71		       a9 07		      lda	#OVER_AUDIO_TONE
     49  ff73		       85 15		      sta	AUDC0
     50  ff75							;lda #OVER_AUDIO_VOLUME
     51  ff75							;sta AUDV0
     52  ff75		       a9 00		      lda	#0
     53  ff77							;sta AUDC1
     54  ff77		       85 1a		      sta	AUDV1
     55  ff79
     56  ff79							; Set initial button state
     57  ff79							;lda #0
     58  ff79		       85 8f		      sta	InputState
     59  ff7b
     60  ff7b							; Setup frame counters
     61  ff7b		       a9 01		      lda	#1
     62  ff7d		       85 8d		      sta	FrameTimer
     63  ff7f		       a9 10		      lda	#OVER_AUDIO_STEP
     64  ff81		       85 92		      sta	SampleStep
     65  ff83		       a9 06		      lda	#OVER_AUDIO_LENGTH
     66  ff85		       85 91		      sta	AudioStep
     67  ff87
     68  ff87		       60		      rts
     69  ff88
     70  ff88				   OverVerticalBlank
     71  ff88		       20 d7 f6 	      jsr	ScoreUpdate
     72  ff8b		       60		      rts
     73  ff8c
     74  ff8c				   OverOverScan
     75  ff8c		       20 93 ff 	      jsr	OverAudio
     76  ff8f		       20 b6 ff 	      jsr	OverState
     77  ff92		       60		      rts
     78  ff93
     79  ff93				   OverAudio
     80  ff93
     81  ff93		       a5 8d		      lda	FrameTimer
     82  ff95		       d0 1e		      bne	.over_audio_return
     83  ff97
     84  ff97							; Reset Timer
     85  ff97					      REPEAT	3
     86  ff97		       e6 92		      inc	SampleStep
     85  ff97					      REPEND
     86  ff99		       e6 92		      inc	SampleStep
     85  ff99					      REPEND
     86  ff9b		       e6 92		      inc	SampleStep
     87  ff9d					      REPEND
     88  ff9d		       a5 92		      lda	SampleStep
     89  ff9f		       85 8d		      sta	FrameTimer
     90  ffa1
     91  ffa1				   .over_audio_play
     92  ffa1
     93  ffa1							; Increment melody position
     94  ffa1		       a4 91		      ldy	AudioStep
     95  ffa3		       f0 0c		      beq	.over_audio_mute_note
     96  ffa5		       c6 91		      dec	AudioStep
     97  ffa7		       88		      dey
     98  ffa8
     99  ffa8				   .over_audio_play_note
    100  ffa8
    101  ffa8							; Melody Line
    102  ffa8		       b1 d1		      lda	(OverAudio0Ptr),y
    103  ffaa		       85 17		      sta	AUDF0
    104  ffac		       a9 06		      lda	#OVER_AUDIO_VOLUME
    105  ffae		       85 19		      sta	AUDV0
    106  ffb0
    107  ffb0		       60		      rts
    108  ffb1
    109  ffb1				   .over_audio_mute_note
    110  ffb1		       a9 00		      lda	#0
    111  ffb3							;sta AUDF0
    112  ffb3		       85 19		      sta	AUDV0
    113  ffb5
    114  ffb5				   .over_audio_return
    115  ffb5		       60		      rts
    116  ffb6
    117  ffb6				   OverState
    118  ffb6
    119  ffb6							; Check to see if audio has finished
    120  ffb6		       a5 91		      lda	AudioStep
    121  ffb8		       d0 16		      bne	.over_state_return
    122  ffba
    123  ffba		       a2 01		      ldx	#1
    124  ffbc				   .over_state
    125  ffbc							; Check if Fire Button on controller 1 is released
    126  ffbc		       b5 0c		      lda	INPT4,x
    127  ffbe		       30 05		      bmi	.over_state_check
    128  ffc0
    129  ffc0				   .over_state_on
    130  ffc0		       a9 01		      lda	#1
    131  ffc2		       95 8f		      sta	InputState,x
    132  ffc4		       60		      rts
    133  ffc5
    134  ffc5				   .over_state_check
    135  ffc5		       b5 8f		      lda	InputState,x
    136  ffc7		       d0 04		      bne	.over_state_next
    137  ffc9
    138  ffc9				   .over_state_loop
    139  ffc9		       ca		      dex
    140  ffca		       10 f0		      bpl	.over_state
    141  ffcc		       60		      rts
    142  ffcd
    143  ffcd				   .over_state_next
    144  ffcd							; Button is released, load title screen
    145  ffcd		       20 80 f3 	      jsr	TitleInit
    146  ffd0
    147  ffd0				   .over_state_return
    148  ffd0		       60		      rts
    149  ffd1
    150  ffd1				   OverKernel
    151  ffd1
    152  ffd1							; Turn on display
    153  ffd1		       a9 00		      lda	#0
    154  ffd3		       85 01		      sta	VBLANK
    155  ffd5
    156  ffd5				   .over_kernel_score
    157  ffd5
    158  ffd5							; Draw Score on top first (no update)
    159  ffd5		       20 3a f7 	      jsr	ScoreDraw
    160  ffd8
    161  ffd8				   .over_kernel_color
    162  ffd8							; Load Colors
    163  ffd8		       a9 00		      lda	#OVER_BG_COLOR
    164  ffda		       85 09		      sta	COLUBK
    165  ffdc
    166  ffdc							; Check b/w
    167  ffdc		       ad 82 02 	      lda	SWCHB
    168  ffdf		       29 08		      and	#%00001000
    169  ffe1		       f0 07		      beq	.over_kernel_color_bw
    170  ffe3
    171  ffe3				   .over_kernel_color_color
    172  ffe3		       a5 d3		      lda	OverColor
    173  ffe5		       85 08		      sta	COLUPF
    174  ffe7
    175  ffe7		       4c ee ff 	      jmp	.over_kernel_init
    176  ffea
    177  ffea				   .over_kernel_color_bw
    178  ffea							; Load b/w Colors
    179  ffea		       a9 06		      lda	#OVER_FG_BW_COLOR
    180  ffec		       85 08		      sta	COLUPF
    181  ffee
    182  ffee				   .over_kernel_init
    183  ffee							; Playfield Control
    184  ffee							;lda CtrlPf
    185  ffee							;and #%11111101 ; Use playfield foreground color
    186  ffee							;ora #%00000001 ; Set mirroring
    187  ffee							;sta CtrlPf
    188  ffee		       a9 01		      lda	#%00000001
    189  fff0		       85 0a		      sta	CTRLPF
    190  fff2
    191  fff2				   .over_kernel_top_padding
    192  fff2							; Top Padding
    193  fff2		       20 11 00 	      jsr	OverPadding
    194  fff5
    195  fff5				   .over_kernel_image
    196  fff5		       a0 08		      ldy	#OVER_IMAGE_SIZE-1
    197  fff7
    198  fff7				   .over_kernel_image_next
    199  fff7		       b1 cf		      lda	(OverImagePF2Ptr),y
    200  fff9		       85 0f		      sta	PF2
    201  fffb		       b1 cd		      lda	(OverImagePF1Ptr),y
    202  fffd		       85 0e		      sta	PF1
    203  ffff							;    lda (OverImagePF0Ptr),y
    204  ffff							;    sta PF0
    205  ffff
    206  ffff		       a2 08		      ldx	#OVER_IMAGE_LINE_SIZE
    207  10001				    .over_kernel_image_loop
    208  10001			85 02		       sta	WSYNC
    209  10003			ca		       dex
    210  10004			d0 fb		       bne	.over_kernel_image_loop
    211  10006
    212  10006			88		       dey
    213  10007			10 ee		       bpl	.over_kernel_image_next
    214  10009
    215  10009				    .over_kernel_bottom_padding
    216  10009							; Bottom Padding
    217  10009			85 02		       sta	WSYNC	; Add extra line to get to 262
    218  1000b			20 11 00	       jsr	OverPadding
    219  1000e
    220  1000e				    .over_kernel_return
    221  1000e			85 02		       sta	WSYNC	; This extra line is to account for constant rounding
    222  10010			60		       rts
    223  10011
    224  10011				    OverPadding
    225  10011			a9 00		       lda	#0
    226  10013							;sta PF0
    227  10013			85 0e		       sta	PF1
    228  10015			85 0f		       sta	PF2
    229  10017
    230  10017			a2 32		       ldx	#OVER_IMAGE_PADDING
    231  10019				    .over_padding_loop
    232  10019			85 02		       sta	WSYNC
    233  1001b			ca		       dex
    234  1001c			d0 fb		       bne	.over_padding_loop
    235  1001e
    236  1001e			60		       rts
    237  1001f
    238  1001f				    OverAssets
    239  1001f
    240  1001f							; Assets
------- FILE over_win_image.asm LEVEL 3 PASS 2
      0  1001f					       include	"over_win_image.asm"
      1  1001f							;OverWinImagePF0:
      2  1001f							;    .BYTE %00000000
      3  1001f							;    .BYTE %00000000
      4  1001f							;    .BYTE %00000000
      5  1001f							;    .BYTE %00000000
      6  1001f							;    .BYTE %00000000
      7  1001f							;    .BYTE %00000000
      8  1001f							;    .BYTE %00000000
      9  1001f							;    .BYTE %00000000
     10  1001f							;    .BYTE %00000000
     11  1001f
     12  1001f				    OverWinImagePF1
     13  1001f			08		       .BYTE.b	%00001000
     14  10020			10		       .BYTE.b	%00010000
     15  10021			12		       .BYTE.b	%00010010
     16  10022			24		       .BYTE.b	%00100100
     17  10023			24		       .BYTE.b	%00100100
     18  10024			23		       .BYTE.b	%00100011
     19  10025			20		       .BYTE.b	%00100000
     20  10026			13		       .BYTE.b	%00010011
     21  10027			0c		       .BYTE.b	%00001100
     22  10028
     23  10028				    OverWinImagePF2
     24  10028			e0		       .BYTE.b	%11100000
     25  10029			f8		       .BYTE.b	%11111000
     26  1002a			bc		       .BYTE.b	%10111100
     27  1002b			0e		       .BYTE.b	%00001110
     28  1002c			f7		       .BYTE.b	%11110111
     29  1002d			9e		       .BYTE.b	%10011110
     30  1002e			fd		       .BYTE.b	%11111101
     31  1002f			f8		       .BYTE.b	%11111000
     32  10030			e0		       .BYTE.b	%11100000
------- FILE over.asm
------- FILE over_lose_image.asm LEVEL 3 PASS 2
      0  10031					       include	"over_lose_image.asm"
      1  10031							;OverLoseImagePF0:
      2  10031							;    .BYTE %00000000
      3  10031							;    .BYTE %00000000
      4  10031							;    .BYTE %00000000
      5  10031							;    .BYTE %00000000
      6  10031							;    .BYTE %00000000
      7  10031							;    .BYTE %00000000
      8  10031							;    .BYTE %00000000
      9  10031							;    .BYTE %00000000
     10  10031							;    .BYTE %00000000
     11  10031
     12  10031				    OverLoseImagePF1
     13  10031			0c		       .BYTE.b	%00001100
     14  10032			13		       .BYTE.b	%00010011
     15  10033			20		       .BYTE.b	%00100000
     16  10034			23		       .BYTE.b	%00100011
     17  10035			24		       .BYTE.b	%00100100
     18  10036			24		       .BYTE.b	%00100100
     19  10037			12		       .BYTE.b	%00010010
     20  10038			10		       .BYTE.b	%00010000
     21  10039			08		       .BYTE.b	%00001000
     22  1003a
     23  1003a				    OverLoseImagePF2
     24  1003a			e0		       .BYTE.b	%11100000
     25  1003b			f8		       .BYTE.b	%11111000
     26  1003c			fd		       .BYTE.b	%11111101
     27  1003d			ae		       .BYTE.b	%10101110
     28  1003e			df		       .BYTE.b	%11011111
     29  1003f			ae		       .BYTE.b	%10101110
     30  10040			fc		       .BYTE.b	%11111100
     31  10041			f8		       .BYTE.b	%11111000
     32  10042			e0		       .BYTE.b	%11100000
------- FILE over.asm
    243  10043
    244  10043				    OverWinAudio0
    245  10043			0c		       .BYTE.b	#12
    246  10044			0c		       .BYTE.b	#12
    247  10045			0d		       .BYTE.b	#13
    248  10046			0e		       .BYTE.b	#14
    249  10047			10		       .BYTE.b	#16
    250  10048			12		       .BYTE.b	#18
    251  10049
    252  10049				    OverLoseAudio0
    253  10049
    254  10049			1a		       .BYTE.b	#26	; D1
    255  1004a			1a		       .BYTE.b	#26
    256  1004b			16		       .BYTE.b	#22	; F1
    257  1004c			11		       .BYTE.b	#17	; A1
    258  1004d			0d		       .BYTE.b	#13	; D2
    259  1004e			0c		       .BYTE.b	#12	; D#2
------- FILE kernel.asm
    336  1004f
    337  1004f							;================
    338  1004f							; End of cart
    339  1004f							;================
    340  1004f
    341  fffa					      ORG	$FFFA	; 2k = $F7FA, 4k = $FFFA
    342  fffa
    343  fffa				   InterruptVectors
    344  fffa
kernel.asm (345): error: Origin Reverse-indexed.
Aborting assembly
