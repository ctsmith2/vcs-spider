------- FILE spider.asm LEVEL 1 PASS 2
      1  10000 ????						; 8 Legs of Love game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: August 28th, 2018
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE spider.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE spider.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????
     38  10000 ????						; Logo
     39  10000 ????		00 09	    LOGO_SIZE  =	9
     40  10000 ????		00 30	    LOGO_START =	48
     41  10000 ????		00 08	    LOGO_INTERVAL =	4*2
     42  10000 ????		00 ff	    LOGO_FRAMES =	255
     43  10000 ????
     44  10000 ????						; Title
     45  10000 ????		00 08	    TITLE_LINE_SIZE =	8
     46  10000 ????		00 04	    TITLE_DATA_SIZE =	%00000100
     47  10000 ????		00 01	    TITLE_BORDER =	1
     48  10000 ????		00 04	    TITLE_PAD  =	4
     49  10000 ????		00 06	    TITLE_IMAGE =	6
     50  10000 ????		00 02	    TITLE_GAP  =	2
     51  10000 ????
     52  10000 ????						;================
     53  10000 ????						; Variables
     54  10000 ????						;================
     55  10000 ????
     56 U0082 ????				      SEG.U	vars
     57 U0080					      org	$80
     58 U0080
     59 U0080		       00 00 00 00*Overlay    ds	8
     60 U0088
     61 U0080					      org	Overlay
     62 U0080
     63 U0080							; Animation/Logic System
     64 U0080
     65 U0080		       00	   AnimationFrame ds	1	; 1 byte to count frames
     66 U0081		       00	   AnimationSubFrame ds	1	; 1 byte to count portions of frames
     67 U0082
     68 U0080					      org	Overlay
     69 U0080
     70 U0080							; Drawing System, etc
     71 U0080
     72 U0080		       00 00	   TitleImagePtr ds	2	; Pointer to image data location
     73 U0082
     74  10000 ????				       SEG
     75  10000 ????
     76  f000					      ORG	$F000	; Start of cart area
     77  f000
     78  f000				   Reset
     79  f000
     80  f000				   .initstack
     81  f000
     82  f000		       a2 00		      ldx	#0
     83  f002		       8a		      txa
     84  f003
     85  f003				   .initstack_loop
     86  f003
     87  f003		       ca		      dex
     88  f004		       9a		      txs
     89  f005		       48		      pha
     90  f006		       d0 fb		      bne	.initstack_loop
     91  f008
     92  f008							; Stack pointer now $FF, a=x=0, TIA registers (0 - $7F) = RAM ($80 - $FF) = 0
     93  f008
     94  f008				   .initvars
     95  f008
     96  f008							; Set background color
     97  f008		       a9 00		      lda	#$00	; Black
     98  f00a		       85 09		      sta	COLUBK
     99  f00c
    100  f00c							; Set the playfield and player color
    101  f00c		       a9 0e		      lda	#$0E	; White
    102  f00e		       85 08		      sta	COLUPF
    103  f010		       85 06		      sta	COLUP0
    104  f012		       85 07		      sta	COLUP1
    105  f014
    106  f014							; Playfield Control
    107  f014		       a9 00		      lda	#%00000000	; 1 for mirroring
    108  f016		       85 0a		      sta	CTRLPF
    109  f018
    110  f018							; Disable Game Elements
    111  f018		       a9 00		      lda	#$00
    112  f01a		       85 1f		      sta	ENABL	; Turn off ball
    113  f01c		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    114  f01e		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    115  f020		       85 1b		      sta	GRP0	; Turn off player 1
    116  f022		       85 1c		      sta	GRP1	; Turn off player 2
    117  f024
    118  f024							; Empty playfield
    119  f024		       a9 00		      lda	#%00000000
    120  f026		       85 0d		      sta	PF0
    121  f028		       85 0e		      sta	PF1
    122  f02a		       85 0f		      sta	PF2
    123  f02c
    124  f02c				   LogoScreen
    125  f02c
    126  f02c							; Load number of frames into AnimationFrame
    127  f02c		       a9 ff		      lda	#LOGO_FRAMES
    128  f02e		       85 80		      sta	AnimationFrame
    129  f030
    130  f030		       a9 00		      lda	#0
    131  f032		       85 81		      sta	AnimationSubFrame
    132  f034
    133  f034				   LogoFrame
    134  f034
    135  f034				   .logo_vsync		; Start of vertical blank processing
    136  f034
    137  f034		       a9 00		      lda	#0
    138  f036		       85 01		      sta	VBLANK
    139  f038
    140  f038		       a9 02		      lda	#2
    141  f03a		       85 00		      sta	VSYNC
    142  f03c
    143  f03c							; VSYNCH signal scanlines
    144  f03c					      REPEAT	#KERNEL_VSYNC
    145  f03c		       85 02		      sta	WSYNC
    144  f03c					      REPEND
    145  f03e		       85 02		      sta	WSYNC
    144  f03e					      REPEND
    145  f040		       85 02		      sta	WSYNC
    146  f042					      REPEND
    147  f042
    148  f042		       a9 00		      lda	#0
    149  f044		       85 00		      sta	VSYNC
    150  f046
    151  f046				   .logo_vblank 		; scanlines of vertical blank
    152  f046
    153  f046		       a2 25		      ldx	#KERNEL_VBLANK
    154  f048				   .logo_vblank_loop
    155  f048
    156  f048		       85 02		      sta	WSYNC
    157  f04a		       ca		      dex
    158  f04b		       d0 fb		      bne	.logo_vblank_loop
    159  f04d
    160  f04d				   .logo_scanline		; Do 192 scanlines
    161  f04d
    162  f04d		       a9 00		      lda	#$00	; Clear playfields
    163  f04f		       85 0d		      sta	PF0
    164  f051		       85 0e		      sta	PF1
    165  f053		       85 0f		      sta	PF2
    166  f055
    167  f055		       a2 30		      ldx	#LOGO_START	; This counts our scanline number
    168  f057				   .logo_scanline_start
    169  f057
    170  f057		       85 02		      sta	WSYNC
    171  f059		       ca		      dex
    172  f05a		       d0 fb		      bne	.logo_scanline_start
    173  f05c
    174  f05c		       a2 00		      ldx	#0
    175  f05e				   .logo_scanline_loop
    176  f05e
    177  f05e							; Cleanup
    178  f05e		       85 0e		      sta	PF1
    179  f060
    180  f060		       8a		      txa
    181  f061		       4a		      lsr		; Divide counter by 4
    182  f062		       4a		      lsr
    183  f063		       29 fe		      and	#%11111110	; Remove 0th bit
    184  f065		       a8		      tay
    185  f066
    186  f066							; Check if we need to display line
    187  f066		       c4 81		      cpy	AnimationSubFrame
    188  f068		       b0 17		      bcs	.logo_scanline_skip
    189  f06a
    190  f06a							; Load first half of data
    191  f06a		       b9 fc f1 	      lda	LogoData,y
    192  f06d		       85 0f		      sta	PF2
    193  f06f
    194  f06f							; Load second half of data
    195  f06f		       c8		      iny
    196  f070		       b9 fc f1 	      lda	LogoData,y
    197  f073
    198  f073							; Use 4 MSB bits on PF0
    199  f073		       85 0d		      sta	PF0
    200  f075
    201  f075							; Use 4 LSB bits on PF1
    202  f075					      REPEAT	4
    203  f075		       0a		      asl
    202  f075					      REPEND
    203  f076		       0a		      asl
    202  f076					      REPEND
    203  f077		       0a		      asl
    202  f077					      REPEND
    203  f078		       0a		      asl
    204  f079					      REPEND
    205  f079		       85 0e		      sta	PF1
    206  f07b
    207  f07b							; Cleanup
    208  f07b		       a9 00		      lda	#$00
    209  f07d		       85 0f		      sta	PF2
    210  f07f		       85 0d		      sta	PF0
    211  f081
    212  f081				   .logo_scanline_skip
    213  f081
    214  f081							; Clear Playfields
    215  f081		       a9 00		      lda	#$00
    216  f083		       85 0d		      sta	PF0
    217  f085		       85 0e		      sta	PF1
    218  f087		       85 0f		      sta	PF2
    219  f089
    220  f089							; Wait for next line
    221  f089		       85 02		      sta	WSYNC
    222  f08b
    223  f08b							; Check if at end of logo display
    224  f08b		       e8		      inx
    225  f08c		       e0 48		      cpx	#LOGO_SIZE*LOGO_INTERVAL
    226  f08e		       d0 ce		      bne	.logo_scanline_loop
    227  f090
    228  f090		       a2 48		      ldx	#KERNEL_SCANLINES-LOGO_START-LOGO_SIZE*LOGO_INTERVAL
    229  f092				   .logo_scanline_end
    230  f092
    231  f092		       85 02		      sta	WSYNC
    232  f094		       ca		      dex
    233  f095		       d0 fb		      bne	.logo_scanline_end
    234  f097
    235  f097				   .logo_overscan		; 30 scanlines of overscan
    236  f097
    237  f097		       a9 42		      lda	#%01000010
    238  f099		       85 01		      sta	VBLANK	; end of screen - enter blanking
    239  f09b
    240  f09b		       a2 1e		      ldx	#KERNEL_OVERSCAN
    241  f09d				   .logo_overscan_loop
    242  f09d
    243  f09d		       85 02		      sta	WSYNC
    244  f09f		       ca		      dex
    245  f0a0		       d0 fb		      bne	.logo_overscan_loop
    246  f0a2
    247  f0a2		       a6 80		      ldx	AnimationFrame
    248  f0a4
    249  f0a4							; Divide inverted AnimationFrame by 4 and put in AnimationSubFrame
    250  f0a4		       a9 ff		      lda	#LOGO_FRAMES
    251  f0a6		       e5 80		      sbc	AnimationFrame
    252  f0a8		       4a		      lsr
    253  f0a9		       4a		      lsr
    254  f0aa		       85 81		      sta	AnimationSubFrame
    255  f0ac
    256  f0ac							; Decrement AnimationFrame
    257  f0ac		       ca		      dex
    258  f0ad		       86 80		      stx	AnimationFrame
    259  f0af
    260  f0af							; Check if we're at the end of the animation
    261  f0af		       d0 83		      bne	LogoFrame
    262  f0b1
    263  f0b1				   TitleScreen
    264  f0b1
    265  f0b1		       a9 00		      lda	#$00	; Clear playfields
    266  f0b3		       85 0d		      sta	PF0
    267  f0b5		       85 0e		      sta	PF1
    268  f0b7		       85 0f		      sta	PF2
    269  f0b9
    270  f0b9				   TitleFrame
    271  f0b9
    272  f0b9				   .title_vsync 		; Start of vertical blank processing
    273  f0b9
    274  f0b9		       a9 00		      lda	#0
    275  f0bb		       85 01		      sta	VBLANK
    276  f0bd
    277  f0bd		       a9 02		      lda	#2
    278  f0bf		       85 00		      sta	VSYNC
    279  f0c1
    280  f0c1							; VSYNCH signal scanlines
    281  f0c1					      REPEAT	#KERNEL_VSYNC
    282  f0c1		       85 02		      sta	WSYNC
    281  f0c1					      REPEND
    282  f0c3		       85 02		      sta	WSYNC
    281  f0c3					      REPEND
    282  f0c5		       85 02		      sta	WSYNC
    283  f0c7					      REPEND
    284  f0c7
    285  f0c7		       a9 00		      lda	#0
    286  f0c9		       85 00		      sta	VSYNC
    287  f0cb
    288  f0cb				   .title_vblank		; scanlines of vertical blank
    289  f0cb
    290  f0cb		       a2 25		      ldx	#KERNEL_VBLANK
    291  f0cd				   .title_vblank_loop
    292  f0cd
    293  f0cd		       85 02		      sta	WSYNC
    294  f0cf		       ca		      dex
    295  f0d0		       d0 fb		      bne	.title_vblank_loop
    296  f0d2
    297  f0d2				   .title_border_h_top
    298  f0d2
    299  f0d2							; Number of Scanlines
    300  f0d2		       a2 08		      ldx	#TITLE_BORDER*TITLE_LINE_SIZE
    301  f0d4
    302  f0d4							; Draw Playfield
    303  f0d4		       a9 ff		      lda	#$FF
    304  f0d6		       85 0d		      sta	PF0
    305  f0d8		       85 0e		      sta	PF1
    306  f0da		       85 0f		      sta	PF2
    307  f0dc
    308  f0dc				   .title_border_h_top_loop
    309  f0dc
    310  f0dc		       85 02		      sta	WSYNC
    311  f0de		       ca		      dex
    312  f0df		       d0 fb		      bne	.title_border_h_top_loop
    313  f0e1
    314  f0e1				   .title_border_v_top
    315  f0e1
    316  f0e1							; Number of Scanlines
    317  f0e1		       a2 20		      ldx	#TITLE_PAD*TITLE_LINE_SIZE
    318  f0e3
    319  f0e3							; Mirror playfield
    320  f0e3		       a9 01		      lda	#%00000001
    321  f0e5		       85 0a		      sta	CTRLPF
    322  f0e7
    323  f0e7							; Draw Playfield
    324  f0e7		       a9 10		      lda	#%00010000
    325  f0e9		       85 0d		      sta	PF0
    326  f0eb
    327  f0eb		       a9 00		      lda	#$00
    328  f0ed		       85 0e		      sta	PF1
    329  f0ef		       85 0f		      sta	PF2
    330  f0f1
    331  f0f1				   .title_border_v_top_loop
    332  f0f1
    333  f0f1		       85 02		      sta	WSYNC
    334  f0f3		       ca		      dex
    335  f0f4		       d0 fb		      bne	.title_border_v_top_loop
    336  f0f6
    337  f0f6				   .title_image_top
    338  f0f6
    339  f0f6		       a0 00		      ldy	#$00	; Current Image Index
    340  f0f8
      0  f0f8					      sleep	2
      1  f0f8				   .CYCLES    SET	2
      2  f0f8
      3  f0f8				  -	      IF	.CYCLES < 2
      4  f0f8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0f8				  -	      ERR
      6  f0f8					      ENDIF
      7  f0f8
      8  f0f8				  -	      IF	.CYCLES & 1
      9  f0f8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0f8				  -	      nop	0
     11  f0f8				  -	      ELSE
     12  f0f8				  -	      bit	VSYNC
     13  f0f8				  -	      ENDIF
     14  f0f8				  -.CYCLES    SET	.CYCLES - 3
     15  f0f8					      ENDIF
     16  f0f8
     17  f0f8					      REPEAT	.CYCLES / 2
     18  f0f8		       ea		      nop
     19  f0f9					      REPEND
    342  f0f9		       4c 00 f1 	      jmp	.title_image_top_line_skip_wait
    343  f0fc
    344  f0fc				   .title_image_top_line
    345  f0fc
      0  f0fc					      sleep	8
      1  f0fc				   .CYCLES    SET	8
      2  f0fc
      3  f0fc				  -	      IF	.CYCLES < 2
      4  f0fc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0fc				  -	      ERR
      6  f0fc					      ENDIF
      7  f0fc
      8  f0fc				  -	      IF	.CYCLES & 1
      9  f0fc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0fc				  -	      nop	0
     11  f0fc				  -	      ELSE
     12  f0fc				  -	      bit	VSYNC
     13  f0fc				  -	      ENDIF
     14  f0fc				  -.CYCLES    SET	.CYCLES - 3
     15  f0fc					      ENDIF
     16  f0fc
     17  f0fc					      REPEAT	.CYCLES / 2
     18  f0fc		       ea		      nop
     17  f0fc					      REPEND
     18  f0fd		       ea		      nop
     17  f0fd					      REPEND
     18  f0fe		       ea		      nop
     17  f0fe					      REPEND
     18  f0ff		       ea		      nop
     19  f100					      REPEND
    347  f100
    348  f100				   .title_image_top_line_skip_wait
    349  f100
    350  f100		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    351  f102		       4c 0f f1 	      jmp	.title_image_top_loop_skip_wait
    352  f105
    353  f105				   .title_image_top_loop
    354  f105
    355  f105							; Wait until new line is ready to draw
    356  f105		       85 02		      sta	WSYNC
      0  f107					      sleep	16
      1  f107				   .CYCLES    SET	16
      2  f107
      3  f107				  -	      IF	.CYCLES < 2
      4  f107				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f107				  -	      ERR
      6  f107					      ENDIF
      7  f107
      8  f107				  -	      IF	.CYCLES & 1
      9  f107				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f107				  -	      nop	0
     11  f107				  -	      ELSE
     12  f107				  -	      bit	VSYNC
     13  f107				  -	      ENDIF
     14  f107				  -.CYCLES    SET	.CYCLES - 3
     15  f107					      ENDIF
     16  f107
     17  f107					      REPEAT	.CYCLES / 2
     18  f107		       ea		      nop
     17  f107					      REPEND
     18  f108		       ea		      nop
     17  f108					      REPEND
     18  f109		       ea		      nop
     17  f109					      REPEND
     18  f10a		       ea		      nop
     17  f10a					      REPEND
     18  f10b		       ea		      nop
     17  f10b					      REPEND
     18  f10c		       ea		      nop
     17  f10c					      REPEND
     18  f10d		       ea		      nop
     17  f10d					      REPEND
     18  f10e		       ea		      nop
     19  f10f					      REPEND
    358  f10f
    359  f10f				   .title_image_top_loop_skip_wait
    360  f10f
    361  f10f							; Draw Image
    362  f10f		       b9 0e f2 	      lda	TitleImageTop,y
    363  f112		       85 0e		      sta	PF1
    364  f114		       c8		      iny
    365  f115		       b9 0e f2 	      lda	TitleImageTop,y
    366  f118		       85 0f		      sta	PF2
    367  f11a		       c8		      iny
    368  f11b		       b9 0e f2 	      lda	TitleImageTop,y
    369  f11e		       c8		      iny
      0  f11f					      sleep	5
      1  f11f				   .CYCLES    SET	5
      2  f11f
      3  f11f				  -	      IF	.CYCLES < 2
      4  f11f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f11f				  -	      ERR
      6  f11f					      ENDIF
      7  f11f
      8  f11f					      IF	.CYCLES & 1
      9  f11f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f11f		       04 00		      nop	0
     11  f121				  -	      ELSE
     12  f121				  -	      bit	VSYNC
     13  f121					      ENDIF
     14  f121				   .CYCLES    SET	.CYCLES - 3
     15  f121					      ENDIF
     16  f121
     17  f121					      REPEAT	.CYCLES / 2
     18  f121		       ea		      nop
     19  f122					      REPEND
    371  f122		       85 0f		      sta	PF2
    372  f124		       b9 0e f2 	      lda	TitleImageTop,y
    373  f127		       85 0e		      sta	PF1
    374  f129
    375  f129							; Clear bottom of index
    376  f129		       98		      tya
    377  f12a		       29 fc		      and	#%11111100
    378  f12c		       a8		      tay
    379  f12d
    380  f12d		       ca		      dex
    381  f12e		       d0 d5		      bne	.title_image_top_loop
    382  f130
    383  f130							; Add 4 to the image index to skip to next line
    384  f130					      REPEAT	4
    385  f130		       c8		      iny
    384  f130					      REPEND
    385  f131		       c8		      iny
    384  f131					      REPEND
    385  f132		       c8		      iny
    384  f132					      REPEND
    385  f133		       c8		      iny
    386  f134					      REPEND
    387  f134
    388  f134		       c0 18		      cpy	#TITLE_IMAGE*TITLE_DATA_SIZE
    389  f136		       d0 c4		      bne	.title_image_top_line
    390  f138
    391  f138				   .title_gap
    392  f138
    393  f138							; Number of Scanlines
    394  f138		       a2 10		      ldx	#TITLE_GAP*TITLE_LINE_SIZE
    395  f13a
    396  f13a							; Mirror playfield
    397  f13a		       a9 01		      lda	#%00000001
    398  f13c		       85 0a		      sta	CTRLPF
    399  f13e
    400  f13e							; Draw Playfield
    401  f13e		       a9 10		      lda	#%00010000
    402  f140		       85 0d		      sta	PF0
    403  f142
    404  f142		       a9 00		      lda	#$00
    405  f144		       85 0e		      sta	PF1
    406  f146		       85 0f		      sta	PF2
    407  f148
    408  f148				   .title_gap_loop
    409  f148
    410  f148		       85 02		      sta	WSYNC
    411  f14a		       ca		      dex
    412  f14b		       d0 fb		      bne	.title_gap_loop
    413  f14d
    414  f14d				   .title_image_bottom
    415  f14d
    416  f14d		       a0 00		      ldy	#$00	; Current Image Index
    417  f14f
      0  f14f					      sleep	2
      1  f14f				   .CYCLES    SET	2
      2  f14f
      3  f14f				  -	      IF	.CYCLES < 2
      4  f14f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f14f				  -	      ERR
      6  f14f					      ENDIF
      7  f14f
      8  f14f				  -	      IF	.CYCLES & 1
      9  f14f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f14f				  -	      nop	0
     11  f14f				  -	      ELSE
     12  f14f				  -	      bit	VSYNC
     13  f14f				  -	      ENDIF
     14  f14f				  -.CYCLES    SET	.CYCLES - 3
     15  f14f					      ENDIF
     16  f14f
     17  f14f					      REPEAT	.CYCLES / 2
     18  f14f		       ea		      nop
     19  f150					      REPEND
    419  f150		       4c 58 f1 	      jmp	.title_image_bottom_line_skip_wait
    420  f153
    421  f153				   .title_image_bottom_line
    422  f153
      0  f153					      sleep	9
      1  f153				   .CYCLES    SET	9
      2  f153
      3  f153				  -	      IF	.CYCLES < 2
      4  f153				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f153				  -	      ERR
      6  f153					      ENDIF
      7  f153
      8  f153					      IF	.CYCLES & 1
      9  f153					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f153		       04 00		      nop	0
     11  f155				  -	      ELSE
     12  f155				  -	      bit	VSYNC
     13  f155					      ENDIF
     14  f155				   .CYCLES    SET	.CYCLES - 3
     15  f155					      ENDIF
     16  f155
     17  f155					      REPEAT	.CYCLES / 2
     18  f155		       ea		      nop
     17  f155					      REPEND
     18  f156		       ea		      nop
     17  f156					      REPEND
     18  f157		       ea		      nop
     19  f158					      REPEND
    424  f158
    425  f158				   .title_image_bottom_line_skip_wait
    426  f158
    427  f158		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    428  f15a		       4c 67 f1 	      jmp	.title_image_bottom_loop_skip_wait
    429  f15d
    430  f15d				   .title_image_bottom_loop
    431  f15d
    432  f15d							; Wait until new line is ready to draw
    433  f15d		       85 02		      sta	WSYNC
      0  f15f					      sleep	16
      1  f15f				   .CYCLES    SET	16
      2  f15f
      3  f15f				  -	      IF	.CYCLES < 2
      4  f15f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f15f				  -	      ERR
      6  f15f					      ENDIF
      7  f15f
      8  f15f				  -	      IF	.CYCLES & 1
      9  f15f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f15f				  -	      nop	0
     11  f15f				  -	      ELSE
     12  f15f				  -	      bit	VSYNC
     13  f15f				  -	      ENDIF
     14  f15f				  -.CYCLES    SET	.CYCLES - 3
     15  f15f					      ENDIF
     16  f15f
     17  f15f					      REPEAT	.CYCLES / 2
     18  f15f		       ea		      nop
     17  f15f					      REPEND
     18  f160		       ea		      nop
     17  f160					      REPEND
     18  f161		       ea		      nop
     17  f161					      REPEND
     18  f162		       ea		      nop
     17  f162					      REPEND
     18  f163		       ea		      nop
     17  f163					      REPEND
     18  f164		       ea		      nop
     17  f164					      REPEND
     18  f165		       ea		      nop
     17  f165					      REPEND
     18  f166		       ea		      nop
     19  f167					      REPEND
    435  f167
    436  f167				   .title_image_bottom_loop_skip_wait
    437  f167
    438  f167							; Draw Image
    439  f167		       b9 26 f2 	      lda	TitleImageBottom,y
    440  f16a		       85 0e		      sta	PF1
    441  f16c		       c8		      iny
    442  f16d		       b9 26 f2 	      lda	TitleImageBottom,y
    443  f170		       85 0f		      sta	PF2
    444  f172		       c8		      iny
    445  f173		       b9 26 f2 	      lda	TitleImageBottom,y
    446  f176		       c8		      iny
      0  f177					      sleep	5
      1  f177				   .CYCLES    SET	5
      2  f177
      3  f177				  -	      IF	.CYCLES < 2
      4  f177				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f177				  -	      ERR
      6  f177					      ENDIF
      7  f177
      8  f177					      IF	.CYCLES & 1
      9  f177					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f177		       04 00		      nop	0
     11  f179				  -	      ELSE
     12  f179				  -	      bit	VSYNC
     13  f179					      ENDIF
     14  f179				   .CYCLES    SET	.CYCLES - 3
     15  f179					      ENDIF
     16  f179
     17  f179					      REPEAT	.CYCLES / 2
     18  f179		       ea		      nop
     19  f17a					      REPEND
    448  f17a		       85 0f		      sta	PF2
    449  f17c		       b9 26 f2 	      lda	TitleImageBottom,y
    450  f17f		       85 0e		      sta	PF1
    451  f181
    452  f181							; Clear bottom of index
    453  f181		       98		      tya
    454  f182		       29 fc		      and	#%11111100
    455  f184		       a8		      tay
    456  f185
    457  f185		       ca		      dex
    458  f186		       d0 d5		      bne	.title_image_bottom_loop
    459  f188
    460  f188							; Add 4 to image index to skip to next line
    461  f188					      REPEAT	4
    462  f188		       c8		      iny
    461  f188					      REPEND
    462  f189		       c8		      iny
    461  f189					      REPEND
    462  f18a		       c8		      iny
    461  f18a					      REPEND
    462  f18b		       c8		      iny
    463  f18c					      REPEND
    464  f18c
    465  f18c		       c0 18		      cpy	#TITLE_IMAGE*TITLE_DATA_SIZE
    466  f18e		       d0 c3		      bne	.title_image_bottom_line
    467  f190
    468  f190				   .title_border_v_bottom
    469  f190
    470  f190							; Number of Scanlines
    471  f190		       a2 20		      ldx	#TITLE_PAD*TITLE_LINE_SIZE
    472  f192
    473  f192							; Mirror playfield
    474  f192		       a9 01		      lda	#%00000001
    475  f194		       85 0a		      sta	CTRLPF
    476  f196
    477  f196							; Draw Playfield
    478  f196		       a9 10		      lda	#%00010000
    479  f198		       85 0d		      sta	PF0
    480  f19a
    481  f19a		       a9 00		      lda	#$00
    482  f19c		       85 0e		      sta	PF1
    483  f19e		       85 0f		      sta	PF2
    484  f1a0
    485  f1a0				   .title_border_v_bottom_loop
    486  f1a0
    487  f1a0		       85 02		      sta	WSYNC
    488  f1a2		       ca		      dex
    489  f1a3		       d0 fb		      bne	.title_border_v_bottom_loop
    490  f1a5
    491  f1a5				   .title_border_h_bottom
    492  f1a5
    493  f1a5							; Number of Scanlines
    494  f1a5		       a2 08		      ldx	#TITLE_BORDER*TITLE_LINE_SIZE
    495  f1a7
    496  f1a7							; Draw Playfield
    497  f1a7		       a9 ff		      lda	#$FF
    498  f1a9		       85 0d		      sta	PF0
    499  f1ab		       85 0e		      sta	PF1
    500  f1ad		       85 0f		      sta	PF2
    501  f1af
    502  f1af				   .title_border_h_bottom_loop
    503  f1af
    504  f1af		       85 02		      sta	WSYNC
    505  f1b1		       ca		      dex
    506  f1b2		       d0 fb		      bne	.title_border_h_bottom_loop
    507  f1b4
    508  f1b4				   .title_overscan		; 30 scanlines of overscan
    509  f1b4
    510  f1b4		       a9 42		      lda	#%01000010
    511  f1b6		       85 01		      sta	VBLANK	; end of screen - enter blanking
    512  f1b8
    513  f1b8		       a2 1e		      ldx	#KERNEL_OVERSCAN
    514  f1ba				   .title_overscan_loop
    515  f1ba
    516  f1ba		       85 02		      sta	WSYNC
    517  f1bc		       ca		      dex
    518  f1bd		       d0 fb		      bne	.title_overscan_loop
    519  f1bf
    520  f1bf							; Check if Fire Button on controller 1 is pressed
    521  f1bf		       a5 0c		      lda	INPT4
    522  f1c1		       10 03		      bpl	StartScreen
    523  f1c3		       4c b9 f0 	      jmp	TitleFrame
    524  f1c6
    525  f1c6				   StartScreen
    526  f1c6
    527  f1c6							; Init variables here
    528  f1c6
    529  f1c6				   StartFrame
    530  f1c6
    531  f1c6				   .start_vsync 		; Start of vertical blank processing
    532  f1c6
    533  f1c6		       a9 00		      lda	#0
    534  f1c8		       85 01		      sta	VBLANK
    535  f1ca
    536  f1ca		       a9 02		      lda	#2
    537  f1cc		       85 00		      sta	VSYNC
    538  f1ce
    539  f1ce							; VSYNCH signal scanlines
    540  f1ce					      REPEAT	#KERNEL_VSYNC
    541  f1ce		       85 02		      sta	WSYNC
    540  f1ce					      REPEND
    541  f1d0		       85 02		      sta	WSYNC
    540  f1d0					      REPEND
    541  f1d2		       85 02		      sta	WSYNC
    542  f1d4					      REPEND
    543  f1d4
    544  f1d4		       a9 00		      lda	#0
    545  f1d6		       85 00		      sta	VSYNC
    546  f1d8
    547  f1d8				   .start_vblank		; scanlines of vertical blank
    548  f1d8
    549  f1d8		       a2 25		      ldx	#KERNEL_VBLANK
    550  f1da				   .start_vblank_loop
    551  f1da
    552  f1da		       85 02		      sta	WSYNC
    553  f1dc		       ca		      dex
    554  f1dd		       d0 fb		      bne	.start_vblank_loop
    555  f1df
    556  f1df				   .start_scanline		; Do 192 scanlines
    557  f1df
    558  f1df		       a9 08		      lda	#$08	; Clear playfields (with temp design)
    559  f1e1		       85 0d		      sta	PF0
    560  f1e3		       85 0e		      sta	PF1
    561  f1e5		       85 0f		      sta	PF2
    562  f1e7
    563  f1e7		       a2 c0		      ldx	#KERNEL_SCANLINES	; Iterate through all scanlines
    564  f1e9				   .start_scanline_loop
    565  f1e9
    566  f1e9		       85 02		      sta	WSYNC
    567  f1eb		       ca		      dex
    568  f1ec		       d0 fb		      bne	.start_scanline_loop
    569  f1ee
    570  f1ee				   .start_overscan		; 30 scanlines of overscan
    571  f1ee
    572  f1ee		       a9 42		      lda	#%01000010
    573  f1f0		       85 01		      sta	VBLANK	; end of screen - enter blanking
    574  f1f2
    575  f1f2		       a2 1e		      ldx	#KERNEL_OVERSCAN
    576  f1f4				   .start_overscan_loop
    577  f1f4
    578  f1f4		       85 02		      sta	WSYNC
    579  f1f6		       ca		      dex
    580  f1f7		       d0 fb		      bne	.start_overscan_loop
    581  f1f9
    582  f1f9		       4c c6 f1 	      jmp	StartFrame
    583  f1fc
    584  f1fc				   LogoData		; 6 bytes over 8 lines each, total of 48 lines
    585  f1fc
    586  f1fc		       00		      .BYTE.b	%00000000	; Reversed
    587  f1fd		       10		      .BYTE.b	%00010000	; First 4 bits reversed
    588  f1fe
    589  f1fe		       80		      .BYTE.b	%10000000
    590  f1ff		       20		      .BYTE.b	%00100000
    591  f200
    592  f200		       40		      .BYTE.b	%01000000
    593  f201		       40		      .BYTE.b	%01000000
    594  f202
    595  f202		       20		      .BYTE.b	%00100000
    596  f203		       80		      .BYTE.b	%10000000
    597  f204
    598  f204		       10		      .BYTE.b	%00010000
    599  f205		       08		      .BYTE.b	%00001000
    600  f206
    601  f206		       08		      .BYTE.b	%00001000
    602  f207		       00		      .BYTE.b	%00000000
    603  f208
    604  f208		       04		      .BYTE.b	%00000100
    605  f209		       00		      .BYTE.b	%00000000
    606  f20a
    607  f20a		       02		      .BYTE.b	%00000010
    608  f20b		       00		      .BYTE.b	%00000000
    609  f20c
    610  f20c		       ff		      .BYTE.b	%11111111
    611  f20d		       ff		      .BYTE.b	%11111111
    612  f20e
    613  f20e				   TitleImageTop		; Spider
    614  f20e
    615  f20e		       1e		      .BYTE.b	%00011110	; Normal
    616  f20f		       77		      .BYTE.b	%01110111	; Reversed
    617  f210		       e7		      .BYTE.b	%11100111	; Normal
    618  f211		       0e		      .BYTE.b	%00001110	; Reversed
    619  f212
    620  f212		       10		      .BYTE.b	%00010000
    621  f213		       25		      .BYTE.b	%00100101
    622  f214		       94		      .BYTE.b	%10010100
    623  f215		       12		      .BYTE.b	%00010010
    624  f216
    625  f216		       10		      .BYTE.b	%00010000
    626  f217		       27		      .BYTE.b	%00100111
    627  f218		       96		      .BYTE.b	%10010110
    628  f219		       12		      .BYTE.b	%00010010
    629  f21a
    630  f21a		       1c		      .BYTE.b	%00011100
    631  f21b		       21		      .BYTE.b	%00100001
    632  f21c		       94		      .BYTE.b	%10010100
    633  f21d		       0e		      .BYTE.b	%00001110
    634  f21e
    635  f21e		       04		      .BYTE.b	%00000100
    636  f21f		       21		      .BYTE.b	%00100001
    637  f220		       94		      .BYTE.b	%10010100
    638  f221		       12		      .BYTE.b	%00010010
    639  f222
    640  f222		       1c		      .BYTE.b	%00011100
    641  f223		       71		      .BYTE.b	%01110001
    642  f224		       e7		      .BYTE.b	%11100111
    643  f225		       12		      .BYTE.b	%00010010
    644  f226
    645  f226				   TitleImageBottom		; Web & Art
    646  f226
    647  f226		       01		      .BYTE.b	%00000001	; Normal
    648  f227		       03		      .BYTE.b	%00000011	; Reversed
    649  f228		       8b		      .BYTE.b	%10001011	; Normal
    650  f229		       1d		      .BYTE.b	%00011101	; Reversed
    651  f22a
    652  f22a		       0a		      .BYTE.b	%00001010
    653  f22b		       14		      .BYTE.b	%00010100
    654  f22c		       8a		      .BYTE.b	%10001010
    655  f22d		       24		      .BYTE.b	%00100100
    656  f22e
    657  f22e		       15		      .BYTE.b	%00010101
    658  f22f		       2a		      .BYTE.b	%00101010
    659  f230		       8b		      .BYTE.b	%10001011
    660  f231		       1c		      .BYTE.b	%00011100
    661  f232
    662  f232		       24		      .BYTE.b	%00100100
    663  f233		       49		      .BYTE.b	%01001001
    664  f234		       8a		      .BYTE.b	%10001010
    665  f235		       24		      .BYTE.b	%00100100
    666  f236
    667  f236		       22		      .BYTE.b	%00100010
    668  f237		       44		      .BYTE.b	%01000100
    669  f238		       aa		      .BYTE.b	%10101010
    670  f239		       24		      .BYTE.b	%00100100
    671  f23a
    672  f23a		       11		      .BYTE.b	%00010001
    673  f23b		       23		      .BYTE.b	%00100011
    674  f23c		       53		      .BYTE.b	%01010011
    675  f23d		       1d		      .BYTE.b	%00011101
    676  f23e
    677  f23e							;-------------------------------------------
    678  f23e
    679  fffa					      ORG	$FFFA	; End of cart area
    680  fffa
    681  fffa				   InterruptVectors
    682  fffa
    683  fffa		       00 f0		      .word.w	Reset	; NMI
    684  fffc		       00 f0		      .word.w	Reset	; RESET
    685  fffe		       00 f0		      .word.w	Reset	; IRQ
    686  10000
    687  10000					       END
