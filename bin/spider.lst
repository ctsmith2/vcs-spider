------- FILE spider.asm LEVEL 1 PASS 2
      1  10000 ????						; 8 Legs of Love game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: August 28th, 2018
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE spider.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE spider.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????
     38  10000 ????						; Logo
     39  10000 ????		00 09	    LOGO_SIZE  =	9
     40  10000 ????		00 30	    LOGO_START =	48
     41  10000 ????		00 08	    LOGO_INTERVAL =	8
     42  10000 ????		00 b4	    LOGO_FRAMES =	180
     43  10000 ????
     44  10000 ????		00 a2	    LOGO_BG_COLU =	#$A2
     45  10000 ????		00 5e	    LOGO_FG_COLU =	#$5E
     46  10000 ????
     47  10000 ????		00 04	    LOGO_AUD_0_TONE =	4
     48  10000 ????		00 0f	    LOGO_AUD_0_VOLUME =	15	; 15 is max
     49  10000 ????		00 01	    LOGO_AUD_1_TONE =	1
     50  10000 ????		00 03	    LOGO_AUD_1_VOLUME =	3
     51  10000 ????		00 0c	    LOGO_AUD_LENGTH =	12
     52  10000 ????		00 08	    LOGO_AUD_STEP =	8
     53  10000 ????
     54  10000 ????						; Title
     55  10000 ????		00 08	    TITLE_LINE_SIZE =	8
     56  10000 ????		00 04	    TITLE_DATA_SIZE =	%00000100
     57  10000 ????		00 01	    TITLE_BORDER =	1
     58  10000 ????		00 04	    TITLE_PAD  =	4
     59  10000 ????		00 06	    TITLE_IMAGE =	6
     60  10000 ????		00 02	    TITLE_GAP  =	2
     61  10000 ????
     62  10000 ????		00 70	    TITLE_BG_COLU =	#$70
     63  10000 ????		00 7e	    TITLE_BD_COLU =	#$7E
     64  10000 ????		00 0e	    TITLE_FG_COLU =	#$0E
     65  10000 ????
     66  10000 ????		00 04	    TITLE_AUD_0_TONE =	4
     67  10000 ????		00 04	    TITLE_AUD_0_VOLUME =	4
     68  10000 ????		00 07	    TITLE_AUD_1_VOLUME =	7
     69  10000 ????		00 10	    TITLE_AUD_LENGTH =	16
     70  10000 ????		00 09	    TITLE_AUD_STEP =	9
     71  10000 ????
     72  10000 ????						; Game
     73  10000 ????		00 08	    GAME_PF_LINE_SIZE =	8
     74  10000 ????		00 04	    GAME_PF_DATA_SIZE =	%00000100
     75  10000 ????		00 0c	    GAME_PF_SIZE =	12
     76  10000 ????
     77  10000 ????		00 00	    GAME_BG_COLU =	#$00
     78  10000 ????		00 0c	    GAME_FG_COLU =	#$0C
     79  10000 ????
     80  10000 ????						;================
     81  10000 ????						; Variables
     82  10000 ????						;================
     83  10000 ????
     84 U0084 ????				      SEG.U	vars
     85 U0080					      org	$80
     86 U0080
     87 U0080		       00 00 00 00*Overlay    ds	8
     88 U0088
     89 U0080					      org	Overlay
     90 U0080
     91 U0080							; Animation/Logic System
     92 U0080
     93 U0080		       00	   AnimationFrame ds	1	; 1 byte to count frames
     94 U0081		       00	   AnimationSubFrame ds	1	; 1 byte to count portions of frames
     95 U0082
     96 U0082							; Audio System
     97 U0082
     98 U0082		       00	   AudioFrame ds	1
     99 U0083		       00	   AudioStep  ds	1
    100 U0084
    101  10000 ????				       SEG
    102  10000 ????
    103  f000					      ORG	$F000	; Start of cart area
    104  f000
    105  f000				   Reset
    106  f000
    107  f000				   .initstack
    108  f000
    109  f000		       a2 00		      ldx	#0
    110  f002		       8a		      txa
    111  f003
    112  f003				   .initstack_loop
    113  f003
    114  f003		       ca		      dex
    115  f004		       9a		      txs
    116  f005		       48		      pha
    117  f006		       d0 fb		      bne	.initstack_loop
    118  f008
    119  f008							; Stack pointer now $FF, a=x=0, TIA registers (0 - $7F) = RAM ($80 - $FF) = 0
    120  f008
    121  f008				   .initvars
    122  f008
    123  f008							; Set background color
    124  f008		       a9 00		      lda	#$00	; Black
    125  f00a		       85 09		      sta	COLUBK
    126  f00c
    127  f00c							; Set the playfield and player color
    128  f00c		       a9 0e		      lda	#$0E	; White
    129  f00e		       85 08		      sta	COLUPF
    130  f010		       85 06		      sta	COLUP0
    131  f012		       85 07		      sta	COLUP1
    132  f014
    133  f014							; Playfield Control
    134  f014		       a9 00		      lda	#%00000000	; 1 for mirroring
    135  f016		       85 0a		      sta	CTRLPF
    136  f018
    137  f018							; Disable Game Elements
    138  f018		       a9 00		      lda	#$00
    139  f01a		       85 1f		      sta	ENABL	; Turn off ball
    140  f01c		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    141  f01e		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    142  f020		       85 1b		      sta	GRP0	; Turn off player 1
    143  f022		       85 1c		      sta	GRP1	; Turn off player 2
    144  f024
    145  f024							; Empty playfield
    146  f024		       a9 00		      lda	#%00000000
    147  f026		       85 0d		      sta	PF0
    148  f028		       85 0e		      sta	PF1
    149  f02a		       85 0f		      sta	PF2
    150  f02c
    151  f02c				   LogoScreen
    152  f02c
    153  f02c							; Load Colors
    154  f02c		       a9 a2		      lda	#LOGO_BG_COLU
    155  f02e		       85 09		      sta	COLUBK
    156  f030		       a9 5e		      lda	#LOGO_FG_COLU
    157  f032		       85 08		      sta	COLUPF
    158  f034
    159  f034							; Load audio settings
    160  f034		       a9 04		      lda	#LOGO_AUD_0_TONE
    161  f036		       85 15		      sta	AUDC0
    162  f038		       a9 0f		      lda	#LOGO_AUD_0_VOLUME
    163  f03a		       85 19		      sta	AUDV0
    164  f03c		       a9 01		      lda	#LOGO_AUD_1_TONE
    165  f03e		       85 16		      sta	AUDC1
    166  f040		       a9 03		      lda	#LOGO_AUD_1_VOLUME
    167  f042		       85 1a		      sta	AUDV1
    168  f044		       a9 00		      lda	#0
    169  f046		       85 82		      sta	AudioFrame
    170  f048		       85 83		      sta	AudioStep
    171  f04a
    172  f04a							; Play first note
    173  f04a		       a8		      tay
    174  f04b		       b9 2d f3 	      lda	LogoAudio0,y
    175  f04e		       85 17		      sta	AUDF0
    176  f050		       b9 39 f3 	      lda	LogoAudio1,y
    177  f053		       85 18		      sta	AUDF1
    178  f055
    179  f055							; Load number of frames into AnimationFrame
    180  f055		       a9 b4		      lda	#LOGO_FRAMES
    181  f057		       85 80		      sta	AnimationFrame
    182  f059
    183  f059							; Initialize sub frame
    184  f059		       a9 00		      lda	#0
    185  f05b		       85 81		      sta	AnimationSubFrame
    186  f05d
    187  f05d				   LogoFrame
    188  f05d
    189  f05d				   .logo_audio
    190  f05d
    191  f05d							; Increment Audio Frame
    192  f05d		       a6 82		      ldx	AudioFrame
    193  f05f		       e8		      inx
    194  f060		       86 82		      stx	AudioFrame
    195  f062
    196  f062							; Check if we need to play the next note
    197  f062		       e0 08		      cpx	#LOGO_AUD_STEP
    198  f064		       90 28		      bcc	.logo_audio_skip
    199  f066
    200  f066				   .logo_audio_play
    201  f066
    202  f066							; Reset AudioFrame
    203  f066		       a9 00		      lda	#0
    204  f068		       85 82		      sta	AudioFrame
    205  f06a
    206  f06a							; Check if we're at the end of the melody
    207  f06a		       a4 83		      ldy	AudioStep
    208  f06c		       c0 0b		      cpy	#LOGO_AUD_LENGTH-1
    209  f06e		       f0 10		      beq	.logo_audio_mute
    210  f070
    211  f070				   .logo_audio_play_note
    212  f070
    213  f070							; Increment Audio position
    214  f070		       c8		      iny
    215  f071		       84 83		      sty	AudioStep
    216  f073
    217  f073							; Load note and play
    218  f073		       b9 2d f3 	      lda	LogoAudio0,y
    219  f076		       85 17		      sta	AUDF0
    220  f078		       b9 39 f3 	      lda	LogoAudio1,y
    221  f07b		       85 18		      sta	AUDF1
    222  f07d		       4c 8e f0 	      jmp	.logo_audio_mute_skip
    223  f080
    224  f080				   .logo_audio_mute
    225  f080
    226  f080							; Mute audio
    227  f080		       a9 00		      lda	#0
    228  f082		       85 15		      sta	AUDC0
    229  f084		       85 19		      sta	AUDV0
    230  f086		       85 17		      sta	AUDF0
    231  f088		       85 16		      sta	AUDC1
    232  f08a		       85 1a		      sta	AUDV1
    233  f08c		       85 18		      sta	AUDF1
    234  f08e
    235  f08e				   .logo_audio_mute_skip
    236  f08e
    237  f08e				   .logo_audio_skip
    238  f08e
    239  f08e				   .logo_vsync		; Start of vertical blank processing
    240  f08e
    241  f08e		       a9 00		      lda	#0
    242  f090		       85 01		      sta	VBLANK
    243  f092
    244  f092		       a9 02		      lda	#2
    245  f094		       85 00		      sta	VSYNC
    246  f096
    247  f096							; VSYNCH signal scanlines
    248  f096					      REPEAT	#KERNEL_VSYNC
    249  f096		       85 02		      sta	WSYNC
    248  f096					      REPEND
    249  f098		       85 02		      sta	WSYNC
    248  f098					      REPEND
    249  f09a		       85 02		      sta	WSYNC
    250  f09c					      REPEND
    251  f09c
    252  f09c		       a9 00		      lda	#0
    253  f09e		       85 00		      sta	VSYNC
    254  f0a0
    255  f0a0				   .logo_vblank 		; scanlines of vertical blank
    256  f0a0
    257  f0a0		       a2 25		      ldx	#KERNEL_VBLANK
    258  f0a2				   .logo_vblank_loop
    259  f0a2
    260  f0a2		       85 02		      sta	WSYNC
    261  f0a4		       ca		      dex
    262  f0a5		       d0 fb		      bne	.logo_vblank_loop
    263  f0a7
    264  f0a7				   .logo_scanline		; Do 192 scanlines
    265  f0a7
    266  f0a7		       a9 00		      lda	#$00	; Clear playfields
    267  f0a9		       85 0d		      sta	PF0
    268  f0ab		       85 0e		      sta	PF1
    269  f0ad		       85 0f		      sta	PF2
    270  f0af
    271  f0af		       a2 30		      ldx	#LOGO_START	; This counts our scanline number
    272  f0b1				   .logo_scanline_start
    273  f0b1
    274  f0b1		       85 02		      sta	WSYNC
    275  f0b3		       ca		      dex
    276  f0b4		       d0 fb		      bne	.logo_scanline_start
    277  f0b6
    278  f0b6		       a2 00		      ldx	#0
    279  f0b8				   .logo_scanline_loop
    280  f0b8
    281  f0b8							; Cleanup
    282  f0b8		       85 0e		      sta	PF1
    283  f0ba
    284  f0ba		       8a		      txa
    285  f0bb		       4a		      lsr		; Divide counter by 4
    286  f0bc		       4a		      lsr
    287  f0bd		       29 fe		      and	#%11111110	; Remove 0th bit
    288  f0bf		       a8		      tay
    289  f0c0
    290  f0c0							; Check if we need to display line
    291  f0c0		       c4 81		      cpy	AnimationSubFrame
    292  f0c2		       b0 17		      bcs	.logo_scanline_skip
    293  f0c4
    294  f0c4							; Load first half of data
    295  f0c4		       b9 1b f3 	      lda	LogoData,y
    296  f0c7		       85 0f		      sta	PF2
    297  f0c9
    298  f0c9							; Load second half of data
    299  f0c9		       c8		      iny
    300  f0ca		       b9 1b f3 	      lda	LogoData,y
    301  f0cd
    302  f0cd							; Use 4 MSB bits on PF0
    303  f0cd		       85 0d		      sta	PF0
    304  f0cf
    305  f0cf							; Use 4 LSB bits on PF1
    306  f0cf					      REPEAT	4
    307  f0cf		       0a		      asl
    306  f0cf					      REPEND
    307  f0d0		       0a		      asl
    306  f0d0					      REPEND
    307  f0d1		       0a		      asl
    306  f0d1					      REPEND
    307  f0d2		       0a		      asl
    308  f0d3					      REPEND
    309  f0d3		       85 0e		      sta	PF1
    310  f0d5
    311  f0d5							; Cleanup
    312  f0d5		       a9 00		      lda	#$00
    313  f0d7		       85 0f		      sta	PF2
    314  f0d9		       85 0d		      sta	PF0
    315  f0db
    316  f0db				   .logo_scanline_skip
    317  f0db
    318  f0db							; Clear Playfields
    319  f0db		       a9 00		      lda	#$00
    320  f0dd		       85 0d		      sta	PF0
    321  f0df		       85 0e		      sta	PF1
    322  f0e1		       85 0f		      sta	PF2
    323  f0e3
    324  f0e3							; Wait for next line
    325  f0e3		       85 02		      sta	WSYNC
    326  f0e5
    327  f0e5							; Check if at end of logo display
    328  f0e5		       e8		      inx
    329  f0e6		       e0 48		      cpx	#LOGO_SIZE*LOGO_INTERVAL
    330  f0e8		       d0 ce		      bne	.logo_scanline_loop
    331  f0ea
    332  f0ea		       a2 48		      ldx	#KERNEL_SCANLINES-LOGO_START-LOGO_SIZE*LOGO_INTERVAL
    333  f0ec				   .logo_scanline_end
    334  f0ec
    335  f0ec		       85 02		      sta	WSYNC
    336  f0ee		       ca		      dex
    337  f0ef		       d0 fb		      bne	.logo_scanline_end
    338  f0f1
    339  f0f1				   .logo_overscan		; 30 scanlines of overscan
    340  f0f1
    341  f0f1		       a9 42		      lda	#%01000010
    342  f0f3		       85 01		      sta	VBLANK	; end of screen - enter blanking
    343  f0f5
    344  f0f5		       a2 1e		      ldx	#KERNEL_OVERSCAN
    345  f0f7				   .logo_overscan_loop
    346  f0f7
    347  f0f7		       85 02		      sta	WSYNC
    348  f0f9		       ca		      dex
    349  f0fa		       d0 fb		      bne	.logo_overscan_loop
    350  f0fc
    351  f0fc		       a6 80		      ldx	AnimationFrame
    352  f0fe
    353  f0fe							; Divide inverted AnimationFrame by 4 and put in AnimationSubFrame
    354  f0fe		       a9 b4		      lda	#LOGO_FRAMES
    355  f100		       e5 80		      sbc	AnimationFrame
    356  f102		       4a		      lsr
    357  f103		       4a		      lsr
    358  f104		       85 81		      sta	AnimationSubFrame
    359  f106
    360  f106							; Decrement AnimationFrame
    361  f106		       ca		      dex
    362  f107		       86 80		      stx	AnimationFrame
    363  f109
    364  f109							; Check if we're at the end of the animation
    365  f109		       f0 03		      beq	TitleScreen
    366  f10b		       4c 5d f0 	      jmp	LogoFrame
    367  f10e
    368  f10e				   TitleScreen
    369  f10e
    370  f10e							; Clear playfields
    371  f10e		       a9 00		      lda	#$00
    372  f110		       85 0d		      sta	PF0
    373  f112		       85 0e		      sta	PF1
    374  f114		       85 0f		      sta	PF2
    375  f116
    376  f116							; Background Color
    377  f116		       a9 70		      lda	#TITLE_BG_COLU
    378  f118		       85 09		      sta	COLUBK
    379  f11a
    380  f11a							; Border Color
    381  f11a		       a9 7e		      lda	#TITLE_BD_COLU
    382  f11c		       85 08		      sta	COLUPF
    383  f11e
    384  f11e							; Load audio settings
    385  f11e
    386  f11e							; Melody Line
    387  f11e		       a9 04		      lda	#TITLE_AUD_0_TONE
    388  f120		       85 15		      sta	AUDC0
    389  f122		       a9 04		      lda	#TITLE_AUD_0_VOLUME
    390  f124		       85 19		      sta	AUDV0
    391  f126
    392  f126							; Drums and Bass
    393  f126		       a9 00		      lda	#0
    394  f128		       85 16		      sta	AUDC1
    395  f12a		       85 1a		      sta	AUDV1
    396  f12c
    397  f12c							; Make it so that we play the first note immediately
    398  f12c		       a9 08		      lda	#TITLE_AUD_STEP-1
    399  f12e		       85 82		      sta	AudioFrame
    400  f130		       a9 0f		      lda	#TITLE_AUD_LENGTH-1
    401  f132		       85 83		      sta	AudioStep
    402  f134
    403  f134				   TitleFrame
    404  f134
    405  f134				   .title_audio
    406  f134
    407  f134							; Increment Audio Frame
    408  f134		       a6 82		      ldx	AudioFrame
    409  f136		       e8		      inx
    410  f137		       86 82		      stx	AudioFrame
    411  f139
    412  f139							; Check if we need to play the next note
    413  f139		       e0 09		      cpx	#TITLE_AUD_STEP
    414  f13b		       90 31		      bcc	.title_audio_skip
    415  f13d
    416  f13d				   .title_audio_play
    417  f13d
    418  f13d							; Reset AudioFrame
    419  f13d		       a9 00		      lda	#0
    420  f13f		       85 82		      sta	AudioFrame
    421  f141
    422  f141							; Increment melody position
    423  f141		       a4 83		      ldy	AudioStep
    424  f143		       c8		      iny
    425  f144
    426  f144							; Check if we're at the end of the melody
    427  f144		       c0 10		      cpy	#TITLE_AUD_LENGTH
    428  f146		       d0 02		      bne	.title_audio_play_note
    429  f148
    430  f148							; Loop our audio step
    431  f148		       a0 00		      ldy	#0
    432  f14a
    433  f14a				   .title_audio_play_note
    434  f14a
    435  f14a							; Save current position
    436  f14a		       84 83		      sty	AudioStep
    437  f14c
    438  f14c							; Basic Melody Line
    439  f14c		       b9 75 f3 	      lda	TitleAudio0,y
    440  f14f		       85 17		      sta	AUDF0
    441  f151
    442  f151							; Drums and Bass
    443  f151		       b9 85 f3 	      lda	TitleTone1,y
    444  f154		       c9 ff		      cmp	#$FF
    445  f156		       f0 0e		      beq	.title_audio_play_note_1_mute
    446  f158
    447  f158		       85 16		      sta	AUDC1
    448  f15a		       b9 95 f3 	      lda	TitleAudio1,y
    449  f15d		       85 18		      sta	AUDF1
    450  f15f		       a9 07		      lda	#TITLE_AUD_1_VOLUME
    451  f161		       85 1a		      sta	AUDV1
    452  f163
    453  f163		       4c 6e f1 	      jmp	.title_audio_skip
    454  f166
    455  f166				   .title_audio_play_note_1_mute
    456  f166
    457  f166		       a9 00		      lda	#0
    458  f168		       85 18		      sta	AUDF1
    459  f16a		       85 16		      sta	AUDC1
    460  f16c		       85 1a		      sta	AUDV1
    461  f16e
    462  f16e				   .title_audio_skip
    463  f16e
    464  f16e				   .title_vsync 		; Start of vertical blank processing
    465  f16e
    466  f16e		       a9 00		      lda	#0
    467  f170		       85 01		      sta	VBLANK
    468  f172
    469  f172		       a9 02		      lda	#2
    470  f174		       85 00		      sta	VSYNC
    471  f176
    472  f176							; VSYNCH signal scanlines
    473  f176					      REPEAT	#KERNEL_VSYNC
    474  f176		       85 02		      sta	WSYNC
    473  f176					      REPEND
    474  f178		       85 02		      sta	WSYNC
    473  f178					      REPEND
    474  f17a		       85 02		      sta	WSYNC
    475  f17c					      REPEND
    476  f17c
    477  f17c		       a9 00		      lda	#0
    478  f17e		       85 00		      sta	VSYNC
    479  f180
    480  f180				   .title_vblank		; scanlines of vertical blank
    481  f180
    482  f180		       a2 25		      ldx	#KERNEL_VBLANK
    483  f182				   .title_vblank_loop
    484  f182
    485  f182		       85 02		      sta	WSYNC
    486  f184		       ca		      dex
    487  f185		       d0 fb		      bne	.title_vblank_loop
    488  f187
    489  f187				   .title_border_h_top
    490  f187
    491  f187							; Number of Scanlines
    492  f187		       a2 08		      ldx	#TITLE_BORDER*TITLE_LINE_SIZE
    493  f189
    494  f189							; Draw Playfield
    495  f189		       a9 ff		      lda	#$FF
    496  f18b		       85 0d		      sta	PF0
    497  f18d		       85 0e		      sta	PF1
    498  f18f		       85 0f		      sta	PF2
    499  f191
    500  f191				   .title_border_h_top_loop
    501  f191
    502  f191		       85 02		      sta	WSYNC
    503  f193		       ca		      dex
    504  f194		       d0 fb		      bne	.title_border_h_top_loop
    505  f196
    506  f196				   .title_border_v_top
    507  f196
    508  f196							; Number of Scanlines
    509  f196		       a2 20		      ldx	#TITLE_PAD*TITLE_LINE_SIZE
    510  f198
    511  f198							; Mirror playfield
    512  f198		       a9 01		      lda	#%00000001
    513  f19a		       85 0a		      sta	CTRLPF
    514  f19c
    515  f19c							; Draw Playfield
    516  f19c		       a9 10		      lda	#%00010000
    517  f19e		       85 0d		      sta	PF0
    518  f1a0
    519  f1a0		       a9 00		      lda	#$00
    520  f1a2		       85 0e		      sta	PF1
    521  f1a4		       85 0f		      sta	PF2
    522  f1a6
    523  f1a6				   .title_border_v_top_loop
    524  f1a6
    525  f1a6		       85 02		      sta	WSYNC
    526  f1a8		       ca		      dex
    527  f1a9		       d0 fb		      bne	.title_border_v_top_loop
    528  f1ab
    529  f1ab				   .title_image_top
    530  f1ab
    531  f1ab		       a0 00		      ldy	#$00	; Current Image Index
    532  f1ad		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    533  f1af
    534  f1af		       4c ba f1 	      jmp	.title_image_top_loop
    535  f1b2
    536  f1b2				   .title_image_top_loop_wait
    537  f1b2
    538  f1b2							; Wait until new line is ready to draw
    539  f1b2		       85 02		      sta	WSYNC
      0  f1b4					      sleep	11
      1  f1b4				   .CYCLES    SET	11
      2  f1b4
      3  f1b4				  -	      IF	.CYCLES < 2
      4  f1b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1b4				  -	      ERR
      6  f1b4					      ENDIF
      7  f1b4
      8  f1b4					      IF	.CYCLES & 1
      9  f1b4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1b4		       04 00		      nop	0
     11  f1b6				  -	      ELSE
     12  f1b6				  -	      bit	VSYNC
     13  f1b6					      ENDIF
     14  f1b6				   .CYCLES    SET	.CYCLES - 3
     15  f1b6					      ENDIF
     16  f1b6
     17  f1b6					      REPEAT	.CYCLES / 2
     18  f1b6		       ea		      nop
     17  f1b6					      REPEND
     18  f1b7		       ea		      nop
     17  f1b7					      REPEND
     18  f1b8		       ea		      nop
     17  f1b8					      REPEND
     18  f1b9		       ea		      nop
     19  f1ba					      REPEND
    541  f1ba
    542  f1ba				   .title_image_top_loop
    543  f1ba
    544  f1ba							; Draw Image
    545  f1ba		       b9 45 f3 	      lda	TitleImageTop,y
    546  f1bd		       85 0e		      sta	PF1
    547  f1bf		       c8		      iny
    548  f1c0
    549  f1c0							; Set Image Color
    550  f1c0		       a9 0e		      lda	#TITLE_FG_COLU
    551  f1c2		       85 08		      sta	COLUPF
    552  f1c4
    553  f1c4							; Finish Drawing Image
    554  f1c4		       b9 45 f3 	      lda	TitleImageTop,y
    555  f1c7		       85 0f		      sta	PF2
    556  f1c9		       c8		      iny
    557  f1ca		       b9 45 f3 	      lda	TitleImageTop,y
    558  f1cd		       c8		      iny
      0  f1ce					      sleep	5
      1  f1ce				   .CYCLES    SET	5
      2  f1ce
      3  f1ce				  -	      IF	.CYCLES < 2
      4  f1ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1ce				  -	      ERR
      6  f1ce					      ENDIF
      7  f1ce
      8  f1ce					      IF	.CYCLES & 1
      9  f1ce					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1ce		       04 00		      nop	0
     11  f1d0				  -	      ELSE
     12  f1d0				  -	      bit	VSYNC
     13  f1d0					      ENDIF
     14  f1d0				   .CYCLES    SET	.CYCLES - 3
     15  f1d0					      ENDIF
     16  f1d0
     17  f1d0					      REPEAT	.CYCLES / 2
     18  f1d0		       ea		      nop
     19  f1d1					      REPEND
    560  f1d1		       85 0f		      sta	PF2
    561  f1d3		       b9 45 f3 	      lda	TitleImageTop,y
    562  f1d6		       85 0e		      sta	PF1
    563  f1d8
    564  f1d8							; Clear bottom of index
    565  f1d8		       98		      tya
    566  f1d9		       29 fc		      and	#%11111100
    567  f1db		       a8		      tay
    568  f1dc
    569  f1dc							; Restore border color
      0  f1dc					      sleep	2
      1  f1dc				   .CYCLES    SET	2
      2  f1dc
      3  f1dc				  -	      IF	.CYCLES < 2
      4  f1dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1dc				  -	      ERR
      6  f1dc					      ENDIF
      7  f1dc
      8  f1dc				  -	      IF	.CYCLES & 1
      9  f1dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1dc				  -	      nop	0
     11  f1dc				  -	      ELSE
     12  f1dc				  -	      bit	VSYNC
     13  f1dc				  -	      ENDIF
     14  f1dc				  -.CYCLES    SET	.CYCLES - 3
     15  f1dc					      ENDIF
     16  f1dc
     17  f1dc					      REPEAT	.CYCLES / 2
     18  f1dc		       ea		      nop
     19  f1dd					      REPEND
    571  f1dd		       a9 7e		      lda	#TITLE_BD_COLU
    572  f1df		       85 08		      sta	COLUPF
    573  f1e1
    574  f1e1		       ca		      dex
    575  f1e2		       d0 ce		      bne	.title_image_top_loop_wait
    576  f1e4
    577  f1e4							; Add 4 to the image index to skip to next line
    578  f1e4					      REPEAT	4
    579  f1e4		       c8		      iny
    578  f1e4					      REPEND
    579  f1e5		       c8		      iny
    578  f1e5					      REPEND
    579  f1e6		       c8		      iny
    578  f1e6					      REPEND
    579  f1e7		       c8		      iny
    580  f1e8					      REPEND
    581  f1e8
    582  f1e8		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    583  f1ea
    584  f1ea		       c0 18		      cpy	#TITLE_IMAGE*TITLE_DATA_SIZE
    585  f1ec		       d0 cc		      bne	.title_image_top_loop
    586  f1ee
    587  f1ee				   .title_gap
    588  f1ee
    589  f1ee							; Number of Scanlines
    590  f1ee		       a2 10		      ldx	#TITLE_GAP*TITLE_LINE_SIZE
    591  f1f0
    592  f1f0							; Mirror playfield
    593  f1f0		       a9 01		      lda	#%00000001
    594  f1f2		       85 0a		      sta	CTRLPF
    595  f1f4
    596  f1f4							; Draw Playfield
    597  f1f4		       a9 10		      lda	#%00010000
    598  f1f6		       85 0d		      sta	PF0
    599  f1f8
    600  f1f8		       a9 00		      lda	#$00
    601  f1fa		       85 0e		      sta	PF1
    602  f1fc		       85 0f		      sta	PF2
    603  f1fe
    604  f1fe				   .title_gap_loop
    605  f1fe
    606  f1fe		       85 02		      sta	WSYNC
    607  f200		       ca		      dex
    608  f201		       d0 fb		      bne	.title_gap_loop
    609  f203
    610  f203				   .title_image_bottom
    611  f203
    612  f203		       a0 00		      ldy	#$00	; Current Image Index
    613  f205		       a2 08		      ldx	#TITLE_LINE_SIZE
    614  f207
    615  f207		       4c 12 f2 	      jmp	.title_image_bottom_loop
    616  f20a
    617  f20a				   .title_image_bottom_loop_wait
    618  f20a
    619  f20a							; Wait until new line is ready to draw
    620  f20a		       85 02		      sta	WSYNC
      0  f20c					      sleep	11
      1  f20c				   .CYCLES    SET	11
      2  f20c
      3  f20c				  -	      IF	.CYCLES < 2
      4  f20c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f20c				  -	      ERR
      6  f20c					      ENDIF
      7  f20c
      8  f20c					      IF	.CYCLES & 1
      9  f20c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f20c		       04 00		      nop	0
     11  f20e				  -	      ELSE
     12  f20e				  -	      bit	VSYNC
     13  f20e					      ENDIF
     14  f20e				   .CYCLES    SET	.CYCLES - 3
     15  f20e					      ENDIF
     16  f20e
     17  f20e					      REPEAT	.CYCLES / 2
     18  f20e		       ea		      nop
     17  f20e					      REPEND
     18  f20f		       ea		      nop
     17  f20f					      REPEND
     18  f210		       ea		      nop
     17  f210					      REPEND
     18  f211		       ea		      nop
     19  f212					      REPEND
    622  f212
    623  f212				   .title_image_bottom_loop
    624  f212
    625  f212							; Draw Image
    626  f212		       b9 5d f3 	      lda	TitleImageBottom,y
    627  f215		       85 0e		      sta	PF1
    628  f217		       c8		      iny
    629  f218
    630  f218							; Set Image Color
    631  f218		       a9 0e		      lda	#TITLE_FG_COLU
    632  f21a		       85 08		      sta	COLUPF
    633  f21c
    634  f21c							; Finish Drawing Image
    635  f21c		       b9 5d f3 	      lda	TitleImageBottom,y
    636  f21f		       85 0f		      sta	PF2
    637  f221		       c8		      iny
    638  f222		       b9 5d f3 	      lda	TitleImageBottom,y
    639  f225		       c8		      iny
      0  f226					      sleep	5
      1  f226				   .CYCLES    SET	5
      2  f226
      3  f226				  -	      IF	.CYCLES < 2
      4  f226				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f226				  -	      ERR
      6  f226					      ENDIF
      7  f226
      8  f226					      IF	.CYCLES & 1
      9  f226					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f226		       04 00		      nop	0
     11  f228				  -	      ELSE
     12  f228				  -	      bit	VSYNC
     13  f228					      ENDIF
     14  f228				   .CYCLES    SET	.CYCLES - 3
     15  f228					      ENDIF
     16  f228
     17  f228					      REPEAT	.CYCLES / 2
     18  f228		       ea		      nop
     19  f229					      REPEND
    641  f229		       85 0f		      sta	PF2
    642  f22b		       b9 5d f3 	      lda	TitleImageBottom,y
    643  f22e		       85 0e		      sta	PF1
    644  f230
    645  f230							; Clear bottom of index
    646  f230		       98		      tya
    647  f231		       29 fc		      and	#%11111100
    648  f233		       a8		      tay
    649  f234
    650  f234							; Restore border color
      0  f234					      sleep	2
      1  f234				   .CYCLES    SET	2
      2  f234
      3  f234				  -	      IF	.CYCLES < 2
      4  f234				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f234				  -	      ERR
      6  f234					      ENDIF
      7  f234
      8  f234				  -	      IF	.CYCLES & 1
      9  f234				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f234				  -	      nop	0
     11  f234				  -	      ELSE
     12  f234				  -	      bit	VSYNC
     13  f234				  -	      ENDIF
     14  f234				  -.CYCLES    SET	.CYCLES - 3
     15  f234					      ENDIF
     16  f234
     17  f234					      REPEAT	.CYCLES / 2
     18  f234		       ea		      nop
     19  f235					      REPEND
    652  f235		       a9 7e		      lda	#TITLE_BD_COLU
    653  f237		       85 08		      sta	COLUPF
    654  f239
    655  f239		       ca		      dex
    656  f23a		       d0 ce		      bne	.title_image_bottom_loop_wait
    657  f23c
    658  f23c							; Add 4 to image index to skip to next line
    659  f23c					      REPEAT	4
    660  f23c		       c8		      iny
    659  f23c					      REPEND
    660  f23d		       c8		      iny
    659  f23d					      REPEND
    660  f23e		       c8		      iny
    659  f23e					      REPEND
    660  f23f		       c8		      iny
    661  f240					      REPEND
    662  f240
    663  f240		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    664  f242
    665  f242		       c0 18		      cpy	#TITLE_IMAGE*TITLE_DATA_SIZE
    666  f244		       d0 cc		      bne	.title_image_bottom_loop
    667  f246
    668  f246				   .title_border_v_bottom
    669  f246
    670  f246							; Number of Scanlines
    671  f246		       a2 20		      ldx	#TITLE_PAD*TITLE_LINE_SIZE
    672  f248
    673  f248							; Mirror playfield
    674  f248		       a9 01		      lda	#%00000001
    675  f24a		       85 0a		      sta	CTRLPF
    676  f24c
    677  f24c							; Draw Playfield
    678  f24c		       a9 10		      lda	#%00010000
    679  f24e		       85 0d		      sta	PF0
    680  f250
    681  f250		       a9 00		      lda	#$00
    682  f252		       85 0e		      sta	PF1
    683  f254		       85 0f		      sta	PF2
    684  f256
    685  f256				   .title_border_v_bottom_loop
    686  f256
    687  f256		       85 02		      sta	WSYNC
    688  f258		       ca		      dex
    689  f259		       d0 fb		      bne	.title_border_v_bottom_loop
    690  f25b
    691  f25b				   .title_border_h_bottom
    692  f25b
    693  f25b							; Number of Scanlines
    694  f25b		       a2 08		      ldx	#TITLE_BORDER*TITLE_LINE_SIZE
    695  f25d
    696  f25d							; Draw Playfield
    697  f25d		       a9 ff		      lda	#$FF
    698  f25f		       85 0d		      sta	PF0
    699  f261		       85 0e		      sta	PF1
    700  f263		       85 0f		      sta	PF2
    701  f265
    702  f265				   .title_border_h_bottom_loop
    703  f265
    704  f265		       85 02		      sta	WSYNC
    705  f267		       ca		      dex
    706  f268		       d0 fb		      bne	.title_border_h_bottom_loop
    707  f26a
    708  f26a				   .title_overscan		; 30 scanlines of overscan
    709  f26a
    710  f26a		       a9 42		      lda	#%01000010
    711  f26c		       85 01		      sta	VBLANK	; end of screen - enter blanking
    712  f26e
    713  f26e		       a2 1e		      ldx	#KERNEL_OVERSCAN
    714  f270				   .title_overscan_loop
    715  f270
    716  f270		       85 02		      sta	WSYNC
    717  f272		       ca		      dex
    718  f273		       d0 fb		      bne	.title_overscan_loop
    719  f275
    720  f275							; Check if Fire Button on controller 1 is pressed
    721  f275		       a5 0c		      lda	INPT4
    722  f277		       10 03		      bpl	GameScreen
    723  f279		       4c 34 f1 	      jmp	TitleFrame
    724  f27c
    725  f27c				   GameScreen
    726  f27c
    727  f27c							; Clear playfields
    728  f27c		       a9 00		      lda	#0
    729  f27e		       85 0d		      sta	PF0
    730  f280		       85 0e		      sta	PF1
    731  f282		       85 0f		      sta	PF2
    732  f284
    733  f284							; Mirror playfield
    734  f284		       a9 01		      lda	#%00000001
    735  f286		       85 0a		      sta	CTRLPF
    736  f288
    737  f288							; Background Color
    738  f288		       a9 00		      lda	#GAME_BG_COLU
    739  f28a		       85 09		      sta	COLUBK
    740  f28c
    741  f28c							; Foreground Color
    742  f28c		       a9 0c		      lda	#GAME_FG_COLU
    743  f28e		       85 08		      sta	COLUPF
    744  f290
    745  f290							; Mute Audio
    746  f290		       a9 00		      lda	#0
    747  f292		       85 15		      sta	AUDC0
    748  f294		       85 19		      sta	AUDV0
    749  f296		       85 17		      sta	AUDF0
    750  f298		       85 16		      sta	AUDC1
    751  f29a		       85 1a		      sta	AUDV1
    752  f29c		       85 18		      sta	AUDF1
    753  f29e
    754  f29e				   GameFrame
    755  f29e
    756  f29e				   .game_vsync		; Start of vertical blank processing
    757  f29e
    758  f29e		       a9 00		      lda	#0
    759  f2a0		       85 01		      sta	VBLANK
    760  f2a2
    761  f2a2		       a9 02		      lda	#2
    762  f2a4		       85 00		      sta	VSYNC
    763  f2a6
    764  f2a6							; VSYNCH signal scanlines
    765  f2a6					      REPEAT	#KERNEL_VSYNC
    766  f2a6		       85 02		      sta	WSYNC
    765  f2a6					      REPEND
    766  f2a8		       85 02		      sta	WSYNC
    765  f2a8					      REPEND
    766  f2aa		       85 02		      sta	WSYNC
    767  f2ac					      REPEND
    768  f2ac
    769  f2ac		       a9 00		      lda	#0
    770  f2ae		       85 00		      sta	VSYNC
    771  f2b0
    772  f2b0				   .game_vblank 		; scanlines of vertical blank
    773  f2b0
    774  f2b0		       a2 25		      ldx	#KERNEL_VBLANK
    775  f2b2				   .game_vblank_loop
    776  f2b2
    777  f2b2		       85 02		      sta	WSYNC
    778  f2b4		       ca		      dex
    779  f2b5		       d0 fb		      bne	.game_vblank_loop
    780  f2b7
    781  f2b7				   .game_playfield_top
    782  f2b7
    783  f2b7		       a0 00		      ldy	#0	; Current Image Index
    784  f2b9
    785  f2b9				   .game_playfield_top_line
    786  f2b9
    787  f2b9							; Draw Image
    788  f2b9		       b9 a5 f3 	      lda	GameImage,y
    789  f2bc		       85 0d		      sta	PF0
    790  f2be		       c8		      iny
    791  f2bf		       b9 a5 f3 	      lda	GameImage,y
    792  f2c2		       85 0e		      sta	PF1
    793  f2c4		       c8		      iny
    794  f2c5		       b9 a5 f3 	      lda	GameImage,y
    795  f2c8		       85 0f		      sta	PF2
    796  f2ca
    797  f2ca							; Clear bottom of index
    798  f2ca		       98		      tya
    799  f2cb		       29 fc		      and	#%11111100
    800  f2cd		       a8		      tay
    801  f2ce
    802  f2ce							; Add 4 to the image index to skip to next line
    803  f2ce					      REPEAT	4
    804  f2ce		       c8		      iny
    803  f2ce					      REPEND
    804  f2cf		       c8		      iny
    803  f2cf					      REPEND
    804  f2d0		       c8		      iny
    803  f2d0					      REPEND
    804  f2d1		       c8		      iny
    805  f2d2					      REPEND
    806  f2d2
    807  f2d2		       a2 08		      ldx	#GAME_PF_LINE_SIZE	; Current scanline
    808  f2d4				   .game_playfield_top_loop
    809  f2d4
    810  f2d4		       85 02		      sta	WSYNC
    811  f2d6		       ca		      dex
    812  f2d7		       d0 fb		      bne	.game_playfield_top_loop
    813  f2d9
    814  f2d9							; Reset scanlines
    815  f2d9		       a2 08		      ldx	#GAME_PF_LINE_SIZE
    816  f2db
    817  f2db							; Check if we're at end of top half
    818  f2db		       c0 30		      cpy	#GAME_PF_SIZE*GAME_PF_DATA_SIZE
    819  f2dd		       d0 da		      bne	.game_playfield_top_line
    820  f2df
    821  f2df				   .game_playfield_bottom
    822  f2df
    823  f2df		       a0 2c		      ldy	#(GAME_PF_SIZE-1)*GAME_PF_DATA_SIZE	; Current image index
    824  f2e1
    825  f2e1				   .game_playfield_bottom_line
    826  f2e1
    827  f2e1							; Draw Image
    828  f2e1		       b9 a5 f3 	      lda	GameImage,y
    829  f2e4		       85 0d		      sta	PF0
    830  f2e6		       c8		      iny
    831  f2e7		       b9 a5 f3 	      lda	GameImage,y
    832  f2ea		       85 0e		      sta	PF1
    833  f2ec		       c8		      iny
    834  f2ed		       b9 a5 f3 	      lda	GameImage,y
    835  f2f0		       85 0f		      sta	PF2
    836  f2f2
    837  f2f2							; Clear bottom of index
    838  f2f2		       98		      tya
    839  f2f3		       29 fc		      and	#%11111100
    840  f2f5		       a8		      tay
    841  f2f6
    842  f2f6							; Subtract 4 from the image index to skip to next line
    843  f2f6					      REPEAT	4
    844  f2f6		       88		      dey
    843  f2f6					      REPEND
    844  f2f7		       88		      dey
    843  f2f7					      REPEND
    844  f2f8		       88		      dey
    843  f2f8					      REPEND
    844  f2f9		       88		      dey
    845  f2fa					      REPEND
    846  f2fa
    847  f2fa		       a2 08		      ldx	#GAME_PF_LINE_SIZE	; Current scanline
    848  f2fc				   .game_playfield_bottom_loop
    849  f2fc
    850  f2fc		       85 02		      sta	WSYNC
    851  f2fe		       ca		      dex
    852  f2ff		       d0 fb		      bne	.game_playfield_bottom_loop
    853  f301
    854  f301							; Check if we're at the end of the bottom half
    855  f301		       c0 fc		      cpy	#0-GAME_PF_DATA_SIZE
    856  f303		       d0 dc		      bne	.game_playfield_bottom_line
    857  f305
    858  f305							; Clear Playfields
    859  f305		       a9 00		      lda	#0
    860  f307		       85 0d		      sta	PF0
    861  f309		       85 0e		      sta	PF1
    862  f30b		       85 0f		      sta	PF2
    863  f30d
    864  f30d				   .game_overscan		; 30 scanlines of overscan
    865  f30d
    866  f30d		       a9 42		      lda	#%01000010
    867  f30f		       85 01		      sta	VBLANK	; end of screen - enter blanking
    868  f311
    869  f311		       a2 1e		      ldx	#KERNEL_OVERSCAN
    870  f313				   .game_overscan_loop
    871  f313
    872  f313		       85 02		      sta	WSYNC
    873  f315		       ca		      dex
    874  f316		       d0 fb		      bne	.game_overscan_loop
    875  f318
    876  f318		       4c 9e f2 	      jmp	GameFrame
    877  f31b
    878  f31b				   LogoData		; 6 bytes over 8 lines each, total of 48 lines
    879  f31b
    880  f31b		       46		      .BYTE.b	%01000110	; Reversed
    881  f31c		       60		      .BYTE.b	%01100000	; First 4 bits reversed
    882  f31d
    883  f31d		       aa		      .BYTE.b	%10101010
    884  f31e		       a0		      .BYTE.b	%10100000
    885  f31f
    886  f31f		       2a		      .BYTE.b	%00101010
    887  f320		       a0		      .BYTE.b	%10100000
    888  f321
    889  f321		       aa		      .BYTE.b	%10101010
    890  f322		       a0		      .BYTE.b	%10100000
    891  f323
    892  f323		       46		      .BYTE.b	%01000110
    893  f324		       60		      .BYTE.b	%01100000
    894  f325
    895  f325		       00		      .BYTE.b	%00000000
    896  f326		       00		      .BYTE.b	%00000000
    897  f327
    898  f327		       88		      .BYTE.b	%10001000
    899  f328		       80		      .BYTE.b	%10000000
    900  f329
    901  f329		       54		      .BYTE.b	%01010100
    902  f32a		       50		      .BYTE.b	%01010000
    903  f32b
    904  f32b		       22		      .BYTE.b	%00100010
    905  f32c		       20		      .BYTE.b	%00100000
    906  f32d
    907  f32d				   LogoAudio0
    908  f32d
    909  f32d		       1d		      .BYTE.b	#29	; C
    910  f32e		       17		      .BYTE.b	#23	; E
    911  f32f		       13		      .BYTE.b	#19	; G
    912  f330		       0f		      .BYTE.b	#15	; A
    913  f331		       17		      .BYTE.b	#23	; E
    914  f332		       13		      .BYTE.b	#19	; G
    915  f333		       0f		      .BYTE.b	#15	; B
    916  f334		       0e		      .BYTE.b	#14	; C
    917  f335		       0b		      .BYTE.b	#11	; E
    918  f336		       0b		      .BYTE.b	#11
    919  f337		       0b		      .BYTE.b	#11
    920  f338		       0b		      .BYTE.b	#11
    921  f339
    922  f339				   LogoAudio1
    923  f339
    924  f339		       1f		      .BYTE.b	#31	; C
    925  f33a		       1f		      .BYTE.b	#31
    926  f33b		       1f		      .BYTE.b	#31
    927  f33c		       1f		      .BYTE.b	#31
    928  f33d		       19		      .BYTE.b	#25	; E
    929  f33e		       19		      .BYTE.b	#25
    930  f33f		       19		      .BYTE.b	#25
    931  f340		       19		      .BYTE.b	#25
    932  f341		       14		      .BYTE.b	#20	; G
    933  f342		       14		      .BYTE.b	#20
    934  f343		       14		      .BYTE.b	#20
    935  f344		       14		      .BYTE.b	#20
    936  f345
    937  f345				   TitleImageTop		; Spider
    938  f345
    939  f345		       1e		      .BYTE.b	%00011110	; Normal
    940  f346		       77		      .BYTE.b	%01110111	; Reversed
    941  f347		       e7		      .BYTE.b	%11100111	; Normal
    942  f348		       0e		      .BYTE.b	%00001110	; Reversed
    943  f349
    944  f349		       10		      .BYTE.b	%00010000
    945  f34a		       25		      .BYTE.b	%00100101
    946  f34b		       94		      .BYTE.b	%10010100
    947  f34c		       12		      .BYTE.b	%00010010
    948  f34d
    949  f34d		       10		      .BYTE.b	%00010000
    950  f34e		       27		      .BYTE.b	%00100111
    951  f34f		       96		      .BYTE.b	%10010110
    952  f350		       12		      .BYTE.b	%00010010
    953  f351
    954  f351		       1c		      .BYTE.b	%00011100
    955  f352		       21		      .BYTE.b	%00100001
    956  f353		       94		      .BYTE.b	%10010100
    957  f354		       0e		      .BYTE.b	%00001110
    958  f355
    959  f355		       04		      .BYTE.b	%00000100
    960  f356		       21		      .BYTE.b	%00100001
    961  f357		       94		      .BYTE.b	%10010100
    962  f358		       12		      .BYTE.b	%00010010
    963  f359
    964  f359		       1c		      .BYTE.b	%00011100
    965  f35a		       71		      .BYTE.b	%01110001
    966  f35b		       e7		      .BYTE.b	%11100111
    967  f35c		       12		      .BYTE.b	%00010010
    968  f35d
    969  f35d				   TitleImageBottom		; Web & Art
    970  f35d
    971  f35d		       01		      .BYTE.b	%00000001	; Normal
    972  f35e		       03		      .BYTE.b	%00000011	; Reversed
    973  f35f		       8b		      .BYTE.b	%10001011	; Normal
    974  f360		       1d		      .BYTE.b	%00011101	; Reversed
    975  f361
    976  f361		       0a		      .BYTE.b	%00001010
    977  f362		       14		      .BYTE.b	%00010100
    978  f363		       8a		      .BYTE.b	%10001010
    979  f364		       24		      .BYTE.b	%00100100
    980  f365
    981  f365		       15		      .BYTE.b	%00010101
    982  f366		       2a		      .BYTE.b	%00101010
    983  f367		       8b		      .BYTE.b	%10001011
    984  f368		       1c		      .BYTE.b	%00011100
    985  f369
    986  f369		       24		      .BYTE.b	%00100100
    987  f36a		       49		      .BYTE.b	%01001001
    988  f36b		       8a		      .BYTE.b	%10001010
    989  f36c		       24		      .BYTE.b	%00100100
    990  f36d
    991  f36d		       22		      .BYTE.b	%00100010
    992  f36e		       44		      .BYTE.b	%01000100
    993  f36f		       aa		      .BYTE.b	%10101010
    994  f370		       24		      .BYTE.b	%00100100
    995  f371
    996  f371		       11		      .BYTE.b	%00010001
    997  f372		       23		      .BYTE.b	%00100011
    998  f373		       53		      .BYTE.b	%01010011
    999  f374		       1d		      .BYTE.b	%00011101
   1000  f375
   1001  f375				   TitleAudio0
   1002  f375
   1003  f375		       0f		      .BYTE.b	#15	; B
   1004  f376		       13		      .BYTE.b	#19	; G
   1005  f377		       17		      .BYTE.b	#23	; E
   1006  f378		       13		      .BYTE.b	#19	; G
   1007  f379		       0e		      .BYTE.b	#14	; C
   1008  f37a		       13		      .BYTE.b	#19
   1009  f37b		       17		      .BYTE.b	#23
   1010  f37c		       13		      .BYTE.b	#19
   1011  f37d		       0c		      .BYTE.b	#12	; D
   1012  f37e		       13		      .BYTE.b	#19
   1013  f37f		       17		      .BYTE.b	#23
   1014  f380		       13		      .BYTE.b	#19
   1015  f381		       0e		      .BYTE.b	#14	; C
   1016  f382		       13		      .BYTE.b	#19
   1017  f383		       17		      .BYTE.b	#23
   1018  f384		       13		      .BYTE.b	#19
   1019  f385
   1020  f385				   TitleTone1
   1021  f385
   1022  f385		       0f		      .BYTE.b	#15	; Electronic Rumble
   1023  f386		       ff		      .BYTE.b	#$FF
   1024  f387		       01		      .BYTE.b	#1	; Low Pure Tone
   1025  f388		       01		      .BYTE.b	#1
   1026  f389		       08		      .BYTE.b	#8	; White Noise
   1027  f38a		       01		      .BYTE.b	#1
   1028  f38b		       01		      .BYTE.b	#1
   1029  f38c		       ff		      .BYTE.b	#$FF
   1030  f38d		       ff		      .BYTE.b	#$FF
   1031  f38e		       0f		      .BYTE.b	#15
   1032  f38f		       ff		      .BYTE.b	#$FF
   1033  f390		       ff		      .BYTE.b	#$FF
   1034  f391		       08		      .BYTE.b	#8
   1035  f392		       ff		      .BYTE.b	#$FF
   1036  f393		       01		      .BYTE.b	#1
   1037  f394		       01		      .BYTE.b	#1
   1038  f395
   1039  f395				   TitleAudio1
   1040  f395
   1041  f395		       1d		      .BYTE.b	#29	; Kick
   1042  f396		       ff		      .BYTE.b	#$FF
   1043  f397		       1f		      .BYTE.b	#31	; C
   1044  f398		       1f		      .BYTE.b	#31
   1045  f399		       07		      .BYTE.b	#7	; Snare
   1046  f39a		       1f		      .BYTE.b	#31
   1047  f39b		       1f		      .BYTE.b	#31
   1048  f39c		       ff		      .BYTE.b	#$FF
   1049  f39d		       ff		      .BYTE.b	#$FF
   1050  f39e		       1d		      .BYTE.b	#29
   1051  f39f		       ff		      .BYTE.b	#$FF
   1052  f3a0		       ff		      .BYTE.b	#$FF
   1053  f3a1		       07		      .BYTE.b	#7
   1054  f3a2		       ff		      .BYTE.b	#$FF
   1055  f3a3		       17		      .BYTE.b	#23	; F
   1056  f3a4		       18		      .BYTE.b	#24	; E
   1057  f3a5
   1058  f3a5				   GameImage		; Just one quadrant of web
   1059  f3a5
   1060  f3a5		       00		      .BYTE.b	%00000000	; First 4 bits reversed
   1061  f3a6		       00		      .BYTE.b	%00000000	; Normal
   1062  f3a7		       03		      .BYTE.b	%00000011	; Reversed
   1063  f3a8		       00		      .BYTE.b	%00000000	; Empty
   1064  f3a9
   1065  f3a9		       00		      .BYTE.b	%00000000
   1066  f3aa		       00		      .BYTE.b	%00000000
   1067  f3ab		       3f		      .BYTE.b	%00111111
   1068  f3ac		       00		      .BYTE.b	%00000000
   1069  f3ad
   1070  f3ad		       00		      .BYTE.b	%00000000
   1071  f3ae		       01		      .BYTE.b	%00000001
   1072  f3af		       c2		      .BYTE.b	%11000010
   1073  f3b0		       00		      .BYTE.b	%00000000
   1074  f3b1
   1075  f3b1		       00		      .BYTE.b	%00000000
   1076  f3b2		       01		      .BYTE.b	%00000001
   1077  f3b3		       04		      .BYTE.b	%00000100
   1078  f3b4		       00		      .BYTE.b	%00000000
   1079  f3b5
   1080  f3b5		       00		      .BYTE.b	%00000000
   1081  f3b6		       02		      .BYTE.b	%00000010
   1082  f3b7		       08		      .BYTE.b	%00001000
   1083  f3b8		       00		      .BYTE.b	%00000000
   1084  f3b9
   1085  f3b9		       00		      .BYTE.b	%00000000
   1086  f3ba		       0c		      .BYTE.b	%00001100
   1087  f3bb		       08		      .BYTE.b	%00001000
   1088  f3bc		       00		      .BYTE.b	%00000000
   1089  f3bd
   1090  f3bd		       30		      .BYTE.b	%00110000
   1091  f3be		       30		      .BYTE.b	%00110000
   1092  f3bf		       10		      .BYTE.b	%00010000
   1093  f3c0		       00		      .BYTE.b	%00000000
   1094  f3c1
   1095  f3c1		       e0		      .BYTE.b	%11100000
   1096  f3c2		       c0		      .BYTE.b	%11000000
   1097  f3c3		       20		      .BYTE.b	%00100000
   1098  f3c4		       00		      .BYTE.b	%00000000
   1099  f3c5
   1100  f3c5		       20		      .BYTE.b	%00100000
   1101  f3c6		       38		      .BYTE.b	%00111000
   1102  f3c7		       20		      .BYTE.b	%00100000
   1103  f3c8		       00		      .BYTE.b	%00000000
   1104  f3c9
   1105  f3c9		       40		      .BYTE.b	%01000000
   1106  f3ca		       07		      .BYTE.b	%00000111
   1107  f3cb		       41		      .BYTE.b	%01000001
   1108  f3cc		       00		      .BYTE.b	%00000000
   1109  f3cd
   1110  f3cd		       40		      .BYTE.b	%01000000
   1111  f3ce		       00		      .BYTE.b	%00000000
   1112  f3cf		       8e		      .BYTE.b	%10001110
   1113  f3d0		       00		      .BYTE.b	%00000000
   1114  f3d1
   1115  f3d1		       80		      .BYTE.b	%10000000
   1116  f3d2		       00		      .BYTE.b	%00000000
   1117  f3d3		       f0		      .BYTE.b	%11110000
   1118  f3d4		       00		      .BYTE.b	%00000000
   1119  f3d5
   1120  f3d5							;-------------------------------------------
   1121  f3d5
   1122  fffa					      ORG	$FFFA	; End of cart area
   1123  fffa
   1124  fffa				   InterruptVectors
   1125  fffa
   1126  fffa		       00 f0		      .word.w	Reset	; NMI
   1127  fffc		       00 f0		      .word.w	Reset	; RESET
   1128  fffe		       00 f0		      .word.w	Reset	; IRQ
   1129  10000
   1130  10000					       END
