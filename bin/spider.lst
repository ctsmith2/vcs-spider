------- FILE spider.asm LEVEL 1 PASS 2
      1  10000 ????						; 8 Legs of Love game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: August 28th, 2018
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE spider.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE spider.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????
     38  10000 ????						; Logo
     39  10000 ????		00 09	    LOGO_SIZE  =	9
     40  10000 ????		00 30	    LOGO_START =	48
     41  10000 ????		00 08	    LOGO_INTERVAL =	8
     42  10000 ????		00 b4	    LOGO_FRAMES =	180
     43  10000 ????
     44  10000 ????		00 a2	    LOGO_BG_COLU =	#$A2
     45  10000 ????		00 5e	    LOGO_FG_COLU =	#$5E
     46  10000 ????
     47  10000 ????		00 04	    LOGO_AUD_0_TONE =	4
     48  10000 ????		00 0f	    LOGO_AUD_0_VOLUME =	15	; 15 is max
     49  10000 ????		00 01	    LOGO_AUD_1_TONE =	1
     50  10000 ????		00 03	    LOGO_AUD_1_VOLUME =	3
     51  10000 ????		00 0c	    LOGO_AUD_LENGTH =	12
     52  10000 ????		00 08	    LOGO_AUD_STEP =	8
     53  10000 ????
     54  10000 ????						; Title
     55  10000 ????		00 08	    TITLE_LINE_SIZE =	8
     56  10000 ????		00 04	    TITLE_DATA_SIZE =	%00000100
     57  10000 ????		00 01	    TITLE_BORDER =	1
     58  10000 ????		00 04	    TITLE_PAD  =	4
     59  10000 ????		00 06	    TITLE_IMAGE =	6
     60  10000 ????		00 02	    TITLE_GAP  =	2
     61  10000 ????
     62  10000 ????		00 70	    TITLE_BG_COLU =	#$70
     63  10000 ????		00 7e	    TITLE_BD_COLU =	#$7E
     64  10000 ????		00 0e	    TITLE_FG_COLU =	#$0E
     65  10000 ????
     66  10000 ????		00 04	    TITLE_AUD_0_TONE =	4
     67  10000 ????		00 04	    TITLE_AUD_0_VOLUME =	4
     68  10000 ????		00 07	    TITLE_AUD_1_VOLUME =	7
     69  10000 ????		00 10	    TITLE_AUD_LENGTH =	16
     70  10000 ????		00 09	    TITLE_AUD_STEP =	9
     71  10000 ????
     72  10000 ????						;================
     73  10000 ????						; Variables
     74  10000 ????						;================
     75  10000 ????
     76 U0084 ????				      SEG.U	vars
     77 U0080					      org	$80
     78 U0080
     79 U0080		       00 00 00 00*Overlay    ds	8
     80 U0088
     81 U0080					      org	Overlay
     82 U0080
     83 U0080							; Animation/Logic System
     84 U0080
     85 U0080		       00	   AnimationFrame ds	1	; 1 byte to count frames
     86 U0081		       00	   AnimationSubFrame ds	1	; 1 byte to count portions of frames
     87 U0082
     88 U0082							; Audio System
     89 U0082
     90 U0082		       00	   AudioFrame ds	1
     91 U0083		       00	   AudioStep  ds	1
     92 U0084
     93  10000 ????				       SEG
     94  10000 ????
     95  f000					      ORG	$F000	; Start of cart area
     96  f000
     97  f000				   Reset
     98  f000
     99  f000				   .initstack
    100  f000
    101  f000		       a2 00		      ldx	#0
    102  f002		       8a		      txa
    103  f003
    104  f003				   .initstack_loop
    105  f003
    106  f003		       ca		      dex
    107  f004		       9a		      txs
    108  f005		       48		      pha
    109  f006		       d0 fb		      bne	.initstack_loop
    110  f008
    111  f008							; Stack pointer now $FF, a=x=0, TIA registers (0 - $7F) = RAM ($80 - $FF) = 0
    112  f008
    113  f008				   .initvars
    114  f008
    115  f008							; Set background color
    116  f008		       a9 00		      lda	#$00	; Black
    117  f00a		       85 09		      sta	COLUBK
    118  f00c
    119  f00c							; Set the playfield and player color
    120  f00c		       a9 0e		      lda	#$0E	; White
    121  f00e		       85 08		      sta	COLUPF
    122  f010		       85 06		      sta	COLUP0
    123  f012		       85 07		      sta	COLUP1
    124  f014
    125  f014							; Playfield Control
    126  f014		       a9 00		      lda	#%00000000	; 1 for mirroring
    127  f016		       85 0a		      sta	CTRLPF
    128  f018
    129  f018							; Disable Game Elements
    130  f018		       a9 00		      lda	#$00
    131  f01a		       85 1f		      sta	ENABL	; Turn off ball
    132  f01c		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    133  f01e		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    134  f020		       85 1b		      sta	GRP0	; Turn off player 1
    135  f022		       85 1c		      sta	GRP1	; Turn off player 2
    136  f024
    137  f024							; Empty playfield
    138  f024		       a9 00		      lda	#%00000000
    139  f026		       85 0d		      sta	PF0
    140  f028		       85 0e		      sta	PF1
    141  f02a		       85 0f		      sta	PF2
    142  f02c
    143  f02c				   LogoScreen
    144  f02c
    145  f02c							; Load Colors
    146  f02c		       a9 a2		      lda	#LOGO_BG_COLU
    147  f02e		       85 09		      sta	COLUBK
    148  f030		       a9 5e		      lda	#LOGO_FG_COLU
    149  f032		       85 08		      sta	COLUPF
    150  f034
    151  f034							; Load audio settings
    152  f034		       a9 04		      lda	#LOGO_AUD_0_TONE
    153  f036		       85 15		      sta	AUDC0
    154  f038		       a9 0f		      lda	#LOGO_AUD_0_VOLUME
    155  f03a		       85 19		      sta	AUDV0
    156  f03c		       a9 01		      lda	#LOGO_AUD_1_TONE
    157  f03e		       85 16		      sta	AUDC1
    158  f040		       a9 03		      lda	#LOGO_AUD_1_VOLUME
    159  f042		       85 1a		      sta	AUDV1
    160  f044		       a9 00		      lda	#0
    161  f046		       85 82		      sta	AudioFrame
    162  f048		       85 83		      sta	AudioStep
    163  f04a
    164  f04a							; Play first note
    165  f04a		       a8		      tay
    166  f04b		       b9 d2 f2 	      lda	LogoAudio0,y
    167  f04e		       85 17		      sta	AUDF0
    168  f050		       b9 de f2 	      lda	LogoAudio1,y
    169  f053		       85 18		      sta	AUDF1
    170  f055
    171  f055							; Load number of frames into AnimationFrame
    172  f055		       a9 b4		      lda	#LOGO_FRAMES
    173  f057		       85 80		      sta	AnimationFrame
    174  f059
    175  f059							; Initialize sub frame
    176  f059		       a9 00		      lda	#0
    177  f05b		       85 81		      sta	AnimationSubFrame
    178  f05d
    179  f05d				   LogoFrame
    180  f05d
    181  f05d				   .logo_audio
    182  f05d
    183  f05d							; Increment Audio Frame
    184  f05d		       a6 82		      ldx	AudioFrame
    185  f05f		       e8		      inx
    186  f060		       86 82		      stx	AudioFrame
    187  f062
    188  f062							; Check if we need to play the next note
    189  f062		       e0 08		      cpx	#LOGO_AUD_STEP
    190  f064		       90 28		      bcc	.logo_audio_skip
    191  f066
    192  f066				   .logo_audio_play
    193  f066
    194  f066							; Reset AudioFrame
    195  f066		       a9 00		      lda	#0
    196  f068		       85 82		      sta	AudioFrame
    197  f06a
    198  f06a							; Check if we're at the end of the melody
    199  f06a		       a4 83		      ldy	AudioStep
    200  f06c		       c0 0b		      cpy	#LOGO_AUD_LENGTH-1
    201  f06e		       f0 10		      beq	.logo_audio_mute
    202  f070
    203  f070				   .logo_audio_play_note
    204  f070
    205  f070							; Increment Audio position
    206  f070		       c8		      iny
    207  f071		       84 83		      sty	AudioStep
    208  f073
    209  f073							; Load note and play
    210  f073		       b9 d2 f2 	      lda	LogoAudio0,y
    211  f076		       85 17		      sta	AUDF0
    212  f078		       b9 de f2 	      lda	LogoAudio1,y
    213  f07b		       85 18		      sta	AUDF1
    214  f07d		       4c 8e f0 	      jmp	.logo_audio_mute_skip
    215  f080
    216  f080				   .logo_audio_mute
    217  f080
    218  f080							; Mute audio
    219  f080		       a9 00		      lda	#0
    220  f082		       85 15		      sta	AUDC0
    221  f084		       85 19		      sta	AUDV0
    222  f086		       85 17		      sta	AUDF0
    223  f088		       85 16		      sta	AUDC1
    224  f08a		       85 1a		      sta	AUDV1
    225  f08c		       85 18		      sta	AUDF1
    226  f08e
    227  f08e				   .logo_audio_mute_skip
    228  f08e
    229  f08e				   .logo_audio_skip
    230  f08e
    231  f08e				   .logo_vsync		; Start of vertical blank processing
    232  f08e
    233  f08e		       a9 00		      lda	#0
    234  f090		       85 01		      sta	VBLANK
    235  f092
    236  f092		       a9 02		      lda	#2
    237  f094		       85 00		      sta	VSYNC
    238  f096
    239  f096							; VSYNCH signal scanlines
    240  f096					      REPEAT	#KERNEL_VSYNC
    241  f096		       85 02		      sta	WSYNC
    240  f096					      REPEND
    241  f098		       85 02		      sta	WSYNC
    240  f098					      REPEND
    241  f09a		       85 02		      sta	WSYNC
    242  f09c					      REPEND
    243  f09c
    244  f09c		       a9 00		      lda	#0
    245  f09e		       85 00		      sta	VSYNC
    246  f0a0
    247  f0a0				   .logo_vblank 		; scanlines of vertical blank
    248  f0a0
    249  f0a0		       a2 25		      ldx	#KERNEL_VBLANK
    250  f0a2				   .logo_vblank_loop
    251  f0a2
    252  f0a2		       85 02		      sta	WSYNC
    253  f0a4		       ca		      dex
    254  f0a5		       d0 fb		      bne	.logo_vblank_loop
    255  f0a7
    256  f0a7				   .logo_scanline		; Do 192 scanlines
    257  f0a7
    258  f0a7		       a9 00		      lda	#$00	; Clear playfields
    259  f0a9		       85 0d		      sta	PF0
    260  f0ab		       85 0e		      sta	PF1
    261  f0ad		       85 0f		      sta	PF2
    262  f0af
    263  f0af		       a2 30		      ldx	#LOGO_START	; This counts our scanline number
    264  f0b1				   .logo_scanline_start
    265  f0b1
    266  f0b1		       85 02		      sta	WSYNC
    267  f0b3		       ca		      dex
    268  f0b4		       d0 fb		      bne	.logo_scanline_start
    269  f0b6
    270  f0b6		       a2 00		      ldx	#0
    271  f0b8				   .logo_scanline_loop
    272  f0b8
    273  f0b8							; Cleanup
    274  f0b8		       85 0e		      sta	PF1
    275  f0ba
    276  f0ba		       8a		      txa
    277  f0bb		       4a		      lsr		; Divide counter by 4
    278  f0bc		       4a		      lsr
    279  f0bd		       29 fe		      and	#%11111110	; Remove 0th bit
    280  f0bf		       a8		      tay
    281  f0c0
    282  f0c0							; Check if we need to display line
    283  f0c0		       c4 81		      cpy	AnimationSubFrame
    284  f0c2		       b0 17		      bcs	.logo_scanline_skip
    285  f0c4
    286  f0c4							; Load first half of data
    287  f0c4		       b9 c0 f2 	      lda	LogoData,y
    288  f0c7		       85 0f		      sta	PF2
    289  f0c9
    290  f0c9							; Load second half of data
    291  f0c9		       c8		      iny
    292  f0ca		       b9 c0 f2 	      lda	LogoData,y
    293  f0cd
    294  f0cd							; Use 4 MSB bits on PF0
    295  f0cd		       85 0d		      sta	PF0
    296  f0cf
    297  f0cf							; Use 4 LSB bits on PF1
    298  f0cf					      REPEAT	4
    299  f0cf		       0a		      asl
    298  f0cf					      REPEND
    299  f0d0		       0a		      asl
    298  f0d0					      REPEND
    299  f0d1		       0a		      asl
    298  f0d1					      REPEND
    299  f0d2		       0a		      asl
    300  f0d3					      REPEND
    301  f0d3		       85 0e		      sta	PF1
    302  f0d5
    303  f0d5							; Cleanup
    304  f0d5		       a9 00		      lda	#$00
    305  f0d7		       85 0f		      sta	PF2
    306  f0d9		       85 0d		      sta	PF0
    307  f0db
    308  f0db				   .logo_scanline_skip
    309  f0db
    310  f0db							; Clear Playfields
    311  f0db		       a9 00		      lda	#$00
    312  f0dd		       85 0d		      sta	PF0
    313  f0df		       85 0e		      sta	PF1
    314  f0e1		       85 0f		      sta	PF2
    315  f0e3
    316  f0e3							; Wait for next line
    317  f0e3		       85 02		      sta	WSYNC
    318  f0e5
    319  f0e5							; Check if at end of logo display
    320  f0e5		       e8		      inx
    321  f0e6		       e0 48		      cpx	#LOGO_SIZE*LOGO_INTERVAL
    322  f0e8		       d0 ce		      bne	.logo_scanline_loop
    323  f0ea
    324  f0ea		       a2 48		      ldx	#KERNEL_SCANLINES-LOGO_START-LOGO_SIZE*LOGO_INTERVAL
    325  f0ec				   .logo_scanline_end
    326  f0ec
    327  f0ec		       85 02		      sta	WSYNC
    328  f0ee		       ca		      dex
    329  f0ef		       d0 fb		      bne	.logo_scanline_end
    330  f0f1
    331  f0f1				   .logo_overscan		; 30 scanlines of overscan
    332  f0f1
    333  f0f1		       a9 42		      lda	#%01000010
    334  f0f3		       85 01		      sta	VBLANK	; end of screen - enter blanking
    335  f0f5
    336  f0f5		       a2 1e		      ldx	#KERNEL_OVERSCAN
    337  f0f7				   .logo_overscan_loop
    338  f0f7
    339  f0f7		       85 02		      sta	WSYNC
    340  f0f9		       ca		      dex
    341  f0fa		       d0 fb		      bne	.logo_overscan_loop
    342  f0fc
    343  f0fc		       a6 80		      ldx	AnimationFrame
    344  f0fe
    345  f0fe							; Divide inverted AnimationFrame by 4 and put in AnimationSubFrame
    346  f0fe		       a9 b4		      lda	#LOGO_FRAMES
    347  f100		       e5 80		      sbc	AnimationFrame
    348  f102		       4a		      lsr
    349  f103		       4a		      lsr
    350  f104		       85 81		      sta	AnimationSubFrame
    351  f106
    352  f106							; Decrement AnimationFrame
    353  f106		       ca		      dex
    354  f107		       86 80		      stx	AnimationFrame
    355  f109
    356  f109							; Check if we're at the end of the animation
    357  f109		       f0 03		      beq	TitleScreen
    358  f10b		       4c 5d f0 	      jmp	LogoFrame
    359  f10e
    360  f10e				   TitleScreen
    361  f10e
    362  f10e							; Clear playfields
    363  f10e		       a9 00		      lda	#$00
    364  f110		       85 0d		      sta	PF0
    365  f112		       85 0e		      sta	PF1
    366  f114		       85 0f		      sta	PF2
    367  f116
    368  f116							; Background Color
    369  f116		       a9 70		      lda	#TITLE_BG_COLU
    370  f118		       85 09		      sta	COLUBK
    371  f11a
    372  f11a							; Border Color
    373  f11a		       a9 7e		      lda	#TITLE_BD_COLU
    374  f11c		       85 08		      sta	COLUPF
    375  f11e
    376  f11e							; Load audio settings
    377  f11e
    378  f11e							; Melody Line
    379  f11e		       a9 04		      lda	#TITLE_AUD_0_TONE
    380  f120		       85 15		      sta	AUDC0
    381  f122		       a9 04		      lda	#TITLE_AUD_0_VOLUME
    382  f124		       85 19		      sta	AUDV0
    383  f126
    384  f126							; Drums and Bass
    385  f126		       a9 00		      lda	#0
    386  f128		       85 16		      sta	AUDC1
    387  f12a		       85 1a		      sta	AUDV1
    388  f12c
    389  f12c							; Make it so that we play the first note immediately
    390  f12c		       a9 08		      lda	#TITLE_AUD_STEP-1
    391  f12e		       85 82		      sta	AudioFrame
    392  f130		       a9 0f		      lda	#TITLE_AUD_LENGTH-1
    393  f132		       85 83		      sta	AudioStep
    394  f134
    395  f134				   TitleFrame
    396  f134
    397  f134				   .title_audio
    398  f134
    399  f134							; Increment Audio Frame
    400  f134		       a6 82		      ldx	AudioFrame
    401  f136		       e8		      inx
    402  f137		       86 82		      stx	AudioFrame
    403  f139
    404  f139							; Check if we need to play the next note
    405  f139		       e0 09		      cpx	#TITLE_AUD_STEP
    406  f13b		       90 31		      bcc	.title_audio_skip
    407  f13d
    408  f13d				   .title_audio_play
    409  f13d
    410  f13d							; Reset AudioFrame
    411  f13d		       a9 00		      lda	#0
    412  f13f		       85 82		      sta	AudioFrame
    413  f141
    414  f141							; Increment melody position
    415  f141		       a4 83		      ldy	AudioStep
    416  f143		       c8		      iny
    417  f144
    418  f144							; Check if we're at the end of the melody
    419  f144		       c0 10		      cpy	#TITLE_AUD_LENGTH
    420  f146		       d0 02		      bne	.title_audio_play_note
    421  f148
    422  f148							; Loop our audio step
    423  f148		       a0 00		      ldy	#0
    424  f14a
    425  f14a				   .title_audio_play_note
    426  f14a
    427  f14a							; Save current position
    428  f14a		       84 83		      sty	AudioStep
    429  f14c
    430  f14c							; Basic Melody Line
    431  f14c		       b9 1a f3 	      lda	TitleAudio0,y
    432  f14f		       85 17		      sta	AUDF0
    433  f151
    434  f151							; Drums and Bass
    435  f151		       b9 2a f3 	      lda	TitleTone1,y
    436  f154		       c9 ff		      cmp	#$FF
    437  f156		       f0 0e		      beq	.title_audio_play_note_1_mute
    438  f158
    439  f158		       85 16		      sta	AUDC1
    440  f15a		       b9 3a f3 	      lda	TitleAudio1,y
    441  f15d		       85 18		      sta	AUDF1
    442  f15f		       a9 07		      lda	#TITLE_AUD_1_VOLUME
    443  f161		       85 1a		      sta	AUDV1
    444  f163
    445  f163		       4c 6e f1 	      jmp	.title_audio_skip
    446  f166
    447  f166				   .title_audio_play_note_1_mute
    448  f166
    449  f166		       a9 00		      lda	#0
    450  f168		       85 18		      sta	AUDF1
    451  f16a		       85 16		      sta	AUDC1
    452  f16c		       85 1a		      sta	AUDV1
    453  f16e
    454  f16e				   .title_audio_skip
    455  f16e
    456  f16e				   .title_vsync 		; Start of vertical blank processing
    457  f16e
    458  f16e		       a9 00		      lda	#0
    459  f170		       85 01		      sta	VBLANK
    460  f172
    461  f172		       a9 02		      lda	#2
    462  f174		       85 00		      sta	VSYNC
    463  f176
    464  f176							; VSYNCH signal scanlines
    465  f176					      REPEAT	#KERNEL_VSYNC
    466  f176		       85 02		      sta	WSYNC
    465  f176					      REPEND
    466  f178		       85 02		      sta	WSYNC
    465  f178					      REPEND
    466  f17a		       85 02		      sta	WSYNC
    467  f17c					      REPEND
    468  f17c
    469  f17c		       a9 00		      lda	#0
    470  f17e		       85 00		      sta	VSYNC
    471  f180
    472  f180				   .title_vblank		; scanlines of vertical blank
    473  f180
    474  f180		       a2 25		      ldx	#KERNEL_VBLANK
    475  f182				   .title_vblank_loop
    476  f182
    477  f182		       85 02		      sta	WSYNC
    478  f184		       ca		      dex
    479  f185		       d0 fb		      bne	.title_vblank_loop
    480  f187
    481  f187				   .title_border_h_top
    482  f187
    483  f187							; Number of Scanlines
    484  f187		       a2 08		      ldx	#TITLE_BORDER*TITLE_LINE_SIZE
    485  f189
    486  f189							; Draw Playfield
    487  f189		       a9 ff		      lda	#$FF
    488  f18b		       85 0d		      sta	PF0
    489  f18d		       85 0e		      sta	PF1
    490  f18f		       85 0f		      sta	PF2
    491  f191
    492  f191				   .title_border_h_top_loop
    493  f191
    494  f191		       85 02		      sta	WSYNC
    495  f193		       ca		      dex
    496  f194		       d0 fb		      bne	.title_border_h_top_loop
    497  f196
    498  f196				   .title_border_v_top
    499  f196
    500  f196							; Number of Scanlines
    501  f196		       a2 20		      ldx	#TITLE_PAD*TITLE_LINE_SIZE
    502  f198
    503  f198							; Mirror playfield
    504  f198		       a9 01		      lda	#%00000001
    505  f19a		       85 0a		      sta	CTRLPF
    506  f19c
    507  f19c							; Draw Playfield
    508  f19c		       a9 10		      lda	#%00010000
    509  f19e		       85 0d		      sta	PF0
    510  f1a0
    511  f1a0		       a9 00		      lda	#$00
    512  f1a2		       85 0e		      sta	PF1
    513  f1a4		       85 0f		      sta	PF2
    514  f1a6
    515  f1a6				   .title_border_v_top_loop
    516  f1a6
    517  f1a6		       85 02		      sta	WSYNC
    518  f1a8		       ca		      dex
    519  f1a9		       d0 fb		      bne	.title_border_v_top_loop
    520  f1ab
    521  f1ab				   .title_image_top
    522  f1ab
    523  f1ab		       a0 00		      ldy	#$00	; Current Image Index
    524  f1ad		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    525  f1af
    526  f1af		       4c ba f1 	      jmp	.title_image_top_loop
    527  f1b2
    528  f1b2				   .title_image_top_loop_wait
    529  f1b2
    530  f1b2							; Wait until new line is ready to draw
    531  f1b2		       85 02		      sta	WSYNC
      0  f1b4					      sleep	11
      1  f1b4				   .CYCLES    SET	11
      2  f1b4
      3  f1b4				  -	      IF	.CYCLES < 2
      4  f1b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1b4				  -	      ERR
      6  f1b4					      ENDIF
      7  f1b4
      8  f1b4					      IF	.CYCLES & 1
      9  f1b4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1b4		       04 00		      nop	0
     11  f1b6				  -	      ELSE
     12  f1b6				  -	      bit	VSYNC
     13  f1b6					      ENDIF
     14  f1b6				   .CYCLES    SET	.CYCLES - 3
     15  f1b6					      ENDIF
     16  f1b6
     17  f1b6					      REPEAT	.CYCLES / 2
     18  f1b6		       ea		      nop
     17  f1b6					      REPEND
     18  f1b7		       ea		      nop
     17  f1b7					      REPEND
     18  f1b8		       ea		      nop
     17  f1b8					      REPEND
     18  f1b9		       ea		      nop
     19  f1ba					      REPEND
    533  f1ba
    534  f1ba				   .title_image_top_loop
    535  f1ba
    536  f1ba							; Draw Image
    537  f1ba		       b9 ea f2 	      lda	TitleImageTop,y
    538  f1bd		       85 0e		      sta	PF1
    539  f1bf		       c8		      iny
    540  f1c0
    541  f1c0							; Set Image Color
    542  f1c0		       a9 0e		      lda	#TITLE_FG_COLU
    543  f1c2		       85 08		      sta	COLUPF
    544  f1c4
    545  f1c4							; Finish Drawing Image
    546  f1c4		       b9 ea f2 	      lda	TitleImageTop,y
    547  f1c7		       85 0f		      sta	PF2
    548  f1c9		       c8		      iny
    549  f1ca		       b9 ea f2 	      lda	TitleImageTop,y
    550  f1cd		       c8		      iny
      0  f1ce					      sleep	5
      1  f1ce				   .CYCLES    SET	5
      2  f1ce
      3  f1ce				  -	      IF	.CYCLES < 2
      4  f1ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1ce				  -	      ERR
      6  f1ce					      ENDIF
      7  f1ce
      8  f1ce					      IF	.CYCLES & 1
      9  f1ce					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1ce		       04 00		      nop	0
     11  f1d0				  -	      ELSE
     12  f1d0				  -	      bit	VSYNC
     13  f1d0					      ENDIF
     14  f1d0				   .CYCLES    SET	.CYCLES - 3
     15  f1d0					      ENDIF
     16  f1d0
     17  f1d0					      REPEAT	.CYCLES / 2
     18  f1d0		       ea		      nop
     19  f1d1					      REPEND
    552  f1d1		       85 0f		      sta	PF2
    553  f1d3		       b9 ea f2 	      lda	TitleImageTop,y
    554  f1d6		       85 0e		      sta	PF1
    555  f1d8
    556  f1d8							; Clear bottom of index
    557  f1d8		       98		      tya
    558  f1d9		       29 fc		      and	#%11111100
    559  f1db		       a8		      tay
    560  f1dc
    561  f1dc							; Restore border color
      0  f1dc					      sleep	2
      1  f1dc				   .CYCLES    SET	2
      2  f1dc
      3  f1dc				  -	      IF	.CYCLES < 2
      4  f1dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1dc				  -	      ERR
      6  f1dc					      ENDIF
      7  f1dc
      8  f1dc				  -	      IF	.CYCLES & 1
      9  f1dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1dc				  -	      nop	0
     11  f1dc				  -	      ELSE
     12  f1dc				  -	      bit	VSYNC
     13  f1dc				  -	      ENDIF
     14  f1dc				  -.CYCLES    SET	.CYCLES - 3
     15  f1dc					      ENDIF
     16  f1dc
     17  f1dc					      REPEAT	.CYCLES / 2
     18  f1dc		       ea		      nop
     19  f1dd					      REPEND
    563  f1dd		       a9 7e		      lda	#TITLE_BD_COLU
    564  f1df		       85 08		      sta	COLUPF
    565  f1e1
    566  f1e1		       ca		      dex
    567  f1e2		       d0 ce		      bne	.title_image_top_loop_wait
    568  f1e4
    569  f1e4							; Add 4 to the image index to skip to next line
    570  f1e4					      REPEAT	4
    571  f1e4		       c8		      iny
    570  f1e4					      REPEND
    571  f1e5		       c8		      iny
    570  f1e5					      REPEND
    571  f1e6		       c8		      iny
    570  f1e6					      REPEND
    571  f1e7		       c8		      iny
    572  f1e8					      REPEND
    573  f1e8
    574  f1e8		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    575  f1ea
    576  f1ea		       c0 18		      cpy	#TITLE_IMAGE*TITLE_DATA_SIZE
    577  f1ec		       d0 cc		      bne	.title_image_top_loop
    578  f1ee
    579  f1ee				   .title_gap
    580  f1ee
    581  f1ee							; Number of Scanlines
    582  f1ee		       a2 10		      ldx	#TITLE_GAP*TITLE_LINE_SIZE
    583  f1f0
    584  f1f0							; Mirror playfield
    585  f1f0		       a9 01		      lda	#%00000001
    586  f1f2		       85 0a		      sta	CTRLPF
    587  f1f4
    588  f1f4							; Draw Playfield
    589  f1f4		       a9 10		      lda	#%00010000
    590  f1f6		       85 0d		      sta	PF0
    591  f1f8
    592  f1f8		       a9 00		      lda	#$00
    593  f1fa		       85 0e		      sta	PF1
    594  f1fc		       85 0f		      sta	PF2
    595  f1fe
    596  f1fe				   .title_gap_loop
    597  f1fe
    598  f1fe		       85 02		      sta	WSYNC
    599  f200		       ca		      dex
    600  f201		       d0 fb		      bne	.title_gap_loop
    601  f203
    602  f203				   .title_image_bottom
    603  f203
    604  f203		       a0 00		      ldy	#$00	; Current Image Index
    605  f205		       a2 08		      ldx	#TITLE_LINE_SIZE
    606  f207
    607  f207		       4c 12 f2 	      jmp	.title_image_bottom_loop
    608  f20a
    609  f20a				   .title_image_bottom_loop_wait
    610  f20a
    611  f20a							; Wait until new line is ready to draw
    612  f20a		       85 02		      sta	WSYNC
      0  f20c					      sleep	11
      1  f20c				   .CYCLES    SET	11
      2  f20c
      3  f20c				  -	      IF	.CYCLES < 2
      4  f20c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f20c				  -	      ERR
      6  f20c					      ENDIF
      7  f20c
      8  f20c					      IF	.CYCLES & 1
      9  f20c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f20c		       04 00		      nop	0
     11  f20e				  -	      ELSE
     12  f20e				  -	      bit	VSYNC
     13  f20e					      ENDIF
     14  f20e				   .CYCLES    SET	.CYCLES - 3
     15  f20e					      ENDIF
     16  f20e
     17  f20e					      REPEAT	.CYCLES / 2
     18  f20e		       ea		      nop
     17  f20e					      REPEND
     18  f20f		       ea		      nop
     17  f20f					      REPEND
     18  f210		       ea		      nop
     17  f210					      REPEND
     18  f211		       ea		      nop
     19  f212					      REPEND
    614  f212
    615  f212				   .title_image_bottom_loop
    616  f212
    617  f212							; Draw Image
    618  f212		       b9 02 f3 	      lda	TitleImageBottom,y
    619  f215		       85 0e		      sta	PF1
    620  f217		       c8		      iny
    621  f218
    622  f218							; Set Image Color
    623  f218		       a9 0e		      lda	#TITLE_FG_COLU
    624  f21a		       85 08		      sta	COLUPF
    625  f21c
    626  f21c							; Finish Drawing Image
    627  f21c		       b9 02 f3 	      lda	TitleImageBottom,y
    628  f21f		       85 0f		      sta	PF2
    629  f221		       c8		      iny
    630  f222		       b9 02 f3 	      lda	TitleImageBottom,y
    631  f225		       c8		      iny
      0  f226					      sleep	5
      1  f226				   .CYCLES    SET	5
      2  f226
      3  f226				  -	      IF	.CYCLES < 2
      4  f226				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f226				  -	      ERR
      6  f226					      ENDIF
      7  f226
      8  f226					      IF	.CYCLES & 1
      9  f226					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f226		       04 00		      nop	0
     11  f228				  -	      ELSE
     12  f228				  -	      bit	VSYNC
     13  f228					      ENDIF
     14  f228				   .CYCLES    SET	.CYCLES - 3
     15  f228					      ENDIF
     16  f228
     17  f228					      REPEAT	.CYCLES / 2
     18  f228		       ea		      nop
     19  f229					      REPEND
    633  f229		       85 0f		      sta	PF2
    634  f22b		       b9 02 f3 	      lda	TitleImageBottom,y
    635  f22e		       85 0e		      sta	PF1
    636  f230
    637  f230							; Clear bottom of index
    638  f230		       98		      tya
    639  f231		       29 fc		      and	#%11111100
    640  f233		       a8		      tay
    641  f234
    642  f234							; Restore border color
      0  f234					      sleep	2
      1  f234				   .CYCLES    SET	2
      2  f234
      3  f234				  -	      IF	.CYCLES < 2
      4  f234				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f234				  -	      ERR
      6  f234					      ENDIF
      7  f234
      8  f234				  -	      IF	.CYCLES & 1
      9  f234				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f234				  -	      nop	0
     11  f234				  -	      ELSE
     12  f234				  -	      bit	VSYNC
     13  f234				  -	      ENDIF
     14  f234				  -.CYCLES    SET	.CYCLES - 3
     15  f234					      ENDIF
     16  f234
     17  f234					      REPEAT	.CYCLES / 2
     18  f234		       ea		      nop
     19  f235					      REPEND
    644  f235		       a9 7e		      lda	#TITLE_BD_COLU
    645  f237		       85 08		      sta	COLUPF
    646  f239
    647  f239		       ca		      dex
    648  f23a		       d0 ce		      bne	.title_image_bottom_loop_wait
    649  f23c
    650  f23c							; Add 4 to image index to skip to next line
    651  f23c					      REPEAT	4
    652  f23c		       c8		      iny
    651  f23c					      REPEND
    652  f23d		       c8		      iny
    651  f23d					      REPEND
    652  f23e		       c8		      iny
    651  f23e					      REPEND
    652  f23f		       c8		      iny
    653  f240					      REPEND
    654  f240
    655  f240		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    656  f242
    657  f242		       c0 18		      cpy	#TITLE_IMAGE*TITLE_DATA_SIZE
    658  f244		       d0 cc		      bne	.title_image_bottom_loop
    659  f246
    660  f246				   .title_border_v_bottom
    661  f246
    662  f246							; Number of Scanlines
    663  f246		       a2 20		      ldx	#TITLE_PAD*TITLE_LINE_SIZE
    664  f248
    665  f248							; Mirror playfield
    666  f248		       a9 01		      lda	#%00000001
    667  f24a		       85 0a		      sta	CTRLPF
    668  f24c
    669  f24c							; Draw Playfield
    670  f24c		       a9 10		      lda	#%00010000
    671  f24e		       85 0d		      sta	PF0
    672  f250
    673  f250		       a9 00		      lda	#$00
    674  f252		       85 0e		      sta	PF1
    675  f254		       85 0f		      sta	PF2
    676  f256
    677  f256				   .title_border_v_bottom_loop
    678  f256
    679  f256		       85 02		      sta	WSYNC
    680  f258		       ca		      dex
    681  f259		       d0 fb		      bne	.title_border_v_bottom_loop
    682  f25b
    683  f25b				   .title_border_h_bottom
    684  f25b
    685  f25b							; Number of Scanlines
    686  f25b		       a2 08		      ldx	#TITLE_BORDER*TITLE_LINE_SIZE
    687  f25d
    688  f25d							; Draw Playfield
    689  f25d		       a9 ff		      lda	#$FF
    690  f25f		       85 0d		      sta	PF0
    691  f261		       85 0e		      sta	PF1
    692  f263		       85 0f		      sta	PF2
    693  f265
    694  f265				   .title_border_h_bottom_loop
    695  f265
    696  f265		       85 02		      sta	WSYNC
    697  f267		       ca		      dex
    698  f268		       d0 fb		      bne	.title_border_h_bottom_loop
    699  f26a
    700  f26a				   .title_overscan		; 30 scanlines of overscan
    701  f26a
    702  f26a		       a9 42		      lda	#%01000010
    703  f26c		       85 01		      sta	VBLANK	; end of screen - enter blanking
    704  f26e
    705  f26e		       a2 1e		      ldx	#KERNEL_OVERSCAN
    706  f270				   .title_overscan_loop
    707  f270
    708  f270		       85 02		      sta	WSYNC
    709  f272		       ca		      dex
    710  f273		       d0 fb		      bne	.title_overscan_loop
    711  f275
    712  f275							; Check if Fire Button on controller 1 is pressed
    713  f275		       a5 0c		      lda	INPT4
    714  f277		       10 03		      bpl	StartScreen
    715  f279		       4c 34 f1 	      jmp	TitleFrame
    716  f27c
    717  f27c				   StartScreen
    718  f27c
    719  f27c							; Mute Audio
    720  f27c		       a9 00		      lda	#0
    721  f27e		       85 15		      sta	AUDC0
    722  f280		       85 19		      sta	AUDV0
    723  f282		       85 17		      sta	AUDF0
    724  f284		       85 16		      sta	AUDC1
    725  f286		       85 1a		      sta	AUDV1
    726  f288		       85 18		      sta	AUDF1
    727  f28a
    728  f28a				   StartFrame
    729  f28a
    730  f28a				   .start_vsync 		; Start of vertical blank processing
    731  f28a
    732  f28a		       a9 00		      lda	#0
    733  f28c		       85 01		      sta	VBLANK
    734  f28e
    735  f28e		       a9 02		      lda	#2
    736  f290		       85 00		      sta	VSYNC
    737  f292
    738  f292							; VSYNCH signal scanlines
    739  f292					      REPEAT	#KERNEL_VSYNC
    740  f292		       85 02		      sta	WSYNC
    739  f292					      REPEND
    740  f294		       85 02		      sta	WSYNC
    739  f294					      REPEND
    740  f296		       85 02		      sta	WSYNC
    741  f298					      REPEND
    742  f298
    743  f298		       a9 00		      lda	#0
    744  f29a		       85 00		      sta	VSYNC
    745  f29c
    746  f29c				   .start_vblank		; scanlines of vertical blank
    747  f29c
    748  f29c		       a2 25		      ldx	#KERNEL_VBLANK
    749  f29e				   .start_vblank_loop
    750  f29e
    751  f29e		       85 02		      sta	WSYNC
    752  f2a0		       ca		      dex
    753  f2a1		       d0 fb		      bne	.start_vblank_loop
    754  f2a3
    755  f2a3				   .start_scanline		; Do 192 scanlines
    756  f2a3
    757  f2a3		       a9 08		      lda	#$08	; Clear playfields (with temp design)
    758  f2a5		       85 0d		      sta	PF0
    759  f2a7		       85 0e		      sta	PF1
    760  f2a9		       85 0f		      sta	PF2
    761  f2ab
    762  f2ab		       a2 c0		      ldx	#KERNEL_SCANLINES	; Iterate through all scanlines
    763  f2ad				   .start_scanline_loop
    764  f2ad
    765  f2ad		       85 02		      sta	WSYNC
    766  f2af		       ca		      dex
    767  f2b0		       d0 fb		      bne	.start_scanline_loop
    768  f2b2
    769  f2b2				   .start_overscan		; 30 scanlines of overscan
    770  f2b2
    771  f2b2		       a9 42		      lda	#%01000010
    772  f2b4		       85 01		      sta	VBLANK	; end of screen - enter blanking
    773  f2b6
    774  f2b6		       a2 1e		      ldx	#KERNEL_OVERSCAN
    775  f2b8				   .start_overscan_loop
    776  f2b8
    777  f2b8		       85 02		      sta	WSYNC
    778  f2ba		       ca		      dex
    779  f2bb		       d0 fb		      bne	.start_overscan_loop
    780  f2bd
    781  f2bd		       4c 8a f2 	      jmp	StartFrame
    782  f2c0
    783  f2c0				   LogoData		; 6 bytes over 8 lines each, total of 48 lines
    784  f2c0
    785  f2c0		       46		      .BYTE.b	%01000110	; Reversed
    786  f2c1		       60		      .BYTE.b	%01100000	; First 4 bits reversed
    787  f2c2
    788  f2c2		       aa		      .BYTE.b	%10101010
    789  f2c3		       a0		      .BYTE.b	%10100000
    790  f2c4
    791  f2c4		       2a		      .BYTE.b	%00101010
    792  f2c5		       a0		      .BYTE.b	%10100000
    793  f2c6
    794  f2c6		       aa		      .BYTE.b	%10101010
    795  f2c7		       a0		      .BYTE.b	%10100000
    796  f2c8
    797  f2c8		       46		      .BYTE.b	%01000110
    798  f2c9		       60		      .BYTE.b	%01100000
    799  f2ca
    800  f2ca		       00		      .BYTE.b	%00000000
    801  f2cb		       00		      .BYTE.b	%00000000
    802  f2cc
    803  f2cc		       88		      .BYTE.b	%10001000
    804  f2cd		       80		      .BYTE.b	%10000000
    805  f2ce
    806  f2ce		       54		      .BYTE.b	%01010100
    807  f2cf		       50		      .BYTE.b	%01010000
    808  f2d0
    809  f2d0		       22		      .BYTE.b	%00100010
    810  f2d1		       20		      .BYTE.b	%00100000
    811  f2d2
    812  f2d2				   LogoAudio0
    813  f2d2
    814  f2d2		       1d		      .BYTE.b	#29	; C
    815  f2d3		       17		      .BYTE.b	#23	; E
    816  f2d4		       13		      .BYTE.b	#19	; G
    817  f2d5		       0f		      .BYTE.b	#15	; A
    818  f2d6		       17		      .BYTE.b	#23	; E
    819  f2d7		       13		      .BYTE.b	#19	; G
    820  f2d8		       0f		      .BYTE.b	#15	; B
    821  f2d9		       0e		      .BYTE.b	#14	; C
    822  f2da		       0b		      .BYTE.b	#11	; E
    823  f2db		       0b		      .BYTE.b	#11
    824  f2dc		       0b		      .BYTE.b	#11
    825  f2dd		       0b		      .BYTE.b	#11
    826  f2de
    827  f2de				   LogoAudio1
    828  f2de
    829  f2de		       1f		      .BYTE.b	#31	; C
    830  f2df		       1f		      .BYTE.b	#31
    831  f2e0		       1f		      .BYTE.b	#31
    832  f2e1		       1f		      .BYTE.b	#31
    833  f2e2		       19		      .BYTE.b	#25	; E
    834  f2e3		       19		      .BYTE.b	#25
    835  f2e4		       19		      .BYTE.b	#25
    836  f2e5		       19		      .BYTE.b	#25
    837  f2e6		       14		      .BYTE.b	#20	; G
    838  f2e7		       14		      .BYTE.b	#20
    839  f2e8		       14		      .BYTE.b	#20
    840  f2e9		       14		      .BYTE.b	#20
    841  f2ea
    842  f2ea				   TitleImageTop		; Spider
    843  f2ea
    844  f2ea		       1e		      .BYTE.b	%00011110	; Normal
    845  f2eb		       77		      .BYTE.b	%01110111	; Reversed
    846  f2ec		       e7		      .BYTE.b	%11100111	; Normal
    847  f2ed		       0e		      .BYTE.b	%00001110	; Reversed
    848  f2ee
    849  f2ee		       10		      .BYTE.b	%00010000
    850  f2ef		       25		      .BYTE.b	%00100101
    851  f2f0		       94		      .BYTE.b	%10010100
    852  f2f1		       12		      .BYTE.b	%00010010
    853  f2f2
    854  f2f2		       10		      .BYTE.b	%00010000
    855  f2f3		       27		      .BYTE.b	%00100111
    856  f2f4		       96		      .BYTE.b	%10010110
    857  f2f5		       12		      .BYTE.b	%00010010
    858  f2f6
    859  f2f6		       1c		      .BYTE.b	%00011100
    860  f2f7		       21		      .BYTE.b	%00100001
    861  f2f8		       94		      .BYTE.b	%10010100
    862  f2f9		       0e		      .BYTE.b	%00001110
    863  f2fa
    864  f2fa		       04		      .BYTE.b	%00000100
    865  f2fb		       21		      .BYTE.b	%00100001
    866  f2fc		       94		      .BYTE.b	%10010100
    867  f2fd		       12		      .BYTE.b	%00010010
    868  f2fe
    869  f2fe		       1c		      .BYTE.b	%00011100
    870  f2ff		       71		      .BYTE.b	%01110001
    871  f300		       e7		      .BYTE.b	%11100111
    872  f301		       12		      .BYTE.b	%00010010
    873  f302
    874  f302				   TitleImageBottom		; Web & Art
    875  f302
    876  f302		       01		      .BYTE.b	%00000001	; Normal
    877  f303		       03		      .BYTE.b	%00000011	; Reversed
    878  f304		       8b		      .BYTE.b	%10001011	; Normal
    879  f305		       1d		      .BYTE.b	%00011101	; Reversed
    880  f306
    881  f306		       0a		      .BYTE.b	%00001010
    882  f307		       14		      .BYTE.b	%00010100
    883  f308		       8a		      .BYTE.b	%10001010
    884  f309		       24		      .BYTE.b	%00100100
    885  f30a
    886  f30a		       15		      .BYTE.b	%00010101
    887  f30b		       2a		      .BYTE.b	%00101010
    888  f30c		       8b		      .BYTE.b	%10001011
    889  f30d		       1c		      .BYTE.b	%00011100
    890  f30e
    891  f30e		       24		      .BYTE.b	%00100100
    892  f30f		       49		      .BYTE.b	%01001001
    893  f310		       8a		      .BYTE.b	%10001010
    894  f311		       24		      .BYTE.b	%00100100
    895  f312
    896  f312		       22		      .BYTE.b	%00100010
    897  f313		       44		      .BYTE.b	%01000100
    898  f314		       aa		      .BYTE.b	%10101010
    899  f315		       24		      .BYTE.b	%00100100
    900  f316
    901  f316		       11		      .BYTE.b	%00010001
    902  f317		       23		      .BYTE.b	%00100011
    903  f318		       53		      .BYTE.b	%01010011
    904  f319		       1d		      .BYTE.b	%00011101
    905  f31a
    906  f31a				   TitleAudio0
    907  f31a
    908  f31a		       0f		      .BYTE.b	#15	; B
    909  f31b		       13		      .BYTE.b	#19	; G
    910  f31c		       17		      .BYTE.b	#23	; E
    911  f31d		       13		      .BYTE.b	#19	; G
    912  f31e		       0e		      .BYTE.b	#14	; C
    913  f31f		       13		      .BYTE.b	#19
    914  f320		       17		      .BYTE.b	#23
    915  f321		       13		      .BYTE.b	#19
    916  f322		       0c		      .BYTE.b	#12	; D
    917  f323		       13		      .BYTE.b	#19
    918  f324		       17		      .BYTE.b	#23
    919  f325		       13		      .BYTE.b	#19
    920  f326		       0e		      .BYTE.b	#14	; C
    921  f327		       13		      .BYTE.b	#19
    922  f328		       17		      .BYTE.b	#23
    923  f329		       13		      .BYTE.b	#19
    924  f32a
    925  f32a				   TitleTone1
    926  f32a
    927  f32a		       0f		      .BYTE.b	#15	; Electronic Rumble
    928  f32b		       ff		      .BYTE.b	#$FF
    929  f32c		       01		      .BYTE.b	#1	; Low Pure Tone
    930  f32d		       01		      .BYTE.b	#1
    931  f32e		       08		      .BYTE.b	#8	; White Noise
    932  f32f		       01		      .BYTE.b	#1
    933  f330		       01		      .BYTE.b	#1
    934  f331		       ff		      .BYTE.b	#$FF
    935  f332		       ff		      .BYTE.b	#$FF
    936  f333		       0f		      .BYTE.b	#15
    937  f334		       ff		      .BYTE.b	#$FF
    938  f335		       ff		      .BYTE.b	#$FF
    939  f336		       08		      .BYTE.b	#8
    940  f337		       ff		      .BYTE.b	#$FF
    941  f338		       01		      .BYTE.b	#1
    942  f339		       01		      .BYTE.b	#1
    943  f33a
    944  f33a				   TitleAudio1
    945  f33a
    946  f33a		       1d		      .BYTE.b	#29	; Kick
    947  f33b		       ff		      .BYTE.b	#$FF
    948  f33c		       1f		      .BYTE.b	#31	; C
    949  f33d		       1f		      .BYTE.b	#31
    950  f33e		       07		      .BYTE.b	#7	; Snare
    951  f33f		       1f		      .BYTE.b	#31
    952  f340		       1f		      .BYTE.b	#31
    953  f341		       ff		      .BYTE.b	#$FF
    954  f342		       ff		      .BYTE.b	#$FF
    955  f343		       1d		      .BYTE.b	#29
    956  f344		       ff		      .BYTE.b	#$FF
    957  f345		       ff		      .BYTE.b	#$FF
    958  f346		       07		      .BYTE.b	#7
    959  f347		       ff		      .BYTE.b	#$FF
    960  f348		       17		      .BYTE.b	#23	; F
    961  f349		       18		      .BYTE.b	#24	; E
    962  f34a
    963  f34a							;-------------------------------------------
    964  f34a
    965  fffa					      ORG	$FFFA	; End of cart area
    966  fffa
    967  fffa				   InterruptVectors
    968  fffa
    969  fffa		       00 f0		      .word.w	Reset	; NMI
    970  fffc		       00 f0		      .word.w	Reset	; RESET
    971  fffe		       00 f0		      .word.w	Reset	; IRQ
    972  10000
    973  10000					       END
