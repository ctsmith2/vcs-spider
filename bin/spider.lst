------- FILE spider.asm LEVEL 1 PASS 2
      1  10000 ????						; 8 Legs of Love game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: August 28th, 2018
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE spider.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE spider.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????
     38  10000 ????						; Logo
     39  10000 ????		00 09	    LOGO_SIZE  =	9
     40  10000 ????		00 30	    LOGO_START =	48
     41  10000 ????		00 08	    LOGO_INTERVAL =	4*2
     42  10000 ????		00 10	    LOGO_TEXT  =	16
     43  10000 ????		00 08	    LOGO_PADDING =	8
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U0081 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080		       00	   unused_variable ds	1
     53 U0081		       00 00 00 00*Overlay    ds	8
     54 U0089
     55 U0081					      org	Overlay	; <= overlay size of 8 bytes
     56 U0081
     57 U0081							; Animation/Logic System
     58 U0081
     59 U0081					      org	Overlay
     60 U0081
     61 U0081							; Drawing System, etc
     62 U0081
     63  10000 ????				       SEG
     64  10000 ????
     65  f000					      ORG	$F000	; Start of cart area
     66  f000
     67  f000				   Reset
     68  f000
     69  f000				   .initstack
     70  f000
     71  f000		       a2 00		      ldx	#0
     72  f002		       8a		      txa
     73  f003
     74  f003				   .initstack_loop
     75  f003
     76  f003		       ca		      dex
     77  f004		       9a		      txs
     78  f005		       48		      pha
     79  f006		       d0 fb		      bne	.initstack_loop
     80  f008
     81  f008							; Stack pointer now $FF, a=x=0, TIA registers (0 - $7F) = RAM ($80 - $FF) = 0
     82  f008
     83  f008				   .initvars
     84  f008
     85  f008							; Set background color
     86  f008		       a9 00		      lda	#$00	; White
     87  f00a		       85 09		      sta	COLUBK
     88  f00c
     89  f00c							; Set the playfield and player color
     90  f00c		       a9 0e		      lda	#$0E	; White
     91  f00e		       85 08		      sta	COLUPF
     92  f010		       85 06		      sta	COLUP0
     93  f012		       85 07		      sta	COLUP1
     94  f014
     95  f014							; Playfield Control
     96  f014		       a9 00		      lda	#%00000000	; 1 for mirroring
     97  f016		       85 0a		      sta	CTRLPF
     98  f018
     99  f018							; Disable Game Elements
    100  f018		       a9 00		      lda	#$00
    101  f01a		       85 1f		      sta	ENABL	; Turn off ball
    102  f01c		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    103  f01e		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    104  f020		       85 1b		      sta	GRP0	; Turn off player 1
    105  f022		       85 1c		      sta	GRP1	; Turn off player 2
    106  f024
    107  f024							; Empty playfield
    108  f024		       a9 00		      lda	#%00000000
    109  f026		       85 0d		      sta	PF0
    110  f028		       85 0e		      sta	PF1
    111  f02a		       85 0f		      sta	PF2
    112  f02c
    113  f02c				   LogoFrame
    114  f02c
    115  f02c				   .vsync		; Start of vertical blank processing
    116  f02c
    117  f02c		       a9 00		      lda	#0
    118  f02e		       85 01		      sta	VBLANK
    119  f030
    120  f030		       a9 02		      lda	#2
    121  f032		       85 00		      sta	VSYNC
    122  f034
    123  f034							; VSYNCH signal scanlines
    124  f034					      REPEAT	#KERNEL_VSYNC
    125  f034		       85 02		      sta	WSYNC
    124  f034					      REPEND
    125  f036		       85 02		      sta	WSYNC
    124  f036					      REPEND
    125  f038		       85 02		      sta	WSYNC
    126  f03a					      REPEND
    127  f03a
    128  f03a		       a9 00		      lda	#0
    129  f03c		       85 00		      sta	VSYNC
    130  f03e
    131  f03e				   .vblank		; scanlines of vertical blank
    132  f03e
    133  f03e		       a2 00		      ldx	#0
    134  f040
    135  f040				   .vblank_loop
    136  f040
    137  f040		       85 02		      sta	WSYNC
    138  f042		       e8		      inx
    139  f043		       e0 25		      cpx	#KERNEL_VBLANK
    140  f045		       d0 f9		      bne	.vblank_loop
    141  f047
    142  f047				   .scanline		; Do 192 scanlines
    143  f047
    144  f047		       a9 00		      lda	#$00	; Clear playfields
    145  f049		       85 0d		      sta	PF0
    146  f04b		       85 0e		      sta	PF1
    147  f04d		       85 0f		      sta	PF2
    148  f04f
    149  f04f		       a2 00		      ldx	#0	; This counts our scanline number
    150  f051				   .scanline_start
    151  f051
    152  f051		       85 02		      sta	WSYNC
    153  f053		       e8		      inx
    154  f054		       e0 30		      cpx	#LOGO_START
    155  f056		       d0 f9		      bne	.scanline_start
    156  f058
    157  f058		       a2 00		      ldx	#0
    158  f05a				   .scanline_logo
    159  f05a
    160  f05a							; Cleanup
    161  f05a		       85 0e		      sta	PF1
    162  f05c
    163  f05c		       8a		      txa
    164  f05d		       4a		      lsr		; Divide counter by 4
    165  f05e		       4a		      lsr
    166  f05f		       29 fe		      and	#%11111110	; Remove 0th bit
    167  f061		       a8		      tay
    168  f062
    169  f062							; Load first half of data
    170  f062		       b9 d7 f0 	      lda	LogoData,y
    171  f065		       85 0f		      sta	PF2
    172  f067
    173  f067							; Load second half of data
    174  f067		       c8		      iny
    175  f068		       b9 d7 f0 	      lda	LogoData,y
    176  f06b
    177  f06b							; Use 4 MSB bits on PF0
    178  f06b		       85 0d		      sta	PF0
    179  f06d
    180  f06d							; Use 4 LSB bits on PF1
    181  f06d					      REPEAT	4
    182  f06d		       0a		      asl
    181  f06d					      REPEND
    182  f06e		       0a		      asl
    181  f06e					      REPEND
    182  f06f		       0a		      asl
    181  f06f					      REPEND
    182  f070		       0a		      asl
    183  f071					      REPEND
    184  f071		       85 0e		      sta	PF1
    185  f073
    186  f073							; Cleanup
    187  f073		       a9 00		      lda	#$00
    188  f075		       85 0f		      sta	PF2
    189  f077		       85 0d		      sta	PF0
    190  f079
    191  f079							; Wait for next line
    192  f079		       85 02		      sta	WSYNC
    193  f07b		       e8		      inx
    194  f07c		       e0 48		      cpx	#LOGO_SIZE*LOGO_INTERVAL	; Check if end of logo
    195  f07e		       d0 da		      bne	.scanline_logo
    196  f080
    197  f080							; Clear Playfields
    198  f080		       a9 00		      lda	#$00
    199  f082		       85 0d		      sta	PF0
    200  f084		       85 0e		      sta	PF1
    201  f086		       85 0f		      sta	PF2
    202  f088
    203  f088		       a2 00		      ldx	#0
    204  f08a				   .scanline_padding
    205  f08a
    206  f08a		       85 02		      sta	WSYNC
    207  f08c		       e8		      inx
    208  f08d		       e0 08		      cpx	#LOGO_PADDING
    209  f08f		       d0 f9		      bne	.scanline_padding
    210  f091
    211  f091		       a2 00		      ldx	#0
    212  f093				   .scanline_text
    213  f093
      0  f093					      SLEEP	26	; Set Position
      1  f093				   .CYCLES    SET	26
      2  f093
      3  f093				  -	      IF	.CYCLES < 2
      4  f093				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f093				  -	      ERR
      6  f093					      ENDIF
      7  f093
      8  f093				  -	      IF	.CYCLES & 1
      9  f093				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f093				  -	      nop	0
     11  f093				  -	      ELSE
     12  f093				  -	      bit	VSYNC
     13  f093				  -	      ENDIF
     14  f093				  -.CYCLES    SET	.CYCLES - 3
     15  f093					      ENDIF
     16  f093
     17  f093					      REPEAT	.CYCLES / 2
     18  f093		       ea		      nop
     17  f093					      REPEND
     18  f094		       ea		      nop
     17  f094					      REPEND
     18  f095		       ea		      nop
     17  f095					      REPEND
     18  f096		       ea		      nop
     17  f096					      REPEND
     18  f097		       ea		      nop
     17  f097					      REPEND
     18  f098		       ea		      nop
     17  f098					      REPEND
     18  f099		       ea		      nop
     17  f099					      REPEND
     18  f09a		       ea		      nop
     17  f09a					      REPEND
     18  f09b		       ea		      nop
     17  f09b					      REPEND
     18  f09c		       ea		      nop
     17  f09c					      REPEND
     18  f09d		       ea		      nop
     17  f09d					      REPEND
     18  f09e		       ea		      nop
     17  f09e					      REPEND
     18  f09f		       ea		      nop
     19  f0a0					      REPEND
    215  f0a0		       85 10		      sta	RESP0
    216  f0a2
      0  f0a2					      SLEEP	17
      1  f0a2				   .CYCLES    SET	17
      2  f0a2
      3  f0a2				  -	      IF	.CYCLES < 2
      4  f0a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0a2				  -	      ERR
      6  f0a2					      ENDIF
      7  f0a2
      8  f0a2					      IF	.CYCLES & 1
      9  f0a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0a2		       04 00		      nop	0
     11  f0a4				  -	      ELSE
     12  f0a4				  -	      bit	VSYNC
     13  f0a4					      ENDIF
     14  f0a4				   .CYCLES    SET	.CYCLES - 3
     15  f0a4					      ENDIF
     16  f0a4
     17  f0a4					      REPEAT	.CYCLES / 2
     18  f0a4		       ea		      nop
     17  f0a4					      REPEND
     18  f0a5		       ea		      nop
     17  f0a5					      REPEND
     18  f0a6		       ea		      nop
     17  f0a6					      REPEND
     18  f0a7		       ea		      nop
     17  f0a7					      REPEND
     18  f0a8		       ea		      nop
     17  f0a8					      REPEND
     18  f0a9		       ea		      nop
     17  f0a9					      REPEND
     18  f0aa		       ea		      nop
     19  f0ab					      REPEND
    218  f0ab		       85 11		      sta	RESP1
    219  f0ad
    220  f0ad		       86 1b		      stx	GRP0
    221  f0af		       86 1c		      stx	GRP1
    222  f0b1
    223  f0b1		       85 02		      sta	WSYNC
    224  f0b3		       e8		      inx
    225  f0b4		       e0 10		      cpx	#LOGO_TEXT
    226  f0b6		       d0 db		      bne	.scanline_text
    227  f0b8
    228  f0b8							; Clear Players
    229  f0b8		       a9 00		      lda	#0
    230  f0ba		       85 1b		      sta	GRP0
    231  f0bc		       85 1c		      sta	GRP1
    232  f0be
    233  f0be		       a2 00		      ldx	#0
    234  f0c0				   .scanline_end
    235  f0c0
    236  f0c0		       85 02		      sta	WSYNC
    237  f0c2		       e8		      inx
    238  f0c3		       e0 30		      cpx	#KERNEL_SCANLINES-LOGO_START-LOGO_SIZE*LOGO_INTERVAL-LOGO_PADDING-LOGO_TEXT
    239  f0c5		       d0 f9		      bne	.scanline_end
    240  f0c7
    241  f0c7				   .overscan		; 30 scanlines of overscan
    242  f0c7
    243  f0c7		       a9 42		      lda	#%01000010
    244  f0c9		       85 01		      sta	VBLANK	; end of screen - enter blanking
    245  f0cb
    246  f0cb		       a2 00		      ldx	#0
    247  f0cd
    248  f0cd				   .overscan_loop
    249  f0cd
    250  f0cd		       85 02		      sta	WSYNC
    251  f0cf		       e8		      inx
    252  f0d0		       e0 1e		      cpx	#KERNEL_OVERSCAN
    253  f0d2		       d0 f9		      bne	.overscan_loop
    254  f0d4
    255  f0d4		       4c 2c f0 	      jmp	LogoFrame
    256  f0d7
    257  f0d7				   LogoData		; 6 bytes over 8 lines each, total of 48 lines
    258  f0d7
    259  f0d7		       00		      .BYTE.b	%00000000	; Reversed
    260  f0d8		       10		      .BYTE.b	%00010000	; First 4 bits reversed
    261  f0d9
    262  f0d9		       80		      .BYTE.b	%10000000
    263  f0da		       20		      .BYTE.b	%00100000
    264  f0db
    265  f0db		       40		      .BYTE.b	%01000000
    266  f0dc		       40		      .BYTE.b	%01000000
    267  f0dd
    268  f0dd		       20		      .BYTE.b	%00100000
    269  f0de		       80		      .BYTE.b	%10000000
    270  f0df
    271  f0df		       10		      .BYTE.b	%00010000
    272  f0e0		       08		      .BYTE.b	%00001000
    273  f0e1
    274  f0e1		       08		      .BYTE.b	%00001000
    275  f0e2		       00		      .BYTE.b	%00000000
    276  f0e3
    277  f0e3		       04		      .BYTE.b	%00000100
    278  f0e4		       00		      .BYTE.b	%00000000
    279  f0e5
    280  f0e5		       02		      .BYTE.b	%00000010
    281  f0e6		       00		      .BYTE.b	%00000000
    282  f0e7
    283  f0e7		       ff		      .BYTE.b	%11111111
    284  f0e8		       ff		      .BYTE.b	%11111111
    285  f0e9
    286  f0e9							;-------------------------------------------
    287  f0e9
    288  fffa					      ORG	$FFFA	; End of cart area
    289  fffa
    290  fffa				   InterruptVectors
    291  fffa
    292  fffa		       00 f0		      .word.w	Reset	; NMI
    293  fffc		       00 f0		      .word.w	Reset	; RESET
    294  fffe		       00 f0		      .word.w	Reset	; IRQ
    295  10000
    296  10000					       END
