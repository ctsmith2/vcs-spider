------- FILE spider.asm LEVEL 1 PASS 2
      1  10000 ????						; 8 Legs of Love game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: August 28th, 2018
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE spider.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE spider.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????
     38  10000 ????						; Logo
     39  10000 ????		00 09	    LOGO_SIZE  =	9
     40  10000 ????		00 30	    LOGO_START =	48
     41  10000 ????		00 08	    LOGO_INTERVAL =	8
     42  10000 ????		00 b4	    LOGO_FRAMES =	180
     43  10000 ????
     44  10000 ????		00 a2	    LOGO_BG_COLU =	#$A2
     45  10000 ????		00 5e	    LOGO_FG_COLU =	#$5E
     46  10000 ????
     47  10000 ????		00 04	    LOGO_AUD_0_TONE =	4
     48  10000 ????		00 0f	    LOGO_AUD_0_VOLUME =	15	; 15 is max
     49  10000 ????		00 01	    LOGO_AUD_1_TONE =	1
     50  10000 ????		00 03	    LOGO_AUD_1_VOLUME =	3
     51  10000 ????		00 0c	    LOGO_AUD_LENGTH =	12
     52  10000 ????		00 08	    LOGO_AUD_STEP =	8
     53  10000 ????
     54  10000 ????						; Title
     55  10000 ????		00 08	    TITLE_LINE_SIZE =	8
     56  10000 ????		00 04	    TITLE_DATA_SIZE =	%00000100
     57  10000 ????		00 01	    TITLE_BORDER =	1
     58  10000 ????		00 04	    TITLE_PAD  =	4
     59  10000 ????		00 06	    TITLE_IMAGE =	6
     60  10000 ????		00 02	    TITLE_GAP  =	2
     61  10000 ????
     62  10000 ????		00 70	    TITLE_BG_COLU =	#$70
     63  10000 ????		00 7e	    TITLE_BD_COLU =	#$7E
     64  10000 ????		00 0e	    TITLE_FG_COLU =	#$0E
     65  10000 ????
     66  10000 ????		00 04	    TITLE_AUD_0_TONE =	4
     67  10000 ????		00 04	    TITLE_AUD_0_VOLUME =	4
     68  10000 ????		00 07	    TITLE_AUD_1_VOLUME =	7
     69  10000 ????		00 10	    TITLE_AUD_LENGTH =	16
     70  10000 ????		00 09	    TITLE_AUD_STEP =	9
     71  10000 ????
     72  10000 ????						; Game
     73  10000 ????		00 08	    GAME_PF_LINE_SIZE =	8
     74  10000 ????		00 04	    GAME_PF_DATA_SIZE =	%00000100
     75  10000 ????		00 0c	    GAME_PF_SIZE =	12
     76  10000 ????
     77  10000 ????		00 00	    GAME_BG_COLU =	#$00
     78  10000 ????		00 0c	    GAME_FG_COLU =	#$0C
     79  10000 ????
     80  10000 ????		00 56	    GAME_P0_COLU =	#$56
     81  10000 ????		00 08	    GAME_P0_SIZE =	8
     82  10000 ????
     83  10000 ????						;================
     84  10000 ????						; Variables
     85  10000 ????						;================
     86  10000 ????
     87 U0084 ????				      SEG.U	vars
     88 U0080					      org	$80
     89 U0080
     90 U0080		       00 00 00 00*Overlay    ds	8
     91 U0088
     92 U0080					      org	Overlay
     93 U0080
     94 U0080							; Animation/Logic System
     95 U0080
     96 U0080		       00	   AnimationFrame ds	1	; 1 byte to count frames
     97 U0081		       00	   AnimationSubFrame ds	1	; 1 byte to count portions of frames
     98 U0082
     99 U0082							; Audio System
    100 U0082
    101 U0082		       00	   AudioFrame ds	1
    102 U0083		       00	   AudioStep  ds	1
    103 U0084
    104  10000 ????				       SEG
    105  10000 ????
    106  f000					      ORG	$F000	; Start of cart area
    107  f000
    108  f000				   Reset
    109  f000
    110  f000				   .initstack
    111  f000
    112  f000		       a2 00		      ldx	#0
    113  f002		       8a		      txa
    114  f003
    115  f003				   .initstack_loop
    116  f003
    117  f003		       ca		      dex
    118  f004		       9a		      txs
    119  f005		       48		      pha
    120  f006		       d0 fb		      bne	.initstack_loop
    121  f008
    122  f008							; Stack pointer now $FF, a=x=0, TIA registers (0 - $7F) = RAM ($80 - $FF) = 0
    123  f008
    124  f008				   .initvars
    125  f008
    126  f008							; Set background color
    127  f008		       a9 00		      lda	#$00	; Black
    128  f00a		       85 09		      sta	COLUBK
    129  f00c
    130  f00c							; Set the playfield and player color
    131  f00c		       a9 0e		      lda	#$0E	; White
    132  f00e		       85 08		      sta	COLUPF
    133  f010		       85 06		      sta	COLUP0
    134  f012		       85 07		      sta	COLUP1
    135  f014
    136  f014							; Playfield Control
    137  f014		       a9 00		      lda	#%00000000	; 1 for mirroring
    138  f016		       85 0a		      sta	CTRLPF
    139  f018
    140  f018							; Disable Game Elements
    141  f018		       a9 00		      lda	#$00
    142  f01a		       85 1f		      sta	ENABL	; Turn off ball
    143  f01c		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    144  f01e		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    145  f020		       85 1b		      sta	GRP0	; Turn off player 1
    146  f022		       85 1c		      sta	GRP1	; Turn off player 2
    147  f024
    148  f024							; Empty playfield
    149  f024		       a9 00		      lda	#%00000000
    150  f026		       85 0d		      sta	PF0
    151  f028		       85 0e		      sta	PF1
    152  f02a		       85 0f		      sta	PF2
    153  f02c
    154  f02c				   LogoScreen
    155  f02c
    156  f02c							; Load Colors
    157  f02c		       a9 a2		      lda	#LOGO_BG_COLU
    158  f02e		       85 09		      sta	COLUBK
    159  f030		       a9 5e		      lda	#LOGO_FG_COLU
    160  f032		       85 08		      sta	COLUPF
    161  f034
    162  f034							; Load audio settings
    163  f034		       a9 04		      lda	#LOGO_AUD_0_TONE
    164  f036		       85 15		      sta	AUDC0
    165  f038		       a9 0f		      lda	#LOGO_AUD_0_VOLUME
    166  f03a		       85 19		      sta	AUDV0
    167  f03c		       a9 01		      lda	#LOGO_AUD_1_TONE
    168  f03e		       85 16		      sta	AUDC1
    169  f040		       a9 03		      lda	#LOGO_AUD_1_VOLUME
    170  f042		       85 1a		      sta	AUDV1
    171  f044		       a9 00		      lda	#0
    172  f046		       85 82		      sta	AudioFrame
    173  f048		       85 83		      sta	AudioStep
    174  f04a
    175  f04a							; Play first note
    176  f04a		       a8		      tay
    177  f04b		       b9 5c f3 	      lda	LogoAudio0,y
    178  f04e		       85 17		      sta	AUDF0
    179  f050		       b9 68 f3 	      lda	LogoAudio1,y
    180  f053		       85 18		      sta	AUDF1
    181  f055
    182  f055							; Load number of frames into AnimationFrame
    183  f055		       a9 b4		      lda	#LOGO_FRAMES
    184  f057		       85 80		      sta	AnimationFrame
    185  f059
    186  f059							; Initialize sub frame
    187  f059		       a9 00		      lda	#0
    188  f05b		       85 81		      sta	AnimationSubFrame
    189  f05d
    190  f05d				   LogoFrame
    191  f05d
    192  f05d				   .logo_audio
    193  f05d
    194  f05d							; Increment Audio Frame
    195  f05d		       a6 82		      ldx	AudioFrame
    196  f05f		       e8		      inx
    197  f060		       86 82		      stx	AudioFrame
    198  f062
    199  f062							; Check if we need to play the next note
    200  f062		       e0 08		      cpx	#LOGO_AUD_STEP
    201  f064		       90 28		      bcc	.logo_audio_skip
    202  f066
    203  f066				   .logo_audio_play
    204  f066
    205  f066							; Reset AudioFrame
    206  f066		       a9 00		      lda	#0
    207  f068		       85 82		      sta	AudioFrame
    208  f06a
    209  f06a							; Check if we're at the end of the melody
    210  f06a		       a4 83		      ldy	AudioStep
    211  f06c		       c0 0b		      cpy	#LOGO_AUD_LENGTH-1
    212  f06e		       f0 10		      beq	.logo_audio_mute
    213  f070
    214  f070				   .logo_audio_play_note
    215  f070
    216  f070							; Increment Audio position
    217  f070		       c8		      iny
    218  f071		       84 83		      sty	AudioStep
    219  f073
    220  f073							; Load note and play
    221  f073		       b9 5c f3 	      lda	LogoAudio0,y
    222  f076		       85 17		      sta	AUDF0
    223  f078		       b9 68 f3 	      lda	LogoAudio1,y
    224  f07b		       85 18		      sta	AUDF1
    225  f07d		       4c 8e f0 	      jmp	.logo_audio_mute_skip
    226  f080
    227  f080				   .logo_audio_mute
    228  f080
    229  f080							; Mute audio
    230  f080		       a9 00		      lda	#0
    231  f082		       85 15		      sta	AUDC0
    232  f084		       85 19		      sta	AUDV0
    233  f086		       85 17		      sta	AUDF0
    234  f088		       85 16		      sta	AUDC1
    235  f08a		       85 1a		      sta	AUDV1
    236  f08c		       85 18		      sta	AUDF1
    237  f08e
    238  f08e				   .logo_audio_mute_skip
    239  f08e
    240  f08e				   .logo_audio_skip
    241  f08e
    242  f08e				   .logo_vsync		; Start of vertical blank processing
    243  f08e
    244  f08e		       a9 00		      lda	#0
    245  f090		       85 01		      sta	VBLANK
    246  f092
    247  f092		       a9 02		      lda	#2
    248  f094		       85 00		      sta	VSYNC
    249  f096
    250  f096							; VSYNCH signal scanlines
    251  f096					      REPEAT	#KERNEL_VSYNC
    252  f096		       85 02		      sta	WSYNC
    251  f096					      REPEND
    252  f098		       85 02		      sta	WSYNC
    251  f098					      REPEND
    252  f09a		       85 02		      sta	WSYNC
    253  f09c					      REPEND
    254  f09c
    255  f09c		       a9 00		      lda	#0
    256  f09e		       85 00		      sta	VSYNC
    257  f0a0
    258  f0a0				   .logo_vblank 		; scanlines of vertical blank
    259  f0a0
    260  f0a0		       a2 25		      ldx	#KERNEL_VBLANK
    261  f0a2				   .logo_vblank_loop
    262  f0a2
    263  f0a2		       85 02		      sta	WSYNC
    264  f0a4		       ca		      dex
    265  f0a5		       d0 fb		      bne	.logo_vblank_loop
    266  f0a7
    267  f0a7				   .logo_scanline		; Do 192 scanlines
    268  f0a7
    269  f0a7		       a9 00		      lda	#$00	; Clear playfields
    270  f0a9		       85 0d		      sta	PF0
    271  f0ab		       85 0e		      sta	PF1
    272  f0ad		       85 0f		      sta	PF2
    273  f0af
    274  f0af		       a2 30		      ldx	#LOGO_START	; This counts our scanline number
    275  f0b1				   .logo_scanline_start
    276  f0b1
    277  f0b1		       85 02		      sta	WSYNC
    278  f0b3		       ca		      dex
    279  f0b4		       d0 fb		      bne	.logo_scanline_start
    280  f0b6
    281  f0b6		       a2 00		      ldx	#0
    282  f0b8				   .logo_scanline_loop
    283  f0b8
    284  f0b8							; Cleanup
    285  f0b8		       85 0e		      sta	PF1
    286  f0ba
    287  f0ba		       8a		      txa
    288  f0bb		       4a		      lsr		; Divide counter by 4
    289  f0bc		       4a		      lsr
    290  f0bd		       29 fe		      and	#%11111110	; Remove 0th bit
    291  f0bf		       a8		      tay
    292  f0c0
    293  f0c0							; Check if we need to display line
    294  f0c0		       c4 81		      cpy	AnimationSubFrame
    295  f0c2		       b0 17		      bcs	.logo_scanline_skip
    296  f0c4
    297  f0c4							; Load first half of data
    298  f0c4		       b9 4a f3 	      lda	LogoData,y
    299  f0c7		       85 0f		      sta	PF2
    300  f0c9
    301  f0c9							; Load second half of data
    302  f0c9		       c8		      iny
    303  f0ca		       b9 4a f3 	      lda	LogoData,y
    304  f0cd
    305  f0cd							; Use 4 MSB bits on PF0
    306  f0cd		       85 0d		      sta	PF0
    307  f0cf
    308  f0cf							; Use 4 LSB bits on PF1
    309  f0cf					      REPEAT	4
    310  f0cf		       0a		      asl
    309  f0cf					      REPEND
    310  f0d0		       0a		      asl
    309  f0d0					      REPEND
    310  f0d1		       0a		      asl
    309  f0d1					      REPEND
    310  f0d2		       0a		      asl
    311  f0d3					      REPEND
    312  f0d3		       85 0e		      sta	PF1
    313  f0d5
    314  f0d5							; Cleanup
    315  f0d5		       a9 00		      lda	#$00
    316  f0d7		       85 0f		      sta	PF2
    317  f0d9		       85 0d		      sta	PF0
    318  f0db
    319  f0db				   .logo_scanline_skip
    320  f0db
    321  f0db							; Clear Playfields
    322  f0db		       a9 00		      lda	#$00
    323  f0dd		       85 0d		      sta	PF0
    324  f0df		       85 0e		      sta	PF1
    325  f0e1		       85 0f		      sta	PF2
    326  f0e3
    327  f0e3							; Wait for next line
    328  f0e3		       85 02		      sta	WSYNC
    329  f0e5
    330  f0e5							; Check if at end of logo display
    331  f0e5		       e8		      inx
    332  f0e6		       e0 48		      cpx	#LOGO_SIZE*LOGO_INTERVAL
    333  f0e8		       d0 ce		      bne	.logo_scanline_loop
    334  f0ea
    335  f0ea		       a2 48		      ldx	#KERNEL_SCANLINES-LOGO_START-LOGO_SIZE*LOGO_INTERVAL
    336  f0ec				   .logo_scanline_end
    337  f0ec
    338  f0ec		       85 02		      sta	WSYNC
    339  f0ee		       ca		      dex
    340  f0ef		       d0 fb		      bne	.logo_scanline_end
    341  f0f1
    342  f0f1				   .logo_overscan		; 30 scanlines of overscan
    343  f0f1
    344  f0f1		       a9 42		      lda	#%01000010
    345  f0f3		       85 01		      sta	VBLANK	; end of screen - enter blanking
    346  f0f5
    347  f0f5		       a2 1e		      ldx	#KERNEL_OVERSCAN
    348  f0f7				   .logo_overscan_loop
    349  f0f7
    350  f0f7		       85 02		      sta	WSYNC
    351  f0f9		       ca		      dex
    352  f0fa		       d0 fb		      bne	.logo_overscan_loop
    353  f0fc
    354  f0fc		       a6 80		      ldx	AnimationFrame
    355  f0fe
    356  f0fe							; Divide inverted AnimationFrame by 4 and put in AnimationSubFrame
    357  f0fe		       a9 b4		      lda	#LOGO_FRAMES
    358  f100		       e5 80		      sbc	AnimationFrame
    359  f102		       4a		      lsr
    360  f103		       4a		      lsr
    361  f104		       85 81		      sta	AnimationSubFrame
    362  f106
    363  f106							; Decrement AnimationFrame
    364  f106		       ca		      dex
    365  f107		       86 80		      stx	AnimationFrame
    366  f109
    367  f109							; Check if we're at the end of the animation
    368  f109		       f0 03		      beq	TitleScreen
    369  f10b		       4c 5d f0 	      jmp	LogoFrame
    370  f10e
    371  f10e				   TitleScreen
    372  f10e
    373  f10e							; Clear playfields
    374  f10e		       a9 00		      lda	#$00
    375  f110		       85 0d		      sta	PF0
    376  f112		       85 0e		      sta	PF1
    377  f114		       85 0f		      sta	PF2
    378  f116
    379  f116							; Background Color
    380  f116		       a9 70		      lda	#TITLE_BG_COLU
    381  f118		       85 09		      sta	COLUBK
    382  f11a
    383  f11a							; Border Color
    384  f11a		       a9 7e		      lda	#TITLE_BD_COLU
    385  f11c		       85 08		      sta	COLUPF
    386  f11e
    387  f11e							; Load audio settings
    388  f11e
    389  f11e							; Melody Line
    390  f11e		       a9 04		      lda	#TITLE_AUD_0_TONE
    391  f120		       85 15		      sta	AUDC0
    392  f122		       a9 04		      lda	#TITLE_AUD_0_VOLUME
    393  f124		       85 19		      sta	AUDV0
    394  f126
    395  f126							; Drums and Bass
    396  f126		       a9 00		      lda	#0
    397  f128		       85 16		      sta	AUDC1
    398  f12a		       85 1a		      sta	AUDV1
    399  f12c
    400  f12c							; Make it so that we play the first note immediately
    401  f12c		       a9 08		      lda	#TITLE_AUD_STEP-1
    402  f12e		       85 82		      sta	AudioFrame
    403  f130		       a9 0f		      lda	#TITLE_AUD_LENGTH-1
    404  f132		       85 83		      sta	AudioStep
    405  f134
    406  f134				   TitleFrame
    407  f134
    408  f134				   .title_audio
    409  f134
    410  f134							; Increment Audio Frame
    411  f134		       a6 82		      ldx	AudioFrame
    412  f136		       e8		      inx
    413  f137		       86 82		      stx	AudioFrame
    414  f139
    415  f139							; Check if we need to play the next note
    416  f139		       e0 09		      cpx	#TITLE_AUD_STEP
    417  f13b		       90 31		      bcc	.title_audio_skip
    418  f13d
    419  f13d				   .title_audio_play
    420  f13d
    421  f13d							; Reset AudioFrame
    422  f13d		       a9 00		      lda	#0
    423  f13f		       85 82		      sta	AudioFrame
    424  f141
    425  f141							; Increment melody position
    426  f141		       a4 83		      ldy	AudioStep
    427  f143		       c8		      iny
    428  f144
    429  f144							; Check if we're at the end of the melody
    430  f144		       c0 10		      cpy	#TITLE_AUD_LENGTH
    431  f146		       d0 02		      bne	.title_audio_play_note
    432  f148
    433  f148							; Loop our audio step
    434  f148		       a0 00		      ldy	#0
    435  f14a
    436  f14a				   .title_audio_play_note
    437  f14a
    438  f14a							; Save current position
    439  f14a		       84 83		      sty	AudioStep
    440  f14c
    441  f14c							; Basic Melody Line
    442  f14c		       b9 a4 f3 	      lda	TitleAudio0,y
    443  f14f		       85 17		      sta	AUDF0
    444  f151
    445  f151							; Drums and Bass
    446  f151		       b9 b4 f3 	      lda	TitleTone1,y
    447  f154		       c9 ff		      cmp	#$FF
    448  f156		       f0 0e		      beq	.title_audio_play_note_1_mute
    449  f158
    450  f158		       85 16		      sta	AUDC1
    451  f15a		       b9 c4 f3 	      lda	TitleAudio1,y
    452  f15d		       85 18		      sta	AUDF1
    453  f15f		       a9 07		      lda	#TITLE_AUD_1_VOLUME
    454  f161		       85 1a		      sta	AUDV1
    455  f163
    456  f163		       4c 6e f1 	      jmp	.title_audio_skip
    457  f166
    458  f166				   .title_audio_play_note_1_mute
    459  f166
    460  f166		       a9 00		      lda	#0
    461  f168		       85 18		      sta	AUDF1
    462  f16a		       85 16		      sta	AUDC1
    463  f16c		       85 1a		      sta	AUDV1
    464  f16e
    465  f16e				   .title_audio_skip
    466  f16e
    467  f16e				   .title_vsync 		; Start of vertical blank processing
    468  f16e
    469  f16e		       a9 00		      lda	#0
    470  f170		       85 01		      sta	VBLANK
    471  f172
    472  f172		       a9 02		      lda	#2
    473  f174		       85 00		      sta	VSYNC
    474  f176
    475  f176							; VSYNCH signal scanlines
    476  f176					      REPEAT	#KERNEL_VSYNC
    477  f176		       85 02		      sta	WSYNC
    476  f176					      REPEND
    477  f178		       85 02		      sta	WSYNC
    476  f178					      REPEND
    477  f17a		       85 02		      sta	WSYNC
    478  f17c					      REPEND
    479  f17c
    480  f17c		       a9 00		      lda	#0
    481  f17e		       85 00		      sta	VSYNC
    482  f180
    483  f180				   .title_vblank		; scanlines of vertical blank
    484  f180
    485  f180		       a2 25		      ldx	#KERNEL_VBLANK
    486  f182				   .title_vblank_loop
    487  f182
    488  f182		       85 02		      sta	WSYNC
    489  f184		       ca		      dex
    490  f185		       d0 fb		      bne	.title_vblank_loop
    491  f187
    492  f187				   .title_border_h_top
    493  f187
    494  f187							; Number of Scanlines
    495  f187		       a2 08		      ldx	#TITLE_BORDER*TITLE_LINE_SIZE
    496  f189
    497  f189							; Draw Playfield
    498  f189		       a9 ff		      lda	#$FF
    499  f18b		       85 0d		      sta	PF0
    500  f18d		       85 0e		      sta	PF1
    501  f18f		       85 0f		      sta	PF2
    502  f191
    503  f191				   .title_border_h_top_loop
    504  f191
    505  f191		       85 02		      sta	WSYNC
    506  f193		       ca		      dex
    507  f194		       d0 fb		      bne	.title_border_h_top_loop
    508  f196
    509  f196				   .title_border_v_top
    510  f196
    511  f196							; Number of Scanlines
    512  f196		       a2 20		      ldx	#TITLE_PAD*TITLE_LINE_SIZE
    513  f198
    514  f198							; Mirror playfield
    515  f198		       a9 01		      lda	#%00000001
    516  f19a		       85 0a		      sta	CTRLPF
    517  f19c
    518  f19c							; Draw Playfield
    519  f19c		       a9 10		      lda	#%00010000
    520  f19e		       85 0d		      sta	PF0
    521  f1a0
    522  f1a0		       a9 00		      lda	#$00
    523  f1a2		       85 0e		      sta	PF1
    524  f1a4		       85 0f		      sta	PF2
    525  f1a6
    526  f1a6				   .title_border_v_top_loop
    527  f1a6
    528  f1a6		       85 02		      sta	WSYNC
    529  f1a8		       ca		      dex
    530  f1a9		       d0 fb		      bne	.title_border_v_top_loop
    531  f1ab
    532  f1ab				   .title_image_top
    533  f1ab
    534  f1ab		       a0 00		      ldy	#$00	; Current Image Index
    535  f1ad		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    536  f1af
    537  f1af		       4c ba f1 	      jmp	.title_image_top_loop
    538  f1b2
    539  f1b2				   .title_image_top_loop_wait
    540  f1b2
    541  f1b2							; Wait until new line is ready to draw
    542  f1b2		       85 02		      sta	WSYNC
      0  f1b4					      sleep	11
      1  f1b4				   .CYCLES    SET	11
      2  f1b4
      3  f1b4				  -	      IF	.CYCLES < 2
      4  f1b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1b4				  -	      ERR
      6  f1b4					      ENDIF
      7  f1b4
      8  f1b4					      IF	.CYCLES & 1
      9  f1b4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1b4		       04 00		      nop	0
     11  f1b6				  -	      ELSE
     12  f1b6				  -	      bit	VSYNC
     13  f1b6					      ENDIF
     14  f1b6				   .CYCLES    SET	.CYCLES - 3
     15  f1b6					      ENDIF
     16  f1b6
     17  f1b6					      REPEAT	.CYCLES / 2
     18  f1b6		       ea		      nop
     17  f1b6					      REPEND
     18  f1b7		       ea		      nop
     17  f1b7					      REPEND
     18  f1b8		       ea		      nop
     17  f1b8					      REPEND
     18  f1b9		       ea		      nop
     19  f1ba					      REPEND
    544  f1ba
    545  f1ba				   .title_image_top_loop
    546  f1ba
    547  f1ba							; Draw Image
    548  f1ba		       b9 74 f3 	      lda	TitleImageTop,y
    549  f1bd		       85 0e		      sta	PF1
    550  f1bf		       c8		      iny
    551  f1c0
    552  f1c0							; Set Image Color
    553  f1c0		       a9 0e		      lda	#TITLE_FG_COLU
    554  f1c2		       85 08		      sta	COLUPF
    555  f1c4
    556  f1c4							; Finish Drawing Image
    557  f1c4		       b9 74 f3 	      lda	TitleImageTop,y
    558  f1c7		       85 0f		      sta	PF2
    559  f1c9		       c8		      iny
    560  f1ca		       b9 74 f3 	      lda	TitleImageTop,y
    561  f1cd		       c8		      iny
      0  f1ce					      sleep	5
      1  f1ce				   .CYCLES    SET	5
      2  f1ce
      3  f1ce				  -	      IF	.CYCLES < 2
      4  f1ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1ce				  -	      ERR
      6  f1ce					      ENDIF
      7  f1ce
      8  f1ce					      IF	.CYCLES & 1
      9  f1ce					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1ce		       04 00		      nop	0
     11  f1d0				  -	      ELSE
     12  f1d0				  -	      bit	VSYNC
     13  f1d0					      ENDIF
     14  f1d0				   .CYCLES    SET	.CYCLES - 3
     15  f1d0					      ENDIF
     16  f1d0
     17  f1d0					      REPEAT	.CYCLES / 2
     18  f1d0		       ea		      nop
     19  f1d1					      REPEND
    563  f1d1		       85 0f		      sta	PF2
    564  f1d3		       b9 74 f3 	      lda	TitleImageTop,y
    565  f1d6		       85 0e		      sta	PF1
    566  f1d8
    567  f1d8							; Clear bottom of index
    568  f1d8		       98		      tya
    569  f1d9		       29 fc		      and	#%11111100
    570  f1db		       a8		      tay
    571  f1dc
    572  f1dc							; Restore border color
      0  f1dc					      sleep	2
      1  f1dc				   .CYCLES    SET	2
      2  f1dc
      3  f1dc				  -	      IF	.CYCLES < 2
      4  f1dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1dc				  -	      ERR
      6  f1dc					      ENDIF
      7  f1dc
      8  f1dc				  -	      IF	.CYCLES & 1
      9  f1dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1dc				  -	      nop	0
     11  f1dc				  -	      ELSE
     12  f1dc				  -	      bit	VSYNC
     13  f1dc				  -	      ENDIF
     14  f1dc				  -.CYCLES    SET	.CYCLES - 3
     15  f1dc					      ENDIF
     16  f1dc
     17  f1dc					      REPEAT	.CYCLES / 2
     18  f1dc		       ea		      nop
     19  f1dd					      REPEND
    574  f1dd		       a9 7e		      lda	#TITLE_BD_COLU
    575  f1df		       85 08		      sta	COLUPF
    576  f1e1
    577  f1e1		       ca		      dex
    578  f1e2		       d0 ce		      bne	.title_image_top_loop_wait
    579  f1e4
    580  f1e4							; Add 4 to the image index to skip to next line
    581  f1e4					      REPEAT	4
    582  f1e4		       c8		      iny
    581  f1e4					      REPEND
    582  f1e5		       c8		      iny
    581  f1e5					      REPEND
    582  f1e6		       c8		      iny
    581  f1e6					      REPEND
    582  f1e7		       c8		      iny
    583  f1e8					      REPEND
    584  f1e8
    585  f1e8		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    586  f1ea
    587  f1ea		       c0 18		      cpy	#TITLE_IMAGE*TITLE_DATA_SIZE
    588  f1ec		       d0 cc		      bne	.title_image_top_loop
    589  f1ee
    590  f1ee				   .title_gap
    591  f1ee
    592  f1ee							; Number of Scanlines
    593  f1ee		       a2 10		      ldx	#TITLE_GAP*TITLE_LINE_SIZE
    594  f1f0
    595  f1f0							; Mirror playfield
    596  f1f0		       a9 01		      lda	#%00000001
    597  f1f2		       85 0a		      sta	CTRLPF
    598  f1f4
    599  f1f4							; Draw Playfield
    600  f1f4		       a9 10		      lda	#%00010000
    601  f1f6		       85 0d		      sta	PF0
    602  f1f8
    603  f1f8		       a9 00		      lda	#$00
    604  f1fa		       85 0e		      sta	PF1
    605  f1fc		       85 0f		      sta	PF2
    606  f1fe
    607  f1fe				   .title_gap_loop
    608  f1fe
    609  f1fe		       85 02		      sta	WSYNC
    610  f200		       ca		      dex
    611  f201		       d0 fb		      bne	.title_gap_loop
    612  f203
    613  f203				   .title_image_bottom
    614  f203
    615  f203		       a0 00		      ldy	#$00	; Current Image Index
    616  f205		       a2 08		      ldx	#TITLE_LINE_SIZE
    617  f207
    618  f207		       4c 12 f2 	      jmp	.title_image_bottom_loop
    619  f20a
    620  f20a				   .title_image_bottom_loop_wait
    621  f20a
    622  f20a							; Wait until new line is ready to draw
    623  f20a		       85 02		      sta	WSYNC
      0  f20c					      sleep	11
      1  f20c				   .CYCLES    SET	11
      2  f20c
      3  f20c				  -	      IF	.CYCLES < 2
      4  f20c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f20c				  -	      ERR
      6  f20c					      ENDIF
      7  f20c
      8  f20c					      IF	.CYCLES & 1
      9  f20c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f20c		       04 00		      nop	0
     11  f20e				  -	      ELSE
     12  f20e				  -	      bit	VSYNC
     13  f20e					      ENDIF
     14  f20e				   .CYCLES    SET	.CYCLES - 3
     15  f20e					      ENDIF
     16  f20e
     17  f20e					      REPEAT	.CYCLES / 2
     18  f20e		       ea		      nop
     17  f20e					      REPEND
     18  f20f		       ea		      nop
     17  f20f					      REPEND
     18  f210		       ea		      nop
     17  f210					      REPEND
     18  f211		       ea		      nop
     19  f212					      REPEND
    625  f212
    626  f212				   .title_image_bottom_loop
    627  f212
    628  f212							; Draw Image
    629  f212		       b9 8c f3 	      lda	TitleImageBottom,y
    630  f215		       85 0e		      sta	PF1
    631  f217		       c8		      iny
    632  f218
    633  f218							; Set Image Color
    634  f218		       a9 0e		      lda	#TITLE_FG_COLU
    635  f21a		       85 08		      sta	COLUPF
    636  f21c
    637  f21c							; Finish Drawing Image
    638  f21c		       b9 8c f3 	      lda	TitleImageBottom,y
    639  f21f		       85 0f		      sta	PF2
    640  f221		       c8		      iny
    641  f222		       b9 8c f3 	      lda	TitleImageBottom,y
    642  f225		       c8		      iny
      0  f226					      sleep	5
      1  f226				   .CYCLES    SET	5
      2  f226
      3  f226				  -	      IF	.CYCLES < 2
      4  f226				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f226				  -	      ERR
      6  f226					      ENDIF
      7  f226
      8  f226					      IF	.CYCLES & 1
      9  f226					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f226		       04 00		      nop	0
     11  f228				  -	      ELSE
     12  f228				  -	      bit	VSYNC
     13  f228					      ENDIF
     14  f228				   .CYCLES    SET	.CYCLES - 3
     15  f228					      ENDIF
     16  f228
     17  f228					      REPEAT	.CYCLES / 2
     18  f228		       ea		      nop
     19  f229					      REPEND
    644  f229		       85 0f		      sta	PF2
    645  f22b		       b9 8c f3 	      lda	TitleImageBottom,y
    646  f22e		       85 0e		      sta	PF1
    647  f230
    648  f230							; Clear bottom of index
    649  f230		       98		      tya
    650  f231		       29 fc		      and	#%11111100
    651  f233		       a8		      tay
    652  f234
    653  f234							; Restore border color
      0  f234					      sleep	2
      1  f234				   .CYCLES    SET	2
      2  f234
      3  f234				  -	      IF	.CYCLES < 2
      4  f234				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f234				  -	      ERR
      6  f234					      ENDIF
      7  f234
      8  f234				  -	      IF	.CYCLES & 1
      9  f234				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f234				  -	      nop	0
     11  f234				  -	      ELSE
     12  f234				  -	      bit	VSYNC
     13  f234				  -	      ENDIF
     14  f234				  -.CYCLES    SET	.CYCLES - 3
     15  f234					      ENDIF
     16  f234
     17  f234					      REPEAT	.CYCLES / 2
     18  f234		       ea		      nop
     19  f235					      REPEND
    655  f235		       a9 7e		      lda	#TITLE_BD_COLU
    656  f237		       85 08		      sta	COLUPF
    657  f239
    658  f239		       ca		      dex
    659  f23a		       d0 ce		      bne	.title_image_bottom_loop_wait
    660  f23c
    661  f23c							; Add 4 to image index to skip to next line
    662  f23c					      REPEAT	4
    663  f23c		       c8		      iny
    662  f23c					      REPEND
    663  f23d		       c8		      iny
    662  f23d					      REPEND
    663  f23e		       c8		      iny
    662  f23e					      REPEND
    663  f23f		       c8		      iny
    664  f240					      REPEND
    665  f240
    666  f240		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    667  f242
    668  f242		       c0 18		      cpy	#TITLE_IMAGE*TITLE_DATA_SIZE
    669  f244		       d0 cc		      bne	.title_image_bottom_loop
    670  f246
    671  f246				   .title_border_v_bottom
    672  f246
    673  f246							; Number of Scanlines
    674  f246		       a2 20		      ldx	#TITLE_PAD*TITLE_LINE_SIZE
    675  f248
    676  f248							; Mirror playfield
    677  f248		       a9 01		      lda	#%00000001
    678  f24a		       85 0a		      sta	CTRLPF
    679  f24c
    680  f24c							; Draw Playfield
    681  f24c		       a9 10		      lda	#%00010000
    682  f24e		       85 0d		      sta	PF0
    683  f250
    684  f250		       a9 00		      lda	#$00
    685  f252		       85 0e		      sta	PF1
    686  f254		       85 0f		      sta	PF2
    687  f256
    688  f256				   .title_border_v_bottom_loop
    689  f256
    690  f256		       85 02		      sta	WSYNC
    691  f258		       ca		      dex
    692  f259		       d0 fb		      bne	.title_border_v_bottom_loop
    693  f25b
    694  f25b				   .title_border_h_bottom
    695  f25b
    696  f25b							; Number of Scanlines
    697  f25b		       a2 08		      ldx	#TITLE_BORDER*TITLE_LINE_SIZE
    698  f25d
    699  f25d							; Draw Playfield
    700  f25d		       a9 ff		      lda	#$FF
    701  f25f		       85 0d		      sta	PF0
    702  f261		       85 0e		      sta	PF1
    703  f263		       85 0f		      sta	PF2
    704  f265
    705  f265				   .title_border_h_bottom_loop
    706  f265
    707  f265		       85 02		      sta	WSYNC
    708  f267		       ca		      dex
    709  f268		       d0 fb		      bne	.title_border_h_bottom_loop
    710  f26a
    711  f26a				   .title_overscan		; 30 scanlines of overscan
    712  f26a
    713  f26a		       a9 42		      lda	#%01000010
    714  f26c		       85 01		      sta	VBLANK	; end of screen - enter blanking
    715  f26e
    716  f26e		       a2 1e		      ldx	#KERNEL_OVERSCAN
    717  f270				   .title_overscan_loop
    718  f270
    719  f270		       85 02		      sta	WSYNC
    720  f272		       ca		      dex
    721  f273		       d0 fb		      bne	.title_overscan_loop
    722  f275
    723  f275							; Check if Fire Button on controller 1 is pressed
    724  f275		       a5 0c		      lda	INPT4
    725  f277		       10 03		      bpl	GameScreen
    726  f279		       4c 34 f1 	      jmp	TitleFrame
    727  f27c
    728  f27c				   GameScreen
    729  f27c
    730  f27c							; Clear playfields
    731  f27c		       a9 00		      lda	#0
    732  f27e		       85 0d		      sta	PF0
    733  f280		       85 0e		      sta	PF1
    734  f282		       85 0f		      sta	PF2
    735  f284
    736  f284							; Mirror playfield
    737  f284		       a9 01		      lda	#%00000001
    738  f286		       85 0a		      sta	CTRLPF
    739  f288
    740  f288							; Background Color
    741  f288		       a9 00		      lda	#GAME_BG_COLU
    742  f28a		       85 09		      sta	COLUBK
    743  f28c
    744  f28c							; Foreground Color
    745  f28c		       a9 0c		      lda	#GAME_FG_COLU
    746  f28e		       85 08		      sta	COLUPF
    747  f290
    748  f290							; Player Color
    749  f290		       a9 56		      lda	#GAME_P0_COLU
    750  f292		       85 06		      sta	COLUP0
    751  f294
    752  f294							; Mute Audio
    753  f294		       a9 00		      lda	#0
    754  f296		       85 15		      sta	AUDC0
    755  f298		       85 19		      sta	AUDV0
    756  f29a		       85 17		      sta	AUDF0
    757  f29c		       85 16		      sta	AUDC1
    758  f29e		       85 1a		      sta	AUDV1
    759  f2a0		       85 18		      sta	AUDF1
    760  f2a2
    761  f2a2				   GameFrame
    762  f2a2
    763  f2a2				   .game_vsync		; Start of vertical blank processing
    764  f2a2
    765  f2a2		       a9 00		      lda	#0
    766  f2a4		       85 01		      sta	VBLANK
    767  f2a6
    768  f2a6		       a9 02		      lda	#2
    769  f2a8		       85 00		      sta	VSYNC
    770  f2aa
    771  f2aa							; VSYNCH signal scanlines
    772  f2aa					      REPEAT	#KERNEL_VSYNC
    773  f2aa		       85 02		      sta	WSYNC
    772  f2aa					      REPEND
    773  f2ac		       85 02		      sta	WSYNC
    772  f2ac					      REPEND
    773  f2ae		       85 02		      sta	WSYNC
    774  f2b0					      REPEND
    775  f2b0
    776  f2b0		       a9 00		      lda	#0
    777  f2b2		       85 00		      sta	VSYNC
    778  f2b4
    779  f2b4				   .game_vblank 		; scanlines of vertical blank
    780  f2b4
    781  f2b4		       a2 25		      ldx	#KERNEL_VBLANK
    782  f2b6				   .game_vblank_loop
    783  f2b6
    784  f2b6		       85 02		      sta	WSYNC
    785  f2b8		       ca		      dex
    786  f2b9		       d0 fb		      bne	.game_vblank_loop
    787  f2bb
    788  f2bb				   .game_playfield_top
    789  f2bb
    790  f2bb		       a0 00		      ldy	#0	; Current Image Index
    791  f2bd
    792  f2bd				   .game_playfield_top_line
    793  f2bd
    794  f2bd							; Draw Image
    795  f2bd		       b9 d4 f3 	      lda	GameImage,y
    796  f2c0		       85 0d		      sta	PF0
    797  f2c2		       c8		      iny
    798  f2c3		       b9 d4 f3 	      lda	GameImage,y
    799  f2c6		       85 0e		      sta	PF1
    800  f2c8		       c8		      iny
    801  f2c9		       b9 d4 f3 	      lda	GameImage,y
    802  f2cc		       85 0f		      sta	PF2
    803  f2ce
    804  f2ce							; Clear bottom of index
    805  f2ce		       98		      tya
    806  f2cf		       29 fc		      and	#%11111100
    807  f2d1		       a8		      tay
    808  f2d2
    809  f2d2							; Add 4 to the image index to skip to next line
    810  f2d2					      REPEAT	4
    811  f2d2		       c8		      iny
    810  f2d2					      REPEND
    811  f2d3		       c8		      iny
    810  f2d3					      REPEND
    811  f2d4		       c8		      iny
    810  f2d4					      REPEND
    811  f2d5		       c8		      iny
    812  f2d6					      REPEND
    813  f2d6
    814  f2d6		       a2 08		      ldx	#GAME_PF_LINE_SIZE	; Current scanline
    815  f2d8				   .game_playfield_top_loop
    816  f2d8
    817  f2d8		       85 02		      sta	WSYNC
    818  f2da		       ca		      dex
    819  f2db		       d0 fb		      bne	.game_playfield_top_loop
    820  f2dd
    821  f2dd							; Reset scanlines
    822  f2dd		       a2 08		      ldx	#GAME_PF_LINE_SIZE
    823  f2df
    824  f2df							; Check if we're at end of top half
    825  f2df		       c0 30		      cpy	#GAME_PF_SIZE*GAME_PF_DATA_SIZE
    826  f2e1		       d0 da		      bne	.game_playfield_top_line
    827  f2e3
    828  f2e3				   .game_player
    829  f2e3
    830  f2e3		       a0 00		      ldy	#0
    831  f2e5		       a2 08		      ldx	#GAME_P0_SIZE
    832  f2e7				   .game_player_loop
    833  f2e7
    834  f2e7		       b9 04 f4 	      lda	PlayerSprite,y
    835  f2ea		       85 1b		      sta	GRP0
    836  f2ec		       c8		      iny
    837  f2ed
    838  f2ed		       a9 01		      lda	#1
      0  f2ef					      sleep	20
      1  f2ef				   .CYCLES    SET	20
      2  f2ef
      3  f2ef				  -	      IF	.CYCLES < 2
      4  f2ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2ef				  -	      ERR
      6  f2ef					      ENDIF
      7  f2ef
      8  f2ef				  -	      IF	.CYCLES & 1
      9  f2ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2ef				  -	      nop	0
     11  f2ef				  -	      ELSE
     12  f2ef				  -	      bit	VSYNC
     13  f2ef				  -	      ENDIF
     14  f2ef				  -.CYCLES    SET	.CYCLES - 3
     15  f2ef					      ENDIF
     16  f2ef
     17  f2ef					      REPEAT	.CYCLES / 2
     18  f2ef		       ea		      nop
     17  f2ef					      REPEND
     18  f2f0		       ea		      nop
     17  f2f0					      REPEND
     18  f2f1		       ea		      nop
     17  f2f1					      REPEND
     18  f2f2		       ea		      nop
     17  f2f2					      REPEND
     18  f2f3		       ea		      nop
     17  f2f3					      REPEND
     18  f2f4		       ea		      nop
     17  f2f4					      REPEND
     18  f2f5		       ea		      nop
     17  f2f5					      REPEND
     18  f2f6		       ea		      nop
     17  f2f6					      REPEND
     18  f2f7		       ea		      nop
     17  f2f7					      REPEND
     18  f2f8		       ea		      nop
     19  f2f9					      REPEND
    840  f2f9		       85 10		      sta	RESP0
      0  f2fb					      sleep	20
      1  f2fb				   .CYCLES    SET	20
      2  f2fb
      3  f2fb				  -	      IF	.CYCLES < 2
      4  f2fb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2fb				  -	      ERR
      6  f2fb					      ENDIF
      7  f2fb
      8  f2fb				  -	      IF	.CYCLES & 1
      9  f2fb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2fb				  -	      nop	0
     11  f2fb				  -	      ELSE
     12  f2fb				  -	      bit	VSYNC
     13  f2fb				  -	      ENDIF
     14  f2fb				  -.CYCLES    SET	.CYCLES - 3
     15  f2fb					      ENDIF
     16  f2fb
     17  f2fb					      REPEAT	.CYCLES / 2
     18  f2fb		       ea		      nop
     17  f2fb					      REPEND
     18  f2fc		       ea		      nop
     17  f2fc					      REPEND
     18  f2fd		       ea		      nop
     17  f2fd					      REPEND
     18  f2fe		       ea		      nop
     17  f2fe					      REPEND
     18  f2ff		       ea		      nop
     17  f2ff					      REPEND
     18  f300		       ea		      nop
     17  f300					      REPEND
     18  f301		       ea		      nop
     17  f301					      REPEND
     18  f302		       ea		      nop
     17  f302					      REPEND
     18  f303		       ea		      nop
     17  f303					      REPEND
     18  f304		       ea		      nop
     19  f305					      REPEND
    842  f305
    843  f305		       85 02		      sta	WSYNC
    844  f307		       ca		      dex
    845  f308		       d0 dd		      bne	.game_player_loop
    846  f30a
    847  f30a							; Reset Player
    848  f30a		       a9 00		      lda	#0
    849  f30c		       85 1b		      sta	GRP0
    850  f30e
    851  f30e
    852  f30e				   .game_playfield_bottom
    853  f30e
    854  f30e		       a0 28		      ldy	#(GAME_PF_SIZE-2)*GAME_PF_DATA_SIZE	; Current image index
    855  f310
    856  f310				   .game_playfield_bottom_line
    857  f310
    858  f310							; Draw Image
    859  f310		       b9 d4 f3 	      lda	GameImage,y
    860  f313		       85 0d		      sta	PF0
    861  f315		       c8		      iny
    862  f316		       b9 d4 f3 	      lda	GameImage,y
    863  f319		       85 0e		      sta	PF1
    864  f31b		       c8		      iny
    865  f31c		       b9 d4 f3 	      lda	GameImage,y
    866  f31f		       85 0f		      sta	PF2
    867  f321
    868  f321							; Clear bottom of index
    869  f321		       98		      tya
    870  f322		       29 fc		      and	#%11111100
    871  f324		       a8		      tay
    872  f325
    873  f325							; Subtract 4 from the image index to skip to next line
    874  f325					      REPEAT	4
    875  f325		       88		      dey
    874  f325					      REPEND
    875  f326		       88		      dey
    874  f326					      REPEND
    875  f327		       88		      dey
    874  f327					      REPEND
    875  f328		       88		      dey
    876  f329					      REPEND
    877  f329
    878  f329		       a2 08		      ldx	#GAME_PF_LINE_SIZE	; Current scanline
    879  f32b				   .game_playfield_bottom_loop
    880  f32b
    881  f32b		       85 02		      sta	WSYNC
    882  f32d		       ca		      dex
    883  f32e		       d0 fb		      bne	.game_playfield_bottom_loop
    884  f330
    885  f330							; Check if we're at the end of the bottom half
    886  f330		       c0 fc		      cpy	#0-GAME_PF_DATA_SIZE
    887  f332		       d0 dc		      bne	.game_playfield_bottom_line
    888  f334
    889  f334							; Clear Playfields
    890  f334		       a9 00		      lda	#0
    891  f336		       85 0d		      sta	PF0
    892  f338		       85 0e		      sta	PF1
    893  f33a		       85 0f		      sta	PF2
    894  f33c
    895  f33c				   .game_overscan		; 30 scanlines of overscan
    896  f33c
    897  f33c		       a9 42		      lda	#%01000010
    898  f33e		       85 01		      sta	VBLANK	; end of screen - enter blanking
    899  f340
    900  f340		       a2 1e		      ldx	#KERNEL_OVERSCAN
    901  f342				   .game_overscan_loop
    902  f342
    903  f342		       85 02		      sta	WSYNC
    904  f344		       ca		      dex
    905  f345		       d0 fb		      bne	.game_overscan_loop
    906  f347
    907  f347		       4c a2 f2 	      jmp	GameFrame
    908  f34a
    909  f34a				   LogoData		; 6 bytes over 8 lines each, total of 48 lines
    910  f34a
    911  f34a		       46		      .BYTE.b	%01000110	; Reversed
    912  f34b		       60		      .BYTE.b	%01100000	; First 4 bits reversed
    913  f34c
    914  f34c		       aa		      .BYTE.b	%10101010
    915  f34d		       a0		      .BYTE.b	%10100000
    916  f34e
    917  f34e		       2a		      .BYTE.b	%00101010
    918  f34f		       a0		      .BYTE.b	%10100000
    919  f350
    920  f350		       aa		      .BYTE.b	%10101010
    921  f351		       a0		      .BYTE.b	%10100000
    922  f352
    923  f352		       46		      .BYTE.b	%01000110
    924  f353		       60		      .BYTE.b	%01100000
    925  f354
    926  f354		       00		      .BYTE.b	%00000000
    927  f355		       00		      .BYTE.b	%00000000
    928  f356
    929  f356		       88		      .BYTE.b	%10001000
    930  f357		       80		      .BYTE.b	%10000000
    931  f358
    932  f358		       54		      .BYTE.b	%01010100
    933  f359		       50		      .BYTE.b	%01010000
    934  f35a
    935  f35a		       22		      .BYTE.b	%00100010
    936  f35b		       20		      .BYTE.b	%00100000
    937  f35c
    938  f35c				   LogoAudio0
    939  f35c
    940  f35c		       1d		      .BYTE.b	#29	; C
    941  f35d		       17		      .BYTE.b	#23	; E
    942  f35e		       13		      .BYTE.b	#19	; G
    943  f35f		       0f		      .BYTE.b	#15	; A
    944  f360		       17		      .BYTE.b	#23	; E
    945  f361		       13		      .BYTE.b	#19	; G
    946  f362		       0f		      .BYTE.b	#15	; B
    947  f363		       0e		      .BYTE.b	#14	; C
    948  f364		       0b		      .BYTE.b	#11	; E
    949  f365		       0b		      .BYTE.b	#11
    950  f366		       0b		      .BYTE.b	#11
    951  f367		       0b		      .BYTE.b	#11
    952  f368
    953  f368				   LogoAudio1
    954  f368
    955  f368		       1f		      .BYTE.b	#31	; C
    956  f369		       1f		      .BYTE.b	#31
    957  f36a		       1f		      .BYTE.b	#31
    958  f36b		       1f		      .BYTE.b	#31
    959  f36c		       19		      .BYTE.b	#25	; E
    960  f36d		       19		      .BYTE.b	#25
    961  f36e		       19		      .BYTE.b	#25
    962  f36f		       19		      .BYTE.b	#25
    963  f370		       14		      .BYTE.b	#20	; G
    964  f371		       14		      .BYTE.b	#20
    965  f372		       14		      .BYTE.b	#20
    966  f373		       14		      .BYTE.b	#20
    967  f374
    968  f374				   TitleImageTop		; Spider
    969  f374
    970  f374		       1e		      .BYTE.b	%00011110	; Normal
    971  f375		       77		      .BYTE.b	%01110111	; Reversed
    972  f376		       e7		      .BYTE.b	%11100111	; Normal
    973  f377		       0e		      .BYTE.b	%00001110	; Reversed
    974  f378
    975  f378		       10		      .BYTE.b	%00010000
    976  f379		       25		      .BYTE.b	%00100101
    977  f37a		       94		      .BYTE.b	%10010100
    978  f37b		       12		      .BYTE.b	%00010010
    979  f37c
    980  f37c		       10		      .BYTE.b	%00010000
    981  f37d		       27		      .BYTE.b	%00100111
    982  f37e		       96		      .BYTE.b	%10010110
    983  f37f		       12		      .BYTE.b	%00010010
    984  f380
    985  f380		       1c		      .BYTE.b	%00011100
    986  f381		       21		      .BYTE.b	%00100001
    987  f382		       94		      .BYTE.b	%10010100
    988  f383		       0e		      .BYTE.b	%00001110
    989  f384
    990  f384		       04		      .BYTE.b	%00000100
    991  f385		       21		      .BYTE.b	%00100001
    992  f386		       94		      .BYTE.b	%10010100
    993  f387		       12		      .BYTE.b	%00010010
    994  f388
    995  f388		       1c		      .BYTE.b	%00011100
    996  f389		       71		      .BYTE.b	%01110001
    997  f38a		       e7		      .BYTE.b	%11100111
    998  f38b		       12		      .BYTE.b	%00010010
    999  f38c
   1000  f38c				   TitleImageBottom		; Web & Art
   1001  f38c
   1002  f38c		       01		      .BYTE.b	%00000001	; Normal
   1003  f38d		       03		      .BYTE.b	%00000011	; Reversed
   1004  f38e		       8b		      .BYTE.b	%10001011	; Normal
   1005  f38f		       1d		      .BYTE.b	%00011101	; Reversed
   1006  f390
   1007  f390		       0a		      .BYTE.b	%00001010
   1008  f391		       14		      .BYTE.b	%00010100
   1009  f392		       8a		      .BYTE.b	%10001010
   1010  f393		       24		      .BYTE.b	%00100100
   1011  f394
   1012  f394		       15		      .BYTE.b	%00010101
   1013  f395		       2a		      .BYTE.b	%00101010
   1014  f396		       8b		      .BYTE.b	%10001011
   1015  f397		       1c		      .BYTE.b	%00011100
   1016  f398
   1017  f398		       24		      .BYTE.b	%00100100
   1018  f399		       49		      .BYTE.b	%01001001
   1019  f39a		       8a		      .BYTE.b	%10001010
   1020  f39b		       24		      .BYTE.b	%00100100
   1021  f39c
   1022  f39c		       22		      .BYTE.b	%00100010
   1023  f39d		       44		      .BYTE.b	%01000100
   1024  f39e		       aa		      .BYTE.b	%10101010
   1025  f39f		       24		      .BYTE.b	%00100100
   1026  f3a0
   1027  f3a0		       11		      .BYTE.b	%00010001
   1028  f3a1		       23		      .BYTE.b	%00100011
   1029  f3a2		       53		      .BYTE.b	%01010011
   1030  f3a3		       1d		      .BYTE.b	%00011101
   1031  f3a4
   1032  f3a4				   TitleAudio0
   1033  f3a4
   1034  f3a4		       0f		      .BYTE.b	#15	; B
   1035  f3a5		       13		      .BYTE.b	#19	; G
   1036  f3a6		       17		      .BYTE.b	#23	; E
   1037  f3a7		       13		      .BYTE.b	#19	; G
   1038  f3a8		       0e		      .BYTE.b	#14	; C
   1039  f3a9		       13		      .BYTE.b	#19
   1040  f3aa		       17		      .BYTE.b	#23
   1041  f3ab		       13		      .BYTE.b	#19
   1042  f3ac		       0c		      .BYTE.b	#12	; D
   1043  f3ad		       13		      .BYTE.b	#19
   1044  f3ae		       17		      .BYTE.b	#23
   1045  f3af		       13		      .BYTE.b	#19
   1046  f3b0		       0e		      .BYTE.b	#14	; C
   1047  f3b1		       13		      .BYTE.b	#19
   1048  f3b2		       17		      .BYTE.b	#23
   1049  f3b3		       13		      .BYTE.b	#19
   1050  f3b4
   1051  f3b4				   TitleTone1
   1052  f3b4
   1053  f3b4		       0f		      .BYTE.b	#15	; Electronic Rumble
   1054  f3b5		       ff		      .BYTE.b	#$FF
   1055  f3b6		       01		      .BYTE.b	#1	; Low Pure Tone
   1056  f3b7		       01		      .BYTE.b	#1
   1057  f3b8		       08		      .BYTE.b	#8	; White Noise
   1058  f3b9		       01		      .BYTE.b	#1
   1059  f3ba		       01		      .BYTE.b	#1
   1060  f3bb		       ff		      .BYTE.b	#$FF
   1061  f3bc		       ff		      .BYTE.b	#$FF
   1062  f3bd		       0f		      .BYTE.b	#15
   1063  f3be		       ff		      .BYTE.b	#$FF
   1064  f3bf		       ff		      .BYTE.b	#$FF
   1065  f3c0		       08		      .BYTE.b	#8
   1066  f3c1		       ff		      .BYTE.b	#$FF
   1067  f3c2		       01		      .BYTE.b	#1
   1068  f3c3		       01		      .BYTE.b	#1
   1069  f3c4
   1070  f3c4				   TitleAudio1
   1071  f3c4
   1072  f3c4		       1d		      .BYTE.b	#29	; Kick
   1073  f3c5		       ff		      .BYTE.b	#$FF
   1074  f3c6		       1f		      .BYTE.b	#31	; C
   1075  f3c7		       1f		      .BYTE.b	#31
   1076  f3c8		       07		      .BYTE.b	#7	; Snare
   1077  f3c9		       1f		      .BYTE.b	#31
   1078  f3ca		       1f		      .BYTE.b	#31
   1079  f3cb		       ff		      .BYTE.b	#$FF
   1080  f3cc		       ff		      .BYTE.b	#$FF
   1081  f3cd		       1d		      .BYTE.b	#29
   1082  f3ce		       ff		      .BYTE.b	#$FF
   1083  f3cf		       ff		      .BYTE.b	#$FF
   1084  f3d0		       07		      .BYTE.b	#7
   1085  f3d1		       ff		      .BYTE.b	#$FF
   1086  f3d2		       17		      .BYTE.b	#23	; F
   1087  f3d3		       18		      .BYTE.b	#24	; E
   1088  f3d4
   1089  f3d4				   GameImage		; Just one quadrant of web
   1090  f3d4
   1091  f3d4		       00		      .BYTE.b	%00000000	; First 4 bits reversed
   1092  f3d5		       00		      .BYTE.b	%00000000	; Normal
   1093  f3d6		       03		      .BYTE.b	%00000011	; Reversed
   1094  f3d7		       00		      .BYTE.b	%00000000	; Empty
   1095  f3d8
   1096  f3d8		       00		      .BYTE.b	%00000000
   1097  f3d9		       00		      .BYTE.b	%00000000
   1098  f3da		       3f		      .BYTE.b	%00111111
   1099  f3db		       00		      .BYTE.b	%00000000
   1100  f3dc
   1101  f3dc		       00		      .BYTE.b	%00000000
   1102  f3dd		       01		      .BYTE.b	%00000001
   1103  f3de		       c2		      .BYTE.b	%11000010
   1104  f3df		       00		      .BYTE.b	%00000000
   1105  f3e0
   1106  f3e0		       00		      .BYTE.b	%00000000
   1107  f3e1		       01		      .BYTE.b	%00000001
   1108  f3e2		       04		      .BYTE.b	%00000100
   1109  f3e3		       00		      .BYTE.b	%00000000
   1110  f3e4
   1111  f3e4		       00		      .BYTE.b	%00000000
   1112  f3e5		       02		      .BYTE.b	%00000010
   1113  f3e6		       08		      .BYTE.b	%00001000
   1114  f3e7		       00		      .BYTE.b	%00000000
   1115  f3e8
   1116  f3e8		       00		      .BYTE.b	%00000000
   1117  f3e9		       0c		      .BYTE.b	%00001100
   1118  f3ea		       08		      .BYTE.b	%00001000
   1119  f3eb		       00		      .BYTE.b	%00000000
   1120  f3ec
   1121  f3ec		       30		      .BYTE.b	%00110000
   1122  f3ed		       30		      .BYTE.b	%00110000
   1123  f3ee		       10		      .BYTE.b	%00010000
   1124  f3ef		       00		      .BYTE.b	%00000000
   1125  f3f0
   1126  f3f0		       e0		      .BYTE.b	%11100000
   1127  f3f1		       c0		      .BYTE.b	%11000000
   1128  f3f2		       20		      .BYTE.b	%00100000
   1129  f3f3		       00		      .BYTE.b	%00000000
   1130  f3f4
   1131  f3f4		       20		      .BYTE.b	%00100000
   1132  f3f5		       38		      .BYTE.b	%00111000
   1133  f3f6		       20		      .BYTE.b	%00100000
   1134  f3f7		       00		      .BYTE.b	%00000000
   1135  f3f8
   1136  f3f8		       40		      .BYTE.b	%01000000
   1137  f3f9		       07		      .BYTE.b	%00000111
   1138  f3fa		       41		      .BYTE.b	%01000001
   1139  f3fb		       00		      .BYTE.b	%00000000
   1140  f3fc
   1141  f3fc		       40		      .BYTE.b	%01000000
   1142  f3fd		       00		      .BYTE.b	%00000000
   1143  f3fe		       8e		      .BYTE.b	%10001110
   1144  f3ff		       00		      .BYTE.b	%00000000
   1145  f400
   1146  f400		       80		      .BYTE.b	%10000000
   1147  f401		       00		      .BYTE.b	%00000000
   1148  f402		       f0		      .BYTE.b	%11110000
   1149  f403		       00		      .BYTE.b	%00000000
   1150  f404
   1151  f404				   PlayerSprite
   1152  f404
   1153  f404							; Up
   1154  f404		       99		      .BYTE.b	%10011001
   1155  f405		       bd		      .BYTE.b	%10111101
   1156  f406		       99		      .BYTE.b	%10011001
   1157  f407		       7e		      .BYTE.b	%01111110
   1158  f408		       3c		      .BYTE.b	%00111100
   1159  f409		       7e		      .BYTE.b	%01111110
   1160  f40a		       bd		      .BYTE.b	%10111101
   1161  f40b		       99		      .BYTE.b	%10011001
   1162  f40c
   1163  f40c							; Right
   1164  f40c		       c7		      .BYTE.b	%11000111
   1165  f40d		       28		      .BYTE.b	%00101000
   1166  f40e		       7a		      .BYTE.b	%01111010
   1167  f40f		       ff		      .BYTE.b	%11111111
   1168  f410		       ff		      .BYTE.b	%11111111
   1169  f411		       7a		      .BYTE.b	%01111010
   1170  f412		       28		      .BYTE.b	%00101000
   1171  f413		       c7		      .BYTE.b	%11000111
   1172  f414
   1173  f414							; Down
   1174  f414		       99		      .BYTE.b	%10011001
   1175  f415		       bd		      .BYTE.b	%10111101
   1176  f416		       7e		      .BYTE.b	%01111110
   1177  f417		       3c		      .BYTE.b	%00111100
   1178  f418		       7e		      .BYTE.b	%01111110
   1179  f419		       99		      .BYTE.b	%10011001
   1180  f41a		       bd		      .BYTE.b	%10111101
   1181  f41b		       99		      .BYTE.b	%10011001
   1182  f41c
   1183  f41c							; Left
   1184  f41c		       e3		      .BYTE.b	%11100011
   1185  f41d		       14		      .BYTE.b	%00010100
   1186  f41e		       5e		      .BYTE.b	%01011110
   1187  f41f		       ff		      .BYTE.b	%11111111
   1188  f420		       ff		      .BYTE.b	%11111111
   1189  f421		       5e		      .BYTE.b	%01011110
   1190  f422		       14		      .BYTE.b	%00010100
   1191  f423		       e3		      .BYTE.b	%11100011
   1192  f424
   1193  f424							;-------------------------------------------
   1194  f424
   1195  fffa					      ORG	$FFFA	; End of cart area
   1196  fffa
   1197  fffa				   InterruptVectors
   1198  fffa
   1199  fffa		       00 f0		      .word.w	Reset	; NMI
   1200  fffc		       00 f0		      .word.w	Reset	; RESET
   1201  fffe		       00 f0		      .word.w	Reset	; IRQ
   1202  10000
   1203  10000					       END
