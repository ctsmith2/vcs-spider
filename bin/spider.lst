------- FILE spider.asm LEVEL 1 PASS 2
      1  10000 ????						; 8 Legs of Love game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: August 28th, 2018
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE spider.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE spider.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????		00 08	    KERNEL_IMAGE_LINE =	8
     38  10000 ????		00 03	    KERNEL_IMAGE_DATA =	3
     39  10000 ????		00 18	    KERNEL_IMAGE_SIZE =	24
     40  10000 ????
     41  10000 ????						; Game States
     42  10000 ????		00 00	    STATE_LOGO =	#0
     43  10000 ????		00 01	    STATE_TITLE =	#1
     44  10000 ????		00 02	    STATE_GAME =	#2
     45  10000 ????
     46  10000 ????						;================
     47  10000 ????						; Variables
     48  10000 ????						;================
     49  10000 ????
     50 U0089 ????				      SEG.U	vars
     51 U0080					      org	$80
     52 U0080
     53 U0080		       00	   State      ds	1
     54 U0081		       00	   Frame      ds	1
     55 U0082		       00	   FrameTimer ds	1
     56 U0083		       00	   AudioStep  ds	1
     57 U0084		       00 00	   PlayerPosition ds	2
     58 U0086		       00 00	   ImagePtr   ds	2
     59 U0088		       00	   ImageVisible ds	1
     60 U0089
     61  10000 ????				       SEG
     62  10000 ????
     63  f000					      ORG	$F000	; Start of cart area
     64  f000
     65  f000							;=======================================
     66  f000							; Global Kernel Subroutines
     67  f000							;=======================================
     68  f000
     69  f000							;=======================================
     70  f000							; PosObject
     71  f000							; ---------
     72  f000							; A - holds the X position of the object
     73  f000							; X - holds which object to position
     74  f000							;   0 = player0
     75  f000							;   1 = player1
     76  f000							;   2 = missile0
     77  f000							;   3 = missile1
     78  f000							;   4 = Ball
     79  f000							;=======================================
     80  f000
     81  f000				   PosObject
     82  f000		       38		      sec
     83  f001		       85 02		      sta	WSYNC
     84  f003				   .posobject_divide_loop
     85  f003		       e9 0f		      sbc	#15
     86  f005		       b0 fc		      bcs	.posobject_divide_loop
     87  f007		       49 07		      eor	#7
     88  f009					      REPEAT	4
     89  f009		       0a		      asl
     88  f009					      REPEND
     89  f00a		       0a		      asl
     88  f00a					      REPEND
     89  f00b		       0a		      asl
     88  f00b					      REPEND
     89  f00c		       0a		      asl
     90  f00d					      REPEND
     91  f00d		       9d 20 00 	      sta.wx	HMP0,x
     92  f010		       95 10		      sta	RESP0,x
     93  f012		       60		      rts
     94  f013
     95  f013				   InitSystem
     96  f013
     97  f013				   .init_clean
     98  f013							; Resets RAM, TIA registers, and CPU registers
      0  f013					      CLEAN_START
      1  f013		       78		      sei
      2  f014		       d8		      cld
      3  f015
      4  f015		       a2 00		      ldx	#0
      5  f017		       8a		      txa
      6  f018		       a8		      tay
      7  f019		       ca	   .CLEAR_STACK dex
      8  f01a		       9a		      txs
      9  f01b		       48		      pha
     10  f01c		       d0 fb		      bne	.CLEAR_STACK
     11  f01e
    100  f01e
    101  f01e				   .init_tia
    102  f01e							; Define default TIA register values
    103  f01e
    104  f01e							; Set background color
    105  f01e		       a9 00		      lda	#$00	; Black
    106  f020		       85 09		      sta	COLUBK
    107  f022
    108  f022							; Set the playfield and player color
    109  f022		       a9 0e		      lda	#$0E	; White
    110  f024		       85 08		      sta	COLUPF
    111  f026		       85 06		      sta	COLUP0
    112  f028		       85 07		      sta	COLUP1
    113  f02a
    114  f02a							; Playfield Control
    115  f02a		       a9 01		      lda	#%00000001	; 1 for mirroring
    116  f02c		       85 0a		      sta	CTRLPF
    117  f02e
    118  f02e							; Disable Game Elements
    119  f02e		       a9 00		      lda	#$00
    120  f030		       85 1f		      sta	ENABL	; Turn off ball
    121  f032		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    122  f034		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    123  f036		       85 1b		      sta	GRP0	; Turn off player 1
    124  f038		       85 1c		      sta	GRP1	; Turn off player 2
    125  f03a
    126  f03a							; Empty playfield
    127  f03a		       a9 00		      lda	#%00000000
    128  f03c		       85 0d		      sta	PF0
    129  f03e		       85 0e		      sta	PF1
    130  f040		       85 0f		      sta	PF2
    131  f042
    132  f042				   .init_game
    133  f042							; Initial state
    134  f042		       a9 00		      lda	#STATE_LOGO
    135  f044		       85 80		      sta	State
    136  f046		       20 fb f0 	      jsr	LogoInit
    137  f049
    138  f049							;=======================================
    139  f049							; Game Kernel
    140  f049							;=======================================
    141  f049
    142  f049				   Main
    143  f049
    144  f049		       20 58 f0 	      jsr	VerticalSync
    145  f04c		       20 6f f0 	      jsr	VerticalBlank
    146  f04f		       20 9b f0 	      jsr	Kernel
    147  f052		       20 cb f0 	      jsr	OverScan
    148  f055		       4c 49 f0 	      jmp	Main
    149  f058
    150  f058				   VerticalSync
    151  f058
    152  f058		       a9 00		      lda	#0
    153  f05a		       85 01		      sta	VBLANK
    154  f05c
    155  f05c							; Turn on Vertical Sync signal and setup timer
    156  f05c		       a9 02		      lda	#2
    157  f05e		       85 00		      sta	VSYNC
    158  f060
    159  f060							; Increment frame count and reduce frame counter
    160  f060		       e6 81		      inc	Frame
    161  f062		       c6 82		      dec	FrameTimer
    162  f064
    163  f064							; VSYNCH signal scanlines
    164  f064					      REPEAT	#KERNEL_VSYNC
    165  f064		       85 02		      sta	WSYNC
    164  f064					      REPEND
    165  f066		       85 02		      sta	WSYNC
    164  f066					      REPEND
    165  f068		       85 02		      sta	WSYNC
    166  f06a					      REPEND
    167  f06a
    168  f06a							; Turn off Vertical Sync signal
    169  f06a		       a9 00		      lda	#0
    170  f06c		       85 00		      sta	VSYNC
    171  f06e
    172  f06e				   .vsync_return
    173  f06e		       60		      rts
    174  f06f
    175  f06f				   VerticalBlank
    176  f06f							; Setup Timer
    177  f06f		       a9 2c		      lda	#44	; #KERNEL_VBLANK*76/64
    178  f071		       8d 96 02 	      sta	TIM64T
    179  f074
    180  f074				   .vblank_logic
    181  f074							; Perform Game Logic
    182  f074		       a5 80		      lda	State
    183  f076		       c9 00		      cmp	#STATE_LOGO
    184  f078		       f0 0a		      beq	.vblank_logic_logo
    185  f07a		       c9 01		      cmp	#STATE_TITLE
    186  f07c		       f0 0c		      beq	.vblank_logic_title
    187  f07e		       c9 02		      cmp	#STATE_GAME
    188  f080		       f0 0e		      beq	.vblank_logic_game
    189  f082		       d0 0c		      bne	.vblank_logic_default
    190  f084
    191  f084				   .vblank_logic_logo
    192  f084		       20 36 f1 	      jsr	LogoVerticalBlank
    193  f087		       4c 93 f0 	      jmp	.vblank_loop
    194  f08a
    195  f08a				   .vblank_logic_title
    196  f08a		       20 15 f2 	      jsr	TitleVerticalBlank
    197  f08d		       4c 93 f0 	      jmp	.vblank_loop
    198  f090
    199  f090				   .vblank_logic_game
    200  f090				   .vblank_logic_default
    201  f090		       20 0d f3 	      jsr	GameVerticalBlank
    202  f093
    203  f093				   .vblank_loop
    204  f093							; WSYNC until Timer is complete
    205  f093		       85 02		      sta	WSYNC
    206  f095		       ad 84 02 	      lda	INTIM
    207  f098		       d0 f9		      bne	.vblank_loop
    208  f09a
    209  f09a				   .vblank_return
    210  f09a		       60		      rts
    211  f09b
    212  f09b				   Kernel
    213  f09b
    214  f09b							; Turn on display
    215  f09b		       a9 00		      lda	#0
    216  f09d		       85 01		      sta	VBLANK
    217  f09f
    218  f09f				   .kernel_image
    219  f09f		       a0 48		      ldy	#KERNEL_IMAGE_DATA*KERNEL_IMAGE_SIZE
    220  f0a1
    221  f0a1				   .kernel_image_line
    222  f0a1
    223  f0a1							; Write empty line if not visible
    224  f0a1		       c4 88		      cpy	ImageVisible
    225  f0a3		       90 11		      bcc	.kernel_image_line_blank
    226  f0a5
    227  f0a5							; Draw Image
    228  f0a5		       b1 86		      lda	(ImagePtr),y
    229  f0a7		       85 0d		      sta	PF0
    230  f0a9		       88		      dey
    231  f0aa		       b1 86		      lda	(ImagePtr),y
    232  f0ac		       85 0e		      sta	PF1
    233  f0ae		       88		      dey
    234  f0af		       b1 86		      lda	(ImagePtr),y
    235  f0b1		       85 0f		      sta	PF2
    236  f0b3
    237  f0b3		       4c c0 f0 	      jmp	.kernel_image_line_skip
    238  f0b6
    239  f0b6				   .kernel_image_line_blank
    240  f0b6
    241  f0b6							; Write blank playfield
    242  f0b6		       a9 00		      lda	#0
    243  f0b8		       85 0d		      sta	PF0
    244  f0ba		       85 0e		      sta	PF1
    245  f0bc		       85 0f		      sta	PF2
    246  f0be
    247  f0be		       88		      dey
    248  f0bf		       88		      dey
    249  f0c0
    250  f0c0				   .kernel_image_line_skip
    251  f0c0
    252  f0c0		       a2 08		      ldx	#KERNEL_IMAGE_LINE
    253  f0c2				   .kernel_image_loop
    254  f0c2		       85 02		      sta	WSYNC
    255  f0c4		       ca		      dex
    256  f0c5		       d0 fb		      bne	.kernel_image_loop
    257  f0c7
    258  f0c7		       88		      dey
    259  f0c8		       d0 d7		      bne	.kernel_image_line
    260  f0ca
    261  f0ca				   .kernel_return
    262  f0ca		       60		      rts
    263  f0cb
    264  f0cb				   OverScan
    265  f0cb
    266  f0cb							; End of screen, enter blanking
    267  f0cb		       a9 42		      lda	#%01000010
    268  f0cd		       85 01		      sta	VBLANK
    269  f0cf
    270  f0cf							; Setup Timer
    271  f0cf		       a9 24		      lda	#36	; #KERNEL_OVERSCAN*76/64
    272  f0d1		       8d 96 02 	      sta	TIM64T
    273  f0d4
    274  f0d4				   .overscan_logic
    275  f0d4		       a5 80		      lda	State
    276  f0d6		       c9 00		      cmp	#STATE_LOGO
    277  f0d8		       f0 0a		      beq	.overscan_logic_logo
    278  f0da		       c9 01		      cmp	#STATE_TITLE
    279  f0dc		       f0 0c		      beq	.overscan_logic_title
    280  f0de		       c9 02		      cmp	#STATE_GAME
    281  f0e0		       f0 0e		      beq	.overscan_logic_game
    282  f0e2		       d0 0c		      bne	.overscan_logic_default
    283  f0e4
    284  f0e4				   .overscan_logic_logo
    285  f0e4		       20 3a f1 	      jsr	LogoOverScan
    286  f0e7		       4c f3 f0 	      jmp	.overscan_loop
    287  f0ea
    288  f0ea				   .overscan_logic_title
    289  f0ea		       20 16 f2 	      jsr	TitleOverScan
    290  f0ed		       4c f3 f0 	      jmp	.overscan_loop
    291  f0f0
    292  f0f0				   .overscan_logic_game
    293  f0f0				   .overscan_logic_default
    294  f0f0		       20 14 f3 	      jsr	GameOverScan
    295  f0f3
    296  f0f3				   .overscan_loop
    297  f0f3							; WSYNC until Timer is complete
    298  f0f3		       85 02		      sta	WSYNC
    299  f0f5		       ad 84 02 	      lda	INTIM
    300  f0f8		       d0 f9		      bne	.overscan_loop
    301  f0fa
    302  f0fa				   .overscan_return
    303  f0fa		       60		      rts
    304  f0fb
    305  f0fb
    306  f0fb							;================
    307  f0fb							; State Code
    308  f0fb							;================
    309  f0fb
    310  f0fb							; Game state logic
------- FILE logo.asm LEVEL 2 PASS 2
      0  f0fb					      include	"logo.asm"
      1  f0fb							;================
      2  f0fb							; Constants
      3  f0fb							;================
      4  f0fb
      5  f0fb		       00 b4	   LOGO_FRAMES =	180
      6  f0fb
      7  f0fb		       00 a2	   LOGO_BG_COLOR =	#$A2
      8  f0fb		       00 5e	   LOGO_FG_COLOR =	#$5E
      9  f0fb
     10  f0fb		       00 04	   LOGO_AUDIO_0_TONE =	4
     11  f0fb		       00 0f	   LOGO_AUDIO_0_VOLUME =	15	; 15 is max
     12  f0fb		       00 01	   LOGO_AUDIO_1_TONE =	1
     13  f0fb		       00 03	   LOGO_AUDIO_1_VOLUME =	3
     14  f0fb		       00 0c	   LOGO_AUDIO_LENGTH =	12
     15  f0fb		       00 08	   LOGO_AUDIO_STEP =	8
     16  f0fb
     17  f0fb				   LogoInit
     18  f0fb
     19  f0fb							; Load Colors
     20  f0fb		       a9 a2		      lda	#LOGO_BG_COLOR
     21  f0fd		       85 09		      sta	COLUBK
     22  f0ff		       a9 5e		      lda	#LOGO_FG_COLOR
     23  f101		       85 08		      sta	COLUPF
     24  f103
     25  f103							; Load audio settings
     26  f103		       a9 04		      lda	#LOGO_AUDIO_0_TONE
     27  f105		       85 15		      sta	AUDC0
     28  f107		       a9 0f		      lda	#LOGO_AUDIO_0_VOLUME
     29  f109		       85 19		      sta	AUDV0
     30  f10b		       a9 01		      lda	#LOGO_AUDIO_1_TONE
     31  f10d		       85 16		      sta	AUDC1
     32  f10f		       a9 03		      lda	#LOGO_AUDIO_1_VOLUME
     33  f111		       85 1a		      sta	AUDV1
     34  f113		       a9 00		      lda	#0
     35  f115		       85 83		      sta	AudioStep
     36  f117
     37  f117							; Play first note
     38  f117		       ad d2 f1 	      lda	LogoAudio0,AudioStep
     39  f11a		       85 17		      sta	AUDF0
     40  f11c		       ad de f1 	      lda	LogoAudio1,AudioStep
     41  f11f		       85 18		      sta	AUDF1
     42  f121
     43  f121							; Setup frame counters
     44  f121		       a9 00		      lda	#0
     45  f123		       85 81		      sta	Frame
     46  f125		       a9 b4		      lda	#LOGO_FRAMES
     47  f127		       85 82		      sta	FrameTimer
     48  f129
     49  f129							; Setup Image Pointer
      0  f129					      SET_POINTER	ImagePtr, LogoImage
      1  f129				   .POINTER   SET	ImagePtr
      2  f129				   .ADDRESS   SET	LogoImage
      3  f129
      4  f129		       a9 8a		      LDA	#<.ADDRESS
      5  f12b		       85 86		      STA	.POINTER
      6  f12d		       a9 f1		      LDA	#>.ADDRESS
      7  f12f		       85 87		      STA	.POINTER+1
      8  f131
     51  f131
     52  f131							; Setup Image Animation
     53  f131		       a9 18		      lda	#KERNEL_IMAGE_SIZE
     54  f133		       85 88		      sta	ImageVisible
     55  f135
     56  f135		       60		      rts
     57  f136
     58  f136				   LogoVerticalBlank
     59  f136		       20 41 f1 	      jsr	LogoAnimation
     60  f139		       60		      rts
     61  f13a
     62  f13a				   LogoOverScan
     63  f13a		       20 51 f1 	      jsr	LogoAudio
     64  f13d		       20 7c f1 	      jsr	LogoState
     65  f140		       60		      rts
     66  f141
     67  f141				   LogoAnimation
     68  f141		       a5 81		      lda	Frame
     69  f143		       29 03		      and	#%00000011	; Every 4 when bits are 00
     70  f145		       d0 09		      bne	.logo_animation_return
     71  f147
     72  f147		       a6 88		      ldx	ImageVisible
     73  f149		       e0 00		      cpx	#0
     74  f14b		       f0 03		      beq	.logo_animation_return
     75  f14d
     76  f14d							; Add another visible line
     77  f14d		       ca		      dex
     78  f14e		       86 88		      stx	ImageVisible
     79  f150
     80  f150				   .logo_animation_return
     81  f150		       60		      rts
     82  f151
     83  f151				   LogoAudio
     84  f151
     85  f151		       a5 81		      lda	Frame
     86  f153		       29 07		      and	#%00000111	; Every 8 when bits are 000
     87  f155		       d0 24		      bne	.logo_audio_return
     88  f157
     89  f157				   .logo_audio_play
     90  f157
     91  f157							; Check if we're at the end of the melody
     92  f157		       a4 83		      ldy	AudioStep
     93  f159		       c0 0b		      cpy	#LOGO_AUDIO_LENGTH-1
     94  f15b		       f0 10		      beq	.logo_audio_mute
     95  f15d
     96  f15d				   .logo_audio_play_note
     97  f15d							; Increment audio position
     98  f15d		       c8		      iny
     99  f15e		       84 83		      sty	AudioStep
    100  f160
    101  f160							; Logo note and play
    102  f160		       b9 d2 f1 	      lda	LogoAudio0,y
    103  f163		       85 17		      sta	AUDF0
    104  f165		       b9 de f1 	      lda	LogoAudio1,y
    105  f168		       85 18		      sta	AUDF1
    106  f16a		       4c 7b f1 	      jmp	.logo_audio_mute_skip
    107  f16d
    108  f16d				   .logo_audio_mute
    109  f16d
    110  f16d							; Mute audio
    111  f16d		       a9 00		      lda	#0
    112  f16f		       85 15		      sta	AUDC0
    113  f171		       85 19		      sta	AUDV0
    114  f173		       85 17		      sta	AUDF0
    115  f175		       85 16		      sta	AUDC1
    116  f177		       85 1a		      sta	AUDV1
    117  f179		       85 18		      sta	AUDF1
    118  f17b
    119  f17b				   .logo_audio_mute_skip
    120  f17b				   .logo_audio_return
    121  f17b		       60		      rts
    122  f17c
    123  f17c				   LogoState
    124  f17c		       a5 82		      lda	FrameTimer
    125  f17e		       c9 00		      cmp	#0
    126  f180		       d0 07		      bne	.logo_state_return
    127  f182
    128  f182		       a9 01		      lda	#STATE_TITLE
    129  f184		       85 80		      sta	State
    130  f186		       20 ea f1 	      jsr	TitleInit
    131  f189
    132  f189				   .logo_state_return
    133  f189		       60		      rts
    134  f18a
    135  f18a							; Assets
    136  f18a
    137  f18a				   LogoImage		; 6 bytes over 8 lines each, total of 48 lines
    138  f18a
    139  f18a		       00		      .BYTE.b	%00000000	; First 4 bits reversed
    140  f18b		       00		      .BYTE.b	%00000000	; Normal
    141  f18c		       00		      .BYTE.b	%00000000	; Reversed
    142  f18d
    143  f18d		       00		      .BYTE.b	%00000000
    144  f18e		       00		      .BYTE.b	%00000000
    145  f18f		       00		      .BYTE.b	%00000000
    146  f190
    147  f190		       00		      .BYTE.b	%00000000
    148  f191		       00		      .BYTE.b	%00000000
    149  f192		       00		      .BYTE.b	%00000000
    150  f193
    151  f193		       00		      .BYTE.b	%00000000
    152  f194		       00		      .BYTE.b	%00000000
    153  f195		       00		      .BYTE.b	%00000000
    154  f196
    155  f196		       00		      .BYTE.b	%00000000
    156  f197		       00		      .BYTE.b	%00000000
    157  f198		       00		      .BYTE.b	%00000000
    158  f199
    159  f199		       00		      .BYTE.b	%00000000
    160  f19a		       00		      .BYTE.b	%00000000
    161  f19b		       00		      .BYTE.b	%00000000
    162  f19c
    163  f19c		       00		      .BYTE.b	%00000000
    164  f19d		       00		      .BYTE.b	%00000000
    165  f19e		       00		      .BYTE.b	%00000000
    166  f19f
    167  f19f		       00		      .BYTE.b	%00000000
    168  f1a0		       00		      .BYTE.b	%00000000
    169  f1a1		       00		      .BYTE.b	%00000000
    170  f1a2
    171  f1a2		       00		      .BYTE.b	%00000000
    172  f1a3		       00		      .BYTE.b	%00000000
    173  f1a4		       00		      .BYTE.b	%00000000
    174  f1a5
    175  f1a5		       00		      .BYTE.b	%00000000
    176  f1a6		       00		      .BYTE.b	%00000000
    177  f1a7		       00		      .BYTE.b	%00000000
    178  f1a8
    179  f1a8		       00		      .BYTE.b	%00000000
    180  f1a9		       00		      .BYTE.b	%00000000
    181  f1aa		       00		      .BYTE.b	%00000000
    182  f1ab
    183  f1ab		       00		      .BYTE.b	%00000000
    184  f1ac		       18		      .BYTE.b	%00011000
    185  f1ad		       00		      .BYTE.b	%00000000
    186  f1ae
    187  f1ae		       00		      .BYTE.b	%00000000
    188  f1af		       0c		      .BYTE.b	%00001100
    189  f1b0		       00		      .BYTE.b	%00000000
    190  f1b1
    191  f1b1		       00		      .BYTE.b	%00000000
    192  f1b2		       00		      .BYTE.b	%00000000
    193  f1b3		       00		      .BYTE.b	%00000000
    194  f1b4
    195  f1b4		       00		      .BYTE.b	%00000000
    196  f1b5		       00		      .BYTE.b	%00000000
    197  f1b6		       00		      .BYTE.b	%00000000
    198  f1b7
    199  f1b7		       00		      .BYTE.b	%00000000
    200  f1b8		       00		      .BYTE.b	%00000000
    201  f1b9		       00		      .BYTE.b	%00000000
    202  f1ba
    203  f1ba		       00		      .BYTE.b	%00000000
    204  f1bb		       00		      .BYTE.b	%00000000
    205  f1bc		       00		      .BYTE.b	%00000000
    206  f1bd
    207  f1bd		       00		      .BYTE.b	%00000000
    208  f1be		       00		      .BYTE.b	%00000000
    209  f1bf		       00		      .BYTE.b	%00000000
    210  f1c0
    211  f1c0		       00		      .BYTE.b	%00000000
    212  f1c1		       00		      .BYTE.b	%00000000
    213  f1c2		       00		      .BYTE.b	%00000000
    214  f1c3
    215  f1c3		       00		      .BYTE.b	%00000000
    216  f1c4		       00		      .BYTE.b	%00000000
    217  f1c5		       00		      .BYTE.b	%00000000
    218  f1c6
    219  f1c6		       00		      .BYTE.b	%00000000
    220  f1c7		       00		      .BYTE.b	%00000000
    221  f1c8		       00		      .BYTE.b	%00000000
    222  f1c9
    223  f1c9		       00		      .BYTE.b	%00000000
    224  f1ca		       00		      .BYTE.b	%00000000
    225  f1cb		       00		      .BYTE.b	%00000000
    226  f1cc
    227  f1cc		       00		      .BYTE.b	%00000000
    228  f1cd		       00		      .BYTE.b	%00000000
    229  f1ce		       00		      .BYTE.b	%00000000
    230  f1cf
    231  f1cf		       00		      .BYTE.b	%00000000
    232  f1d0		       00		      .BYTE.b	%00000000
    233  f1d1		       00		      .BYTE.b	%00000000
    234  f1d2
    235  f1d2				   LogoAudio0
    236  f1d2
    237  f1d2		       1d		      .BYTE.b	#29	; C
    238  f1d3		       17		      .BYTE.b	#23	; E
    239  f1d4		       13		      .BYTE.b	#19	; G
    240  f1d5		       0f		      .BYTE.b	#15	; A
    241  f1d6		       17		      .BYTE.b	#23	; E
    242  f1d7		       13		      .BYTE.b	#19	; G
    243  f1d8		       0f		      .BYTE.b	#15	; B
    244  f1d9		       0e		      .BYTE.b	#14	; C
    245  f1da		       0b		      .BYTE.b	#11	; E
    246  f1db		       0b		      .BYTE.b	#11
    247  f1dc		       0b		      .BYTE.b	#11
    248  f1dd		       0b		      .BYTE.b	#11
    249  f1de
    250  f1de				   LogoAudio1
    251  f1de
    252  f1de		       1f		      .BYTE.b	#31	; C
    253  f1df		       1f		      .BYTE.b	#31
    254  f1e0		       1f		      .BYTE.b	#31
    255  f1e1		       1f		      .BYTE.b	#31
    256  f1e2		       19		      .BYTE.b	#25	; E
    257  f1e3		       19		      .BYTE.b	#25
    258  f1e4		       19		      .BYTE.b	#25
    259  f1e5		       19		      .BYTE.b	#25
    260  f1e6		       14		      .BYTE.b	#20	; G
    261  f1e7		       14		      .BYTE.b	#20
    262  f1e8		       14		      .BYTE.b	#20
    263  f1e9		       14		      .BYTE.b	#20
------- FILE spider.asm
------- FILE title.asm LEVEL 2 PASS 2
      0  f1ea					      include	"title.asm"
      1  f1ea							;================
      2  f1ea							; Constants
      3  f1ea							;================
      4  f1ea
      5  f1ea		       00 08	   TITLE_LINE_SIZE =	8
      6  f1ea		       00 04	   TITLE_DATA_SIZE =	%00000100
      7  f1ea		       00 01	   TITLE_BORDER =	1
      8  f1ea		       00 04	   TITLE_PAD  =	4
      9  f1ea		       00 06	   TITLE_IMAGE =	6
     10  f1ea		       00 02	   TITLE_GAP  =	2
     11  f1ea
     12  f1ea		       00 70	   TITLE_BG_COLOR =	#$70
     13  f1ea		       00 7e	   TITLE_BD_COLOR =	#$7E
     14  f1ea		       00 0e	   TITLE_FG_COLOR =	#$0E
     15  f1ea
     16  f1ea		       00 04	   TITLE_AUDIO_0_TONE =	4
     17  f1ea		       00 04	   TITLE_AUDIO_0_VOLUME =	4
     18  f1ea		       00 07	   TITLE_AUDIO_1_VOLUME =	7
     19  f1ea		       00 10	   TITLE_AUDIO_LENGTH =	16
     20  f1ea		       00 09	   TITLE_AUDIO_STEP =	9
     21  f1ea
     22  f1ea				   TitleInit
     23  f1ea
     24  f1ea							; Load Colors
     25  f1ea		       a9 70		      lda	#TITLE_BG_COLOR
     26  f1ec		       85 09		      sta	COLUBK
     27  f1ee		       a9 0e		      lda	#TITLE_FG_COLOR
     28  f1f0		       85 08		      sta	COLUPF
     29  f1f2
     30  f1f2							; Load audio settings
     31  f1f2
     32  f1f2							; Melody Line
     33  f1f2		       a9 04		      lda	#TITLE_AUDIO_0_TONE
     34  f1f4		       85 15		      sta	AUDC0
     35  f1f6		       a9 04		      lda	#TITLE_AUDIO_0_VOLUME
     36  f1f8		       85 19		      sta	AUDV0
     37  f1fa
     38  f1fa							; Drums and Bass
     39  f1fa		       a9 00		      lda	#0
     40  f1fc		       85 16		      sta	AUDC1
     41  f1fe		       85 1a		      sta	AUDV1
     42  f200
     43  f200							; Make it so that we play the first note immediately
     44  f200		       a9 0f		      lda	#TITLE_AUDIO_LENGTH-1
     45  f202		       85 83		      sta	AudioStep
     46  f204		       a9 01		      lda	#1
     47  f206		       85 82		      sta	FrameTimer
     48  f208
     49  f208							; Setup Image Pointer
      0  f208					      SET_POINTER	ImagePtr, TitleImage
      1  f208				   .POINTER   SET	ImagePtr
      2  f208				   .ADDRESS   SET	TitleImage
      3  f208
      4  f208		       a9 61		      LDA	#<.ADDRESS
      5  f20a		       85 86		      STA	.POINTER
      6  f20c		       a9 f2		      LDA	#>.ADDRESS
      7  f20e		       85 87		      STA	.POINTER+1
      8  f210
     51  f210
     52  f210		       a9 00		      lda	#0
     53  f212		       85 88		      sta	ImageVisible
     54  f214
     55  f214		       60		      rts
     56  f215
     57  f215				   TitleVerticalBlank
     58  f215		       60		      rts
     59  f216
     60  f216				   TitleOverScan
     61  f216		       20 1d f2 	      jsr	TitleAudio
     62  f219		       20 55 f2 	      jsr	TitleState
     63  f21c		       60		      rts
     64  f21d
     65  f21d				   TitleAudio
     66  f21d
     67  f21d		       a6 82		      ldx	FrameTimer
     68  f21f		       e0 00		      cpx	#0
     69  f221		       d0 31		      bne	.title_audio_return
     70  f223
     71  f223							; Reset Timer
     72  f223		       a2 09		      ldx	#TITLE_AUDIO_STEP
     73  f225		       86 82		      stx	FrameTimer
     74  f227
     75  f227				   .title_audio_play
     76  f227
     77  f227							; Increment melody position
     78  f227		       a4 83		      ldy	AudioStep
     79  f229		       c8		      iny
     80  f22a
     81  f22a							; Check if we're at the end of the melody
     82  f22a		       c0 10		      cpy	#TITLE_AUDIO_LENGTH
     83  f22c		       d0 02		      bne	.title_audio_play_note
     84  f22e
     85  f22e							; Loop our audio step
     86  f22e		       a0 00		      ldy	#0
     87  f230
     88  f230				   .title_audio_play_note
     89  f230
     90  f230							; Save current position
     91  f230		       84 83		      sty	AudioStep
     92  f232
     93  f232							; Basic Melody Line
     94  f232		       b9 a9 f2 	      lda	TitleAudio0,y
     95  f235		       85 17		      sta	AUDF0
     96  f237
     97  f237							; Drums and Bass
     98  f237		       b9 b9 f2 	      lda	TitleTone1,y
     99  f23a		       c9 ff		      cmp	#$FF
    100  f23c		       f0 0e		      beq	.title_audio_play_note_1_mute
    101  f23e
    102  f23e		       85 16		      sta	AUDC1
    103  f240		       b9 c9 f2 	      lda	TitleAudio1,y
    104  f243		       85 18		      sta	AUDF1
    105  f245		       a9 07		      lda	#TITLE_AUDIO_1_VOLUME
    106  f247		       85 1a		      sta	AUDV1
    107  f249
    108  f249		       4c 54 f2 	      jmp	.title_audio_return
    109  f24c
    110  f24c				   .title_audio_play_note_1_mute
    111  f24c
    112  f24c		       a9 00		      lda	#0
    113  f24e		       85 18		      sta	AUDF1
    114  f250		       85 16		      sta	AUDC1
    115  f252		       85 1a		      sta	AUDV1
    116  f254
    117  f254				   .title_audio_return
    118  f254		       60		      rts
    119  f255
    120  f255				   TitleState
    121  f255							; Check if Fire Button on controller 1 is pressed
    122  f255		       a5 0c		      lda	INPT4
    123  f257		       30 07		      bmi	.title_state_return
    124  f259
    125  f259		       a9 02		      lda	#STATE_GAME
    126  f25b		       85 80		      sta	State
    127  f25d		       20 d9 f2 	      jsr	GameInit
    128  f260
    129  f260				   .title_state_return
    130  f260		       60		      rts
    131  f261
    132  f261							; Assets
    133  f261
    134  f261				   TitleImage
    135  f261
    136  f261		       00		      .BYTE.b	%00000000	; First 4 bits reversed
    137  f262		       00		      .BYTE.b	%00000000	; Normal
    138  f263		       00		      .BYTE.b	%00000000	; Reversed
    139  f264
    140  f264		       00		      .BYTE.b	%00000000
    141  f265		       00		      .BYTE.b	%00000000
    142  f266		       00		      .BYTE.b	%00000000
    143  f267
    144  f267		       00		      .BYTE.b	%00000000
    145  f268		       00		      .BYTE.b	%00000000
    146  f269		       00		      .BYTE.b	%00000000
    147  f26a
    148  f26a		       00		      .BYTE.b	%00000000
    149  f26b		       00		      .BYTE.b	%00000000
    150  f26c		       00		      .BYTE.b	%00000000
    151  f26d
    152  f26d		       00		      .BYTE.b	%00000000
    153  f26e		       00		      .BYTE.b	%00000000
    154  f26f		       00		      .BYTE.b	%00000000
    155  f270
    156  f270		       00		      .BYTE.b	%00000000
    157  f271		       00		      .BYTE.b	%00000000
    158  f272		       00		      .BYTE.b	%00000000
    159  f273
    160  f273		       00		      .BYTE.b	%00000000
    161  f274		       00		      .BYTE.b	%00000000
    162  f275		       00		      .BYTE.b	%00000000
    163  f276
    164  f276		       00		      .BYTE.b	%00000000
    165  f277		       00		      .BYTE.b	%00000000
    166  f278		       00		      .BYTE.b	%00000000
    167  f279
    168  f279		       00		      .BYTE.b	%00000000
    169  f27a		       00		      .BYTE.b	%00000000
    170  f27b		       00		      .BYTE.b	%00000000
    171  f27c
    172  f27c		       00		      .BYTE.b	%00000000
    173  f27d		       00		      .BYTE.b	%00000000
    174  f27e		       00		      .BYTE.b	%00000000
    175  f27f
    176  f27f		       00		      .BYTE.b	%00000000
    177  f280		       00		      .BYTE.b	%00000000
    178  f281		       00		      .BYTE.b	%00000000
    179  f282
    180  f282		       00		      .BYTE.b	%00000000
    181  f283		       00		      .BYTE.b	%00000000
    182  f284		       00		      .BYTE.b	%00000000
    183  f285
    184  f285		       00		      .BYTE.b	%00000000
    185  f286		       00		      .BYTE.b	%00000000
    186  f287		       00		      .BYTE.b	%00000000
    187  f288
    188  f288		       00		      .BYTE.b	%00000000
    189  f289		       00		      .BYTE.b	%00000000
    190  f28a		       00		      .BYTE.b	%00000000
    191  f28b
    192  f28b		       00		      .BYTE.b	%00000000
    193  f28c		       00		      .BYTE.b	%00000000
    194  f28d		       00		      .BYTE.b	%00000000
    195  f28e
    196  f28e		       00		      .BYTE.b	%00000000
    197  f28f		       00		      .BYTE.b	%00000000
    198  f290		       00		      .BYTE.b	%00000000
    199  f291
    200  f291		       00		      .BYTE.b	%00000000
    201  f292		       00		      .BYTE.b	%00000000
    202  f293		       00		      .BYTE.b	%00000000
    203  f294
    204  f294		       00		      .BYTE.b	%00000000
    205  f295		       00		      .BYTE.b	%00000000
    206  f296		       00		      .BYTE.b	%00000000
    207  f297
    208  f297		       00		      .BYTE.b	%00000000
    209  f298		       00		      .BYTE.b	%00000000
    210  f299		       00		      .BYTE.b	%00000000
    211  f29a
    212  f29a		       00		      .BYTE.b	%00000000
    213  f29b		       00		      .BYTE.b	%00000000
    214  f29c		       00		      .BYTE.b	%00000000
    215  f29d
    216  f29d		       00		      .BYTE.b	%00000000
    217  f29e		       00		      .BYTE.b	%00000000
    218  f29f		       00		      .BYTE.b	%00000000
    219  f2a0
    220  f2a0		       00		      .BYTE.b	%00000000
    221  f2a1		       00		      .BYTE.b	%00000000
    222  f2a2		       00		      .BYTE.b	%00000000
    223  f2a3
    224  f2a3		       00		      .BYTE.b	%00000000
    225  f2a4		       00		      .BYTE.b	%00000000
    226  f2a5		       00		      .BYTE.b	%00000000
    227  f2a6
    228  f2a6		       00		      .BYTE.b	%00000000
    229  f2a7		       00		      .BYTE.b	%00000000
    230  f2a8		       00		      .BYTE.b	%00000000
    231  f2a9
    232  f2a9				   TitleAudio0
    233  f2a9
    234  f2a9		       0f		      .BYTE.b	#15	; B
    235  f2aa		       13		      .BYTE.b	#19	; G
    236  f2ab		       17		      .BYTE.b	#23	; E
    237  f2ac		       13		      .BYTE.b	#19	; G
    238  f2ad		       0e		      .BYTE.b	#14	; C
    239  f2ae		       13		      .BYTE.b	#19
    240  f2af		       17		      .BYTE.b	#23
    241  f2b0		       13		      .BYTE.b	#19
    242  f2b1		       0c		      .BYTE.b	#12	; D
    243  f2b2		       13		      .BYTE.b	#19
    244  f2b3		       17		      .BYTE.b	#23
    245  f2b4		       13		      .BYTE.b	#19
    246  f2b5		       0e		      .BYTE.b	#14	; C
    247  f2b6		       13		      .BYTE.b	#19
    248  f2b7		       17		      .BYTE.b	#23
    249  f2b8		       13		      .BYTE.b	#19
    250  f2b9
    251  f2b9				   TitleTone1
    252  f2b9
    253  f2b9		       0f		      .BYTE.b	#15	; Electronic Rumble
    254  f2ba		       ff		      .BYTE.b	#$FF
    255  f2bb		       01		      .BYTE.b	#1	; Low Pure Tone
    256  f2bc		       01		      .BYTE.b	#1
    257  f2bd		       08		      .BYTE.b	#8	; White Noise
    258  f2be		       01		      .BYTE.b	#1
    259  f2bf		       01		      .BYTE.b	#1
    260  f2c0		       ff		      .BYTE.b	#$FF
    261  f2c1		       ff		      .BYTE.b	#$FF
    262  f2c2		       0f		      .BYTE.b	#15
    263  f2c3		       ff		      .BYTE.b	#$FF
    264  f2c4		       ff		      .BYTE.b	#$FF
    265  f2c5		       08		      .BYTE.b	#8
    266  f2c6		       ff		      .BYTE.b	#$FF
    267  f2c7		       01		      .BYTE.b	#1
    268  f2c8		       01		      .BYTE.b	#1
    269  f2c9
    270  f2c9				   TitleAudio1
    271  f2c9
    272  f2c9		       1d		      .BYTE.b	#29	; Kick
    273  f2ca		       ff		      .BYTE.b	#$FF
    274  f2cb		       1f		      .BYTE.b	#31	; C
    275  f2cc		       1f		      .BYTE.b	#31
    276  f2cd		       07		      .BYTE.b	#7	; Snare
    277  f2ce		       1f		      .BYTE.b	#31
    278  f2cf		       1f		      .BYTE.b	#31
    279  f2d0		       ff		      .BYTE.b	#$FF
    280  f2d1		       ff		      .BYTE.b	#$FF
    281  f2d2		       1d		      .BYTE.b	#29
    282  f2d3		       ff		      .BYTE.b	#$FF
    283  f2d4		       ff		      .BYTE.b	#$FF
    284  f2d5		       07		      .BYTE.b	#7
    285  f2d6		       ff		      .BYTE.b	#$FF
    286  f2d7		       17		      .BYTE.b	#23	; F
    287  f2d8		       18		      .BYTE.b	#24	; E
------- FILE spider.asm
------- FILE game.asm LEVEL 2 PASS 2
      0  f2d9					      include	"game.asm"
      1  f2d9							;================
      2  f2d9							; Constants
      3  f2d9							;================
      4  f2d9
      5  f2d9		       00 00	   GAME_BG_COLOR =	#$00
      6  f2d9		       00 0c	   GAME_FG_COLOR =	#$0C
      7  f2d9
      8  f2d9		       00 56	   GAME_P0_COLOR =	#$56
      9  f2d9		       00 08	   GAME_P0_SIZE =	8
     10  f2d9
     11  f2d9				   GameInit
     12  f2d9
     13  f2d9							; Load Colors
     14  f2d9		       a9 00		      lda	#GAME_BG_COLOR
     15  f2db		       85 09		      sta	COLUBK
     16  f2dd		       a9 0c		      lda	#GAME_FG_COLOR
     17  f2df		       85 08		      sta	COLUPF
     18  f2e1		       a9 56		      lda	#GAME_P0_COLOR
     19  f2e3		       85 06		      sta	COLUP0
     20  f2e5
     21  f2e5							; Mute Audio
     22  f2e5		       a9 00		      lda	#0
     23  f2e7		       85 15		      sta	AUDC0
     24  f2e9		       85 19		      sta	AUDV0
     25  f2eb		       85 17		      sta	AUDF0
     26  f2ed		       85 16		      sta	AUDC1
     27  f2ef		       85 1a		      sta	AUDV1
     28  f2f1		       85 18		      sta	AUDF1
     29  f2f3
     30  f2f3							; Initial Player Control
     31  f2f3		       a9 32		      lda	#50
     32  f2f5		       85 84		      sta	PlayerPosition
     33  f2f7		       85 85		      sta	PlayerPosition+1
     34  f2f9
     35  f2f9		       a0 00		      ldy	#0
     36  f2fb		       b9 84 f3 	      lda	PlayerSprite,y
     37  f2fe		       85 1b		      sta	GRP0
     38  f300
     39  f300							; Setup Image
      0  f300					      SET_POINTER	ImagePtr, GameImage
      1  f300				   .POINTER   SET	ImagePtr
      2  f300				   .ADDRESS   SET	GameImage
      3  f300
      4  f300		       a9 3c		      LDA	#<.ADDRESS
      5  f302		       85 86		      STA	.POINTER
      6  f304		       a9 f3		      LDA	#>.ADDRESS
      7  f306		       85 87		      STA	.POINTER+1
      8  f308
     41  f308		       a9 00		      lda	#0
     42  f30a		       85 88		      sta	ImageVisible
     43  f30c
     44  f30c		       60		      rts
     45  f30d
     46  f30d				   GameVerticalBlank
     47  f30d		       20 15 f3 	      jsr	GameControl
     48  f310		       20 30 f3 	      jsr	GameObjects
     49  f313		       60		      rts
     50  f314
     51  f314				   GameOverScan
     52  f314		       60		      rts
     53  f315
     54  f315				   GameControl
     55  f315		       a6 84		      ldx	PlayerPosition
     56  f317		       a4 85		      ldy	PlayerPosition+1
     57  f319		       ad 80 02 	      lda	SWCHA
     58  f31c
     59  f31c				   .game_control_check_right
     60  f31c		       30 01		      bmi	.game_control_check_left
     61  f31e		       e8		      inx
     62  f31f
     63  f31f				   .game_control_check_left
     64  f31f		       2a		      rol
     65  f320		       30 01		      bmi	.game_control_check_down
     66  f322		       ca		      dex
     67  f323
     68  f323				   .game_control_check_down
     69  f323		       2a		      rol
     70  f324		       30 01		      bmi	.game_control_check_up
     71  f326		       c8		      iny
     72  f327
     73  f327				   .game_control_check_up
     74  f327		       2a		      rol
     75  f328		       30 01		      bmi	.game_control_return
     76  f32a		       88		      dey
     77  f32b
     78  f32b				   .game_control_return
     79  f32b
     80  f32b							; Store new position
     81  f32b		       86 84		      stx	PlayerPosition
     82  f32d		       84 85		      sty	PlayerPosition+1
     83  f32f
     84  f32f		       60		      rts
     85  f330
     86  f330				   GameObjects
     87  f330
     88  f330				   .game_objects_player
     89  f330
     90  f330		       a2 00		      ldx	#0	; Object (player0)
     91  f332		       a5 84		      lda	PlayerPosition	; X Position
     92  f334		       20 00 f0 	      jsr	PosObject
     93  f337
     94  f337							; Set final x position
     95  f337		       85 02		      sta	WSYNC
     96  f339		       85 2a		      sta	HMOVE
     97  f33b
     98  f33b		       60		      rts
     99  f33c
    100  f33c				   GameImage		; Web
    101  f33c
    102  f33c		       03		      .BYTE.b	%00000011	; Reversed
    103  f33d		       00		      .BYTE.b	%00000000	; Normal
    104  f33e		       00		      .BYTE.b	%00000000	; First 4 bits reversed
    105  f33f
    106  f33f		       3f		      .BYTE.b	%00111111
    107  f340		       00		      .BYTE.b	%00000000
    108  f341		       00		      .BYTE.b	%00000000
    109  f342
    110  f342		       c2		      .BYTE.b	%11000010
    111  f343		       01		      .BYTE.b	%00000001
    112  f344		       00		      .BYTE.b	%00000000
    113  f345
    114  f345		       04		      .BYTE.b	%00000100
    115  f346		       01		      .BYTE.b	%00000001
    116  f347		       00		      .BYTE.b	%00000000
    117  f348
    118  f348		       00		      .BYTE.b	%00000000
    119  f349		       02		      .BYTE.b	%00000010
    120  f34a		       08		      .BYTE.b	%00001000
    121  f34b
    122  f34b		       00		      .BYTE.b	%00000000
    123  f34c		       0c		      .BYTE.b	%00001100
    124  f34d		       08		      .BYTE.b	%00001000
    125  f34e
    126  f34e		       30		      .BYTE.b	%00110000
    127  f34f		       30		      .BYTE.b	%00110000
    128  f350		       10		      .BYTE.b	%00010000
    129  f351
    130  f351		       e0		      .BYTE.b	%11100000
    131  f352		       c0		      .BYTE.b	%11000000
    132  f353		       20		      .BYTE.b	%00100000
    133  f354
    134  f354		       20		      .BYTE.b	%00100000
    135  f355		       38		      .BYTE.b	%00111000
    136  f356		       20		      .BYTE.b	%00100000
    137  f357
    138  f357		       40		      .BYTE.b	%01000000
    139  f358		       07		      .BYTE.b	%00000111
    140  f359		       41		      .BYTE.b	%01000001
    141  f35a
    142  f35a		       40		      .BYTE.b	%01000000
    143  f35b		       00		      .BYTE.b	%00000000
    144  f35c		       8e		      .BYTE.b	%10001110
    145  f35d
    146  f35d		       80		      .BYTE.b	%10000000
    147  f35e		       00		      .BYTE.b	%00000000
    148  f35f		       f0		      .BYTE.b	%11110000
    149  f360
    150  f360		       00		      .BYTE.b	%00000000
    151  f361		       00		      .BYTE.b	%00000000
    152  f362		       03		      .BYTE.b	%00000011
    153  f363
    154  f363		       00		      .BYTE.b	%00000000
    155  f364		       00		      .BYTE.b	%00000000
    156  f365		       3f		      .BYTE.b	%00111111
    157  f366
    158  f366		       00		      .BYTE.b	%00000000
    159  f367		       01		      .BYTE.b	%00000001
    160  f368		       c2		      .BYTE.b	%11000010
    161  f369
    162  f369		       00		      .BYTE.b	%00000000
    163  f36a		       01		      .BYTE.b	%00000001
    164  f36b		       04		      .BYTE.b	%00000100
    165  f36c
    166  f36c		       00		      .BYTE.b	%00000000
    167  f36d		       02		      .BYTE.b	%00000010
    168  f36e		       08		      .BYTE.b	%00001000
    169  f36f
    170  f36f		       00		      .BYTE.b	%00000000
    171  f370		       0c		      .BYTE.b	%00001100
    172  f371		       08		      .BYTE.b	%00001000
    173  f372
    174  f372		       30		      .BYTE.b	%00110000
    175  f373		       30		      .BYTE.b	%00110000
    176  f374		       10		      .BYTE.b	%00010000
    177  f375
    178  f375		       e0		      .BYTE.b	%11100000
    179  f376		       c0		      .BYTE.b	%11000000
    180  f377		       20		      .BYTE.b	%00100000
    181  f378
    182  f378		       20		      .BYTE.b	%00100000
    183  f379		       38		      .BYTE.b	%00111000
    184  f37a		       20		      .BYTE.b	%00100000
    185  f37b
    186  f37b		       40		      .BYTE.b	%01000000
    187  f37c		       07		      .BYTE.b	%00000111
    188  f37d		       41		      .BYTE.b	%01000001
    189  f37e
    190  f37e		       40		      .BYTE.b	%01000000
    191  f37f		       00		      .BYTE.b	%00000000
    192  f380		       8e		      .BYTE.b	%10001110
    193  f381
    194  f381		       80		      .BYTE.b	%10000000
    195  f382		       00		      .BYTE.b	%00000000
    196  f383		       f0		      .BYTE.b	%11110000
    197  f384
    198  f384				   PlayerSprite 		; Sprites are reversed in y direction
    199  f384
    200  f384							; Up
    201  f384		       99		      .BYTE.b	%10011001
    202  f385		       bd		      .BYTE.b	%10111101
    203  f386		       7e		      .BYTE.b	%01111110
    204  f387		       3c		      .BYTE.b	%00111100
    205  f388		       7e		      .BYTE.b	%01111110
    206  f389		       99		      .BYTE.b	%10011001
    207  f38a		       bd		      .BYTE.b	%10111101
    208  f38b		       99		      .BYTE.b	%10011001
    209  f38c
    210  f38c							; Right
    211  f38c		       c7		      .BYTE.b	%11000111
    212  f38d		       28		      .BYTE.b	%00101000
    213  f38e		       7a		      .BYTE.b	%01111010
    214  f38f		       ff		      .BYTE.b	%11111111
    215  f390		       ff		      .BYTE.b	%11111111
    216  f391		       7a		      .BYTE.b	%01111010
    217  f392		       28		      .BYTE.b	%00101000
    218  f393		       c7		      .BYTE.b	%11000111
    219  f394
    220  f394							; Down
    221  f394		       99		      .BYTE.b	%10011001
    222  f395		       bd		      .BYTE.b	%10111101
    223  f396		       7e		      .BYTE.b	%01111110
    224  f397		       3c		      .BYTE.b	%00111100
    225  f398		       7e		      .BYTE.b	%01111110
    226  f399		       99		      .BYTE.b	%10011001
    227  f39a		       bd		      .BYTE.b	%10111101
    228  f39b		       99		      .BYTE.b	%10011001
    229  f39c
    230  f39c							; Left
    231  f39c		       e3		      .BYTE.b	%11100011
    232  f39d		       14		      .BYTE.b	%00010100
    233  f39e		       5e		      .BYTE.b	%01011110
    234  f39f		       ff		      .BYTE.b	%11111111
    235  f3a0		       ff		      .BYTE.b	%11111111
    236  f3a1		       5e		      .BYTE.b	%01011110
    237  f3a2		       14		      .BYTE.b	%00010100
    238  f3a3		       e3		      .BYTE.b	%11100011
------- FILE spider.asm
    314  f3a4
    315  f3a4							;================
    316  f3a4							; End of cart
    317  f3a4							;================
    318  f3a4
    319  fffa					      ORG	$FFFA
    320  fffa
    321  fffa				   InterruptVectors
    322  fffa
    323  fffa		       13 f0		      .word.w	InitSystem	; NMI
    324  fffc		       13 f0		      .word.w	InitSystem	; RESET
    325  fffe		       13 f0		      .word.w	InitSystem	; IRQ
    326  10000
    327  10000					       END
