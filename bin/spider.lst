------- FILE spider.asm LEVEL 1 PASS 2
      1  10000 ????						; 8 Legs of Love game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: August 28th, 2018
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE spider.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE spider.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????
     38  10000 ????						; Logo
     39  10000 ????		00 09	    LOGO_SIZE  =	9
     40  10000 ????		00 30	    LOGO_START =	48
     41  10000 ????		00 08	    LOGO_INTERVAL =	4*2
     42  10000 ????		00 ff	    LOGO_DELAY =	255
     43  10000 ????		00 08	    LOGO_CHAR_DELAY =	8
     44  10000 ????
     45  10000 ????						;================
     46  10000 ????						; Variables
     47  10000 ????						;================
     48  10000 ????
     49 U0080 ????				      SEG.U	vars
     50 U0080					      org	$80
     51 U0080
     52 U0080		       00 00 00 00*Overlay    ds	8
     53 U0088
     54 U0080					      org	Overlay
     55 U0080
     56 U0080							; Animation/Logic System
     57 U0080
     58 U0080		       00	   AnimationFrame ds	1	; 1 byte to count frames
     59 U0081		       00	   AnimationSubFrame ds	1	; 1 byte to count portions of frames
     60 U0082
     61 U0080					      org	Overlay
     62 U0080
     63 U0080							; Drawing System, etc
     64 U0080
     65  10000 ????				       SEG
     66  10000 ????
     67  f000					      ORG	$F000	; Start of cart area
     68  f000
     69  f000				   Reset
     70  f000
     71  f000				   .initstack
     72  f000
     73  f000		       a2 00		      ldx	#0
     74  f002		       8a		      txa
     75  f003
     76  f003				   .initstack_loop
     77  f003
     78  f003		       ca		      dex
     79  f004		       9a		      txs
     80  f005		       48		      pha
     81  f006		       d0 fb		      bne	.initstack_loop
     82  f008
     83  f008							; Stack pointer now $FF, a=x=0, TIA registers (0 - $7F) = RAM ($80 - $FF) = 0
     84  f008
     85  f008				   .initvars
     86  f008
     87  f008							; Set background color
     88  f008		       a9 00		      lda	#$00	; White
     89  f00a		       85 09		      sta	COLUBK
     90  f00c
     91  f00c							; Set the playfield and player color
     92  f00c		       a9 0e		      lda	#$0E	; White
     93  f00e		       85 08		      sta	COLUPF
     94  f010		       85 06		      sta	COLUP0
     95  f012		       85 07		      sta	COLUP1
     96  f014
     97  f014							; Playfield Control
     98  f014		       a9 00		      lda	#%00000000	; 1 for mirroring
     99  f016		       85 0a		      sta	CTRLPF
    100  f018
    101  f018							; Disable Game Elements
    102  f018		       a9 00		      lda	#$00
    103  f01a		       85 1f		      sta	ENABL	; Turn off ball
    104  f01c		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    105  f01e		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    106  f020		       85 1b		      sta	GRP0	; Turn off player 1
    107  f022		       85 1c		      sta	GRP1	; Turn off player 2
    108  f024
    109  f024							; Empty playfield
    110  f024		       a9 00		      lda	#%00000000
    111  f026		       85 0d		      sta	PF0
    112  f028		       85 0e		      sta	PF1
    113  f02a		       85 0f		      sta	PF2
    114  f02c
    115  f02c				   LogoScreen
    116  f02c
    117  f02c							; Load number of frames into AnimationFrame
    118  f02c		       a9 ff		      lda	#LOGO_DELAY
    119  f02e		       85 80		      sta	AnimationFrame
    120  f030
    121  f030		       a9 00		      lda	#0
    122  f032		       85 81		      sta	AnimationSubFrame
    123  f034
    124  f034				   LogoFrame
    125  f034
    126  f034				   .logo_vsync		; Start of vertical blank processing
    127  f034
    128  f034		       a9 00		      lda	#0
    129  f036		       85 01		      sta	VBLANK
    130  f038
    131  f038		       a9 02		      lda	#2
    132  f03a		       85 00		      sta	VSYNC
    133  f03c
    134  f03c							; VSYNCH signal scanlines
    135  f03c					      REPEAT	#KERNEL_VSYNC
    136  f03c		       85 02		      sta	WSYNC
    135  f03c					      REPEND
    136  f03e		       85 02		      sta	WSYNC
    135  f03e					      REPEND
    136  f040		       85 02		      sta	WSYNC
    137  f042					      REPEND
    138  f042
    139  f042		       a9 00		      lda	#0
    140  f044		       85 00		      sta	VSYNC
    141  f046
    142  f046				   .logo_vblank 		; scanlines of vertical blank
    143  f046
    144  f046		       a2 25		      ldx	#KERNEL_VBLANK
    145  f048				   .logo_vblank_loop
    146  f048
    147  f048		       85 02		      sta	WSYNC
    148  f04a		       ca		      dex
    149  f04b		       d0 fb		      bne	.logo_vblank_loop
    150  f04d
    151  f04d				   .logo_scanline		; Do 192 scanlines
    152  f04d
    153  f04d		       a9 00		      lda	#$00	; Clear playfields
    154  f04f		       85 0d		      sta	PF0
    155  f051		       85 0e		      sta	PF1
    156  f053		       85 0f		      sta	PF2
    157  f055
    158  f055		       a2 30		      ldx	#LOGO_START	; This counts our scanline number
    159  f057				   .logo_scanline_start
    160  f057
    161  f057		       85 02		      sta	WSYNC
    162  f059		       ca		      dex
    163  f05a		       d0 fb		      bne	.logo_scanline_start
    164  f05c
    165  f05c		       a2 00		      ldx	#0
    166  f05e				   .logo_scanline_loop
    167  f05e
    168  f05e							; Cleanup
    169  f05e		       85 0e		      sta	PF1
    170  f060
    171  f060		       8a		      txa
    172  f061		       4a		      lsr		; Divide counter by 4
    173  f062		       4a		      lsr
    174  f063		       29 fe		      and	#%11111110	; Remove 0th bit
    175  f065		       a8		      tay
    176  f066
    177  f066							; Check if we need to display line
    178  f066		       c4 81		      cpy	AnimationSubFrame
    179  f068		       b0 17		      bcs	.logo_scanline_skip
    180  f06a
    181  f06a							; Load first half of data
    182  f06a		       b9 e7 f0 	      lda	LogoData,y
    183  f06d		       85 0f		      sta	PF2
    184  f06f
    185  f06f							; Load second half of data
    186  f06f		       c8		      iny
    187  f070		       b9 e7 f0 	      lda	LogoData,y
    188  f073
    189  f073							; Use 4 MSB bits on PF0
    190  f073		       85 0d		      sta	PF0
    191  f075
    192  f075							; Use 4 LSB bits on PF1
    193  f075					      REPEAT	4
    194  f075		       0a		      asl
    193  f075					      REPEND
    194  f076		       0a		      asl
    193  f076					      REPEND
    194  f077		       0a		      asl
    193  f077					      REPEND
    194  f078		       0a		      asl
    195  f079					      REPEND
    196  f079		       85 0e		      sta	PF1
    197  f07b
    198  f07b							; Cleanup
    199  f07b		       a9 00		      lda	#$00
    200  f07d		       85 0f		      sta	PF2
    201  f07f		       85 0d		      sta	PF0
    202  f081
    203  f081				   .logo_scanline_skip
    204  f081
    205  f081							; Clear Playfields
    206  f081		       a9 00		      lda	#$00
    207  f083		       85 0d		      sta	PF0
    208  f085		       85 0e		      sta	PF1
    209  f087		       85 0f		      sta	PF2
    210  f089
    211  f089							; Wait for next line
    212  f089		       85 02		      sta	WSYNC
    213  f08b
    214  f08b							; Check if at end of logo display
    215  f08b		       e8		      inx
    216  f08c		       e0 48		      cpx	#LOGO_SIZE*LOGO_INTERVAL
    217  f08e		       d0 ce		      bne	.logo_scanline_loop
    218  f090
    219  f090		       a2 48		      ldx	#KERNEL_SCANLINES-LOGO_START-LOGO_SIZE*LOGO_INTERVAL
    220  f092				   .logo_scanline_end
    221  f092
    222  f092		       85 02		      sta	WSYNC
    223  f094		       ca		      dex
    224  f095		       d0 fb		      bne	.logo_scanline_end
    225  f097
    226  f097				   .logo_overscan		; 30 scanlines of overscan
    227  f097
    228  f097		       a9 42		      lda	#%01000010
    229  f099		       85 01		      sta	VBLANK	; end of screen - enter blanking
    230  f09b
    231  f09b		       a2 1e		      ldx	#KERNEL_OVERSCAN
    232  f09d				   .logo_overscan_loop
    233  f09d
    234  f09d		       85 02		      sta	WSYNC
    235  f09f		       ca		      dex
    236  f0a0		       d0 fb		      bne	.logo_overscan_loop
    237  f0a2
    238  f0a2		       a6 80		      ldx	AnimationFrame
    239  f0a4
    240  f0a4							; Divide inverted AnimationFrame by 4 and put in AnimationSubFrame
    241  f0a4		       a9 ff		      lda	#LOGO_DELAY
    242  f0a6		       e5 80		      sbc	AnimationFrame
    243  f0a8		       4a		      lsr
    244  f0a9		       4a		      lsr
    245  f0aa		       85 81		      sta	AnimationSubFrame
    246  f0ac
    247  f0ac							; Decrement AnimationFrame
    248  f0ac		       ca		      dex
    249  f0ad		       86 80		      stx	AnimationFrame
    250  f0af
    251  f0af							; Check if we're at the end of the animation
    252  f0af		       d0 83		      bne	LogoFrame
    253  f0b1
    254  f0b1				   StartScreen
    255  f0b1
    256  f0b1							; Init variables here
    257  f0b1
    258  f0b1				   StartFrame
    259  f0b1
    260  f0b1				   .start_vsync 		; Start of vertical blank processing
    261  f0b1
    262  f0b1		       a9 00		      lda	#0
    263  f0b3		       85 01		      sta	VBLANK
    264  f0b5
    265  f0b5		       a9 02		      lda	#2
    266  f0b7		       85 00		      sta	VSYNC
    267  f0b9
    268  f0b9							; VSYNCH signal scanlines
    269  f0b9					      REPEAT	#KERNEL_VSYNC
    270  f0b9		       85 02		      sta	WSYNC
    269  f0b9					      REPEND
    270  f0bb		       85 02		      sta	WSYNC
    269  f0bb					      REPEND
    270  f0bd		       85 02		      sta	WSYNC
    271  f0bf					      REPEND
    272  f0bf
    273  f0bf		       a9 00		      lda	#0
    274  f0c1		       85 00		      sta	VSYNC
    275  f0c3
    276  f0c3				   .start_vblank		; scanlines of vertical blank
    277  f0c3
    278  f0c3		       a2 25		      ldx	#KERNEL_VBLANK
    279  f0c5				   .start_vblank_loop
    280  f0c5
    281  f0c5		       85 02		      sta	WSYNC
    282  f0c7		       ca		      dex
    283  f0c8		       d0 fb		      bne	.start_vblank_loop
    284  f0ca
    285  f0ca				   .start_scanline		; Do 192 scanlines
    286  f0ca
    287  f0ca		       a9 08		      lda	#$08	; Clear playfields (with temp design)
    288  f0cc		       85 0d		      sta	PF0
    289  f0ce		       85 0e		      sta	PF1
    290  f0d0		       85 0f		      sta	PF2
    291  f0d2
    292  f0d2		       a2 c0		      ldx	#KERNEL_SCANLINES	; Iterate through all scanlines
    293  f0d4				   .start_scanline_loop
    294  f0d4
    295  f0d4		       85 02		      sta	WSYNC
    296  f0d6		       ca		      dex
    297  f0d7		       d0 fb		      bne	.start_scanline_loop
    298  f0d9
    299  f0d9				   .start_overscan		; 30 scanlines of overscan
    300  f0d9
    301  f0d9		       a9 42		      lda	#%01000010
    302  f0db		       85 01		      sta	VBLANK	; end of screen - enter blanking
    303  f0dd
    304  f0dd		       a2 1e		      ldx	#KERNEL_OVERSCAN
    305  f0df				   .start_overscan_loop
    306  f0df
    307  f0df		       85 02		      sta	WSYNC
    308  f0e1		       ca		      dex
    309  f0e2		       d0 fb		      bne	.start_overscan_loop
    310  f0e4
    311  f0e4		       4c b1 f0 	      jmp	StartScreen
    312  f0e7
    313  f0e7				   LogoData		; 6 bytes over 8 lines each, total of 48 lines
    314  f0e7
    315  f0e7		       00		      .BYTE.b	%00000000	; Reversed
    316  f0e8		       10		      .BYTE.b	%00010000	; First 4 bits reversed
    317  f0e9
    318  f0e9		       80		      .BYTE.b	%10000000
    319  f0ea		       20		      .BYTE.b	%00100000
    320  f0eb
    321  f0eb		       40		      .BYTE.b	%01000000
    322  f0ec		       40		      .BYTE.b	%01000000
    323  f0ed
    324  f0ed		       20		      .BYTE.b	%00100000
    325  f0ee		       80		      .BYTE.b	%10000000
    326  f0ef
    327  f0ef		       10		      .BYTE.b	%00010000
    328  f0f0		       08		      .BYTE.b	%00001000
    329  f0f1
    330  f0f1		       08		      .BYTE.b	%00001000
    331  f0f2		       00		      .BYTE.b	%00000000
    332  f0f3
    333  f0f3		       04		      .BYTE.b	%00000100
    334  f0f4		       00		      .BYTE.b	%00000000
    335  f0f5
    336  f0f5		       02		      .BYTE.b	%00000010
    337  f0f6		       00		      .BYTE.b	%00000000
    338  f0f7
    339  f0f7		       ff		      .BYTE.b	%11111111
    340  f0f8		       ff		      .BYTE.b	%11111111
    341  f0f9
    342  f0f9				   LogoTextData 		; 6x8, flipped for decrementing loop
    343  f0f9
    344  f0f9							; C
    345  f0f9		       78		      .BYTE.b	%01111000
    346  f0fa		       fc		      .BYTE.b	%11111100
    347  f0fb		       cc		      .BYTE.b	%11001100
    348  f0fc		       c0		      .BYTE.b	%11000000
    349  f0fd		       c0		      .BYTE.b	%11000000
    350  f0fe		       cc		      .BYTE.b	%11001100
    351  f0ff		       fc		      .BYTE.b	%11111100
    352  f100		       78		      .BYTE.b	%01111000
    353  f101
    354  f101							; R
    355  f101		       cc		      .BYTE.b	%11001100
    356  f102		       cc		      .BYTE.b	%11001100
    357  f103		       cc		      .BYTE.b	%11001100
    358  f104		       f8		      .BYTE.b	%11111000
    359  f105		       fc		      .BYTE.b	%11111100
    360  f106		       c6		      .BYTE.b	%11000110
    361  f107		       c6		      .BYTE.b	%11000110
    362  f108		       f8		      .BYTE.b	%11111000
    363  f109
    364  f109							; E
    365  f109		       fc		      .BYTE.b	%11111100
    366  f10a		       c0		      .BYTE.b	%11000000
    367  f10b		       c0		      .BYTE.b	%11000000
    368  f10c		       f8		      .BYTE.b	%11111000
    369  f10d		       c0		      .BYTE.b	%11000000
    370  f10e		       fc		      .BYTE.b	%11111100
    371  f10f
    372  f10f							; A
    373  f10f		       7c		      .BYTE.b	%01111100
    374  f110		       c4		      .BYTE.b	%11000100
    375  f111		       c4		      .BYTE.b	%11000100
    376  f112		       fc		      .BYTE.b	%11111100
    377  f113		       c4		      .BYTE.b	%11000100
    378  f114		       c4		      .BYTE.b	%11000100
    379  f115
    380  f115							; T
    381  f115		       fc		      .BYTE.b	%11111100
    382  f116		       30		      .BYTE.b	%00110000
    383  f117		       30		      .BYTE.b	%00110000
    384  f118		       30		      .BYTE.b	%00110000
    385  f119		       30		      .BYTE.b	%00110000
    386  f11a		       30		      .BYTE.b	%00110000
    387  f11b
    388  f11b							; U
    389  f11b		       e4		      .BYTE.b	%11100100
    390  f11c		       e4		      .BYTE.b	%11100100
    391  f11d		       e4		      .BYTE.b	%11100100
    392  f11e		       e4		      .BYTE.b	%11100100
    393  f11f		       e4		      .BYTE.b	%11100100
    394  f120		       78		      .BYTE.b	%01111000
    395  f121
    396  f121							; R
    397  f121		       f8		      .BYTE.b	%11111000
    398  f122		       c4		      .BYTE.b	%11000100
    399  f123		       c4		      .BYTE.b	%11000100
    400  f124		       f8		      .BYTE.b	%11111000
    401  f125		       c4		      .BYTE.b	%11000100
    402  f126		       c4		      .BYTE.b	%11000100
    403  f127
    404  f127							; E
    405  f127		       fc		      .BYTE.b	%11111100
    406  f128		       c0		      .BYTE.b	%11000000
    407  f129		       c0		      .BYTE.b	%11000000
    408  f12a		       f8		      .BYTE.b	%11111000
    409  f12b		       c0		      .BYTE.b	%11000000
    410  f12c		       fc		      .BYTE.b	%11111100
    411  f12d
    412  f12d							;-------------------------------------------
    413  f12d
    414  fffa					      ORG	$FFFA	; End of cart area
    415  fffa
    416  fffa				   InterruptVectors
    417  fffa
    418  fffa		       00 f0		      .word.w	Reset	; NMI
    419  fffc		       00 f0		      .word.w	Reset	; RESET
    420  fffe		       00 f0		      .word.w	Reset	; IRQ
    421  10000
    422  10000					       END
