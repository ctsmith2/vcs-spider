------- FILE spider.asm LEVEL 1 PASS 2
      1  10000 ????						; 8 Legs of Love game for Atari VCS/2600
      2  10000 ????						; Created by D Cooper Dalrymple 2018 - dcdalrymple.com
      3  10000 ????						; Licensed under GNU LGPL V3.0
      4  10000 ????						; Last revision: August 28th, 2018
      5  10000 ????
      6  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE spider.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE spider.asm
      9  10000 ????
     10  10000 ????						;================
     11  10000 ????						; Constants
     12  10000 ????						;================
     13  10000 ????
     14  10000 ????						; PAL Region
     15  10000 ????		00 00	    PAL        =	0
     16  10000 ????		00 f2	    PAL_SCANLINES =	242
     17  10000 ????		01 38	    PAL_TOTAL  =	312
     18  10000 ????
     19  10000 ????						; NTSC Region
     20  10000 ????		00 01	    NTSC       =	1
     21  10000 ????		00 c0	    NTSC_SCANLINES =	192
     22  10000 ????		01 06	    NTSC_TOTAL =	262
     23  10000 ????
     24  10000 ????						; Kernel
     25  10000 ????		00 01	    SYSTEM     =	NTSC
     26  10000 ????				       if	SYSTEM = NTSC
     27  10000 ????		00 c0	    KERNEL_SCANLINES =	NTSC_SCANLINES
     28  10000 ????		01 06	    KERNEL_TOTAL =	NTSC_TOTAL
     29  10000 ????				       endif
     30  10000 ????			   -	       if	SYSTEM = PAL
     31  10000 ????			   -KERNEL_SCANLINES =	PAL_SCANLINES
     32  10000 ????			   -KERNEL_TOTAL =	PAL_TOTAL
     33  10000 ????				       endif
     34  10000 ????		00 03	    KERNEL_VSYNC =	3
     35  10000 ????		00 25	    KERNEL_VBLANK =	37
     36  10000 ????		00 1e	    KERNEL_OVERSCAN =	30
     37  10000 ????
     38  10000 ????						; Logo
     39  10000 ????		00 09	    LOGO_SIZE  =	9
     40  10000 ????		00 30	    LOGO_START =	48
     41  10000 ????		00 08	    LOGO_INTERVAL =	8
     42  10000 ????		00 b4	    LOGO_FRAMES =	180
     43  10000 ????
     44  10000 ????		00 a2	    LOGO_BG_COLU =	#$A2
     45  10000 ????		00 5e	    LOGO_FG_COLU =	#$5E
     46  10000 ????
     47  10000 ????		00 04	    LOGO_AUD_0_TONE =	4
     48  10000 ????		00 0f	    LOGO_AUD_0_VOLUME =	15	; 15 is max
     49  10000 ????		00 01	    LOGO_AUD_1_TONE =	1
     50  10000 ????		00 03	    LOGO_AUD_1_VOLUME =	3
     51  10000 ????		00 0c	    LOGO_AUD_LENGTH =	12
     52  10000 ????		00 08	    LOGO_AUD_STEP =	8
     53  10000 ????
     54  10000 ????						; Title
     55  10000 ????		00 08	    TITLE_LINE_SIZE =	8
     56  10000 ????		00 04	    TITLE_DATA_SIZE =	%00000100
     57  10000 ????		00 01	    TITLE_BORDER =	1
     58  10000 ????		00 04	    TITLE_PAD  =	4
     59  10000 ????		00 06	    TITLE_IMAGE =	6
     60  10000 ????		00 02	    TITLE_GAP  =	2
     61  10000 ????
     62  10000 ????		00 70	    TITLE_BG_COLU =	#$70
     63  10000 ????		00 7e	    TITLE_BD_COLU =	#$7E
     64  10000 ????		00 0e	    TITLE_FG_COLU =	#$0E
     65  10000 ????
     66  10000 ????		00 04	    TITLE_AUD_0_TONE =	4
     67  10000 ????		00 04	    TITLE_AUD_0_VOLUME =	4
     68  10000 ????		00 07	    TITLE_AUD_1_VOLUME =	7
     69  10000 ????		00 10	    TITLE_AUD_LENGTH =	16
     70  10000 ????		00 09	    TITLE_AUD_STEP =	9
     71  10000 ????
     72  10000 ????						; Game
     73  10000 ????		00 08	    GAME_PF_LINE_SIZE =	8
     74  10000 ????		00 04	    GAME_PF_DATA_SIZE =	%00000100
     75  10000 ????		00 0c	    GAME_PF_SIZE =	12
     76  10000 ????
     77  10000 ????		00 00	    GAME_BG_COLU =	#$00
     78  10000 ????		00 0c	    GAME_FG_COLU =	#$0C
     79  10000 ????
     80  10000 ????		00 56	    GAME_P0_COLU =	#$56
     81  10000 ????		00 08	    GAME_P0_SIZE =	8
     82  10000 ????
     83  10000 ????						;================
     84  10000 ????						; Variables
     85  10000 ????						;================
     86  10000 ????
     87 U0086 ????				      SEG.U	vars
     88 U0080					      org	$80
     89 U0080
     90 U0080		       00 00 00 00*Overlay    ds	8
     91 U0088
     92 U0080					      org	Overlay
     93 U0080
     94 U0080							; Animation/Logic System
     95 U0080
     96 U0080		       00	   AnimationFrame ds	1	; 1 byte to count frames
     97 U0081		       00	   AnimationSubFrame ds	1	; 1 byte to count portions of frames
     98 U0082
     99 U0082							; Audio System
    100 U0082
    101 U0082		       00	   AudioFrame ds	1
    102 U0083		       00	   AudioStep  ds	1
    103 U0084
    104 U0084							; Player Controls
    105 U0084		       00	   PlayerX    ds	1
    106 U0085		       00	   PlayerY    ds	1
    107 U0086
    108  10000 ????				       SEG
    109  10000 ????
    110  f000					      ORG	$F000	; Start of cart area
    111  f000
    112  f000				   Reset
    113  f000
    114  f000				   .initstack
    115  f000
    116  f000		       a2 00		      ldx	#0
    117  f002		       8a		      txa
    118  f003
    119  f003				   .initstack_loop
    120  f003
    121  f003		       ca		      dex
    122  f004		       9a		      txs
    123  f005		       48		      pha
    124  f006		       d0 fb		      bne	.initstack_loop
    125  f008
    126  f008							; Stack pointer now $FF, a=x=0, TIA registers (0 - $7F) = RAM ($80 - $FF) = 0
    127  f008
    128  f008				   .initvars
    129  f008
    130  f008							; Set background color
    131  f008		       a9 00		      lda	#$00	; Black
    132  f00a		       85 09		      sta	COLUBK
    133  f00c
    134  f00c							; Set the playfield and player color
    135  f00c		       a9 0e		      lda	#$0E	; White
    136  f00e		       85 08		      sta	COLUPF
    137  f010		       85 06		      sta	COLUP0
    138  f012		       85 07		      sta	COLUP1
    139  f014
    140  f014							; Playfield Control
    141  f014		       a9 00		      lda	#%00000000	; 1 for mirroring
    142  f016		       85 0a		      sta	CTRLPF
    143  f018
    144  f018							; Disable Game Elements
    145  f018		       a9 00		      lda	#$00
    146  f01a		       85 1f		      sta	ENABL	; Turn off ball
    147  f01c		       85 1d		      sta	ENAM0	; Turn off player 1 missile
    148  f01e		       85 1e		      sta	ENAM1	; Turn off player 2 missile
    149  f020		       85 1b		      sta	GRP0	; Turn off player 1
    150  f022		       85 1c		      sta	GRP1	; Turn off player 2
    151  f024
    152  f024							; Empty playfield
    153  f024		       a9 00		      lda	#%00000000
    154  f026		       85 0d		      sta	PF0
    155  f028		       85 0e		      sta	PF1
    156  f02a		       85 0f		      sta	PF2
    157  f02c
    158  f02c				   LogoScreen
    159  f02c
    160  f02c							; Load Colors
    161  f02c		       a9 a2		      lda	#LOGO_BG_COLU
    162  f02e		       85 09		      sta	COLUBK
    163  f030		       a9 5e		      lda	#LOGO_FG_COLU
    164  f032		       85 08		      sta	COLUPF
    165  f034
    166  f034							; Load audio settings
    167  f034		       a9 04		      lda	#LOGO_AUD_0_TONE
    168  f036		       85 15		      sta	AUDC0
    169  f038		       a9 0f		      lda	#LOGO_AUD_0_VOLUME
    170  f03a		       85 19		      sta	AUDV0
    171  f03c		       a9 01		      lda	#LOGO_AUD_1_TONE
    172  f03e		       85 16		      sta	AUDC1
    173  f040		       a9 03		      lda	#LOGO_AUD_1_VOLUME
    174  f042		       85 1a		      sta	AUDV1
    175  f044		       a9 00		      lda	#0
    176  f046		       85 82		      sta	AudioFrame
    177  f048		       85 83		      sta	AudioStep
    178  f04a
    179  f04a							; Play first note
    180  f04a		       a8		      tay
    181  f04b		       b9 7c f3 	      lda	LogoAudio0,y
    182  f04e		       85 17		      sta	AUDF0
    183  f050		       b9 88 f3 	      lda	LogoAudio1,y
    184  f053		       85 18		      sta	AUDF1
    185  f055
    186  f055							; Load number of frames into AnimationFrame
    187  f055		       a9 b4		      lda	#LOGO_FRAMES
    188  f057		       85 80		      sta	AnimationFrame
    189  f059
    190  f059							; Initialize sub frame
    191  f059		       a9 00		      lda	#0
    192  f05b		       85 81		      sta	AnimationSubFrame
    193  f05d
    194  f05d				   LogoFrame
    195  f05d
    196  f05d				   .logo_audio
    197  f05d
    198  f05d							; Increment Audio Frame
    199  f05d		       a6 82		      ldx	AudioFrame
    200  f05f		       e8		      inx
    201  f060		       86 82		      stx	AudioFrame
    202  f062
    203  f062							; Check if we need to play the next note
    204  f062		       e0 08		      cpx	#LOGO_AUD_STEP
    205  f064		       90 28		      bcc	.logo_audio_skip
    206  f066
    207  f066				   .logo_audio_play
    208  f066
    209  f066							; Reset AudioFrame
    210  f066		       a9 00		      lda	#0
    211  f068		       85 82		      sta	AudioFrame
    212  f06a
    213  f06a							; Check if we're at the end of the melody
    214  f06a		       a4 83		      ldy	AudioStep
    215  f06c		       c0 0b		      cpy	#LOGO_AUD_LENGTH-1
    216  f06e		       f0 10		      beq	.logo_audio_mute
    217  f070
    218  f070				   .logo_audio_play_note
    219  f070
    220  f070							; Increment Audio position
    221  f070		       c8		      iny
    222  f071		       84 83		      sty	AudioStep
    223  f073
    224  f073							; Load note and play
    225  f073		       b9 7c f3 	      lda	LogoAudio0,y
    226  f076		       85 17		      sta	AUDF0
    227  f078		       b9 88 f3 	      lda	LogoAudio1,y
    228  f07b		       85 18		      sta	AUDF1
    229  f07d		       4c 8e f0 	      jmp	.logo_audio_mute_skip
    230  f080
    231  f080				   .logo_audio_mute
    232  f080
    233  f080							; Mute audio
    234  f080		       a9 00		      lda	#0
    235  f082		       85 15		      sta	AUDC0
    236  f084		       85 19		      sta	AUDV0
    237  f086		       85 17		      sta	AUDF0
    238  f088		       85 16		      sta	AUDC1
    239  f08a		       85 1a		      sta	AUDV1
    240  f08c		       85 18		      sta	AUDF1
    241  f08e
    242  f08e				   .logo_audio_mute_skip
    243  f08e
    244  f08e				   .logo_audio_skip
    245  f08e
    246  f08e				   .logo_vsync		; Start of vertical blank processing
    247  f08e
    248  f08e		       a9 00		      lda	#0
    249  f090		       85 01		      sta	VBLANK
    250  f092
    251  f092		       a9 02		      lda	#2
    252  f094		       85 00		      sta	VSYNC
    253  f096
    254  f096							; VSYNCH signal scanlines
    255  f096					      REPEAT	#KERNEL_VSYNC
    256  f096		       85 02		      sta	WSYNC
    255  f096					      REPEND
    256  f098		       85 02		      sta	WSYNC
    255  f098					      REPEND
    256  f09a		       85 02		      sta	WSYNC
    257  f09c					      REPEND
    258  f09c
    259  f09c		       a9 00		      lda	#0
    260  f09e		       85 00		      sta	VSYNC
    261  f0a0
    262  f0a0				   .logo_vblank 		; scanlines of vertical blank
    263  f0a0
    264  f0a0		       a2 25		      ldx	#KERNEL_VBLANK
    265  f0a2				   .logo_vblank_loop
    266  f0a2
    267  f0a2		       85 02		      sta	WSYNC
    268  f0a4		       ca		      dex
    269  f0a5		       d0 fb		      bne	.logo_vblank_loop
    270  f0a7
    271  f0a7				   .logo_scanline		; Do 192 scanlines
    272  f0a7
    273  f0a7		       a9 00		      lda	#$00	; Clear playfields
    274  f0a9		       85 0d		      sta	PF0
    275  f0ab		       85 0e		      sta	PF1
    276  f0ad		       85 0f		      sta	PF2
    277  f0af
    278  f0af		       a2 30		      ldx	#LOGO_START	; This counts our scanline number
    279  f0b1				   .logo_scanline_start
    280  f0b1
    281  f0b1		       85 02		      sta	WSYNC
    282  f0b3		       ca		      dex
    283  f0b4		       d0 fb		      bne	.logo_scanline_start
    284  f0b6
    285  f0b6		       a2 00		      ldx	#0
    286  f0b8				   .logo_scanline_loop
    287  f0b8
    288  f0b8							; Cleanup
    289  f0b8		       85 0e		      sta	PF1
    290  f0ba
    291  f0ba		       8a		      txa
    292  f0bb		       4a		      lsr		; Divide counter by 4
    293  f0bc		       4a		      lsr
    294  f0bd		       29 fe		      and	#%11111110	; Remove 0th bit
    295  f0bf		       a8		      tay
    296  f0c0
    297  f0c0							; Check if we need to display line
    298  f0c0		       c4 81		      cpy	AnimationSubFrame
    299  f0c2		       b0 17		      bcs	.logo_scanline_skip
    300  f0c4
    301  f0c4							; Load first half of data
    302  f0c4		       b9 6a f3 	      lda	LogoData,y
    303  f0c7		       85 0f		      sta	PF2
    304  f0c9
    305  f0c9							; Load second half of data
    306  f0c9		       c8		      iny
    307  f0ca		       b9 6a f3 	      lda	LogoData,y
    308  f0cd
    309  f0cd							; Use 4 MSB bits on PF0
    310  f0cd		       85 0d		      sta	PF0
    311  f0cf
    312  f0cf							; Use 4 LSB bits on PF1
    313  f0cf					      REPEAT	4
    314  f0cf		       0a		      asl
    313  f0cf					      REPEND
    314  f0d0		       0a		      asl
    313  f0d0					      REPEND
    314  f0d1		       0a		      asl
    313  f0d1					      REPEND
    314  f0d2		       0a		      asl
    315  f0d3					      REPEND
    316  f0d3		       85 0e		      sta	PF1
    317  f0d5
    318  f0d5							; Cleanup
    319  f0d5		       a9 00		      lda	#$00
    320  f0d7		       85 0f		      sta	PF2
    321  f0d9		       85 0d		      sta	PF0
    322  f0db
    323  f0db				   .logo_scanline_skip
    324  f0db
    325  f0db							; Clear Playfields
    326  f0db		       a9 00		      lda	#$00
    327  f0dd		       85 0d		      sta	PF0
    328  f0df		       85 0e		      sta	PF1
    329  f0e1		       85 0f		      sta	PF2
    330  f0e3
    331  f0e3							; Wait for next line
    332  f0e3		       85 02		      sta	WSYNC
    333  f0e5
    334  f0e5							; Check if at end of logo display
    335  f0e5		       e8		      inx
    336  f0e6		       e0 48		      cpx	#LOGO_SIZE*LOGO_INTERVAL
    337  f0e8		       d0 ce		      bne	.logo_scanline_loop
    338  f0ea
    339  f0ea		       a2 48		      ldx	#KERNEL_SCANLINES-LOGO_START-LOGO_SIZE*LOGO_INTERVAL
    340  f0ec				   .logo_scanline_end
    341  f0ec
    342  f0ec		       85 02		      sta	WSYNC
    343  f0ee		       ca		      dex
    344  f0ef		       d0 fb		      bne	.logo_scanline_end
    345  f0f1
    346  f0f1				   .logo_overscan		; 30 scanlines of overscan
    347  f0f1
    348  f0f1		       a9 42		      lda	#%01000010
    349  f0f3		       85 01		      sta	VBLANK	; end of screen - enter blanking
    350  f0f5
    351  f0f5		       a2 1e		      ldx	#KERNEL_OVERSCAN
    352  f0f7				   .logo_overscan_loop
    353  f0f7
    354  f0f7		       85 02		      sta	WSYNC
    355  f0f9		       ca		      dex
    356  f0fa		       d0 fb		      bne	.logo_overscan_loop
    357  f0fc
    358  f0fc		       a6 80		      ldx	AnimationFrame
    359  f0fe
    360  f0fe							; Divide inverted AnimationFrame by 4 and put in AnimationSubFrame
    361  f0fe		       a9 b4		      lda	#LOGO_FRAMES
    362  f100		       e5 80		      sbc	AnimationFrame
    363  f102		       4a		      lsr
    364  f103		       4a		      lsr
    365  f104		       85 81		      sta	AnimationSubFrame
    366  f106
    367  f106							; Decrement AnimationFrame
    368  f106		       ca		      dex
    369  f107		       86 80		      stx	AnimationFrame
    370  f109
    371  f109							; Check if we're at the end of the animation
    372  f109		       f0 03		      beq	TitleScreen
    373  f10b		       4c 5d f0 	      jmp	LogoFrame
    374  f10e
    375  f10e				   TitleScreen
    376  f10e
    377  f10e							; Clear playfields
    378  f10e		       a9 00		      lda	#$00
    379  f110		       85 0d		      sta	PF0
    380  f112		       85 0e		      sta	PF1
    381  f114		       85 0f		      sta	PF2
    382  f116
    383  f116							; Background Color
    384  f116		       a9 70		      lda	#TITLE_BG_COLU
    385  f118		       85 09		      sta	COLUBK
    386  f11a
    387  f11a							; Border Color
    388  f11a		       a9 7e		      lda	#TITLE_BD_COLU
    389  f11c		       85 08		      sta	COLUPF
    390  f11e
    391  f11e							; Load audio settings
    392  f11e
    393  f11e							; Melody Line
    394  f11e		       a9 04		      lda	#TITLE_AUD_0_TONE
    395  f120		       85 15		      sta	AUDC0
    396  f122		       a9 04		      lda	#TITLE_AUD_0_VOLUME
    397  f124		       85 19		      sta	AUDV0
    398  f126
    399  f126							; Drums and Bass
    400  f126		       a9 00		      lda	#0
    401  f128		       85 16		      sta	AUDC1
    402  f12a		       85 1a		      sta	AUDV1
    403  f12c
    404  f12c							; Make it so that we play the first note immediately
    405  f12c		       a9 08		      lda	#TITLE_AUD_STEP-1
    406  f12e		       85 82		      sta	AudioFrame
    407  f130		       a9 0f		      lda	#TITLE_AUD_LENGTH-1
    408  f132		       85 83		      sta	AudioStep
    409  f134
    410  f134				   TitleFrame
    411  f134
    412  f134				   .title_audio
    413  f134
    414  f134							; Increment Audio Frame
    415  f134		       a6 82		      ldx	AudioFrame
    416  f136		       e8		      inx
    417  f137		       86 82		      stx	AudioFrame
    418  f139
    419  f139							; Check if we need to play the next note
    420  f139		       e0 09		      cpx	#TITLE_AUD_STEP
    421  f13b		       90 31		      bcc	.title_audio_skip
    422  f13d
    423  f13d				   .title_audio_play
    424  f13d
    425  f13d							; Reset AudioFrame
    426  f13d		       a9 00		      lda	#0
    427  f13f		       85 82		      sta	AudioFrame
    428  f141
    429  f141							; Increment melody position
    430  f141		       a4 83		      ldy	AudioStep
    431  f143		       c8		      iny
    432  f144
    433  f144							; Check if we're at the end of the melody
    434  f144		       c0 10		      cpy	#TITLE_AUD_LENGTH
    435  f146		       d0 02		      bne	.title_audio_play_note
    436  f148
    437  f148							; Loop our audio step
    438  f148		       a0 00		      ldy	#0
    439  f14a
    440  f14a				   .title_audio_play_note
    441  f14a
    442  f14a							; Save current position
    443  f14a		       84 83		      sty	AudioStep
    444  f14c
    445  f14c							; Basic Melody Line
    446  f14c		       b9 c4 f3 	      lda	TitleAudio0,y
    447  f14f		       85 17		      sta	AUDF0
    448  f151
    449  f151							; Drums and Bass
    450  f151		       b9 d4 f3 	      lda	TitleTone1,y
    451  f154		       c9 ff		      cmp	#$FF
    452  f156		       f0 0e		      beq	.title_audio_play_note_1_mute
    453  f158
    454  f158		       85 16		      sta	AUDC1
    455  f15a		       b9 e4 f3 	      lda	TitleAudio1,y
    456  f15d		       85 18		      sta	AUDF1
    457  f15f		       a9 07		      lda	#TITLE_AUD_1_VOLUME
    458  f161		       85 1a		      sta	AUDV1
    459  f163
    460  f163		       4c 6e f1 	      jmp	.title_audio_skip
    461  f166
    462  f166				   .title_audio_play_note_1_mute
    463  f166
    464  f166		       a9 00		      lda	#0
    465  f168		       85 18		      sta	AUDF1
    466  f16a		       85 16		      sta	AUDC1
    467  f16c		       85 1a		      sta	AUDV1
    468  f16e
    469  f16e				   .title_audio_skip
    470  f16e
    471  f16e				   .title_vsync 		; Start of vertical blank processing
    472  f16e
    473  f16e		       a9 00		      lda	#0
    474  f170		       85 01		      sta	VBLANK
    475  f172
    476  f172		       a9 02		      lda	#2
    477  f174		       85 00		      sta	VSYNC
    478  f176
    479  f176							; VSYNCH signal scanlines
    480  f176					      REPEAT	#KERNEL_VSYNC
    481  f176		       85 02		      sta	WSYNC
    480  f176					      REPEND
    481  f178		       85 02		      sta	WSYNC
    480  f178					      REPEND
    481  f17a		       85 02		      sta	WSYNC
    482  f17c					      REPEND
    483  f17c
    484  f17c		       a9 00		      lda	#0
    485  f17e		       85 00		      sta	VSYNC
    486  f180
    487  f180				   .title_vblank		; scanlines of vertical blank
    488  f180
    489  f180		       a2 25		      ldx	#KERNEL_VBLANK
    490  f182				   .title_vblank_loop
    491  f182
    492  f182		       85 02		      sta	WSYNC
    493  f184		       ca		      dex
    494  f185		       d0 fb		      bne	.title_vblank_loop
    495  f187
    496  f187				   .title_border_h_top
    497  f187
    498  f187							; Number of Scanlines
    499  f187		       a2 08		      ldx	#TITLE_BORDER*TITLE_LINE_SIZE
    500  f189
    501  f189							; Draw Playfield
    502  f189		       a9 ff		      lda	#$FF
    503  f18b		       85 0d		      sta	PF0
    504  f18d		       85 0e		      sta	PF1
    505  f18f		       85 0f		      sta	PF2
    506  f191
    507  f191				   .title_border_h_top_loop
    508  f191
    509  f191		       85 02		      sta	WSYNC
    510  f193		       ca		      dex
    511  f194		       d0 fb		      bne	.title_border_h_top_loop
    512  f196
    513  f196				   .title_border_v_top
    514  f196
    515  f196							; Number of Scanlines
    516  f196		       a2 20		      ldx	#TITLE_PAD*TITLE_LINE_SIZE
    517  f198
    518  f198							; Mirror playfield
    519  f198		       a9 01		      lda	#%00000001
    520  f19a		       85 0a		      sta	CTRLPF
    521  f19c
    522  f19c							; Draw Playfield
    523  f19c		       a9 10		      lda	#%00010000
    524  f19e		       85 0d		      sta	PF0
    525  f1a0
    526  f1a0		       a9 00		      lda	#$00
    527  f1a2		       85 0e		      sta	PF1
    528  f1a4		       85 0f		      sta	PF2
    529  f1a6
    530  f1a6				   .title_border_v_top_loop
    531  f1a6
    532  f1a6		       85 02		      sta	WSYNC
    533  f1a8		       ca		      dex
    534  f1a9		       d0 fb		      bne	.title_border_v_top_loop
    535  f1ab
    536  f1ab				   .title_image_top
    537  f1ab
    538  f1ab		       a0 00		      ldy	#$00	; Current Image Index
    539  f1ad		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    540  f1af
    541  f1af		       4c ba f1 	      jmp	.title_image_top_loop
    542  f1b2
    543  f1b2				   .title_image_top_loop_wait
    544  f1b2
    545  f1b2							; Wait until new line is ready to draw
    546  f1b2		       85 02		      sta	WSYNC
      0  f1b4					      sleep	11
      1  f1b4				   .CYCLES    SET	11
      2  f1b4
      3  f1b4				  -	      IF	.CYCLES < 2
      4  f1b4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1b4				  -	      ERR
      6  f1b4					      ENDIF
      7  f1b4
      8  f1b4					      IF	.CYCLES & 1
      9  f1b4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1b4		       04 00		      nop	0
     11  f1b6				  -	      ELSE
     12  f1b6				  -	      bit	VSYNC
     13  f1b6					      ENDIF
     14  f1b6				   .CYCLES    SET	.CYCLES - 3
     15  f1b6					      ENDIF
     16  f1b6
     17  f1b6					      REPEAT	.CYCLES / 2
     18  f1b6		       ea		      nop
     17  f1b6					      REPEND
     18  f1b7		       ea		      nop
     17  f1b7					      REPEND
     18  f1b8		       ea		      nop
     17  f1b8					      REPEND
     18  f1b9		       ea		      nop
     19  f1ba					      REPEND
    548  f1ba
    549  f1ba				   .title_image_top_loop
    550  f1ba
    551  f1ba							; Draw Image
    552  f1ba		       b9 94 f3 	      lda	TitleImageTop,y
    553  f1bd		       85 0e		      sta	PF1
    554  f1bf		       c8		      iny
    555  f1c0
    556  f1c0							; Set Image Color
    557  f1c0		       a9 0e		      lda	#TITLE_FG_COLU
    558  f1c2		       85 08		      sta	COLUPF
    559  f1c4
    560  f1c4							; Finish Drawing Image
    561  f1c4		       b9 94 f3 	      lda	TitleImageTop,y
    562  f1c7		       85 0f		      sta	PF2
    563  f1c9		       c8		      iny
    564  f1ca		       b9 94 f3 	      lda	TitleImageTop,y
    565  f1cd		       c8		      iny
      0  f1ce					      sleep	5
      1  f1ce				   .CYCLES    SET	5
      2  f1ce
      3  f1ce				  -	      IF	.CYCLES < 2
      4  f1ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1ce				  -	      ERR
      6  f1ce					      ENDIF
      7  f1ce
      8  f1ce					      IF	.CYCLES & 1
      9  f1ce					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1ce		       04 00		      nop	0
     11  f1d0				  -	      ELSE
     12  f1d0				  -	      bit	VSYNC
     13  f1d0					      ENDIF
     14  f1d0				   .CYCLES    SET	.CYCLES - 3
     15  f1d0					      ENDIF
     16  f1d0
     17  f1d0					      REPEAT	.CYCLES / 2
     18  f1d0		       ea		      nop
     19  f1d1					      REPEND
    567  f1d1		       85 0f		      sta	PF2
    568  f1d3		       b9 94 f3 	      lda	TitleImageTop,y
    569  f1d6		       85 0e		      sta	PF1
    570  f1d8
    571  f1d8							; Clear bottom of index
    572  f1d8		       98		      tya
    573  f1d9		       29 fc		      and	#%11111100
    574  f1db		       a8		      tay
    575  f1dc
    576  f1dc							; Restore border color
      0  f1dc					      sleep	2
      1  f1dc				   .CYCLES    SET	2
      2  f1dc
      3  f1dc				  -	      IF	.CYCLES < 2
      4  f1dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f1dc				  -	      ERR
      6  f1dc					      ENDIF
      7  f1dc
      8  f1dc				  -	      IF	.CYCLES & 1
      9  f1dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f1dc				  -	      nop	0
     11  f1dc				  -	      ELSE
     12  f1dc				  -	      bit	VSYNC
     13  f1dc				  -	      ENDIF
     14  f1dc				  -.CYCLES    SET	.CYCLES - 3
     15  f1dc					      ENDIF
     16  f1dc
     17  f1dc					      REPEAT	.CYCLES / 2
     18  f1dc		       ea		      nop
     19  f1dd					      REPEND
    578  f1dd		       a9 7e		      lda	#TITLE_BD_COLU
    579  f1df		       85 08		      sta	COLUPF
    580  f1e1
    581  f1e1		       ca		      dex
    582  f1e2		       d0 ce		      bne	.title_image_top_loop_wait
    583  f1e4
    584  f1e4							; Add 4 to the image index to skip to next line
    585  f1e4					      REPEAT	4
    586  f1e4		       c8		      iny
    585  f1e4					      REPEND
    586  f1e5		       c8		      iny
    585  f1e5					      REPEND
    586  f1e6		       c8		      iny
    585  f1e6					      REPEND
    586  f1e7		       c8		      iny
    587  f1e8					      REPEND
    588  f1e8
    589  f1e8		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    590  f1ea
    591  f1ea		       c0 18		      cpy	#TITLE_IMAGE*TITLE_DATA_SIZE
    592  f1ec		       d0 cc		      bne	.title_image_top_loop
    593  f1ee
    594  f1ee				   .title_gap
    595  f1ee
    596  f1ee							; Number of Scanlines
    597  f1ee		       a2 10		      ldx	#TITLE_GAP*TITLE_LINE_SIZE
    598  f1f0
    599  f1f0							; Mirror playfield
    600  f1f0		       a9 01		      lda	#%00000001
    601  f1f2		       85 0a		      sta	CTRLPF
    602  f1f4
    603  f1f4							; Draw Playfield
    604  f1f4		       a9 10		      lda	#%00010000
    605  f1f6		       85 0d		      sta	PF0
    606  f1f8
    607  f1f8		       a9 00		      lda	#$00
    608  f1fa		       85 0e		      sta	PF1
    609  f1fc		       85 0f		      sta	PF2
    610  f1fe
    611  f1fe				   .title_gap_loop
    612  f1fe
    613  f1fe		       85 02		      sta	WSYNC
    614  f200		       ca		      dex
    615  f201		       d0 fb		      bne	.title_gap_loop
    616  f203
    617  f203				   .title_image_bottom
    618  f203
    619  f203		       a0 00		      ldy	#$00	; Current Image Index
    620  f205		       a2 08		      ldx	#TITLE_LINE_SIZE
    621  f207
    622  f207		       4c 12 f2 	      jmp	.title_image_bottom_loop
    623  f20a
    624  f20a				   .title_image_bottom_loop_wait
    625  f20a
    626  f20a							; Wait until new line is ready to draw
    627  f20a		       85 02		      sta	WSYNC
      0  f20c					      sleep	11
      1  f20c				   .CYCLES    SET	11
      2  f20c
      3  f20c				  -	      IF	.CYCLES < 2
      4  f20c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f20c				  -	      ERR
      6  f20c					      ENDIF
      7  f20c
      8  f20c					      IF	.CYCLES & 1
      9  f20c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f20c		       04 00		      nop	0
     11  f20e				  -	      ELSE
     12  f20e				  -	      bit	VSYNC
     13  f20e					      ENDIF
     14  f20e				   .CYCLES    SET	.CYCLES - 3
     15  f20e					      ENDIF
     16  f20e
     17  f20e					      REPEAT	.CYCLES / 2
     18  f20e		       ea		      nop
     17  f20e					      REPEND
     18  f20f		       ea		      nop
     17  f20f					      REPEND
     18  f210		       ea		      nop
     17  f210					      REPEND
     18  f211		       ea		      nop
     19  f212					      REPEND
    629  f212
    630  f212				   .title_image_bottom_loop
    631  f212
    632  f212							; Draw Image
    633  f212		       b9 ac f3 	      lda	TitleImageBottom,y
    634  f215		       85 0e		      sta	PF1
    635  f217		       c8		      iny
    636  f218
    637  f218							; Set Image Color
    638  f218		       a9 0e		      lda	#TITLE_FG_COLU
    639  f21a		       85 08		      sta	COLUPF
    640  f21c
    641  f21c							; Finish Drawing Image
    642  f21c		       b9 ac f3 	      lda	TitleImageBottom,y
    643  f21f		       85 0f		      sta	PF2
    644  f221		       c8		      iny
    645  f222		       b9 ac f3 	      lda	TitleImageBottom,y
    646  f225		       c8		      iny
      0  f226					      sleep	5
      1  f226				   .CYCLES    SET	5
      2  f226
      3  f226				  -	      IF	.CYCLES < 2
      4  f226				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f226				  -	      ERR
      6  f226					      ENDIF
      7  f226
      8  f226					      IF	.CYCLES & 1
      9  f226					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f226		       04 00		      nop	0
     11  f228				  -	      ELSE
     12  f228				  -	      bit	VSYNC
     13  f228					      ENDIF
     14  f228				   .CYCLES    SET	.CYCLES - 3
     15  f228					      ENDIF
     16  f228
     17  f228					      REPEAT	.CYCLES / 2
     18  f228		       ea		      nop
     19  f229					      REPEND
    648  f229		       85 0f		      sta	PF2
    649  f22b		       b9 ac f3 	      lda	TitleImageBottom,y
    650  f22e		       85 0e		      sta	PF1
    651  f230
    652  f230							; Clear bottom of index
    653  f230		       98		      tya
    654  f231		       29 fc		      and	#%11111100
    655  f233		       a8		      tay
    656  f234
    657  f234							; Restore border color
      0  f234					      sleep	2
      1  f234				   .CYCLES    SET	2
      2  f234
      3  f234				  -	      IF	.CYCLES < 2
      4  f234				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f234				  -	      ERR
      6  f234					      ENDIF
      7  f234
      8  f234				  -	      IF	.CYCLES & 1
      9  f234				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f234				  -	      nop	0
     11  f234				  -	      ELSE
     12  f234				  -	      bit	VSYNC
     13  f234				  -	      ENDIF
     14  f234				  -.CYCLES    SET	.CYCLES - 3
     15  f234					      ENDIF
     16  f234
     17  f234					      REPEAT	.CYCLES / 2
     18  f234		       ea		      nop
     19  f235					      REPEND
    659  f235		       a9 7e		      lda	#TITLE_BD_COLU
    660  f237		       85 08		      sta	COLUPF
    661  f239
    662  f239		       ca		      dex
    663  f23a		       d0 ce		      bne	.title_image_bottom_loop_wait
    664  f23c
    665  f23c							; Add 4 to image index to skip to next line
    666  f23c					      REPEAT	4
    667  f23c		       c8		      iny
    666  f23c					      REPEND
    667  f23d		       c8		      iny
    666  f23d					      REPEND
    667  f23e		       c8		      iny
    666  f23e					      REPEND
    667  f23f		       c8		      iny
    668  f240					      REPEND
    669  f240
    670  f240		       a2 08		      ldx	#TITLE_LINE_SIZE	; Current scanline
    671  f242
    672  f242		       c0 18		      cpy	#TITLE_IMAGE*TITLE_DATA_SIZE
    673  f244		       d0 cc		      bne	.title_image_bottom_loop
    674  f246
    675  f246				   .title_border_v_bottom
    676  f246
    677  f246							; Number of Scanlines
    678  f246		       a2 20		      ldx	#TITLE_PAD*TITLE_LINE_SIZE
    679  f248
    680  f248							; Mirror playfield
    681  f248		       a9 01		      lda	#%00000001
    682  f24a		       85 0a		      sta	CTRLPF
    683  f24c
    684  f24c							; Draw Playfield
    685  f24c		       a9 10		      lda	#%00010000
    686  f24e		       85 0d		      sta	PF0
    687  f250
    688  f250		       a9 00		      lda	#$00
    689  f252		       85 0e		      sta	PF1
    690  f254		       85 0f		      sta	PF2
    691  f256
    692  f256				   .title_border_v_bottom_loop
    693  f256
    694  f256		       85 02		      sta	WSYNC
    695  f258		       ca		      dex
    696  f259		       d0 fb		      bne	.title_border_v_bottom_loop
    697  f25b
    698  f25b				   .title_border_h_bottom
    699  f25b
    700  f25b							; Number of Scanlines
    701  f25b		       a2 08		      ldx	#TITLE_BORDER*TITLE_LINE_SIZE
    702  f25d
    703  f25d							; Draw Playfield
    704  f25d		       a9 ff		      lda	#$FF
    705  f25f		       85 0d		      sta	PF0
    706  f261		       85 0e		      sta	PF1
    707  f263		       85 0f		      sta	PF2
    708  f265
    709  f265				   .title_border_h_bottom_loop
    710  f265
    711  f265		       85 02		      sta	WSYNC
    712  f267		       ca		      dex
    713  f268		       d0 fb		      bne	.title_border_h_bottom_loop
    714  f26a
    715  f26a				   .title_overscan		; 30 scanlines of overscan
    716  f26a
    717  f26a		       a9 42		      lda	#%01000010
    718  f26c		       85 01		      sta	VBLANK	; end of screen - enter blanking
    719  f26e
    720  f26e		       a2 1e		      ldx	#KERNEL_OVERSCAN
    721  f270				   .title_overscan_loop
    722  f270
    723  f270		       85 02		      sta	WSYNC
    724  f272		       ca		      dex
    725  f273		       d0 fb		      bne	.title_overscan_loop
    726  f275
    727  f275							; Check if Fire Button on controller 1 is pressed
    728  f275		       a5 0c		      lda	INPT4
    729  f277		       10 03		      bpl	GameScreen
    730  f279		       4c 34 f1 	      jmp	TitleFrame
    731  f27c
    732  f27c				   GameScreen
    733  f27c
    734  f27c							; Clear playfields
    735  f27c		       a9 00		      lda	#0
    736  f27e		       85 0d		      sta	PF0
    737  f280		       85 0e		      sta	PF1
    738  f282		       85 0f		      sta	PF2
    739  f284
    740  f284							; Mirror playfield
    741  f284		       a9 01		      lda	#%00000001
    742  f286		       85 0a		      sta	CTRLPF
    743  f288
    744  f288							; Background Color
    745  f288		       a9 00		      lda	#GAME_BG_COLU
    746  f28a		       85 09		      sta	COLUBK
    747  f28c
    748  f28c							; Foreground Color
    749  f28c		       a9 0c		      lda	#GAME_FG_COLU
    750  f28e		       85 08		      sta	COLUPF
    751  f290
    752  f290							; Player Color
    753  f290		       a9 56		      lda	#GAME_P0_COLU
    754  f292		       85 06		      sta	COLUP0
    755  f294
    756  f294							; Mute Audio
    757  f294		       a9 00		      lda	#0
    758  f296		       85 15		      sta	AUDC0
    759  f298		       85 19		      sta	AUDV0
    760  f29a		       85 17		      sta	AUDF0
    761  f29c		       85 16		      sta	AUDC1
    762  f29e		       85 1a		      sta	AUDV1
    763  f2a0		       85 18		      sta	AUDF1
    764  f2a2
    765  f2a2							; Initial Player Control
    766  f2a2		       a9 32		      lda	#50
    767  f2a4		       85 84		      sta	PlayerX
    768  f2a6
    769  f2a6				   GameFrame
    770  f2a6
    771  f2a6				   .game_control
    772  f2a6
    773  f2a6		       a6 84		      ldx	PlayerX
    774  f2a8		       a4 85		      ldy	PlayerY
    775  f2aa		       ad 80 02 	      lda	SWCHA
    776  f2ad
    777  f2ad				   .game_control_check_right
    778  f2ad		       30 01		      bmi	.game_control_check_left
    779  f2af		       e8		      inx
    780  f2b0
    781  f2b0				   .game_control_check_left
    782  f2b0		       2a		      rol
    783  f2b1		       30 01		      bmi	.game_control_check_down
    784  f2b3		       ca		      dex
    785  f2b4
    786  f2b4				   .game_control_check_down
    787  f2b4		       2a		      rol
    788  f2b5		       30 01		      bmi	.game_control_check_up
    789  f2b7		       c8		      iny
    790  f2b8
    791  f2b8				   .game_control_check_up
    792  f2b8		       2a		      rol
    793  f2b9		       30 01		      bmi	.game_control_end
    794  f2bb		       88		      dey
    795  f2bc
    796  f2bc				   .game_control_end
    797  f2bc		       86 84		      stx	PlayerX
    798  f2be		       84 85		      sty	PlayerY
    799  f2c0
    800  f2c0				   .game_vsync		; Start of vertical blank processing
    801  f2c0
    802  f2c0		       a9 00		      lda	#0
    803  f2c2		       85 01		      sta	VBLANK
    804  f2c4
    805  f2c4		       a9 02		      lda	#2
    806  f2c6		       85 00		      sta	VSYNC
    807  f2c8
    808  f2c8							; VSYNCH signal scanlines
    809  f2c8					      REPEAT	#KERNEL_VSYNC
    810  f2c8		       85 02		      sta	WSYNC
    809  f2c8					      REPEND
    810  f2ca		       85 02		      sta	WSYNC
    809  f2ca					      REPEND
    810  f2cc		       85 02		      sta	WSYNC
    811  f2ce					      REPEND
    812  f2ce
    813  f2ce		       a9 00		      lda	#0
    814  f2d0		       85 00		      sta	VSYNC
    815  f2d2
    816  f2d2				   .game_vblank 		; scanlines of vertical blank
    817  f2d2
    818  f2d2		       a2 25		      ldx	#KERNEL_VBLANK
    819  f2d4				   .game_vblank_loop
    820  f2d4
    821  f2d4		       85 02		      sta	WSYNC
    822  f2d6		       ca		      dex
    823  f2d7		       d0 fb		      bne	.game_vblank_loop
    824  f2d9
    825  f2d9				   .game_playfield_top
    826  f2d9
    827  f2d9		       a0 00		      ldy	#0	; Current Image Index
    828  f2db
    829  f2db				   .game_playfield_top_line
    830  f2db
    831  f2db							; Draw Image
    832  f2db		       b9 f4 f3 	      lda	GameImage,y
    833  f2de		       85 0d		      sta	PF0
    834  f2e0		       c8		      iny
    835  f2e1		       b9 f4 f3 	      lda	GameImage,y
    836  f2e4		       85 0e		      sta	PF1
    837  f2e6		       c8		      iny
    838  f2e7		       b9 f4 f3 	      lda	GameImage,y
    839  f2ea		       85 0f		      sta	PF2
    840  f2ec
    841  f2ec							; Clear bottom of index
    842  f2ec		       98		      tya
    843  f2ed		       29 fc		      and	#%11111100
    844  f2ef		       a8		      tay
    845  f2f0
    846  f2f0							; Add 4 to the image index to skip to next line
    847  f2f0					      REPEAT	4
    848  f2f0		       c8		      iny
    847  f2f0					      REPEND
    848  f2f1		       c8		      iny
    847  f2f1					      REPEND
    848  f2f2		       c8		      iny
    847  f2f2					      REPEND
    848  f2f3		       c8		      iny
    849  f2f4					      REPEND
    850  f2f4
    851  f2f4		       a2 08		      ldx	#GAME_PF_LINE_SIZE	; Current scanline
    852  f2f6				   .game_playfield_top_loop
    853  f2f6
    854  f2f6		       85 02		      sta	WSYNC
    855  f2f8		       ca		      dex
    856  f2f9		       d0 fb		      bne	.game_playfield_top_loop
    857  f2fb
    858  f2fb							; Reset scanlines
    859  f2fb		       a2 08		      ldx	#GAME_PF_LINE_SIZE
    860  f2fd
    861  f2fd							; Check if we're at end of top half
    862  f2fd		       c0 30		      cpy	#GAME_PF_SIZE*GAME_PF_DATA_SIZE
    863  f2ff		       d0 da		      bne	.game_playfield_top_line
    864  f301
    865  f301				   .game_player
    866  f301
    867  f301		       a5 84		      lda	PlayerX	; Desired Position
    868  f303		       a2 00		      ldx	#0	; Desired Object (0-4)
    869  f305		       a0 07		      ldy	#GAME_P0_SIZE-1	; Sprite Image index
    870  f307
    871  f307		       20 56 f3 	      jsr	SetHorizPos
    872  f30a
    873  f30a				   .game_player_loop
    874  f30a
    875  f30a		       b9 24 f4 	      lda	PlayerSprite,y
    876  f30d		       85 02		      sta	WSYNC
    877  f30f		       85 1b		      sta	GRP0
    878  f311		       85 2a		      sta	HMOVE
    879  f313
    880  f313		       88		      dey
    881  f314		       d0 f4		      bne	.game_player_loop
    882  f316
    883  f316							; Reset Player
    884  f316		       a9 00		      lda	#0
    885  f318		       85 1b		      sta	GRP0
    886  f31a
    887  f31a				   .game_playfield_bottom
    888  f31a
    889  f31a		       a0 28		      ldy	#(GAME_PF_SIZE-2)*GAME_PF_DATA_SIZE	; Current image index
    890  f31c
    891  f31c				   .game_playfield_bottom_line
    892  f31c
    893  f31c							; Draw Image
    894  f31c		       b9 f4 f3 	      lda	GameImage,y
    895  f31f		       85 0d		      sta	PF0
    896  f321		       c8		      iny
    897  f322		       b9 f4 f3 	      lda	GameImage,y
    898  f325		       85 0e		      sta	PF1
    899  f327		       c8		      iny
    900  f328		       b9 f4 f3 	      lda	GameImage,y
    901  f32b		       85 0f		      sta	PF2
    902  f32d
    903  f32d							; Clear bottom of index
    904  f32d		       98		      tya
    905  f32e		       29 fc		      and	#%11111100
    906  f330		       a8		      tay
    907  f331
    908  f331							; Subtract 4 from the image index to skip to next line
    909  f331					      REPEAT	4
    910  f331		       88		      dey
    909  f331					      REPEND
    910  f332		       88		      dey
    909  f332					      REPEND
    910  f333		       88		      dey
    909  f333					      REPEND
    910  f334		       88		      dey
    911  f335					      REPEND
    912  f335
    913  f335		       a2 08		      ldx	#GAME_PF_LINE_SIZE	; Current scanline
    914  f337				   .game_playfield_bottom_loop
    915  f337
    916  f337		       85 02		      sta	WSYNC
    917  f339		       ca		      dex
    918  f33a		       d0 fb		      bne	.game_playfield_bottom_loop
    919  f33c
    920  f33c							; Check if we're at the end of the bottom half
    921  f33c		       c0 fc		      cpy	#0-GAME_PF_DATA_SIZE
    922  f33e		       d0 dc		      bne	.game_playfield_bottom_line
    923  f340
    924  f340							; Clear Playfields
    925  f340		       a9 00		      lda	#0
    926  f342		       85 0d		      sta	PF0
    927  f344		       85 0e		      sta	PF1
    928  f346		       85 0f		      sta	PF2
    929  f348
    930  f348				   .game_overscan		; 30 scanlines of overscan
    931  f348
    932  f348		       a9 42		      lda	#%01000010
    933  f34a		       85 01		      sta	VBLANK	; end of screen - enter blanking
    934  f34c
    935  f34c		       a2 1e		      ldx	#KERNEL_OVERSCAN
    936  f34e				   .game_overscan_loop
    937  f34e
    938  f34e		       85 02		      sta	WSYNC
    939  f350		       ca		      dex
    940  f351		       d0 fb		      bne	.game_overscan_loop
    941  f353
    942  f353		       4c a6 f2 	      jmp	GameFrame
    943  f356
    944  f356							; Inputs: A = desired x position, x = desired object (0-4)
    945  f356				   SetHorizPos
    946  f356		       85 02		      sta	WSYNC	; Sync to start of scanline
    947  f358		       24 00		      bit	0
    948  f35a		       38		      sec		; Set the carry flag so no borrow will be applied during the division
    949  f35b				   .divideby15
    950  f35b		       e9 0f		      sbc	#15	; Waste the necessary amount of time dividing x-pos by 15
    951  f35d		       b0 fc		      bcs	.divideby15
    952  f35f		       49 07		      eor	#7
    953  f361		       0a		      asl
    954  f362		       0a		      asl
    955  f363		       0a		      asl
    956  f364		       0a		      asl
    957  f365		       95 10		      sta	RESP0,x
    958  f367		       95 20		      sta	HMP0,x
    959  f369		       60		      rts
    960  f36a
    961  f36a				   LogoData		; 6 bytes over 8 lines each, total of 48 lines
    962  f36a
    963  f36a		       46		      .BYTE.b	%01000110	; Reversed
    964  f36b		       60		      .BYTE.b	%01100000	; First 4 bits reversed
    965  f36c
    966  f36c		       aa		      .BYTE.b	%10101010
    967  f36d		       a0		      .BYTE.b	%10100000
    968  f36e
    969  f36e		       2a		      .BYTE.b	%00101010
    970  f36f		       a0		      .BYTE.b	%10100000
    971  f370
    972  f370		       aa		      .BYTE.b	%10101010
    973  f371		       a0		      .BYTE.b	%10100000
    974  f372
    975  f372		       46		      .BYTE.b	%01000110
    976  f373		       60		      .BYTE.b	%01100000
    977  f374
    978  f374		       00		      .BYTE.b	%00000000
    979  f375		       00		      .BYTE.b	%00000000
    980  f376
    981  f376		       88		      .BYTE.b	%10001000
    982  f377		       80		      .BYTE.b	%10000000
    983  f378
    984  f378		       54		      .BYTE.b	%01010100
    985  f379		       50		      .BYTE.b	%01010000
    986  f37a
    987  f37a		       22		      .BYTE.b	%00100010
    988  f37b		       20		      .BYTE.b	%00100000
    989  f37c
    990  f37c				   LogoAudio0
    991  f37c
    992  f37c		       1d		      .BYTE.b	#29	; C
    993  f37d		       17		      .BYTE.b	#23	; E
    994  f37e		       13		      .BYTE.b	#19	; G
    995  f37f		       0f		      .BYTE.b	#15	; A
    996  f380		       17		      .BYTE.b	#23	; E
    997  f381		       13		      .BYTE.b	#19	; G
    998  f382		       0f		      .BYTE.b	#15	; B
    999  f383		       0e		      .BYTE.b	#14	; C
   1000  f384		       0b		      .BYTE.b	#11	; E
   1001  f385		       0b		      .BYTE.b	#11
   1002  f386		       0b		      .BYTE.b	#11
   1003  f387		       0b		      .BYTE.b	#11
   1004  f388
   1005  f388				   LogoAudio1
   1006  f388
   1007  f388		       1f		      .BYTE.b	#31	; C
   1008  f389		       1f		      .BYTE.b	#31
   1009  f38a		       1f		      .BYTE.b	#31
   1010  f38b		       1f		      .BYTE.b	#31
   1011  f38c		       19		      .BYTE.b	#25	; E
   1012  f38d		       19		      .BYTE.b	#25
   1013  f38e		       19		      .BYTE.b	#25
   1014  f38f		       19		      .BYTE.b	#25
   1015  f390		       14		      .BYTE.b	#20	; G
   1016  f391		       14		      .BYTE.b	#20
   1017  f392		       14		      .BYTE.b	#20
   1018  f393		       14		      .BYTE.b	#20
   1019  f394
   1020  f394				   TitleImageTop		; Spider
   1021  f394
   1022  f394		       1e		      .BYTE.b	%00011110	; Normal
   1023  f395		       77		      .BYTE.b	%01110111	; Reversed
   1024  f396		       e7		      .BYTE.b	%11100111	; Normal
   1025  f397		       0e		      .BYTE.b	%00001110	; Reversed
   1026  f398
   1027  f398		       10		      .BYTE.b	%00010000
   1028  f399		       25		      .BYTE.b	%00100101
   1029  f39a		       94		      .BYTE.b	%10010100
   1030  f39b		       12		      .BYTE.b	%00010010
   1031  f39c
   1032  f39c		       10		      .BYTE.b	%00010000
   1033  f39d		       27		      .BYTE.b	%00100111
   1034  f39e		       96		      .BYTE.b	%10010110
   1035  f39f		       12		      .BYTE.b	%00010010
   1036  f3a0
   1037  f3a0		       1c		      .BYTE.b	%00011100
   1038  f3a1		       21		      .BYTE.b	%00100001
   1039  f3a2		       94		      .BYTE.b	%10010100
   1040  f3a3		       0e		      .BYTE.b	%00001110
   1041  f3a4
   1042  f3a4		       04		      .BYTE.b	%00000100
   1043  f3a5		       21		      .BYTE.b	%00100001
   1044  f3a6		       94		      .BYTE.b	%10010100
   1045  f3a7		       12		      .BYTE.b	%00010010
   1046  f3a8
   1047  f3a8		       1c		      .BYTE.b	%00011100
   1048  f3a9		       71		      .BYTE.b	%01110001
   1049  f3aa		       e7		      .BYTE.b	%11100111
   1050  f3ab		       12		      .BYTE.b	%00010010
   1051  f3ac
   1052  f3ac				   TitleImageBottom		; Web & Art
   1053  f3ac
   1054  f3ac		       01		      .BYTE.b	%00000001	; Normal
   1055  f3ad		       03		      .BYTE.b	%00000011	; Reversed
   1056  f3ae		       8b		      .BYTE.b	%10001011	; Normal
   1057  f3af		       1d		      .BYTE.b	%00011101	; Reversed
   1058  f3b0
   1059  f3b0		       0a		      .BYTE.b	%00001010
   1060  f3b1		       14		      .BYTE.b	%00010100
   1061  f3b2		       8a		      .BYTE.b	%10001010
   1062  f3b3		       24		      .BYTE.b	%00100100
   1063  f3b4
   1064  f3b4		       15		      .BYTE.b	%00010101
   1065  f3b5		       2a		      .BYTE.b	%00101010
   1066  f3b6		       8b		      .BYTE.b	%10001011
   1067  f3b7		       1c		      .BYTE.b	%00011100
   1068  f3b8
   1069  f3b8		       24		      .BYTE.b	%00100100
   1070  f3b9		       49		      .BYTE.b	%01001001
   1071  f3ba		       8a		      .BYTE.b	%10001010
   1072  f3bb		       24		      .BYTE.b	%00100100
   1073  f3bc
   1074  f3bc		       22		      .BYTE.b	%00100010
   1075  f3bd		       44		      .BYTE.b	%01000100
   1076  f3be		       aa		      .BYTE.b	%10101010
   1077  f3bf		       24		      .BYTE.b	%00100100
   1078  f3c0
   1079  f3c0		       11		      .BYTE.b	%00010001
   1080  f3c1		       23		      .BYTE.b	%00100011
   1081  f3c2		       53		      .BYTE.b	%01010011
   1082  f3c3		       1d		      .BYTE.b	%00011101
   1083  f3c4
   1084  f3c4				   TitleAudio0
   1085  f3c4
   1086  f3c4		       0f		      .BYTE.b	#15	; B
   1087  f3c5		       13		      .BYTE.b	#19	; G
   1088  f3c6		       17		      .BYTE.b	#23	; E
   1089  f3c7		       13		      .BYTE.b	#19	; G
   1090  f3c8		       0e		      .BYTE.b	#14	; C
   1091  f3c9		       13		      .BYTE.b	#19
   1092  f3ca		       17		      .BYTE.b	#23
   1093  f3cb		       13		      .BYTE.b	#19
   1094  f3cc		       0c		      .BYTE.b	#12	; D
   1095  f3cd		       13		      .BYTE.b	#19
   1096  f3ce		       17		      .BYTE.b	#23
   1097  f3cf		       13		      .BYTE.b	#19
   1098  f3d0		       0e		      .BYTE.b	#14	; C
   1099  f3d1		       13		      .BYTE.b	#19
   1100  f3d2		       17		      .BYTE.b	#23
   1101  f3d3		       13		      .BYTE.b	#19
   1102  f3d4
   1103  f3d4				   TitleTone1
   1104  f3d4
   1105  f3d4		       0f		      .BYTE.b	#15	; Electronic Rumble
   1106  f3d5		       ff		      .BYTE.b	#$FF
   1107  f3d6		       01		      .BYTE.b	#1	; Low Pure Tone
   1108  f3d7		       01		      .BYTE.b	#1
   1109  f3d8		       08		      .BYTE.b	#8	; White Noise
   1110  f3d9		       01		      .BYTE.b	#1
   1111  f3da		       01		      .BYTE.b	#1
   1112  f3db		       ff		      .BYTE.b	#$FF
   1113  f3dc		       ff		      .BYTE.b	#$FF
   1114  f3dd		       0f		      .BYTE.b	#15
   1115  f3de		       ff		      .BYTE.b	#$FF
   1116  f3df		       ff		      .BYTE.b	#$FF
   1117  f3e0		       08		      .BYTE.b	#8
   1118  f3e1		       ff		      .BYTE.b	#$FF
   1119  f3e2		       01		      .BYTE.b	#1
   1120  f3e3		       01		      .BYTE.b	#1
   1121  f3e4
   1122  f3e4				   TitleAudio1
   1123  f3e4
   1124  f3e4		       1d		      .BYTE.b	#29	; Kick
   1125  f3e5		       ff		      .BYTE.b	#$FF
   1126  f3e6		       1f		      .BYTE.b	#31	; C
   1127  f3e7		       1f		      .BYTE.b	#31
   1128  f3e8		       07		      .BYTE.b	#7	; Snare
   1129  f3e9		       1f		      .BYTE.b	#31
   1130  f3ea		       1f		      .BYTE.b	#31
   1131  f3eb		       ff		      .BYTE.b	#$FF
   1132  f3ec		       ff		      .BYTE.b	#$FF
   1133  f3ed		       1d		      .BYTE.b	#29
   1134  f3ee		       ff		      .BYTE.b	#$FF
   1135  f3ef		       ff		      .BYTE.b	#$FF
   1136  f3f0		       07		      .BYTE.b	#7
   1137  f3f1		       ff		      .BYTE.b	#$FF
   1138  f3f2		       17		      .BYTE.b	#23	; F
   1139  f3f3		       18		      .BYTE.b	#24	; E
   1140  f3f4
   1141  f3f4				   GameImage		; Just one quadrant of web
   1142  f3f4
   1143  f3f4		       00		      .BYTE.b	%00000000	; First 4 bits reversed
   1144  f3f5		       00		      .BYTE.b	%00000000	; Normal
   1145  f3f6		       03		      .BYTE.b	%00000011	; Reversed
   1146  f3f7		       00		      .BYTE.b	%00000000	; Empty
   1147  f3f8
   1148  f3f8		       00		      .BYTE.b	%00000000
   1149  f3f9		       00		      .BYTE.b	%00000000
   1150  f3fa		       3f		      .BYTE.b	%00111111
   1151  f3fb		       00		      .BYTE.b	%00000000
   1152  f3fc
   1153  f3fc		       00		      .BYTE.b	%00000000
   1154  f3fd		       01		      .BYTE.b	%00000001
   1155  f3fe		       c2		      .BYTE.b	%11000010
   1156  f3ff		       00		      .BYTE.b	%00000000
   1157  f400
   1158  f400		       00		      .BYTE.b	%00000000
   1159  f401		       01		      .BYTE.b	%00000001
   1160  f402		       04		      .BYTE.b	%00000100
   1161  f403		       00		      .BYTE.b	%00000000
   1162  f404
   1163  f404		       00		      .BYTE.b	%00000000
   1164  f405		       02		      .BYTE.b	%00000010
   1165  f406		       08		      .BYTE.b	%00001000
   1166  f407		       00		      .BYTE.b	%00000000
   1167  f408
   1168  f408		       00		      .BYTE.b	%00000000
   1169  f409		       0c		      .BYTE.b	%00001100
   1170  f40a		       08		      .BYTE.b	%00001000
   1171  f40b		       00		      .BYTE.b	%00000000
   1172  f40c
   1173  f40c		       30		      .BYTE.b	%00110000
   1174  f40d		       30		      .BYTE.b	%00110000
   1175  f40e		       10		      .BYTE.b	%00010000
   1176  f40f		       00		      .BYTE.b	%00000000
   1177  f410
   1178  f410		       e0		      .BYTE.b	%11100000
   1179  f411		       c0		      .BYTE.b	%11000000
   1180  f412		       20		      .BYTE.b	%00100000
   1181  f413		       00		      .BYTE.b	%00000000
   1182  f414
   1183  f414		       20		      .BYTE.b	%00100000
   1184  f415		       38		      .BYTE.b	%00111000
   1185  f416		       20		      .BYTE.b	%00100000
   1186  f417		       00		      .BYTE.b	%00000000
   1187  f418
   1188  f418		       40		      .BYTE.b	%01000000
   1189  f419		       07		      .BYTE.b	%00000111
   1190  f41a		       41		      .BYTE.b	%01000001
   1191  f41b		       00		      .BYTE.b	%00000000
   1192  f41c
   1193  f41c		       40		      .BYTE.b	%01000000
   1194  f41d		       00		      .BYTE.b	%00000000
   1195  f41e		       8e		      .BYTE.b	%10001110
   1196  f41f		       00		      .BYTE.b	%00000000
   1197  f420
   1198  f420		       80		      .BYTE.b	%10000000
   1199  f421		       00		      .BYTE.b	%00000000
   1200  f422		       f0		      .BYTE.b	%11110000
   1201  f423		       00		      .BYTE.b	%00000000
   1202  f424
   1203  f424				   PlayerSprite 		; Sprites are reversed in y direction
   1204  f424
   1205  f424							; Up
   1206  f424		       99		      .BYTE.b	%10011001
   1207  f425		       bd		      .BYTE.b	%10111101
   1208  f426		       7e		      .BYTE.b	%01111110
   1209  f427		       3c		      .BYTE.b	%00111100
   1210  f428		       7e		      .BYTE.b	%01111110
   1211  f429		       99		      .BYTE.b	%10011001
   1212  f42a		       bd		      .BYTE.b	%10111101
   1213  f42b		       99		      .BYTE.b	%10011001
   1214  f42c
   1215  f42c							; Right
   1216  f42c		       c7		      .BYTE.b	%11000111
   1217  f42d		       28		      .BYTE.b	%00101000
   1218  f42e		       7a		      .BYTE.b	%01111010
   1219  f42f		       ff		      .BYTE.b	%11111111
   1220  f430		       ff		      .BYTE.b	%11111111
   1221  f431		       7a		      .BYTE.b	%01111010
   1222  f432		       28		      .BYTE.b	%00101000
   1223  f433		       c7		      .BYTE.b	%11000111
   1224  f434
   1225  f434							; Down
   1226  f434		       99		      .BYTE.b	%10011001
   1227  f435		       bd		      .BYTE.b	%10111101
   1228  f436		       7e		      .BYTE.b	%01111110
   1229  f437		       3c		      .BYTE.b	%00111100
   1230  f438		       7e		      .BYTE.b	%01111110
   1231  f439		       99		      .BYTE.b	%10011001
   1232  f43a		       bd		      .BYTE.b	%10111101
   1233  f43b		       99		      .BYTE.b	%10011001
   1234  f43c
   1235  f43c							; Left
   1236  f43c		       e3		      .BYTE.b	%11100011
   1237  f43d		       14		      .BYTE.b	%00010100
   1238  f43e		       5e		      .BYTE.b	%01011110
   1239  f43f		       ff		      .BYTE.b	%11111111
   1240  f440		       ff		      .BYTE.b	%11111111
   1241  f441		       5e		      .BYTE.b	%01011110
   1242  f442		       14		      .BYTE.b	%00010100
   1243  f443		       e3		      .BYTE.b	%11100011
   1244  f444
   1245  f444							;-------------------------------------------
   1246  f444
   1247  fffa					      ORG	$FFFA	; End of cart area
   1248  fffa
   1249  fffa				   InterruptVectors
   1250  fffa
   1251  fffa		       00 f0		      .word.w	Reset	; NMI
   1252  fffc		       00 f0		      .word.w	Reset	; RESET
   1253  fffe		       00 f0		      .word.w	Reset	; IRQ
   1254  10000
   1255  10000					       END
